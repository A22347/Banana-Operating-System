
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 d8 fb 00 00       	call   c000fbf8 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 63 86 02 00       	call   c0028688 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 32 92 02 c0       	mov    ebx,0xc0029232
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 40 92 02 c0    	cmp    ebx,0xc0029240
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 58 db 02 c0       	mov    eax,0xc002db58
c0000049:	3d 58 db 02 c0       	cmp    eax,0xc002db58
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 58 db 02 c0       	push   0xc002db58
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 58 db 02 c0       	mov    eax,0xc002db58
c0000075:	2d 58 db 02 c0       	sub    eax,0xc002db58
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 58 db 02 c0       	push   0xc002db58
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 88 e1 02 c0 00 	cmp    BYTE PTR ds:0xc002e188,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 48 92 02 c0       	mov    ebx,0xc0029248
c00000bb:	81 eb 44 92 02 c0    	sub    ebx,0xc0029244
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 44 92 02 c0       	mov    esi,0xc0029244
c00000ca:	a1 8c e1 02 c0       	mov    eax,ds:0xc002e18c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 8c e1 02 c0       	mov    ds:0xc002e18c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 8c e1 02 c0       	mov    eax,ds:0xc002e18c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 58 db 02 c0       	push   0xc002db58
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 88 e1 02 c0 01 	mov    BYTE PTR ds:0xc002e188,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 90 e1 02 c0       	push   0xc002e190
c000012c:	68 58 db 02 c0       	push   0xc002db58
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 33 d6 01 00       	call   c001d9ce <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 5c 29 01 00       	call   c0012d0f <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 11 d6 01 00       	call   c001d9ce <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 5f da 01 00       	call   c001de3b <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 0d e0 01 00       	call   c001e3f2 <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 d0 e5 02 c0 	lgdtd  ds:0xc002e5d0
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 3a 46 01 00       	call   c0014c13 <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>
c000063d:	66 90                	xchg   ax,ax
c000063f:	90                   	nop

c0000640 <memcmp>:
c0000640:	56                   	push   esi
c0000641:	53                   	push   ebx
c0000642:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000646:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000064a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000064e:	85 f6                	test   esi,esi
c0000650:	74 1d                	je     c000066f <memcmp+0x2f>
c0000652:	8a 08                	mov    cl,BYTE PTR [eax]
c0000654:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000657:	38 cb                	cmp    bl,cl
c0000659:	75 19                	jne    c0000674 <memcmp+0x34>
c000065b:	01 c6                	add    esi,eax
c000065d:	eb 0a                	jmp    c0000669 <memcmp+0x29>
c000065f:	90                   	nop
c0000660:	8a 08                	mov    cl,BYTE PTR [eax]
c0000662:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000665:	38 d9                	cmp    cl,bl
c0000667:	75 0b                	jne    c0000674 <memcmp+0x34>
c0000669:	40                   	inc    eax
c000066a:	42                   	inc    edx
c000066b:	39 f0                	cmp    eax,esi
c000066d:	75 f1                	jne    c0000660 <memcmp+0x20>
c000066f:	31 c0                	xor    eax,eax
c0000671:	5b                   	pop    ebx
c0000672:	5e                   	pop    esi
c0000673:	c3                   	ret    
c0000674:	0f b6 c1             	movzx  eax,cl
c0000677:	29 d8                	sub    eax,ebx
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    

c000067c <memmove>:
c000067c:	55                   	push   ebp
c000067d:	57                   	push   edi
c000067e:	56                   	push   esi
c000067f:	53                   	push   ebx
c0000680:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000684:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000688:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000068c:	39 dd                	cmp    ebp,ebx
c000068e:	0f 83 80 00 00 00    	jae    c0000714 <memmove+0x98>
c0000694:	85 d2                	test   edx,edx
c0000696:	74 74                	je     c000070c <memmove+0x90>
c0000698:	8d 4b 04             	lea    ecx,[ebx+0x4]
c000069b:	8d 75 04             	lea    esi,[ebp+0x4]
c000069e:	39 cd                	cmp    ebp,ecx
c00006a0:	0f 93 c1             	setae  cl
c00006a3:	39 f3                	cmp    ebx,esi
c00006a5:	0f 93 c0             	setae  al
c00006a8:	89 c6                	mov    esi,eax
c00006aa:	09 ce                	or     esi,ecx
c00006ac:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006af:	89 f0                	mov    eax,esi
c00006b1:	83 f9 0c             	cmp    ecx,0xc
c00006b4:	0f 97 c1             	seta   cl
c00006b7:	84 c8                	test   al,cl
c00006b9:	74 75                	je     c0000730 <memmove+0xb4>
c00006bb:	89 e9                	mov    ecx,ebp
c00006bd:	09 d9                	or     ecx,ebx
c00006bf:	83 e1 03             	and    ecx,0x3
c00006c2:	75 6c                	jne    c0000730 <memmove+0xb4>
c00006c4:	89 d7                	mov    edi,edx
c00006c6:	89 d9                	mov    ecx,ebx
c00006c8:	83 e7 fc             	and    edi,0xfffffffc
c00006cb:	89 ee                	mov    esi,ebp
c00006cd:	01 df                	add    edi,ebx
c00006cf:	90                   	nop
c00006d0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006d2:	83 c6 04             	add    esi,0x4
c00006d5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006d8:	83 c1 04             	add    ecx,0x4
c00006db:	39 f9                	cmp    ecx,edi
c00006dd:	75 f1                	jne    c00006d0 <memmove+0x54>
c00006df:	89 d1                	mov    ecx,edx
c00006e1:	89 d7                	mov    edi,edx
c00006e3:	83 e1 fc             	and    ecx,0xfffffffc
c00006e6:	29 cf                	sub    edi,ecx
c00006e8:	01 cb                	add    ebx,ecx
c00006ea:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006ee:	39 ca                	cmp    edx,ecx
c00006f0:	74 1a                	je     c000070c <memmove+0x90>
c00006f2:	8a 03                	mov    al,BYTE PTR [ebx]
c00006f4:	83 ff 01             	cmp    edi,0x1
c00006f7:	88 06                	mov    BYTE PTR [esi],al
c00006f9:	74 11                	je     c000070c <memmove+0x90>
c00006fb:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00006fe:	83 ff 02             	cmp    edi,0x2
c0000701:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000704:	74 06                	je     c000070c <memmove+0x90>
c0000706:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000709:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000070c:	5b                   	pop    ebx
c000070d:	89 e8                	mov    eax,ebp
c000070f:	5e                   	pop    esi
c0000710:	5f                   	pop    edi
c0000711:	5d                   	pop    ebp
c0000712:	c3                   	ret    
c0000713:	90                   	nop
c0000714:	76 f6                	jbe    c000070c <memmove+0x90>
c0000716:	85 d2                	test   edx,edx
c0000718:	74 f2                	je     c000070c <memmove+0x90>
c000071a:	4b                   	dec    ebx
c000071b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000071e:	66 90                	xchg   ax,ax
c0000720:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000723:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000726:	4a                   	dec    edx
c0000727:	75 f7                	jne    c0000720 <memmove+0xa4>
c0000729:	5b                   	pop    ebx
c000072a:	89 e8                	mov    eax,ebp
c000072c:	5e                   	pop    esi
c000072d:	5f                   	pop    edi
c000072e:	5d                   	pop    ebp
c000072f:	c3                   	ret    
c0000730:	01 ea                	add    edx,ebp
c0000732:	89 e9                	mov    ecx,ebp
c0000734:	8a 03                	mov    al,BYTE PTR [ebx]
c0000736:	41                   	inc    ecx
c0000737:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000073a:	43                   	inc    ebx
c000073b:	39 d1                	cmp    ecx,edx
c000073d:	75 f5                	jne    c0000734 <memmove+0xb8>
c000073f:	eb cb                	jmp    c000070c <memmove+0x90>
c0000741:	8d 76 00             	lea    esi,[esi+0x0]

c0000744 <memcpy>:
c0000744:	57                   	push   edi
c0000745:	56                   	push   esi
c0000746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000074a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000074e:	a8 03                	test   al,0x3
c0000750:	74 12                	je     c0000764 <memcpy+0x20>
c0000752:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000756:	89 c1                	mov    ecx,eax
c0000758:	fc                   	cld    
c0000759:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000075b:	29 c7                	sub    edi,eax
c000075d:	5e                   	pop    esi
c000075e:	89 f8                	mov    eax,edi
c0000760:	5f                   	pop    edi
c0000761:	c3                   	ret    
c0000762:	66 90                	xchg   ax,ax
c0000764:	89 c1                	mov    ecx,eax
c0000766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076a:	c1 e9 02             	shr    ecx,0x2
c000076d:	fc                   	cld    
c000076e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000770:	29 c7                	sub    edi,eax
c0000772:	5e                   	pop    esi
c0000773:	89 f8                	mov    eax,edi
c0000775:	5f                   	pop    edi
c0000776:	c3                   	ret    
c0000777:	90                   	nop

c0000778 <memset>:
c0000778:	57                   	push   edi
c0000779:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000077d:	85 c9                	test   ecx,ecx
c000077f:	74 0b                	je     c000078c <memset+0x14>
c0000781:	fc                   	cld    
c0000782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000786:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000078a:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000078c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000790:	5f                   	pop    edi
c0000791:	c3                   	ret    
c0000792:	66 90                	xchg   ax,ax

c0000794 <strlen>:
c0000794:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000798:	31 c0                	xor    eax,eax
c000079a:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c000079d:	74 09                	je     c00007a8 <strlen+0x14>
c000079f:	90                   	nop
c00007a0:	40                   	inc    eax
c00007a1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007a5:	75 f9                	jne    c00007a0 <strlen+0xc>
c00007a7:	c3                   	ret    
c00007a8:	c3                   	ret    
c00007a9:	8d 76 00             	lea    esi,[esi+0x0]

c00007ac <strpbrk>:
c00007ac:	57                   	push   edi
c00007ad:	56                   	push   esi
c00007ae:	53                   	push   ebx
c00007af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007b7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 21                	je     c00007de <strpbrk+0x32>
c00007bd:	8a 07                	mov    al,BYTE PTR [edi]
c00007bf:	84 c0                	test   al,al
c00007c1:	74 14                	je     c00007d7 <strpbrk+0x2b>
c00007c3:	38 d8                	cmp    al,bl
c00007c5:	74 19                	je     c00007e0 <strpbrk+0x34>
c00007c7:	89 fa                	mov    edx,edi
c00007c9:	eb 05                	jmp    c00007d0 <strpbrk+0x24>
c00007cb:	90                   	nop
c00007cc:	38 d9                	cmp    cl,bl
c00007ce:	74 10                	je     c00007e0 <strpbrk+0x34>
c00007d0:	42                   	inc    edx
c00007d1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007d3:	84 c9                	test   cl,cl
c00007d5:	75 f5                	jne    c00007cc <strpbrk+0x20>
c00007d7:	46                   	inc    esi
c00007d8:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007da:	84 db                	test   bl,bl
c00007dc:	75 e1                	jne    c00007bf <strpbrk+0x13>
c00007de:	31 f6                	xor    esi,esi
c00007e0:	89 f0                	mov    eax,esi
c00007e2:	5b                   	pop    ebx
c00007e3:	5e                   	pop    esi
c00007e4:	5f                   	pop    edi
c00007e5:	c3                   	ret    
c00007e6:	66 90                	xchg   ax,ax

c00007e8 <strtok>:
c00007e8:	56                   	push   esi
c00007e9:	53                   	push   ebx
c00007ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007f2:	85 db                	test   ebx,ebx
c00007f4:	75 07                	jne    c00007fd <strtok+0x15>
c00007f6:	eb 2c                	jmp    c0000824 <strtok+0x3c>
c00007f8:	43                   	inc    ebx
c00007f9:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007fd:	56                   	push   esi
c00007fe:	53                   	push   ebx
c00007ff:	e8 a8 ff ff ff       	call   c00007ac <strpbrk>
c0000804:	5a                   	pop    edx
c0000805:	a3 a8 e1 02 c0       	mov    ds:0xc002e1a8,eax
c000080a:	59                   	pop    ecx
c000080b:	39 d8                	cmp    eax,ebx
c000080d:	74 e9                	je     c00007f8 <strtok+0x10>
c000080f:	85 c0                	test   eax,eax
c0000811:	74 1b                	je     c000082e <strtok+0x46>
c0000813:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000816:	8d 50 01             	lea    edx,[eax+0x1]
c0000819:	89 d8                	mov    eax,ebx
c000081b:	89 15 a8 e1 02 c0    	mov    DWORD PTR ds:0xc002e1a8,edx
c0000821:	5b                   	pop    ebx
c0000822:	5e                   	pop    esi
c0000823:	c3                   	ret    
c0000824:	8b 1d a8 e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e1a8
c000082a:	85 db                	test   ebx,ebx
c000082c:	75 cf                	jne    c00007fd <strtok+0x15>
c000082e:	31 c0                	xor    eax,eax
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	90                   	nop

c0000834 <strcpy>:
c0000834:	53                   	push   ebx
c0000835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000083d:	89 c3                	mov    ebx,eax
c000083f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000841:	84 d2                	test   dl,dl
c0000843:	74 0d                	je     c0000852 <strcpy+0x1e>
c0000845:	8d 76 00             	lea    esi,[esi+0x0]
c0000848:	88 13                	mov    BYTE PTR [ebx],dl
c000084a:	41                   	inc    ecx
c000084b:	43                   	inc    ebx
c000084c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000084e:	84 d2                	test   dl,dl
c0000850:	75 f6                	jne    c0000848 <strcpy+0x14>
c0000852:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000855:	5b                   	pop    ebx
c0000856:	c3                   	ret    
c0000857:	90                   	nop

c0000858 <strncpy>:
c0000858:	55                   	push   ebp
c0000859:	57                   	push   edi
c000085a:	56                   	push   esi
c000085b:	53                   	push   ebx
c000085c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000860:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000864:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000868:	85 c0                	test   eax,eax
c000086a:	74 39                	je     c00008a5 <strncpy+0x4d>
c000086c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000086e:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000871:	8d 55 01             	lea    edx,[ebp+0x1]
c0000874:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000877:	84 db                	test   bl,bl
c0000879:	74 31                	je     c00008ac <strncpy+0x54>
c000087b:	85 c9                	test   ecx,ecx
c000087d:	74 26                	je     c00008a5 <strncpy+0x4d>
c000087f:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000882:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000885:	8d 55 02             	lea    edx,[ebp+0x2]
c0000888:	8d 46 02             	lea    eax,[esi+0x2]
c000088b:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000088e:	84 db                	test   bl,bl
c0000890:	75 0f                	jne    c00008a1 <strncpy+0x49>
c0000892:	eb 18                	jmp    c00008ac <strncpy+0x54>
c0000894:	40                   	inc    eax
c0000895:	42                   	inc    edx
c0000896:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000899:	49                   	dec    ecx
c000089a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000089d:	84 db                	test   bl,bl
c000089f:	74 0b                	je     c00008ac <strncpy+0x54>
c00008a1:	85 c9                	test   ecx,ecx
c00008a3:	75 ef                	jne    c0000894 <strncpy+0x3c>
c00008a5:	5b                   	pop    ebx
c00008a6:	89 e8                	mov    eax,ebp
c00008a8:	5e                   	pop    esi
c00008a9:	5f                   	pop    edi
c00008aa:	5d                   	pop    ebp
c00008ab:	c3                   	ret    
c00008ac:	85 c9                	test   ecx,ecx
c00008ae:	74 f5                	je     c00008a5 <strncpy+0x4d>
c00008b0:	fc                   	cld    
c00008b1:	31 c0                	xor    eax,eax
c00008b3:	89 d7                	mov    edi,edx
c00008b5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008b7:	89 e8                	mov    eax,ebp
c00008b9:	5b                   	pop    ebx
c00008ba:	5e                   	pop    esi
c00008bb:	5f                   	pop    edi
c00008bc:	5d                   	pop    ebp
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strcmp>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008ca:	8a 16                	mov    dl,BYTE PTR [esi]
c00008cc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008cf:	38 d1                	cmp    cl,dl
c00008d1:	75 1d                	jne    c00008f0 <strcmp+0x30>
c00008d3:	84 c9                	test   cl,cl
c00008d5:	74 21                	je     c00008f8 <strcmp+0x38>
c00008d7:	b8 01 00 00 00       	mov    eax,0x1
c00008dc:	eb 07                	jmp    c00008e5 <strcmp+0x25>
c00008de:	66 90                	xchg   ax,ax
c00008e0:	40                   	inc    eax
c00008e1:	84 d2                	test   dl,dl
c00008e3:	74 13                	je     c00008f8 <strcmp+0x38>
c00008e5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008e8:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 f0                	je     c00008e0 <strcmp+0x20>
c00008f0:	0f b6 c2             	movzx  eax,dl
c00008f3:	5b                   	pop    ebx
c00008f4:	29 c8                	sub    eax,ecx
c00008f6:	5e                   	pop    esi
c00008f7:	c3                   	ret    
c00008f8:	31 c0                	xor    eax,eax
c00008fa:	5b                   	pop    ebx
c00008fb:	5e                   	pop    esi
c00008fc:	c3                   	ret    
c00008fd:	8d 76 00             	lea    esi,[esi+0x0]

c0000900 <strchr>:
c0000900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000904:	8a 10                	mov    dl,BYTE PTR [eax]
c0000906:	84 d2                	test   dl,dl
c0000908:	74 15                	je     c000091f <strchr+0x1f>
c000090a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000090e:	38 ca                	cmp    dl,cl
c0000910:	75 06                	jne    c0000918 <strchr+0x18>
c0000912:	eb 0e                	jmp    c0000922 <strchr+0x22>
c0000914:	38 ca                	cmp    dl,cl
c0000916:	74 09                	je     c0000921 <strchr+0x21>
c0000918:	40                   	inc    eax
c0000919:	8a 10                	mov    dl,BYTE PTR [eax]
c000091b:	84 d2                	test   dl,dl
c000091d:	75 f5                	jne    c0000914 <strchr+0x14>
c000091f:	31 c0                	xor    eax,eax
c0000921:	c3                   	ret    
c0000922:	c3                   	ret    
c0000923:	90                   	nop

c0000924 <strncmp>:
c0000924:	57                   	push   edi
c0000925:	56                   	push   esi
c0000926:	53                   	push   ebx
c0000927:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000092b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000092f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000933:	85 ff                	test   edi,edi
c0000935:	74 28                	je     c000095f <strncmp+0x3b>
c0000937:	8a 16                	mov    dl,BYTE PTR [esi]
c0000939:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000093c:	38 d1                	cmp    cl,dl
c000093e:	75 28                	jne    c0000968 <strncmp+0x44>
c0000940:	8d 46 01             	lea    eax,[esi+0x1]
c0000943:	84 c9                	test   cl,cl
c0000945:	74 18                	je     c000095f <strncmp+0x3b>
c0000947:	01 fe                	add    esi,edi
c0000949:	eb 0f                	jmp    c000095a <strncmp+0x36>
c000094b:	90                   	nop
c000094c:	8a 10                	mov    dl,BYTE PTR [eax]
c000094e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000951:	38 ca                	cmp    dl,cl
c0000953:	75 13                	jne    c0000968 <strncmp+0x44>
c0000955:	40                   	inc    eax
c0000956:	84 d2                	test   dl,dl
c0000958:	74 05                	je     c000095f <strncmp+0x3b>
c000095a:	43                   	inc    ebx
c000095b:	39 c6                	cmp    esi,eax
c000095d:	75 ed                	jne    c000094c <strncmp+0x28>
c000095f:	5b                   	pop    ebx
c0000960:	31 c0                	xor    eax,eax
c0000962:	5e                   	pop    esi
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]
c0000968:	5b                   	pop    ebx
c0000969:	0f b6 c2             	movzx  eax,dl
c000096c:	5e                   	pop    esi
c000096d:	29 c8                	sub    eax,ecx
c000096f:	5f                   	pop    edi
c0000970:	c3                   	ret    
c0000971:	8d 76 00             	lea    esi,[esi+0x0]

c0000974 <strcat>:
c0000974:	56                   	push   esi
c0000975:	53                   	push   ebx
c0000976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000097a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000097e:	89 c3                	mov    ebx,eax
c0000980:	eb 04                	jmp    c0000986 <strcat+0x12>
c0000982:	66 90                	xchg   ax,ax
c0000984:	89 d3                	mov    ebx,edx
c0000986:	8d 53 01             	lea    edx,[ebx+0x1]
c0000989:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000098d:	75 f5                	jne    c0000984 <strcat+0x10>
c000098f:	31 d2                	xor    edx,edx
c0000991:	8d 76 00             	lea    esi,[esi+0x0]
c0000994:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000997:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000099a:	42                   	inc    edx
c000099b:	84 c9                	test   cl,cl
c000099d:	75 f5                	jne    c0000994 <strcat+0x20>
c000099f:	5b                   	pop    ebx
c00009a0:	5e                   	pop    esi
c00009a1:	c3                   	ret    
c00009a2:	66 90                	xchg   ax,ax

c00009a4 <strncat>:
c00009a4:	56                   	push   esi
c00009a5:	53                   	push   ebx
c00009a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009b2:	85 f6                	test   esi,esi
c00009b4:	74 1e                	je     c00009d4 <strncat+0x30>
c00009b6:	89 c2                	mov    edx,eax
c00009b8:	42                   	inc    edx
c00009b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009bd:	75 f9                	jne    c00009b8 <strncat+0x14>
c00009bf:	01 ce                	add    esi,ecx
c00009c1:	eb 06                	jmp    c00009c9 <strncat+0x25>
c00009c3:	90                   	nop
c00009c4:	39 f1                	cmp    ecx,esi
c00009c6:	74 10                	je     c00009d8 <strncat+0x34>
c00009c8:	42                   	inc    edx
c00009c9:	41                   	inc    ecx
c00009ca:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009cd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d0:	84 db                	test   bl,bl
c00009d2:	75 f0                	jne    c00009c4 <strncat+0x20>
c00009d4:	5b                   	pop    ebx
c00009d5:	5e                   	pop    esi
c00009d6:	c3                   	ret    
c00009d7:	90                   	nop
c00009d8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009db:	5b                   	pop    ebx
c00009dc:	5e                   	pop    esi
c00009dd:	c3                   	ret    
c00009de:	66 90                	xchg   ax,ax

c00009e0 <strstr>:
c00009e0:	57                   	push   edi
c00009e1:	56                   	push   esi
c00009e2:	53                   	push   ebx
c00009e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009eb:	57                   	push   edi
c00009ec:	e8 a3 fd ff ff       	call   c0000794 <strlen>
c00009f1:	59                   	pop    ecx
c00009f2:	85 c0                	test   eax,eax
c00009f4:	74 2a                	je     c0000a20 <strstr+0x40>
c00009f6:	89 c6                	mov    esi,eax
c00009f8:	eb 12                	jmp    c0000a0c <strstr+0x2c>
c00009fa:	66 90                	xchg   ax,ax
c00009fc:	56                   	push   esi
c00009fd:	57                   	push   edi
c00009fe:	53                   	push   ebx
c00009ff:	e8 3c fc ff ff       	call   c0000640 <memcmp>
c0000a04:	83 c4 0c             	add    esp,0xc
c0000a07:	85 c0                	test   eax,eax
c0000a09:	74 15                	je     c0000a20 <strstr+0x40>
c0000a0b:	43                   	inc    ebx
c0000a0c:	53                   	push   ebx
c0000a0d:	e8 82 fd ff ff       	call   c0000794 <strlen>
c0000a12:	5a                   	pop    edx
c0000a13:	39 f0                	cmp    eax,esi
c0000a15:	73 e5                	jae    c00009fc <strstr+0x1c>
c0000a17:	5b                   	pop    ebx
c0000a18:	31 c0                	xor    eax,eax
c0000a1a:	5e                   	pop    esi
c0000a1b:	5f                   	pop    edi
c0000a1c:	c3                   	ret    
c0000a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a20:	89 d8                	mov    eax,ebx
c0000a22:	5b                   	pop    ebx
c0000a23:	5e                   	pop    esi
c0000a24:	5f                   	pop    edi
c0000a25:	c3                   	ret    
c0000a26:	66 90                	xchg   ax,ax

c0000a28 <toupper>:
c0000a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a2c:	0f b6 d0             	movzx  edx,al
c0000a2f:	f6 82 60 92 02 c0 02 	test   BYTE PTR [edx-0x3ffd6da0],0x2
c0000a36:	74 03                	je     c0000a3b <toupper+0x13>
c0000a38:	83 e8 20             	sub    eax,0x20
c0000a3b:	c3                   	ret    

c0000a3c <tolower>:
c0000a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a40:	0f b6 d0             	movzx  edx,al
c0000a43:	f6 82 60 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6da0],0x1
c0000a4a:	74 03                	je     c0000a4f <tolower+0x13>
c0000a4c:	83 c0 20             	add    eax,0x20
c0000a4f:	c3                   	ret    

c0000a50 <simple_strtoul>:
c0000a50:	55                   	push   ebp
c0000a51:	57                   	push   edi
c0000a52:	56                   	push   esi
c0000a53:	53                   	push   ebx
c0000a54:	83 ec 08             	sub    esp,0x8
c0000a57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a5f:	90                   	nop
c0000a60:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a63:	f6 82 60 92 02 c0 08 	test   BYTE PTR [edx-0x3ffd6da0],0x8
c0000a6a:	75 05                	jne    c0000a71 <simple_strtoul+0x21>
c0000a6c:	80 fa 09             	cmp    dl,0x9
c0000a6f:	75 03                	jne    c0000a74 <simple_strtoul+0x24>
c0000a71:	41                   	inc    ecx
c0000a72:	eb ec                	jmp    c0000a60 <simple_strtoul+0x10>
c0000a74:	80 fa 2d             	cmp    dl,0x2d
c0000a77:	0f 84 1b 01 00 00    	je     c0000b98 <simple_strtoul+0x148>
c0000a7d:	80 fa 2b             	cmp    dl,0x2b
c0000a80:	0f 84 c2 00 00 00    	je     c0000b48 <simple_strtoul+0xf8>
c0000a86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a8e:	85 f6                	test   esi,esi
c0000a90:	0f 85 c3 00 00 00    	jne    c0000b59 <simple_strtoul+0x109>
c0000a96:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a98:	80 fa 30             	cmp    dl,0x30
c0000a9b:	0f 84 47 01 00 00    	je     c0000be8 <simple_strtoul+0x198>
c0000aa1:	be 0a 00 00 00       	mov    esi,0xa
c0000aa6:	84 d2                	test   dl,dl
c0000aa8:	0f 84 6f 01 00 00    	je     c0000c1d <simple_strtoul+0x1cd>
c0000aae:	31 ed                	xor    ebp,ebp
c0000ab0:	31 ff                	xor    edi,edi
c0000ab2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ab9:	eb 2b                	jmp    c0000ae6 <simple_strtoul+0x96>
c0000abb:	90                   	nop
c0000abc:	83 eb 30             	sub    ebx,0x30
c0000abf:	39 f3                	cmp    ebx,esi
c0000ac1:	73 4d                	jae    c0000b10 <simple_strtoul+0xc0>
c0000ac3:	31 d2                	xor    edx,edx
c0000ac5:	89 d8                	mov    eax,ebx
c0000ac7:	f7 d0                	not    eax
c0000ac9:	f7 f6                	div    esi
c0000acb:	39 f8                	cmp    eax,edi
c0000acd:	0f 82 b1 00 00 00    	jb     c0000b84 <simple_strtoul+0x134>
c0000ad3:	0f af fe             	imul   edi,esi
c0000ad6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000add:	01 df                	add    edi,ebx
c0000adf:	41                   	inc    ecx
c0000ae0:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ae2:	84 d2                	test   dl,dl
c0000ae4:	74 2a                	je     c0000b10 <simple_strtoul+0xc0>
c0000ae6:	0f b6 da             	movzx  ebx,dl
c0000ae9:	f6 83 60 92 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6da0],0x4
c0000af0:	75 ca                	jne    c0000abc <simple_strtoul+0x6c>
c0000af2:	0f be d2             	movsx  edx,dl
c0000af5:	52                   	push   edx
c0000af6:	e8 2d ff ff ff       	call   c0000a28 <toupper>
c0000afb:	5b                   	pop    ebx
c0000afc:	0f b6 d0             	movzx  edx,al
c0000aff:	f6 82 60 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6da0],0x1
c0000b06:	74 08                	je     c0000b10 <simple_strtoul+0xc0>
c0000b08:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b0b:	39 f3                	cmp    ebx,esi
c0000b0d:	72 b4                	jb     c0000ac3 <simple_strtoul+0x73>
c0000b0f:	90                   	nop
c0000b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b14:	85 c0                	test   eax,eax
c0000b16:	74 14                	je     c0000b2c <simple_strtoul+0xdc>
c0000b18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b1b:	09 f8                	or     eax,edi
c0000b1d:	75 71                	jne    c0000b90 <simple_strtoul+0x140>
c0000b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b27:	31 ff                	xor    edi,edi
c0000b29:	89 30                	mov    DWORD PTR [eax],esi
c0000b2b:	90                   	nop
c0000b2c:	4d                   	dec    ebp
c0000b2d:	75 05                	jne    c0000b34 <simple_strtoul+0xe4>
c0000b2f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b34:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b39:	75 02                	jne    c0000b3d <simple_strtoul+0xed>
c0000b3b:	f7 df                	neg    edi
c0000b3d:	83 c4 08             	add    esp,0x8
c0000b40:	89 f8                	mov    eax,edi
c0000b42:	5b                   	pop    ebx
c0000b43:	5e                   	pop    esi
c0000b44:	5f                   	pop    edi
c0000b45:	5d                   	pop    ebp
c0000b46:	c3                   	ret    
c0000b47:	90                   	nop
c0000b48:	41                   	inc    ecx
c0000b49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b51:	85 f6                	test   esi,esi
c0000b53:	0f 84 3d ff ff ff    	je     c0000a96 <simple_strtoul+0x46>
c0000b59:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b5c:	83 f8 22             	cmp    eax,0x22
c0000b5f:	77 6a                	ja     c0000bcb <simple_strtoul+0x17b>
c0000b61:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b63:	83 fe 08             	cmp    esi,0x8
c0000b66:	0f 84 a2 00 00 00    	je     c0000c0e <simple_strtoul+0x1be>
c0000b6c:	83 fe 10             	cmp    esi,0x10
c0000b6f:	0f 85 31 ff ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000b75:	80 fa 30             	cmp    dl,0x30
c0000b78:	74 2c                	je     c0000ba6 <simple_strtoul+0x156>
c0000b7a:	be 10 00 00 00       	mov    esi,0x10
c0000b7f:	e9 22 ff ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000b84:	bd 01 00 00 00       	mov    ebp,0x1
c0000b89:	31 ff                	xor    edi,edi
c0000b8b:	e9 4f ff ff ff       	jmp    c0000adf <simple_strtoul+0x8f>
c0000b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b94:	89 08                	mov    DWORD PTR [eax],ecx
c0000b96:	eb 94                	jmp    c0000b2c <simple_strtoul+0xdc>
c0000b98:	41                   	inc    ecx
c0000b99:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba1:	e9 e8 fe ff ff       	jmp    c0000a8e <simple_strtoul+0x3e>
c0000ba6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000baa:	88 04 24             	mov    BYTE PTR [esp],al
c0000bad:	50                   	push   eax
c0000bae:	e8 89 fe ff ff       	call   c0000a3c <tolower>
c0000bb3:	5e                   	pop    esi
c0000bb4:	83 f8 78             	cmp    eax,0x78
c0000bb7:	0f 84 84 00 00 00    	je     c0000c41 <simple_strtoul+0x1f1>
c0000bbd:	41                   	inc    ecx
c0000bbe:	be 10 00 00 00       	mov    esi,0x10
c0000bc3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bc6:	e9 db fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000bcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bcf:	85 ff                	test   edi,edi
c0000bd1:	74 5c                	je     c0000c2f <simple_strtoul+0x1df>
c0000bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bd7:	85 c9                	test   ecx,ecx
c0000bd9:	75 4e                	jne    c0000c29 <simple_strtoul+0x1d9>
c0000bdb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be1:	31 ff                	xor    edi,edi
c0000be3:	e9 4c ff ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000be8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bec:	88 04 24             	mov    BYTE PTR [esp],al
c0000bef:	50                   	push   eax
c0000bf0:	e8 47 fe ff ff       	call   c0000a3c <tolower>
c0000bf5:	5d                   	pop    ebp
c0000bf6:	83 f8 78             	cmp    eax,0x78
c0000bf9:	74 3b                	je     c0000c36 <simple_strtoul+0x1e6>
c0000bfb:	41                   	inc    ecx
c0000bfc:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bff:	80 fa 30             	cmp    dl,0x30
c0000c02:	74 13                	je     c0000c17 <simple_strtoul+0x1c7>
c0000c04:	be 08 00 00 00       	mov    esi,0x8
c0000c09:	e9 98 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000c0e:	80 fa 30             	cmp    dl,0x30
c0000c11:	0f 85 8f fe ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000c17:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c1a:	41                   	inc    ecx
c0000c1b:	eb e7                	jmp    c0000c04 <simple_strtoul+0x1b4>
c0000c1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c21:	85 d2                	test   edx,edx
c0000c23:	74 0a                	je     c0000c2f <simple_strtoul+0x1df>
c0000c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c29:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c2d:	89 30                	mov    DWORD PTR [eax],esi
c0000c2f:	31 ff                	xor    edi,edi
c0000c31:	e9 fe fe ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000c36:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c39:	83 c1 02             	add    ecx,0x2
c0000c3c:	e9 34 ff ff ff       	jmp    c0000b75 <simple_strtoul+0x125>
c0000c41:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c44:	be 10 00 00 00       	mov    esi,0x10
c0000c49:	83 c1 02             	add    ecx,0x2
c0000c4c:	e9 55 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>

c0000c51 <largebin_index>:
c0000c51:	89 c2                	mov    edx,eax
c0000c53:	c1 ea 08             	shr    edx,0x8
c0000c56:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c5c:	77 10                	ja     c0000c6e <largebin_index+0x1d>
c0000c5e:	0f bd d2             	bsr    edx,edx
c0000c61:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c64:	d3 e8                	shr    eax,cl
c0000c66:	83 e0 03             	and    eax,0x3
c0000c69:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c6d:	c3                   	ret    
c0000c6e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c73:	c3                   	ret    

c0000c74 <malloc_init_state>:
c0000c74:	53                   	push   ebx
c0000c75:	8d 50 34             	lea    edx,[eax+0x34]
c0000c78:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c7e:	89 d1                	mov    ecx,edx
c0000c80:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c83:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c86:	83 c2 08             	add    edx,0x8
c0000c89:	39 da                	cmp    edx,ebx
c0000c8b:	75 f3                	jne    c0000c80 <malloc_init_state+0xc>
c0000c8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c8f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c99:	83 e2 03             	and    edx,0x3
c0000c9c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ca6:	83 ca 48             	or     edx,0x48
c0000ca9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cb3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cbd:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cc4:	89 10                	mov    DWORD PTR [eax],edx
c0000cc6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cc9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cd3:	5b                   	pop    ebx
c0000cd4:	c3                   	ret    

c0000cd5 <malloc_consolidate>:
c0000cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd7:	85 d2                	test   edx,edx
c0000cd9:	0f 84 d8 00 00 00    	je     c0000db7 <malloc_consolidate+0xe2>
c0000cdf:	55                   	push   ebp
c0000ce0:	83 e2 fd             	and    edx,0xfffffffd
c0000ce3:	57                   	push   edi
c0000ce4:	89 c5                	mov    ebp,eax
c0000ce6:	56                   	push   esi
c0000ce7:	8d 78 34             	lea    edi,[eax+0x34]
c0000cea:	53                   	push   ebx
c0000ceb:	83 ec 10             	sub    esp,0x10
c0000cee:	89 10                	mov    DWORD PTR [eax],edx
c0000cf0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cf4:	c1 ea 03             	shr    edx,0x3
c0000cf7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cfb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cff:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d02:	85 d2                	test   edx,edx
c0000d04:	0f 84 98 00 00 00    	je     c0000da2 <malloc_consolidate+0xcd>
c0000d0a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d11:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d14:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d17:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d1b:	89 f9                	mov    ecx,edi
c0000d1d:	83 e1 fe             	and    ecx,0xfffffffe
c0000d20:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d23:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d26:	83 e3 fc             	and    ebx,0xfffffffc
c0000d29:	83 e7 01             	and    edi,0x1
c0000d2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d2f:	75 14                	jne    c0000d45 <malloc_consolidate+0x70>
c0000d31:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d33:	29 fa                	sub    edx,edi
c0000d35:	01 f9                	add    ecx,edi
c0000d37:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3a:	89 fb                	mov    ebx,edi
c0000d3c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d3f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d42:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d45:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d48:	74 40                	je     c0000d8a <malloc_consolidate+0xb5>
c0000d4a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d4d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d50:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d54:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d57:	83 e7 01             	and    edi,0x1
c0000d5a:	75 0e                	jne    c0000d6a <malloc_consolidate+0x95>
c0000d5c:	01 d9                	add    ecx,ebx
c0000d5e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d61:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d64:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d67:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d6a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d6d:	89 ce                	mov    esi,ecx
c0000d6f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d72:	83 ce 01             	or     esi,0x1
c0000d75:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d78:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d7b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d7e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d82:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d85:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d88:	eb 0c                	jmp    c0000d96 <malloc_consolidate+0xc1>
c0000d8a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d8d:	83 c9 01             	or     ecx,0x1
c0000d90:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d93:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d9a:	85 d2                	test   edx,edx
c0000d9c:	0f 85 6f ff ff ff    	jne    c0000d11 <malloc_consolidate+0x3c>
c0000da2:	83 c5 04             	add    ebp,0x4
c0000da5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000da9:	0f 85 50 ff ff ff    	jne    c0000cff <malloc_consolidate+0x2a>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	5b                   	pop    ebx
c0000db3:	5e                   	pop    esi
c0000db4:	5f                   	pop    edi
c0000db5:	5d                   	pop    ebp
c0000db6:	c3                   	ret    
c0000db7:	e9 b8 fe ff ff       	jmp    c0000c74 <malloc_init_state>

c0000dbc <dlfree>:
c0000dbc:	57                   	push   edi
c0000dbd:	56                   	push   esi
c0000dbe:	53                   	push   ebx
c0000dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dc3:	85 db                	test   ebx,ebx
c0000dc5:	0f 84 e2 00 00 00    	je     c0000ead <dlfree+0xf1>
c0000dcb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dce:	8b 0d c0 e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e1c0
c0000dd4:	89 f0                	mov    eax,esi
c0000dd6:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dd9:	83 e0 fc             	and    eax,0xfffffffc
c0000ddc:	39 c1                	cmp    ecx,eax
c0000dde:	72 24                	jb     c0000e04 <dlfree+0x48>
c0000de0:	83 c9 03             	or     ecx,0x3
c0000de3:	c1 e8 03             	shr    eax,0x3
c0000de6:	89 0d c0 e1 02 c0    	mov    DWORD PTR ds:0xc002e1c0,ecx
c0000dec:	83 e8 02             	sub    eax,0x2
c0000def:	8b 0c 85 c4 e1 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1e3c]
c0000df6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000df8:	89 14 85 c4 e1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1e3c],edx
c0000dff:	e9 a9 00 00 00       	jmp    c0000ead <dlfree+0xf1>
c0000e04:	83 e6 02             	and    esi,0x2
c0000e07:	0f 85 a0 00 00 00    	jne    c0000ead <dlfree+0xf1>
c0000e0d:	83 c9 01             	or     ecx,0x1
c0000e10:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e13:	89 0d c0 e1 02 c0    	mov    DWORD PTR ds:0xc002e1c0,ecx
c0000e19:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e1c:	83 e1 fc             	and    ecx,0xfffffffc
c0000e1f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e23:	75 13                	jne    c0000e38 <dlfree+0x7c>
c0000e25:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e28:	29 da                	sub    edx,ebx
c0000e2a:	01 d8                	add    eax,ebx
c0000e2c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e2f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e32:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e35:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e38:	39 35 ec e1 02 c0    	cmp    DWORD PTR ds:0xc002e1ec,esi
c0000e3e:	74 40                	je     c0000e80 <dlfree+0xc4>
c0000e40:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e44:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e47:	80 e3 01             	and    bl,0x1
c0000e4a:	75 0e                	jne    c0000e5a <dlfree+0x9e>
c0000e4c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e4f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e52:	01 c8                	add    eax,ecx
c0000e54:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e57:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e5a:	8b 0d fc e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e1fc
c0000e60:	c7 42 0c f4 e1 02 c0 	mov    DWORD PTR [edx+0xc],0xc002e1f4
c0000e67:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e6a:	89 15 fc e1 02 c0    	mov    DWORD PTR ds:0xc002e1fc,edx
c0000e70:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e73:	89 c1                	mov    ecx,eax
c0000e75:	83 c9 01             	or     ecx,0x1
c0000e78:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e7e:	eb 10                	jmp    c0000e90 <dlfree+0xd4>
c0000e80:	01 c8                	add    eax,ecx
c0000e82:	89 c1                	mov    ecx,eax
c0000e84:	83 c9 01             	or     ecx,0x1
c0000e87:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e8a:	89 15 ec e1 02 c0    	mov    DWORD PTR ds:0xc002e1ec,edx
c0000e90:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e95:	76 16                	jbe    c0000ead <dlfree+0xf1>
c0000e97:	f6 05 c0 e1 02 c0 02 	test   BYTE PTR ds:0xc002e1c0,0x2
c0000e9e:	74 0d                	je     c0000ead <dlfree+0xf1>
c0000ea0:	5b                   	pop    ebx
c0000ea1:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c0000ea6:	5e                   	pop    esi
c0000ea7:	5f                   	pop    edi
c0000ea8:	e9 28 fe ff ff       	jmp    c0000cd5 <malloc_consolidate>
c0000ead:	5b                   	pop    ebx
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	c3                   	ret    

c0000eb1 <sYSMALLOc>:
c0000eb1:	55                   	push   ebp
c0000eb2:	57                   	push   edi
c0000eb3:	56                   	push   esi
c0000eb4:	53                   	push   ebx
c0000eb5:	89 d3                	mov    ebx,edx
c0000eb7:	83 ec 2c             	sub    esp,0x2c
c0000eba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ebe:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ec4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ec7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000eca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ece:	74 1f                	je     c0000eef <sYSMALLOc+0x3e>
c0000ed0:	89 d8                	mov    eax,ebx
c0000ed2:	e8 fe fd ff ff       	call   c0000cd5 <malloc_consolidate>
c0000ed7:	83 ec 0c             	sub    esp,0xc
c0000eda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ede:	83 e8 07             	sub    eax,0x7
c0000ee1:	50                   	push   eax
c0000ee2:	e8 30 02 00 00       	call   c0001117 <dlmalloc>
c0000ee7:	83 c4 10             	add    esp,0x10
c0000eea:	e9 20 02 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000eef:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ef2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ef8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000efb:	83 e0 fc             	and    eax,0xfffffffc
c0000efe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f06:	83 c0 10             	add    eax,0x10
c0000f09:	01 c1                	add    ecx,eax
c0000f0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f0f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f16:	74 04                	je     c0000f1c <sYSMALLOc+0x6b>
c0000f18:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f1c:	f7 da                	neg    edx
c0000f1e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f26:	21 d1                	and    ecx,edx
c0000f28:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f2c:	7f 07                	jg     c0000f35 <sYSMALLOc+0x84>
c0000f2e:	31 c0                	xor    eax,eax
c0000f30:	e9 da 01 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000f35:	83 ec 0c             	sub    esp,0xc
c0000f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f3c:	e8 56 e7 00 00       	call   c000f697 <sbrk>
c0000f41:	83 c4 10             	add    esp,0x10
c0000f44:	89 c6                	mov    esi,eax
c0000f46:	83 f8 ff             	cmp    eax,0xffffffff
c0000f49:	74 e3                	je     c0000f2e <sYSMALLOc+0x7d>
c0000f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f53:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f56:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f5c:	39 f1                	cmp    ecx,esi
c0000f5e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f64:	75 13                	jne    c0000f79 <sYSMALLOc+0xc8>
c0000f66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f6a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f6e:	83 c8 01             	or     eax,0x1
c0000f71:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f74:	e9 3e 01 00 00       	jmp    c00010b7 <sYSMALLOc+0x206>
c0000f79:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f7f:	88 d0                	mov    al,dl
c0000f81:	83 e0 01             	and    eax,0x1
c0000f84:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f8d:	0f 95 c0             	setne  al
c0000f90:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f94:	39 f1                	cmp    ecx,esi
c0000f96:	76 12                	jbe    c0000faa <sYSMALLOc+0xf9>
c0000f98:	84 c0                	test   al,al
c0000f9a:	74 0e                	je     c0000faa <sYSMALLOc+0xf9>
c0000f9c:	83 e2 fe             	and    edx,0xfffffffe
c0000f9f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fa5:	e9 83 00 00 00       	jmp    c000102d <sYSMALLOc+0x17c>
c0000faa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000faf:	74 7c                	je     c000102d <sYSMALLOc+0x17c>
c0000fb1:	84 c0                	test   al,al
c0000fb3:	74 0c                	je     c0000fc1 <sYSMALLOc+0x110>
c0000fb5:	89 f0                	mov    eax,esi
c0000fb7:	29 c8                	sub    eax,ecx
c0000fb9:	01 e8                	add    eax,ebp
c0000fbb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc1:	89 f2                	mov    edx,esi
c0000fc3:	83 e2 07             	and    edx,0x7
c0000fc6:	74 0c                	je     c0000fd4 <sYSMALLOc+0x123>
c0000fc8:	b8 08 00 00 00       	mov    eax,0x8
c0000fcd:	29 d0                	sub    eax,edx
c0000fcf:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fd2:	eb 04                	jmp    c0000fd8 <sYSMALLOc+0x127>
c0000fd4:	89 f5                	mov    ebp,esi
c0000fd6:	31 c0                	xor    eax,eax
c0000fd8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe4:	01 c1                	add    ecx,eax
c0000fe6:	83 ec 0c             	sub    esp,0xc
c0000fe9:	01 f1                	add    ecx,esi
c0000feb:	01 ca                	add    edx,ecx
c0000fed:	29 c8                	sub    eax,ecx
c0000fef:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ff3:	01 c2                	add    edx,eax
c0000ff5:	52                   	push   edx
c0000ff6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ffa:	e8 98 e6 00 00       	call   c000f697 <sbrk>
c0000fff:	83 c4 10             	add    esp,0x10
c0001002:	83 f8 ff             	cmp    eax,0xffffffff
c0001005:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001009:	75 0f                	jne    c000101a <sYSMALLOc+0x169>
c000100b:	83 ec 0c             	sub    esp,0xc
c000100e:	6a 00                	push   0x0
c0001010:	e8 82 e6 00 00       	call   c000f697 <sbrk>
c0001015:	83 c4 10             	add    esp,0x10
c0001018:	eb 30                	jmp    c000104a <sYSMALLOc+0x199>
c000101a:	39 c6                	cmp    esi,eax
c000101c:	76 33                	jbe    c0001051 <sYSMALLOc+0x1a0>
c000101e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001022:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001029:	01 f0                	add    eax,esi
c000102b:	eb 1d                	jmp    c000104a <sYSMALLOc+0x199>
c000102d:	83 ec 0c             	sub    esp,0xc
c0001030:	89 f5                	mov    ebp,esi
c0001032:	6a 00                	push   0x0
c0001034:	e8 5e e6 00 00       	call   c000f697 <sbrk>
c0001039:	89 c2                	mov    edx,eax
c000103b:	29 f2                	sub    edx,esi
c000103d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001041:	83 c4 10             	add    esp,0x10
c0001044:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000104a:	31 d2                	xor    edx,edx
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	74 66                	je     c00010b7 <sYSMALLOc+0x206>
c0001051:	29 e8                	sub    eax,ebp
c0001053:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001056:	01 d0                	add    eax,edx
c0001058:	83 c8 01             	or     eax,0x1
c000105b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000105e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001064:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001069:	74 4c                	je     c00010b7 <sYSMALLOc+0x206>
c000106b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000106f:	83 e8 0c             	sub    eax,0xc
c0001072:	83 e0 f8             	and    eax,0xfffffff8
c0001075:	89 c2                	mov    edx,eax
c0001077:	83 ca 01             	or     edx,0x1
c000107a:	83 f8 0f             	cmp    eax,0xf
c000107d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001080:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001088:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001090:	76 25                	jbe    c00010b7 <sYSMALLOc+0x206>
c0001092:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001098:	83 ec 0c             	sub    esp,0xc
c000109b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a5:	83 c7 08             	add    edi,0x8
c00010a8:	57                   	push   edi
c00010a9:	e8 0e fd ff ff       	call   c0000dbc <dlfree>
c00010ae:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b4:	83 c4 10             	add    esp,0x10
c00010b7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010bd:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010c3:	73 06                	jae    c00010cb <sYSMALLOc+0x21a>
c00010c5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010cb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d1:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010d7:	73 06                	jae    c00010df <sYSMALLOc+0x22e>
c00010d9:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010e5:	83 e2 fc             	and    edx,0xfffffffc
c00010e8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010ec:	0f 82 3c fe ff ff    	jb     c0000f2e <sYSMALLOc+0x7d>
c00010f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010f6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010f9:	29 fa                	sub    edx,edi
c00010fb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010fe:	83 ca 01             	or     edx,0x1
c0001101:	89 fb                	mov    ebx,edi
c0001103:	83 c0 08             	add    eax,0x8
c0001106:	83 cb 01             	or     ebx,0x1
c0001109:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000110c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000110f:	83 c4 2c             	add    esp,0x2c
c0001112:	5b                   	pop    ebx
c0001113:	5e                   	pop    esi
c0001114:	5f                   	pop    edi
c0001115:	5d                   	pop    ebp
c0001116:	c3                   	ret    

c0001117 <dlmalloc>:
c0001117:	55                   	push   ebp
c0001118:	57                   	push   edi
c0001119:	56                   	push   esi
c000111a:	53                   	push   ebx
c000111b:	83 ec 1c             	sub    esp,0x1c
c000111e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001122:	83 f8 df             	cmp    eax,0xffffffdf
c0001125:	0f 87 70 03 00 00    	ja     c000149b <dlmalloc+0x384>
c000112b:	83 c0 0b             	add    eax,0xb
c000112e:	be 10 00 00 00       	mov    esi,0x10
c0001133:	83 f8 0f             	cmp    eax,0xf
c0001136:	76 05                	jbe    c000113d <dlmalloc+0x26>
c0001138:	83 e0 f8             	and    eax,0xfffffff8
c000113b:	89 c6                	mov    esi,eax
c000113d:	8b 3d c0 e1 02 c0    	mov    edi,DWORD PTR ds:0xc002e1c0
c0001143:	f7 c7 01 00 00 00    	test   edi,0x1
c0001149:	75 17                	jne    c0001162 <dlmalloc+0x4b>
c000114b:	85 ff                	test   edi,edi
c000114d:	0f 85 05 03 00 00    	jne    c0001458 <dlmalloc+0x341>
c0001153:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c0001158:	e8 78 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c000115d:	e9 f6 02 00 00       	jmp    c0001458 <dlmalloc+0x341>
c0001162:	39 f7                	cmp    edi,esi
c0001164:	72 1f                	jb     c0001185 <dlmalloc+0x6e>
c0001166:	89 f2                	mov    edx,esi
c0001168:	c1 ea 03             	shr    edx,0x3
c000116b:	83 ea 02             	sub    edx,0x2
c000116e:	8b 04 95 c4 e1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1e3c]
c0001175:	85 c0                	test   eax,eax
c0001177:	74 0c                	je     c0001185 <dlmalloc+0x6e>
c0001179:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000117c:	89 0c 95 c4 e1 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1e3c],ecx
c0001183:	eb 30                	jmp    c00011b5 <dlmalloc+0x9e>
c0001185:	89 f0                	mov    eax,esi
c0001187:	81 fe ff 00 00 00    	cmp    esi,0xff
c000118d:	77 2e                	ja     c00011bd <dlmalloc+0xa6>
c000118f:	c1 e8 03             	shr    eax,0x3
c0001192:	8d 14 c5 f4 e1 02 c0 	lea    edx,[eax*8-0x3ffd1e0c]
c0001199:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000119d:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011a3:	39 c3                	cmp    ebx,eax
c00011a5:	74 2e                	je     c00011d5 <dlmalloc+0xbe>
c00011a7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011aa:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011af:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011b2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011b5:	83 c0 08             	add    eax,0x8
c00011b8:	e9 e0 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c00011bd:	e8 8f fa ff ff       	call   c0000c51 <largebin_index>
c00011c2:	83 e7 02             	and    edi,0x2
c00011c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011c9:	74 0a                	je     c00011d5 <dlmalloc+0xbe>
c00011cb:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c00011d0:	e8 00 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c00011d5:	8d 46 10             	lea    eax,[esi+0x10]
c00011d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011dc:	8b 1d 00 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e200
c00011e2:	81 fb f4 e1 02 c0    	cmp    ebx,0xc002e1f4
c00011e8:	0f 84 13 01 00 00    	je     c0001301 <dlmalloc+0x1ea>
c00011ee:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011f4:	83 e7 fc             	and    edi,0xfffffffc
c00011f7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011fd:	77 4c                	ja     c000124b <dlmalloc+0x134>
c00011ff:	3d f4 e1 02 c0       	cmp    eax,0xc002e1f4
c0001204:	75 45                	jne    c000124b <dlmalloc+0x134>
c0001206:	39 1d f0 e1 02 c0    	cmp    DWORD PTR ds:0xc002e1f0,ebx
c000120c:	75 3d                	jne    c000124b <dlmalloc+0x134>
c000120e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001212:	73 37                	jae    c000124b <dlmalloc+0x134>
c0001214:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001217:	89 fa                	mov    edx,edi
c0001219:	a3 fc e1 02 c0       	mov    ds:0xc002e1fc,eax
c000121e:	a3 00 e2 02 c0       	mov    ds:0xc002e200,eax
c0001223:	a3 f0 e1 02 c0       	mov    ds:0xc002e1f0,eax
c0001228:	29 f2                	sub    edx,esi
c000122a:	c7 40 08 f4 e1 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e1f4
c0001231:	c7 40 0c f4 e1 02 c0 	mov    DWORD PTR [eax+0xc],0xc002e1f4
c0001238:	83 ce 01             	or     esi,0x1
c000123b:	89 d1                	mov    ecx,edx
c000123d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001240:	83 c9 01             	or     ecx,0x1
c0001243:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001246:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001249:	eb 15                	jmp    c0001260 <dlmalloc+0x149>
c000124b:	a3 00 e2 02 c0       	mov    ds:0xc002e200,eax
c0001250:	39 fe                	cmp    esi,edi
c0001252:	c7 40 08 f4 e1 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e1f4
c0001259:	75 0d                	jne    c0001268 <dlmalloc+0x151>
c000125b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001260:	8d 43 08             	lea    eax,[ebx+0x8]
c0001263:	e9 35 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c0001268:	89 f8                	mov    eax,edi
c000126a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001270:	77 19                	ja     c000128b <dlmalloc+0x174>
c0001272:	c1 e8 03             	shr    eax,0x3
c0001275:	8d 14 00             	lea    edx,[eax+eax*1]
c0001278:	83 c2 0d             	add    edx,0xd
c000127b:	8d 2c 95 b8 e1 02 c0 	lea    ebp,[edx*4-0x3ffd1e48]
c0001282:	8b 14 95 c0 e1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1e40]
c0001289:	eb 46                	jmp    c00012d1 <dlmalloc+0x1ba>
c000128b:	e8 c1 f9 ff ff       	call   c0000c51 <largebin_index>
c0001290:	8d 14 00             	lea    edx,[eax+eax*1]
c0001293:	83 c2 0d             	add    edx,0xd
c0001296:	8d 0c 95 c0 e1 02 c0 	lea    ecx,[edx*4-0x3ffd1e40]
c000129d:	8b 14 95 c0 e1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1e40]
c00012a4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012a7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012ab:	89 d5                	mov    ebp,edx
c00012ad:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b1:	74 1e                	je     c00012d1 <dlmalloc+0x1ba>
c00012b3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012b6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012b9:	77 12                	ja     c00012cd <dlmalloc+0x1b6>
c00012bb:	83 cf 01             	or     edi,0x1
c00012be:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c1:	76 05                	jbe    c00012c8 <dlmalloc+0x1b1>
c00012c3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012c6:	eb f6                	jmp    c00012be <dlmalloc+0x1a7>
c00012c8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012cb:	eb 04                	jmp    c00012d1 <dlmalloc+0x1ba>
c00012cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d1:	89 c7                	mov    edi,eax
c00012d3:	88 c1                	mov    cl,al
c00012d5:	c1 ff 05             	sar    edi,0x5
c00012d8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012dc:	bf 01 00 00 00       	mov    edi,0x1
c00012e1:	d3 e7                	shl    edi,cl
c00012e3:	89 f8                	mov    eax,edi
c00012e5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012e9:	09 04 bd f4 e4 02 c0 	or     DWORD PTR [edi*4-0x3ffd1b0c],eax
c00012f0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012f3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012f6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012f9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012fc:	e9 db fe ff ff       	jmp    c00011dc <dlmalloc+0xc5>
c0001301:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001307:	76 78                	jbe    c0001381 <dlmalloc+0x26a>
c0001309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000130d:	8d 04 c5 f4 e1 02 c0 	lea    eax,[eax*8-0x3ffd1e0c]
c0001314:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001317:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000131a:	39 ca                	cmp    edx,ecx
c000131c:	74 63                	je     c0001381 <dlmalloc+0x26a>
c000131e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001321:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001324:	83 e3 fc             	and    ebx,0xfffffffc
c0001327:	39 de                	cmp    esi,ebx
c0001329:	77 52                	ja     c000137d <dlmalloc+0x266>
c000132b:	89 df                	mov    edi,ebx
c000132d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001330:	29 f7                	sub    edi,esi
c0001332:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001335:	01 d3                	add    ebx,edx
c0001337:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000133a:	83 ff 0f             	cmp    edi,0xf
c000133d:	8d 42 08             	lea    eax,[edx+0x8]
c0001340:	77 09                	ja     c000134b <dlmalloc+0x234>
c0001342:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001346:	e9 52 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000134b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000134e:	83 ce 01             	or     esi,0x1
c0001351:	89 0d fc e1 02 c0    	mov    DWORD PTR ds:0xc002e1fc,ecx
c0001357:	89 0d 00 e2 02 c0    	mov    DWORD PTR ds:0xc002e200,ecx
c000135d:	c7 41 08 f4 e1 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002e1f4
c0001364:	c7 41 0c f4 e1 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002e1f4
c000136b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000136e:	89 fa                	mov    edx,edi
c0001370:	83 ca 01             	or     edx,0x1
c0001373:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001376:	89 3b                	mov    DWORD PTR [ebx],edi
c0001378:	e9 20 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000137d:	89 c2                	mov    edx,eax
c000137f:	eb 99                	jmp    c000131a <dlmalloc+0x203>
c0001381:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001385:	b8 01 00 00 00       	mov    eax,0x1
c000138a:	41                   	inc    ecx
c000138b:	89 cb                	mov    ebx,ecx
c000138d:	8d 14 cd ec e1 02 c0 	lea    edx,[ecx*8-0x3ffd1e14]
c0001394:	c1 eb 05             	shr    ebx,0x5
c0001397:	d3 e0                	shl    eax,cl
c0001399:	8b 3c 9d f4 e4 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1b0c]
c00013a0:	39 f8                	cmp    eax,edi
c00013a2:	77 04                	ja     c00013a8 <dlmalloc+0x291>
c00013a4:	85 c0                	test   eax,eax
c00013a6:	75 26                	jne    c00013ce <dlmalloc+0x2b7>
c00013a8:	43                   	inc    ebx
c00013a9:	83 fb 02             	cmp    ebx,0x2
c00013ac:	0f 87 a6 00 00 00    	ja     c0001458 <dlmalloc+0x341>
c00013b2:	8b 3c 9d f4 e4 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1b0c]
c00013b9:	85 ff                	test   edi,edi
c00013bb:	74 eb                	je     c00013a8 <dlmalloc+0x291>
c00013bd:	89 d8                	mov    eax,ebx
c00013bf:	c1 e0 06             	shl    eax,0x6
c00013c2:	8d 14 85 ec e1 02 c0 	lea    edx,[eax*4-0x3ffd1e14]
c00013c9:	b8 01 00 00 00       	mov    eax,0x1
c00013ce:	85 f8                	test   eax,edi
c00013d0:	75 07                	jne    c00013d9 <dlmalloc+0x2c2>
c00013d2:	83 c2 08             	add    edx,0x8
c00013d5:	01 c0                	add    eax,eax
c00013d7:	eb f5                	jmp    c00013ce <dlmalloc+0x2b7>
c00013d9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013dc:	39 ca                	cmp    edx,ecx
c00013de:	75 14                	jne    c00013f4 <dlmalloc+0x2dd>
c00013e0:	89 c1                	mov    ecx,eax
c00013e2:	83 c2 08             	add    edx,0x8
c00013e5:	f7 d1                	not    ecx
c00013e7:	01 c0                	add    eax,eax
c00013e9:	21 cf                	and    edi,ecx
c00013eb:	89 3c 9d f4 e4 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1b0c],edi
c00013f2:	eb ac                	jmp    c00013a0 <dlmalloc+0x289>
c00013f4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013f7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013fa:	83 e0 fc             	and    eax,0xfffffffc
c00013fd:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001400:	89 c3                	mov    ebx,eax
c0001402:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001405:	29 f3                	sub    ebx,esi
c0001407:	8d 14 01             	lea    edx,[ecx+eax*1]
c000140a:	83 fb 0f             	cmp    ebx,0xf
c000140d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001410:	77 09                	ja     c000141b <dlmalloc+0x304>
c0001412:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001416:	e9 82 00 00 00       	jmp    c000149d <dlmalloc+0x386>
c000141b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000141e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001424:	89 3d fc e1 02 c0    	mov    DWORD PTR ds:0xc002e1fc,edi
c000142a:	89 3d 00 e2 02 c0    	mov    DWORD PTR ds:0xc002e200,edi
c0001430:	c7 47 08 f4 e1 02 c0 	mov    DWORD PTR [edi+0x8],0xc002e1f4
c0001437:	c7 47 0c f4 e1 02 c0 	mov    DWORD PTR [edi+0xc],0xc002e1f4
c000143e:	77 06                	ja     c0001446 <dlmalloc+0x32f>
c0001440:	89 3d f0 e1 02 c0    	mov    DWORD PTR ds:0xc002e1f0,edi
c0001446:	83 ce 01             	or     esi,0x1
c0001449:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000144c:	89 d9                	mov    ecx,ebx
c000144e:	83 c9 01             	or     ecx,0x1
c0001451:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001454:	89 1a                	mov    DWORD PTR [edx],ebx
c0001456:	eb 45                	jmp    c000149d <dlmalloc+0x386>
c0001458:	a1 ec e1 02 c0       	mov    eax,ds:0xc002e1ec
c000145d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001460:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001463:	83 e2 fc             	and    edx,0xfffffffc
c0001466:	39 d1                	cmp    ecx,edx
c0001468:	77 1e                	ja     c0001488 <dlmalloc+0x371>
c000146a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000146d:	89 f3                	mov    ebx,esi
c000146f:	89 0d ec e1 02 c0    	mov    DWORD PTR ds:0xc002e1ec,ecx
c0001475:	83 cb 01             	or     ebx,0x1
c0001478:	29 f2                	sub    edx,esi
c000147a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000147d:	83 ca 01             	or     edx,0x1
c0001480:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001483:	e9 2d fd ff ff       	jmp    c00011b5 <dlmalloc+0x9e>
c0001488:	83 c4 1c             	add    esp,0x1c
c000148b:	89 f0                	mov    eax,esi
c000148d:	5b                   	pop    ebx
c000148e:	ba c0 e1 02 c0       	mov    edx,0xc002e1c0
c0001493:	5e                   	pop    esi
c0001494:	5f                   	pop    edi
c0001495:	5d                   	pop    ebp
c0001496:	e9 16 fa ff ff       	jmp    c0000eb1 <sYSMALLOc>
c000149b:	31 c0                	xor    eax,eax
c000149d:	83 c4 1c             	add    esp,0x1c
c00014a0:	5b                   	pop    ebx
c00014a1:	5e                   	pop    esi
c00014a2:	5f                   	pop    edi
c00014a3:	5d                   	pop    ebp
c00014a4:	c3                   	ret    

c00014a5 <iALLOc>:
c00014a5:	55                   	push   ebp
c00014a6:	89 c5                	mov    ebp,eax
c00014a8:	57                   	push   edi
c00014a9:	56                   	push   esi
c00014aa:	53                   	push   ebx
c00014ab:	83 ec 2c             	sub    esp,0x2c
c00014ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014b2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ba:	83 3d c0 e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e1c0,0x0
c00014c1:	75 12                	jne    c00014d5 <iALLOc+0x30>
c00014c3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014c7:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c00014cc:	e8 04 f8 ff ff       	call   c0000cd5 <malloc_consolidate>
c00014d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014da:	74 12                	je     c00014ee <iALLOc+0x49>
c00014dc:	85 ed                	test   ebp,ebp
c00014de:	0f 84 64 01 00 00    	je     c0001648 <iALLOc+0x1a3>
c00014e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014ec:	eb 33                	jmp    c0001521 <iALLOc+0x7c>
c00014ee:	85 ed                	test   ebp,ebp
c00014f0:	75 14                	jne    c0001506 <iALLOc+0x61>
c00014f2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014fa:	83 c4 2c             	add    esp,0x2c
c00014fd:	5b                   	pop    ebx
c00014fe:	5e                   	pop    esi
c00014ff:	5f                   	pop    edi
c0001500:	5d                   	pop    ebp
c0001501:	e9 11 fc ff ff       	jmp    c0001117 <dlmalloc>
c0001506:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000150d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001515:	83 f8 0f             	cmp    eax,0xf
c0001518:	76 07                	jbe    c0001521 <iALLOc+0x7c>
c000151a:	83 e0 f8             	and    eax,0xfffffff8
c000151d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001521:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001526:	75 09                	jne    c0001531 <iALLOc+0x8c>
c0001528:	89 d0                	mov    eax,edx
c000152a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000152d:	31 f6                	xor    esi,esi
c000152f:	eb 3b                	jmp    c000156c <iALLOc+0xc7>
c0001531:	8b 02                	mov    eax,DWORD PTR [edx]
c0001533:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000153b:	83 c0 0b             	add    eax,0xb
c000153e:	83 f8 0f             	cmp    eax,0xf
c0001541:	76 07                	jbe    c000154a <iALLOc+0xa5>
c0001543:	83 e0 f8             	and    eax,0xfffffff8
c0001546:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000154a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000154e:	0f af f5             	imul   esi,ebp
c0001551:	eb 25                	jmp    c0001578 <iALLOc+0xd3>
c0001553:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001555:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001558:	bb 10 00 00 00       	mov    ebx,0x10
c000155d:	83 f9 0f             	cmp    ecx,0xf
c0001560:	76 05                	jbe    c0001567 <iALLOc+0xc2>
c0001562:	83 e1 f8             	and    ecx,0xfffffff8
c0001565:	89 cb                	mov    ebx,ecx
c0001567:	01 de                	add    esi,ebx
c0001569:	83 c0 04             	add    eax,0x4
c000156c:	39 c7                	cmp    edi,eax
c000156e:	75 e3                	jne    c0001553 <iALLOc+0xae>
c0001570:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001578:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000157c:	8b 1d 14 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e514
c0001582:	83 ec 0c             	sub    esp,0xc
c0001585:	c7 05 14 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e514,0x0
c000158f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001593:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001597:	50                   	push   eax
c0001598:	e8 7a fb ff ff       	call   c0001117 <dlmalloc>
c000159d:	83 c4 10             	add    esp,0x10
c00015a0:	89 1d 14 e5 02 c0    	mov    DWORD PTR ds:0xc002e514,ebx
c00015a6:	85 c0                	test   eax,eax
c00015a8:	0f 84 92 00 00 00    	je     c0001640 <iALLOc+0x19b>
c00015ae:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b1:	8d 78 f8             	lea    edi,[eax-0x8]
c00015b4:	83 e3 fc             	and    ebx,0xfffffffc
c00015b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015bb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c0:	74 1e                	je     c00015e0 <iALLOc+0x13b>
c00015c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015c6:	89 d9                	mov    ecx,ebx
c00015c8:	52                   	push   edx
c00015c9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015cd:	83 e9 04             	sub    ecx,0x4
c00015d0:	51                   	push   ecx
c00015d1:	6a 00                	push   0x0
c00015d3:	50                   	push   eax
c00015d4:	e8 9f f1 ff ff       	call   c0000778 <memset>
c00015d9:	83 c4 10             	add    esp,0x10
c00015dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015e5:	75 14                	jne    c00015fb <iALLOc+0x156>
c00015e7:	8d 04 37             	lea    eax,[edi+esi*1]
c00015ea:	29 f3                	sub    ebx,esi
c00015ec:	8d 48 08             	lea    ecx,[eax+0x8]
c00015ef:	83 cb 01             	or     ebx,0x1
c00015f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015f9:	89 f3                	mov    ebx,esi
c00015fb:	31 c0                	xor    eax,eax
c00015fd:	4d                   	dec    ebp
c00015fe:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001601:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001605:	39 c5                	cmp    ebp,eax
c0001607:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000160a:	74 2c                	je     c0001638 <iALLOc+0x193>
c000160c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001610:	85 c9                	test   ecx,ecx
c0001612:	75 15                	jne    c0001629 <iALLOc+0x184>
c0001614:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001617:	8d 71 0b             	lea    esi,[ecx+0xb]
c000161a:	b9 10 00 00 00       	mov    ecx,0x10
c000161f:	83 fe 0f             	cmp    esi,0xf
c0001622:	76 05                	jbe    c0001629 <iALLOc+0x184>
c0001624:	83 e6 f8             	and    esi,0xfffffff8
c0001627:	89 f1                	mov    ecx,esi
c0001629:	89 ce                	mov    esi,ecx
c000162b:	29 cb                	sub    ebx,ecx
c000162d:	83 ce 01             	or     esi,0x1
c0001630:	40                   	inc    eax
c0001631:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001634:	01 cf                	add    edi,ecx
c0001636:	eb c6                	jmp    c00015fe <iALLOc+0x159>
c0001638:	83 cb 01             	or     ebx,0x1
c000163b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000163e:	eb 08                	jmp    c0001648 <iALLOc+0x1a3>
c0001640:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000164c:	83 c4 2c             	add    esp,0x2c
c000164f:	5b                   	pop    ebx
c0001650:	5e                   	pop    esi
c0001651:	5f                   	pop    edi
c0001652:	5d                   	pop    ebp
c0001653:	c3                   	ret    

c0001654 <dlrealloc>:
c0001654:	55                   	push   ebp
c0001655:	57                   	push   edi
c0001656:	56                   	push   esi
c0001657:	53                   	push   ebx
c0001658:	83 ec 1c             	sub    esp,0x1c
c000165b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000165f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001663:	85 db                	test   ebx,ebx
c0001665:	75 10                	jne    c0001677 <dlrealloc+0x23>
c0001667:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000166b:	83 c4 1c             	add    esp,0x1c
c000166e:	5b                   	pop    ebx
c000166f:	5e                   	pop    esi
c0001670:	5f                   	pop    edi
c0001671:	5d                   	pop    ebp
c0001672:	e9 a0 fa ff ff       	jmp    c0001117 <dlmalloc>
c0001677:	83 f8 df             	cmp    eax,0xffffffdf
c000167a:	76 07                	jbe    c0001683 <dlrealloc+0x2f>
c000167c:	31 db                	xor    ebx,ebx
c000167e:	e9 7c 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c0001683:	83 c0 0b             	add    eax,0xb
c0001686:	bf 10 00 00 00       	mov    edi,0x10
c000168b:	83 f8 0f             	cmp    eax,0xf
c000168e:	76 05                	jbe    c0001695 <dlrealloc+0x41>
c0001690:	83 e0 f8             	and    eax,0xfffffff8
c0001693:	89 c7                	mov    edi,eax
c0001695:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001698:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000169b:	89 c6                	mov    esi,eax
c000169d:	83 e6 fc             	and    esi,0xfffffffc
c00016a0:	a8 02                	test   al,0x2
c00016a2:	75 d8                	jne    c000167c <dlrealloc+0x28>
c00016a4:	39 f7                	cmp    edi,esi
c00016a6:	0f 86 15 01 00 00    	jbe    c00017c1 <dlrealloc+0x16d>
c00016ac:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016b3:	39 15 ec e1 02 c0    	cmp    DWORD PTR ds:0xc002e1ec,edx
c00016b9:	75 33                	jne    c00016ee <dlrealloc+0x9a>
c00016bb:	83 e1 fc             	and    ecx,0xfffffffc
c00016be:	01 f1                	add    ecx,esi
c00016c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016c4:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016c7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016cb:	77 49                	ja     c0001716 <dlrealloc+0xc2>
c00016cd:	01 fd                	add    ebp,edi
c00016cf:	83 e0 01             	and    eax,0x1
c00016d2:	09 f8                	or     eax,edi
c00016d4:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016d7:	89 2d ec e1 02 c0    	mov    DWORD PTR ds:0xc002e1ec,ebp
c00016dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e1:	29 f8                	sub    eax,edi
c00016e3:	83 c8 01             	or     eax,0x1
c00016e6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016e9:	e9 11 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c00016ee:	89 c8                	mov    eax,ecx
c00016f0:	83 e0 fe             	and    eax,0xfffffffe
c00016f3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016f8:	75 1c                	jne    c0001716 <dlrealloc+0xc2>
c00016fa:	83 e1 fc             	and    ecx,0xfffffffc
c00016fd:	01 f1                	add    ecx,esi
c00016ff:	39 cf                	cmp    edi,ecx
c0001701:	77 13                	ja     c0001716 <dlrealloc+0xc2>
c0001703:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001706:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001709:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000170c:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000170f:	89 ce                	mov    esi,ecx
c0001711:	e9 ab 00 00 00       	jmp    c00017c1 <dlrealloc+0x16d>
c0001716:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000171a:	8d 47 f9             	lea    eax,[edi-0x7]
c000171d:	83 ec 0c             	sub    esp,0xc
c0001720:	50                   	push   eax
c0001721:	e8 f1 f9 ff ff       	call   c0001117 <dlmalloc>
c0001726:	83 c4 10             	add    esp,0x10
c0001729:	89 c1                	mov    ecx,eax
c000172b:	85 c0                	test   eax,eax
c000172d:	0f 84 49 ff ff ff    	je     c000167c <dlrealloc+0x28>
c0001733:	8d 40 f8             	lea    eax,[eax-0x8]
c0001736:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000173a:	39 c2                	cmp    edx,eax
c000173c:	75 0a                	jne    c0001748 <dlrealloc+0xf4>
c000173e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001741:	83 e0 fc             	and    eax,0xfffffffc
c0001744:	01 c6                	add    esi,eax
c0001746:	eb 79                	jmp    c00017c1 <dlrealloc+0x16d>
c0001748:	83 ee 04             	sub    esi,0x4
c000174b:	83 fe 27             	cmp    esi,0x27
c000174e:	76 16                	jbe    c0001766 <dlrealloc+0x112>
c0001750:	50                   	push   eax
c0001751:	56                   	push   esi
c0001752:	53                   	push   ebx
c0001753:	51                   	push   ecx
c0001754:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001758:	e8 e7 ef ff ff       	call   c0000744 <memcpy>
c000175d:	83 c4 10             	add    esp,0x10
c0001760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001764:	eb 43                	jmp    c00017a9 <dlrealloc+0x155>
c0001766:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001768:	83 fe 13             	cmp    esi,0x13
c000176b:	89 01                	mov    DWORD PTR [ecx],eax
c000176d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001770:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001773:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001776:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001779:	76 2e                	jbe    c00017a9 <dlrealloc+0x155>
c000177b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000177e:	83 fe 1b             	cmp    esi,0x1b
c0001781:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001784:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001787:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000178a:	76 1d                	jbe    c00017a9 <dlrealloc+0x155>
c000178c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000178f:	83 fe 23             	cmp    esi,0x23
c0001792:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001795:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001798:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000179b:	76 0c                	jbe    c00017a9 <dlrealloc+0x155>
c000179d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a0:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017a6:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017ad:	83 ec 0c             	sub    esp,0xc
c00017b0:	53                   	push   ebx
c00017b1:	e8 06 f6 ff ff       	call   c0000dbc <dlfree>
c00017b6:	83 c4 10             	add    esp,0x10
c00017b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017bd:	89 cb                	mov    ebx,ecx
c00017bf:	eb 3e                	jmp    c00017ff <dlrealloc+0x1ab>
c00017c1:	89 f2                	mov    edx,esi
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	29 fa                	sub    edx,edi
c00017c8:	83 e1 01             	and    ecx,0x1
c00017cb:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017cf:	83 fa 0f             	cmp    edx,0xf
c00017d2:	77 0b                	ja     c00017df <dlrealloc+0x18b>
c00017d4:	09 ce                	or     esi,ecx
c00017d6:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017d9:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017dd:	eb 20                	jmp    c00017ff <dlrealloc+0x1ab>
c00017df:	01 fd                	add    ebp,edi
c00017e1:	83 ec 0c             	sub    esp,0xc
c00017e4:	09 cf                	or     edi,ecx
c00017e6:	83 ca 01             	or     edx,0x1
c00017e9:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017ec:	83 c5 08             	add    ebp,0x8
c00017ef:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017f2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017f6:	55                   	push   ebp
c00017f7:	e8 c0 f5 ff ff       	call   c0000dbc <dlfree>
c00017fc:	83 c4 10             	add    esp,0x10
c00017ff:	83 c4 1c             	add    esp,0x1c
c0001802:	89 d8                	mov    eax,ebx
c0001804:	5b                   	pop    ebx
c0001805:	5e                   	pop    esi
c0001806:	5f                   	pop    edi
c0001807:	5d                   	pop    ebp
c0001808:	c3                   	ret    

c0001809 <dlmemalign>:
c0001809:	55                   	push   ebp
c000180a:	57                   	push   edi
c000180b:	56                   	push   esi
c000180c:	53                   	push   ebx
c000180d:	83 ec 0c             	sub    esp,0xc
c0001810:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001814:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001818:	83 fa 08             	cmp    edx,0x8
c000181b:	77 10                	ja     c000182d <dlmemalign+0x24>
c000181d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001821:	83 c4 0c             	add    esp,0xc
c0001824:	5b                   	pop    ebx
c0001825:	5e                   	pop    esi
c0001826:	5f                   	pop    edi
c0001827:	5d                   	pop    ebp
c0001828:	e9 ea f8 ff ff       	jmp    c0001117 <dlmalloc>
c000182d:	bf 10 00 00 00       	mov    edi,0x10
c0001832:	83 fa 0f             	cmp    edx,0xf
c0001835:	76 13                	jbe    c000184a <dlmemalign+0x41>
c0001837:	8d 4a ff             	lea    ecx,[edx-0x1]
c000183a:	85 d1                	test   ecx,edx
c000183c:	75 04                	jne    c0001842 <dlmemalign+0x39>
c000183e:	89 d7                	mov    edi,edx
c0001840:	eb 08                	jmp    c000184a <dlmemalign+0x41>
c0001842:	39 d7                	cmp    edi,edx
c0001844:	73 04                	jae    c000184a <dlmemalign+0x41>
c0001846:	01 ff                	add    edi,edi
c0001848:	eb f8                	jmp    c0001842 <dlmemalign+0x39>
c000184a:	83 f8 df             	cmp    eax,0xffffffdf
c000184d:	76 07                	jbe    c0001856 <dlmemalign+0x4d>
c000184f:	31 c0                	xor    eax,eax
c0001851:	e9 ce 00 00 00       	jmp    c0001924 <dlmemalign+0x11b>
c0001856:	83 c0 0b             	add    eax,0xb
c0001859:	bd 10 00 00 00       	mov    ebp,0x10
c000185e:	83 f8 0f             	cmp    eax,0xf
c0001861:	76 05                	jbe    c0001868 <dlmemalign+0x5f>
c0001863:	83 e0 f8             	and    eax,0xfffffff8
c0001866:	89 c5                	mov    ebp,eax
c0001868:	83 ec 0c             	sub    esp,0xc
c000186b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000186f:	50                   	push   eax
c0001870:	e8 a2 f8 ff ff       	call   c0001117 <dlmalloc>
c0001875:	83 c4 10             	add    esp,0x10
c0001878:	89 c1                	mov    ecx,eax
c000187a:	85 c0                	test   eax,eax
c000187c:	74 d1                	je     c000184f <dlmemalign+0x46>
c000187e:	31 d2                	xor    edx,edx
c0001880:	8d 70 f8             	lea    esi,[eax-0x8]
c0001883:	f7 f7                	div    edi
c0001885:	85 d2                	test   edx,edx
c0001887:	74 62                	je     c00018eb <dlmemalign+0xe2>
c0001889:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000188d:	89 f8                	mov    eax,edi
c000188f:	f7 d8                	neg    eax
c0001891:	21 c3                	and    ebx,eax
c0001893:	83 eb 08             	sub    ebx,0x8
c0001896:	89 d8                	mov    eax,ebx
c0001898:	29 f0                	sub    eax,esi
c000189a:	83 f8 0f             	cmp    eax,0xf
c000189d:	77 02                	ja     c00018a1 <dlmemalign+0x98>
c000189f:	01 fb                	add    ebx,edi
c00018a1:	89 d8                	mov    eax,ebx
c00018a3:	29 f0                	sub    eax,esi
c00018a5:	89 c6                	mov    esi,eax
c00018a7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018aa:	89 c2                	mov    edx,eax
c00018ac:	83 e2 fc             	and    edx,0xfffffffc
c00018af:	29 f2                	sub    edx,esi
c00018b1:	a8 02                	test   al,0x2
c00018b3:	74 10                	je     c00018c5 <dlmemalign+0xbc>
c00018b5:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018b8:	83 ca 02             	or     edx,0x2
c00018bb:	8d 43 08             	lea    eax,[ebx+0x8]
c00018be:	89 33                	mov    DWORD PTR [ebx],esi
c00018c0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018c3:	eb 5f                	jmp    c0001924 <dlmemalign+0x11b>
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	89 d0                	mov    eax,edx
c00018ca:	83 c8 01             	or     eax,0x1
c00018cd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d0:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018d5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018d8:	83 e0 01             	and    eax,0x1
c00018db:	09 f0                	or     eax,esi
c00018dd:	89 de                	mov    esi,ebx
c00018df:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018e2:	51                   	push   ecx
c00018e3:	e8 d4 f4 ff ff       	call   c0000dbc <dlfree>
c00018e8:	83 c4 10             	add    esp,0x10
c00018eb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018ee:	a8 02                	test   al,0x2
c00018f0:	75 2f                	jne    c0001921 <dlmemalign+0x118>
c00018f2:	83 e0 fc             	and    eax,0xfffffffc
c00018f5:	8d 55 10             	lea    edx,[ebp+0x10]
c00018f8:	39 c2                	cmp    edx,eax
c00018fa:	73 25                	jae    c0001921 <dlmemalign+0x118>
c00018fc:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018ff:	83 ec 0c             	sub    esp,0xc
c0001902:	29 e8                	sub    eax,ebp
c0001904:	83 c2 08             	add    edx,0x8
c0001907:	83 c8 01             	or     eax,0x1
c000190a:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000190d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001910:	83 e0 01             	and    eax,0x1
c0001913:	09 c5                	or     ebp,eax
c0001915:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001918:	52                   	push   edx
c0001919:	e8 9e f4 ff ff       	call   c0000dbc <dlfree>
c000191e:	83 c4 10             	add    esp,0x10
c0001921:	8d 46 08             	lea    eax,[esi+0x8]
c0001924:	83 c4 0c             	add    esp,0xc
c0001927:	5b                   	pop    ebx
c0001928:	5e                   	pop    esi
c0001929:	5f                   	pop    edi
c000192a:	5d                   	pop    ebp
c000192b:	c3                   	ret    

c000192c <dlcalloc>:
c000192c:	53                   	push   ebx
c000192d:	83 ec 14             	sub    esp,0x14
c0001930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001934:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001939:	50                   	push   eax
c000193a:	e8 d8 f7 ff ff       	call   c0001117 <dlmalloc>
c000193f:	83 c4 10             	add    esp,0x10
c0001942:	89 c3                	mov    ebx,eax
c0001944:	85 c0                	test   eax,eax
c0001946:	74 77                	je     c00019bf <dlcalloc+0x93>
c0001948:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000194b:	89 d0                	mov    eax,edx
c000194d:	83 e0 fc             	and    eax,0xfffffffc
c0001950:	80 e2 02             	and    dl,0x2
c0001953:	75 5a                	jne    c00019af <dlcalloc+0x83>
c0001955:	83 e8 04             	sub    eax,0x4
c0001958:	83 f8 27             	cmp    eax,0x27
c000195b:	76 03                	jbe    c0001960 <dlcalloc+0x34>
c000195d:	51                   	push   ecx
c000195e:	eb 53                	jmp    c00019b3 <dlcalloc+0x87>
c0001960:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001966:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000196d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001974:	83 f8 13             	cmp    eax,0x13
c0001977:	76 46                	jbe    c00019bf <dlcalloc+0x93>
c0001979:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001980:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001987:	83 f8 1b             	cmp    eax,0x1b
c000198a:	76 33                	jbe    c00019bf <dlcalloc+0x93>
c000198c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001993:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000199a:	83 f8 23             	cmp    eax,0x23
c000199d:	76 20                	jbe    c00019bf <dlcalloc+0x93>
c000199f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019a6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019ad:	eb 10                	jmp    c00019bf <dlcalloc+0x93>
c00019af:	83 e8 08             	sub    eax,0x8
c00019b2:	52                   	push   edx
c00019b3:	50                   	push   eax
c00019b4:	6a 00                	push   0x0
c00019b6:	53                   	push   ebx
c00019b7:	e8 bc ed ff ff       	call   c0000778 <memset>
c00019bc:	83 c4 10             	add    esp,0x10
c00019bf:	89 d8                	mov    eax,ebx
c00019c1:	83 c4 08             	add    esp,0x8
c00019c4:	5b                   	pop    ebx
c00019c5:	c3                   	ret    

c00019c6 <dlcfree>:
c00019c6:	e9 f1 f3 ff ff       	jmp    c0000dbc <dlfree>

c00019cb <dlindependent_calloc>:
c00019cb:	83 ec 28             	sub    esp,0x28
c00019ce:	b9 03 00 00 00       	mov    ecx,0x3
c00019d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019df:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019e7:	e8 b9 fa ff ff       	call   c00014a5 <iALLOc>
c00019ec:	83 c4 2c             	add    esp,0x2c
c00019ef:	c3                   	ret    

c00019f0 <dlindependent_comalloc>:
c00019f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f8:	31 c9                	xor    ecx,ecx
c00019fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a02:	e9 9e fa ff ff       	jmp    c00014a5 <iALLOc>

c0001a07 <dlvalloc>:
c0001a07:	83 ec 0c             	sub    esp,0xc
c0001a0a:	83 3d c0 e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e1c0,0x0
c0001a11:	75 0a                	jne    c0001a1d <dlvalloc+0x16>
c0001a13:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c0001a18:	e8 b8 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a1d:	50                   	push   eax
c0001a1e:	50                   	push   eax
c0001a1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a23:	ff 35 1c e5 02 c0    	push   DWORD PTR ds:0xc002e51c
c0001a29:	e8 db fd ff ff       	call   c0001809 <dlmemalign>
c0001a2e:	83 c4 1c             	add    esp,0x1c
c0001a31:	c3                   	ret    

c0001a32 <dlpvalloc>:
c0001a32:	83 ec 0c             	sub    esp,0xc
c0001a35:	83 3d c0 e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e1c0,0x0
c0001a3c:	75 0a                	jne    c0001a48 <dlpvalloc+0x16>
c0001a3e:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c0001a43:	e8 8d f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a48:	a1 1c e5 02 c0       	mov    eax,ds:0xc002e51c
c0001a4d:	89 c1                	mov    ecx,eax
c0001a4f:	52                   	push   edx
c0001a50:	f7 d9                	neg    ecx
c0001a52:	52                   	push   edx
c0001a53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a57:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a5b:	21 ca                	and    edx,ecx
c0001a5d:	52                   	push   edx
c0001a5e:	50                   	push   eax
c0001a5f:	e8 a5 fd ff ff       	call   c0001809 <dlmemalign>
c0001a64:	83 c4 1c             	add    esp,0x1c
c0001a67:	c3                   	ret    

c0001a68 <dlmalloc_trim>:
c0001a68:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c0001a6d:	e8 63 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a72:	31 c0                	xor    eax,eax
c0001a74:	c3                   	ret    

c0001a75 <dlmalloc_usable_size>:
c0001a75:	53                   	push   ebx
c0001a76:	31 c0                	xor    eax,eax
c0001a78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a7c:	85 c9                	test   ecx,ecx
c0001a7e:	74 24                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a80:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a83:	f6 c2 02             	test   dl,0x2
c0001a86:	74 08                	je     c0001a90 <dlmalloc_usable_size+0x1b>
c0001a88:	83 e2 fc             	and    edx,0xfffffffc
c0001a8b:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a8e:	eb 14                	jmp    c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a90:	89 d3                	mov    ebx,edx
c0001a92:	31 c0                	xor    eax,eax
c0001a94:	83 e3 fe             	and    ebx,0xfffffffe
c0001a97:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a9c:	74 06                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a9e:	83 e2 fc             	and    edx,0xfffffffc
c0001aa1:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aa4:	5b                   	pop    ebx
c0001aa5:	c3                   	ret    

c0001aa6 <dlmallinfo>:
c0001aa6:	55                   	push   ebp
c0001aa7:	57                   	push   edi
c0001aa8:	56                   	push   esi
c0001aa9:	53                   	push   ebx
c0001aaa:	83 ec 08             	sub    esp,0x8
c0001aad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab1:	83 3d ec e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e1ec,0x0
c0001ab8:	75 0a                	jne    c0001ac4 <dlmallinfo+0x1e>
c0001aba:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c0001abf:	e8 11 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001ac4:	a1 ec e1 02 c0       	mov    eax,ds:0xc002e1ec
c0001ac9:	31 ed                	xor    ebp,ebp
c0001acb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ace:	31 c9                	xor    ecx,ecx
c0001ad0:	83 e0 fc             	and    eax,0xfffffffc
c0001ad3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	8b 14 85 c4 e1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1e3c]
c0001ae0:	85 d2                	test   edx,edx
c0001ae2:	74 0e                	je     c0001af2 <dlmallinfo+0x4c>
c0001ae4:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ae7:	45                   	inc    ebp
c0001ae8:	83 e6 fc             	and    esi,0xfffffffc
c0001aeb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aee:	01 f1                	add    ecx,esi
c0001af0:	eb ee                	jmp    c0001ae0 <dlmallinfo+0x3a>
c0001af2:	40                   	inc    eax
c0001af3:	83 f8 0a             	cmp    eax,0xa
c0001af6:	75 e1                	jne    c0001ad9 <dlmallinfo+0x33>
c0001af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001afc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b03:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b06:	b8 f4 e1 02 c0       	mov    eax,0xc002e1f4
c0001b0b:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b0e:	39 f0                	cmp    eax,esi
c0001b10:	74 10                	je     c0001b22 <dlmallinfo+0x7c>
c0001b12:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b15:	ff 04 24             	inc    DWORD PTR [esp]
c0001b18:	83 e7 fc             	and    edi,0xfffffffc
c0001b1b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b1e:	01 fa                	add    edx,edi
c0001b20:	eb ec                	jmp    c0001b0e <dlmallinfo+0x68>
c0001b22:	83 c0 08             	add    eax,0x8
c0001b25:	3d ec e4 02 c0       	cmp    eax,0xc002e4ec
c0001b2a:	75 df                	jne    c0001b0b <dlmallinfo+0x65>
c0001b2c:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b2f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b32:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b35:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0001b3a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b3d:	89 03                	mov    DWORD PTR [ebx],eax
c0001b3f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b42:	8b 35 10 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e510
c0001b48:	29 d0                	sub    eax,edx
c0001b4a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b50:	8b 35 24 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e524
c0001b56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b5a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b5d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b60:	8b 35 34 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e534
c0001b66:	89 d8                	mov    eax,ebx
c0001b68:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b6b:	83 c4 08             	add    esp,0x8
c0001b6e:	5b                   	pop    ebx
c0001b6f:	5e                   	pop    esi
c0001b70:	5f                   	pop    edi
c0001b71:	5d                   	pop    ebp
c0001b72:	c2 04 00             	ret    0x4

c0001b75 <dlmalloc_stats>:
c0001b75:	83 ec 30             	sub    esp,0x30
c0001b78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b7c:	50                   	push   eax
c0001b7d:	e8 24 ff ff ff       	call   c0001aa6 <dlmallinfo>
c0001b82:	83 c4 30             	add    esp,0x30
c0001b85:	c3                   	ret    

c0001b86 <dlmallopt>:
c0001b86:	56                   	push   esi
c0001b87:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c0001b8c:	53                   	push   ebx
c0001b8d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b95:	e8 3b f1 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001b9a:	8d 46 04             	lea    eax,[esi+0x4]
c0001b9d:	83 f8 05             	cmp    eax,0x5
c0001ba0:	77 67                	ja     c0001c09 <dlmallopt+0x83>
c0001ba2:	ff 24 85 64 93 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6c9c]
c0001ba9:	83 fb 50             	cmp    ebx,0x50
c0001bac:	77 5b                	ja     c0001c09 <dlmallopt+0x83>
c0001bae:	ba 08 00 00 00       	mov    edx,0x8
c0001bb3:	85 db                	test   ebx,ebx
c0001bb5:	74 12                	je     c0001bc9 <dlmallopt+0x43>
c0001bb7:	83 c3 0b             	add    ebx,0xb
c0001bba:	ba 10 00 00 00       	mov    edx,0x10
c0001bbf:	83 fb 0f             	cmp    ebx,0xf
c0001bc2:	76 05                	jbe    c0001bc9 <dlmallopt+0x43>
c0001bc4:	89 da                	mov    edx,ebx
c0001bc6:	83 e2 f8             	and    edx,0xfffffff8
c0001bc9:	a1 c0 e1 02 c0       	mov    eax,ds:0xc002e1c0
c0001bce:	83 e0 03             	and    eax,0x3
c0001bd1:	09 d0                	or     eax,edx
c0001bd3:	a3 c0 e1 02 c0       	mov    ds:0xc002e1c0,eax
c0001bd8:	eb 31                	jmp    c0001c0b <dlmallopt+0x85>
c0001bda:	89 1d 04 e5 02 c0    	mov    DWORD PTR ds:0xc002e504,ebx
c0001be0:	eb 06                	jmp    c0001be8 <dlmallopt+0x62>
c0001be2:	89 1d 08 e5 02 c0    	mov    DWORD PTR ds:0xc002e508,ebx
c0001be8:	be 01 00 00 00       	mov    esi,0x1
c0001bed:	eb 1c                	jmp    c0001c0b <dlmallopt+0x85>
c0001bef:	89 1d 0c e5 02 c0    	mov    DWORD PTR ds:0xc002e50c,ebx
c0001bf5:	eb f1                	jmp    c0001be8 <dlmallopt+0x62>
c0001bf7:	31 f6                	xor    esi,esi
c0001bf9:	85 db                	test   ebx,ebx
c0001bfb:	75 0e                	jne    c0001c0b <dlmallopt+0x85>
c0001bfd:	c7 05 14 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e514,0x0
c0001c07:	eb df                	jmp    c0001be8 <dlmallopt+0x62>
c0001c09:	31 f6                	xor    esi,esi
c0001c0b:	89 f0                	mov    eax,esi
c0001c0d:	5b                   	pop    ebx
c0001c0e:	5e                   	pop    esi
c0001c0f:	c3                   	ret    

c0001c10 <disk_status>:
c0001c10:	31 c0                	xor    eax,eax
c0001c12:	c3                   	ret    

c0001c13 <disk_initialize>:
c0001c13:	31 c0                	xor    eax,eax
c0001c15:	c3                   	ret    

c0001c16 <disk_read>:
c0001c16:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c1b:	0f b6 04 85 a0 1c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce360]
c0001c23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c27:	e9 be f1 01 00       	jmp    c0020dea <fatWrapperReadDisk>

c0001c2c <disk_write>:
c0001c2c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c31:	0f b6 04 85 a0 1c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce360]
c0001c39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3d:	e9 ef f1 01 00       	jmp    c0020e31 <fatWrapperWriteDisk>

c0001c42 <disk_ioctl>:
c0001c42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c4b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c50:	0f b6 04 85 a0 1c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce360]
c0001c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c5c:	e9 17 f2 01 00       	jmp    c0020e78 <fatWrapperIoctl>

c0001c61 <ld_word>:
c0001c61:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c65:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c68:	c1 e2 08             	shl    edx,0x8
c0001c6b:	09 d0                	or     eax,edx
c0001c6d:	c3                   	ret    

c0001c6e <ld_dword>:
c0001c6e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c72:	89 d1                	mov    ecx,edx
c0001c74:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c78:	c1 e1 08             	shl    ecx,0x8
c0001c7b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c7e:	09 ca                	or     edx,ecx
c0001c80:	c1 e2 08             	shl    edx,0x8
c0001c83:	09 d0                	or     eax,edx
c0001c85:	c3                   	ret    

c0001c86 <ld_qword>:
c0001c86:	57                   	push   edi
c0001c87:	56                   	push   esi
c0001c88:	53                   	push   ebx
c0001c89:	31 db                	xor    ebx,ebx
c0001c8b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c8e:	89 df                	mov    edi,ebx
c0001c90:	89 ce                	mov    esi,ecx
c0001c92:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c96:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c9a:	c1 e6 08             	shl    esi,0x8
c0001c9d:	09 f2                	or     edx,esi
c0001c9f:	89 d6                	mov    esi,edx
c0001ca1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001ca5:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca9:	c1 e6 08             	shl    esi,0x8
c0001cac:	09 f2                	or     edx,esi
c0001cae:	89 d6                	mov    esi,edx
c0001cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cb4:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cbb:	c1 e6 08             	shl    esi,0x8
c0001cbe:	89 fb                	mov    ebx,edi
c0001cc0:	09 f2                	or     edx,esi
c0001cc2:	89 d1                	mov    ecx,edx
c0001cc4:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cc8:	c1 e1 08             	shl    ecx,0x8
c0001ccb:	89 da                	mov    edx,ebx
c0001ccd:	09 c8                	or     eax,ecx
c0001ccf:	5b                   	pop    ebx
c0001cd0:	5e                   	pop    esi
c0001cd1:	5f                   	pop    edi
c0001cd2:	c3                   	ret    

c0001cd3 <st_word>:
c0001cd3:	66 89 10             	mov    WORD PTR [eax],dx
c0001cd6:	c3                   	ret    

c0001cd7 <st_dword>:
c0001cd7:	89 10                	mov    DWORD PTR [eax],edx
c0001cd9:	c3                   	ret    

c0001cda <st_qword>:
c0001cda:	89 10                	mov    DWORD PTR [eax],edx
c0001cdc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cdf:	c3                   	ret    

c0001ce0 <mem_cpy>:
c0001ce0:	85 c9                	test   ecx,ecx
c0001ce2:	74 10                	je     c0001cf4 <mem_cpy+0x14>
c0001ce4:	57                   	push   edi
c0001ce5:	01 c1                	add    ecx,eax
c0001ce7:	56                   	push   esi
c0001ce8:	89 c7                	mov    edi,eax
c0001cea:	89 d6                	mov    esi,edx
c0001cec:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ced:	39 f9                	cmp    ecx,edi
c0001cef:	75 fb                	jne    c0001cec <mem_cpy+0xc>
c0001cf1:	5e                   	pop    esi
c0001cf2:	5f                   	pop    edi
c0001cf3:	c3                   	ret    
c0001cf4:	c3                   	ret    

c0001cf5 <mem_set>:
c0001cf5:	01 c1                	add    ecx,eax
c0001cf7:	40                   	inc    eax
c0001cf8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cfb:	39 c8                	cmp    eax,ecx
c0001cfd:	75 f8                	jne    c0001cf7 <mem_set+0x2>
c0001cff:	c3                   	ret    

c0001d00 <mem_cmp>:
c0001d00:	57                   	push   edi
c0001d01:	56                   	push   esi
c0001d02:	89 c6                	mov    esi,eax
c0001d04:	53                   	push   ebx
c0001d05:	46                   	inc    esi
c0001d06:	42                   	inc    edx
c0001d07:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d0b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d0f:	29 fb                	sub    ebx,edi
c0001d11:	89 cf                	mov    edi,ecx
c0001d13:	29 f7                	sub    edi,esi
c0001d15:	01 c7                	add    edi,eax
c0001d17:	74 04                	je     c0001d1d <mem_cmp+0x1d>
c0001d19:	85 db                	test   ebx,ebx
c0001d1b:	74 e8                	je     c0001d05 <mem_cmp+0x5>
c0001d1d:	89 d8                	mov    eax,ebx
c0001d1f:	5b                   	pop    ebx
c0001d20:	5e                   	pop    esi
c0001d21:	5f                   	pop    edi
c0001d22:	c3                   	ret    

c0001d23 <chk_chr>:
c0001d23:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d26:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d29:	74 07                	je     c0001d32 <chk_chr+0xf>
c0001d2b:	39 d1                	cmp    ecx,edx
c0001d2d:	74 03                	je     c0001d32 <chk_chr+0xf>
c0001d2f:	40                   	inc    eax
c0001d30:	eb f1                	jmp    c0001d23 <chk_chr>
c0001d32:	89 c8                	mov    eax,ecx
c0001d34:	c3                   	ret    

c0001d35 <dbc_1st>:
c0001d35:	31 c0                	xor    eax,eax
c0001d37:	c3                   	ret    

c0001d38 <dbc_2nd>:
c0001d38:	31 c0                	xor    eax,eax
c0001d3a:	c3                   	ret    

c0001d3b <tchar2uni>:
c0001d3b:	57                   	push   edi
c0001d3c:	89 c7                	mov    edi,eax
c0001d3e:	56                   	push   esi
c0001d3f:	53                   	push   ebx
c0001d40:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d42:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d44:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d47:	84 c9                	test   cl,cl
c0001d49:	78 0a                	js     c0001d55 <tchar2uni+0x1a>
c0001d4b:	0f b6 d1             	movzx  edx,cl
c0001d4e:	89 f3                	mov    ebx,esi
c0001d50:	e9 9f 00 00 00       	jmp    c0001df4 <tchar2uni+0xb9>
c0001d55:	88 ca                	mov    dl,cl
c0001d57:	83 e2 e0             	and    edx,0xffffffe0
c0001d5a:	80 fa c0             	cmp    dl,0xc0
c0001d5d:	75 0c                	jne    c0001d6b <tchar2uni+0x30>
c0001d5f:	89 ca                	mov    edx,ecx
c0001d61:	b9 01 00 00 00       	mov    ecx,0x1
c0001d66:	83 e2 1f             	and    edx,0x1f
c0001d69:	eb 2e                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d6b:	88 ca                	mov    dl,cl
c0001d6d:	83 e2 f0             	and    edx,0xfffffff0
c0001d70:	80 fa e0             	cmp    dl,0xe0
c0001d73:	75 0c                	jne    c0001d81 <tchar2uni+0x46>
c0001d75:	89 ca                	mov    edx,ecx
c0001d77:	b9 02 00 00 00       	mov    ecx,0x2
c0001d7c:	83 e2 0f             	and    edx,0xf
c0001d7f:	eb 18                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d81:	88 ca                	mov    dl,cl
c0001d83:	83 e2 f8             	and    edx,0xfffffff8
c0001d86:	88 d0                	mov    al,dl
c0001d88:	83 ca ff             	or     edx,0xffffffff
c0001d8b:	3c f0                	cmp    al,0xf0
c0001d8d:	75 6c                	jne    c0001dfb <tchar2uni+0xc0>
c0001d8f:	89 ca                	mov    edx,ecx
c0001d91:	b9 03 00 00 00       	mov    ecx,0x3
c0001d96:	83 e2 07             	and    edx,0x7
c0001d99:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d9d:	46                   	inc    esi
c0001d9e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da1:	88 c8                	mov    al,cl
c0001da3:	83 e0 c0             	and    eax,0xffffffc0
c0001da6:	3c 80                	cmp    al,0x80
c0001da8:	75 4e                	jne    c0001df8 <tchar2uni+0xbd>
c0001daa:	c1 e2 06             	shl    edx,0x6
c0001dad:	83 e1 3f             	and    ecx,0x3f
c0001db0:	09 ca                	or     edx,ecx
c0001db2:	39 de                	cmp    esi,ebx
c0001db4:	75 e7                	jne    c0001d9d <tchar2uni+0x62>
c0001db6:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001db9:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dbf:	77 37                	ja     c0001df8 <tchar2uni+0xbd>
c0001dc1:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dc7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dcd:	76 29                	jbe    c0001df8 <tchar2uni+0xbd>
c0001dcf:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001dd5:	76 1d                	jbe    c0001df4 <tchar2uni+0xb9>
c0001dd7:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ddd:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001de3:	c1 e1 06             	shl    ecx,0x6
c0001de6:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dec:	09 ca                	or     edx,ecx
c0001dee:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001df4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001df6:	eb 03                	jmp    c0001dfb <tchar2uni+0xc0>
c0001df8:	83 ca ff             	or     edx,0xffffffff
c0001dfb:	5b                   	pop    ebx
c0001dfc:	89 d0                	mov    eax,edx
c0001dfe:	5e                   	pop    esi
c0001dff:	5f                   	pop    edi
c0001e00:	c3                   	ret    

c0001e01 <put_utf>:
c0001e01:	53                   	push   ebx
c0001e02:	83 f8 7f             	cmp    eax,0x7f
c0001e05:	89 c3                	mov    ebx,eax
c0001e07:	b0 00                	mov    al,0x0
c0001e09:	77 11                	ja     c0001e1c <put_utf+0x1b>
c0001e0b:	85 c9                	test   ecx,ecx
c0001e0d:	0f 84 e5 00 00 00    	je     c0001ef8 <put_utf+0xf7>
c0001e13:	88 1a                	mov    BYTE PTR [edx],bl
c0001e15:	b0 01                	mov    al,0x1
c0001e17:	e9 dc 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e1c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e22:	77 23                	ja     c0001e47 <put_utf+0x46>
c0001e24:	83 f9 01             	cmp    ecx,0x1
c0001e27:	0f 86 cb 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e2d:	89 d8                	mov    eax,ebx
c0001e2f:	83 e3 3f             	and    ebx,0x3f
c0001e32:	c1 e8 06             	shr    eax,0x6
c0001e35:	83 cb 80             	or     ebx,0xffffff80
c0001e38:	83 c8 c0             	or     eax,0xffffffc0
c0001e3b:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e3e:	88 02                	mov    BYTE PTR [edx],al
c0001e40:	b0 02                	mov    al,0x2
c0001e42:	e9 b1 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e47:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e4d:	77 40                	ja     c0001e8f <put_utf+0x8e>
c0001e4f:	83 f9 02             	cmp    ecx,0x2
c0001e52:	0f 86 a0 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e58:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e5e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e64:	0f 86 8e 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e6a:	89 d8                	mov    eax,ebx
c0001e6c:	c1 e8 0c             	shr    eax,0xc
c0001e6f:	83 c8 e0             	or     eax,0xffffffe0
c0001e72:	88 02                	mov    BYTE PTR [edx],al
c0001e74:	89 d8                	mov    eax,ebx
c0001e76:	83 e3 3f             	and    ebx,0x3f
c0001e79:	c1 e8 06             	shr    eax,0x6
c0001e7c:	83 cb 80             	or     ebx,0xffffff80
c0001e7f:	83 e0 3f             	and    eax,0x3f
c0001e82:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e85:	83 c8 80             	or     eax,0xffffff80
c0001e88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e8b:	b0 03                	mov    al,0x3
c0001e8d:	eb 69                	jmp    c0001ef8 <put_utf+0xf7>
c0001e8f:	83 f9 03             	cmp    ecx,0x3
c0001e92:	76 64                	jbe    c0001ef8 <put_utf+0xf7>
c0001e94:	89 d9                	mov    ecx,ebx
c0001e96:	0f b7 c3             	movzx  eax,bx
c0001e99:	66 31 c9             	xor    cx,cx
c0001e9c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ea2:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ea8:	c1 e9 06             	shr    ecx,0x6
c0001eab:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb1:	77 43                	ja     c0001ef6 <put_utf+0xf5>
c0001eb3:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001eb9:	77 3b                	ja     c0001ef6 <put_utf+0xf5>
c0001ebb:	09 cb                	or     ebx,ecx
c0001ebd:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ec3:	89 d8                	mov    eax,ebx
c0001ec5:	c1 e8 12             	shr    eax,0x12
c0001ec8:	83 c8 f0             	or     eax,0xfffffff0
c0001ecb:	88 02                	mov    BYTE PTR [edx],al
c0001ecd:	89 d8                	mov    eax,ebx
c0001ecf:	c1 e8 0c             	shr    eax,0xc
c0001ed2:	83 e0 3f             	and    eax,0x3f
c0001ed5:	83 c8 80             	or     eax,0xffffff80
c0001ed8:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001edb:	89 d8                	mov    eax,ebx
c0001edd:	83 e3 3f             	and    ebx,0x3f
c0001ee0:	c1 e8 06             	shr    eax,0x6
c0001ee3:	83 cb 80             	or     ebx,0xffffff80
c0001ee6:	83 e0 3f             	and    eax,0x3f
c0001ee9:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eec:	83 c8 80             	or     eax,0xffffff80
c0001eef:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ef2:	b0 04                	mov    al,0x4
c0001ef4:	eb 02                	jmp    c0001ef8 <put_utf+0xf7>
c0001ef6:	31 c0                	xor    eax,eax
c0001ef8:	5b                   	pop    ebx
c0001ef9:	c3                   	ret    

c0001efa <clst2sect>:
c0001efa:	89 c1                	mov    ecx,eax
c0001efc:	83 ea 02             	sub    edx,0x2
c0001eff:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f02:	83 e8 02             	sub    eax,0x2
c0001f05:	39 d0                	cmp    eax,edx
c0001f07:	76 0d                	jbe    c0001f16 <clst2sect+0x1c>
c0001f09:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f0d:	f7 e2                	mul    edx
c0001f0f:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f12:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f15:	c3                   	ret    
c0001f16:	31 c0                	xor    eax,eax
c0001f18:	31 d2                	xor    edx,edx
c0001f1a:	c3                   	ret    

c0001f1b <clmt_clust>:
c0001f1b:	57                   	push   edi
c0001f1c:	89 cf                	mov    edi,ecx
c0001f1e:	56                   	push   esi
c0001f1f:	89 d6                	mov    esi,edx
c0001f21:	53                   	push   ebx
c0001f22:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f26:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f29:	89 f2                	mov    edx,esi
c0001f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f2d:	c1 ef 09             	shr    edi,0x9
c0001f30:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f34:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f37:	89 f9                	mov    ecx,edi
c0001f39:	31 ff                	xor    edi,edi
c0001f3b:	57                   	push   edi
c0001f3c:	56                   	push   esi
c0001f3d:	51                   	push   ecx
c0001f3e:	52                   	push   edx
c0001f3f:	e8 a8 4a 02 00       	call   c00269ec <__udivdi3>
c0001f44:	83 c4 10             	add    esp,0x10
c0001f47:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f49:	85 d2                	test   edx,edx
c0001f4b:	74 10                	je     c0001f5d <clmt_clust+0x42>
c0001f4d:	39 d0                	cmp    eax,edx
c0001f4f:	72 07                	jb     c0001f58 <clmt_clust+0x3d>
c0001f51:	29 d0                	sub    eax,edx
c0001f53:	83 c3 08             	add    ebx,0x8
c0001f56:	eb ef                	jmp    c0001f47 <clmt_clust+0x2c>
c0001f58:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f5b:	89 c2                	mov    edx,eax
c0001f5d:	5b                   	pop    ebx
c0001f5e:	89 d0                	mov    eax,edx
c0001f60:	5e                   	pop    esi
c0001f61:	5f                   	pop    edi
c0001f62:	c3                   	ret    

c0001f63 <pick_lfn>:
c0001f63:	55                   	push   ebp
c0001f64:	57                   	push   edi
c0001f65:	56                   	push   esi
c0001f66:	89 d6                	mov    esi,edx
c0001f68:	53                   	push   ebx
c0001f69:	89 c3                	mov    ebx,eax
c0001f6b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f6e:	e8 ee fc ff ff       	call   c0001c61 <ld_word>
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 04                	je     c0001f7c <pick_lfn+0x19>
c0001f78:	31 c0                	xor    eax,eax
c0001f7a:	eb 5c                	jmp    c0001fd8 <pick_lfn+0x75>
c0001f7c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f7f:	bd 01 00 00 00       	mov    ebp,0x1
c0001f84:	83 e1 bf             	and    ecx,0xffffffbf
c0001f87:	31 ff                	xor    edi,edi
c0001f89:	49                   	dec    ecx
c0001f8a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f8d:	0f b6 87 80 94 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6b80]
c0001f94:	01 f0                	add    eax,esi
c0001f96:	e8 c6 fc ff ff       	call   c0001c61 <ld_word>
c0001f9b:	66 85 ed             	test   bp,bp
c0001f9e:	74 11                	je     c0001fb1 <pick_lfn+0x4e>
c0001fa0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fa6:	77 d0                	ja     c0001f78 <pick_lfn+0x15>
c0001fa8:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fac:	89 c5                	mov    ebp,eax
c0001fae:	41                   	inc    ecx
c0001faf:	eb 04                	jmp    c0001fb5 <pick_lfn+0x52>
c0001fb1:	66 40                	inc    ax
c0001fb3:	75 c3                	jne    c0001f78 <pick_lfn+0x15>
c0001fb5:	47                   	inc    edi
c0001fb6:	83 ff 0d             	cmp    edi,0xd
c0001fb9:	75 d2                	jne    c0001f8d <pick_lfn+0x2a>
c0001fbb:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fbe:	74 13                	je     c0001fd3 <pick_lfn+0x70>
c0001fc0:	66 85 ed             	test   bp,bp
c0001fc3:	74 0e                	je     c0001fd3 <pick_lfn+0x70>
c0001fc5:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fcb:	77 ab                	ja     c0001f78 <pick_lfn+0x15>
c0001fcd:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fd3:	b8 01 00 00 00       	mov    eax,0x1
c0001fd8:	5b                   	pop    ebx
c0001fd9:	5e                   	pop    esi
c0001fda:	5f                   	pop    edi
c0001fdb:	5d                   	pop    ebp
c0001fdc:	c3                   	ret    

c0001fdd <put_lfn>:
c0001fdd:	55                   	push   ebp
c0001fde:	31 ed                	xor    ebp,ebp
c0001fe0:	57                   	push   edi
c0001fe1:	89 d7                	mov    edi,edx
c0001fe3:	56                   	push   esi
c0001fe4:	31 f6                	xor    esi,esi
c0001fe6:	53                   	push   ebx
c0001fe7:	83 ec 08             	sub    esp,0x8
c0001fea:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fed:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ff5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ffb:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ffe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002001:	31 d2                	xor    edx,edx
c0002003:	e8 cb fc ff ff       	call   c0001cd3 <st_word>
c0002008:	0f b6 d9             	movzx  ebx,cl
c000200b:	4b                   	dec    ebx
c000200c:	6b db 0d             	imul   ebx,ebx,0xd
c000200f:	66 83 fe ff          	cmp    si,0xffff
c0002013:	74 08                	je     c000201d <put_lfn+0x40>
c0002015:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002018:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000201c:	43                   	inc    ebx
c000201d:	0f b6 85 80 94 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6b80]
c0002024:	0f b7 d6             	movzx  edx,si
c0002027:	01 f8                	add    eax,edi
c0002029:	e8 a5 fc ff ff       	call   c0001cd3 <st_word>
c000202e:	66 85 f6             	test   si,si
c0002031:	75 03                	jne    c0002036 <put_lfn+0x59>
c0002033:	83 ce ff             	or     esi,0xffffffff
c0002036:	45                   	inc    ebp
c0002037:	83 fd 0d             	cmp    ebp,0xd
c000203a:	75 d3                	jne    c000200f <put_lfn+0x32>
c000203c:	66 46                	inc    si
c000203e:	74 0a                	je     c000204a <put_lfn+0x6d>
c0002040:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002043:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002048:	75 09                	jne    c0002053 <put_lfn+0x76>
c000204a:	88 c8                	mov    al,cl
c000204c:	83 c8 40             	or     eax,0x40
c000204f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002053:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002057:	88 07                	mov    BYTE PTR [edi],al
c0002059:	83 c4 08             	add    esp,0x8
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <gen_numname>:
c0002061:	57                   	push   edi
c0002062:	89 cf                	mov    edi,ecx
c0002064:	56                   	push   esi
c0002065:	b9 0b 00 00 00       	mov    ecx,0xb
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 10             	sub    esp,0x10
c0002070:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002074:	e8 67 fc ff ff       	call   c0001ce0 <mem_cpy>
c0002079:	83 fb 05             	cmp    ebx,0x5
c000207c:	76 2d                	jbe    c00020ab <gen_numname+0x4a>
c000207e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002081:	66 85 c0             	test   ax,ax
c0002084:	74 25                	je     c00020ab <gen_numname+0x4a>
c0002086:	83 c7 02             	add    edi,0x2
c0002089:	ba 10 00 00 00       	mov    edx,0x10
c000208e:	01 db                	add    ebx,ebx
c0002090:	89 c1                	mov    ecx,eax
c0002092:	66 d1 e8             	shr    ax,1
c0002095:	83 e1 01             	and    ecx,0x1
c0002098:	01 cb                	add    ebx,ecx
c000209a:	0f ba e3 10          	bt     ebx,0x10
c000209e:	73 06                	jae    c00020a6 <gen_numname+0x45>
c00020a0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020a6:	4a                   	dec    edx
c00020a7:	75 e5                	jne    c000208e <gen_numname+0x2d>
c00020a9:	eb d3                	jmp    c000207e <gen_numname+0x1d>
c00020ab:	b8 07 00 00 00       	mov    eax,0x7
c00020b0:	88 d9                	mov    cl,bl
c00020b2:	83 e1 0f             	and    ecx,0xf
c00020b5:	8d 51 30             	lea    edx,[ecx+0x30]
c00020b8:	80 fa 39             	cmp    dl,0x39
c00020bb:	76 03                	jbe    c00020c0 <gen_numname+0x5f>
c00020bd:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c0:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020c3:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020c7:	89 da                	mov    edx,ebx
c00020c9:	c1 ea 04             	shr    edx,0x4
c00020cc:	83 fb 0f             	cmp    ebx,0xf
c00020cf:	76 06                	jbe    c00020d7 <gen_numname+0x76>
c00020d1:	89 c8                	mov    eax,ecx
c00020d3:	89 d3                	mov    ebx,edx
c00020d5:	eb d9                	jmp    c00020b0 <gen_numname+0x4f>
c00020d7:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020dc:	31 d2                	xor    edx,edx
c00020de:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e1:	8d 04 16             	lea    eax,[esi+edx*1]
c00020e4:	39 ca                	cmp    edx,ecx
c00020e6:	73 18                	jae    c0002100 <gen_numname+0x9f>
c00020e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020eb:	3c 20                	cmp    al,0x20
c00020ed:	74 11                	je     c0002100 <gen_numname+0x9f>
c00020ef:	e8 41 fc ff ff       	call   c0001d35 <dbc_1st>
c00020f4:	85 c0                	test   eax,eax
c00020f6:	74 05                	je     c00020fd <gen_numname+0x9c>
c00020f8:	39 d3                	cmp    ebx,edx
c00020fa:	74 04                	je     c0002100 <gen_numname+0x9f>
c00020fc:	42                   	inc    edx
c00020fd:	42                   	inc    edx
c00020fe:	eb e1                	jmp    c00020e1 <gen_numname+0x80>
c0002100:	b0 20                	mov    al,0x20
c0002102:	83 f9 07             	cmp    ecx,0x7
c0002105:	77 05                	ja     c000210c <gen_numname+0xab>
c0002107:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000210b:	41                   	inc    ecx
c000210c:	42                   	inc    edx
c000210d:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002111:	83 fa 07             	cmp    edx,0x7
c0002114:	76 ea                	jbe    c0002100 <gen_numname+0x9f>
c0002116:	83 c4 10             	add    esp,0x10
c0002119:	5b                   	pop    ebx
c000211a:	5e                   	pop    esi
c000211b:	5f                   	pop    edi
c000211c:	c3                   	ret    

c000211d <sum_sfn>:
c000211d:	31 c9                	xor    ecx,ecx
c000211f:	31 d2                	xor    edx,edx
c0002121:	d0 ca                	ror    dl,1
c0002123:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002126:	41                   	inc    ecx
c0002127:	83 f9 0b             	cmp    ecx,0xb
c000212a:	75 f5                	jne    c0002121 <sum_sfn+0x4>
c000212c:	88 d0                	mov    al,dl
c000212e:	c3                   	ret    

c000212f <xdir_sum>:
c000212f:	56                   	push   esi
c0002130:	31 c9                	xor    ecx,ecx
c0002132:	53                   	push   ebx
c0002133:	31 d2                	xor    edx,edx
c0002135:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002139:	43                   	inc    ebx
c000213a:	c1 e3 05             	shl    ebx,0x5
c000213d:	83 fa 02             	cmp    edx,0x2
c0002140:	74 0b                	je     c000214d <xdir_sum+0x1e>
c0002142:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002146:	66 d1 c9             	ror    cx,1
c0002149:	01 f1                	add    ecx,esi
c000214b:	eb 05                	jmp    c0002152 <xdir_sum+0x23>
c000214d:	ba 03 00 00 00       	mov    edx,0x3
c0002152:	42                   	inc    edx
c0002153:	39 d3                	cmp    ebx,edx
c0002155:	77 e6                	ja     c000213d <xdir_sum+0xe>
c0002157:	89 c8                	mov    eax,ecx
c0002159:	5b                   	pop    ebx
c000215a:	5e                   	pop    esi
c000215b:	c3                   	ret    

c000215c <xsum32>:
c000215c:	d1 ca                	ror    edx,1
c000215e:	0f b6 c0             	movzx  eax,al
c0002161:	01 d0                	add    eax,edx
c0002163:	c3                   	ret    

c0002164 <get_xfileinfo>:
c0002164:	55                   	push   ebp
c0002165:	31 c9                	xor    ecx,ecx
c0002167:	57                   	push   edi
c0002168:	bd 40 00 00 00       	mov    ebp,0x40
c000216d:	56                   	push   esi
c000216e:	31 ff                	xor    edi,edi
c0002170:	53                   	push   ebx
c0002171:	89 c6                	mov    esi,eax
c0002173:	83 ec 0c             	sub    esp,0xc
c0002176:	89 d3                	mov    ebx,edx
c0002178:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000217f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002183:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002186:	76 6d                	jbe    c00021f5 <get_xfileinfo+0x91>
c0002188:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000218e:	76 0b                	jbe    c000219b <get_xfileinfo+0x37>
c0002190:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002194:	bf 01 00 00 00       	mov    edi,0x1
c0002199:	eb 63                	jmp    c00021fe <get_xfileinfo+0x9a>
c000219b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a1:	75 03                	jne    c00021a6 <get_xfileinfo+0x42>
c00021a3:	83 c5 02             	add    ebp,0x2
c00021a6:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021a9:	83 c5 02             	add    ebp,0x2
c00021ac:	e8 b0 fa ff ff       	call   c0001c61 <ld_word>
c00021b1:	ff 04 24             	inc    DWORD PTR [esp]
c00021b4:	66 85 c9             	test   cx,cx
c00021b7:	75 0d                	jne    c00021c6 <get_xfileinfo+0x62>
c00021b9:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021bf:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021c4:	76 2b                	jbe    c00021f1 <get_xfileinfo+0x8d>
c00021c6:	c1 e1 10             	shl    ecx,0x10
c00021c9:	ba ff 00 00 00       	mov    edx,0xff
c00021ce:	0f b7 c0             	movzx  eax,ax
c00021d1:	29 fa                	sub    edx,edi
c00021d3:	09 c8                	or     eax,ecx
c00021d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021d9:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e1:	e8 1b fc ff ff       	call   c0001e01 <put_utf>
c00021e6:	84 c0                	test   al,al
c00021e8:	74 a6                	je     c0002190 <get_xfileinfo+0x2c>
c00021ea:	0f b6 c0             	movzx  eax,al
c00021ed:	01 c7                	add    edi,eax
c00021ef:	31 c0                	xor    eax,eax
c00021f1:	89 c1                	mov    ecx,eax
c00021f3:	eb 8a                	jmp    c000217f <get_xfileinfo+0x1b>
c00021f5:	85 ff                	test   edi,edi
c00021f7:	74 97                	je     c0002190 <get_xfileinfo+0x2c>
c00021f9:	66 85 c9             	test   cx,cx
c00021fc:	75 92                	jne    c0002190 <get_xfileinfo+0x2c>
c00021fe:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002203:	31 c0                	xor    eax,eax
c0002205:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002209:	31 d2                	xor    edx,edx
c000220b:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c000220e:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002211:	80 e1 10             	and    cl,0x10
c0002214:	75 08                	jne    c000221e <get_xfileinfo+0xba>
c0002216:	8d 46 38             	lea    eax,[esi+0x38]
c0002219:	e8 68 fa ff ff       	call   c0001c86 <ld_qword>
c000221e:	89 03                	mov    DWORD PTR [ebx],eax
c0002220:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002223:	8d 46 0c             	lea    eax,[esi+0xc]
c0002226:	e8 36 fa ff ff       	call   c0001c61 <ld_word>
c000222b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000222f:	8d 46 0e             	lea    eax,[esi+0xe]
c0002232:	e8 2a fa ff ff       	call   c0001c61 <ld_word>
c0002237:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000223b:	83 c4 0c             	add    esp,0xc
c000223e:	5b                   	pop    ebx
c000223f:	5e                   	pop    esi
c0002240:	5f                   	pop    edi
c0002241:	5d                   	pop    ebp
c0002242:	c3                   	ret    

c0002243 <get_ldnumber>:
c0002243:	8b 10                	mov    edx,DWORD PTR [eax]
c0002245:	85 d2                	test   edx,edx
c0002247:	74 14                	je     c000225d <get_ldnumber+0x1a>
c0002249:	56                   	push   esi
c000224a:	53                   	push   ebx
c000224b:	89 d3                	mov    ebx,edx
c000224d:	43                   	inc    ebx
c000224e:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002251:	80 f9 1f             	cmp    cl,0x1f
c0002254:	76 0d                	jbe    c0002263 <get_ldnumber+0x20>
c0002256:	80 f9 3a             	cmp    cl,0x3a
c0002259:	75 f2                	jne    c000224d <get_ldnumber+0xa>
c000225b:	eb 0a                	jmp    c0002267 <get_ldnumber+0x24>
c000225d:	83 c9 ff             	or     ecx,0xffffffff
c0002260:	89 c8                	mov    eax,ecx
c0002262:	c3                   	ret    
c0002263:	31 c9                	xor    ecx,ecx
c0002265:	eb 24                	jmp    c000228b <get_ldnumber+0x48>
c0002267:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000226d:	80 f9 09             	cmp    cl,0x9
c0002270:	77 16                	ja     c0002288 <get_ldnumber+0x45>
c0002272:	83 c2 02             	add    edx,0x2
c0002275:	83 c9 ff             	or     ecx,0xffffffff
c0002278:	39 d3                	cmp    ebx,edx
c000227a:	75 0f                	jne    c000228b <get_ldnumber+0x48>
c000227c:	89 f2                	mov    edx,esi
c000227e:	89 18                	mov    DWORD PTR [eax],ebx
c0002280:	0f be ca             	movsx  ecx,dl
c0002283:	83 e9 30             	sub    ecx,0x30
c0002286:	eb 03                	jmp    c000228b <get_ldnumber+0x48>
c0002288:	83 c9 ff             	or     ecx,0xffffffff
c000228b:	89 c8                	mov    eax,ecx
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <crc32>:
c0002290:	56                   	push   esi
c0002291:	89 d6                	mov    esi,edx
c0002293:	53                   	push   ebx
c0002294:	b2 01                	mov    dl,0x1
c0002296:	bb 08 00 00 00       	mov    ebx,0x8
c000229b:	89 f1                	mov    ecx,esi
c000229d:	84 d1                	test   cl,dl
c000229f:	0f 95 c1             	setne  cl
c00022a2:	0f b6 c9             	movzx  ecx,cl
c00022a5:	31 c1                	xor    ecx,eax
c00022a7:	89 c8                	mov    eax,ecx
c00022a9:	d1 e8                	shr    eax,1
c00022ab:	80 e1 01             	and    cl,0x1
c00022ae:	74 05                	je     c00022b5 <crc32+0x25>
c00022b0:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022b5:	d1 e2                	shl    edx,1
c00022b7:	4b                   	dec    ebx
c00022b8:	75 e1                	jne    c000229b <crc32+0xb>
c00022ba:	5b                   	pop    ebx
c00022bb:	5e                   	pop    esi
c00022bc:	c3                   	ret    

c00022bd <test_gpt_header>:
c00022bd:	55                   	push   ebp
c00022be:	b9 10 00 00 00       	mov    ecx,0x10
c00022c3:	57                   	push   edi
c00022c4:	ba 80 93 02 c0       	mov    edx,0xc0029380
c00022c9:	56                   	push   esi
c00022ca:	31 ff                	xor    edi,edi
c00022cc:	53                   	push   ebx
c00022cd:	89 c3                	mov    ebx,eax
c00022cf:	e8 2c fa ff ff       	call   c0001d00 <mem_cmp>
c00022d4:	85 c0                	test   eax,eax
c00022d6:	75 55                	jne    c000232d <test_gpt_header+0x70>
c00022d8:	89 c7                	mov    edi,eax
c00022da:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022df:	83 ce ff             	or     esi,0xffffffff
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	83 fd 03             	cmp    ebp,0x3
c00022e7:	76 05                	jbe    c00022ee <test_gpt_header+0x31>
c00022e9:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022ee:	89 f0                	mov    eax,esi
c00022f0:	45                   	inc    ebp
c00022f1:	e8 9a ff ff ff       	call   c0002290 <crc32>
c00022f6:	83 fd 4c             	cmp    ebp,0x4c
c00022f9:	89 c6                	mov    esi,eax
c00022fb:	75 e5                	jne    c00022e2 <test_gpt_header+0x25>
c00022fd:	8d 43 10             	lea    eax,[ebx+0x10]
c0002300:	f7 d6                	not    esi
c0002302:	e8 67 f9 ff ff       	call   c0001c6e <ld_dword>
c0002307:	39 c6                	cmp    esi,eax
c0002309:	75 22                	jne    c000232d <test_gpt_header+0x70>
c000230b:	8d 43 54             	lea    eax,[ebx+0x54]
c000230e:	e8 5b f9 ff ff       	call   c0001c6e <ld_dword>
c0002313:	83 c0 80             	add    eax,0xffffff80
c0002316:	75 15                	jne    c000232d <test_gpt_header+0x70>
c0002318:	8d 43 50             	lea    eax,[ebx+0x50]
c000231b:	e8 4e f9 ff ff       	call   c0001c6e <ld_dword>
c0002320:	3d 80 00 00 00       	cmp    eax,0x80
c0002325:	0f 96 c0             	setbe  al
c0002328:	0f b6 c0             	movzx  eax,al
c000232b:	89 c7                	mov    edi,eax
c000232d:	5b                   	pop    ebx
c000232e:	89 f8                	mov    eax,edi
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    

c0002334 <make_rand>:
c0002334:	56                   	push   esi
c0002335:	85 c0                	test   eax,eax
c0002337:	53                   	push   ebx
c0002338:	75 05                	jne    c000233f <make_rand+0xb>
c000233a:	b8 01 00 00 00       	mov    eax,0x1
c000233f:	01 d1                	add    ecx,edx
c0002341:	bb 08 00 00 00       	mov    ebx,0x8
c0002346:	89 c6                	mov    esi,eax
c0002348:	d1 e8                	shr    eax,1
c000234a:	83 e6 01             	and    esi,0x1
c000234d:	85 f6                	test   esi,esi
c000234f:	74 05                	je     c0002356 <make_rand+0x22>
c0002351:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002356:	4b                   	dec    ebx
c0002357:	75 ed                	jne    c0002346 <make_rand+0x12>
c0002359:	42                   	inc    edx
c000235a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000235d:	39 ca                	cmp    edx,ecx
c000235f:	75 e0                	jne    c0002341 <make_rand+0xd>
c0002361:	5b                   	pop    ebx
c0002362:	5e                   	pop    esi
c0002363:	c3                   	ret    

c0002364 <validate>:
c0002364:	56                   	push   esi
c0002365:	53                   	push   ebx
c0002366:	89 d6                	mov    esi,edx
c0002368:	51                   	push   ecx
c0002369:	85 c0                	test   eax,eax
c000236b:	75 09                	jne    c0002376 <validate+0x12>
c000236d:	b8 09 00 00 00       	mov    eax,0x9
c0002372:	31 c9                	xor    ecx,ecx
c0002374:	eb 2f                	jmp    c00023a5 <validate+0x41>
c0002376:	89 c3                	mov    ebx,eax
c0002378:	8b 00                	mov    eax,DWORD PTR [eax]
c000237a:	85 c0                	test   eax,eax
c000237c:	74 ef                	je     c000236d <validate+0x9>
c000237e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002381:	74 ea                	je     c000236d <validate+0x9>
c0002383:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002387:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000238b:	75 e0                	jne    c000236d <validate+0x9>
c000238d:	83 ec 0c             	sub    esp,0xc
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 76 f8 ff ff       	call   c0001c10 <disk_status>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	a8 01                	test   al,0x1
c000239f:	75 cc                	jne    c000236d <validate+0x9>
c00023a1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023a3:	31 c0                	xor    eax,eax
c00023a5:	89 0e                	mov    DWORD PTR [esi],ecx
c00023a7:	5a                   	pop    edx
c00023a8:	5b                   	pop    ebx
c00023a9:	5e                   	pop    esi
c00023aa:	c3                   	ret    

c00023ab <sync_window>:
c00023ab:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023af:	0f 84 85 00 00 00    	je     c000243a <sync_window+0x8f>
c00023b5:	55                   	push   ebp
c00023b6:	8d 68 54             	lea    ebp,[eax+0x54]
c00023b9:	57                   	push   edi
c00023ba:	56                   	push   esi
c00023bb:	53                   	push   ebx
c00023bc:	89 c3                	mov    ebx,eax
c00023be:	83 ec 28             	sub    esp,0x28
c00023c1:	6a 01                	push   0x1
c00023c3:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023c6:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023c9:	55                   	push   ebp
c00023ca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023ce:	50                   	push   eax
c00023cf:	e8 58 f8 ff ff       	call   c0001c2c <disk_write>
c00023d4:	83 c4 20             	add    esp,0x20
c00023d7:	ba 01 00 00 00       	mov    edx,0x1
c00023dc:	85 c0                	test   eax,eax
c00023de:	75 50                	jne    c0002430 <sync_window+0x85>
c00023e0:	31 ff                	xor    edi,edi
c00023e2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023e9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023ed:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023f3:	89 c6                	mov    esi,eax
c00023f5:	89 d7                	mov    edi,edx
c00023f7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023fa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023fe:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002401:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002405:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002409:	73 23                	jae    c000242e <sync_window+0x83>
c000240b:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000240f:	75 1d                	jne    c000242e <sync_window+0x83>
c0002411:	83 ec 0c             	sub    esp,0xc
c0002414:	6a 01                	push   0x1
c0002416:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000241a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000241e:	52                   	push   edx
c000241f:	50                   	push   eax
c0002420:	55                   	push   ebp
c0002421:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002425:	50                   	push   eax
c0002426:	e8 01 f8 ff ff       	call   c0001c2c <disk_write>
c000242b:	83 c4 20             	add    esp,0x20
c000242e:	31 d2                	xor    edx,edx
c0002430:	83 c4 1c             	add    esp,0x1c
c0002433:	89 d0                	mov    eax,edx
c0002435:	5b                   	pop    ebx
c0002436:	5e                   	pop    esi
c0002437:	5f                   	pop    edi
c0002438:	5d                   	pop    ebp
c0002439:	c3                   	ret    
c000243a:	31 d2                	xor    edx,edx
c000243c:	89 d0                	mov    eax,edx
c000243e:	c3                   	ret    

c000243f <move_window>:
c000243f:	56                   	push   esi
c0002440:	53                   	push   ebx
c0002441:	89 c3                	mov    ebx,eax
c0002443:	83 ec 14             	sub    esp,0x14
c0002446:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002449:	75 07                	jne    c0002452 <move_window+0x13>
c000244b:	31 f6                	xor    esi,esi
c000244d:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002450:	74 59                	je     c00024ab <move_window+0x6c>
c0002452:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002456:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000245a:	89 d8                	mov    eax,ebx
c000245c:	e8 4a ff ff ff       	call   c00023ab <sync_window>
c0002461:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002465:	89 c6                	mov    esi,eax
c0002467:	85 c0                	test   eax,eax
c0002469:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000246d:	75 3c                	jne    c00024ab <move_window+0x6c>
c000246f:	83 ec 0c             	sub    esp,0xc
c0002472:	8d 43 54             	lea    eax,[ebx+0x54]
c0002475:	6a 01                	push   0x1
c0002477:	51                   	push   ecx
c0002478:	52                   	push   edx
c0002479:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000247d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002481:	50                   	push   eax
c0002482:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002486:	50                   	push   eax
c0002487:	e8 8a f7 ff ff       	call   c0001c16 <disk_read>
c000248c:	83 c4 20             	add    esp,0x20
c000248f:	85 c0                	test   eax,eax
c0002491:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002495:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002499:	74 0a                	je     c00024a5 <move_window+0x66>
c000249b:	83 ca ff             	or     edx,0xffffffff
c000249e:	be 01 00 00 00       	mov    esi,0x1
c00024a3:	89 d1                	mov    ecx,edx
c00024a5:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024a8:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024ab:	89 f0                	mov    eax,esi
c00024ad:	83 c4 14             	add    esp,0x14
c00024b0:	5b                   	pop    ebx
c00024b1:	5e                   	pop    esi
c00024b2:	c3                   	ret    

c00024b3 <check_fs>:
c00024b3:	53                   	push   ebx
c00024b4:	89 c3                	mov    ebx,eax
c00024b6:	83 ec 08             	sub    esp,0x8
c00024b9:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024bd:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024c4:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024cb:	e8 6f ff ff ff       	call   c000243f <move_window>
c00024d0:	ba 04 00 00 00       	mov    edx,0x4
c00024d5:	85 c0                	test   eax,eax
c00024d7:	0f 85 89 00 00 00    	jne    c0002566 <check_fs+0xb3>
c00024dd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024e3:	e8 79 f7 ff ff       	call   c0001c61 <ld_word>
c00024e8:	ba 03 00 00 00       	mov    edx,0x3
c00024ed:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f1:	75 73                	jne    c0002566 <check_fs+0xb3>
c00024f3:	ba a0 94 02 c0       	mov    edx,0xc00294a0
c00024f8:	8d 43 54             	lea    eax,[ebx+0x54]
c00024fb:	b9 0b 00 00 00       	mov    ecx,0xb
c0002500:	e8 fb f7 ff ff       	call   c0001d00 <mem_cmp>
c0002505:	ba 01 00 00 00       	mov    edx,0x1
c000250a:	85 c0                	test   eax,eax
c000250c:	74 58                	je     c0002566 <check_fs+0xb3>
c000250e:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002511:	8d 50 18             	lea    edx,[eax+0x18]
c0002514:	80 fa 01             	cmp    dl,0x1
c0002517:	76 09                	jbe    c0002522 <check_fs+0x6f>
c0002519:	ba 02 00 00 00       	mov    edx,0x2
c000251e:	3c eb                	cmp    al,0xeb
c0002520:	75 44                	jne    c0002566 <check_fs+0xb3>
c0002522:	ba d8 c9 02 c0       	mov    edx,0xc002c9d8
c0002527:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000252d:	b9 03 00 00 00       	mov    ecx,0x3
c0002532:	e8 c9 f7 ff ff       	call   c0001d00 <mem_cmp>
c0002537:	31 d2                	xor    edx,edx
c0002539:	85 c0                	test   eax,eax
c000253b:	74 29                	je     c0002566 <check_fs+0xb3>
c000253d:	ba ac 94 02 c0       	mov    edx,0xc00294ac
c0002542:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002548:	b9 05 00 00 00       	mov    ecx,0x5
c000254d:	e8 ae f7 ff ff       	call   c0001d00 <mem_cmp>
c0002552:	31 d2                	xor    edx,edx
c0002554:	85 c0                	test   eax,eax
c0002556:	74 0e                	je     c0002566 <check_fs+0xb3>
c0002558:	31 d2                	xor    edx,edx
c000255a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002561:	0f 95 c2             	setne  dl
c0002564:	01 d2                	add    edx,edx
c0002566:	89 d0                	mov    eax,edx
c0002568:	83 c4 08             	add    esp,0x8
c000256b:	5b                   	pop    ebx
c000256c:	c3                   	ret    

c000256d <find_volume>:
c000256d:	55                   	push   ebp
c000256e:	31 c9                	xor    ecx,ecx
c0002570:	57                   	push   edi
c0002571:	56                   	push   esi
c0002572:	89 d6                	mov    esi,edx
c0002574:	53                   	push   ebx
c0002575:	31 d2                	xor    edx,edx
c0002577:	83 ec 3c             	sub    esp,0x3c
c000257a:	89 c3                	mov    ebx,eax
c000257c:	e8 32 ff ff ff       	call   c00024b3 <check_fs>
c0002581:	83 f8 02             	cmp    eax,0x2
c0002584:	74 0e                	je     c0002594 <find_volume+0x27>
c0002586:	0f 87 5d 01 00 00    	ja     c00026e9 <find_volume+0x17c>
c000258c:	85 f6                	test   esi,esi
c000258e:	0f 84 55 01 00 00    	je     c00026e9 <find_volume+0x17c>
c0002594:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000259b:	0f 85 dd 00 00 00    	jne    c000267e <find_volume+0x111>
c00025a1:	31 c9                	xor    ecx,ecx
c00025a3:	ba 01 00 00 00       	mov    edx,0x1
c00025a8:	89 d8                	mov    eax,ebx
c00025aa:	e8 90 fe ff ff       	call   c000243f <move_window>
c00025af:	85 c0                	test   eax,eax
c00025b1:	74 0a                	je     c00025bd <find_volume+0x50>
c00025b3:	b8 04 00 00 00       	mov    eax,0x4
c00025b8:	e9 2c 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025bd:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c0:	89 e8                	mov    eax,ebp
c00025c2:	e8 f6 fc ff ff       	call   c00022bd <test_gpt_header>
c00025c7:	85 c0                	test   eax,eax
c00025c9:	75 0a                	jne    c00025d5 <find_volume+0x68>
c00025cb:	b8 03 00 00 00       	mov    eax,0x3
c00025d0:	e9 14 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025d5:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025db:	e8 8e f6 ff ff       	call   c0001c6e <ld_dword>
c00025e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025e4:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025ea:	e8 97 f6 ff ff       	call   c0001c86 <ld_qword>
c00025ef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002607:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000260b:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000260f:	74 ba                	je     c00025cb <find_volume+0x5e>
c0002611:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002615:	31 c9                	xor    ecx,ecx
c0002617:	c1 e7 07             	shl    edi,0x7
c000261a:	89 d8                	mov    eax,ebx
c000261c:	89 fa                	mov    edx,edi
c000261e:	c1 ea 09             	shr    edx,0x9
c0002621:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002625:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002629:	e8 11 fe ff ff       	call   c000243f <move_window>
c000262e:	85 c0                	test   eax,eax
c0002630:	75 81                	jne    c00025b3 <find_volume+0x46>
c0002632:	81 e7 80 01 00 00    	and    edi,0x180
c0002638:	b9 10 00 00 00       	mov    ecx,0x10
c000263d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002641:	ba 90 94 02 c0       	mov    edx,0xc0029490
c0002646:	e8 b5 f6 ff ff       	call   c0001d00 <mem_cmp>
c000264b:	85 c0                	test   eax,eax
c000264d:	75 29                	jne    c0002678 <find_volume+0x10b>
c000264f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002653:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002657:	e8 2a f6 ff ff       	call   c0001c86 <ld_qword>
c000265c:	89 d1                	mov    ecx,edx
c000265e:	89 c2                	mov    edx,eax
c0002660:	89 d8                	mov    eax,ebx
c0002662:	e8 4c fe ff ff       	call   c00024b3 <check_fs>
c0002667:	85 f6                	test   esi,esi
c0002669:	75 07                	jne    c0002672 <find_volume+0x105>
c000266b:	83 f8 01             	cmp    eax,0x1
c000266e:	77 08                	ja     c0002678 <find_volume+0x10b>
c0002670:	eb 77                	jmp    c00026e9 <find_volume+0x17c>
c0002672:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002676:	74 71                	je     c00026e9 <find_volume+0x17c>
c0002678:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000267c:	eb 89                	jmp    c0002607 <find_volume+0x9a>
c000267e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002682:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002688:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000268e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002692:	89 cd                	mov    ebp,ecx
c0002694:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002698:	89 f8                	mov    eax,edi
c000269a:	83 c7 10             	add    edi,0x10
c000269d:	e8 cc f5 ff ff       	call   c0001c6e <ld_dword>
c00026a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026a6:	89 01                	mov    DWORD PTR [ecx],eax
c00026a8:	83 c1 04             	add    ecx,0x4
c00026ab:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026af:	75 e3                	jne    c0002694 <find_volume+0x127>
c00026b1:	31 ff                	xor    edi,edi
c00026b3:	85 f6                	test   esi,esi
c00026b5:	74 03                	je     c00026ba <find_volume+0x14d>
c00026b7:	8d 7e ff             	lea    edi,[esi-0x1]
c00026ba:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026be:	85 d2                	test   edx,edx
c00026c0:	74 14                	je     c00026d6 <find_volume+0x169>
c00026c2:	31 c9                	xor    ecx,ecx
c00026c4:	89 d8                	mov    eax,ebx
c00026c6:	e8 e8 fd ff ff       	call   c00024b3 <check_fs>
c00026cb:	83 f8 01             	cmp    eax,0x1
c00026ce:	76 19                	jbe    c00026e9 <find_volume+0x17c>
c00026d0:	85 f6                	test   esi,esi
c00026d2:	74 0f                	je     c00026e3 <find_volume+0x176>
c00026d4:	eb 13                	jmp    c00026e9 <find_volume+0x17c>
c00026d6:	85 f6                	test   esi,esi
c00026d8:	0f 85 ed fe ff ff    	jne    c00025cb <find_volume+0x5e>
c00026de:	b8 03 00 00 00       	mov    eax,0x3
c00026e3:	47                   	inc    edi
c00026e4:	83 ff 03             	cmp    edi,0x3
c00026e7:	76 d1                	jbe    c00026ba <find_volume+0x14d>
c00026e9:	83 c4 3c             	add    esp,0x3c
c00026ec:	5b                   	pop    ebx
c00026ed:	5e                   	pop    esi
c00026ee:	5f                   	pop    edi
c00026ef:	5d                   	pop    ebp
c00026f0:	c3                   	ret    

c00026f1 <mount_volume>:
c00026f1:	55                   	push   ebp
c00026f2:	57                   	push   edi
c00026f3:	89 cf                	mov    edi,ecx
c00026f5:	56                   	push   esi
c00026f6:	53                   	push   ebx
c00026f7:	bb 0b 00 00 00       	mov    ebx,0xb
c00026fc:	83 ec 3c             	sub    esp,0x3c
c00026ff:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002705:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002709:	e8 35 fb ff ff       	call   c0002243 <get_ldnumber>
c000270e:	85 c0                	test   eax,eax
c0002710:	0f 88 3a 05 00 00    	js     c0002c50 <mount_volume+0x55f>
c0002716:	8b 2c 85 60 e5 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1aa0]
c000271d:	89 c6                	mov    esi,eax
c000271f:	bb 0c 00 00 00       	mov    ebx,0xc
c0002724:	85 ed                	test   ebp,ebp
c0002726:	0f 84 24 05 00 00    	je     c0002c50 <mount_volume+0x55f>
c000272c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002730:	83 e7 fe             	and    edi,0xfffffffe
c0002733:	89 2a                	mov    DWORD PTR [edx],ebp
c0002735:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002739:	74 32                	je     c000276d <mount_volume+0x7c>
c000273b:	83 ec 0c             	sub    esp,0xc
c000273e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002742:	50                   	push   eax
c0002743:	e8 c8 f4 ff ff       	call   c0001c10 <disk_status>
c0002748:	83 c4 10             	add    esp,0x10
c000274b:	a8 01                	test   al,0x1
c000274d:	75 1e                	jne    c000276d <mount_volume+0x7c>
c000274f:	31 db                	xor    ebx,ebx
c0002751:	89 f9                	mov    ecx,edi
c0002753:	84 c9                	test   cl,cl
c0002755:	0f 84 f5 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c000275b:	a8 04                	test   al,0x4
c000275d:	0f 84 ed 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c0002763:	bb 0a 00 00 00       	mov    ebx,0xa
c0002768:	e9 e3 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c000276d:	83 ec 0c             	sub    esp,0xc
c0002770:	89 f0                	mov    eax,esi
c0002772:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002776:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002779:	0f b6 f0             	movzx  esi,al
c000277c:	bb 03 00 00 00       	mov    ebx,0x3
c0002781:	56                   	push   esi
c0002782:	e8 8c f4 ff ff       	call   c0001c13 <disk_initialize>
c0002787:	83 c4 10             	add    esp,0x10
c000278a:	a8 01                	test   al,0x1
c000278c:	0f 85 be 04 00 00    	jne    c0002c50 <mount_volume+0x55f>
c0002792:	89 f9                	mov    ecx,edi
c0002794:	84 c9                	test   cl,cl
c0002796:	74 04                	je     c000279c <mount_volume+0xab>
c0002798:	a8 04                	test   al,0x4
c000279a:	75 c7                	jne    c0002763 <mount_volume+0x72>
c000279c:	31 d2                	xor    edx,edx
c000279e:	89 e8                	mov    eax,ebp
c00027a0:	e8 c8 fd ff ff       	call   c000256d <find_volume>
c00027a5:	83 f8 04             	cmp    eax,0x4
c00027a8:	75 0a                	jne    c00027b4 <mount_volume+0xc3>
c00027aa:	bb 01 00 00 00       	mov    ebx,0x1
c00027af:	e9 9c 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027b4:	83 f8 01             	cmp    eax,0x1
c00027b7:	76 0a                	jbe    c00027c3 <mount_volume+0xd2>
c00027b9:	bb 0d 00 00 00       	mov    ebx,0xd
c00027be:	e9 8d 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027c3:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027c6:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d1:	75 17                	jne    c00027ea <mount_volume+0xf9>
c00027d3:	b8 0b 00 00 00       	mov    eax,0xb
c00027d8:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027dd:	75 da                	jne    c00027b9 <mount_volume+0xc8>
c00027df:	40                   	inc    eax
c00027e0:	83 f8 40             	cmp    eax,0x40
c00027e3:	75 f3                	jne    c00027d8 <mount_volume+0xe7>
c00027e5:	e9 5a 02 00 00       	jmp    c0002a44 <mount_volume+0x353>
c00027ea:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027ed:	e8 6f f4 ff ff       	call   c0001c61 <ld_word>
c00027f2:	66 3d 00 02          	cmp    ax,0x200
c00027f6:	75 c1                	jne    c00027b9 <mount_volume+0xc8>
c00027f8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027fb:	e8 61 f4 ff ff       	call   c0001c61 <ld_word>
c0002800:	0f b7 c0             	movzx  eax,ax
c0002803:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002807:	85 c0                	test   eax,eax
c0002809:	75 0c                	jne    c0002817 <mount_volume+0x126>
c000280b:	8d 45 78             	lea    eax,[ebp+0x78]
c000280e:	e8 5b f4 ff ff       	call   c0001c6e <ld_dword>
c0002813:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000281b:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000281e:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002821:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002825:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002828:	48                   	dec    eax
c0002829:	3c 01                	cmp    al,0x1
c000282b:	77 8c                	ja     c00027b9 <mount_volume+0xc8>
c000282d:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002831:	89 c3                	mov    ebx,eax
c0002833:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002837:	66 85 c0             	test   ax,ax
c000283a:	0f 84 79 ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002840:	8d 40 ff             	lea    eax,[eax-0x1]
c0002843:	85 d8                	test   eax,ebx
c0002845:	0f 85 6e ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000284b:	8d 45 65             	lea    eax,[ebp+0x65]
c000284e:	e8 0e f4 ff ff       	call   c0001c61 <ld_word>
c0002853:	89 c7                	mov    edi,eax
c0002855:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002859:	a8 0f                	test   al,0xf
c000285b:	0f 85 58 ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002861:	8d 45 67             	lea    eax,[ebp+0x67]
c0002864:	e8 f8 f3 ff ff       	call   c0001c61 <ld_word>
c0002869:	0f b7 f0             	movzx  esi,ax
c000286c:	85 f6                	test   esi,esi
c000286e:	75 0a                	jne    c000287a <mount_volume+0x189>
c0002870:	8d 45 74             	lea    eax,[ebp+0x74]
c0002873:	e8 f6 f3 ff ff       	call   c0001c6e <ld_dword>
c0002878:	89 c6                	mov    esi,eax
c000287a:	8d 45 62             	lea    eax,[ebp+0x62]
c000287d:	e8 df f3 ff ff       	call   c0001c61 <ld_word>
c0002882:	66 85 c0             	test   ax,ax
c0002885:	0f 84 2e ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c000288b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002890:	0f b7 c8             	movzx  ecx,ax
c0002893:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002898:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000289c:	89 fa                	mov    edx,edi
c000289e:	66 c1 ea 04          	shr    dx,0x4
c00028a2:	0f b7 d2             	movzx  edx,dx
c00028a5:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028a9:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b0:	39 c6                	cmp    esi,eax
c00028b2:	0f 82 01 ff ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028b8:	29 c6                	sub    esi,eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 f0                	mov    eax,esi
c00028be:	f7 f3                	div    ebx
c00028c0:	39 de                	cmp    esi,ebx
c00028c2:	0f 82 f1 fe ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028c8:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028cd:	0f 87 e6 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c00028d3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028d8:	0f 86 63 03 00 00    	jbe    c0002c41 <mount_volume+0x550>
c00028de:	bb 03 00 00 00       	mov    ebx,0x3
c00028e3:	8d 70 02             	lea    esi,[eax+0x2]
c00028e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028ee:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028f4:	31 d2                	xor    edx,edx
c00028f6:	89 c8                	mov    eax,ecx
c00028f8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028ff:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002903:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002907:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000290b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000290e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002911:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002915:	31 d2                	xor    edx,edx
c0002917:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000291b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000291f:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002922:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002925:	83 fb 03             	cmp    ebx,0x3
c0002928:	75 2b                	jne    c0002955 <mount_volume+0x264>
c000292a:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000292d:	e8 2f f3 ff ff       	call   c0001c61 <ld_word>
c0002932:	66 09 c7             	or     di,ax
c0002935:	0f 85 7e fe ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000293b:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002941:	c1 e6 02             	shl    esi,0x2
c0002944:	e8 25 f3 ff ff       	call   c0001c6e <ld_dword>
c0002949:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002950:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002953:	eb 30                	jmp    c0002985 <mount_volume+0x294>
c0002955:	66 85 ff             	test   di,di
c0002958:	0f 84 5b fe ff ff    	je     c00027b9 <mount_volume+0xc8>
c000295e:	31 d2                	xor    edx,edx
c0002960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002964:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002968:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000296c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000296f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002972:	83 fb 02             	cmp    ebx,0x2
c0002975:	75 04                	jne    c000297b <mount_volume+0x28a>
c0002977:	01 f6                	add    esi,esi
c0002979:	eb 0a                	jmp    c0002985 <mount_volume+0x294>
c000297b:	8d 04 76             	lea    eax,[esi+esi*2]
c000297e:	83 e6 01             	and    esi,0x1
c0002981:	d1 e8                	shr    eax,1
c0002983:	01 c6                	add    esi,eax
c0002985:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000298b:	c1 ee 09             	shr    esi,0x9
c000298e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002992:	0f 87 21 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002998:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000299f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029a6:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029aa:	83 fb 03             	cmp    ebx,0x3
c00029ad:	75 7a                	jne    c0002a29 <mount_volume+0x338>
c00029af:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029b5:	e8 a7 f2 ff ff       	call   c0001c61 <ld_word>
c00029ba:	66 48                	dec    ax
c00029bc:	75 6b                	jne    c0002a29 <mount_volume+0x338>
c00029be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029c6:	83 c2 01             	add    edx,0x1
c00029c9:	89 e8                	mov    eax,ebp
c00029cb:	83 d1 00             	adc    ecx,0x0
c00029ce:	e8 6c fa ff ff       	call   c000243f <move_window>
c00029d3:	85 c0                	test   eax,eax
c00029d5:	75 52                	jne    c0002a29 <mount_volume+0x338>
c00029d7:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029db:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e1:	e8 7b f2 ff ff       	call   c0001c61 <ld_word>
c00029e6:	66 3d 55 aa          	cmp    ax,0xaa55
c00029ea:	75 3d                	jne    c0002a29 <mount_volume+0x338>
c00029ec:	8d 45 54             	lea    eax,[ebp+0x54]
c00029ef:	e8 7a f2 ff ff       	call   c0001c6e <ld_dword>
c00029f4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029f9:	75 2e                	jne    c0002a29 <mount_volume+0x338>
c00029fb:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a01:	e8 68 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a06:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a0b:	75 1c                	jne    c0002a29 <mount_volume+0x338>
c0002a0d:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a13:	e8 56 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a18:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a1b:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a21:	e8 48 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a26:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a29:	66 a1 40 e5 02 c0    	mov    ax,ds:0xc002e540
c0002a2f:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a32:	40                   	inc    eax
c0002a33:	31 db                	xor    ebx,ebx
c0002a35:	66 a3 40 e5 02 c0    	mov    ds:0xc002e540,ax
c0002a3b:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a3f:	e9 0c 02 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c0002a44:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a4a:	e8 12 f2 ff ff       	call   c0001c61 <ld_word>
c0002a4f:	66 3d 00 01          	cmp    ax,0x100
c0002a53:	0f 85 60 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a59:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a60:	0f 85 53 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a66:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a6c:	e8 15 f2 ff ff       	call   c0001c86 <ld_qword>
c0002a71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a79:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a7f:	e8 ea f1 ff ff       	call   c0001c6e <ld_dword>
c0002a84:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a87:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a8d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a90:	fe c8                	dec    al
c0002a92:	0f 85 21 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a98:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a9f:	bb 01 00 00 00       	mov    ebx,0x1
c0002aa4:	d3 e3                	shl    ebx,cl
c0002aa6:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002aaa:	66 85 db             	test   bx,bx
c0002aad:	0f 84 06 fd ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002ab3:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ab9:	e8 b0 f1 ff ff       	call   c0001c6e <ld_dword>
c0002abe:	89 c6                	mov    esi,eax
c0002ac0:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ac5:	0f 87 ee fc ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002acb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acf:	8d 40 02             	lea    eax,[eax+0x2]
c0002ad2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ad5:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002adc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002adf:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ae5:	e8 84 f1 ff ff       	call   c0001c6e <ld_dword>
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002af4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002af8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002afc:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002aff:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b02:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b08:	e8 61 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b0d:	31 d2                	xor    edx,edx
c0002b0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b13:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b17:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b1b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b1e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b21:	0f b7 c3             	movzx  eax,bx
c0002b24:	31 d2                	xor    edx,edx
c0002b26:	0f af f0             	imul   esi,eax
c0002b29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b2d:	89 f0                	mov    eax,esi
c0002b2f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b33:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b37:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b3b:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b3f:	39 c1                	cmp    ecx,eax
c0002b41:	89 df                	mov    edi,ebx
c0002b43:	19 d7                	sbb    edi,edx
c0002b45:	0f 82 6e fc ff ff    	jb     c00027b9 <mount_volume+0xc8>
c0002b4b:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b51:	31 db                	xor    ebx,ebx
c0002b53:	e8 16 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b58:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b5f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b62:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b6a:	85 db                	test   ebx,ebx
c0002b6c:	75 39                	jne    c0002ba7 <mount_volume+0x4b6>
c0002b6e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b72:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b76:	0f 86 3d fc ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002b7c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b7f:	31 ff                	xor    edi,edi
c0002b81:	89 e8                	mov    eax,ebp
c0002b83:	e8 72 f3 ff ff       	call   c0001efa <clst2sect>
c0002b88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b8c:	01 c6                	add    esi,eax
c0002b8e:	89 e8                	mov    eax,ebp
c0002b90:	11 d7                	adc    edi,edx
c0002b92:	89 f2                	mov    edx,esi
c0002b94:	89 f9                	mov    ecx,edi
c0002b96:	e8 a4 f8 ff ff       	call   c000243f <move_window>
c0002b9b:	85 c0                	test   eax,eax
c0002b9d:	0f 85 07 fc ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002ba3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ba7:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bac:	74 0b                	je     c0002bb9 <mount_volume+0x4c8>
c0002bae:	83 c3 20             	add    ebx,0x20
c0002bb1:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bb7:	eb b1                	jmp    c0002b6a <mount_volume+0x479>
c0002bb9:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bbc:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc0:	e8 a9 f0 ff ff       	call   c0001c6e <ld_dword>
c0002bc5:	89 c3                	mov    ebx,eax
c0002bc7:	83 f8 01             	cmp    eax,0x1
c0002bca:	0f 86 e9 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd0:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bd3:	0f 86 e0 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd9:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bdc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be0:	0f af c2             	imul   eax,edx
c0002be3:	31 d2                	xor    edx,edx
c0002be5:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002be8:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002beb:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bee:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf1:	31 c9                	xor    ecx,ecx
c0002bf3:	89 da                	mov    edx,ebx
c0002bf5:	89 e8                	mov    eax,ebp
c0002bf7:	c1 ea 07             	shr    edx,0x7
c0002bfa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bfd:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c00:	e8 3a f8 ff ff       	call   c000243f <move_window>
c0002c05:	85 c0                	test   eax,eax
c0002c07:	0f 85 9d fb ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002c0d:	89 d8                	mov    eax,ebx
c0002c0f:	83 e0 7f             	and    eax,0x7f
c0002c12:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c15:	e8 54 f0 ff ff       	call   c0001c6e <ld_dword>
c0002c1a:	83 f8 ff             	cmp    eax,0xffffffff
c0002c1d:	74 0a                	je     c0002c29 <mount_volume+0x538>
c0002c1f:	43                   	inc    ebx
c0002c20:	39 d8                	cmp    eax,ebx
c0002c22:	74 cd                	je     c0002bf1 <mount_volume+0x500>
c0002c24:	e9 90 fb ff ff       	jmp    c00027b9 <mount_volume+0xc8>
c0002c29:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c30:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c37:	bb 04 00 00 00       	mov    ebx,0x4
c0002c3c:	e9 e8 fd ff ff       	jmp    c0002a29 <mount_volume+0x338>
c0002c41:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c46:	19 db                	sbb    ebx,ebx
c0002c48:	83 c3 02             	add    ebx,0x2
c0002c4b:	e9 93 fc ff ff       	jmp    c00028e3 <mount_volume+0x1f2>
c0002c50:	83 c4 3c             	add    esp,0x3c
c0002c53:	89 d8                	mov    eax,ebx
c0002c55:	5b                   	pop    ebx
c0002c56:	5e                   	pop    esi
c0002c57:	5f                   	pop    edi
c0002c58:	5d                   	pop    ebp
c0002c59:	c3                   	ret    

c0002c5a <find_bitmap>:
c0002c5a:	55                   	push   ebp
c0002c5b:	57                   	push   edi
c0002c5c:	89 c7                	mov    edi,eax
c0002c5e:	56                   	push   esi
c0002c5f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c62:	53                   	push   ebx
c0002c63:	83 ec 1c             	sub    esp,0x1c
c0002c66:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c6d:	83 e8 02             	sub    eax,0x2
c0002c70:	39 f0                	cmp    eax,esi
c0002c72:	77 02                	ja     c0002c76 <find_bitmap+0x1c>
c0002c74:	31 f6                	xor    esi,esi
c0002c76:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c7a:	89 f3                	mov    ebx,esi
c0002c7c:	31 ed                	xor    ebp,ebp
c0002c7e:	31 c9                	xor    ecx,ecx
c0002c80:	89 da                	mov    edx,ebx
c0002c82:	89 f8                	mov    eax,edi
c0002c84:	c1 ea 0c             	shr    edx,0xc
c0002c87:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c8a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c8d:	e8 ad f7 ff ff       	call   c000243f <move_window>
c0002c92:	85 c0                	test   eax,eax
c0002c94:	75 68                	jne    c0002cfe <find_bitmap+0xa4>
c0002c96:	89 da                	mov    edx,ebx
c0002c98:	89 d9                	mov    ecx,ebx
c0002c9a:	c1 ea 03             	shr    edx,0x3
c0002c9d:	83 e1 07             	and    ecx,0x7
c0002ca0:	b8 01 00 00 00       	mov    eax,0x1
c0002ca5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cab:	d3 e0                	shl    eax,cl
c0002cad:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb0:	83 e9 02             	sub    ecx,0x2
c0002cb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cb7:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cbb:	43                   	inc    ebx
c0002cbc:	21 c1                	and    ecx,eax
c0002cbe:	d1 e0                	shl    eax,1
c0002cc0:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002cc4:	77 09                	ja     c0002ccf <find_bitmap+0x75>
c0002cc6:	31 db                	xor    ebx,ebx
c0002cc8:	ba 00 02 00 00       	mov    edx,0x200
c0002ccd:	31 c0                	xor    eax,eax
c0002ccf:	84 c9                	test   cl,cl
c0002cd1:	75 10                	jne    c0002ce3 <find_bitmap+0x89>
c0002cd3:	45                   	inc    ebp
c0002cd4:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cd8:	75 0f                	jne    c0002ce9 <find_bitmap+0x8f>
c0002cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cde:	83 c0 02             	add    eax,0x2
c0002ce1:	eb 22                	jmp    c0002d05 <find_bitmap+0xab>
c0002ce3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ce7:	31 ed                	xor    ebp,ebp
c0002ce9:	39 de                	cmp    esi,ebx
c0002ceb:	74 16                	je     c0002d03 <find_bitmap+0xa9>
c0002ced:	84 c0                	test   al,al
c0002cef:	75 c6                	jne    c0002cb7 <find_bitmap+0x5d>
c0002cf1:	42                   	inc    edx
c0002cf2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cf8:	77 84                	ja     c0002c7e <find_bitmap+0x24>
c0002cfa:	b0 01                	mov    al,0x1
c0002cfc:	eb b9                	jmp    c0002cb7 <find_bitmap+0x5d>
c0002cfe:	83 c8 ff             	or     eax,0xffffffff
c0002d01:	eb 02                	jmp    c0002d05 <find_bitmap+0xab>
c0002d03:	31 c0                	xor    eax,eax
c0002d05:	83 c4 1c             	add    esp,0x1c
c0002d08:	5b                   	pop    ebx
c0002d09:	5e                   	pop    esi
c0002d0a:	5f                   	pop    edi
c0002d0b:	5d                   	pop    ebp
c0002d0c:	c3                   	ret    

c0002d0d <change_bitmap>:
c0002d0d:	55                   	push   ebp
c0002d0e:	89 cd                	mov    ebp,ecx
c0002d10:	57                   	push   edi
c0002d11:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d14:	56                   	push   esi
c0002d15:	89 c7                	mov    edi,eax
c0002d17:	53                   	push   ebx
c0002d18:	89 c8                	mov    eax,ecx
c0002d1a:	83 ec 1c             	sub    esp,0x1c
c0002d1d:	31 d2                	xor    edx,edx
c0002d1f:	89 ce                	mov    esi,ecx
c0002d21:	c1 e8 0c             	shr    eax,0xc
c0002d24:	bb 01 00 00 00       	mov    ebx,0x1
c0002d29:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d2c:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d2f:	c1 ee 03             	shr    esi,0x3
c0002d32:	83 e1 07             	and    ecx,0x7
c0002d35:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d3b:	d3 e3                	shl    ebx,cl
c0002d3d:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d41:	89 c1                	mov    ecx,eax
c0002d43:	89 d3                	mov    ebx,edx
c0002d45:	83 c1 01             	add    ecx,0x1
c0002d48:	83 d3 00             	adc    ebx,0x0
c0002d4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d4f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d53:	89 d1                	mov    ecx,edx
c0002d55:	89 c2                	mov    edx,eax
c0002d57:	89 f8                	mov    eax,edi
c0002d59:	e8 e1 f6 ff ff       	call   c000243f <move_window>
c0002d5e:	89 c1                	mov    ecx,eax
c0002d60:	85 c0                	test   eax,eax
c0002d62:	75 48                	jne    c0002dac <change_bitmap+0x9f>
c0002d64:	31 d2                	xor    edx,edx
c0002d66:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d6a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d6e:	0f 95 c2             	setne  dl
c0002d71:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d75:	74 3c                	je     c0002db3 <change_bitmap+0xa6>
c0002d77:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d7b:	4d                   	dec    ebp
c0002d7c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d80:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d84:	74 32                	je     c0002db8 <change_bitmap+0xab>
c0002d86:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d8a:	75 d8                	jne    c0002d64 <change_bitmap+0x57>
c0002d8c:	8d 46 01             	lea    eax,[esi+0x1]
c0002d8f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d94:	89 c3                	mov    ebx,eax
c0002d96:	31 f6                	xor    esi,esi
c0002d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da0:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002da6:	74 99                	je     c0002d41 <change_bitmap+0x34>
c0002da8:	89 de                	mov    esi,ebx
c0002daa:	eb b8                	jmp    c0002d64 <change_bitmap+0x57>
c0002dac:	b9 01 00 00 00       	mov    ecx,0x1
c0002db1:	eb 05                	jmp    c0002db8 <change_bitmap+0xab>
c0002db3:	b9 02 00 00 00       	mov    ecx,0x2
c0002db8:	83 c4 1c             	add    esp,0x1c
c0002dbb:	89 c8                	mov    eax,ecx
c0002dbd:	5b                   	pop    ebx
c0002dbe:	5e                   	pop    esi
c0002dbf:	5f                   	pop    edi
c0002dc0:	5d                   	pop    ebp
c0002dc1:	c3                   	ret    

c0002dc2 <put_fat>:
c0002dc2:	83 fa 01             	cmp    edx,0x1
c0002dc5:	0f 86 7b 01 00 00    	jbe    c0002f46 <put_fat+0x184>
c0002dcb:	55                   	push   ebp
c0002dcc:	57                   	push   edi
c0002dcd:	89 cf                	mov    edi,ecx
c0002dcf:	56                   	push   esi
c0002dd0:	b9 02 00 00 00       	mov    ecx,0x2
c0002dd5:	53                   	push   ebx
c0002dd6:	89 c6                	mov    esi,eax
c0002dd8:	83 ec 1c             	sub    esp,0x1c
c0002ddb:	89 d3                	mov    ebx,edx
c0002ddd:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de0:	0f 86 68 01 00 00    	jbe    c0002f4e <put_fat+0x18c>
c0002de6:	8a 00                	mov    al,BYTE PTR [eax]
c0002de8:	3c 02                	cmp    al,0x2
c0002dea:	0f 84 c7 00 00 00    	je     c0002eb7 <put_fat+0xf5>
c0002df0:	77 09                	ja     c0002dfb <put_fat+0x39>
c0002df2:	fe c8                	dec    al
c0002df4:	74 17                	je     c0002e0d <put_fat+0x4b>
c0002df6:	e9 53 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002dfb:	b9 02 00 00 00       	mov    ecx,0x2
c0002e00:	3c 04                	cmp    al,0x4
c0002e02:	0f 86 e1 00 00 00    	jbe    c0002ee9 <put_fat+0x127>
c0002e08:	e9 41 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002e0d:	89 d5                	mov    ebp,edx
c0002e0f:	31 c9                	xor    ecx,ecx
c0002e11:	d1 ed                	shr    ebp,1
c0002e13:	89 f0                	mov    eax,esi
c0002e15:	01 d5                	add    ebp,edx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	c1 ea 09             	shr    edx,0x9
c0002e1c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e1f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e22:	e8 18 f6 ff ff       	call   c000243f <move_window>
c0002e27:	89 c1                	mov    ecx,eax
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	0f 85 1d 01 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e31:	8d 46 54             	lea    eax,[esi+0x54]
c0002e34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e38:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e3b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e45:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e49:	89 f8                	mov    eax,edi
c0002e4b:	83 e3 01             	and    ebx,0x1
c0002e4e:	74 0d                	je     c0002e5d <put_fat+0x9b>
c0002e50:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e53:	89 fa                	mov    edx,edi
c0002e55:	83 e0 0f             	and    eax,0xf
c0002e58:	c1 e2 04             	shl    edx,0x4
c0002e5b:	09 d0                	or     eax,edx
c0002e5d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e64:	31 c9                	xor    ecx,ecx
c0002e66:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e6a:	c1 ea 09             	shr    edx,0x9
c0002e6d:	89 f0                	mov    eax,esi
c0002e6f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e72:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e75:	e8 c5 f5 ff ff       	call   c000243f <move_window>
c0002e7a:	89 c1                	mov    ecx,eax
c0002e7c:	85 c0                	test   eax,eax
c0002e7e:	0f 85 ca 00 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e84:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e88:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e8e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e92:	85 db                	test   ebx,ebx
c0002e94:	74 07                	je     c0002e9d <put_fat+0xdb>
c0002e96:	c1 ef 04             	shr    edi,0x4
c0002e99:	89 fa                	mov    edx,edi
c0002e9b:	eb 0e                	jmp    c0002eab <put_fat+0xe9>
c0002e9d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea0:	c1 ef 08             	shr    edi,0x8
c0002ea3:	83 e2 f0             	and    edx,0xfffffff0
c0002ea6:	83 e7 0f             	and    edi,0xf
c0002ea9:	09 fa                	or     edx,edi
c0002eab:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eae:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eb2:	e9 97 00 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002eb7:	31 c9                	xor    ecx,ecx
c0002eb9:	c1 ea 08             	shr    edx,0x8
c0002ebc:	89 f0                	mov    eax,esi
c0002ebe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ec4:	e8 76 f5 ff ff       	call   c000243f <move_window>
c0002ec9:	89 c1                	mov    ecx,eax
c0002ecb:	85 c0                	test   eax,eax
c0002ecd:	75 7f                	jne    c0002f4e <put_fat+0x18c>
c0002ecf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ed3:	01 db                	add    ebx,ebx
c0002ed5:	0f b7 d7             	movzx  edx,di
c0002ed8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ede:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ee2:	e8 ec ed ff ff       	call   c0001cd3 <st_word>
c0002ee7:	eb 53                	jmp    c0002f3c <put_fat+0x17a>
c0002ee9:	31 c9                	xor    ecx,ecx
c0002eeb:	c1 ea 07             	shr    edx,0x7
c0002eee:	89 f0                	mov    eax,esi
c0002ef0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ef3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ef6:	e8 44 f5 ff ff       	call   c000243f <move_window>
c0002efb:	89 c1                	mov    ecx,eax
c0002efd:	85 c0                	test   eax,eax
c0002eff:	75 4d                	jne    c0002f4e <put_fat+0x18c>
c0002f01:	c1 e3 02             	shl    ebx,0x2
c0002f04:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f0a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f0d:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f11:	74 1c                	je     c0002f2f <put_fat+0x16d>
c0002f13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f17:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f1d:	89 d8                	mov    eax,ebx
c0002f1f:	e8 4a ed ff ff       	call   c0001c6e <ld_dword>
c0002f24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f28:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f2d:	09 c7                	or     edi,eax
c0002f2f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f33:	89 fa                	mov    edx,edi
c0002f35:	89 d8                	mov    eax,ebx
c0002f37:	e8 9b ed ff ff       	call   c0001cd7 <st_dword>
c0002f3c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f44:	eb 08                	jmp    c0002f4e <put_fat+0x18c>
c0002f46:	b9 02 00 00 00       	mov    ecx,0x2
c0002f4b:	89 c8                	mov    eax,ecx
c0002f4d:	c3                   	ret    
c0002f4e:	83 c4 1c             	add    esp,0x1c
c0002f51:	89 c8                	mov    eax,ecx
c0002f53:	5b                   	pop    ebx
c0002f54:	5e                   	pop    esi
c0002f55:	5f                   	pop    edi
c0002f56:	5d                   	pop    ebp
c0002f57:	c3                   	ret    

c0002f58 <fill_last_frag>:
c0002f58:	57                   	push   edi
c0002f59:	89 cf                	mov    edi,ecx
c0002f5b:	56                   	push   esi
c0002f5c:	89 d6                	mov    esi,edx
c0002f5e:	53                   	push   ebx
c0002f5f:	89 c3                	mov    ebx,eax
c0002f61:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f64:	85 c0                	test   eax,eax
c0002f66:	74 21                	je     c0002f89 <fill_last_frag+0x31>
c0002f68:	89 f9                	mov    ecx,edi
c0002f6a:	83 f8 01             	cmp    eax,0x1
c0002f6d:	76 05                	jbe    c0002f74 <fill_last_frag+0x1c>
c0002f6f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f72:	29 c1                	sub    ecx,eax
c0002f74:	8d 56 01             	lea    edx,[esi+0x1]
c0002f77:	29 c2                	sub    edx,eax
c0002f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f7b:	e8 42 fe ff ff       	call   c0002dc2 <put_fat>
c0002f80:	85 c0                	test   eax,eax
c0002f82:	75 05                	jne    c0002f89 <fill_last_frag+0x31>
c0002f84:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f87:	eb d8                	jmp    c0002f61 <fill_last_frag+0x9>
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <fill_first_frag>:
c0002f8d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f91:	75 2d                	jne    c0002fc0 <fill_first_frag+0x33>
c0002f93:	57                   	push   edi
c0002f94:	56                   	push   esi
c0002f95:	53                   	push   ebx
c0002f96:	89 c3                	mov    ebx,eax
c0002f98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f9b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f9e:	01 d7                	add    edi,edx
c0002fa0:	39 fa                	cmp    edx,edi
c0002fa2:	74 14                	je     c0002fb8 <fill_first_frag+0x2b>
c0002fa4:	8d 72 01             	lea    esi,[edx+0x1]
c0002fa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fa9:	89 f1                	mov    ecx,esi
c0002fab:	e8 12 fe ff ff       	call   c0002dc2 <put_fat>
c0002fb0:	89 f2                	mov    edx,esi
c0002fb2:	85 c0                	test   eax,eax
c0002fb4:	74 ea                	je     c0002fa0 <fill_first_frag+0x13>
c0002fb6:	eb 0b                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fb8:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fbc:	31 c0                	xor    eax,eax
c0002fbe:	eb 03                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fc0:	31 c0                	xor    eax,eax
c0002fc2:	c3                   	ret    
c0002fc3:	5b                   	pop    ebx
c0002fc4:	5e                   	pop    esi
c0002fc5:	5f                   	pop    edi
c0002fc6:	c3                   	ret    

c0002fc7 <get_fat>:
c0002fc7:	83 fa 01             	cmp    edx,0x1
c0002fca:	0f 86 db 01 00 00    	jbe    c00031ab <get_fat+0x1e4>
c0002fd0:	55                   	push   ebp
c0002fd1:	b9 01 00 00 00       	mov    ecx,0x1
c0002fd6:	57                   	push   edi
c0002fd7:	56                   	push   esi
c0002fd8:	53                   	push   ebx
c0002fd9:	83 ec 1c             	sub    esp,0x1c
c0002fdc:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fde:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe1:	0f 86 cc 01 00 00    	jbe    c00031b3 <get_fat+0x1ec>
c0002fe7:	89 c3                	mov    ebx,eax
c0002fe9:	89 d6                	mov    esi,edx
c0002feb:	8a 07                	mov    al,BYTE PTR [edi]
c0002fed:	3c 02                	cmp    al,0x2
c0002fef:	0f 84 99 00 00 00    	je     c000308e <get_fat+0xc7>
c0002ff5:	77 09                	ja     c0003000 <get_fat+0x39>
c0002ff7:	fe c8                	dec    al
c0002ff9:	74 1a                	je     c0003015 <get_fat+0x4e>
c0002ffb:	e9 b3 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003000:	3c 03                	cmp    al,0x3
c0003002:	0f 84 b5 00 00 00    	je     c00030bd <get_fat+0xf6>
c0003008:	3c 04                	cmp    al,0x4
c000300a:	0f 84 e3 00 00 00    	je     c00030f3 <get_fat+0x12c>
c0003010:	e9 9e 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003015:	89 d3                	mov    ebx,edx
c0003017:	31 c9                	xor    ecx,ecx
c0003019:	d1 eb                	shr    ebx,1
c000301b:	89 f8                	mov    eax,edi
c000301d:	01 d3                	add    ebx,edx
c000301f:	89 da                	mov    edx,ebx
c0003021:	c1 ea 09             	shr    edx,0x9
c0003024:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003027:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000302a:	e8 10 f4 ff ff       	call   c000243f <move_window>
c000302f:	85 c0                	test   eax,eax
c0003031:	74 08                	je     c000303b <get_fat+0x74>
c0003033:	83 c9 ff             	or     ecx,0xffffffff
c0003036:	e9 78 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000303b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000303e:	31 c9                	xor    ecx,ecx
c0003040:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003046:	89 ea                	mov    edx,ebp
c0003048:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000304c:	c1 ea 09             	shr    edx,0x9
c000304f:	89 f8                	mov    eax,edi
c0003051:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003054:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003057:	e8 e3 f3 ff ff       	call   c000243f <move_window>
c000305c:	85 c0                	test   eax,eax
c000305e:	75 d3                	jne    c0003033 <get_fat+0x6c>
c0003060:	0f b6 c3             	movzx  eax,bl
c0003063:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003069:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000306e:	c1 e3 08             	shl    ebx,0x8
c0003071:	09 c3                	or     ebx,eax
c0003073:	89 d9                	mov    ecx,ebx
c0003075:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000307b:	83 e6 01             	and    esi,0x1
c000307e:	0f 84 2f 01 00 00    	je     c00031b3 <get_fat+0x1ec>
c0003084:	89 d9                	mov    ecx,ebx
c0003086:	c1 e9 04             	shr    ecx,0x4
c0003089:	e9 25 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000308e:	31 c9                	xor    ecx,ecx
c0003090:	c1 ea 08             	shr    edx,0x8
c0003093:	89 f8                	mov    eax,edi
c0003095:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003098:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000309b:	e8 9f f3 ff ff       	call   c000243f <move_window>
c00030a0:	85 c0                	test   eax,eax
c00030a2:	75 8f                	jne    c0003033 <get_fat+0x6c>
c00030a4:	01 f6                	add    esi,esi
c00030a6:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030ac:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b0:	e8 ac eb ff ff       	call   c0001c61 <ld_word>
c00030b5:	0f b7 c8             	movzx  ecx,ax
c00030b8:	e9 f6 00 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c00030bd:	31 c9                	xor    ecx,ecx
c00030bf:	c1 ea 07             	shr    edx,0x7
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030c7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ca:	e8 70 f3 ff ff       	call   c000243f <move_window>
c00030cf:	85 c0                	test   eax,eax
c00030d1:	0f 85 5c ff ff ff    	jne    c0003033 <get_fat+0x6c>
c00030d7:	c1 e6 02             	shl    esi,0x2
c00030da:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030e4:	e8 85 eb ff ff       	call   c0001c6e <ld_dword>
c00030e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030ee:	e9 b4 00 00 00       	jmp    c00031a7 <get_fat+0x1e0>
c00030f3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030f6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030f9:	89 d1                	mov    ecx,edx
c00030fb:	09 c1                	or     ecx,eax
c00030fd:	74 06                	je     c0003105 <get_fat+0x13e>
c00030ff:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003103:	75 0f                	jne    c0003114 <get_fat+0x14d>
c0003105:	b9 01 00 00 00       	mov    ecx,0x1
c000310a:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c000310e:	0f 85 9f 00 00 00    	jne    c00031b3 <get_fat+0x1ec>
c0003114:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003118:	89 f5                	mov    ebp,esi
c000311a:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c000311f:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003122:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003125:	80 f9 02             	cmp    cl,0x2
c0003128:	75 35                	jne    c000315f <get_fat+0x198>
c000312a:	83 c0 ff             	add    eax,0xffffffff
c000312d:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003132:	83 d2 ff             	adc    edx,0xffffffff
c0003135:	31 db                	xor    ebx,ebx
c0003137:	0f ac d0 09          	shrd   eax,edx,0x9
c000313b:	53                   	push   ebx
c000313c:	c1 ea 09             	shr    edx,0x9
c000313f:	51                   	push   ecx
c0003140:	52                   	push   edx
c0003141:	50                   	push   eax
c0003142:	e8 a5 38 02 00       	call   c00269ec <__udivdi3>
c0003147:	83 c4 10             	add    esp,0x10
c000314a:	b9 01 00 00 00       	mov    ecx,0x1
c000314f:	39 c5                	cmp    ebp,eax
c0003151:	77 60                	ja     c00031b3 <get_fat+0x1ec>
c0003153:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003158:	74 59                	je     c00031b3 <get_fat+0x1ec>
c000315a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000315d:	eb 54                	jmp    c00031b3 <get_fat+0x1ec>
c000315f:	80 f9 03             	cmp    cl,0x3
c0003162:	75 05                	jne    c0003169 <get_fat+0x1a2>
c0003164:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003167:	77 f1                	ja     c000315a <get_fat+0x193>
c0003169:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000316e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003172:	75 3f                	jne    c00031b3 <get_fat+0x1ec>
c0003174:	31 c9                	xor    ecx,ecx
c0003176:	89 f2                	mov    edx,esi
c0003178:	89 f8                	mov    eax,edi
c000317a:	c1 ea 07             	shr    edx,0x7
c000317d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003180:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003183:	e8 b7 f2 ff ff       	call   c000243f <move_window>
c0003188:	85 c0                	test   eax,eax
c000318a:	0f 85 a3 fe ff ff    	jne    c0003033 <get_fat+0x6c>
c0003190:	c1 e6 02             	shl    esi,0x2
c0003193:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003199:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319d:	e8 cc ea ff ff       	call   c0001c6e <ld_dword>
c00031a2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031a7:	89 c1                	mov    ecx,eax
c00031a9:	eb 08                	jmp    c00031b3 <get_fat+0x1ec>
c00031ab:	b9 01 00 00 00       	mov    ecx,0x1
c00031b0:	89 c8                	mov    eax,ecx
c00031b2:	c3                   	ret    
c00031b3:	83 c4 1c             	add    esp,0x1c
c00031b6:	89 c8                	mov    eax,ecx
c00031b8:	5b                   	pop    ebx
c00031b9:	5e                   	pop    esi
c00031ba:	5f                   	pop    edi
c00031bb:	5d                   	pop    ebp
c00031bc:	c3                   	ret    

c00031bd <dir_sdi>:
c00031bd:	55                   	push   ebp
c00031be:	57                   	push   edi
c00031bf:	56                   	push   esi
c00031c0:	53                   	push   ebx
c00031c1:	89 c3                	mov    ebx,eax
c00031c3:	83 ec 1c             	sub    esp,0x1c
c00031c6:	8b 38                	mov    edi,DWORD PTR [eax]
c00031c8:	31 c0                	xor    eax,eax
c00031ca:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031cd:	0f 94 c0             	sete   al
c00031d0:	48                   	dec    eax
c00031d1:	25 00 00 20 f0       	and    eax,0xf0200000
c00031d6:	05 00 00 00 10       	add    eax,0x10000000
c00031db:	39 d0                	cmp    eax,edx
c00031dd:	77 0a                	ja     c00031e9 <dir_sdi+0x2c>
c00031df:	b8 02 00 00 00       	mov    eax,0x2
c00031e4:	e9 c4 00 00 00       	jmp    c00032ad <dir_sdi+0xf0>
c00031e9:	89 d6                	mov    esi,edx
c00031eb:	f6 c2 1f             	test   dl,0x1f
c00031ee:	75 ef                	jne    c00031df <dir_sdi+0x22>
c00031f0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031f3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031f6:	85 c9                	test   ecx,ecx
c00031f8:	75 2d                	jne    c0003227 <dir_sdi+0x6a>
c00031fa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031fd:	77 1b                	ja     c000321a <dir_sdi+0x5d>
c00031ff:	89 f2                	mov    edx,esi
c0003201:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003205:	c1 ea 05             	shr    edx,0x5
c0003208:	39 c2                	cmp    edx,eax
c000320a:	73 d3                	jae    c00031df <dir_sdi+0x22>
c000320c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000320f:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003212:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003215:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003218:	eb 4b                	jmp    c0003265 <dir_sdi+0xa8>
c000321a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000321d:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003221:	85 c0                	test   eax,eax
c0003223:	74 da                	je     c00031ff <dir_sdi+0x42>
c0003225:	89 c1                	mov    ecx,eax
c0003227:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000322b:	c1 e5 09             	shl    ebp,0x9
c000322e:	89 ca                	mov    edx,ecx
c0003230:	39 ee                	cmp    esi,ebp
c0003232:	72 1c                	jb     c0003250 <dir_sdi+0x93>
c0003234:	89 d8                	mov    eax,ebx
c0003236:	e8 8c fd ff ff       	call   c0002fc7 <get_fat>
c000323b:	89 c1                	mov    ecx,eax
c000323d:	83 f8 ff             	cmp    eax,0xffffffff
c0003240:	74 66                	je     c00032a8 <dir_sdi+0xeb>
c0003242:	83 f8 01             	cmp    eax,0x1
c0003245:	76 98                	jbe    c00031df <dir_sdi+0x22>
c0003247:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000324a:	76 93                	jbe    c00031df <dir_sdi+0x22>
c000324c:	29 ee                	sub    esi,ebp
c000324e:	eb de                	jmp    c000322e <dir_sdi+0x71>
c0003250:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003254:	89 f8                	mov    eax,edi
c0003256:	e8 9f ec ff ff       	call   c0001efa <clst2sect>
c000325b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000325f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003262:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003265:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003268:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000326b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000326e:	89 d1                	mov    ecx,edx
c0003270:	09 c1                	or     ecx,eax
c0003272:	0f 84 67 ff ff ff    	je     c00031df <dir_sdi+0x22>
c0003278:	89 f1                	mov    ecx,esi
c000327a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003282:	c1 e9 09             	shr    ecx,0x9
c0003285:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003289:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000328d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003291:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003294:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000329a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000329d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032a4:	31 c0                	xor    eax,eax
c00032a6:	eb 05                	jmp    c00032ad <dir_sdi+0xf0>
c00032a8:	b8 01 00 00 00       	mov    eax,0x1
c00032ad:	83 c4 1c             	add    esp,0x1c
c00032b0:	5b                   	pop    ebx
c00032b1:	5e                   	pop    esi
c00032b2:	5f                   	pop    edi
c00032b3:	5d                   	pop    ebp
c00032b4:	c3                   	ret    

c00032b5 <create_chain>:
c00032b5:	55                   	push   ebp
c00032b6:	89 c5                	mov    ebp,eax
c00032b8:	57                   	push   edi
c00032b9:	56                   	push   esi
c00032ba:	53                   	push   ebx
c00032bb:	83 ec 1c             	sub    esp,0x1c
c00032be:	85 d2                	test   edx,edx
c00032c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032c4:	8b 30                	mov    esi,DWORD PTR [eax]
c00032c6:	75 0e                	jne    c00032d6 <create_chain+0x21>
c00032c8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032cb:	85 ff                	test   edi,edi
c00032cd:	74 39                	je     c0003308 <create_chain+0x53>
c00032cf:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032d2:	77 39                	ja     c000330d <create_chain+0x58>
c00032d4:	eb 32                	jmp    c0003308 <create_chain+0x53>
c00032d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032da:	e8 e8 fc ff ff       	call   c0002fc7 <get_fat>
c00032df:	89 c3                	mov    ebx,eax
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	77 0a                	ja     c00032f0 <create_chain+0x3b>
c00032e6:	bb 01 00 00 00       	mov    ebx,0x1
c00032eb:	e9 ba 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c00032f0:	83 f8 ff             	cmp    eax,0xffffffff
c00032f3:	0f 84 62 01 00 00    	je     c000345b <create_chain+0x1a6>
c00032f9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032fc:	0f 87 a8 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c0003302:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003306:	eb 05                	jmp    c000330d <create_chain+0x58>
c0003308:	bf 01 00 00 00       	mov    edi,0x1
c000330d:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003311:	75 07                	jne    c000331a <create_chain+0x65>
c0003313:	31 db                	xor    ebx,ebx
c0003315:	e9 90 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c000331a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000331d:	75 74                	jne    c0003393 <create_chain+0xde>
c000331f:	b9 01 00 00 00       	mov    ecx,0x1
c0003324:	89 fa                	mov    edx,edi
c0003326:	89 f0                	mov    eax,esi
c0003328:	e8 2d f9 ff ff       	call   c0002c5a <find_bitmap>
c000332d:	89 c3                	mov    ebx,eax
c000332f:	8d 40 ff             	lea    eax,[eax-0x1]
c0003332:	83 f8 fd             	cmp    eax,0xfffffffd
c0003335:	0f 87 6f 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c000333b:	83 ec 0c             	sub    esp,0xc
c000333e:	b9 01 00 00 00       	mov    ecx,0x1
c0003343:	6a 01                	push   0x1
c0003345:	89 da                	mov    edx,ebx
c0003347:	89 f0                	mov    eax,esi
c0003349:	e8 bf f9 ff ff       	call   c0002d0d <change_bitmap>
c000334e:	83 c4 10             	add    esp,0x10
c0003351:	83 f8 02             	cmp    eax,0x2
c0003354:	74 90                	je     c00032e6 <create_chain+0x31>
c0003356:	83 f8 01             	cmp    eax,0x1
c0003359:	0f 84 fc 00 00 00    	je     c000345b <create_chain+0x1a6>
c000335f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003364:	75 09                	jne    c000336f <create_chain+0xba>
c0003366:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000336a:	e9 0c 01 00 00       	jmp    c000347b <create_chain+0x1c6>
c000336f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003373:	0f 85 e7 00 00 00    	jne    c0003460 <create_chain+0x1ab>
c0003379:	8d 57 01             	lea    edx,[edi+0x1]
c000337c:	39 da                	cmp    edx,ebx
c000337e:	0f 84 f7 00 00 00    	je     c000347b <create_chain+0x1c6>
c0003384:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003387:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000338b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000338e:	e9 cd 00 00 00       	jmp    c0003460 <create_chain+0x1ab>
c0003393:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003397:	75 41                	jne    c00033da <create_chain+0x125>
c0003399:	8d 5f 01             	lea    ebx,[edi+0x1]
c000339c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000339f:	77 05                	ja     c00033a6 <create_chain+0xf1>
c00033a1:	bb 02 00 00 00       	mov    ebx,0x2
c00033a6:	89 da                	mov    edx,ebx
c00033a8:	89 e8                	mov    eax,ebp
c00033aa:	e8 18 fc ff ff       	call   c0002fc7 <get_fat>
c00033af:	83 f8 01             	cmp    eax,0x1
c00033b2:	0f 84 2e ff ff ff    	je     c00032e6 <create_chain+0x31>
c00033b8:	83 f8 ff             	cmp    eax,0xffffffff
c00033bb:	0f 84 9a 00 00 00    	je     c000345b <create_chain+0x1a6>
c00033c1:	85 c0                	test   eax,eax
c00033c3:	74 11                	je     c00033d6 <create_chain+0x121>
c00033c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 0d                	jbe    c00033da <create_chain+0x125>
c00033cd:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d0:	76 08                	jbe    c00033da <create_chain+0x125>
c00033d2:	89 c7                	mov    edi,eax
c00033d4:	eb 04                	jmp    c00033da <create_chain+0x125>
c00033d6:	85 db                	test   ebx,ebx
c00033d8:	75 38                	jne    c0003412 <create_chain+0x15d>
c00033da:	89 fb                	mov    ebx,edi
c00033dc:	43                   	inc    ebx
c00033dd:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e0:	77 0e                	ja     c00033f0 <create_chain+0x13b>
c00033e2:	83 ff 01             	cmp    edi,0x1
c00033e5:	0f 86 28 ff ff ff    	jbe    c0003313 <create_chain+0x5e>
c00033eb:	bb 02 00 00 00       	mov    ebx,0x2
c00033f0:	89 da                	mov    edx,ebx
c00033f2:	89 e8                	mov    eax,ebp
c00033f4:	e8 ce fb ff ff       	call   c0002fc7 <get_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 15                	je     c0003412 <create_chain+0x15d>
c00033fd:	83 f8 01             	cmp    eax,0x1
c0003400:	0f 84 e0 fe ff ff    	je     c00032e6 <create_chain+0x31>
c0003406:	40                   	inc    eax
c0003407:	74 52                	je     c000345b <create_chain+0x1a6>
c0003409:	39 fb                	cmp    ebx,edi
c000340b:	75 cf                	jne    c00033dc <create_chain+0x127>
c000340d:	e9 01 ff ff ff       	jmp    c0003313 <create_chain+0x5e>
c0003412:	83 c9 ff             	or     ecx,0xffffffff
c0003415:	89 da                	mov    edx,ebx
c0003417:	89 f0                	mov    eax,esi
c0003419:	e8 a4 f9 ff ff       	call   c0002dc2 <put_fat>
c000341e:	85 c0                	test   eax,eax
c0003420:	75 32                	jne    c0003454 <create_chain+0x19f>
c0003422:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003427:	74 11                	je     c000343a <create_chain+0x185>
c0003429:	89 d9                	mov    ecx,ebx
c000342b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000342f:	89 f0                	mov    eax,esi
c0003431:	e8 8c f9 ff ff       	call   c0002dc2 <put_fat>
c0003436:	85 c0                	test   eax,eax
c0003438:	75 1a                	jne    c0003454 <create_chain+0x19f>
c000343a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000343d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003440:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003443:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003446:	39 d0                	cmp    eax,edx
c0003448:	77 04                	ja     c000344e <create_chain+0x199>
c000344a:	48                   	dec    eax
c000344b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000344e:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003452:	eb 56                	jmp    c00034aa <create_chain+0x1f5>
c0003454:	48                   	dec    eax
c0003455:	0f 85 8b fe ff ff    	jne    c00032e6 <create_chain+0x31>
c000345b:	83 cb ff             	or     ebx,0xffffffff
c000345e:	eb 4a                	jmp    c00034aa <create_chain+0x1f5>
c0003460:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003464:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003467:	41                   	inc    ecx
c0003468:	39 d9                	cmp    ecx,ebx
c000346a:	75 19                	jne    c0003485 <create_chain+0x1d0>
c000346c:	b9 02 00 00 00       	mov    ecx,0x2
c0003471:	85 d2                	test   edx,edx
c0003473:	74 03                	je     c0003478 <create_chain+0x1c3>
c0003475:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003478:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000347b:	85 c0                	test   eax,eax
c000347d:	0f 85 63 fe ff ff    	jne    c00032e6 <create_chain+0x31>
c0003483:	eb b5                	jmp    c000343a <create_chain+0x185>
c0003485:	85 d2                	test   edx,edx
c0003487:	75 07                	jne    c0003490 <create_chain+0x1db>
c0003489:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003490:	89 d9                	mov    ecx,ebx
c0003492:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003496:	89 e8                	mov    eax,ebp
c0003498:	e8 bb fa ff ff       	call   c0002f58 <fill_last_frag>
c000349d:	85 c0                	test   eax,eax
c000349f:	75 b3                	jne    c0003454 <create_chain+0x19f>
c00034a1:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034a8:	eb 90                	jmp    c000343a <create_chain+0x185>
c00034aa:	83 c4 1c             	add    esp,0x1c
c00034ad:	89 d8                	mov    eax,ebx
c00034af:	5b                   	pop    ebx
c00034b0:	5e                   	pop    esi
c00034b1:	5f                   	pop    edi
c00034b2:	5d                   	pop    ebp
c00034b3:	c3                   	ret    

c00034b4 <remove_chain>:
c00034b4:	55                   	push   ebp
c00034b5:	57                   	push   edi
c00034b6:	56                   	push   esi
c00034b7:	53                   	push   ebx
c00034b8:	83 ec 1c             	sub    esp,0x1c
c00034bb:	83 fa 01             	cmp    edx,0x1
c00034be:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034c2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034c4:	77 0a                	ja     c00034d0 <remove_chain+0x1c>
c00034c6:	b8 02 00 00 00       	mov    eax,0x2
c00034cb:	e9 24 01 00 00       	jmp    c00035f4 <remove_chain+0x140>
c00034d0:	89 d6                	mov    esi,edx
c00034d2:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034d5:	76 ef                	jbe    c00034c6 <remove_chain+0x12>
c00034d7:	89 c7                	mov    edi,eax
c00034d9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034de:	75 06                	jne    c00034e6 <remove_chain+0x32>
c00034e0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034e4:	eb 54                	jmp    c000353a <remove_chain+0x86>
c00034e6:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034e9:	75 06                	jne    c00034f1 <remove_chain+0x3d>
c00034eb:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034ef:	74 ef                	je     c00034e0 <remove_chain+0x2c>
c00034f1:	83 c9 ff             	or     ecx,0xffffffff
c00034f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034f8:	89 d8                	mov    eax,ebx
c00034fa:	e8 c3 f8 ff ff       	call   c0002dc2 <put_fat>
c00034ff:	85 c0                	test   eax,eax
c0003501:	74 dd                	je     c00034e0 <remove_chain+0x2c>
c0003503:	e9 ec 00 00 00       	jmp    c00035f4 <remove_chain+0x140>
c0003508:	83 f8 01             	cmp    eax,0x1
c000350b:	74 b9                	je     c00034c6 <remove_chain+0x12>
c000350d:	83 f8 ff             	cmp    eax,0xffffffff
c0003510:	74 6d                	je     c000357f <remove_chain+0xcb>
c0003512:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003515:	75 6f                	jne    c0003586 <remove_chain+0xd2>
c0003517:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000351a:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000351d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003520:	39 d0                	cmp    eax,edx
c0003522:	73 08                	jae    c000352c <remove_chain+0x78>
c0003524:	40                   	inc    eax
c0003525:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003529:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000352c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000352f:	39 e9                	cmp    ecx,ebp
c0003531:	75 64                	jne    c0003597 <remove_chain+0xe3>
c0003533:	89 ee                	mov    esi,ebp
c0003535:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003538:	76 0f                	jbe    c0003549 <remove_chain+0x95>
c000353a:	89 f2                	mov    edx,esi
c000353c:	89 f8                	mov    eax,edi
c000353e:	e8 84 fa ff ff       	call   c0002fc7 <get_fat>
c0003543:	89 c5                	mov    ebp,eax
c0003545:	85 c0                	test   eax,eax
c0003547:	75 bf                	jne    c0003508 <remove_chain+0x54>
c0003549:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000354c:	0f 85 a0 00 00 00    	jne    c00035f2 <remove_chain+0x13e>
c0003552:	eb 6c                	jmp    c00035c0 <remove_chain+0x10c>
c0003554:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003557:	84 c0                	test   al,al
c0003559:	75 7d                	jne    c00035d8 <remove_chain+0x124>
c000355b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000355e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003562:	0f 84 86 00 00 00    	je     c00035ee <remove_chain+0x13a>
c0003568:	89 da                	mov    edx,ebx
c000356a:	89 f8                	mov    eax,edi
c000356c:	e8 56 fa ff ff       	call   c0002fc7 <get_fat>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	0f 86 4c ff ff ff    	jbe    c00034c6 <remove_chain+0x12>
c000357a:	83 f8 ff             	cmp    eax,0xffffffff
c000357d:	75 4e                	jne    c00035cd <remove_chain+0x119>
c000357f:	b8 01 00 00 00       	mov    eax,0x1
c0003584:	eb 6e                	jmp    c00035f4 <remove_chain+0x140>
c0003586:	31 c9                	xor    ecx,ecx
c0003588:	89 f2                	mov    edx,esi
c000358a:	89 d8                	mov    eax,ebx
c000358c:	e8 31 f8 ff ff       	call   c0002dc2 <put_fat>
c0003591:	85 c0                	test   eax,eax
c0003593:	74 82                	je     c0003517 <remove_chain+0x63>
c0003595:	eb 5d                	jmp    c00035f4 <remove_chain+0x140>
c0003597:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000359a:	75 1b                	jne    c00035b7 <remove_chain+0x103>
c000359c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	83 ec 0c             	sub    esp,0xc
c00035a5:	6a 00                	push   0x0
c00035a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035ab:	e8 5d f7 ff ff       	call   c0002d0d <change_bitmap>
c00035b0:	83 c4 10             	add    esp,0x10
c00035b3:	85 c0                	test   eax,eax
c00035b5:	75 3d                	jne    c00035f4 <remove_chain+0x140>
c00035b7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035bb:	e9 73 ff ff ff       	jmp    c0003533 <remove_chain+0x7f>
c00035c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035c5:	75 8d                	jne    c0003554 <remove_chain+0xa0>
c00035c7:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035cb:	eb 25                	jmp    c00035f2 <remove_chain+0x13e>
c00035cd:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d0:	89 c3                	mov    ebx,eax
c00035d2:	39 c2                	cmp    edx,eax
c00035d4:	74 88                	je     c000355e <remove_chain+0xaa>
c00035d6:	eb 1a                	jmp    c00035f2 <remove_chain+0x13e>
c00035d8:	3c 03                	cmp    al,0x3
c00035da:	75 16                	jne    c00035f2 <remove_chain+0x13e>
c00035dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035df:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035e3:	77 0d                	ja     c00035f2 <remove_chain+0x13e>
c00035e5:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035e8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ec:	72 04                	jb     c00035f2 <remove_chain+0x13e>
c00035ee:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035f2:	31 c0                	xor    eax,eax
c00035f4:	83 c4 1c             	add    esp,0x1c
c00035f7:	5b                   	pop    ebx
c00035f8:	5e                   	pop    esi
c00035f9:	5f                   	pop    edi
c00035fa:	5d                   	pop    ebp
c00035fb:	c3                   	ret    

c00035fc <dir_clear>:
c00035fc:	55                   	push   ebp
c00035fd:	57                   	push   edi
c00035fe:	56                   	push   esi
c00035ff:	89 c6                	mov    esi,eax
c0003601:	53                   	push   ebx
c0003602:	83 ec 1c             	sub    esp,0x1c
c0003605:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003609:	e8 9d ed ff ff       	call   c00023ab <sync_window>
c000360e:	85 c0                	test   eax,eax
c0003610:	0f 85 de 00 00 00    	jne    c00036f4 <dir_clear+0xf8>
c0003616:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000361a:	89 f0                	mov    eax,esi
c000361c:	8d 6e 54             	lea    ebp,[esi+0x54]
c000361f:	e8 d6 e8 ff ff       	call   c0001efa <clst2sect>
c0003624:	b9 00 02 00 00       	mov    ecx,0x200
c0003629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000362d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003631:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003634:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003637:	89 e8                	mov    eax,ebp
c0003639:	31 d2                	xor    edx,edx
c000363b:	e8 b5 e6 ff ff       	call   c0001cf5 <mem_set>
c0003640:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003644:	c1 e3 09             	shl    ebx,0x9
c0003647:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000364d:	76 1f                	jbe    c000366e <dir_clear+0x72>
c000364f:	bb 00 80 00 00       	mov    ebx,0x8000
c0003654:	eb 18                	jmp    c000366e <dir_clear+0x72>
c0003656:	83 ec 0c             	sub    esp,0xc
c0003659:	53                   	push   ebx
c000365a:	e8 35 4e 00 00       	call   c0008494 <ff_memalloc>
c000365f:	83 c4 10             	add    esp,0x10
c0003662:	89 c7                	mov    edi,eax
c0003664:	85 c0                	test   eax,eax
c0003666:	0f 85 8f 00 00 00    	jne    c00036fb <dir_clear+0xff>
c000366c:	d1 eb                	shr    ebx,1
c000366e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003674:	77 e0                	ja     c0003656 <dir_clear+0x5a>
c0003676:	31 db                	xor    ebx,ebx
c0003678:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000367c:	39 d8                	cmp    eax,ebx
c000367e:	76 66                	jbe    c00036e6 <dir_clear+0xea>
c0003680:	83 ec 0c             	sub    esp,0xc
c0003683:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003687:	6a 01                	push   0x1
c0003689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000368d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003691:	55                   	push   ebp
c0003692:	50                   	push   eax
c0003693:	e8 94 e5 ff ff       	call   c0001c2c <disk_write>
c0003698:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000369d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036a2:	83 c4 20             	add    esp,0x20
c00036a5:	85 c0                	test   eax,eax
c00036a7:	75 3d                	jne    c00036e6 <dir_clear+0xea>
c00036a9:	43                   	inc    ebx
c00036aa:	eb cc                	jmp    c0003678 <dir_clear+0x7c>
c00036ac:	83 ec 0c             	sub    esp,0xc
c00036af:	31 d2                	xor    edx,edx
c00036b1:	55                   	push   ebp
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036b8:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036bc:	52                   	push   edx
c00036bd:	50                   	push   eax
c00036be:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036c2:	57                   	push   edi
c00036c3:	50                   	push   eax
c00036c4:	e8 63 e5 ff ff       	call   c0001c2c <disk_write>
c00036c9:	83 c4 20             	add    esp,0x20
c00036cc:	85 c0                	test   eax,eax
c00036ce:	75 0a                	jne    c00036da <dir_clear+0xde>
c00036d0:	01 eb                	add    ebx,ebp
c00036d2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036d6:	39 d8                	cmp    eax,ebx
c00036d8:	77 d2                	ja     c00036ac <dir_clear+0xb0>
c00036da:	83 ec 0c             	sub    esp,0xc
c00036dd:	57                   	push   edi
c00036de:	e8 c7 4d 00 00       	call   c00084aa <ff_memfree>
c00036e3:	83 c4 10             	add    esp,0x10
c00036e6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036ea:	39 d8                	cmp    eax,ebx
c00036ec:	0f 95 c0             	setne  al
c00036ef:	0f b6 c0             	movzx  eax,al
c00036f2:	eb 19                	jmp    c000370d <dir_clear+0x111>
c00036f4:	b8 01 00 00 00       	mov    eax,0x1
c00036f9:	eb 12                	jmp    c000370d <dir_clear+0x111>
c00036fb:	89 d9                	mov    ecx,ebx
c00036fd:	31 d2                	xor    edx,edx
c00036ff:	c1 eb 09             	shr    ebx,0x9
c0003702:	e8 ee e5 ff ff       	call   c0001cf5 <mem_set>
c0003707:	89 dd                	mov    ebp,ebx
c0003709:	31 db                	xor    ebx,ebx
c000370b:	eb c5                	jmp    c00036d2 <dir_clear+0xd6>
c000370d:	83 c4 1c             	add    esp,0x1c
c0003710:	5b                   	pop    ebx
c0003711:	5e                   	pop    esi
c0003712:	5f                   	pop    edi
c0003713:	5d                   	pop    ebp
c0003714:	c3                   	ret    

c0003715 <dir_next>:
c0003715:	55                   	push   ebp
c0003716:	57                   	push   edi
c0003717:	56                   	push   esi
c0003718:	53                   	push   ebx
c0003719:	89 c3                	mov    ebx,eax
c000371b:	83 ec 1c             	sub    esp,0x1c
c000371e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003720:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003724:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003727:	8d 78 20             	lea    edi,[eax+0x20]
c000372a:	31 c0                	xor    eax,eax
c000372c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003730:	0f 94 c0             	sete   al
c0003733:	48                   	dec    eax
c0003734:	25 00 00 20 f0       	and    eax,0xf0200000
c0003739:	05 00 00 00 10       	add    eax,0x10000000
c000373e:	39 f8                	cmp    eax,edi
c0003740:	77 0e                	ja     c0003750 <dir_next+0x3b>
c0003742:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003749:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003750:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003753:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003756:	b8 04 00 00 00       	mov    eax,0x4
c000375b:	89 ce                	mov    esi,ecx
c000375d:	09 d6                	or     esi,edx
c000375f:	0f 84 da 00 00 00    	je     c000383f <dir_next+0x12a>
c0003765:	89 f8                	mov    eax,edi
c0003767:	25 ff 01 00 00       	and    eax,0x1ff
c000376c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003770:	0f 85 b9 00 00 00    	jne    c000382f <dir_next+0x11a>
c0003776:	83 c2 01             	add    edx,0x1
c0003779:	83 d1 00             	adc    ecx,0x0
c000377c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000377f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003782:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003785:	85 d2                	test   edx,edx
c0003787:	75 29                	jne    c00037b2 <dir_next+0x9d>
c0003789:	89 fa                	mov    edx,edi
c000378b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000378f:	c1 ea 05             	shr    edx,0x5
c0003792:	39 c2                	cmp    edx,eax
c0003794:	0f 82 95 00 00 00    	jb     c000382f <dir_next+0x11a>
c000379a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037a8:	b8 04 00 00 00       	mov    eax,0x4
c00037ad:	e9 8d 00 00 00       	jmp    c000383f <dir_next+0x12a>
c00037b2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037b6:	89 f9                	mov    ecx,edi
c00037b8:	48                   	dec    eax
c00037b9:	c1 e9 09             	shr    ecx,0x9
c00037bc:	85 c8                	test   eax,ecx
c00037be:	75 6f                	jne    c000382f <dir_next+0x11a>
c00037c0:	89 d8                	mov    eax,ebx
c00037c2:	e8 00 f8 ff ff       	call   c0002fc7 <get_fat>
c00037c7:	89 c6                	mov    esi,eax
c00037c9:	83 f8 01             	cmp    eax,0x1
c00037cc:	77 07                	ja     c00037d5 <dir_next+0xc0>
c00037ce:	b8 02 00 00 00       	mov    eax,0x2
c00037d3:	eb 6a                	jmp    c000383f <dir_next+0x12a>
c00037d5:	83 f8 ff             	cmp    eax,0xffffffff
c00037d8:	75 07                	jne    c00037e1 <dir_next+0xcc>
c00037da:	b8 01 00 00 00       	mov    eax,0x1
c00037df:	eb 5e                	jmp    c000383f <dir_next+0x12a>
c00037e1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037e4:	77 37                	ja     c000381d <dir_next+0x108>
c00037e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037eb:	74 ad                	je     c000379a <dir_next+0x85>
c00037ed:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f0:	89 d8                	mov    eax,ebx
c00037f2:	e8 be fa ff ff       	call   c00032b5 <create_chain>
c00037f7:	89 c6                	mov    esi,eax
c00037f9:	b8 07 00 00 00       	mov    eax,0x7
c00037fe:	85 f6                	test   esi,esi
c0003800:	74 3d                	je     c000383f <dir_next+0x12a>
c0003802:	83 fe 01             	cmp    esi,0x1
c0003805:	74 c7                	je     c00037ce <dir_next+0xb9>
c0003807:	83 fe ff             	cmp    esi,0xffffffff
c000380a:	74 ce                	je     c00037da <dir_next+0xc5>
c000380c:	89 f2                	mov    edx,esi
c000380e:	89 e8                	mov    eax,ebp
c0003810:	e8 e7 fd ff ff       	call   c00035fc <dir_clear>
c0003815:	85 c0                	test   eax,eax
c0003817:	75 c1                	jne    c00037da <dir_next+0xc5>
c0003819:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000381d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003820:	89 f2                	mov    edx,esi
c0003822:	89 e8                	mov    eax,ebp
c0003824:	e8 d1 e6 ff ff       	call   c0001efa <clst2sect>
c0003829:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000382c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000382f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003833:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003836:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000383a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000383d:	31 c0                	xor    eax,eax
c000383f:	83 c4 1c             	add    esp,0x1c
c0003842:	5b                   	pop    ebx
c0003843:	5e                   	pop    esi
c0003844:	5f                   	pop    edi
c0003845:	5d                   	pop    ebp
c0003846:	c3                   	ret    

c0003847 <load_xdir>:
c0003847:	55                   	push   ebp
c0003848:	57                   	push   edi
c0003849:	56                   	push   esi
c000384a:	89 c6                	mov    esi,eax
c000384c:	53                   	push   ebx
c000384d:	83 ec 1c             	sub    esp,0x1c
c0003850:	8b 00                	mov    eax,DWORD PTR [eax]
c0003852:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003855:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003858:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000385b:	e8 df eb ff ff       	call   c000243f <move_window>
c0003860:	89 c3                	mov    ebx,eax
c0003862:	85 c0                	test   eax,eax
c0003864:	0f 85 0c 01 00 00    	jne    c0003976 <load_xdir+0x12f>
c000386a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000386d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003870:	0f 85 fb 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c0003876:	89 f8                	mov    eax,edi
c0003878:	b9 20 00 00 00       	mov    ecx,0x20
c000387d:	e8 5e e4 ff ff       	call   c0001ce0 <mem_cpy>
c0003882:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003886:	40                   	inc    eax
c0003887:	c1 e0 05             	shl    eax,0x5
c000388a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000388e:	83 e8 60             	sub    eax,0x60
c0003891:	3d 00 02 00 00       	cmp    eax,0x200
c0003896:	0f 87 d5 00 00 00    	ja     c0003971 <load_xdir+0x12a>
c000389c:	31 d2                	xor    edx,edx
c000389e:	89 f0                	mov    eax,esi
c00038a0:	e8 70 fe ff ff       	call   c0003715 <dir_next>
c00038a5:	89 c3                	mov    ebx,eax
c00038a7:	83 f8 04             	cmp    eax,0x4
c00038aa:	0f 84 c1 00 00 00    	je     c0003971 <load_xdir+0x12a>
c00038b0:	85 c0                	test   eax,eax
c00038b2:	0f 85 be 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038b8:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038bb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038be:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c0:	e8 7a eb ff ff       	call   c000243f <move_window>
c00038c5:	89 c3                	mov    ebx,eax
c00038c7:	85 c0                	test   eax,eax
c00038c9:	0f 85 a7 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038d2:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038d5:	0f 85 96 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c00038db:	8d 47 20             	lea    eax,[edi+0x20]
c00038de:	b9 20 00 00 00       	mov    ecx,0x20
c00038e3:	e8 f8 e3 ff ff       	call   c0001ce0 <mem_cpy>
c00038e8:	31 d2                	xor    edx,edx
c00038ea:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038ee:	b9 0f 00 00 00       	mov    ecx,0xf
c00038f3:	83 c0 2c             	add    eax,0x2c
c00038f6:	f7 f1                	div    ecx
c00038f8:	c1 e0 05             	shl    eax,0x5
c00038fb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038ff:	77 70                	ja     c0003971 <load_xdir+0x12a>
c0003901:	bd 40 00 00 00       	mov    ebp,0x40
c0003906:	31 d2                	xor    edx,edx
c0003908:	89 f0                	mov    eax,esi
c000390a:	e8 06 fe ff ff       	call   c0003715 <dir_next>
c000390f:	89 c3                	mov    ebx,eax
c0003911:	83 f8 04             	cmp    eax,0x4
c0003914:	74 5b                	je     c0003971 <load_xdir+0x12a>
c0003916:	85 c0                	test   eax,eax
c0003918:	75 5c                	jne    c0003976 <load_xdir+0x12f>
c000391a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000391d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003920:	8b 06                	mov    eax,DWORD PTR [esi]
c0003922:	e8 18 eb ff ff       	call   c000243f <move_window>
c0003927:	89 c3                	mov    ebx,eax
c0003929:	85 c0                	test   eax,eax
c000392b:	75 49                	jne    c0003976 <load_xdir+0x12f>
c000392d:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003930:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003933:	75 3c                	jne    c0003971 <load_xdir+0x12a>
c0003935:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000393b:	77 0d                	ja     c000394a <load_xdir+0x103>
c000393d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003940:	b9 20 00 00 00       	mov    ecx,0x20
c0003945:	e8 96 e3 ff ff       	call   c0001ce0 <mem_cpy>
c000394a:	83 c5 20             	add    ebp,0x20
c000394d:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003951:	77 b3                	ja     c0003906 <load_xdir+0xbf>
c0003953:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003959:	77 1b                	ja     c0003976 <load_xdir+0x12f>
c000395b:	89 f8                	mov    eax,edi
c000395d:	e8 cd e7 ff ff       	call   c000212f <xdir_sum>
c0003962:	89 c1                	mov    ecx,eax
c0003964:	8d 47 02             	lea    eax,[edi+0x2]
c0003967:	e8 f5 e2 ff ff       	call   c0001c61 <ld_word>
c000396c:	66 39 c1             	cmp    cx,ax
c000396f:	74 05                	je     c0003976 <load_xdir+0x12f>
c0003971:	bb 02 00 00 00       	mov    ebx,0x2
c0003976:	83 c4 1c             	add    esp,0x1c
c0003979:	89 d8                	mov    eax,ebx
c000397b:	5b                   	pop    ebx
c000397c:	5e                   	pop    esi
c000397d:	5f                   	pop    edi
c000397e:	5d                   	pop    ebp
c000397f:	c3                   	ret    

c0003980 <load_obj_xdir>:
c0003980:	53                   	push   ebx
c0003981:	89 c3                	mov    ebx,eax
c0003983:	83 ec 08             	sub    esp,0x8
c0003986:	8b 02                	mov    eax,DWORD PTR [edx]
c0003988:	89 03                	mov    DWORD PTR [ebx],eax
c000398a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000398d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003990:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003993:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003996:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003999:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a0:	30 c0                	xor    al,al
c00039a2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039a9:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039ac:	89 d8                	mov    eax,ebx
c00039ae:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b1:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039b4:	e8 04 f8 ff ff       	call   c00031bd <dir_sdi>
c00039b9:	85 c0                	test   eax,eax
c00039bb:	75 0b                	jne    c00039c8 <load_obj_xdir+0x48>
c00039bd:	89 d8                	mov    eax,ebx
c00039bf:	83 c4 08             	add    esp,0x8
c00039c2:	5b                   	pop    ebx
c00039c3:	e9 7f fe ff ff       	jmp    c0003847 <load_xdir>
c00039c8:	83 c4 08             	add    esp,0x8
c00039cb:	5b                   	pop    ebx
c00039cc:	c3                   	ret    

c00039cd <dir_read>:
c00039cd:	55                   	push   ebp
c00039ce:	bd 04 00 00 00       	mov    ebp,0x4
c00039d3:	57                   	push   edi
c00039d4:	56                   	push   esi
c00039d5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039da:	53                   	push   ebx
c00039db:	89 c3                	mov    ebx,eax
c00039dd:	83 ec 1c             	sub    esp,0x1c
c00039e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e4:	8b 38                	mov    edi,DWORD PTR [eax]
c00039e6:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039eb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039ee:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f1:	89 c8                	mov    eax,ecx
c00039f3:	09 d0                	or     eax,edx
c00039f5:	0f 84 25 01 00 00    	je     c0003b20 <dir_read+0x153>
c00039fb:	89 f8                	mov    eax,edi
c00039fd:	e8 3d ea ff ff       	call   c000243f <move_window>
c0003a02:	89 c5                	mov    ebp,eax
c0003a04:	85 c0                	test   eax,eax
c0003a06:	0f 85 23 01 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a0c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a0f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a11:	84 c9                	test   cl,cl
c0003a13:	0f 84 11 01 00 00    	je     c0003b2a <dir_read+0x15d>
c0003a19:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a1c:	75 48                	jne    c0003a66 <dir_read+0x99>
c0003a1e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a23:	74 10                	je     c0003a35 <dir_read+0x68>
c0003a25:	80 f9 83             	cmp    cl,0x83
c0003a28:	0f 85 dd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a2e:	31 ed                	xor    ebp,ebp
c0003a30:	e9 08 01 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a35:	80 f9 85             	cmp    cl,0x85
c0003a38:	0f 85 cd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a3e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a41:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a44:	89 d8                	mov    eax,ebx
c0003a46:	e8 fc fd ff ff       	call   c0003847 <load_xdir>
c0003a4b:	89 c5                	mov    ebp,eax
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	0f 85 da 00 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a55:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a58:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a5b:	83 e0 3f             	and    eax,0x3f
c0003a5e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a61:	e9 d7 00 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a66:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a69:	83 e0 3f             	and    eax,0x3f
c0003a6c:	80 f9 2e             	cmp    cl,0x2e
c0003a6f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a73:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a76:	0f 84 8a 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a7c:	80 f9 e5             	cmp    cl,0xe5
c0003a7f:	0f 84 81 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a89:	83 e0 1f             	and    eax,0x1f
c0003a8c:	83 f8 08             	cmp    eax,0x8
c0003a8f:	0f 94 c0             	sete   al
c0003a92:	0f b6 c0             	movzx  eax,al
c0003a95:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a99:	75 6b                	jne    c0003b06 <dir_read+0x139>
c0003a9b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa0:	75 44                	jne    c0003ae6 <dir_read+0x119>
c0003aa2:	f6 c1 40             	test   cl,0x40
c0003aa5:	74 12                	je     c0003ab9 <dir_read+0xec>
c0003aa7:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003aaa:	83 e1 bf             	and    ecx,0xffffffbf
c0003aad:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ab4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ab7:	eb 06                	jmp    c0003abf <dir_read+0xf2>
c0003ab9:	89 f0                	mov    eax,esi
c0003abb:	38 c8                	cmp    al,cl
c0003abd:	75 47                	jne    c0003b06 <dir_read+0x139>
c0003abf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ac3:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ac8:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003acb:	75 3e                	jne    c0003b0b <dir_read+0x13e>
c0003acd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ad4:	e8 8a e4 ff ff       	call   c0001f63 <pick_lfn>
c0003ad9:	85 c0                	test   eax,eax
c0003adb:	74 2e                	je     c0003b0b <dir_read+0x13e>
c0003add:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae1:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ae4:	eb 25                	jmp    c0003b0b <dir_read+0x13e>
c0003ae6:	89 f0                	mov    eax,esi
c0003ae8:	84 c0                	test   al,al
c0003aea:	75 11                	jne    c0003afd <dir_read+0x130>
c0003aec:	89 d0                	mov    eax,edx
c0003aee:	e8 2a e6 ff ff       	call   c000211d <sum_sfn>
c0003af3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003af7:	0f 84 31 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003afd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b04:	eb 37                	jmp    c0003b3d <dir_read+0x170>
c0003b06:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b0b:	31 d2                	xor    edx,edx
c0003b0d:	89 d8                	mov    eax,ebx
c0003b0f:	e8 01 fc ff ff       	call   c0003715 <dir_next>
c0003b14:	89 c5                	mov    ebp,eax
c0003b16:	85 c0                	test   eax,eax
c0003b18:	0f 84 cd fe ff ff    	je     c00039eb <dir_read+0x1e>
c0003b1e:	eb 0f                	jmp    c0003b2f <dir_read+0x162>
c0003b20:	85 ed                	test   ebp,ebp
c0003b22:	0f 84 06 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003b28:	eb 05                	jmp    c0003b2f <dir_read+0x162>
c0003b2a:	bd 04 00 00 00       	mov    ebp,0x4
c0003b2f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b36:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b3d:	83 c4 1c             	add    esp,0x1c
c0003b40:	89 e8                	mov    eax,ebp
c0003b42:	5b                   	pop    ebx
c0003b43:	5e                   	pop    esi
c0003b44:	5f                   	pop    edi
c0003b45:	5d                   	pop    ebp
c0003b46:	c3                   	ret    

c0003b47 <dir_alloc>:
c0003b47:	55                   	push   ebp
c0003b48:	89 d5                	mov    ebp,edx
c0003b4a:	57                   	push   edi
c0003b4b:	31 d2                	xor    edx,edx
c0003b4d:	56                   	push   esi
c0003b4e:	53                   	push   ebx
c0003b4f:	89 c3                	mov    ebx,eax
c0003b51:	83 ec 0c             	sub    esp,0xc
c0003b54:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b56:	e8 62 f6 ff ff       	call   c00031bd <dir_sdi>
c0003b5b:	85 c0                	test   eax,eax
c0003b5d:	75 4e                	jne    c0003bad <dir_alloc+0x66>
c0003b5f:	31 f6                	xor    esi,esi
c0003b61:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b64:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b67:	89 f8                	mov    eax,edi
c0003b69:	e8 d1 e8 ff ff       	call   c000243f <move_window>
c0003b6e:	85 c0                	test   eax,eax
c0003b70:	75 3b                	jne    c0003bad <dir_alloc+0x66>
c0003b72:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b75:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b78:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b7a:	75 07                	jne    c0003b83 <dir_alloc+0x3c>
c0003b7c:	f7 d2                	not    edx
c0003b7e:	c0 ea 07             	shr    dl,0x7
c0003b81:	eb 0d                	jmp    c0003b90 <dir_alloc+0x49>
c0003b83:	84 d2                	test   dl,dl
c0003b85:	0f 94 c1             	sete   cl
c0003b88:	80 fa e5             	cmp    dl,0xe5
c0003b8b:	0f 94 c2             	sete   dl
c0003b8e:	09 ca                	or     edx,ecx
c0003b90:	84 d2                	test   dl,dl
c0003b92:	74 07                	je     c0003b9b <dir_alloc+0x54>
c0003b94:	46                   	inc    esi
c0003b95:	39 ee                	cmp    esi,ebp
c0003b97:	75 04                	jne    c0003b9d <dir_alloc+0x56>
c0003b99:	eb 1c                	jmp    c0003bb7 <dir_alloc+0x70>
c0003b9b:	31 f6                	xor    esi,esi
c0003b9d:	ba 01 00 00 00       	mov    edx,0x1
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 6c fb ff ff       	call   c0003715 <dir_next>
c0003ba9:	85 c0                	test   eax,eax
c0003bab:	74 b4                	je     c0003b61 <dir_alloc+0x1a>
c0003bad:	83 f8 04             	cmp    eax,0x4
c0003bb0:	75 05                	jne    c0003bb7 <dir_alloc+0x70>
c0003bb2:	b8 07 00 00 00       	mov    eax,0x7
c0003bb7:	83 c4 0c             	add    esp,0xc
c0003bba:	5b                   	pop    ebx
c0003bbb:	5e                   	pop    esi
c0003bbc:	5f                   	pop    edi
c0003bbd:	5d                   	pop    ebp
c0003bbe:	c3                   	ret    

c0003bbf <store_xdir>:
c0003bbf:	55                   	push   ebp
c0003bc0:	57                   	push   edi
c0003bc1:	89 c7                	mov    edi,eax
c0003bc3:	56                   	push   esi
c0003bc4:	53                   	push   ebx
c0003bc5:	83 ec 0c             	sub    esp,0xc
c0003bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bca:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bcd:	89 e8                	mov    eax,ebp
c0003bcf:	e8 5b e5 ff ff       	call   c000212f <xdir_sum>
c0003bd4:	0f b7 d0             	movzx  edx,ax
c0003bd7:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bda:	e8 f4 e0 ff ff       	call   c0001cd3 <st_word>
c0003bdf:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003be3:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003be6:	89 f8                	mov    eax,edi
c0003be8:	e8 d0 f5 ff ff       	call   c00031bd <dir_sdi>
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	85 f6                	test   esi,esi
c0003bf1:	75 3d                	jne    c0003c30 <store_xdir+0x71>
c0003bf3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bf6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bf9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bfb:	e8 3f e8 ff ff       	call   c000243f <move_window>
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	85 c0                	test   eax,eax
c0003c04:	75 2a                	jne    c0003c30 <store_xdir+0x71>
c0003c06:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c09:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0e:	89 ea                	mov    edx,ebp
c0003c10:	e8 cb e0 ff ff       	call   c0001ce0 <mem_cpy>
c0003c15:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c17:	85 db                	test   ebx,ebx
c0003c19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c1d:	74 11                	je     c0003c30 <store_xdir+0x71>
c0003c1f:	31 d2                	xor    edx,edx
c0003c21:	89 f8                	mov    eax,edi
c0003c23:	83 c5 20             	add    ebp,0x20
c0003c26:	e8 ea fa ff ff       	call   c0003715 <dir_next>
c0003c2b:	4b                   	dec    ebx
c0003c2c:	89 c6                	mov    esi,eax
c0003c2e:	eb bf                	jmp    c0003bef <store_xdir+0x30>
c0003c30:	89 f0                	mov    eax,esi
c0003c32:	83 fe 02             	cmp    esi,0x2
c0003c35:	76 05                	jbe    c0003c3c <store_xdir+0x7d>
c0003c37:	b8 02 00 00 00       	mov    eax,0x2
c0003c3c:	83 c4 0c             	add    esp,0xc
c0003c3f:	5b                   	pop    ebx
c0003c40:	5e                   	pop    esi
c0003c41:	5f                   	pop    edi
c0003c42:	5d                   	pop    ebp
c0003c43:	c3                   	ret    

c0003c44 <dir_remove>:
c0003c44:	57                   	push   edi
c0003c45:	56                   	push   esi
c0003c46:	53                   	push   ebx
c0003c47:	89 c3                	mov    ebx,eax
c0003c49:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c4c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c4e:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c51:	83 fa ff             	cmp    edx,0xffffffff
c0003c54:	74 09                	je     c0003c5f <dir_remove+0x1b>
c0003c56:	e8 62 f5 ff ff       	call   c00031bd <dir_sdi>
c0003c5b:	85 c0                	test   eax,eax
c0003c5d:	75 41                	jne    c0003ca0 <dir_remove+0x5c>
c0003c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c62:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c65:	89 f0                	mov    eax,esi
c0003c67:	e8 d3 e7 ff ff       	call   c000243f <move_window>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	75 26                	jne    c0003c96 <dir_remove+0x52>
c0003c70:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c73:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c76:	75 05                	jne    c0003c7d <dir_remove+0x39>
c0003c78:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c7b:	eb 03                	jmp    c0003c80 <dir_remove+0x3c>
c0003c7d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c80:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c84:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c87:	73 17                	jae    c0003ca0 <dir_remove+0x5c>
c0003c89:	31 d2                	xor    edx,edx
c0003c8b:	89 d8                	mov    eax,ebx
c0003c8d:	e8 83 fa ff ff       	call   c0003715 <dir_next>
c0003c92:	85 c0                	test   eax,eax
c0003c94:	74 c9                	je     c0003c5f <dir_remove+0x1b>
c0003c96:	83 f8 04             	cmp    eax,0x4
c0003c99:	75 05                	jne    c0003ca0 <dir_remove+0x5c>
c0003c9b:	b8 02 00 00 00       	mov    eax,0x2
c0003ca0:	5b                   	pop    ebx
c0003ca1:	5e                   	pop    esi
c0003ca2:	5f                   	pop    edi
c0003ca3:	c3                   	ret    

c0003ca4 <create_name>:
c0003ca4:	55                   	push   ebp
c0003ca5:	89 d5                	mov    ebp,edx
c0003ca7:	57                   	push   edi
c0003ca8:	89 c7                	mov    edi,eax
c0003caa:	56                   	push   esi
c0003cab:	31 f6                	xor    esi,esi
c0003cad:	53                   	push   ebx
c0003cae:	83 ec 3c             	sub    esp,0x3c
c0003cb1:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cb3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cb7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003cc4:	e8 72 e0 ff ff       	call   c0001d3b <tchar2uni>
c0003cc9:	89 c3                	mov    ebx,eax
c0003ccb:	83 f8 ff             	cmp    eax,0xffffffff
c0003cce:	75 0a                	jne    c0003cda <create_name+0x36>
c0003cd0:	b8 06 00 00 00       	mov    eax,0x6
c0003cd5:	e9 9e 02 00 00       	jmp    c0003f78 <create_name+0x2d4>
c0003cda:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cdf:	76 0c                	jbe    c0003ced <create_name+0x49>
c0003ce1:	c1 e8 10             	shr    eax,0x10
c0003ce4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ce8:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cec:	46                   	inc    esi
c0003ced:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf1:	76 4f                	jbe    c0003d42 <create_name+0x9e>
c0003cf3:	66 83 fb 5c          	cmp    bx,0x5c
c0003cf7:	74 35                	je     c0003d2e <create_name+0x8a>
c0003cf9:	66 83 fb 2f          	cmp    bx,0x2f
c0003cfd:	74 2f                	je     c0003d2e <create_name+0x8a>
c0003cff:	66 83 fb 7f          	cmp    bx,0x7f
c0003d03:	77 11                	ja     c0003d16 <create_name+0x72>
c0003d05:	0f b7 d3             	movzx  edx,bx
c0003d08:	b8 b2 94 02 c0       	mov    eax,0xc00294b2
c0003d0d:	e8 11 e0 ff ff       	call   c0001d23 <chk_chr>
c0003d12:	85 c0                	test   eax,eax
c0003d14:	75 ba                	jne    c0003cd0 <create_name+0x2c>
c0003d16:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d1c:	77 b2                	ja     c0003cd0 <create_name+0x2c>
c0003d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d22:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d26:	46                   	inc    esi
c0003d27:	eb 97                	jmp    c0003cc0 <create_name+0x1c>
c0003d29:	40                   	inc    eax
c0003d2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d32:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d34:	80 fa 2f             	cmp    dl,0x2f
c0003d37:	74 f0                	je     c0003d29 <create_name+0x85>
c0003d39:	80 fa 5c             	cmp    dl,0x5c
c0003d3c:	74 eb                	je     c0003d29 <create_name+0x85>
c0003d3e:	31 db                	xor    ebx,ebx
c0003d40:	eb 02                	jmp    c0003d44 <create_name+0xa0>
c0003d42:	b3 04                	mov    bl,0x4
c0003d44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d48:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d4b:	85 f6                	test   esi,esi
c0003d4d:	74 18                	je     c0003d67 <create_name+0xc3>
c0003d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d53:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d58:	66 83 f8 20          	cmp    ax,0x20
c0003d5c:	74 06                	je     c0003d64 <create_name+0xc0>
c0003d5e:	66 83 f8 2e          	cmp    ax,0x2e
c0003d62:	75 03                	jne    c0003d67 <create_name+0xc3>
c0003d64:	4e                   	dec    esi
c0003d65:	eb e4                	jmp    c0003d4b <create_name+0xa7>
c0003d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6b:	31 ed                	xor    ebp,ebp
c0003d6d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d73:	85 f6                	test   esi,esi
c0003d75:	0f 84 55 ff ff ff    	je     c0003cd0 <create_name+0x2c>
c0003d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d7f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d82:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d86:	66 83 f8 20          	cmp    ax,0x20
c0003d8a:	75 04                	jne    c0003d90 <create_name+0xec>
c0003d8c:	89 d5                	mov    ebp,edx
c0003d8e:	eb eb                	jmp    c0003d7b <create_name+0xd7>
c0003d90:	85 ed                	test   ebp,ebp
c0003d92:	75 06                	jne    c0003d9a <create_name+0xf6>
c0003d94:	66 83 f8 2e          	cmp    ax,0x2e
c0003d98:	75 08                	jne    c0003da2 <create_name+0xfe>
c0003d9a:	83 cb 03             	or     ebx,0x3
c0003d9d:	eb 03                	jmp    c0003da2 <create_name+0xfe>
c0003d9f:	4e                   	dec    esi
c0003da0:	74 0c                	je     c0003dae <create_name+0x10a>
c0003da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da6:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003dac:	75 f1                	jne    c0003d9f <create_name+0xfb>
c0003dae:	b9 0b 00 00 00       	mov    ecx,0xb
c0003db3:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003db6:	ba 20 00 00 00       	mov    edx,0x20
c0003dbb:	e8 35 df ff ff       	call   c0001cf5 <mem_set>
c0003dc0:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dc8:	31 c9                	xor    ecx,ecx
c0003dca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dcf:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dda:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dde:	66 85 ed             	test   bp,bp
c0003de1:	0f 84 30 01 00 00    	je     c0003f17 <create_name+0x273>
c0003de7:	66 83 fd 20          	cmp    bp,0x20
c0003deb:	74 10                	je     c0003dfd <create_name+0x159>
c0003ded:	66 83 fd 2e          	cmp    bp,0x2e
c0003df1:	75 13                	jne    c0003e06 <create_name+0x162>
c0003df3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df7:	0f 84 6b 01 00 00    	je     c0003f68 <create_name+0x2c4>
c0003dfd:	83 cb 03             	or     ebx,0x3
c0003e00:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e04:	eb c9                	jmp    c0003dcf <create_name+0x12b>
c0003e06:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e0a:	73 0b                	jae    c0003e17 <create_name+0x173>
c0003e0c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e10:	75 47                	jne    c0003e59 <create_name+0x1b5>
c0003e12:	e9 51 01 00 00       	jmp    c0003f68 <create_name+0x2c4>
c0003e17:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e1c:	75 10                	jne    c0003e2e <create_name+0x18a>
c0003e1e:	83 cb 03             	or     ebx,0x3
c0003e21:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e29:	e9 e9 00 00 00       	jmp    c0003f17 <create_name+0x273>
c0003e2e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e32:	74 0d                	je     c0003e41 <create_name+0x19d>
c0003e34:	83 cb 03             	or     ebx,0x3
c0003e37:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3b:	0f 87 d6 00 00 00    	ja     c0003f17 <create_name+0x273>
c0003e41:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e46:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e4a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e52:	b9 08 00 00 00       	mov    ecx,0x8
c0003e57:	eb a7                	jmp    c0003e00 <create_name+0x15c>
c0003e59:	66 83 fd 7f          	cmp    bp,0x7f
c0003e5d:	76 68                	jbe    c0003ec7 <create_name+0x223>
c0003e5f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e63:	88 da                	mov    dl,bl
c0003e65:	83 ca 02             	or     edx,0x2
c0003e68:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e6c:	50                   	push   eax
c0003e6d:	50                   	push   eax
c0003e6e:	68 b5 01 00 00       	push   0x1b5
c0003e73:	55                   	push   ebp
c0003e74:	e8 48 46 00 00       	call   c00084c1 <ff_uni2oem>
c0003e79:	83 c4 10             	add    esp,0x10
c0003e7c:	89 c5                	mov    ebp,eax
c0003e7e:	a8 80                	test   al,0x80
c0003e80:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e88:	74 0c                	je     c0003e96 <create_name+0x1f2>
c0003e8a:	83 e5 7f             	and    ebp,0x7f
c0003e8d:	0f b6 ad 00 94 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6c00]
c0003e94:	eb 2a                	jmp    c0003ec0 <create_name+0x21c>
c0003e96:	66 3d ff 00          	cmp    ax,0xff
c0003e9a:	76 24                	jbe    c0003ec0 <create_name+0x21c>
c0003e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea0:	48                   	dec    eax
c0003ea1:	39 c8                	cmp    eax,ecx
c0003ea3:	77 0c                	ja     c0003eb1 <create_name+0x20d>
c0003ea5:	83 cb 03             	or     ebx,0x3
c0003ea8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eac:	e9 4f ff ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003eb1:	89 e8                	mov    eax,ebp
c0003eb3:	88 d3                	mov    bl,dl
c0003eb5:	66 c1 e8 08          	shr    ax,0x8
c0003eb9:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ebd:	41                   	inc    ecx
c0003ebe:	eb 4b                	jmp    c0003f0b <create_name+0x267>
c0003ec0:	88 d3                	mov    bl,dl
c0003ec2:	66 85 ed             	test   bp,bp
c0003ec5:	74 19                	je     c0003ee0 <create_name+0x23c>
c0003ec7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ecb:	0f b7 d5             	movzx  edx,bp
c0003ece:	b8 bb 94 02 c0       	mov    eax,0xc00294bb
c0003ed3:	e8 4b de ff ff       	call   c0001d23 <chk_chr>
c0003ed8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003edc:	85 c0                	test   eax,eax
c0003ede:	74 0a                	je     c0003eea <create_name+0x246>
c0003ee0:	83 cb 03             	or     ebx,0x3
c0003ee3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ee8:	eb 21                	jmp    c0003f0b <create_name+0x267>
c0003eea:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eed:	66 83 f8 19          	cmp    ax,0x19
c0003ef1:	77 07                	ja     c0003efa <create_name+0x256>
c0003ef3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ef8:	eb 11                	jmp    c0003f0b <create_name+0x267>
c0003efa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003efd:	66 83 f8 19          	cmp    ax,0x19
c0003f01:	77 08                	ja     c0003f0b <create_name+0x267>
c0003f03:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f08:	83 ed 20             	sub    ebp,0x20
c0003f0b:	89 e8                	mov    eax,ebp
c0003f0d:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f11:	41                   	inc    ecx
c0003f12:	e9 e9 fe ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003f17:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f1b:	75 04                	jne    c0003f21 <create_name+0x27d>
c0003f1d:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f21:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f26:	75 05                	jne    c0003f2d <create_name+0x289>
c0003f28:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f31:	83 e0 0c             	and    eax,0xc
c0003f34:	3c 0c                	cmp    al,0xc
c0003f36:	74 0b                	je     c0003f43 <create_name+0x29f>
c0003f38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f3c:	83 e0 03             	and    eax,0x3
c0003f3f:	3c 03                	cmp    al,0x3
c0003f41:	75 05                	jne    c0003f48 <create_name+0x2a4>
c0003f43:	83 cb 02             	or     ebx,0x2
c0003f46:	eb 19                	jmp    c0003f61 <create_name+0x2bd>
c0003f48:	f6 c3 02             	test   bl,0x2
c0003f4b:	75 14                	jne    c0003f61 <create_name+0x2bd>
c0003f4d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f52:	74 03                	je     c0003f57 <create_name+0x2b3>
c0003f54:	83 cb 10             	or     ebx,0x10
c0003f57:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f5c:	74 03                	je     c0003f61 <create_name+0x2bd>
c0003f5e:	83 cb 08             	or     ebx,0x8
c0003f61:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f64:	31 c0                	xor    eax,eax
c0003f66:	eb 10                	jmp    c0003f78 <create_name+0x2d4>
c0003f68:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f6d:	0f 85 ce fe ff ff    	jne    c0003e41 <create_name+0x19d>
c0003f73:	e9 a6 fe ff ff       	jmp    c0003e1e <create_name+0x17a>
c0003f78:	83 c4 3c             	add    esp,0x3c
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	5f                   	pop    edi
c0003f7e:	5d                   	pop    ebp
c0003f7f:	c3                   	ret    

c0003f80 <xname_sum>:
c0003f80:	56                   	push   esi
c0003f81:	53                   	push   ebx
c0003f82:	89 c6                	mov    esi,eax
c0003f84:	51                   	push   ecx
c0003f85:	31 db                	xor    ebx,ebx
c0003f87:	83 c6 02             	add    esi,0x2
c0003f8a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f8e:	66 85 c0             	test   ax,ax
c0003f91:	74 1f                	je     c0003fb2 <xname_sum+0x32>
c0003f93:	83 ec 0c             	sub    esp,0xc
c0003f96:	66 d1 cb             	ror    bx,1
c0003f99:	50                   	push   eax
c0003f9a:	e8 1e 46 00 00       	call   c00085bd <ff_wtoupper>
c0003f9f:	83 c4 10             	add    esp,0x10
c0003fa2:	0f b6 d0             	movzx  edx,al
c0003fa5:	66 c1 e8 08          	shr    ax,0x8
c0003fa9:	01 d3                	add    ebx,edx
c0003fab:	66 d1 cb             	ror    bx,1
c0003fae:	01 c3                	add    ebx,eax
c0003fb0:	eb d5                	jmp    c0003f87 <xname_sum+0x7>
c0003fb2:	89 d8                	mov    eax,ebx
c0003fb4:	5a                   	pop    edx
c0003fb5:	5b                   	pop    ebx
c0003fb6:	5e                   	pop    esi
c0003fb7:	c3                   	ret    

c0003fb8 <create_xdir>:
c0003fb8:	55                   	push   ebp
c0003fb9:	b9 40 00 00 00       	mov    ecx,0x40
c0003fbe:	57                   	push   edi
c0003fbf:	bd 01 00 00 00       	mov    ebp,0x1
c0003fc4:	56                   	push   esi
c0003fc5:	31 ff                	xor    edi,edi
c0003fc7:	53                   	push   ebx
c0003fc8:	be 40 00 00 00       	mov    esi,0x40
c0003fcd:	89 c3                	mov    ebx,eax
c0003fcf:	83 ec 1c             	sub    esp,0x1c
c0003fd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fd6:	31 d2                	xor    edx,edx
c0003fd8:	e8 18 dd ff ff       	call   c0001cf5 <mem_set>
c0003fdd:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe0:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fe4:	31 c9                	xor    ecx,ecx
c0003fe6:	8d 46 01             	lea    eax,[esi+0x1]
c0003fe9:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fed:	83 c6 02             	add    esi,0x2
c0003ff0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ff4:	66 85 ed             	test   bp,bp
c0003ff7:	74 12                	je     c000400b <create_xdir+0x53>
c0003ff9:	0f b6 c1             	movzx  eax,cl
c0003ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004000:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0004004:	66 83 fd 01          	cmp    bp,0x1
c0004008:	80 d9 ff             	sbb    cl,0xff
c000400b:	8d 04 33             	lea    eax,[ebx+esi*1]
c000400e:	0f b7 d5             	movzx  edx,bp
c0004011:	83 c6 02             	add    esi,0x2
c0004014:	e8 ba dc ff ff       	call   c0001cd3 <st_word>
c0004019:	f7 c6 1f 00 00 00    	test   esi,0x1f
c000401f:	75 d3                	jne    c0003ff4 <create_xdir+0x3c>
c0004021:	8d 47 01             	lea    eax,[edi+0x1]
c0004024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004028:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000402c:	0f b6 c1             	movzx  eax,cl
c000402f:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004034:	74 07                	je     c000403d <create_xdir+0x85>
c0004036:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000403b:	eb a9                	jmp    c0003fe6 <create_xdir+0x2e>
c000403d:	8d 47 02             	lea    eax,[edi+0x2]
c0004040:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004043:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004046:	89 d0                	mov    eax,edx
c0004048:	e8 33 ff ff ff       	call   c0003f80 <xname_sum>
c000404d:	83 c4 1c             	add    esp,0x1c
c0004050:	0f b7 d0             	movzx  edx,ax
c0004053:	8d 43 24             	lea    eax,[ebx+0x24]
c0004056:	5b                   	pop    ebx
c0004057:	5e                   	pop    esi
c0004058:	5f                   	pop    edi
c0004059:	5d                   	pop    ebp
c000405a:	e9 74 dc ff ff       	jmp    c0001cd3 <st_word>

c000405f <cmp_lfn>:
c000405f:	55                   	push   ebp
c0004060:	57                   	push   edi
c0004061:	89 d7                	mov    edi,edx
c0004063:	56                   	push   esi
c0004064:	53                   	push   ebx
c0004065:	83 ec 1c             	sub    esp,0x1c
c0004068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000406c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000406f:	e8 ed db ff ff       	call   c0001c61 <ld_word>
c0004074:	66 85 c0             	test   ax,ax
c0004077:	74 07                	je     c0004080 <cmp_lfn+0x21>
c0004079:	31 c0                	xor    eax,eax
c000407b:	e9 9a 00 00 00       	jmp    c000411a <cmp_lfn+0xbb>
c0004080:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004082:	bd 01 00 00 00       	mov    ebp,0x1
c0004087:	83 e3 3f             	and    ebx,0x3f
c000408a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004092:	4b                   	dec    ebx
c0004093:	6b db 0d             	imul   ebx,ebx,0xd
c0004096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000409a:	0f b6 80 80 94 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6b80]
c00040a1:	01 f8                	add    eax,edi
c00040a3:	e8 b9 db ff ff       	call   c0001c61 <ld_word>
c00040a8:	66 85 ed             	test   bp,bp
c00040ab:	89 c6                	mov    esi,eax
c00040ad:	74 3c                	je     c00040eb <cmp_lfn+0x8c>
c00040af:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040b5:	77 c2                	ja     c0004079 <cmp_lfn+0x1a>
c00040b7:	83 ec 0c             	sub    esp,0xc
c00040ba:	0f b7 c0             	movzx  eax,ax
c00040bd:	50                   	push   eax
c00040be:	e8 fa 44 00 00       	call   c00085bd <ff_wtoupper>
c00040c3:	89 c5                	mov    ebp,eax
c00040c5:	8d 43 01             	lea    eax,[ebx+0x1]
c00040c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d0:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040d7:	e8 e1 44 00 00       	call   c00085bd <ff_wtoupper>
c00040dc:	83 c4 10             	add    esp,0x10
c00040df:	39 c5                	cmp    ebp,eax
c00040e1:	75 96                	jne    c0004079 <cmp_lfn+0x1a>
c00040e3:	89 f5                	mov    ebp,esi
c00040e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040e9:	eb 04                	jmp    c00040ef <cmp_lfn+0x90>
c00040eb:	66 46                	inc    si
c00040ed:	75 8a                	jne    c0004079 <cmp_lfn+0x1a>
c00040ef:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040f3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040f8:	75 9c                	jne    c0004096 <cmp_lfn+0x37>
c00040fa:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040fd:	74 16                	je     c0004115 <cmp_lfn+0xb6>
c00040ff:	66 85 ed             	test   bp,bp
c0004102:	74 11                	je     c0004115 <cmp_lfn+0xb6>
c0004104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004108:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000410d:	0f 94 c0             	sete   al
c0004110:	0f b6 c0             	movzx  eax,al
c0004113:	eb 05                	jmp    c000411a <cmp_lfn+0xbb>
c0004115:	b8 01 00 00 00       	mov    eax,0x1
c000411a:	83 c4 1c             	add    esp,0x1c
c000411d:	5b                   	pop    ebx
c000411e:	5e                   	pop    esi
c000411f:	5f                   	pop    edi
c0004120:	5d                   	pop    ebp
c0004121:	c3                   	ret    

c0004122 <dir_find>:
c0004122:	55                   	push   ebp
c0004123:	31 d2                	xor    edx,edx
c0004125:	57                   	push   edi
c0004126:	56                   	push   esi
c0004127:	53                   	push   ebx
c0004128:	89 c3                	mov    ebx,eax
c000412a:	83 ec 1c             	sub    esp,0x1c
c000412d:	8b 30                	mov    esi,DWORD PTR [eax]
c000412f:	e8 89 f0 ff ff       	call   c00031bd <dir_sdi>
c0004134:	89 04 24             	mov    DWORD PTR [esp],eax
c0004137:	85 c0                	test   eax,eax
c0004139:	0f 85 9e 01 00 00    	jne    c00042dd <dir_find+0x1bb>
c000413f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004142:	0f 85 8d 00 00 00    	jne    c00041d5 <dir_find+0xb3>
c0004148:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000414b:	e8 30 fe ff ff       	call   c0003f80 <xname_sum>
c0004150:	89 c7                	mov    edi,eax
c0004152:	31 d2                	xor    edx,edx
c0004154:	89 d8                	mov    eax,ebx
c0004156:	e8 72 f8 ff ff       	call   c00039cd <dir_read>
c000415b:	85 c0                	test   eax,eax
c000415d:	0f 85 5e 01 00 00    	jne    c00042c1 <dir_find+0x19f>
c0004163:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004166:	8d 41 24             	lea    eax,[ecx+0x24]
c0004169:	e8 f3 da ff ff       	call   c0001c61 <ld_word>
c000416e:	66 39 f8             	cmp    ax,di
c0004171:	75 df                	jne    c0004152 <dir_find+0x30>
c0004173:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004176:	31 ed                	xor    ebp,ebp
c0004178:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000417c:	ba 40 00 00 00       	mov    edx,0x40
c0004181:	89 e9                	mov    ecx,ebp
c0004183:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004187:	0f 84 42 01 00 00    	je     c00042cf <dir_find+0x1ad>
c000418d:	f6 c2 1f             	test   dl,0x1f
c0004190:	75 03                	jne    c0004195 <dir_find+0x73>
c0004192:	83 c2 02             	add    edx,0x2
c0004195:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004199:	89 d0                	mov    eax,edx
c000419b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c000419e:	e8 be da ff ff       	call   c0001c61 <ld_word>
c00041a3:	83 ec 0c             	sub    esp,0xc
c00041a6:	0f b7 c0             	movzx  eax,ax
c00041a9:	50                   	push   eax
c00041aa:	e8 0e 44 00 00       	call   c00085bd <ff_wtoupper>
c00041af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041b3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041b6:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00041bd:	e8 fb 43 00 00       	call   c00085bd <ff_wtoupper>
c00041c2:	83 c4 10             	add    esp,0x10
c00041c5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041c9:	75 87                	jne    c0004152 <dir_find+0x30>
c00041cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041cf:	45                   	inc    ebp
c00041d0:	83 c2 02             	add    edx,0x2
c00041d3:	eb ac                	jmp    c0004181 <dir_find+0x5f>
c00041d5:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041dc:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041e6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041e9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041ec:	89 f0                	mov    eax,esi
c00041ee:	e8 4c e2 ff ff       	call   c000243f <move_window>
c00041f3:	85 c0                	test   eax,eax
c00041f5:	0f 85 c6 00 00 00    	jne    c00042c1 <dir_find+0x19f>
c00041fb:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041fe:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004201:	84 c9                	test   cl,cl
c0004203:	0f 84 bd 00 00 00    	je     c00042c6 <dir_find+0x1a4>
c0004209:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000420c:	88 d0                	mov    al,dl
c000420e:	83 e0 3f             	and    eax,0x3f
c0004211:	80 f9 e5             	cmp    cl,0xe5
c0004214:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004217:	0f 84 87 00 00 00    	je     c00042a4 <dir_find+0x182>
c000421d:	80 e2 08             	and    dl,0x8
c0004220:	74 06                	je     c0004228 <dir_find+0x106>
c0004222:	3c 0f                	cmp    al,0xf
c0004224:	75 7e                	jne    c00042a4 <dir_find+0x182>
c0004226:	eb 04                	jmp    c000422c <dir_find+0x10a>
c0004228:	3c 0f                	cmp    al,0xf
c000422a:	75 4c                	jne    c0004278 <dir_find+0x156>
c000422c:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004230:	75 7e                	jne    c00042b0 <dir_find+0x18e>
c0004232:	f6 c1 40             	test   cl,0x40
c0004235:	74 12                	je     c0004249 <dir_find+0x127>
c0004237:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000423a:	83 e1 bf             	and    ecx,0xffffffbf
c000423d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004241:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004244:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004247:	eb 06                	jmp    c000424f <dir_find+0x12d>
c0004249:	89 f8                	mov    eax,edi
c000424b:	38 c8                	cmp    al,cl
c000424d:	75 5c                	jne    c00042ab <dir_find+0x189>
c000424f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004253:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004258:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000425b:	75 53                	jne    c00042b0 <dir_find+0x18e>
c000425d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004261:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004264:	89 ea                	mov    edx,ebp
c0004266:	e8 f4 fd ff ff       	call   c000405f <cmp_lfn>
c000426b:	85 c0                	test   eax,eax
c000426d:	74 41                	je     c00042b0 <dir_find+0x18e>
c000426f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004273:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004276:	eb 38                	jmp    c00042b0 <dir_find+0x18e>
c0004278:	89 f8                	mov    eax,edi
c000427a:	84 c0                	test   al,al
c000427c:	75 0d                	jne    c000428b <dir_find+0x169>
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 98 de ff ff       	call   c000211d <sum_sfn>
c0004285:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004289:	74 52                	je     c00042dd <dir_find+0x1bb>
c000428b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000428f:	75 13                	jne    c00042a4 <dir_find+0x182>
c0004291:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004294:	b9 0b 00 00 00       	mov    ecx,0xb
c0004299:	89 e8                	mov    eax,ebp
c000429b:	e8 60 da ff ff       	call   c0001d00 <mem_cmp>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	74 39                	je     c00042dd <dir_find+0x1bb>
c00042a4:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042ab:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b0:	31 d2                	xor    edx,edx
c00042b2:	89 d8                	mov    eax,ebx
c00042b4:	e8 5c f4 ff ff       	call   c0003715 <dir_next>
c00042b9:	85 c0                	test   eax,eax
c00042bb:	0f 84 25 ff ff ff    	je     c00041e6 <dir_find+0xc4>
c00042c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00042c4:	eb 17                	jmp    c00042dd <dir_find+0x1bb>
c00042c6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042cd:	eb 0e                	jmp    c00042dd <dir_find+0x1bb>
c00042cf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042d2:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042d7:	0f 85 75 fe ff ff    	jne    c0004152 <dir_find+0x30>
c00042dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e0:	83 c4 1c             	add    esp,0x1c
c00042e3:	5b                   	pop    ebx
c00042e4:	5e                   	pop    esi
c00042e5:	5f                   	pop    edi
c00042e6:	5d                   	pop    ebp
c00042e7:	c3                   	ret    

c00042e8 <dir_register>:
c00042e8:	55                   	push   ebp
c00042e9:	57                   	push   edi
c00042ea:	56                   	push   esi
c00042eb:	be 06 00 00 00       	mov    esi,0x6
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 6c             	sub    esp,0x6c
c00042f4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042f8:	0f 85 62 02 00 00    	jne    c0004560 <dir_register+0x278>
c00042fe:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004300:	31 ff                	xor    edi,edi
c0004302:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004305:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000430a:	74 03                	je     c000430f <dir_register+0x27>
c000430c:	47                   	inc    edi
c000430d:	eb f6                	jmp    c0004305 <dir_register+0x1d>
c000430f:	89 c3                	mov    ebx,eax
c0004311:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004315:	0f 85 e1 00 00 00    	jne    c00043fc <dir_register+0x114>
c000431b:	83 c7 0e             	add    edi,0xe
c000431e:	b9 0f 00 00 00       	mov    ecx,0xf
c0004323:	89 f8                	mov    eax,edi
c0004325:	31 d2                	xor    edx,edx
c0004327:	f7 f1                	div    ecx
c0004329:	8d 50 02             	lea    edx,[eax+0x2]
c000432c:	89 c7                	mov    edi,eax
c000432e:	89 d8                	mov    eax,ebx
c0004330:	e8 12 f8 ff ff       	call   c0003b47 <dir_alloc>
c0004335:	89 c6                	mov    esi,eax
c0004337:	85 c0                	test   eax,eax
c0004339:	0f 85 21 02 00 00    	jne    c0004560 <dir_register+0x278>
c000433f:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004345:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004348:	c1 e7 05             	shl    edi,0x5
c000434b:	29 f8                	sub    eax,edi
c000434d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004350:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004353:	a8 04                	test   al,0x4
c0004355:	0f 84 91 00 00 00    	je     c00043ec <dir_register+0x104>
c000435b:	83 e0 fb             	and    eax,0xfffffffb
c000435e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004361:	89 d8                	mov    eax,ebx
c0004363:	e8 25 ec ff ff       	call   c0002f8d <fill_first_frag>
c0004368:	85 c0                	test   eax,eax
c000436a:	0f 85 ee 01 00 00    	jne    c000455e <dir_register+0x276>
c0004370:	83 c9 ff             	or     ecx,0xffffffff
c0004373:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004376:	89 d8                	mov    eax,ebx
c0004378:	e8 db eb ff ff       	call   c0002f58 <fill_last_frag>
c000437d:	85 c0                	test   eax,eax
c000437f:	0f 85 d9 01 00 00    	jne    c000455e <dir_register+0x276>
c0004385:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004389:	74 61                	je     c00043ec <dir_register+0x104>
c000438b:	89 da                	mov    edx,ebx
c000438d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004391:	e8 ea f5 ff ff       	call   c0003980 <load_obj_xdir>
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 c0 01 00 00    	jne    c000455e <dir_register+0x276>
c000439e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043a2:	31 c9                	xor    ecx,ecx
c00043a4:	c1 e2 09             	shl    edx,0x9
c00043a7:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043aa:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043ad:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b6:	83 c0 38             	add    eax,0x38
c00043b9:	e8 1c d9 ff ff       	call   c0001cda <st_qword>
c00043be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043c4:	83 c0 28             	add    eax,0x28
c00043c7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ca:	e8 0b d9 ff ff       	call   c0001cda <st_qword>
c00043cf:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043d2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043d5:	83 c8 01             	or     eax,0x1
c00043d8:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043df:	e8 db f7 ff ff       	call   c0003bbf <store_xdir>
c00043e4:	85 c0                	test   eax,eax
c00043e6:	0f 85 72 01 00 00    	jne    c000455e <dir_register+0x276>
c00043ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043f2:	e8 c1 fb ff ff       	call   c0003fb8 <create_xdir>
c00043f7:	e9 64 01 00 00       	jmp    c0004560 <dir_register+0x278>
c00043fc:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043ff:	b9 0c 00 00 00       	mov    ecx,0xc
c0004404:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004408:	89 c2                	mov    edx,eax
c000440a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000440e:	e8 cd d8 ff ff       	call   c0001ce0 <mem_cpy>
c0004413:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004418:	74 58                	je     c0004472 <dir_register+0x18a>
c000441a:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000441e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004426:	83 ec 0c             	sub    esp,0xc
c0004429:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000442c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004430:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004438:	e8 24 dc ff ff       	call   c0002061 <gen_numname>
c000443d:	89 d8                	mov    eax,ebx
c000443f:	e8 de fc ff ff       	call   c0004122 <dir_find>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	89 c6                	mov    esi,eax
c0004449:	85 c0                	test   eax,eax
c000444b:	75 15                	jne    c0004462 <dir_register+0x17a>
c000444d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004451:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004456:	75 ce                	jne    c0004426 <dir_register+0x13e>
c0004458:	be 07 00 00 00       	mov    esi,0x7
c000445d:	e9 fe 00 00 00       	jmp    c0004560 <dir_register+0x278>
c0004462:	83 f8 04             	cmp    eax,0x4
c0004465:	0f 85 f5 00 00 00    	jne    c0004560 <dir_register+0x278>
c000446b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000446f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004472:	b9 01 00 00 00       	mov    ecx,0x1
c0004477:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000447c:	74 0f                	je     c000448d <dir_register+0x1a5>
c000447e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004483:	8d 47 0c             	lea    eax,[edi+0xc]
c0004486:	31 d2                	xor    edx,edx
c0004488:	f7 f1                	div    ecx
c000448a:	8d 48 01             	lea    ecx,[eax+0x1]
c000448d:	89 ca                	mov    edx,ecx
c000448f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004493:	89 d8                	mov    eax,ebx
c0004495:	e8 ad f6 ff ff       	call   c0003b47 <dir_alloc>
c000449a:	89 c6                	mov    esi,eax
c000449c:	85 c0                	test   eax,eax
c000449e:	0f 85 bc 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044a8:	49                   	dec    ecx
c00044a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044ad:	74 6a                	je     c0004519 <dir_register+0x231>
c00044af:	89 c8                	mov    eax,ecx
c00044b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044b4:	c1 e0 05             	shl    eax,0x5
c00044b7:	29 c2                	sub    edx,eax
c00044b9:	89 d8                	mov    eax,ebx
c00044bb:	e8 fd ec ff ff       	call   c00031bd <dir_sdi>
c00044c0:	89 c6                	mov    esi,eax
c00044c2:	85 c0                	test   eax,eax
c00044c4:	0f 85 96 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044ce:	e8 4a dc ff ff       	call   c000211d <sum_sfn>
c00044d3:	0f b6 f8             	movzx  edi,al
c00044d6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044d9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044dc:	89 e8                	mov    eax,ebp
c00044de:	e8 5c df ff ff       	call   c000243f <move_window>
c00044e3:	89 c6                	mov    esi,eax
c00044e5:	85 c0                	test   eax,eax
c00044e7:	75 77                	jne    c0004560 <dir_register+0x278>
c00044e9:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044f7:	57                   	push   edi
c00044f8:	e8 e0 da ff ff       	call   c0001fdd <put_lfn>
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004503:	89 d8                	mov    eax,ebx
c0004505:	e8 0b f2 ff ff       	call   c0003715 <dir_next>
c000450a:	83 c4 10             	add    esp,0x10
c000450d:	89 c6                	mov    esi,eax
c000450f:	85 c0                	test   eax,eax
c0004511:	75 4d                	jne    c0004560 <dir_register+0x278>
c0004513:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004517:	75 bd                	jne    c00044d6 <dir_register+0x1ee>
c0004519:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000451c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000451f:	89 e8                	mov    eax,ebp
c0004521:	e8 19 df ff ff       	call   c000243f <move_window>
c0004526:	89 c6                	mov    esi,eax
c0004528:	85 c0                	test   eax,eax
c000452a:	75 34                	jne    c0004560 <dir_register+0x278>
c000452c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000452f:	b9 20 00 00 00       	mov    ecx,0x20
c0004534:	31 d2                	xor    edx,edx
c0004536:	e8 ba d7 ff ff       	call   c0001cf5 <mem_set>
c000453b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000453e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004542:	b9 0b 00 00 00       	mov    ecx,0xb
c0004547:	e8 94 d7 ff ff       	call   c0001ce0 <mem_cpy>
c000454c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000454f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004552:	83 e0 18             	and    eax,0x18
c0004555:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004558:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000455c:	eb 02                	jmp    c0004560 <dir_register+0x278>
c000455e:	89 c6                	mov    esi,eax
c0004560:	83 c4 6c             	add    esp,0x6c
c0004563:	89 f0                	mov    eax,esi
c0004565:	5b                   	pop    ebx
c0004566:	5e                   	pop    esi
c0004567:	5f                   	pop    edi
c0004568:	5d                   	pop    ebp
c0004569:	c3                   	ret    

c000456a <sync_fs>:
c000456a:	56                   	push   esi
c000456b:	53                   	push   ebx
c000456c:	53                   	push   ebx
c000456d:	89 c3                	mov    ebx,eax
c000456f:	e8 37 de ff ff       	call   c00023ab <sync_window>
c0004574:	85 c0                	test   eax,eax
c0004576:	0f 85 b1 00 00 00    	jne    c000462d <sync_fs+0xc3>
c000457c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000457f:	0f 85 8e 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c0004585:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004589:	0f 85 84 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c000458f:	b9 00 02 00 00       	mov    ecx,0x200
c0004594:	8d 73 54             	lea    esi,[ebx+0x54]
c0004597:	31 d2                	xor    edx,edx
c0004599:	89 f0                	mov    eax,esi
c000459b:	e8 55 d7 ff ff       	call   c0001cf5 <mem_set>
c00045a0:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045ab:	e8 23 d7 ff ff       	call   c0001cd3 <st_word>
c00045b0:	ba 52 52 61 41       	mov    edx,0x41615252
c00045b5:	89 f0                	mov    eax,esi
c00045b7:	e8 1b d7 ff ff       	call   c0001cd7 <st_dword>
c00045bc:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045c2:	ba 72 72 41 61       	mov    edx,0x61417272
c00045c7:	e8 0b d7 ff ff       	call   c0001cd7 <st_dword>
c00045cc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045cf:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045d5:	e8 fd d6 ff ff       	call   c0001cd7 <st_dword>
c00045da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045dd:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045e3:	e8 ef d6 ff ff       	call   c0001cd7 <st_dword>
c00045e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045eb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045ee:	83 c0 01             	add    eax,0x1
c00045f1:	83 d2 00             	adc    edx,0x0
c00045f4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045f7:	83 ec 0c             	sub    esp,0xc
c00045fa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045fd:	6a 01                	push   0x1
c00045ff:	52                   	push   edx
c0004600:	50                   	push   eax
c0004601:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004605:	56                   	push   esi
c0004606:	50                   	push   eax
c0004607:	e8 20 d6 ff ff       	call   c0001c2c <disk_write>
c000460c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004610:	83 c4 20             	add    esp,0x20
c0004613:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004617:	51                   	push   ecx
c0004618:	6a 00                	push   0x0
c000461a:	6a 00                	push   0x0
c000461c:	50                   	push   eax
c000461d:	e8 20 d6 ff ff       	call   c0001c42 <disk_ioctl>
c0004622:	83 c4 10             	add    esp,0x10
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 95 c0             	setne  al
c000462a:	0f b6 c0             	movzx  eax,al
c000462d:	5a                   	pop    edx
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <create_partition>:
c0004631:	55                   	push   ebp
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	57                   	push   edi
c0004636:	56                   	push   esi
c0004637:	53                   	push   ebx
c0004638:	83 ec 60             	sub    esp,0x60
c000463b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000463f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004643:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004647:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000464b:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000464f:	50                   	push   eax
c0004650:	6a 01                	push   0x1
c0004652:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004656:	e8 e7 d5 ff ff       	call   c0001c42 <disk_ioctl>
c000465b:	83 c4 10             	add    esp,0x10
c000465e:	85 c0                	test   eax,eax
c0004660:	74 0a                	je     c000466c <create_partition+0x3b>
c0004662:	b8 01 00 00 00       	mov    eax,0x1
c0004667:	e9 67 05 00 00       	jmp    c0004bd3 <create_partition+0x5a2>
c000466c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004670:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004674:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004678:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000467c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004681:	0f 86 ed 03 00 00    	jbe    c0004a74 <create_partition+0x443>
c0004687:	83 c0 df             	add    eax,0xffffffdf
c000468a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004692:	83 d2 ff             	adc    edx,0xffffffff
c0004695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000469d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046a5:	83 c0 bd             	add    eax,0xffffffbd
c00046a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046af:	83 d2 ff             	adc    edx,0xffffffff
c00046b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046ba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c2:	be 22 00 00 00       	mov    esi,0x22
c00046c7:	31 ff                	xor    edi,edi
c00046c9:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d1:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046d9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046e5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046eb:	75 0e                	jne    c00046fb <create_partition+0xca>
c00046ed:	b9 00 02 00 00       	mov    ecx,0x200
c00046f2:	31 d2                	xor    edx,edx
c00046f4:	89 d8                	mov    eax,ebx
c00046f6:	e8 fa d5 ff ff       	call   c0001cf5 <mem_set>
c00046fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046ff:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004707:	0b 04 24             	or     eax,DWORD PTR [esp]
c000470a:	0f 84 23 01 00 00    	je     c0004833 <create_partition+0x202>
c0004710:	89 f0                	mov    eax,esi
c0004712:	89 fa                	mov    edx,edi
c0004714:	05 ff 07 00 00       	add    eax,0x7ff
c0004719:	83 d2 00             	adc    edx,0x0
c000471c:	89 c1                	mov    ecx,eax
c000471e:	89 d7                	mov    edi,edx
c0004720:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004726:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000472a:	89 ce                	mov    esi,ecx
c000472c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004730:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004734:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004738:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000473b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000473f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004742:	b8 64 00 00 00       	mov    eax,0x64
c0004747:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000474a:	b8 00 00 00 00       	mov    eax,0x0
c000474f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004753:	72 41                	jb     c0004796 <create_partition+0x165>
c0004755:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000475d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004761:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004766:	01 c1                	add    ecx,eax
c0004768:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000476c:	f7 24 24             	mul    DWORD PTR [esp]
c000476f:	6a 00                	push   0x0
c0004771:	01 ca                	add    edx,ecx
c0004773:	6a 64                	push   0x64
c0004775:	52                   	push   edx
c0004776:	50                   	push   eax
c0004777:	e8 70 22 02 00       	call   c00269ec <__udivdi3>
c000477c:	83 c4 10             	add    esp,0x10
c000477f:	05 ff 07 00 00       	add    eax,0x7ff
c0004784:	83 d2 00             	adc    edx,0x0
c0004787:	89 c1                	mov    ecx,eax
c0004789:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000478d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004793:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004796:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004799:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000479d:	01 f0                	add    eax,esi
c000479f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a3:	11 fa                	adc    edx,edi
c00047a5:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047a9:	19 d1                	sbb    ecx,edx
c00047ab:	73 2e                	jae    c00047db <create_partition+0x1aa>
c00047ad:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b1:	89 f8                	mov    eax,edi
c00047b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047ba:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047be:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047c6:	73 6b                	jae    c0004833 <create_partition+0x202>
c00047c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d0:	29 f0                	sub    eax,esi
c00047d2:	19 fa                	sbb    edx,edi
c00047d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00047d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047df:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047e2:	74 4f                	je     c0004833 <create_partition+0x202>
c00047e4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047e7:	b9 10 00 00 00       	mov    ecx,0x10
c00047ec:	ba 90 94 02 c0       	mov    edx,0xc0029490
c00047f1:	e8 ea d4 ff ff       	call   c0001ce0 <mem_cpy>
c00047f6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047fa:	b9 10 00 00 00       	mov    ecx,0x10
c00047ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004803:	e8 2c db ff ff       	call   c0002334 <make_rand>
c0004808:	89 f2                	mov    edx,esi
c000480a:	89 f9                	mov    ecx,edi
c000480c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004810:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004814:	e8 c1 d4 ff ff       	call   c0001cda <st_qword>
c0004819:	03 34 24             	add    esi,DWORD PTR [esp]
c000481c:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004820:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004824:	89 f2                	mov    edx,esi
c0004826:	89 f9                	mov    ecx,edi
c0004828:	83 c2 ff             	add    edx,0xffffffff
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 a7 d4 ff ff       	call   c0001cda <st_qword>
c0004833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004837:	83 e8 80             	sub    eax,0xffffff80
c000483a:	89 c5                	mov    ebp,eax
c000483c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004840:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004846:	75 6b                	jne    c00048b3 <create_partition+0x282>
c0004848:	45                   	inc    ebp
c0004849:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000484d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004852:	e8 39 da ff ff       	call   c0002290 <crc32>
c0004857:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000485d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004861:	75 e5                	jne    c0004848 <create_partition+0x217>
c0004863:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004867:	31 d2                	xor    edx,edx
c0004869:	83 ec 0c             	sub    esp,0xc
c000486c:	c1 ed 09             	shr    ebp,0x9
c000486f:	6a 01                	push   0x1
c0004871:	8d 45 02             	lea    eax,[ebp+0x2]
c0004874:	52                   	push   edx
c0004875:	50                   	push   eax
c0004876:	53                   	push   ebx
c0004877:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000487b:	e8 ac d3 ff ff       	call   c0001c2c <disk_write>
c0004880:	83 c4 20             	add    esp,0x20
c0004883:	85 c0                	test   eax,eax
c0004885:	0f 85 d7 fd ff ff    	jne    c0004662 <create_partition+0x31>
c000488b:	83 ec 0c             	sub    esp,0xc
c000488e:	31 d2                	xor    edx,edx
c0004890:	6a 01                	push   0x1
c0004892:	89 e8                	mov    eax,ebp
c0004894:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004898:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000489c:	52                   	push   edx
c000489d:	50                   	push   eax
c000489e:	53                   	push   ebx
c000489f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a3:	e8 84 d3 ff ff       	call   c0001c2c <disk_write>
c00048a8:	83 c4 20             	add    esp,0x20
c00048ab:	85 c0                	test   eax,eax
c00048ad:	0f 85 af fd ff ff    	jne    c0004662 <create_partition+0x31>
c00048b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048bb:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c0:	74 0d                	je     c00048cf <create_partition+0x29e>
c00048c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ca:	e9 12 fe ff ff       	jmp    c00046e1 <create_partition+0xb0>
c00048cf:	31 d2                	xor    edx,edx
c00048d1:	b9 00 02 00 00       	mov    ecx,0x200
c00048d6:	89 d8                	mov    eax,ebx
c00048d8:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048db:	e8 15 d4 ff ff       	call   c0001cf5 <mem_set>
c00048e0:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048e3:	b9 10 00 00 00       	mov    ecx,0x10
c00048e8:	ba 80 93 02 c0       	mov    edx,0xc0029380
c00048ed:	89 d8                	mov    eax,ebx
c00048ef:	e8 ec d3 ff ff       	call   c0001ce0 <mem_cpy>
c00048f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048f8:	8d 43 58             	lea    eax,[ebx+0x58]
c00048fb:	f7 d2                	not    edx
c00048fd:	e8 d5 d3 ff ff       	call   c0001cd7 <st_dword>
c0004902:	8d 43 18             	lea    eax,[ebx+0x18]
c0004905:	31 c9                	xor    ecx,ecx
c0004907:	89 04 24             	mov    DWORD PTR [esp],eax
c000490a:	ba 01 00 00 00       	mov    edx,0x1
c000490f:	e8 c6 d3 ff ff       	call   c0001cda <st_qword>
c0004914:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004918:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000491c:	83 c2 ff             	add    edx,0xffffffff
c000491f:	89 e8                	mov    eax,ebp
c0004921:	83 d1 ff             	adc    ecx,0xffffffff
c0004924:	e8 b1 d3 ff ff       	call   c0001cda <st_qword>
c0004929:	31 c9                	xor    ecx,ecx
c000492b:	8d 43 28             	lea    eax,[ebx+0x28]
c000492e:	ba 22 00 00 00       	mov    edx,0x22
c0004933:	e8 a2 d3 ff ff       	call   c0001cda <st_qword>
c0004938:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000493c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004940:	83 c2 de             	add    edx,0xffffffde
c0004943:	8d 43 30             	lea    eax,[ebx+0x30]
c0004946:	83 d1 ff             	adc    ecx,0xffffffff
c0004949:	31 f6                	xor    esi,esi
c000494b:	e8 8a d3 ff ff       	call   c0001cda <st_qword>
c0004950:	8d 43 54             	lea    eax,[ebx+0x54]
c0004953:	ba 80 00 00 00       	mov    edx,0x80
c0004958:	e8 7a d3 ff ff       	call   c0001cd7 <st_dword>
c000495d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004960:	ba 80 00 00 00       	mov    edx,0x80
c0004965:	e8 6d d3 ff ff       	call   c0001cd7 <st_dword>
c000496a:	ba 02 00 00 00       	mov    edx,0x2
c000496f:	89 f8                	mov    eax,edi
c0004971:	e8 61 d3 ff ff       	call   c0001cd7 <st_dword>
c0004976:	8d 53 38             	lea    edx,[ebx+0x38]
c0004979:	b9 10 00 00 00       	mov    ecx,0x10
c000497e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004982:	e8 ad d9 ff ff       	call   c0002334 <make_rand>
c0004987:	83 c8 ff             	or     eax,0xffffffff
c000498a:	46                   	inc    esi
c000498b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004990:	e8 fb d8 ff ff       	call   c0002290 <crc32>
c0004995:	83 fe 5c             	cmp    esi,0x5c
c0004998:	75 f0                	jne    c000498a <create_partition+0x359>
c000499a:	f7 d0                	not    eax
c000499c:	8d 73 10             	lea    esi,[ebx+0x10]
c000499f:	89 c2                	mov    edx,eax
c00049a1:	89 f0                	mov    eax,esi
c00049a3:	e8 2f d3 ff ff       	call   c0001cd7 <st_dword>
c00049a8:	83 ec 0c             	sub    esp,0xc
c00049ab:	6a 01                	push   0x1
c00049ad:	6a 00                	push   0x0
c00049af:	6a 01                	push   0x1
c00049b1:	53                   	push   ebx
c00049b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049b6:	e8 71 d2 ff ff       	call   c0001c2c <disk_write>
c00049bb:	83 c4 20             	add    esp,0x20
c00049be:	85 c0                	test   eax,eax
c00049c0:	0f 85 9c fc ff ff    	jne    c0004662 <create_partition+0x31>
c00049c6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ca:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049ce:	83 c2 ff             	add    edx,0xffffffff
c00049d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049d4:	83 d1 ff             	adc    ecx,0xffffffff
c00049d7:	e8 fe d2 ff ff       	call   c0001cda <st_qword>
c00049dc:	ba 01 00 00 00       	mov    edx,0x1
c00049e1:	31 c9                	xor    ecx,ecx
c00049e3:	89 e8                	mov    eax,ebp
c00049e5:	e8 f0 d2 ff ff       	call   c0001cda <st_qword>
c00049ea:	89 f8                	mov    eax,edi
c00049ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049f4:	31 ff                	xor    edi,edi
c00049f6:	e8 df d2 ff ff       	call   c0001cda <st_qword>
c00049fb:	89 f0                	mov    eax,esi
c00049fd:	31 d2                	xor    edx,edx
c00049ff:	e8 d3 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a04:	83 c8 ff             	or     eax,0xffffffff
c0004a07:	47                   	inc    edi
c0004a08:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a0d:	e8 7e d8 ff ff       	call   c0002290 <crc32>
c0004a12:	83 ff 5c             	cmp    edi,0x5c
c0004a15:	75 f0                	jne    c0004a07 <create_partition+0x3d6>
c0004a17:	f7 d0                	not    eax
c0004a19:	89 c2                	mov    edx,eax
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	e8 b5 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a22:	83 ec 0c             	sub    esp,0xc
c0004a25:	6a 01                	push   0x1
c0004a27:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a2b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a2f:	83 c0 ff             	add    eax,0xffffffff
c0004a32:	83 d2 ff             	adc    edx,0xffffffff
c0004a35:	52                   	push   edx
c0004a36:	50                   	push   eax
c0004a37:	53                   	push   ebx
c0004a38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a3c:	e8 eb d1 ff ff       	call   c0001c2c <disk_write>
c0004a41:	83 c4 20             	add    esp,0x20
c0004a44:	85 c0                	test   eax,eax
c0004a46:	0f 85 16 fc ff ff    	jne    c0004662 <create_partition+0x31>
c0004a4c:	31 d2                	xor    edx,edx
c0004a4e:	89 d8                	mov    eax,ebx
c0004a50:	b9 00 02 00 00       	mov    ecx,0x200
c0004a55:	e8 9b d2 ff ff       	call   c0001cf5 <mem_set>
c0004a5a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a60:	b9 10 00 00 00       	mov    ecx,0x10
c0004a65:	ba 90 93 02 c0       	mov    edx,0xc0029390
c0004a6a:	e8 71 d2 ff ff       	call   c0001ce0 <mem_cpy>
c0004a6f:	e9 21 01 00 00       	jmp    c0004b95 <create_partition+0x564>
c0004a74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a78:	b9 05 00 00 00       	mov    ecx,0x5
c0004a7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a80:	bf 08 00 00 00       	mov    edi,0x8
c0004a85:	89 f8                	mov    eax,edi
c0004a87:	31 d2                	xor    edx,edx
c0004a89:	0f b6 f0             	movzx  esi,al
c0004a8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a8f:	f7 f6                	div    esi
c0004a91:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a96:	76 0a                	jbe    c0004aa2 <create_partition+0x471>
c0004a98:	d1 e7                	shl    edi,1
c0004a9a:	49                   	dec    ecx
c0004a9b:	75 e8                	jne    c0004a85 <create_partition+0x454>
c0004a9d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aa2:	b9 00 02 00 00       	mov    ecx,0x200
c0004aa7:	31 d2                	xor    edx,edx
c0004aa9:	89 d8                	mov    eax,ebx
c0004aab:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab1:	e8 3f d2 ff ff       	call   c0001cf5 <mem_set>
c0004ab6:	b9 64 00 00 00       	mov    ecx,0x64
c0004abb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004abe:	31 d2                	xor    edx,edx
c0004ac0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ac8:	f7 f1                	div    ecx
c0004aca:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004acf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ad3:	89 f8                	mov    eax,edi
c0004ad5:	0f b6 c0             	movzx  eax,al
c0004ad8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004adc:	e9 80 00 00 00       	jmp    c0004b61 <create_partition+0x530>
c0004ae1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ae4:	29 cf                	sub    edi,ecx
c0004ae6:	89 ca                	mov    edx,ecx
c0004ae8:	89 f0                	mov    eax,esi
c0004aea:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004aef:	e8 e3 d1 ff ff       	call   c0001cd7 <st_dword>
c0004af4:	8d 46 04             	lea    eax,[esi+0x4]
c0004af7:	89 fa                	mov    edx,edi
c0004af9:	83 c6 10             	add    esi,0x10
c0004afc:	e8 d6 d1 ff ff       	call   c0001cd7 <st_dword>
c0004b01:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b05:	31 d2                	xor    edx,edx
c0004b07:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b0a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b0e:	89 c8                	mov    eax,ecx
c0004b10:	01 f9                	add    ecx,edi
c0004b12:	f7 f5                	div    ebp
c0004b14:	89 d5                	mov    ebp,edx
c0004b16:	31 d2                	xor    edx,edx
c0004b18:	45                   	inc    ebp
c0004b19:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b1d:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b20:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b23:	89 c2                	mov    edx,eax
c0004b25:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b28:	c1 ea 02             	shr    edx,0x2
c0004b2b:	83 e2 c0             	and    edx,0xffffffc0
c0004b2e:	09 ea                	or     edx,ebp
c0004b30:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b35:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b38:	31 d2                	xor    edx,edx
c0004b3a:	f7 f5                	div    ebp
c0004b3c:	89 d7                	mov    edi,edx
c0004b3e:	31 d2                	xor    edx,edx
c0004b40:	47                   	inc    edi
c0004b41:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b45:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b48:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b4b:	89 c5                	mov    ebp,eax
c0004b4d:	c1 ed 02             	shr    ebp,0x2
c0004b50:	83 e5 c0             	and    ebp,0xffffffc0
c0004b53:	09 ef                	or     edi,ebp
c0004b55:	89 fa                	mov    edx,edi
c0004b57:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b5a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b5f:	74 34                	je     c0004b95 <create_partition+0x564>
c0004b61:	85 c9                	test   ecx,ecx
c0004b63:	74 30                	je     c0004b95 <create_partition+0x564>
c0004b65:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b68:	76 2b                	jbe    c0004b95 <create_partition+0x564>
c0004b6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b6e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b72:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b75:	83 ff 64             	cmp    edi,0x64
c0004b78:	76 4b                	jbe    c0004bc5 <create_partition+0x594>
c0004b7a:	89 f8                	mov    eax,edi
c0004b7c:	01 c8                	add    eax,ecx
c0004b7e:	0f 82 5d ff ff ff    	jb     c0004ae1 <create_partition+0x4b0>
c0004b84:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b87:	0f 87 54 ff ff ff    	ja     c0004ae1 <create_partition+0x4b0>
c0004b8d:	85 ff                	test   edi,edi
c0004b8f:	0f 85 51 ff ff ff    	jne    c0004ae6 <create_partition+0x4b5>
c0004b95:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b9b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba0:	e8 2e d1 ff ff       	call   c0001cd3 <st_word>
c0004ba5:	83 ec 0c             	sub    esp,0xc
c0004ba8:	6a 01                	push   0x1
c0004baa:	6a 00                	push   0x0
c0004bac:	6a 00                	push   0x0
c0004bae:	53                   	push   ebx
c0004baf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bb3:	e8 74 d0 ff ff       	call   c0001c2c <disk_write>
c0004bb8:	83 c4 20             	add    esp,0x20
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	0f 95 c0             	setne  al
c0004bc0:	0f b6 c0             	movzx  eax,al
c0004bc3:	eb 0e                	jmp    c0004bd3 <create_partition+0x5a2>
c0004bc5:	74 07                	je     c0004bce <create_partition+0x59d>
c0004bc7:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bcc:	eb ac                	jmp    c0004b7a <create_partition+0x549>
c0004bce:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd1:	eb a7                	jmp    c0004b7a <create_partition+0x549>
c0004bd3:	83 c4 5c             	add    esp,0x5c
c0004bd6:	5b                   	pop    ebx
c0004bd7:	5e                   	pop    esi
c0004bd8:	5f                   	pop    edi
c0004bd9:	5d                   	pop    ebp
c0004bda:	c3                   	ret    

c0004bdb <get_fileinfo>:
c0004bdb:	55                   	push   ebp
c0004bdc:	57                   	push   edi
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	83 ec 1c             	sub    esp,0x1c
c0004be2:	8b 30                	mov    esi,DWORD PTR [eax]
c0004be4:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004be8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bec:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bef:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bf2:	0f 84 dc 01 00 00    	je     c0004dd4 <get_fileinfo+0x1f9>
c0004bf8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bfb:	75 0f                	jne    c0004c0c <get_fileinfo+0x31>
c0004bfd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c00:	83 c4 1c             	add    esp,0x1c
c0004c03:	5b                   	pop    ebx
c0004c04:	5e                   	pop    esi
c0004c05:	5f                   	pop    edi
c0004c06:	5d                   	pop    ebp
c0004c07:	e9 58 d5 ff ff       	jmp    c0002164 <get_xfileinfo>
c0004c0c:	89 d3                	mov    ebx,edx
c0004c0e:	89 c6                	mov    esi,eax
c0004c10:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c14:	74 6a                	je     c0004c80 <get_fileinfo+0xa5>
c0004c16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c1e:	31 ed                	xor    ebp,ebp
c0004c20:	31 ff                	xor    edi,edi
c0004c22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c2d:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c31:	66 85 d2             	test   dx,dx
c0004c34:	74 3e                	je     c0004c74 <get_fileinfo+0x99>
c0004c36:	66 85 ed             	test   bp,bp
c0004c39:	75 0c                	jne    c0004c47 <get_fileinfo+0x6c>
c0004c3b:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c41:	66 3d ff 07          	cmp    ax,0x7ff
c0004c45:	76 22                	jbe    c0004c69 <get_fileinfo+0x8e>
c0004c47:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c4c:	89 e8                	mov    eax,ebp
c0004c4e:	29 f9                	sub    ecx,edi
c0004c50:	c1 e0 10             	shl    eax,0x10
c0004c53:	09 d0                	or     eax,edx
c0004c55:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c59:	e8 a3 d1 ff ff       	call   c0001e01 <put_utf>
c0004c5e:	84 c0                	test   al,al
c0004c60:	74 10                	je     c0004c72 <get_fileinfo+0x97>
c0004c62:	0f b6 c0             	movzx  eax,al
c0004c65:	31 d2                	xor    edx,edx
c0004c67:	01 c7                	add    edi,eax
c0004c69:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c6e:	89 d5                	mov    ebp,edx
c0004c70:	eb b0                	jmp    c0004c22 <get_fileinfo+0x47>
c0004c72:	31 ff                	xor    edi,edi
c0004c74:	66 85 ed             	test   bp,bp
c0004c77:	74 02                	je     c0004c7b <get_fileinfo+0xa0>
c0004c79:	31 ff                	xor    edi,edi
c0004c7b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c80:	31 ff                	xor    edi,edi
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	83 f9 0a             	cmp    ecx,0xa
c0004c87:	0f 87 ad 00 00 00    	ja     c0004d3a <get_fileinfo+0x15f>
c0004c8d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c90:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c93:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c97:	66 83 fa 20          	cmp    dx,0x20
c0004c9b:	0f 84 92 00 00 00    	je     c0004d33 <get_fileinfo+0x158>
c0004ca1:	66 83 fa 05          	cmp    dx,0x5
c0004ca5:	75 05                	jne    c0004cac <get_fileinfo+0xd1>
c0004ca7:	ba e5 00 00 00       	mov    edx,0xe5
c0004cac:	83 ff 0b             	cmp    edi,0xb
c0004caf:	77 0b                	ja     c0004cbc <get_fileinfo+0xe1>
c0004cb1:	83 fd 09             	cmp    ebp,0x9
c0004cb4:	75 06                	jne    c0004cbc <get_fileinfo+0xe1>
c0004cb6:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cbb:	47                   	inc    edi
c0004cbc:	0f b7 c2             	movzx  eax,dx
c0004cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cc3:	e8 6d d0 ff ff       	call   c0001d35 <dbc_1st>
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	74 2f                	je     c0004cfb <get_fileinfo+0x120>
c0004ccc:	83 fd 08             	cmp    ebp,0x8
c0004ccf:	74 2a                	je     c0004cfb <get_fileinfo+0x120>
c0004cd1:	83 fd 0b             	cmp    ebp,0xb
c0004cd4:	74 25                	je     c0004cfb <get_fileinfo+0x120>
c0004cd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd9:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cdd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce1:	e8 52 d0 ff ff       	call   c0001d38 <dbc_2nd>
c0004ce6:	85 c0                	test   eax,eax
c0004ce8:	74 11                	je     c0004cfb <get_fileinfo+0x120>
c0004cea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cf3:	c1 e2 08             	shl    edx,0x8
c0004cf6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cf9:	09 c2                	or     edx,eax
c0004cfb:	0f b7 d2             	movzx  edx,dx
c0004cfe:	50                   	push   eax
c0004cff:	50                   	push   eax
c0004d00:	68 b5 01 00 00       	push   0x1b5
c0004d05:	52                   	push   edx
c0004d06:	e8 46 38 00 00       	call   c0008551 <ff_oem2uni>
c0004d0b:	83 c4 10             	add    esp,0x10
c0004d0e:	66 85 c0             	test   ax,ax
c0004d11:	75 04                	jne    c0004d17 <get_fileinfo+0x13c>
c0004d13:	31 ff                	xor    edi,edi
c0004d15:	eb 23                	jmp    c0004d3a <get_fileinfo+0x15f>
c0004d17:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d1c:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d20:	29 f9                	sub    ecx,edi
c0004d22:	0f b7 c0             	movzx  eax,ax
c0004d25:	e8 d7 d0 ff ff       	call   c0001e01 <put_utf>
c0004d2a:	84 c0                	test   al,al
c0004d2c:	74 e5                	je     c0004d13 <get_fileinfo+0x138>
c0004d2e:	0f b6 c0             	movzx  eax,al
c0004d31:	01 c7                	add    edi,eax
c0004d33:	89 e9                	mov    ecx,ebp
c0004d35:	e9 4a ff ff ff       	jmp    c0004c84 <get_fileinfo+0xa9>
c0004d3a:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d3f:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d43:	75 54                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d45:	85 ff                	test   edi,edi
c0004d47:	75 0b                	jne    c0004d54 <get_fileinfo+0x179>
c0004d49:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d4d:	ba 01 00 00 00       	mov    edx,0x1
c0004d52:	eb 33                	jmp    c0004d87 <get_fileinfo+0x1ac>
c0004d54:	b1 08                	mov    cl,0x8
c0004d56:	31 d2                	xor    edx,edx
c0004d58:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d5e:	84 c0                	test   al,al
c0004d60:	74 25                	je     c0004d87 <get_fileinfo+0x1ac>
c0004d62:	66 83 f8 2e          	cmp    ax,0x2e
c0004d66:	74 16                	je     c0004d7e <get_fileinfo+0x1a3>
c0004d68:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d6b:	66 83 ff 19          	cmp    di,0x19
c0004d6f:	77 0f                	ja     c0004d80 <get_fileinfo+0x1a5>
c0004d71:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d74:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d77:	74 07                	je     c0004d80 <get_fileinfo+0x1a5>
c0004d79:	83 c0 20             	add    eax,0x20
c0004d7c:	eb 02                	jmp    c0004d80 <get_fileinfo+0x1a5>
c0004d7e:	b1 10                	mov    cl,0x10
c0004d80:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d84:	42                   	inc    edx
c0004d85:	eb d1                	jmp    c0004d58 <get_fileinfo+0x17d>
c0004d87:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d93:	75 04                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d95:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d99:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d9f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004da2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da5:	83 c0 1c             	add    eax,0x1c
c0004da8:	e8 c1 ce ff ff       	call   c0001c6e <ld_dword>
c0004dad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004db4:	89 03                	mov    DWORD PTR [ebx],eax
c0004db6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db9:	83 c0 16             	add    eax,0x16
c0004dbc:	e8 a0 ce ff ff       	call   c0001c61 <ld_word>
c0004dc1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dc5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc8:	83 c0 18             	add    eax,0x18
c0004dcb:	e8 91 ce ff ff       	call   c0001c61 <ld_word>
c0004dd0:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004dd4:	83 c4 1c             	add    esp,0x1c
c0004dd7:	5b                   	pop    ebx
c0004dd8:	5e                   	pop    esi
c0004dd9:	5f                   	pop    edi
c0004dda:	5d                   	pop    ebp
c0004ddb:	c3                   	ret    

c0004ddc <ld_clust.isra.0>:
c0004ddc:	56                   	push   esi
c0004ddd:	89 c6                	mov    esi,eax
c0004ddf:	53                   	push   ebx
c0004de0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004de3:	89 d3                	mov    ebx,edx
c0004de5:	e8 77 ce ff ff       	call   c0001c61 <ld_word>
c0004dea:	0f b7 c8             	movzx  ecx,ax
c0004ded:	89 f0                	mov    eax,esi
c0004def:	3c 03                	cmp    al,0x3
c0004df1:	75 0d                	jne    c0004e00 <ld_clust.isra.0+0x24>
c0004df3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004df6:	e8 66 ce ff ff       	call   c0001c61 <ld_word>
c0004dfb:	c1 e0 10             	shl    eax,0x10
c0004dfe:	09 c1                	or     ecx,eax
c0004e00:	89 c8                	mov    eax,ecx
c0004e02:	5b                   	pop    ebx
c0004e03:	5e                   	pop    esi
c0004e04:	c3                   	ret    

c0004e05 <st_clust.isra.1>:
c0004e05:	56                   	push   esi
c0004e06:	89 c6                	mov    esi,eax
c0004e08:	53                   	push   ebx
c0004e09:	89 d3                	mov    ebx,edx
c0004e0b:	0f b7 d1             	movzx  edx,cx
c0004e0e:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e11:	e8 bd ce ff ff       	call   c0001cd3 <st_word>
c0004e16:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e19:	75 0f                	jne    c0004e2a <st_clust.isra.1+0x25>
c0004e1b:	c1 e9 10             	shr    ecx,0x10
c0004e1e:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e21:	89 ca                	mov    edx,ecx
c0004e23:	5b                   	pop    ebx
c0004e24:	5e                   	pop    esi
c0004e25:	e9 a9 ce ff ff       	jmp    c0001cd3 <st_word>
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <init_alloc_info.isra.2>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c6                	mov    esi,eax
c0004e31:	89 d3                	mov    ebx,edx
c0004e33:	51                   	push   ecx
c0004e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e36:	83 c0 34             	add    eax,0x34
c0004e39:	e8 30 ce ff ff       	call   c0001c6e <ld_dword>
c0004e3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e41:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e43:	83 c0 38             	add    eax,0x38
c0004e46:	e8 3b ce ff ff       	call   c0001c86 <ld_qword>
c0004e4b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e4e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e51:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e53:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e56:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5d:	83 e0 02             	and    eax,0x2
c0004e60:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e63:	5b                   	pop    ebx
c0004e64:	5b                   	pop    ebx
c0004e65:	5e                   	pop    esi
c0004e66:	c3                   	ret    

c0004e67 <follow_path>:
c0004e67:	56                   	push   esi
c0004e68:	53                   	push   ebx
c0004e69:	89 c3                	mov    ebx,eax
c0004e6b:	83 ec 14             	sub    esp,0x14
c0004e6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e72:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e78:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e7a:	80 fa 5c             	cmp    dl,0x5c
c0004e7d:	75 07                	jne    c0004e86 <follow_path+0x1f>
c0004e7f:	40                   	inc    eax
c0004e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e84:	eb ee                	jmp    c0004e74 <follow_path+0xd>
c0004e86:	80 fa 2f             	cmp    dl,0x2f
c0004e89:	74 f4                	je     c0004e7f <follow_path+0x18>
c0004e8b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e92:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e99:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e9c:	77 52                	ja     c0004ef0 <follow_path+0x89>
c0004e9e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004ea2:	31 d2                	xor    edx,edx
c0004ea4:	89 d8                	mov    eax,ebx
c0004ea6:	e8 12 e3 ff ff       	call   c00031bd <dir_sdi>
c0004eab:	eb 7c                	jmp    c0004f29 <follow_path+0xc2>
c0004ead:	89 d8                	mov    eax,ebx
c0004eaf:	e8 6e f2 ff ff       	call   c0004122 <dir_find>
c0004eb4:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004eb7:	85 c0                	test   eax,eax
c0004eb9:	75 46                	jne    c0004f01 <follow_path+0x9a>
c0004ebb:	80 e2 04             	and    dl,0x4
c0004ebe:	75 69                	jne    c0004f29 <follow_path+0xc2>
c0004ec0:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ec4:	74 5e                	je     c0004f24 <follow_path+0xbd>
c0004ec6:	8a 06                	mov    al,BYTE PTR [esi]
c0004ec8:	3c 04                	cmp    al,0x4
c0004eca:	75 41                	jne    c0004f0d <follow_path+0xa6>
c0004ecc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ecf:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ed3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ed6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ed9:	30 c0                	xor    al,al
c0004edb:	09 d0                	or     eax,edx
c0004edd:	89 da                	mov    edx,ebx
c0004edf:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ee2:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ee5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ee8:	8d 46 10             	lea    eax,[esi+0x10]
c0004eeb:	e8 3d ff ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0004ef0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ef4:	89 d8                	mov    eax,ebx
c0004ef6:	e8 a9 ed ff ff       	call   c0003ca4 <create_name>
c0004efb:	85 c0                	test   eax,eax
c0004efd:	74 ae                	je     c0004ead <follow_path+0x46>
c0004eff:	eb 28                	jmp    c0004f29 <follow_path+0xc2>
c0004f01:	83 f8 04             	cmp    eax,0x4
c0004f04:	75 23                	jne    c0004f29 <follow_path+0xc2>
c0004f06:	80 e2 04             	and    dl,0x4
c0004f09:	74 19                	je     c0004f24 <follow_path+0xbd>
c0004f0b:	eb 1c                	jmp    c0004f29 <follow_path+0xc2>
c0004f0d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f10:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f16:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f1a:	e8 bd fe ff ff       	call   c0004ddc <ld_clust.isra.0>
c0004f1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f22:	eb cc                	jmp    c0004ef0 <follow_path+0x89>
c0004f24:	b8 05 00 00 00       	mov    eax,0x5
c0004f29:	83 c4 14             	add    esp,0x14
c0004f2c:	5b                   	pop    ebx
c0004f2d:	5e                   	pop    esi
c0004f2e:	c3                   	ret    

c0004f2f <f_mount>:
c0004f2f:	53                   	push   ebx
c0004f30:	83 ec 18             	sub    esp,0x18
c0004f33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f37:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f43:	e8 fb d2 ff ff       	call   c0002243 <get_ldnumber>
c0004f48:	89 c2                	mov    edx,eax
c0004f4a:	b8 0b 00 00 00       	mov    eax,0xb
c0004f4f:	85 d2                	test   edx,edx
c0004f51:	78 39                	js     c0004f8c <f_mount+0x5d>
c0004f53:	8b 04 95 60 e5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1aa0]
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 03                	je     c0004f61 <f_mount+0x32>
c0004f5e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f65:	85 c0                	test   eax,eax
c0004f67:	74 03                	je     c0004f6c <f_mount+0x3d>
c0004f69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	89 04 95 60 e5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1aa0],eax
c0004f77:	31 c0                	xor    eax,eax
c0004f79:	84 db                	test   bl,bl
c0004f7b:	74 0f                	je     c0004f8c <f_mount+0x5d>
c0004f7d:	31 c9                	xor    ecx,ecx
c0004f7f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f87:	e8 65 d7 ff ff       	call   c00026f1 <mount_volume>
c0004f8c:	83 c4 18             	add    esp,0x18
c0004f8f:	5b                   	pop    ebx
c0004f90:	c3                   	ret    

c0004f91 <f_open>:
c0004f91:	55                   	push   ebp
c0004f92:	bd 09 00 00 00       	mov    ebp,0x9
c0004f97:	57                   	push   edi
c0004f98:	56                   	push   esi
c0004f99:	53                   	push   ebx
c0004f9a:	83 ec 7c             	sub    esp,0x7c
c0004f9d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fa4:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fab:	85 db                	test   ebx,ebx
c0004fad:	0f 84 10 04 00 00    	je     c00053c3 <f_open+0x432>
c0004fb3:	89 fe                	mov    esi,edi
c0004fb5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fb9:	83 e6 3f             	and    esi,0x3f
c0004fbc:	89 f0                	mov    eax,esi
c0004fbe:	0f b6 c8             	movzx  ecx,al
c0004fc1:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fc8:	e8 24 d7 ff ff       	call   c00026f1 <mount_volume>
c0004fcd:	89 c5                	mov    ebp,eax
c0004fcf:	85 c0                	test   eax,eax
c0004fd1:	0f 85 e6 03 00 00    	jne    c00053bd <f_open+0x42c>
c0004fd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fdb:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fe4:	83 ec 0c             	sub    esp,0xc
c0004fe7:	68 60 04 00 00       	push   0x460
c0004fec:	e8 a3 34 00 00       	call   c0008494 <ff_memalloc>
c0004ff1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ff5:	83 c4 10             	add    esp,0x10
c0004ff8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ffd:	0f 84 c0 03 00 00    	je     c00053c3 <f_open+0x432>
c0005003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005007:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000500b:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005011:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005014:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005017:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000501e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005022:	e8 40 fe ff ff       	call   c0004e67 <follow_path>
c0005027:	89 c5                	mov    ebp,eax
c0005029:	85 c0                	test   eax,eax
c000502b:	75 0c                	jne    c0005039 <f_open+0xa8>
c000502d:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005032:	79 05                	jns    c0005039 <f_open+0xa8>
c0005034:	bd 06 00 00 00       	mov    ebp,0x6
c0005039:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000503f:	0f 84 84 01 00 00    	je     c00051c9 <f_open+0x238>
c0005045:	85 ed                	test   ebp,ebp
c0005047:	74 20                	je     c0005069 <f_open+0xd8>
c0005049:	83 fd 04             	cmp    ebp,0x4
c000504c:	0f 85 58 03 00 00    	jne    c00053aa <f_open+0x419>
c0005052:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005056:	83 ce 08             	or     esi,0x8
c0005059:	e8 8a f2 ff ff       	call   c00042e8 <dir_register>
c000505e:	89 c5                	mov    ebp,eax
c0005060:	85 c0                	test   eax,eax
c0005062:	74 2f                	je     c0005093 <f_open+0x102>
c0005064:	e9 41 03 00 00       	jmp    c00053aa <f_open+0x419>
c0005069:	bd 07 00 00 00       	mov    ebp,0x7
c000506e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005073:	0f 85 31 03 00 00    	jne    c00053aa <f_open+0x419>
c0005079:	bd 08 00 00 00       	mov    ebp,0x8
c000507e:	f7 c7 04 00 00 00    	test   edi,0x4
c0005084:	0f 85 20 03 00 00    	jne    c00053aa <f_open+0x419>
c000508a:	83 e7 08             	and    edi,0x8
c000508d:	0f 84 65 01 00 00    	je     c00051f8 <f_open+0x267>
c0005093:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005097:	8a 02                	mov    al,BYTE PTR [edx]
c0005099:	3c 04                	cmp    al,0x4
c000509b:	0f 85 97 00 00 00    	jne    c0005138 <f_open+0x1a7>
c00050a1:	8d 42 10             	lea    eax,[edx+0x10]
c00050a4:	89 13                	mov    DWORD PTR [ebx],edx
c00050a6:	89 da                	mov    edx,ebx
c00050a8:	e8 80 fd ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c00050ad:	31 d2                	xor    edx,edx
c00050af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b3:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050bb:	83 c0 02             	add    eax,0x2
c00050be:	e8 32 cc ff ff       	call   c0001cf5 <mem_set>
c00050c3:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050c8:	31 d2                	xor    edx,edx
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d1:	83 c0 26             	add    eax,0x26
c00050d4:	e8 1c cc ff ff       	call   c0001cf5 <mem_set>
c00050d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e0:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050e4:	ba 00 00 21 50       	mov    edx,0x50210000
c00050e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050ec:	83 c0 08             	add    eax,0x8
c00050ef:	e8 e3 cb ff ff       	call   c0001cd7 <st_dword>
c00050f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050fb:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005103:	e8 b7 ea ff ff       	call   c0003bbf <store_xdir>
c0005108:	89 c5                	mov    ebp,eax
c000510a:	85 c0                	test   eax,eax
c000510c:	0f 85 98 02 00 00    	jne    c00053aa <f_open+0x419>
c0005112:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005115:	85 d2                	test   edx,edx
c0005117:	0f 84 db 00 00 00    	je     c00051f8 <f_open+0x267>
c000511d:	31 c9                	xor    ecx,ecx
c000511f:	89 d8                	mov    eax,ebx
c0005121:	e8 8e e3 ff ff       	call   c00034b4 <remove_chain>
c0005126:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000512a:	89 c5                	mov    ebp,eax
c000512c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000512f:	48                   	dec    eax
c0005130:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005133:	e9 b8 00 00 00       	jmp    c00051f0 <f_open+0x25f>
c0005138:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000513c:	89 ea                	mov    edx,ebp
c000513e:	e8 99 fc ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005143:	ba 00 00 21 50       	mov    edx,0x50210000
c0005148:	89 c7                	mov    edi,eax
c000514a:	8d 45 0e             	lea    eax,[ebp+0xe]
c000514d:	e8 85 cb ff ff       	call   c0001cd7 <st_dword>
c0005152:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005156:	31 c9                	xor    ecx,ecx
c0005158:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000515c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005160:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005164:	e8 9c fc ff ff       	call   c0004e05 <st_clust.isra.1>
c0005169:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000516d:	31 d2                	xor    edx,edx
c000516f:	83 c0 1c             	add    eax,0x1c
c0005172:	e8 60 cb ff ff       	call   c0001cd7 <st_dword>
c0005177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517b:	85 ff                	test   edi,edi
c000517d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005181:	74 75                	je     c00051f8 <f_open+0x267>
c0005183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005187:	31 c9                	xor    ecx,ecx
c0005189:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000518c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000518f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005193:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005197:	89 fa                	mov    edx,edi
c0005199:	8d 44 24 24          	lea    eax,[esp+0x24]
c000519d:	e8 12 e3 ff ff       	call   c00034b4 <remove_chain>
c00051a2:	89 c5                	mov    ebp,eax
c00051a4:	85 c0                	test   eax,eax
c00051a6:	0f 85 fe 01 00 00    	jne    c00053aa <f_open+0x419>
c00051ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051b8:	4f                   	dec    edi
c00051b9:	e8 81 d2 ff ff       	call   c000243f <move_window>
c00051be:	89 c5                	mov    ebp,eax
c00051c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051c7:	eb 27                	jmp    c00051f0 <f_open+0x25f>
c00051c9:	85 ed                	test   ebp,ebp
c00051cb:	0f 85 d9 01 00 00    	jne    c00053aa <f_open+0x419>
c00051d1:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051d5:	bd 04 00 00 00       	mov    ebp,0x4
c00051da:	a8 10                	test   al,0x10
c00051dc:	0f 85 c8 01 00 00    	jne    c00053aa <f_open+0x419>
c00051e2:	83 e7 02             	and    edi,0x2
c00051e5:	74 11                	je     c00051f8 <f_open+0x267>
c00051e7:	bd 07 00 00 00       	mov    ebp,0x7
c00051ec:	a8 01                	test   al,0x1
c00051ee:	eb 02                	jmp    c00051f2 <f_open+0x261>
c00051f0:	85 ed                	test   ebp,ebp
c00051f2:	0f 85 b2 01 00 00    	jne    c00053aa <f_open+0x419>
c00051f8:	f7 c6 08 00 00 00    	test   esi,0x8
c00051fe:	74 03                	je     c0005203 <f_open+0x272>
c0005200:	83 ce 40             	or     esi,0x40
c0005203:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005207:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000520a:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c000520d:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005210:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005213:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005217:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000521a:	8a 02                	mov    al,BYTE PTR [edx]
c000521c:	3c 04                	cmp    al,0x4
c000521e:	75 2a                	jne    c000524a <f_open+0x2b9>
c0005220:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005224:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005229:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000522c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005230:	30 c0                	xor    al,al
c0005232:	09 c8                	or     eax,ecx
c0005234:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005237:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000523b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000523e:	8d 42 10             	lea    eax,[edx+0x10]
c0005241:	89 da                	mov    edx,ebx
c0005243:	e8 e5 fb ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0005248:	eb 1c                	jmp    c0005266 <f_open+0x2d5>
c000524a:	89 fa                	mov    edx,edi
c000524c:	e8 8b fb ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005251:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005254:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005257:	e8 12 ca ff ff       	call   c0001c6e <ld_dword>
c000525c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005263:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000526a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005271:	89 03                	mov    DWORD PTR [ebx],eax
c0005273:	31 d2                	xor    edx,edx
c0005275:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005279:	b9 00 02 00 00       	mov    ecx,0x200
c000527e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005282:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005286:	89 f0                	mov    eax,esi
c0005288:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000528f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005292:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005299:	8d 43 50             	lea    eax,[ebx+0x50]
c000529c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052a3:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052ae:	e8 42 ca ff ff       	call   c0001cf5 <mem_set>
c00052b3:	83 e6 20             	and    esi,0x20
c00052b6:	75 07                	jne    c00052bf <f_open+0x32e>
c00052b8:	31 ed                	xor    ebp,ebp
c00052ba:	e9 eb 00 00 00       	jmp    c00053aa <f_open+0x419>
c00052bf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052c2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052d5:	74 e1                	je     c00052b8 <f_open+0x327>
c00052d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052df:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052e2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052e9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052ec:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f0:	31 ff                	xor    edi,edi
c00052f2:	c1 e5 09             	shl    ebp,0x9
c00052f5:	89 ee                	mov    esi,ebp
c00052f7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052fb:	89 f8                	mov    eax,edi
c00052fd:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005301:	73 22                	jae    c0005325 <f_open+0x394>
c0005303:	89 d8                	mov    eax,ebx
c0005305:	e8 bd dc ff ff       	call   c0002fc7 <get_fat>
c000530a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000530e:	89 c2                	mov    edx,eax
c0005310:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005314:	83 f8 01             	cmp    eax,0x1
c0005317:	76 10                	jbe    c0005329 <f_open+0x398>
c0005319:	83 f8 ff             	cmp    eax,0xffffffff
c000531c:	75 d9                	jne    c00052f7 <f_open+0x366>
c000531e:	bd 01 00 00 00       	mov    ebp,0x1
c0005323:	eb 09                	jmp    c000532e <f_open+0x39d>
c0005325:	31 ed                	xor    ebp,ebp
c0005327:	eb 05                	jmp    c000532e <f_open+0x39d>
c0005329:	bd 02 00 00 00       	mov    ebp,0x2
c000532e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005331:	85 ed                	test   ebp,ebp
c0005333:	75 75                	jne    c00053aa <f_open+0x419>
c0005335:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005339:	25 ff 01 00 00       	and    eax,0x1ff
c000533e:	0f 84 74 ff ff ff    	je     c00052b8 <f_open+0x327>
c0005344:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005348:	bd 02 00 00 00       	mov    ebp,0x2
c000534d:	89 c8                	mov    eax,ecx
c000534f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005353:	e8 a2 cb ff ff       	call   c0001efa <clst2sect>
c0005358:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535c:	89 d7                	mov    edi,edx
c000535e:	09 c7                	or     edi,eax
c0005360:	74 48                	je     c00053aa <f_open+0x419>
c0005362:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005366:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000536a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005372:	0f ac fe 09          	shrd   esi,edi,0x9
c0005376:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000537a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000537e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005381:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005385:	83 ec 0c             	sub    esp,0xc
c0005388:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000538b:	6a 01                	push   0x1
c000538d:	52                   	push   edx
c000538e:	50                   	push   eax
c000538f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005393:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005397:	50                   	push   eax
c0005398:	e8 79 c8 ff ff       	call   c0001c16 <disk_read>
c000539d:	83 c4 20             	add    esp,0x20
c00053a0:	85 c0                	test   eax,eax
c00053a2:	0f 95 c0             	setne  al
c00053a5:	0f b6 c0             	movzx  eax,al
c00053a8:	89 c5                	mov    ebp,eax
c00053aa:	83 ec 0c             	sub    esp,0xc
c00053ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b1:	e8 f4 30 00 00       	call   c00084aa <ff_memfree>
c00053b6:	83 c4 10             	add    esp,0x10
c00053b9:	85 ed                	test   ebp,ebp
c00053bb:	74 06                	je     c00053c3 <f_open+0x432>
c00053bd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053c3:	83 c4 7c             	add    esp,0x7c
c00053c6:	89 e8                	mov    eax,ebp
c00053c8:	5b                   	pop    ebx
c00053c9:	5e                   	pop    esi
c00053ca:	5f                   	pop    edi
c00053cb:	5d                   	pop    ebp
c00053cc:	c3                   	ret    

c00053cd <f_read>:
c00053cd:	55                   	push   ebp
c00053ce:	57                   	push   edi
c00053cf:	56                   	push   esi
c00053d0:	53                   	push   ebx
c00053d1:	83 ec 2c             	sub    esp,0x2c
c00053d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053d8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053e6:	89 d8                	mov    eax,ebx
c00053e8:	e8 77 cf ff ff       	call   c0002364 <validate>
c00053ed:	89 c5                	mov    ebp,eax
c00053ef:	85 c0                	test   eax,eax
c00053f1:	0f 85 4c 02 00 00    	jne    c0005643 <f_read+0x276>
c00053f7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053fb:	85 ed                	test   ebp,ebp
c00053fd:	0f 85 40 02 00 00    	jne    c0005643 <f_read+0x276>
c0005403:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005407:	0f 84 31 02 00 00    	je     c000563e <f_read+0x271>
c000540d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005410:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005413:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005416:	bf 00 00 00 00       	mov    edi,0x0
c000541b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000541e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005422:	89 d1                	mov    ecx,edx
c0005424:	19 f9                	sbb    ecx,edi
c0005426:	0f 83 cf 00 00 00    	jae    c00054fb <f_read+0x12e>
c000542c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005430:	e9 c6 00 00 00       	jmp    c00054fb <f_read+0x12e>
c0005435:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005438:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000543b:	89 d0                	mov    eax,edx
c000543d:	25 ff 01 00 00       	and    eax,0x1ff
c0005442:	0f 85 c9 01 00 00    	jne    c0005611 <f_read+0x244>
c0005448:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000544c:	89 d6                	mov    esi,edx
c000544e:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005452:	89 cf                	mov    edi,ecx
c0005454:	48                   	dec    eax
c0005455:	0f ac fe 09          	shrd   esi,edi,0x9
c0005459:	21 f0                	and    eax,esi
c000545b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000545f:	0f 84 a6 00 00 00    	je     c000550b <f_read+0x13e>
c0005465:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005469:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000546c:	89 c8                	mov    eax,ecx
c000546e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005471:	e8 84 ca ff ff       	call   c0001efa <clst2sect>
c0005476:	89 d7                	mov    edi,edx
c0005478:	09 c7                	or     edi,eax
c000547a:	0f 84 b4 00 00 00    	je     c0005534 <f_read+0x167>
c0005480:	31 ff                	xor    edi,edi
c0005482:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005486:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005489:	01 c6                	add    esi,eax
c000548b:	11 d7                	adc    edi,edx
c000548d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005495:	0f 86 fd 00 00 00    	jbe    c0005598 <f_read+0x1cb>
c000549b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000549f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054a3:	c1 e8 09             	shr    eax,0x9
c00054a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00054a9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054ad:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b0:	39 c2                	cmp    edx,eax
c00054b2:	76 07                	jbe    c00054bb <f_read+0xee>
c00054b4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054bb:	83 ec 0c             	sub    esp,0xc
c00054be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054c2:	57                   	push   edi
c00054c3:	56                   	push   esi
c00054c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 44 c7 ff ff       	call   c0001c16 <disk_read>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	75 6e                	jne    c0005547 <f_read+0x17a>
c00054d9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054dd:	78 7e                	js     c000555d <f_read+0x190>
c00054df:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054e2:	c1 e6 09             	shl    esi,0x9
c00054e5:	31 ff                	xor    edi,edi
c00054e7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054ef:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054f3:	01 30                	add    DWORD PTR [eax],esi
c00054f5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054f8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005500:	0f 85 2f ff ff ff    	jne    c0005435 <f_read+0x68>
c0005506:	e9 38 01 00 00       	jmp    c0005643 <f_read+0x276>
c000550b:	89 c8                	mov    eax,ecx
c000550d:	09 d0                	or     eax,edx
c000550f:	75 05                	jne    c0005516 <f_read+0x149>
c0005511:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005514:	eb 19                	jmp    c000552f <f_read+0x162>
c0005516:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000551a:	74 09                	je     c0005525 <f_read+0x158>
c000551c:	89 d8                	mov    eax,ebx
c000551e:	e8 f8 c9 ff ff       	call   c0001f1b <clmt_clust>
c0005523:	eb 0a                	jmp    c000552f <f_read+0x162>
c0005525:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005528:	89 d8                	mov    eax,ebx
c000552a:	e8 98 da ff ff       	call   c0002fc7 <get_fat>
c000552f:	83 f8 01             	cmp    eax,0x1
c0005532:	77 0e                	ja     c0005542 <f_read+0x175>
c0005534:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005538:	bd 02 00 00 00       	mov    ebp,0x2
c000553d:	e9 01 01 00 00       	jmp    c0005643 <f_read+0x276>
c0005542:	83 f8 ff             	cmp    eax,0xffffffff
c0005545:	75 0e                	jne    c0005555 <f_read+0x188>
c0005547:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000554b:	bd 01 00 00 00       	mov    ebp,0x1
c0005550:	e9 ee 00 00 00       	jmp    c0005643 <f_read+0x276>
c0005555:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005558:	e9 08 ff ff ff       	jmp    c0005465 <f_read+0x98>
c000555d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005560:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005563:	29 f0                	sub    eax,esi
c0005565:	19 fa                	sbb    edx,edi
c0005567:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000556a:	89 d7                	mov    edi,edx
c000556c:	ba 00 00 00 00       	mov    edx,0x0
c0005571:	89 f9                	mov    ecx,edi
c0005573:	19 d1                	sbb    ecx,edx
c0005575:	0f 83 64 ff ff ff    	jae    c00054df <f_read+0x112>
c000557b:	89 c7                	mov    edi,eax
c000557d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005580:	c1 e7 09             	shl    edi,0x9
c0005583:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005587:	b9 00 02 00 00       	mov    ecx,0x200
c000558c:	01 f8                	add    eax,edi
c000558e:	e8 4d c7 ff ff       	call   c0001ce0 <mem_cpy>
c0005593:	e9 47 ff ff ff       	jmp    c00054df <f_read+0x112>
c0005598:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000559b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000559e:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055a5:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055a9:	75 05                	jne    c00055b0 <f_read+0x1e3>
c00055ab:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055ae:	74 5b                	je     c000560b <f_read+0x23e>
c00055b0:	8d 43 50             	lea    eax,[ebx+0x50]
c00055b3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055bb:	79 2a                	jns    c00055e7 <f_read+0x21a>
c00055bd:	83 ec 0c             	sub    esp,0xc
c00055c0:	6a 01                	push   0x1
c00055c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055d2:	50                   	push   eax
c00055d3:	e8 54 c6 ff ff       	call   c0001c2c <disk_write>
c00055d8:	83 c4 20             	add    esp,0x20
c00055db:	85 c0                	test   eax,eax
c00055dd:	0f 85 64 ff ff ff    	jne    c0005547 <f_read+0x17a>
c00055e3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055e7:	83 ec 0c             	sub    esp,0xc
c00055ea:	6a 01                	push   0x1
c00055ec:	57                   	push   edi
c00055ed:	56                   	push   esi
c00055ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055fa:	50                   	push   eax
c00055fb:	e8 16 c6 ff ff       	call   c0001c16 <disk_read>
c0005600:	83 c4 20             	add    esp,0x20
c0005603:	85 c0                	test   eax,eax
c0005605:	0f 85 3c ff ff ff    	jne    c0005547 <f_read+0x17a>
c000560b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000560e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005611:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005614:	ba 00 02 00 00       	mov    edx,0x200
c0005619:	25 ff 01 00 00       	and    eax,0x1ff
c000561e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005622:	29 c2                	sub    edx,eax
c0005624:	39 d6                	cmp    esi,edx
c0005626:	76 02                	jbe    c000562a <f_read+0x25d>
c0005628:	89 d6                	mov    esi,edx
c000562a:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000562e:	89 f1                	mov    ecx,esi
c0005630:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005634:	e8 a7 c6 ff ff       	call   c0001ce0 <mem_cpy>
c0005639:	e9 a7 fe ff ff       	jmp    c00054e5 <f_read+0x118>
c000563e:	bd 07 00 00 00       	mov    ebp,0x7
c0005643:	83 c4 2c             	add    esp,0x2c
c0005646:	89 e8                	mov    eax,ebp
c0005648:	5b                   	pop    ebx
c0005649:	5e                   	pop    esi
c000564a:	5f                   	pop    edi
c000564b:	5d                   	pop    ebp
c000564c:	c3                   	ret    

c000564d <f_write>:
c000564d:	55                   	push   ebp
c000564e:	57                   	push   edi
c000564f:	56                   	push   esi
c0005650:	53                   	push   ebx
c0005651:	83 ec 2c             	sub    esp,0x2c
c0005654:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005658:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000565c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005662:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005666:	89 d8                	mov    eax,ebx
c0005668:	e8 f7 cc ff ff       	call   c0002364 <validate>
c000566d:	89 c5                	mov    ebp,eax
c000566f:	85 c0                	test   eax,eax
c0005671:	0f 85 86 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005677:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000567b:	85 ed                	test   ebp,ebp
c000567d:	0f 85 7a 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005683:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005687:	0f 84 6b 02 00 00    	je     c00058f8 <f_write+0x2ab>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005694:	0f 84 43 01 00 00    	je     c00057dd <f_write+0x190>
c000569a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000569d:	89 c1                	mov    ecx,eax
c000569f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056a3:	0f 83 34 01 00 00    	jae    c00057dd <f_write+0x190>
c00056a9:	f7 d0                	not    eax
c00056ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056af:	e9 29 01 00 00       	jmp    c00057dd <f_write+0x190>
c00056b4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056b7:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056ba:	89 d0                	mov    eax,edx
c00056bc:	25 ff 01 00 00       	and    eax,0x1ff
c00056c1:	0f 85 00 02 00 00    	jne    c00058c7 <f_write+0x27a>
c00056c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056cb:	89 d6                	mov    esi,edx
c00056cd:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d1:	89 cf                	mov    edi,ecx
c00056d3:	48                   	dec    eax
c00056d4:	0f ac fe 09          	shrd   esi,edi,0x9
c00056d8:	21 f0                	and    eax,esi
c00056da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056de:	0f 84 06 01 00 00    	je     c00057ea <f_write+0x19d>
c00056e4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056e8:	0f 88 6e 01 00 00    	js     c000585c <f_write+0x20f>
c00056ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056f2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056f5:	89 c8                	mov    eax,ecx
c00056f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056fb:	e8 fa c7 ff ff       	call   c0001efa <clst2sect>
c0005700:	89 d1                	mov    ecx,edx
c0005702:	09 c1                	or     ecx,eax
c0005704:	0f 84 1c 01 00 00    	je     c0005826 <f_write+0x1d9>
c000570a:	31 ff                	xor    edi,edi
c000570c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005710:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005714:	01 c6                	add    esi,eax
c0005716:	11 d7                	adc    edi,edx
c0005718:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005720:	0f 86 63 01 00 00    	jbe    c0005889 <f_write+0x23c>
c0005726:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000572a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000572e:	c1 e8 09             	shr    eax,0x9
c0005731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005735:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005739:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000573d:	39 c2                	cmp    edx,eax
c000573f:	76 08                	jbe    c0005749 <f_write+0xfc>
c0005741:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005745:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005749:	83 ec 0c             	sub    esp,0xc
c000574c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005750:	57                   	push   edi
c0005751:	56                   	push   esi
c0005752:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005756:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000575a:	50                   	push   eax
c000575b:	e8 cc c4 ff ff       	call   c0001c2c <disk_write>
c0005760:	83 c4 20             	add    esp,0x20
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 ce 00 00 00    	jne    c0005839 <f_write+0x1ec>
c000576b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000576e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005771:	29 f0                	sub    eax,esi
c0005773:	19 fa                	sbb    edx,edi
c0005775:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005779:	89 d7                	mov    edi,edx
c000577b:	ba 00 00 00 00       	mov    edx,0x0
c0005780:	89 f9                	mov    ecx,edi
c0005782:	19 d1                	sbb    ecx,edx
c0005784:	73 1c                	jae    c00057a2 <f_write+0x155>
c0005786:	89 c7                	mov    edi,eax
c0005788:	b9 00 02 00 00       	mov    ecx,0x200
c000578d:	c1 e7 09             	shl    edi,0x9
c0005790:	8d 43 50             	lea    eax,[ebx+0x50]
c0005793:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005797:	89 fa                	mov    edx,edi
c0005799:	e8 42 c5 ff ff       	call   c0001ce0 <mem_cpy>
c000579e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057a2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057a6:	c1 e6 09             	shl    esi,0x9
c00057a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057ad:	31 ff                	xor    edi,edi
c00057af:	01 30                	add    DWORD PTR [eax],esi
c00057b1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057b9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bc:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057c2:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057c5:	89 c1                	mov    ecx,eax
c00057c7:	39 f2                	cmp    edx,esi
c00057c9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057cc:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057cf:	19 f9                	sbb    ecx,edi
c00057d1:	73 04                	jae    c00057d7 <f_write+0x18a>
c00057d3:	89 f2                	mov    edx,esi
c00057d5:	89 f8                	mov    eax,edi
c00057d7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057dd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057e2:	0f 85 cc fe ff ff    	jne    c00056b4 <f_write+0x67>
c00057e8:	eb 2e                	jmp    c0005818 <f_write+0x1cb>
c00057ea:	89 c8                	mov    eax,ecx
c00057ec:	09 d0                	or     eax,edx
c00057ee:	75 0b                	jne    c00057fb <f_write+0x1ae>
c00057f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057f3:	31 d2                	xor    edx,edx
c00057f5:	85 c0                	test   eax,eax
c00057f7:	75 28                	jne    c0005821 <f_write+0x1d4>
c00057f9:	eb 12                	jmp    c000580d <f_write+0x1c0>
c00057fb:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057ff:	74 09                	je     c000580a <f_write+0x1bd>
c0005801:	89 d8                	mov    eax,ebx
c0005803:	e8 13 c7 ff ff       	call   c0001f1b <clmt_clust>
c0005808:	eb 0a                	jmp    c0005814 <f_write+0x1c7>
c000580a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000580d:	89 d8                	mov    eax,ebx
c000580f:	e8 a1 da ff ff       	call   c00032b5 <create_chain>
c0005814:	85 c0                	test   eax,eax
c0005816:	75 09                	jne    c0005821 <f_write+0x1d4>
c0005818:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000581c:	e9 dc 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005821:	83 f8 01             	cmp    eax,0x1
c0005824:	75 0e                	jne    c0005834 <f_write+0x1e7>
c0005826:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000582a:	bd 02 00 00 00       	mov    ebp,0x2
c000582f:	e9 c9 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005834:	83 f8 ff             	cmp    eax,0xffffffff
c0005837:	75 0e                	jne    c0005847 <f_write+0x1fa>
c0005839:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000583d:	bd 01 00 00 00       	mov    ebp,0x1
c0005842:	e9 b6 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005847:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000584a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000584e:	0f 85 90 fe ff ff    	jne    c00056e4 <f_write+0x97>
c0005854:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005857:	e9 88 fe ff ff       	jmp    c00056e4 <f_write+0x97>
c000585c:	83 ec 0c             	sub    esp,0xc
c000585f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005862:	6a 01                	push   0x1
c0005864:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005867:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000586a:	50                   	push   eax
c000586b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000586f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005873:	50                   	push   eax
c0005874:	e8 b3 c3 ff ff       	call   c0001c2c <disk_write>
c0005879:	83 c4 20             	add    esp,0x20
c000587c:	85 c0                	test   eax,eax
c000587e:	75 b9                	jne    c0005839 <f_write+0x1ec>
c0005880:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005884:	e9 65 fe ff ff       	jmp    c00056ee <f_write+0xa1>
c0005889:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000588c:	75 05                	jne    c0005893 <f_write+0x246>
c000588e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005891:	74 2e                	je     c00058c1 <f_write+0x274>
c0005893:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005896:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005899:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000589c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000589f:	73 20                	jae    c00058c1 <f_write+0x274>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	8d 43 50             	lea    eax,[ebx+0x50]
c00058a7:	6a 01                	push   0x1
c00058a9:	57                   	push   edi
c00058aa:	56                   	push   esi
c00058ab:	50                   	push   eax
c00058ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b0:	50                   	push   eax
c00058b1:	e8 60 c3 ff ff       	call   c0001c16 <disk_read>
c00058b6:	83 c4 20             	add    esp,0x20
c00058b9:	85 c0                	test   eax,eax
c00058bb:	0f 85 78 ff ff ff    	jne    c0005839 <f_write+0x1ec>
c00058c1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058c4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ca:	ba 00 02 00 00       	mov    edx,0x200
c00058cf:	25 ff 01 00 00       	and    eax,0x1ff
c00058d4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058d8:	29 c2                	sub    edx,eax
c00058da:	39 d6                	cmp    esi,edx
c00058dc:	76 02                	jbe    c00058e0 <f_write+0x293>
c00058de:	89 d6                	mov    esi,edx
c00058e0:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058e4:	89 f1                	mov    ecx,esi
c00058e6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058ea:	e8 f1 c3 ff ff       	call   c0001ce0 <mem_cpy>
c00058ef:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058f3:	e9 b1 fe ff ff       	jmp    c00057a9 <f_write+0x15c>
c00058f8:	bd 07 00 00 00       	mov    ebp,0x7
c00058fd:	83 c4 2c             	add    esp,0x2c
c0005900:	89 e8                	mov    eax,ebp
c0005902:	5b                   	pop    ebx
c0005903:	5e                   	pop    esi
c0005904:	5f                   	pop    edi
c0005905:	5d                   	pop    ebp
c0005906:	c3                   	ret    

c0005907 <f_sync>:
c0005907:	56                   	push   esi
c0005908:	53                   	push   ebx
c0005909:	83 ec 64             	sub    esp,0x64
c000590c:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005910:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005914:	89 d8                	mov    eax,ebx
c0005916:	e8 49 ca ff ff       	call   c0002364 <validate>
c000591b:	85 c0                	test   eax,eax
c000591d:	0f 85 ba 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005923:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005926:	f6 c2 40             	test   dl,0x40
c0005929:	0f 84 ae 01 00 00    	je     c0005add <f_sync+0x1d6>
c000592f:	84 d2                	test   dl,dl
c0005931:	79 33                	jns    c0005966 <f_sync+0x5f>
c0005933:	83 ec 0c             	sub    esp,0xc
c0005936:	8d 43 50             	lea    eax,[ebx+0x50]
c0005939:	6a 01                	push   0x1
c000593b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000593e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005941:	50                   	push   eax
c0005942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005946:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000594a:	50                   	push   eax
c000594b:	e8 dc c2 ff ff       	call   c0001c2c <disk_write>
c0005950:	83 c4 20             	add    esp,0x20
c0005953:	89 c2                	mov    edx,eax
c0005955:	b8 01 00 00 00       	mov    eax,0x1
c000595a:	85 d2                	test   edx,edx
c000595c:	0f 85 7b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005962:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000596d:	0f 85 11 01 00 00    	jne    c0005a84 <f_sync+0x17d>
c0005973:	89 d8                	mov    eax,ebx
c0005975:	e8 13 d6 ff ff       	call   c0002f8d <fill_first_frag>
c000597a:	85 c0                	test   eax,eax
c000597c:	0f 85 5b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005982:	83 c9 ff             	or     ecx,0xffffffff
c0005985:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005988:	89 d8                	mov    eax,ebx
c000598a:	e8 c9 d5 ff ff       	call   c0002f58 <fill_last_frag>
c000598f:	85 c0                	test   eax,eax
c0005991:	0f 85 46 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005997:	83 ec 0c             	sub    esp,0xc
c000599a:	68 60 04 00 00       	push   0x460
c000599f:	e8 f0 2a 00 00       	call   c0008494 <ff_memalloc>
c00059a4:	83 c4 10             	add    esp,0x10
c00059a7:	89 c6                	mov    esi,eax
c00059a9:	b8 11 00 00 00       	mov    eax,0x11
c00059ae:	85 f6                	test   esi,esi
c00059b0:	0f 84 27 01 00 00    	je     c0005add <f_sync+0x1d6>
c00059b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ba:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059c3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059c6:	89 da                	mov    edx,ebx
c00059c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059cc:	e8 af df ff ff       	call   c0003980 <load_obj_xdir>
c00059d1:	85 c0                	test   eax,eax
c00059d3:	0f 85 95 00 00 00    	jne    c0005a6e <f_sync+0x167>
c00059d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e0:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059e4:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059e7:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059ea:	83 ca 01             	or     edx,0x1
c00059ed:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059f6:	83 c0 34             	add    eax,0x34
c00059f9:	e8 d9 c2 ff ff       	call   c0001cd7 <st_dword>
c00059fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a08:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a0b:	83 c0 38             	add    eax,0x38
c0005a0e:	e8 c7 c2 ff ff       	call   c0001cda <st_qword>
c0005a13:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a1a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a1d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a20:	83 c0 28             	add    eax,0x28
c0005a23:	e8 b2 c2 ff ff       	call   c0001cda <st_qword>
c0005a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a34:	83 c0 0c             	add    eax,0xc
c0005a37:	e8 9b c2 ff ff       	call   c0001cd7 <st_dword>
c0005a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a40:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a43:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a47:	31 d2                	xor    edx,edx
c0005a49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a4c:	83 c0 10             	add    eax,0x10
c0005a4f:	e8 83 c2 ff ff       	call   c0001cd7 <st_dword>
c0005a54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a58:	e8 62 e1 ff ff       	call   c0003bbf <store_xdir>
c0005a5d:	85 c0                	test   eax,eax
c0005a5f:	75 0d                	jne    c0005a6e <f_sync+0x167>
c0005a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a65:	e8 00 eb ff ff       	call   c000456a <sync_fs>
c0005a6a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a72:	83 ec 0c             	sub    esp,0xc
c0005a75:	56                   	push   esi
c0005a76:	e8 2f 2a 00 00       	call   c00084aa <ff_memfree>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a82:	eb 59                	jmp    c0005add <f_sync+0x1d6>
c0005a84:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a87:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a8a:	e8 b0 c9 ff ff       	call   c000243f <move_window>
c0005a8f:	85 c0                	test   eax,eax
c0005a91:	75 4a                	jne    c0005add <f_sync+0x1d6>
c0005a93:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a96:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a9a:	89 f2                	mov    edx,esi
c0005a9c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa1:	e8 5f f3 ff ff       	call   c0004e05 <st_clust.isra.1>
c0005aa6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aa9:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005aac:	e8 26 c2 ff ff       	call   c0001cd7 <st_dword>
c0005ab1:	8d 46 16             	lea    eax,[esi+0x16]
c0005ab4:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ab9:	e8 19 c2 ff ff       	call   c0001cd7 <st_dword>
c0005abe:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac1:	31 d2                	xor    edx,edx
c0005ac3:	e8 0b c2 ff ff       	call   c0001cd3 <st_word>
c0005ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005acc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	e8 91 ea ff ff       	call   c000456a <sync_fs>
c0005ad9:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005add:	83 c4 64             	add    esp,0x64
c0005ae0:	5b                   	pop    ebx
c0005ae1:	5e                   	pop    esi
c0005ae2:	c3                   	ret    

c0005ae3 <f_close>:
c0005ae3:	53                   	push   ebx
c0005ae4:	83 ec 24             	sub    esp,0x24
c0005ae7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005aeb:	53                   	push   ebx
c0005aec:	e8 16 fe ff ff       	call   c0005907 <f_sync>
c0005af1:	83 c4 10             	add    esp,0x10
c0005af4:	85 c0                	test   eax,eax
c0005af6:	75 15                	jne    c0005b0d <f_close+0x2a>
c0005af8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005afc:	89 d8                	mov    eax,ebx
c0005afe:	e8 61 c8 ff ff       	call   c0002364 <validate>
c0005b03:	85 c0                	test   eax,eax
c0005b05:	75 06                	jne    c0005b0d <f_close+0x2a>
c0005b07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b0d:	83 c4 18             	add    esp,0x18
c0005b10:	5b                   	pop    ebx
c0005b11:	c3                   	ret    

c0005b12 <f_lseek>:
c0005b12:	55                   	push   ebp
c0005b13:	57                   	push   edi
c0005b14:	56                   	push   esi
c0005b15:	53                   	push   ebx
c0005b16:	83 ec 3c             	sub    esp,0x3c
c0005b19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b1d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b21:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b25:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b28:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b2c:	89 d8                	mov    eax,ebx
c0005b2e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b32:	e8 2d c8 ff ff       	call   c0002364 <validate>
c0005b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	0f 85 7a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b43:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b4b:	85 c0                	test   eax,eax
c0005b4d:	0f 85 6a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b57:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b5a:	74 0c                	je     c0005b68 <f_lseek+0x56>
c0005b5c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b5f:	85 c0                	test   eax,eax
c0005b61:	75 1f                	jne    c0005b82 <f_lseek+0x70>
c0005b63:	e9 b5 01 00 00       	jmp    c0005d1d <f_lseek+0x20b>
c0005b68:	83 c9 ff             	or     ecx,0xffffffff
c0005b6b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b6e:	89 d8                	mov    eax,ebx
c0005b70:	e8 e3 d3 ff ff       	call   c0002f58 <fill_last_frag>
c0005b75:	85 c0                	test   eax,eax
c0005b77:	74 e3                	je     c0005b5c <f_lseek+0x4a>
c0005b79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b7d:	e9 3b 04 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005b82:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b87:	0f 85 ac 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b8d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b91:	0f 85 a2 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b97:	8d 78 04             	lea    edi,[eax+0x4]
c0005b9a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b9f:	be 02 00 00 00       	mov    esi,0x2
c0005ba4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ba8:	85 ed                	test   ebp,ebp
c0005baa:	74 73                	je     c0005c1f <f_lseek+0x10d>
c0005bac:	89 e9                	mov    ecx,ebp
c0005bae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bb5:	ff 04 24             	inc    DWORD PTR [esp]
c0005bb8:	89 ca                	mov    edx,ecx
c0005bba:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 02 d4 ff ff       	call   c0002fc7 <get_fat>
c0005bc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bc9:	83 f8 01             	cmp    eax,0x1
c0005bcc:	77 11                	ja     c0005bdf <f_lseek+0xcd>
c0005bce:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bd2:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bda:	e9 de 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bdf:	83 f8 ff             	cmp    eax,0xffffffff
c0005be2:	75 11                	jne    c0005bf5 <f_lseek+0xe3>
c0005be4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005be8:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf0:	e9 c8 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bf5:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bf8:	89 c1                	mov    ecx,eax
c0005bfa:	39 c2                	cmp    edx,eax
c0005bfc:	74 b7                	je     c0005bb5 <f_lseek+0xa3>
c0005bfe:	83 c6 02             	add    esi,0x2
c0005c01:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c05:	72 0b                	jb     c0005c12 <f_lseek+0x100>
c0005c07:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c0a:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c0d:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c0f:	83 c7 08             	add    edi,0x8
c0005c12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c16:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c19:	76 04                	jbe    c0005c1f <f_lseek+0x10d>
c0005c1b:	89 c5                	mov    ebp,eax
c0005c1d:	eb 8d                	jmp    c0005bac <f_lseek+0x9a>
c0005c1f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c22:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c26:	89 30                	mov    DWORD PTR [eax],esi
c0005c28:	0f 87 87 03 00 00    	ja     c0005fb5 <f_lseek+0x4a3>
c0005c2e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c34:	e9 84 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005c39:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c3c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c52:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c56:	73 0f                	jae    c0005c67 <f_lseek+0x155>
c0005c58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c6f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c72:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c79:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c7d:	0f 84 3a 03 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005c83:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c8b:	83 c6 ff             	add    esi,0xffffffff
c0005c8e:	89 d8                	mov    eax,ebx
c0005c90:	83 d7 ff             	adc    edi,0xffffffff
c0005c93:	89 f2                	mov    edx,esi
c0005c95:	89 f9                	mov    ecx,edi
c0005c97:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c9e:	e8 78 c2 ff ff       	call   c0001f1b <clmt_clust>
c0005ca3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ca7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb0:	89 c8                	mov    eax,ecx
c0005cb2:	e8 43 c2 ff ff       	call   c0001efa <clst2sect>
c0005cb7:	89 d7                	mov    edi,edx
c0005cb9:	09 c7                	or     edi,eax
c0005cbb:	0f 84 0d ff ff ff    	je     c0005bce <f_lseek+0xbc>
c0005cc1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005cc5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ccb:	0f 84 ec 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cd1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cd9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cdc:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce0:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ce4:	4d                   	dec    ebp
c0005ce5:	31 ff                	xor    edi,edi
c0005ce7:	21 ee                	and    esi,ebp
c0005ce9:	01 c6                	add    esi,eax
c0005ceb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cee:	11 d7                	adc    edi,edx
c0005cf0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf3:	39 fa                	cmp    edx,edi
c0005cf5:	75 08                	jne    c0005cff <f_lseek+0x1ed>
c0005cf7:	39 f0                	cmp    eax,esi
c0005cf9:	0f 84 be 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cff:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d02:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d06:	0f 89 80 02 00 00    	jns    c0005f8c <f_lseek+0x47a>
c0005d0c:	83 ec 0c             	sub    esp,0xc
c0005d0f:	6a 01                	push   0x1
c0005d11:	52                   	push   edx
c0005d12:	50                   	push   eax
c0005d13:	55                   	push   ebp
c0005d14:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d18:	e9 5a 02 00 00       	jmp    c0005f77 <f_lseek+0x465>
c0005d1d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d21:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d24:	74 16                	je     c0005d3c <f_lseek+0x22a>
c0005d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d2b:	76 0f                	jbe    c0005d3c <f_lseek+0x22a>
c0005d2d:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d34:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d3c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d3f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d42:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d45:	89 c7                	mov    edi,eax
c0005d47:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d4b:	73 0d                	jae    c0005d5a <f_lseek+0x248>
c0005d4d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d51:	75 07                	jne    c0005d5a <f_lseek+0x248>
c0005d53:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d5a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d5d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d60:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d64:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d6b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d72:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d75:	75 09                	jne    c0005d80 <f_lseek+0x26e>
c0005d77:	31 f6                	xor    esi,esi
c0005d79:	31 ff                	xor    edi,edi
c0005d7b:	e9 af 01 00 00       	jmp    c0005f2f <f_lseek+0x41d>
c0005d80:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d84:	89 d7                	mov    edi,edx
c0005d86:	c1 e1 09             	shl    ecx,0x9
c0005d89:	09 c7                	or     edi,eax
c0005d8b:	89 cd                	mov    ebp,ecx
c0005d8d:	74 6d                	je     c0005dfc <f_lseek+0x2ea>
c0005d8f:	83 c0 ff             	add    eax,0xffffffff
c0005d92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d96:	83 d2 ff             	adc    edx,0xffffffff
c0005d99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da0:	83 c0 ff             	add    eax,0xffffffff
c0005da3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005da7:	83 d2 ff             	adc    edx,0xffffffff
c0005daa:	31 ff                	xor    edi,edi
c0005dac:	57                   	push   edi
c0005dad:	51                   	push   ecx
c0005dae:	52                   	push   edx
c0005daf:	50                   	push   eax
c0005db0:	e8 37 0c 02 00       	call   c00269ec <__udivdi3>
c0005db5:	83 c4 10             	add    esp,0x10
c0005db8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc0:	57                   	push   edi
c0005dc1:	55                   	push   ebp
c0005dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dca:	e8 1d 0c 02 00       	call   c00269ec <__udivdi3>
c0005dcf:	83 c4 10             	add    esp,0x10
c0005dd2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dd6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dda:	19 d1                	sbb    ecx,edx
c0005ddc:	72 1e                	jb     c0005dfc <f_lseek+0x2ea>
c0005dde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005de2:	89 e9                	mov    ecx,ebp
c0005de4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005de7:	f7 d9                	neg    ecx
c0005de9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dec:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005df3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005df6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dfa:	eb 28                	jmp    c0005e24 <f_lseek+0x312>
c0005dfc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dff:	85 c0                	test   eax,eax
c0005e01:	75 1e                	jne    c0005e21 <f_lseek+0x30f>
c0005e03:	31 d2                	xor    edx,edx
c0005e05:	89 d8                	mov    eax,ebx
c0005e07:	e8 a9 d4 ff ff       	call   c00032b5 <create_chain>
c0005e0c:	83 f8 01             	cmp    eax,0x1
c0005e0f:	0f 84 b9 fd ff ff    	je     c0005bce <f_lseek+0xbc>
c0005e15:	83 f8 ff             	cmp    eax,0xffffffff
c0005e18:	0f 84 c6 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005e1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e21:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e24:	85 c0                	test   eax,eax
c0005e26:	0f 84 4b ff ff ff    	je     c0005d77 <f_lseek+0x265>
c0005e2c:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e30:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e38:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e3b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e3f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e42:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e45:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e49:	0f 83 9d 00 00 00    	jae    c0005eec <f_lseek+0x3da>
c0005e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e57:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e5a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e5e:	01 f2                	add    edx,esi
c0005e60:	11 f9                	adc    ecx,edi
c0005e62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e6a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e6d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e70:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e73:	f6 c1 02             	test   cl,0x2
c0005e76:	74 35                	je     c0005ead <f_lseek+0x39b>
c0005e78:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e7c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e7f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e82:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e86:	73 16                	jae    c0005e9e <f_lseek+0x38c>
c0005e88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e8c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e90:	88 ca                	mov    dl,cl
c0005e92:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e95:	83 ca 40             	or     edx,0x40
c0005e98:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e9b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e9e:	89 c2                	mov    edx,eax
c0005ea0:	89 d8                	mov    eax,ebx
c0005ea2:	e8 0e d4 ff ff       	call   c00032b5 <create_chain>
c0005ea7:	85 c0                	test   eax,eax
c0005ea9:	75 0b                	jne    c0005eb6 <f_lseek+0x3a4>
c0005eab:	eb 30                	jmp    c0005edd <f_lseek+0x3cb>
c0005ead:	89 c2                	mov    edx,eax
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 11 d1 ff ff       	call   c0002fc7 <get_fat>
c0005eb6:	83 f8 ff             	cmp    eax,0xffffffff
c0005eb9:	0f 84 25 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005ebf:	83 f8 01             	cmp    eax,0x1
c0005ec2:	0f 86 06 fd ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ec8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ecc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ecf:	0f 86 f9 fc ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ed5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ed8:	e9 5b ff ff ff       	jmp    c0005e38 <f_lseek+0x326>
c0005edd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ee4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eef:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ef3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ef6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ef9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005efc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f02:	0f 84 6f fe ff ff    	je     c0005d77 <f_lseek+0x265>
c0005f08:	89 c2                	mov    edx,eax
c0005f0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f0e:	e8 e7 bf ff ff       	call   c0001efa <clst2sect>
c0005f13:	89 d7                	mov    edi,edx
c0005f15:	09 c7                	or     edi,eax
c0005f17:	0f 84 b1 fc ff ff    	je     c0005bce <f_lseek+0xbc>
c0005f1d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f21:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f24:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f28:	c1 ef 09             	shr    edi,0x9
c0005f2b:	01 c6                	add    esi,eax
c0005f2d:	11 d7                	adc    edi,edx
c0005f2f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f32:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f35:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f38:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f3b:	19 d1                	sbb    ecx,edx
c0005f3d:	73 0a                	jae    c0005f49 <f_lseek+0x437>
c0005f3f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f42:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f45:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f49:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f4e:	74 6d                	je     c0005fbd <f_lseek+0x4ab>
c0005f50:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f53:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f56:	39 fa                	cmp    edx,edi
c0005f58:	75 04                	jne    c0005f5e <f_lseek+0x44c>
c0005f5a:	39 f0                	cmp    eax,esi
c0005f5c:	74 5f                	je     c0005fbd <f_lseek+0x4ab>
c0005f5e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f61:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f65:	79 25                	jns    c0005f8c <f_lseek+0x47a>
c0005f67:	83 ec 0c             	sub    esp,0xc
c0005f6a:	6a 01                	push   0x1
c0005f6c:	52                   	push   edx
c0005f6d:	50                   	push   eax
c0005f6e:	55                   	push   ebp
c0005f6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f73:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f77:	50                   	push   eax
c0005f78:	e8 af bc ff ff       	call   c0001c2c <disk_write>
c0005f7d:	83 c4 20             	add    esp,0x20
c0005f80:	85 c0                	test   eax,eax
c0005f82:	0f 85 5c fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005f88:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f8c:	83 ec 0c             	sub    esp,0xc
c0005f8f:	6a 01                	push   0x1
c0005f91:	57                   	push   edi
c0005f92:	56                   	push   esi
c0005f93:	55                   	push   ebp
c0005f94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f98:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f9c:	50                   	push   eax
c0005f9d:	e8 74 bc ff ff       	call   c0001c16 <disk_read>
c0005fa2:	83 c4 20             	add    esp,0x20
c0005fa5:	85 c0                	test   eax,eax
c0005fa7:	0f 85 37 fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005fad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fb3:	eb 08                	jmp    c0005fbd <f_lseek+0x4ab>
c0005fb5:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc1:	83 c4 3c             	add    esp,0x3c
c0005fc4:	5b                   	pop    ebx
c0005fc5:	5e                   	pop    esi
c0005fc6:	5f                   	pop    edi
c0005fc7:	5d                   	pop    ebp
c0005fc8:	c3                   	ret    

c0005fc9 <f_opendir>:
c0005fc9:	56                   	push   esi
c0005fca:	b8 09 00 00 00       	mov    eax,0x9
c0005fcf:	53                   	push   ebx
c0005fd0:	83 ec 24             	sub    esp,0x24
c0005fd3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fd7:	85 db                	test   ebx,ebx
c0005fd9:	0f 84 e6 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c0005fdf:	31 c9                	xor    ecx,ecx
c0005fe1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fe5:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fe9:	e8 03 c7 ff ff       	call   c00026f1 <mount_volume>
c0005fee:	85 c0                	test   eax,eax
c0005ff0:	0f 85 c9 00 00 00    	jne    c00060bf <f_opendir+0xf6>
c0005ff6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ffa:	83 ec 0c             	sub    esp,0xc
c0005ffd:	89 03                	mov    DWORD PTR [ebx],eax
c0005fff:	68 60 04 00 00       	push   0x460
c0006004:	e8 8b 24 00 00       	call   c0008494 <ff_memalloc>
c0006009:	83 c4 10             	add    esp,0x10
c000600c:	89 c6                	mov    esi,eax
c000600e:	b8 11 00 00 00       	mov    eax,0x11
c0006013:	85 f6                	test   esi,esi
c0006015:	0f 84 aa 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c000601b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000601f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006025:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006028:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000602b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000602f:	89 d8                	mov    eax,ebx
c0006031:	e8 31 ee ff ff       	call   c0004e67 <follow_path>
c0006036:	85 c0                	test   eax,eax
c0006038:	75 61                	jne    c000609b <f_opendir+0xd2>
c000603a:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000603e:	78 46                	js     c0006086 <f_opendir+0xbd>
c0006040:	b8 05 00 00 00       	mov    eax,0x5
c0006045:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006049:	74 50                	je     c000609b <f_opendir+0xd2>
c000604b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000604f:	8a 01                	mov    al,BYTE PTR [ecx]
c0006051:	3c 04                	cmp    al,0x4
c0006053:	75 26                	jne    c000607b <f_opendir+0xb2>
c0006055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000605b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000605e:	30 d2                	xor    dl,dl
c0006060:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006064:	09 c2                	or     edx,eax
c0006066:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006069:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000606c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000606f:	89 da                	mov    edx,ebx
c0006071:	8d 41 10             	lea    eax,[ecx+0x10]
c0006074:	e8 b4 ed ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0006079:	eb 0b                	jmp    c0006086 <f_opendir+0xbd>
c000607b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000607e:	e8 59 ed ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006083:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006086:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000608a:	31 d2                	xor    edx,edx
c000608c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006090:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006094:	89 d8                	mov    eax,ebx
c0006096:	e8 22 d1 ff ff       	call   c00031bd <dir_sdi>
c000609b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000609f:	83 ec 0c             	sub    esp,0xc
c00060a2:	56                   	push   esi
c00060a3:	e8 02 24 00 00       	call   c00084aa <ff_memfree>
c00060a8:	83 c4 10             	add    esp,0x10
c00060ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060af:	83 f8 04             	cmp    eax,0x4
c00060b2:	74 06                	je     c00060ba <f_opendir+0xf1>
c00060b4:	85 c0                	test   eax,eax
c00060b6:	74 0d                	je     c00060c5 <f_opendir+0xfc>
c00060b8:	eb 05                	jmp    c00060bf <f_opendir+0xf6>
c00060ba:	b8 05 00 00 00       	mov    eax,0x5
c00060bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060c5:	83 c4 24             	add    esp,0x24
c00060c8:	5b                   	pop    ebx
c00060c9:	5e                   	pop    esi
c00060ca:	c3                   	ret    

c00060cb <f_closedir>:
c00060cb:	53                   	push   ebx
c00060cc:	83 ec 18             	sub    esp,0x18
c00060cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060d3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060d7:	89 d8                	mov    eax,ebx
c00060d9:	e8 86 c2 ff ff       	call   c0002364 <validate>
c00060de:	85 c0                	test   eax,eax
c00060e0:	75 06                	jne    c00060e8 <f_closedir+0x1d>
c00060e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060e8:	83 c4 18             	add    esp,0x18
c00060eb:	5b                   	pop    ebx
c00060ec:	c3                   	ret    

c00060ed <f_readdir>:
c00060ed:	57                   	push   edi
c00060ee:	56                   	push   esi
c00060ef:	53                   	push   ebx
c00060f0:	83 ec 20             	sub    esp,0x20
c00060f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060fb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060ff:	89 d8                	mov    eax,ebx
c0006101:	e8 5e c2 ff ff       	call   c0002364 <validate>
c0006106:	85 c0                	test   eax,eax
c0006108:	75 77                	jne    c0006181 <f_readdir+0x94>
c000610a:	85 ff                	test   edi,edi
c000610c:	75 0b                	jne    c0006119 <f_readdir+0x2c>
c000610e:	31 d2                	xor    edx,edx
c0006110:	89 d8                	mov    eax,ebx
c0006112:	e8 a6 d0 ff ff       	call   c00031bd <dir_sdi>
c0006117:	eb 68                	jmp    c0006181 <f_readdir+0x94>
c0006119:	83 ec 0c             	sub    esp,0xc
c000611c:	68 60 04 00 00       	push   0x460
c0006121:	e8 6e 23 00 00       	call   c0008494 <ff_memalloc>
c0006126:	83 c4 10             	add    esp,0x10
c0006129:	89 c6                	mov    esi,eax
c000612b:	b8 11 00 00 00       	mov    eax,0x11
c0006130:	85 f6                	test   esi,esi
c0006132:	74 4d                	je     c0006181 <f_readdir+0x94>
c0006134:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006138:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000613e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006141:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006144:	31 d2                	xor    edx,edx
c0006146:	89 d8                	mov    eax,ebx
c0006148:	e8 80 d8 ff ff       	call   c00039cd <dir_read>
c000614d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006152:	75 19                	jne    c000616d <f_readdir+0x80>
c0006154:	89 fa                	mov    edx,edi
c0006156:	89 d8                	mov    eax,ebx
c0006158:	e8 7e ea ff ff       	call   c0004bdb <get_fileinfo>
c000615d:	31 d2                	xor    edx,edx
c000615f:	89 d8                	mov    eax,ebx
c0006161:	e8 af d5 ff ff       	call   c0003715 <dir_next>
c0006166:	83 f8 04             	cmp    eax,0x4
c0006169:	75 02                	jne    c000616d <f_readdir+0x80>
c000616b:	31 c0                	xor    eax,eax
c000616d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006171:	83 ec 0c             	sub    esp,0xc
c0006174:	56                   	push   esi
c0006175:	e8 30 23 00 00       	call   c00084aa <ff_memfree>
c000617a:	83 c4 10             	add    esp,0x10
c000617d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006181:	83 c4 20             	add    esp,0x20
c0006184:	5b                   	pop    ebx
c0006185:	5e                   	pop    esi
c0006186:	5f                   	pop    edi
c0006187:	c3                   	ret    

c0006188 <f_stat>:
c0006188:	57                   	push   edi
c0006189:	31 c9                	xor    ecx,ecx
c000618b:	56                   	push   esi
c000618c:	53                   	push   ebx
c000618d:	83 ec 50             	sub    esp,0x50
c0006190:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006194:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006198:	8d 44 24 60          	lea    eax,[esp+0x60]
c000619c:	e8 50 c5 ff ff       	call   c00026f1 <mount_volume>
c00061a1:	89 c3                	mov    ebx,eax
c00061a3:	85 c0                	test   eax,eax
c00061a5:	75 67                	jne    c000620e <f_stat+0x86>
c00061a7:	83 ec 0c             	sub    esp,0xc
c00061aa:	bb 11 00 00 00       	mov    ebx,0x11
c00061af:	68 60 04 00 00       	push   0x460
c00061b4:	e8 db 22 00 00       	call   c0008494 <ff_memalloc>
c00061b9:	83 c4 10             	add    esp,0x10
c00061bc:	89 c6                	mov    esi,eax
c00061be:	85 c0                	test   eax,eax
c00061c0:	74 4c                	je     c000620e <f_stat+0x86>
c00061c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061c6:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061cc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061d2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061d6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061da:	e8 88 ec ff ff       	call   c0004e67 <follow_path>
c00061df:	89 c3                	mov    ebx,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	75 1d                	jne    c0006202 <f_stat+0x7a>
c00061e5:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061ea:	78 11                	js     c00061fd <f_stat+0x75>
c00061ec:	85 ff                	test   edi,edi
c00061ee:	74 12                	je     c0006202 <f_stat+0x7a>
c00061f0:	89 fa                	mov    edx,edi
c00061f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061f6:	e8 e0 e9 ff ff       	call   c0004bdb <get_fileinfo>
c00061fb:	eb 05                	jmp    c0006202 <f_stat+0x7a>
c00061fd:	bb 06 00 00 00       	mov    ebx,0x6
c0006202:	83 ec 0c             	sub    esp,0xc
c0006205:	56                   	push   esi
c0006206:	e8 9f 22 00 00       	call   c00084aa <ff_memfree>
c000620b:	83 c4 10             	add    esp,0x10
c000620e:	83 c4 50             	add    esp,0x50
c0006211:	89 d8                	mov    eax,ebx
c0006213:	5b                   	pop    ebx
c0006214:	5e                   	pop    esi
c0006215:	5f                   	pop    edi
c0006216:	c3                   	ret    

c0006217 <f_getfree>:
c0006217:	55                   	push   ebp
c0006218:	31 c9                	xor    ecx,ecx
c000621a:	57                   	push   edi
c000621b:	56                   	push   esi
c000621c:	53                   	push   ebx
c000621d:	83 ec 5c             	sub    esp,0x5c
c0006220:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006224:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006228:	e8 c4 c4 ff ff       	call   c00026f1 <mount_volume>
c000622d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006231:	85 c0                	test   eax,eax
c0006233:	0f 85 9d 01 00 00    	jne    c00063d6 <f_getfree+0x1bf>
c0006239:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006241:	89 02                	mov    DWORD PTR [edx],eax
c0006243:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006246:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006249:	8d 71 fe             	lea    esi,[ecx-0x2]
c000624c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006250:	39 f2                	cmp    edx,esi
c0006252:	77 0b                	ja     c000625f <f_getfree+0x48>
c0006254:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006258:	89 10                	mov    DWORD PTR [eax],edx
c000625a:	e9 77 01 00 00       	jmp    c00063d6 <f_getfree+0x1bf>
c000625f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006261:	80 fa 01             	cmp    dl,0x1
c0006264:	75 3a                	jne    c00062a0 <f_getfree+0x89>
c0006266:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000626a:	be 02 00 00 00       	mov    esi,0x2
c000626f:	31 db                	xor    ebx,ebx
c0006271:	89 f2                	mov    edx,esi
c0006273:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006277:	e8 4b cd ff ff       	call   c0002fc7 <get_fat>
c000627c:	83 f8 ff             	cmp    eax,0xffffffff
c000627f:	0f 84 28 01 00 00    	je     c00063ad <f_getfree+0x196>
c0006285:	83 f8 01             	cmp    eax,0x1
c0006288:	0f 84 29 01 00 00    	je     c00063b7 <f_getfree+0x1a0>
c000628e:	83 d3 00             	adc    ebx,0x0
c0006291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006295:	46                   	inc    esi
c0006296:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006299:	77 d6                	ja     c0006271 <f_getfree+0x5a>
c000629b:	e9 25 01 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c00062a0:	80 fa 04             	cmp    dl,0x4
c00062a3:	0f 85 88 00 00 00    	jne    c0006331 <f_getfree+0x11a>
c00062a9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062ac:	31 ed                	xor    ebp,ebp
c00062ae:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062b9:	31 db                	xor    ebx,ebx
c00062bb:	85 ed                	test   ebp,ebp
c00062bd:	75 3f                	jne    c00062fe <f_getfree+0xe7>
c00062bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062c7:	83 c0 01             	add    eax,0x1
c00062ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062ce:	83 d2 00             	adc    edx,0x0
c00062d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e1:	e8 59 c1 ff ff       	call   c000243f <move_window>
c00062e6:	85 c0                	test   eax,eax
c00062e8:	0f 85 d3 00 00 00    	jne    c00063c1 <f_getfree+0x1aa>
c00062ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006302:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006305:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006309:	89 cf                	mov    edi,ecx
c000630b:	85 f6                	test   esi,esi
c000630d:	74 12                	je     c0006321 <f_getfree+0x10a>
c000630f:	88 c1                	mov    cl,al
c0006311:	83 e1 01             	and    ecx,0x1
c0006314:	80 f9 01             	cmp    cl,0x1
c0006317:	83 d3 00             	adc    ebx,0x0
c000631a:	d0 e8                	shr    al,1
c000631c:	4e                   	dec    esi
c000631d:	39 fe                	cmp    esi,edi
c000631f:	75 ea                	jne    c000630b <f_getfree+0xf4>
c0006321:	45                   	inc    ebp
c0006322:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006328:	85 f6                	test   esi,esi
c000632a:	75 8f                	jne    c00062bb <f_getfree+0xa4>
c000632c:	e9 94 00 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c0006331:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006334:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006337:	31 f6                	xor    esi,esi
c0006339:	31 db                	xor    ebx,ebx
c000633b:	85 f6                	test   esi,esi
c000633d:	75 1b                	jne    c000635a <f_getfree+0x143>
c000633f:	89 d7                	mov    edi,edx
c0006341:	89 cd                	mov    ebp,ecx
c0006343:	83 c7 01             	add    edi,0x1
c0006346:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634a:	83 d5 00             	adc    ebp,0x0
c000634d:	e8 ed c0 ff ff       	call   c000243f <move_window>
c0006352:	85 c0                	test   eax,eax
c0006354:	75 6b                	jne    c00063c1 <f_getfree+0x1aa>
c0006356:	89 fa                	mov    edx,edi
c0006358:	89 e9                	mov    ecx,ebp
c000635a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000635e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006362:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006366:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006369:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000636d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006371:	75 11                	jne    c0006384 <f_getfree+0x16d>
c0006373:	e8 e9 b8 ff ff       	call   c0001c61 <ld_word>
c0006378:	66 83 f8 01          	cmp    ax,0x1
c000637c:	83 d3 00             	adc    ebx,0x0
c000637f:	83 c6 02             	add    esi,0x2
c0006382:	eb 13                	jmp    c0006397 <f_getfree+0x180>
c0006384:	e8 e5 b8 ff ff       	call   c0001c6e <ld_dword>
c0006389:	25 ff ff ff 0f       	and    eax,0xfffffff
c000638e:	83 f8 01             	cmp    eax,0x1
c0006391:	83 d3 00             	adc    ebx,0x0
c0006394:	83 c6 04             	add    esi,0x4
c0006397:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000639d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063a5:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063a9:	75 90                	jne    c000633b <f_getfree+0x124>
c00063ab:	eb 18                	jmp    c00063c5 <f_getfree+0x1ae>
c00063ad:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063b5:	eb 0e                	jmp    c00063c5 <f_getfree+0x1ae>
c00063b7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063bf:	eb 04                	jmp    c00063c5 <f_getfree+0x1ae>
c00063c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063c5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063c9:	89 18                	mov    DWORD PTR [eax],ebx
c00063cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063cf:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063d2:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063da:	83 c4 5c             	add    esp,0x5c
c00063dd:	5b                   	pop    ebx
c00063de:	5e                   	pop    esi
c00063df:	5f                   	pop    edi
c00063e0:	5d                   	pop    ebp
c00063e1:	c3                   	ret    

c00063e2 <f_truncate>:
c00063e2:	56                   	push   esi
c00063e3:	53                   	push   ebx
c00063e4:	83 ec 14             	sub    esp,0x14
c00063e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063eb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063ef:	89 d8                	mov    eax,ebx
c00063f1:	e8 6e bf ff ff       	call   c0002364 <validate>
c00063f6:	89 c6                	mov    esi,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	0f 85 d2 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c0006400:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006404:	85 f6                	test   esi,esi
c0006406:	0f 85 c6 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c000640c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006410:	0f 84 b7 00 00 00    	je     c00064cd <f_truncate+0xeb>
c0006416:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006419:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000641c:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000641f:	89 d1                	mov    ecx,edx
c0006421:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006424:	0f 83 a8 00 00 00    	jae    c00064d2 <f_truncate+0xf0>
c000642a:	09 c2                	or     edx,eax
c000642c:	75 15                	jne    c0006443 <f_truncate+0x61>
c000642e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006431:	31 c9                	xor    ecx,ecx
c0006433:	89 d8                	mov    eax,ebx
c0006435:	e8 7a d0 ff ff       	call   c00034b4 <remove_chain>
c000643a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006441:	eb 35                	jmp    c0006478 <f_truncate+0x96>
c0006443:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006446:	89 d8                	mov    eax,ebx
c0006448:	e8 7a cb ff ff       	call   c0002fc7 <get_fat>
c000644d:	89 c2                	mov    edx,eax
c000644f:	b8 01 00 00 00       	mov    eax,0x1
c0006454:	83 fa ff             	cmp    edx,0xffffffff
c0006457:	74 1f                	je     c0006478 <f_truncate+0x96>
c0006459:	b8 02 00 00 00       	mov    eax,0x2
c000645e:	83 fa 01             	cmp    edx,0x1
c0006461:	74 15                	je     c0006478 <f_truncate+0x96>
c0006463:	31 c0                	xor    eax,eax
c0006465:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006469:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000646c:	76 0a                	jbe    c0006478 <f_truncate+0x96>
c000646e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006471:	89 d8                	mov    eax,ebx
c0006473:	e8 3c d0 ff ff       	call   c00034b4 <remove_chain>
c0006478:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000647b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000647e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006481:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006484:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006487:	83 ca 40             	or     edx,0x40
c000648a:	85 c0                	test   eax,eax
c000648c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000648f:	75 35                	jne    c00064c6 <f_truncate+0xe4>
c0006491:	84 d2                	test   dl,dl
c0006493:	79 3d                	jns    c00064d2 <f_truncate+0xf0>
c0006495:	83 ec 0c             	sub    esp,0xc
c0006498:	8d 43 50             	lea    eax,[ebx+0x50]
c000649b:	6a 01                	push   0x1
c000649d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064a3:	50                   	push   eax
c00064a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064a8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064ac:	50                   	push   eax
c00064ad:	e8 7a b7 ff ff       	call   c0001c2c <disk_write>
c00064b2:	83 c4 20             	add    esp,0x20
c00064b5:	85 c0                	test   eax,eax
c00064b7:	75 08                	jne    c00064c1 <f_truncate+0xdf>
c00064b9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064bd:	31 f6                	xor    esi,esi
c00064bf:	eb 11                	jmp    c00064d2 <f_truncate+0xf0>
c00064c1:	b8 01 00 00 00       	mov    eax,0x1
c00064c6:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064c9:	89 c6                	mov    esi,eax
c00064cb:	eb 05                	jmp    c00064d2 <f_truncate+0xf0>
c00064cd:	be 07 00 00 00       	mov    esi,0x7
c00064d2:	89 f0                	mov    eax,esi
c00064d4:	83 c4 14             	add    esp,0x14
c00064d7:	5b                   	pop    ebx
c00064d8:	5e                   	pop    esi
c00064d9:	c3                   	ret    

c00064da <f_unlink>:
c00064da:	56                   	push   esi
c00064db:	b9 02 00 00 00       	mov    ecx,0x2
c00064e0:	53                   	push   ebx
c00064e1:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064eb:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064f2:	e8 fa c1 ff ff       	call   c00026f1 <mount_volume>
c00064f7:	85 c0                	test   eax,eax
c00064f9:	0f 85 55 01 00 00    	jne    c0006654 <f_unlink+0x17a>
c00064ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006503:	83 ec 0c             	sub    esp,0xc
c0006506:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000650a:	68 60 04 00 00       	push   0x460
c000650f:	e8 80 1f 00 00       	call   c0008494 <ff_memalloc>
c0006514:	83 c4 10             	add    esp,0x10
c0006517:	89 c3                	mov    ebx,eax
c0006519:	b8 11 00 00 00       	mov    eax,0x11
c000651e:	85 db                	test   ebx,ebx
c0006520:	0f 84 2e 01 00 00    	je     c0006654 <f_unlink+0x17a>
c0006526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000652a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006530:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006533:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006536:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000653d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006541:	e8 21 e9 ff ff       	call   c0004e67 <follow_path>
c0006546:	85 c0                	test   eax,eax
c0006548:	0f 85 f2 00 00 00    	jne    c0006640 <f_unlink+0x166>
c000654e:	b8 06 00 00 00       	mov    eax,0x6
c0006553:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000655b:	0f 88 df 00 00 00    	js     c0006640 <f_unlink+0x166>
c0006561:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006566:	74 0a                	je     c0006572 <f_unlink+0x98>
c0006568:	b8 07 00 00 00       	mov    eax,0x7
c000656d:	e9 ce 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c0006572:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006576:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000657a:	8a 02                	mov    al,BYTE PTR [edx]
c000657c:	3c 04                	cmp    al,0x4
c000657e:	75 12                	jne    c0006592 <f_unlink+0xb8>
c0006580:	8d 42 10             	lea    eax,[edx+0x10]
c0006583:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006587:	e8 a1 e8 ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c000658c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006590:	eb 0e                	jmp    c00065a0 <f_unlink+0xc6>
c0006592:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006599:	e8 3e e8 ff ff       	call   c0004ddc <ld_clust.isra.0>
c000659e:	89 c6                	mov    esi,eax
c00065a0:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065a5:	75 12                	jne    c00065b9 <f_unlink+0xdf>
c00065a7:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065ab:	e8 94 d6 ff ff       	call   c0003c44 <dir_remove>
c00065b0:	85 c0                	test   eax,eax
c00065b2:	74 6c                	je     c0006620 <f_unlink+0x146>
c00065b4:	e9 87 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c00065b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065bd:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065c4:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065cb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065ce:	75 21                	jne    c00065f1 <f_unlink+0x117>
c00065d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065d8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065df:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065e6:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065ea:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f1:	31 d2                	xor    edx,edx
c00065f3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065fa:	e8 be cb ff ff       	call   c00031bd <dir_sdi>
c00065ff:	85 c0                	test   eax,eax
c0006601:	75 3d                	jne    c0006640 <f_unlink+0x166>
c0006603:	31 d2                	xor    edx,edx
c0006605:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000660c:	e8 bc d3 ff ff       	call   c00039cd <dir_read>
c0006611:	85 c0                	test   eax,eax
c0006613:	0f 84 4f ff ff ff    	je     c0006568 <f_unlink+0x8e>
c0006619:	83 f8 04             	cmp    eax,0x4
c000661c:	75 22                	jne    c0006640 <f_unlink+0x166>
c000661e:	eb 87                	jmp    c00065a7 <f_unlink+0xcd>
c0006620:	85 f6                	test   esi,esi
c0006622:	75 0b                	jne    c000662f <f_unlink+0x155>
c0006624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006628:	e8 3d df ff ff       	call   c000456a <sync_fs>
c000662d:	eb 11                	jmp    c0006640 <f_unlink+0x166>
c000662f:	31 c9                	xor    ecx,ecx
c0006631:	89 f2                	mov    edx,esi
c0006633:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006637:	e8 78 ce ff ff       	call   c00034b4 <remove_chain>
c000663c:	85 c0                	test   eax,eax
c000663e:	74 e4                	je     c0006624 <f_unlink+0x14a>
c0006640:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006644:	83 ec 0c             	sub    esp,0xc
c0006647:	53                   	push   ebx
c0006648:	e8 5d 1e 00 00       	call   c00084aa <ff_memfree>
c000664d:	83 c4 10             	add    esp,0x10
c0006650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006654:	81 c4 e4 00 00 00    	add    esp,0xe4
c000665a:	5b                   	pop    ebx
c000665b:	5e                   	pop    esi
c000665c:	c3                   	ret    

c000665d <f_mkdir>:
c000665d:	57                   	push   edi
c000665e:	b9 02 00 00 00       	mov    ecx,0x2
c0006663:	56                   	push   esi
c0006664:	53                   	push   ebx
c0006665:	83 c4 80             	add    esp,0xffffff80
c0006668:	8d 54 24 08          	lea    edx,[esp+0x8]
c000666c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006673:	e8 79 c0 ff ff       	call   c00026f1 <mount_volume>
c0006678:	89 c3                	mov    ebx,eax
c000667a:	85 c0                	test   eax,eax
c000667c:	0f 85 fe 01 00 00    	jne    c0006880 <f_mkdir+0x223>
c0006682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006686:	bb 11 00 00 00       	mov    ebx,0x11
c000668b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000668f:	83 ec 0c             	sub    esp,0xc
c0006692:	68 60 04 00 00       	push   0x460
c0006697:	e8 f8 1d 00 00       	call   c0008494 <ff_memalloc>
c000669c:	83 c4 10             	add    esp,0x10
c000669f:	89 c7                	mov    edi,eax
c00066a1:	85 c0                	test   eax,eax
c00066a3:	0f 84 d7 01 00 00    	je     c0006880 <f_mkdir+0x223>
c00066a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ad:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066b3:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066b9:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066c4:	e8 9e e7 ff ff       	call   c0004e67 <follow_path>
c00066c9:	89 c3                	mov    ebx,eax
c00066cb:	85 c0                	test   eax,eax
c00066cd:	74 3e                	je     c000670d <f_mkdir+0xb0>
c00066cf:	83 f8 04             	cmp    eax,0x4
c00066d2:	75 3e                	jne    c0006712 <f_mkdir+0xb5>
c00066d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d8:	31 d2                	xor    edx,edx
c00066da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e2:	e8 ce cb ff ff       	call   c00032b5 <create_chain>
c00066e7:	89 c6                	mov    esi,eax
c00066e9:	85 c0                	test   eax,eax
c00066eb:	74 0c                	je     c00066f9 <f_mkdir+0x9c>
c00066ed:	bb 02 00 00 00       	mov    ebx,0x2
c00066f2:	83 f8 01             	cmp    eax,0x1
c00066f5:	74 07                	je     c00066fe <f_mkdir+0xa1>
c00066f7:	eb 2a                	jmp    c0006723 <f_mkdir+0xc6>
c00066f9:	bb 07 00 00 00       	mov    ebx,0x7
c00066fe:	31 c9                	xor    ecx,ecx
c0006700:	89 f2                	mov    edx,esi
c0006702:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006706:	e8 a9 cd ff ff       	call   c00034b4 <remove_chain>
c000670b:	eb 05                	jmp    c0006712 <f_mkdir+0xb5>
c000670d:	bb 08 00 00 00       	mov    ebx,0x8
c0006712:	83 ec 0c             	sub    esp,0xc
c0006715:	57                   	push   edi
c0006716:	e8 8f 1d 00 00       	call   c00084aa <ff_memfree>
c000671b:	83 c4 10             	add    esp,0x10
c000671e:	e9 5d 01 00 00       	jmp    c0006880 <f_mkdir+0x223>
c0006723:	bb 01 00 00 00       	mov    ebx,0x1
c0006728:	83 f8 ff             	cmp    eax,0xffffffff
c000672b:	74 d1                	je     c00066fe <f_mkdir+0xa1>
c000672d:	89 f2                	mov    edx,esi
c000672f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006733:	e8 c4 ce ff ff       	call   c00035fc <dir_clear>
c0006738:	89 c3                	mov    ebx,eax
c000673a:	85 c0                	test   eax,eax
c000673c:	75 c0                	jne    c00066fe <f_mkdir+0xa1>
c000673e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006742:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006745:	74 69                	je     c00067b0 <f_mkdir+0x153>
c0006747:	b9 0b 00 00 00       	mov    ecx,0xb
c000674c:	83 c0 54             	add    eax,0x54
c000674f:	ba 20 00 00 00       	mov    edx,0x20
c0006754:	e8 9c b5 ff ff       	call   c0001cf5 <mem_set>
c0006759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006762:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006766:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000676a:	83 c0 6a             	add    eax,0x6a
c000676d:	e8 65 b5 ff ff       	call   c0001cd7 <st_dword>
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	89 f1                	mov    ecx,esi
c0006778:	8d 50 54             	lea    edx,[eax+0x54]
c000677b:	e8 85 e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006784:	b9 20 00 00 00       	mov    ecx,0x20
c0006789:	8d 50 54             	lea    edx,[eax+0x54]
c000678c:	83 c0 74             	add    eax,0x74
c000678f:	e8 4c b5 ff ff       	call   c0001ce0 <mem_cpy>
c0006794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006798:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000679c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a0:	8d 50 74             	lea    edx,[eax+0x74]
c00067a3:	e8 5d e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c00067a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ac:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067b4:	e8 2f db ff ff       	call   c00042e8 <dir_register>
c00067b9:	89 c3                	mov    ebx,eax
c00067bb:	85 c0                	test   eax,eax
c00067bd:	0f 85 3b ff ff ff    	jne    c00066fe <f_mkdir+0xa1>
c00067c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ca:	75 74                	jne    c0006840 <f_mkdir+0x1e3>
c00067cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cf:	ba 00 00 21 50       	mov    edx,0x50210000
c00067d4:	83 c0 0c             	add    eax,0xc
c00067d7:	e8 fb b4 ff ff       	call   c0001cd7 <st_dword>
c00067dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e0:	89 f2                	mov    edx,esi
c00067e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e5:	83 c0 34             	add    eax,0x34
c00067e8:	e8 ea b4 ff ff       	call   c0001cd7 <st_dword>
c00067ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f8:	c1 e2 09             	shl    edx,0x9
c00067fb:	83 c0 38             	add    eax,0x38
c00067fe:	e8 d4 b4 ff ff       	call   c0001cd7 <st_dword>
c0006803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006807:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000680b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000680e:	c1 e2 09             	shl    edx,0x9
c0006811:	83 c0 28             	add    eax,0x28
c0006814:	e8 be b4 ff ff       	call   c0001cd7 <st_dword>
c0006819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006824:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006827:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000682b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000682f:	e8 8b d3 ff ff       	call   c0003bbf <store_xdir>
c0006834:	89 c3                	mov    ebx,eax
c0006836:	85 c0                	test   eax,eax
c0006838:	0f 85 d4 fe ff ff    	jne    c0006712 <f_mkdir+0xb5>
c000683e:	eb 30                	jmp    c0006870 <f_mkdir+0x213>
c0006840:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006844:	ba 00 00 21 50       	mov    edx,0x50210000
c0006849:	83 c0 16             	add    eax,0x16
c000684c:	e8 86 b4 ff ff       	call   c0001cd7 <st_dword>
c0006851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006855:	89 f1                	mov    ecx,esi
c0006857:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000685b:	e8 a5 e5 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006860:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006864:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000686c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	e8 f1 dc ff ff       	call   c000456a <sync_fs>
c0006879:	89 c3                	mov    ebx,eax
c000687b:	e9 92 fe ff ff       	jmp    c0006712 <f_mkdir+0xb5>
c0006880:	83 ec 80             	sub    esp,0xffffff80
c0006883:	89 d8                	mov    eax,ebx
c0006885:	5b                   	pop    ebx
c0006886:	5e                   	pop    esi
c0006887:	5f                   	pop    edi
c0006888:	c3                   	ret    

c0006889 <f_rename>:
c0006889:	55                   	push   ebp
c000688a:	57                   	push   edi
c000688b:	56                   	push   esi
c000688c:	53                   	push   ebx
c000688d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006893:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000689a:	e8 a4 b9 ff ff       	call   c0002243 <get_ldnumber>
c000689f:	b9 02 00 00 00       	mov    ecx,0x2
c00068a4:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068a8:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068af:	e8 3d be ff ff       	call   c00026f1 <mount_volume>
c00068b4:	85 c0                	test   eax,eax
c00068b6:	0f 85 b5 02 00 00    	jne    c0006b71 <f_rename+0x2e8>
c00068bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c0:	83 ec 0c             	sub    esp,0xc
c00068c3:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068c7:	68 60 04 00 00       	push   0x460
c00068cc:	e8 c3 1b 00 00       	call   c0008494 <ff_memalloc>
c00068d1:	83 c4 10             	add    esp,0x10
c00068d4:	89 c3                	mov    ebx,eax
c00068d6:	b8 11 00 00 00       	mov    eax,0x11
c00068db:	85 db                	test   ebx,ebx
c00068dd:	0f 84 8e 02 00 00    	je     c0006b71 <f_rename+0x2e8>
c00068e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e7:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068ed:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068f3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068fa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fe:	e8 64 e5 ff ff       	call   c0004e67 <follow_path>
c0006903:	85 c0                	test   eax,eax
c0006905:	0f 85 52 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000690b:	b8 06 00 00 00       	mov    eax,0x6
c0006910:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006918:	0f 85 3f 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000691e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006922:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006925:	0f 85 05 01 00 00    	jne    c0006a30 <f_rename+0x1a7>
c000692b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000692e:	b9 40 00 00 00       	mov    ecx,0x40
c0006933:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006937:	e8 a4 b3 ff ff       	call   c0001ce0 <mem_cpy>
c000693c:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006941:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006945:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694c:	e8 8f b3 ff ff       	call   c0001ce0 <mem_cpy>
c0006951:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 03 e5 ff ff       	call   c0004e67 <follow_path>
c0006964:	85 c0                	test   eax,eax
c0006966:	75 29                	jne    c0006991 <f_rename+0x108>
c0006968:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006973:	74 0a                	je     c000697f <f_rename+0xf6>
c0006975:	b8 08 00 00 00       	mov    eax,0x8
c000697a:	e9 de 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c000697f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006986:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698d:	75 e6                	jne    c0006975 <f_rename+0xec>
c000698f:	eb 09                	jmp    c000699a <f_rename+0x111>
c0006991:	83 f8 04             	cmp    eax,0x4
c0006994:	0f 85 c3 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000699a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a1:	e8 42 d9 ff ff       	call   c00042e8 <dir_register>
c00069a6:	85 c0                	test   eax,eax
c00069a8:	0f 85 af 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c00069ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069b5:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069b8:	89 c5                	mov    ebp,eax
c00069ba:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069bd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c1:	8d 46 24             	lea    eax,[esi+0x24]
c00069c4:	e8 98 b2 ff ff       	call   c0001c61 <ld_word>
c00069c9:	b9 40 00 00 00       	mov    ecx,0x40
c00069ce:	89 c7                	mov    edi,eax
c00069d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069d4:	89 f0                	mov    eax,esi
c00069d6:	e8 05 b3 ff ff       	call   c0001ce0 <mem_cpy>
c00069db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069df:	89 e9                	mov    ecx,ebp
c00069e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069e4:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069e7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ef:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069f2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069f5:	0f b7 d7             	movzx  edx,di
c00069f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069fb:	83 c0 24             	add    eax,0x24
c00069fe:	e8 d0 b2 ff ff       	call   c0001cd3 <st_word>
c0006a03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a07:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a0a:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a0d:	a8 10                	test   al,0x10
c0006a0f:	75 06                	jne    c0006a17 <f_rename+0x18e>
c0006a11:	83 c8 20             	or     eax,0x20
c0006a14:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a17:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1e:	e8 9c d1 ff ff       	call   c0003bbf <store_xdir>
c0006a23:	85 c0                	test   eax,eax
c0006a25:	0f 84 1c 01 00 00    	je     c0006b47 <f_rename+0x2be>
c0006a2b:	e9 2d 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c0006a30:	b9 20 00 00 00       	mov    ecx,0x20
c0006a35:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a40:	e8 9b b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a45:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a4a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a4e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a55:	e8 86 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a5a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a61:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a68:	e8 fa e3 ff ff       	call   c0004e67 <follow_path>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	75 27                	jne    c0006a98 <f_rename+0x20f>
c0006a71:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a75:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a7c:	0f 85 f3 fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a82:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a89:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a90:	0f 85 df fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a96:	eb 09                	jmp    c0006aa1 <f_rename+0x218>
c0006a98:	83 f8 04             	cmp    eax,0x4
c0006a9b:	0f 85 bc 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006aa1:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006aa8:	e8 3b d8 ff ff       	call   c00042e8 <dir_register>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	0f 85 a8 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006ab5:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006abc:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac1:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ac4:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ac8:	e8 13 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006acd:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad1:	a8 10                	test   al,0x10
c0006ad3:	75 03                	jne    c0006ad8 <f_rename+0x24f>
c0006ad5:	83 c8 20             	or     eax,0x20
c0006ad8:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006adb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006adf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ae3:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ae7:	74 5e                	je     c0006b47 <f_rename+0x2be>
c0006ae9:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006af4:	74 51                	je     c0006b47 <f_rename+0x2be>
c0006af6:	89 f2                	mov    edx,esi
c0006af8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006afc:	8a 07                	mov    al,BYTE PTR [edi]
c0006afe:	e8 d9 e2 ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006b03:	89 c2                	mov    edx,eax
c0006b05:	89 f8                	mov    eax,edi
c0006b07:	e8 ee b3 ff ff       	call   c0001efa <clst2sect>
c0006b0c:	89 c6                	mov    esi,eax
c0006b0e:	89 d1                	mov    ecx,edx
c0006b10:	b8 02 00 00 00       	mov    eax,0x2
c0006b15:	09 f2                	or     edx,esi
c0006b17:	74 44                	je     c0006b5d <f_rename+0x2d4>
c0006b19:	89 f2                	mov    edx,esi
c0006b1b:	89 f8                	mov    eax,edi
c0006b1d:	e8 1d b9 ff ff       	call   c000243f <move_window>
c0006b22:	85 c0                	test   eax,eax
c0006b24:	75 37                	jne    c0006b5d <f_rename+0x2d4>
c0006b26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b2a:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b2e:	75 17                	jne    c0006b47 <f_rename+0x2be>
c0006b30:	8d 50 74             	lea    edx,[eax+0x74]
c0006b33:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b3a:	e8 c6 e2 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006b3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b43:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b47:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b4b:	e8 f4 d0 ff ff       	call   c0003c44 <dir_remove>
c0006b50:	85 c0                	test   eax,eax
c0006b52:	75 09                	jne    c0006b5d <f_rename+0x2d4>
c0006b54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b58:	e8 0d da ff ff       	call   c000456a <sync_fs>
c0006b5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b61:	83 ec 0c             	sub    esp,0xc
c0006b64:	53                   	push   ebx
c0006b65:	e8 40 19 00 00       	call   c00084aa <ff_memfree>
c0006b6a:	83 c4 10             	add    esp,0x10
c0006b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b71:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b77:	5b                   	pop    ebx
c0006b78:	5e                   	pop    esi
c0006b79:	5f                   	pop    edi
c0006b7a:	5d                   	pop    ebp
c0006b7b:	c3                   	ret    

c0006b7c <f_chmod>:
c0006b7c:	57                   	push   edi
c0006b7d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b82:	56                   	push   esi
c0006b83:	53                   	push   ebx
c0006b84:	83 ec 60             	sub    esp,0x60
c0006b87:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b8b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b8f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b93:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b97:	e8 55 bb ff ff       	call   c00026f1 <mount_volume>
c0006b9c:	85 c0                	test   eax,eax
c0006b9e:	0f 85 af 00 00 00    	jne    c0006c53 <f_chmod+0xd7>
c0006ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba8:	83 ec 0c             	sub    esp,0xc
c0006bab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006baf:	68 60 04 00 00       	push   0x460
c0006bb4:	e8 db 18 00 00       	call   c0008494 <ff_memalloc>
c0006bb9:	83 c4 10             	add    esp,0x10
c0006bbc:	89 c6                	mov    esi,eax
c0006bbe:	b8 11 00 00 00       	mov    eax,0x11
c0006bc3:	85 f6                	test   esi,esi
c0006bc5:	0f 84 88 00 00 00    	je     c0006c53 <f_chmod+0xd7>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bdb:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bdf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be3:	e8 7f e2 ff ff       	call   c0004e67 <follow_path>
c0006be8:	85 c0                	test   eax,eax
c0006bea:	75 53                	jne    c0006c3f <f_chmod+0xc3>
c0006bec:	b8 06 00 00 00       	mov    eax,0x6
c0006bf1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bf6:	75 47                	jne    c0006c3f <f_chmod+0xc3>
c0006bf8:	89 f9                	mov    ecx,edi
c0006bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfe:	83 e1 27             	and    ecx,0x27
c0006c01:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c04:	75 1d                	jne    c0006c23 <f_chmod+0xa7>
c0006c06:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c09:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c0c:	21 cb                	and    ebx,ecx
c0006c0e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c11:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c14:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c18:	e8 a2 cf ff ff       	call   c0003bbf <store_xdir>
c0006c1d:	85 c0                	test   eax,eax
c0006c1f:	75 1e                	jne    c0006c3f <f_chmod+0xc3>
c0006c21:	eb 13                	jmp    c0006c36 <f_chmod+0xba>
c0006c23:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c27:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2a:	21 cb                	and    ebx,ecx
c0006c2c:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2f:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c32:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	e8 2b d9 ff ff       	call   c000456a <sync_fs>
c0006c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	56                   	push   esi
c0006c47:	e8 5e 18 00 00       	call   c00084aa <ff_memfree>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c53:	83 c4 60             	add    esp,0x60
c0006c56:	5b                   	pop    ebx
c0006c57:	5e                   	pop    esi
c0006c58:	5f                   	pop    edi
c0006c59:	c3                   	ret    

c0006c5a <f_utime>:
c0006c5a:	56                   	push   esi
c0006c5b:	b9 02 00 00 00       	mov    ecx,0x2
c0006c60:	53                   	push   ebx
c0006c61:	83 ec 64             	sub    esp,0x64
c0006c64:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c68:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c70:	e8 7c ba ff ff       	call   c00026f1 <mount_volume>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	0f 85 b5 00 00 00    	jne    c0006d32 <f_utime+0xd8>
c0006c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c81:	83 ec 0c             	sub    esp,0xc
c0006c84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c88:	68 60 04 00 00       	push   0x460
c0006c8d:	e8 02 18 00 00       	call   c0008494 <ff_memalloc>
c0006c92:	83 c4 10             	add    esp,0x10
c0006c95:	89 c3                	mov    ebx,eax
c0006c97:	b8 11 00 00 00       	mov    eax,0x11
c0006c9c:	85 db                	test   ebx,ebx
c0006c9e:	0f 84 8e 00 00 00    	je     c0006d32 <f_utime+0xd8>
c0006ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cae:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cb4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 a6 e1 ff ff       	call   c0004e67 <follow_path>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 59                	jne    c0006d1e <f_utime+0xc4>
c0006cc5:	b8 06 00 00 00       	mov    eax,0x6
c0006cca:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ccf:	75 4d                	jne    c0006d1e <f_utime+0xc4>
c0006cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd5:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cd9:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cdd:	c1 e2 10             	shl    edx,0x10
c0006ce0:	09 ca                	or     edx,ecx
c0006ce2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ce5:	75 1a                	jne    c0006d01 <f_utime+0xa7>
c0006ce7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cea:	83 c0 0c             	add    eax,0xc
c0006ced:	e8 e5 af ff ff       	call   c0001cd7 <st_dword>
c0006cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cf6:	e8 c4 ce ff ff       	call   c0003bbf <store_xdir>
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	75 1f                	jne    c0006d1e <f_utime+0xc4>
c0006cff:	eb 14                	jmp    c0006d15 <f_utime+0xbb>
c0006d01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d05:	83 c0 16             	add    eax,0x16
c0006d08:	e8 ca af ff ff       	call   c0001cd7 <st_dword>
c0006d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d11:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	e8 4c d8 ff ff       	call   c000456a <sync_fs>
c0006d1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d22:	83 ec 0c             	sub    esp,0xc
c0006d25:	53                   	push   ebx
c0006d26:	e8 7f 17 00 00       	call   c00084aa <ff_memfree>
c0006d2b:	83 c4 10             	add    esp,0x10
c0006d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d32:	83 c4 64             	add    esp,0x64
c0006d35:	5b                   	pop    ebx
c0006d36:	5e                   	pop    esi
c0006d37:	c3                   	ret    

c0006d38 <f_getlabel>:
c0006d38:	55                   	push   ebp
c0006d39:	31 c9                	xor    ecx,ecx
c0006d3b:	57                   	push   edi
c0006d3c:	56                   	push   esi
c0006d3d:	53                   	push   ebx
c0006d3e:	83 ec 6c             	sub    esp,0x6c
c0006d41:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d45:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d4c:	e8 a0 b9 ff ff       	call   c00026f1 <mount_volume>
c0006d51:	89 c6                	mov    esi,eax
c0006d53:	85 c0                	test   eax,eax
c0006d55:	0f 85 c1 01 00 00    	jne    c0006f1c <f_getlabel+0x1e4>
c0006d5b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d63:	0f 84 5f 01 00 00    	je     c0006ec8 <f_getlabel+0x190>
c0006d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6d:	31 d2                	xor    edx,edx
c0006d6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d7f:	e8 39 c4 ff ff       	call   c00031bd <dir_sdi>
c0006d84:	85 c0                	test   eax,eax
c0006d86:	0f 85 2d 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006d8c:	ba 01 00 00 00       	mov    edx,0x1
c0006d91:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d95:	e8 33 cc ff ff       	call   c00039cd <dir_read>
c0006d9a:	85 c0                	test   eax,eax
c0006d9c:	0f 85 17 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006da6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006da9:	74 09                	je     c0006db4 <f_getlabel+0x7c>
c0006dab:	31 db                	xor    ebx,ebx
c0006dad:	31 c9                	xor    ecx,ecx
c0006daf:	e9 c8 00 00 00       	jmp    c0006e7c <f_getlabel+0x144>
c0006db4:	31 ed                	xor    ebp,ebp
c0006db6:	31 db                	xor    ebx,ebx
c0006db8:	31 ff                	xor    edi,edi
c0006dba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dc2:	39 fa                	cmp    edx,edi
c0006dc4:	76 4b                	jbe    c0006e11 <f_getlabel+0xd9>
c0006dc6:	47                   	inc    edi
c0006dc7:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dca:	01 d0                	add    eax,edx
c0006dcc:	e8 90 ae ff ff       	call   c0001c61 <ld_word>
c0006dd1:	66 85 ed             	test   bp,bp
c0006dd4:	75 0d                	jne    c0006de3 <f_getlabel+0xab>
c0006dd6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ddc:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de1:	76 28                	jbe    c0006e0b <f_getlabel+0xd3>
c0006de3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dea:	89 e9                	mov    ecx,ebp
c0006dec:	01 da                	add    edx,ebx
c0006dee:	c1 e1 10             	shl    ecx,0x10
c0006df1:	0f b7 c0             	movzx  eax,ax
c0006df4:	09 c8                	or     eax,ecx
c0006df6:	b9 04 00 00 00       	mov    ecx,0x4
c0006dfb:	e8 01 b0 ff ff       	call   c0001e01 <put_utf>
c0006e00:	84 c0                	test   al,al
c0006e02:	74 0b                	je     c0006e0f <f_getlabel+0xd7>
c0006e04:	0f b6 c0             	movzx  eax,al
c0006e07:	01 c3                	add    ebx,eax
c0006e09:	31 c0                	xor    eax,eax
c0006e0b:	89 c5                	mov    ebp,eax
c0006e0d:	eb ab                	jmp    c0006dba <f_getlabel+0x82>
c0006e0f:	31 db                	xor    ebx,ebx
c0006e11:	66 85 ed             	test   bp,bp
c0006e14:	74 02                	je     c0006e18 <f_getlabel+0xe0>
c0006e16:	31 db                	xor    ebx,ebx
c0006e18:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e1f:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e23:	e9 a0 00 00 00       	jmp    c0006ec8 <f_getlabel+0x190>
c0006e28:	83 ff 0b             	cmp    edi,0xb
c0006e2b:	74 11                	je     c0006e3e <f_getlabel+0x106>
c0006e2d:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e36:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e39:	c1 e0 08             	shl    eax,0x8
c0006e3c:	09 c2                	or     edx,eax
c0006e3e:	0f b7 d2             	movzx  edx,dx
c0006e41:	50                   	push   eax
c0006e42:	50                   	push   eax
c0006e43:	68 b5 01 00 00       	push   0x1b5
c0006e48:	52                   	push   edx
c0006e49:	e8 03 17 00 00       	call   c0008551 <ff_oem2uni>
c0006e4e:	83 c4 10             	add    esp,0x10
c0006e51:	66 85 c0             	test   ax,ax
c0006e54:	74 46                	je     c0006e9c <f_getlabel+0x164>
c0006e56:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e5d:	0f b7 c0             	movzx  eax,ax
c0006e60:	01 da                	add    edx,ebx
c0006e62:	b9 04 00 00 00       	mov    ecx,0x4
c0006e67:	e8 95 af ff ff       	call   c0001e01 <put_utf>
c0006e6c:	84 c0                	test   al,al
c0006e6e:	74 2c                	je     c0006e9c <f_getlabel+0x164>
c0006e70:	0f b6 c0             	movzx  eax,al
c0006e73:	01 c3                	add    ebx,eax
c0006e75:	83 ff 0b             	cmp    edi,0xb
c0006e78:	74 24                	je     c0006e9e <f_getlabel+0x166>
c0006e7a:	89 f9                	mov    ecx,edi
c0006e7c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e80:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e83:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e88:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e91:	e8 9f ae ff ff       	call   c0001d35 <dbc_1st>
c0006e96:	85 c0                	test   eax,eax
c0006e98:	74 a4                	je     c0006e3e <f_getlabel+0x106>
c0006e9a:	eb 8c                	jmp    c0006e28 <f_getlabel+0xf0>
c0006e9c:	31 db                	xor    ebx,ebx
c0006e9e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ea5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ea8:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eaf:	74 17                	je     c0006ec8 <f_getlabel+0x190>
c0006eb1:	4b                   	dec    ebx
c0006eb2:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006eb5:	74 ee                	je     c0006ea5 <f_getlabel+0x16d>
c0006eb7:	eb 0f                	jmp    c0006ec8 <f_getlabel+0x190>
c0006eb9:	83 f8 04             	cmp    eax,0x4
c0006ebc:	75 5c                	jne    c0006f1a <f_getlabel+0x1e2>
c0006ebe:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ec5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ec8:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed0:	74 4a                	je     c0006f1c <f_getlabel+0x1e4>
c0006ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ed9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006edc:	e8 5e b5 ff ff       	call   c000243f <move_window>
c0006ee1:	89 c6                	mov    esi,eax
c0006ee3:	85 c0                	test   eax,eax
c0006ee5:	75 35                	jne    c0006f1c <f_getlabel+0x1e4>
c0006ee7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eeb:	b8 43 00 00 00       	mov    eax,0x43
c0006ef0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ef2:	80 f9 03             	cmp    cl,0x3
c0006ef5:	74 0f                	je     c0006f06 <f_getlabel+0x1ce>
c0006ef7:	31 c0                	xor    eax,eax
c0006ef9:	80 f9 04             	cmp    cl,0x4
c0006efc:	0f 94 c0             	sete   al
c0006eff:	48                   	dec    eax
c0006f00:	83 e0 c3             	and    eax,0xffffffc3
c0006f03:	83 c0 64             	add    eax,0x64
c0006f06:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f0a:	e8 5f ad ff ff       	call   c0001c6e <ld_dword>
c0006f0f:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f16:	89 07                	mov    DWORD PTR [edi],eax
c0006f18:	eb 02                	jmp    c0006f1c <f_getlabel+0x1e4>
c0006f1a:	89 c6                	mov    esi,eax
c0006f1c:	83 c4 6c             	add    esp,0x6c
c0006f1f:	89 f0                	mov    eax,esi
c0006f21:	5b                   	pop    ebx
c0006f22:	5e                   	pop    esi
c0006f23:	5f                   	pop    edi
c0006f24:	5d                   	pop    ebp
c0006f25:	c3                   	ret    

c0006f26 <f_setlabel>:
c0006f26:	56                   	push   esi
c0006f27:	b9 02 00 00 00       	mov    ecx,0x2
c0006f2c:	53                   	push   ebx
c0006f2d:	83 ec 74             	sub    esp,0x74
c0006f30:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f34:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f3b:	e8 b1 b7 ff ff       	call   c00026f1 <mount_volume>
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	85 c0                	test   eax,eax
c0006f44:	0f 85 41 02 00 00    	jne    c000718b <f_setlabel+0x265>
c0006f4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f4e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f51:	0f 85 8e 00 00 00    	jne    c0006fe5 <f_setlabel+0xbf>
c0006f57:	b9 16 00 00 00       	mov    ecx,0x16
c0006f5c:	31 d2                	xor    edx,edx
c0006f5e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f62:	31 db                	xor    ebx,ebx
c0006f64:	e8 8c ad ff ff       	call   c0001cf5 <mem_set>
c0006f69:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f70:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f73:	0f 86 0a 01 00 00    	jbe    c0007083 <f_setlabel+0x15d>
c0006f79:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f80:	e8 b6 ad ff ff       	call   c0001d3b <tchar2uni>
c0006f85:	89 c6                	mov    esi,eax
c0006f87:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f8c:	76 2a                	jbe    c0006fb8 <f_setlabel+0x92>
c0006f8e:	83 f8 ff             	cmp    eax,0xffffffff
c0006f91:	74 05                	je     c0006f98 <f_setlabel+0x72>
c0006f93:	83 fb 09             	cmp    ebx,0x9
c0006f96:	76 0a                	jbe    c0006fa2 <f_setlabel+0x7c>
c0006f98:	be 06 00 00 00       	mov    esi,0x6
c0006f9d:	e9 e9 01 00 00       	jmp    c000718b <f_setlabel+0x265>
c0006fa2:	89 c2                	mov    edx,eax
c0006fa4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fa8:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fab:	c1 ea 10             	shr    edx,0x10
c0006fae:	01 c8                	add    eax,ecx
c0006fb0:	43                   	inc    ebx
c0006fb1:	e8 1d ad ff ff       	call   c0001cd3 <st_word>
c0006fb6:	eb 04                	jmp    c0006fbc <f_setlabel+0x96>
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	74 dc                	je     c0006f98 <f_setlabel+0x72>
c0006fbc:	89 f2                	mov    edx,esi
c0006fbe:	b8 d7 93 02 c0       	mov    eax,0xc00293d7
c0006fc3:	e8 5b ad ff ff       	call   c0001d23 <chk_chr>
c0006fc8:	85 c0                	test   eax,eax
c0006fca:	75 cc                	jne    c0006f98 <f_setlabel+0x72>
c0006fcc:	83 fb 0a             	cmp    ebx,0xa
c0006fcf:	77 c7                	ja     c0006f98 <f_setlabel+0x72>
c0006fd1:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fd4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fd8:	0f b7 d6             	movzx  edx,si
c0006fdb:	01 c8                	add    eax,ecx
c0006fdd:	43                   	inc    ebx
c0006fde:	e8 f0 ac ff ff       	call   c0001cd3 <st_word>
c0006fe3:	eb 84                	jmp    c0006f69 <f_setlabel+0x43>
c0006fe5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fea:	ba 20 00 00 00       	mov    edx,0x20
c0006fef:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ff3:	31 db                	xor    ebx,ebx
c0006ff5:	e8 fb ac ff ff       	call   c0001cf5 <mem_set>
c0006ffa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007001:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0007004:	76 60                	jbe    c0007066 <f_setlabel+0x140>
c0007006:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c000700d:	e8 29 ad ff ff       	call   c0001d3b <tchar2uni>
c0007012:	3d ff ff 00 00       	cmp    eax,0xffff
c0007017:	0f 87 7b ff ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000701d:	83 ec 0c             	sub    esp,0xc
c0007020:	50                   	push   eax
c0007021:	e8 97 15 00 00       	call   c00085bd <ff_wtoupper>
c0007026:	5a                   	pop    edx
c0007027:	59                   	pop    ecx
c0007028:	68 b5 01 00 00       	push   0x1b5
c000702d:	50                   	push   eax
c000702e:	e8 8e 14 00 00       	call   c00084c1 <ff_uni2oem>
c0007033:	83 c4 10             	add    esp,0x10
c0007036:	89 c6                	mov    esi,eax
c0007038:	66 85 c0             	test   ax,ax
c000703b:	0f 84 57 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007041:	0f b7 d0             	movzx  edx,ax
c0007044:	b8 d0 93 02 c0       	mov    eax,0xc00293d0
c0007049:	e8 d5 ac ff ff       	call   c0001d23 <chk_chr>
c000704e:	85 c0                	test   eax,eax
c0007050:	0f 85 42 ff ff ff    	jne    c0006f98 <f_setlabel+0x72>
c0007056:	66 81 fe ff 00       	cmp    si,0xff
c000705b:	0f 87 14 01 00 00    	ja     c0007175 <f_setlabel+0x24f>
c0007061:	e9 fa 00 00 00       	jmp    c0007160 <f_setlabel+0x23a>
c0007066:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000706b:	0f 84 27 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007071:	85 db                	test   ebx,ebx
c0007073:	74 0e                	je     c0007083 <f_setlabel+0x15d>
c0007075:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007078:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000707d:	75 04                	jne    c0007083 <f_setlabel+0x15d>
c000707f:	89 c3                	mov    ebx,eax
c0007081:	eb ee                	jmp    c0007071 <f_setlabel+0x14b>
c0007083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007087:	31 d2                	xor    edx,edx
c0007089:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000708d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007095:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007099:	e8 1f c1 ff ff       	call   c00031bd <dir_sdi>
c000709e:	89 c6                	mov    esi,eax
c00070a0:	85 c0                	test   eax,eax
c00070a2:	0f 85 e3 00 00 00    	jne    c000718b <f_setlabel+0x265>
c00070a8:	ba 01 00 00 00       	mov    edx,0x1
c00070ad:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b1:	e8 17 c9 ff ff       	call   c00039cd <dir_read>
c00070b6:	85 c0                	test   eax,eax
c00070b8:	75 21                	jne    c00070db <f_setlabel+0x1b5>
c00070ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070be:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070c2:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070c5:	74 5d                	je     c0007124 <f_setlabel+0x1fe>
c00070c7:	85 db                	test   ebx,ebx
c00070c9:	74 0b                	je     c00070d6 <f_setlabel+0x1b0>
c00070cb:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070d4:	eb 70                	jmp    c0007146 <f_setlabel+0x220>
c00070d6:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070d9:	eb 70                	jmp    c000714b <f_setlabel+0x225>
c00070db:	83 f8 04             	cmp    eax,0x4
c00070de:	75 7c                	jne    c000715c <f_setlabel+0x236>
c00070e0:	85 db                	test   ebx,ebx
c00070e2:	0f 84 a3 00 00 00    	je     c000718b <f_setlabel+0x265>
c00070e8:	ba 01 00 00 00       	mov    edx,0x1
c00070ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f1:	e8 51 ca ff ff       	call   c0003b47 <dir_alloc>
c00070f6:	89 c6                	mov    esi,eax
c00070f8:	85 c0                	test   eax,eax
c00070fa:	0f 85 8b 00 00 00    	jne    c000718b <f_setlabel+0x265>
c0007100:	31 d2                	xor    edx,edx
c0007102:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007106:	b9 20 00 00 00       	mov    ecx,0x20
c000710b:	e8 e5 ab ff ff       	call   c0001cf5 <mem_set>
c0007110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007114:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007117:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000711b:	75 18                	jne    c0007135 <f_setlabel+0x20f>
c000711d:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007120:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007124:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007127:	b9 16 00 00 00       	mov    ecx,0x16
c000712c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007130:	83 c0 02             	add    eax,0x2
c0007133:	eb 9b                	jmp    c00070d0 <f_setlabel+0x1aa>
c0007135:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007139:	b9 0b 00 00 00       	mov    ecx,0xb
c000713e:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007142:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007146:	e8 95 ab ff ff       	call   c0001ce0 <mem_cpy>
c000714b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000714f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	e8 0e d4 ff ff       	call   c000456a <sync_fs>
c000715c:	89 c6                	mov    esi,eax
c000715e:	eb 2b                	jmp    c000718b <f_setlabel+0x265>
c0007160:	83 fb 0a             	cmp    ebx,0xa
c0007163:	0f 87 2f fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c0007169:	89 f0                	mov    eax,esi
c000716b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000716f:	43                   	inc    ebx
c0007170:	e9 85 fe ff ff       	jmp    c0006ffa <f_setlabel+0xd4>
c0007175:	83 fb 09             	cmp    ebx,0x9
c0007178:	0f 87 1a fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000717e:	89 f0                	mov    eax,esi
c0007180:	66 c1 e8 08          	shr    ax,0x8
c0007184:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007188:	43                   	inc    ebx
c0007189:	eb de                	jmp    c0007169 <f_setlabel+0x243>
c000718b:	89 f0                	mov    eax,esi
c000718d:	83 c4 74             	add    esp,0x74
c0007190:	5b                   	pop    ebx
c0007191:	5e                   	pop    esi
c0007192:	c3                   	ret    

c0007193 <f_forward>:
c0007193:	55                   	push   ebp
c0007194:	57                   	push   edi
c0007195:	56                   	push   esi
c0007196:	53                   	push   ebx
c0007197:	83 ec 2c             	sub    esp,0x2c
c000719a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000719e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071ac:	89 d8                	mov    eax,ebx
c00071ae:	e8 b1 b1 ff ff       	call   c0002364 <validate>
c00071b3:	89 c5                	mov    ebp,eax
c00071b5:	85 c0                	test   eax,eax
c00071b7:	0f 85 aa 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c1:	85 ed                	test   ebp,ebp
c00071c3:	0f 85 9e 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071cd:	0f 84 8f 01 00 00    	je     c0007362 <f_forward+0x1cf>
c00071d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071dc:	bf 00 00 00 00       	mov    edi,0x0
c00071e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071e8:	89 d1                	mov    ecx,edx
c00071ea:	19 f9                	sbb    ecx,edi
c00071ec:	0f 83 cf 00 00 00    	jae    c00072c1 <f_forward+0x12e>
c00071f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071f6:	e9 c6 00 00 00       	jmp    c00072c1 <f_forward+0x12e>
c00071fb:	50                   	push   eax
c00071fc:	50                   	push   eax
c00071fd:	6a 00                	push   0x0
c00071ff:	6a 00                	push   0x0
c0007201:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007205:	83 c4 10             	add    esp,0x10
c0007208:	85 c0                	test   eax,eax
c000720a:	0f 84 57 01 00 00    	je     c0007367 <f_forward+0x1d4>
c0007210:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007213:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007217:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000721a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000721e:	89 d7                	mov    edi,edx
c0007220:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007223:	89 c6                	mov    esi,eax
c0007225:	0f ac fe 09          	shrd   esi,edi,0x9
c0007229:	21 ce                	and    esi,ecx
c000722b:	89 c1                	mov    ecx,eax
c000722d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007233:	0f 84 98 00 00 00    	je     c00072d1 <f_forward+0x13e>
c0007239:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000723d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007240:	89 c8                	mov    eax,ecx
c0007242:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007246:	e8 af ac ff ff       	call   c0001efa <clst2sect>
c000724b:	89 d7                	mov    edi,edx
c000724d:	09 c7                	or     edi,eax
c000724f:	0f 84 9e 00 00 00    	je     c00072f3 <f_forward+0x160>
c0007255:	31 ff                	xor    edi,edi
c0007257:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000725a:	01 c6                	add    esi,eax
c000725c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007260:	11 d7                	adc    edi,edx
c0007262:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007265:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007268:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000726c:	39 fa                	cmp    edx,edi
c000726e:	0f 85 a2 00 00 00    	jne    c0007316 <f_forward+0x183>
c0007274:	39 f0                	cmp    eax,esi
c0007276:	0f 85 9a 00 00 00    	jne    c0007316 <f_forward+0x183>
c000727c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000727f:	ba 00 02 00 00       	mov    edx,0x200
c0007284:	25 ff 01 00 00       	and    eax,0x1ff
c0007289:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000728d:	29 c2                	sub    edx,eax
c000728f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007292:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007295:	39 d1                	cmp    ecx,edx
c0007297:	76 02                	jbe    c000729b <f_forward+0x108>
c0007299:	89 d1                	mov    ecx,edx
c000729b:	8d 73 50             	lea    esi,[ebx+0x50]
c000729e:	52                   	push   edx
c000729f:	01 c6                	add    esi,eax
c00072a1:	52                   	push   edx
c00072a2:	51                   	push   ecx
c00072a3:	56                   	push   esi
c00072a4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	85 c0                	test   eax,eax
c00072ad:	74 44                	je     c00072f3 <f_forward+0x160>
c00072af:	31 ff                	xor    edi,edi
c00072b1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072b4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072b7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072bb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072bf:	01 07                	add    DWORD PTR [edi],eax
c00072c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072c6:	0f 85 2f ff ff ff    	jne    c00071fb <f_forward+0x68>
c00072cc:	e9 96 00 00 00       	jmp    c0007367 <f_forward+0x1d4>
c00072d1:	85 f6                	test   esi,esi
c00072d3:	0f 85 60 ff ff ff    	jne    c0007239 <f_forward+0xa6>
c00072d9:	89 d7                	mov    edi,edx
c00072db:	09 c7                	or     edi,eax
c00072dd:	75 05                	jne    c00072e4 <f_forward+0x151>
c00072df:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072e2:	eb 0a                	jmp    c00072ee <f_forward+0x15b>
c00072e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072e7:	89 d8                	mov    eax,ebx
c00072e9:	e8 d9 bc ff ff       	call   c0002fc7 <get_fat>
c00072ee:	83 f8 01             	cmp    eax,0x1
c00072f1:	77 0b                	ja     c00072fe <f_forward+0x16b>
c00072f3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072f7:	bd 02 00 00 00       	mov    ebp,0x2
c00072fc:	eb 69                	jmp    c0007367 <f_forward+0x1d4>
c00072fe:	83 f8 ff             	cmp    eax,0xffffffff
c0007301:	75 0b                	jne    c000730e <f_forward+0x17b>
c0007303:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007307:	bd 01 00 00 00       	mov    ebp,0x1
c000730c:	eb 59                	jmp    c0007367 <f_forward+0x1d4>
c000730e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007311:	e9 23 ff ff ff       	jmp    c0007239 <f_forward+0xa6>
c0007316:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000731a:	79 20                	jns    c000733c <f_forward+0x1a9>
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	6a 01                	push   0x1
c0007321:	52                   	push   edx
c0007322:	50                   	push   eax
c0007323:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007327:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000732b:	50                   	push   eax
c000732c:	e8 fb a8 ff ff       	call   c0001c2c <disk_write>
c0007331:	83 c4 20             	add    esp,0x20
c0007334:	85 c0                	test   eax,eax
c0007336:	75 cb                	jne    c0007303 <f_forward+0x170>
c0007338:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000733c:	83 ec 0c             	sub    esp,0xc
c000733f:	6a 01                	push   0x1
c0007341:	57                   	push   edi
c0007342:	56                   	push   esi
c0007343:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007347:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000734b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000734f:	50                   	push   eax
c0007350:	e8 c1 a8 ff ff       	call   c0001c16 <disk_read>
c0007355:	83 c4 20             	add    esp,0x20
c0007358:	85 c0                	test   eax,eax
c000735a:	0f 84 1c ff ff ff    	je     c000727c <f_forward+0xe9>
c0007360:	eb a1                	jmp    c0007303 <f_forward+0x170>
c0007362:	bd 07 00 00 00       	mov    ebp,0x7
c0007367:	83 c4 2c             	add    esp,0x2c
c000736a:	89 e8                	mov    eax,ebp
c000736c:	5b                   	pop    ebx
c000736d:	5e                   	pop    esi
c000736e:	5f                   	pop    edi
c000736f:	5d                   	pop    ebp
c0007370:	c3                   	ret    

c0007371 <f_mkfs>:
c0007371:	55                   	push   ebp
c0007372:	57                   	push   edi
c0007373:	56                   	push   esi
c0007374:	53                   	push   ebx
c0007375:	bb 0b 00 00 00       	mov    ebx,0xb
c000737a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007380:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007387:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000738e:	e8 b0 ae ff ff       	call   c0002243 <get_ldnumber>
c0007393:	85 c0                	test   eax,eax
c0007395:	0f 88 ec 10 00 00    	js     c0008487 <f_mkfs+0x1116>
c000739b:	8b 14 85 60 e5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1aa0]
c00073a2:	85 d2                	test   edx,edx
c00073a4:	74 03                	je     c00073a9 <f_mkfs+0x38>
c00073a6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073a9:	85 f6                	test   esi,esi
c00073ab:	75 05                	jne    c00073b2 <f_mkfs+0x41>
c00073ad:	be c0 93 02 c0       	mov    esi,0xc00293c0
c00073b2:	83 ec 0c             	sub    esp,0xc
c00073b5:	0f b6 c0             	movzx  eax,al
c00073b8:	bb 03 00 00 00       	mov    ebx,0x3
c00073bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073c5:	e8 49 a8 ff ff       	call   c0001c13 <disk_initialize>
c00073ca:	83 c4 10             	add    esp,0x10
c00073cd:	a8 01                	test   al,0x1
c00073cf:	0f 85 b2 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073d5:	bb 0a 00 00 00       	mov    ebx,0xa
c00073da:	a8 04                	test   al,0x4
c00073dc:	0f 85 a5 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073e5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073e9:	85 c0                	test   eax,eax
c00073eb:	75 20                	jne    c000740d <f_mkfs+0x9c>
c00073ed:	51                   	push   ecx
c00073ee:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073f2:	50                   	push   eax
c00073f3:	6a 03                	push   0x3
c00073f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073f9:	e8 44 a8 ff ff       	call   c0001c42 <disk_ioctl>
c00073fe:	83 c4 10             	add    esp,0x10
c0007401:	85 c0                	test   eax,eax
c0007403:	74 08                	je     c000740d <f_mkfs+0x9c>
c0007405:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000740d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007411:	8d 42 ff             	lea    eax,[edx-0x1]
c0007414:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007419:	77 04                	ja     c000741f <f_mkfs+0xae>
c000741b:	85 c2                	test   edx,eax
c000741d:	74 08                	je     c0007427 <f_mkfs+0xb6>
c000741f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007427:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000742a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000742e:	48                   	dec    eax
c000742f:	3c 01                	cmp    al,0x1
c0007431:	76 05                	jbe    c0007438 <f_mkfs+0xc7>
c0007433:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007438:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000743b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000743f:	48                   	dec    eax
c0007440:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007445:	77 07                	ja     c000744e <f_mkfs+0xdd>
c0007447:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000744c:	74 08                	je     c0007456 <f_mkfs+0xe5>
c000744e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007456:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007459:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000745f:	77 07                	ja     c0007468 <f_mkfs+0xf7>
c0007461:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007464:	85 d8                	test   eax,ebx
c0007466:	74 02                	je     c000746a <f_mkfs+0xf9>
c0007468:	31 db                	xor    ebx,ebx
c000746a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007475:	77 0a                	ja     c0007481 <f_mkfs+0x110>
c0007477:	bb 11 00 00 00       	mov    ebx,0x11
c000747c:	e9 06 10 00 00       	jmp    c0008487 <f_mkfs+0x1116>
c0007481:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007488:	8b 36                	mov    esi,DWORD PTR [esi]
c000748a:	85 ed                	test   ebp,ebp
c000748c:	75 1e                	jne    c00074ac <f_mkfs+0x13b>
c000748e:	83 ec 0c             	sub    esp,0xc
c0007491:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007498:	25 00 fe ff ff       	and    eax,0xfffffe00
c000749d:	50                   	push   eax
c000749e:	e8 f1 0f 00 00       	call   c0008494 <ff_memalloc>
c00074a3:	83 c4 10             	add    esp,0x10
c00074a6:	89 c5                	mov    ebp,eax
c00074a8:	85 c0                	test   eax,eax
c00074aa:	74 cb                	je     c0007477 <f_mkfs+0x106>
c00074ac:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074b4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074bc:	52                   	push   edx
c00074bd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c1:	50                   	push   eax
c00074c2:	6a 01                	push   0x1
c00074c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074c8:	e8 75 a7 ff ff       	call   c0001c42 <disk_ioctl>
c00074cd:	83 c4 10             	add    esp,0x10
c00074d0:	85 c0                	test   eax,eax
c00074d2:	0f 85 4a 0f 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00074d8:	89 f1                	mov    ecx,esi
c00074da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074e2:	83 e1 0f             	and    ecx,0xf
c00074e5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074ed:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f1:	83 e6 08             	and    esi,0x8
c00074f4:	75 56                	jne    c000754c <f_mkfs+0x1db>
c00074f6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074fa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074fe:	83 ff 00             	cmp    edi,0x0
c0007501:	76 20                	jbe    c0007523 <f_mkfs+0x1b2>
c0007503:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007508:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007510:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007516:	83 d7 ff             	adc    edi,0xffffffff
c0007519:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000751d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007521:	eb 21                	jmp    c0007544 <f_mkfs+0x1d3>
c0007523:	ba 3f 00 00 00       	mov    edx,0x3f
c0007528:	39 f2                	cmp    edx,esi
c000752a:	19 f8                	sbb    eax,edi
c000752c:	73 1e                	jae    c000754c <f_mkfs+0x1db>
c000752e:	83 c6 c1             	add    esi,0xffffffc1
c0007531:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007539:	83 d7 ff             	adc    edi,0xffffffff
c000753c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007540:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007544:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000754c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007550:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007554:	89 04 24             	mov    DWORD PTR [esp],eax
c0007557:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000755b:	31 c0                	xor    eax,eax
c000755d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007562:	89 c7                	mov    edi,eax
c0007564:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007567:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000756b:	0f 83 c5 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c0007571:	89 df                	mov    edi,ebx
c0007573:	c1 ef 09             	shr    edi,0x9
c0007576:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000757a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007581:	c1 ef 09             	shr    edi,0x9
c0007584:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007589:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000758d:	74 29                	je     c00075b8 <f_mkfs+0x247>
c000758f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007595:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000759a:	0f 97 c2             	seta   dl
c000759d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075a4:	0f 92 c0             	setb   al
c00075a7:	08 c2                	or     dl,al
c00075a9:	75 5b                	jne    c0007606 <f_mkfs+0x295>
c00075ab:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075af:	83 e0 07             	and    eax,0x7
c00075b2:	3c 04                	cmp    al,0x4
c00075b4:	74 50                	je     c0007606 <f_mkfs+0x295>
c00075b6:	eb 1b                	jmp    c00075d3 <f_mkfs+0x262>
c00075b8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075bd:	0f 87 73 0a 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c00075c3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075c9:	76 08                	jbe    c00075d3 <f_mkfs+0x262>
c00075cb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075d7:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075db:	83 e0 01             	and    eax,0x1
c00075de:	80 e1 02             	and    cl,0x2
c00075e1:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075e5:	74 0d                	je     c00075f4 <f_mkfs+0x283>
c00075e7:	84 c0                	test   al,al
c00075e9:	0f 84 53 09 00 00    	je     c0007f42 <f_mkfs+0xbd1>
c00075ef:	e9 12 08 00 00       	jmp    c0007e06 <f_mkfs+0xa95>
c00075f4:	bb 13 00 00 00       	mov    ebx,0x13
c00075f9:	84 c0                	test   al,al
c00075fb:	0f 85 05 08 00 00    	jne    c0007e06 <f_mkfs+0xa95>
c0007601:	e9 39 0e 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0007606:	31 c0                	xor    eax,eax
c0007608:	ba ff 0f 00 00       	mov    edx,0xfff
c000760d:	89 c7                	mov    edi,eax
c000760f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007612:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007616:	0f 83 1a 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c000761c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007622:	77 39                	ja     c000765d <f_mkfs+0x2ec>
c0007624:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007629:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007631:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007634:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007638:	73 08                	jae    c0007642 <f_mkfs+0x2d1>
c000763a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007642:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007647:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000764a:	b8 00 00 00 00       	mov    eax,0x0
c000764f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007653:	73 08                	jae    c000765d <f_mkfs+0x2ec>
c0007655:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000765d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007665:	83 c0 20             	add    eax,0x20
c0007668:	83 d2 00             	adc    edx,0x0
c000766b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007677:	31 d2                	xor    edx,edx
c0007679:	31 ff                	xor    edi,edi
c000767b:	52                   	push   edx
c000767c:	89 fb                	mov    ebx,edi
c000767e:	50                   	push   eax
c000767f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007683:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007687:	e8 60 f3 01 00       	call   c00269ec <__udivdi3>
c000768c:	83 c4 10             	add    esp,0x10
c000768f:	c1 e0 02             	shl    eax,0x2
c0007692:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007696:	05 07 02 00 00       	add    eax,0x207
c000769b:	89 f1                	mov    ecx,esi
c000769d:	c1 e8 09             	shr    eax,0x9
c00076a0:	83 c1 ff             	add    ecx,0xffffffff
c00076a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076a7:	83 d3 ff             	adc    ebx,0xffffffff
c00076aa:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076ae:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076b2:	31 d2                	xor    edx,edx
c00076b4:	01 c8                	add    eax,ecx
c00076b6:	11 da                	adc    edx,ebx
c00076b8:	89 c1                	mov    ecx,eax
c00076ba:	f7 de                	neg    esi
c00076bc:	89 d0                	mov    eax,edx
c00076be:	83 d7 00             	adc    edi,0x0
c00076c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076c5:	f7 df                	neg    edi
c00076c7:	21 f1                	and    ecx,esi
c00076c9:	21 f8                	and    eax,edi
c00076cb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076d7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076db:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076e2:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076e6:	0f ac d0 01          	shrd   eax,edx,0x1
c00076ea:	89 df                	mov    edi,ebx
c00076ec:	d1 ea                	shr    edx,1
c00076ee:	39 c1                	cmp    ecx,eax
c00076f0:	19 d7                	sbb    edi,edx
c00076f2:	0f 83 3e 09 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c00076f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076fc:	31 d2                	xor    edx,edx
c00076fe:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007702:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007706:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000770a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000770d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007711:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007715:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007719:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000771d:	83 f8 0f             	cmp    eax,0xf
c0007720:	0f 86 10 09 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007726:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000772e:	0f 87 02 09 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007734:	31 d2                	xor    edx,edx
c0007736:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000773a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007742:	83 c0 07             	add    eax,0x7
c0007745:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000774d:	c1 e8 03             	shr    eax,0x3
c0007750:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007757:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000775b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000775f:	c1 e0 09             	shl    eax,0x9
c0007762:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007766:	48                   	dec    eax
c0007767:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000776b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000776f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007773:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007777:	31 d2                	xor    edx,edx
c0007779:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000777d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007784:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007788:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000778d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007791:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007795:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007799:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000779d:	31 ff                	xor    edi,edi
c000779f:	31 f6                	xor    esi,esi
c00077a1:	31 db                	xor    ebx,ebx
c00077a3:	85 ff                	test   edi,edi
c00077a5:	74 05                	je     c00077ac <f_mkfs+0x43b>
c00077a7:	4f                   	dec    edi
c00077a8:	74 44                	je     c00077ee <f_mkfs+0x47d>
c00077aa:	eb 4f                	jmp    c00077fb <f_mkfs+0x48a>
c00077ac:	83 ec 0c             	sub    esp,0xc
c00077af:	0f b7 c3             	movzx  eax,bx
c00077b2:	50                   	push   eax
c00077b3:	e8 05 0e 00 00       	call   c00085bd <ff_wtoupper>
c00077b8:	83 c4 10             	add    esp,0x10
c00077bb:	89 c1                	mov    ecx,eax
c00077bd:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c0:	66 39 c3             	cmp    bx,ax
c00077c3:	75 3e                	jne    c0007803 <f_mkfs+0x492>
c00077c5:	be 01 00 00 00       	mov    esi,0x1
c00077ca:	89 df                	mov    edi,ebx
c00077cc:	66 01 f7             	add    di,si
c00077cf:	75 07                	jne    c00077d8 <f_mkfs+0x467>
c00077d1:	83 fe 7f             	cmp    esi,0x7f
c00077d4:	77 31                	ja     c0007807 <f_mkfs+0x496>
c00077d6:	eb 16                	jmp    c00077ee <f_mkfs+0x47d>
c00077d8:	83 ec 0c             	sub    esp,0xc
c00077db:	0f b7 ff             	movzx  edi,di
c00077de:	57                   	push   edi
c00077df:	e8 d9 0d 00 00       	call   c00085bd <ff_wtoupper>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	39 c7                	cmp    edi,eax
c00077e9:	75 e6                	jne    c00077d1 <f_mkfs+0x460>
c00077eb:	46                   	inc    esi
c00077ec:	eb dc                	jmp    c00077ca <f_mkfs+0x459>
c00077ee:	31 c0                	xor    eax,eax
c00077f0:	89 d9                	mov    ecx,ebx
c00077f2:	4e                   	dec    esi
c00077f3:	0f 95 c0             	setne  al
c00077f6:	43                   	inc    ebx
c00077f7:	89 c7                	mov    edi,eax
c00077f9:	eb 14                	jmp    c000780f <f_mkfs+0x49e>
c00077fb:	89 f1                	mov    ecx,esi
c00077fd:	01 f3                	add    ebx,esi
c00077ff:	31 ff                	xor    edi,edi
c0007801:	eb 0c                	jmp    c000780f <f_mkfs+0x49e>
c0007803:	89 d3                	mov    ebx,edx
c0007805:	eb 08                	jmp    c000780f <f_mkfs+0x49e>
c0007807:	bf 02 00 00 00       	mov    edi,0x2
c000780c:	83 c9 ff             	or     ecx,0xffffffff
c000780f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007813:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007816:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000781a:	0f b6 c1             	movzx  eax,cl
c000781d:	e8 3a a9 ff ff       	call   c000215c <xsum32>
c0007822:	66 c1 e9 08          	shr    cx,0x8
c0007826:	89 c2                	mov    edx,eax
c0007828:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000782f:	0f b7 c1             	movzx  eax,cx
c0007832:	e8 25 a9 ff ff       	call   c000215c <xsum32>
c0007837:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000783c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007840:	66 85 db             	test   bx,bx
c0007843:	74 1f                	je     c0007864 <f_mkfs+0x4f3>
c0007845:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007848:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000784f:	83 c0 02             	add    eax,0x2
c0007852:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007858:	39 c2                	cmp    edx,eax
c000785a:	74 08                	je     c0007864 <f_mkfs+0x4f3>
c000785c:	89 04 24             	mov    DWORD PTR [esp],eax
c000785f:	e9 3f ff ff ff       	jmp    c00077a3 <f_mkfs+0x432>
c0007864:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007867:	83 ec 0c             	sub    esp,0xc
c000786a:	05 01 02 00 00       	add    eax,0x201
c000786f:	c1 e8 09             	shr    eax,0x9
c0007872:	50                   	push   eax
c0007873:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007877:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787f:	55                   	push   ebp
c0007880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007884:	e8 a3 a3 ff ff       	call   c0001c2c <disk_write>
c0007889:	83 c4 20             	add    esp,0x20
c000788c:	85 c0                	test   eax,eax
c000788e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007891:	0f 85 8b 0b 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007897:	89 d0                	mov    eax,edx
c0007899:	31 d2                	xor    edx,edx
c000789b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000789f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078a3:	66 85 db             	test   bx,bx
c00078a6:	74 04                	je     c00078ac <f_mkfs+0x53b>
c00078a8:	31 c0                	xor    eax,eax
c00078aa:	eb b0                	jmp    c000785c <f_mkfs+0x4eb>
c00078ac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078b4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078b8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078be:	31 d2                	xor    edx,edx
c00078c0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078cb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078cf:	c1 eb 09             	shr    ebx,0x9
c00078d2:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078dd:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078e5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078e9:	8d 70 01             	lea    esi,[eax+0x1]
c00078ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078f4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078fb:	31 d2                	xor    edx,edx
c00078fd:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007902:	89 04 24             	mov    DWORD PTR [esp],eax
c0007905:	89 c1                	mov    ecx,eax
c0007907:	89 e8                	mov    eax,ebp
c0007909:	e8 e7 a3 ff ff       	call   c0001cf5 <mem_set>
c000790e:	31 c0                	xor    eax,eax
c0007910:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007913:	76 10                	jbe    c0007925 <f_mkfs+0x5b4>
c0007915:	83 fe 07             	cmp    esi,0x7
c0007918:	76 0b                	jbe    c0007925 <f_mkfs+0x5b4>
c000791a:	40                   	inc    eax
c000791b:	83 ee 08             	sub    esi,0x8
c000791e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007923:	eb eb                	jmp    c0007910 <f_mkfs+0x59f>
c0007925:	b2 01                	mov    dl,0x1
c0007927:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000792b:	85 f6                	test   esi,esi
c000792d:	74 0c                	je     c000793b <f_mkfs+0x5ca>
c000792f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007932:	76 07                	jbe    c000793b <f_mkfs+0x5ca>
c0007934:	08 11                	or     BYTE PTR [ecx],dl
c0007936:	4e                   	dec    esi
c0007937:	d1 e2                	shl    edx,1
c0007939:	eb f0                	jmp    c000792b <f_mkfs+0x5ba>
c000793b:	89 df                	mov    edi,ebx
c000793d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007941:	76 04                	jbe    c0007947 <f_mkfs+0x5d6>
c0007943:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007947:	83 ec 0c             	sub    esp,0xc
c000794a:	57                   	push   edi
c000794b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000794f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007953:	55                   	push   ebp
c0007954:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007958:	e8 cf a2 ff ff       	call   c0001c2c <disk_write>
c000795d:	83 c4 20             	add    esp,0x20
c0007960:	85 c0                	test   eax,eax
c0007962:	0f 85 ba 0a 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007968:	31 d2                	xor    edx,edx
c000796a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000796e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007972:	29 fb                	sub    ebx,edi
c0007974:	0f 85 7a ff ff ff    	jne    c00078f4 <f_mkfs+0x583>
c000797a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000797e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007986:	31 f6                	xor    esi,esi
c0007988:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000798c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000798f:	31 d2                	xor    edx,edx
c0007991:	89 e8                	mov    eax,ebp
c0007993:	e8 5d a3 ff ff       	call   c0001cf5 <mem_set>
c0007998:	31 c9                	xor    ecx,ecx
c000799a:	85 db                	test   ebx,ebx
c000799c:	75 40                	jne    c00079de <f_mkfs+0x66d>
c000799e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079a3:	89 e8                	mov    eax,ebp
c00079a5:	bb 02 00 00 00       	mov    ebx,0x2
c00079aa:	e8 28 a3 ff ff       	call   c0001cd7 <st_dword>
c00079af:	8d 45 04             	lea    eax,[ebp+0x4]
c00079b2:	83 ca ff             	or     edx,0xffffffff
c00079b5:	e8 1d a3 ff ff       	call   c0001cd7 <st_dword>
c00079ba:	b9 08 00 00 00       	mov    ecx,0x8
c00079bf:	eb 1d                	jmp    c00079de <f_mkfs+0x66d>
c00079c1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c4:	76 3b                	jbe    c0007a01 <f_mkfs+0x690>
c00079c6:	43                   	inc    ebx
c00079c7:	83 fe 01             	cmp    esi,0x1
c00079ca:	89 da                	mov    edx,ebx
c00079cc:	77 03                	ja     c00079d1 <f_mkfs+0x660>
c00079ce:	83 ca ff             	or     edx,0xffffffff
c00079d1:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079d5:	4e                   	dec    esi
c00079d6:	e8 fc a2 ff ff       	call   c0001cd7 <st_dword>
c00079db:	83 c1 04             	add    ecx,0x4
c00079de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079e2:	85 f6                	test   esi,esi
c00079e4:	75 db                	jne    c00079c1 <f_mkfs+0x650>
c00079e6:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079eb:	77 14                	ja     c0007a01 <f_mkfs+0x690>
c00079ed:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079f8:	85 f6                	test   esi,esi
c00079fa:	74 05                	je     c0007a01 <f_mkfs+0x690>
c00079fc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079ff:	77 dd                	ja     c00079de <f_mkfs+0x66d>
c0007a01:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a05:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a09:	39 cf                	cmp    edi,ecx
c0007a0b:	76 02                	jbe    c0007a0f <f_mkfs+0x69e>
c0007a0d:	89 cf                	mov    edi,ecx
c0007a0f:	83 ec 0c             	sub    esp,0xc
c0007a12:	57                   	push   edi
c0007a13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a17:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1b:	55                   	push   ebp
c0007a1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a20:	e8 07 a2 ff ff       	call   c0001c2c <disk_write>
c0007a25:	83 c4 20             	add    esp,0x20
c0007a28:	85 c0                	test   eax,eax
c0007a2a:	0f 85 f2 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007a30:	31 d2                	xor    edx,edx
c0007a32:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a36:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a3a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a3e:	0f 85 48 ff ff ff    	jne    c000798c <f_mkfs+0x61b>
c0007a44:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a47:	31 d2                	xor    edx,edx
c0007a49:	89 e8                	mov    eax,ebp
c0007a4b:	31 ff                	xor    edi,edi
c0007a4d:	e8 a3 a2 ff ff       	call   c0001cf5 <mem_set>
c0007a52:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a55:	ba 02 00 00 00       	mov    edx,0x2
c0007a5a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a5e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a62:	e8 70 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a67:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a6a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a6e:	e8 64 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a73:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a76:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a7a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a7e:	e8 54 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a83:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a8e:	83 c2 02             	add    edx,0x2
c0007a91:	e8 41 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a96:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a99:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a9d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa1:	e8 31 a2 ff ff       	call   c0001cd7 <st_dword>
c0007aa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aaa:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007aaf:	89 c6                	mov    esi,eax
c0007ab1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ab9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007abc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ac3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ac7:	39 cb                	cmp    ebx,ecx
c0007ac9:	76 02                	jbe    c0007acd <f_mkfs+0x75c>
c0007acb:	89 cb                	mov    ebx,ecx
c0007acd:	83 ec 0c             	sub    esp,0xc
c0007ad0:	53                   	push   ebx
c0007ad1:	57                   	push   edi
c0007ad2:	56                   	push   esi
c0007ad3:	55                   	push   ebp
c0007ad4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad8:	e8 4f a1 ff ff       	call   c0001c2c <disk_write>
c0007add:	83 c4 20             	add    esp,0x20
c0007ae0:	85 c0                	test   eax,eax
c0007ae2:	0f 85 3a 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007ae8:	31 d2                	xor    edx,edx
c0007aea:	b9 00 02 00 00       	mov    ecx,0x200
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 ff a1 ff ff       	call   c0001cf5 <mem_set>
c0007af6:	31 d2                	xor    edx,edx
c0007af8:	01 de                	add    esi,ebx
c0007afa:	11 d7                	adc    edi,edx
c0007afc:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007aff:	75 bf                	jne    c0007ac0 <f_mkfs+0x74f>
c0007b01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b05:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b09:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b11:	b9 00 02 00 00       	mov    ecx,0x200
c0007b16:	31 d2                	xor    edx,edx
c0007b18:	89 e8                	mov    eax,ebp
c0007b1a:	e8 d6 a1 ff ff       	call   c0001cf5 <mem_set>
c0007b1f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b24:	ba a0 94 02 c0       	mov    edx,0xc00294a0
c0007b29:	89 e8                	mov    eax,ebp
c0007b2b:	e8 b0 a1 ff ff       	call   c0001ce0 <mem_cpy>
c0007b30:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b3b:	e8 9a a1 ff ff       	call   c0001cda <st_qword>
c0007b40:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b44:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b47:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b4b:	e8 8a a1 ff ff       	call   c0001cda <st_qword>
c0007b50:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b53:	ba 20 00 00 00       	mov    edx,0x20
c0007b58:	e8 7a a1 ff ff       	call   c0001cd7 <st_dword>
c0007b5d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b65:	e8 6d a1 ff ff       	call   c0001cd7 <st_dword>
c0007b6a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b72:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b76:	e8 5c a1 ff ff       	call   c0001cd7 <st_dword>
c0007b7b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b7e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b82:	e8 50 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b8b:	8d 50 02             	lea    edx,[eax+0x2]
c0007b8e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b91:	e8 41 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b96:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b99:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b9e:	e8 34 a1 ff ff       	call   c0001cd7 <st_dword>
c0007ba3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ba6:	ba 00 01 00 00       	mov    edx,0x100
c0007bab:	e8 23 a1 ff ff       	call   c0001cd3 <st_word>
c0007bb0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bb4:	b8 0a 00 00 00       	mov    eax,0xa
c0007bb9:	48                   	dec    eax
c0007bba:	74 05                	je     c0007bc1 <f_mkfs+0x850>
c0007bbc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bbf:	eb f8                	jmp    c0007bb9 <f_mkfs+0x848>
c0007bc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bc5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bcd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd1:	74 05                	je     c0007bd8 <f_mkfs+0x867>
c0007bd3:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bd6:	eb f5                	jmp    c0007bcd <f_mkfs+0x85c>
c0007bd8:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bdb:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be0:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007be6:	31 db                	xor    ebx,ebx
c0007be8:	e8 e6 a0 ff ff       	call   c0001cd3 <st_word>
c0007bed:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bf3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfb:	e8 d3 a0 ff ff       	call   c0001cd3 <st_word>
c0007c00:	31 c9                	xor    ecx,ecx
c0007c02:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c05:	83 f8 01             	cmp    eax,0x1
c0007c08:	76 13                	jbe    c0007c1d <f_mkfs+0x8ac>
c0007c0a:	83 f9 70             	cmp    ecx,0x70
c0007c0d:	74 0e                	je     c0007c1d <f_mkfs+0x8ac>
c0007c0f:	89 da                	mov    edx,ebx
c0007c11:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c16:	e8 41 a5 ff ff       	call   c000215c <xsum32>
c0007c1b:	89 c3                	mov    ebx,eax
c0007c1d:	41                   	inc    ecx
c0007c1e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c24:	75 dc                	jne    c0007c02 <f_mkfs+0x891>
c0007c26:	89 f0                	mov    eax,esi
c0007c28:	89 fa                	mov    edx,edi
c0007c2a:	83 c0 01             	add    eax,0x1
c0007c2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c31:	83 d2 00             	adc    edx,0x0
c0007c34:	83 ec 0c             	sub    esp,0xc
c0007c37:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c3b:	6a 01                	push   0x1
c0007c3d:	57                   	push   edi
c0007c3e:	56                   	push   esi
c0007c3f:	55                   	push   ebp
c0007c40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c44:	e8 e3 9f ff ff       	call   c0001c2c <disk_write>
c0007c49:	83 c4 20             	add    esp,0x20
c0007c4c:	85 c0                	test   eax,eax
c0007c4e:	0f 85 ce 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007c54:	31 d2                	xor    edx,edx
c0007c56:	b9 00 02 00 00       	mov    ecx,0x200
c0007c5b:	89 e8                	mov    eax,ebp
c0007c5d:	e8 93 a0 ff ff       	call   c0001cf5 <mem_set>
c0007c62:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c6a:	e8 64 a0 ff ff       	call   c0001cd3 <st_word>
c0007c6f:	89 f0                	mov    eax,esi
c0007c71:	89 fa                	mov    edx,edi
c0007c73:	83 c0 09             	add    eax,0x9
c0007c76:	83 d2 00             	adc    edx,0x0
c0007c79:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c80:	31 c9                	xor    ecx,ecx
c0007c82:	41                   	inc    ecx
c0007c83:	89 da                	mov    edx,ebx
c0007c85:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c8a:	e8 cd a4 ff ff       	call   c000215c <xsum32>
c0007c8f:	89 c3                	mov    ebx,eax
c0007c91:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c97:	75 e9                	jne    c0007c82 <f_mkfs+0x911>
c0007c99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c9d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca1:	83 c0 01             	add    eax,0x1
c0007ca4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ca8:	83 d2 00             	adc    edx,0x0
c0007cab:	83 ec 0c             	sub    esp,0xc
c0007cae:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cb2:	6a 01                	push   0x1
c0007cb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cbc:	55                   	push   ebp
c0007cbd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc1:	e8 66 9f ff ff       	call   c0001c2c <disk_write>
c0007cc6:	83 c4 20             	add    esp,0x20
c0007cc9:	85 c0                	test   eax,eax
c0007ccb:	0f 85 51 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007cd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd5:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cd9:	75 09                	jne    c0007ce4 <f_mkfs+0x973>
c0007cdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cde:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ce2:	74 12                	je     c0007cf6 <f_mkfs+0x985>
c0007ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ce8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cf4:	eb 8a                	jmp    c0007c80 <f_mkfs+0x90f>
c0007cf6:	31 d2                	xor    edx,edx
c0007cf8:	b9 00 02 00 00       	mov    ecx,0x200
c0007cfd:	89 e8                	mov    eax,ebp
c0007cff:	e8 f1 9f ff ff       	call   c0001cf5 <mem_set>
c0007d04:	83 c6 0b             	add    esi,0xb
c0007d07:	83 d7 00             	adc    edi,0x0
c0007d0a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d0e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d12:	31 c9                	xor    ecx,ecx
c0007d14:	41                   	inc    ecx
c0007d15:	89 da                	mov    edx,ebx
c0007d17:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d1c:	e8 3b a4 ff ff       	call   c000215c <xsum32>
c0007d21:	89 c3                	mov    ebx,eax
c0007d23:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d29:	75 e9                	jne    c0007d14 <f_mkfs+0x9a3>
c0007d2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d2e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d32:	83 c6 01             	add    esi,0x1
c0007d35:	83 d7 00             	adc    edi,0x0
c0007d38:	83 ec 0c             	sub    esp,0xc
c0007d3b:	6a 01                	push   0x1
c0007d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d45:	55                   	push   ebp
c0007d46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d4a:	e8 dd 9e ff ff       	call   c0001c2c <disk_write>
c0007d4f:	83 c4 20             	add    esp,0x20
c0007d52:	85 c0                	test   eax,eax
c0007d54:	0f 85 c8 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007d5a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d5e:	75 06                	jne    c0007d66 <f_mkfs+0x9f5>
c0007d60:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d64:	74 09                	je     c0007d6f <f_mkfs+0x9fe>
c0007d66:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d69:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d6d:	eb a3                	jmp    c0007d12 <f_mkfs+0x9a1>
c0007d6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d73:	89 da                	mov    edx,ebx
c0007d75:	01 e8                	add    eax,ebp
c0007d77:	e8 5b 9f ff ff       	call   c0001cd7 <st_dword>
c0007d7c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d81:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d89:	75 e4                	jne    c0007d6f <f_mkfs+0x9fe>
c0007d8b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d8e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d92:	83 c6 02             	add    esi,0x2
c0007d95:	83 d7 00             	adc    edi,0x0
c0007d98:	83 ec 0c             	sub    esp,0xc
c0007d9b:	6a 01                	push   0x1
c0007d9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da5:	55                   	push   ebp
c0007da6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007daa:	e8 7d 9e ff ff       	call   c0001c2c <disk_write>
c0007daf:	83 c4 20             	add    esp,0x20
c0007db2:	85 c0                	test   eax,eax
c0007db4:	0f 85 68 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007dba:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dbf:	74 0d                	je     c0007dce <f_mkfs+0xa5d>
c0007dc1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dc9:	e9 43 fd ff ff       	jmp    c0007b11 <f_mkfs+0x7a0>
c0007dce:	b1 07                	mov    cl,0x7
c0007dd0:	e9 e3 05 00 00       	jmp    c00083b8 <f_mkfs+0x1047>
c0007dd5:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dda:	0f 85 4f 02 00 00    	jne    c000802f <f_mkfs+0xcbe>
c0007de0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007de5:	0f 86 22 02 00 00    	jbe    c000800d <f_mkfs+0xc9c>
c0007deb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df0:	0f 85 81 06 00 00    	jne    c0008477 <f_mkfs+0x1106>
c0007df6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007df9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dfd:	83 f8 40             	cmp    eax,0x40
c0007e00:	0f 87 51 06 00 00    	ja     c0008457 <f_mkfs+0x10e6>
c0007e06:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e0a:	85 ff                	test   edi,edi
c0007e0c:	75 1c                	jne    c0007e2a <f_mkfs+0xab9>
c0007e0e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e11:	ba a0 93 02 c0       	mov    edx,0xc00293a0
c0007e16:	c1 e9 0c             	shr    ecx,0xc
c0007e19:	bf 01 00 00 00       	mov    edi,0x1
c0007e1e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e21:	66 85 c0             	test   ax,ax
c0007e24:	0f 85 95 01 00 00    	jne    c0007fbf <f_mkfs+0xc4e>
c0007e2a:	31 d2                	xor    edx,edx
c0007e2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e2f:	f7 f7                	div    edi
c0007e31:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e36:	0f 86 95 01 00 00    	jbe    c0007fd1 <f_mkfs+0xc60>
c0007e3c:	83 c0 02             	add    eax,0x2
c0007e3f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e44:	01 c0                	add    eax,eax
c0007e46:	05 ff 01 00 00       	add    eax,0x1ff
c0007e4b:	be 01 00 00 00       	mov    esi,0x1
c0007e50:	c1 e8 09             	shr    eax,0x9
c0007e53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e5b:	c1 e0 05             	shl    eax,0x5
c0007e5e:	c1 e8 09             	shr    eax,0x9
c0007e61:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e65:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e6a:	31 d2                	xor    edx,edx
c0007e6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e70:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e74:	89 f0                	mov    eax,esi
c0007e76:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e7a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e82:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e8a:	31 d2                	xor    edx,edx
c0007e8c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e91:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e95:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e99:	31 db                	xor    ebx,ebx
c0007e9b:	01 c8                	add    eax,ecx
c0007e9d:	11 da                	adc    edx,ebx
c0007e9f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007ea3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ea7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eab:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eaf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007eb3:	f7 da                	neg    edx
c0007eb5:	21 d1                	and    ecx,edx
c0007eb7:	29 d9                	sub    ecx,ebx
c0007eb9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ebe:	0f 85 20 01 00 00    	jne    c0007fe4 <f_mkfs+0xc73>
c0007ec4:	31 db                	xor    ebx,ebx
c0007ec6:	01 ce                	add    esi,ecx
c0007ec8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ecc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed0:	31 d2                	xor    edx,edx
c0007ed2:	89 f8                	mov    eax,edi
c0007ed4:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ed8:	c1 e0 04             	shl    eax,0x4
c0007edb:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007edf:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ee3:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ee7:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eeb:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eee:	19 d3                	sbb    ebx,edx
c0007ef0:	0f 82 40 01 00 00    	jb     c0008036 <f_mkfs+0xcc5>
c0007ef6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ef9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007efd:	89 c8                	mov    eax,ecx
c0007eff:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f04:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f08:	29 f0                	sub    eax,esi
c0007f0a:	29 d0                	sub    eax,edx
c0007f0c:	31 d2                	xor    edx,edx
c0007f0e:	f7 f7                	div    edi
c0007f10:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f15:	89 c3                	mov    ebx,eax
c0007f17:	0f 85 b8 fe ff ff    	jne    c0007dd5 <f_mkfs+0xa64>
c0007f1d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f22:	0f 87 1d 01 00 00    	ja     c0008045 <f_mkfs+0xcd4>
c0007f28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f2d:	0f 85 03 01 00 00    	jne    c0008036 <f_mkfs+0xcc5>
c0007f33:	83 ff 01             	cmp    edi,0x1
c0007f36:	0f 86 fa 00 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007f3c:	d1 ef                	shr    edi,1
c0007f3e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f42:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f46:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f49:	85 db                	test   ebx,ebx
c0007f4b:	75 2d                	jne    c0007f7a <f_mkfs+0xc09>
c0007f4d:	89 cb                	mov    ebx,ecx
c0007f4f:	ba b0 93 02 c0       	mov    edx,0xc00293b0
c0007f54:	c1 eb 11             	shr    ebx,0x11
c0007f57:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f5f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f62:	66 85 c0             	test   ax,ax
c0007f65:	74 11                	je     c0007f78 <f_mkfs+0xc07>
c0007f67:	83 c2 02             	add    edx,0x2
c0007f6a:	39 d8                	cmp    eax,ebx
c0007f6c:	77 0a                	ja     c0007f78 <f_mkfs+0xc07>
c0007f6e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f72:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f76:	eb e7                	jmp    c0007f5f <f_mkfs+0xbee>
c0007f78:	31 db                	xor    ebx,ebx
c0007f7a:	31 d2                	xor    edx,edx
c0007f7c:	89 c8                	mov    eax,ecx
c0007f7e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f82:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f89:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f8e:	c1 ea 09             	shr    edx,0x9
c0007f91:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f96:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f9a:	0f 87 96 00 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007fa0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fa4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fac:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb0:	be 20 00 00 00       	mov    esi,0x20
c0007fb5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fba:	e9 a6 fe ff ff       	jmp    c0007e65 <f_mkfs+0xaf4>
c0007fbf:	83 c2 02             	add    edx,0x2
c0007fc2:	39 c8                	cmp    eax,ecx
c0007fc4:	0f 87 60 fe ff ff    	ja     c0007e2a <f_mkfs+0xab9>
c0007fca:	01 ff                	add    edi,edi
c0007fcc:	e9 4d fe ff ff       	jmp    c0007e1e <f_mkfs+0xaad>
c0007fd1:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fd4:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fd9:	40                   	inc    eax
c0007fda:	d1 e8                	shr    eax,1
c0007fdc:	83 c0 03             	add    eax,0x3
c0007fdf:	e9 62 fe ff ff       	jmp    c0007e46 <f_mkfs+0xad5>
c0007fe4:	31 d2                	xor    edx,edx
c0007fe6:	89 c8                	mov    eax,ecx
c0007fe8:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fec:	85 d2                	test   edx,edx
c0007fee:	74 0c                	je     c0007ffc <f_mkfs+0xc8b>
c0007ff0:	49                   	dec    ecx
c0007ff1:	46                   	inc    esi
c0007ff2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007ff7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ffc:	89 c8                	mov    eax,ecx
c0007ffe:	31 d2                	xor    edx,edx
c0008000:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008004:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008008:	e9 c3 fe ff ff       	jmp    c0007ed0 <f_mkfs+0xb5f>
c000800d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008012:	77 31                	ja     c0008045 <f_mkfs+0xcd4>
c0008014:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008019:	75 1b                	jne    c0008036 <f_mkfs+0xcc5>
c000801b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000801e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008022:	3d 80 00 00 00       	cmp    eax,0x80
c0008027:	0f 86 d9 fd ff ff    	jbe    c0007e06 <f_mkfs+0xa95>
c000802d:	eb 07                	jmp    c0008036 <f_mkfs+0xcc5>
c000802f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008034:	76 0a                	jbe    c0008040 <f_mkfs+0xccf>
c0008036:	bb 0e 00 00 00       	mov    ebx,0xe
c000803b:	e9 ff 03 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0008040:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008045:	31 d2                	xor    edx,edx
c0008047:	b9 00 02 00 00       	mov    ecx,0x200
c000804c:	89 e8                	mov    eax,ebp
c000804e:	e8 a2 9c ff ff       	call   c0001cf5 <mem_set>
c0008053:	b9 0b 00 00 00       	mov    ecx,0xb
c0008058:	ba c2 94 02 c0       	mov    edx,0xc00294c2
c000805d:	89 e8                	mov    eax,ebp
c000805f:	e8 7c 9c ff ff       	call   c0001ce0 <mem_cpy>
c0008064:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008067:	ba 00 02 00 00       	mov    edx,0x200
c000806c:	e8 62 9c ff ff       	call   c0001cd3 <st_word>
c0008071:	89 f8                	mov    eax,edi
c0008073:	0f b7 d6             	movzx  edx,si
c0008076:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008079:	8d 45 0e             	lea    eax,[ebp+0xe]
c000807c:	e8 52 9c ff ff       	call   c0001cd3 <st_word>
c0008081:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008085:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000808a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000808d:	75 08                	jne    c0008097 <f_mkfs+0xd26>
c000808f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008097:	8d 45 11             	lea    eax,[ebp+0x11]
c000809a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000809e:	e8 30 9c ff ff       	call   c0001cd3 <st_word>
c00080a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00080a8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080ac:	39 d0                	cmp    eax,edx
c00080ae:	b8 00 00 00 00       	mov    eax,0x0
c00080b3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080b7:	72 0a                	jb     c00080c3 <f_mkfs+0xd52>
c00080b9:	8d 45 13             	lea    eax,[ebp+0x13]
c00080bc:	e8 12 9c ff ff       	call   c0001cd3 <st_word>
c00080c1:	eb 08                	jmp    c00080cb <f_mkfs+0xd5a>
c00080c3:	8d 45 20             	lea    eax,[ebp+0x20]
c00080c6:	e8 0c 9c ff ff       	call   c0001cd7 <st_dword>
c00080cb:	8d 45 18             	lea    eax,[ebp+0x18]
c00080ce:	ba 3f 00 00 00       	mov    edx,0x3f
c00080d3:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080d7:	e8 f7 9b ff ff       	call   c0001cd3 <st_word>
c00080dc:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080df:	ba ff 00 00 00       	mov    edx,0xff
c00080e4:	e8 ea 9b ff ff       	call   c0001cd3 <st_word>
c00080e9:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f0:	e8 e2 9b ff ff       	call   c0001cd7 <st_dword>
c00080f5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080fa:	75 57                	jne    c0008153 <f_mkfs+0xde2>
c00080fc:	8d 45 43             	lea    eax,[ebp+0x43]
c00080ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0008104:	e8 ce 9b ff ff       	call   c0001cd7 <st_dword>
c0008109:	8d 45 24             	lea    eax,[ebp+0x24]
c000810c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008110:	e8 c2 9b ff ff       	call   c0001cd7 <st_dword>
c0008115:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008118:	ba 02 00 00 00       	mov    edx,0x2
c000811d:	e8 b5 9b ff ff       	call   c0001cd7 <st_dword>
c0008122:	8d 45 30             	lea    eax,[ebp+0x30]
c0008125:	ba 01 00 00 00       	mov    edx,0x1
c000812a:	e8 a4 9b ff ff       	call   c0001cd3 <st_word>
c000812f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008132:	ba 06 00 00 00       	mov    edx,0x6
c0008137:	e8 97 9b ff ff       	call   c0001cd3 <st_word>
c000813c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008140:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008144:	8d 45 47             	lea    eax,[ebp+0x47]
c0008147:	b9 13 00 00 00       	mov    ecx,0x13
c000814c:	ba ce 94 02 c0       	mov    edx,0xc00294ce
c0008151:	eb 2f                	jmp    c0008182 <f_mkfs+0xe11>
c0008153:	8d 45 27             	lea    eax,[ebp+0x27]
c0008156:	ba 00 00 21 50       	mov    edx,0x50210000
c000815b:	e8 77 9b ff ff       	call   c0001cd7 <st_dword>
c0008160:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008165:	8d 45 16             	lea    eax,[ebp+0x16]
c0008168:	e8 66 9b ff ff       	call   c0001cd3 <st_word>
c000816d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008171:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008175:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008178:	b9 13 00 00 00       	mov    ecx,0x13
c000817d:	ba e2 94 02 c0       	mov    edx,0xc00294e2
c0008182:	e8 59 9b ff ff       	call   c0001ce0 <mem_cpy>
c0008187:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000818d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008192:	89 f0                	mov    eax,esi
c0008194:	e8 3a 9b ff ff       	call   c0001cd3 <st_word>
c0008199:	83 ec 0c             	sub    esp,0xc
c000819c:	6a 01                	push   0x1
c000819e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a6:	55                   	push   ebp
c00081a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081ab:	e8 7c 9a ff ff       	call   c0001c2c <disk_write>
c00081b0:	83 c4 20             	add    esp,0x20
c00081b3:	85 c0                	test   eax,eax
c00081b5:	0f 85 67 02 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00081bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c0:	0f 85 b7 00 00 00    	jne    c000827d <f_mkfs+0xf0c>
c00081c6:	83 ec 0c             	sub    esp,0xc
c00081c9:	6a 01                	push   0x1
c00081cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081d3:	83 c0 06             	add    eax,0x6
c00081d6:	83 d2 00             	adc    edx,0x0
c00081d9:	52                   	push   edx
c00081da:	50                   	push   eax
c00081db:	55                   	push   ebp
c00081dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e0:	e8 47 9a ff ff       	call   c0001c2c <disk_write>
c00081e5:	83 c4 20             	add    esp,0x20
c00081e8:	b9 00 02 00 00       	mov    ecx,0x200
c00081ed:	31 d2                	xor    edx,edx
c00081ef:	89 e8                	mov    eax,ebp
c00081f1:	e8 ff 9a ff ff       	call   c0001cf5 <mem_set>
c00081f6:	ba 52 52 61 41       	mov    edx,0x41615252
c00081fb:	89 e8                	mov    eax,ebp
c00081fd:	e8 d5 9a ff ff       	call   c0001cd7 <st_dword>
c0008202:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008208:	ba 72 72 41 61       	mov    edx,0x61417272
c000820d:	e8 c5 9a ff ff       	call   c0001cd7 <st_dword>
c0008212:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008215:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000821b:	e8 b7 9a ff ff       	call   c0001cd7 <st_dword>
c0008220:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008226:	ba 02 00 00 00       	mov    edx,0x2
c000822b:	e8 a7 9a ff ff       	call   c0001cd7 <st_dword>
c0008230:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008235:	89 f0                	mov    eax,esi
c0008237:	e8 97 9a ff ff       	call   c0001cd3 <st_word>
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	6a 01                	push   0x1
c0008241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008245:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008249:	83 c0 07             	add    eax,0x7
c000824c:	83 d2 00             	adc    edx,0x0
c000824f:	52                   	push   edx
c0008250:	50                   	push   eax
c0008251:	55                   	push   ebp
c0008252:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008256:	e8 d1 99 ff ff       	call   c0001c2c <disk_write>
c000825b:	83 c4 14             	add    esp,0x14
c000825e:	6a 01                	push   0x1
c0008260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008264:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008268:	83 c0 01             	add    eax,0x1
c000826b:	83 d2 00             	adc    edx,0x0
c000826e:	52                   	push   edx
c000826f:	50                   	push   eax
c0008270:	55                   	push   ebp
c0008271:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008275:	e8 b2 99 ff ff       	call   c0001c2c <disk_write>
c000827a:	83 c4 20             	add    esp,0x20
c000827d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008284:	31 d2                	xor    edx,edx
c0008286:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000828c:	31 db                	xor    ebx,ebx
c000828e:	89 e8                	mov    eax,ebp
c0008290:	e8 60 9a ff ff       	call   c0001cf5 <mem_set>
c0008295:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000829a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a1:	0f 94 c3             	sete   bl
c00082a4:	4b                   	dec    ebx
c00082a5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082ab:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082b6:	75 21                	jne    c00082d9 <f_mkfs+0xf68>
c00082b8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082bd:	89 e8                	mov    eax,ebp
c00082bf:	e8 13 9a ff ff       	call   c0001cd7 <st_dword>
c00082c4:	8d 45 04             	lea    eax,[ebp+0x4]
c00082c7:	83 ca ff             	or     edx,0xffffffff
c00082ca:	e8 08 9a ff ff       	call   c0001cd7 <st_dword>
c00082cf:	8d 45 08             	lea    eax,[ebp+0x8]
c00082d2:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082d7:	eb 04                	jmp    c00082dd <f_mkfs+0xf6c>
c00082d9:	89 da                	mov    edx,ebx
c00082db:	89 e8                	mov    eax,ebp
c00082dd:	e8 f5 99 ff ff       	call   c0001cd7 <st_dword>
c00082e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082ea:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082f2:	39 ce                	cmp    esi,ecx
c00082f4:	76 02                	jbe    c00082f8 <f_mkfs+0xf87>
c00082f6:	89 ce                	mov    esi,ecx
c00082f8:	83 ec 0c             	sub    esp,0xc
c00082fb:	56                   	push   esi
c00082fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008300:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008304:	55                   	push   ebp
c0008305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008309:	e8 1e 99 ff ff       	call   c0001c2c <disk_write>
c000830e:	83 c4 20             	add    esp,0x20
c0008311:	85 c0                	test   eax,eax
c0008313:	0f 85 09 01 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008319:	31 d2                	xor    edx,edx
c000831b:	b9 00 02 00 00       	mov    ecx,0x200
c0008320:	89 e8                	mov    eax,ebp
c0008322:	e8 ce 99 ff ff       	call   c0001cf5 <mem_set>
c0008327:	31 d2                	xor    edx,edx
c0008329:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000832d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008331:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008335:	75 b3                	jne    c00082ea <f_mkfs+0xf79>
c0008337:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000833a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008341:	40                   	inc    eax
c0008342:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008346:	0f 87 65 ff ff ff    	ja     c00082b1 <f_mkfs+0xf40>
c000834c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008351:	74 04                	je     c0008357 <f_mkfs+0xfe6>
c0008353:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008357:	89 fb                	mov    ebx,edi
c0008359:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000835d:	76 04                	jbe    c0008363 <f_mkfs+0xff2>
c000835f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008363:	83 ec 0c             	sub    esp,0xc
c0008366:	53                   	push   ebx
c0008367:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836f:	55                   	push   ebp
c0008370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008374:	e8 b3 98 ff ff       	call   c0001c2c <disk_write>
c0008379:	83 c4 20             	add    esp,0x20
c000837c:	85 c0                	test   eax,eax
c000837e:	0f 85 9e 00 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008384:	31 d2                	xor    edx,edx
c0008386:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000838a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000838e:	29 df                	sub    edi,ebx
c0008390:	75 c5                	jne    c0008357 <f_mkfs+0xfe6>
c0008392:	b1 0c                	mov    cl,0xc
c0008394:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008399:	74 1d                	je     c00083b8 <f_mkfs+0x1047>
c000839b:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a0:	b1 06                	mov    cl,0x6
c00083a2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083a6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083aa:	72 0c                	jb     c00083b8 <f_mkfs+0x1047>
c00083ac:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b1:	0f 94 c1             	sete   cl
c00083b4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083b8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083bd:	75 4c                	jne    c000840b <f_mkfs+0x109a>
c00083bf:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083c3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083ce:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083d5:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e0:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083eb:	0f b6 c9             	movzx  ecx,cl
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	55                   	push   ebp
c00083f2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083fd:	e8 2f c2 ff ff       	call   c0004631 <create_partition>
c0008402:	83 c4 10             	add    esp,0x10
c0008405:	89 c3                	mov    ebx,eax
c0008407:	85 c0                	test   eax,eax
c0008409:	75 34                	jne    c000843f <f_mkfs+0x10ce>
c000840b:	31 db                	xor    ebx,ebx
c000840d:	50                   	push   eax
c000840e:	6a 00                	push   0x0
c0008410:	6a 00                	push   0x0
c0008412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008416:	e8 27 98 ff ff       	call   c0001c42 <disk_ioctl>
c000841b:	83 c4 10             	add    esp,0x10
c000841e:	85 c0                	test   eax,eax
c0008420:	74 1d                	je     c000843f <f_mkfs+0x10ce>
c0008422:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000842a:	75 0c                	jne    c0008438 <f_mkfs+0x10c7>
c000842c:	83 ec 0c             	sub    esp,0xc
c000842f:	55                   	push   ebp
c0008430:	e8 75 00 00 00       	call   c00084aa <ff_memfree>
c0008435:	83 c4 10             	add    esp,0x10
c0008438:	bb 01 00 00 00       	mov    ebx,0x1
c000843d:	eb 48                	jmp    c0008487 <f_mkfs+0x1116>
c000843f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008447:	75 3e                	jne    c0008487 <f_mkfs+0x1116>
c0008449:	83 ec 0c             	sub    esp,0xc
c000844c:	55                   	push   ebp
c000844d:	e8 58 00 00 00       	call   c00084aa <ff_memfree>
c0008452:	83 c4 10             	add    esp,0x10
c0008455:	eb 30                	jmp    c0008487 <f_mkfs+0x1116>
c0008457:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845c:	0f 85 eb fa ff ff    	jne    c0007f4d <f_mkfs+0xbdc>
c0008462:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008466:	81 ff 80 00 00 00    	cmp    edi,0x80
c000846c:	0f 86 b8 f9 ff ff    	jbe    c0007e2a <f_mkfs+0xab9>
c0008472:	e9 bf fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008477:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000847c:	0f 85 c0 fa ff ff    	jne    c0007f42 <f_mkfs+0xbd1>
c0008482:	e9 af fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008487:	81 c4 9c 00 00 00    	add    esp,0x9c
c000848d:	89 d8                	mov    eax,ebx
c000848f:	5b                   	pop    ebx
c0008490:	5e                   	pop    esi
c0008491:	5f                   	pop    edi
c0008492:	5d                   	pop    ebp
c0008493:	c3                   	ret    

c0008494 <ff_memalloc>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	83 ec 0c             	sub    esp,0xc
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	e8 9d 73 00 00       	call   c000f840 <malloc>
c00084a3:	83 c4 10             	add    esp,0x10
c00084a6:	83 c4 0c             	add    esp,0xc
c00084a9:	c3                   	ret    

c00084aa <ff_memfree>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	83 ec 0c             	sub    esp,0xc
c00084b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084b4:	e8 97 73 00 00       	call   c000f850 <free>
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	90                   	nop
c00084bd:	83 c4 0c             	add    esp,0xc
c00084c0:	c3                   	ret    

c00084c1 <ff_uni2oem>:
c00084c1:	83 ec 14             	sub    esp,0x14
c00084c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084c8:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084cc:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084d3:	c7 44 24 0c 00 98 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029800
c00084db:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e0:	77 0b                	ja     c00084ed <ff_uni2oem+0x2c>
c00084e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084e6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084eb:	eb 5b                	jmp    c0008548 <ff_uni2oem+0x87>
c00084ed:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084f5:	77 51                	ja     c0008548 <ff_uni2oem+0x87>
c00084f7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084fd:	75 49                	jne    c0008548 <ff_uni2oem+0x87>
c00084ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008506:	eb 0b                	jmp    c0008513 <ff_uni2oem+0x52>
c0008508:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000850d:	40                   	inc    eax
c000850e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008513:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008519:	77 1b                	ja     c0008536 <ff_uni2oem+0x75>
c000851b:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008520:	01 c0                	add    eax,eax
c0008522:	89 c2                	mov    edx,eax
c0008524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008528:	01 d0                	add    eax,edx
c000852a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000852d:	0f b7 c0             	movzx  eax,ax
c0008530:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008534:	75 d2                	jne    c0008508 <ff_uni2oem+0x47>
c0008536:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000853b:	83 e8 80             	sub    eax,0xffffff80
c000853e:	25 ff 00 00 00       	and    eax,0xff
c0008543:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008548:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000854d:	83 c4 14             	add    esp,0x14
c0008550:	c3                   	ret    

c0008551 <ff_oem2uni>:
c0008551:	83 ec 18             	sub    esp,0x18
c0008554:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000855c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008561:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008565:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000856c:	c7 44 24 10 00 98 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029800
c0008574:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000857a:	77 0b                	ja     c0008587 <ff_oem2uni+0x36>
c000857c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008580:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008585:	eb 2d                	jmp    c00085b4 <ff_oem2uni+0x63>
c0008587:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000858d:	75 25                	jne    c00085b4 <ff_oem2uni+0x63>
c000858f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008596:	77 1c                	ja     c00085b4 <ff_oem2uni+0x63>
c0008598:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000859d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085a2:	01 c0                	add    eax,eax
c00085a4:	89 c2                	mov    edx,eax
c00085a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085aa:	01 d0                	add    eax,edx
c00085ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085af:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085b4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085b9:	83 c4 18             	add    esp,0x18
c00085bc:	c3                   	ret    

c00085bd <ff_wtoupper>:
c00085bd:	83 ec 10             	sub    esp,0x10
c00085c0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085c8:	0f 87 3e 01 00 00    	ja     c000870c <ff_wtoupper+0x14f>
c00085ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085d7:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085de:	77 07                	ja     c00085e7 <ff_wtoupper+0x2a>
c00085e0:	b8 00 96 02 c0       	mov    eax,0xc0029600
c00085e5:	eb 05                	jmp    c00085ec <ff_wtoupper+0x2f>
c00085e7:	b8 40 95 02 c0       	mov    eax,0xc0029540
c00085ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085f4:	8d 50 02             	lea    edx,[eax+0x2]
c00085f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008603:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008609:	0f 84 f4 00 00 00    	je     c0008703 <ff_wtoupper+0x146>
c000860f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008614:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008619:	0f 82 e4 00 00 00    	jb     c0008703 <ff_wtoupper+0x146>
c000861f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008623:	8d 50 02             	lea    edx,[eax+0x2]
c0008626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000862a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000862d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008632:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008637:	66 c1 e8 08          	shr    ax,0x8
c000863b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008640:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008647:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000864c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008651:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008656:	01 ca                	add    edx,ecx
c0008658:	39 d0                	cmp    eax,edx
c000865a:	0f 8d 86 00 00 00    	jge    c00086e6 <ff_wtoupper+0x129>
c0008660:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008665:	83 f8 08             	cmp    eax,0x8
c0008668:	0f 87 94 00 00 00    	ja     c0008702 <ff_wtoupper+0x145>
c000866e:	8b 04 85 00 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b00]
c0008675:	ff e0                	jmp    eax
c0008677:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000867c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008681:	29 c2                	sub    edx,eax
c0008683:	89 d0                	mov    eax,edx
c0008685:	01 c0                	add    eax,eax
c0008687:	89 c2                	mov    edx,eax
c0008689:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000868d:	01 d0                	add    eax,edx
c000868f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008692:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008697:	eb 4b                	jmp    c00086e4 <ff_wtoupper+0x127>
c0008699:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000869e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086a2:	83 e0 01             	and    eax,0x1
c00086a5:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086aa:	eb 38                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086ac:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086b2:	eb 30                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086ba:	eb 28                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086c2:	eb 20                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ca:	eb 18                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086cc:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086d2:	eb 10                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086d4:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086da:	eb 08                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086dc:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086e3:	90                   	nop
c00086e4:	eb 1c                	jmp    c0008702 <ff_wtoupper+0x145>
c00086e6:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086ec:	0f 85 fe fe ff ff    	jne    c00085f0 <ff_wtoupper+0x33>
c00086f2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086f7:	01 c0                	add    eax,eax
c00086f9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086fd:	e9 ee fe ff ff       	jmp    c00085f0 <ff_wtoupper+0x33>
c0008702:	90                   	nop
c0008703:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008708:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000870c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008710:	83 c4 10             	add    esp,0x10
c0008713:	c3                   	ret    

c0008714 <psrc_set_converter>:
c0008714:	56                   	push   esi
c0008715:	89 d6                	mov    esi,edx
c0008717:	53                   	push   ebx
c0008718:	89 c3                	mov    ebx,eax
c000871a:	83 ec 0c             	sub    esp,0xc
c000871d:	52                   	push   edx
c000871e:	50                   	push   eax
c000871f:	e8 6f 55 00 00       	call   c000dc93 <sinc_set_converter>
c0008724:	83 c4 10             	add    esp,0x10
c0008727:	85 c0                	test   eax,eax
c0008729:	74 25                	je     c0008750 <psrc_set_converter+0x3c>
c000872b:	50                   	push   eax
c000872c:	50                   	push   eax
c000872d:	56                   	push   esi
c000872e:	53                   	push   ebx
c000872f:	e8 17 5d 00 00       	call   c000e44b <zoh_set_converter>
c0008734:	83 c4 10             	add    esp,0x10
c0008737:	85 c0                	test   eax,eax
c0008739:	74 15                	je     c0008750 <psrc_set_converter+0x3c>
c000873b:	51                   	push   ecx
c000873c:	51                   	push   ecx
c000873d:	56                   	push   esi
c000873e:	53                   	push   ebx
c000873f:	e8 0f 11 00 00       	call   c0009853 <linear_set_converter>
c0008744:	83 c4 10             	add    esp,0x10
c0008747:	ba 0a 00 00 00       	mov    edx,0xa
c000874c:	85 c0                	test   eax,eax
c000874e:	75 02                	jne    c0008752 <psrc_set_converter+0x3e>
c0008750:	31 d2                	xor    edx,edx
c0008752:	89 d0                	mov    eax,edx
c0008754:	5a                   	pop    edx
c0008755:	5b                   	pop    ebx
c0008756:	5e                   	pop    esi
c0008757:	c3                   	ret    

c0008758 <src_delete>:
c0008758:	53                   	push   ebx
c0008759:	83 ec 08             	sub    esp,0x8
c000875c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008760:	85 db                	test   ebx,ebx
c0008762:	74 29                	je     c000878d <src_delete+0x35>
c0008764:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008767:	85 c0                	test   eax,eax
c0008769:	74 0c                	je     c0008777 <src_delete+0x1f>
c000876b:	83 ec 0c             	sub    esp,0xc
c000876e:	50                   	push   eax
c000876f:	e8 dc 70 00 00       	call   c000f850 <free>
c0008774:	83 c4 10             	add    esp,0x10
c0008777:	50                   	push   eax
c0008778:	6a 3c                	push   0x3c
c000877a:	6a 00                	push   0x0
c000877c:	53                   	push   ebx
c000877d:	e8 f6 7f ff ff       	call   c0000778 <memset>
c0008782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008785:	e8 c6 70 00 00       	call   c000f850 <free>
c000878a:	83 c4 10             	add    esp,0x10
c000878d:	31 c0                	xor    eax,eax
c000878f:	83 c4 08             	add    esp,0x8
c0008792:	5b                   	pop    ebx
c0008793:	c3                   	ret    

c0008794 <src_process>:
c0008794:	55                   	push   ebp
c0008795:	57                   	push   edi
c0008796:	56                   	push   esi
c0008797:	53                   	push   ebx
c0008798:	83 ec 1c             	sub    esp,0x1c
c000879b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000879f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087a3:	85 ed                	test   ebp,ebp
c00087a5:	0f 84 6f 01 00 00    	je     c000891a <src_process+0x186>
c00087ab:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087af:	0f 84 6c 01 00 00    	je     c0008921 <src_process+0x18d>
c00087b5:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087b9:	0f 84 62 01 00 00    	je     c0008921 <src_process+0x18d>
c00087bf:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087c6:	0f 85 5c 01 00 00    	jne    c0008928 <src_process+0x194>
c00087cc:	85 db                	test   ebx,ebx
c00087ce:	0f 84 5b 01 00 00    	je     c000892f <src_process+0x19b>
c00087d4:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087d6:	85 f6                	test   esi,esi
c00087d8:	0f 84 58 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087de:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e1:	85 ff                	test   edi,edi
c00087e3:	0f 84 4d 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087e9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087ec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	68 00 00 70 3f       	push   0x3f700000
c00087fc:	6a 00                	push   0x0
c00087fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008806:	e8 b4 fc 01 00       	call   c00284bf <__ltdf2>
c000880b:	83 c4 10             	add    esp,0x10
c000880e:	85 c0                	test   eax,eax
c0008810:	0f 88 27 01 00 00    	js     c000893d <src_process+0x1a9>
c0008816:	68 00 00 70 40       	push   0x40700000
c000881b:	6a 00                	push   0x0
c000881d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008825:	e8 77 fc 01 00       	call   c00284a1 <__gtdf2>
c000882a:	83 c4 10             	add    esp,0x10
c000882d:	85 c0                	test   eax,eax
c000882f:	0f 8f 08 01 00 00    	jg     c000893d <src_process+0x1a9>
c0008835:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008839:	79 07                	jns    c0008842 <src_process+0xae>
c000883b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008842:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008845:	85 c0                	test   eax,eax
c0008847:	79 50                	jns    c0008899 <src_process+0x105>
c0008849:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008850:	39 fe                	cmp    esi,edi
c0008852:	72 37                	jb     c000888b <src_process+0xf7>
c0008854:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000885b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008862:	68 00 00 70 3f       	push   0x3f700000
c0008867:	6a 00                	push   0x0
c0008869:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000886c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000886f:	e8 4b fc 01 00       	call   c00284bf <__ltdf2>
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	85 c0                	test   eax,eax
c0008879:	79 37                	jns    c00088b2 <src_process+0x11e>
c000887b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000887f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008883:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008886:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008889:	eb 27                	jmp    c00088b2 <src_process+0x11e>
c000888b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000888e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008892:	8d 04 86             	lea    eax,[esi+eax*4]
c0008895:	39 c7                	cmp    edi,eax
c0008897:	eb 0d                	jmp    c00088a6 <src_process+0x112>
c0008899:	39 fe                	cmp    esi,edi
c000889b:	72 ee                	jb     c000888b <src_process+0xf7>
c000889d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a1:	8d 04 87             	lea    eax,[edi+eax*4]
c00088a4:	39 c6                	cmp    esi,eax
c00088a6:	73 ac                	jae    c0008854 <src_process+0xc0>
c00088a8:	b8 10 00 00 00       	mov    eax,0x10
c00088ad:	e9 90 00 00 00       	jmp    c0008942 <src_process+0x1ae>
c00088b2:	83 ec 10             	sub    esp,0x10
c00088b5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088b8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c1:	e8 fe f2 01 00       	call   c0027bc4 <__subdf3>
c00088c6:	83 c4 18             	add    esp,0x18
c00088c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d1:	52                   	push   edx
c00088d2:	50                   	push   eax
c00088d3:	e8 78 fd 01 00       	call   c0028650 <fabs>
c00088d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e0:	83 c4 10             	add    esp,0x10
c00088e3:	68 af 03 d2 3c       	push   0x3cd203af
c00088e8:	68 16 56 e7 9e       	push   0x9ee75616
c00088ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f5:	e8 c5 fb 01 00       	call   c00284bf <__ltdf2>
c00088fa:	83 c4 10             	add    esp,0x10
c00088fd:	85 c0                	test   eax,eax
c00088ff:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008903:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008907:	79 05                	jns    c000890e <src_process+0x17a>
c0008909:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000890c:	eb 03                	jmp    c0008911 <src_process+0x17d>
c000890e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008911:	83 c4 1c             	add    esp,0x1c
c0008914:	5b                   	pop    ebx
c0008915:	5e                   	pop    esi
c0008916:	5f                   	pop    edi
c0008917:	5d                   	pop    ebp
c0008918:	ff e0                	jmp    eax
c000891a:	b8 02 00 00 00       	mov    eax,0x2
c000891f:	eb 21                	jmp    c0008942 <src_process+0x1ae>
c0008921:	b8 07 00 00 00       	mov    eax,0x7
c0008926:	eb 1a                	jmp    c0008942 <src_process+0x1ae>
c0008928:	b8 12 00 00 00       	mov    eax,0x12
c000892d:	eb 13                	jmp    c0008942 <src_process+0x1ae>
c000892f:	b8 03 00 00 00       	mov    eax,0x3
c0008934:	eb 0c                	jmp    c0008942 <src_process+0x1ae>
c0008936:	b8 04 00 00 00       	mov    eax,0x4
c000893b:	eb 05                	jmp    c0008942 <src_process+0x1ae>
c000893d:	b8 06 00 00 00       	mov    eax,0x6
c0008942:	83 c4 1c             	add    esp,0x1c
c0008945:	5b                   	pop    ebx
c0008946:	5e                   	pop    esi
c0008947:	5f                   	pop    edi
c0008948:	5d                   	pop    ebp
c0008949:	c3                   	ret    

c000894a <src_callback_read>:
c000894a:	55                   	push   ebp
c000894b:	57                   	push   edi
c000894c:	56                   	push   esi
c000894d:	53                   	push   ebx
c000894e:	83 ec 3c             	sub    esp,0x3c
c0008951:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008955:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008959:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000895d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008961:	85 ed                	test   ebp,ebp
c0008963:	0f 8e 52 01 00 00    	jle    c0008abb <src_callback_read+0x171>
c0008969:	85 db                	test   ebx,ebx
c000896b:	0f 84 4a 01 00 00    	je     c0008abb <src_callback_read+0x171>
c0008971:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008978:	74 0c                	je     c0008986 <src_callback_read+0x3c>
c000897a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008981:	e9 35 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008986:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000898a:	75 0c                	jne    c0008998 <src_callback_read+0x4e>
c000898c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008993:	e9 23 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008998:	51                   	push   ecx
c0008999:	6a 24                	push   0x24
c000899b:	6a 00                	push   0x0
c000899d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a1:	50                   	push   eax
c00089a2:	e8 d1 7d ff ff       	call   c0000778 <memset>
c00089a7:	83 c4 10             	add    esp,0x10
c00089aa:	68 00 00 70 3f       	push   0x3f700000
c00089af:	6a 00                	push   0x0
c00089b1:	57                   	push   edi
c00089b2:	56                   	push   esi
c00089b3:	e8 07 fb 01 00       	call   c00284bf <__ltdf2>
c00089b8:	83 c4 10             	add    esp,0x10
c00089bb:	85 c0                	test   eax,eax
c00089bd:	78 3e                	js     c00089fd <src_callback_read+0xb3>
c00089bf:	68 00 00 70 40       	push   0x40700000
c00089c4:	6a 00                	push   0x0
c00089c6:	57                   	push   edi
c00089c7:	56                   	push   esi
c00089c8:	e8 d4 fa 01 00       	call   c00284a1 <__gtdf2>
c00089cd:	83 c4 10             	add    esp,0x10
c00089d0:	85 c0                	test   eax,eax
c00089d2:	7f 29                	jg     c00089fd <src_callback_read+0xb3>
c00089d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089d8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e0:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089e4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089e7:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089ef:	31 f6                	xor    esi,esi
c00089f1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089f8:	e9 97 00 00 00       	jmp    c0008a94 <src_callback_read+0x14a>
c00089fd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a04:	e9 b2 00 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008a09:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a11:	52                   	push   edx
c0008a12:	52                   	push   edx
c0008a13:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a17:	50                   	push   eax
c0008a18:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a1b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a22:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a2a:	83 c4 10             	add    esp,0x10
c0008a2d:	85 c0                	test   eax,eax
c0008a2f:	75 08                	jne    c0008a39 <src_callback_read+0xef>
c0008a31:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a39:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a40:	50                   	push   eax
c0008a41:	50                   	push   eax
c0008a42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a46:	50                   	push   eax
c0008a47:	53                   	push   ebx
c0008a48:	e8 47 fd ff ff       	call   c0008794 <src_process>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a57:	85 c0                	test   eax,eax
c0008a59:	75 49                	jne    c0008aa4 <src_callback_read+0x15a>
c0008a5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a5f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a62:	89 f9                	mov    ecx,edi
c0008a64:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a68:	0f af ca             	imul   ecx,edx
c0008a6b:	c1 e1 02             	shl    ecx,0x2
c0008a6e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a72:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a76:	0f af d1             	imul   edx,ecx
c0008a79:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a7d:	c1 e2 02             	shl    edx,0x2
c0008a80:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a84:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a87:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a8c:	74 12                	je     c0008aa0 <src_callback_read+0x156>
c0008a8e:	39 d5                	cmp    ebp,edx
c0008a90:	7e 14                	jle    c0008aa6 <src_callback_read+0x15c>
c0008a92:	89 d6                	mov    esi,edx
c0008a94:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a99:	75 9e                	jne    c0008a39 <src_callback_read+0xef>
c0008a9b:	e9 69 ff ff ff       	jmp    c0008a09 <src_callback_read+0xbf>
c0008aa0:	85 c9                	test   ecx,ecx
c0008aa2:	75 ea                	jne    c0008a8e <src_callback_read+0x144>
c0008aa4:	89 f2                	mov    edx,esi
c0008aa6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008aaa:	85 c0                	test   eax,eax
c0008aac:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008aaf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ab3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008ab6:	74 05                	je     c0008abd <src_callback_read+0x173>
c0008ab8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008abb:	31 d2                	xor    edx,edx
c0008abd:	83 c4 3c             	add    esp,0x3c
c0008ac0:	89 d0                	mov    eax,edx
c0008ac2:	5b                   	pop    ebx
c0008ac3:	5e                   	pop    esi
c0008ac4:	5f                   	pop    edi
c0008ac5:	5d                   	pop    ebp
c0008ac6:	c3                   	ret    

c0008ac7 <src_set_ratio>:
c0008ac7:	57                   	push   edi
c0008ac8:	ba 02 00 00 00       	mov    edx,0x2
c0008acd:	56                   	push   esi
c0008ace:	53                   	push   ebx
c0008acf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ad3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ad7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008adb:	85 db                	test   ebx,ebx
c0008add:	74 4c                	je     c0008b2b <src_set_ratio+0x64>
c0008adf:	ba 07 00 00 00       	mov    edx,0x7
c0008ae4:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ae8:	74 41                	je     c0008b2b <src_set_ratio+0x64>
c0008aea:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008aee:	74 3b                	je     c0008b2b <src_set_ratio+0x64>
c0008af0:	68 00 00 70 3f       	push   0x3f700000
c0008af5:	6a 00                	push   0x0
c0008af7:	57                   	push   edi
c0008af8:	56                   	push   esi
c0008af9:	e8 c1 f9 01 00       	call   c00284bf <__ltdf2>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	ba 06 00 00 00       	mov    edx,0x6
c0008b06:	85 c0                	test   eax,eax
c0008b08:	78 21                	js     c0008b2b <src_set_ratio+0x64>
c0008b0a:	68 00 00 70 40       	push   0x40700000
c0008b0f:	6a 00                	push   0x0
c0008b11:	57                   	push   edi
c0008b12:	56                   	push   esi
c0008b13:	e8 89 f9 01 00       	call   c00284a1 <__gtdf2>
c0008b18:	83 c4 10             	add    esp,0x10
c0008b1b:	ba 06 00 00 00       	mov    edx,0x6
c0008b20:	85 c0                	test   eax,eax
c0008b22:	7f 07                	jg     c0008b2b <src_set_ratio+0x64>
c0008b24:	89 33                	mov    DWORD PTR [ebx],esi
c0008b26:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b29:	31 d2                	xor    edx,edx
c0008b2b:	5b                   	pop    ebx
c0008b2c:	89 d0                	mov    eax,edx
c0008b2e:	5e                   	pop    esi
c0008b2f:	5f                   	pop    edi
c0008b30:	c3                   	ret    

c0008b31 <src_get_channels>:
c0008b31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b35:	b8 02 00 00 00       	mov    eax,0x2
c0008b3a:	85 d2                	test   edx,edx
c0008b3c:	74 14                	je     c0008b52 <src_get_channels+0x21>
c0008b3e:	b8 07 00 00 00       	mov    eax,0x7
c0008b43:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b47:	74 09                	je     c0008b52 <src_get_channels+0x21>
c0008b49:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b4d:	74 03                	je     c0008b52 <src_get_channels+0x21>
c0008b4f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b52:	c3                   	ret    

c0008b53 <src_reset>:
c0008b53:	53                   	push   ebx
c0008b54:	b8 02 00 00 00       	mov    eax,0x2
c0008b59:	83 ec 08             	sub    esp,0x8
c0008b5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b60:	85 db                	test   ebx,ebx
c0008b62:	74 36                	je     c0008b9a <src_reset+0x47>
c0008b64:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b67:	85 c0                	test   eax,eax
c0008b69:	74 09                	je     c0008b74 <src_reset+0x21>
c0008b6b:	83 ec 0c             	sub    esp,0xc
c0008b6e:	53                   	push   ebx
c0008b6f:	ff d0                	call   eax
c0008b71:	83 c4 10             	add    esp,0x10
c0008b74:	31 c0                	xor    eax,eax
c0008b76:	31 d2                	xor    edx,edx
c0008b78:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b7b:	89 03                	mov    DWORD PTR [ebx],eax
c0008b7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b80:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b83:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b8a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b91:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b98:	31 c0                	xor    eax,eax
c0008b9a:	83 c4 08             	add    esp,0x8
c0008b9d:	5b                   	pop    ebx
c0008b9e:	c3                   	ret    

c0008b9f <src_new>:
c0008b9f:	57                   	push   edi
c0008ba0:	56                   	push   esi
c0008ba1:	53                   	push   ebx
c0008ba2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008ba6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008baa:	85 f6                	test   esi,esi
c0008bac:	74 73                	je     c0008c21 <src_new+0x82>
c0008bae:	85 ff                	test   edi,edi
c0008bb0:	7f 08                	jg     c0008bba <src_new+0x1b>
c0008bb2:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bb8:	eb 1e                	jmp    c0008bd8 <src_new+0x39>
c0008bba:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc0:	50                   	push   eax
c0008bc1:	50                   	push   eax
c0008bc2:	6a 3c                	push   0x3c
c0008bc4:	6a 01                	push   0x1
c0008bc6:	e8 a5 6c 00 00       	call   c000f870 <calloc>
c0008bcb:	83 c4 10             	add    esp,0x10
c0008bce:	89 c3                	mov    ebx,eax
c0008bd0:	85 c0                	test   eax,eax
c0008bd2:	75 10                	jne    c0008be4 <src_new+0x45>
c0008bd4:	85 f6                	test   esi,esi
c0008bd6:	75 04                	jne    c0008bdc <src_new+0x3d>
c0008bd8:	31 db                	xor    ebx,ebx
c0008bda:	eb 4b                	jmp    c0008c27 <src_new+0x88>
c0008bdc:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008be2:	eb 43                	jmp    c0008c27 <src_new+0x88>
c0008be4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008be7:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bf2:	e8 1d fb ff ff       	call   c0008714 <psrc_set_converter>
c0008bf7:	85 c0                	test   eax,eax
c0008bf9:	74 18                	je     c0008c13 <src_new+0x74>
c0008bfb:	85 f6                	test   esi,esi
c0008bfd:	74 06                	je     c0008c05 <src_new+0x66>
c0008bff:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c05:	83 ec 0c             	sub    esp,0xc
c0008c08:	53                   	push   ebx
c0008c09:	31 db                	xor    ebx,ebx
c0008c0b:	e8 40 6c 00 00       	call   c000f850 <free>
c0008c10:	83 c4 10             	add    esp,0x10
c0008c13:	83 ec 0c             	sub    esp,0xc
c0008c16:	53                   	push   ebx
c0008c17:	e8 37 ff ff ff       	call   c0008b53 <src_reset>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	eb 06                	jmp    c0008c27 <src_new+0x88>
c0008c21:	85 ff                	test   edi,edi
c0008c23:	7f 9b                	jg     c0008bc0 <src_new+0x21>
c0008c25:	eb b1                	jmp    c0008bd8 <src_new+0x39>
c0008c27:	89 d8                	mov    eax,ebx
c0008c29:	5b                   	pop    ebx
c0008c2a:	5e                   	pop    esi
c0008c2b:	5f                   	pop    edi
c0008c2c:	c3                   	ret    

c0008c2d <src_callback_new>:
c0008c2d:	56                   	push   esi
c0008c2e:	53                   	push   ebx
c0008c2f:	53                   	push   ebx
c0008c30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c38:	85 f6                	test   esi,esi
c0008c3a:	75 0e                	jne    c0008c4a <src_callback_new+0x1d>
c0008c3c:	31 db                	xor    ebx,ebx
c0008c3e:	85 c0                	test   eax,eax
c0008c40:	74 47                	je     c0008c89 <src_callback_new+0x5c>
c0008c42:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c48:	eb 3f                	jmp    c0008c89 <src_callback_new+0x5c>
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	74 06                	je     c0008c54 <src_callback_new+0x27>
c0008c4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c54:	51                   	push   ecx
c0008c55:	50                   	push   eax
c0008c56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5e:	e8 3c ff ff ff       	call   c0008b9f <src_new>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	89 c3                	mov    ebx,eax
c0008c68:	85 c0                	test   eax,eax
c0008c6a:	74 1d                	je     c0008c89 <src_callback_new+0x5c>
c0008c6c:	83 ec 0c             	sub    esp,0xc
c0008c6f:	50                   	push   eax
c0008c70:	e8 de fe ff ff       	call   c0008b53 <src_reset>
c0008c75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c79:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c80:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c83:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c86:	83 c4 10             	add    esp,0x10
c0008c89:	89 d8                	mov    eax,ebx
c0008c8b:	5a                   	pop    edx
c0008c8c:	5b                   	pop    ebx
c0008c8d:	5e                   	pop    esi
c0008c8e:	c3                   	ret    

c0008c8f <src_get_name>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 14             	sub    esp,0x14
c0008c93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c97:	53                   	push   ebx
c0008c98:	e8 d0 4f 00 00       	call   c000dc6d <sinc_get_name>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	85 c0                	test   eax,eax
c0008ca2:	75 1d                	jne    c0008cc1 <src_get_name+0x32>
c0008ca4:	83 ec 0c             	sub    esp,0xc
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 80 57 00 00       	call   c000e42d <zoh_get_name>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 0d                	jne    c0008cc1 <src_get_name+0x32>
c0008cb4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 74 0b 00 00       	jmp    c0009835 <linear_get_name>
c0008cc1:	83 c4 08             	add    esp,0x8
c0008cc4:	5b                   	pop    ebx
c0008cc5:	c3                   	ret    

c0008cc6 <src_get_description>:
c0008cc6:	53                   	push   ebx
c0008cc7:	83 ec 14             	sub    esp,0x14
c0008cca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cce:	53                   	push   ebx
c0008ccf:	e8 ac 4f 00 00       	call   c000dc80 <sinc_get_description>
c0008cd4:	83 c4 10             	add    esp,0x10
c0008cd7:	85 c0                	test   eax,eax
c0008cd9:	75 1d                	jne    c0008cf8 <src_get_description+0x32>
c0008cdb:	83 ec 0c             	sub    esp,0xc
c0008cde:	53                   	push   ebx
c0008cdf:	e8 58 57 00 00       	call   c000e43c <zoh_get_description>
c0008ce4:	83 c4 10             	add    esp,0x10
c0008ce7:	85 c0                	test   eax,eax
c0008ce9:	75 0d                	jne    c0008cf8 <src_get_description+0x32>
c0008ceb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cef:	83 c4 08             	add    esp,0x8
c0008cf2:	5b                   	pop    ebx
c0008cf3:	e9 4c 0b 00 00       	jmp    c0009844 <linear_get_description>
c0008cf8:	83 c4 08             	add    esp,0x8
c0008cfb:	5b                   	pop    ebx
c0008cfc:	c3                   	ret    

c0008cfd <src_get_version>:
c0008cfd:	b8 00 99 02 c0       	mov    eax,0xc0029900
c0008d02:	c3                   	ret    

c0008d03 <src_is_valid_ratio>:
c0008d03:	83 ec 1c             	sub    esp,0x1c
c0008d06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d16:	68 00 00 70 3f       	push   0x3f700000
c0008d1b:	6a 00                	push   0x0
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 95 f7 01 00       	call   c00284bf <__ltdf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	31 d2                	xor    edx,edx
c0008d2f:	85 c0                	test   eax,eax
c0008d31:	78 1e                	js     c0008d51 <src_is_valid_ratio+0x4e>
c0008d33:	68 00 00 70 40       	push   0x40700000
c0008d38:	6a 00                	push   0x0
c0008d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d42:	e8 5a f7 01 00       	call   c00284a1 <__gtdf2>
c0008d47:	31 d2                	xor    edx,edx
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	85 c0                	test   eax,eax
c0008d4e:	0f 9e c2             	setle  dl
c0008d51:	89 d0                	mov    eax,edx
c0008d53:	83 c4 1c             	add    esp,0x1c
c0008d56:	c3                   	ret    

c0008d57 <src_error>:
c0008d57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d5b:	31 c0                	xor    eax,eax
c0008d5d:	85 d2                	test   edx,edx
c0008d5f:	74 03                	je     c0008d64 <src_error+0xd>
c0008d61:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d64:	c3                   	ret    

c0008d65 <src_strerror>:
c0008d65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d69:	31 c0                	xor    eax,eax
c0008d6b:	83 fa 17             	cmp    edx,0x17
c0008d6e:	77 07                	ja     c0008d77 <src_strerror+0x12>
c0008d70:	8b 04 95 60 9d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd62a0]
c0008d77:	c3                   	ret    

c0008d78 <src_simple>:
c0008d78:	56                   	push   esi
c0008d79:	53                   	push   ebx
c0008d7a:	83 ec 18             	sub    esp,0x18
c0008d7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d81:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d85:	50                   	push   eax
c0008d86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8e:	e8 0c fe ff ff       	call   c0008b9f <src_new>
c0008d93:	83 c4 10             	add    esp,0x10
c0008d96:	85 c0                	test   eax,eax
c0008d98:	75 06                	jne    c0008da0 <src_simple+0x28>
c0008d9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9e:	eb 25                	jmp    c0008dc5 <src_simple+0x4d>
c0008da0:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008da7:	89 c3                	mov    ebx,eax
c0008da9:	50                   	push   eax
c0008daa:	50                   	push   eax
c0008dab:	56                   	push   esi
c0008dac:	53                   	push   ebx
c0008dad:	e8 e2 f9 ff ff       	call   c0008794 <src_process>
c0008db2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008db5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008db9:	e8 9a f9 ff ff       	call   c0008758 <src_delete>
c0008dbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dc2:	83 c4 10             	add    esp,0x10
c0008dc5:	83 c4 14             	add    esp,0x14
c0008dc8:	5b                   	pop    ebx
c0008dc9:	5e                   	pop    esi
c0008dca:	c3                   	ret    

c0008dcb <src_short_to_float_array>:
c0008dcb:	53                   	push   ebx
c0008dcc:	83 ec 18             	sub    esp,0x18
c0008dcf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008dd3:	85 db                	test   ebx,ebx
c0008dd5:	74 54                	je     c0008e2b <src_short_to_float_array+0x60>
c0008dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ddb:	4b                   	dec    ebx
c0008ddc:	83 ec 0c             	sub    esp,0xc
c0008ddf:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008de3:	50                   	push   eax
c0008de4:	e8 6a f4 01 00       	call   c0028253 <__floatsidf>
c0008de9:	83 c4 10             	add    esp,0x10
c0008dec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008df4:	68 00 00 00 3f       	push   0x3f000000
c0008df9:	6a 00                	push   0x0
c0008dfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e03:	e8 e8 ed 01 00       	call   c0027bf0 <__muldf3>
c0008e08:	59                   	pop    ecx
c0008e09:	59                   	pop    ecx
c0008e0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1a:	e8 a4 f6 01 00       	call   c00284c3 <__truncdfsf2>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e26:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e29:	eb a8                	jmp    c0008dd3 <src_short_to_float_array+0x8>
c0008e2b:	83 c4 18             	add    esp,0x18
c0008e2e:	5b                   	pop    ebx
c0008e2f:	c3                   	ret    

c0008e30 <src_float_to_short_array>:
c0008e30:	56                   	push   esi
c0008e31:	53                   	push   ebx
c0008e32:	83 ec 14             	sub    esp,0x14
c0008e35:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e39:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e3d:	85 db                	test   ebx,ebx
c0008e3f:	0f 84 a4 00 00 00    	je     c0008ee9 <src_float_to_short_array+0xb9>
c0008e45:	83 ec 0c             	sub    esp,0xc
c0008e48:	4b                   	dec    ebx
c0008e49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e4d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e50:	e8 92 f7 01 00       	call   c00285e7 <__extendsfdf2>
c0008e55:	83 c4 10             	add    esp,0x10
c0008e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e60:	68 00 00 e0 41       	push   0x41e00000
c0008e65:	6a 00                	push   0x0
c0008e67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6f:	e8 7c ed 01 00       	call   c0027bf0 <__muldf3>
c0008e74:	83 c4 10             	add    esp,0x10
c0008e77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e7f:	68 ff ff df 41       	push   0x41dfffff
c0008e84:	68 00 00 c0 ff       	push   0xffc00000
c0008e89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e91:	e8 27 f6 01 00       	call   c00284bd <__gedf2>
c0008e96:	83 c4 10             	add    esp,0x10
c0008e99:	85 c0                	test   eax,eax
c0008e9b:	78 08                	js     c0008ea5 <src_float_to_short_array+0x75>
c0008e9d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008ea3:	eb 98                	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ea5:	68 00 00 e0 c1       	push   0xc1e00000
c0008eaa:	6a 00                	push   0x0
c0008eac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb4:	e8 08 f6 01 00       	call   c00284c1 <__ledf2>
c0008eb9:	83 c4 10             	add    esp,0x10
c0008ebc:	85 c0                	test   eax,eax
c0008ebe:	7f 0b                	jg     c0008ecb <src_float_to_short_array+0x9b>
c0008ec0:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ec6:	e9 72 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ecb:	50                   	push   eax
c0008ecc:	50                   	push   eax
c0008ecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed5:	e8 96 f7 01 00       	call   c0028670 <lrint>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	c1 f8 10             	sar    eax,0x10
c0008ee0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ee4:	e9 54 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ee9:	83 c4 14             	add    esp,0x14
c0008eec:	5b                   	pop    ebx
c0008eed:	5e                   	pop    esi
c0008eee:	c3                   	ret    

c0008eef <src_int_to_float_array>:
c0008eef:	53                   	push   ebx
c0008ef0:	83 ec 18             	sub    esp,0x18
c0008ef3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ef7:	85 db                	test   ebx,ebx
c0008ef9:	74 52                	je     c0008f4d <src_int_to_float_array+0x5e>
c0008efb:	83 ec 0c             	sub    esp,0xc
c0008efe:	4b                   	dec    ebx
c0008eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f03:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f06:	e8 48 f3 01 00       	call   c0028253 <__floatsidf>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f16:	68 00 00 00 3e       	push   0x3e000000
c0008f1b:	6a 00                	push   0x0
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f25:	e8 c6 ec 01 00       	call   c0027bf0 <__muldf3>
c0008f2a:	59                   	pop    ecx
c0008f2b:	59                   	pop    ecx
c0008f2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3c:	e8 82 f5 01 00       	call   c00284c3 <__truncdfsf2>
c0008f41:	83 c4 10             	add    esp,0x10
c0008f44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f48:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f4b:	eb aa                	jmp    c0008ef7 <src_int_to_float_array+0x8>
c0008f4d:	83 c4 18             	add    esp,0x18
c0008f50:	5b                   	pop    ebx
c0008f51:	c3                   	ret    

c0008f52 <src_float_to_int_array>:
c0008f52:	56                   	push   esi
c0008f53:	53                   	push   ebx
c0008f54:	83 ec 14             	sub    esp,0x14
c0008f57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f5f:	85 db                	test   ebx,ebx
c0008f61:	0f 84 a2 00 00 00    	je     c0009009 <src_float_to_int_array+0xb7>
c0008f67:	83 ec 0c             	sub    esp,0xc
c0008f6a:	4b                   	dec    ebx
c0008f6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f6f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f72:	e8 70 f6 01 00       	call   c00285e7 <__extendsfdf2>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f82:	68 00 00 e0 41       	push   0x41e00000
c0008f87:	6a 00                	push   0x0
c0008f89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f91:	e8 5a ec 01 00       	call   c0027bf0 <__muldf3>
c0008f96:	83 c4 10             	add    esp,0x10
c0008f99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa1:	68 ff ff df 41       	push   0x41dfffff
c0008fa6:	68 00 00 c0 ff       	push   0xffc00000
c0008fab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008faf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb3:	e8 05 f5 01 00       	call   c00284bd <__gedf2>
c0008fb8:	83 c4 10             	add    esp,0x10
c0008fbb:	85 c0                	test   eax,eax
c0008fbd:	78 09                	js     c0008fc8 <src_float_to_int_array+0x76>
c0008fbf:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fc6:	eb 97                	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fc8:	68 00 00 e0 c1       	push   0xc1e00000
c0008fcd:	6a 00                	push   0x0
c0008fcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	e8 e5 f4 01 00       	call   c00284c1 <__ledf2>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	85 c0                	test   eax,eax
c0008fe1:	7f 0c                	jg     c0008fef <src_float_to_int_array+0x9d>
c0008fe3:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fea:	e9 70 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fef:	50                   	push   eax
c0008ff0:	50                   	push   eax
c0008ff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff9:	e8 72 f6 01 00       	call   c0028670 <lrint>
c0008ffe:	83 c4 10             	add    esp,0x10
c0009001:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009004:	e9 56 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0009009:	83 c4 14             	add    esp,0x14
c000900c:	5b                   	pop    ebx
c000900d:	5e                   	pop    esi
c000900e:	c3                   	ret    

c000900f <linear_vari_process>:
c000900f:	55                   	push   ebp
c0009010:	31 d2                	xor    edx,edx
c0009012:	57                   	push   edi
c0009013:	56                   	push   esi
c0009014:	53                   	push   ebx
c0009015:	83 ec 3c             	sub    esp,0x3c
c0009018:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000901c:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009020:	0f 8e d3 07 00 00    	jle    c00097f9 <linear_vari_process+0x7ea>
c0009026:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000902a:	ba 05 00 00 00       	mov    edx,0x5
c000902f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009032:	85 db                	test   ebx,ebx
c0009034:	0f 84 bf 07 00 00    	je     c00097f9 <linear_vari_process+0x7ea>
c000903a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000903d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009041:	74 19                	je     c000905c <linear_vari_process+0x4d>
c0009043:	31 d2                	xor    edx,edx
c0009045:	39 c2                	cmp    edx,eax
c0009047:	7d 0c                	jge    c0009055 <linear_vari_process+0x46>
c0009049:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000904b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000904e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009052:	42                   	inc    edx
c0009053:	eb f0                	jmp    c0009045 <linear_vari_process+0x36>
c0009055:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000905c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000905f:	0f af d0             	imul   edx,eax
c0009062:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009065:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009069:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009070:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009073:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000907a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000907e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009081:	8b 00                	mov    eax,DWORD PTR [eax]
c0009083:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009087:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000908b:	68 00 00 70 3f       	push   0x3f700000
c0009090:	6a 00                	push   0x0
c0009092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909a:	e8 20 f4 01 00       	call   c00284bf <__ltdf2>
c000909f:	83 c4 10             	add    esp,0x10
c00090a2:	ba 16 00 00 00       	mov    edx,0x16
c00090a7:	85 c0                	test   eax,eax
c00090a9:	0f 88 4a 07 00 00    	js     c00097f9 <linear_vari_process+0x7ea>
c00090af:	68 00 00 70 40       	push   0x40700000
c00090b4:	6a 00                	push   0x0
c00090b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090be:	e8 de f3 01 00       	call   c00284a1 <__gtdf2>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	ba 16 00 00 00       	mov    edx,0x16
c00090cb:	85 c0                	test   eax,eax
c00090cd:	0f 8f 26 07 00 00    	jg     c00097f9 <linear_vari_process+0x7ea>
c00090d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090d7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090e5:	68 00 00 f0 3f       	push   0x3ff00000
c00090ea:	6a 00                	push   0x0
c00090ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f4:	e8 c6 f3 01 00       	call   c00284bf <__ltdf2>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	85 c0                	test   eax,eax
c00090fe:	0f 89 89 02 00 00    	jns    c000938d <linear_vari_process+0x37e>
c0009104:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009107:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000910a:	0f 8d 7d 02 00 00    	jge    c000938d <linear_vari_process+0x37e>
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009116:	e8 38 f1 01 00       	call   c0028253 <__floatsidf>
c000911b:	83 c4 10             	add    esp,0x10
c000911e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009121:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009125:	68 00 00 f0 3f       	push   0x3ff00000
c000912a:	6a 00                	push   0x0
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	e8 3a e4 01 00       	call   c0027573 <__adddf3>
c0009139:	83 c4 10             	add    esp,0x10
c000913c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009140:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009144:	52                   	push   edx
c0009145:	50                   	push   eax
c0009146:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914e:	e8 9d ea 01 00       	call   c0027bf0 <__muldf3>
c0009153:	5d                   	pop    ebp
c0009154:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009158:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000915c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000915f:	e8 ef f0 01 00       	call   c0028253 <__floatsidf>
c0009164:	83 c4 10             	add    esp,0x10
c0009167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000916b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000916f:	52                   	push   edx
c0009170:	50                   	push   eax
c0009171:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009175:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009179:	e8 f5 e3 01 00       	call   c0027573 <__adddf3>
c000917e:	59                   	pop    ecx
c000917f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009183:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009187:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000918a:	e8 c4 f0 01 00       	call   c0028253 <__floatsidf>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009196:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000919a:	52                   	push   edx
c000919b:	50                   	push   eax
c000919c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a4:	e8 14 f3 01 00       	call   c00284bd <__gedf2>
c00091a9:	83 c4 10             	add    esp,0x10
c00091ac:	85 c0                	test   eax,eax
c00091ae:	0f 89 d9 01 00 00    	jns    c000938d <linear_vari_process+0x37e>
c00091b4:	85 ff                	test   edi,edi
c00091b6:	0f 8e f4 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c00091bc:	83 ec 10             	sub    esp,0x10
c00091bf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091c2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091c5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091cc:	ff 30                	push   DWORD PTR [eax]
c00091ce:	e8 f1 e9 01 00       	call   c0027bc4 <__subdf3>
c00091d3:	83 c4 18             	add    esp,0x18
c00091d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091de:	52                   	push   edx
c00091df:	50                   	push   eax
c00091e0:	e8 6b f4 01 00       	call   c0028650 <fabs>
c00091e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ed:	83 c4 10             	add    esp,0x10
c00091f0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091f5:	68 23 42 92 0c       	push   0xc924223
c00091fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009202:	e8 9a f2 01 00       	call   c00284a1 <__gtdf2>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	85 c0                	test   eax,eax
c000920c:	0f 8e 9e 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c0009212:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009216:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009219:	8b 00                	mov    eax,DWORD PTR [eax]
c000921b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000921f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009222:	52                   	push   edx
c0009223:	50                   	push   eax
c0009224:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009227:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000922a:	e8 95 e9 01 00       	call   c0027bc4 <__subdf3>
c000922f:	59                   	pop    ecx
c0009230:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009234:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009238:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000923b:	e8 13 f0 01 00       	call   c0028253 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009247:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924b:	52                   	push   edx
c000924c:	50                   	push   eax
c000924d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 96 e9 01 00       	call   c0027bf0 <__muldf3>
c000925a:	5f                   	pop    edi
c000925b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000925f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009263:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009266:	e8 e8 ef 01 00       	call   c0028253 <__floatsidf>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009272:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009276:	52                   	push   edx
c0009277:	50                   	push   eax
c0009278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009280:	e8 4f ec 01 00       	call   c0027ed4 <__divdf3>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009290:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009294:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000929c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a0:	e8 ce e2 01 00       	call   c0027573 <__adddf3>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b0:	31 ff                	xor    edi,edi
c00092b2:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092b5:	0f 8e 9d 00 00 00    	jle    c0009358 <linear_vari_process+0x349>
c00092bb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092be:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00092cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00092ce:	52                   	push   edx
c00092cf:	52                   	push   edx
c00092d0:	55                   	push   ebp
c00092d1:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092d4:	47                   	inc    edi
c00092d5:	e8 2e dc 01 00       	call   c0026f08 <__subsf3>
c00092da:	89 04 24             	mov    DWORD PTR [esp],eax
c00092dd:	e8 05 f3 01 00       	call   c00285e7 <__extendsfdf2>
c00092e2:	83 c4 10             	add    esp,0x10
c00092e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092fd:	e8 ee e8 01 00       	call   c0027bf0 <__muldf3>
c0009302:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000930d:	e8 d5 f2 01 00       	call   c00285e7 <__extendsfdf2>
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009319:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000931d:	52                   	push   edx
c000931e:	50                   	push   eax
c000931f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009323:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009327:	e8 47 e2 01 00       	call   c0027573 <__adddf3>
c000932c:	59                   	pop    ecx
c000932d:	5d                   	pop    ebp
c000932e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009332:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009336:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933e:	e8 80 f1 01 00       	call   c00284c3 <__truncdfsf2>
c0009343:	83 c4 10             	add    esp,0x10
c0009346:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009349:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000934d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009350:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009353:	e9 5a ff ff ff       	jmp    c00092b2 <linear_vari_process+0x2a3>
c0009358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009360:	68 00 00 f0 3f       	push   0x3ff00000
c0009365:	6a 00                	push   0x0
c0009367:	e8 68 eb 01 00       	call   c0027ed4 <__divdf3>
c000936c:	83 c4 10             	add    esp,0x10
c000936f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009372:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000937c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009380:	e8 ee e1 01 00       	call   c0027573 <__adddf3>
c0009385:	83 c4 10             	add    esp,0x10
c0009388:	e9 50 fd ff ff       	jmp    c00090dd <linear_vari_process+0xce>
c000938d:	50                   	push   eax
c000938e:	50                   	push   eax
c000938f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009397:	e8 d4 f2 01 00       	call   c0028670 <lrint>
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	50                   	push   eax
c00093a0:	e8 ae ee 01 00       	call   c0028253 <__floatsidf>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b0:	52                   	push   edx
c00093b1:	50                   	push   eax
c00093b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093ba:	e8 05 e8 01 00       	call   c0027bc4 <__subdf3>
c00093bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093c7:	83 c4 20             	add    esp,0x20
c00093ca:	6a 00                	push   0x0
c00093cc:	6a 00                	push   0x0
c00093ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d6:	e8 e4 f0 01 00       	call   c00284bf <__ltdf2>
c00093db:	83 c4 10             	add    esp,0x10
c00093de:	85 c0                	test   eax,eax
c00093e0:	79 1e                	jns    c0009400 <linear_vari_process+0x3f1>
c00093e2:	68 00 00 f0 3f       	push   0x3ff00000
c00093e7:	6a 00                	push   0x0
c00093e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f1:	e8 7d e1 01 00       	call   c0027573 <__adddf3>
c00093f6:	83 c4 10             	add    esp,0x10
c00093f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009400:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009403:	83 ec 10             	sub    esp,0x10
c0009406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009416:	e8 a9 e7 01 00       	call   c0027bc4 <__subdf3>
c000941b:	83 c4 18             	add    esp,0x18
c000941e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009422:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009426:	52                   	push   edx
c0009427:	50                   	push   eax
c0009428:	e8 43 f2 01 00       	call   c0028670 <lrint>
c000942d:	83 c4 10             	add    esp,0x10
c0009430:	0f af f8             	imul   edi,eax
c0009433:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009436:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009439:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000943c:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000943f:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009442:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009446:	0f 8d 13 03 00 00    	jge    c000975f <linear_vari_process+0x750>
c000944c:	83 ec 0c             	sub    esp,0xc
c000944f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009452:	e8 fc ed 01 00       	call   c0028253 <__floatsidf>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009462:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009466:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009472:	e8 79 e7 01 00       	call   c0027bf0 <__muldf3>
c0009477:	89 3c 24             	mov    DWORD PTR [esp],edi
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	e8 cc ed 01 00       	call   c0028253 <__floatsidf>
c0009487:	83 c4 10             	add    esp,0x10
c000948a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000948e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009492:	52                   	push   edx
c0009493:	50                   	push   eax
c0009494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000949c:	e8 d2 e0 01 00       	call   c0027573 <__adddf3>
c00094a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094ac:	e8 a2 ed 01 00       	call   c0028253 <__floatsidf>
c00094b1:	83 c4 10             	add    esp,0x10
c00094b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094bc:	52                   	push   edx
c00094bd:	50                   	push   eax
c00094be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c6:	e8 f4 ef 01 00       	call   c00284bf <__ltdf2>
c00094cb:	83 c4 10             	add    esp,0x10
c00094ce:	85 c0                	test   eax,eax
c00094d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094d4:	0f 89 85 02 00 00    	jns    c000975f <linear_vari_process+0x750>
c00094da:	85 c9                	test   ecx,ecx
c00094dc:	0f 8e f5 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c00094e2:	83 ec 10             	sub    esp,0x10
c00094e5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094e8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094eb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094f2:	ff 30                	push   DWORD PTR [eax]
c00094f4:	e8 cb e6 01 00       	call   c0027bc4 <__subdf3>
c00094f9:	83 c4 18             	add    esp,0x18
c00094fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009500:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009504:	52                   	push   edx
c0009505:	50                   	push   eax
c0009506:	e8 45 f1 01 00       	call   c0028650 <fabs>
c000950b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000950f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009513:	83 c4 10             	add    esp,0x10
c0009516:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000951b:	68 23 42 92 0c       	push   0xc924223
c0009520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009528:	e8 74 ef 01 00       	call   c00284a1 <__gtdf2>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	85 c0                	test   eax,eax
c0009532:	0f 8e 9f 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c0009538:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000953c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000953f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009549:	52                   	push   edx
c000954a:	50                   	push   eax
c000954b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000954e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009551:	e8 6e e6 01 00       	call   c0027bc4 <__subdf3>
c0009556:	5f                   	pop    edi
c0009557:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000955b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000955f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009562:	e8 ec ec 01 00       	call   c0028253 <__floatsidf>
c0009567:	83 c4 10             	add    esp,0x10
c000956a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000956e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000957c:	e8 6f e6 01 00       	call   c0027bf0 <__muldf3>
c0009581:	5d                   	pop    ebp
c0009582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009586:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000958a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000958d:	e8 c1 ec 01 00       	call   c0028253 <__floatsidf>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009599:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000959d:	52                   	push   edx
c000959e:	50                   	push   eax
c000959f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a7:	e8 28 e9 01 00       	call   c0027ed4 <__divdf3>
c00095ac:	83 c4 10             	add    esp,0x10
c00095af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c7:	e8 a7 df 01 00       	call   c0027573 <__adddf3>
c00095cc:	83 c4 10             	add    esp,0x10
c00095cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095d7:	31 ff                	xor    edi,edi
c00095d9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095dc:	39 f8                	cmp    eax,edi
c00095de:	0f 8e ac 00 00 00    	jle    c0009690 <linear_vari_process+0x681>
c00095e4:	8b 16                	mov    edx,DWORD PTR [esi]
c00095e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095e9:	29 c1                	sub    ecx,eax
c00095eb:	89 c8                	mov    eax,ecx
c00095ed:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f0:	01 f8                	add    eax,edi
c00095f2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095f6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009600:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009603:	51                   	push   ecx
c0009604:	01 f8                	add    eax,edi
c0009606:	51                   	push   ecx
c0009607:	47                   	inc    edi
c0009608:	55                   	push   ebp
c0009609:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c000960c:	e8 f7 d8 01 00       	call   c0026f08 <__subsf3>
c0009611:	89 04 24             	mov    DWORD PTR [esp],eax
c0009614:	e8 ce ef 01 00       	call   c00285e7 <__extendsfdf2>
c0009619:	83 c4 10             	add    esp,0x10
c000961c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009620:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009624:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009628:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000962c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009630:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009634:	e8 b7 e5 01 00       	call   c0027bf0 <__muldf3>
c0009639:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000963c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009640:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009644:	e8 9e ef 01 00       	call   c00285e7 <__extendsfdf2>
c0009649:	83 c4 10             	add    esp,0x10
c000964c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009650:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009654:	52                   	push   edx
c0009655:	50                   	push   eax
c0009656:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965e:	e8 10 df 01 00       	call   c0027573 <__adddf3>
c0009663:	5d                   	pop    ebp
c0009664:	59                   	pop    ecx
c0009665:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009669:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000966d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009671:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009675:	e8 49 ee 01 00       	call   c00284c3 <__truncdfsf2>
c000967a:	83 c4 10             	add    esp,0x10
c000967d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009681:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009685:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009688:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000968b:	e9 49 ff ff ff       	jmp    c00095d9 <linear_vari_process+0x5ca>
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	68 00 00 f0 3f       	push   0x3ff00000
c000969d:	6a 00                	push   0x0
c000969f:	e8 30 e8 01 00       	call   c0027ed4 <__divdf3>
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	e8 af de 01 00       	call   c0027573 <__adddf3>
c00096c4:	59                   	pop    ecx
c00096c5:	5f                   	pop    edi
c00096c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d6:	e8 95 ef 01 00       	call   c0028670 <lrint>
c00096db:	83 ec 0c             	sub    esp,0xc
c00096de:	50                   	push   eax
c00096df:	e8 6f eb 01 00       	call   c0028253 <__floatsidf>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ef:	52                   	push   edx
c00096f0:	50                   	push   eax
c00096f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f9:	e8 c6 e4 01 00       	call   c0027bc4 <__subdf3>
c00096fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009702:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009706:	83 c4 20             	add    esp,0x20
c0009709:	6a 00                	push   0x0
c000970b:	6a 00                	push   0x0
c000970d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009711:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009715:	e8 a5 ed 01 00       	call   c00284bf <__ltdf2>
c000971a:	83 c4 10             	add    esp,0x10
c000971d:	85 c0                	test   eax,eax
c000971f:	79 1e                	jns    c000973f <linear_vari_process+0x730>
c0009721:	68 00 00 f0 3f       	push   0x3ff00000
c0009726:	6a 00                	push   0x0
c0009728:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000972c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009730:	e8 3e de 01 00       	call   c0027573 <__adddf3>
c0009735:	83 c4 10             	add    esp,0x10
c0009738:	89 04 24             	mov    DWORD PTR [esp],eax
c000973b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000973f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009742:	83 ec 10             	sub    esp,0x10
c0009745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000974d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009751:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009755:	e8 6a e4 01 00       	call   c0027bc4 <__subdf3>
c000975a:	e9 bc fc ff ff       	jmp    c000941b <linear_vari_process+0x40c>
c000975f:	39 fd                	cmp    ebp,edi
c0009761:	7d 38                	jge    c000979b <linear_vari_process+0x78c>
c0009763:	83 ec 0c             	sub    esp,0xc
c0009766:	89 f8                	mov    eax,edi
c0009768:	29 e8                	sub    eax,ebp
c000976a:	99                   	cdq    
c000976b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000976e:	50                   	push   eax
c000976f:	e8 df ea 01 00       	call   c0028253 <__floatsidf>
c0009774:	83 c4 10             	add    esp,0x10
c0009777:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000977b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000977f:	52                   	push   edx
c0009780:	50                   	push   eax
c0009781:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009785:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009789:	e8 e5 dd 01 00       	call   c0027573 <__adddf3>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009794:	89 04 24             	mov    DWORD PTR [esp],eax
c0009797:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000979b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000979f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097a6:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097a9:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097af:	85 c0                	test   eax,eax
c00097b1:	7f 29                	jg     c00097dc <linear_vari_process+0x7cd>
c00097b3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097bf:	89 01                	mov    DWORD PTR [ecx],eax
c00097c1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097c7:	99                   	cdq    
c00097c8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097cb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d1:	99                   	cdq    
c00097d2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d5:	31 d2                	xor    edx,edx
c00097d7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097da:	eb 1d                	jmp    c00097f9 <linear_vari_process+0x7ea>
c00097dc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097df:	31 d2                	xor    edx,edx
c00097e1:	29 c8                	sub    eax,ecx
c00097e3:	c1 e0 02             	shl    eax,0x2
c00097e6:	39 d1                	cmp    ecx,edx
c00097e8:	7e c9                	jle    c00097b3 <linear_vari_process+0x7a4>
c00097ea:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097ec:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097ef:	83 c0 04             	add    eax,0x4
c00097f2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097f6:	42                   	inc    edx
c00097f7:	eb ed                	jmp    c00097e6 <linear_vari_process+0x7d7>
c00097f9:	83 c4 3c             	add    esp,0x3c
c00097fc:	89 d0                	mov    eax,edx
c00097fe:	5b                   	pop    ebx
c00097ff:	5e                   	pop    esi
c0009800:	5f                   	pop    edi
c0009801:	5d                   	pop    ebp
c0009802:	c3                   	ret    

c0009803 <linear_reset>:
c0009803:	83 ec 0c             	sub    esp,0xc
c0009806:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000980a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000980d:	85 c0                	test   eax,eax
c000980f:	74 20                	je     c0009831 <linear_reset+0x2e>
c0009811:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009814:	83 c0 1c             	add    eax,0x1c
c0009817:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000981a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009821:	c1 e2 02             	shl    edx,0x2
c0009824:	51                   	push   ecx
c0009825:	52                   	push   edx
c0009826:	6a 00                	push   0x0
c0009828:	50                   	push   eax
c0009829:	e8 4a 6f ff ff       	call   c0000778 <memset>
c000982e:	83 c4 10             	add    esp,0x10
c0009831:	83 c4 0c             	add    esp,0xc
c0009834:	c3                   	ret    

c0009835 <linear_get_name>:
c0009835:	31 c0                	xor    eax,eax
c0009837:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000983c:	75 05                	jne    c0009843 <linear_get_name+0xe>
c000983e:	b8 c0 9d 02 c0       	mov    eax,0xc0029dc0
c0009843:	c3                   	ret    

c0009844 <linear_get_description>:
c0009844:	31 c0                	xor    eax,eax
c0009846:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000984b:	75 05                	jne    c0009852 <linear_get_description+0xe>
c000984d:	b8 d4 9d 02 c0       	mov    eax,0xc0029dd4
c0009852:	c3                   	ret    

c0009853 <linear_set_converter>:
c0009853:	53                   	push   ebx
c0009854:	b8 0a 00 00 00       	mov    eax,0xa
c0009859:	83 ec 08             	sub    esp,0x8
c000985c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009860:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009865:	75 6e                	jne    c00098d5 <linear_set_converter+0x82>
c0009867:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000986a:	85 c0                	test   eax,eax
c000986c:	74 13                	je     c0009881 <linear_set_converter+0x2e>
c000986e:	83 ec 0c             	sub    esp,0xc
c0009871:	50                   	push   eax
c0009872:	e8 d9 5f 00 00       	call   c000f850 <free>
c0009877:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000987e:	83 c4 10             	add    esp,0x10
c0009881:	50                   	push   eax
c0009882:	50                   	push   eax
c0009883:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009886:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000988d:	50                   	push   eax
c000988e:	6a 01                	push   0x1
c0009890:	e8 db 5f 00 00       	call   c000f870 <calloc>
c0009895:	83 c4 10             	add    esp,0x10
c0009898:	89 c2                	mov    edx,eax
c000989a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000989d:	85 d2                	test   edx,edx
c000989f:	b8 01 00 00 00       	mov    eax,0x1
c00098a4:	74 2f                	je     c00098d5 <linear_set_converter+0x82>
c00098a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098a9:	83 ec 0c             	sub    esp,0xc
c00098ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098af:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098b5:	c7 43 24 0f 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000900f
c00098bc:	c7 43 20 0f 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000900f
c00098c3:	c7 43 28 03 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009803
c00098ca:	53                   	push   ebx
c00098cb:	e8 33 ff ff ff       	call   c0009803 <linear_reset>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	31 c0                	xor    eax,eax
c00098d5:	83 c4 08             	add    esp,0x8
c00098d8:	5b                   	pop    ebx
c00098d9:	c3                   	ret    

c00098da <int_to_fp>:
c00098da:	c1 e0 0c             	shl    eax,0xc
c00098dd:	c3                   	ret    

c00098de <fp_to_int>:
c00098de:	c1 f8 0c             	sar    eax,0xc
c00098e1:	c3                   	ret    

c00098e2 <fp_fraction_part>:
c00098e2:	25 ff 0f 00 00       	and    eax,0xfff
c00098e7:	c3                   	ret    

c00098e8 <fp_to_double>:
c00098e8:	83 ec 1c             	sub    esp,0x1c
c00098eb:	e8 f2 ff ff ff       	call   c00098e2 <fp_fraction_part>
c00098f0:	83 ec 0c             	sub    esp,0xc
c00098f3:	50                   	push   eax
c00098f4:	e8 5a e9 01 00       	call   c0028253 <__floatsidf>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009900:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009904:	68 00 00 30 3f       	push   0x3f300000
c0009909:	6a 00                	push   0x0
c000990b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009913:	e8 d8 e2 01 00       	call   c0027bf0 <__muldf3>
c0009918:	83 c4 2c             	add    esp,0x2c
c000991b:	c3                   	ret    

c000991c <calc_output_single>:
c000991c:	55                   	push   ebp
c000991d:	57                   	push   edi
c000991e:	56                   	push   esi
c000991f:	89 c6                	mov    esi,eax
c0009921:	53                   	push   ebx
c0009922:	89 d3                	mov    ebx,edx
c0009924:	83 ec 4c             	sub    esp,0x4c
c0009927:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000992b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000992e:	e8 a7 ff ff ff       	call   c00098da <int_to_fp>
c0009933:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009936:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000993a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000993e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009942:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009945:	99                   	cdq    
c0009946:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000994e:	f7 fb                	idiv   ebx
c0009950:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009958:	89 da                	mov    edx,ebx
c000995a:	0f af d0             	imul   edx,eax
c000995d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009961:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009965:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009969:	29 c2                	sub    edx,eax
c000996b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000996e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009972:	83 c5 04             	add    ebp,0x4
c0009975:	e8 6e ff ff ff       	call   c00098e8 <fp_to_double>
c000997a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000997e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009986:	e8 53 ff ff ff       	call   c00098de <fp_to_int>
c000998b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000998e:	52                   	push   edx
c000998f:	52                   	push   edx
c0009990:	51                   	push   ecx
c0009991:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009995:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009999:	e8 6a d5 01 00       	call   c0026f08 <__subsf3>
c000999e:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a1:	e8 41 ec 01 00       	call   c00285e7 <__extendsfdf2>
c00099a6:	83 c4 10             	add    esp,0x10
c00099a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c1:	e8 2a e2 01 00       	call   c0027bf0 <__muldf3>
c00099c6:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099ce:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099d5:	e8 0d ec 01 00       	call   c00285e7 <__extendsfdf2>
c00099da:	83 c4 10             	add    esp,0x10
c00099dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099e5:	52                   	push   edx
c00099e6:	50                   	push   eax
c00099e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099ef:	e8 7f db 01 00       	call   c0027573 <__adddf3>
c00099f4:	59                   	pop    ecx
c00099f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099fd:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a03:	e8 df eb 01 00       	call   c00285e7 <__extendsfdf2>
c0009a08:	83 c4 10             	add    esp,0x10
c0009a0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a13:	52                   	push   edx
c0009a14:	50                   	push   eax
c0009a15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a1d:	e8 ce e1 01 00       	call   c0027bf0 <__muldf3>
c0009a22:	83 c4 10             	add    esp,0x10
c0009a25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a2d:	52                   	push   edx
c0009a2e:	50                   	push   eax
c0009a2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a37:	e8 37 db 01 00       	call   c0027573 <__adddf3>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a47:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a4b:	0f 89 1d ff ff ff    	jns    c000996e <calc_output_single+0x52>
c0009a51:	89 d9                	mov    ecx,ebx
c0009a53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a57:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a5b:	89 dd                	mov    ebp,ebx
c0009a5d:	29 c8                	sub    eax,ecx
c0009a5f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a67:	99                   	cdq    
c0009a68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a70:	f7 fb                	idiv   ebx
c0009a72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a76:	0f af e8             	imul   ebp,eax
c0009a79:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a7d:	01 cd                	add    ebp,ecx
c0009a7f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a82:	89 e8                	mov    eax,ebp
c0009a84:	83 ee 04             	sub    esi,0x4
c0009a87:	e8 5c fe ff ff       	call   c00098e8 <fp_to_double>
c0009a8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a94:	89 e8                	mov    eax,ebp
c0009a96:	29 dd                	sub    ebp,ebx
c0009a98:	e8 41 fe ff ff       	call   c00098de <fp_to_int>
c0009a9d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa0:	52                   	push   edx
c0009aa1:	52                   	push   edx
c0009aa2:	51                   	push   ecx
c0009aa3:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aa7:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009aab:	e8 58 d4 01 00       	call   c0026f08 <__subsf3>
c0009ab0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ab3:	e8 2f eb 01 00       	call   c00285e7 <__extendsfdf2>
c0009ab8:	83 c4 10             	add    esp,0x10
c0009abb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009abf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009acf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad3:	e8 18 e1 01 00       	call   c0027bf0 <__muldf3>
c0009ad8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009adc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ae3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ae7:	e8 fb ea 01 00       	call   c00285e7 <__extendsfdf2>
c0009aec:	83 c4 10             	add    esp,0x10
c0009aef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009af3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009af7:	52                   	push   edx
c0009af8:	50                   	push   eax
c0009af9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b01:	e8 6d da 01 00       	call   c0027573 <__adddf3>
c0009b06:	59                   	pop    ecx
c0009b07:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b0b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b0f:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b15:	e8 cd ea 01 00       	call   c00285e7 <__extendsfdf2>
c0009b1a:	83 c4 10             	add    esp,0x10
c0009b1d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b21:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b25:	52                   	push   edx
c0009b26:	50                   	push   eax
c0009b27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2f:	e8 bc e0 01 00       	call   c0027bf0 <__muldf3>
c0009b34:	83 c4 10             	add    esp,0x10
c0009b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	52                   	push   edx
c0009b40:	50                   	push   eax
c0009b41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b49:	e8 25 da 01 00       	call   c0027573 <__adddf3>
c0009b4e:	83 c4 10             	add    esp,0x10
c0009b51:	85 ed                	test   ebp,ebp
c0009b53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b5b:	0f 8f 21 ff ff ff    	jg     c0009a82 <calc_output_single+0x166>
c0009b61:	52                   	push   edx
c0009b62:	50                   	push   eax
c0009b63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6b:	e8 03 da 01 00       	call   c0027573 <__adddf3>
c0009b70:	83 c4 5c             	add    esp,0x5c
c0009b73:	5b                   	pop    ebx
c0009b74:	5e                   	pop    esi
c0009b75:	5f                   	pop    edi
c0009b76:	5d                   	pop    ebp
c0009b77:	c3                   	ret    

c0009b78 <calc_output_stereo>:
c0009b78:	55                   	push   ebp
c0009b79:	89 cd                	mov    ebp,ecx
c0009b7b:	57                   	push   edi
c0009b7c:	56                   	push   esi
c0009b7d:	53                   	push   ebx
c0009b7e:	89 c3                	mov    ebx,eax
c0009b80:	83 ec 6c             	sub    esp,0x6c
c0009b83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b8e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b95:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b99:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b9d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba0:	e8 35 fd ff ff       	call   c00098da <int_to_fp>
c0009ba5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bb9:	29 c8                	sub    eax,ecx
c0009bbb:	99                   	cdq    
c0009bbc:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bc4:	0f af d0             	imul   edx,eax
c0009bc7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bca:	31 d2                	xor    edx,edx
c0009bcc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bd4:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bd7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bdb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bde:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009be2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009be6:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009be9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bee:	29 c1                	sub    ecx,eax
c0009bf0:	31 c0                	xor    eax,eax
c0009bf2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	83 c7 08             	add    edi,0x8
c0009c00:	e8 e3 fc ff ff       	call   c00098e8 <fp_to_double>
c0009c05:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c09:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c11:	e8 c8 fc ff ff       	call   c00098de <fp_to_int>
c0009c16:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c19:	52                   	push   edx
c0009c1a:	52                   	push   edx
c0009c1b:	51                   	push   ecx
c0009c1c:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c20:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c24:	e8 df d2 01 00       	call   c0026f08 <__subsf3>
c0009c29:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c2c:	e8 b6 e9 01 00       	call   c00285e7 <__extendsfdf2>
c0009c31:	83 c4 10             	add    esp,0x10
c0009c34:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c38:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c48:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c4c:	e8 9f df 01 00       	call   c0027bf0 <__muldf3>
c0009c51:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c55:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c59:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c5c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c60:	e8 82 e9 01 00       	call   c00285e7 <__extendsfdf2>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c6c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c70:	52                   	push   edx
c0009c71:	50                   	push   eax
c0009c72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c76:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7a:	e8 f4 d8 01 00       	call   c0027573 <__adddf3>
c0009c7f:	59                   	pop    ecx
c0009c80:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c84:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c88:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c8e:	e8 54 e9 01 00       	call   c00285e7 <__extendsfdf2>
c0009c93:	83 c4 10             	add    esp,0x10
c0009c96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009caa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cae:	e8 3d df 01 00       	call   c0027bf0 <__muldf3>
c0009cb3:	83 c4 10             	add    esp,0x10
c0009cb6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cba:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cbe:	52                   	push   edx
c0009cbf:	50                   	push   eax
c0009cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc8:	e8 a6 d8 01 00       	call   c0027573 <__adddf3>
c0009ccd:	59                   	pop    ecx
c0009cce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cd6:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cdc:	e8 06 e9 01 00       	call   c00285e7 <__extendsfdf2>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ce8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cf8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cfc:	e8 ef de 01 00       	call   c0027bf0 <__muldf3>
c0009d01:	83 c4 10             	add    esp,0x10
c0009d04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d08:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d0c:	52                   	push   edx
c0009d0d:	50                   	push   eax
c0009d0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d16:	e8 58 d8 01 00       	call   c0027573 <__adddf3>
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d22:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d26:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d2a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d2e:	0f 89 c5 fe ff ff    	jns    c0009bf9 <calc_output_stereo+0x81>
c0009d34:	29 e9                	sub    ecx,ebp
c0009d36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d3a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d3e:	29 c8                	sub    eax,ecx
c0009d40:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d48:	99                   	cdq    
c0009d49:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d4d:	31 d2                	xor    edx,edx
c0009d4f:	0f af f8             	imul   edi,eax
c0009d52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d56:	40                   	inc    eax
c0009d57:	01 cf                	add    edi,ecx
c0009d59:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d5e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d62:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d6a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d6d:	31 c0                	xor    eax,eax
c0009d6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d73:	89 f8                	mov    eax,edi
c0009d75:	83 eb 08             	sub    ebx,0x8
c0009d78:	e8 6b fb ff ff       	call   c00098e8 <fp_to_double>
c0009d7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d85:	89 f8                	mov    eax,edi
c0009d87:	e8 52 fb ff ff       	call   c00098de <fp_to_int>
c0009d8c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d8f:	52                   	push   edx
c0009d90:	52                   	push   edx
c0009d91:	55                   	push   ebp
c0009d92:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d96:	e8 6d d1 01 00       	call   c0026f08 <__subsf3>
c0009d9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d9e:	e8 44 e8 01 00       	call   c00285e7 <__extendsfdf2>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009daa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dbe:	e8 2d de 01 00       	call   c0027bf0 <__muldf3>
c0009dc3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dc6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dce:	e8 14 e8 01 00       	call   c00285e7 <__extendsfdf2>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dde:	52                   	push   edx
c0009ddf:	50                   	push   eax
c0009de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de8:	e8 86 d7 01 00       	call   c0027573 <__adddf3>
c0009ded:	59                   	pop    ecx
c0009dee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009df2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009df6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dfc:	e8 e6 e7 01 00       	call   c00285e7 <__extendsfdf2>
c0009e01:	83 c4 10             	add    esp,0x10
c0009e04:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e08:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e10:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e1c:	e8 cf dd 01 00       	call   c0027bf0 <__muldf3>
c0009e21:	83 c4 10             	add    esp,0x10
c0009e24:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e28:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e2c:	52                   	push   edx
c0009e2d:	50                   	push   eax
c0009e2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e36:	e8 38 d7 01 00       	call   c0027573 <__adddf3>
c0009e3b:	5d                   	pop    ebp
c0009e3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e40:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e44:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e4a:	e8 98 e7 01 00       	call   c00285e7 <__extendsfdf2>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6a:	e8 81 dd 01 00       	call   c0027bf0 <__muldf3>
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e76:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e7a:	52                   	push   edx
c0009e7b:	50                   	push   eax
c0009e7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e84:	e8 ea d6 01 00       	call   c0027573 <__adddf3>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e98:	85 ff                	test   edi,edi
c0009e9a:	0f 8f d3 fe ff ff    	jg     c0009d73 <calc_output_stereo+0x1fb>
c0009ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	e8 be d6 01 00       	call   c0027573 <__adddf3>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ecc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed0:	e8 1b dd 01 00       	call   c0027bf0 <__muldf3>
c0009ed5:	59                   	pop    ecx
c0009ed6:	5b                   	pop    ebx
c0009ed7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009edb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009edf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee7:	e8 d7 e5 01 00       	call   c00284c3 <__truncdfsf2>
c0009eec:	83 c4 10             	add    esp,0x10
c0009eef:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ef6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009efc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	e8 66 d6 01 00       	call   c0027573 <__adddf3>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f28:	e8 c3 dc 01 00       	call   c0027bf0 <__muldf3>
c0009f2d:	5e                   	pop    esi
c0009f2e:	5f                   	pop    edi
c0009f2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3f:	e8 7f e5 01 00       	call   c00284c3 <__truncdfsf2>
c0009f44:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f4b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f4e:	83 c4 7c             	add    esp,0x7c
c0009f51:	5b                   	pop    ebx
c0009f52:	5e                   	pop    esi
c0009f53:	5f                   	pop    edi
c0009f54:	5d                   	pop    ebp
c0009f55:	c3                   	ret    

c0009f56 <calc_output_quad>:
c0009f56:	55                   	push   ebp
c0009f57:	57                   	push   edi
c0009f58:	56                   	push   esi
c0009f59:	89 c6                	mov    esi,eax
c0009f5b:	53                   	push   ebx
c0009f5c:	83 ec 7c             	sub    esp,0x7c
c0009f5f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f63:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f67:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f6e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f75:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f7d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f80:	e8 55 f9 ff ff       	call   c00098da <int_to_fp>
c0009f85:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f88:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f8b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f8f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f93:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f97:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f9b:	99                   	cdq    
c0009f9c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa0:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fa4:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009fa7:	31 d2                	xor    edx,edx
c0009fa9:	0f af d8             	imul   ebx,eax
c0009fac:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fb4:	0f af c7             	imul   eax,edi
c0009fb7:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fbb:	29 c1                	sub    ecx,eax
c0009fbd:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fc5:	31 c0                	xor    eax,eax
c0009fc7:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fde:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fe2:	89 d8                	mov    eax,ebx
c0009fe4:	83 c7 10             	add    edi,0x10
c0009fe7:	e8 fc f8 ff ff       	call   c00098e8 <fp_to_double>
c0009fec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ff4:	89 d8                	mov    eax,ebx
c0009ff6:	e8 e3 f8 ff ff       	call   c00098de <fp_to_int>
c0009ffb:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fff:	52                   	push   edx
c000a000:	52                   	push   edx
c000a001:	51                   	push   ecx
c000a002:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a006:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a00a:	e8 f9 ce 01 00       	call   c0026f08 <__subsf3>
c000a00f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a012:	e8 d0 e5 01 00       	call   c00285e7 <__extendsfdf2>
c000a017:	83 c4 10             	add    esp,0x10
c000a01a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a02e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a032:	e8 b9 db 01 00       	call   c0027bf0 <__muldf3>
c000a037:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a03b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a03f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a042:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a046:	e8 9c e5 01 00       	call   c00285e7 <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a052:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a056:	52                   	push   edx
c000a057:	50                   	push   eax
c000a058:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a05c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a060:	e8 0e d5 01 00       	call   c0027573 <__adddf3>
c000a065:	59                   	pop    ecx
c000a066:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a06a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a06e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a074:	e8 6e e5 01 00       	call   c00285e7 <__extendsfdf2>
c000a079:	83 c4 10             	add    esp,0x10
c000a07c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a080:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a090:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a094:	e8 57 db 01 00       	call   c0027bf0 <__muldf3>
c000a099:	83 c4 10             	add    esp,0x10
c000a09c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0a4:	52                   	push   edx
c000a0a5:	50                   	push   eax
c000a0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0ae:	e8 c0 d4 01 00       	call   c0027573 <__adddf3>
c000a0b3:	59                   	pop    ecx
c000a0b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0b8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0bc:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0c2:	e8 20 e5 01 00       	call   c00285e7 <__extendsfdf2>
c000a0c7:	83 c4 10             	add    esp,0x10
c000a0ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e2:	e8 09 db 01 00       	call   c0027bf0 <__muldf3>
c000a0e7:	83 c4 10             	add    esp,0x10
c000a0ea:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ee:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f2:	52                   	push   edx
c000a0f3:	50                   	push   eax
c000a0f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0fc:	e8 72 d4 01 00       	call   c0027573 <__adddf3>
c000a101:	59                   	pop    ecx
c000a102:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a106:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a10a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a110:	e8 d2 e4 01 00       	call   c00285e7 <__extendsfdf2>
c000a115:	83 c4 10             	add    esp,0x10
c000a118:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a128:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a12c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a130:	e8 bb da 01 00       	call   c0027bf0 <__muldf3>
c000a135:	83 c4 10             	add    esp,0x10
c000a138:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a13c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a140:	52                   	push   edx
c000a141:	50                   	push   eax
c000a142:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a146:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14a:	e8 24 d4 01 00       	call   c0027573 <__adddf3>
c000a14f:	59                   	pop    ecx
c000a150:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a154:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a158:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a15e:	e8 84 e4 01 00       	call   c00285e7 <__extendsfdf2>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a16a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a176:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17e:	e8 6d da 01 00       	call   c0027bf0 <__muldf3>
c000a183:	83 c4 10             	add    esp,0x10
c000a186:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a18a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a18e:	52                   	push   edx
c000a18f:	50                   	push   eax
c000a190:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a194:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a198:	e8 d6 d3 01 00       	call   c0027573 <__adddf3>
c000a19d:	83 c4 10             	add    esp,0x10
c000a1a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1a4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1a8:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1ac:	0f 89 30 fe ff ff    	jns    c0009fe2 <calc_output_quad+0x8c>
c000a1b2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1be:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1c2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ca:	29 c8                	sub    eax,ecx
c000a1cc:	99                   	cdq    
c000a1cd:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d1:	31 d2                	xor    edx,edx
c000a1d3:	0f af d8             	imul   ebx,eax
c000a1d6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1da:	40                   	inc    eax
c000a1db:	01 cb                	add    ebx,ecx
c000a1dd:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1e2:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1e6:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1ee:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1f9:	31 c0                	xor    eax,eax
c000a1fb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1ff:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a203:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a207:	89 d8                	mov    eax,ebx
c000a209:	83 ee 10             	sub    esi,0x10
c000a20c:	e8 d7 f6 ff ff       	call   c00098e8 <fp_to_double>
c000a211:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a215:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a219:	89 d8                	mov    eax,ebx
c000a21b:	e8 be f6 ff ff       	call   c00098de <fp_to_int>
c000a220:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a224:	52                   	push   edx
c000a225:	52                   	push   edx
c000a226:	57                   	push   edi
c000a227:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a22b:	e8 d8 cc 01 00       	call   c0026f08 <__subsf3>
c000a230:	89 04 24             	mov    DWORD PTR [esp],eax
c000a233:	e8 af e3 01 00       	call   c00285e7 <__extendsfdf2>
c000a238:	83 c4 10             	add    esp,0x10
c000a23b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a23f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a24f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a253:	e8 98 d9 01 00       	call   c0027bf0 <__muldf3>
c000a258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a25b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a25f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a263:	e8 7f e3 01 00       	call   c00285e7 <__extendsfdf2>
c000a268:	83 c4 10             	add    esp,0x10
c000a26b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a26f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a273:	52                   	push   edx
c000a274:	50                   	push   eax
c000a275:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a279:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a27d:	e8 f1 d2 01 00       	call   c0027573 <__adddf3>
c000a282:	59                   	pop    ecx
c000a283:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a287:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a28b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a291:	e8 51 e3 01 00       	call   c00285e7 <__extendsfdf2>
c000a296:	83 c4 10             	add    esp,0x10
c000a299:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b1:	e8 3a d9 01 00       	call   c0027bf0 <__muldf3>
c000a2b6:	83 c4 10             	add    esp,0x10
c000a2b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c1:	52                   	push   edx
c000a2c2:	50                   	push   eax
c000a2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cb:	e8 a3 d2 01 00       	call   c0027573 <__adddf3>
c000a2d0:	5f                   	pop    edi
c000a2d1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2d5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2d9:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2df:	e8 03 e3 01 00       	call   c00285e7 <__extendsfdf2>
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2fb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ff:	e8 ec d8 01 00       	call   c0027bf0 <__muldf3>
c000a304:	83 c4 10             	add    esp,0x10
c000a307:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a30b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a30f:	52                   	push   edx
c000a310:	50                   	push   eax
c000a311:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a315:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a319:	e8 55 d2 01 00       	call   c0027573 <__adddf3>
c000a31e:	59                   	pop    ecx
c000a31f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a323:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a327:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a32d:	e8 b5 e2 01 00       	call   c00285e7 <__extendsfdf2>
c000a332:	83 c4 10             	add    esp,0x10
c000a335:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a339:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a345:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a349:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a34d:	e8 9e d8 01 00       	call   c0027bf0 <__muldf3>
c000a352:	83 c4 10             	add    esp,0x10
c000a355:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a359:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a35d:	52                   	push   edx
c000a35e:	50                   	push   eax
c000a35f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a363:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a367:	e8 07 d2 01 00       	call   c0027573 <__adddf3>
c000a36c:	5f                   	pop    edi
c000a36d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a371:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a375:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a37b:	e8 67 e2 01 00       	call   c00285e7 <__extendsfdf2>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a387:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a38f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a393:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a397:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39b:	e8 50 d8 01 00       	call   c0027bf0 <__muldf3>
c000a3a0:	83 c4 10             	add    esp,0x10
c000a3a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3ab:	52                   	push   edx
c000a3ac:	50                   	push   eax
c000a3ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b5:	e8 b9 d1 01 00       	call   c0027573 <__adddf3>
c000a3ba:	83 c4 10             	add    esp,0x10
c000a3bd:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3c5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3c9:	85 db                	test   ebx,ebx
c000a3cb:	0f 8f 36 fe ff ff    	jg     c000a207 <calc_output_quad+0x2b1>
c000a3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	e8 8d d1 01 00       	call   c0027573 <__adddf3>
c000a3e6:	83 c4 10             	add    esp,0x10
c000a3e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	e8 ea d7 01 00       	call   c0027bf0 <__muldf3>
c000a406:	59                   	pop    ecx
c000a407:	5b                   	pop    ebx
c000a408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a40c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a418:	e8 a6 e0 01 00       	call   c00284c3 <__truncdfsf2>
c000a41d:	83 c4 10             	add    esp,0x10
c000a420:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a427:	89 06                	mov    DWORD PTR [esi],eax
c000a429:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a42d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a431:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a435:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a439:	e8 35 d1 01 00       	call   c0027573 <__adddf3>
c000a43e:	83 c4 10             	add    esp,0x10
c000a441:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	e8 92 d7 01 00       	call   c0027bf0 <__muldf3>
c000a45e:	5e                   	pop    esi
c000a45f:	5f                   	pop    edi
c000a460:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a464:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	e8 4e e0 01 00       	call   c00284c3 <__truncdfsf2>
c000a475:	83 c4 10             	add    esp,0x10
c000a478:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a47f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a482:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a486:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a48e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a492:	e8 dc d0 01 00       	call   c0027573 <__adddf3>
c000a497:	83 c4 10             	add    esp,0x10
c000a49a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a49e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	e8 39 d7 01 00       	call   c0027bf0 <__muldf3>
c000a4b7:	5d                   	pop    ebp
c000a4b8:	59                   	pop    ecx
c000a4b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	e8 f5 df 01 00       	call   c00284c3 <__truncdfsf2>
c000a4ce:	83 c4 10             	add    esp,0x10
c000a4d1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4d8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	e8 83 d0 01 00       	call   c0027573 <__adddf3>
c000a4f0:	83 c4 10             	add    esp,0x10
c000a4f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	e8 e0 d6 01 00       	call   c0027bf0 <__muldf3>
c000a510:	5b                   	pop    ebx
c000a511:	5e                   	pop    esi
c000a512:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a516:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a51e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a522:	e8 9c df 01 00       	call   c00284c3 <__truncdfsf2>
c000a527:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a52e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a531:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a537:	5b                   	pop    ebx
c000a538:	5e                   	pop    esi
c000a539:	5f                   	pop    edi
c000a53a:	5d                   	pop    ebp
c000a53b:	c3                   	ret    

c000a53c <calc_output_hex>:
c000a53c:	55                   	push   ebp
c000a53d:	89 cd                	mov    ebp,ecx
c000a53f:	57                   	push   edi
c000a540:	56                   	push   esi
c000a541:	53                   	push   ebx
c000a542:	89 c3                	mov    ebx,eax
c000a544:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a54a:	89 14 24             	mov    DWORD PTR [esp],edx
c000a54d:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a554:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a55b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a55f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a563:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a566:	e8 6f f3 ff ff       	call   c00098da <int_to_fp>
c000a56b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a56e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a572:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a575:	29 c8                	sub    eax,ecx
c000a577:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a57b:	99                   	cdq    
c000a57c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a584:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a587:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a58f:	0f af f8             	imul   edi,eax
c000a592:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a595:	01 cf                	add    edi,ecx
c000a597:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a59b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a59e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5a2:	0f af c2             	imul   eax,edx
c000a5a5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5a9:	29 c1                	sub    ecx,eax
c000a5ab:	31 d2                	xor    edx,edx
c000a5ad:	31 c0                	xor    eax,eax
c000a5af:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5c2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5c6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5ce:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5da:	89 f8                	mov    eax,edi
c000a5dc:	e8 07 f3 ff ff       	call   c00098e8 <fp_to_double>
c000a5e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5e9:	89 f8                	mov    eax,edi
c000a5eb:	e8 ee f2 ff ff       	call   c00098de <fp_to_int>
c000a5f0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5f4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5f7:	52                   	push   edx
c000a5f8:	52                   	push   edx
c000a5f9:	51                   	push   ecx
c000a5fa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5fe:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a605:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a609:	e8 fa c8 01 00       	call   c0026f08 <__subsf3>
c000a60e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a611:	e8 d1 df 01 00       	call   c00285e7 <__extendsfdf2>
c000a616:	83 c4 10             	add    esp,0x10
c000a619:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a61d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a629:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a62d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a631:	e8 ba d5 01 00       	call   c0027bf0 <__muldf3>
c000a636:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a63a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a63e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a641:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a645:	e8 9d df 01 00       	call   c00285e7 <__extendsfdf2>
c000a64a:	83 c4 10             	add    esp,0x10
c000a64d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a651:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a655:	52                   	push   edx
c000a656:	50                   	push   eax
c000a657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65f:	e8 0f cf 01 00       	call   c0027573 <__adddf3>
c000a664:	59                   	pop    ecx
c000a665:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a669:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a66d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a673:	e8 6f df 01 00       	call   c00285e7 <__extendsfdf2>
c000a678:	83 c4 10             	add    esp,0x10
c000a67b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a67f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a683:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a68f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a693:	e8 58 d5 01 00       	call   c0027bf0 <__muldf3>
c000a698:	83 c4 10             	add    esp,0x10
c000a69b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a69f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6a3:	52                   	push   edx
c000a6a4:	50                   	push   eax
c000a6a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6ad:	e8 c1 ce 01 00       	call   c0027573 <__adddf3>
c000a6b2:	59                   	pop    ecx
c000a6b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6b7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6bb:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c1:	e8 21 df 01 00       	call   c00285e7 <__extendsfdf2>
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e1:	e8 0a d5 01 00       	call   c0027bf0 <__muldf3>
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f1:	52                   	push   edx
c000a6f2:	50                   	push   eax
c000a6f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6fb:	e8 73 ce 01 00       	call   c0027573 <__adddf3>
c000a700:	59                   	pop    ecx
c000a701:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a705:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a709:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a70f:	e8 d3 de 01 00       	call   c00285e7 <__extendsfdf2>
c000a714:	83 c4 10             	add    esp,0x10
c000a717:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a71f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a727:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72f:	e8 bc d4 01 00       	call   c0027bf0 <__muldf3>
c000a734:	83 c4 10             	add    esp,0x10
c000a737:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a73b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a73f:	52                   	push   edx
c000a740:	50                   	push   eax
c000a741:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a745:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a749:	e8 25 ce 01 00       	call   c0027573 <__adddf3>
c000a74e:	59                   	pop    ecx
c000a74f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a753:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a757:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a75d:	e8 85 de 01 00       	call   c00285e7 <__extendsfdf2>
c000a762:	83 c4 10             	add    esp,0x10
c000a765:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a769:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a775:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a779:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a77d:	e8 6e d4 01 00       	call   c0027bf0 <__muldf3>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a789:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a78d:	52                   	push   edx
c000a78e:	50                   	push   eax
c000a78f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a793:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a797:	e8 d7 cd 01 00       	call   c0027573 <__adddf3>
c000a79c:	59                   	pop    ecx
c000a79d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7a5:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7ab:	e8 37 de 01 00       	call   c00285e7 <__extendsfdf2>
c000a7b0:	83 c4 10             	add    esp,0x10
c000a7b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7b7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cb:	e8 20 d4 01 00       	call   c0027bf0 <__muldf3>
c000a7d0:	83 c4 10             	add    esp,0x10
c000a7d3:	83 c6 18             	add    esi,0x18
c000a7d6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7da:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7de:	52                   	push   edx
c000a7df:	50                   	push   eax
c000a7e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e8:	e8 86 cd 01 00       	call   c0027573 <__adddf3>
c000a7ed:	59                   	pop    ecx
c000a7ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7f2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7f6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7fc:	e8 e6 dd 01 00       	call   c00285e7 <__extendsfdf2>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a808:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a80c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a814:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a818:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a81c:	e8 cf d3 01 00       	call   c0027bf0 <__muldf3>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a828:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a82c:	52                   	push   edx
c000a82d:	50                   	push   eax
c000a82e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a832:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a836:	e8 38 cd 01 00       	call   c0027573 <__adddf3>
c000a83b:	83 c4 10             	add    esp,0x10
c000a83e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a842:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a846:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a849:	0f 89 8b fd ff ff    	jns    c000a5da <calc_output_hex+0x9e>
c000a84f:	31 f6                	xor    esi,esi
c000a851:	31 ff                	xor    edi,edi
c000a853:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a857:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a85a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a85e:	29 e9                	sub    ecx,ebp
c000a860:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a864:	29 c8                	sub    eax,ecx
c000a866:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a869:	99                   	cdq    
c000a86a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a86e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a871:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a875:	0f af e8             	imul   ebp,eax
c000a878:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a87c:	40                   	inc    eax
c000a87d:	01 cd                	add    ebp,ecx
c000a87f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a884:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a888:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a890:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a893:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a897:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a89b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a89f:	89 e8                	mov    eax,ebp
c000a8a1:	e8 42 f0 ff ff       	call   c00098e8 <fp_to_double>
c000a8a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8ae:	89 e8                	mov    eax,ebp
c000a8b0:	e8 29 f0 ff ff       	call   c00098de <fp_to_int>
c000a8b5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8b9:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8bc:	52                   	push   edx
c000a8bd:	52                   	push   edx
c000a8be:	51                   	push   ecx
c000a8bf:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8c6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8cd:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d1:	e8 32 c6 01 00       	call   c0026f08 <__subsf3>
c000a8d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8d9:	e8 09 dd 01 00       	call   c00285e7 <__extendsfdf2>
c000a8de:	83 c4 10             	add    esp,0x10
c000a8e1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f9:	e8 f2 d2 01 00       	call   c0027bf0 <__muldf3>
c000a8fe:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a905:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a909:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a90c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a910:	e8 d2 dc 01 00       	call   c00285e7 <__extendsfdf2>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a91c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a920:	52                   	push   edx
c000a921:	50                   	push   eax
c000a922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92a:	e8 44 cc 01 00       	call   c0027573 <__adddf3>
c000a92f:	59                   	pop    ecx
c000a930:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a934:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a938:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a93e:	e8 a4 dc 01 00       	call   c00285e7 <__extendsfdf2>
c000a943:	83 c4 10             	add    esp,0x10
c000a946:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a94e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a952:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a956:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95e:	e8 8d d2 01 00       	call   c0027bf0 <__muldf3>
c000a963:	83 c4 10             	add    esp,0x10
c000a966:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a96a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a96e:	52                   	push   edx
c000a96f:	50                   	push   eax
c000a970:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a974:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a978:	e8 f6 cb 01 00       	call   c0027573 <__adddf3>
c000a97d:	59                   	pop    ecx
c000a97e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a982:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a986:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a98c:	e8 56 dc 01 00       	call   c00285e7 <__extendsfdf2>
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a998:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9a8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9ac:	e8 3f d2 01 00       	call   c0027bf0 <__muldf3>
c000a9b1:	83 c4 10             	add    esp,0x10
c000a9b4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9b8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9bc:	52                   	push   edx
c000a9bd:	50                   	push   eax
c000a9be:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c2:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c6:	e8 a8 cb 01 00       	call   c0027573 <__adddf3>
c000a9cb:	59                   	pop    ecx
c000a9cc:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d0:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9d4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9da:	e8 08 dc 01 00       	call   c00285e7 <__extendsfdf2>
c000a9df:	83 c4 10             	add    esp,0x10
c000a9e2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9f6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fa:	e8 f1 d1 01 00       	call   c0027bf0 <__muldf3>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa06:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa0a:	52                   	push   edx
c000aa0b:	50                   	push   eax
c000aa0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	e8 5a cb 01 00       	call   c0027573 <__adddf3>
c000aa19:	59                   	pop    ecx
c000aa1a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa1e:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa22:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa28:	e8 ba db 01 00       	call   c00285e7 <__extendsfdf2>
c000aa2d:	83 c4 10             	add    esp,0x10
c000aa30:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa34:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa44:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa48:	e8 a3 d1 01 00       	call   c0027bf0 <__muldf3>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa54:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa58:	52                   	push   edx
c000aa59:	50                   	push   eax
c000aa5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa5e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa62:	e8 0c cb 01 00       	call   c0027573 <__adddf3>
c000aa67:	59                   	pop    ecx
c000aa68:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa6c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa70:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa76:	e8 6c db 01 00       	call   c00285e7 <__extendsfdf2>
c000aa7b:	83 c4 10             	add    esp,0x10
c000aa7e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa82:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa92:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa96:	e8 55 d1 01 00       	call   c0027bf0 <__muldf3>
c000aa9b:	83 c4 10             	add    esp,0x10
c000aa9e:	83 eb 18             	sub    ebx,0x18
c000aaa1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaa5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aaa9:	52                   	push   edx
c000aaaa:	50                   	push   eax
c000aaab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aaaf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab3:	e8 bb ca 01 00       	call   c0027573 <__adddf3>
c000aab8:	59                   	pop    ecx
c000aab9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aabd:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac1:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aac7:	e8 1b db 01 00       	call   c00285e7 <__extendsfdf2>
c000aacc:	83 c4 10             	add    esp,0x10
c000aacf:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aad3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aad7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae7:	e8 04 d1 01 00       	call   c0027bf0 <__muldf3>
c000aaec:	83 c4 10             	add    esp,0x10
c000aaef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaf3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaf7:	52                   	push   edx
c000aaf8:	50                   	push   eax
c000aaf9:	57                   	push   edi
c000aafa:	56                   	push   esi
c000aafb:	e8 73 ca 01 00       	call   c0027573 <__adddf3>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	89 c6                	mov    esi,eax
c000ab05:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab08:	89 d7                	mov    edi,edx
c000ab0a:	85 ed                	test   ebp,ebp
c000ab0c:	0f 8f 8d fd ff ff    	jg     c000a89f <calc_output_hex+0x363>
c000ab12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	e8 4c ca 01 00       	call   c0027573 <__adddf3>
c000ab27:	83 c4 10             	add    esp,0x10
c000ab2a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	e8 aa d0 01 00       	call   c0027bf0 <__muldf3>
c000ab46:	59                   	pop    ecx
c000ab47:	5b                   	pop    ebx
c000ab48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab58:	e8 66 d9 01 00       	call   c00284c3 <__truncdfsf2>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab67:	89 03                	mov    DWORD PTR [ebx],eax
c000ab69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab6d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab79:	e8 f5 c9 01 00       	call   c0027573 <__adddf3>
c000ab7e:	83 c4 10             	add    esp,0x10
c000ab81:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	e8 53 d0 01 00       	call   c0027bf0 <__muldf3>
c000ab9d:	5d                   	pop    ebp
c000ab9e:	59                   	pop    ecx
c000ab9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aba7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaf:	e8 0f d9 01 00       	call   c00284c3 <__truncdfsf2>
c000abb4:	83 c4 10             	add    esp,0x10
c000abb7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abbe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abcd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd1:	e8 9d c9 01 00       	call   c0027573 <__adddf3>
c000abd6:	83 c4 10             	add    esp,0x10
c000abd9:	89 04 24             	mov    DWORD PTR [esp],eax
c000abdc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	e8 fb cf 01 00       	call   c0027bf0 <__muldf3>
c000abf5:	5b                   	pop    ebx
c000abf6:	5d                   	pop    ebp
c000abf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abfb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac07:	e8 b7 d8 01 00       	call   c00284c3 <__truncdfsf2>
c000ac0c:	83 c4 10             	add    esp,0x10
c000ac0f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac1d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac29:	e8 45 c9 01 00       	call   c0027573 <__adddf3>
c000ac2e:	83 c4 10             	add    esp,0x10
c000ac31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac34:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	e8 a3 cf 01 00       	call   c0027bf0 <__muldf3>
c000ac4d:	59                   	pop    ecx
c000ac4e:	5b                   	pop    ebx
c000ac4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5f:	e8 5f d8 01 00       	call   c00284c3 <__truncdfsf2>
c000ac64:	83 c4 10             	add    esp,0x10
c000ac67:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac6e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac81:	e8 ed c8 01 00       	call   c0027573 <__adddf3>
c000ac86:	83 c4 10             	add    esp,0x10
c000ac89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	e8 4b cf 01 00       	call   c0027bf0 <__muldf3>
c000aca5:	5d                   	pop    ebp
c000aca6:	59                   	pop    ecx
c000aca7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb7:	e8 07 d8 01 00       	call   c00284c3 <__truncdfsf2>
c000acbc:	83 c4 10             	add    esp,0x10
c000acbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acc6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acc9:	57                   	push   edi
c000acca:	56                   	push   esi
c000accb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000accf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd3:	e8 9b c8 01 00       	call   c0027573 <__adddf3>
c000acd8:	83 c4 10             	add    esp,0x10
c000acdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000acde:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ace2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	e8 f9 ce 01 00       	call   c0027bf0 <__muldf3>
c000acf7:	5b                   	pop    ebx
c000acf8:	5e                   	pop    esi
c000acf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad09:	e8 b5 d7 01 00       	call   c00284c3 <__truncdfsf2>
c000ad0e:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad15:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad18:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad1e:	5b                   	pop    ebx
c000ad1f:	5e                   	pop    esi
c000ad20:	5f                   	pop    edi
c000ad21:	5d                   	pop    ebp
c000ad22:	c3                   	ret    

c000ad23 <sinc_reset>:
c000ad23:	56                   	push   esi
c000ad24:	53                   	push   ebx
c000ad25:	51                   	push   ecx
c000ad26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad2a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad2d:	85 db                	test   ebx,ebx
c000ad2f:	74 59                	je     c000ad8a <sinc_reset+0x67>
c000ad31:	31 d2                	xor    edx,edx
c000ad33:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad3a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad3d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad47:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad4e:	31 c0                	xor    eax,eax
c000ad50:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad56:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad59:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad5c:	52                   	push   edx
c000ad5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad60:	c1 e0 02             	shl    eax,0x2
c000ad63:	50                   	push   eax
c000ad64:	6a 00                	push   0x0
c000ad66:	56                   	push   esi
c000ad67:	e8 0c 5a ff ff       	call   c0000778 <memset>
c000ad6c:	83 c4 0c             	add    esp,0xc
c000ad6f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad72:	c1 e0 02             	shl    eax,0x2
c000ad75:	50                   	push   eax
c000ad76:	68 aa 00 00 00       	push   0xaa
c000ad7b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad7e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad81:	50                   	push   eax
c000ad82:	e8 f1 59 ff ff       	call   c0000778 <memset>
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	58                   	pop    eax
c000ad8b:	5b                   	pop    ebx
c000ad8c:	5e                   	pop    esi
c000ad8d:	c3                   	ret    

c000ad8e <calc_output_multi>:
c000ad8e:	55                   	push   ebp
c000ad8f:	57                   	push   edi
c000ad90:	56                   	push   esi
c000ad91:	89 c6                	mov    esi,eax
c000ad93:	53                   	push   ebx
c000ad94:	83 ec 4c             	sub    esp,0x4c
c000ad97:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad9b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad9f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ada3:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ada7:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adaf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adb3:	8d 46 44             	lea    eax,[esi+0x44]
c000adb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb9:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adc3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adc6:	e8 0f eb ff ff       	call   c00098da <int_to_fp>
c000adcb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adce:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000add2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000add6:	99                   	cdq    
c000add7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000addb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000addf:	0f af d0             	imul   edx,eax
c000ade2:	0f af c3             	imul   eax,ebx
c000ade5:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ade9:	29 c1                	sub    ecx,eax
c000adeb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adf3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adfa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adfe:	57                   	push   edi
c000adff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae03:	6a 00                	push   0x0
c000ae05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae09:	e8 6a 59 ff ff       	call   c0000778 <memset>
c000ae0e:	83 c4 10             	add    esp,0x10
c000ae11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae15:	89 df                	mov    edi,ebx
c000ae17:	e8 cc ea ff ff       	call   c00098e8 <fp_to_double>
c000ae1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae28:	e8 b1 ea ff ff       	call   c00098de <fp_to_int>
c000ae2d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae30:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae33:	51                   	push   ecx
c000ae34:	51                   	push   ecx
c000ae35:	55                   	push   ebp
c000ae36:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae3a:	e8 c9 c0 01 00       	call   c0026f08 <__subsf3>
c000ae3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae42:	e8 a0 d7 01 00       	call   c00285e7 <__extendsfdf2>
c000ae47:	83 c4 10             	add    esp,0x10
c000ae4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae5e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae62:	e8 89 cd 01 00       	call   c0027bf0 <__muldf3>
c000ae67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae72:	e8 70 d7 01 00       	call   c00285e7 <__extendsfdf2>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae82:	52                   	push   edx
c000ae83:	50                   	push   eax
c000ae84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae8c:	e8 e2 c6 01 00       	call   c0027573 <__adddf3>
c000ae91:	83 c4 10             	add    esp,0x10
c000ae94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae98:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae9c:	89 f8                	mov    eax,edi
c000ae9e:	b9 08 00 00 00       	mov    ecx,0x8
c000aea3:	99                   	cdq    
c000aea4:	f7 f9                	idiv   ecx
c000aea6:	4a                   	dec    edx
c000aea7:	83 fa 06             	cmp    edx,0x6
c000aeaa:	77 07                	ja     c000aeb3 <calc_output_multi+0x125>
c000aeac:	ff 24 95 04 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd61fc]
c000aeb3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeb6:	4f                   	dec    edi
c000aeb7:	83 ec 0c             	sub    esp,0xc
c000aeba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aebd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aec8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aecc:	e8 16 d7 01 00       	call   c00285e7 <__extendsfdf2>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aedc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeec:	e8 ff cc 01 00       	call   c0027bf0 <__muldf3>
c000aef1:	83 c4 10             	add    esp,0x10
c000aef4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aefc:	52                   	push   edx
c000aefd:	50                   	push   eax
c000aefe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af01:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af04:	e8 6a c6 01 00       	call   c0027573 <__adddf3>
c000af09:	83 c4 10             	add    esp,0x10
c000af0c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af0f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af12:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af15:	4f                   	dec    edi
c000af16:	83 ec 0c             	sub    esp,0xc
c000af19:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af20:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af27:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af2b:	e8 b7 d6 01 00       	call   c00285e7 <__extendsfdf2>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4b:	e8 a0 cc 01 00       	call   c0027bf0 <__muldf3>
c000af50:	83 c4 10             	add    esp,0x10
c000af53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af57:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5b:	52                   	push   edx
c000af5c:	50                   	push   eax
c000af5d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af60:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af63:	e8 0b c6 01 00       	call   c0027573 <__adddf3>
c000af68:	83 c4 10             	add    esp,0x10
c000af6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af6e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af74:	4f                   	dec    edi
c000af75:	83 ec 0c             	sub    esp,0xc
c000af78:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af7f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af86:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af8a:	e8 58 d6 01 00       	call   c00285e7 <__extendsfdf2>
c000af8f:	83 c4 10             	add    esp,0x10
c000af92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afa6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afaa:	e8 41 cc 01 00       	call   c0027bf0 <__muldf3>
c000afaf:	83 c4 10             	add    esp,0x10
c000afb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afb6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afba:	52                   	push   edx
c000afbb:	50                   	push   eax
c000afbc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afbf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afc2:	e8 ac c5 01 00       	call   c0027573 <__adddf3>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afcd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afd3:	4f                   	dec    edi
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afde:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afe5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afe9:	e8 f9 d5 01 00       	call   c00285e7 <__extendsfdf2>
c000afee:	83 c4 10             	add    esp,0x10
c000aff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000affd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b001:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b005:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b009:	e8 e2 cb 01 00       	call   c0027bf0 <__muldf3>
c000b00e:	83 c4 10             	add    esp,0x10
c000b011:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b015:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b019:	52                   	push   edx
c000b01a:	50                   	push   eax
c000b01b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b01e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b021:	e8 4d c5 01 00       	call   c0027573 <__adddf3>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b02c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b02f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b032:	4f                   	dec    edi
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b039:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b03d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b044:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b048:	e8 9a d5 01 00       	call   c00285e7 <__extendsfdf2>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b054:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b060:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b064:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b068:	e8 83 cb 01 00       	call   c0027bf0 <__muldf3>
c000b06d:	83 c4 10             	add    esp,0x10
c000b070:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b074:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b078:	52                   	push   edx
c000b079:	50                   	push   eax
c000b07a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b07d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b080:	e8 ee c4 01 00       	call   c0027573 <__adddf3>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b08b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b08e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b091:	4f                   	dec    edi
c000b092:	83 ec 0c             	sub    esp,0xc
c000b095:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b098:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b09c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a7:	e8 3b d5 01 00       	call   c00285e7 <__extendsfdf2>
c000b0ac:	83 c4 10             	add    esp,0x10
c000b0af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c7:	e8 24 cb 01 00       	call   c0027bf0 <__muldf3>
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d7:	52                   	push   edx
c000b0d8:	50                   	push   eax
c000b0d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0dc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0df:	e8 8f c4 01 00       	call   c0027573 <__adddf3>
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ea:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f0:	4f                   	dec    edi
c000b0f1:	83 ec 0c             	sub    esp,0xc
c000b0f4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0fb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b102:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b106:	e8 dc d4 01 00       	call   c00285e7 <__extendsfdf2>
c000b10b:	83 c4 10             	add    esp,0x10
c000b10e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b112:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b116:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b122:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b126:	e8 c5 ca 01 00       	call   c0027bf0 <__muldf3>
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b132:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b136:	52                   	push   edx
c000b137:	50                   	push   eax
c000b138:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b13b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13e:	e8 30 c4 01 00       	call   c0027573 <__adddf3>
c000b143:	83 c4 10             	add    esp,0x10
c000b146:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b149:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b14f:	4f                   	dec    edi
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b156:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b15a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b161:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b165:	e8 7d d4 01 00       	call   c00285e7 <__extendsfdf2>
c000b16a:	83 c4 10             	add    esp,0x10
c000b16d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b171:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b175:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b179:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b181:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b185:	e8 66 ca 01 00       	call   c0027bf0 <__muldf3>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b191:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b195:	52                   	push   edx
c000b196:	50                   	push   eax
c000b197:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b19a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19d:	e8 d1 c3 01 00       	call   c0027573 <__adddf3>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1ab:	85 ff                	test   edi,edi
c000b1ad:	0f 8f e9 fc ff ff    	jg     c000ae9c <calc_output_multi+0x10e>
c000b1b3:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1bb:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1bf:	0f 89 4c fc ff ff    	jns    c000ae11 <calc_output_multi+0x83>
c000b1c5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1cd:	29 c8                	sub    eax,ecx
c000b1cf:	99                   	cdq    
c000b1d0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1d8:	0f af d0             	imul   edx,eax
c000b1db:	40                   	inc    eax
c000b1dc:	01 d1                	add    ecx,edx
c000b1de:	0f af c3             	imul   eax,ebx
c000b1e1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1e5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1ec:	55                   	push   ebp
c000b1ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f1:	6a 00                	push   0x0
c000b1f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1f7:	e8 7c 55 ff ff       	call   c0000778 <memset>
c000b1fc:	83 c4 10             	add    esp,0x10
c000b1ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b203:	e8 e0 e6 ff ff       	call   c00098e8 <fp_to_double>
c000b208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b20c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b210:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b214:	e8 c5 e6 ff ff       	call   c00098de <fp_to_int>
c000b219:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b21c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b21f:	57                   	push   edi
c000b220:	57                   	push   edi
c000b221:	89 df                	mov    edi,ebx
c000b223:	55                   	push   ebp
c000b224:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b228:	e8 db bc 01 00       	call   c0026f08 <__subsf3>
c000b22d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b230:	e8 b2 d3 01 00       	call   c00285e7 <__extendsfdf2>
c000b235:	83 c4 10             	add    esp,0x10
c000b238:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b23c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b240:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b248:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b24c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b250:	e8 9b c9 01 00       	call   c0027bf0 <__muldf3>
c000b255:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b258:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b25c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b260:	e8 82 d3 01 00       	call   c00285e7 <__extendsfdf2>
c000b265:	83 c4 10             	add    esp,0x10
c000b268:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b26c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b270:	52                   	push   edx
c000b271:	50                   	push   eax
c000b272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	e8 f4 c2 01 00       	call   c0027573 <__adddf3>
c000b27f:	83 c4 10             	add    esp,0x10
c000b282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b286:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b28a:	89 f8                	mov    eax,edi
c000b28c:	b9 08 00 00 00       	mov    ecx,0x8
c000b291:	99                   	cdq    
c000b292:	f7 f9                	idiv   ecx
c000b294:	4a                   	dec    edx
c000b295:	83 fa 06             	cmp    edx,0x6
c000b298:	77 07                	ja     c000b2a1 <calc_output_multi+0x513>
c000b29a:	ff 24 95 20 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd61e0]
c000b2a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2a5:	4f                   	dec    edi
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2b7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2bb:	e8 27 d3 01 00       	call   c00285e7 <__extendsfdf2>
c000b2c0:	83 c4 10             	add    esp,0x10
c000b2c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2db:	e8 10 c9 01 00       	call   c0027bf0 <__muldf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2eb:	52                   	push   edx
c000b2ec:	50                   	push   eax
c000b2ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2f3:	e8 7b c2 01 00       	call   c0027573 <__adddf3>
c000b2f8:	83 c4 10             	add    esp,0x10
c000b2fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2fe:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b305:	4f                   	dec    edi
c000b306:	83 ec 0c             	sub    esp,0xc
c000b309:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b30c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b310:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b317:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b31b:	e8 c7 d2 01 00       	call   c00285e7 <__extendsfdf2>
c000b320:	83 c4 10             	add    esp,0x10
c000b323:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b327:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b32f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b333:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b337:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33b:	e8 b0 c8 01 00       	call   c0027bf0 <__muldf3>
c000b340:	83 c4 10             	add    esp,0x10
c000b343:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b347:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34b:	52                   	push   edx
c000b34c:	50                   	push   eax
c000b34d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b350:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b353:	e8 1b c2 01 00       	call   c0027573 <__adddf3>
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b35e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b365:	4f                   	dec    edi
c000b366:	83 ec 0c             	sub    esp,0xc
c000b369:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b36c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b370:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b377:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b37b:	e8 67 d2 01 00       	call   c00285e7 <__extendsfdf2>
c000b380:	83 c4 10             	add    esp,0x10
c000b383:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b387:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b38f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b393:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b397:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39b:	e8 50 c8 01 00       	call   c0027bf0 <__muldf3>
c000b3a0:	83 c4 10             	add    esp,0x10
c000b3a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ab:	52                   	push   edx
c000b3ac:	50                   	push   eax
c000b3ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3b3:	e8 bb c1 01 00       	call   c0027573 <__adddf3>
c000b3b8:	83 c4 10             	add    esp,0x10
c000b3bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3be:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c5:	4f                   	dec    edi
c000b3c6:	83 ec 0c             	sub    esp,0xc
c000b3c9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3d7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3db:	e8 07 d2 01 00       	call   c00285e7 <__extendsfdf2>
c000b3e0:	83 c4 10             	add    esp,0x10
c000b3e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3fb:	e8 f0 c7 01 00       	call   c0027bf0 <__muldf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b407:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b40b:	52                   	push   edx
c000b40c:	50                   	push   eax
c000b40d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b410:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b413:	e8 5b c1 01 00       	call   c0027573 <__adddf3>
c000b418:	83 c4 10             	add    esp,0x10
c000b41b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b41e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b425:	4f                   	dec    edi
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b42c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b430:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b437:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b43b:	e8 a7 d1 01 00       	call   c00285e7 <__extendsfdf2>
c000b440:	83 c4 10             	add    esp,0x10
c000b443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b447:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b453:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b457:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45b:	e8 90 c7 01 00       	call   c0027bf0 <__muldf3>
c000b460:	83 c4 10             	add    esp,0x10
c000b463:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b467:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46b:	52                   	push   edx
c000b46c:	50                   	push   eax
c000b46d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b470:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b473:	e8 fb c0 01 00       	call   c0027573 <__adddf3>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b47e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b481:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b485:	4f                   	dec    edi
c000b486:	83 ec 0c             	sub    esp,0xc
c000b489:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b48c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b490:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b497:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b49b:	e8 47 d1 01 00       	call   c00285e7 <__extendsfdf2>
c000b4a0:	83 c4 10             	add    esp,0x10
c000b4a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bb:	e8 30 c7 01 00       	call   c0027bf0 <__muldf3>
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4cb:	52                   	push   edx
c000b4cc:	50                   	push   eax
c000b4cd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4d3:	e8 9b c0 01 00       	call   c0027573 <__adddf3>
c000b4d8:	83 c4 10             	add    esp,0x10
c000b4db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4de:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4e5:	4f                   	dec    edi
c000b4e6:	83 ec 0c             	sub    esp,0xc
c000b4e9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4f7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4fb:	e8 e7 d0 01 00       	call   c00285e7 <__extendsfdf2>
c000b500:	83 c4 10             	add    esp,0x10
c000b503:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b507:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b513:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b517:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51b:	e8 d0 c6 01 00       	call   c0027bf0 <__muldf3>
c000b520:	83 c4 10             	add    esp,0x10
c000b523:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b527:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b52b:	52                   	push   edx
c000b52c:	50                   	push   eax
c000b52d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b530:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b533:	e8 3b c0 01 00       	call   c0027573 <__adddf3>
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b53e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b545:	4f                   	dec    edi
c000b546:	83 ec 0c             	sub    esp,0xc
c000b549:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b54c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b550:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b557:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b55b:	e8 87 d0 01 00       	call   c00285e7 <__extendsfdf2>
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b567:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b573:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b577:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57b:	e8 70 c6 01 00       	call   c0027bf0 <__muldf3>
c000b580:	83 c4 10             	add    esp,0x10
c000b583:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b587:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b58b:	52                   	push   edx
c000b58c:	50                   	push   eax
c000b58d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b590:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b593:	e8 db bf 01 00       	call   c0027573 <__adddf3>
c000b598:	83 c4 10             	add    esp,0x10
c000b59b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b59e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a1:	85 ff                	test   edi,edi
c000b5a3:	0f 8f e1 fc ff ff    	jg     c000b28a <calc_output_multi+0x4fc>
c000b5a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5ad:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b1:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5b5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5ba:	0f 8f 3f fc ff ff    	jg     c000b1ff <calc_output_multi+0x471>
c000b5c0:	be 08 00 00 00       	mov    esi,0x8
c000b5c5:	89 d8                	mov    eax,ebx
c000b5c7:	99                   	cdq    
c000b5c8:	f7 fe                	idiv   esi
c000b5ca:	4a                   	dec    edx
c000b5cb:	83 fa 06             	cmp    edx,0x6
c000b5ce:	77 07                	ja     c000b5d7 <calc_output_multi+0x849>
c000b5d0:	ff 24 95 3c 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd61c4]
c000b5d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5db:	4b                   	dec    ebx
c000b5dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ee:	e8 80 bf 01 00       	call   c0027573 <__adddf3>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60e:	e8 dd c5 01 00       	call   c0027bf0 <__muldf3>
c000b613:	5d                   	pop    ebp
c000b614:	59                   	pop    ecx
c000b615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b619:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 99 ce 01 00       	call   c00284c3 <__truncdfsf2>
c000b62a:	83 c4 10             	add    esp,0x10
c000b62d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b631:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b638:	4b                   	dec    ebx
c000b639:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b63d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b644:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b648:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b64b:	e8 23 bf 01 00       	call   c0027573 <__adddf3>
c000b650:	83 c4 10             	add    esp,0x10
c000b653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b657:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66b:	e8 80 c5 01 00       	call   c0027bf0 <__muldf3>
c000b670:	59                   	pop    ecx
c000b671:	5f                   	pop    edi
c000b672:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b676:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 3c ce 01 00       	call   c00284c3 <__truncdfsf2>
c000b687:	83 c4 10             	add    esp,0x10
c000b68a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b68e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b695:	4b                   	dec    ebx
c000b696:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b69a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b69d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a8:	e8 c6 be 01 00       	call   c0027573 <__adddf3>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c8:	e8 23 c5 01 00       	call   c0027bf0 <__muldf3>
c000b6cd:	5f                   	pop    edi
c000b6ce:	5d                   	pop    ebp
c000b6cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6df:	e8 df cd 01 00       	call   c00284c3 <__truncdfsf2>
c000b6e4:	83 c4 10             	add    esp,0x10
c000b6e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6f2:	4b                   	dec    ebx
c000b6f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b702:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b705:	e8 69 be 01 00       	call   c0027573 <__adddf3>
c000b70a:	83 c4 10             	add    esp,0x10
c000b70d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b711:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b715:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b719:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b721:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b725:	e8 c6 c4 01 00       	call   c0027bf0 <__muldf3>
c000b72a:	5d                   	pop    ebp
c000b72b:	59                   	pop    ecx
c000b72c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b730:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b73c:	e8 82 cd 01 00       	call   c00284c3 <__truncdfsf2>
c000b741:	83 c4 10             	add    esp,0x10
c000b744:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b748:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b74b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b74f:	4b                   	dec    ebx
c000b750:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b754:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b75b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b762:	e8 0c be 01 00       	call   c0027573 <__adddf3>
c000b767:	83 c4 10             	add    esp,0x10
c000b76a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b76e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b782:	e8 69 c4 01 00       	call   c0027bf0 <__muldf3>
c000b787:	59                   	pop    ecx
c000b788:	5f                   	pop    edi
c000b789:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b78d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b799:	e8 25 cd 01 00       	call   c00284c3 <__truncdfsf2>
c000b79e:	83 c4 10             	add    esp,0x10
c000b7a1:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7a5:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ac:	4b                   	dec    ebx
c000b7ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7b8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7bc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bf:	e8 af bd 01 00       	call   c0027573 <__adddf3>
c000b7c4:	83 c4 10             	add    esp,0x10
c000b7c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7df:	e8 0c c4 01 00       	call   c0027bf0 <__muldf3>
c000b7e4:	5f                   	pop    edi
c000b7e5:	5d                   	pop    ebp
c000b7e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f6:	e8 c8 cc 01 00       	call   c00284c3 <__truncdfsf2>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b802:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b809:	4b                   	dec    ebx
c000b80a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b80e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b815:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b819:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b81c:	e8 52 bd 01 00       	call   c0027573 <__adddf3>
c000b821:	83 c4 10             	add    esp,0x10
c000b824:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b828:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b834:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b838:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b83c:	e8 af c3 01 00       	call   c0027bf0 <__muldf3>
c000b841:	5d                   	pop    ebp
c000b842:	59                   	pop    ecx
c000b843:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b847:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b84b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b84f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b853:	e8 6b cc 01 00       	call   c00284c3 <__truncdfsf2>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b85f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b866:	4b                   	dec    ebx
c000b867:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b86b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b86e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b872:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b876:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b879:	e8 f5 bc 01 00       	call   c0027573 <__adddf3>
c000b87e:	83 c4 10             	add    esp,0x10
c000b881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b885:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b891:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b895:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b899:	e8 52 c3 01 00       	call   c0027bf0 <__muldf3>
c000b89e:	59                   	pop    ecx
c000b89f:	5f                   	pop    edi
c000b8a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b0:	e8 0e cc 01 00       	call   c00284c3 <__truncdfsf2>
c000b8b5:	83 c4 10             	add    esp,0x10
c000b8b8:	85 db                	test   ebx,ebx
c000b8ba:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8be:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c1:	0f 8f fe fc ff ff    	jg     c000b5c5 <calc_output_multi+0x837>
c000b8c7:	83 c4 4c             	add    esp,0x4c
c000b8ca:	5b                   	pop    ebx
c000b8cb:	5e                   	pop    esi
c000b8cc:	5f                   	pop    edi
c000b8cd:	5d                   	pop    ebp
c000b8ce:	c3                   	ret    

c000b8cf <double_to_fp>:
c000b8cf:	83 ec 0c             	sub    esp,0xc
c000b8d2:	68 00 00 b0 40       	push   0x40b00000
c000b8d7:	6a 00                	push   0x0
c000b8d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e1:	e8 0a c3 01 00       	call   c0027bf0 <__muldf3>
c000b8e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8ee:	83 c4 1c             	add    esp,0x1c
c000b8f1:	e9 7a cd 01 00       	jmp    c0028670 <lrint>

c000b8f6 <prepare_data>:
c000b8f6:	55                   	push   ebp
c000b8f7:	57                   	push   edi
c000b8f8:	56                   	push   esi
c000b8f9:	53                   	push   ebx
c000b8fa:	83 ec 1c             	sub    esp,0x1c
c000b8fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b901:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b905:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b909:	0f 89 57 01 00 00    	jns    c000ba66 <prepare_data+0x170>
c000b90f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b912:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b915:	85 d2                	test   edx,edx
c000b917:	75 0d                	jne    c000b926 <prepare_data+0x30>
c000b919:	8d 14 36             	lea    edx,[esi+esi*1]
c000b91c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b91f:	29 d0                	sub    eax,edx
c000b921:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b924:	eb 44                	jmp    c000b96a <prepare_data+0x74>
c000b926:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b929:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b92c:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b92f:	39 c1                	cmp    ecx,eax
c000b931:	7d 04                	jge    c000b937 <prepare_data+0x41>
c000b933:	29 d0                	sub    eax,edx
c000b935:	eb 2d                	jmp    c000b964 <prepare_data+0x6e>
c000b937:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b93d:	29 d7                	sub    edi,edx
c000b93f:	01 f7                	add    edi,esi
c000b941:	51                   	push   ecx
c000b942:	29 f2                	sub    edx,esi
c000b944:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b94b:	8d 14 90             	lea    edx,[eax+edx*4]
c000b94e:	51                   	push   ecx
c000b94f:	52                   	push   edx
c000b950:	50                   	push   eax
c000b951:	e8 26 4d ff ff       	call   c000067c <memmove>
c000b956:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b959:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b95c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b95f:	29 f0                	sub    eax,esi
c000b961:	83 c4 10             	add    esp,0x10
c000b964:	29 f0                	sub    eax,esi
c000b966:	79 02                	jns    c000b96a <prepare_data+0x74>
c000b968:	31 c0                	xor    eax,eax
c000b96a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b96d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b970:	29 ef                	sub    edi,ebp
c000b972:	39 c7                	cmp    edi,eax
c000b974:	7e 02                	jle    c000b978 <prepare_data+0x82>
c000b976:	89 c7                	mov    edi,eax
c000b978:	89 f8                	mov    eax,edi
c000b97a:	99                   	cdq    
c000b97b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b97e:	b8 15 00 00 00       	mov    eax,0x15
c000b983:	29 d7                	sub    edi,edx
c000b985:	0f 88 dd 00 00 00    	js     c000ba68 <prepare_data+0x172>
c000b98b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b98e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b991:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b994:	0f 8f ce 00 00 00    	jg     c000ba68 <prepare_data+0x172>
c000b99a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a0:	50                   	push   eax
c000b9a1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9a8:	50                   	push   eax
c000b9a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9af:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9b2:	50                   	push   eax
c000b9b3:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9ba:	50                   	push   eax
c000b9bb:	e8 84 4d ff ff       	call   c0000744 <memcpy>
c000b9c0:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9c3:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9c6:	01 fd                	add    ebp,edi
c000b9c8:	01 f9                	add    ecx,edi
c000b9ca:	83 c4 10             	add    esp,0x10
c000b9cd:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9d3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9da:	0f 85 86 00 00 00    	jne    c000ba66 <prepare_data+0x170>
c000b9e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9e3:	89 e8                	mov    eax,ebp
c000b9e5:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9e8:	29 c8                	sub    eax,ecx
c000b9ea:	39 f8                	cmp    eax,edi
c000b9ec:	7d 78                	jge    c000ba66 <prepare_data+0x170>
c000b9ee:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9f2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9f6:	74 6e                	je     c000ba66 <prepare_data+0x170>
c000b9f8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9ff:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba02:	29 ef                	sub    edi,ebp
c000ba04:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba08:	7c 29                	jl     c000ba33 <prepare_data+0x13d>
c000ba0a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0d:	29 f1                	sub    ecx,esi
c000ba0f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba16:	55                   	push   ebp
c000ba17:	50                   	push   eax
c000ba18:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba1b:	50                   	push   eax
c000ba1c:	52                   	push   edx
c000ba1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba21:	e8 56 4c ff ff       	call   c000067c <memmove>
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba2c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba33:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba36:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba39:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba3c:	83 c6 05             	add    esi,0x5
c000ba3f:	78 07                	js     c000ba48 <prepare_data+0x152>
c000ba41:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba44:	39 cf                	cmp    edi,ecx
c000ba46:	7e 04                	jle    c000ba4c <prepare_data+0x156>
c000ba48:	89 ce                	mov    esi,ecx
c000ba4a:	29 c6                	sub    esi,eax
c000ba4c:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba4f:	51                   	push   ecx
c000ba50:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba57:	51                   	push   ecx
c000ba58:	6a 00                	push   0x0
c000ba5a:	50                   	push   eax
c000ba5b:	e8 18 4d ff ff       	call   c0000778 <memset>
c000ba60:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba63:	83 c4 10             	add    esp,0x10
c000ba66:	31 c0                	xor    eax,eax
c000ba68:	83 c4 1c             	add    esp,0x1c
c000ba6b:	5b                   	pop    ebx
c000ba6c:	5e                   	pop    esi
c000ba6d:	5f                   	pop    edi
c000ba6e:	5d                   	pop    ebp
c000ba6f:	c3                   	ret    

c000ba70 <sinc_multichan_vari_process>:
c000ba70:	55                   	push   ebp
c000ba71:	ba 05 00 00 00       	mov    edx,0x5
c000ba76:	57                   	push   edi
c000ba77:	56                   	push   esi
c000ba78:	53                   	push   ebx
c000ba79:	83 ec 4c             	sub    esp,0x4c
c000ba7c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba80:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba84:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba87:	85 db                	test   ebx,ebx
c000ba89:	0f 84 9b 06 00 00    	je     c000c12a <sinc_multichan_vari_process+0x6ba>
c000ba8f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba92:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba95:	0f af c5             	imul   eax,ebp
c000ba98:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba9b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba9e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baa5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000baac:	0f af c5             	imul   eax,ebp
c000baaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bab2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bab5:	8b 06                	mov    eax,DWORD PTR [esi]
c000bab7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000babb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000babf:	68 00 00 70 3f       	push   0x3f700000
c000bac4:	6a 00                	push   0x0
c000bac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bace:	e8 ec c9 01 00       	call   c00284bf <__ltdf2>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	ba 16 00 00 00       	mov    edx,0x16
c000badb:	85 c0                	test   eax,eax
c000badd:	0f 88 47 06 00 00    	js     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bae3:	68 00 00 70 40       	push   0x40700000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf2:	e8 aa c9 01 00       	call   c00284a1 <__gtdf2>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	ba 16 00 00 00       	mov    edx,0x16
c000baff:	85 c0                	test   eax,eax
c000bb01:	0f 8f 23 06 00 00    	jg     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bb07:	83 ec 0c             	sub    esp,0xc
c000bb0a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb0d:	e8 41 c7 01 00       	call   c0028253 <__floatsidf>
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb1d:	68 00 00 00 40       	push   0x40000000
c000bb22:	6a 00                	push   0x0
c000bb24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb2c:	e8 42 ba 01 00       	call   c0027573 <__adddf3>
c000bb31:	59                   	pop    ecx
c000bb32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb36:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb3a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb3d:	e8 11 c7 01 00       	call   c0028253 <__floatsidf>
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb4d:	52                   	push   edx
c000bb4e:	50                   	push   eax
c000bb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb57:	e8 78 c3 01 00       	call   c0027ed4 <__divdf3>
c000bb5c:	83 c4 10             	add    esp,0x10
c000bb5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb67:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb6a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	e8 17 c9 01 00       	call   c00284a1 <__gtdf2>
c000bb8a:	83 c4 10             	add    esp,0x10
c000bb8d:	85 c0                	test   eax,eax
c000bb8f:	7e 2d                	jle    c000bbbe <sinc_multichan_vari_process+0x14e>
c000bb91:	68 00 00 f0 3f       	push   0x3ff00000
c000bb96:	6a 00                	push   0x0
c000bb98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba0:	e8 1a c9 01 00       	call   c00284bf <__ltdf2>
c000bba5:	83 c4 10             	add    esp,0x10
c000bba8:	85 c0                	test   eax,eax
c000bbaa:	79 4d                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbbc:	eb 1b                	jmp    c000bbd9 <sinc_multichan_vari_process+0x169>
c000bbbe:	68 00 00 f0 3f       	push   0x3ff00000
c000bbc3:	6a 00                	push   0x0
c000bbc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbcd:	e8 ed c8 01 00       	call   c00284bf <__ltdf2>
c000bbd2:	83 c4 10             	add    esp,0x10
c000bbd5:	85 c0                	test   eax,eax
c000bbd7:	79 20                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbdd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe9:	e8 e6 c2 01 00       	call   c0027ed4 <__divdf3>
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbf5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbf9:	50                   	push   eax
c000bbfa:	50                   	push   eax
c000bbfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc03:	e8 68 ca 01 00       	call   c0028670 <lrint>
c000bc08:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc0b:	40                   	inc    eax
c000bc0c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc10:	0f af c5             	imul   eax,ebp
c000bc13:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc17:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1e:	58                   	pop    eax
c000bc1f:	5a                   	pop    edx
c000bc20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc28:	e8 43 ca 01 00       	call   c0028670 <lrint>
c000bc2d:	83 ec 0c             	sub    esp,0xc
c000bc30:	50                   	push   eax
c000bc31:	e8 1d c6 01 00       	call   c0028253 <__floatsidf>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc41:	52                   	push   edx
c000bc42:	50                   	push   eax
c000bc43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4b:	e8 74 bf 01 00       	call   c0027bc4 <__subdf3>
c000bc50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc58:	83 c4 20             	add    esp,0x20
c000bc5b:	6a 00                	push   0x0
c000bc5d:	6a 00                	push   0x0
c000bc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc67:	e8 53 c8 01 00       	call   c00284bf <__ltdf2>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	85 c0                	test   eax,eax
c000bc71:	79 1f                	jns    c000bc92 <sinc_multichan_vari_process+0x222>
c000bc73:	68 00 00 f0 3f       	push   0x3ff00000
c000bc78:	6a 00                	push   0x0
c000bc7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc82:	e8 ec b8 01 00       	call   c0027573 <__adddf3>
c000bc87:	83 c4 10             	add    esp,0x10
c000bc8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc92:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc95:	83 ec 10             	sub    esp,0x10
c000bc98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc9c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcaf:	e8 10 bf 01 00       	call   c0027bc4 <__subdf3>
c000bcb4:	83 c4 18             	add    esp,0x18
c000bcb7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcbf:	52                   	push   edx
c000bcc0:	50                   	push   eax
c000bcc1:	e8 aa c9 01 00       	call   c0028670 <lrint>
c000bcc6:	0f af e8             	imul   ebp,eax
c000bcc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bccd:	01 e8                	add    eax,ebp
c000bccf:	99                   	cdq    
c000bcd0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcd3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcde:	68 00 00 f0 3f       	push   0x3ff00000
c000bce3:	6a 00                	push   0x0
c000bce5:	e8 ea c1 01 00       	call   c0027ed4 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcfa:	68 23 42 92 0c       	push   0xc924223
c000bcff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd07:	e8 67 b8 01 00       	call   c0027573 <__adddf3>
c000bd0c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd14:	83 c4 20             	add    esp,0x20
c000bd17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd1f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd27:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd2a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd2d:	7d 50                	jge    c000bd7f <sinc_multichan_vari_process+0x30f>
c000bd2f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd32:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd35:	01 c8                	add    eax,ecx
c000bd37:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3a:	99                   	cdq    
c000bd3b:	f7 f9                	idiv   ecx
c000bd3d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd41:	7d 0c                	jge    c000bd4f <sinc_multichan_vari_process+0x2df>
c000bd43:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd46:	85 ed                	test   ebp,ebp
c000bd48:	79 6b                	jns    c000bdb5 <sinc_multichan_vari_process+0x345>
c000bd4a:	e9 e6 00 00 00       	jmp    c000be35 <sinc_multichan_vari_process+0x3c5>
c000bd4f:	50                   	push   eax
c000bd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd54:	57                   	push   edi
c000bd55:	53                   	push   ebx
c000bd56:	e8 9b fb ff ff       	call   c000b8f6 <prepare_data>
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	89 c2                	mov    edx,eax
c000bd60:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd63:	85 c0                	test   eax,eax
c000bd65:	0f 85 bf 03 00 00    	jne    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bd6b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd6e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd71:	01 c8                	add    eax,ecx
c000bd73:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd76:	99                   	cdq    
c000bd77:	f7 f9                	idiv   ecx
c000bd79:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd7d:	7c c4                	jl     c000bd43 <sinc_multichan_vari_process+0x2d3>
c000bd7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd87:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd8a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd95:	89 06                	mov    DWORD PTR [esi],eax
c000bd97:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd9d:	99                   	cdq    
c000bd9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bda4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bda7:	99                   	cdq    
c000bda8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdab:	31 d2                	xor    edx,edx
c000bdad:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb0:	e9 75 03 00 00       	jmp    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bdb5:	83 ec 0c             	sub    esp,0xc
c000bdb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdbb:	e8 93 c4 01 00       	call   c0028253 <__floatsidf>
c000bdc0:	83 c4 10             	add    esp,0x10
c000bdc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddb:	e8 93 b7 01 00       	call   c0027573 <__adddf3>
c000bde0:	83 c4 10             	add    esp,0x10
c000bde3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bde7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfb:	e8 73 b7 01 00       	call   c0027573 <__adddf3>
c000be00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be0b:	e8 43 c4 01 00       	call   c0028253 <__floatsidf>
c000be10:	83 c4 10             	add    esp,0x10
c000be13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be1b:	52                   	push   edx
c000be1c:	50                   	push   eax
c000be1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be25:	e8 93 c6 01 00       	call   c00284bd <__gedf2>
c000be2a:	83 c4 10             	add    esp,0x10
c000be2d:	85 c0                	test   eax,eax
c000be2f:	0f 89 4a ff ff ff    	jns    c000bd7f <sinc_multichan_vari_process+0x30f>
c000be35:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be39:	0f 8e ed 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be3f:	83 ec 10             	sub    esp,0x10
c000be42:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be45:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be48:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be4b:	ff 36                	push   DWORD PTR [esi]
c000be4d:	e8 72 bd 01 00       	call   c0027bc4 <__subdf3>
c000be52:	83 c4 18             	add    esp,0x18
c000be55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be5d:	52                   	push   edx
c000be5e:	50                   	push   eax
c000be5f:	e8 ec c7 01 00       	call   c0028650 <fabs>
c000be64:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be68:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be6c:	83 c4 10             	add    esp,0x10
c000be6f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be74:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be81:	e8 1b c6 01 00       	call   c00284a1 <__gtdf2>
c000be86:	83 c4 10             	add    esp,0x10
c000be89:	85 c0                	test   eax,eax
c000be8b:	0f 8e 9b 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be91:	8b 06                	mov    eax,DWORD PTR [esi]
c000be93:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be9a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be9e:	52                   	push   edx
c000be9f:	50                   	push   eax
c000bea0:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bea3:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bea6:	e8 19 bd 01 00       	call   c0027bc4 <__subdf3>
c000beab:	59                   	pop    ecx
c000beac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000beb4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000beb7:	e8 97 c3 01 00       	call   c0028253 <__floatsidf>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bec3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bec7:	52                   	push   edx
c000bec8:	50                   	push   eax
c000bec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000becd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed1:	e8 1a bd 01 00       	call   c0027bf0 <__muldf3>
c000bed6:	5d                   	pop    ebp
c000bed7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bedb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bedf:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bee2:	e8 6c c3 01 00       	call   c0028253 <__floatsidf>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef2:	52                   	push   edx
c000bef3:	50                   	push   eax
c000bef4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befc:	e8 d3 bf 01 00       	call   c0027ed4 <__divdf3>
c000bf01:	83 c4 10             	add    esp,0x10
c000bf04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf1c:	e8 52 b6 01 00       	call   c0027573 <__adddf3>
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf32:	e8 1c c3 01 00       	call   c0028253 <__floatsidf>
c000bf37:	83 c4 10             	add    esp,0x10
c000bf3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	e8 68 c5 01 00       	call   c00284bf <__ltdf2>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	85 c0                	test   eax,eax
c000bf5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf60:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf64:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf68:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf6c:	78 10                	js     c000bf7e <sinc_multichan_vari_process+0x50e>
c000bf6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8e:	e8 5d bc 01 00       	call   c0027bf0 <__muldf3>
c000bf93:	59                   	pop    ecx
c000bf94:	5d                   	pop    ebp
c000bf95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa5:	e8 25 f9 ff ff       	call   c000b8cf <double_to_fp>
c000bfaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfae:	89 c5                	mov    ebp,eax
c000bfb0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfbc:	e8 2f bc 01 00       	call   c0027bf0 <__muldf3>
c000bfc1:	83 c4 18             	add    esp,0x18
c000bfc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfcc:	52                   	push   edx
c000bfcd:	50                   	push   eax
c000bfce:	e8 fc f8 ff ff       	call   c000b8cf <double_to_fp>
c000bfd3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfd6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfda:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfdd:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe0:	50                   	push   eax
c000bfe1:	50                   	push   eax
c000bfe2:	50                   	push   eax
c000bfe3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfe6:	e8 68 c2 01 00       	call   c0028253 <__floatsidf>
c000bfeb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfef:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bff3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bff7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	e8 cc be 01 00       	call   c0027ed4 <__divdf3>
c000c008:	83 c4 1c             	add    esp,0x1c
c000c00b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c00f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c013:	52                   	push   edx
c000c014:	89 ea                	mov    edx,ebp
c000c016:	50                   	push   eax
c000c017:	89 d8                	mov    eax,ebx
c000c019:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c01c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c020:	e8 69 ed ff ff       	call   c000ad8e <calc_output_multi>
c000c025:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c028:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c02b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c02f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c033:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c037:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03b:	e8 94 be 01 00       	call   c0027ed4 <__divdf3>
c000c040:	83 c4 10             	add    esp,0x10
c000c043:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c047:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c04b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c04f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c053:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c057:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05b:	e8 13 b5 01 00       	call   c0027573 <__adddf3>
c000c060:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c064:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c068:	83 c4 28             	add    esp,0x28
c000c06b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c06f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c073:	e8 f8 c5 01 00       	call   c0028670 <lrint>
c000c078:	83 ec 0c             	sub    esp,0xc
c000c07b:	50                   	push   eax
c000c07c:	e8 d2 c1 01 00       	call   c0028253 <__floatsidf>
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c088:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c08c:	52                   	push   edx
c000c08d:	50                   	push   eax
c000c08e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c092:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c096:	e8 29 bb 01 00       	call   c0027bc4 <__subdf3>
c000c09b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c09f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0a3:	83 c4 20             	add    esp,0x20
c000c0a6:	6a 00                	push   0x0
c000c0a8:	6a 00                	push   0x0
c000c0aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b2:	e8 08 c4 01 00       	call   c00284bf <__ltdf2>
c000c0b7:	83 c4 10             	add    esp,0x10
c000c0ba:	85 c0                	test   eax,eax
c000c0bc:	79 20                	jns    c000c0de <sinc_multichan_vari_process+0x66e>
c000c0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ce:	e8 a0 b4 01 00       	call   c0027573 <__adddf3>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e1:	83 ec 10             	sub    esp,0x10
c000c0e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0e8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0fb:	e8 c4 ba 01 00       	call   c0027bc4 <__subdf3>
c000c100:	83 c4 18             	add    esp,0x18
c000c103:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c107:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c10b:	52                   	push   edx
c000c10c:	50                   	push   eax
c000c10d:	e8 5e c5 01 00       	call   c0028670 <lrint>
c000c112:	0f af e8             	imul   ebp,eax
c000c115:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c119:	83 c4 10             	add    esp,0x10
c000c11c:	01 e8                	add    eax,ebp
c000c11e:	99                   	cdq    
c000c11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c125:	e9 fd fb ff ff       	jmp    c000bd27 <sinc_multichan_vari_process+0x2b7>
c000c12a:	83 c4 4c             	add    esp,0x4c
c000c12d:	89 d0                	mov    eax,edx
c000c12f:	5b                   	pop    ebx
c000c130:	5e                   	pop    esi
c000c131:	5f                   	pop    edi
c000c132:	5d                   	pop    ebp
c000c133:	c3                   	ret    

c000c134 <sinc_hex_vari_process>:
c000c134:	55                   	push   ebp
c000c135:	ba 05 00 00 00       	mov    edx,0x5
c000c13a:	57                   	push   edi
c000c13b:	56                   	push   esi
c000c13c:	53                   	push   ebx
c000c13d:	83 ec 4c             	sub    esp,0x4c
c000c140:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c144:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c148:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c14b:	85 db                	test   ebx,ebx
c000c14d:	0f 84 9c 06 00 00    	je     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c153:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c156:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c159:	0f af c7             	imul   eax,edi
c000c15c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c15f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c162:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c169:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c170:	0f af c7             	imul   eax,edi
c000c173:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c176:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c179:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c17c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c180:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c184:	68 00 00 70 3f       	push   0x3f700000
c000c189:	6a 00                	push   0x0
c000c18b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c18f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c193:	e8 27 c3 01 00       	call   c00284bf <__ltdf2>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	ba 16 00 00 00       	mov    edx,0x16
c000c1a0:	85 c0                	test   eax,eax
c000c1a2:	0f 88 47 06 00 00    	js     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1a8:	68 00 00 70 40       	push   0x40700000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b7:	e8 e5 c2 01 00       	call   c00284a1 <__gtdf2>
c000c1bc:	83 c4 10             	add    esp,0x10
c000c1bf:	ba 16 00 00 00       	mov    edx,0x16
c000c1c4:	85 c0                	test   eax,eax
c000c1c6:	0f 8f 23 06 00 00    	jg     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1cc:	83 ec 0c             	sub    esp,0xc
c000c1cf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1d2:	e8 7c c0 01 00       	call   c0028253 <__floatsidf>
c000c1d7:	83 c4 10             	add    esp,0x10
c000c1da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1e2:	68 00 00 00 40       	push   0x40000000
c000c1e7:	6a 00                	push   0x0
c000c1e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f1:	e8 7d b3 01 00       	call   c0027573 <__adddf3>
c000c1f6:	59                   	pop    ecx
c000c1f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1fb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c202:	e8 4c c0 01 00       	call   c0028253 <__floatsidf>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c20e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c212:	52                   	push   edx
c000c213:	50                   	push   eax
c000c214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c21c:	e8 b3 bc 01 00       	call   c0027ed4 <__divdf3>
c000c221:	83 c4 10             	add    esp,0x10
c000c224:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c22c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c22f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c232:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c236:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	e8 52 c2 01 00       	call   c00284a1 <__gtdf2>
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	85 c0                	test   eax,eax
c000c254:	7e 2d                	jle    c000c283 <sinc_hex_vari_process+0x14f>
c000c256:	68 00 00 f0 3f       	push   0x3ff00000
c000c25b:	6a 00                	push   0x0
c000c25d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c265:	e8 55 c2 01 00       	call   c00284bf <__ltdf2>
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	85 c0                	test   eax,eax
c000c26f:	79 4d                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c275:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c27d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c281:	eb 1b                	jmp    c000c29e <sinc_hex_vari_process+0x16a>
c000c283:	68 00 00 f0 3f       	push   0x3ff00000
c000c288:	6a 00                	push   0x0
c000c28a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c292:	e8 28 c2 01 00       	call   c00284bf <__ltdf2>
c000c297:	83 c4 10             	add    esp,0x10
c000c29a:	85 c0                	test   eax,eax
c000c29c:	79 20                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c29e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ae:	e8 21 bc 01 00       	call   c0027ed4 <__divdf3>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2be:	50                   	push   eax
c000c2bf:	50                   	push   eax
c000c2c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c8:	e8 a3 c3 01 00       	call   c0028670 <lrint>
c000c2cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d0:	40                   	inc    eax
c000c2d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d5:	0f af c7             	imul   eax,edi
c000c2d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2e3:	58                   	pop    eax
c000c2e4:	5a                   	pop    edx
c000c2e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ed:	e8 7e c3 01 00       	call   c0028670 <lrint>
c000c2f2:	83 ec 0c             	sub    esp,0xc
c000c2f5:	50                   	push   eax
c000c2f6:	e8 58 bf 01 00       	call   c0028253 <__floatsidf>
c000c2fb:	83 c4 10             	add    esp,0x10
c000c2fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c302:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c306:	52                   	push   edx
c000c307:	50                   	push   eax
c000c308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c30c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c310:	e8 af b8 01 00       	call   c0027bc4 <__subdf3>
c000c315:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c31d:	83 c4 20             	add    esp,0x20
c000c320:	6a 00                	push   0x0
c000c322:	6a 00                	push   0x0
c000c324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c32c:	e8 8e c1 01 00       	call   c00284bf <__ltdf2>
c000c331:	83 c4 10             	add    esp,0x10
c000c334:	85 c0                	test   eax,eax
c000c336:	79 1f                	jns    c000c357 <sinc_hex_vari_process+0x223>
c000c338:	68 00 00 f0 3f       	push   0x3ff00000
c000c33d:	6a 00                	push   0x0
c000c33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c343:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c347:	e8 27 b2 01 00       	call   c0027573 <__adddf3>
c000c34c:	83 c4 10             	add    esp,0x10
c000c34f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c357:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c35a:	83 ec 10             	sub    esp,0x10
c000c35d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c361:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c370:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c374:	e8 4b b8 01 00       	call   c0027bc4 <__subdf3>
c000c379:	83 c4 18             	add    esp,0x18
c000c37c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c380:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c384:	52                   	push   edx
c000c385:	50                   	push   eax
c000c386:	e8 e5 c2 01 00       	call   c0028670 <lrint>
c000c38b:	0f af f8             	imul   edi,eax
c000c38e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c392:	01 f8                	add    eax,edi
c000c394:	99                   	cdq    
c000c395:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c398:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c39b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c39f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a3:	68 00 00 f0 3f       	push   0x3ff00000
c000c3a8:	6a 00                	push   0x0
c000c3aa:	e8 25 bb 01 00       	call   c0027ed4 <__divdf3>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3bf:	68 23 42 92 0c       	push   0xc924223
c000c3c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3cc:	e8 a2 b1 01 00       	call   c0027573 <__adddf3>
c000c3d1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3d5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3d9:	83 c4 20             	add    esp,0x20
c000c3dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3e4:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3ef:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3f2:	7d 50                	jge    c000c444 <sinc_hex_vari_process+0x310>
c000c3f4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fa:	01 c8                	add    eax,ecx
c000c3fc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3ff:	99                   	cdq    
c000c400:	f7 f9                	idiv   ecx
c000c402:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c406:	7d 0c                	jge    c000c414 <sinc_hex_vari_process+0x2e0>
c000c408:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c40b:	85 ff                	test   edi,edi
c000c40d:	79 6c                	jns    c000c47b <sinc_hex_vari_process+0x347>
c000c40f:	e9 e7 00 00 00       	jmp    c000c4fb <sinc_hex_vari_process+0x3c7>
c000c414:	50                   	push   eax
c000c415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c419:	56                   	push   esi
c000c41a:	53                   	push   ebx
c000c41b:	e8 d6 f4 ff ff       	call   c000b8f6 <prepare_data>
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	89 c2                	mov    edx,eax
c000c425:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c428:	85 c0                	test   eax,eax
c000c42a:	0f 85 bf 03 00 00    	jne    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c430:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c433:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c436:	01 c8                	add    eax,ecx
c000c438:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c43b:	99                   	cdq    
c000c43c:	f7 f9                	idiv   ecx
c000c43e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c442:	7c c4                	jl     c000c408 <sinc_hex_vari_process+0x2d4>
c000c444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c44c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c44f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c456:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c45a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c45d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c460:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c463:	99                   	cdq    
c000c464:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c467:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c46a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c46d:	99                   	cdq    
c000c46e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c471:	31 d2                	xor    edx,edx
c000c473:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c476:	e9 74 03 00 00       	jmp    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c47b:	83 ec 0c             	sub    esp,0xc
c000c47e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c481:	e8 cd bd 01 00       	call   c0028253 <__floatsidf>
c000c486:	83 c4 10             	add    esp,0x10
c000c489:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c491:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c495:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a1:	e8 cd b0 01 00       	call   c0027573 <__adddf3>
c000c4a6:	83 c4 10             	add    esp,0x10
c000c4a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c1:	e8 ad b0 01 00       	call   c0027573 <__adddf3>
c000c4c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d1:	e8 7d bd 01 00       	call   c0028253 <__floatsidf>
c000c4d6:	83 c4 10             	add    esp,0x10
c000c4d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e1:	52                   	push   edx
c000c4e2:	50                   	push   eax
c000c4e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4eb:	e8 cd bf 01 00       	call   c00284bd <__gedf2>
c000c4f0:	83 c4 10             	add    esp,0x10
c000c4f3:	85 c0                	test   eax,eax
c000c4f5:	0f 89 49 ff ff ff    	jns    c000c444 <sinc_hex_vari_process+0x310>
c000c4fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4ff:	0f 8e ef 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c505:	83 ec 10             	sub    esp,0x10
c000c508:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c50b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c50e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c511:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c514:	e8 ab b6 01 00       	call   c0027bc4 <__subdf3>
c000c519:	83 c4 18             	add    esp,0x18
c000c51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c520:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c524:	52                   	push   edx
c000c525:	50                   	push   eax
c000c526:	e8 25 c1 01 00       	call   c0028650 <fabs>
c000c52b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c52f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c533:	83 c4 10             	add    esp,0x10
c000c536:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c53b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c540:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c548:	e8 54 bf 01 00       	call   c00284a1 <__gtdf2>
c000c54d:	83 c4 10             	add    esp,0x10
c000c550:	85 c0                	test   eax,eax
c000c552:	0f 8e 9c 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c558:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c55b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c55e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c562:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c566:	52                   	push   edx
c000c567:	50                   	push   eax
c000c568:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c56b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c56e:	e8 51 b6 01 00       	call   c0027bc4 <__subdf3>
c000c573:	59                   	pop    ecx
c000c574:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c578:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c57c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c57f:	e8 cf bc 01 00       	call   c0028253 <__floatsidf>
c000c584:	83 c4 10             	add    esp,0x10
c000c587:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c58b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c58f:	52                   	push   edx
c000c590:	50                   	push   eax
c000c591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c595:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c599:	e8 52 b6 01 00       	call   c0027bf0 <__muldf3>
c000c59e:	5f                   	pop    edi
c000c59f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5a3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5a7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5aa:	e8 a4 bc 01 00       	call   c0028253 <__floatsidf>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ba:	52                   	push   edx
c000c5bb:	50                   	push   eax
c000c5bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c4:	e8 0b b9 01 00       	call   c0027ed4 <__divdf3>
c000c5c9:	83 c4 10             	add    esp,0x10
c000c5cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e4:	e8 8a af 01 00       	call   c0027573 <__adddf3>
c000c5e9:	83 c4 10             	add    esp,0x10
c000c5ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5fa:	e8 54 bc 01 00       	call   c0028253 <__floatsidf>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	e8 a0 be 01 00       	call   c00284bf <__ltdf2>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	85 c0                	test   eax,eax
c000c624:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c628:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c62c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c630:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c634:	78 10                	js     c000c646 <sinc_hex_vari_process+0x512>
c000c636:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c63a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c63e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c642:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c652:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c656:	e8 95 b5 01 00       	call   c0027bf0 <__muldf3>
c000c65b:	59                   	pop    ecx
c000c65c:	5f                   	pop    edi
c000c65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c661:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c665:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c66d:	e8 5d f2 ff ff       	call   c000b8cf <double_to_fp>
c000c672:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c676:	89 c7                	mov    edi,eax
c000c678:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c680:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c684:	e8 67 b5 01 00       	call   c0027bf0 <__muldf3>
c000c689:	83 c4 18             	add    esp,0x18
c000c68c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c690:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c694:	52                   	push   edx
c000c695:	50                   	push   eax
c000c696:	e8 34 f2 ff ff       	call   c000b8cf <double_to_fp>
c000c69b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c69e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6a2:	83 c4 0c             	add    esp,0xc
c000c6a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6a8:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6ab:	50                   	push   eax
c000c6ac:	50                   	push   eax
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 9e bb 01 00       	call   c0028253 <__floatsidf>
c000c6b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6b9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	e8 02 b8 01 00       	call   c0027ed4 <__divdf3>
c000c6d2:	83 c4 18             	add    esp,0x18
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	89 fa                	mov    edx,edi
c000c6e0:	50                   	push   eax
c000c6e1:	89 d8                	mov    eax,ebx
c000c6e3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6e7:	e8 50 de ff ff       	call   c000a53c <calc_output_hex>
c000c6ec:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c700:	e8 cf b7 01 00       	call   c0027ed4 <__divdf3>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c70c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c718:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c720:	e8 4e ae 01 00       	call   c0027573 <__adddf3>
c000c725:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c729:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c72d:	83 c4 18             	add    esp,0x18
c000c730:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c734:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c738:	e8 33 bf 01 00       	call   c0028670 <lrint>
c000c73d:	83 ec 0c             	sub    esp,0xc
c000c740:	50                   	push   eax
c000c741:	e8 0d bb 01 00       	call   c0028253 <__floatsidf>
c000c746:	83 c4 10             	add    esp,0x10
c000c749:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c74d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c751:	52                   	push   edx
c000c752:	50                   	push   eax
c000c753:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c757:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75b:	e8 64 b4 01 00       	call   c0027bc4 <__subdf3>
c000c760:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c764:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c768:	83 c4 20             	add    esp,0x20
c000c76b:	6a 00                	push   0x0
c000c76d:	6a 00                	push   0x0
c000c76f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c777:	e8 43 bd 01 00       	call   c00284bf <__ltdf2>
c000c77c:	83 c4 10             	add    esp,0x10
c000c77f:	85 c0                	test   eax,eax
c000c781:	79 20                	jns    c000c7a3 <sinc_hex_vari_process+0x66f>
c000c783:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c787:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c793:	e8 db ad 01 00       	call   c0027573 <__adddf3>
c000c798:	83 c4 10             	add    esp,0x10
c000c79b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c79f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7a3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7a6:	83 ec 10             	sub    esp,0x10
c000c7a9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c0:	e8 ff b3 01 00       	call   c0027bc4 <__subdf3>
c000c7c5:	83 c4 18             	add    esp,0x18
c000c7c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d0:	52                   	push   edx
c000c7d1:	50                   	push   eax
c000c7d2:	e8 99 be 01 00       	call   c0028670 <lrint>
c000c7d7:	0f af f8             	imul   edi,eax
c000c7da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7de:	83 c4 10             	add    esp,0x10
c000c7e1:	01 f8                	add    eax,edi
c000c7e3:	99                   	cdq    
c000c7e4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7e7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7ea:	e9 fd fb ff ff       	jmp    c000c3ec <sinc_hex_vari_process+0x2b8>
c000c7ef:	83 c4 4c             	add    esp,0x4c
c000c7f2:	89 d0                	mov    eax,edx
c000c7f4:	5b                   	pop    ebx
c000c7f5:	5e                   	pop    esi
c000c7f6:	5f                   	pop    edi
c000c7f7:	5d                   	pop    ebp
c000c7f8:	c3                   	ret    

c000c7f9 <sinc_quad_vari_process>:
c000c7f9:	55                   	push   ebp
c000c7fa:	ba 05 00 00 00       	mov    edx,0x5
c000c7ff:	57                   	push   edi
c000c800:	56                   	push   esi
c000c801:	53                   	push   ebx
c000c802:	83 ec 4c             	sub    esp,0x4c
c000c805:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c809:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c80d:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c810:	85 db                	test   ebx,ebx
c000c812:	0f 84 9c 06 00 00    	je     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c818:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c81b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c81e:	0f af c7             	imul   eax,edi
c000c821:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c824:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c827:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c82e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c835:	0f af c7             	imul   eax,edi
c000c838:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c83b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c83e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c841:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c845:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c849:	68 00 00 70 3f       	push   0x3f700000
c000c84e:	6a 00                	push   0x0
c000c850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c858:	e8 62 bc 01 00       	call   c00284bf <__ltdf2>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	ba 16 00 00 00       	mov    edx,0x16
c000c865:	85 c0                	test   eax,eax
c000c867:	0f 88 47 06 00 00    	js     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c86d:	68 00 00 70 40       	push   0x40700000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c87c:	e8 20 bc 01 00       	call   c00284a1 <__gtdf2>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	ba 16 00 00 00       	mov    edx,0x16
c000c889:	85 c0                	test   eax,eax
c000c88b:	0f 8f 23 06 00 00    	jg     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c891:	83 ec 0c             	sub    esp,0xc
c000c894:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c897:	e8 b7 b9 01 00       	call   c0028253 <__floatsidf>
c000c89c:	83 c4 10             	add    esp,0x10
c000c89f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8a7:	68 00 00 00 40       	push   0x40000000
c000c8ac:	6a 00                	push   0x0
c000c8ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b6:	e8 b8 ac 01 00       	call   c0027573 <__adddf3>
c000c8bb:	59                   	pop    ecx
c000c8bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8c4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8c7:	e8 87 b9 01 00       	call   c0028253 <__floatsidf>
c000c8cc:	83 c4 10             	add    esp,0x10
c000c8cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d7:	52                   	push   edx
c000c8d8:	50                   	push   eax
c000c8d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e1:	e8 ee b5 01 00       	call   c0027ed4 <__divdf3>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8f4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	e8 8d bb 01 00       	call   c00284a1 <__gtdf2>
c000c914:	83 c4 10             	add    esp,0x10
c000c917:	85 c0                	test   eax,eax
c000c919:	7e 2d                	jle    c000c948 <sinc_quad_vari_process+0x14f>
c000c91b:	68 00 00 f0 3f       	push   0x3ff00000
c000c920:	6a 00                	push   0x0
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92a:	e8 90 bb 01 00       	call   c00284bf <__ltdf2>
c000c92f:	83 c4 10             	add    esp,0x10
c000c932:	85 c0                	test   eax,eax
c000c934:	79 4d                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c93a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c93e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c942:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c946:	eb 1b                	jmp    c000c963 <sinc_quad_vari_process+0x16a>
c000c948:	68 00 00 f0 3f       	push   0x3ff00000
c000c94d:	6a 00                	push   0x0
c000c94f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c953:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c957:	e8 63 bb 01 00       	call   c00284bf <__ltdf2>
c000c95c:	83 c4 10             	add    esp,0x10
c000c95f:	85 c0                	test   eax,eax
c000c961:	79 20                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c963:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c967:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c973:	e8 5c b5 01 00       	call   c0027ed4 <__divdf3>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c97f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c983:	50                   	push   eax
c000c984:	50                   	push   eax
c000c985:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c989:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98d:	e8 de bc 01 00       	call   c0028670 <lrint>
c000c992:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c995:	40                   	inc    eax
c000c996:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c99a:	0f af c7             	imul   eax,edi
c000c99d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a8:	58                   	pop    eax
c000c9a9:	5a                   	pop    edx
c000c9aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b2:	e8 b9 bc 01 00       	call   c0028670 <lrint>
c000c9b7:	83 ec 0c             	sub    esp,0xc
c000c9ba:	50                   	push   eax
c000c9bb:	e8 93 b8 01 00       	call   c0028253 <__floatsidf>
c000c9c0:	83 c4 10             	add    esp,0x10
c000c9c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9cb:	52                   	push   edx
c000c9cc:	50                   	push   eax
c000c9cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d5:	e8 ea b1 01 00       	call   c0027bc4 <__subdf3>
c000c9da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9e2:	83 c4 20             	add    esp,0x20
c000c9e5:	6a 00                	push   0x0
c000c9e7:	6a 00                	push   0x0
c000c9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f1:	e8 c9 ba 01 00       	call   c00284bf <__ltdf2>
c000c9f6:	83 c4 10             	add    esp,0x10
c000c9f9:	85 c0                	test   eax,eax
c000c9fb:	79 1f                	jns    c000ca1c <sinc_quad_vari_process+0x223>
c000c9fd:	68 00 00 f0 3f       	push   0x3ff00000
c000ca02:	6a 00                	push   0x0
c000ca04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca0c:	e8 62 ab 01 00       	call   c0027573 <__adddf3>
c000ca11:	83 c4 10             	add    esp,0x10
c000ca14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca1c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca1f:	83 ec 10             	sub    esp,0x10
c000ca22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca26:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca39:	e8 86 b1 01 00       	call   c0027bc4 <__subdf3>
c000ca3e:	83 c4 18             	add    esp,0x18
c000ca41:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca49:	52                   	push   edx
c000ca4a:	50                   	push   eax
c000ca4b:	e8 20 bc 01 00       	call   c0028670 <lrint>
c000ca50:	0f af f8             	imul   edi,eax
c000ca53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca57:	01 f8                	add    eax,edi
c000ca59:	99                   	cdq    
c000ca5a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca5d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca68:	68 00 00 f0 3f       	push   0x3ff00000
c000ca6d:	6a 00                	push   0x0
c000ca6f:	e8 60 b4 01 00       	call   c0027ed4 <__divdf3>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca84:	68 23 42 92 0c       	push   0xc924223
c000ca89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca91:	e8 dd aa 01 00       	call   c0027573 <__adddf3>
c000ca96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca9e:	83 c4 20             	add    esp,0x20
c000caa1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000caa9:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cab4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cab7:	7d 50                	jge    c000cb09 <sinc_quad_vari_process+0x310>
c000cab9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cabf:	01 c8                	add    eax,ecx
c000cac1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac4:	99                   	cdq    
c000cac5:	f7 f9                	idiv   ecx
c000cac7:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacb:	7d 0c                	jge    c000cad9 <sinc_quad_vari_process+0x2e0>
c000cacd:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad0:	85 ff                	test   edi,edi
c000cad2:	79 6c                	jns    c000cb40 <sinc_quad_vari_process+0x347>
c000cad4:	e9 e7 00 00 00       	jmp    c000cbc0 <sinc_quad_vari_process+0x3c7>
c000cad9:	50                   	push   eax
c000cada:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cade:	56                   	push   esi
c000cadf:	53                   	push   ebx
c000cae0:	e8 11 ee ff ff       	call   c000b8f6 <prepare_data>
c000cae5:	83 c4 10             	add    esp,0x10
c000cae8:	89 c2                	mov    edx,eax
c000caea:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caed:	85 c0                	test   eax,eax
c000caef:	0f 85 bf 03 00 00    	jne    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000caf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000caf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cafb:	01 c8                	add    eax,ecx
c000cafd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb00:	99                   	cdq    
c000cb01:	f7 f9                	idiv   ecx
c000cb03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb07:	7c c4                	jl     c000cacd <sinc_quad_vari_process+0x2d4>
c000cb09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb11:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb14:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb1f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb22:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb25:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb28:	99                   	cdq    
c000cb29:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb2c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb2f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb32:	99                   	cdq    
c000cb33:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb36:	31 d2                	xor    edx,edx
c000cb38:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb3b:	e9 74 03 00 00       	jmp    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb46:	e8 08 b7 01 00       	call   c0028253 <__floatsidf>
c000cb4b:	83 c4 10             	add    esp,0x10
c000cb4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb52:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb66:	e8 08 aa 01 00       	call   c0027573 <__adddf3>
c000cb6b:	83 c4 10             	add    esp,0x10
c000cb6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb72:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb86:	e8 e8 a9 01 00       	call   c0027573 <__adddf3>
c000cb8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb96:	e8 b8 b6 01 00       	call   c0028253 <__floatsidf>
c000cb9b:	83 c4 10             	add    esp,0x10
c000cb9e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cba6:	52                   	push   edx
c000cba7:	50                   	push   eax
c000cba8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb0:	e8 08 b9 01 00       	call   c00284bd <__gedf2>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	85 c0                	test   eax,eax
c000cbba:	0f 89 49 ff ff ff    	jns    c000cb09 <sinc_quad_vari_process+0x310>
c000cbc0:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbc4:	0f 8e ef 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cbca:	83 ec 10             	sub    esp,0x10
c000cbcd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbd3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbd6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbd9:	e8 e6 af 01 00       	call   c0027bc4 <__subdf3>
c000cbde:	83 c4 18             	add    esp,0x18
c000cbe1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbe5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbe9:	52                   	push   edx
c000cbea:	50                   	push   eax
c000cbeb:	e8 60 ba 01 00       	call   c0028650 <fabs>
c000cbf0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbf4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbf8:	83 c4 10             	add    esp,0x10
c000cbfb:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc00:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc0d:	e8 8f b8 01 00       	call   c00284a1 <__gtdf2>
c000cc12:	83 c4 10             	add    esp,0x10
c000cc15:	85 c0                	test   eax,eax
c000cc17:	0f 8e 9c 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cc1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc20:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc27:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc2b:	52                   	push   edx
c000cc2c:	50                   	push   eax
c000cc2d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc30:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc33:	e8 8c af 01 00       	call   c0027bc4 <__subdf3>
c000cc38:	59                   	pop    ecx
c000cc39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc3d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc41:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc44:	e8 0a b6 01 00       	call   c0028253 <__floatsidf>
c000cc49:	83 c4 10             	add    esp,0x10
c000cc4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc54:	52                   	push   edx
c000cc55:	50                   	push   eax
c000cc56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5e:	e8 8d af 01 00       	call   c0027bf0 <__muldf3>
c000cc63:	5f                   	pop    edi
c000cc64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc6c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc6f:	e8 df b5 01 00       	call   c0028253 <__floatsidf>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7f:	52                   	push   edx
c000cc80:	50                   	push   eax
c000cc81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc89:	e8 46 b2 01 00       	call   c0027ed4 <__divdf3>
c000cc8e:	83 c4 10             	add    esp,0x10
c000cc91:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc95:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca9:	e8 c5 a8 01 00       	call   c0027573 <__adddf3>
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccb5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccb9:	83 ec 0c             	sub    esp,0xc
c000ccbc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccbf:	e8 8f b5 01 00       	call   c0028253 <__floatsidf>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cccb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	e8 db b7 01 00       	call   c00284bf <__ltdf2>
c000cce4:	83 c4 10             	add    esp,0x10
c000cce7:	85 c0                	test   eax,eax
c000cce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cced:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccf5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccf9:	78 10                	js     c000cd0b <sinc_quad_vari_process+0x512>
c000ccfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1b:	e8 d0 ae 01 00       	call   c0027bf0 <__muldf3>
c000cd20:	59                   	pop    ecx
c000cd21:	5f                   	pop    edi
c000cd22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd32:	e8 98 eb ff ff       	call   c000b8cf <double_to_fp>
c000cd37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3b:	89 c7                	mov    edi,eax
c000cd3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd49:	e8 a2 ae 01 00       	call   c0027bf0 <__muldf3>
c000cd4e:	83 c4 18             	add    esp,0x18
c000cd51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd59:	52                   	push   edx
c000cd5a:	50                   	push   eax
c000cd5b:	e8 6f eb ff ff       	call   c000b8cf <double_to_fp>
c000cd60:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd63:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd67:	83 c4 0c             	add    esp,0xc
c000cd6a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd6d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd70:	50                   	push   eax
c000cd71:	50                   	push   eax
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 d9 b4 01 00       	call   c0028253 <__floatsidf>
c000cd7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	e8 3d b1 01 00       	call   c0027ed4 <__divdf3>
c000cd97:	83 c4 18             	add    esp,0x18
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	89 fa                	mov    edx,edi
c000cda5:	50                   	push   eax
c000cda6:	89 d8                	mov    eax,ebx
c000cda8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdac:	e8 a5 d1 ff ff       	call   c0009f56 <calc_output_quad>
c000cdb1:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc5:	e8 0a b1 01 00       	call   c0027ed4 <__divdf3>
c000cdca:	83 c4 10             	add    esp,0x10
c000cdcd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cddd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde5:	e8 89 a7 01 00       	call   c0027573 <__adddf3>
c000cdea:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdf2:	83 c4 18             	add    esp,0x18
c000cdf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdfd:	e8 6e b8 01 00       	call   c0028670 <lrint>
c000ce02:	83 ec 0c             	sub    esp,0xc
c000ce05:	50                   	push   eax
c000ce06:	e8 48 b4 01 00       	call   c0028253 <__floatsidf>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce12:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce16:	52                   	push   edx
c000ce17:	50                   	push   eax
c000ce18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce20:	e8 9f ad 01 00       	call   c0027bc4 <__subdf3>
c000ce25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce2d:	83 c4 20             	add    esp,0x20
c000ce30:	6a 00                	push   0x0
c000ce32:	6a 00                	push   0x0
c000ce34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce3c:	e8 7e b6 01 00       	call   c00284bf <__ltdf2>
c000ce41:	83 c4 10             	add    esp,0x10
c000ce44:	85 c0                	test   eax,eax
c000ce46:	79 20                	jns    c000ce68 <sinc_quad_vari_process+0x66f>
c000ce48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce58:	e8 16 a7 01 00       	call   c0027573 <__adddf3>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce68:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce6b:	83 ec 10             	sub    esp,0x10
c000ce6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce72:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce85:	e8 3a ad 01 00       	call   c0027bc4 <__subdf3>
c000ce8a:	83 c4 18             	add    esp,0x18
c000ce8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce91:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce95:	52                   	push   edx
c000ce96:	50                   	push   eax
c000ce97:	e8 d4 b7 01 00       	call   c0028670 <lrint>
c000ce9c:	0f af f8             	imul   edi,eax
c000ce9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	01 f8                	add    eax,edi
c000cea8:	99                   	cdq    
c000cea9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceac:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceaf:	e9 fd fb ff ff       	jmp    c000cab1 <sinc_quad_vari_process+0x2b8>
c000ceb4:	83 c4 4c             	add    esp,0x4c
c000ceb7:	89 d0                	mov    eax,edx
c000ceb9:	5b                   	pop    ebx
c000ceba:	5e                   	pop    esi
c000cebb:	5f                   	pop    edi
c000cebc:	5d                   	pop    ebp
c000cebd:	c3                   	ret    

c000cebe <sinc_stereo_vari_process>:
c000cebe:	55                   	push   ebp
c000cebf:	ba 05 00 00 00       	mov    edx,0x5
c000cec4:	57                   	push   edi
c000cec5:	56                   	push   esi
c000cec6:	53                   	push   ebx
c000cec7:	83 ec 4c             	sub    esp,0x4c
c000ceca:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cece:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ced2:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ced5:	85 db                	test   ebx,ebx
c000ced7:	0f 84 9c 06 00 00    	je     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cedd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cee3:	0f af c7             	imul   eax,edi
c000cee6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cee9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cef3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cefa:	0f af c7             	imul   eax,edi
c000cefd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf00:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf06:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf0e:	68 00 00 70 3f       	push   0x3f700000
c000cf13:	6a 00                	push   0x0
c000cf15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1d:	e8 9d b5 01 00       	call   c00284bf <__ltdf2>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	ba 16 00 00 00       	mov    edx,0x16
c000cf2a:	85 c0                	test   eax,eax
c000cf2c:	0f 88 47 06 00 00    	js     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf32:	68 00 00 70 40       	push   0x40700000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf41:	e8 5b b5 01 00       	call   c00284a1 <__gtdf2>
c000cf46:	83 c4 10             	add    esp,0x10
c000cf49:	ba 16 00 00 00       	mov    edx,0x16
c000cf4e:	85 c0                	test   eax,eax
c000cf50:	0f 8f 23 06 00 00    	jg     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf56:	83 ec 0c             	sub    esp,0xc
c000cf59:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf5c:	e8 f2 b2 01 00       	call   c0028253 <__floatsidf>
c000cf61:	83 c4 10             	add    esp,0x10
c000cf64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf6c:	68 00 00 00 40       	push   0x40000000
c000cf71:	6a 00                	push   0x0
c000cf73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7b:	e8 f3 a5 01 00       	call   c0027573 <__adddf3>
c000cf80:	59                   	pop    ecx
c000cf81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf89:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf8c:	e8 c2 b2 01 00       	call   c0028253 <__floatsidf>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf9c:	52                   	push   edx
c000cf9d:	50                   	push   eax
c000cf9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa6:	e8 29 af 01 00       	call   c0027ed4 <__divdf3>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfb6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfb9:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	e8 c8 b4 01 00       	call   c00284a1 <__gtdf2>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	85 c0                	test   eax,eax
c000cfde:	7e 2d                	jle    c000d00d <sinc_stereo_vari_process+0x14f>
c000cfe0:	68 00 00 f0 3f       	push   0x3ff00000
c000cfe5:	6a 00                	push   0x0
c000cfe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfef:	e8 cb b4 01 00       	call   c00284bf <__ltdf2>
c000cff4:	83 c4 10             	add    esp,0x10
c000cff7:	85 c0                	test   eax,eax
c000cff9:	79 4d                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000cffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d003:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d007:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d00b:	eb 1b                	jmp    c000d028 <sinc_stereo_vari_process+0x16a>
c000d00d:	68 00 00 f0 3f       	push   0x3ff00000
c000d012:	6a 00                	push   0x0
c000d014:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d018:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d01c:	e8 9e b4 01 00       	call   c00284bf <__ltdf2>
c000d021:	83 c4 10             	add    esp,0x10
c000d024:	85 c0                	test   eax,eax
c000d026:	79 20                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000d028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d02c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d030:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d034:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d038:	e8 97 ae 01 00       	call   c0027ed4 <__divdf3>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d044:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d048:	50                   	push   eax
c000d049:	50                   	push   eax
c000d04a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d04e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d052:	e8 19 b6 01 00       	call   c0028670 <lrint>
c000d057:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d05a:	40                   	inc    eax
c000d05b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05f:	0f af c7             	imul   eax,edi
c000d062:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d069:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d06d:	58                   	pop    eax
c000d06e:	5a                   	pop    edx
c000d06f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d073:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d077:	e8 f4 b5 01 00       	call   c0028670 <lrint>
c000d07c:	83 ec 0c             	sub    esp,0xc
c000d07f:	50                   	push   eax
c000d080:	e8 ce b1 01 00       	call   c0028253 <__floatsidf>
c000d085:	83 c4 10             	add    esp,0x10
c000d088:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d08c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d090:	52                   	push   edx
c000d091:	50                   	push   eax
c000d092:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d096:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09a:	e8 25 ab 01 00       	call   c0027bc4 <__subdf3>
c000d09f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0a7:	83 c4 20             	add    esp,0x20
c000d0aa:	6a 00                	push   0x0
c000d0ac:	6a 00                	push   0x0
c000d0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b6:	e8 04 b4 01 00       	call   c00284bf <__ltdf2>
c000d0bb:	83 c4 10             	add    esp,0x10
c000d0be:	85 c0                	test   eax,eax
c000d0c0:	79 1f                	jns    c000d0e1 <sinc_stereo_vari_process+0x223>
c000d0c2:	68 00 00 f0 3f       	push   0x3ff00000
c000d0c7:	6a 00                	push   0x0
c000d0c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d1:	e8 9d a4 01 00       	call   c0027573 <__adddf3>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0e4:	83 ec 10             	sub    esp,0x10
c000d0e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fe:	e8 c1 aa 01 00       	call   c0027bc4 <__subdf3>
c000d103:	83 c4 18             	add    esp,0x18
c000d106:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10e:	52                   	push   edx
c000d10f:	50                   	push   eax
c000d110:	e8 5b b5 01 00       	call   c0028670 <lrint>
c000d115:	0f af f8             	imul   edi,eax
c000d118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d11c:	01 f8                	add    eax,edi
c000d11e:	99                   	cdq    
c000d11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d125:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d129:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d12d:	68 00 00 f0 3f       	push   0x3ff00000
c000d132:	6a 00                	push   0x0
c000d134:	e8 9b ad 01 00       	call   c0027ed4 <__divdf3>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d149:	68 23 42 92 0c       	push   0xc924223
c000d14e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d152:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d156:	e8 18 a4 01 00       	call   c0027573 <__adddf3>
c000d15b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d15f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d163:	83 c4 20             	add    esp,0x20
c000d166:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d16e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d176:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d179:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d17c:	7d 50                	jge    c000d1ce <sinc_stereo_vari_process+0x310>
c000d17e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d181:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d184:	01 c8                	add    eax,ecx
c000d186:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d189:	99                   	cdq    
c000d18a:	f7 f9                	idiv   ecx
c000d18c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d190:	7d 0c                	jge    c000d19e <sinc_stereo_vari_process+0x2e0>
c000d192:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d195:	85 ff                	test   edi,edi
c000d197:	79 6c                	jns    c000d205 <sinc_stereo_vari_process+0x347>
c000d199:	e9 e7 00 00 00       	jmp    c000d285 <sinc_stereo_vari_process+0x3c7>
c000d19e:	50                   	push   eax
c000d19f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1a3:	56                   	push   esi
c000d1a4:	53                   	push   ebx
c000d1a5:	e8 4c e7 ff ff       	call   c000b8f6 <prepare_data>
c000d1aa:	83 c4 10             	add    esp,0x10
c000d1ad:	89 c2                	mov    edx,eax
c000d1af:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1b2:	85 c0                	test   eax,eax
c000d1b4:	0f 85 bf 03 00 00    	jne    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d1ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c0:	01 c8                	add    eax,ecx
c000d1c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1c5:	99                   	cdq    
c000d1c6:	f7 f9                	idiv   ecx
c000d1c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1cc:	7c c4                	jl     c000d192 <sinc_stereo_vari_process+0x2d4>
c000d1ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1d6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1d9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1ea:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1ed:	99                   	cdq    
c000d1ee:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1f7:	99                   	cdq    
c000d1f8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1fb:	31 d2                	xor    edx,edx
c000d1fd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d200:	e9 74 03 00 00       	jmp    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d205:	83 ec 0c             	sub    esp,0xc
c000d208:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d20b:	e8 43 b0 01 00       	call   c0028253 <__floatsidf>
c000d210:	83 c4 10             	add    esp,0x10
c000d213:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d217:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d21f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22b:	e8 43 a3 01 00       	call   c0027573 <__adddf3>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d237:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d23b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d243:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24b:	e8 23 a3 01 00       	call   c0027573 <__adddf3>
c000d250:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d253:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d257:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d25b:	e8 f3 af 01 00       	call   c0028253 <__floatsidf>
c000d260:	83 c4 10             	add    esp,0x10
c000d263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d26b:	52                   	push   edx
c000d26c:	50                   	push   eax
c000d26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d275:	e8 43 b2 01 00       	call   c00284bd <__gedf2>
c000d27a:	83 c4 10             	add    esp,0x10
c000d27d:	85 c0                	test   eax,eax
c000d27f:	0f 89 49 ff ff ff    	jns    c000d1ce <sinc_stereo_vari_process+0x310>
c000d285:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d289:	0f 8e ef 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d28f:	83 ec 10             	sub    esp,0x10
c000d292:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d295:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d298:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d29b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d29e:	e8 21 a9 01 00       	call   c0027bc4 <__subdf3>
c000d2a3:	83 c4 18             	add    esp,0x18
c000d2a6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2ae:	52                   	push   edx
c000d2af:	50                   	push   eax
c000d2b0:	e8 9b b3 01 00       	call   c0028650 <fabs>
c000d2b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2c5:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d2:	e8 ca b1 01 00       	call   c00284a1 <__gtdf2>
c000d2d7:	83 c4 10             	add    esp,0x10
c000d2da:	85 c0                	test   eax,eax
c000d2dc:	0f 8e 9c 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d2e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2e5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f0:	52                   	push   edx
c000d2f1:	50                   	push   eax
c000d2f2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2f5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2f8:	e8 c7 a8 01 00       	call   c0027bc4 <__subdf3>
c000d2fd:	59                   	pop    ecx
c000d2fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d302:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d306:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d309:	e8 45 af 01 00       	call   c0028253 <__floatsidf>
c000d30e:	83 c4 10             	add    esp,0x10
c000d311:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d315:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d319:	52                   	push   edx
c000d31a:	50                   	push   eax
c000d31b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d31f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d323:	e8 c8 a8 01 00       	call   c0027bf0 <__muldf3>
c000d328:	5f                   	pop    edi
c000d329:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d32d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d331:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d334:	e8 1a af 01 00       	call   c0028253 <__floatsidf>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d340:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d344:	52                   	push   edx
c000d345:	50                   	push   eax
c000d346:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34e:	e8 81 ab 01 00       	call   c0027ed4 <__divdf3>
c000d353:	83 c4 10             	add    esp,0x10
c000d356:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d35a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d35e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d366:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36e:	e8 00 a2 01 00       	call   c0027573 <__adddf3>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d37e:	83 ec 0c             	sub    esp,0xc
c000d381:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d384:	e8 ca ae 01 00       	call   c0028253 <__floatsidf>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d390:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	e8 16 b1 01 00       	call   c00284bf <__ltdf2>
c000d3a9:	83 c4 10             	add    esp,0x10
c000d3ac:	85 c0                	test   eax,eax
c000d3ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3b6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3ba:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3be:	78 10                	js     c000d3d0 <sinc_stereo_vari_process+0x512>
c000d3c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e0:	e8 0b a8 01 00       	call   c0027bf0 <__muldf3>
c000d3e5:	59                   	pop    ecx
c000d3e6:	5f                   	pop    edi
c000d3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f7:	e8 d3 e4 ff ff       	call   c000b8cf <double_to_fp>
c000d3fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d400:	89 c7                	mov    edi,eax
c000d402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40e:	e8 dd a7 01 00       	call   c0027bf0 <__muldf3>
c000d413:	83 c4 18             	add    esp,0x18
c000d416:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d41a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d41e:	52                   	push   edx
c000d41f:	50                   	push   eax
c000d420:	e8 aa e4 ff ff       	call   c000b8cf <double_to_fp>
c000d425:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d428:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d42c:	83 c4 0c             	add    esp,0xc
c000d42f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d432:	8d 04 90             	lea    eax,[eax+edx*4]
c000d435:	50                   	push   eax
c000d436:	50                   	push   eax
c000d437:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43a:	e8 14 ae 01 00       	call   c0028253 <__floatsidf>
c000d43f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d443:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d447:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	e8 78 aa 01 00       	call   c0027ed4 <__divdf3>
c000d45c:	83 c4 18             	add    esp,0x18
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	89 fa                	mov    edx,edi
c000d46a:	50                   	push   eax
c000d46b:	89 d8                	mov    eax,ebx
c000d46d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d471:	e8 02 c7 ff ff       	call   c0009b78 <calc_output_stereo>
c000d476:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d47a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d47e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d482:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d486:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48a:	e8 45 aa 01 00       	call   c0027ed4 <__divdf3>
c000d48f:	83 c4 10             	add    esp,0x10
c000d492:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d496:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4aa:	e8 c4 a0 01 00       	call   c0027573 <__adddf3>
c000d4af:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4b7:	83 c4 18             	add    esp,0x18
c000d4ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c2:	e8 a9 b1 01 00       	call   c0028670 <lrint>
c000d4c7:	83 ec 0c             	sub    esp,0xc
c000d4ca:	50                   	push   eax
c000d4cb:	e8 83 ad 01 00       	call   c0028253 <__floatsidf>
c000d4d0:	83 c4 10             	add    esp,0x10
c000d4d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4db:	52                   	push   edx
c000d4dc:	50                   	push   eax
c000d4dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e5:	e8 da a6 01 00       	call   c0027bc4 <__subdf3>
c000d4ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4f2:	83 c4 20             	add    esp,0x20
c000d4f5:	6a 00                	push   0x0
c000d4f7:	6a 00                	push   0x0
c000d4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d501:	e8 b9 af 01 00       	call   c00284bf <__ltdf2>
c000d506:	83 c4 10             	add    esp,0x10
c000d509:	85 c0                	test   eax,eax
c000d50b:	79 20                	jns    c000d52d <sinc_stereo_vari_process+0x66f>
c000d50d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d51d:	e8 51 a0 01 00       	call   c0027573 <__adddf3>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d529:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d52d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d530:	83 ec 10             	sub    esp,0x10
c000d533:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d537:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d542:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d546:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54a:	e8 75 a6 01 00       	call   c0027bc4 <__subdf3>
c000d54f:	83 c4 18             	add    esp,0x18
c000d552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d556:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d55a:	52                   	push   edx
c000d55b:	50                   	push   eax
c000d55c:	e8 0f b1 01 00       	call   c0028670 <lrint>
c000d561:	0f af f8             	imul   edi,eax
c000d564:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d568:	83 c4 10             	add    esp,0x10
c000d56b:	01 f8                	add    eax,edi
c000d56d:	99                   	cdq    
c000d56e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d571:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d574:	e9 fd fb ff ff       	jmp    c000d176 <sinc_stereo_vari_process+0x2b8>
c000d579:	83 c4 4c             	add    esp,0x4c
c000d57c:	89 d0                	mov    eax,edx
c000d57e:	5b                   	pop    ebx
c000d57f:	5e                   	pop    esi
c000d580:	5f                   	pop    edi
c000d581:	5d                   	pop    ebp
c000d582:	c3                   	ret    

c000d583 <sinc_mono_vari_process>:
c000d583:	55                   	push   ebp
c000d584:	ba 05 00 00 00       	mov    edx,0x5
c000d589:	57                   	push   edi
c000d58a:	56                   	push   esi
c000d58b:	53                   	push   ebx
c000d58c:	83 ec 4c             	sub    esp,0x4c
c000d58f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d593:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d597:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d59a:	85 db                	test   ebx,ebx
c000d59c:	0f 84 c1 06 00 00    	je     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5a2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5a5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5a8:	0f af c7             	imul   eax,edi
c000d5ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5ae:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5b8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5bf:	0f af c7             	imul   eax,edi
c000d5c2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5c5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5c9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5d6:	68 00 00 70 3f       	push   0x3f700000
c000d5db:	6a 00                	push   0x0
c000d5dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e5:	e8 d5 ae 01 00       	call   c00284bf <__ltdf2>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	ba 16 00 00 00       	mov    edx,0x16
c000d5f2:	85 c0                	test   eax,eax
c000d5f4:	0f 88 69 06 00 00    	js     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5fa:	68 00 00 70 40       	push   0x40700000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d609:	e8 93 ae 01 00       	call   c00284a1 <__gtdf2>
c000d60e:	83 c4 10             	add    esp,0x10
c000d611:	ba 16 00 00 00       	mov    edx,0x16
c000d616:	85 c0                	test   eax,eax
c000d618:	0f 8f 45 06 00 00    	jg     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d61e:	83 ec 0c             	sub    esp,0xc
c000d621:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d624:	e8 2a ac 01 00       	call   c0028253 <__floatsidf>
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d630:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d634:	68 00 00 00 40       	push   0x40000000
c000d639:	6a 00                	push   0x0
c000d63b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d63f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d643:	e8 2b 9f 01 00       	call   c0027573 <__adddf3>
c000d648:	59                   	pop    ecx
c000d649:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d64d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d651:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d654:	e8 fa ab 01 00       	call   c0028253 <__floatsidf>
c000d659:	83 c4 10             	add    esp,0x10
c000d65c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d660:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d664:	52                   	push   edx
c000d665:	50                   	push   eax
c000d666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66e:	e8 61 a8 01 00       	call   c0027ed4 <__divdf3>
c000d673:	83 c4 10             	add    esp,0x10
c000d676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d67a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d67e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d681:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d684:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d688:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d68c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	e8 00 ae 01 00       	call   c00284a1 <__gtdf2>
c000d6a1:	83 c4 10             	add    esp,0x10
c000d6a4:	85 c0                	test   eax,eax
c000d6a6:	7e 2d                	jle    c000d6d5 <sinc_mono_vari_process+0x152>
c000d6a8:	68 00 00 f0 3f       	push   0x3ff00000
c000d6ad:	6a 00                	push   0x0
c000d6af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b7:	e8 03 ae 01 00       	call   c00284bf <__ltdf2>
c000d6bc:	83 c4 10             	add    esp,0x10
c000d6bf:	85 c0                	test   eax,eax
c000d6c1:	79 4d                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6d3:	eb 1b                	jmp    c000d6f0 <sinc_mono_vari_process+0x16d>
c000d6d5:	68 00 00 f0 3f       	push   0x3ff00000
c000d6da:	6a 00                	push   0x0
c000d6dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e4:	e8 d6 ad 01 00       	call   c00284bf <__ltdf2>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	85 c0                	test   eax,eax
c000d6ee:	79 20                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d700:	e8 cf a7 01 00       	call   c0027ed4 <__divdf3>
c000d705:	83 c4 10             	add    esp,0x10
c000d708:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d70c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d710:	50                   	push   eax
c000d711:	50                   	push   eax
c000d712:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d716:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71a:	e8 51 af 01 00       	call   c0028670 <lrint>
c000d71f:	40                   	inc    eax
c000d720:	0f af c7             	imul   eax,edi
c000d723:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d727:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d72b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d72e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d731:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d735:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d739:	58                   	pop    eax
c000d73a:	5a                   	pop    edx
c000d73b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d743:	e8 28 af 01 00       	call   c0028670 <lrint>
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	50                   	push   eax
c000d74c:	e8 02 ab 01 00       	call   c0028253 <__floatsidf>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d758:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d75c:	52                   	push   edx
c000d75d:	50                   	push   eax
c000d75e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d762:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d766:	e8 59 a4 01 00       	call   c0027bc4 <__subdf3>
c000d76b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d76f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d773:	83 c4 20             	add    esp,0x20
c000d776:	6a 00                	push   0x0
c000d778:	6a 00                	push   0x0
c000d77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d782:	e8 38 ad 01 00       	call   c00284bf <__ltdf2>
c000d787:	83 c4 10             	add    esp,0x10
c000d78a:	85 c0                	test   eax,eax
c000d78c:	79 1f                	jns    c000d7ad <sinc_mono_vari_process+0x22a>
c000d78e:	68 00 00 f0 3f       	push   0x3ff00000
c000d793:	6a 00                	push   0x0
c000d795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d79d:	e8 d1 9d 01 00       	call   c0027573 <__adddf3>
c000d7a2:	83 c4 10             	add    esp,0x10
c000d7a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7ad:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7b3:	83 ec 10             	sub    esp,0x10
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	e8 f9 a3 01 00       	call   c0027bc4 <__subdf3>
c000d7cb:	83 c4 18             	add    esp,0x18
c000d7ce:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7d6:	52                   	push   edx
c000d7d7:	50                   	push   eax
c000d7d8:	e8 93 ae 01 00       	call   c0028670 <lrint>
c000d7dd:	0f af f8             	imul   edi,eax
c000d7e0:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7e3:	31 ff                	xor    edi,edi
c000d7e5:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7ea:	99                   	cdq    
c000d7eb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7ee:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f9:	55                   	push   ebp
c000d7fa:	57                   	push   edi
c000d7fb:	e8 d4 a6 01 00       	call   c0027ed4 <__divdf3>
c000d800:	83 c4 10             	add    esp,0x10
c000d803:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d807:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d80b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d810:	68 23 42 92 0c       	push   0xc924223
c000d815:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d819:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81d:	e8 51 9d 01 00       	call   c0027573 <__adddf3>
c000d822:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d826:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d82a:	83 c4 20             	add    esp,0x20
c000d82d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d831:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d835:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d838:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d83b:	7d 54                	jge    c000d891 <sinc_mono_vari_process+0x30e>
c000d83d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d840:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d843:	01 c8                	add    eax,ecx
c000d845:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d848:	99                   	cdq    
c000d849:	f7 f9                	idiv   ecx
c000d84b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d84f:	7d 0c                	jge    c000d85d <sinc_mono_vari_process+0x2da>
c000d851:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d854:	85 ff                	test   edi,edi
c000d856:	79 73                	jns    c000d8cb <sinc_mono_vari_process+0x348>
c000d858:	e9 ee 00 00 00       	jmp    c000d94b <sinc_mono_vari_process+0x3c8>
c000d85d:	50                   	push   eax
c000d85e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d862:	56                   	push   esi
c000d863:	53                   	push   ebx
c000d864:	e8 8d e0 ff ff       	call   c000b8f6 <prepare_data>
c000d869:	89 c2                	mov    edx,eax
c000d86b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d875:	85 d2                	test   edx,edx
c000d877:	0f 85 e6 03 00 00    	jne    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d87d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d880:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d883:	01 c8                	add    eax,ecx
c000d885:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d888:	99                   	cdq    
c000d889:	f7 f9                	idiv   ecx
c000d88b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d88f:	7c c0                	jl     c000d851 <sinc_mono_vari_process+0x2ce>
c000d891:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d899:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d89d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8ab:	89 01                	mov    DWORD PTR [ecx],eax
c000d8ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8b3:	99                   	cdq    
c000d8b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8bd:	99                   	cdq    
c000d8be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c1:	31 d2                	xor    edx,edx
c000d8c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8c6:	e9 98 03 00 00       	jmp    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d8cb:	83 ec 0c             	sub    esp,0xc
c000d8ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d1:	e8 7d a9 01 00       	call   c0028253 <__floatsidf>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f1:	e8 7d 9c 01 00       	call   c0027573 <__adddf3>
c000d8f6:	83 c4 10             	add    esp,0x10
c000d8f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d901:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d905:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d909:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d90d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d911:	e8 5d 9c 01 00       	call   c0027573 <__adddf3>
c000d916:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d919:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d91d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d921:	e8 2d a9 01 00       	call   c0028253 <__floatsidf>
c000d926:	83 c4 10             	add    esp,0x10
c000d929:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d92d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d931:	52                   	push   edx
c000d932:	50                   	push   eax
c000d933:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d937:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93b:	e8 61 ab 01 00       	call   c00284a1 <__gtdf2>
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	85 c0                	test   eax,eax
c000d945:	0f 8f 46 ff ff ff    	jg     c000d891 <sinc_mono_vari_process+0x30e>
c000d94b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d94f:	0f 8e f5 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d955:	83 ec 10             	sub    esp,0x10
c000d958:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d95b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d95e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d962:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d965:	ff 30                	push   DWORD PTR [eax]
c000d967:	e8 58 a2 01 00       	call   c0027bc4 <__subdf3>
c000d96c:	83 c4 18             	add    esp,0x18
c000d96f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d977:	52                   	push   edx
c000d978:	50                   	push   eax
c000d979:	e8 d2 ac 01 00       	call   c0028650 <fabs>
c000d97e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d982:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d986:	83 c4 10             	add    esp,0x10
c000d989:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d98e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99b:	e8 01 ab 01 00       	call   c00284a1 <__gtdf2>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	85 c0                	test   eax,eax
c000d9a5:	0f 8e 9f 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d9ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9af:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9bc:	52                   	push   edx
c000d9bd:	50                   	push   eax
c000d9be:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9c4:	e8 fb a1 01 00       	call   c0027bc4 <__subdf3>
c000d9c9:	5f                   	pop    edi
c000d9ca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9ce:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9d2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9d5:	e8 79 a8 01 00       	call   c0028253 <__floatsidf>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e5:	52                   	push   edx
c000d9e6:	50                   	push   eax
c000d9e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9ef:	e8 fc a1 01 00       	call   c0027bf0 <__muldf3>
c000d9f4:	5d                   	pop    ebp
c000d9f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9fd:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da00:	e8 4e a8 01 00       	call   c0028253 <__floatsidf>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da0c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da10:	52                   	push   edx
c000da11:	50                   	push   eax
c000da12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1a:	e8 b5 a4 01 00       	call   c0027ed4 <__divdf3>
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3a:	e8 34 9b 01 00       	call   c0027573 <__adddf3>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da4a:	83 ec 0c             	sub    esp,0xc
c000da4d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da50:	e8 fe a7 01 00       	call   c0028253 <__floatsidf>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da5c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	e8 4a aa 01 00       	call   c00284bf <__ltdf2>
c000da75:	83 c4 10             	add    esp,0x10
c000da78:	85 c0                	test   eax,eax
c000da7a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da7e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da82:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da86:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da8a:	78 10                	js     c000da9c <sinc_mono_vari_process+0x519>
c000da8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daa8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daac:	e8 3f a1 01 00       	call   c0027bf0 <__muldf3>
c000dab1:	59                   	pop    ecx
c000dab2:	5f                   	pop    edi
c000dab3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dab7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dabb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dabf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac3:	e8 07 de ff ff       	call   c000b8cf <double_to_fp>
c000dac8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dacc:	89 c7                	mov    edi,eax
c000dace:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dad6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dada:	e8 11 a1 01 00       	call   c0027bf0 <__muldf3>
c000dadf:	83 c4 18             	add    esp,0x18
c000dae2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dae6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daea:	52                   	push   edx
c000daeb:	50                   	push   eax
c000daec:	e8 de dd ff ff       	call   c000b8cf <double_to_fp>
c000daf1:	83 ec 0c             	sub    esp,0xc
c000daf4:	89 c5                	mov    ebp,eax
c000daf6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000daf9:	e8 55 a7 01 00       	call   c0028253 <__floatsidf>
c000dafe:	83 c4 10             	add    esp,0x10
c000db01:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db05:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db09:	52                   	push   edx
c000db0a:	50                   	push   eax
c000db0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db13:	e8 bc a3 01 00       	call   c0027ed4 <__divdf3>
c000db18:	83 c4 10             	add    esp,0x10
c000db1b:	89 e9                	mov    ecx,ebp
c000db1d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db21:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db25:	89 d8                	mov    eax,ebx
c000db27:	89 fa                	mov    edx,edi
c000db29:	e8 ee bd ff ff       	call   c000991c <calc_output_single>
c000db2e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db31:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db3c:	52                   	push   edx
c000db3d:	50                   	push   eax
c000db3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db46:	e8 a5 a0 01 00       	call   c0027bf0 <__muldf3>
c000db4b:	59                   	pop    ecx
c000db4c:	59                   	pop    ecx
c000db4d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db51:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	e8 61 a9 01 00       	call   c00284c3 <__truncdfsf2>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db68:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7b:	e8 54 a3 01 00       	call   c0027ed4 <__divdf3>
c000db80:	83 c4 10             	add    esp,0x10
c000db83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db87:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9b:	e8 d3 99 01 00       	call   c0027573 <__adddf3>
c000dba0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dba4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dba8:	83 c4 18             	add    esp,0x18
c000dbab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb3:	e8 b8 aa 01 00       	call   c0028670 <lrint>
c000dbb8:	83 ec 0c             	sub    esp,0xc
c000dbbb:	50                   	push   eax
c000dbbc:	e8 92 a6 01 00       	call   c0028253 <__floatsidf>
c000dbc1:	83 c4 10             	add    esp,0x10
c000dbc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbcc:	52                   	push   edx
c000dbcd:	50                   	push   eax
c000dbce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd6:	e8 e9 9f 01 00       	call   c0027bc4 <__subdf3>
c000dbdb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbe3:	83 c4 20             	add    esp,0x20
c000dbe6:	6a 00                	push   0x0
c000dbe8:	6a 00                	push   0x0
c000dbea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf2:	e8 c8 a8 01 00       	call   c00284bf <__ltdf2>
c000dbf7:	83 c4 10             	add    esp,0x10
c000dbfa:	85 c0                	test   eax,eax
c000dbfc:	79 20                	jns    c000dc1e <sinc_mono_vari_process+0x69b>
c000dbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0e:	e8 60 99 01 00       	call   c0027573 <__adddf3>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc1e:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc21:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc24:	83 ec 10             	sub    esp,0x10
c000dc27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc37:	e8 88 9f 01 00       	call   c0027bc4 <__subdf3>
c000dc3c:	83 c4 18             	add    esp,0x18
c000dc3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc47:	52                   	push   edx
c000dc48:	50                   	push   eax
c000dc49:	e8 22 aa 01 00       	call   c0028670 <lrint>
c000dc4e:	83 c4 10             	add    esp,0x10
c000dc51:	0f af f8             	imul   edi,eax
c000dc54:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc57:	99                   	cdq    
c000dc58:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc5b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc5e:	e9 d2 fb ff ff       	jmp    c000d835 <sinc_mono_vari_process+0x2b2>
c000dc63:	83 c4 4c             	add    esp,0x4c
c000dc66:	89 d0                	mov    eax,edx
c000dc68:	5b                   	pop    ebx
c000dc69:	5e                   	pop    esi
c000dc6a:	5f                   	pop    edi
c000dc6b:	5d                   	pop    ebp
c000dc6c:	c3                   	ret    

c000dc6d <sinc_get_name>:
c000dc6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc71:	31 c0                	xor    eax,eax
c000dc73:	83 fa 02             	cmp    edx,0x2
c000dc76:	77 07                	ja     c000dc7f <sinc_get_name+0x12>
c000dc78:	8b 04 95 64 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd619c]
c000dc7f:	c3                   	ret    

c000dc80 <sinc_get_description>:
c000dc80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc84:	31 c0                	xor    eax,eax
c000dc86:	83 fa 02             	cmp    edx,0x2
c000dc89:	77 07                	ja     c000dc92 <sinc_get_description+0x12>
c000dc8b:	8b 04 95 58 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd61a8]
c000dc92:	c3                   	ret    

c000dc93 <sinc_set_converter>:
c000dc93:	53                   	push   ebx
c000dc94:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc9a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dca4:	85 c0                	test   eax,eax
c000dca6:	74 13                	je     c000dcbb <sinc_set_converter+0x28>
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	50                   	push   eax
c000dcac:	e8 9f 1b 00 00       	call   c000f850 <free>
c000dcb1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	50                   	push   eax
c000dcbc:	68 44 08 00 00       	push   0x844
c000dcc1:	6a 00                	push   0x0
c000dcc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcc7:	50                   	push   eax
c000dcc8:	e8 ab 2a ff ff       	call   c0000778 <memset>
c000dccd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	b8 0b 00 00 00       	mov    eax,0xb
c000dcd8:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcde:	7f 6e                	jg     c000dd4e <sinc_set_converter+0xbb>
c000dce0:	83 fa 01             	cmp    edx,0x1
c000dce3:	75 10                	jne    c000dcf5 <sinc_set_converter+0x62>
c000dce5:	c7 43 24 83 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d583
c000dcec:	c7 43 20 83 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d583
c000dcf3:	eb 4d                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dcf5:	83 fa 02             	cmp    edx,0x2
c000dcf8:	75 10                	jne    c000dd0a <sinc_set_converter+0x77>
c000dcfa:	c7 43 24 be ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cebe
c000dd01:	c7 43 20 be ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cebe
c000dd08:	eb 38                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd0a:	83 fa 04             	cmp    edx,0x4
c000dd0d:	75 10                	jne    c000dd1f <sinc_set_converter+0x8c>
c000dd0f:	c7 43 24 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7f9
c000dd16:	c7 43 20 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7f9
c000dd1d:	eb 23                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd1f:	83 fa 06             	cmp    edx,0x6
c000dd22:	75 10                	jne    c000dd34 <sinc_set_converter+0xa1>
c000dd24:	c7 43 24 34 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c134
c000dd2b:	c7 43 20 34 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c134
c000dd32:	eb 0e                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd34:	c7 43 24 70 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba70
c000dd3b:	c7 43 20 70 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba70
c000dd42:	c7 43 28 23 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad23
c000dd49:	b8 0a 00 00 00       	mov    eax,0xa
c000dd4e:	81 c4 58 08 00 00    	add    esp,0x858
c000dd54:	5b                   	pop    ebx
c000dd55:	c3                   	ret    

c000dd56 <zoh_vari_process>:
c000dd56:	55                   	push   ebp
c000dd57:	31 d2                	xor    edx,edx
c000dd59:	57                   	push   edi
c000dd5a:	56                   	push   esi
c000dd5b:	53                   	push   ebx
c000dd5c:	83 ec 3c             	sub    esp,0x3c
c000dd5f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd63:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd67:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd6b:	0f 8e 80 06 00 00    	jle    c000e3f1 <zoh_vari_process+0x69b>
c000dd71:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd74:	ba 05 00 00 00       	mov    edx,0x5
c000dd79:	85 db                	test   ebx,ebx
c000dd7b:	0f 84 70 06 00 00    	je     c000e3f1 <zoh_vari_process+0x69b>
c000dd81:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd84:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd88:	74 19                	je     c000dda3 <zoh_vari_process+0x4d>
c000dd8a:	31 d2                	xor    edx,edx
c000dd8c:	39 c2                	cmp    edx,eax
c000dd8e:	7d 0c                	jge    c000dd9c <zoh_vari_process+0x46>
c000dd90:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd92:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd95:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd99:	42                   	inc    edx
c000dd9a:	eb f0                	jmp    c000dd8c <zoh_vari_process+0x36>
c000dd9c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dda3:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dda6:	0f af d0             	imul   edx,eax
c000dda9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddac:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddb7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddba:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddc4:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddce:	68 00 00 70 3f       	push   0x3f700000
c000ddd3:	6a 00                	push   0x0
c000ddd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dddd:	e8 dd a6 01 00       	call   c00284bf <__ltdf2>
c000dde2:	83 c4 10             	add    esp,0x10
c000dde5:	ba 16 00 00 00       	mov    edx,0x16
c000ddea:	85 c0                	test   eax,eax
c000ddec:	0f 88 ff 05 00 00    	js     c000e3f1 <zoh_vari_process+0x69b>
c000ddf2:	68 00 00 70 40       	push   0x40700000
c000ddf7:	6a 00                	push   0x0
c000ddf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de01:	e8 9b a6 01 00       	call   c00284a1 <__gtdf2>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	ba 16 00 00 00       	mov    edx,0x16
c000de0e:	85 c0                	test   eax,eax
c000de10:	0f 8f db 05 00 00    	jg     c000e3f1 <zoh_vari_process+0x69b>
c000de16:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de19:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de24:	68 00 00 f0 3f       	push   0x3ff00000
c000de29:	6a 00                	push   0x0
c000de2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de33:	e8 87 a6 01 00       	call   c00284bf <__ltdf2>
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	85 c0                	test   eax,eax
c000de3d:	0f 89 da 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000de43:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de46:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de49:	0f 8d ce 01 00 00    	jge    c000e01d <zoh_vari_process+0x2c7>
c000de4f:	83 ec 0c             	sub    esp,0xc
c000de52:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de55:	e8 f9 a3 01 00       	call   c0028253 <__floatsidf>
c000de5a:	83 c4 10             	add    esp,0x10
c000de5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000de60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de74:	e8 77 9d 01 00       	call   c0027bf0 <__muldf3>
c000de79:	59                   	pop    ecx
c000de7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de82:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de85:	e8 c9 a3 01 00       	call   c0028253 <__floatsidf>
c000de8a:	83 c4 10             	add    esp,0x10
c000de8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de95:	52                   	push   edx
c000de96:	50                   	push   eax
c000de97:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9f:	e8 cf 96 01 00       	call   c0027573 <__adddf3>
c000dea4:	59                   	pop    ecx
c000dea5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dea9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dead:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb0:	e8 9e a3 01 00       	call   c0028253 <__floatsidf>
c000deb5:	83 c4 10             	add    esp,0x10
c000deb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000debc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec0:	52                   	push   edx
c000dec1:	50                   	push   eax
c000dec2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dec6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deca:	e8 ee a5 01 00       	call   c00284bd <__gedf2>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	85 c0                	test   eax,eax
c000ded4:	0f 89 43 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000deda:	85 ed                	test   ebp,ebp
c000dedc:	0f 8e ec 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000dee2:	83 ec 10             	sub    esp,0x10
c000dee5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dee8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deeb:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deee:	ff 37                	push   DWORD PTR [edi]
c000def0:	e8 cf 9c 01 00       	call   c0027bc4 <__subdf3>
c000def5:	83 c4 18             	add    esp,0x18
c000def8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000defc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df00:	52                   	push   edx
c000df01:	50                   	push   eax
c000df02:	e8 49 a7 01 00       	call   c0028650 <fabs>
c000df07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df0f:	83 c4 10             	add    esp,0x10
c000df12:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df17:	68 23 42 92 0c       	push   0xc924223
c000df1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df24:	e8 78 a5 01 00       	call   c00284a1 <__gtdf2>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	85 c0                	test   eax,eax
c000df2e:	0f 8e 9a 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000df34:	8b 07                	mov    eax,DWORD PTR [edi]
c000df36:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df39:	89 04 24             	mov    DWORD PTR [esp],eax
c000df3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df40:	52                   	push   edx
c000df41:	50                   	push   eax
c000df42:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df45:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df48:	e8 77 9c 01 00       	call   c0027bc4 <__subdf3>
c000df4d:	59                   	pop    ecx
c000df4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df52:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df56:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df59:	e8 f5 a2 01 00       	call   c0028253 <__floatsidf>
c000df5e:	83 c4 10             	add    esp,0x10
c000df61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df65:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df69:	52                   	push   edx
c000df6a:	50                   	push   eax
c000df6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df73:	e8 78 9c 01 00       	call   c0027bf0 <__muldf3>
c000df78:	5d                   	pop    ebp
c000df79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df7d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df81:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df84:	e8 ca a2 01 00       	call   c0028253 <__floatsidf>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df94:	52                   	push   edx
c000df95:	50                   	push   eax
c000df96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9e:	e8 31 9f 01 00       	call   c0027ed4 <__divdf3>
c000dfa3:	83 c4 10             	add    esp,0x10
c000dfa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfbe:	e8 b0 95 01 00       	call   c0027573 <__adddf3>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfce:	31 c0                	xor    eax,eax
c000dfd0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfd3:	7e 13                	jle    c000dfe8 <zoh_vari_process+0x292>
c000dfd5:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfd9:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfdc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfdf:	40                   	inc    eax
c000dfe0:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfe3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfe6:	eb e8                	jmp    c000dfd0 <zoh_vari_process+0x27a>
c000dfe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff0:	68 00 00 f0 3f       	push   0x3ff00000
c000dff5:	6a 00                	push   0x0
c000dff7:	e8 d8 9e 01 00       	call   c0027ed4 <__divdf3>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	89 04 24             	mov    DWORD PTR [esp],eax
c000e002:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e010:	e8 5e 95 01 00       	call   c0027573 <__adddf3>
c000e015:	83 c4 10             	add    esp,0x10
c000e018:	e9 ff fd ff ff       	jmp    c000de1c <zoh_vari_process+0xc6>
c000e01d:	55                   	push   ebp
c000e01e:	55                   	push   ebp
c000e01f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e027:	e8 44 a6 01 00       	call   c0028670 <lrint>
c000e02c:	83 ec 0c             	sub    esp,0xc
c000e02f:	50                   	push   eax
c000e030:	e8 1e a2 01 00       	call   c0028253 <__floatsidf>
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e03c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e040:	52                   	push   edx
c000e041:	50                   	push   eax
c000e042:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e046:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04a:	e8 75 9b 01 00       	call   c0027bc4 <__subdf3>
c000e04f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e053:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e057:	83 c4 20             	add    esp,0x20
c000e05a:	6a 00                	push   0x0
c000e05c:	6a 00                	push   0x0
c000e05e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e062:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e066:	e8 54 a4 01 00       	call   c00284bf <__ltdf2>
c000e06b:	83 c4 10             	add    esp,0x10
c000e06e:	85 c0                	test   eax,eax
c000e070:	79 1e                	jns    c000e090 <zoh_vari_process+0x33a>
c000e072:	68 00 00 f0 3f       	push   0x3ff00000
c000e077:	6a 00                	push   0x0
c000e079:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e081:	e8 ed 94 01 00       	call   c0027573 <__adddf3>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 04 24             	mov    DWORD PTR [esp],eax
c000e08c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e090:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e093:	83 ec 10             	sub    esp,0x10
c000e096:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a6:	e8 19 9b 01 00       	call   c0027bc4 <__subdf3>
c000e0ab:	83 c4 18             	add    esp,0x18
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0b6:	52                   	push   edx
c000e0b7:	50                   	push   eax
c000e0b8:	e8 b3 a5 01 00       	call   c0028670 <lrint>
c000e0bd:	83 c4 10             	add    esp,0x10
c000e0c0:	0f af e8             	imul   ebp,eax
c000e0c3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0c6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0c9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0d7:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0da:	0f 8d 7a 02 00 00    	jge    c000e35a <zoh_vari_process+0x604>
c000e0e0:	83 ec 0c             	sub    esp,0xc
c000e0e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0e6:	e8 68 a1 01 00       	call   c0028253 <__floatsidf>
c000e0eb:	83 c4 10             	add    esp,0x10
c000e0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e102:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e106:	e8 e5 9a 01 00       	call   c0027bf0 <__muldf3>
c000e10b:	59                   	pop    ecx
c000e10c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e110:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e118:	e8 36 a1 01 00       	call   c0028253 <__floatsidf>
c000e11d:	83 c4 10             	add    esp,0x10
c000e120:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e124:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e128:	52                   	push   edx
c000e129:	50                   	push   eax
c000e12a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e12e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e132:	e8 3c 94 01 00       	call   c0027573 <__adddf3>
c000e137:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e13a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e13e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e142:	e8 0c a1 01 00       	call   c0028253 <__floatsidf>
c000e147:	83 c4 10             	add    esp,0x10
c000e14a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e14e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e152:	52                   	push   edx
c000e153:	50                   	push   eax
c000e154:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e158:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e15c:	e8 60 a3 01 00       	call   c00284c1 <__ledf2>
c000e161:	83 c4 10             	add    esp,0x10
c000e164:	85 c0                	test   eax,eax
c000e166:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e16a:	0f 8f ea 01 00 00    	jg     c000e35a <zoh_vari_process+0x604>
c000e170:	85 c9                	test   ecx,ecx
c000e172:	0f 8e ed 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e178:	83 ec 10             	sub    esp,0x10
c000e17b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e17e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e181:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e184:	ff 37                	push   DWORD PTR [edi]
c000e186:	e8 39 9a 01 00       	call   c0027bc4 <__subdf3>
c000e18b:	83 c4 18             	add    esp,0x18
c000e18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e196:	52                   	push   edx
c000e197:	50                   	push   eax
c000e198:	e8 b3 a4 01 00       	call   c0028650 <fabs>
c000e19d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1a5:	83 c4 10             	add    esp,0x10
c000e1a8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1ad:	68 23 42 92 0c       	push   0xc924223
c000e1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ba:	e8 e2 a2 01 00       	call   c00284a1 <__gtdf2>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	85 c0                	test   eax,eax
c000e1c4:	0f 8e 9b 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e1ca:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1cc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1d7:	52                   	push   edx
c000e1d8:	50                   	push   eax
c000e1d9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1dc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1df:	e8 e0 99 01 00       	call   c0027bc4 <__subdf3>
c000e1e4:	5d                   	pop    ebp
c000e1e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1e9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1ed:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f0:	e8 5e a0 01 00       	call   c0028253 <__floatsidf>
c000e1f5:	83 c4 10             	add    esp,0x10
c000e1f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e200:	52                   	push   edx
c000e201:	50                   	push   eax
c000e202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20a:	e8 e1 99 01 00       	call   c0027bf0 <__muldf3>
c000e20f:	59                   	pop    ecx
c000e210:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e214:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e218:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e21b:	e8 33 a0 01 00       	call   c0028253 <__floatsidf>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e227:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e22b:	52                   	push   edx
c000e22c:	50                   	push   eax
c000e22d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e235:	e8 9a 9c 01 00       	call   c0027ed4 <__divdf3>
c000e23a:	83 c4 10             	add    esp,0x10
c000e23d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e241:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e249:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e255:	e8 19 93 01 00       	call   c0027573 <__adddf3>
c000e25a:	83 c4 10             	add    esp,0x10
c000e25d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e261:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e265:	31 d2                	xor    edx,edx
c000e267:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e26a:	39 d0                	cmp    eax,edx
c000e26c:	7e 1d                	jle    c000e28b <zoh_vari_process+0x535>
c000e26e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e271:	29 c1                	sub    ecx,eax
c000e273:	89 c8                	mov    eax,ecx
c000e275:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e277:	01 d0                	add    eax,edx
c000e279:	42                   	inc    edx
c000e27a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e27d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e280:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e283:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e286:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e289:	eb dc                	jmp    c000e267 <zoh_vari_process+0x511>
c000e28b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e28f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e293:	68 00 00 f0 3f       	push   0x3ff00000
c000e298:	6a 00                	push   0x0
c000e29a:	e8 35 9c 01 00       	call   c0027ed4 <__divdf3>
c000e29f:	83 c4 10             	add    esp,0x10
c000e2a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ba:	e8 b4 92 01 00       	call   c0027573 <__adddf3>
c000e2bf:	5d                   	pop    ebp
c000e2c0:	59                   	pop    ecx
c000e2c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d1:	e8 9a a3 01 00       	call   c0028670 <lrint>
c000e2d6:	83 ec 0c             	sub    esp,0xc
c000e2d9:	50                   	push   eax
c000e2da:	e8 74 9f 01 00       	call   c0028253 <__floatsidf>
c000e2df:	83 c4 10             	add    esp,0x10
c000e2e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ea:	52                   	push   edx
c000e2eb:	50                   	push   eax
c000e2ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f4:	e8 cb 98 01 00       	call   c0027bc4 <__subdf3>
c000e2f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e301:	83 c4 20             	add    esp,0x20
c000e304:	6a 00                	push   0x0
c000e306:	6a 00                	push   0x0
c000e308:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e310:	e8 aa a1 01 00       	call   c00284bf <__ltdf2>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	85 c0                	test   eax,eax
c000e31a:	79 1e                	jns    c000e33a <zoh_vari_process+0x5e4>
c000e31c:	68 00 00 f0 3f       	push   0x3ff00000
c000e321:	6a 00                	push   0x0
c000e323:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e327:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32b:	e8 43 92 01 00       	call   c0027573 <__adddf3>
c000e330:	83 c4 10             	add    esp,0x10
c000e333:	89 04 24             	mov    DWORD PTR [esp],eax
c000e336:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e33a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e33d:	83 ec 10             	sub    esp,0x10
c000e340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e34c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e350:	e8 6f 98 01 00       	call   c0027bc4 <__subdf3>
c000e355:	e9 51 fd ff ff       	jmp    c000e0ab <zoh_vari_process+0x355>
c000e35a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e35e:	7d 3a                	jge    c000e39a <zoh_vari_process+0x644>
c000e360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e364:	83 ec 0c             	sub    esp,0xc
c000e367:	29 e8                	sub    eax,ebp
c000e369:	99                   	cdq    
c000e36a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e36d:	50                   	push   eax
c000e36e:	e8 e0 9e 01 00       	call   c0028253 <__floatsidf>
c000e373:	83 c4 10             	add    esp,0x10
c000e376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e37e:	52                   	push   edx
c000e37f:	50                   	push   eax
c000e380:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e384:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e388:	e8 e6 91 01 00       	call   c0027573 <__adddf3>
c000e38d:	83 c4 10             	add    esp,0x10
c000e390:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e393:	89 04 24             	mov    DWORD PTR [esp],eax
c000e396:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e39a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e39d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a1:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3a4:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3aa:	85 c0                	test   eax,eax
c000e3ac:	7f 25                	jg     c000e3d3 <zoh_vari_process+0x67d>
c000e3ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3b6:	89 07                	mov    DWORD PTR [edi],eax
c000e3b8:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3be:	99                   	cdq    
c000e3bf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3c2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3c5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3c8:	99                   	cdq    
c000e3c9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3cc:	31 d2                	xor    edx,edx
c000e3ce:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d1:	eb 1e                	jmp    c000e3f1 <zoh_vari_process+0x69b>
c000e3d3:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3d6:	31 d2                	xor    edx,edx
c000e3d8:	29 c8                	sub    eax,ecx
c000e3da:	c1 e0 02             	shl    eax,0x2
c000e3dd:	39 d1                	cmp    ecx,edx
c000e3df:	7e cd                	jle    c000e3ae <zoh_vari_process+0x658>
c000e3e1:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3e3:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3e7:	83 c0 04             	add    eax,0x4
c000e3ea:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3ee:	42                   	inc    edx
c000e3ef:	eb ec                	jmp    c000e3dd <zoh_vari_process+0x687>
c000e3f1:	83 c4 3c             	add    esp,0x3c
c000e3f4:	89 d0                	mov    eax,edx
c000e3f6:	5b                   	pop    ebx
c000e3f7:	5e                   	pop    esi
c000e3f8:	5f                   	pop    edi
c000e3f9:	5d                   	pop    ebp
c000e3fa:	c3                   	ret    

c000e3fb <zoh_reset>:
c000e3fb:	83 ec 0c             	sub    esp,0xc
c000e3fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e402:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e405:	85 c0                	test   eax,eax
c000e407:	74 20                	je     c000e429 <zoh_reset+0x2e>
c000e409:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e40c:	83 c0 1c             	add    eax,0x1c
c000e40f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e412:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e419:	c1 e2 02             	shl    edx,0x2
c000e41c:	51                   	push   ecx
c000e41d:	52                   	push   edx
c000e41e:	6a 00                	push   0x0
c000e420:	50                   	push   eax
c000e421:	e8 52 23 ff ff       	call   c0000778 <memset>
c000e426:	83 c4 10             	add    esp,0x10
c000e429:	83 c4 0c             	add    esp,0xc
c000e42c:	c3                   	ret    

c000e42d <zoh_get_name>:
c000e42d:	31 c0                	xor    eax,eax
c000e42f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e434:	75 05                	jne    c000e43b <zoh_get_name+0xe>
c000e436:	b8 7e 9f 02 c0       	mov    eax,0xc0029f7e
c000e43b:	c3                   	ret    

c000e43c <zoh_get_description>:
c000e43c:	31 c0                	xor    eax,eax
c000e43e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e443:	75 05                	jne    c000e44a <zoh_get_description+0xe>
c000e445:	b8 8f 9f 02 c0       	mov    eax,0xc0029f8f
c000e44a:	c3                   	ret    

c000e44b <zoh_set_converter>:
c000e44b:	53                   	push   ebx
c000e44c:	b8 0a 00 00 00       	mov    eax,0xa
c000e451:	83 ec 08             	sub    esp,0x8
c000e454:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e458:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e45d:	75 6e                	jne    c000e4cd <zoh_set_converter+0x82>
c000e45f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e462:	85 c0                	test   eax,eax
c000e464:	74 13                	je     c000e479 <zoh_set_converter+0x2e>
c000e466:	83 ec 0c             	sub    esp,0xc
c000e469:	50                   	push   eax
c000e46a:	e8 e1 13 00 00       	call   c000f850 <free>
c000e46f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e476:	83 c4 10             	add    esp,0x10
c000e479:	50                   	push   eax
c000e47a:	50                   	push   eax
c000e47b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e47e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e485:	50                   	push   eax
c000e486:	6a 01                	push   0x1
c000e488:	e8 e3 13 00 00       	call   c000f870 <calloc>
c000e48d:	83 c4 10             	add    esp,0x10
c000e490:	89 c2                	mov    edx,eax
c000e492:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e495:	85 d2                	test   edx,edx
c000e497:	b8 01 00 00 00       	mov    eax,0x1
c000e49c:	74 2f                	je     c000e4cd <zoh_set_converter+0x82>
c000e49e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a1:	83 ec 0c             	sub    esp,0xc
c000e4a4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4a7:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4ad:	c7 43 24 56 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd56
c000e4b4:	c7 43 20 56 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd56
c000e4bb:	c7 43 28 fb e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3fb
c000e4c2:	53                   	push   ebx
c000e4c3:	e8 33 ff ff ff       	call   c000e3fb <zoh_reset>
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	31 c0                	xor    eax,eax
c000e4cd:	83 c4 08             	add    esp,0x8
c000e4d0:	5b                   	pop    ebx
c000e4d1:	c3                   	ret    

c000e4d2 <CPU::current()>:
c000e4d2:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c000e4d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4dd:	90                   	nop
c000e4de:	c3                   	ret    

c000e4df <operator new(unsigned long)>:
c000e4df:	83 ec 0c             	sub    esp,0xc
c000e4e2:	83 ec 0c             	sub    esp,0xc
c000e4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4e9:	e8 52 13 00 00       	call   c000f840 <malloc>
c000e4ee:	83 c4 10             	add    esp,0x10
c000e4f1:	83 c4 0c             	add    esp,0xc
c000e4f4:	c3                   	ret    

c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4f5:	83 ec 0c             	sub    esp,0xc
c000e4f8:	83 ec 08             	sub    esp,0x8
c000e4fb:	68 c6 9f 02 c0       	push   0xc0029fc6
c000e500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e504:	e8 b7 23 ff ff       	call   c00008c0 <strcmp>
c000e509:	83 c4 10             	add    esp,0x10
c000e50c:	85 c0                	test   eax,eax
c000e50e:	0f 94 c0             	sete   al
c000e511:	84 c0                	test   al,al
c000e513:	74 0a                	je     c000e51f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e515:	b8 c8 e5 02 c0       	mov    eax,0xc002e5c8
c000e51a:	e9 e3 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e51f:	83 ec 08             	sub    esp,0x8
c000e522:	68 cf 9f 02 c0       	push   0xc0029fcf
c000e527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e52b:	e8 90 23 ff ff       	call   c00008c0 <strcmp>
c000e530:	83 c4 10             	add    esp,0x10
c000e533:	85 c0                	test   eax,eax
c000e535:	0f 94 c0             	sete   al
c000e538:	84 c0                	test   al,al
c000e53a:	74 0a                	je     c000e546 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e53c:	b8 ec 69 02 c0       	mov    eax,0xc00269ec
c000e541:	e9 bc 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e546:	83 ec 08             	sub    esp,0x8
c000e549:	68 d9 9f 02 c0       	push   0xc0029fd9
c000e54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e552:	e8 69 23 ff ff       	call   c00008c0 <strcmp>
c000e557:	83 c4 10             	add    esp,0x10
c000e55a:	85 c0                	test   eax,eax
c000e55c:	0f 94 c0             	sete   al
c000e55f:	84 c0                	test   al,al
c000e561:	74 0a                	je     c000e56d <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e563:	b8 20 67 02 c0       	mov    eax,0xc0026720
c000e568:	e9 95 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e56d:	83 ec 08             	sub    esp,0x8
c000e570:	68 e2 9f 02 c0       	push   0xc0029fe2
c000e575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e579:	e8 42 23 ff ff       	call   c00008c0 <strcmp>
c000e57e:	83 c4 10             	add    esp,0x10
c000e581:	85 c0                	test   eax,eax
c000e583:	0f 94 c0             	sete   al
c000e586:	84 c0                	test   al,al
c000e588:	74 07                	je     c000e591 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e58a:	b8 ec 6a 02 c0       	mov    eax,0xc0026aec
c000e58f:	eb 71                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e591:	83 ec 08             	sub    esp,0x8
c000e594:	68 ec 9f 02 c0       	push   0xc0029fec
c000e599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59d:	e8 1e 23 ff ff       	call   c00008c0 <strcmp>
c000e5a2:	83 c4 10             	add    esp,0x10
c000e5a5:	85 c0                	test   eax,eax
c000e5a7:	0f 94 c0             	sete   al
c000e5aa:	84 c0                	test   al,al
c000e5ac:	74 07                	je     c000e5b5 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5ae:	b8 6c 68 02 c0       	mov    eax,0xc002686c
c000e5b3:	eb 4d                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b5:	83 ec 08             	sub    esp,0x8
c000e5b8:	68 f5 9f 02 c0       	push   0xc0029ff5
c000e5bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c1:	e8 fa 22 ff ff       	call   c00008c0 <strcmp>
c000e5c6:	83 c4 10             	add    esp,0x10
c000e5c9:	85 c0                	test   eax,eax
c000e5cb:	0f 94 c0             	sete   al
c000e5ce:	84 c0                	test   al,al
c000e5d0:	74 07                	je     c000e5d9 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5d2:	b8 cc e5 02 c0       	mov    eax,0xc002e5cc
c000e5d7:	eb 29                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d9:	83 ec 08             	sub    esp,0x8
c000e5dc:	68 02 a0 02 c0       	push   0xc002a002
c000e5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e5:	e8 d6 22 ff ff       	call   c00008c0 <strcmp>
c000e5ea:	83 c4 10             	add    esp,0x10
c000e5ed:	85 c0                	test   eax,eax
c000e5ef:	0f 94 c0             	sete   al
c000e5f2:	84 c0                	test   al,al
c000e5f4:	74 07                	je     c000e5fd <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5f6:	b8 cd e5 02 c0       	mov    eax,0xc002e5cd
c000e5fb:	eb 05                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5fd:	b8 00 00 00 00       	mov    eax,0x0
c000e602:	83 c4 0c             	add    esp,0xc
c000e605:	c3                   	ret    

c000e606 <Computer::close(int, int, void*)>:
c000e606:	57                   	push   edi
c000e607:	56                   	push   esi
c000e608:	53                   	push   ebx
c000e609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e60d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e611:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e615:	83 ec 0c             	sub    esp,0xc
c000e618:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e61e:	e8 ab 5e 00 00       	call   c00144ce <Device::closeAll()>
c000e623:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e629:	83 c4 10             	add    esp,0x10
c000e62c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e62e:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e632:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e63a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e63e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e642:	5b                   	pop    ebx
c000e643:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e646:	5e                   	pop    esi
c000e647:	5f                   	pop    edi
c000e648:	ff e0                	jmp    eax

c000e64a <Krnl::firstTask()>:
c000e64a:	53                   	push   ebx
c000e64b:	83 ec 14             	sub    esp,0x14
c000e64e:	fb                   	sti    
c000e64f:	68 3f 07 00 00       	push   0x73f
c000e654:	e8 e7 11 00 00       	call   c000f840 <malloc>
c000e659:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e660:	89 c3                	mov    ebx,eax
c000e662:	ff 35 34 1b 03 c0    	push   DWORD PTR ds:0xc0031b34
c000e668:	68 0f a0 02 c0       	push   0xc002a00f
c000e66d:	6a 01                	push   0x1
c000e66f:	50                   	push   eax
c000e670:	e8 c7 f5 00 00       	call   c001dc3c <Process::Process(bool, char const*, Process*, char**)>
c000e675:	83 c4 20             	add    esp,0x20
c000e678:	68 ff 00 00 00       	push   0xff
c000e67d:	6a 00                	push   0x0
c000e67f:	68 d5 f1 00 c0       	push   0xc000f1d5
c000e684:	53                   	push   ebx
c000e685:	e8 b0 f8 00 00       	call   c001df3a <Process::createThread(void (*)(void*), void*, int)>
c000e68a:	6a 7a                	push   0x7a
c000e68c:	6a 00                	push   0x0
c000e68e:	68 98 e7 01 c0       	push   0xc001e798
c000e693:	ff 35 34 1b 03 c0    	push   DWORD PTR ds:0xc0031b34
c000e699:	e8 9c f8 00 00       	call   c001df3a <Process::createThread(void (*)(void*), void*, int)>
c000e69e:	83 c4 20             	add    esp,0x20
c000e6a1:	a3 e8 1a 03 c0       	mov    ds:0xc0031ae8,eax
c000e6a6:	c6 05 cd e5 02 c0 01 	mov    BYTE PTR ds:0xc002e5cd,0x1
c000e6ad:	e8 67 04 01 00       	call   c001eb19 <Vm::initialise8086()>
c000e6b2:	e8 ff 4b 00 00       	call   c00132b6 <Fs::initVFS()>
c000e6b7:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c000e6bc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6c4:	6a 00                	push   0x0
c000e6c6:	6a 00                	push   0x0
c000e6c8:	6a 00                	push   0x0
c000e6ca:	50                   	push   eax
c000e6cb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e6ce:	e8 f9 de 00 00       	call   c001c5cc <Sys::loadSyscalls()>
c000e6d3:	e8 d2 bd 00 00       	call   c001a4aa <Krnl::loadSystemEnv()>
c000e6d8:	83 c4 0c             	add    esp,0xc
c000e6db:	6a 3a                	push   0x3a
c000e6dd:	68 1c a0 02 c0       	push   0xc002a01c
c000e6e2:	68 25 a0 02 c0       	push   0xc002a025
c000e6e7:	e8 e4 ca 00 00       	call   c001b1d0 <Reg::readIntWithDefault(char*, char*, int)>
c000e6ec:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6ef:	e8 aa 56 00 00       	call   c0013d9e <User::loadClockSettings(int)>
c000e6f4:	58                   	pop    eax
c000e6f5:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c000e6fa:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e700:	e8 9d 5d 00 00       	call   c00144a2 <Device::loadDriversForAll()>
c000e705:	e8 e6 b8 00 00       	call   c0019ff0 <Krnl::startCPUs()>
c000e70a:	5a                   	pop    edx
c000e70b:	8b 1d c8 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5c8
c000e711:	59                   	pop    ecx
c000e712:	6a 01                	push   0x1
c000e714:	68 2d a0 02 c0       	push   0xc002a02d
c000e719:	e8 42 f0 00 00       	call   c001d760 <Thr::loadDLL(char const*, bool)>
c000e71e:	5a                   	pop    edx
c000e71f:	59                   	pop    ecx
c000e720:	53                   	push   ebx
c000e721:	50                   	push   eax
c000e722:	e8 6d f2 00 00       	call   c001d994 <Thr::executeDLL(unsigned long, void*)>
c000e727:	83 c4 10             	add    esp,0x10
c000e72a:	83 ec 0c             	sub    esp,0xc
c000e72d:	6a 02                	push   0x2
c000e72f:	e8 6a fb 00 00       	call   c001e29e <blockTask(TaskState)>
c000e734:	83 c4 10             	add    esp,0x10
c000e737:	eb f1                	jmp    c000e72a <Krnl::firstTask()+0xe0>
c000e739:	90                   	nop

c000e73a <Computer::Computer()>:
c000e73a:	83 ec 0c             	sub    esp,0xc
c000e73d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e741:	83 ec 08             	sub    esp,0x8
c000e744:	68 49 a0 02 c0       	push   0xc002a049
c000e749:	50                   	push   eax
c000e74a:	e8 f9 5d 00 00       	call   c0014548 <Device::Device(char const*)>
c000e74f:	83 c4 10             	add    esp,0x10
c000e752:	ba e8 a1 02 c0       	mov    edx,0xc002a1e8
c000e757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e75b:	89 10                	mov    DWORD PTR [eax],edx
c000e75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e761:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e76f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e77d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e783:	83 ca 04             	or     edx,0x4
c000e786:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e790:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e796:	0f b6 d0             	movzx  edx,al
c000e799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ae:	0f b6 d0             	movzx  edx,al
c000e7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7be:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7c4:	8d 50 01             	lea    edx,[eax+0x1]
c000e7c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7cb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e7d1:	0f b6 d0             	movzx  edx,al
c000e7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e7dc:	83 e1 3f             	and    ecx,0x3f
c000e7df:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ed:	0f b6 d0             	movzx  edx,al
c000e7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e805:	0f b6 d0             	movzx  edx,al
c000e808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e815:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e81b:	8d 50 01             	lea    edx,[eax+0x1]
c000e81e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e822:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e828:	0f b6 d0             	movzx  edx,al
c000e82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e833:	83 e1 3f             	and    ecx,0x3f
c000e836:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e844:	0f b6 d0             	movzx  edx,al
c000e847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84b:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e85c:	0f b6 d0             	movzx  edx,al
c000e85f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e863:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e872:	8d 50 01             	lea    edx,[eax+0x1]
c000e875:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e879:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e87f:	0f b6 d0             	movzx  edx,al
c000e882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e886:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e88a:	83 e1 3f             	and    ecx,0x3f
c000e88d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e891:	90                   	nop
c000e892:	83 c4 0c             	add    esp,0xc
c000e895:	c3                   	ret    

c000e896 <Computer::setBootMessage(char const*)>:
c000e896:	c3                   	ret    
c000e897:	90                   	nop

c000e898 <Computer::detectFeatures()>:
c000e898:	55                   	push   ebp
c000e899:	57                   	push   edi
c000e89a:	56                   	push   esi
c000e89b:	53                   	push   ebx
c000e89c:	83 ec 1c             	sub    esp,0x1c
c000e89f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8a3:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8ad:	e8 32 1a ff ff       	call   c00002e4 <detectCPUID>
c000e8b2:	85 c0                	test   eax,eax
c000e8b4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8ba:	0f 95 c2             	setne  dl
c000e8bd:	83 e0 fd             	and    eax,0xfffffffd
c000e8c0:	d1 e2                	shl    edx,1
c000e8c2:	09 d0                	or     eax,edx
c000e8c4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8ca:	a8 02                	test   al,0x2
c000e8cc:	75 46                	jne    c000e914 <Computer::detectFeatures()+0x7c>
c000e8ce:	f6 05 e1 e5 02 c0 04 	test   BYTE PTR ds:0xc002e5e1,0x4
c000e8d5:	74 07                	je     c000e8de <Computer::detectFeatures()+0x46>
c000e8d7:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e8de:	e8 d3 7d 01 00       	call   c00266b6 <x87Detect>
c000e8e3:	83 e0 01             	and    eax,0x1
c000e8e6:	c1 e0 04             	shl    eax,0x4
c000e8e9:	88 c2                	mov    dl,al
c000e8eb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8f1:	83 e0 ef             	and    eax,0xffffffef
c000e8f4:	09 d0                	or     eax,edx
c000e8f6:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8fc:	a8 10                	test   al,0x10
c000e8fe:	0f 85 2a 01 00 00    	jne    c000ea2e <Computer::detectFeatures()+0x196>
c000e904:	84 c0                	test   al,al
c000e906:	0f 88 45 01 00 00    	js     c000ea51 <Computer::detectFeatures()+0x1b9>
c000e90c:	83 c4 1c             	add    esp,0x1c
c000e90f:	5b                   	pop    ebx
c000e910:	5e                   	pop    esi
c000e911:	5f                   	pop    edi
c000e912:	5d                   	pop    ebp
c000e913:	c3                   	ret    
c000e914:	83 ec 0c             	sub    esp,0xc
c000e917:	6a 20                	push   0x20
c000e919:	e8 e4 a3 00 00       	call   c0018d02 <CPU::cpuidCheckEDX(unsigned int)>
c000e91e:	83 e0 01             	and    eax,0x1
c000e921:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e928:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e92e:	83 e0 f7             	and    eax,0xfffffff7
c000e931:	09 d0                	or     eax,edx
c000e933:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e939:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e940:	e8 bd a3 00 00       	call   c0018d02 <CPU::cpuidCheckEDX(unsigned int)>
c000e945:	83 e0 01             	and    eax,0x1
c000e948:	88 c2                	mov    dl,al
c000e94a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e950:	83 e0 fe             	and    eax,0xfffffffe
c000e953:	09 d0                	or     eax,edx
c000e955:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e95b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e962:	e8 9b a3 00 00       	call   c0018d02 <CPU::cpuidCheckEDX(unsigned int)>
c000e967:	c1 e0 07             	shl    eax,0x7
c000e96a:	88 c2                	mov    dl,al
c000e96c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e972:	83 e0 7f             	and    eax,0x7f
c000e975:	09 d0                	or     eax,edx
c000e977:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e97d:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e984:	e8 79 a3 00 00       	call   c0018d02 <CPU::cpuidCheckEDX(unsigned int)>
c000e989:	83 c4 10             	add    esp,0x10
c000e98c:	83 e0 01             	and    eax,0x1
c000e98f:	c1 e0 05             	shl    eax,0x5
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e99a:	83 e0 df             	and    eax,0xffffffdf
c000e99d:	09 d0                	or     eax,edx
c000e99f:	f7 05 e0 e5 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e5e0,0x401
c000e9a9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9af:	0f 84 c2 00 00 00    	je     c000ea77 <Computer::detectFeatures()+0x1df>
c000e9b5:	83 e0 fe             	and    eax,0xfffffffe
c000e9b8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9be:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9c4:	88 c2                	mov    dl,al
c000e9c6:	83 e2 09             	and    edx,0x9
c000e9c9:	fe ca                	dec    dl
c000e9cb:	75 09                	jne    c000e9d6 <Computer::detectFeatures()+0x13e>
c000e9cd:	83 e0 fe             	and    eax,0xfffffffe
c000e9d0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d6:	83 ec 0c             	sub    esp,0xc
c000e9d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e9dd:	50                   	push   eax
c000e9de:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e9e2:	55                   	push   ebp
c000e9e3:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e9e7:	57                   	push   edi
c000e9e8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9ec:	56                   	push   esi
c000e9ed:	68 00 00 00 80       	push   0x80000000
c000e9f2:	e8 87 a2 00 00       	call   c0018c7e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9f7:	83 c4 20             	add    esp,0x20
c000e9fa:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea05:	0f 86 c3 fe ff ff    	jbe    c000e8ce <Computer::detectFeatures()+0x36>
c000ea0b:	83 ec 0c             	sub    esp,0xc
c000ea0e:	50                   	push   eax
c000ea0f:	55                   	push   ebp
c000ea10:	57                   	push   edi
c000ea11:	56                   	push   esi
c000ea12:	68 01 00 00 80       	push   0x80000001
c000ea17:	e8 62 a2 00 00       	call   c0018c7e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea1c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea26:	83 c4 20             	add    esp,0x20
c000ea29:	e9 a0 fe ff ff       	jmp    c000e8ce <Computer::detectFeatures()+0x36>
c000ea2e:	e8 3d 7c 01 00       	call   c0026670 <absolutelyNoChanceInHell>
c000ea33:	88 c2                	mov    dl,al
c000ea35:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea3b:	c1 e2 07             	shl    edx,0x7
c000ea3e:	83 e0 7f             	and    eax,0x7f
c000ea41:	09 d0                	or     eax,edx
c000ea43:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea49:	84 c0                	test   al,al
c000ea4b:	0f 89 bb fe ff ff    	jns    c000e90c <Computer::detectFeatures()+0x74>
c000ea51:	e8 fa 7b 01 00       	call   c0026650 <avxDetect>
c000ea56:	83 e0 01             	and    eax,0x1
c000ea59:	c1 e0 05             	shl    eax,0x5
c000ea5c:	88 c2                	mov    dl,al
c000ea5e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea64:	83 e0 df             	and    eax,0xffffffdf
c000ea67:	09 d0                	or     eax,edx
c000ea69:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea6f:	83 c4 1c             	add    esp,0x1c
c000ea72:	5b                   	pop    ebx
c000ea73:	5e                   	pop    esi
c000ea74:	5f                   	pop    edi
c000ea75:	5d                   	pop    ebp
c000ea76:	c3                   	ret    
c000ea77:	83 ec 0c             	sub    esp,0xc
c000ea7a:	68 00 02 00 00       	push   0x200
c000ea7f:	e8 7e a2 00 00       	call   c0018d02 <CPU::cpuidCheckEDX(unsigned int)>
c000ea84:	83 c4 10             	add    esp,0x10
c000ea87:	83 e0 01             	and    eax,0x1
c000ea8a:	88 c2                	mov    dl,al
c000ea8c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea92:	83 e0 fe             	and    eax,0xfffffffe
c000ea95:	09 d0                	or     eax,edx
c000ea97:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea9d:	e9 1c ff ff ff       	jmp    c000e9be <Computer::detectFeatures()+0x126>

c000eaa2 <Computer::displayFeatures()>:
c000eaa2:	53                   	push   ebx
c000eaa3:	83 ec 14             	sub    esp,0x14
c000eaa6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaaa:	68 59 a0 02 c0       	push   0xc002a059
c000eaaf:	e8 7d 44 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c000eab4:	83 c4 10             	add    esp,0x10
c000eab7:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eabe:	0f 85 73 02 00 00    	jne    c000ed37 <Computer::displayFeatures()+0x295>
c000eac4:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000eac9:	83 ec 08             	sub    esp,0x8
c000eacc:	50                   	push   eax
c000eacd:	68 6c a0 02 c0       	push   0xc002a06c
c000ead2:	e8 5a 44 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c000ead7:	83 c4 10             	add    esp,0x10
c000eada:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eae1:	0f 85 8c 02 00 00    	jne    c000ed73 <Computer::displayFeatures()+0x2d1>
c000eae7:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000eaec:	83 ec 08             	sub    esp,0x8
c000eaef:	50                   	push   eax
c000eaf0:	68 7d a0 02 c0       	push   0xc002a07d
c000eaf5:	e8 37 44 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c000eafa:	83 c4 10             	add    esp,0x10
c000eafd:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb04:	0f 85 5f 02 00 00    	jne    c000ed69 <Computer::displayFeatures()+0x2c7>
c000eb0a:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000eb0f:	83 ec 08             	sub    esp,0x8
c000eb12:	50                   	push   eax
c000eb13:	68 8e a0 02 c0       	push   0xc002a08e
c000eb18:	e8 14 44 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c000eb1d:	83 c4 10             	add    esp,0x10
c000eb20:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb27:	0f 85 32 02 00 00    	jne    c000ed5f <Computer::displayFeatures()+0x2bd>
c000eb2d:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000eb32:	83 ec 08             	sub    esp,0x8
c000eb35:	50                   	push   eax
c000eb36:	68 9f a0 02 c0       	push   0xc002a09f
c000eb3b:	e8 f1 43 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c000eb40:	83 c4 10             	add    esp,0x10
c000eb43:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb4a:	0f 85 05 02 00 00    	jne    c000ed55 <Computer::displayFeatures()+0x2b3>
c000eb50:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000eb55:	83 ec 08             	sub    esp,0x8
c000eb58:	50                   	push   eax
c000eb59:	68 b0 a0 02 c0       	push   0xc002a0b0
c000eb5e:	e8 ce 43 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c000eb63:	83 c4 10             	add    esp,0x10
c000eb66:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eb6d:	0f 85 d8 01 00 00    	jne    c000ed4b <Computer::displayFeatures()+0x2a9>
c000eb73:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000eb78:	83 ec 08             	sub    esp,0x8
c000eb7b:	50                   	push   eax
c000eb7c:	68 c1 a0 02 c0       	push   0xc002a0c1
c000eb81:	e8 ab 43 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c000eb86:	83 c4 10             	add    esp,0x10
c000eb89:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000eb90:	0f 85 ab 01 00 00    	jne    c000ed41 <Computer::displayFeatures()+0x29f>
c000eb96:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000eb9b:	83 ec 08             	sub    esp,0x8
c000eb9e:	50                   	push   eax
c000eb9f:	68 d2 a0 02 c0       	push   0xc002a0d2
c000eba4:	e8 88 43 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c000eba9:	83 c4 10             	add    esp,0x10
c000ebac:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebb3:	0f 88 1b 02 00 00    	js     c000edd4 <Computer::displayFeatures()+0x332>
c000ebb9:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000ebbe:	83 ec 08             	sub    esp,0x8
c000ebc1:	50                   	push   eax
c000ebc2:	68 e3 a0 02 c0       	push   0xc002a0e3
c000ebc7:	e8 65 43 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c000ebcc:	83 c4 10             	add    esp,0x10
c000ebcf:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ebd6:	0f 85 a1 01 00 00    	jne    c000ed7d <Computer::displayFeatures()+0x2db>
c000ebdc:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000ebe1:	83 ec 08             	sub    esp,0x8
c000ebe4:	50                   	push   eax
c000ebe5:	68 f4 a0 02 c0       	push   0xc002a0f4
c000ebea:	e8 42 43 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c000ebef:	83 c4 10             	add    esp,0x10
c000ebf2:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ebf9:	0f 85 cb 01 00 00    	jne    c000edca <Computer::displayFeatures()+0x328>
c000ebff:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000ec04:	83 ec 08             	sub    esp,0x8
c000ec07:	50                   	push   eax
c000ec08:	68 05 a1 02 c0       	push   0xc002a105
c000ec0d:	e8 1f 43 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c000ec12:	83 c4 10             	add    esp,0x10
c000ec15:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec1c:	0f 85 9e 01 00 00    	jne    c000edc0 <Computer::displayFeatures()+0x31e>
c000ec22:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000ec27:	83 ec 08             	sub    esp,0x8
c000ec2a:	50                   	push   eax
c000ec2b:	68 16 a1 02 c0       	push   0xc002a116
c000ec30:	e8 fc 42 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c000ec35:	83 c4 10             	add    esp,0x10
c000ec38:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec3f:	0f 85 71 01 00 00    	jne    c000edb6 <Computer::displayFeatures()+0x314>
c000ec45:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000ec4a:	83 ec 08             	sub    esp,0x8
c000ec4d:	50                   	push   eax
c000ec4e:	68 27 a1 02 c0       	push   0xc002a127
c000ec53:	e8 d9 42 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c000ec58:	83 c4 10             	add    esp,0x10
c000ec5b:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec62:	0f 85 44 01 00 00    	jne    c000edac <Computer::displayFeatures()+0x30a>
c000ec68:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000ec6d:	83 ec 08             	sub    esp,0x8
c000ec70:	50                   	push   eax
c000ec71:	68 38 a1 02 c0       	push   0xc002a138
c000ec76:	e8 b6 42 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c000ec7b:	83 c4 10             	add    esp,0x10
c000ec7e:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ec85:	0f 85 17 01 00 00    	jne    c000eda2 <Computer::displayFeatures()+0x300>
c000ec8b:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000ec90:	83 ec 08             	sub    esp,0x8
c000ec93:	50                   	push   eax
c000ec94:	68 49 a1 02 c0       	push   0xc002a149
c000ec99:	e8 93 42 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c000ec9e:	83 c4 10             	add    esp,0x10
c000eca1:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000eca8:	0f 85 ea 00 00 00    	jne    c000ed98 <Computer::displayFeatures()+0x2f6>
c000ecae:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000ecb3:	83 ec 08             	sub    esp,0x8
c000ecb6:	50                   	push   eax
c000ecb7:	68 5a a1 02 c0       	push   0xc002a15a
c000ecbc:	e8 70 42 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c000ecc1:	83 c4 10             	add    esp,0x10
c000ecc4:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000eccb:	0f 88 0d 01 00 00    	js     c000edde <Computer::displayFeatures()+0x33c>
c000ecd1:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000ecd6:	83 ec 08             	sub    esp,0x8
c000ecd9:	50                   	push   eax
c000ecda:	68 6b a1 02 c0       	push   0xc002a16b
c000ecdf:	e8 4d 42 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c000ece4:	83 c4 10             	add    esp,0x10
c000ece7:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ecee:	0f 85 9a 00 00 00    	jne    c000ed8e <Computer::displayFeatures()+0x2ec>
c000ecf4:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000ecf9:	83 ec 08             	sub    esp,0x8
c000ecfc:	50                   	push   eax
c000ecfd:	68 7c a1 02 c0       	push   0xc002a17c
c000ed02:	e8 2a 42 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c000ed07:	83 c4 10             	add    esp,0x10
c000ed0a:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed11:	75 74                	jne    c000ed87 <Computer::displayFeatures()+0x2e5>
c000ed13:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000ed18:	83 ec 08             	sub    esp,0x8
c000ed1b:	50                   	push   eax
c000ed1c:	68 8d a1 02 c0       	push   0xc002a18d
c000ed21:	e8 0b 42 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c000ed26:	c7 44 24 20 3c bc 02 c0 	mov    DWORD PTR [esp+0x20],0xc002bc3c
c000ed2e:	83 c4 18             	add    esp,0x18
c000ed31:	5b                   	pop    ebx
c000ed32:	e9 fa 41 00 00       	jmp    c0012f31 <Dbg::kprintf(char const*, ...)>
c000ed37:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000ed3c:	e9 88 fd ff ff       	jmp    c000eac9 <Computer::displayFeatures()+0x27>
c000ed41:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000ed46:	e9 50 fe ff ff       	jmp    c000eb9b <Computer::displayFeatures()+0xf9>
c000ed4b:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000ed50:	e9 23 fe ff ff       	jmp    c000eb78 <Computer::displayFeatures()+0xd6>
c000ed55:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000ed5a:	e9 f6 fd ff ff       	jmp    c000eb55 <Computer::displayFeatures()+0xb3>
c000ed5f:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000ed64:	e9 c9 fd ff ff       	jmp    c000eb32 <Computer::displayFeatures()+0x90>
c000ed69:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000ed6e:	e9 9c fd ff ff       	jmp    c000eb0f <Computer::displayFeatures()+0x6d>
c000ed73:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000ed78:	e9 6f fd ff ff       	jmp    c000eaec <Computer::displayFeatures()+0x4a>
c000ed7d:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000ed82:	e9 5a fe ff ff       	jmp    c000ebe1 <Computer::displayFeatures()+0x13f>
c000ed87:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000ed8c:	eb 8a                	jmp    c000ed18 <Computer::displayFeatures()+0x276>
c000ed8e:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000ed93:	e9 61 ff ff ff       	jmp    c000ecf9 <Computer::displayFeatures()+0x257>
c000ed98:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000ed9d:	e9 11 ff ff ff       	jmp    c000ecb3 <Computer::displayFeatures()+0x211>
c000eda2:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000eda7:	e9 e4 fe ff ff       	jmp    c000ec90 <Computer::displayFeatures()+0x1ee>
c000edac:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000edb1:	e9 b7 fe ff ff       	jmp    c000ec6d <Computer::displayFeatures()+0x1cb>
c000edb6:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000edbb:	e9 8a fe ff ff       	jmp    c000ec4a <Computer::displayFeatures()+0x1a8>
c000edc0:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000edc5:	e9 5d fe ff ff       	jmp    c000ec27 <Computer::displayFeatures()+0x185>
c000edca:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000edcf:	e9 30 fe ff ff       	jmp    c000ec04 <Computer::displayFeatures()+0x162>
c000edd4:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000edd9:	e9 e0 fd ff ff       	jmp    c000ebbe <Computer::displayFeatures()+0x11c>
c000edde:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000ede3:	e9 ee fe ff ff       	jmp    c000ecd6 <Computer::displayFeatures()+0x234>

c000ede8 <Computer::rdmsr(unsigned int)>:
c000ede8:	83 ec 0c             	sub    esp,0xc
c000edeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edef:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edf6:	74 0a                	je     c000ee02 <Computer::rdmsr(unsigned int)+0x1a>
c000edf8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edfc:	0f 32                	rdmsr  
c000edfe:	83 c4 0c             	add    esp,0xc
c000ee01:	c3                   	ret    
c000ee02:	83 ec 0c             	sub    esp,0xc
c000ee05:	68 9e a1 02 c0       	push   0xc002a19e
c000ee0a:	e8 d4 b7 00 00       	call   c001a5e3 <Krnl::panic(char const*)>
c000ee0f:	83 c4 10             	add    esp,0x10
c000ee12:	eb e4                	jmp    c000edf8 <Computer::rdmsr(unsigned int)+0x10>

c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee14:	57                   	push   edi
c000ee15:	56                   	push   esi
c000ee16:	52                   	push   edx
c000ee17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee1b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee1f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee23:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee2a:	74 0e                	je     c000ee3a <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee2c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee30:	89 f0                	mov    eax,esi
c000ee32:	89 fa                	mov    edx,edi
c000ee34:	0f 30                	wrmsr  
c000ee36:	58                   	pop    eax
c000ee37:	5e                   	pop    esi
c000ee38:	5f                   	pop    edi
c000ee39:	c3                   	ret    
c000ee3a:	83 ec 0c             	sub    esp,0xc
c000ee3d:	68 a4 a1 02 c0       	push   0xc002a1a4
c000ee42:	e8 9c b7 00 00       	call   c001a5e3 <Krnl::panic(char const*)>
c000ee47:	83 c4 10             	add    esp,0x10
c000ee4a:	eb e0                	jmp    c000ee2c <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee4c <Computer::nmiEnabled()>:
c000ee4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee50:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee56:	c3                   	ret    
c000ee57:	90                   	nop

c000ee58 <Computer::readCMOS(unsigned char)>:
c000ee58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee5c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee63:	19 c0                	sbb    eax,eax
c000ee65:	83 e0 80             	and    eax,0xffffff80
c000ee68:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee6c:	e6 70                	out    0x70,al
c000ee6e:	e4 71                	in     al,0x71
c000ee70:	c3                   	ret    
c000ee71:	90                   	nop

c000ee72 <Computer::enableNMI(bool)>:
c000ee72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee7a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee80:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee88:	eb ce                	jmp    c000ee58 <Computer::readCMOS(unsigned char)>

c000ee8a <Computer::open(int, int, void*)>:
c000ee8a:	56                   	push   esi
c000ee8b:	53                   	push   ebx
c000ee8c:	83 ec 10             	sub    esp,0x10
c000ee8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee93:	f6 05 e0 e5 02 c0 04 	test   BYTE PTR ds:0xc002e5e0,0x4
c000ee9a:	68 68 12 00 00       	push   0x1268
c000ee9f:	0f 94 05 04 d5 02 c0 	sete   BYTE PTR ds:0xc002d504
c000eea6:	e8 95 09 00 00       	call   c000f840 <malloc>
c000eeab:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeae:	89 c6                	mov    esi,eax
c000eeb0:	e8 1d 93 00 00       	call   c00181d2 <ACPI::ACPI()>
c000eeb5:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eebb:	58                   	pop    eax
c000eebc:	5a                   	pop    edx
c000eebd:	56                   	push   esi
c000eebe:	53                   	push   ebx
c000eebf:	e8 94 54 00 00       	call   c0014358 <Device::addChild(Device*)>
c000eec4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eec7:	e8 cc f9 ff ff       	call   c000e898 <Computer::detectFeatures()>
c000eecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecf:	e8 ce fb ff ff       	call   c000eaa2 <Computer::displayFeatures()>
c000eed4:	59                   	pop    ecx
c000eed5:	5e                   	pop    esi
c000eed6:	6a 01                	push   0x1
c000eed8:	53                   	push   ebx
c000eed9:	e8 94 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000eede:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eee5:	e8 56 09 00 00       	call   c000f840 <malloc>
c000eeea:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeed:	89 c6                	mov    esi,eax
c000eeef:	e8 c6 9e 00 00       	call   c0018dba <CPU::CPU()>
c000eef4:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eefa:	58                   	pop    eax
c000eefb:	5a                   	pop    edx
c000eefc:	56                   	push   esi
c000eefd:	53                   	push   ebx
c000eefe:	e8 55 54 00 00       	call   c0014358 <Device::addChild(Device*)>
c000ef03:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef09:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef0f:	6a 00                	push   0x0
c000ef11:	6a 00                	push   0x0
c000ef13:	50                   	push   eax
c000ef14:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef17:	83 c4 20             	add    esp,0x20
c000ef1a:	e8 bf 59 00 00       	call   c00148de <setupFPU()>
c000ef1f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef25:	85 c0                	test   eax,eax
c000ef27:	74 1f                	je     c000ef48 <Computer::open(int, int, void*)+0xbe>
c000ef29:	83 ec 08             	sub    esp,0x8
c000ef2c:	50                   	push   eax
c000ef2d:	53                   	push   ebx
c000ef2e:	e8 25 54 00 00       	call   c0014358 <Device::addChild(Device*)>
c000ef33:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef39:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef3b:	6a 00                	push   0x0
c000ef3d:	6a 00                	push   0x0
c000ef3f:	6a 00                	push   0x0
c000ef41:	50                   	push   eax
c000ef42:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef45:	83 c4 20             	add    esp,0x20
c000ef48:	83 ec 0c             	sub    esp,0xc
c000ef4b:	68 4a e6 00 c0       	push   0xc000e64a
c000ef50:	e8 e5 f0 00 00       	call   c001e03a <setupMultitasking(void (*)())>
c000ef55:	83 c4 14             	add    esp,0x14
c000ef58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef5d:	5b                   	pop    ebx
c000ef5e:	5e                   	pop    esi
c000ef5f:	c3                   	ret    

c000ef60 <Computer::disableNMI()>:
c000ef60:	6a 00                	push   0x0
c000ef62:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef66:	e8 07 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000ef6b:	58                   	pop    eax
c000ef6c:	5a                   	pop    edx
c000ef6d:	c3                   	ret    

c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef72:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef79:	19 c0                	sbb    eax,eax
c000ef7b:	83 e0 80             	and    eax,0xffffff80
c000ef7e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef82:	e6 70                	out    0x70,al
c000ef84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef88:	e6 71                	out    0x71,al
c000ef8a:	c3                   	ret    
c000ef8b:	90                   	nop

c000ef8c <Computer::handleNMI()>:
c000ef8c:	56                   	push   esi
c000ef8d:	53                   	push   ebx
c000ef8e:	83 ec 10             	sub    esp,0x10
c000ef91:	e4 92                	in     al,0x92
c000ef93:	89 c6                	mov    esi,eax
c000ef95:	e4 61                	in     al,0x61
c000ef97:	68 aa a1 02 c0       	push   0xc002a1aa
c000ef9c:	88 c3                	mov    bl,al
c000ef9e:	e8 8e 3f 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c000efa3:	83 c4 10             	add    esp,0x10
c000efa6:	83 e6 10             	and    esi,0x10
c000efa9:	75 0d                	jne    c000efb8 <Computer::handleNMI()+0x2c>
c000efab:	f6 c3 40             	test   bl,0x40
c000efae:	75 1d                	jne    c000efcd <Computer::handleNMI()+0x41>
c000efb0:	84 db                	test   bl,bl
c000efb2:	78 2d                	js     c000efe1 <Computer::handleNMI()+0x55>
c000efb4:	58                   	pop    eax
c000efb5:	5b                   	pop    ebx
c000efb6:	5e                   	pop    esi
c000efb7:	c3                   	ret    
c000efb8:	83 ec 0c             	sub    esp,0xc
c000efbb:	68 bb a1 02 c0       	push   0xc002a1bb
c000efc0:	e8 1e b6 00 00       	call   c001a5e3 <Krnl::panic(char const*)>
c000efc5:	83 c4 10             	add    esp,0x10
c000efc8:	f6 c3 40             	test   bl,0x40
c000efcb:	74 e3                	je     c000efb0 <Computer::handleNMI()+0x24>
c000efcd:	83 ec 0c             	sub    esp,0xc
c000efd0:	68 c8 a1 02 c0       	push   0xc002a1c8
c000efd5:	e8 09 b6 00 00       	call   c001a5e3 <Krnl::panic(char const*)>
c000efda:	83 c4 10             	add    esp,0x10
c000efdd:	84 db                	test   bl,bl
c000efdf:	79 d3                	jns    c000efb4 <Computer::handleNMI()+0x28>
c000efe1:	c7 44 24 10 d2 a1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a1d2
c000efe9:	5a                   	pop    edx
c000efea:	5b                   	pop    ebx
c000efeb:	5e                   	pop    esi
c000efec:	e9 f2 b5 00 00       	jmp    c001a5e3 <Krnl::panic(char const*)>
c000eff1:	90                   	nop

c000eff2 <Computer::setDiskActivityLight(int, bool)>:
c000eff2:	56                   	push   esi
c000eff3:	53                   	push   ebx
c000eff4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eff8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000effd:	77 1b                	ja     c000f01a <Computer::setDiskActivityLight(int, bool)+0x28>
c000efff:	e4 92                	in     al,0x92
c000f001:	bb 40 00 00 00       	mov    ebx,0x40
c000f006:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f00a:	89 da                	mov    edx,ebx
c000f00c:	d3 e2                	shl    edx,cl
c000f00e:	89 f1                	mov    ecx,esi
c000f010:	f7 d2                	not    edx
c000f012:	d3 e3                	shl    ebx,cl
c000f014:	21 d0                	and    eax,edx
c000f016:	09 d8                	or     eax,ebx
c000f018:	e6 92                	out    0x92,al
c000f01a:	5b                   	pop    ebx
c000f01b:	5e                   	pop    esi
c000f01c:	c3                   	ret    
c000f01d:	90                   	nop

c000f01e <GDTEntry::setBase(unsigned int)>:
c000f01e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f022:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f026:	89 c1                	mov    ecx,eax
c000f028:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f02c:	c1 e9 10             	shr    ecx,0x10
c000f02f:	c1 e8 18             	shr    eax,0x18
c000f032:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f035:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f038:	c3                   	ret    
c000f039:	90                   	nop

c000f03a <GDTEntry::setLimit(unsigned int)>:
c000f03a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f03e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f042:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f045:	66 89 01             	mov    WORD PTR [ecx],ax
c000f048:	83 e2 f0             	and    edx,0xfffffff0
c000f04b:	c1 e8 10             	shr    eax,0x10
c000f04e:	83 e0 0f             	and    eax,0xf
c000f051:	09 d0                	or     eax,edx
c000f053:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f056:	c3                   	ret    
c000f057:	90                   	nop

c000f058 <GDT::GDT()>:
c000f058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f05c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f066:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f06c:	90                   	nop
c000f06d:	c3                   	ret    

c000f06e <GDT::addEntry(GDTEntry)>:
c000f06e:	53                   	push   ebx
c000f06f:	83 ec 0c             	sub    esp,0xc
c000f072:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f076:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f078:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f07f:	52                   	push   edx
c000f080:	50                   	push   eax
c000f081:	68 0c a2 02 c0       	push   0xc002a20c
c000f086:	e8 a6 3e 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c000f08b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f08d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f091:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f095:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f099:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f09d:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a0:	c1 e0 03             	shl    eax,0x3
c000f0a3:	89 13                	mov    DWORD PTR [ebx],edx
c000f0a5:	83 c4 18             	add    esp,0x18
c000f0a8:	5b                   	pop    ebx
c000f0a9:	c3                   	ret    

c000f0aa <GDT::getNumberOfEntries()>:
c000f0aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b0:	c3                   	ret    
c000f0b1:	90                   	nop

c000f0b2 <GDT::flush()>:
c000f0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0b8:	83 c0 04             	add    eax,0x4
c000f0bb:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0c2:	a3 d2 e5 02 c0       	mov    ds:0xc002e5d2,eax
c000f0c7:	66 89 15 d0 e5 02 c0 	mov    WORD PTR ds:0xc002e5d0,dx
c000f0ce:	e9 75 13 ff ff       	jmp    c0000448 <loadGDT>
c000f0d3:	90                   	nop

c000f0d4 <GDT::setup()>:
c000f0d4:	55                   	push   ebp
c000f0d5:	57                   	push   edi
c000f0d6:	56                   	push   esi
c000f0d7:	53                   	push   ebx
c000f0d8:	83 ec 3c             	sub    esp,0x3c
c000f0db:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0df:	6a 00                	push   0x0
c000f0e1:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0e5:	53                   	push   ebx
c000f0e6:	e8 33 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f0eb:	6a 00                	push   0x0
c000f0ed:	53                   	push   ebx
c000f0ee:	e8 47 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f0f3:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f0fb:	6a 00                	push   0x0
c000f0fd:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f101:	53                   	push   ebx
c000f102:	e8 17 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f107:	68 ff ff ff 00       	push   0xffffff
c000f10c:	53                   	push   ebx
c000f10d:	e8 28 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f112:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f116:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f11b:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f120:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f124:	83 c4 20             	add    esp,0x20
c000f127:	6a 00                	push   0x0
c000f129:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f12d:	53                   	push   ebx
c000f12e:	e8 eb fe ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f133:	68 ff ff ff 00       	push   0xffffff
c000f138:	53                   	push   ebx
c000f139:	e8 fc fe ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f13e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f142:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f146:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f14a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f14e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f152:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f157:	0d 00 92 c0 00       	or     eax,0xc09200
c000f15c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f160:	89 d8                	mov    eax,ebx
c000f162:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f166:	80 cc 60             	or     ah,0x60
c000f169:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f16d:	83 c4 0c             	add    esp,0xc
c000f170:	89 f8                	mov    eax,edi
c000f172:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f176:	80 cc 60             	or     ah,0x60
c000f179:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f17d:	89 c7                	mov    edi,eax
c000f17f:	55                   	push   ebp
c000f180:	e8 e9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f185:	83 c4 0c             	add    esp,0xc
c000f188:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f18c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f190:	55                   	push   ebp
c000f191:	e8 d8 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f196:	83 c4 0c             	add    esp,0xc
c000f199:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f19d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a1:	55                   	push   ebp
c000f1a2:	e8 c7 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1a7:	83 c4 0c             	add    esp,0xc
c000f1aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1b2:	53                   	push   ebx
c000f1b3:	51                   	push   ecx
c000f1b4:	55                   	push   ebp
c000f1b5:	e8 b4 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1ba:	83 c4 0c             	add    esp,0xc
c000f1bd:	57                   	push   edi
c000f1be:	56                   	push   esi
c000f1bf:	55                   	push   ebp
c000f1c0:	e8 a9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1c8:	e8 e5 fe ff ff       	call   c000f0b2 <GDT::flush()>
c000f1cd:	83 c4 4c             	add    esp,0x4c
c000f1d0:	5b                   	pop    ebx
c000f1d1:	5e                   	pop    esi
c000f1d2:	5f                   	pop    edi
c000f1d3:	5d                   	pop    ebp
c000f1d4:	c3                   	ret    

c000f1d5 <idleFunction(void*)>:
c000f1d5:	53                   	push   ebx
c000f1d6:	83 ec 08             	sub    esp,0x8
c000f1d9:	e8 2c ec 00 00       	call   c001de0a <unlockScheduler()>
c000f1de:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c000f1e3:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1e9:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1f0:	74 3c                	je     c000f22e <idleFunction(void*)+0x59>
c000f1f2:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f1f9:	74 33                	je     c000f22e <idleFunction(void*)+0x59>
c000f1fb:	31 db                	xor    ebx,ebx
c000f1fd:	52                   	push   edx
c000f1fe:	52                   	push   edx
c000f1ff:	68 e1 00 00 00       	push   0xe1
c000f204:	50                   	push   eax
c000f205:	e8 de fb ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c000f20a:	53                   	push   ebx
c000f20b:	83 e0 02             	and    eax,0x2
c000f20e:	50                   	push   eax
c000f20f:	68 e1 00 00 00       	push   0xe1
c000f214:	ff 35 c8 e5 02 c0    	push   DWORD PTR ds:0xc002e5c8
c000f21a:	e8 f5 fb ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f21f:	83 c4 20             	add    esp,0x20
c000f222:	e8 58 10 ff ff       	call   c000027f <doTPAUSE>
c000f227:	e8 c4 94 01 00       	call   c00286f0 <idleCommon()>
c000f22c:	eb f4                	jmp    c000f222 <idleFunction(void*)+0x4d>
c000f22e:	fb                   	sti    
c000f22f:	f4                   	hlt    
c000f230:	e8 bb 94 01 00       	call   c00286f0 <idleCommon()>
c000f235:	eb f7                	jmp    c000f22e <idleFunction(void*)+0x59>
c000f237:	90                   	nop

c000f238 <IDTEntry::IDTEntry(bool)>:
c000f238:	83 ec 04             	sub    esp,0x4
c000f23b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f23f:	88 04 24             	mov    BYTE PTR [esp],al
c000f242:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f246:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f24c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f250:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f258:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f25b:	83 e2 f0             	and    edx,0xfffffff0
c000f25e:	83 ca 0e             	or     edx,0xe
c000f261:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f264:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f268:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f26b:	83 e2 ef             	and    edx,0xffffffef
c000f26e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f271:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f275:	74 04                	je     c000f27b <IDTEntry::IDTEntry(bool)+0x43>
c000f277:	b2 03                	mov    dl,0x3
c000f279:	eb 02                	jmp    c000f27d <IDTEntry::IDTEntry(bool)+0x45>
c000f27b:	b2 00                	mov    dl,0x0
c000f27d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f281:	83 e2 03             	and    edx,0x3
c000f284:	88 d1                	mov    cl,dl
c000f286:	c1 e1 05             	shl    ecx,0x5
c000f289:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f28c:	83 e2 9f             	and    edx,0xffffff9f
c000f28f:	09 ca                	or     edx,ecx
c000f291:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f29b:	83 ca 80             	or     edx,0xffffff80
c000f29e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2a1:	90                   	nop
c000f2a2:	83 c4 04             	add    esp,0x4
c000f2a5:	c3                   	ret    

c000f2a6 <IDTEntry::setOffset(unsigned int)>:
c000f2a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ae:	66 89 02             	mov    WORD PTR [edx],ax
c000f2b1:	c1 e8 10             	shr    eax,0x10
c000f2b4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2b8:	c3                   	ret    
c000f2b9:	90                   	nop

c000f2ba <IDT::IDT()>:
c000f2ba:	90                   	nop
c000f2bb:	c3                   	ret    

c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c0:	83 c0 30             	add    eax,0x30
c000f2c3:	c3                   	ret    

c000f2c4 <IDT::addEntry(IDTEntry, int)>:
c000f2c4:	53                   	push   ebx
c000f2c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2d5:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2d8:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2dc:	5b                   	pop    ebx
c000f2dd:	c3                   	ret    

c000f2de <IDT::addEntry(int, void (*)(), bool)>:
c000f2de:	53                   	push   ebx
c000f2df:	83 ec 10             	sub    esp,0x10
c000f2e2:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2e7:	50                   	push   eax
c000f2e8:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2ec:	53                   	push   ebx
c000f2ed:	e8 46 ff ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f2f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2f6:	53                   	push   ebx
c000f2f7:	e8 aa ff ff ff       	call   c000f2a6 <IDTEntry::setOffset(unsigned int)>
c000f2fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f300:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f304:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f30c:	e8 b3 ff ff ff       	call   c000f2c4 <IDT::addEntry(IDTEntry, int)>
c000f311:	83 c4 30             	add    esp,0x30
c000f314:	5b                   	pop    ebx
c000f315:	c3                   	ret    

c000f316 <IDT::flush()>:
c000f316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f31a:	66 c7 05 d8 e5 02 c0 ff 07 	mov    WORD PTR ds:0xc002e5d8,0x7ff
c000f323:	a3 da e5 02 c0       	mov    ds:0xc002e5da,eax
c000f328:	0f 01 1d d8 e5 02 c0 	lidtd  ds:0xc002e5d8
c000f32f:	c3                   	ret    

c000f330 <IDT::setup()>:
c000f330:	57                   	push   edi
c000f331:	56                   	push   esi
c000f332:	53                   	push   ebx
c000f333:	83 ec 10             	sub    esp,0x10
c000f336:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f33a:	6a 00                	push   0x0
c000f33c:	68 68 04 00 c0       	push   0xc0000468
c000f341:	6a 00                	push   0x0
c000f343:	53                   	push   ebx
c000f344:	e8 95 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f349:	6a 00                	push   0x0
c000f34b:	68 78 04 00 c0       	push   0xc0000478
c000f350:	6a 01                	push   0x1
c000f352:	53                   	push   ebx
c000f353:	e8 86 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f358:	83 c4 20             	add    esp,0x20
c000f35b:	6a 00                	push   0x0
c000f35d:	68 82 04 00 c0       	push   0xc0000482
c000f362:	6a 02                	push   0x2
c000f364:	53                   	push   ebx
c000f365:	e8 74 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f36a:	6a 00                	push   0x0
c000f36c:	68 8c 04 00 c0       	push   0xc000048c
c000f371:	6a 03                	push   0x3
c000f373:	53                   	push   ebx
c000f374:	e8 65 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f379:	83 c4 20             	add    esp,0x20
c000f37c:	6a 00                	push   0x0
c000f37e:	68 96 04 00 c0       	push   0xc0000496
c000f383:	6a 04                	push   0x4
c000f385:	53                   	push   ebx
c000f386:	e8 53 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f38b:	6a 00                	push   0x0
c000f38d:	68 a0 04 00 c0       	push   0xc00004a0
c000f392:	6a 05                	push   0x5
c000f394:	53                   	push   ebx
c000f395:	e8 44 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f39a:	83 c4 20             	add    esp,0x20
c000f39d:	6a 00                	push   0x0
c000f39f:	68 aa 04 00 c0       	push   0xc00004aa
c000f3a4:	6a 06                	push   0x6
c000f3a6:	53                   	push   ebx
c000f3a7:	e8 32 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ac:	6a 00                	push   0x0
c000f3ae:	68 b4 04 00 c0       	push   0xc00004b4
c000f3b3:	6a 07                	push   0x7
c000f3b5:	53                   	push   ebx
c000f3b6:	e8 23 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3bb:	83 c4 20             	add    esp,0x20
c000f3be:	6a 00                	push   0x0
c000f3c0:	68 be 04 00 c0       	push   0xc00004be
c000f3c5:	6a 08                	push   0x8
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 11 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3cd:	6a 00                	push   0x0
c000f3cf:	68 c6 04 00 c0       	push   0xc00004c6
c000f3d4:	6a 09                	push   0x9
c000f3d6:	53                   	push   ebx
c000f3d7:	e8 02 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3dc:	83 c4 20             	add    esp,0x20
c000f3df:	6a 00                	push   0x0
c000f3e1:	68 d0 04 00 c0       	push   0xc00004d0
c000f3e6:	6a 0a                	push   0xa
c000f3e8:	53                   	push   ebx
c000f3e9:	e8 f0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ee:	6a 00                	push   0x0
c000f3f0:	68 d8 04 00 c0       	push   0xc00004d8
c000f3f5:	6a 0b                	push   0xb
c000f3f7:	53                   	push   ebx
c000f3f8:	e8 e1 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3fd:	83 c4 20             	add    esp,0x20
c000f400:	6a 00                	push   0x0
c000f402:	68 e0 04 00 c0       	push   0xc00004e0
c000f407:	6a 0c                	push   0xc
c000f409:	53                   	push   ebx
c000f40a:	e8 cf fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f40f:	6a 00                	push   0x0
c000f411:	68 e8 04 00 c0       	push   0xc00004e8
c000f416:	6a 0d                	push   0xd
c000f418:	53                   	push   ebx
c000f419:	e8 c0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f41e:	83 c4 20             	add    esp,0x20
c000f421:	6a 00                	push   0x0
c000f423:	68 f0 04 00 c0       	push   0xc00004f0
c000f428:	6a 0e                	push   0xe
c000f42a:	53                   	push   ebx
c000f42b:	e8 ae fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f430:	6a 00                	push   0x0
c000f432:	68 f8 04 00 c0       	push   0xc00004f8
c000f437:	6a 0f                	push   0xf
c000f439:	53                   	push   ebx
c000f43a:	e8 9f fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f43f:	83 c4 20             	add    esp,0x20
c000f442:	6a 00                	push   0x0
c000f444:	68 02 05 00 c0       	push   0xc0000502
c000f449:	6a 10                	push   0x10
c000f44b:	53                   	push   ebx
c000f44c:	e8 8d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f451:	6a 00                	push   0x0
c000f453:	68 0c 05 00 c0       	push   0xc000050c
c000f458:	6a 11                	push   0x11
c000f45a:	53                   	push   ebx
c000f45b:	e8 7e fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f460:	83 c4 20             	add    esp,0x20
c000f463:	6a 00                	push   0x0
c000f465:	68 16 05 00 c0       	push   0xc0000516
c000f46a:	6a 12                	push   0x12
c000f46c:	53                   	push   ebx
c000f46d:	e8 6c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f472:	6a 01                	push   0x1
c000f474:	68 b0 05 00 c0       	push   0xc00005b0
c000f479:	6a 60                	push   0x60
c000f47b:	53                   	push   ebx
c000f47c:	e8 5d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f481:	83 c4 20             	add    esp,0x20
c000f484:	6a 00                	push   0x0
c000f486:	68 b7 05 00 c0       	push   0xc00005b7
c000f48b:	6a 20                	push   0x20
c000f48d:	53                   	push   ebx
c000f48e:	e8 4b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f493:	6a 00                	push   0x0
c000f495:	68 a2 05 00 c0       	push   0xc00005a2
c000f49a:	6a 21                	push   0x21
c000f49c:	53                   	push   ebx
c000f49d:	e8 3c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4a2:	83 c4 20             	add    esp,0x20
c000f4a5:	6a 00                	push   0x0
c000f4a7:	68 a9 05 00 c0       	push   0xc00005a9
c000f4ac:	6a 22                	push   0x22
c000f4ae:	53                   	push   ebx
c000f4af:	e8 2a fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4b4:	6a 00                	push   0x0
c000f4b6:	68 20 05 00 c0       	push   0xc0000520
c000f4bb:	6a 23                	push   0x23
c000f4bd:	53                   	push   ebx
c000f4be:	e8 1b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4c3:	83 c4 20             	add    esp,0x20
c000f4c6:	6a 00                	push   0x0
c000f4c8:	68 2a 05 00 c0       	push   0xc000052a
c000f4cd:	6a 24                	push   0x24
c000f4cf:	53                   	push   ebx
c000f4d0:	e8 09 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4d5:	6a 00                	push   0x0
c000f4d7:	68 34 05 00 c0       	push   0xc0000534
c000f4dc:	6a 25                	push   0x25
c000f4de:	53                   	push   ebx
c000f4df:	e8 fa fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4e4:	83 c4 20             	add    esp,0x20
c000f4e7:	6a 00                	push   0x0
c000f4e9:	68 3e 05 00 c0       	push   0xc000053e
c000f4ee:	6a 26                	push   0x26
c000f4f0:	53                   	push   ebx
c000f4f1:	e8 e8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4f6:	6a 00                	push   0x0
c000f4f8:	68 48 05 00 c0       	push   0xc0000548
c000f4fd:	6a 27                	push   0x27
c000f4ff:	53                   	push   ebx
c000f500:	e8 d9 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f505:	83 c4 20             	add    esp,0x20
c000f508:	6a 00                	push   0x0
c000f50a:	68 52 05 00 c0       	push   0xc0000552
c000f50f:	6a 28                	push   0x28
c000f511:	53                   	push   ebx
c000f512:	e8 c7 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f517:	6a 00                	push   0x0
c000f519:	68 5c 05 00 c0       	push   0xc000055c
c000f51e:	6a 29                	push   0x29
c000f520:	53                   	push   ebx
c000f521:	e8 b8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f526:	83 c4 20             	add    esp,0x20
c000f529:	6a 00                	push   0x0
c000f52b:	68 66 05 00 c0       	push   0xc0000566
c000f530:	6a 2a                	push   0x2a
c000f532:	53                   	push   ebx
c000f533:	e8 a6 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f538:	6a 00                	push   0x0
c000f53a:	68 70 05 00 c0       	push   0xc0000570
c000f53f:	6a 2b                	push   0x2b
c000f541:	53                   	push   ebx
c000f542:	e8 97 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f547:	83 c4 20             	add    esp,0x20
c000f54a:	6a 00                	push   0x0
c000f54c:	68 7a 05 00 c0       	push   0xc000057a
c000f551:	6a 2c                	push   0x2c
c000f553:	53                   	push   ebx
c000f554:	e8 85 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f559:	6a 00                	push   0x0
c000f55b:	68 84 05 00 c0       	push   0xc0000584
c000f560:	6a 2d                	push   0x2d
c000f562:	53                   	push   ebx
c000f563:	e8 76 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f568:	83 c4 20             	add    esp,0x20
c000f56b:	6a 00                	push   0x0
c000f56d:	68 8e 05 00 c0       	push   0xc000058e
c000f572:	6a 2e                	push   0x2e
c000f574:	53                   	push   ebx
c000f575:	e8 64 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f57a:	6a 00                	push   0x0
c000f57c:	68 98 05 00 c0       	push   0xc0000598
c000f581:	6a 2f                	push   0x2f
c000f583:	53                   	push   ebx
c000f584:	e8 55 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f589:	83 c4 20             	add    esp,0x20
c000f58c:	6a 00                	push   0x0
c000f58e:	68 ed 05 00 c0       	push   0xc00005ed
c000f593:	6a 30                	push   0x30
c000f595:	53                   	push   ebx
c000f596:	e8 43 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f59b:	6a 00                	push   0x0
c000f59d:	68 f7 05 00 c0       	push   0xc00005f7
c000f5a2:	6a 31                	push   0x31
c000f5a4:	53                   	push   ebx
c000f5a5:	e8 34 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5aa:	83 c4 20             	add    esp,0x20
c000f5ad:	6a 00                	push   0x0
c000f5af:	68 01 06 00 c0       	push   0xc0000601
c000f5b4:	6a 32                	push   0x32
c000f5b6:	53                   	push   ebx
c000f5b7:	e8 22 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5bc:	6a 00                	push   0x0
c000f5be:	68 0b 06 00 c0       	push   0xc000060b
c000f5c3:	6a 33                	push   0x33
c000f5c5:	53                   	push   ebx
c000f5c6:	e8 13 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5cb:	83 c4 20             	add    esp,0x20
c000f5ce:	6a 00                	push   0x0
c000f5d0:	68 15 06 00 c0       	push   0xc0000615
c000f5d5:	6a 34                	push   0x34
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 01 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5dd:	6a 00                	push   0x0
c000f5df:	68 1f 06 00 c0       	push   0xc000061f
c000f5e4:	6a 35                	push   0x35
c000f5e6:	53                   	push   ebx
c000f5e7:	e8 f2 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5ec:	83 c4 20             	add    esp,0x20
c000f5ef:	6a 00                	push   0x0
c000f5f1:	68 29 06 00 c0       	push   0xc0000629
c000f5f6:	6a 36                	push   0x36
c000f5f8:	53                   	push   ebx
c000f5f9:	e8 e0 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5fe:	6a 00                	push   0x0
c000f600:	68 33 06 00 c0       	push   0xc0000633
c000f605:	6a 37                	push   0x37
c000f607:	53                   	push   ebx
c000f608:	e8 d1 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f60d:	83 c4 20             	add    esp,0x20
c000f610:	e8 1d 28 00 00       	call   c0011e32 <Virt::getAKernelVAS()>
c000f615:	52                   	push   edx
c000f616:	6a 03                	push   0x3
c000f618:	6a 02                	push   0x2
c000f61a:	50                   	push   eax
c000f61b:	e8 4e 2e 00 00       	call   c001246e <VAS::allocatePages(int, int)>
c000f620:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f627:	89 c6                	mov    esi,eax
c000f629:	e8 12 02 00 00       	call   c000f840 <malloc>
c000f62e:	81 c6 00 20 00 00    	add    esi,0x2000
c000f634:	89 04 24             	mov    DWORD PTR [esp],eax
c000f637:	89 c7                	mov    edi,eax
c000f639:	e8 8a 1e 00 00       	call   c00114c8 <TSS::TSS()>
c000f63e:	83 c4 0c             	add    esp,0xc
c000f641:	68 be 04 00 c0       	push   0xc00004be
c000f646:	56                   	push   esi
c000f647:	57                   	push   edi
c000f648:	e8 bb 1e 00 00       	call   c0011508 <TSS::setup(unsigned long, unsigned long)>
c000f64d:	59                   	pop    ecx
c000f64e:	89 c6                	mov    esi,eax
c000f650:	5f                   	pop    edi
c000f651:	6a 00                	push   0x0
c000f653:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f657:	50                   	push   eax
c000f658:	e8 db fb ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f65d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f661:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f666:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f66d:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f673:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f677:	80 ce 05             	or     dh,0x5
c000f67a:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f67d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f681:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f685:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f688:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f68b:	e8 86 fc ff ff       	call   c000f316 <IDT::flush()>
c000f690:	83 c4 20             	add    esp,0x20
c000f693:	5b                   	pop    ebx
c000f694:	5e                   	pop    esi
c000f695:	5f                   	pop    edi
c000f696:	c3                   	ret    

c000f697 <sbrk>:
c000f697:	55                   	push   ebp
c000f698:	57                   	push   edi
c000f699:	56                   	push   esi
c000f69a:	53                   	push   ebx
c000f69b:	83 ec 1c             	sub    esp,0x1c
c000f69e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6a2:	85 c0                	test   eax,eax
c000f6a4:	74 3e                	je     c000f6e4 <sbrk+0x4d>
c000f6a6:	78 43                	js     c000f6eb <sbrk+0x54>
c000f6a8:	8b 15 c8 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5c8
c000f6ae:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6b4:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6ba:	83 e2 01             	and    edx,0x1
c000f6bd:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6c1:	8b 0d ec d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d4ec
c000f6c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6cb:	05 ff 0f 00 00       	add    eax,0xfff
c000f6d0:	89 c2                	mov    edx,eax
c000f6d2:	78 2f                	js     c000f703 <sbrk+0x6c>
c000f6d4:	c1 fa 0c             	sar    edx,0xc
c000f6d7:	89 d7                	mov    edi,edx
c000f6d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6dd:	be 00 00 00 00       	mov    esi,0x0
c000f6e2:	eb 36                	jmp    c000f71a <sbrk+0x83>
c000f6e4:	a1 ec d4 02 c0       	mov    eax,ds:0xc002d4ec
c000f6e9:	eb 74                	jmp    c000f75f <sbrk+0xc8>
c000f6eb:	83 ec 08             	sub    esp,0x8
c000f6ee:	50                   	push   eax
c000f6ef:	68 28 a2 02 c0       	push   0xc002a228
c000f6f4:	e8 38 38 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c000f6f9:	83 c4 10             	add    esp,0x10
c000f6fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f701:	eb 5c                	jmp    c000f75f <sbrk+0xc8>
c000f703:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f709:	eb c9                	jmp    c000f6d4 <sbrk+0x3d>
c000f70b:	81 05 ec d4 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d4ec,0x1000
c000f715:	46                   	inc    esi
c000f716:	39 f7                	cmp    edi,esi
c000f718:	74 34                	je     c000f74e <sbrk+0xb7>
c000f71a:	e8 13 27 00 00       	call   c0011e32 <Virt::getAKernelVAS()>
c000f71f:	89 c3                	mov    ebx,eax
c000f721:	8b 2d ec d4 02 c0    	mov    ebp,DWORD PTR ds:0xc002d4ec
c000f727:	e8 b6 07 00 00       	call   c000fee2 <Phys::allocatePage()>
c000f72c:	68 01 04 00 00       	push   0x401
c000f731:	55                   	push   ebp
c000f732:	50                   	push   eax
c000f733:	53                   	push   ebx
c000f734:	e8 35 2c 00 00       	call   c001236e <VAS::mapPage(unsigned long, unsigned long, int)>
c000f739:	83 c4 10             	add    esp,0x10
c000f73c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f741:	74 c8                	je     c000f70b <sbrk+0x74>
c000f743:	8b 1d ec d4 02 c0    	mov    ebx,DWORD PTR ds:0xc002d4ec
c000f749:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f74c:	eb bd                	jmp    c000f70b <sbrk+0x74>
c000f74e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f753:	75 12                	jne    c000f767 <sbrk+0xd0>
c000f755:	0f 20 d8             	mov    eax,cr3
c000f758:	0f 22 d8             	mov    cr3,eax
c000f75b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f75f:	83 c4 1c             	add    esp,0x1c
c000f762:	5b                   	pop    ebx
c000f763:	5e                   	pop    esi
c000f764:	5f                   	pop    edi
c000f765:	5d                   	pop    ebp
c000f766:	c3                   	ret    
c000f767:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f76b:	89 cb                	mov    ebx,ecx
c000f76d:	c1 eb 0a             	shr    ebx,0xa
c000f770:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f776:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f77c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f780:	c1 e0 0c             	shl    eax,0xc
c000f783:	01 c8                	add    eax,ecx
c000f785:	c1 e8 0a             	shr    eax,0xa
c000f788:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f78d:	2d 00 00 40 00       	sub    eax,0x400000
c000f792:	39 c3                	cmp    ebx,eax
c000f794:	77 c5                	ja     c000f75b <sbrk+0xc4>
c000f796:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f799:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f79f:	39 d8                	cmp    eax,ebx
c000f7a1:	73 f3                	jae    c000f796 <sbrk+0xff>
c000f7a3:	eb b6                	jmp    c000f75b <sbrk+0xc4>

c000f7a5 <mmap>:
c000f7a5:	83 ec 18             	sub    esp,0x18
c000f7a8:	68 58 a2 02 c0       	push   0xc002a258
c000f7ad:	e8 31 ae 00 00       	call   c001a5e3 <Krnl::panic(char const*)>
c000f7b2:	b8 00 00 00 00       	mov    eax,0x0
c000f7b7:	83 c4 1c             	add    esp,0x1c
c000f7ba:	c3                   	ret    

c000f7bb <munmap>:
c000f7bb:	83 ec 18             	sub    esp,0x18
c000f7be:	68 5d a2 02 c0       	push   0xc002a25d
c000f7c3:	e8 1b ae 00 00       	call   c001a5e3 <Krnl::panic(char const*)>
c000f7c8:	b8 00 00 00 00       	mov    eax,0x0
c000f7cd:	83 c4 1c             	add    esp,0x1c
c000f7d0:	c3                   	ret    

c000f7d1 <liballoc_lock()>:
c000f7d1:	83 ec 0c             	sub    esp,0xc
c000f7d4:	e8 2f e6 00 00       	call   c001de08 <lockScheduler()>
c000f7d9:	b8 00 00 00 00       	mov    eax,0x0
c000f7de:	83 c4 0c             	add    esp,0xc
c000f7e1:	c3                   	ret    

c000f7e2 <liballoc_unlock()>:
c000f7e2:	83 ec 0c             	sub    esp,0xc
c000f7e5:	e8 20 e6 00 00       	call   c001de0a <unlockScheduler()>
c000f7ea:	b8 00 00 00 00       	mov    eax,0x0
c000f7ef:	83 c4 0c             	add    esp,0xc
c000f7f2:	c3                   	ret    

c000f7f3 <liballoc_alloc(int)>:
c000f7f3:	83 ec 0c             	sub    esp,0xc
c000f7f6:	e8 37 26 00 00       	call   c0011e32 <Virt::getAKernelVAS()>
c000f7fb:	83 ec 04             	sub    esp,0x4
c000f7fe:	6a 01                	push   0x1
c000f800:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f804:	50                   	push   eax
c000f805:	e8 64 2c 00 00       	call   c001246e <VAS::allocatePages(int, int)>
c000f80a:	83 c4 1c             	add    esp,0x1c
c000f80d:	c3                   	ret    

c000f80e <liballoc_free(void*, int)>:
c000f80e:	83 ec 0c             	sub    esp,0xc
c000f811:	e8 1c 26 00 00       	call   c0011e32 <Virt::getAKernelVAS()>
c000f816:	83 ec 08             	sub    esp,0x8
c000f819:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f81d:	50                   	push   eax
c000f81e:	e8 07 29 00 00       	call   c001212a <VAS::freeAllocatedPages(unsigned long)>
c000f823:	b8 00 00 00 00       	mov    eax,0x0
c000f828:	83 c4 1c             	add    esp,0x1c
c000f82b:	c3                   	ret    

c000f82c <realloc>:
c000f82c:	83 ec 14             	sub    esp,0x14
c000f82f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f833:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f837:	e8 18 1e ff ff       	call   c0001654 <dlrealloc>
c000f83c:	83 c4 1c             	add    esp,0x1c
c000f83f:	c3                   	ret    

c000f840 <malloc>:
c000f840:	83 ec 18             	sub    esp,0x18
c000f843:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f847:	e8 cb 18 ff ff       	call   c0001117 <dlmalloc>
c000f84c:	83 c4 1c             	add    esp,0x1c
c000f84f:	c3                   	ret    

c000f850 <free>:
c000f850:	83 ec 18             	sub    esp,0x18
c000f853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f857:	e8 60 15 ff ff       	call   c0000dbc <dlfree>
c000f85c:	83 c4 1c             	add    esp,0x1c
c000f85f:	c3                   	ret    

c000f860 <rfree>:
c000f860:	83 ec 18             	sub    esp,0x18
c000f863:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f867:	e8 50 15 ff ff       	call   c0000dbc <dlfree>
c000f86c:	83 c4 1c             	add    esp,0x1c
c000f86f:	c3                   	ret    

c000f870 <calloc>:
c000f870:	56                   	push   esi
c000f871:	53                   	push   ebx
c000f872:	83 ec 10             	sub    esp,0x10
c000f875:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f879:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f87e:	53                   	push   ebx
c000f87f:	e8 bc ff ff ff       	call   c000f840 <malloc>
c000f884:	89 c6                	mov    esi,eax
c000f886:	83 c4 0c             	add    esp,0xc
c000f889:	53                   	push   ebx
c000f88a:	6a 00                	push   0x0
c000f88c:	50                   	push   eax
c000f88d:	e8 e6 0e ff ff       	call   c0000778 <memset>
c000f892:	89 f0                	mov    eax,esi
c000f894:	83 c4 14             	add    esp,0x14
c000f897:	5b                   	pop    ebx
c000f898:	5e                   	pop    esi
c000f899:	c3                   	ret    

c000f89a <hwTextMode_loadInData(VgaText*)>:
c000f89a:	55                   	push   ebp
c000f89b:	a1 00 d5 02 c0       	mov    eax,ds:0xc002d500
c000f8a0:	57                   	push   edi
c000f8a1:	56                   	push   esi
c000f8a2:	53                   	push   ebx
c000f8a3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8a7:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f8ad:	85 d2                	test   edx,edx
c000f8af:	7e 2f                	jle    c000f8e0 <hwTextMode_loadInData(VgaText*)+0x46>
c000f8b1:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f8b7:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f8ba:	31 f6                	xor    esi,esi
c000f8bc:	29 fd                	sub    ebp,edi
c000f8be:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f8c1:	31 c0                	xor    eax,eax
c000f8c3:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f8c7:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f8cb:	40                   	inc    eax
c000f8cc:	83 f8 50             	cmp    eax,0x50
c000f8cf:	75 f2                	jne    c000f8c3 <hwTextMode_loadInData(VgaText*)+0x29>
c000f8d1:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f8d7:	46                   	inc    esi
c000f8d8:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f8de:	7f de                	jg     c000f8be <hwTextMode_loadInData(VgaText*)+0x24>
c000f8e0:	5b                   	pop    ebx
c000f8e1:	5e                   	pop    esi
c000f8e2:	5f                   	pop    edi
c000f8e3:	5d                   	pop    ebp
c000f8e4:	c3                   	ret    

c000f8e5 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f8e5:	55                   	push   ebp
c000f8e6:	80 3d 60 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e660,0x0
c000f8ed:	57                   	push   edi
c000f8ee:	56                   	push   esi
c000f8ef:	53                   	push   ebx
c000f8f0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8f4:	75 50                	jne    c000f946 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f8f6:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f8fc:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f902:	8b 15 00 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d500
c000f908:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f90c:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f912:	eb 0e                	jmp    c000f922 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f914:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f91a:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f920:	89 da                	mov    edx,ebx
c000f922:	83 e5 0f             	and    ebp,0xf
c000f925:	c1 e0 04             	shl    eax,0x4
c000f928:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f92b:	0f b6 c0             	movzx  eax,al
c000f92e:	41                   	inc    ecx
c000f92f:	09 e8                	or     eax,ebp
c000f931:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f935:	c1 e0 08             	shl    eax,0x8
c000f938:	09 e8                	or     eax,ebp
c000f93a:	39 fb                	cmp    ebx,edi
c000f93c:	66 89 02             	mov    WORD PTR [edx],ax
c000f93f:	75 d3                	jne    c000f914 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f941:	5b                   	pop    ebx
c000f942:	5e                   	pop    esi
c000f943:	5f                   	pop    edi
c000f944:	5d                   	pop    ebp
c000f945:	c3                   	ret    
c000f946:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f950:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f95a:	31 c0                	xor    eax,eax
c000f95c:	bd 02 00 00 00       	mov    ebp,0x2
c000f961:	eb 9f                	jmp    c000f902 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f963 <hwTextMode_showCursor(VgaText*, bool)>:
c000f963:	56                   	push   esi
c000f964:	80 3d 60 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e660,0x0
c000f96b:	53                   	push   ebx
c000f96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f970:	75 39                	jne    c000f9ab <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f972:	84 c0                	test   al,al
c000f974:	74 38                	je     c000f9ae <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f976:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f97b:	b0 0a                	mov    al,0xa
c000f97d:	89 da                	mov    edx,ebx
c000f97f:	ee                   	out    dx,al
c000f980:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f985:	89 ca                	mov    edx,ecx
c000f987:	ec                   	in     al,dx
c000f988:	b2 0f                	mov    dl,0xf
c000f98a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f98e:	83 e0 c0             	and    eax,0xffffffc0
c000f991:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f997:	09 d0                	or     eax,edx
c000f999:	89 ca                	mov    edx,ecx
c000f99b:	ee                   	out    dx,al
c000f99c:	b0 0b                	mov    al,0xb
c000f99e:	89 da                	mov    edx,ebx
c000f9a0:	ee                   	out    dx,al
c000f9a1:	89 ca                	mov    edx,ecx
c000f9a3:	ec                   	in     al,dx
c000f9a4:	83 e0 e0             	and    eax,0xffffffe0
c000f9a7:	83 c8 0f             	or     eax,0xf
c000f9aa:	ee                   	out    dx,al
c000f9ab:	5b                   	pop    ebx
c000f9ac:	5e                   	pop    esi
c000f9ad:	c3                   	ret    
c000f9ae:	b0 0a                	mov    al,0xa
c000f9b0:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9b5:	ee                   	out    dx,al
c000f9b6:	b0 20                	mov    al,0x20
c000f9b8:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9bd:	ee                   	out    dx,al
c000f9be:	5b                   	pop    ebx
c000f9bf:	5e                   	pop    esi
c000f9c0:	c3                   	ret    

c000f9c1 <hwTextMode_update(VgaText*)>:
c000f9c1:	c3                   	ret    

c000f9c2 <hwTextMode_updateCursor(VgaText*)>:
c000f9c2:	56                   	push   esi
c000f9c3:	80 3d 60 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e660,0x0
c000f9ca:	53                   	push   ebx
c000f9cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9cf:	75 3f                	jne    c000fa10 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f9d1:	be d4 03 00 00       	mov    esi,0x3d4
c000f9d6:	b9 19 00 00 00       	mov    ecx,0x19
c000f9db:	89 f2                	mov    edx,esi
c000f9dd:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f9e3:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f9e9:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f9ec:	c1 e1 04             	shl    ecx,0x4
c000f9ef:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f9f5:	b0 0f                	mov    al,0xf
c000f9f7:	ee                   	out    dx,al
c000f9f8:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f9fd:	88 c8                	mov    al,cl
c000f9ff:	89 da                	mov    edx,ebx
c000fa01:	ee                   	out    dx,al
c000fa02:	b0 0e                	mov    al,0xe
c000fa04:	89 f2                	mov    edx,esi
c000fa06:	ee                   	out    dx,al
c000fa07:	89 c8                	mov    eax,ecx
c000fa09:	89 da                	mov    edx,ebx
c000fa0b:	66 c1 e8 08          	shr    ax,0x8
c000fa0f:	ee                   	out    dx,al
c000fa10:	5b                   	pop    ebx
c000fa11:	5e                   	pop    esi
c000fa12:	c3                   	ret    

c000fa13 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa17:	80 3d 60 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e660,0x0
c000fa1e:	75 38                	jne    c000fa58 <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa20:	ba da 03 00 00       	mov    edx,0x3da
c000fa25:	84 c0                	test   al,al
c000fa27:	75 18                	jne    c000fa41 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa29:	ec                   	in     al,dx
c000fa2a:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa2f:	b0 30                	mov    al,0x30
c000fa31:	89 ca                	mov    edx,ecx
c000fa33:	ee                   	out    dx,al
c000fa34:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa39:	ec                   	in     al,dx
c000fa3a:	83 c8 08             	or     eax,0x8
c000fa3d:	89 ca                	mov    edx,ecx
c000fa3f:	ee                   	out    dx,al
c000fa40:	c3                   	ret    
c000fa41:	ec                   	in     al,dx
c000fa42:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa47:	b0 30                	mov    al,0x30
c000fa49:	89 ca                	mov    edx,ecx
c000fa4b:	ee                   	out    dx,al
c000fa4c:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa51:	ec                   	in     al,dx
c000fa52:	83 e0 f7             	and    eax,0xfffffff7
c000fa55:	89 ca                	mov    edx,ecx
c000fa57:	ee                   	out    dx,al
c000fa58:	c3                   	ret    

c000fa59 <hwTextMode_scrollScreen(VgaText*)>:
c000fa59:	55                   	push   ebp
c000fa5a:	57                   	push   edi
c000fa5b:	56                   	push   esi
c000fa5c:	53                   	push   ebx
c000fa5d:	83 ec 1c             	sub    esp,0x1c
c000fa60:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa64:	80 3d 60 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e660,0x0
c000fa6b:	74 14                	je     c000fa81 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000fa6d:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000fa77:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000fa81:	a1 00 d5 02 c0       	mov    eax,ds:0xc002d500
c000fa86:	bd 02 00 00 00       	mov    ebp,0x2
c000fa8b:	05 a0 00 00 00       	add    eax,0xa0
c000fa90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa94:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fa98:	31 c0                	xor    eax,eax
c000fa9a:	eb 0b                	jmp    c000faa7 <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000fa9c:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faa2:	74 57                	je     c000fafb <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000faa4:	43                   	inc    ebx
c000faa5:	89 f0                	mov    eax,esi
c000faa7:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000faad:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fab3:	88 13                	mov    BYTE PTR [ebx],dl
c000fab5:	8d 70 01             	lea    esi,[eax+0x1]
c000fab8:	83 fd 18             	cmp    ebp,0x18
c000fabb:	75 df                	jne    c000fa9c <hwTextMode_scrollScreen(VgaText*)+0x43>
c000fabd:	a8 01                	test   al,0x1
c000fabf:	75 13                	jne    c000fad4 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000fac1:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fac4:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faca:	75 d8                	jne    c000faa4 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000facc:	83 c4 1c             	add    esp,0x1c
c000facf:	5b                   	pop    ebx
c000fad0:	5e                   	pop    esi
c000fad1:	5f                   	pop    edi
c000fad2:	5d                   	pop    ebp
c000fad3:	c3                   	ret    
c000fad4:	83 ec 08             	sub    esp,0x8
c000fad7:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000fade:	50                   	push   eax
c000fadf:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fae3:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000faea:	50                   	push   eax
c000faeb:	e8 aa 0c 00 00       	call   c001079a <VgaText::combineColours(unsigned char, unsigned char)>
c000faf0:	83 c4 10             	add    esp,0x10
c000faf3:	88 07                	mov    BYTE PTR [edi],al
c000faf5:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000faf9:	eb c9                	jmp    c000fac4 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000fafb:	45                   	inc    ebp
c000fafc:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb04:	eb 8e                	jmp    c000fa94 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000fb06 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb06:	57                   	push   edi
c000fb07:	80 3d 60 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e660,0x0
c000fb0e:	56                   	push   esi
c000fb0f:	53                   	push   ebx
c000fb10:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb14:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb18:	75 65                	jne    c000fb7f <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000fb1a:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb1f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb24:	83 ec 08             	sub    esp,0x8
c000fb27:	52                   	push   edx
c000fb28:	50                   	push   eax
c000fb29:	e8 6c 0c 00 00       	call   c001079a <VgaText::combineColours(unsigned char, unsigned char)>
c000fb2e:	5a                   	pop    edx
c000fb2f:	0f b6 c0             	movzx  eax,al
c000fb32:	59                   	pop    ecx
c000fb33:	50                   	push   eax
c000fb34:	0f be c3             	movsx  eax,bl
c000fb37:	50                   	push   eax
c000fb38:	e8 03 0d 00 00       	call   c0010840 <VgaText::combineCharAndColour(char, unsigned char)>
c000fb3d:	83 c4 10             	add    esp,0x10
c000fb40:	8b 35 00 d5 02 c0    	mov    esi,DWORD PTR ds:0xc002d500
c000fb46:	80 3d 60 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e660,0x0
c000fb4d:	74 07                	je     c000fb56 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb4f:	66 0f be c3          	movsx  ax,bl
c000fb53:	80 cc 02             	or     ah,0x2
c000fb56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb5a:	ba 19 00 00 00       	mov    edx,0x19
c000fb5f:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000fb65:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb68:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb6b:	c1 e1 04             	shl    ecx,0x4
c000fb6e:	c1 e2 04             	shl    edx,0x4
c000fb71:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb75:	01 ca                	add    edx,ecx
c000fb77:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb7b:	5b                   	pop    ebx
c000fb7c:	5e                   	pop    esi
c000fb7d:	5f                   	pop    edi
c000fb7e:	c3                   	ret    
c000fb7f:	b8 02 00 00 00       	mov    eax,0x2
c000fb84:	31 d2                	xor    edx,edx
c000fb86:	eb 9c                	jmp    c000fb24 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb88 <setupTextMode()>:
c000fb88:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fb8d:	83 e0 30             	and    eax,0x30
c000fb90:	66 83 f8 30          	cmp    ax,0x30
c000fb94:	75 11                	jne    c000fba7 <setupTextMode()+0x1f>
c000fb96:	81 2d 00 d5 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002d500,0x8000
c000fba0:	c6 05 60 e6 02 c0 01 	mov    BYTE PTR ds:0xc002e660,0x1
c000fba7:	c7 05 98 e6 02 c0 13 fa 00 c0 	mov    DWORD PTR ds:0xc002e698,0xc000fa13
c000fbb1:	c7 05 84 e6 02 c0 9a f8 00 c0 	mov    DWORD PTR ds:0xc002e684,0xc000f89a
c000fbbb:	c7 05 80 e6 02 c0 e5 f8 00 c0 	mov    DWORD PTR ds:0xc002e680,0xc000f8e5
c000fbc5:	c7 05 8c e6 02 c0 59 fa 00 c0 	mov    DWORD PTR ds:0xc002e68c,0xc000fa59
c000fbcf:	c7 05 94 e6 02 c0 63 f9 00 c0 	mov    DWORD PTR ds:0xc002e694,0xc000f963
c000fbd9:	c7 05 88 e6 02 c0 c1 f9 00 c0 	mov    DWORD PTR ds:0xc002e688,0xc000f9c1
c000fbe3:	c7 05 90 e6 02 c0 c2 f9 00 c0 	mov    DWORD PTR ds:0xc002e690,0xc000f9c2
c000fbed:	c7 05 9c e6 02 c0 06 fb 00 c0 	mov    DWORD PTR ds:0xc002e69c,0xc000fb06
c000fbf7:	c3                   	ret    

c000fbf8 <kernel_main>:
c000fbf8:	57                   	push   edi
c000fbf9:	bf f9 03 00 00       	mov    edi,0x3f9
c000fbfe:	56                   	push   esi
c000fbff:	31 f6                	xor    esi,esi
c000fc01:	53                   	push   ebx
c000fc02:	83 ec 10             	sub    esp,0x10
c000fc05:	e8 ea 09 00 00       	call   c00105f4 <installVgaTextImplementation()>
c000fc0a:	e8 79 ff ff ff       	call   c000fb88 <setupTextMode()>
c000fc0f:	89 f0                	mov    eax,esi
c000fc11:	89 fa                	mov    edx,edi
c000fc13:	ee                   	out    dx,al
c000fc14:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc19:	b0 80                	mov    al,0x80
c000fc1b:	89 da                	mov    edx,ebx
c000fc1d:	ee                   	out    dx,al
c000fc1e:	b1 03                	mov    cl,0x3
c000fc20:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc25:	88 c8                	mov    al,cl
c000fc27:	ee                   	out    dx,al
c000fc28:	89 f0                	mov    eax,esi
c000fc2a:	89 fa                	mov    edx,edi
c000fc2c:	ee                   	out    dx,al
c000fc2d:	88 c8                	mov    al,cl
c000fc2f:	89 da                	mov    edx,ebx
c000fc31:	ee                   	out    dx,al
c000fc32:	b0 c7                	mov    al,0xc7
c000fc34:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc39:	ee                   	out    dx,al
c000fc3a:	b0 0b                	mov    al,0xb
c000fc3c:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc41:	ee                   	out    dx,al
c000fc42:	83 ec 0c             	sub    esp,0xc
c000fc45:	68 64 a2 02 c0       	push   0xc002a264
c000fc4a:	e8 e2 32 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c000fc4f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc54:	05 ff 0f 00 00       	add    eax,0xfff
c000fc59:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc5e:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc61:	e8 4a 04 00 00       	call   c00100b0 <Phys::physicalMemorySetup(unsigned int)>
c000fc66:	e8 eb 20 00 00       	call   c0011d56 <Virt::virtualMemorySetup()>
c000fc6b:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc71:	83 c4 10             	add    esp,0x10
c000fc74:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc7a:	75 0e                	jne    c000fc8a <kernel_main+0x92>
c000fc7c:	89 d8                	mov    eax,ebx
c000fc7e:	25 48 03 00 00       	and    eax,0x348
c000fc83:	3d 00 03 00 00       	cmp    eax,0x300
c000fc88:	74 10                	je     c000fc9a <kernel_main+0xa2>
c000fc8a:	83 ec 0c             	sub    esp,0xc
c000fc8d:	68 3d bc 02 c0       	push   0xc002bc3d
c000fc92:	e8 4c a9 00 00       	call   c001a5e3 <Krnl::panic(char const*)>
c000fc97:	83 c4 10             	add    esp,0x10
c000fc9a:	83 ec 0c             	sub    esp,0xc
c000fc9d:	89 1d e0 e5 02 c0    	mov    DWORD PTR ds:0xc002e5e0,ebx
c000fca3:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000fca7:	53                   	push   ebx
c000fca8:	e8 bb 22 00 00       	call   c0011f68 <VAS::VAS()>
c000fcad:	89 1d 48 e7 02 c0    	mov    DWORD PTR ds:0xc002e748,ebx
c000fcb3:	e8 68 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcb8:	c7 04 24 7b a2 02 c0 	mov    DWORD PTR [esp],0xc002a27b
c000fcbf:	e8 6d 32 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c000fcc4:	e8 0c 21 00 00       	call   c0011dd5 <Virt::swappingSetup()>
c000fcc9:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fcd0:	e8 6b fb ff ff       	call   c000f840 <malloc>
c000fcd5:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcd8:	89 c6                	mov    esi,eax
c000fcda:	e8 5b ea ff ff       	call   c000e73a <Computer::Computer()>
c000fcdf:	58                   	pop    eax
c000fce0:	89 35 c8 e5 02 c0    	mov    DWORD PTR ds:0xc002e5c8,esi
c000fce6:	5a                   	pop    edx
c000fce7:	56                   	push   esi
c000fce8:	68 98 a2 02 c0       	push   0xc002a298
c000fced:	e8 3f 32 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c000fcf2:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c000fcf7:	8b 10                	mov    edx,DWORD PTR [eax]
c000fcf9:	6a 00                	push   0x0
c000fcfb:	6a 00                	push   0x0
c000fcfd:	6a 00                	push   0x0
c000fcff:	50                   	push   eax
c000fd00:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fd03:	83 c4 14             	add    esp,0x14
c000fd06:	53                   	push   ebx
c000fd07:	e8 f6 24 00 00       	call   c0012202 <VAS::~VAS()>
c000fd0c:	c7 04 24 ab a2 02 c0 	mov    DWORD PTR [esp],0xc002a2ab
c000fd13:	e8 cb a8 00 00       	call   c001a5e3 <Krnl::panic(char const*)>
c000fd18:	83 c4 20             	add    esp,0x20
c000fd1b:	5b                   	pop    ebx
c000fd1c:	5e                   	pop    esi
c000fd1d:	5f                   	pop    edi
c000fd1e:	c3                   	ret    

c000fd1f <Phys::allocateDMA(unsigned long)>:
c000fd1f:	55                   	push   ebp
c000fd20:	31 d2                	xor    edx,edx
c000fd22:	57                   	push   edi
c000fd23:	31 ed                	xor    ebp,ebp
c000fd25:	56                   	push   esi
c000fd26:	31 c9                	xor    ecx,ecx
c000fd28:	53                   	push   ebx
c000fd29:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd2d:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd33:	31 c0                	xor    eax,eax
c000fd35:	c1 ee 0c             	shr    esi,0xc
c000fd38:	eb 17                	jmp    c000fd51 <Phys::allocateDMA(unsigned long)+0x32>
c000fd3a:	85 c9                	test   ecx,ecx
c000fd3c:	75 04                	jne    c000fd42 <Phys::allocateDMA(unsigned long)+0x23>
c000fd3e:	89 d5                	mov    ebp,edx
c000fd40:	89 d0                	mov    eax,edx
c000fd42:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd45:	39 de                	cmp    esi,ebx
c000fd47:	74 20                	je     c000fd69 <Phys::allocateDMA(unsigned long)+0x4a>
c000fd49:	42                   	inc    edx
c000fd4a:	89 d9                	mov    ecx,ebx
c000fd4c:	83 fa 2f             	cmp    edx,0x2f
c000fd4f:	7f 11                	jg     c000fd62 <Phys::allocateDMA(unsigned long)+0x43>
c000fd51:	80 ba 20 e6 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd19e0],0x0
c000fd58:	74 e0                	je     c000fd3a <Phys::allocateDMA(unsigned long)+0x1b>
c000fd5a:	31 c9                	xor    ecx,ecx
c000fd5c:	42                   	inc    edx
c000fd5d:	83 fa 2f             	cmp    edx,0x2f
c000fd60:	7e ef                	jle    c000fd51 <Phys::allocateDMA(unsigned long)+0x32>
c000fd62:	5b                   	pop    ebx
c000fd63:	31 c0                	xor    eax,eax
c000fd65:	5e                   	pop    esi
c000fd66:	5f                   	pop    edi
c000fd67:	5d                   	pop    ebp
c000fd68:	c3                   	ret    
c000fd69:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd6c:	89 d7                	mov    edi,edx
c000fd6e:	4f                   	dec    edi
c000fd6f:	79 03                	jns    c000fd74 <Phys::allocateDMA(unsigned long)+0x55>
c000fd71:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd74:	c1 ff 04             	sar    edi,0x4
c000fd77:	89 c2                	mov    edx,eax
c000fd79:	c1 fa 04             	sar    edx,0x4
c000fd7c:	39 fa                	cmp    edx,edi
c000fd7e:	75 2f                	jne    c000fdaf <Phys::allocateDMA(unsigned long)+0x90>
c000fd80:	85 db                	test   ebx,ebx
c000fd82:	74 1a                	je     c000fd9e <Phys::allocateDMA(unsigned long)+0x7f>
c000fd84:	be 20 e6 02 c0       	mov    esi,0xc002e620
c000fd89:	8d 90 20 e6 02 c0    	lea    edx,[eax-0x3ffd19e0]
c000fd8f:	f7 d6                	not    esi
c000fd91:	29 c6                	sub    esi,eax
c000fd93:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fd96:	42                   	inc    edx
c000fd97:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fd9a:	39 d9                	cmp    ecx,ebx
c000fd9c:	7f f5                	jg     c000fd93 <Phys::allocateDMA(unsigned long)+0x74>
c000fd9e:	85 ff                	test   edi,edi
c000fda0:	74 13                	je     c000fdb5 <Phys::allocateDMA(unsigned long)+0x96>
c000fda2:	5b                   	pop    ebx
c000fda3:	05 50 20 0c 00       	add    eax,0xc2050
c000fda8:	5e                   	pop    esi
c000fda9:	c1 e0 0c             	shl    eax,0xc
c000fdac:	5f                   	pop    edi
c000fdad:	5d                   	pop    ebp
c000fdae:	c3                   	ret    
c000fdaf:	89 ea                	mov    edx,ebp
c000fdb1:	31 c9                	xor    ecx,ecx
c000fdb3:	eb a7                	jmp    c000fd5c <Phys::allocateDMA(unsigned long)+0x3d>
c000fdb5:	5b                   	pop    ebx
c000fdb6:	c1 e0 0c             	shl    eax,0xc
c000fdb9:	5e                   	pop    esi
c000fdba:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdbf:	5f                   	pop    edi
c000fdc0:	5d                   	pop    ebp
c000fdc1:	c3                   	ret    

c000fdc2 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdc6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdca:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fdd0:	c1 e9 0c             	shr    ecx,0xc
c000fdd3:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fdd8:	76 25                	jbe    c000fdff <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fdda:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fddf:	c1 e8 0c             	shr    eax,0xc
c000fde2:	8d 50 10             	lea    edx,[eax+0x10]
c000fde5:	85 c9                	test   ecx,ecx
c000fde7:	74 15                	je     c000fdfe <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fde9:	8d 82 20 e6 02 c0    	lea    eax,[edx-0x3ffd19e0]
c000fdef:	8d 94 11 20 e6 02 c0 	lea    edx,[ecx+edx*1-0x3ffd19e0]
c000fdf6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fdf9:	40                   	inc    eax
c000fdfa:	39 d0                	cmp    eax,edx
c000fdfc:	75 f8                	jne    c000fdf6 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fdfe:	c3                   	ret    
c000fdff:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe05:	c1 ea 0c             	shr    edx,0xc
c000fe08:	eb db                	jmp    c000fde5 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe0a <Phys::setPageState(unsigned long, bool)>:
c000fe0a:	56                   	push   esi
c000fe0b:	ba 01 00 00 00       	mov    edx,0x1
c000fe10:	53                   	push   ebx
c000fe11:	8b 35 f0 d4 02 c0    	mov    esi,DWORD PTR ds:0xc002d4f0
c000fe17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe1b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe1f:	89 c8                	mov    eax,ecx
c000fe21:	83 e1 07             	and    ecx,0x7
c000fe24:	c1 e8 03             	shr    eax,0x3
c000fe27:	d3 e3                	shl    ebx,cl
c000fe29:	01 c6                	add    esi,eax
c000fe2b:	d3 e2                	shl    edx,cl
c000fe2d:	f7 d2                	not    edx
c000fe2f:	20 16                	and    BYTE PTR [esi],dl
c000fe31:	03 05 f0 d4 02 c0    	add    eax,DWORD PTR ds:0xc002d4f0
c000fe37:	08 18                	or     BYTE PTR [eax],bl
c000fe39:	5b                   	pop    ebx
c000fe3a:	5e                   	pop    esi
c000fe3b:	c3                   	ret    

c000fe3c <Phys::getPageState(unsigned long)>:
c000fe3c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe40:	8b 15 f0 d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d4f0
c000fe46:	89 c8                	mov    eax,ecx
c000fe48:	83 e1 07             	and    ecx,0x7
c000fe4b:	c1 e8 03             	shr    eax,0x3
c000fe4e:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe52:	d3 f8                	sar    eax,cl
c000fe54:	83 e0 01             	and    eax,0x1
c000fe57:	c3                   	ret    

c000fe58 <Phys::freePage(unsigned long)>:
c000fe58:	53                   	push   ebx
c000fe59:	83 ec 08             	sub    esp,0x8
c000fe5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe60:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe66:	76 57                	jbe    c000febf <Phys::freePage(unsigned long)+0x67>
c000fe68:	c1 eb 0c             	shr    ebx,0xc
c000fe6b:	53                   	push   ebx
c000fe6c:	e8 cb ff ff ff       	call   c000fe3c <Phys::getPageState(unsigned long)>
c000fe71:	5a                   	pop    edx
c000fe72:	84 c0                	test   al,al
c000fe74:	74 5b                	je     c000fed1 <Phys::freePage(unsigned long)+0x79>
c000fe76:	a1 0c e6 02 c0       	mov    eax,ds:0xc002e60c
c000fe7b:	48                   	dec    eax
c000fe7c:	a3 0c e6 02 c0       	mov    ds:0xc002e60c,eax
c000fe81:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe84:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe87:	c1 e0 02             	shl    eax,0x2
c000fe8a:	99                   	cdq    
c000fe8b:	f7 3d 10 e6 02 c0    	idiv   DWORD PTR ds:0xc002e610
c000fe91:	39 05 08 e6 02 c0    	cmp    DWORD PTR ds:0xc002e608,eax
c000fe97:	75 13                	jne    c000feac <Phys::freePage(unsigned long)+0x54>
c000fe99:	83 ec 08             	sub    esp,0x8
c000fe9c:	6a 00                	push   0x0
c000fe9e:	53                   	push   ebx
c000fe9f:	e8 66 ff ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c000fea4:	83 c4 10             	add    esp,0x10
c000fea7:	83 c4 08             	add    esp,0x8
c000feaa:	5b                   	pop    ebx
c000feab:	c3                   	ret    
c000feac:	83 ec 0c             	sub    esp,0xc
c000feaf:	a3 08 e6 02 c0       	mov    ds:0xc002e608,eax
c000feb4:	50                   	push   eax
c000feb5:	e8 ce 0a 00 00       	call   c0010988 <VgaText::updateRAMUsageDisplay(int)>
c000feba:	83 c4 10             	add    esp,0x10
c000febd:	eb da                	jmp    c000fe99 <Phys::freePage(unsigned long)+0x41>
c000febf:	68 00 10 00 00       	push   0x1000
c000fec4:	53                   	push   ebx
c000fec5:	e8 f8 fe ff ff       	call   c000fdc2 <Phys::freeDMA(unsigned long, unsigned long)>
c000feca:	59                   	pop    ecx
c000fecb:	5b                   	pop    ebx
c000fecc:	83 c4 08             	add    esp,0x8
c000fecf:	5b                   	pop    ebx
c000fed0:	c3                   	ret    
c000fed1:	c7 44 24 10 c6 a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a2c6
c000fed9:	83 c4 08             	add    esp,0x8
c000fedc:	5b                   	pop    ebx
c000fedd:	e9 01 a7 00 00       	jmp    c001a5e3 <Krnl::panic(char const*)>

c000fee2 <Phys::allocatePage()>:
c000fee2:	55                   	push   ebp
c000fee3:	89 e5                	mov    ebp,esp
c000fee5:	56                   	push   esi
c000fee6:	53                   	push   ebx
c000fee7:	83 ec 10             	sub    esp,0x10
c000feea:	8b 35 00 e6 02 c0    	mov    esi,DWORD PTR ds:0xc002e600
c000fef0:	89 f3                	mov    ebx,esi
c000fef2:	eb 0a                	jmp    c000fefe <Phys::allocatePage()+0x1c>
c000fef4:	89 1d 00 e6 02 c0    	mov    DWORD PTR ds:0xc002e600,ebx
c000fefa:	39 de                	cmp    esi,ebx
c000fefc:	74 24                	je     c000ff22 <Phys::allocatePage()+0x40>
c000fefe:	53                   	push   ebx
c000feff:	e8 38 ff ff ff       	call   c000fe3c <Phys::getPageState(unsigned long)>
c000ff04:	5a                   	pop    edx
c000ff05:	84 c0                	test   al,al
c000ff07:	74 5e                	je     c000ff67 <Phys::allocatePage()+0x85>
c000ff09:	43                   	inc    ebx
c000ff0a:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff10:	75 e2                	jne    c000fef4 <Phys::allocatePage()+0x12>
c000ff12:	31 db                	xor    ebx,ebx
c000ff14:	c7 05 00 e6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e600,0x0
c000ff1e:	39 de                	cmp    esi,ebx
c000ff20:	75 dc                	jne    c000fefe <Phys::allocatePage()+0x1c>
c000ff22:	83 ec 0c             	sub    esp,0xc
c000ff25:	68 f0 a2 02 c0       	push   0xc002a2f0
c000ff2a:	e8 02 30 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c000ff2f:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff36:	e8 e4 fd ff ff       	call   c000fd1f <Phys::allocateDMA(unsigned long)>
c000ff3b:	83 c4 10             	add    esp,0x10
c000ff3e:	85 c0                	test   eax,eax
c000ff40:	0f 85 b0 00 00 00    	jne    c000fff6 <Phys::allocatePage()+0x114>
c000ff46:	83 ec 0c             	sub    esp,0xc
c000ff49:	68 01 a3 02 c0       	push   0xc002a301
c000ff4e:	e8 90 a6 00 00       	call   c001a5e3 <Krnl::panic(char const*)>
c000ff53:	83 c4 10             	add    esp,0x10
c000ff56:	8b 1d 00 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e600
c000ff5c:	53                   	push   ebx
c000ff5d:	e8 da fe ff ff       	call   c000fe3c <Phys::getPageState(unsigned long)>
c000ff62:	5a                   	pop    edx
c000ff63:	84 c0                	test   al,al
c000ff65:	75 a2                	jne    c000ff09 <Phys::allocatePage()+0x27>
c000ff67:	6a 01                	push   0x1
c000ff69:	53                   	push   ebx
c000ff6a:	e8 9b fe ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c000ff6f:	a1 0c e6 02 c0       	mov    eax,ds:0xc002e60c
c000ff74:	40                   	inc    eax
c000ff75:	a3 0c e6 02 c0       	mov    ds:0xc002e60c,eax
c000ff7a:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff7d:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff80:	c1 e0 02             	shl    eax,0x2
c000ff83:	99                   	cdq    
c000ff84:	f7 3d 10 e6 02 c0    	idiv   DWORD PTR ds:0xc002e610
c000ff8a:	5a                   	pop    edx
c000ff8b:	39 05 08 e6 02 c0    	cmp    DWORD PTR ds:0xc002e608,eax
c000ff91:	59                   	pop    ecx
c000ff92:	75 69                	jne    c000fffd <Phys::allocatePage()+0x11b>
c000ff94:	83 f8 46             	cmp    eax,0x46
c000ff97:	7e 55                	jle    c000ffee <Phys::allocatePage()+0x10c>
c000ff99:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff9e:	85 c0                	test   eax,eax
c000ffa0:	74 4c                	je     c000ffee <Phys::allocatePage()+0x10c>
c000ffa2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ffa5:	85 c0                	test   eax,eax
c000ffa7:	74 45                	je     c000ffee <Phys::allocatePage()+0x10c>
c000ffa9:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000ffaf:	85 c0                	test   eax,eax
c000ffb1:	74 3b                	je     c000ffee <Phys::allocatePage()+0x10c>
c000ffb3:	83 ec 0c             	sub    esp,0xc
c000ffb6:	68 dc a2 02 c0       	push   0xc002a2dc
c000ffbb:	e8 71 2f 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c000ffc0:	83 c4 0c             	add    esp,0xc
c000ffc3:	a1 0c e6 02 c0       	mov    eax,ds:0xc002e60c
c000ffc8:	85 c0                	test   eax,eax
c000ffca:	79 03                	jns    c000ffcf <Phys::allocatePage()+0xed>
c000ffcc:	83 c0 1f             	add    eax,0x1f
c000ffcf:	c1 f8 05             	sar    eax,0x5
c000ffd2:	83 c0 02             	add    eax,0x2
c000ffd5:	50                   	push   eax
c000ffd6:	6a 04                	push   0x4
c000ffd8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ffdd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ffe0:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000ffe6:	e8 23 2c 00 00       	call   c0012c0e <VAS::scanForEviction(int, int)>
c000ffeb:	83 c4 10             	add    esp,0x10
c000ffee:	a1 00 e6 02 c0       	mov    eax,ds:0xc002e600
c000fff3:	c1 e0 0c             	shl    eax,0xc
c000fff6:	8d 65 f8             	lea    esp,[ebp-0x8]
c000fff9:	5b                   	pop    ebx
c000fffa:	5e                   	pop    esi
c000fffb:	5d                   	pop    ebp
c000fffc:	c3                   	ret    
c000fffd:	83 ec 0c             	sub    esp,0xc
c0010000:	a3 08 e6 02 c0       	mov    ds:0xc002e608,eax
c0010005:	50                   	push   eax
c0010006:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0010009:	e8 7a 09 00 00       	call   c0010988 <VgaText::updateRAMUsageDisplay(int)>
c001000e:	83 c4 10             	add    esp,0x10
c0010011:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0010014:	83 f8 46             	cmp    eax,0x46
c0010017:	7e d5                	jle    c000ffee <Phys::allocatePage()+0x10c>
c0010019:	e9 7b ff ff ff       	jmp    c000ff99 <Phys::allocatePage()+0xb7>

c001001e <Phys::allocateContiguousPages(int)>:
c001001e:	57                   	push   edi
c001001f:	56                   	push   esi
c0010020:	53                   	push   ebx
c0010021:	31 db                	xor    ebx,ebx
c0010023:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0010027:	e8 dc dd 00 00       	call   c001de08 <lockScheduler()>
c001002c:	85 db                	test   ebx,ebx
c001002e:	75 11                	jne    c0010041 <Phys::allocateContiguousPages(int)+0x23>
c0010030:	e8 ad fe ff ff       	call   c000fee2 <Phys::allocatePage()>
c0010035:	83 ff 01             	cmp    edi,0x1
c0010038:	89 c6                	mov    esi,eax
c001003a:	74 21                	je     c001005d <Phys::allocateContiguousPages(int)+0x3f>
c001003c:	bb 01 00 00 00       	mov    ebx,0x1
c0010041:	e8 9c fe ff ff       	call   c000fee2 <Phys::allocatePage()>
c0010046:	89 da                	mov    edx,ebx
c0010048:	c1 e2 0c             	shl    edx,0xc
c001004b:	01 f2                	add    edx,esi
c001004d:	39 c2                	cmp    edx,eax
c001004f:	74 17                	je     c0010068 <Phys::allocateContiguousPages(int)+0x4a>
c0010051:	bb 01 00 00 00       	mov    ebx,0x1
c0010056:	89 c6                	mov    esi,eax
c0010058:	83 ff 01             	cmp    edi,0x1
c001005b:	75 e4                	jne    c0010041 <Phys::allocateContiguousPages(int)+0x23>
c001005d:	e8 a8 dd 00 00       	call   c001de0a <unlockScheduler()>
c0010062:	89 f0                	mov    eax,esi
c0010064:	5b                   	pop    ebx
c0010065:	5e                   	pop    esi
c0010066:	5f                   	pop    edi
c0010067:	c3                   	ret    
c0010068:	43                   	inc    ebx
c0010069:	39 fb                	cmp    ebx,edi
c001006b:	75 bf                	jne    c001002c <Phys::allocateContiguousPages(int)+0xe>
c001006d:	e8 98 dd 00 00       	call   c001de0a <unlockScheduler()>
c0010072:	89 f0                	mov    eax,esi
c0010074:	5b                   	pop    ebx
c0010075:	5e                   	pop    esi
c0010076:	5f                   	pop    edi
c0010077:	c3                   	ret    

c0010078 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0010078:	56                   	push   esi
c0010079:	53                   	push   ebx
c001007a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001007e:	39 1d 04 e6 02 c0    	cmp    DWORD PTR ds:0xc002e604,ebx
c0010084:	73 06                	jae    c001008c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010086:	89 1d 04 e6 02 c0    	mov    DWORD PTR ds:0xc002e604,ebx
c001008c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010090:	c1 eb 0c             	shr    ebx,0xc
c0010093:	c1 e8 0c             	shr    eax,0xc
c0010096:	39 d8                	cmp    eax,ebx
c0010098:	73 13                	jae    c00100ad <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c001009a:	6a 00                	push   0x0
c001009c:	8d 70 01             	lea    esi,[eax+0x1]
c001009f:	50                   	push   eax
c00100a0:	e8 65 fd ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c00100a5:	5a                   	pop    edx
c00100a6:	89 f0                	mov    eax,esi
c00100a8:	59                   	pop    ecx
c00100a9:	39 f3                	cmp    ebx,esi
c00100ab:	75 ed                	jne    c001009a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c00100ad:	5b                   	pop    ebx
c00100ae:	5e                   	pop    esi
c00100af:	c3                   	ret    

c00100b0 <Phys::physicalMemorySetup(unsigned int)>:
c00100b0:	55                   	push   ebp
c00100b1:	57                   	push   edi
c00100b2:	56                   	push   esi
c00100b3:	53                   	push   ebx
c00100b4:	31 db                	xor    ebx,ebx
c00100b6:	83 ec 40             	sub    esp,0x40
c00100b9:	6a 30                	push   0x30
c00100bb:	6a 00                	push   0x0
c00100bd:	68 20 e6 02 c0       	push   0xc002e620
c00100c2:	e8 b1 06 ff ff       	call   c0000778 <memset>
c00100c7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00100cb:	25 00 f0 ff ff       	and    eax,0xfffff000
c00100d0:	05 00 10 00 00       	add    eax,0x1000
c00100d5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00100d9:	83 c4 10             	add    esp,0x10
c00100dc:	83 ec 08             	sub    esp,0x8
c00100df:	6a 01                	push   0x1
c00100e1:	53                   	push   ebx
c00100e2:	43                   	inc    ebx
c00100e3:	e8 22 fd ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c00100e8:	83 c4 10             	add    esp,0x10
c00100eb:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00100f1:	75 e9                	jne    c00100dc <Phys::physicalMemorySetup(unsigned int)+0x2c>
c00100f3:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c00100fa:	66 85 c0             	test   ax,ax
c00100fd:	0f 84 8e 01 00 00    	je     c0010291 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c0010103:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0010107:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001010f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010113:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0010118:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001011c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0010124:	eb 15                	jmp    c001013b <Phys::physicalMemorySetup(unsigned int)+0x8b>
c0010126:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001012a:	83 c3 18             	add    ebx,0x18
c001012d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010131:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0010135:	0f 84 66 01 00 00    	je     c00102a1 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c001013b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001013e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010141:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0010144:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010148:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001014c:	8b 33                	mov    esi,DWORD PTR [ebx]
c001014e:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0010151:	01 f0                	add    eax,esi
c0010153:	55                   	push   ebp
c0010154:	11 fa                	adc    edx,edi
c0010156:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001015a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001015e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010162:	56                   	push   esi
c0010163:	68 3c a3 02 c0       	push   0xc002a33c
c0010168:	e8 c4 2d 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001016d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010171:	83 c4 10             	add    esp,0x10
c0010174:	09 f8                	or     eax,edi
c0010176:	0f 85 25 01 00 00    	jne    c00102a1 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c001017c:	4d                   	dec    ebp
c001017d:	75 a7                	jne    c0010126 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001017f:	ba 00 00 08 00       	mov    edx,0x80000
c0010184:	89 c1                	mov    ecx,eax
c0010186:	39 f2                	cmp    edx,esi
c0010188:	19 f9                	sbb    ecx,edi
c001018a:	0f 82 a7 00 00 00    	jb     c0010237 <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010190:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010194:	89 c1                	mov    ecx,eax
c0010196:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c001019a:	0f 83 97 00 00 00    	jae    c0010237 <Phys::physicalMemorySetup(unsigned int)+0x187>
c00101a0:	ba 00 00 0a 00       	mov    edx,0xa0000
c00101a5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00101a9:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101ad:	39 fa                	cmp    edx,edi
c00101af:	19 e8                	sbb    eax,ebp
c00101b1:	0f 82 14 01 00 00    	jb     c00102cb <Phys::physicalMemorySetup(unsigned int)+0x21b>
c00101b7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00101bb:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101bf:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00101c5:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101ca:	83 d5 ff             	adc    ebp,0xffffffff
c00101cd:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00101d1:	31 c0                	xor    eax,eax
c00101d3:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00101d7:	39 fa                	cmp    edx,edi
c00101d9:	89 c1                	mov    ecx,eax
c00101db:	19 e9                	sbb    ecx,ebp
c00101dd:	0f 83 43 ff ff ff    	jae    c0010126 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101e3:	be 00 00 08 00       	mov    esi,0x80000
c00101e8:	50                   	push   eax
c00101e9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00101ed:	57                   	push   edi
c00101ee:	56                   	push   esi
c00101ef:	68 60 a3 02 c0       	push   0xc002a360
c00101f4:	e8 38 2d 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c00101f9:	5a                   	pop    edx
c00101fa:	59                   	pop    ecx
c00101fb:	57                   	push   edi
c00101fc:	56                   	push   esi
c00101fd:	e8 76 fe ff ff       	call   c0010078 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0010202:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010206:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001020a:	83 c4 0c             	add    esp,0xc
c001020d:	0f ac d0 0c          	shrd   eax,edx,0xc
c0010211:	03 05 10 e6 02 c0    	add    eax,DWORD PTR ds:0xc002e610
c0010217:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001021e:	a3 10 e6 02 c0       	mov    ds:0xc002e610,eax
c0010223:	52                   	push   edx
c0010224:	50                   	push   eax
c0010225:	68 1d a3 02 c0       	push   0xc002a31d
c001022a:	e8 02 2d 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001022f:	83 c4 10             	add    esp,0x10
c0010232:	e9 ef fe ff ff       	jmp    c0010126 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010237:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001023b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001023f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010243:	39 ea                	cmp    edx,ebp
c0010245:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0010249:	0f 82 d7 fe ff ff    	jb     c0010126 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001024f:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010254:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0010258:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c001025c:	0f 83 c4 fe ff ff    	jae    c0010126 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010262:	39 ee                	cmp    esi,ebp
c0010264:	89 f8                	mov    eax,edi
c0010266:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c001026a:	0f 83 78 ff ff ff    	jae    c00101e8 <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010270:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010274:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010278:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001027c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010280:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010284:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010288:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001028c:	e9 57 ff ff ff       	jmp    c00101e8 <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010291:	83 ec 0c             	sub    esp,0xc
c0010294:	68 0f a3 02 c0       	push   0xc002a30f
c0010299:	e8 45 a3 00 00       	call   c001a5e3 <Krnl::panic(char const*)>
c001029e:	83 c4 10             	add    esp,0x10
c00102a1:	bb 40 01 00 00       	mov    ebx,0x140
c00102a6:	83 ec 08             	sub    esp,0x8
c00102a9:	6a 00                	push   0x0
c00102ab:	53                   	push   ebx
c00102ac:	43                   	inc    ebx
c00102ad:	e8 58 fb ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c00102b2:	ff 05 10 e6 02 c0    	inc    DWORD PTR ds:0xc002e610
c00102b8:	83 c4 10             	add    esp,0x10
c00102bb:	81 fb 80 01 00 00    	cmp    ebx,0x180
c00102c1:	75 e3                	jne    c00102a6 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c00102c3:	83 c4 3c             	add    esp,0x3c
c00102c6:	5b                   	pop    ebx
c00102c7:	5e                   	pop    esi
c00102c8:	5f                   	pop    edi
c00102c9:	5d                   	pop    ebp
c00102ca:	c3                   	ret    
c00102cb:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c00102d3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00102db:	e9 d7 fe ff ff       	jmp    c00101b7 <Phys::physicalMemorySetup(unsigned int)+0x107>

c00102e0 <Pipe::isAtty()>:
c00102e0:	31 c0                	xor    eax,eax
c00102e2:	c3                   	ret    
c00102e3:	90                   	nop

c00102e4 <Pipe::~Pipe()>:
c00102e4:	83 ec 0c             	sub    esp,0xc
c00102e7:	ba cc a3 02 c0       	mov    edx,0xc002a3cc
c00102ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102f0:	89 10                	mov    DWORD PTR [eax],edx
c00102f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102f6:	83 ec 0c             	sub    esp,0xc
c00102f9:	50                   	push   eax
c00102fa:	e8 37 16 00 00       	call   c0011936 <UnixFile::~UnixFile()>
c00102ff:	83 c4 10             	add    esp,0x10
c0010302:	90                   	nop
c0010303:	83 c4 0c             	add    esp,0xc
c0010306:	c3                   	ret    
c0010307:	90                   	nop

c0010308 <Pipe::~Pipe()>:
c0010308:	83 ec 0c             	sub    esp,0xc
c001030b:	83 ec 0c             	sub    esp,0xc
c001030e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010312:	e8 cd ff ff ff       	call   c00102e4 <Pipe::~Pipe()>
c0010317:	83 c4 10             	add    esp,0x10
c001031a:	83 ec 08             	sub    esp,0x8
c001031d:	6a 20                	push   0x20
c001031f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010323:	e8 29 2b 00 00       	call   c0012e51 <operator delete(void*, unsigned long)>
c0010328:	83 c4 10             	add    esp,0x10
c001032b:	83 c4 0c             	add    esp,0xc
c001032e:	c3                   	ret    
c001032f:	90                   	nop

c0010330 <Pipe::read(unsigned long long, void*, int*)>:
c0010330:	55                   	push   ebp
c0010331:	57                   	push   edi
c0010332:	56                   	push   esi
c0010333:	53                   	push   ebx
c0010334:	83 ec 1c             	sub    esp,0x1c
c0010337:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001033b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001033f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010343:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010346:	89 c8                	mov    eax,ecx
c0010348:	99                   	cdq    
c0010349:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c001034d:	74 19                	je     c0010368 <Pipe::read(unsigned long long, void*, int*)+0x38>
c001034f:	39 f9                	cmp    ecx,edi
c0010351:	89 d1                	mov    ecx,edx
c0010353:	19 f1                	sbb    ecx,esi
c0010355:	73 11                	jae    c0010368 <Pipe::read(unsigned long long, void*, int*)+0x38>
c0010357:	e8 ac da 00 00       	call   c001de08 <lockScheduler()>
c001035c:	e8 e3 dd 00 00       	call   c001e144 <schedule()>
c0010361:	e8 a4 da 00 00       	call   c001de0a <unlockScheduler()>
c0010366:	eb db                	jmp    c0010343 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010368:	39 f8                	cmp    eax,edi
c001036a:	89 d1                	mov    ecx,edx
c001036c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010370:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0010374:	19 f1                	sbb    ecx,esi
c0010376:	73 08                	jae    c0010380 <Pipe::read(unsigned long long, void*, int*)+0x50>
c0010378:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001037c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010380:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010383:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010386:	29 c6                	sub    esi,eax
c0010388:	89 f1                	mov    ecx,esi
c001038a:	c1 f9 1f             	sar    ecx,0x1f
c001038d:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0010391:	89 ca                	mov    edx,ecx
c0010393:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010397:	19 d1                	sbb    ecx,edx
c0010399:	73 04                	jae    c001039f <Pipe::read(unsigned long long, void*, int*)+0x6f>
c001039b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001039f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00103a3:	89 fd                	mov    ebp,edi
c00103a5:	29 f5                	sub    ebp,esi
c00103a7:	85 f6                	test   esi,esi
c00103a9:	74 12                	je     c00103bd <Pipe::read(unsigned long long, void*, int*)+0x8d>
c00103ab:	52                   	push   edx
c00103ac:	56                   	push   esi
c00103ad:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c00103b0:	50                   	push   eax
c00103b1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00103b5:	e8 8a 03 ff ff       	call   c0000744 <memcpy>
c00103ba:	83 c4 10             	add    esp,0x10
c00103bd:	85 ed                	test   ebp,ebp
c00103bf:	74 12                	je     c00103d3 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c00103c1:	50                   	push   eax
c00103c2:	55                   	push   ebp
c00103c3:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00103c6:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c00103ca:	56                   	push   esi
c00103cb:	e8 74 03 ff ff       	call   c0000744 <memcpy>
c00103d0:	83 c4 10             	add    esp,0x10
c00103d3:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c00103d6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00103d9:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00103dc:	99                   	cdq    
c00103dd:	89 f7                	mov    edi,esi
c00103df:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00103e3:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00103e7:	c1 ff 1f             	sar    edi,0x1f
c00103ea:	57                   	push   edi
c00103eb:	56                   	push   esi
c00103ec:	52                   	push   edx
c00103ed:	50                   	push   eax
c00103ee:	e8 f9 66 01 00       	call   c0026aec <__umoddi3>
c00103f3:	83 c4 10             	add    esp,0x10
c00103f6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00103f9:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00103fe:	75 10                	jne    c0010410 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c0010400:	83 ec 0c             	sub    esp,0xc
c0010403:	68 89 a3 02 c0       	push   0xc002a389
c0010408:	e8 d6 a1 00 00       	call   c001a5e3 <Krnl::panic(char const*)>
c001040d:	83 c4 10             	add    esp,0x10
c0010410:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010414:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010418:	89 10                	mov    DWORD PTR [eax],edx
c001041a:	83 c4 1c             	add    esp,0x1c
c001041d:	31 c0                	xor    eax,eax
c001041f:	5b                   	pop    ebx
c0010420:	5e                   	pop    esi
c0010421:	5f                   	pop    edi
c0010422:	5d                   	pop    ebp
c0010423:	c3                   	ret    

c0010424 <Pipe::write(unsigned long long, void*, int*)>:
c0010424:	55                   	push   ebp
c0010425:	57                   	push   edi
c0010426:	56                   	push   esi
c0010427:	53                   	push   ebx
c0010428:	83 ec 1c             	sub    esp,0x1c
c001042b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001042f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010433:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010437:	89 04 24             	mov    DWORD PTR [esp],eax
c001043a:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001043d:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c0010440:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010444:	89 de                	mov    esi,ebx
c0010446:	89 df                	mov    edi,ebx
c0010448:	c1 ff 1f             	sar    edi,0x1f
c001044b:	01 c6                	add    esi,eax
c001044d:	89 c8                	mov    eax,ecx
c001044f:	11 d7                	adc    edi,edx
c0010451:	99                   	cdq    
c0010452:	39 f1                	cmp    ecx,esi
c0010454:	89 d0                	mov    eax,edx
c0010456:	19 f8                	sbb    eax,edi
c0010458:	b8 01 00 00 00       	mov    eax,0x1
c001045d:	0f 82 80 00 00 00    	jb     c00104e3 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c0010463:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0010466:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0010469:	01 d8                	add    eax,ebx
c001046b:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001046f:	99                   	cdq    
c0010470:	f7 f9                	idiv   ecx
c0010472:	29 d1                	sub    ecx,edx
c0010474:	89 d7                	mov    edi,edx
c0010476:	89 c8                	mov    eax,ecx
c0010478:	99                   	cdq    
c0010479:	39 ce                	cmp    esi,ecx
c001047b:	19 d3                	sbb    ebx,edx
c001047d:	bb 00 00 00 00       	mov    ebx,0x0
c0010482:	72 04                	jb     c0010488 <Pipe::write(unsigned long long, void*, int*)+0x64>
c0010484:	89 f3                	mov    ebx,esi
c0010486:	29 cb                	sub    ebx,ecx
c0010488:	89 f1                	mov    ecx,esi
c001048a:	29 d9                	sub    ecx,ebx
c001048c:	74 1a                	je     c00104a8 <Pipe::write(unsigned long long, void*, int*)+0x84>
c001048e:	52                   	push   edx
c001048f:	51                   	push   ecx
c0010490:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010494:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0010498:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c001049b:	57                   	push   edi
c001049c:	e8 a3 02 ff ff       	call   c0000744 <memcpy>
c00104a1:	83 c4 10             	add    esp,0x10
c00104a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00104a8:	85 db                	test   ebx,ebx
c00104aa:	74 12                	je     c00104be <Pipe::write(unsigned long long, void*, int*)+0x9a>
c00104ac:	50                   	push   eax
c00104ad:	53                   	push   ebx
c00104ae:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c00104b2:	51                   	push   ecx
c00104b3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00104b6:	e8 89 02 ff ff       	call   c0000744 <memcpy>
c00104bb:	83 c4 10             	add    esp,0x10
c00104be:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c00104c1:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00104c6:	75 10                	jne    c00104d8 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c00104c8:	83 ec 0c             	sub    esp,0xc
c00104cb:	68 a5 a3 02 c0       	push   0xc002a3a5
c00104d0:	e8 0e a1 00 00       	call   c001a5e3 <Krnl::panic(char const*)>
c00104d5:	83 c4 10             	add    esp,0x10
c00104d8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00104dc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00104df:	89 38                	mov    DWORD PTR [eax],edi
c00104e1:	31 c0                	xor    eax,eax
c00104e3:	83 c4 1c             	add    esp,0x1c
c00104e6:	5b                   	pop    ebx
c00104e7:	5e                   	pop    esi
c00104e8:	5f                   	pop    edi
c00104e9:	5d                   	pop    ebp
c00104ea:	c3                   	ret    
c00104eb:	90                   	nop

c00104ec <Pipe::Pipe(int)>:
c00104ec:	83 ec 0c             	sub    esp,0xc
c00104ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104f3:	83 ec 08             	sub    esp,0x8
c00104f6:	6a 00                	push   0x0
c00104f8:	50                   	push   eax
c00104f9:	e8 56 12 00 00       	call   c0011754 <UnixFile::UnixFile(int)>
c00104fe:	83 c4 10             	add    esp,0x10
c0010501:	ba cc a3 02 c0       	mov    edx,0xc002a3cc
c0010506:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001050a:	89 10                	mov    DWORD PTR [eax],edx
c001050c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010510:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010514:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010517:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001051b:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010522:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010526:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001052d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010531:	83 ec 0c             	sub    esp,0xc
c0010534:	50                   	push   eax
c0010535:	e8 06 f3 ff ff       	call   c000f840 <malloc>
c001053a:	83 c4 10             	add    esp,0x10
c001053d:	89 c2                	mov    edx,eax
c001053f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010543:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010546:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001054a:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c001054e:	90                   	nop
c001054f:	83 c4 0c             	add    esp,0xc
c0010552:	c3                   	ret    
c0010553:	90                   	nop

c0010554 <VgaText::isAtty()>:
c0010554:	b0 01                	mov    al,0x1
c0010556:	c3                   	ret    
c0010557:	90                   	nop

c0010558 <VgaText::~VgaText()>:
c0010558:	83 ec 0c             	sub    esp,0xc
c001055b:	ba 88 a4 02 c0       	mov    edx,0xc002a488
c0010560:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010564:	89 10                	mov    DWORD PTR [eax],edx
c0010566:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001056a:	83 ec 0c             	sub    esp,0xc
c001056d:	50                   	push   eax
c001056e:	e8 c3 13 00 00       	call   c0011936 <UnixFile::~UnixFile()>
c0010573:	83 c4 10             	add    esp,0x10
c0010576:	90                   	nop
c0010577:	83 c4 0c             	add    esp,0xc
c001057a:	c3                   	ret    
c001057b:	90                   	nop

c001057c <VgaText::~VgaText()>:
c001057c:	83 ec 0c             	sub    esp,0xc
c001057f:	83 ec 0c             	sub    esp,0xc
c0010582:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010586:	e8 cd ff ff ff       	call   c0010558 <VgaText::~VgaText()>
c001058b:	83 c4 10             	add    esp,0x10
c001058e:	83 ec 08             	sub    esp,0x8
c0010591:	68 60 12 00 00       	push   0x1260
c0010596:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001059a:	e8 b2 28 00 00       	call   c0012e51 <operator delete(void*, unsigned long)>
c001059f:	83 c4 10             	add    esp,0x10
c00105a2:	83 c4 0c             	add    esp,0xc
c00105a5:	c3                   	ret    

c00105a6 <VgaText::read(unsigned long long, void*, int*)>:
c00105a6:	83 ec 10             	sub    esp,0x10
c00105a9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00105b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105b5:	e8 2a 5d 00 00       	call   c00162e4 <readKeyboard(VgaText*, char*, unsigned long)>
c00105ba:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00105be:	89 02                	mov    DWORD PTR [edx],eax
c00105c0:	31 c0                	xor    eax,eax
c00105c2:	83 c4 1c             	add    esp,0x1c
c00105c5:	c3                   	ret    

c00105c6 <setTerminalScrollLock(bool)>:
c00105c6:	c3                   	ret    

c00105c7 <addToTerminalCycle(VgaText*)>:
c00105c7:	8b 15 a0 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e6a0
c00105cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105d1:	85 d2                	test   edx,edx
c00105d3:	75 0c                	jne    c00105e1 <addToTerminalCycle(VgaText*)+0x1a>
c00105d5:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c00105db:	a3 a0 e6 02 c0       	mov    ds:0xc002e6a0,eax
c00105e0:	c3                   	ret    
c00105e1:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c00105e7:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c00105ed:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c00105f3:	c3                   	ret    

c00105f4 <installVgaTextImplementation()>:
c00105f4:	83 ec 10             	sub    esp,0x10
c00105f7:	6a 20                	push   0x20
c00105f9:	6a 00                	push   0x0
c00105fb:	68 80 e6 02 c0       	push   0xc002e680
c0010600:	e8 73 01 ff ff       	call   c0000778 <memset>
c0010605:	83 c4 1c             	add    esp,0x1c
c0010608:	c3                   	ret    

c0010609 <scrollTerminalScrollLock(int)>:
c0010609:	c3                   	ret    

c001060a <VgaText::load()>:
c001060a:	53                   	push   ebx
c001060b:	31 c0                	xor    eax,eax
c001060d:	83 ec 58             	sub    esp,0x58
c0010610:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010614:	89 e2                	mov    edx,esp
c0010616:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c001061a:	40                   	inc    eax
c001061b:	83 f8 50             	cmp    eax,0x50
c001061e:	75 f6                	jne    c0010616 <VgaText::load()+0xc>
c0010620:	31 c0                	xor    eax,eax
c0010622:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c0010629:	84 c9                	test   cl,cl
c001062b:	74 06                	je     c0010633 <VgaText::load()+0x29>
c001062d:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010630:	40                   	inc    eax
c0010631:	eb ef                	jmp    c0010622 <VgaText::load()+0x18>
c0010633:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c0010639:	85 c0                	test   eax,eax
c001063b:	74 09                	je     c0010646 <VgaText::load()+0x3c>
c001063d:	51                   	push   ecx
c001063e:	51                   	push   ecx
c001063f:	52                   	push   edx
c0010640:	53                   	push   ebx
c0010641:	ff d0                	call   eax
c0010643:	83 c4 10             	add    esp,0x10
c0010646:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c001064c:	85 c0                	test   eax,eax
c001064e:	74 09                	je     c0010659 <VgaText::load()+0x4f>
c0010650:	83 ec 0c             	sub    esp,0xc
c0010653:	53                   	push   ebx
c0010654:	ff d0                	call   eax
c0010656:	83 c4 10             	add    esp,0x10
c0010659:	83 c4 58             	add    esp,0x58
c001065c:	5b                   	pop    ebx
c001065d:	c3                   	ret    

c001065e <VgaText::updateCursor()>:
c001065e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010662:	39 05 a4 e6 02 c0    	cmp    DWORD PTR ds:0xc002e6a4,eax
c0010668:	75 0c                	jne    c0010676 <VgaText::updateCursor()+0x18>
c001066a:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c0010670:	85 c0                	test   eax,eax
c0010672:	74 02                	je     c0010676 <VgaText::updateCursor()+0x18>
c0010674:	ff e0                	jmp    eax
c0010676:	c3                   	ret    
c0010677:	90                   	nop

c0010678 <VgaText::showCursor(bool)>:
c0010678:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001067c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010680:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c0010686:	c3                   	ret    
c0010687:	90                   	nop

c0010688 <VgaText::disableBlink(bool)>:
c0010688:	56                   	push   esi
c0010689:	53                   	push   ebx
c001068a:	51                   	push   ecx
c001068b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001068f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010693:	39 1d a4 e6 02 c0    	cmp    DWORD PTR ds:0xc002e6a4,ebx
c0010699:	75 18                	jne    c00106b3 <VgaText::disableBlink(bool)+0x2b>
c001069b:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c00106a1:	85 c0                	test   eax,eax
c00106a3:	74 0e                	je     c00106b3 <VgaText::disableBlink(bool)+0x2b>
c00106a5:	89 f1                	mov    ecx,esi
c00106a7:	52                   	push   edx
c00106a8:	52                   	push   edx
c00106a9:	0f b6 d1             	movzx  edx,cl
c00106ac:	52                   	push   edx
c00106ad:	53                   	push   ebx
c00106ae:	ff d0                	call   eax
c00106b0:	83 c4 10             	add    esp,0x10
c00106b3:	89 f0                	mov    eax,esi
c00106b5:	83 f0 01             	xor    eax,0x1
c00106b8:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c00106be:	58                   	pop    eax
c00106bf:	5b                   	pop    ebx
c00106c0:	5e                   	pop    esi
c00106c1:	c3                   	ret    

c00106c2 <VgaText::doANSI_SGR(int)>:
c00106c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106ca:	85 d2                	test   edx,edx
c00106cc:	75 14                	jne    c00106e2 <VgaText::doANSI_SGR(int)+0x20>
c00106ce:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c00106d4:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00106da:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c00106e0:	eb 65                	jmp    c0010747 <VgaText::doANSI_SGR(int)+0x85>
c00106e2:	83 fa 07             	cmp    edx,0x7
c00106e5:	75 14                	jne    c00106fb <VgaText::doANSI_SGR(int)+0x39>
c00106e7:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c00106ed:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c00106f3:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c00106f9:	eb 4c                	jmp    c0010747 <VgaText::doANSI_SGR(int)+0x85>
c00106fb:	83 fa 1b             	cmp    edx,0x1b
c00106fe:	74 ce                	je     c00106ce <VgaText::doANSI_SGR(int)+0xc>
c0010700:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010703:	83 f9 07             	cmp    ecx,0x7
c0010706:	77 09                	ja     c0010711 <VgaText::doANSI_SGR(int)+0x4f>
c0010708:	8b 14 8d 20 d5 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2ae0]
c001070f:	eb 20                	jmp    c0010731 <VgaText::doANSI_SGR(int)+0x6f>
c0010711:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010714:	83 f9 07             	cmp    ecx,0x7
c0010717:	77 09                	ja     c0010722 <VgaText::doANSI_SGR(int)+0x60>
c0010719:	8b 14 8d 20 d5 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2ae0]
c0010720:	eb 25                	jmp    c0010747 <VgaText::doANSI_SGR(int)+0x85>
c0010722:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010725:	83 f9 07             	cmp    ecx,0x7
c0010728:	77 0e                	ja     c0010738 <VgaText::doANSI_SGR(int)+0x76>
c001072a:	8b 14 95 d8 d3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2c28]
c0010731:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010737:	c3                   	ret    
c0010738:	8d 4a 9c             	lea    ecx,[edx-0x64]
c001073b:	83 f9 07             	cmp    ecx,0x7
c001073e:	77 0d                	ja     c001074d <VgaText::doANSI_SGR(int)+0x8b>
c0010740:	8b 14 95 b0 d3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2c50]
c0010747:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c001074d:	c3                   	ret    

c001074e <VgaText::setDefaultBgColour(VgaColour)>:
c001074e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010752:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010756:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c001075c:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010762:	c3                   	ret    
c0010763:	90                   	nop

c0010764 <VgaText::setDefaultFgColour(VgaColour)>:
c0010764:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010768:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001076c:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c0010772:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010778:	c3                   	ret    
c0010779:	90                   	nop

c001077a <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c001077a:	53                   	push   ebx
c001077b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001077f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010783:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010787:	51                   	push   ecx
c0010788:	e8 c1 ff ff ff       	call   c001074e <VgaText::setDefaultBgColour(VgaColour)>
c001078d:	58                   	pop    eax
c001078e:	5a                   	pop    edx
c001078f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010793:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010797:	5b                   	pop    ebx
c0010798:	eb ca                	jmp    c0010764 <VgaText::setDefaultFgColour(VgaColour)>

c001079a <VgaText::combineColours(unsigned char, unsigned char)>:
c001079a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001079e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00107a3:	83 e0 0f             	and    eax,0xf
c00107a6:	c1 e2 04             	shl    edx,0x4
c00107a9:	09 d0                	or     eax,edx
c00107ab:	c3                   	ret    

c00107ac <VgaText::scrollScreen()>:
c00107ac:	57                   	push   edi
c00107ad:	56                   	push   esi
c00107ae:	be 01 00 00 00       	mov    esi,0x1
c00107b3:	53                   	push   ebx
c00107b4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107b8:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00107be:	31 ff                	xor    edi,edi
c00107c0:	01 d9                	add    ecx,ebx
c00107c2:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c00107c5:	83 fe 17             	cmp    esi,0x17
c00107c8:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c00107ce:	75 28                	jne    c00107f8 <VgaText::scrollScreen()+0x4c>
c00107d0:	f7 c7 01 00 00 00    	test   edi,0x1
c00107d6:	74 1c                	je     c00107f4 <VgaText::scrollScreen()+0x48>
c00107d8:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c00107df:	50                   	push   eax
c00107e0:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c00107e7:	50                   	push   eax
c00107e8:	e8 ad ff ff ff       	call   c001079a <VgaText::combineColours(unsigned char, unsigned char)>
c00107ed:	5a                   	pop    edx
c00107ee:	5a                   	pop    edx
c00107ef:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c00107f2:	eb 04                	jmp    c00107f8 <VgaText::scrollScreen()+0x4c>
c00107f4:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c00107f8:	47                   	inc    edi
c00107f9:	41                   	inc    ecx
c00107fa:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010800:	75 c0                	jne    c00107c2 <VgaText::scrollScreen()+0x16>
c0010802:	46                   	inc    esi
c0010803:	83 fe 18             	cmp    esi,0x18
c0010806:	75 b0                	jne    c00107b8 <VgaText::scrollScreen()+0xc>
c0010808:	39 1d a4 e6 02 c0    	cmp    DWORD PTR ds:0xc002e6a4,ebx
c001080e:	75 24                	jne    c0010834 <VgaText::scrollScreen()+0x88>
c0010810:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010817:	74 08                	je     c0010821 <VgaText::scrollScreen()+0x75>
c0010819:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c001081f:	eb 13                	jmp    c0010834 <VgaText::scrollScreen()+0x88>
c0010821:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c0010827:	85 c0                	test   eax,eax
c0010829:	74 09                	je     c0010834 <VgaText::scrollScreen()+0x88>
c001082b:	83 ec 0c             	sub    esp,0xc
c001082e:	53                   	push   ebx
c001082f:	ff d0                	call   eax
c0010831:	83 c4 10             	add    esp,0x10
c0010834:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010838:	5b                   	pop    ebx
c0010839:	5e                   	pop    esi
c001083a:	5f                   	pop    edi
c001083b:	e9 1e fe ff ff       	jmp    c001065e <VgaText::updateCursor()>

c0010840 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010840:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010845:	c1 e0 08             	shl    eax,0x8
c0010848:	89 c2                	mov    edx,eax
c001084a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001084f:	09 d0                	or     eax,edx
c0010851:	c3                   	ret    

c0010852 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010852:	53                   	push   ebx
c0010853:	83 ec 08             	sub    esp,0x8
c0010856:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001085a:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001085f:	50                   	push   eax
c0010860:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010865:	50                   	push   eax
c0010866:	e8 2f ff ff ff       	call   c001079a <VgaText::combineColours(unsigned char, unsigned char)>
c001086b:	5a                   	pop    edx
c001086c:	0f b6 c0             	movzx  eax,al
c001086f:	5b                   	pop    ebx
c0010870:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010875:	50                   	push   eax
c0010876:	53                   	push   ebx
c0010877:	e8 c4 ff ff ff       	call   c0010840 <VgaText::combineCharAndColour(char, unsigned char)>
c001087c:	5a                   	pop    edx
c001087d:	5a                   	pop    edx
c001087e:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010884:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010888:	0f b7 d2             	movzx  edx,dx
c001088b:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c0010890:	39 0d a4 e6 02 c0    	cmp    DWORD PTR ds:0xc002e6a4,ecx
c0010896:	75 14                	jne    c00108ac <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010898:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c001089e:	85 c0                	test   eax,eax
c00108a0:	74 0a                	je     c00108ac <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00108a2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00108a6:	83 c4 08             	add    esp,0x8
c00108a9:	5b                   	pop    ebx
c00108aa:	ff e0                	jmp    eax
c00108ac:	83 c4 08             	add    esp,0x8
c00108af:	5b                   	pop    ebx
c00108b0:	c3                   	ret    
c00108b1:	90                   	nop

c00108b2 <VgaText::getCursorX()>:
c00108b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108b6:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c00108bc:	c3                   	ret    
c00108bd:	90                   	nop

c00108be <VgaText::getCursorY()>:
c00108be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108c2:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c00108c8:	c3                   	ret    
c00108c9:	90                   	nop

c00108ca <VgaText::setCursor(int, int)>:
c00108ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00108d2:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c00108d8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00108dc:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c00108e2:	e9 77 fd ff ff       	jmp    c001065e <VgaText::updateCursor()>
c00108e7:	90                   	nop

c00108e8 <VgaText::setCursorX(int)>:
c00108e8:	83 ec 10             	sub    esp,0x10
c00108eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108ef:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c00108f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108f9:	50                   	push   eax
c00108fa:	e8 cb ff ff ff       	call   c00108ca <VgaText::setCursor(int, int)>
c00108ff:	83 c4 1c             	add    esp,0x1c
c0010902:	c3                   	ret    
c0010903:	90                   	nop

c0010904 <VgaText::setCursorY(int)>:
c0010904:	83 ec 10             	sub    esp,0x10
c0010907:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001090b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001090f:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c0010915:	50                   	push   eax
c0010916:	e8 af ff ff ff       	call   c00108ca <VgaText::setCursor(int, int)>
c001091b:	83 c4 1c             	add    esp,0x1c
c001091e:	c3                   	ret    
c001091f:	90                   	nop

c0010920 <VgaText::incrementCursor(bool)>:
c0010920:	56                   	push   esi
c0010921:	53                   	push   ebx
c0010922:	51                   	push   ecx
c0010923:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010927:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001092b:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c0010931:	40                   	inc    eax
c0010932:	83 f8 50             	cmp    eax,0x50
c0010935:	74 08                	je     c001093f <VgaText::incrementCursor(bool)+0x1f>
c0010937:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c001093d:	eb 33                	jmp    c0010972 <VgaText::incrementCursor(bool)+0x52>
c001093f:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010945:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c001094f:	8d 50 01             	lea    edx,[eax+0x1]
c0010952:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010958:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c001095e:	75 12                	jne    c0010972 <VgaText::incrementCursor(bool)+0x52>
c0010960:	83 ec 0c             	sub    esp,0xc
c0010963:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010969:	53                   	push   ebx
c001096a:	e8 3d fe ff ff       	call   c00107ac <VgaText::scrollScreen()>
c001096f:	83 c4 10             	add    esp,0x10
c0010972:	89 f0                	mov    eax,esi
c0010974:	84 c0                	test   al,al
c0010976:	74 0c                	je     c0010984 <VgaText::incrementCursor(bool)+0x64>
c0010978:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001097c:	5a                   	pop    edx
c001097d:	5b                   	pop    ebx
c001097e:	5e                   	pop    esi
c001097f:	e9 da fc ff ff       	jmp    c001065e <VgaText::updateCursor()>
c0010984:	58                   	pop    eax
c0010985:	5b                   	pop    ebx
c0010986:	5e                   	pop    esi
c0010987:	c3                   	ret    

c0010988 <VgaText::updateRAMUsageDisplay(int)>:
c0010988:	56                   	push   esi
c0010989:	8b 35 00 d5 02 c0    	mov    esi,DWORD PTR ds:0xc002d500
c001098f:	53                   	push   ebx
c0010990:	bb 0a 00 00 00       	mov    ebx,0xa
c0010995:	6a 0f                	push   0xf
c0010997:	6a 00                	push   0x0
c0010999:	e8 fc fd ff ff       	call   c001079a <VgaText::combineColours(unsigned char, unsigned char)>
c001099e:	5a                   	pop    edx
c001099f:	59                   	pop    ecx
c00109a0:	0f b6 c8             	movzx  ecx,al
c00109a3:	51                   	push   ecx
c00109a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109a8:	99                   	cdq    
c00109a9:	f7 fb                	idiv   ebx
c00109ab:	89 d3                	mov    ebx,edx
c00109ad:	83 c0 30             	add    eax,0x30
c00109b0:	83 c3 30             	add    ebx,0x30
c00109b3:	0f be c0             	movsx  eax,al
c00109b6:	0f b6 db             	movzx  ebx,bl
c00109b9:	50                   	push   eax
c00109ba:	e8 81 fe ff ff       	call   c0010840 <VgaText::combineCharAndColour(char, unsigned char)>
c00109bf:	5a                   	pop    edx
c00109c0:	5a                   	pop    edx
c00109c1:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c00109c8:	51                   	push   ecx
c00109c9:	53                   	push   ebx
c00109ca:	e8 71 fe ff ff       	call   c0010840 <VgaText::combineCharAndColour(char, unsigned char)>
c00109cf:	5b                   	pop    ebx
c00109d0:	5a                   	pop    edx
c00109d1:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c00109d8:	51                   	push   ecx
c00109d9:	6a 25                	push   0x25
c00109db:	e8 60 fe ff ff       	call   c0010840 <VgaText::combineCharAndColour(char, unsigned char)>
c00109e0:	59                   	pop    ecx
c00109e1:	5b                   	pop    ebx
c00109e2:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c00109e9:	5b                   	pop    ebx
c00109ea:	5e                   	pop    esi
c00109eb:	c3                   	ret    

c00109ec <VgaText::updateDiskUsage()>:
c00109ec:	55                   	push   ebp
c00109ed:	bd 10 27 00 00       	mov    ebp,0x2710
c00109f2:	57                   	push   edi
c00109f3:	8b 3d 00 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d500
c00109f9:	56                   	push   esi
c00109fa:	53                   	push   ebx
c00109fb:	6a 0f                	push   0xf
c00109fd:	6a 00                	push   0x0
c00109ff:	e8 96 fd ff ff       	call   c001079a <VgaText::combineColours(unsigned char, unsigned char)>
c0010a04:	5a                   	pop    edx
c0010a05:	0f b6 d8             	movzx  ebx,al
c0010a08:	59                   	pop    ecx
c0010a09:	8b 35 28 29 03 c0    	mov    esi,DWORD PTR ds:0xc0032928
c0010a0f:	53                   	push   ebx
c0010a10:	b9 0a 00 00 00       	mov    ecx,0xa
c0010a15:	89 f0                	mov    eax,esi
c0010a17:	99                   	cdq    
c0010a18:	f7 fd                	idiv   ebp
c0010a1a:	99                   	cdq    
c0010a1b:	f7 f9                	idiv   ecx
c0010a1d:	8d 42 30             	lea    eax,[edx+0x30]
c0010a20:	0f b6 c0             	movzx  eax,al
c0010a23:	50                   	push   eax
c0010a24:	e8 17 fe ff ff       	call   c0010840 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a29:	5d                   	pop    ebp
c0010a2a:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a2f:	5a                   	pop    edx
c0010a30:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010a34:	53                   	push   ebx
c0010a35:	89 f0                	mov    eax,esi
c0010a37:	99                   	cdq    
c0010a38:	f7 fd                	idiv   ebp
c0010a3a:	99                   	cdq    
c0010a3b:	f7 f9                	idiv   ecx
c0010a3d:	8d 42 30             	lea    eax,[edx+0x30]
c0010a40:	0f b6 c0             	movzx  eax,al
c0010a43:	50                   	push   eax
c0010a44:	e8 f7 fd ff ff       	call   c0010840 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a49:	5d                   	pop    ebp
c0010a4a:	bd 64 00 00 00       	mov    ebp,0x64
c0010a4f:	5a                   	pop    edx
c0010a50:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c0010a57:	53                   	push   ebx
c0010a58:	89 f0                	mov    eax,esi
c0010a5a:	99                   	cdq    
c0010a5b:	f7 fd                	idiv   ebp
c0010a5d:	99                   	cdq    
c0010a5e:	f7 f9                	idiv   ecx
c0010a60:	8d 42 30             	lea    eax,[edx+0x30]
c0010a63:	0f b6 c0             	movzx  eax,al
c0010a66:	50                   	push   eax
c0010a67:	e8 d4 fd ff ff       	call   c0010840 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a6c:	5d                   	pop    ebp
c0010a6d:	5a                   	pop    edx
c0010a6e:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010a75:	53                   	push   ebx
c0010a76:	89 f0                	mov    eax,esi
c0010a78:	99                   	cdq    
c0010a79:	f7 f9                	idiv   ecx
c0010a7b:	89 d6                	mov    esi,edx
c0010a7d:	99                   	cdq    
c0010a7e:	f7 f9                	idiv   ecx
c0010a80:	8d 42 30             	lea    eax,[edx+0x30]
c0010a83:	0f b6 c0             	movzx  eax,al
c0010a86:	50                   	push   eax
c0010a87:	e8 b4 fd ff ff       	call   c0010840 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a8c:	5d                   	pop    ebp
c0010a8d:	5a                   	pop    edx
c0010a8e:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010a95:	53                   	push   ebx
c0010a96:	8d 46 30             	lea    eax,[esi+0x30]
c0010a99:	0f b6 f0             	movzx  esi,al
c0010a9c:	56                   	push   esi
c0010a9d:	e8 9e fd ff ff       	call   c0010840 <VgaText::combineCharAndColour(char, unsigned char)>
c0010aa2:	5e                   	pop    esi
c0010aa3:	8b 35 24 29 03 c0    	mov    esi,DWORD PTR ds:0xc0032924
c0010aa9:	5d                   	pop    ebp
c0010aaa:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010ab1:	bd 10 27 00 00       	mov    ebp,0x2710
c0010ab6:	53                   	push   ebx
c0010ab7:	89 f0                	mov    eax,esi
c0010ab9:	99                   	cdq    
c0010aba:	f7 fd                	idiv   ebp
c0010abc:	99                   	cdq    
c0010abd:	f7 f9                	idiv   ecx
c0010abf:	8d 42 30             	lea    eax,[edx+0x30]
c0010ac2:	0f b6 c0             	movzx  eax,al
c0010ac5:	50                   	push   eax
c0010ac6:	e8 75 fd ff ff       	call   c0010840 <VgaText::combineCharAndColour(char, unsigned char)>
c0010acb:	5a                   	pop    edx
c0010acc:	5d                   	pop    ebp
c0010acd:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010ad4:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010ad9:	53                   	push   ebx
c0010ada:	89 f0                	mov    eax,esi
c0010adc:	99                   	cdq    
c0010add:	f7 fd                	idiv   ebp
c0010adf:	99                   	cdq    
c0010ae0:	f7 f9                	idiv   ecx
c0010ae2:	8d 42 30             	lea    eax,[edx+0x30]
c0010ae5:	0f b6 c0             	movzx  eax,al
c0010ae8:	50                   	push   eax
c0010ae9:	e8 52 fd ff ff       	call   c0010840 <VgaText::combineCharAndColour(char, unsigned char)>
c0010aee:	5a                   	pop    edx
c0010aef:	5d                   	pop    ebp
c0010af0:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010af7:	bd 64 00 00 00       	mov    ebp,0x64
c0010afc:	53                   	push   ebx
c0010afd:	89 f0                	mov    eax,esi
c0010aff:	99                   	cdq    
c0010b00:	f7 fd                	idiv   ebp
c0010b02:	99                   	cdq    
c0010b03:	f7 f9                	idiv   ecx
c0010b05:	83 c2 30             	add    edx,0x30
c0010b08:	0f b6 d2             	movzx  edx,dl
c0010b0b:	52                   	push   edx
c0010b0c:	e8 2f fd ff ff       	call   c0010840 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b11:	5a                   	pop    edx
c0010b12:	5d                   	pop    ebp
c0010b13:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010b1a:	53                   	push   ebx
c0010b1b:	89 f0                	mov    eax,esi
c0010b1d:	99                   	cdq    
c0010b1e:	f7 f9                	idiv   ecx
c0010b20:	89 d6                	mov    esi,edx
c0010b22:	99                   	cdq    
c0010b23:	f7 f9                	idiv   ecx
c0010b25:	8d 42 30             	lea    eax,[edx+0x30]
c0010b28:	0f b6 c0             	movzx  eax,al
c0010b2b:	50                   	push   eax
c0010b2c:	e8 0f fd ff ff       	call   c0010840 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b31:	5a                   	pop    edx
c0010b32:	59                   	pop    ecx
c0010b33:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010b3a:	53                   	push   ebx
c0010b3b:	8d 46 30             	lea    eax,[esi+0x30]
c0010b3e:	0f b6 f0             	movzx  esi,al
c0010b41:	56                   	push   esi
c0010b42:	e8 f9 fc ff ff       	call   c0010840 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b47:	5b                   	pop    ebx
c0010b48:	5e                   	pop    esi
c0010b49:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010b50:	5b                   	pop    ebx
c0010b51:	5e                   	pop    esi
c0010b52:	5f                   	pop    edi
c0010b53:	5d                   	pop    ebp
c0010b54:	c3                   	ret    
c0010b55:	90                   	nop

c0010b56 <VgaText::updateTitle()>:
c0010b56:	53                   	push   ebx
c0010b57:	31 c0                	xor    eax,eax
c0010b59:	83 ec 58             	sub    esp,0x58
c0010b5c:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010b60:	89 e1                	mov    ecx,esp
c0010b62:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010b66:	40                   	inc    eax
c0010b67:	83 f8 50             	cmp    eax,0x50
c0010b6a:	75 f6                	jne    c0010b62 <VgaText::updateTitle()+0xc>
c0010b6c:	31 c0                	xor    eax,eax
c0010b6e:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010b75:	84 db                	test   bl,bl
c0010b77:	74 06                	je     c0010b7f <VgaText::updateTitle()+0x29>
c0010b79:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010b7c:	40                   	inc    eax
c0010b7d:	eb ef                	jmp    c0010b6e <VgaText::updateTitle()+0x18>
c0010b7f:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010b85:	85 c0                	test   eax,eax
c0010b87:	74 09                	je     c0010b92 <VgaText::updateTitle()+0x3c>
c0010b89:	53                   	push   ebx
c0010b8a:	53                   	push   ebx
c0010b8b:	51                   	push   ecx
c0010b8c:	52                   	push   edx
c0010b8d:	ff d0                	call   eax
c0010b8f:	83 c4 10             	add    esp,0x10
c0010b92:	e8 55 fe ff ff       	call   c00109ec <VgaText::updateDiskUsage()>
c0010b97:	83 c4 58             	add    esp,0x58
c0010b9a:	5b                   	pop    ebx
c0010b9b:	c3                   	ret    

c0010b9c <VgaText::setTitleTextColour(VgaColour)>:
c0010b9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ba0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ba4:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010baa:	eb aa                	jmp    c0010b56 <VgaText::updateTitle()>

c0010bac <VgaText::setTitleColour(VgaColour)>:
c0010bac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bb0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010bb4:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010bba:	eb 9a                	jmp    c0010b56 <VgaText::updateTitle()>

c0010bbc <VgaText::setTitle(char*)>:
c0010bbc:	53                   	push   ebx
c0010bbd:	83 ec 10             	sub    esp,0x10
c0010bc0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010bc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bc8:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010bce:	50                   	push   eax
c0010bcf:	e8 60 fc fe ff       	call   c0000834 <strcpy>
c0010bd4:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010bd8:	83 c4 18             	add    esp,0x18
c0010bdb:	5b                   	pop    ebx
c0010bdc:	e9 75 ff ff ff       	jmp    c0010b56 <VgaText::updateTitle()>
c0010be1:	90                   	nop

c0010be2 <VgaText::decrementCursor(bool)>:
c0010be2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010be6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010bea:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010bf0:	85 c0                	test   eax,eax
c0010bf2:	74 07                	je     c0010bfb <VgaText::decrementCursor(bool)+0x19>
c0010bf4:	48                   	dec    eax
c0010bf5:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010bfb:	84 c9                	test   cl,cl
c0010bfd:	74 09                	je     c0010c08 <VgaText::decrementCursor(bool)+0x26>
c0010bff:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010c03:	e9 56 fa ff ff       	jmp    c001065e <VgaText::updateCursor()>
c0010c08:	c3                   	ret    
c0010c09:	90                   	nop

c0010c0a <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010c0a:	53                   	push   ebx
c0010c0b:	83 ec 08             	sub    esp,0x8
c0010c0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010c12:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c16:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010c1a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010c1e:	3c 07                	cmp    al,0x7
c0010c20:	75 2a                	jne    c0010c4c <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010c22:	a1 50 e7 02 c0       	mov    eax,ds:0xc002e750
c0010c27:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010c2f:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010c37:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010c3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010c43:	83 c4 08             	add    esp,0x8
c0010c46:	5b                   	pop    ebx
c0010c47:	e9 e4 30 00 00       	jmp    c0013d30 <Buzzer::beep(int, int, bool)>
c0010c4c:	3c 0d                	cmp    al,0xd
c0010c4e:	75 0c                	jne    c0010c5c <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010c50:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c5a:	eb 3b                	jmp    c0010c97 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010c5c:	3c 0a                	cmp    al,0xa
c0010c5e:	75 40                	jne    c0010ca0 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010c60:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010c66:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c70:	8d 50 01             	lea    edx,[eax+0x1]
c0010c73:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010c79:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010c7f:	75 12                	jne    c0010c93 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010c81:	83 ec 0c             	sub    esp,0xc
c0010c84:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010c8a:	53                   	push   ebx
c0010c8b:	e8 1c fb ff ff       	call   c00107ac <VgaText::scrollScreen()>
c0010c90:	83 c4 10             	add    esp,0x10
c0010c93:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010c97:	83 c4 08             	add    esp,0x8
c0010c9a:	5b                   	pop    ebx
c0010c9b:	e9 be f9 ff ff       	jmp    c001065e <VgaText::updateCursor()>
c0010ca0:	3c 08                	cmp    al,0x8
c0010ca2:	75 31                	jne    c0010cd5 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010ca4:	50                   	push   eax
c0010ca5:	50                   	push   eax
c0010ca6:	6a 01                	push   0x1
c0010ca8:	53                   	push   ebx
c0010ca9:	e8 34 ff ff ff       	call   c0010be2 <VgaText::decrementCursor(bool)>
c0010cae:	5a                   	pop    edx
c0010caf:	59                   	pop    ecx
c0010cb0:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010cb6:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010cbc:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010cc2:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010cc8:	6a 20                	push   0x20
c0010cca:	53                   	push   ebx
c0010ccb:	e8 82 fb ff ff       	call   c0010852 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010cd0:	83 c4 28             	add    esp,0x28
c0010cd3:	5b                   	pop    ebx
c0010cd4:	c3                   	ret    
c0010cd5:	83 ec 08             	sub    esp,0x8
c0010cd8:	0f be c0             	movsx  eax,al
c0010cdb:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010ce1:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010ce7:	51                   	push   ecx
c0010ce8:	52                   	push   edx
c0010ce9:	50                   	push   eax
c0010cea:	53                   	push   ebx
c0010ceb:	e8 62 fb ff ff       	call   c0010852 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010cf0:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010cf4:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010cfc:	83 c4 28             	add    esp,0x28
c0010cff:	5b                   	pop    ebx
c0010d00:	e9 1b fc ff ff       	jmp    c0010920 <VgaText::incrementCursor(bool)>
c0010d05:	90                   	nop

c0010d06 <VgaText::isShowingCursor()>:
c0010d06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d0a:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010d10:	c3                   	ret    
c0010d11:	90                   	nop

c0010d12 <VgaText::isBlinkDisabled()>:
c0010d12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d16:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010d1c:	83 f0 01             	xor    eax,0x1
c0010d1f:	c3                   	ret    

c0010d20 <VgaText::setCursorHeight(int)>:
c0010d20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d24:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010d28:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010d2e:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010d35:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010d39:	e9 3a f9 ff ff       	jmp    c0010678 <VgaText::showCursor(bool)>

c0010d3e <VgaText::getCursorHeight()>:
c0010d3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d42:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010d48:	c3                   	ret    

c0010d49 <setActiveTerminal(VgaText*)>:
c0010d49:	53                   	push   ebx
c0010d4a:	83 ec 08             	sub    esp,0x8
c0010d4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d51:	85 db                	test   ebx,ebx
c0010d53:	75 11                	jne    c0010d66 <setActiveTerminal(VgaText*)+0x1d>
c0010d55:	c7 44 24 10 e0 a3 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a3e0
c0010d5d:	83 c4 08             	add    esp,0x8
c0010d60:	5b                   	pop    ebx
c0010d61:	e9 7d 98 00 00       	jmp    c001a5e3 <Krnl::panic(char const*)>
c0010d66:	50                   	push   eax
c0010d67:	50                   	push   eax
c0010d68:	53                   	push   ebx
c0010d69:	68 ee a3 02 c0       	push   0xc002a3ee
c0010d6e:	e8 be 21 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0010d73:	a1 a4 e6 02 c0       	mov    eax,ds:0xc002e6a4
c0010d78:	83 c4 10             	add    esp,0x10
c0010d7b:	85 c0                	test   eax,eax
c0010d7d:	74 0c                	je     c0010d8b <setActiveTerminal(VgaText*)+0x42>
c0010d7f:	83 ec 0c             	sub    esp,0xc
c0010d82:	50                   	push   eax
c0010d83:	e8 d6 f8 ff ff       	call   c001065e <VgaText::updateCursor()>
c0010d88:	83 c4 10             	add    esp,0x10
c0010d8b:	89 1d a4 e6 02 c0    	mov    DWORD PTR ds:0xc002e6a4,ebx
c0010d91:	51                   	push   ecx
c0010d92:	51                   	push   ecx
c0010d93:	53                   	push   ebx
c0010d94:	68 06 a4 02 c0       	push   0xc002a406
c0010d99:	e8 93 21 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0010d9e:	83 c4 0c             	add    esp,0xc
c0010da1:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010da7:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010dad:	53                   	push   ebx
c0010dae:	e8 17 fb ff ff       	call   c00108ca <VgaText::setCursor(int, int)>
c0010db3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010db6:	e8 57 ff ff ff       	call   c0010d12 <VgaText::isBlinkDisabled()>
c0010dbb:	5a                   	pop    edx
c0010dbc:	0f b6 c0             	movzx  eax,al
c0010dbf:	59                   	pop    ecx
c0010dc0:	50                   	push   eax
c0010dc1:	53                   	push   ebx
c0010dc2:	e8 c1 f8 ff ff       	call   c0010688 <VgaText::disableBlink(bool)>
c0010dc7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010dca:	e8 6f ff ff ff       	call   c0010d3e <VgaText::getCursorHeight()>
c0010dcf:	5a                   	pop    edx
c0010dd0:	59                   	pop    ecx
c0010dd1:	50                   	push   eax
c0010dd2:	53                   	push   ebx
c0010dd3:	e8 48 ff ff ff       	call   c0010d20 <VgaText::setCursorHeight(int)>
c0010dd8:	83 c4 10             	add    esp,0x10
c0010ddb:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010de2:	75 0a                	jne    c0010dee <setActiveTerminal(VgaText*)+0xa5>
c0010de4:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010dee:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010df2:	83 c4 08             	add    esp,0x8
c0010df5:	5b                   	pop    ebx
c0010df6:	e9 0f f8 ff ff       	jmp    c001060a <VgaText::load()>

c0010dfb <doTerminalCycle()>:
c0010dfb:	83 ec 18             	sub    esp,0x18
c0010dfe:	a1 a0 e6 02 c0       	mov    eax,ds:0xc002e6a0
c0010e03:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010e09:	50                   	push   eax
c0010e0a:	a3 a0 e6 02 c0       	mov    ds:0xc002e6a0,eax
c0010e0f:	e8 35 ff ff ff       	call   c0010d49 <setActiveTerminal(VgaText*)>
c0010e14:	83 c4 1c             	add    esp,0x1c
c0010e17:	c3                   	ret    

c0010e18 <VgaText::doUpdate()>:
c0010e18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e1c:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010e22:	85 c0                	test   eax,eax
c0010e24:	74 02                	je     c0010e28 <VgaText::doUpdate()+0x10>
c0010e26:	ff e0                	jmp    eax
c0010e28:	c3                   	ret    
c0010e29:	90                   	nop

c0010e2a <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010e2a:	55                   	push   ebp
c0010e2b:	57                   	push   edi
c0010e2c:	56                   	push   esi
c0010e2d:	53                   	push   ebx
c0010e2e:	83 ec 1c             	sub    esp,0x1c
c0010e31:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010e35:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e3a:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010e41:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010e44:	50                   	push   eax
c0010e45:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e4a:	50                   	push   eax
c0010e4b:	e8 4a f9 ff ff       	call   c001079a <VgaText::combineColours(unsigned char, unsigned char)>
c0010e50:	59                   	pop    ecx
c0010e51:	0f b6 c0             	movzx  eax,al
c0010e54:	5b                   	pop    ebx
c0010e55:	31 c9                	xor    ecx,ecx
c0010e57:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e5f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010e63:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e6d:	0f b7 db             	movzx  ebx,bx
c0010e70:	01 db                	add    ebx,ebx
c0010e72:	01 fb                	add    ebx,edi
c0010e74:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010e77:	84 c0                	test   al,al
c0010e79:	0f 84 38 01 00 00    	je     c0010fb7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010e7f:	3c 0d                	cmp    al,0xd
c0010e81:	75 0f                	jne    c0010e92 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010e83:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e8d:	e9 1f 01 00 00       	jmp    c0010fb1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e92:	3c 0a                	cmp    al,0xa
c0010e94:	75 5b                	jne    c0010ef1 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010e96:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010e9c:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010ea6:	8d 48 01             	lea    ecx,[eax+0x1]
c0010ea9:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010eaf:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010eb5:	75 12                	jne    c0010ec9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010eb7:	83 ec 0c             	sub    esp,0xc
c0010eba:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010ec0:	55                   	push   ebp
c0010ec1:	e8 e6 f8 ff ff       	call   c00107ac <VgaText::scrollScreen()>
c0010ec6:	83 c4 10             	add    esp,0x10
c0010ec9:	83 ec 0c             	sub    esp,0xc
c0010ecc:	55                   	push   ebp
c0010ecd:	e8 8c f7 ff ff       	call   c001065e <VgaText::updateCursor()>
c0010ed2:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010eda:	83 c4 10             	add    esp,0x10
c0010edd:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010ee3:	31 c9                	xor    ecx,ecx
c0010ee5:	0f b7 db             	movzx  ebx,bx
c0010ee8:	01 db                	add    ebx,ebx
c0010eea:	01 fb                	add    ebx,edi
c0010eec:	e9 c0 00 00 00       	jmp    c0010fb1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ef1:	3c 08                	cmp    al,0x8
c0010ef3:	75 4e                	jne    c0010f43 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010ef5:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010ef9:	53                   	push   ebx
c0010efa:	53                   	push   ebx
c0010efb:	6a 01                	push   0x1
c0010efd:	55                   	push   ebp
c0010efe:	e8 df fc ff ff       	call   c0010be2 <VgaText::decrementCursor(bool)>
c0010f03:	58                   	pop    eax
c0010f04:	5a                   	pop    edx
c0010f05:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f0b:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f11:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010f17:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010f1d:	6a 20                	push   0x20
c0010f1f:	55                   	push   ebp
c0010f20:	e8 2d f9 ff ff       	call   c0010852 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010f25:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f2d:	83 c4 20             	add    esp,0x20
c0010f30:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010f36:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010f3a:	0f b7 db             	movzx  ebx,bx
c0010f3d:	01 db                	add    ebx,ebx
c0010f3f:	01 fb                	add    ebx,edi
c0010f41:	eb 6e                	jmp    c0010fb1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010f43:	51                   	push   ecx
c0010f44:	51                   	push   ecx
c0010f45:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f49:	50                   	push   eax
c0010f4a:	e8 f1 f8 ff ff       	call   c0010840 <VgaText::combineCharAndColour(char, unsigned char)>
c0010f4f:	83 c4 10             	add    esp,0x10
c0010f52:	66 89 03             	mov    WORD PTR [ebx],ax
c0010f55:	39 2d a4 e6 02 c0    	cmp    DWORD PTR ds:0xc002e6a4,ebp
c0010f5b:	75 2a                	jne    c0010f87 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f5d:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010f63:	85 c0                	test   eax,eax
c0010f65:	74 20                	je     c0010f87 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f67:	52                   	push   edx
c0010f68:	52                   	push   edx
c0010f69:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f6f:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f79:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f7d:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010f80:	51                   	push   ecx
c0010f81:	55                   	push   ebp
c0010f82:	ff d0                	call   eax
c0010f84:	83 c4 20             	add    esp,0x20
c0010f87:	83 c3 02             	add    ebx,0x2
c0010f8a:	50                   	push   eax
c0010f8b:	50                   	push   eax
c0010f8c:	6a 00                	push   0x0
c0010f8e:	55                   	push   ebp
c0010f8f:	e8 8c f9 ff ff       	call   c0010920 <VgaText::incrementCursor(bool)>
c0010f94:	83 c4 10             	add    esp,0x10
c0010f97:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010f9e:	75 0f                	jne    c0010faf <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010fa0:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010fa8:	0f b7 db             	movzx  ebx,bx
c0010fab:	01 db                	add    ebx,ebx
c0010fad:	01 fb                	add    ebx,edi
c0010faf:	b1 01                	mov    cl,0x1
c0010fb1:	46                   	inc    esi
c0010fb2:	e9 bd fe ff ff       	jmp    c0010e74 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010fb7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010fbb:	83 ec 0c             	sub    esp,0xc
c0010fbe:	55                   	push   ebp
c0010fbf:	e8 9a f6 ff ff       	call   c001065e <VgaText::updateCursor()>
c0010fc4:	83 c4 10             	add    esp,0x10
c0010fc7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010fcb:	84 c9                	test   cl,cl
c0010fcd:	74 0c                	je     c0010fdb <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010fcf:	83 ec 0c             	sub    esp,0xc
c0010fd2:	55                   	push   ebp
c0010fd3:	e8 40 fe ff ff       	call   c0010e18 <VgaText::doUpdate()>
c0010fd8:	83 c4 10             	add    esp,0x10
c0010fdb:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010fe2:	83 c4 1c             	add    esp,0x1c
c0010fe5:	5b                   	pop    ebx
c0010fe6:	5e                   	pop    esi
c0010fe7:	5f                   	pop    edi
c0010fe8:	5d                   	pop    ebp
c0010fe9:	c3                   	ret    

c0010fea <VgaText::clearScreen()>:
c0010fea:	57                   	push   edi
c0010feb:	56                   	push   esi
c0010fec:	31 f6                	xor    esi,esi
c0010fee:	53                   	push   ebx
c0010fef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010ff3:	52                   	push   edx
c0010ff4:	6a 00                	push   0x0
c0010ff6:	6a 00                	push   0x0
c0010ff8:	53                   	push   ebx
c0010ff9:	e8 cc f8 ff ff       	call   c00108ca <VgaText::setCursor(int, int)>
c0010ffe:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0011005:	83 c4 10             	add    esp,0x10
c0011008:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c001100e:	7e 26                	jle    c0011036 <VgaText::clearScreen()+0x4c>
c0011010:	31 ff                	xor    edi,edi
c0011012:	50                   	push   eax
c0011013:	50                   	push   eax
c0011014:	56                   	push   esi
c0011015:	57                   	push   edi
c0011016:	47                   	inc    edi
c0011017:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c001101d:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0011023:	6a 20                	push   0x20
c0011025:	53                   	push   ebx
c0011026:	e8 27 f8 ff ff       	call   c0010852 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001102b:	83 c4 20             	add    esp,0x20
c001102e:	83 ff 50             	cmp    edi,0x50
c0011031:	75 df                	jne    c0011012 <VgaText::clearScreen()+0x28>
c0011033:	46                   	inc    esi
c0011034:	eb d2                	jmp    c0011008 <VgaText::clearScreen()+0x1e>
c0011036:	83 ec 0c             	sub    esp,0xc
c0011039:	53                   	push   ebx
c001103a:	e8 d9 fd ff ff       	call   c0010e18 <VgaText::doUpdate()>
c001103f:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0011046:	83 c4 10             	add    esp,0x10
c0011049:	5b                   	pop    ebx
c001104a:	5e                   	pop    esi
c001104b:	5f                   	pop    edi
c001104c:	c3                   	ret    
c001104d:	90                   	nop

c001104e <VgaText::putchar(char)>:
c001104e:	56                   	push   esi
c001104f:	53                   	push   ebx
c0011050:	83 ec 14             	sub    esp,0x14
c0011053:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011057:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001105b:	3c 5b                	cmp    al,0x5b
c001105d:	75 21                	jne    c0011080 <VgaText::putchar(char)+0x32>
c001105f:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0011066:	74 28                	je     c0011090 <VgaText::putchar(char)+0x42>
c0011068:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0011071:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c001107b:	e9 e2 00 00 00       	jmp    c0011162 <VgaText::putchar(char)+0x114>
c0011080:	3c 1b                	cmp    al,0x1b
c0011082:	75 0c                	jne    c0011090 <VgaText::putchar(char)+0x42>
c0011084:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c001108b:	e9 d2 00 00 00       	jmp    c0011162 <VgaText::putchar(char)+0x114>
c0011090:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c0011096:	84 c9                	test   cl,cl
c0011098:	0f 84 ab 00 00 00    	je     c0011149 <VgaText::putchar(char)+0xfb>
c001109e:	8d 50 c0             	lea    edx,[eax-0x40]
c00110a1:	80 fa 3e             	cmp    dl,0x3e
c00110a4:	0f 87 82 00 00 00    	ja     c001112c <VgaText::putchar(char)+0xde>
c00110aa:	3c 6d                	cmp    al,0x6d
c00110ac:	75 4d                	jne    c00110fb <VgaText::putchar(char)+0xad>
c00110ae:	31 f6                	xor    esi,esi
c00110b0:	31 d2                	xor    edx,edx
c00110b2:	31 c0                	xor    eax,eax
c00110b4:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c00110ba:	7e 30                	jle    c00110ec <VgaText::putchar(char)+0x9e>
c00110bc:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c00110c4:	80 fa 3b             	cmp    dl,0x3b
c00110c7:	75 17                	jne    c00110e0 <VgaText::putchar(char)+0x92>
c00110c9:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00110cd:	50                   	push   eax
c00110ce:	53                   	push   ebx
c00110cf:	e8 ee f5 ff ff       	call   c00106c2 <VgaText::doANSI_SGR(int)>
c00110d4:	59                   	pop    ecx
c00110d5:	31 d2                	xor    edx,edx
c00110d7:	58                   	pop    eax
c00110d8:	31 c0                	xor    eax,eax
c00110da:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00110de:	eb 09                	jmp    c00110e9 <VgaText::putchar(char)+0x9b>
c00110e0:	6b c0 0a             	imul   eax,eax,0xa
c00110e3:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00110e7:	88 ca                	mov    dl,cl
c00110e9:	46                   	inc    esi
c00110ea:	eb c8                	jmp    c00110b4 <VgaText::putchar(char)+0x66>
c00110ec:	84 d2                	test   dl,dl
c00110ee:	74 31                	je     c0011121 <VgaText::putchar(char)+0xd3>
c00110f0:	50                   	push   eax
c00110f1:	53                   	push   ebx
c00110f2:	e8 cb f5 ff ff       	call   c00106c2 <VgaText::doANSI_SGR(int)>
c00110f7:	58                   	pop    eax
c00110f8:	5a                   	pop    edx
c00110f9:	eb 26                	jmp    c0011121 <VgaText::putchar(char)+0xd3>
c00110fb:	3c 4a                	cmp    al,0x4a
c00110fd:	75 22                	jne    c0011121 <VgaText::putchar(char)+0xd3>
c00110ff:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0011106:	75 19                	jne    c0011121 <VgaText::putchar(char)+0xd3>
c0011108:	83 ec 0c             	sub    esp,0xc
c001110b:	53                   	push   ebx
c001110c:	e8 d9 fe ff ff       	call   c0010fea <VgaText::clearScreen()>
c0011111:	83 c4 0c             	add    esp,0xc
c0011114:	6a 00                	push   0x0
c0011116:	6a 00                	push   0x0
c0011118:	53                   	push   ebx
c0011119:	e8 ac f7 ff ff       	call   c00108ca <VgaText::setCursor(int, int)>
c001111e:	83 c4 10             	add    esp,0x10
c0011121:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c001112a:	eb 36                	jmp    c0011162 <VgaText::putchar(char)+0x114>
c001112c:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0011132:	83 fa 0e             	cmp    edx,0xe
c0011135:	7f 2b                	jg     c0011162 <VgaText::putchar(char)+0x114>
c0011137:	8d 4a 01             	lea    ecx,[edx+0x1]
c001113a:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0011140:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0011147:	eb 19                	jmp    c0011162 <VgaText::putchar(char)+0x114>
c0011149:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c001114f:	0f be c0             	movsx  eax,al
c0011152:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0011158:	50                   	push   eax
c0011159:	53                   	push   ebx
c001115a:	e8 ab fa ff ff       	call   c0010c0a <VgaText::putchar(char, VgaColour, VgaColour)>
c001115f:	83 c4 10             	add    esp,0x10
c0011162:	83 c4 14             	add    esp,0x14
c0011165:	5b                   	pop    ebx
c0011166:	5e                   	pop    esi
c0011167:	c3                   	ret    

c0011168 <VgaText::puts(char const*)>:
c0011168:	53                   	push   ebx
c0011169:	83 ec 08             	sub    esp,0x8
c001116c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011170:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0011173:	84 c0                	test   al,al
c0011175:	74 12                	je     c0011189 <VgaText::puts(char const*)+0x21>
c0011177:	43                   	inc    ebx
c0011178:	51                   	push   ecx
c0011179:	51                   	push   ecx
c001117a:	50                   	push   eax
c001117b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001117f:	e8 ca fe ff ff       	call   c001104e <VgaText::putchar(char)>
c0011184:	83 c4 10             	add    esp,0x10
c0011187:	eb e7                	jmp    c0011170 <VgaText::puts(char const*)+0x8>
c0011189:	83 c4 08             	add    esp,0x8
c001118c:	5b                   	pop    ebx
c001118d:	c3                   	ret    

c001118e <VgaText::putx(unsigned int)>:
c001118e:	57                   	push   edi
c001118f:	b9 11 00 00 00       	mov    ecx,0x11
c0011194:	56                   	push   esi
c0011195:	be 22 a4 02 c0       	mov    esi,0xc002a422
c001119a:	53                   	push   ebx
c001119b:	83 ec 20             	sub    esp,0x20
c001119e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00111a2:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00111a6:	fc                   	cld    
c00111a7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00111a9:	be 08 00 00 00       	mov    esi,0x8
c00111ae:	50                   	push   eax
c00111af:	50                   	push   eax
c00111b0:	89 d8                	mov    eax,ebx
c00111b2:	c1 e3 04             	shl    ebx,0x4
c00111b5:	c1 e8 1c             	shr    eax,0x1c
c00111b8:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00111bd:	50                   	push   eax
c00111be:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00111c2:	e8 87 fe ff ff       	call   c001104e <VgaText::putchar(char)>
c00111c7:	83 c4 10             	add    esp,0x10
c00111ca:	4e                   	dec    esi
c00111cb:	75 e1                	jne    c00111ae <VgaText::putx(unsigned int)+0x20>
c00111cd:	83 c4 20             	add    esp,0x20
c00111d0:	5b                   	pop    ebx
c00111d1:	5e                   	pop    esi
c00111d2:	5f                   	pop    edi
c00111d3:	c3                   	ret    

c00111d4 <VgaText::VgaText(char const*)>:
c00111d4:	57                   	push   edi
c00111d5:	56                   	push   esi
c00111d6:	53                   	push   ebx
c00111d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111db:	83 ec 08             	sub    esp,0x8
c00111de:	6a 00                	push   0x0
c00111e0:	50                   	push   eax
c00111e1:	e8 6e 05 00 00       	call   c0011754 <UnixFile::UnixFile(int)>
c00111e6:	83 c4 10             	add    esp,0x10
c00111e9:	ba 88 a4 02 c0       	mov    edx,0xc002a488
c00111ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111f2:	89 10                	mov    DWORD PTR [eax],edx
c00111f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111f8:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0011202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011206:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0011210:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011214:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c001121b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001121f:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0011226:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001122a:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0011234:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011238:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0011242:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011246:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c001124d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011251:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0011258:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001125c:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0011262:	bb 80 e6 02 c0       	mov    ebx,0xc002e680
c0011267:	b8 08 00 00 00       	mov    eax,0x8
c001126c:	fc                   	cld    
c001126d:	89 d7                	mov    edi,edx
c001126f:	89 de                	mov    esi,ebx
c0011271:	89 c1                	mov    ecx,eax
c0011273:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011275:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011279:	05 1e 10 00 00       	add    eax,0x101e
c001127e:	83 ec 08             	sub    esp,0x8
c0011281:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011285:	50                   	push   eax
c0011286:	e8 a9 f5 fe ff       	call   c0000834 <strcpy>
c001128b:	83 c4 10             	add    esp,0x10
c001128e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011292:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c001129c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112a0:	83 c0 0c             	add    eax,0xc
c00112a3:	83 ec 04             	sub    esp,0x4
c00112a6:	68 00 0f 00 00       	push   0xf00
c00112ab:	6a 00                	push   0x0
c00112ad:	50                   	push   eax
c00112ae:	e8 c5 f4 fe ff       	call   c0000778 <memset>
c00112b3:	83 c4 10             	add    esp,0x10
c00112b6:	83 ec 04             	sub    esp,0x4
c00112b9:	6a 00                	push   0x0
c00112bb:	6a 07                	push   0x7
c00112bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112c1:	e8 b4 f4 ff ff       	call   c001077a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00112c6:	83 c4 10             	add    esp,0x10
c00112c9:	83 ec 08             	sub    esp,0x8
c00112cc:	6a 02                	push   0x2
c00112ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112d2:	e8 49 fa ff ff       	call   c0010d20 <VgaText::setCursorHeight(int)>
c00112d7:	83 c4 10             	add    esp,0x10
c00112da:	83 ec 04             	sub    esp,0x4
c00112dd:	6a 00                	push   0x0
c00112df:	6a 00                	push   0x0
c00112e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112e5:	e8 e0 f5 ff ff       	call   c00108ca <VgaText::setCursor(int, int)>
c00112ea:	83 c4 10             	add    esp,0x10
c00112ed:	83 ec 08             	sub    esp,0x8
c00112f0:	6a 01                	push   0x1
c00112f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112f6:	e8 7d f3 ff ff       	call   c0010678 <VgaText::showCursor(bool)>
c00112fb:	83 c4 10             	add    esp,0x10
c00112fe:	83 ec 08             	sub    esp,0x8
c0011301:	6a 01                	push   0x1
c0011303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011307:	e8 7c f3 ff ff       	call   c0010688 <VgaText::disableBlink(bool)>
c001130c:	83 c4 10             	add    esp,0x10
c001130f:	83 ec 0c             	sub    esp,0xc
c0011312:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011316:	e8 cf fc ff ff       	call   c0010fea <VgaText::clearScreen()>
c001131b:	83 c4 10             	add    esp,0x10
c001131e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011322:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0011329:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001132d:	05 9e 10 00 00       	add    eax,0x109e
c0011332:	83 ec 04             	sub    esp,0x4
c0011335:	68 96 00 00 00       	push   0x96
c001133a:	6a 00                	push   0x0
c001133c:	50                   	push   eax
c001133d:	e8 36 f4 fe ff       	call   c0000778 <memset>
c0011342:	83 c4 10             	add    esp,0x10
c0011345:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011349:	05 34 11 00 00       	add    eax,0x1134
c001134e:	83 ec 04             	sub    esp,0x4
c0011351:	68 2c 01 00 00       	push   0x12c
c0011356:	6a 00                	push   0x0
c0011358:	50                   	push   eax
c0011359:	e8 1a f4 fe ff       	call   c0000778 <memset>
c001135e:	83 c4 10             	add    esp,0x10
c0011361:	90                   	nop
c0011362:	5b                   	pop    ebx
c0011363:	5e                   	pop    esi
c0011364:	5f                   	pop    edi
c0011365:	c3                   	ret    

c0011366 <VgaText::receiveKey(unsigned char)>:
c0011366:	55                   	push   ebp
c0011367:	57                   	push   edi
c0011368:	56                   	push   esi
c0011369:	53                   	push   ebx
c001136a:	83 ec 1c             	sub    esp,0x1c
c001136d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011371:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011375:	84 db                	test   bl,bl
c0011377:	0f 84 c9 00 00 00    	je     c0011446 <VgaText::receiveKey(unsigned char)+0xe0>
c001137d:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0011383:	80 fb 08             	cmp    bl,0x8
c0011386:	75 2c                	jne    c00113b4 <VgaText::receiveKey(unsigned char)+0x4e>
c0011388:	83 ec 0c             	sub    esp,0xc
c001138b:	57                   	push   edi
c001138c:	e8 03 f4 fe ff       	call   c0000794 <strlen>
c0011391:	83 c4 10             	add    esp,0x10
c0011394:	85 c0                	test   eax,eax
c0011396:	74 41                	je     c00113d9 <VgaText::receiveKey(unsigned char)+0x73>
c0011398:	50                   	push   eax
c0011399:	50                   	push   eax
c001139a:	6a 08                	push   0x8
c001139c:	56                   	push   esi
c001139d:	e8 ac fc ff ff       	call   c001104e <VgaText::putchar(char)>
c00113a2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00113a5:	e8 ea f3 fe ff       	call   c0000794 <strlen>
c00113aa:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c00113b2:	eb 22                	jmp    c00113d6 <VgaText::receiveKey(unsigned char)+0x70>
c00113b4:	0f be c3             	movsx  eax,bl
c00113b7:	52                   	push   edx
c00113b8:	52                   	push   edx
c00113b9:	50                   	push   eax
c00113ba:	56                   	push   esi
c00113bb:	e8 8e fc ff ff       	call   c001104e <VgaText::putchar(char)>
c00113c0:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c00113c4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00113c9:	59                   	pop    ecx
c00113ca:	5d                   	pop    ebp
c00113cb:	8d 44 24 16          	lea    eax,[esp+0x16]
c00113cf:	50                   	push   eax
c00113d0:	57                   	push   edi
c00113d1:	e8 9e f5 fe ff       	call   c0000974 <strcat>
c00113d6:	83 c4 10             	add    esp,0x10
c00113d9:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c00113e0:	75 05                	jne    c00113e7 <VgaText::receiveKey(unsigned char)+0x81>
c00113e2:	80 fb 0a             	cmp    bl,0xa
c00113e5:	75 53                	jne    c001143a <VgaText::receiveKey(unsigned char)+0xd4>
c00113e7:	83 ec 0c             	sub    esp,0xc
c00113ea:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c00113f0:	53                   	push   ebx
c00113f1:	e8 9e f3 fe ff       	call   c0000794 <strlen>
c00113f6:	89 3c 24             	mov    DWORD PTR [esp],edi
c00113f9:	89 c5                	mov    ebp,eax
c00113fb:	e8 94 f3 fe ff       	call   c0000794 <strlen>
c0011400:	83 c4 10             	add    esp,0x10
c0011403:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0011407:	3d 2c 01 00 00       	cmp    eax,0x12c
c001140c:	76 10                	jbe    c001141e <VgaText::receiveKey(unsigned char)+0xb8>
c001140e:	83 ec 0c             	sub    esp,0xc
c0011411:	68 33 a4 02 c0       	push   0xc002a433
c0011416:	e8 c8 91 00 00       	call   c001a5e3 <Krnl::panic(char const*)>
c001141b:	83 c4 10             	add    esp,0x10
c001141e:	50                   	push   eax
c001141f:	50                   	push   eax
c0011420:	57                   	push   edi
c0011421:	53                   	push   ebx
c0011422:	e8 4d f5 fe ff       	call   c0000974 <strcat>
c0011427:	83 c4 0c             	add    esp,0xc
c001142a:	68 96 00 00 00       	push   0x96
c001142f:	6a 00                	push   0x0
c0011431:	57                   	push   edi
c0011432:	e8 41 f3 fe ff       	call   c0000778 <memset>
c0011437:	83 c4 10             	add    esp,0x10
c001143a:	83 ec 0c             	sub    esp,0xc
c001143d:	56                   	push   esi
c001143e:	e8 d5 f9 ff ff       	call   c0010e18 <VgaText::doUpdate()>
c0011443:	83 c4 10             	add    esp,0x10
c0011446:	83 c4 1c             	add    esp,0x1c
c0011449:	5b                   	pop    ebx
c001144a:	5e                   	pop    esi
c001144b:	5f                   	pop    edi
c001144c:	5d                   	pop    ebp
c001144d:	c3                   	ret    

c001144e <VgaText::write(unsigned long long, void*, int*)>:
c001144e:	55                   	push   ebp
c001144f:	57                   	push   edi
c0011450:	56                   	push   esi
c0011451:	53                   	push   ebx
c0011452:	83 ec 0c             	sub    esp,0xc
c0011455:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011459:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001145d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011461:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0011468:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c001146b:	39 eb                	cmp    ebx,ebp
c001146d:	74 13                	je     c0011482 <VgaText::write(unsigned long long, void*, int*)+0x34>
c001146f:	43                   	inc    ebx
c0011470:	50                   	push   eax
c0011471:	50                   	push   eax
c0011472:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0011476:	50                   	push   eax
c0011477:	56                   	push   esi
c0011478:	e8 d1 fb ff ff       	call   c001104e <VgaText::putchar(char)>
c001147d:	83 c4 10             	add    esp,0x10
c0011480:	eb e9                	jmp    c001146b <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0011482:	83 ec 0c             	sub    esp,0xc
c0011485:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c001148c:	56                   	push   esi
c001148d:	e8 86 f9 ff ff       	call   c0010e18 <VgaText::doUpdate()>
c0011492:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011496:	89 38                	mov    DWORD PTR [eax],edi
c0011498:	83 c4 1c             	add    esp,0x1c
c001149b:	31 c0                	xor    eax,eax
c001149d:	5b                   	pop    ebx
c001149e:	5e                   	pop    esi
c001149f:	5f                   	pop    edi
c00114a0:	5d                   	pop    ebp
c00114a1:	c3                   	ret    

c00114a2 <newTerminal(char*)>:
c00114a2:	83 ec 28             	sub    esp,0x28
c00114a5:	68 60 12 00 00       	push   0x1260
c00114aa:	e8 91 e3 ff ff       	call   c000f840 <malloc>
c00114af:	5a                   	pop    edx
c00114b0:	59                   	pop    ecx
c00114b1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00114b5:	50                   	push   eax
c00114b6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00114ba:	e8 15 fd ff ff       	call   c00111d4 <VgaText::VgaText(char const*)>
c00114bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114c3:	83 c4 2c             	add    esp,0x2c
c00114c6:	c3                   	ret    
c00114c7:	90                   	nop

c00114c8 <TSS::TSS()>:
c00114c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114cc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00114d3:	90                   	nop
c00114d4:	c3                   	ret    
c00114d5:	90                   	nop

c00114d6 <TSS::setESP(unsigned long)>:
c00114d6:	55                   	push   ebp
c00114d7:	89 e5                	mov    ebp,esp
c00114d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114df:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00114e2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114e5:	90                   	nop
c00114e6:	5d                   	pop    ebp
c00114e7:	c3                   	ret    

c00114e8 <TSS::flush()>:
c00114e8:	55                   	push   ebp
c00114e9:	89 e5                	mov    ebp,esp
c00114eb:	83 ec 10             	sub    esp,0x10
c00114ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00114f3:	83 c8 03             	or     eax,0x3
c00114f6:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00114fa:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00114fe:	66 89 d0             	mov    ax,dx
c0011501:	0f 00 d8             	ltr    ax
c0011504:	90                   	nop
c0011505:	c9                   	leave  
c0011506:	c3                   	ret    
c0011507:	90                   	nop

c0011508 <TSS::setup(unsigned long, unsigned long)>:
c0011508:	55                   	push   ebp
c0011509:	89 e5                	mov    ebp,esp
c001150b:	83 ec 18             	sub    esp,0x18
c001150e:	83 ec 0c             	sub    esp,0xc
c0011511:	6a 68                	push   0x68
c0011513:	e8 28 e3 ff ff       	call   c000f840 <malloc>
c0011518:	83 c4 10             	add    esp,0x10
c001151b:	89 c2                	mov    edx,eax
c001151d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011520:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011523:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011526:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011529:	83 ec 04             	sub    esp,0x4
c001152c:	6a 68                	push   0x68
c001152e:	6a 00                	push   0x0
c0011530:	50                   	push   eax
c0011531:	e8 42 f2 fe ff       	call   c0000778 <memset>
c0011536:	83 c4 10             	add    esp,0x10
c0011539:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001153c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001153f:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0011545:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011548:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001154b:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0011551:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011554:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011557:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001155a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001155d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011560:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011563:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011569:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001156c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001156f:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011575:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011578:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001157b:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011581:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011584:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011587:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c001158d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011590:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011593:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011599:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001159c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001159f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00115a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115ab:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00115ae:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00115b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115b7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00115ba:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115c3:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00115ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115cd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115d0:	0f 20 da             	mov    edx,cr3
c00115d3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00115d6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00115d9:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00115dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115df:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115e2:	83 ec 08             	sub    esp,0x8
c00115e5:	50                   	push   eax
c00115e6:	8d 45 ec             	lea    eax,[ebp-0x14]
c00115e9:	50                   	push   eax
c00115ea:	e8 2f da ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c00115ef:	83 c4 10             	add    esp,0x10
c00115f2:	83 ec 08             	sub    esp,0x8
c00115f5:	6a 68                	push   0x68
c00115f7:	8d 45 ec             	lea    eax,[ebp-0x14]
c00115fa:	50                   	push   eax
c00115fb:	e8 3a da ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c0011600:	83 c4 10             	add    esp,0x10
c0011603:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011607:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001160a:	83 e0 0f             	and    eax,0xf
c001160d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011610:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011613:	83 c8 40             	or     eax,0x40
c0011616:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011619:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c001161e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011624:	05 78 01 00 00       	add    eax,0x178
c0011629:	83 ec 04             	sub    esp,0x4
c001162c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001162f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0011632:	50                   	push   eax
c0011633:	e8 36 da ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c0011638:	83 c4 10             	add    esp,0x10
c001163b:	89 c2                	mov    edx,eax
c001163d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011640:	89 10                	mov    DWORD PTR [eax],edx
c0011642:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0011647:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001164d:	05 78 01 00 00       	add    eax,0x178
c0011652:	83 ec 0c             	sub    esp,0xc
c0011655:	50                   	push   eax
c0011656:	e8 57 da ff ff       	call   c000f0b2 <GDT::flush()>
c001165b:	83 c4 10             	add    esp,0x10
c001165e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011661:	8b 00                	mov    eax,DWORD PTR [eax]
c0011663:	83 ec 08             	sub    esp,0x8
c0011666:	50                   	push   eax
c0011667:	68 9c a4 02 c0       	push   0xc002a49c
c001166c:	e8 c0 18 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0011671:	83 c4 10             	add    esp,0x10
c0011674:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011677:	8b 00                	mov    eax,DWORD PTR [eax]
c0011679:	c9                   	leave  
c001167a:	c3                   	ret    
c001167b:	90                   	nop

c001167c <ReservedFilename::read(unsigned long long, void*, int*)>:
c001167c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011680:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011684:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011687:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001168c:	75 08                	jne    c0011696 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c001168e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011694:	eb 38                	jmp    c00116ce <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011696:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001169b:	75 17                	jne    c00116b4 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c001169d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116a2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116a5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00116ab:	8b 10                	mov    edx,DWORD PTR [eax]
c00116ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116b1:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00116b4:	89 c1                	mov    ecx,eax
c00116b6:	83 e1 fd             	and    ecx,0xfffffffd
c00116b9:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00116bf:	74 cd                	je     c001168e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00116c1:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00116c6:	83 e0 ef             	and    eax,0xffffffef
c00116c9:	83 f8 08             	cmp    eax,0x8
c00116cc:	76 c0                	jbe    c001168e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00116ce:	31 c0                	xor    eax,eax
c00116d0:	c3                   	ret    
c00116d1:	90                   	nop

c00116d2 <ReservedFilename::isAtty()>:
c00116d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116d6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00116d9:	31 c0                	xor    eax,eax
c00116db:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00116e1:	74 09                	je     c00116ec <ReservedFilename::isAtty()+0x1a>
c00116e3:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00116e9:	0f 94 c0             	sete   al
c00116ec:	c3                   	ret    
c00116ed:	90                   	nop

c00116ee <ReservedFilename::write(unsigned long long, void*, int*)>:
c00116ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116f2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00116f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00116fd:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011702:	75 08                	jne    c001170c <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0011704:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001170a:	eb 3d                	jmp    c0011749 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001170c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011711:	75 17                	jne    c001172a <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0011713:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011718:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001171b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011721:	8b 10                	mov    edx,DWORD PTR [eax]
c0011723:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011727:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c001172a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001172f:	75 04                	jne    c0011735 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011731:	89 0a                	mov    DWORD PTR [edx],ecx
c0011733:	eb 14                	jmp    c0011749 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011735:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c001173a:	74 c8                	je     c0011704 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001173c:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011741:	83 e0 ef             	and    eax,0xffffffef
c0011744:	83 f8 08             	cmp    eax,0x8
c0011747:	76 bb                	jbe    c0011704 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011749:	31 c0                	xor    eax,eax
c001174b:	c3                   	ret    

c001174c <UnixFile::getFileDescriptor()>:
c001174c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011750:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011753:	c3                   	ret    

c0011754 <UnixFile::UnixFile(int)>:
c0011754:	53                   	push   ebx
c0011755:	83 ec 28             	sub    esp,0x28
c0011758:	ba 88 a5 02 c0       	mov    edx,0xc002a588
c001175d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011761:	89 10                	mov    DWORD PTR [eax],edx
c0011763:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c001176b:	0f 8f 8c 01 00 00    	jg     c00118fd <UnixFile::UnixFile(int)+0x1a9>
c0011771:	a1 60 d5 02 c0       	mov    eax,ds:0xc002d560
c0011776:	8d 50 01             	lea    edx,[eax+0x1]
c0011779:	89 15 60 d5 02 c0    	mov    DWORD PTR ds:0xc002d560,edx
c001177f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011783:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011786:	83 ec 08             	sub    esp,0x8
c0011789:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001178d:	68 38 e7 02 c0       	push   0xc002e738
c0011792:	e8 c9 6f 01 00       	call   c0028760 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011797:	83 c4 10             	add    esp,0x10
c001179a:	a0 34 e7 02 c0       	mov    al,ds:0xc002e734
c001179f:	83 f0 01             	xor    eax,0x1
c00117a2:	84 c0                	test   al,al
c00117a4:	0f 84 54 01 00 00    	je     c00118fe <UnixFile::UnixFile(int)+0x1aa>
c00117aa:	c6 05 34 e7 02 c0 01 	mov    BYTE PTR ds:0xc002e734,0x1
c00117b1:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00117b9:	83 ec 0c             	sub    esp,0xc
c00117bc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00117c0:	e8 7b e0 ff ff       	call   c000f840 <malloc>
c00117c5:	83 c4 10             	add    esp,0x10
c00117c8:	89 c3                	mov    ebx,eax
c00117ca:	83 ec 08             	sub    esp,0x8
c00117cd:	68 03 ff ff 0f       	push   0xfffff03
c00117d2:	53                   	push   ebx
c00117d3:	e8 2c 01 00 00       	call   c0011904 <ReservedFilename::ReservedFilename(int)>
c00117d8:	83 c4 10             	add    esp,0x10
c00117db:	89 1d 2c e7 02 c0    	mov    DWORD PTR ds:0xc002e72c,ebx
c00117e1:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00117e9:	83 ec 0c             	sub    esp,0xc
c00117ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117f0:	e8 4b e0 ff ff       	call   c000f840 <malloc>
c00117f5:	83 c4 10             	add    esp,0x10
c00117f8:	89 c3                	mov    ebx,eax
c00117fa:	83 ec 08             	sub    esp,0x8
c00117fd:	68 01 ff ff 0f       	push   0xfffff01
c0011802:	53                   	push   ebx
c0011803:	e8 fc 00 00 00       	call   c0011904 <ReservedFilename::ReservedFilename(int)>
c0011808:	83 c4 10             	add    esp,0x10
c001180b:	89 1d 30 e7 02 c0    	mov    DWORD PTR ds:0xc002e730,ebx
c0011811:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011819:	83 ec 0c             	sub    esp,0xc
c001181c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011820:	e8 1b e0 ff ff       	call   c000f840 <malloc>
c0011825:	83 c4 10             	add    esp,0x10
c0011828:	89 c3                	mov    ebx,eax
c001182a:	83 ec 08             	sub    esp,0x8
c001182d:	68 00 ff ff 0f       	push   0xfffff00
c0011832:	53                   	push   ebx
c0011833:	e8 cc 00 00 00       	call   c0011904 <ReservedFilename::ReservedFilename(int)>
c0011838:	83 c4 10             	add    esp,0x10
c001183b:	89 1d 24 e7 02 c0    	mov    DWORD PTR ds:0xc002e724,ebx
c0011841:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011849:	83 ec 0c             	sub    esp,0xc
c001184c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011850:	e8 eb df ff ff       	call   c000f840 <malloc>
c0011855:	83 c4 10             	add    esp,0x10
c0011858:	89 c3                	mov    ebx,eax
c001185a:	83 ec 08             	sub    esp,0x8
c001185d:	68 02 ff ff 0f       	push   0xfffff02
c0011862:	53                   	push   ebx
c0011863:	e8 9c 00 00 00       	call   c0011904 <ReservedFilename::ReservedFilename(int)>
c0011868:	83 c4 10             	add    esp,0x10
c001186b:	89 1d 28 e7 02 c0    	mov    DWORD PTR ds:0xc002e728,ebx
c0011871:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011879:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c001187e:	7f 7e                	jg     c00118fe <UnixFile::UnixFile(int)+0x1aa>
c0011880:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011888:	83 ec 0c             	sub    esp,0xc
c001188b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001188f:	e8 ac df ff ff       	call   c000f840 <malloc>
c0011894:	83 c4 10             	add    esp,0x10
c0011897:	89 c3                	mov    ebx,eax
c0011899:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001189d:	05 10 ff ff 0f       	add    eax,0xfffff10
c00118a2:	83 ec 08             	sub    esp,0x8
c00118a5:	50                   	push   eax
c00118a6:	53                   	push   ebx
c00118a7:	e8 58 00 00 00       	call   c0011904 <ReservedFilename::ReservedFilename(int)>
c00118ac:	83 c4 10             	add    esp,0x10
c00118af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118b3:	89 1c 85 00 e7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1900],ebx
c00118ba:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00118c2:	83 ec 0c             	sub    esp,0xc
c00118c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00118c9:	e8 72 df ff ff       	call   c000f840 <malloc>
c00118ce:	83 c4 10             	add    esp,0x10
c00118d1:	89 c3                	mov    ebx,eax
c00118d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118d7:	05 20 ff ff 0f       	add    eax,0xfffff20
c00118dc:	83 ec 08             	sub    esp,0x8
c00118df:	50                   	push   eax
c00118e0:	53                   	push   ebx
c00118e1:	e8 1e 00 00 00       	call   c0011904 <ReservedFilename::ReservedFilename(int)>
c00118e6:	83 c4 10             	add    esp,0x10
c00118e9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118ed:	89 1c 85 c0 e6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1940],ebx
c00118f4:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118f8:	e9 7c ff ff ff       	jmp    c0011879 <UnixFile::UnixFile(int)+0x125>
c00118fd:	90                   	nop
c00118fe:	83 c4 28             	add    esp,0x28
c0011901:	5b                   	pop    ebx
c0011902:	c3                   	ret    
c0011903:	90                   	nop

c0011904 <ReservedFilename::ReservedFilename(int)>:
c0011904:	83 ec 0c             	sub    esp,0xc
c0011907:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001190b:	83 ec 08             	sub    esp,0x8
c001190e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011912:	50                   	push   eax
c0011913:	e8 3c fe ff ff       	call   c0011754 <UnixFile::UnixFile(int)>
c0011918:	83 c4 10             	add    esp,0x10
c001191b:	ba a4 a5 02 c0       	mov    edx,0xc002a5a4
c0011920:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011924:	89 10                	mov    DWORD PTR [eax],edx
c0011926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001192a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001192e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011931:	90                   	nop
c0011932:	83 c4 0c             	add    esp,0xc
c0011935:	c3                   	ret    

c0011936 <UnixFile::~UnixFile()>:
c0011936:	83 ec 1c             	sub    esp,0x1c
c0011939:	ba 88 a5 02 c0       	mov    edx,0xc002a588
c001193e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011942:	89 10                	mov    DWORD PTR [eax],edx
c0011944:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011948:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001194b:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011950:	7f 73                	jg     c00119c5 <UnixFile::~UnixFile()+0x8f>
c0011952:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001195a:	83 ec 0c             	sub    esp,0xc
c001195d:	68 38 e7 02 c0       	push   0xc002e738
c0011962:	e8 cd 6e 01 00       	call   c0028834 <LinkedList<UnixFile>::getFirstElement()>
c0011967:	83 c4 10             	add    esp,0x10
c001196a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001196e:	83 ec 0c             	sub    esp,0xc
c0011971:	68 38 e7 02 c0       	push   0xc002e738
c0011976:	e8 c1 6e 01 00       	call   c002883c <LinkedList<UnixFile>::removeFirst()>
c001197b:	83 c4 10             	add    esp,0x10
c001197e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011982:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011986:	74 40                	je     c00119c8 <UnixFile::~UnixFile()+0x92>
c0011988:	83 ec 08             	sub    esp,0x8
c001198b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001198f:	68 38 e7 02 c0       	push   0xc002e738
c0011994:	e8 c7 6d 01 00       	call   c0028760 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011999:	83 c4 10             	add    esp,0x10
c001199c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119a0:	8d 50 01             	lea    edx,[eax+0x1]
c00119a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00119a7:	3d 88 13 00 00       	cmp    eax,0x1388
c00119ac:	0f 94 c0             	sete   al
c00119af:	84 c0                	test   al,al
c00119b1:	74 a7                	je     c001195a <UnixFile::~UnixFile()+0x24>
c00119b3:	83 ec 0c             	sub    esp,0xc
c00119b6:	68 60 a5 02 c0       	push   0xc002a560
c00119bb:	e8 23 8c 00 00       	call   c001a5e3 <Krnl::panic(char const*)>
c00119c0:	83 c4 10             	add    esp,0x10
c00119c3:	eb 95                	jmp    c001195a <UnixFile::~UnixFile()+0x24>
c00119c5:	90                   	nop
c00119c6:	eb 01                	jmp    c00119c9 <UnixFile::~UnixFile()+0x93>
c00119c8:	90                   	nop
c00119c9:	90                   	nop
c00119ca:	83 c4 1c             	add    esp,0x1c
c00119cd:	c3                   	ret    

c00119ce <UnixFile::~UnixFile()>:
c00119ce:	83 ec 0c             	sub    esp,0xc
c00119d1:	83 ec 0c             	sub    esp,0xc
c00119d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119d8:	e8 59 ff ff ff       	call   c0011936 <UnixFile::~UnixFile()>
c00119dd:	83 c4 10             	add    esp,0x10
c00119e0:	83 ec 08             	sub    esp,0x8
c00119e3:	6a 0c                	push   0xc
c00119e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119e9:	e8 63 14 00 00       	call   c0012e51 <operator delete(void*, unsigned long)>
c00119ee:	83 c4 10             	add    esp,0x10
c00119f1:	83 c4 0c             	add    esp,0xc
c00119f4:	c3                   	ret    
c00119f5:	90                   	nop

c00119f6 <ReservedFilename::~ReservedFilename()>:
c00119f6:	83 ec 0c             	sub    esp,0xc
c00119f9:	ba a4 a5 02 c0       	mov    edx,0xc002a5a4
c00119fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a02:	89 10                	mov    DWORD PTR [eax],edx
c0011a04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a08:	83 ec 0c             	sub    esp,0xc
c0011a0b:	50                   	push   eax
c0011a0c:	e8 25 ff ff ff       	call   c0011936 <UnixFile::~UnixFile()>
c0011a11:	83 c4 10             	add    esp,0x10
c0011a14:	90                   	nop
c0011a15:	83 c4 0c             	add    esp,0xc
c0011a18:	c3                   	ret    
c0011a19:	90                   	nop

c0011a1a <ReservedFilename::~ReservedFilename()>:
c0011a1a:	83 ec 0c             	sub    esp,0xc
c0011a1d:	83 ec 0c             	sub    esp,0xc
c0011a20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a24:	e8 cd ff ff ff       	call   c00119f6 <ReservedFilename::~ReservedFilename()>
c0011a29:	83 c4 10             	add    esp,0x10
c0011a2c:	83 ec 08             	sub    esp,0x8
c0011a2f:	6a 0c                	push   0xc
c0011a31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a35:	e8 17 14 00 00       	call   c0012e51 <operator delete(void*, unsigned long)>
c0011a3a:	83 c4 10             	add    esp,0x10
c0011a3d:	83 c4 0c             	add    esp,0xc
c0011a40:	c3                   	ret    

c0011a41 <getFromFileDescriptor(int)>:
c0011a41:	53                   	push   ebx
c0011a42:	83 ec 08             	sub    esp,0x8
c0011a45:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011a49:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011a4f:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011a55:	7f 2c                	jg     c0011a83 <getFromFileDescriptor(int)+0x42>
c0011a57:	83 ec 0c             	sub    esp,0xc
c0011a5a:	68 38 e7 02 c0       	push   0xc002e738
c0011a5f:	e8 d0 6d 01 00       	call   c0028834 <LinkedList<UnixFile>::getFirstElement()>
c0011a64:	83 c4 10             	add    esp,0x10
c0011a67:	85 c0                	test   eax,eax
c0011a69:	75 04                	jne    c0011a6f <getFromFileDescriptor(int)+0x2e>
c0011a6b:	31 c0                	xor    eax,eax
c0011a6d:	eb 6e                	jmp    c0011add <getFromFileDescriptor(int)+0x9c>
c0011a6f:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011a72:	74 69                	je     c0011add <getFromFileDescriptor(int)+0x9c>
c0011a74:	52                   	push   edx
c0011a75:	52                   	push   edx
c0011a76:	50                   	push   eax
c0011a77:	68 38 e7 02 c0       	push   0xc002e738
c0011a7c:	e8 5d 6e 01 00       	call   c00288de <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011a81:	eb e1                	jmp    c0011a64 <getFromFileDescriptor(int)+0x23>
c0011a83:	a1 2c e7 02 c0       	mov    eax,ds:0xc002e72c
c0011a88:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011a8e:	74 4d                	je     c0011add <getFromFileDescriptor(int)+0x9c>
c0011a90:	a1 30 e7 02 c0       	mov    eax,ds:0xc002e730
c0011a95:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011a9b:	74 40                	je     c0011add <getFromFileDescriptor(int)+0x9c>
c0011a9d:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c0011aa2:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011aa8:	74 33                	je     c0011add <getFromFileDescriptor(int)+0x9c>
c0011aaa:	a1 24 e7 02 c0       	mov    eax,ds:0xc002e724
c0011aaf:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011ab5:	74 26                	je     c0011add <getFromFileDescriptor(int)+0x9c>
c0011ab7:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011abd:	83 f8 08             	cmp    eax,0x8
c0011ac0:	77 09                	ja     c0011acb <getFromFileDescriptor(int)+0x8a>
c0011ac2:	8b 04 85 00 e7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1900]
c0011ac9:	eb 12                	jmp    c0011add <getFromFileDescriptor(int)+0x9c>
c0011acb:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011ad1:	83 fb 08             	cmp    ebx,0x8
c0011ad4:	77 95                	ja     c0011a6b <getFromFileDescriptor(int)+0x2a>
c0011ad6:	8b 04 9d c0 e6 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1940]
c0011add:	83 c4 08             	add    esp,0x8
c0011ae0:	5b                   	pop    ebx
c0011ae1:	c3                   	ret    

c0011ae2 <__static_initialization_and_destruction_0(int, int)>:
c0011ae2:	83 ec 0c             	sub    esp,0xc
c0011ae5:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011aea:	75 34                	jne    c0011b20 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011aec:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011af4:	75 2a                	jne    c0011b20 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011af6:	83 ec 0c             	sub    esp,0xc
c0011af9:	68 38 e7 02 c0       	push   0xc002e738
c0011afe:	e8 05 6c 01 00       	call   c0028708 <LinkedList<UnixFile>::LinkedList()>
c0011b03:	83 c4 10             	add    esp,0x10
c0011b06:	83 ec 04             	sub    esp,0x4
c0011b09:	68 e8 d4 02 c0       	push   0xc002d4e8
c0011b0e:	68 38 e7 02 c0       	push   0xc002e738
c0011b13:	68 06 87 02 c0       	push   0xc0028706
c0011b18:	e8 ae 12 00 00       	call   c0012dcb <__cxa_atexit>
c0011b1d:	83 c4 10             	add    esp,0x10
c0011b20:	90                   	nop
c0011b21:	83 c4 0c             	add    esp,0xc
c0011b24:	c3                   	ret    

c0011b25 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011b25:	83 ec 0c             	sub    esp,0xc
c0011b28:	83 ec 08             	sub    esp,0x8
c0011b2b:	68 ff ff 00 00       	push   0xffff
c0011b30:	6a 01                	push   0x1
c0011b32:	e8 ab ff ff ff       	call   c0011ae2 <__static_initialization_and_destruction_0(int, int)>
c0011b37:	83 c4 10             	add    esp,0x10
c0011b3a:	83 c4 0c             	add    esp,0xc
c0011b3d:	c3                   	ret    

c0011b3e <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011b3e:	53                   	push   ebx
c0011b3f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011b43:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b47:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011b4d:	89 c8                	mov    eax,ecx
c0011b4f:	d1 e8                	shr    eax,1
c0011b51:	03 05 68 d5 02 c0    	add    eax,DWORD PTR ds:0xc002d568
c0011b57:	83 e1 01             	and    ecx,0x1
c0011b5a:	8a 10                	mov    dl,BYTE PTR [eax]
c0011b5c:	75 09                	jne    c0011b67 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011b5e:	83 e2 f0             	and    edx,0xfffffff0
c0011b61:	09 da                	or     edx,ebx
c0011b63:	88 10                	mov    BYTE PTR [eax],dl
c0011b65:	5b                   	pop    ebx
c0011b66:	c3                   	ret    
c0011b67:	c1 e3 04             	shl    ebx,0x4
c0011b6a:	83 e2 0f             	and    edx,0xf
c0011b6d:	09 da                	or     edx,ebx
c0011b6f:	88 10                	mov    BYTE PTR [eax],dl
c0011b71:	5b                   	pop    ebx
c0011b72:	c3                   	ret    

c0011b73 <Virt::getPageState(unsigned long)>:
c0011b73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b77:	8b 0d 68 d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d568
c0011b7d:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011b83:	89 d0                	mov    eax,edx
c0011b85:	d1 e8                	shr    eax,1
c0011b87:	83 e2 01             	and    edx,0x1
c0011b8a:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011b8d:	75 04                	jne    c0011b93 <Virt::getPageState(unsigned long)+0x20>
c0011b8f:	83 e0 0f             	and    eax,0xf
c0011b92:	c3                   	ret    
c0011b93:	c0 e8 04             	shr    al,0x4
c0011b96:	c3                   	ret    

c0011b97 <Virt::allocateKernelVirtualPages(int)>:
c0011b97:	55                   	push   ebp
c0011b98:	31 ed                	xor    ebp,ebp
c0011b9a:	57                   	push   edi
c0011b9b:	56                   	push   esi
c0011b9c:	53                   	push   ebx
c0011b9d:	31 db                	xor    ebx,ebx
c0011b9f:	83 ec 1c             	sub    esp,0x1c
c0011ba2:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011ba6:	8b 3d 64 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d564
c0011bac:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011bb1:	57                   	push   edi
c0011bb2:	e8 bc ff ff ff       	call   c0011b73 <Virt::getPageState(unsigned long)>
c0011bb7:	5a                   	pop    edx
c0011bb8:	84 c0                	test   al,al
c0011bba:	75 3a                	jne    c0011bf6 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011bbc:	85 db                	test   ebx,ebx
c0011bbe:	75 02                	jne    c0011bc2 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011bc0:	89 fd                	mov    ebp,edi
c0011bc2:	43                   	inc    ebx
c0011bc3:	39 f3                	cmp    ebx,esi
c0011bc5:	74 5a                	je     c0011c21 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011bc7:	47                   	inc    edi
c0011bc8:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011bce:	76 31                	jbe    c0011c01 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011bd0:	c7 05 64 d5 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d564,0xc8000
c0011bda:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011bdf:	75 28                	jne    c0011c09 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011be1:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011be6:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011beb:	57                   	push   edi
c0011bec:	e8 82 ff ff ff       	call   c0011b73 <Virt::getPageState(unsigned long)>
c0011bf1:	5a                   	pop    edx
c0011bf2:	84 c0                	test   al,al
c0011bf4:	74 c6                	je     c0011bbc <Virt::allocateKernelVirtualPages(int)+0x25>
c0011bf6:	31 db                	xor    ebx,ebx
c0011bf8:	47                   	inc    edi
c0011bf9:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011bff:	77 cf                	ja     c0011bd0 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011c01:	89 3d 64 d5 02 c0    	mov    DWORD PTR ds:0xc002d564,edi
c0011c07:	eb a8                	jmp    c0011bb1 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011c09:	83 ec 0c             	sub    esp,0xc
c0011c0c:	68 b8 a5 02 c0       	push   0xc002a5b8
c0011c11:	e8 cd 89 00 00       	call   c001a5e3 <Krnl::panic(char const*)>
c0011c16:	8b 3d 64 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d564
c0011c1c:	83 c4 10             	add    esp,0x10
c0011c1f:	eb 90                	jmp    c0011bb1 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011c21:	89 2d 64 d5 02 c0    	mov    DWORD PTR ds:0xc002d564,ebp
c0011c27:	4b                   	dec    ebx
c0011c28:	74 5f                	je     c0011c89 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011c2a:	85 f6                	test   esi,esi
c0011c2c:	74 3d                	je     c0011c6b <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c2e:	89 e8                	mov    eax,ebp
c0011c30:	31 db                	xor    ebx,ebx
c0011c32:	8d 7e ff             	lea    edi,[esi-0x1]
c0011c35:	eb 14                	jmp    c0011c4b <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011c37:	6a 01                	push   0x1
c0011c39:	43                   	inc    ebx
c0011c3a:	50                   	push   eax
c0011c3b:	e8 fe fe ff ff       	call   c0011b3e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c40:	58                   	pop    eax
c0011c41:	39 f3                	cmp    ebx,esi
c0011c43:	5a                   	pop    edx
c0011c44:	74 25                	je     c0011c6b <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c46:	a1 64 d5 02 c0       	mov    eax,ds:0xc002d564
c0011c4b:	8d 50 01             	lea    edx,[eax+0x1]
c0011c4e:	85 db                	test   ebx,ebx
c0011c50:	89 15 64 d5 02 c0    	mov    DWORD PTR ds:0xc002d564,edx
c0011c56:	74 20                	je     c0011c78 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011c58:	39 df                	cmp    edi,ebx
c0011c5a:	75 db                	jne    c0011c37 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011c5c:	6a 03                	push   0x3
c0011c5e:	43                   	inc    ebx
c0011c5f:	50                   	push   eax
c0011c60:	e8 d9 fe ff ff       	call   c0011b3e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c65:	59                   	pop    ecx
c0011c66:	39 f3                	cmp    ebx,esi
c0011c68:	58                   	pop    eax
c0011c69:	75 db                	jne    c0011c46 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c6b:	83 c4 1c             	add    esp,0x1c
c0011c6e:	89 e8                	mov    eax,ebp
c0011c70:	5b                   	pop    ebx
c0011c71:	c1 e0 0c             	shl    eax,0xc
c0011c74:	5e                   	pop    esi
c0011c75:	5f                   	pop    edi
c0011c76:	5d                   	pop    ebp
c0011c77:	c3                   	ret    
c0011c78:	6a 02                	push   0x2
c0011c7a:	bb 01 00 00 00       	mov    ebx,0x1
c0011c7f:	50                   	push   eax
c0011c80:	e8 b9 fe ff ff       	call   c0011b3e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c85:	58                   	pop    eax
c0011c86:	5a                   	pop    edx
c0011c87:	eb bd                	jmp    c0011c46 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c89:	6a 04                	push   0x4
c0011c8b:	8d 45 01             	lea    eax,[ebp+0x1]
c0011c8e:	55                   	push   ebp
c0011c8f:	a3 64 d5 02 c0       	mov    ds:0xc002d564,eax
c0011c94:	e8 a5 fe ff ff       	call   c0011b3e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c99:	59                   	pop    ecx
c0011c9a:	89 e8                	mov    eax,ebp
c0011c9c:	5b                   	pop    ebx
c0011c9d:	c1 e0 0c             	shl    eax,0xc
c0011ca0:	83 c4 1c             	add    esp,0x1c
c0011ca3:	5b                   	pop    ebx
c0011ca4:	5e                   	pop    esi
c0011ca5:	5f                   	pop    edi
c0011ca6:	5d                   	pop    ebp
c0011ca7:	c3                   	ret    

c0011ca8 <Virt::freeSwapfilePage(unsigned long)>:
c0011ca8:	53                   	push   ebx
c0011ca9:	8b 15 44 e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e744
c0011caf:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011cb3:	b8 01 00 00 00       	mov    eax,0x1
c0011cb8:	89 cb                	mov    ebx,ecx
c0011cba:	d3 e0                	shl    eax,cl
c0011cbc:	c1 eb 05             	shr    ebx,0x5
c0011cbf:	f7 d0                	not    eax
c0011cc1:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011cc4:	5b                   	pop    ebx
c0011cc5:	c3                   	ret    

c0011cc6 <Virt::swapIDToSector(unsigned long)>:
c0011cc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cca:	0f af 05 6c d5 02 c0 	imul   eax,DWORD PTR ds:0xc002d56c
c0011cd1:	03 05 74 d5 02 c0    	add    eax,DWORD PTR ds:0xc002d574
c0011cd7:	c3                   	ret    

c0011cd8 <Virt::allocateSwapfilePage()>:
c0011cd8:	55                   	push   ebp
c0011cd9:	31 d2                	xor    edx,edx
c0011cdb:	57                   	push   edi
c0011cdc:	56                   	push   esi
c0011cdd:	53                   	push   ebx
c0011cde:	83 ec 0c             	sub    esp,0xc
c0011ce1:	8b 0d 6c d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d56c
c0011ce7:	a1 70 d5 02 c0       	mov    eax,ds:0xc002d570
c0011cec:	f7 f1                	div    ecx
c0011cee:	39 0d 70 d5 02 c0    	cmp    DWORD PTR ds:0xc002d570,ecx
c0011cf4:	72 2d                	jb     c0011d23 <Virt::allocateSwapfilePage()+0x4b>
c0011cf6:	8b 35 44 e7 02 c0    	mov    esi,DWORD PTR ds:0xc002e744
c0011cfc:	8b 16                	mov    edx,DWORD PTR [esi]
c0011cfe:	f6 c2 01             	test   dl,0x1
c0011d01:	74 3c                	je     c0011d3f <Virt::allocateSwapfilePage()+0x67>
c0011d03:	31 c9                	xor    ecx,ecx
c0011d05:	bf 01 00 00 00       	mov    edi,0x1
c0011d0a:	eb 12                	jmp    c0011d1e <Virt::allocateSwapfilePage()+0x46>
c0011d0c:	89 fd                	mov    ebp,edi
c0011d0e:	89 ca                	mov    edx,ecx
c0011d10:	d3 e5                	shl    ebp,cl
c0011d12:	c1 ea 05             	shr    edx,0x5
c0011d15:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011d18:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011d1a:	85 ea                	test   edx,ebp
c0011d1c:	74 2a                	je     c0011d48 <Virt::allocateSwapfilePage()+0x70>
c0011d1e:	41                   	inc    ecx
c0011d1f:	39 c8                	cmp    eax,ecx
c0011d21:	77 e9                	ja     c0011d0c <Virt::allocateSwapfilePage()+0x34>
c0011d23:	83 ec 0c             	sub    esp,0xc
c0011d26:	68 2a a8 02 c0       	push   0xc002a82a
c0011d2b:	e8 b3 88 00 00       	call   c001a5e3 <Krnl::panic(char const*)>
c0011d30:	83 c4 10             	add    esp,0x10
c0011d33:	31 c9                	xor    ecx,ecx
c0011d35:	83 c4 0c             	add    esp,0xc
c0011d38:	89 c8                	mov    eax,ecx
c0011d3a:	5b                   	pop    ebx
c0011d3b:	5e                   	pop    esi
c0011d3c:	5f                   	pop    edi
c0011d3d:	5d                   	pop    ebp
c0011d3e:	c3                   	ret    
c0011d3f:	89 f3                	mov    ebx,esi
c0011d41:	bd 01 00 00 00       	mov    ebp,0x1
c0011d46:	31 c9                	xor    ecx,ecx
c0011d48:	09 ea                	or     edx,ebp
c0011d4a:	89 c8                	mov    eax,ecx
c0011d4c:	89 13                	mov    DWORD PTR [ebx],edx
c0011d4e:	83 c4 0c             	add    esp,0xc
c0011d51:	5b                   	pop    ebx
c0011d52:	5e                   	pop    esi
c0011d53:	5f                   	pop    edi
c0011d54:	5d                   	pop    ebp
c0011d55:	c3                   	ret    

c0011d56 <Virt::virtualMemorySetup()>:
c0011d56:	53                   	push   ebx
c0011d57:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d5c:	83 ec 08             	sub    esp,0x8
c0011d5f:	6a 0f                	push   0xf
c0011d61:	53                   	push   ebx
c0011d62:	43                   	inc    ebx
c0011d63:	e8 d6 fd ff ff       	call   c0011b3e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d68:	59                   	pop    ecx
c0011d69:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d6f:	58                   	pop    eax
c0011d70:	75 ed                	jne    c0011d5f <Virt::virtualMemorySetup()+0x9>
c0011d72:	83 ec 08             	sub    esp,0x8
c0011d75:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d7a:	68 00 00 00 c8       	push   0xc8000000
c0011d7f:	68 41 a8 02 c0       	push   0xc002a841
c0011d84:	e8 a8 11 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0011d89:	58                   	pop    eax
c0011d8a:	5a                   	pop    edx
c0011d8b:	68 00 f0 ff ef       	push   0xeffff000
c0011d90:	68 55 a8 02 c0       	push   0xc002a855
c0011d95:	e8 97 11 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0011d9a:	83 c4 10             	add    esp,0x10
c0011d9d:	83 ec 08             	sub    esp,0x8
c0011da0:	6a 00                	push   0x0
c0011da2:	53                   	push   ebx
c0011da3:	43                   	inc    ebx
c0011da4:	e8 95 fd ff ff       	call   c0011b3e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011da9:	83 c4 10             	add    esp,0x10
c0011dac:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011db2:	75 e9                	jne    c0011d9d <Virt::virtualMemorySetup()+0x47>
c0011db4:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011db9:	83 ec 08             	sub    esp,0x8
c0011dbc:	6a 0f                	push   0xf
c0011dbe:	53                   	push   ebx
c0011dbf:	43                   	inc    ebx
c0011dc0:	e8 79 fd ff ff       	call   c0011b3e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011dc5:	83 c4 10             	add    esp,0x10
c0011dc8:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011dce:	75 e9                	jne    c0011db9 <Virt::virtualMemorySetup()+0x63>
c0011dd0:	83 c4 08             	add    esp,0x8
c0011dd3:	5b                   	pop    ebx
c0011dd4:	c3                   	ret    

c0011dd5 <Virt::swappingSetup()>:
c0011dd5:	83 ec 14             	sub    esp,0x14
c0011dd8:	31 d2                	xor    edx,edx
c0011dda:	a1 70 d5 02 c0       	mov    eax,ds:0xc002d570
c0011ddf:	f7 35 6c d5 02 c0    	div    DWORD PTR ds:0xc002d56c
c0011de5:	c1 e8 05             	shr    eax,0x5
c0011de8:	50                   	push   eax
c0011de9:	68 69 a8 02 c0       	push   0xc002a869
c0011dee:	e8 3e 11 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0011df3:	a1 70 d5 02 c0       	mov    eax,ds:0xc002d570
c0011df8:	31 d2                	xor    edx,edx
c0011dfa:	f7 35 6c d5 02 c0    	div    DWORD PTR ds:0xc002d56c
c0011e00:	c1 e8 05             	shr    eax,0x5
c0011e03:	89 04 24             	mov    DWORD PTR [esp],eax
c0011e06:	e8 35 da ff ff       	call   c000f840 <malloc>
c0011e0b:	83 c4 0c             	add    esp,0xc
c0011e0e:	89 c1                	mov    ecx,eax
c0011e10:	a3 44 e7 02 c0       	mov    ds:0xc002e744,eax
c0011e15:	31 d2                	xor    edx,edx
c0011e17:	a1 70 d5 02 c0       	mov    eax,ds:0xc002d570
c0011e1c:	f7 35 6c d5 02 c0    	div    DWORD PTR ds:0xc002d56c
c0011e22:	c1 e8 05             	shr    eax,0x5
c0011e25:	50                   	push   eax
c0011e26:	6a 00                	push   0x0
c0011e28:	51                   	push   ecx
c0011e29:	e8 4a e9 fe ff       	call   c0000778 <memset>
c0011e2e:	83 c4 1c             	add    esp,0x1c
c0011e31:	c3                   	ret    

c0011e32 <Virt::getAKernelVAS()>:
c0011e32:	a1 48 e7 02 c0       	mov    eax,ds:0xc002e748
c0011e37:	c3                   	ret    

c0011e38 <Virt::setupPageSwapping(int)>:
c0011e38:	57                   	push   edi
c0011e39:	56                   	push   esi
c0011e3a:	53                   	push   ebx
c0011e3b:	83 ec 1c             	sub    esp,0x1c
c0011e3e:	68 14 01 00 00       	push   0x114
c0011e43:	e8 f8 d9 ff ff       	call   c000f840 <malloc>
c0011e48:	83 c4 0c             	add    esp,0xc
c0011e4b:	89 c6                	mov    esi,eax
c0011e4d:	ff 35 34 1b 03 c0    	push   DWORD PTR ds:0xc0031b34
c0011e53:	68 84 a8 02 c0       	push   0xc002a884
c0011e58:	50                   	push   eax
c0011e59:	e8 2c 16 00 00       	call   c001348a <File::File(char const*, Process*)>
c0011e5e:	89 34 24             	mov    DWORD PTR [esp],esi
c0011e61:	e8 00 18 00 00       	call   c0013666 <File::unlink()>
c0011e66:	58                   	pop    eax
c0011e67:	5a                   	pop    edx
c0011e68:	6a 12                	push   0x12
c0011e6a:	56                   	push   esi
c0011e6b:	e8 7e 16 00 00       	call   c00134ee <File::open(FileOpenMode)>
c0011e70:	83 c4 10             	add    esp,0x10
c0011e73:	85 c0                	test   eax,eax
c0011e75:	0f 85 ca 00 00 00    	jne    c0011f45 <Virt::setupPageSwapping(int)+0x10d>
c0011e7b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e7f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011e87:	c1 e3 08             	shl    ebx,0x8
c0011e8a:	83 ec 0c             	sub    esp,0xc
c0011e8d:	68 00 00 01 00       	push   0x10000
c0011e92:	e8 a9 d9 ff ff       	call   c000f840 <malloc>
c0011e97:	83 c4 0c             	add    esp,0xc
c0011e9a:	89 c7                	mov    edi,eax
c0011e9c:	68 00 00 01 00       	push   0x10000
c0011ea1:	6a 00                	push   0x0
c0011ea3:	50                   	push   eax
c0011ea4:	e8 cf e8 fe ff       	call   c0000778 <memset>
c0011ea9:	83 c4 10             	add    esp,0x10
c0011eac:	85 db                	test   ebx,ebx
c0011eae:	79 03                	jns    c0011eb3 <Virt::setupPageSwapping(int)+0x7b>
c0011eb0:	83 c3 0f             	add    ebx,0xf
c0011eb3:	c1 fb 04             	sar    ebx,0x4
c0011eb6:	4b                   	dec    ebx
c0011eb7:	83 fb ff             	cmp    ebx,0xffffffff
c0011eba:	74 4b                	je     c0011f07 <Virt::setupPageSwapping(int)+0xcf>
c0011ebc:	83 ec 0c             	sub    esp,0xc
c0011ebf:	8b 06                	mov    eax,DWORD PTR [esi]
c0011ec1:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011ec5:	52                   	push   edx
c0011ec6:	57                   	push   edi
c0011ec7:	6a 00                	push   0x0
c0011ec9:	68 00 00 01 00       	push   0x10000
c0011ece:	56                   	push   esi
c0011ecf:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011ed2:	83 c4 20             	add    esp,0x20
c0011ed5:	85 c0                	test   eax,eax
c0011ed7:	75 59                	jne    c0011f32 <Virt::setupPageSwapping(int)+0xfa>
c0011ed9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011edd:	3d 00 00 01 00       	cmp    eax,0x10000
c0011ee2:	74 d2                	je     c0011eb6 <Virt::setupPageSwapping(int)+0x7e>
c0011ee4:	83 ec 08             	sub    esp,0x8
c0011ee7:	4b                   	dec    ebx
c0011ee8:	50                   	push   eax
c0011ee9:	68 d7 a8 02 c0       	push   0xc002a8d7
c0011eee:	e8 3e 10 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0011ef3:	c7 04 24 e0 a8 02 c0 	mov    DWORD PTR [esp],0xc002a8e0
c0011efa:	e8 e4 86 00 00       	call   c001a5e3 <Krnl::panic(char const*)>
c0011eff:	83 c4 10             	add    esp,0x10
c0011f02:	83 fb ff             	cmp    ebx,0xffffffff
c0011f05:	75 b5                	jne    c0011ebc <Virt::setupPageSwapping(int)+0x84>
c0011f07:	83 ec 0c             	sub    esp,0xc
c0011f0a:	56                   	push   esi
c0011f0b:	e8 3c 16 00 00       	call   c001354c <File::close()>
c0011f10:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011f13:	e8 48 d9 ff ff       	call   c000f860 <rfree>
c0011f18:	83 c4 10             	add    esp,0x10
c0011f1b:	85 f6                	test   esi,esi
c0011f1d:	74 0c                	je     c0011f2b <Virt::setupPageSwapping(int)+0xf3>
c0011f1f:	83 ec 0c             	sub    esp,0xc
c0011f22:	8b 06                	mov    eax,DWORD PTR [esi]
c0011f24:	56                   	push   esi
c0011f25:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f28:	83 c4 10             	add    esp,0x10
c0011f2b:	83 c4 10             	add    esp,0x10
c0011f2e:	5b                   	pop    ebx
c0011f2f:	5e                   	pop    esi
c0011f30:	5f                   	pop    edi
c0011f31:	c3                   	ret    
c0011f32:	83 ec 08             	sub    esp,0x8
c0011f35:	50                   	push   eax
c0011f36:	68 bf a8 02 c0       	push   0xc002a8bf
c0011f3b:	e8 f1 0f 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0011f40:	83 c4 10             	add    esp,0x10
c0011f43:	eb 94                	jmp    c0011ed9 <Virt::setupPageSwapping(int)+0xa1>
c0011f45:	83 ec 08             	sub    esp,0x8
c0011f48:	50                   	push   eax
c0011f49:	68 9b a8 02 c0       	push   0xc002a89b
c0011f4e:	e8 de 0f 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0011f53:	c7 04 24 a4 a8 02 c0 	mov    DWORD PTR [esp],0xc002a8a4
c0011f5a:	e8 84 86 00 00       	call   c001a5e3 <Krnl::panic(char const*)>
c0011f5f:	83 c4 10             	add    esp,0x10
c0011f62:	e9 14 ff ff ff       	jmp    c0011e7b <Virt::setupPageSwapping(int)+0x43>
c0011f67:	90                   	nop

c0011f68 <VAS::VAS()>:
c0011f68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f6c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f77:	a3 48 e7 02 c0       	mov    ds:0xc002e748,eax
c0011f7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f80:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011f84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f88:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011f8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f8f:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011f96:	90                   	nop
c0011f97:	c3                   	ret    

c0011f98 <VAS::VAS(VAS*)>:
c0011f98:	83 ec 0c             	sub    esp,0xc
c0011f9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f9f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011fa6:	83 ec 0c             	sub    esp,0xc
c0011fa9:	68 d8 a5 02 c0       	push   0xc002a5d8
c0011fae:	e8 30 86 00 00       	call   c001a5e3 <Krnl::panic(char const*)>
c0011fb3:	83 c4 10             	add    esp,0x10
c0011fb6:	90                   	nop
c0011fb7:	83 c4 0c             	add    esp,0xc
c0011fba:	c3                   	ret    
c0011fbb:	90                   	nop

c0011fbc <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011fbc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011fc0:	89 c2                	mov    edx,eax
c0011fc2:	c1 e8 0a             	shr    eax,0xa
c0011fc5:	c1 ea 16             	shr    edx,0x16
c0011fc8:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011fcd:	19 c9                	sbb    ecx,ecx
c0011fcf:	c1 e2 0c             	shl    edx,0xc
c0011fd2:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011fd8:	25 fc 0f 00 00       	and    eax,0xffc
c0011fdd:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011fe4:	01 d0                	add    eax,edx
c0011fe6:	c3                   	ret    
c0011fe7:	90                   	nop

c0011fe8 <VAS::getPageTableEntry(unsigned long)>:
c0011fe8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011fec:	89 ca                	mov    edx,ecx
c0011fee:	c1 e9 0a             	shr    ecx,0xa
c0011ff1:	c1 ea 16             	shr    edx,0x16
c0011ff4:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011ffa:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0012000:	c1 e0 0c             	shl    eax,0xc
c0012003:	8d 04 08             	lea    eax,[eax+ecx*1]
c0012006:	c3                   	ret    

c0012007 <Virt::freeKernelVirtualPages(unsigned long)>:
c0012007:	57                   	push   edi
c0012008:	56                   	push   esi
c0012009:	be 01 00 00 00       	mov    esi,0x1
c001200e:	53                   	push   ebx
c001200f:	83 ec 10             	sub    esp,0x10
c0012012:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012016:	c1 eb 0c             	shr    ebx,0xc
c0012019:	eb 3f                	jmp    c001205a <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c001201b:	e8 12 fe ff ff       	call   c0011e32 <Virt::getAKernelVAS()>
c0012020:	83 ec 08             	sub    esp,0x8
c0012023:	57                   	push   edi
c0012024:	50                   	push   eax
c0012025:	e8 be ff ff ff       	call   c0011fe8 <VAS::getPageTableEntry(unsigned long)>
c001202a:	83 c4 10             	add    esp,0x10
c001202d:	8b 00                	mov    eax,DWORD PTR [eax]
c001202f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012033:	f6 c4 04             	test   ah,0x4
c0012036:	75 5f                	jne    c0012097 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0012038:	80 fa 04             	cmp    dl,0x4
c001203b:	74 78                	je     c00120b5 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c001203d:	80 fa 02             	cmp    dl,0x2
c0012040:	0f 84 88 00 00 00    	je     c00120ce <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0012046:	80 fa 03             	cmp    dl,0x3
c0012049:	0f 84 ad 00 00 00    	je     c00120fc <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c001204f:	fe ca                	dec    dl
c0012051:	0f 84 92 00 00 00    	je     c00120e9 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0012057:	43                   	inc    ebx
c0012058:	31 f6                	xor    esi,esi
c001205a:	53                   	push   ebx
c001205b:	e8 13 fb ff ff       	call   c0011b73 <Virt::getPageState(unsigned long)>
c0012060:	5f                   	pop    edi
c0012061:	89 df                	mov    edi,ebx
c0012063:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012067:	c1 e7 0c             	shl    edi,0xc
c001206a:	84 c0                	test   al,al
c001206c:	75 ad                	jne    c001201b <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c001206e:	83 ec 0c             	sub    esp,0xc
c0012071:	68 e6 a8 02 c0       	push   0xc002a8e6
c0012076:	e8 68 85 00 00       	call   c001a5e3 <Krnl::panic(char const*)>
c001207b:	e8 b2 fd ff ff       	call   c0011e32 <Virt::getAKernelVAS()>
c0012080:	5a                   	pop    edx
c0012081:	59                   	pop    ecx
c0012082:	57                   	push   edi
c0012083:	50                   	push   eax
c0012084:	e8 5f ff ff ff       	call   c0011fe8 <VAS::getPageTableEntry(unsigned long)>
c0012089:	83 c4 10             	add    esp,0x10
c001208c:	8b 00                	mov    eax,DWORD PTR [eax]
c001208e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012092:	f6 c4 04             	test   ah,0x4
c0012095:	74 c0                	je     c0012057 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0012097:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001209b:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120a0:	83 ec 0c             	sub    esp,0xc
c00120a3:	50                   	push   eax
c00120a4:	e8 af dd ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c00120a9:	83 c4 10             	add    esp,0x10
c00120ac:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00120b0:	80 fa 04             	cmp    dl,0x4
c00120b3:	75 88                	jne    c001203d <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00120b5:	89 f0                	mov    eax,esi
c00120b7:	84 c0                	test   al,al
c00120b9:	75 47                	jne    c0012102 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c00120bb:	c7 44 24 20 fc a5 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a5fc
c00120c3:	83 c4 10             	add    esp,0x10
c00120c6:	5b                   	pop    ebx
c00120c7:	5e                   	pop    esi
c00120c8:	5f                   	pop    edi
c00120c9:	e9 15 85 00 00       	jmp    c001a5e3 <Krnl::panic(char const*)>
c00120ce:	89 f0                	mov    eax,esi
c00120d0:	84 c0                	test   al,al
c00120d2:	75 15                	jne    c00120e9 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00120d4:	83 ec 0c             	sub    esp,0xc
c00120d7:	68 02 a9 02 c0       	push   0xc002a902
c00120dc:	e8 02 85 00 00       	call   c001a5e3 <Krnl::panic(char const*)>
c00120e1:	83 c4 10             	add    esp,0x10
c00120e4:	e9 6e ff ff ff       	jmp    c0012057 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120e9:	83 ec 08             	sub    esp,0x8
c00120ec:	6a 00                	push   0x0
c00120ee:	53                   	push   ebx
c00120ef:	e8 4a fa ff ff       	call   c0011b3e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00120f4:	83 c4 10             	add    esp,0x10
c00120f7:	e9 5b ff ff ff       	jmp    c0012057 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120fc:	89 f0                	mov    eax,esi
c00120fe:	84 c0                	test   al,al
c0012100:	75 15                	jne    c0012117 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0012102:	83 ec 08             	sub    esp,0x8
c0012105:	6a 00                	push   0x0
c0012107:	53                   	push   ebx
c0012108:	e8 31 fa ff ff       	call   c0011b3e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001210d:	83 c4 10             	add    esp,0x10
c0012110:	83 c4 10             	add    esp,0x10
c0012113:	5b                   	pop    ebx
c0012114:	5e                   	pop    esi
c0012115:	5f                   	pop    edi
c0012116:	c3                   	ret    
c0012117:	c7 44 24 20 1e a9 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a91e
c001211f:	83 c4 10             	add    esp,0x10
c0012122:	5b                   	pop    ebx
c0012123:	5e                   	pop    esi
c0012124:	5f                   	pop    edi
c0012125:	e9 b9 84 00 00       	jmp    c001a5e3 <Krnl::panic(char const*)>

c001212a <VAS::freeAllocatedPages(unsigned long)>:
c001212a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001212e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012132:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0012136:	74 09                	je     c0012141 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0012138:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001213c:	e9 c6 fe ff ff       	jmp    c0012007 <Virt::freeKernelVirtualPages(unsigned long)>
c0012141:	c7 44 24 04 20 a6 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a620
c0012149:	e9 e3 0d 00 00       	jmp    c0012f31 <Dbg::kprintf(char const*, ...)>

c001214e <VAS::virtualToPhysical(unsigned long)>:
c001214e:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012152:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012156:	e8 8d fe ff ff       	call   c0011fe8 <VAS::getPageTableEntry(unsigned long)>
c001215b:	5a                   	pop    edx
c001215c:	8b 00                	mov    eax,DWORD PTR [eax]
c001215e:	59                   	pop    ecx
c001215f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012164:	c3                   	ret    
c0012165:	90                   	nop

c0012166 <VAS::reflagRange(unsigned long, int, int, int)>:
c0012166:	55                   	push   ebp
c0012167:	57                   	push   edi
c0012168:	56                   	push   esi
c0012169:	53                   	push   ebx
c001216a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001216e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0012172:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012176:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001217a:	85 db                	test   ebx,ebx
c001217c:	7e 22                	jle    c00121a0 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c001217e:	c1 e3 0c             	shl    ebx,0xc
c0012181:	01 f3                	add    ebx,esi
c0012183:	56                   	push   esi
c0012184:	81 c6 00 10 00 00    	add    esi,0x1000
c001218a:	55                   	push   ebp
c001218b:	e8 58 fe ff ff       	call   c0011fe8 <VAS::getPageTableEntry(unsigned long)>
c0012190:	5a                   	pop    edx
c0012191:	59                   	pop    ecx
c0012192:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012194:	21 f9                	and    ecx,edi
c0012196:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c001219a:	39 f3                	cmp    ebx,esi
c001219c:	89 08                	mov    DWORD PTR [eax],ecx
c001219e:	75 e3                	jne    c0012183 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c00121a0:	5b                   	pop    ebx
c00121a1:	5e                   	pop    esi
c00121a2:	5f                   	pop    edi
c00121a3:	5d                   	pop    ebp
c00121a4:	c3                   	ret    
c00121a5:	90                   	nop

c00121a6 <VAS::setToWriteCombining(unsigned long, int)>:
c00121a6:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c00121ab:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00121b1:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00121b8:	75 01                	jne    c00121bb <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00121ba:	c3                   	ret    
c00121bb:	68 80 00 00 00       	push   0x80
c00121c0:	6a ff                	push   0xffffffff
c00121c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121ce:	e8 93 ff ff ff       	call   c0012166 <VAS::reflagRange(unsigned long, int, int, int)>
c00121d3:	83 c4 14             	add    esp,0x14
c00121d6:	c3                   	ret    
c00121d7:	90                   	nop

c00121d8 <VAS::mapOtherVASIn(bool, VAS*)>:
c00121d8:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00121dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121e1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00121e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121e8:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00121eb:	19 c0                	sbb    eax,eax
c00121ed:	83 ca 03             	or     edx,0x3
c00121f0:	83 e0 fc             	and    eax,0xfffffffc
c00121f3:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00121fa:	0f 20 d8             	mov    eax,cr3
c00121fd:	0f 22 d8             	mov    cr3,eax
c0012200:	c3                   	ret    
c0012201:	90                   	nop

c0012202 <VAS::~VAS()>:
c0012202:	83 ec 2c             	sub    esp,0x2c
c0012205:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001220d:	e8 f6 bb 00 00       	call   c001de08 <lockScheduler()>
c0012212:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012217:	8b 00                	mov    eax,DWORD PTR [eax]
c0012219:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001221c:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012222:	83 ec 04             	sub    esp,0x4
c0012225:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012229:	6a 01                	push   0x1
c001222b:	50                   	push   eax
c001222c:	e8 a7 ff ff ff       	call   c00121d8 <VAS::mapOtherVASIn(bool, VAS*)>
c0012231:	83 c4 10             	add    esp,0x10
c0012234:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001223c:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0012244:	0f 8f d7 00 00 00    	jg     c0012321 <VAS::~VAS()+0x11f>
c001224a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001224e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012251:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012255:	c1 e2 02             	shl    edx,0x2
c0012258:	01 d0                	add    eax,edx
c001225a:	8b 00                	mov    eax,DWORD PTR [eax]
c001225c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012264:	83 e0 01             	and    eax,0x1
c0012267:	0f 84 ab 00 00 00    	je     c0012318 <VAS::~VAS()+0x116>
c001226d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012275:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c001227d:	7f 75                	jg     c00122f4 <VAS::~VAS()+0xf2>
c001227f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012283:	c1 e0 0a             	shl    eax,0xa
c0012286:	89 c2                	mov    edx,eax
c0012288:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001228c:	01 d0                	add    eax,edx
c001228e:	c1 e0 0c             	shl    eax,0xc
c0012291:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012295:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001229a:	8b 00                	mov    eax,DWORD PTR [eax]
c001229c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001229f:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00122a5:	83 ec 04             	sub    esp,0x4
c00122a8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00122ac:	6a 01                	push   0x1
c00122ae:	50                   	push   eax
c00122af:	e8 08 fd ff ff       	call   c0011fbc <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00122b4:	83 c4 10             	add    esp,0x10
c00122b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00122bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00122bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00122c1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00122c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122c9:	25 01 04 00 00       	and    eax,0x401
c00122ce:	3d 01 04 00 00       	cmp    eax,0x401
c00122d3:	75 19                	jne    c00122ee <VAS::~VAS()+0xec>
c00122d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122d9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122de:	83 ec 0c             	sub    esp,0xc
c00122e1:	50                   	push   eax
c00122e2:	e8 71 db ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c00122e7:	83 c4 10             	add    esp,0x10
c00122ea:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00122ee:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00122f2:	eb 81                	jmp    c0012275 <VAS::~VAS()+0x73>
c00122f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122f8:	25 00 04 00 00       	and    eax,0x400
c00122fd:	74 19                	je     c0012318 <VAS::~VAS()+0x116>
c00122ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012303:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012308:	83 ec 0c             	sub    esp,0xc
c001230b:	50                   	push   eax
c001230c:	e8 47 db ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c0012311:	83 c4 10             	add    esp,0x10
c0012314:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012318:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001231c:	e9 1b ff ff ff       	jmp    c001223c <VAS::~VAS()+0x3a>
c0012321:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012325:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012328:	83 ec 0c             	sub    esp,0xc
c001232b:	50                   	push   eax
c001232c:	e8 d6 fc ff ff       	call   c0012007 <Virt::freeKernelVirtualPages(unsigned long)>
c0012331:	83 c4 10             	add    esp,0x10
c0012334:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012338:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001233b:	83 ec 0c             	sub    esp,0xc
c001233e:	50                   	push   eax
c001233f:	e8 14 db ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c0012344:	83 c4 10             	add    esp,0x10
c0012347:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001234b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001234f:	c1 e0 02             	shl    eax,0x2
c0012352:	83 ec 08             	sub    esp,0x8
c0012355:	50                   	push   eax
c0012356:	68 44 a6 02 c0       	push   0xc002a644
c001235b:	e8 d1 0b 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0012360:	83 c4 10             	add    esp,0x10
c0012363:	e8 a2 ba 00 00       	call   c001de0a <unlockScheduler()>
c0012368:	90                   	nop
c0012369:	83 c4 2c             	add    esp,0x2c
c001236c:	c3                   	ret    
c001236d:	90                   	nop

c001236e <VAS::mapPage(unsigned long, unsigned long, int)>:
c001236e:	55                   	push   ebp
c001236f:	57                   	push   edi
c0012370:	56                   	push   esi
c0012371:	53                   	push   ebx
c0012372:	83 ec 1c             	sub    esp,0x1c
c0012375:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012379:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001237d:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0012383:	77 08                	ja     c001238d <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0012385:	0f 20 d8             	mov    eax,cr3
c0012388:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c001238b:	75 47                	jne    c00123d4 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c001238d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012391:	09 d8                	or     eax,ebx
c0012393:	a9 ff 0f 00 00       	test   eax,0xfff
c0012398:	75 57                	jne    c00123f1 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c001239a:	89 de                	mov    esi,ebx
c001239c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001239f:	c1 ee 16             	shr    esi,0x16
c00123a2:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00123a9:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00123ad:	74 54                	je     c0012403 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c00123af:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00123b3:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00123b9:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00123bd:	c1 e6 0c             	shl    esi,0xc
c00123c0:	c1 eb 0a             	shr    ebx,0xa
c00123c3:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00123c9:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00123cc:	83 c4 1c             	add    esp,0x1c
c00123cf:	5b                   	pop    ebx
c00123d0:	5e                   	pop    esi
c00123d1:	5f                   	pop    edi
c00123d2:	5d                   	pop    ebp
c00123d3:	c3                   	ret    
c00123d4:	83 ec 0c             	sub    esp,0xc
c00123d7:	68 64 a6 02 c0       	push   0xc002a664
c00123dc:	e8 50 0b 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c00123e1:	83 c4 10             	add    esp,0x10
c00123e4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123e8:	09 d8                	or     eax,ebx
c00123ea:	a9 ff 0f 00 00       	test   eax,0xfff
c00123ef:	74 a9                	je     c001239a <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00123f1:	83 ec 0c             	sub    esp,0xc
c00123f4:	68 cc a6 02 c0       	push   0xc002a6cc
c00123f9:	e8 e5 81 00 00       	call   c001a5e3 <Krnl::panic(char const*)>
c00123fe:	83 c4 10             	add    esp,0x10
c0012401:	eb 97                	jmp    c001239a <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012403:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012407:	e8 d6 da ff ff       	call   c000fee2 <Phys::allocatePage()>
c001240c:	89 c5                	mov    ebp,eax
c001240e:	e8 1f fa ff ff       	call   c0011e32 <Virt::getAKernelVAS()>
c0012413:	83 ec 0c             	sub    esp,0xc
c0012416:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001241a:	6a 01                	push   0x1
c001241c:	e8 76 f7 ff ff       	call   c0011b97 <Virt::allocateKernelVirtualPages(int)>
c0012421:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012428:	6a 01                	push   0x1
c001242a:	50                   	push   eax
c001242b:	55                   	push   ebp
c001242c:	81 cd 07 04 00 00    	or     ebp,0x407
c0012432:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012436:	51                   	push   ecx
c0012437:	e8 26 02 00 00       	call   c0012662 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001243c:	83 c4 1c             	add    esp,0x1c
c001243f:	68 00 10 00 00       	push   0x1000
c0012444:	6a 00                	push   0x0
c0012446:	50                   	push   eax
c0012447:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001244b:	e8 28 e3 fe ff       	call   c0000778 <memset>
c0012450:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012454:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012457:	e8 ab fb ff ff       	call   c0012007 <Virt::freeKernelVirtualPages(unsigned long)>
c001245c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012460:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012463:	83 c4 10             	add    esp,0x10
c0012466:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0012469:	e9 41 ff ff ff       	jmp    c00123af <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c001246e <VAS::allocatePages(int, int)>:
c001246e:	55                   	push   ebp
c001246f:	57                   	push   edi
c0012470:	56                   	push   esi
c0012471:	53                   	push   ebx
c0012472:	83 ec 1c             	sub    esp,0x1c
c0012475:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012479:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c001247e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012484:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001248a:	83 e0 01             	and    eax,0x1
c001248d:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0012491:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012495:	0f 85 cc 00 00 00    	jne    c0012567 <VAS::allocatePages(int, int)+0xf9>
c001249b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001249e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00124a2:	85 c0                	test   eax,eax
c00124a4:	0f 84 a1 00 00 00    	je     c001254b <VAS::allocatePages(int, int)+0xdd>
c00124aa:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00124ae:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00124b2:	c1 e6 0c             	shl    esi,0xc
c00124b5:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00124b9:	85 c0                	test   eax,eax
c00124bb:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00124be:	7e 33                	jle    c00124f3 <VAS::allocatePages(int, int)+0x85>
c00124c0:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00124c4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124c8:	81 cd 00 04 00 00    	or     ebp,0x400
c00124ce:	e8 0f da ff ff       	call   c000fee2 <Phys::allocatePage()>
c00124d3:	55                   	push   ebp
c00124d4:	53                   	push   ebx
c00124d5:	50                   	push   eax
c00124d6:	57                   	push   edi
c00124d7:	e8 92 fe ff ff       	call   c001236e <VAS::mapPage(unsigned long, unsigned long, int)>
c00124dc:	83 c4 10             	add    esp,0x10
c00124df:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124e4:	74 03                	je     c00124e9 <VAS::allocatePages(int, int)+0x7b>
c00124e6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124e9:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124ef:	39 de                	cmp    esi,ebx
c00124f1:	75 db                	jne    c00124ce <VAS::allocatePages(int, int)+0x60>
c00124f3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124f8:	75 12                	jne    c001250c <VAS::allocatePages(int, int)+0x9e>
c00124fa:	0f 20 d8             	mov    eax,cr3
c00124fd:	0f 22 d8             	mov    cr3,eax
c0012500:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012504:	83 c4 1c             	add    esp,0x1c
c0012507:	5b                   	pop    ebx
c0012508:	5e                   	pop    esi
c0012509:	5f                   	pop    edi
c001250a:	5d                   	pop    ebp
c001250b:	c3                   	ret    
c001250c:	c1 ee 0a             	shr    esi,0xa
c001250f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012513:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012519:	c1 eb 0a             	shr    ebx,0xa
c001251c:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0012522:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012528:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001252e:	39 c3                	cmp    ebx,eax
c0012530:	77 ce                	ja     c0012500 <VAS::allocatePages(int, int)+0x92>
c0012532:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012535:	81 c3 00 10 00 00    	add    ebx,0x1000
c001253b:	39 d8                	cmp    eax,ebx
c001253d:	73 f3                	jae    c0012532 <VAS::allocatePages(int, int)+0xc4>
c001253f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012543:	83 c4 1c             	add    esp,0x1c
c0012546:	5b                   	pop    ebx
c0012547:	5e                   	pop    esi
c0012548:	5f                   	pop    edi
c0012549:	5d                   	pop    ebp
c001254a:	c3                   	ret    
c001254b:	83 ec 0c             	sub    esp,0xc
c001254e:	68 f0 a6 02 c0       	push   0xc002a6f0
c0012553:	e8 8b 80 00 00       	call   c001a5e3 <Krnl::panic(char const*)>
c0012558:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001255b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001255f:	83 c4 10             	add    esp,0x10
c0012562:	e9 43 ff ff ff       	jmp    c00124aa <VAS::allocatePages(int, int)+0x3c>
c0012567:	83 ec 0c             	sub    esp,0xc
c001256a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001256e:	e8 24 f6 ff ff       	call   c0011b97 <Virt::allocateKernelVirtualPages(int)>
c0012573:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012577:	83 c4 10             	add    esp,0x10
c001257a:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c001257f:	0f 87 9b 00 00 00    	ja     c0012620 <VAS::allocatePages(int, int)+0x1b2>
c0012585:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012589:	85 d2                	test   edx,edx
c001258b:	7e 3c                	jle    c00125c9 <VAS::allocatePages(int, int)+0x15b>
c001258d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012591:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012595:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012599:	c1 e5 0c             	shl    ebp,0xc
c001259c:	81 ce 00 04 00 00    	or     esi,0x400
c00125a2:	01 dd                	add    ebp,ebx
c00125a4:	e8 39 d9 ff ff       	call   c000fee2 <Phys::allocatePage()>
c00125a9:	56                   	push   esi
c00125aa:	53                   	push   ebx
c00125ab:	50                   	push   eax
c00125ac:	57                   	push   edi
c00125ad:	e8 bc fd ff ff       	call   c001236e <VAS::mapPage(unsigned long, unsigned long, int)>
c00125b2:	83 c4 10             	add    esp,0x10
c00125b5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125ba:	74 03                	je     c00125bf <VAS::allocatePages(int, int)+0x151>
c00125bc:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125bf:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125c5:	39 dd                	cmp    ebp,ebx
c00125c7:	75 db                	jne    c00125a4 <VAS::allocatePages(int, int)+0x136>
c00125c9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125ce:	0f 84 26 ff ff ff    	je     c00124fa <VAS::allocatePages(int, int)+0x8c>
c00125d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00125d8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00125dc:	89 d3                	mov    ebx,edx
c00125de:	c1 e0 0c             	shl    eax,0xc
c00125e1:	c1 eb 0a             	shr    ebx,0xa
c00125e4:	01 d0                	add    eax,edx
c00125e6:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00125ec:	c1 e8 0a             	shr    eax,0xa
c00125ef:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00125f5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00125fa:	2d 00 00 40 00       	sub    eax,0x400000
c00125ff:	39 c3                	cmp    ebx,eax
c0012601:	0f 87 f9 fe ff ff    	ja     c0012500 <VAS::allocatePages(int, int)+0x92>
c0012607:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001260a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012610:	39 d8                	cmp    eax,ebx
c0012612:	73 f3                	jae    c0012607 <VAS::allocatePages(int, int)+0x199>
c0012614:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012618:	83 c4 1c             	add    esp,0x1c
c001261b:	5b                   	pop    ebx
c001261c:	5e                   	pop    esi
c001261d:	5f                   	pop    edi
c001261e:	5d                   	pop    ebp
c001261f:	c3                   	ret    
c0012620:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0012625:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001262b:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0012632:	0f 84 4d ff ff ff    	je     c0012585 <VAS::allocatePages(int, int)+0x117>
c0012638:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0012640:	e9 40 ff ff ff       	jmp    c0012585 <VAS::allocatePages(int, int)+0x117>
c0012645:	90                   	nop

c0012646 <VAS::setCPUSpecific(unsigned long)>:
c0012646:	83 ec 0c             	sub    esp,0xc
c0012649:	6a 05                	push   0x5
c001264b:	68 00 00 40 c2       	push   0xc2400000
c0012650:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012654:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012658:	e8 11 fd ff ff       	call   c001236e <VAS::mapPage(unsigned long, unsigned long, int)>
c001265d:	83 c4 1c             	add    esp,0x1c
c0012660:	c3                   	ret    
c0012661:	90                   	nop

c0012662 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012662:	55                   	push   ebp
c0012663:	57                   	push   edi
c0012664:	56                   	push   esi
c0012665:	53                   	push   ebx
c0012666:	83 ec 1c             	sub    esp,0x1c
c0012669:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c001266e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012672:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012678:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001267c:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012682:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012686:	83 e0 01             	and    eax,0x1
c0012689:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001268d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012691:	85 c0                	test   eax,eax
c0012693:	7e 39                	jle    c00126ce <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012695:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012699:	89 f3                	mov    ebx,esi
c001269b:	c1 e0 0c             	shl    eax,0xc
c001269e:	01 f0                	add    eax,esi
c00126a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00126a4:	55                   	push   ebp
c00126a5:	53                   	push   ebx
c00126a6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126aa:	29 f0                	sub    eax,esi
c00126ac:	01 d8                	add    eax,ebx
c00126ae:	50                   	push   eax
c00126af:	57                   	push   edi
c00126b0:	e8 b9 fc ff ff       	call   c001236e <VAS::mapPage(unsigned long, unsigned long, int)>
c00126b5:	83 c4 10             	add    esp,0x10
c00126b8:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00126bd:	74 03                	je     c00126c2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c00126bf:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00126c2:	81 c3 00 10 00 00    	add    ebx,0x1000
c00126c8:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c00126cc:	75 d6                	jne    c00126a4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c00126ce:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00126d3:	75 10                	jne    c00126e5 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c00126d5:	0f 20 d8             	mov    eax,cr3
c00126d8:	0f 22 d8             	mov    cr3,eax
c00126db:	83 c4 1c             	add    esp,0x1c
c00126de:	89 f0                	mov    eax,esi
c00126e0:	5b                   	pop    ebx
c00126e1:	5e                   	pop    esi
c00126e2:	5f                   	pop    edi
c00126e3:	5d                   	pop    ebp
c00126e4:	c3                   	ret    
c00126e5:	89 f3                	mov    ebx,esi
c00126e7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126eb:	c1 eb 0a             	shr    ebx,0xa
c00126ee:	c1 e0 0c             	shl    eax,0xc
c00126f1:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00126f7:	01 f0                	add    eax,esi
c00126f9:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00126ff:	c1 e8 0a             	shr    eax,0xa
c0012702:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012707:	2d 00 00 40 00       	sub    eax,0x400000
c001270c:	39 c3                	cmp    ebx,eax
c001270e:	77 cb                	ja     c00126db <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0012710:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012713:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012719:	39 d8                	cmp    eax,ebx
c001271b:	73 f3                	jae    c0012710 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c001271d:	83 c4 1c             	add    esp,0x1c
c0012720:	89 f0                	mov    eax,esi
c0012722:	5b                   	pop    ebx
c0012723:	5e                   	pop    esi
c0012724:	5f                   	pop    edi
c0012725:	5d                   	pop    ebp
c0012726:	c3                   	ret    
c0012727:	90                   	nop

c0012728 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012728:	55                   	push   ebp
c0012729:	57                   	push   edi
c001272a:	56                   	push   esi
c001272b:	53                   	push   ebx
c001272c:	83 ec 1c             	sub    esp,0x1c
c001272f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012733:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012737:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c001273b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001273f:	a9 ff 0f 00 00       	test   eax,0xfff
c0012744:	75 4a                	jne    c0012790 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012746:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001274a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001274d:	c1 eb 16             	shr    ebx,0x16
c0012750:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012757:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c001275b:	74 4d                	je     c00127aa <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c001275d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012761:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012765:	c1 e8 0a             	shr    eax,0xa
c0012768:	80 fa 01             	cmp    dl,0x1
c001276b:	19 d2                	sbb    edx,edx
c001276d:	c1 e3 0c             	shl    ebx,0xc
c0012770:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012774:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c001277a:	25 fc 0f 00 00       	and    eax,0xffc
c001277f:	01 d8                	add    eax,ebx
c0012781:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012788:	83 c4 1c             	add    esp,0x1c
c001278b:	5b                   	pop    ebx
c001278c:	5e                   	pop    esi
c001278d:	5f                   	pop    edi
c001278e:	5d                   	pop    ebp
c001278f:	c3                   	ret    
c0012790:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012794:	83 ec 0c             	sub    esp,0xc
c0012797:	68 1c a7 02 c0       	push   0xc002a71c
c001279c:	e8 42 7e 00 00       	call   c001a5e3 <Krnl::panic(char const*)>
c00127a1:	83 c4 10             	add    esp,0x10
c00127a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00127a8:	eb 9c                	jmp    c0012746 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c00127aa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00127ae:	e8 2f d7 ff ff       	call   c000fee2 <Phys::allocatePage()>
c00127b3:	89 c5                	mov    ebp,eax
c00127b5:	e8 78 f6 ff ff       	call   c0011e32 <Virt::getAKernelVAS()>
c00127ba:	83 ec 0c             	sub    esp,0xc
c00127bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00127c1:	6a 01                	push   0x1
c00127c3:	e8 cf f3 ff ff       	call   c0011b97 <Virt::allocateKernelVirtualPages(int)>
c00127c8:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00127cf:	6a 01                	push   0x1
c00127d1:	50                   	push   eax
c00127d2:	55                   	push   ebp
c00127d3:	81 cd 07 04 00 00    	or     ebp,0x407
c00127d9:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00127dd:	51                   	push   ecx
c00127de:	e8 7f fe ff ff       	call   c0012662 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00127e3:	83 c4 1c             	add    esp,0x1c
c00127e6:	68 00 10 00 00       	push   0x1000
c00127eb:	6a 00                	push   0x0
c00127ed:	50                   	push   eax
c00127ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00127f2:	e8 81 df fe ff       	call   c0000778 <memset>
c00127f7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00127fb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00127fe:	e8 04 f8 ff ff       	call   c0012007 <Virt::freeKernelVirtualPages(unsigned long)>
c0012803:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012806:	83 c4 10             	add    esp,0x10
c0012809:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c001280c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012810:	e9 48 ff ff ff       	jmp    c001275d <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0012815:	90                   	nop

c0012816 <VAS::VAS(bool)>:
c0012816:	53                   	push   ebx
c0012817:	83 ec 28             	sub    esp,0x28
c001281a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001281e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012822:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012826:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001282d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012831:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012835:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012838:	e8 a5 d6 ff ff       	call   c000fee2 <Phys::allocatePage()>
c001283d:	89 c2                	mov    edx,eax
c001283f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012843:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012846:	e8 e7 f5 ff ff       	call   c0011e32 <Virt::getAKernelVAS()>
c001284b:	89 c3                	mov    ebx,eax
c001284d:	83 ec 0c             	sub    esp,0xc
c0012850:	6a 01                	push   0x1
c0012852:	e8 40 f3 ff ff       	call   c0011b97 <Virt::allocateKernelVirtualPages(int)>
c0012857:	83 c4 10             	add    esp,0x10
c001285a:	89 c2                	mov    edx,eax
c001285c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012860:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012863:	83 ec 0c             	sub    esp,0xc
c0012866:	6a 03                	push   0x3
c0012868:	6a 01                	push   0x1
c001286a:	52                   	push   edx
c001286b:	50                   	push   eax
c001286c:	53                   	push   ebx
c001286d:	e8 f0 fd ff ff       	call   c0012662 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012872:	83 c4 20             	add    esp,0x20
c0012875:	89 c2                	mov    edx,eax
c0012877:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001287b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001287e:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012886:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c001288e:	7f 1c                	jg     c00128ac <VAS::VAS(bool)+0x96>
c0012890:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012894:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012897:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001289b:	c1 e2 02             	shl    edx,0x2
c001289e:	01 d0                	add    eax,edx
c00128a0:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00128a6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00128aa:	eb da                	jmp    c0012886 <VAS::VAS(bool)+0x70>
c00128ac:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00128b4:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00128bc:	7f 7a                	jg     c0012938 <VAS::VAS(bool)+0x122>
c00128be:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128c2:	2d 00 02 00 00       	sub    eax,0x200
c00128c7:	c1 e0 0c             	shl    eax,0xc
c00128ca:	83 c8 03             	or     eax,0x3
c00128cd:	89 c2                	mov    edx,eax
c00128cf:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c00128d4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128da:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00128e0:	83 e0 10             	and    eax,0x10
c00128e3:	84 c0                	test   al,al
c00128e5:	74 07                	je     c00128ee <VAS::VAS(bool)+0xd8>
c00128e7:	b8 00 01 00 00       	mov    eax,0x100
c00128ec:	eb 05                	jmp    c00128f3 <VAS::VAS(bool)+0xdd>
c00128ee:	b8 00 00 00 00       	mov    eax,0x0
c00128f3:	09 d0                	or     eax,edx
c00128f5:	89 c1                	mov    ecx,eax
c00128f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128fb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00128fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012902:	c1 e2 02             	shl    edx,0x2
c0012905:	01 d0                	add    eax,edx
c0012907:	89 ca                	mov    edx,ecx
c0012909:	89 10                	mov    DWORD PTR [eax],edx
c001290b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001290f:	2d 40 03 00 00       	sub    eax,0x340
c0012914:	83 f8 7f             	cmp    eax,0x7f
c0012917:	77 16                	ja     c001292f <VAS::VAS(bool)+0x119>
c0012919:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001291d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012920:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012924:	c1 e2 02             	shl    edx,0x2
c0012927:	01 d0                	add    eax,edx
c0012929:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001292f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012933:	e9 7c ff ff ff       	jmp    c00128b4 <VAS::VAS(bool)+0x9e>
c0012938:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c001293d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012943:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012949:	83 e0 10             	and    eax,0x10
c001294c:	84 c0                	test   al,al
c001294e:	74 07                	je     c0012957 <VAS::VAS(bool)+0x141>
c0012950:	b8 03 41 00 00       	mov    eax,0x4103
c0012955:	eb 05                	jmp    c001295c <VAS::VAS(bool)+0x146>
c0012957:	b8 03 40 00 00       	mov    eax,0x4003
c001295c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012960:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012963:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012969:	89 02                	mov    DWORD PTR [edx],eax
c001296b:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0012970:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012976:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001297c:	83 ec 08             	sub    esp,0x8
c001297f:	50                   	push   eax
c0012980:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012984:	e8 bd fc ff ff       	call   c0012646 <VAS::setCPUSpecific(unsigned long)>
c0012989:	83 c4 10             	add    esp,0x10
c001298c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012990:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012993:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0012998:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001299e:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00129a4:	83 e0 10             	and    eax,0x10
c00129a7:	84 c0                	test   al,al
c00129a9:	74 07                	je     c00129b2 <VAS::VAS(bool)+0x19c>
c00129ab:	b8 00 01 00 00       	mov    eax,0x100
c00129b0:	eb 05                	jmp    c00129b7 <VAS::VAS(bool)+0x1a1>
c00129b2:	b8 00 00 00 00       	mov    eax,0x0
c00129b7:	09 c2                	or     edx,eax
c00129b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129bd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00129c0:	05 fc 0f 00 00       	add    eax,0xffc
c00129c5:	83 ca 03             	or     edx,0x3
c00129c8:	89 10                	mov    DWORD PTR [eax],edx
c00129ca:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c00129cf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129d5:	83 ec 0c             	sub    esp,0xc
c00129d8:	50                   	push   eax
c00129d9:	e8 66 1c 00 00       	call   c0014644 <Device::getName()>
c00129de:	83 c4 10             	add    esp,0x10
c00129e1:	83 ec 08             	sub    esp,0x8
c00129e4:	68 38 a9 02 c0       	push   0xc002a938
c00129e9:	50                   	push   eax
c00129ea:	e8 d1 de fe ff       	call   c00008c0 <strcmp>
c00129ef:	83 c4 10             	add    esp,0x10
c00129f2:	85 c0                	test   eax,eax
c00129f4:	0f 94 c0             	sete   al
c00129f7:	84 c0                	test   al,al
c00129f9:	74 70                	je     c0012a6b <VAS::VAS(bool)+0x255>
c00129fb:	e8 eb b3 00 00       	call   c001ddeb <disableIRQs()>
c0012a00:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0012a05:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a0b:	05 7c 09 00 00       	add    eax,0x97c
c0012a10:	83 ec 0c             	sub    esp,0xc
c0012a13:	50                   	push   eax
c0012a14:	e8 a3 c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a19:	83 c4 10             	add    esp,0x10
c0012a1c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a21:	89 c3                	mov    ebx,eax
c0012a23:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0012a28:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a2e:	05 7c 09 00 00       	add    eax,0x97c
c0012a33:	83 ec 0c             	sub    esp,0xc
c0012a36:	50                   	push   eax
c0012a37:	e8 80 c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a3c:	83 c4 10             	add    esp,0x10
c0012a3f:	83 ec 08             	sub    esp,0x8
c0012a42:	50                   	push   eax
c0012a43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a47:	e8 9c f5 ff ff       	call   c0011fe8 <VAS::getPageTableEntry(unsigned long)>
c0012a4c:	83 c4 10             	add    esp,0x10
c0012a4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a51:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a56:	6a 11                	push   0x11
c0012a58:	53                   	push   ebx
c0012a59:	50                   	push   eax
c0012a5a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a5e:	e8 0b f9 ff ff       	call   c001236e <VAS::mapPage(unsigned long, unsigned long, int)>
c0012a63:	83 c4 10             	add    esp,0x10
c0012a66:	e8 8e b3 00 00       	call   c001ddf9 <enableIRQs()>
c0012a6b:	90                   	nop
c0012a6c:	83 c4 28             	add    esp,0x28
c0012a6f:	5b                   	pop    ebx
c0012a70:	c3                   	ret    
c0012a71:	90                   	nop

c0012a72 <VAS::evict(unsigned long)>:
c0012a72:	57                   	push   edi
c0012a73:	56                   	push   esi
c0012a74:	53                   	push   ebx
c0012a75:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0012a79:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012a7d:	e8 86 b3 00 00       	call   c001de08 <lockScheduler()>
c0012a82:	83 ec 08             	sub    esp,0x8
c0012a85:	56                   	push   esi
c0012a86:	68 40 a7 02 c0       	push   0xc002a740
c0012a8b:	e8 a1 04 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0012a90:	e8 43 f2 ff ff       	call   c0011cd8 <Virt::allocateSwapfilePage()>
c0012a95:	83 c4 0c             	add    esp,0xc
c0012a98:	89 c3                	mov    ebx,eax
c0012a9a:	50                   	push   eax
c0012a9b:	50                   	push   eax
c0012a9c:	68 46 a9 02 c0       	push   0xc002a946
c0012aa1:	e8 8b 04 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0012aa6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012aa9:	e8 18 f2 ff ff       	call   c0011cc6 <Virt::swapIDToSector(unsigned long)>
c0012aae:	c1 e3 0b             	shl    ebx,0xb
c0012ab1:	89 34 24             	mov    DWORD PTR [esp],esi
c0012ab4:	31 d2                	xor    edx,edx
c0012ab6:	6a 08                	push   0x8
c0012ab8:	52                   	push   edx
c0012ab9:	50                   	push   eax
c0012aba:	0f be 05 78 d5 02 c0 	movsx  eax,BYTE PTR ds:0xc002d578
c0012ac1:	ff 34 85 dc ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd1524]
c0012ac8:	e8 f1 3c 00 00       	call   c00167be <LogicalDisk::write(unsigned long long, int, void*)>
c0012acd:	83 c4 18             	add    esp,0x18
c0012ad0:	56                   	push   esi
c0012ad1:	57                   	push   edi
c0012ad2:	e8 11 f5 ff ff       	call   c0011fe8 <VAS::getPageTableEntry(unsigned long)>
c0012ad7:	89 c6                	mov    esi,eax
c0012ad9:	8b 00                	mov    eax,DWORD PTR [eax]
c0012adb:	c1 e8 0c             	shr    eax,0xc
c0012ade:	89 04 24             	mov    DWORD PTR [esp],eax
c0012ae1:	e8 72 d3 ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c0012ae6:	8b 16                	mov    edx,DWORD PTR [esi]
c0012ae8:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012aee:	09 d3                	or     ebx,edx
c0012af0:	89 1e                	mov    DWORD PTR [esi],ebx
c0012af2:	c7 04 24 56 a9 02 c0 	mov    DWORD PTR [esp],0xc002a956
c0012af9:	e8 33 04 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0012afe:	83 c4 10             	add    esp,0x10
c0012b01:	5b                   	pop    ebx
c0012b02:	5e                   	pop    esi
c0012b03:	5f                   	pop    edi
c0012b04:	e9 01 b3 00 00       	jmp    c001de0a <unlockScheduler()>
c0012b09:	90                   	nop

c0012b0a <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012b0a:	55                   	push   ebp
c0012b0b:	57                   	push   edi
c0012b0c:	56                   	push   esi
c0012b0d:	53                   	push   ebx
c0012b0e:	83 ec 0c             	sub    esp,0xc
c0012b11:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0012b15:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012b19:	e8 ea b2 00 00       	call   c001de08 <lockScheduler()>
c0012b1e:	83 ec 08             	sub    esp,0x8
c0012b21:	57                   	push   edi
c0012b22:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c0012b28:	68 60 a7 02 c0       	push   0xc002a760
c0012b2d:	e8 ff 03 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0012b32:	5b                   	pop    ebx
c0012b33:	5d                   	pop    ebp
c0012b34:	57                   	push   edi
c0012b35:	56                   	push   esi
c0012b36:	e8 ad f4 ff ff       	call   c0011fe8 <VAS::getPageTableEntry(unsigned long)>
c0012b3b:	5a                   	pop    edx
c0012b3c:	89 c3                	mov    ebx,eax
c0012b3e:	59                   	pop    ecx
c0012b3f:	ff 30                	push   DWORD PTR [eax]
c0012b41:	68 66 a9 02 c0       	push   0xc002a966
c0012b46:	e8 e6 03 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0012b4b:	5d                   	pop    ebp
c0012b4c:	58                   	pop    eax
c0012b4d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012b4f:	c1 e8 0b             	shr    eax,0xb
c0012b52:	50                   	push   eax
c0012b53:	68 77 a9 02 c0       	push   0xc002a977
c0012b58:	e8 d4 03 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0012b5d:	83 c4 10             	add    esp,0x10
c0012b60:	f7 03 00 04 00 00    	test   DWORD PTR [ebx],0x400
c0012b66:	75 1f                	jne    c0012b87 <VAS::tryLoadBackOffDisk(unsigned long)+0x7d>
c0012b68:	83 ec 0c             	sub    esp,0xc
c0012b6b:	68 ac a9 02 c0       	push   0xc002a9ac
c0012b70:	e8 bc 03 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0012b75:	e8 90 b2 00 00       	call   c001de0a <unlockScheduler()>
c0012b7a:	83 c4 10             	add    esp,0x10
c0012b7d:	31 c0                	xor    eax,eax
c0012b7f:	83 c4 0c             	add    esp,0xc
c0012b82:	5b                   	pop    ebx
c0012b83:	5e                   	pop    esi
c0012b84:	5f                   	pop    edi
c0012b85:	5d                   	pop    ebp
c0012b86:	c3                   	ret    
c0012b87:	83 ec 0c             	sub    esp,0xc
c0012b8a:	68 94 a9 02 c0       	push   0xc002a994
c0012b8f:	e8 9d 03 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0012b94:	8b 2b                	mov    ebp,DWORD PTR [ebx]
c0012b96:	e8 47 d3 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012b9b:	c1 ed 0b             	shr    ebp,0xb
c0012b9e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012ba0:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012ba6:	81 ca 01 08 00 00    	or     edx,0x801
c0012bac:	52                   	push   edx
c0012bad:	57                   	push   edi
c0012bae:	50                   	push   eax
c0012baf:	56                   	push   esi
c0012bb0:	e8 b9 f7 ff ff       	call   c001236e <VAS::mapPage(unsigned long, unsigned long, int)>
c0012bb5:	83 c4 14             	add    esp,0x14
c0012bb8:	55                   	push   ebp
c0012bb9:	e8 08 f1 ff ff       	call   c0011cc6 <Virt::swapIDToSector(unsigned long)>
c0012bbe:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012bc1:	31 d2                	xor    edx,edx
c0012bc3:	ff 35 6c d5 02 c0    	push   DWORD PTR ds:0xc002d56c
c0012bc9:	52                   	push   edx
c0012bca:	50                   	push   eax
c0012bcb:	0f be 05 78 d5 02 c0 	movsx  eax,BYTE PTR ds:0xc002d578
c0012bd2:	ff 34 85 dc ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd1524]
c0012bd9:	e8 74 3b 00 00       	call   c0016752 <LogicalDisk::read(unsigned long long, int, void*)>
c0012bde:	83 c4 14             	add    esp,0x14
c0012be1:	55                   	push   ebp
c0012be2:	e8 c1 f0 ff ff       	call   c0011ca8 <Virt::freeSwapfilePage(unsigned long)>
c0012be7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012bea:	e8 d7 f0 ff ff       	call   c0011cc6 <Virt::swapIDToSector(unsigned long)>
c0012bef:	5a                   	pop    edx
c0012bf0:	59                   	pop    ecx
c0012bf1:	50                   	push   eax
c0012bf2:	68 8c a7 02 c0       	push   0xc002a78c
c0012bf7:	e8 35 03 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0012bfc:	e8 09 b2 00 00       	call   c001de0a <unlockScheduler()>
c0012c01:	83 c4 10             	add    esp,0x10
c0012c04:	b0 01                	mov    al,0x1
c0012c06:	83 c4 0c             	add    esp,0xc
c0012c09:	5b                   	pop    ebx
c0012c0a:	5e                   	pop    esi
c0012c0b:	5f                   	pop    edi
c0012c0c:	5d                   	pop    ebp
c0012c0d:	c3                   	ret    

c0012c0e <VAS::scanForEviction(int, int)>:
c0012c0e:	55                   	push   ebp
c0012c0f:	57                   	push   edi
c0012c10:	56                   	push   esi
c0012c11:	53                   	push   ebx
c0012c12:	83 ec 1c             	sub    esp,0x1c
c0012c15:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0012c19:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012c1d:	85 c9                	test   ecx,ecx
c0012c1f:	75 08                	jne    c0012c29 <VAS::scanForEviction(int, int)+0x1b>
c0012c21:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0012c29:	83 ec 0c             	sub    esp,0xc
c0012c2c:	bb 00 00 40 00       	mov    ebx,0x400000
c0012c31:	68 ac a7 02 c0       	push   0xc002a7ac
c0012c36:	31 ff                	xor    edi,edi
c0012c38:	e8 f4 02 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0012c3d:	83 c4 10             	add    esp,0x10
c0012c40:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012c48:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012c50:	eb 17                	jmp    c0012c69 <VAS::scanForEviction(int, int)+0x5b>
c0012c52:	83 44 24 0c 04       	add    DWORD PTR [esp+0xc],0x4
c0012c57:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012c5d:	81 fb 00 00 40 c0    	cmp    ebx,0xc0400000
c0012c63:	0f 84 88 00 00 00    	je     c0012cf1 <VAS::scanForEviction(int, int)+0xe3>
c0012c69:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0012c6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012c70:	f6 04 08 01          	test   BYTE PTR [eax+ecx*1],0x1
c0012c74:	74 dc                	je     c0012c52 <VAS::scanForEviction(int, int)+0x44>
c0012c76:	8d ab 00 00 c0 ff    	lea    ebp,[ebx-0x400000]
c0012c7c:	eb 0a                	jmp    c0012c88 <VAS::scanForEviction(int, int)+0x7a>
c0012c7e:	81 c5 00 10 00 00    	add    ebp,0x1000
c0012c84:	39 eb                	cmp    ebx,ebp
c0012c86:	74 ca                	je     c0012c52 <VAS::scanForEviction(int, int)+0x44>
c0012c88:	83 ec 08             	sub    esp,0x8
c0012c8b:	55                   	push   ebp
c0012c8c:	56                   	push   esi
c0012c8d:	e8 56 f3 ff ff       	call   c0011fe8 <VAS::getPageTableEntry(unsigned long)>
c0012c92:	83 c4 10             	add    esp,0x10
c0012c95:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c97:	89 c2                	mov    edx,eax
c0012c99:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012c9f:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012ca5:	75 d7                	jne    c0012c7e <VAS::scanForEviction(int, int)+0x70>
c0012ca7:	a8 01                	test   al,0x1
c0012ca9:	74 4e                	je     c0012cf9 <VAS::scanForEviction(int, int)+0xeb>
c0012cab:	83 ec 08             	sub    esp,0x8
c0012cae:	55                   	push   ebp
c0012caf:	68 d0 a7 02 c0       	push   0xc002a7d0
c0012cb4:	e8 78 02 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0012cb9:	89 f8                	mov    eax,edi
c0012cbb:	99                   	cdq    
c0012cbc:	f7 7c 24 44          	idiv   DWORD PTR [esp+0x44]
c0012cc0:	83 c4 10             	add    esp,0x10
c0012cc3:	85 d2                	test   edx,edx
c0012cc5:	74 03                	je     c0012cca <VAS::scanForEviction(int, int)+0xbc>
c0012cc7:	47                   	inc    edi
c0012cc8:	eb b4                	jmp    c0012c7e <VAS::scanForEviction(int, int)+0x70>
c0012cca:	83 ec 0c             	sub    esp,0xc
c0012ccd:	68 c5 a9 02 c0       	push   0xc002a9c5
c0012cd2:	e8 5a 02 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0012cd7:	58                   	pop    eax
c0012cd8:	5a                   	pop    edx
c0012cd9:	55                   	push   ebp
c0012cda:	56                   	push   esi
c0012cdb:	e8 92 fd ff ff       	call   c0012a72 <VAS::evict(unsigned long)>
c0012ce0:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012ce4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012ce8:	83 c4 10             	add    esp,0x10
c0012ceb:	3b 44 24 38          	cmp    eax,DWORD PTR [esp+0x38]
c0012cef:	75 d6                	jne    c0012cc7 <VAS::scanForEviction(int, int)+0xb9>
c0012cf1:	83 c4 1c             	add    esp,0x1c
c0012cf4:	5b                   	pop    ebx
c0012cf5:	5e                   	pop    esi
c0012cf6:	5f                   	pop    edi
c0012cf7:	5d                   	pop    ebp
c0012cf8:	c3                   	ret    
c0012cf9:	83 ec 08             	sub    esp,0x8
c0012cfc:	55                   	push   ebp
c0012cfd:	68 fc a7 02 c0       	push   0xc002a7fc
c0012d02:	e8 2a 02 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0012d07:	83 c4 10             	add    esp,0x10
c0012d0a:	e9 6f ff ff ff       	jmp    c0012c7e <VAS::scanForEviction(int, int)+0x70>

c0012d0f <mapVASFirstTime>:
c0012d0f:	55                   	push   ebp
c0012d10:	57                   	push   edi
c0012d11:	56                   	push   esi
c0012d12:	53                   	push   ebx
c0012d13:	83 ec 0c             	sub    esp,0xc
c0012d16:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012d1b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012d1e:	4a                   	dec    edx
c0012d1f:	0f 84 8e 00 00 00    	je     c0012db3 <mapVASFirstTime+0xa4>
c0012d25:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012d28:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012d2b:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012d30:	c1 e5 15             	shl    ebp,0x15
c0012d33:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012d38:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012d3e:	29 eb                	sub    ebx,ebp
c0012d40:	29 ee                	sub    esi,ebp
c0012d42:	e8 9b d1 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012d47:	83 ec 0c             	sub    esp,0xc
c0012d4a:	68 03 04 00 00       	push   0x403
c0012d4f:	6a 01                	push   0x1
c0012d51:	53                   	push   ebx
c0012d52:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012d58:	50                   	push   eax
c0012d59:	57                   	push   edi
c0012d5a:	e8 03 f9 ff ff       	call   c0012662 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012d5f:	83 c4 20             	add    esp,0x20
c0012d62:	39 f3                	cmp    ebx,esi
c0012d64:	75 dc                	jne    c0012d42 <mapVASFirstTime+0x33>
c0012d66:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012d6b:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012d70:	29 ee                	sub    esi,ebp
c0012d72:	29 e8                	sub    eax,ebp
c0012d74:	89 c5                	mov    ebp,eax
c0012d76:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012d7a:	19 db                	sbb    ebx,ebx
c0012d7c:	e8 61 d1 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012d81:	83 e3 04             	and    ebx,0x4
c0012d84:	83 ec 0c             	sub    esp,0xc
c0012d87:	81 c3 03 04 00 00    	add    ebx,0x403
c0012d8d:	53                   	push   ebx
c0012d8e:	6a 01                	push   0x1
c0012d90:	56                   	push   esi
c0012d91:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012d97:	50                   	push   eax
c0012d98:	57                   	push   edi
c0012d99:	e8 c4 f8 ff ff       	call   c0012662 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012d9e:	83 c4 20             	add    esp,0x20
c0012da1:	39 f5                	cmp    ebp,esi
c0012da3:	75 d1                	jne    c0012d76 <mapVASFirstTime+0x67>
c0012da5:	0f 20 d8             	mov    eax,cr3
c0012da8:	0f 22 d8             	mov    cr3,eax
c0012dab:	83 c4 0c             	add    esp,0xc
c0012dae:	5b                   	pop    ebx
c0012daf:	5e                   	pop    esi
c0012db0:	5f                   	pop    edi
c0012db1:	5d                   	pop    ebp
c0012db2:	c3                   	ret    
c0012db3:	83 ec 0c             	sub    esp,0xc
c0012db6:	68 d0 a9 02 c0       	push   0xc002a9d0
c0012dbb:	e8 71 01 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0012dc0:	83 c4 10             	add    esp,0x10
c0012dc3:	83 c4 0c             	add    esp,0xc
c0012dc6:	5b                   	pop    ebx
c0012dc7:	5e                   	pop    esi
c0012dc8:	5f                   	pop    edi
c0012dc9:	5d                   	pop    ebp
c0012dca:	c3                   	ret    

c0012dcb <__cxa_atexit>:
c0012dcb:	31 c0                	xor    eax,eax
c0012dcd:	c3                   	ret    

c0012dce <__cxa_finalize>:
c0012dce:	c3                   	ret    

c0012dcf <__stack_chk_fail>:
c0012dcf:	55                   	push   ebp
c0012dd0:	89 e5                	mov    ebp,esp
c0012dd2:	83 ec 14             	sub    esp,0x14
c0012dd5:	68 e9 a9 02 c0       	push   0xc002a9e9
c0012dda:	e8 52 01 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0012ddf:	58                   	pop    eax
c0012de0:	5a                   	pop    edx
c0012de1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012de4:	68 39 aa 02 c0       	push   0xc002aa39
c0012de9:	e8 43 01 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0012dee:	59                   	pop    ecx
c0012def:	58                   	pop    eax
c0012df0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012df3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012df6:	68 39 aa 02 c0       	push   0xc002aa39
c0012dfb:	e8 31 01 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0012e00:	5a                   	pop    edx
c0012e01:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012e04:	59                   	pop    ecx
c0012e05:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e07:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012e0a:	68 39 aa 02 c0       	push   0xc002aa39
c0012e0f:	e8 1d 01 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0012e14:	5a                   	pop    edx
c0012e15:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012e18:	59                   	pop    ecx
c0012e19:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e1d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012e20:	68 39 aa 02 c0       	push   0xc002aa39
c0012e25:	e8 07 01 00 00       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0012e2a:	c7 04 24 41 aa 02 c0 	mov    DWORD PTR [esp],0xc002aa41
c0012e31:	e8 ad 77 00 00       	call   c001a5e3 <Krnl::panic(char const*)>
c0012e36:	83 c4 10             	add    esp,0x10
c0012e39:	c9                   	leave  
c0012e3a:	c3                   	ret    

c0012e3b <__cxa_pure_virtual>:
c0012e3b:	83 ec 18             	sub    esp,0x18
c0012e3e:	68 59 aa 02 c0       	push   0xc002aa59
c0012e43:	e8 9b 77 00 00       	call   c001a5e3 <Krnl::panic(char const*)>
c0012e48:	83 c4 1c             	add    esp,0x1c
c0012e4b:	c3                   	ret    

c0012e4c <operator new[](unsigned long)>:
c0012e4c:	e9 ef c9 ff ff       	jmp    c000f840 <malloc>

c0012e51 <operator delete(void*, unsigned long)>:
c0012e51:	e9 0a ca ff ff       	jmp    c000f860 <rfree>

c0012e56 <operator delete[](void*)>:
c0012e56:	e9 05 ca ff ff       	jmp    c000f860 <rfree>

c0012e5b <operator delete[](void*, unsigned long)>:
c0012e5b:	e9 00 ca ff ff       	jmp    c000f860 <rfree>

c0012e60 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012e60:	57                   	push   edi
c0012e61:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012e66:	56                   	push   esi
c0012e67:	be 6c aa 02 c0       	mov    esi,0xc002aa6c
c0012e6c:	53                   	push   ebx
c0012e6d:	83 ec 40             	sub    esp,0x40
c0012e70:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012e74:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012e78:	fc                   	cld    
c0012e79:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012e7b:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012e7f:	83 f9 3e             	cmp    ecx,0x3e
c0012e82:	7e 05                	jle    c0012e89 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012e84:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012e89:	89 df                	mov    edi,ebx
c0012e8b:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012e8f:	eb 02                	jmp    c0012e93 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012e91:	89 c7                	mov    edi,eax
c0012e93:	31 d2                	xor    edx,edx
c0012e95:	46                   	inc    esi
c0012e96:	89 f8                	mov    eax,edi
c0012e98:	f7 f1                	div    ecx
c0012e9a:	39 cf                	cmp    edi,ecx
c0012e9c:	73 f3                	jae    c0012e91 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012e9e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012ea1:	eb 02                	jmp    c0012ea5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012ea3:	89 c3                	mov    ebx,eax
c0012ea5:	31 d2                	xor    edx,edx
c0012ea7:	4e                   	dec    esi
c0012ea8:	89 d8                	mov    eax,ebx
c0012eaa:	f7 f1                	div    ecx
c0012eac:	39 cb                	cmp    ebx,ecx
c0012eae:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012eb2:	88 16                	mov    BYTE PTR [esi],dl
c0012eb4:	73 ed                	jae    c0012ea3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012eb6:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012eba:	83 c4 40             	add    esp,0x40
c0012ebd:	5b                   	pop    ebx
c0012ebe:	5e                   	pop    esi
c0012ebf:	5f                   	pop    edi
c0012ec0:	c3                   	ret    

c0012ec1 <Dbg::logc(char)>:
c0012ec1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012ec5:	ba fd 03 00 00       	mov    edx,0x3fd
c0012eca:	ec                   	in     al,dx
c0012ecb:	a8 20                	test   al,0x20
c0012ecd:	74 fb                	je     c0012eca <Dbg::logc(char)+0x9>
c0012ecf:	ba f8 03 00 00       	mov    edx,0x3f8
c0012ed4:	88 c8                	mov    al,cl
c0012ed6:	ee                   	out    dx,al
c0012ed7:	c3                   	ret    

c0012ed8 <Dbg::logs(char*)>:
c0012ed8:	53                   	push   ebx
c0012ed9:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012edd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012ee0:	84 c0                	test   al,al
c0012ee2:	74 0f                	je     c0012ef3 <Dbg::logs(char*)+0x1b>
c0012ee4:	50                   	push   eax
c0012ee5:	43                   	inc    ebx
c0012ee6:	e8 d6 ff ff ff       	call   c0012ec1 <Dbg::logc(char)>
c0012eeb:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012eee:	5a                   	pop    edx
c0012eef:	84 c0                	test   al,al
c0012ef1:	75 f1                	jne    c0012ee4 <Dbg::logs(char*)+0xc>
c0012ef3:	5b                   	pop    ebx
c0012ef4:	c3                   	ret    

c0012ef5 <Dbg::logWriteInt(unsigned int)>:
c0012ef5:	83 ec 10             	sub    esp,0x10
c0012ef8:	6a 0a                	push   0xa
c0012efa:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012efe:	50                   	push   eax
c0012eff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f03:	e8 58 ff ff ff       	call   c0012e60 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012f08:	50                   	push   eax
c0012f09:	e8 ca ff ff ff       	call   c0012ed8 <Dbg::logs(char*)>
c0012f0e:	83 c4 20             	add    esp,0x20
c0012f11:	c3                   	ret    

c0012f12 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012f12:	83 ec 10             	sub    esp,0x10
c0012f15:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f19:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012f1d:	50                   	push   eax
c0012f1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f22:	e8 39 ff ff ff       	call   c0012e60 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012f27:	50                   	push   eax
c0012f28:	e8 ab ff ff ff       	call   c0012ed8 <Dbg::logs(char*)>
c0012f2d:	83 c4 20             	add    esp,0x20
c0012f30:	c3                   	ret    

c0012f31 <Dbg::kprintf(char const*, ...)>:
c0012f31:	55                   	push   ebp
c0012f32:	57                   	push   edi
c0012f33:	56                   	push   esi
c0012f34:	53                   	push   ebx
c0012f35:	83 ec 0c             	sub    esp,0xc
c0012f38:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012f3c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012f40:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012f44:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012f47:	84 c0                	test   al,al
c0012f49:	74 4a                	je     c0012f95 <Dbg::kprintf(char const*, ...)+0x64>
c0012f4b:	31 db                	xor    ebx,ebx
c0012f4d:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012f50:	3c 25                	cmp    al,0x25
c0012f52:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012f55:	0f 85 e4 00 00 00    	jne    c001303f <Dbg::kprintf(char const*, ...)+0x10e>
c0012f5b:	83 c3 02             	add    ebx,0x2
c0012f5e:	8a 07                	mov    al,BYTE PTR [edi]
c0012f60:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012f63:	83 e8 25             	sub    eax,0x25
c0012f66:	3c 53                	cmp    al,0x53
c0012f68:	0f 87 ba 00 00 00    	ja     c0013028 <Dbg::kprintf(char const*, ...)+0xf7>
c0012f6e:	0f b6 c0             	movzx  eax,al
c0012f71:	ff 24 85 ac aa 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5554]
c0012f78:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f7c:	89 c8                	mov    eax,ecx
c0012f7e:	83 c1 04             	add    ecx,0x4
c0012f81:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f85:	ff 30                	push   DWORD PTR [eax]
c0012f87:	e8 4c ff ff ff       	call   c0012ed8 <Dbg::logs(char*)>
c0012f8c:	58                   	pop    eax
c0012f8d:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012f91:	84 c0                	test   al,al
c0012f93:	75 b8                	jne    c0012f4d <Dbg::kprintf(char const*, ...)+0x1c>
c0012f95:	83 c4 0c             	add    esp,0xc
c0012f98:	5b                   	pop    ebx
c0012f99:	5e                   	pop    esi
c0012f9a:	5f                   	pop    edi
c0012f9b:	5d                   	pop    ebp
c0012f9c:	c3                   	ret    
c0012f9d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012fa1:	89 d0                	mov    eax,edx
c0012fa3:	83 c2 04             	add    edx,0x4
c0012fa6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012faa:	ff 30                	push   DWORD PTR [eax]
c0012fac:	e8 44 ff ff ff       	call   c0012ef5 <Dbg::logWriteInt(unsigned int)>
c0012fb1:	58                   	pop    eax
c0012fb2:	eb d9                	jmp    c0012f8d <Dbg::kprintf(char const*, ...)+0x5c>
c0012fb4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012fb8:	89 d0                	mov    eax,edx
c0012fba:	83 c2 04             	add    edx,0x4
c0012fbd:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012fc0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012fc4:	50                   	push   eax
c0012fc5:	e8 f7 fe ff ff       	call   c0012ec1 <Dbg::logc(char)>
c0012fca:	58                   	pop    eax
c0012fcb:	eb c0                	jmp    c0012f8d <Dbg::kprintf(char const*, ...)+0x5c>
c0012fcd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012fd1:	89 c8                	mov    eax,ecx
c0012fd3:	83 c1 04             	add    ecx,0x4
c0012fd6:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012fda:	ff 30                	push   DWORD PTR [eax]
c0012fdc:	e8 14 ff ff ff       	call   c0012ef5 <Dbg::logWriteInt(unsigned int)>
c0012fe1:	5f                   	pop    edi
c0012fe2:	eb a9                	jmp    c0012f8d <Dbg::kprintf(char const*, ...)+0x5c>
c0012fe4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012fe8:	89 c8                	mov    eax,ecx
c0012fea:	83 c1 04             	add    ecx,0x4
c0012fed:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012ff1:	6a 10                	push   0x10
c0012ff3:	ff 30                	push   DWORD PTR [eax]
c0012ff5:	e8 18 ff ff ff       	call   c0012f12 <Dbg::logWriteIntBase(unsigned int, int)>
c0012ffa:	59                   	pop    ecx
c0012ffb:	5f                   	pop    edi
c0012ffc:	eb 8f                	jmp    c0012f8d <Dbg::kprintf(char const*, ...)+0x5c>
c0012ffe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013002:	89 d0                	mov    eax,edx
c0013004:	83 c2 08             	add    edx,0x8
c0013007:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001300b:	6a 10                	push   0x10
c001300d:	ff 30                	push   DWORD PTR [eax]
c001300f:	e8 fe fe ff ff       	call   c0012f12 <Dbg::logWriteIntBase(unsigned int, int)>
c0013014:	58                   	pop    eax
c0013015:	5a                   	pop    edx
c0013016:	e9 72 ff ff ff       	jmp    c0012f8d <Dbg::kprintf(char const*, ...)+0x5c>
c001301b:	6a 25                	push   0x25
c001301d:	e8 9f fe ff ff       	call   c0012ec1 <Dbg::logc(char)>
c0013022:	58                   	pop    eax
c0013023:	e9 65 ff ff ff       	jmp    c0012f8d <Dbg::kprintf(char const*, ...)+0x5c>
c0013028:	6a 25                	push   0x25
c001302a:	e8 92 fe ff ff       	call   c0012ec1 <Dbg::logc(char)>
c001302f:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0013032:	50                   	push   eax
c0013033:	e8 89 fe ff ff       	call   c0012ec1 <Dbg::logc(char)>
c0013038:	5a                   	pop    edx
c0013039:	59                   	pop    ecx
c001303a:	e9 4e ff ff ff       	jmp    c0012f8d <Dbg::kprintf(char const*, ...)+0x5c>
c001303f:	50                   	push   eax
c0013040:	89 eb                	mov    ebx,ebp
c0013042:	e8 7a fe ff ff       	call   c0012ec1 <Dbg::logc(char)>
c0013047:	89 fd                	mov    ebp,edi
c0013049:	58                   	pop    eax
c001304a:	e9 3e ff ff ff       	jmp    c0012f8d <Dbg::kprintf(char const*, ...)+0x5c>
c001304f:	90                   	nop

c0013050 <File::read(unsigned long long, void*, int*)>:
c0013050:	53                   	push   ebx
c0013051:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013055:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013059:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013060:	3c 19                	cmp    al,0x19
c0013062:	77 35                	ja     c0013099 <File::read(unsigned long long, void*, int*)+0x49>
c0013064:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c001306b:	85 c0                	test   eax,eax
c001306d:	74 2a                	je     c0013099 <File::read(unsigned long long, void*, int*)+0x49>
c001306f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013075:	85 c0                	test   eax,eax
c0013077:	74 20                	je     c0013099 <File::read(unsigned long long, void*, int*)+0x49>
c0013079:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001307d:	74 21                	je     c00130a0 <File::read(unsigned long long, void*, int*)+0x50>
c001307f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013081:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013085:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001308b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001308f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013093:	5b                   	pop    ebx
c0013094:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0013097:	ff e0                	jmp    eax
c0013099:	b8 0b 00 00 00       	mov    eax,0xb
c001309e:	eb 05                	jmp    c00130a5 <File::read(unsigned long long, void*, int*)+0x55>
c00130a0:	b8 05 00 00 00       	mov    eax,0x5
c00130a5:	5b                   	pop    ebx
c00130a6:	c3                   	ret    
c00130a7:	90                   	nop

c00130a8 <File::write(unsigned long long, void*, int*)>:
c00130a8:	53                   	push   ebx
c00130a9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00130ad:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00130b1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00130b8:	3c 19                	cmp    al,0x19
c00130ba:	77 35                	ja     c00130f1 <File::write(unsigned long long, void*, int*)+0x49>
c00130bc:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c00130c3:	85 c0                	test   eax,eax
c00130c5:	74 2a                	je     c00130f1 <File::write(unsigned long long, void*, int*)+0x49>
c00130c7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00130cd:	85 c0                	test   eax,eax
c00130cf:	74 20                	je     c00130f1 <File::write(unsigned long long, void*, int*)+0x49>
c00130d1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130d5:	74 21                	je     c00130f8 <File::write(unsigned long long, void*, int*)+0x50>
c00130d7:	8b 08                	mov    ecx,DWORD PTR [eax]
c00130d9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00130dd:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00130e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00130e7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00130eb:	5b                   	pop    ebx
c00130ec:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c00130ef:	ff e0                	jmp    eax
c00130f1:	b8 0b 00 00 00       	mov    eax,0xb
c00130f6:	eb 05                	jmp    c00130fd <File::write(unsigned long long, void*, int*)+0x55>
c00130f8:	b8 05 00 00 00       	mov    eax,0x5
c00130fd:	5b                   	pop    ebx
c00130fe:	c3                   	ret    
c00130ff:	90                   	nop

c0013100 <Directory::read(unsigned long long, void*, int*)>:
c0013100:	53                   	push   ebx
c0013101:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013105:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013109:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013110:	3c 19                	cmp    al,0x19
c0013112:	77 35                	ja     c0013149 <Directory::read(unsigned long long, void*, int*)+0x49>
c0013114:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c001311b:	85 c0                	test   eax,eax
c001311d:	74 2a                	je     c0013149 <Directory::read(unsigned long long, void*, int*)+0x49>
c001311f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013125:	85 c0                	test   eax,eax
c0013127:	74 20                	je     c0013149 <Directory::read(unsigned long long, void*, int*)+0x49>
c0013129:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001312d:	74 21                	je     c0013150 <Directory::read(unsigned long long, void*, int*)+0x50>
c001312f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013131:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013135:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001313b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001313f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013143:	5b                   	pop    ebx
c0013144:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0013147:	ff e0                	jmp    eax
c0013149:	b8 0b 00 00 00       	mov    eax,0xb
c001314e:	eb 05                	jmp    c0013155 <Directory::read(unsigned long long, void*, int*)+0x55>
c0013150:	b8 05 00 00 00       	mov    eax,0x5
c0013155:	5b                   	pop    ebx
c0013156:	c3                   	ret    
c0013157:	90                   	nop

c0013158 <Directory::write(unsigned long long, void*, int*)>:
c0013158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001315c:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0013163:	b8 0b 00 00 00       	mov    eax,0xb
c0013168:	80 fa 19             	cmp    dl,0x19
c001316b:	77 18                	ja     c0013185 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001316d:	8b 14 95 e0 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1420]
c0013174:	85 d2                	test   edx,edx
c0013176:	74 0d                	je     c0013185 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0013178:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c001317f:	19 c0                	sbb    eax,eax
c0013181:	83 e0 0a             	and    eax,0xa
c0013184:	40                   	inc    eax
c0013185:	c3                   	ret    

c0013186 <File::isAtty()>:
c0013186:	31 c0                	xor    eax,eax
c0013188:	c3                   	ret    
c0013189:	90                   	nop

c001318a <Directory::isAtty()>:
c001318a:	31 c0                	xor    eax,eax
c001318c:	c3                   	ret    
c001318d:	90                   	nop

c001318e <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001318e:	b8 0a 00 00 00       	mov    eax,0xa
c0013193:	c3                   	ret    

c0013194 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0013194:	b8 0a 00 00 00       	mov    eax,0xa
c0013199:	c3                   	ret    

c001319a <File::~File()>:
c001319a:	83 ec 0c             	sub    esp,0xc
c001319d:	ba 68 ac 02 c0       	mov    edx,0xc002ac68
c00131a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131a6:	89 10                	mov    DWORD PTR [eax],edx
c00131a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131ac:	83 ec 0c             	sub    esp,0xc
c00131af:	50                   	push   eax
c00131b0:	e8 81 e7 ff ff       	call   c0011936 <UnixFile::~UnixFile()>
c00131b5:	83 c4 10             	add    esp,0x10
c00131b8:	90                   	nop
c00131b9:	83 c4 0c             	add    esp,0xc
c00131bc:	c3                   	ret    
c00131bd:	90                   	nop

c00131be <File::~File()>:
c00131be:	83 ec 0c             	sub    esp,0xc
c00131c1:	83 ec 0c             	sub    esp,0xc
c00131c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131c8:	e8 cd ff ff ff       	call   c001319a <File::~File()>
c00131cd:	83 c4 10             	add    esp,0x10
c00131d0:	83 ec 08             	sub    esp,0x8
c00131d3:	68 14 01 00 00       	push   0x114
c00131d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131dc:	e8 70 fc ff ff       	call   c0012e51 <operator delete(void*, unsigned long)>
c00131e1:	83 c4 10             	add    esp,0x10
c00131e4:	83 c4 0c             	add    esp,0xc
c00131e7:	c3                   	ret    

c00131e8 <Directory::~Directory()>:
c00131e8:	83 ec 0c             	sub    esp,0xc
c00131eb:	ba 84 ac 02 c0       	mov    edx,0xc002ac84
c00131f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131f4:	89 10                	mov    DWORD PTR [eax],edx
c00131f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131fa:	83 ec 0c             	sub    esp,0xc
c00131fd:	50                   	push   eax
c00131fe:	e8 33 e7 ff ff       	call   c0011936 <UnixFile::~UnixFile()>
c0013203:	83 c4 10             	add    esp,0x10
c0013206:	90                   	nop
c0013207:	83 c4 0c             	add    esp,0xc
c001320a:	c3                   	ret    
c001320b:	90                   	nop

c001320c <Directory::~Directory()>:
c001320c:	83 ec 0c             	sub    esp,0xc
c001320f:	83 ec 0c             	sub    esp,0xc
c0013212:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013216:	e8 cd ff ff ff       	call   c00131e8 <Directory::~Directory()>
c001321b:	83 c4 10             	add    esp,0x10
c001321e:	83 ec 08             	sub    esp,0x8
c0013221:	68 14 01 00 00       	push   0x114
c0013226:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001322a:	e8 22 fc ff ff       	call   c0012e51 <operator delete(void*, unsigned long)>
c001322f:	83 c4 10             	add    esp,0x10
c0013232:	83 c4 0c             	add    esp,0xc
c0013235:	c3                   	ret    

c0013236 <Filesystem::Filesystem()>:
c0013236:	ba 04 ac 02 c0       	mov    edx,0xc002ac04
c001323b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001323f:	89 10                	mov    DWORD PTR [eax],edx
c0013241:	8b 15 4c e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e74c
c0013247:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001324b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001324e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013252:	a3 4c e7 02 c0       	mov    ds:0xc002e74c,eax
c0013257:	90                   	nop
c0013258:	c3                   	ret    
c0013259:	90                   	nop

c001325a <Filesystem::~Filesystem()>:
c001325a:	ba 04 ac 02 c0       	mov    edx,0xc002ac04
c001325f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013263:	89 10                	mov    DWORD PTR [eax],edx
c0013265:	90                   	nop
c0013266:	c3                   	ret    
c0013267:	90                   	nop

c0013268 <Filesystem::~Filesystem()>:
c0013268:	83 ec 0c             	sub    esp,0xc
c001326b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001326f:	e8 e6 ff ff ff       	call   c001325a <Filesystem::~Filesystem()>
c0013274:	83 c4 04             	add    esp,0x4
c0013277:	83 ec 08             	sub    esp,0x8
c001327a:	6a 08                	push   0x8
c001327c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013280:	e8 cc fb ff ff       	call   c0012e51 <operator delete(void*, unsigned long)>
c0013285:	83 c4 10             	add    esp,0x10
c0013288:	83 c4 0c             	add    esp,0xc
c001328b:	c3                   	ret    

c001328c <Fs::getcwd(Process*, char*, int)>:
c001328c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013290:	31 c0                	xor    eax,eax
c0013292:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0013295:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0013299:	7d 15                	jge    c00132b0 <Fs::getcwd(Process*, char*, int)+0x24>
c001329b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001329f:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c00132a6:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00132a9:	84 c9                	test   cl,cl
c00132ab:	74 06                	je     c00132b3 <Fs::getcwd(Process*, char*, int)+0x27>
c00132ad:	40                   	inc    eax
c00132ae:	eb e2                	jmp    c0013292 <Fs::getcwd(Process*, char*, int)+0x6>
c00132b0:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00132b3:	31 c0                	xor    eax,eax
c00132b5:	c3                   	ret    

c00132b6 <Fs::initVFS()>:
c00132b6:	83 ec 18             	sub    esp,0x18
c00132b9:	6a 08                	push   0x8
c00132bb:	e8 80 c5 ff ff       	call   c000f840 <malloc>
c00132c0:	89 04 24             	mov    DWORD PTR [esp],eax
c00132c3:	e8 b4 dc 00 00       	call   c0020f7c <FAT::FAT()>
c00132c8:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00132cf:	e8 6c c5 ff ff       	call   c000f840 <malloc>
c00132d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00132d7:	e8 f8 ee 00 00       	call   c00221d4 <ISO9660::ISO9660()>
c00132dc:	83 c4 1c             	add    esp,0x1c
c00132df:	c3                   	ret    

c00132e0 <Fs::standardiseFiles(char*, char const*, char const*)>:
c00132e0:	55                   	push   ebp
c00132e1:	57                   	push   edi
c00132e2:	56                   	push   esi
c00132e3:	53                   	push   ebx
c00132e4:	81 ec 10 04 00 00    	sub    esp,0x410
c00132ea:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c00132f1:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c00132f8:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c00132ff:	68 00 04 00 00       	push   0x400
c0013304:	6a 00                	push   0x0
c0013306:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001330a:	56                   	push   esi
c001330b:	e8 68 d4 fe ff       	call   c0000778 <memset>
c0013310:	83 c4 10             	add    esp,0x10
c0013313:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0013317:	75 0b                	jne    c0013324 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0013319:	50                   	push   eax
c001331a:	50                   	push   eax
c001331b:	57                   	push   edi
c001331c:	56                   	push   esi
c001331d:	e8 12 d5 fe ff       	call   c0000834 <strcpy>
c0013322:	eb 41                	jmp    c0013365 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0013324:	8a 07                	mov    al,BYTE PTR [edi]
c0013326:	3c 5c                	cmp    al,0x5c
c0013328:	74 04                	je     c001332e <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c001332a:	3c 2f                	cmp    al,0x2f
c001332c:	75 18                	jne    c0013346 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c001332e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0013331:	3c 60                	cmp    al,0x60
c0013333:	7e 03                	jle    c0013338 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0013335:	83 e8 20             	sub    eax,0x20
c0013338:	88 04 24             	mov    BYTE PTR [esp],al
c001333b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0013342:	50                   	push   eax
c0013343:	50                   	push   eax
c0013344:	eb 18                	jmp    c001335e <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0013346:	50                   	push   eax
c0013347:	50                   	push   eax
c0013348:	55                   	push   ebp
c0013349:	56                   	push   esi
c001334a:	e8 e5 d4 fe ff       	call   c0000834 <strcpy>
c001334f:	5a                   	pop    edx
c0013350:	59                   	pop    ecx
c0013351:	68 ad c3 02 c0       	push   0xc002c3ad
c0013356:	56                   	push   esi
c0013357:	e8 18 d6 fe ff       	call   c0000974 <strcat>
c001335c:	5d                   	pop    ebp
c001335d:	58                   	pop    eax
c001335e:	57                   	push   edi
c001335f:	56                   	push   esi
c0013360:	e8 0f d6 fe ff       	call   c0000974 <strcat>
c0013365:	83 c4 10             	add    esp,0x10
c0013368:	8a 04 24             	mov    al,BYTE PTR [esp]
c001336b:	3c 60                	cmp    al,0x60
c001336d:	7e 03                	jle    c0013372 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c001336f:	83 e8 20             	sub    eax,0x20
c0013372:	88 04 24             	mov    BYTE PTR [esp],al
c0013375:	88 03                	mov    BYTE PTR [ebx],al
c0013377:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001337e:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0013384:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0013388:	bf 03 00 00 00       	mov    edi,0x3
c001338d:	b8 03 00 00 00       	mov    eax,0x3
c0013392:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0013395:	84 d2                	test   dl,dl
c0013397:	0f 84 91 00 00 00    	je     c001342e <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c001339d:	8d 4f 01             	lea    ecx,[edi+0x1]
c00133a0:	80 fa 5c             	cmp    dl,0x5c
c00133a3:	74 05                	je     c00133aa <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c00133a5:	80 fa 2f             	cmp    dl,0x2f
c00133a8:	75 12                	jne    c00133bc <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00133aa:	89 c5                	mov    ebp,eax
c00133ac:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00133b1:	74 09                	je     c00133bc <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00133b3:	40                   	inc    eax
c00133b4:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c00133b8:	89 cf                	mov    edi,ecx
c00133ba:	eb d6                	jmp    c0013392 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c00133bc:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c00133c1:	75 5b                	jne    c001341e <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00133c3:	80 fa 2e             	cmp    dl,0x2e
c00133c6:	75 56                	jne    c001341e <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00133c8:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c00133cc:	74 19                	je     c00133e7 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c00133ce:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00133d3:	74 53                	je     c0013428 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c00133d5:	89 f9                	mov    ecx,edi
c00133d7:	41                   	inc    ecx
c00133d8:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00133db:	80 fa 2f             	cmp    dl,0x2f
c00133de:	74 f7                	je     c00133d7 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c00133e0:	80 fa 5c             	cmp    dl,0x5c
c00133e3:	74 f2                	je     c00133d7 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c00133e5:	eb d1                	jmp    c00133b8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133e7:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00133ec:	74 3a                	je     c0013428 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c00133ee:	83 f8 03             	cmp    eax,0x3
c00133f1:	74 c5                	je     c00133b8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133f3:	41                   	inc    ecx
c00133f4:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00133f7:	80 fa 2f             	cmp    dl,0x2f
c00133fa:	74 f7                	je     c00133f3 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c00133fc:	80 fa 5c             	cmp    dl,0x5c
c00133ff:	74 f2                	je     c00133f3 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013401:	48                   	dec    eax
c0013402:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013406:	75 06                	jne    c001340e <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013408:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001340c:	eb f3                	jmp    c0013401 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c001340e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013412:	74 07                	je     c001341b <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0013414:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013418:	48                   	dec    eax
c0013419:	eb f3                	jmp    c001340e <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c001341b:	40                   	inc    eax
c001341c:	eb 9a                	jmp    c00133b8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001341e:	80 fa 2f             	cmp    dl,0x2f
c0013421:	74 95                	je     c00133b8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013423:	80 fa 5c             	cmp    dl,0x5c
c0013426:	74 90                	je     c00133b8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013428:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c001342b:	40                   	inc    eax
c001342c:	eb 8a                	jmp    c00133b8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001342e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013432:	83 ec 0c             	sub    esp,0xc
c0013435:	53                   	push   ebx
c0013436:	e8 59 d3 fe ff       	call   c0000794 <strlen>
c001343b:	83 c4 10             	add    esp,0x10
c001343e:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0013443:	75 26                	jne    c001346b <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0013445:	83 ec 0c             	sub    esp,0xc
c0013448:	53                   	push   ebx
c0013449:	e8 46 d3 fe ff       	call   c0000794 <strlen>
c001344e:	83 c4 10             	add    esp,0x10
c0013451:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0013456:	74 26                	je     c001347e <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0013458:	83 ec 0c             	sub    esp,0xc
c001345b:	53                   	push   ebx
c001345c:	e8 33 d3 fe ff       	call   c0000794 <strlen>
c0013461:	83 c4 10             	add    esp,0x10
c0013464:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013469:	eb c7                	jmp    c0013432 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c001346b:	83 ec 0c             	sub    esp,0xc
c001346e:	53                   	push   ebx
c001346f:	e8 20 d3 fe ff       	call   c0000794 <strlen>
c0013474:	83 c4 10             	add    esp,0x10
c0013477:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c001347c:	74 c7                	je     c0013445 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c001347e:	81 c4 0c 04 00 00    	add    esp,0x40c
c0013484:	5b                   	pop    ebx
c0013485:	5e                   	pop    esi
c0013486:	5f                   	pop    edi
c0013487:	5d                   	pop    ebp
c0013488:	c3                   	ret    
c0013489:	90                   	nop

c001348a <File::File(char const*, Process*)>:
c001348a:	83 ec 0c             	sub    esp,0xc
c001348d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013491:	83 ec 08             	sub    esp,0x8
c0013494:	6a 00                	push   0x0
c0013496:	50                   	push   eax
c0013497:	e8 b8 e2 ff ff       	call   c0011754 <UnixFile::UnixFile(int)>
c001349c:	83 c4 10             	add    esp,0x10
c001349f:	ba 68 ac 02 c0       	mov    edx,0xc002ac68
c00134a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134a8:	89 10                	mov    DWORD PTR [eax],edx
c00134aa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00134ae:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00134b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134b8:	83 c0 0d             	add    eax,0xd
c00134bb:	83 ec 04             	sub    esp,0x4
c00134be:	52                   	push   edx
c00134bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134c3:	50                   	push   eax
c00134c4:	e8 17 fe ff ff       	call   c00132e0 <Fs::standardiseFiles(char*, char const*, char const*)>
c00134c9:	83 c4 10             	add    esp,0x10
c00134cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134d0:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00134d3:	8d 50 bf             	lea    edx,[eax-0x41]
c00134d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134da:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00134e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134e4:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00134e8:	90                   	nop
c00134e9:	83 c4 0c             	add    esp,0xc
c00134ec:	c3                   	ret    
c00134ed:	90                   	nop

c00134ee <File::open(FileOpenMode)>:
c00134ee:	53                   	push   ebx
c00134ef:	b8 0b 00 00 00       	mov    eax,0xb
c00134f4:	83 ec 08             	sub    esp,0x8
c00134f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00134fb:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013502:	80 fa 19             	cmp    dl,0x19
c0013505:	77 40                	ja     c0013547 <File::open(FileOpenMode)+0x59>
c0013507:	8b 14 95 e0 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1420]
c001350e:	85 d2                	test   edx,edx
c0013510:	74 35                	je     c0013547 <File::open(FileOpenMode)+0x59>
c0013512:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013518:	85 d2                	test   edx,edx
c001351a:	74 2b                	je     c0013547 <File::open(FileOpenMode)+0x59>
c001351c:	b8 06 00 00 00       	mov    eax,0x6
c0013521:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013525:	75 20                	jne    c0013547 <File::open(FileOpenMode)+0x59>
c0013527:	8b 02                	mov    eax,DWORD PTR [edx]
c0013529:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001352f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013533:	51                   	push   ecx
c0013534:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013537:	51                   	push   ecx
c0013538:	52                   	push   edx
c0013539:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001353c:	83 c4 10             	add    esp,0x10
c001353f:	85 c0                	test   eax,eax
c0013541:	75 04                	jne    c0013547 <File::open(FileOpenMode)+0x59>
c0013543:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013547:	83 c4 08             	add    esp,0x8
c001354a:	5b                   	pop    ebx
c001354b:	c3                   	ret    

c001354c <File::close()>:
c001354c:	53                   	push   ebx
c001354d:	b8 0b 00 00 00       	mov    eax,0xb
c0013552:	83 ec 08             	sub    esp,0x8
c0013555:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013559:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013560:	80 fa 19             	cmp    dl,0x19
c0013563:	77 41                	ja     c00135a6 <File::close()+0x5a>
c0013565:	8b 1c 95 e0 eb 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1420]
c001356c:	85 db                	test   ebx,ebx
c001356e:	74 36                	je     c00135a6 <File::close()+0x5a>
c0013570:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013577:	74 2d                	je     c00135a6 <File::close()+0x5a>
c0013579:	b8 05 00 00 00       	mov    eax,0x5
c001357e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013582:	74 22                	je     c00135a6 <File::close()+0x5a>
c0013584:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013588:	8b 04 95 e0 eb 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1420]
c001358f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013595:	53                   	push   ebx
c0013596:	53                   	push   ebx
c0013597:	8b 10                	mov    edx,DWORD PTR [eax]
c0013599:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001359f:	50                   	push   eax
c00135a0:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c00135a3:	83 c4 10             	add    esp,0x10
c00135a6:	83 c4 08             	add    esp,0x8
c00135a9:	5b                   	pop    ebx
c00135aa:	c3                   	ret    
c00135ab:	90                   	nop

c00135ac <File::seek(unsigned long long)>:
c00135ac:	56                   	push   esi
c00135ad:	53                   	push   ebx
c00135ae:	b8 0b 00 00 00       	mov    eax,0xb
c00135b3:	51                   	push   ecx
c00135b4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00135b8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00135bc:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00135c3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00135c7:	80 fa 19             	cmp    dl,0x19
c00135ca:	77 31                	ja     c00135fd <File::seek(unsigned long long)+0x51>
c00135cc:	8b 14 95 e0 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1420]
c00135d3:	85 d2                	test   edx,edx
c00135d5:	74 26                	je     c00135fd <File::seek(unsigned long long)+0x51>
c00135d7:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00135dd:	85 d2                	test   edx,edx
c00135df:	74 1c                	je     c00135fd <File::seek(unsigned long long)+0x51>
c00135e1:	b8 05 00 00 00       	mov    eax,0x5
c00135e6:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00135ea:	74 11                	je     c00135fd <File::seek(unsigned long long)+0x51>
c00135ec:	8b 02                	mov    eax,DWORD PTR [edx]
c00135ee:	53                   	push   ebx
c00135ef:	51                   	push   ecx
c00135f0:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00135f6:	52                   	push   edx
c00135f7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00135fa:	83 c4 10             	add    esp,0x10
c00135fd:	5a                   	pop    edx
c00135fe:	5b                   	pop    ebx
c00135ff:	5e                   	pop    esi
c0013600:	c3                   	ret    
c0013601:	90                   	nop

c0013602 <File::tell(unsigned long long*)>:
c0013602:	83 ec 0c             	sub    esp,0xc
c0013605:	b8 0b 00 00 00       	mov    eax,0xb
c001360a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001360e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013615:	80 fa 19             	cmp    dl,0x19
c0013618:	77 34                	ja     c001364e <File::tell(unsigned long long*)+0x4c>
c001361a:	8b 14 95 e0 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1420]
c0013621:	85 d2                	test   edx,edx
c0013623:	74 29                	je     c001364e <File::tell(unsigned long long*)+0x4c>
c0013625:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001362b:	85 d2                	test   edx,edx
c001362d:	74 1f                	je     c001364e <File::tell(unsigned long long*)+0x4c>
c001362f:	b8 05 00 00 00       	mov    eax,0x5
c0013634:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013638:	74 14                	je     c001364e <File::tell(unsigned long long*)+0x4c>
c001363a:	50                   	push   eax
c001363b:	8b 02                	mov    eax,DWORD PTR [edx]
c001363d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013641:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013647:	52                   	push   edx
c0013648:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001364b:	83 c4 10             	add    esp,0x10
c001364e:	83 c4 0c             	add    esp,0xc
c0013651:	c3                   	ret    

c0013652 <File::rewind()>:
c0013652:	83 ec 10             	sub    esp,0x10
c0013655:	6a 00                	push   0x0
c0013657:	6a 00                	push   0x0
c0013659:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001365d:	e8 4a ff ff ff       	call   c00135ac <File::seek(unsigned long long)>
c0013662:	83 c4 1c             	add    esp,0x1c
c0013665:	c3                   	ret    

c0013666 <File::unlink()>:
c0013666:	83 ec 0c             	sub    esp,0xc
c0013669:	b8 0b 00 00 00       	mov    eax,0xb
c001366e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013672:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013679:	80 f9 19             	cmp    cl,0x19
c001367c:	77 2f                	ja     c00136ad <File::unlink()+0x47>
c001367e:	8b 0c 8d e0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1420]
c0013685:	85 c9                	test   ecx,ecx
c0013687:	74 24                	je     c00136ad <File::unlink()+0x47>
c0013689:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001368f:	85 c9                	test   ecx,ecx
c0013691:	74 1a                	je     c00136ad <File::unlink()+0x47>
c0013693:	b8 06 00 00 00       	mov    eax,0x6
c0013698:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001369c:	75 0f                	jne    c00136ad <File::unlink()+0x47>
c001369e:	83 c2 0d             	add    edx,0xd
c00136a1:	50                   	push   eax
c00136a2:	50                   	push   eax
c00136a3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136a5:	52                   	push   edx
c00136a6:	51                   	push   ecx
c00136a7:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00136aa:	83 c4 10             	add    esp,0x10
c00136ad:	83 c4 0c             	add    esp,0xc
c00136b0:	c3                   	ret    
c00136b1:	90                   	nop

c00136b2 <File::rename(char const*)>:
c00136b2:	83 ec 0c             	sub    esp,0xc
c00136b5:	b8 0b 00 00 00       	mov    eax,0xb
c00136ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136be:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136c5:	80 f9 19             	cmp    cl,0x19
c00136c8:	77 32                	ja     c00136fc <File::rename(char const*)+0x4a>
c00136ca:	8b 0c 8d e0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1420]
c00136d1:	85 c9                	test   ecx,ecx
c00136d3:	74 27                	je     c00136fc <File::rename(char const*)+0x4a>
c00136d5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136db:	85 c9                	test   ecx,ecx
c00136dd:	74 1d                	je     c00136fc <File::rename(char const*)+0x4a>
c00136df:	b8 06 00 00 00       	mov    eax,0x6
c00136e4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00136e8:	75 12                	jne    c00136fc <File::rename(char const*)+0x4a>
c00136ea:	83 c2 0d             	add    edx,0xd
c00136ed:	50                   	push   eax
c00136ee:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136f0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00136f4:	52                   	push   edx
c00136f5:	51                   	push   ecx
c00136f6:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00136f9:	83 c4 10             	add    esp,0x10
c00136fc:	83 c4 0c             	add    esp,0xc
c00136ff:	c3                   	ret    

c0013700 <File::chfatattr(unsigned char, unsigned char)>:
c0013700:	57                   	push   edi
c0013701:	b8 0b 00 00 00       	mov    eax,0xb
c0013706:	56                   	push   esi
c0013707:	53                   	push   ebx
c0013708:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001370c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013710:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013717:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001371b:	80 f9 19             	cmp    cl,0x19
c001371e:	77 37                	ja     c0013757 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013720:	8b 0c 8d e0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1420]
c0013727:	85 c9                	test   ecx,ecx
c0013729:	74 2c                	je     c0013757 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001372b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013731:	85 c9                	test   ecx,ecx
c0013733:	74 22                	je     c0013757 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013735:	b8 06 00 00 00       	mov    eax,0x6
c001373a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001373e:	75 17                	jne    c0013757 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013740:	8b 39                	mov    edi,DWORD PTR [ecx]
c0013742:	89 f0                	mov    eax,esi
c0013744:	83 c2 0d             	add    edx,0xd
c0013747:	0f b6 f0             	movzx  esi,al
c001374a:	0f b6 db             	movzx  ebx,bl
c001374d:	56                   	push   esi
c001374e:	53                   	push   ebx
c001374f:	52                   	push   edx
c0013750:	51                   	push   ecx
c0013751:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0013754:	83 c4 10             	add    esp,0x10
c0013757:	5b                   	pop    ebx
c0013758:	5e                   	pop    esi
c0013759:	5f                   	pop    edi
c001375a:	c3                   	ret    
c001375b:	90                   	nop

c001375c <File::exists()>:
c001375c:	83 ec 0c             	sub    esp,0xc
c001375f:	31 c0                	xor    eax,eax
c0013761:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013765:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001376c:	80 f9 19             	cmp    cl,0x19
c001376f:	77 24                	ja     c0013795 <File::exists()+0x39>
c0013771:	8b 0c 8d e0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1420]
c0013778:	85 c9                	test   ecx,ecx
c001377a:	74 19                	je     c0013795 <File::exists()+0x39>
c001377c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013782:	85 c9                	test   ecx,ecx
c0013784:	74 0f                	je     c0013795 <File::exists()+0x39>
c0013786:	83 c2 0d             	add    edx,0xd
c0013789:	50                   	push   eax
c001378a:	50                   	push   eax
c001378b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001378d:	52                   	push   edx
c001378e:	51                   	push   ecx
c001378f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013792:	83 c4 10             	add    esp,0x10
c0013795:	83 c4 0c             	add    esp,0xc
c0013798:	c3                   	ret    
c0013799:	90                   	nop

c001379a <File::stat(unsigned long long*, bool*)>:
c001379a:	56                   	push   esi
c001379b:	53                   	push   ebx
c001379c:	50                   	push   eax
c001379d:	b8 0b 00 00 00       	mov    eax,0xb
c00137a2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00137a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00137aa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00137b1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00137b5:	80 f9 19             	cmp    cl,0x19
c00137b8:	77 3d                	ja     c00137f7 <File::stat(unsigned long long*, bool*)+0x5d>
c00137ba:	8b 0c 8d e0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1420]
c00137c1:	85 c9                	test   ecx,ecx
c00137c3:	74 32                	je     c00137f7 <File::stat(unsigned long long*, bool*)+0x5d>
c00137c5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00137cb:	85 c9                	test   ecx,ecx
c00137cd:	74 28                	je     c00137f7 <File::stat(unsigned long long*, bool*)+0x5d>
c00137cf:	8b 01                	mov    eax,DWORD PTR [ecx]
c00137d1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00137d5:	74 13                	je     c00137ea <File::stat(unsigned long long*, bool*)+0x50>
c00137d7:	83 ec 04             	sub    esp,0x4
c00137da:	56                   	push   esi
c00137db:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00137e1:	51                   	push   ecx
c00137e2:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00137e5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00137e8:	eb 0a                	jmp    c00137f4 <File::stat(unsigned long long*, bool*)+0x5a>
c00137ea:	53                   	push   ebx
c00137eb:	83 c2 0d             	add    edx,0xd
c00137ee:	56                   	push   esi
c00137ef:	52                   	push   edx
c00137f0:	51                   	push   ecx
c00137f1:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00137f4:	83 c4 10             	add    esp,0x10
c00137f7:	5a                   	pop    edx
c00137f8:	5b                   	pop    ebx
c00137f9:	5e                   	pop    esi
c00137fa:	c3                   	ret    

c00137fb <Fs::setcwd(Process*, char*)>:
c00137fb:	55                   	push   ebp
c00137fc:	57                   	push   edi
c00137fd:	56                   	push   esi
c00137fe:	53                   	push   ebx
c00137ff:	81 ec 20 02 00 00    	sub    esp,0x220
c0013805:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c001380c:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0013812:	57                   	push   edi
c0013813:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001381a:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c001381e:	56                   	push   esi
c001381f:	e8 bc fa ff ff       	call   c00132e0 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013824:	89 34 24             	mov    DWORD PTR [esp],esi
c0013827:	e8 68 cf fe ff       	call   c0000794 <strlen>
c001382c:	83 c4 10             	add    esp,0x10
c001382f:	83 f8 02             	cmp    eax,0x2
c0013832:	77 17                	ja     c001384b <Fs::setcwd(Process*, char*)+0x50>
c0013834:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0013839:	83 e8 41             	sub    eax,0x41
c001383c:	83 f8 19             	cmp    eax,0x19
c001383f:	76 24                	jbe    c0013865 <Fs::setcwd(Process*, char*)+0x6a>
c0013841:	b8 03 00 00 00       	mov    eax,0x3
c0013846:	e9 e0 00 00 00       	jmp    c001392b <Fs::setcwd(Process*, char*)+0x130>
c001384b:	83 ec 0c             	sub    esp,0xc
c001384e:	56                   	push   esi
c001384f:	e8 40 cf fe ff       	call   c0000794 <strlen>
c0013854:	83 c4 10             	add    esp,0x10
c0013857:	83 f8 03             	cmp    eax,0x3
c001385a:	75 34                	jne    c0013890 <Fs::setcwd(Process*, char*)+0x95>
c001385c:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013861:	75 2d                	jne    c0013890 <Fs::setcwd(Process*, char*)+0x95>
c0013863:	eb cf                	jmp    c0013834 <Fs::setcwd(Process*, char*)+0x39>
c0013865:	8b 14 85 e0 eb 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1420]
c001386c:	b8 05 00 00 00       	mov    eax,0x5
c0013871:	85 d2                	test   edx,edx
c0013873:	0f 84 b2 00 00 00    	je     c001392b <Fs::setcwd(Process*, char*)+0x130>
c0013879:	b8 06 00 00 00       	mov    eax,0x6
c001387e:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013885:	0f 85 92 00 00 00    	jne    c001391d <Fs::setcwd(Process*, char*)+0x122>
c001388b:	e9 9b 00 00 00       	jmp    c001392b <Fs::setcwd(Process*, char*)+0x130>
c0013890:	83 ec 0c             	sub    esp,0xc
c0013893:	68 14 01 00 00       	push   0x114
c0013898:	e8 a3 bf ff ff       	call   c000f840 <malloc>
c001389d:	83 c4 0c             	add    esp,0xc
c00138a0:	89 c3                	mov    ebx,eax
c00138a2:	55                   	push   ebp
c00138a3:	56                   	push   esi
c00138a4:	50                   	push   eax
c00138a5:	e8 e0 fb ff ff       	call   c001348a <File::File(char const*, Process*)>
c00138aa:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00138af:	83 c4 0c             	add    esp,0xc
c00138b2:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00138b6:	50                   	push   eax
c00138b7:	8d 44 24 10          	lea    eax,[esp+0x10]
c00138bb:	50                   	push   eax
c00138bc:	53                   	push   ebx
c00138bd:	e8 d8 fe ff ff       	call   c001379a <File::stat(unsigned long long*, bool*)>
c00138c2:	83 c4 10             	add    esp,0x10
c00138c5:	83 f8 02             	cmp    eax,0x2
c00138c8:	74 04                	je     c00138ce <Fs::setcwd(Process*, char*)+0xd3>
c00138ca:	85 c0                	test   eax,eax
c00138cc:	74 1c                	je     c00138ea <Fs::setcwd(Process*, char*)+0xef>
c00138ce:	b8 01 00 00 00       	mov    eax,0x1
c00138d3:	85 db                	test   ebx,ebx
c00138d5:	74 54                	je     c001392b <Fs::setcwd(Process*, char*)+0x130>
c00138d7:	83 ec 0c             	sub    esp,0xc
c00138da:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138dc:	53                   	push   ebx
c00138dd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00138e0:	83 c4 10             	add    esp,0x10
c00138e3:	b8 01 00 00 00       	mov    eax,0x1
c00138e8:	eb 41                	jmp    c001392b <Fs::setcwd(Process*, char*)+0x130>
c00138ea:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00138ef:	75 1c                	jne    c001390d <Fs::setcwd(Process*, char*)+0x112>
c00138f1:	b8 02 00 00 00       	mov    eax,0x2
c00138f6:	85 db                	test   ebx,ebx
c00138f8:	74 31                	je     c001392b <Fs::setcwd(Process*, char*)+0x130>
c00138fa:	83 ec 0c             	sub    esp,0xc
c00138fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138ff:	53                   	push   ebx
c0013900:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013903:	83 c4 10             	add    esp,0x10
c0013906:	b8 02 00 00 00       	mov    eax,0x2
c001390b:	eb 1e                	jmp    c001392b <Fs::setcwd(Process*, char*)+0x130>
c001390d:	85 db                	test   ebx,ebx
c001390f:	74 0c                	je     c001391d <Fs::setcwd(Process*, char*)+0x122>
c0013911:	83 ec 0c             	sub    esp,0xc
c0013914:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013916:	53                   	push   ebx
c0013917:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001391a:	83 c4 10             	add    esp,0x10
c001391d:	50                   	push   eax
c001391e:	50                   	push   eax
c001391f:	56                   	push   esi
c0013920:	57                   	push   edi
c0013921:	e8 0e cf fe ff       	call   c0000834 <strcpy>
c0013926:	83 c4 10             	add    esp,0x10
c0013929:	31 c0                	xor    eax,eax
c001392b:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013931:	5b                   	pop    ebx
c0013932:	5e                   	pop    esi
c0013933:	5f                   	pop    edi
c0013934:	5d                   	pop    ebp
c0013935:	c3                   	ret    

c0013936 <Directory::Directory(char const*, Process*)>:
c0013936:	83 ec 0c             	sub    esp,0xc
c0013939:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001393d:	83 ec 08             	sub    esp,0x8
c0013940:	6a 00                	push   0x0
c0013942:	50                   	push   eax
c0013943:	e8 0c de ff ff       	call   c0011754 <UnixFile::UnixFile(int)>
c0013948:	83 c4 10             	add    esp,0x10
c001394b:	ba 84 ac 02 c0       	mov    edx,0xc002ac84
c0013950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013954:	89 10                	mov    DWORD PTR [eax],edx
c0013956:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001395a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013964:	83 c0 0d             	add    eax,0xd
c0013967:	83 ec 04             	sub    esp,0x4
c001396a:	52                   	push   edx
c001396b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001396f:	50                   	push   eax
c0013970:	e8 6b f9 ff ff       	call   c00132e0 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013975:	83 c4 10             	add    esp,0x10
c0013978:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001397c:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001397f:	8d 50 bf             	lea    edx,[eax-0x41]
c0013982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013986:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001398c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013990:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013994:	90                   	nop
c0013995:	83 c4 0c             	add    esp,0xc
c0013998:	c3                   	ret    
c0013999:	90                   	nop

c001399a <Directory::open()>:
c001399a:	53                   	push   ebx
c001399b:	b8 0b 00 00 00       	mov    eax,0xb
c00139a0:	83 ec 08             	sub    esp,0x8
c00139a3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00139a7:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00139ae:	80 fa 19             	cmp    dl,0x19
c00139b1:	77 3d                	ja     c00139f0 <Directory::open()+0x56>
c00139b3:	8b 14 95 e0 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1420]
c00139ba:	85 d2                	test   edx,edx
c00139bc:	74 32                	je     c00139f0 <Directory::open()+0x56>
c00139be:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00139c4:	85 d2                	test   edx,edx
c00139c6:	74 28                	je     c00139f0 <Directory::open()+0x56>
c00139c8:	b8 06 00 00 00       	mov    eax,0x6
c00139cd:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00139d1:	75 1d                	jne    c00139f0 <Directory::open()+0x56>
c00139d3:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00139d9:	50                   	push   eax
c00139da:	8b 02                	mov    eax,DWORD PTR [edx]
c00139dc:	51                   	push   ecx
c00139dd:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00139e0:	51                   	push   ecx
c00139e1:	52                   	push   edx
c00139e2:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c00139e5:	83 c4 10             	add    esp,0x10
c00139e8:	85 c0                	test   eax,eax
c00139ea:	75 04                	jne    c00139f0 <Directory::open()+0x56>
c00139ec:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00139f0:	83 c4 08             	add    esp,0x8
c00139f3:	5b                   	pop    ebx
c00139f4:	c3                   	ret    
c00139f5:	90                   	nop

c00139f6 <Directory::close()>:
c00139f6:	53                   	push   ebx
c00139f7:	b8 0b 00 00 00       	mov    eax,0xb
c00139fc:	83 ec 08             	sub    esp,0x8
c00139ff:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013a03:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013a0a:	80 fa 19             	cmp    dl,0x19
c0013a0d:	77 41                	ja     c0013a50 <Directory::close()+0x5a>
c0013a0f:	8b 1c 95 e0 eb 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1420]
c0013a16:	85 db                	test   ebx,ebx
c0013a18:	74 36                	je     c0013a50 <Directory::close()+0x5a>
c0013a1a:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013a21:	74 2d                	je     c0013a50 <Directory::close()+0x5a>
c0013a23:	b8 05 00 00 00       	mov    eax,0x5
c0013a28:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013a2c:	74 22                	je     c0013a50 <Directory::close()+0x5a>
c0013a2e:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013a32:	8b 04 95 e0 eb 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1420]
c0013a39:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013a3f:	53                   	push   ebx
c0013a40:	53                   	push   ebx
c0013a41:	8b 10                	mov    edx,DWORD PTR [eax]
c0013a43:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013a49:	50                   	push   eax
c0013a4a:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013a4d:	83 c4 10             	add    esp,0x10
c0013a50:	83 c4 08             	add    esp,0x8
c0013a53:	5b                   	pop    ebx
c0013a54:	c3                   	ret    
c0013a55:	90                   	nop

c0013a56 <Directory::unlink()>:
c0013a56:	83 ec 0c             	sub    esp,0xc
c0013a59:	b8 0b 00 00 00       	mov    eax,0xb
c0013a5e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a62:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a69:	80 f9 19             	cmp    cl,0x19
c0013a6c:	77 2f                	ja     c0013a9d <Directory::unlink()+0x47>
c0013a6e:	8b 0c 8d e0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1420]
c0013a75:	85 c9                	test   ecx,ecx
c0013a77:	74 24                	je     c0013a9d <Directory::unlink()+0x47>
c0013a79:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a7f:	85 c9                	test   ecx,ecx
c0013a81:	74 1a                	je     c0013a9d <Directory::unlink()+0x47>
c0013a83:	b8 06 00 00 00       	mov    eax,0x6
c0013a88:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013a8c:	75 0f                	jne    c0013a9d <Directory::unlink()+0x47>
c0013a8e:	83 c2 0d             	add    edx,0xd
c0013a91:	50                   	push   eax
c0013a92:	50                   	push   eax
c0013a93:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a95:	52                   	push   edx
c0013a96:	51                   	push   ecx
c0013a97:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013a9a:	83 c4 10             	add    esp,0x10
c0013a9d:	83 c4 0c             	add    esp,0xc
c0013aa0:	c3                   	ret    
c0013aa1:	90                   	nop

c0013aa2 <Directory::rename(char const*)>:
c0013aa2:	83 ec 0c             	sub    esp,0xc
c0013aa5:	b8 0b 00 00 00       	mov    eax,0xb
c0013aaa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013aae:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013ab5:	80 f9 19             	cmp    cl,0x19
c0013ab8:	77 32                	ja     c0013aec <Directory::rename(char const*)+0x4a>
c0013aba:	8b 0c 8d e0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1420]
c0013ac1:	85 c9                	test   ecx,ecx
c0013ac3:	74 27                	je     c0013aec <Directory::rename(char const*)+0x4a>
c0013ac5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013acb:	85 c9                	test   ecx,ecx
c0013acd:	74 1d                	je     c0013aec <Directory::rename(char const*)+0x4a>
c0013acf:	b8 06 00 00 00       	mov    eax,0x6
c0013ad4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013ad8:	75 12                	jne    c0013aec <Directory::rename(char const*)+0x4a>
c0013ada:	83 c2 0d             	add    edx,0xd
c0013add:	50                   	push   eax
c0013ade:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013ae0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ae4:	52                   	push   edx
c0013ae5:	51                   	push   ecx
c0013ae6:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013ae9:	83 c4 10             	add    esp,0x10
c0013aec:	83 c4 0c             	add    esp,0xc
c0013aef:	c3                   	ret    

c0013af0 <Directory::exists()>:
c0013af0:	83 ec 0c             	sub    esp,0xc
c0013af3:	31 c0                	xor    eax,eax
c0013af5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013af9:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b00:	80 f9 19             	cmp    cl,0x19
c0013b03:	77 24                	ja     c0013b29 <Directory::exists()+0x39>
c0013b05:	8b 0c 8d e0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1420]
c0013b0c:	85 c9                	test   ecx,ecx
c0013b0e:	74 19                	je     c0013b29 <Directory::exists()+0x39>
c0013b10:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b16:	85 c9                	test   ecx,ecx
c0013b18:	74 0f                	je     c0013b29 <Directory::exists()+0x39>
c0013b1a:	83 c2 0d             	add    edx,0xd
c0013b1d:	50                   	push   eax
c0013b1e:	50                   	push   eax
c0013b1f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b21:	52                   	push   edx
c0013b22:	51                   	push   ecx
c0013b23:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013b26:	83 c4 10             	add    esp,0x10
c0013b29:	83 c4 0c             	add    esp,0xc
c0013b2c:	c3                   	ret    
c0013b2d:	90                   	nop

c0013b2e <Directory::read(dirent*)>:
c0013b2e:	83 ec 1c             	sub    esp,0x1c
c0013b31:	b8 0b 00 00 00       	mov    eax,0xb
c0013b36:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013b3a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013b41:	80 fa 19             	cmp    dl,0x19
c0013b44:	77 30                	ja     c0013b76 <Directory::read(dirent*)+0x48>
c0013b46:	8b 14 95 e0 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1420]
c0013b4d:	85 d2                	test   edx,edx
c0013b4f:	74 25                	je     c0013b76 <Directory::read(dirent*)+0x48>
c0013b51:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013b58:	74 1c                	je     c0013b76 <Directory::read(dirent*)+0x48>
c0013b5a:	83 ec 0c             	sub    esp,0xc
c0013b5d:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b5f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013b63:	52                   	push   edx
c0013b64:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013b68:	6a 00                	push   0x0
c0013b6a:	68 10 01 00 00       	push   0x110
c0013b6f:	51                   	push   ecx
c0013b70:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013b73:	83 c4 20             	add    esp,0x20
c0013b76:	83 c4 1c             	add    esp,0x1c
c0013b79:	c3                   	ret    

c0013b7a <Directory::create()>:
c0013b7a:	83 ec 0c             	sub    esp,0xc
c0013b7d:	b8 0b 00 00 00       	mov    eax,0xb
c0013b82:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b86:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b8d:	80 f9 19             	cmp    cl,0x19
c0013b90:	77 2f                	ja     c0013bc1 <Directory::create()+0x47>
c0013b92:	8b 0c 8d e0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1420]
c0013b99:	85 c9                	test   ecx,ecx
c0013b9b:	74 24                	je     c0013bc1 <Directory::create()+0x47>
c0013b9d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013ba3:	85 c9                	test   ecx,ecx
c0013ba5:	74 1a                	je     c0013bc1 <Directory::create()+0x47>
c0013ba7:	b8 06 00 00 00       	mov    eax,0x6
c0013bac:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013bb0:	75 0f                	jne    c0013bc1 <Directory::create()+0x47>
c0013bb2:	83 c2 0d             	add    edx,0xd
c0013bb5:	50                   	push   eax
c0013bb6:	50                   	push   eax
c0013bb7:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013bb9:	52                   	push   edx
c0013bba:	51                   	push   ecx
c0013bbb:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013bbe:	83 c4 10             	add    esp,0x10
c0013bc1:	83 c4 0c             	add    esp,0xc
c0013bc4:	c3                   	ret    
c0013bc5:	90                   	nop

c0013bc6 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013bc6:	b8 0a 00 00 00       	mov    eax,0xa
c0013bcb:	c3                   	ret    

c0013bcc <Bus::Bus(char const*)>:
c0013bcc:	83 ec 0c             	sub    esp,0xc
c0013bcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bd3:	83 ec 08             	sub    esp,0x8
c0013bd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bda:	50                   	push   eax
c0013bdb:	e8 68 09 00 00       	call   c0014548 <Device::Device(char const*)>
c0013be0:	83 c4 10             	add    esp,0x10
c0013be3:	ba a0 ac 02 c0       	mov    edx,0xc002aca0
c0013be8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bec:	89 10                	mov    DWORD PTR [eax],edx
c0013bee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bf2:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013bfc:	90                   	nop
c0013bfd:	83 c4 0c             	add    esp,0xc
c0013c00:	c3                   	ret    
c0013c01:	90                   	nop

c0013c02 <Bus::~Bus()>:
c0013c02:	83 ec 0c             	sub    esp,0xc
c0013c05:	ba a0 ac 02 c0       	mov    edx,0xc002aca0
c0013c0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c0e:	89 10                	mov    DWORD PTR [eax],edx
c0013c10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c14:	83 ec 0c             	sub    esp,0xc
c0013c17:	50                   	push   eax
c0013c18:	e8 0d 06 00 00       	call   c001422a <Device::~Device()>
c0013c1d:	83 c4 10             	add    esp,0x10
c0013c20:	90                   	nop
c0013c21:	83 c4 0c             	add    esp,0xc
c0013c24:	c3                   	ret    
c0013c25:	90                   	nop

c0013c26 <Bus::~Bus()>:
c0013c26:	83 ec 0c             	sub    esp,0xc
c0013c29:	83 ec 0c             	sub    esp,0xc
c0013c2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c30:	e8 cd ff ff ff       	call   c0013c02 <Bus::~Bus()>
c0013c35:	83 c4 10             	add    esp,0x10
c0013c38:	83 ec 08             	sub    esp,0x8
c0013c3b:	68 58 01 00 00       	push   0x158
c0013c40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c44:	e8 08 f2 ff ff       	call   c0012e51 <operator delete(void*, unsigned long)>
c0013c49:	83 c4 10             	add    esp,0x10
c0013c4c:	83 c4 0c             	add    esp,0xc
c0013c4f:	c3                   	ret    

c0013c50 <Buzzer::Buzzer(char const*)>:
c0013c50:	83 ec 0c             	sub    esp,0xc
c0013c53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c57:	83 ec 08             	sub    esp,0x8
c0013c5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c5e:	50                   	push   eax
c0013c5f:	e8 e4 08 00 00       	call   c0014548 <Device::Device(char const*)>
c0013c64:	83 c4 10             	add    esp,0x10
c0013c67:	ba cc ac 02 c0       	mov    edx,0xc002accc
c0013c6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c70:	89 10                	mov    DWORD PTR [eax],edx
c0013c72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c76:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013c80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c84:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013c8e:	90                   	nop
c0013c8f:	83 c4 0c             	add    esp,0xc
c0013c92:	c3                   	ret    
c0013c93:	90                   	nop

c0013c94 <Buzzer::~Buzzer()>:
c0013c94:	83 ec 0c             	sub    esp,0xc
c0013c97:	ba cc ac 02 c0       	mov    edx,0xc002accc
c0013c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ca0:	89 10                	mov    DWORD PTR [eax],edx
c0013ca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ca6:	83 ec 0c             	sub    esp,0xc
c0013ca9:	50                   	push   eax
c0013caa:	e8 7b 05 00 00       	call   c001422a <Device::~Device()>
c0013caf:	83 c4 10             	add    esp,0x10
c0013cb2:	90                   	nop
c0013cb3:	83 c4 0c             	add    esp,0xc
c0013cb6:	c3                   	ret    
c0013cb7:	90                   	nop

c0013cb8 <Buzzer::~Buzzer()>:
c0013cb8:	83 ec 0c             	sub    esp,0xc
c0013cbb:	83 ec 0c             	sub    esp,0xc
c0013cbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cc2:	e8 cd ff ff ff       	call   c0013c94 <Buzzer::~Buzzer()>
c0013cc7:	83 c4 10             	add    esp,0x10
c0013cca:	83 ec 08             	sub    esp,0x8
c0013ccd:	68 5c 01 00 00       	push   0x15c
c0013cd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cd6:	e8 76 f1 ff ff       	call   c0012e51 <operator delete(void*, unsigned long)>
c0013cdb:	83 c4 10             	add    esp,0x10
c0013cde:	83 c4 0c             	add    esp,0xc
c0013ce1:	c3                   	ret    

c0013ce2 <Buzzer::stop()>:
c0013ce2:	83 ec 14             	sub    esp,0x14
c0013ce5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ce9:	8b 10                	mov    edx,DWORD PTR [eax]
c0013ceb:	6a 00                	push   0x0
c0013ced:	50                   	push   eax
c0013cee:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013cf1:	83 c4 1c             	add    esp,0x1c
c0013cf4:	c3                   	ret    

c0013cf5 <beepThread(void*)>:
c0013cf5:	53                   	push   ebx
c0013cf6:	83 ec 08             	sub    esp,0x8
c0013cf9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013cfd:	e8 08 a1 00 00       	call   c001de0a <unlockScheduler()>
c0013d02:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013d07:	52                   	push   edx
c0013d08:	52                   	push   edx
c0013d09:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013d0f:	52                   	push   edx
c0013d10:	50                   	push   eax
c0013d11:	e8 42 a6 00 00       	call   c001e358 <nanoSleep(unsigned long long)>
c0013d16:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d19:	e8 c4 ff ff ff       	call   c0013ce2 <Buzzer::stop()>
c0013d1e:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013d26:	83 c4 18             	add    esp,0x18
c0013d29:	5b                   	pop    ebx
c0013d2a:	e9 6f a5 00 00       	jmp    c001e29e <blockTask(TaskState)>
c0013d2f:	90                   	nop

c0013d30 <Buzzer::beep(int, int, bool)>:
c0013d30:	57                   	push   edi
c0013d31:	56                   	push   esi
c0013d32:	53                   	push   ebx
c0013d33:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d37:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013d3b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d3f:	52                   	push   edx
c0013d40:	52                   	push   edx
c0013d41:	8b 06                	mov    eax,DWORD PTR [esi]
c0013d43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d47:	56                   	push   esi
c0013d48:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013d4b:	83 c4 10             	add    esp,0x10
c0013d4e:	89 f8                	mov    eax,edi
c0013d50:	84 c0                	test   al,al
c0013d52:	74 1f                	je     c0013d73 <Buzzer::beep(int, int, bool)+0x43>
c0013d54:	50                   	push   eax
c0013d55:	50                   	push   eax
c0013d56:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013d5c:	99                   	cdq    
c0013d5d:	52                   	push   edx
c0013d5e:	50                   	push   eax
c0013d5f:	e8 f4 a5 00 00       	call   c001e358 <nanoSleep(unsigned long long)>
c0013d64:	83 c4 10             	add    esp,0x10
c0013d67:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013d6b:	5b                   	pop    ebx
c0013d6c:	5e                   	pop    esi
c0013d6d:	5f                   	pop    edi
c0013d6e:	e9 6f ff ff ff       	jmp    c0013ce2 <Buzzer::stop()>
c0013d73:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013d79:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0013d7e:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013d86:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013d8a:	c7 44 24 14 f5 3c 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013cf5
c0013d92:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013d96:	5b                   	pop    ebx
c0013d97:	5e                   	pop    esi
c0013d98:	5f                   	pop    edi
c0013d99:	e9 9c a1 00 00       	jmp    c001df3a <Process::createThread(void (*)(void*), void*, int)>

c0013d9e <User::loadClockSettings(int)>:
c0013d9e:	53                   	push   ebx
c0013d9f:	83 ec 14             	sub    esp,0x14
c0013da2:	68 14 01 00 00       	push   0x114
c0013da7:	e8 94 ba ff ff       	call   c000f840 <malloc>
c0013dac:	83 c4 0c             	add    esp,0xc
c0013daf:	89 c3                	mov    ebx,eax
c0013db1:	ff 35 34 1b 03 c0    	push   DWORD PTR ds:0xc0031b34
c0013db7:	68 f4 ac 02 c0       	push   0xc002acf4
c0013dbc:	50                   	push   eax
c0013dbd:	e8 c8 f6 ff ff       	call   c001348a <File::File(char const*, Process*)>
c0013dc2:	58                   	pop    eax
c0013dc3:	5a                   	pop    edx
c0013dc4:	6a 01                	push   0x1
c0013dc6:	53                   	push   ebx
c0013dc7:	e8 22 f7 ff ff       	call   c00134ee <File::open(FileOpenMode)>
c0013dcc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013dcf:	e8 78 f7 ff ff       	call   c001354c <File::close()>
c0013dd4:	83 c4 10             	add    esp,0x10
c0013dd7:	85 db                	test   ebx,ebx
c0013dd9:	74 0f                	je     c0013dea <User::loadClockSettings(int)+0x4c>
c0013ddb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ddd:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013de1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013de4:	83 c4 08             	add    esp,0x8
c0013de7:	5b                   	pop    ebx
c0013de8:	ff e0                	jmp    eax
c0013dea:	83 c4 08             	add    esp,0x8
c0013ded:	5b                   	pop    ebx
c0013dee:	c3                   	ret    
c0013def:	90                   	nop

c0013df0 <Clock::Clock(char const*)>:
c0013df0:	83 ec 0c             	sub    esp,0xc
c0013df3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013df7:	83 ec 08             	sub    esp,0x8
c0013dfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013dfe:	50                   	push   eax
c0013dff:	e8 44 07 00 00       	call   c0014548 <Device::Device(char const*)>
c0013e04:	83 c4 10             	add    esp,0x10
c0013e07:	ba 1c ad 02 c0       	mov    edx,0xc002ad1c
c0013e0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e10:	89 10                	mov    DWORD PTR [eax],edx
c0013e12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e16:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013e20:	90                   	nop
c0013e21:	83 c4 0c             	add    esp,0xc
c0013e24:	c3                   	ret    
c0013e25:	90                   	nop

c0013e26 <Clock::~Clock()>:
c0013e26:	83 ec 0c             	sub    esp,0xc
c0013e29:	ba 1c ad 02 c0       	mov    edx,0xc002ad1c
c0013e2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e32:	89 10                	mov    DWORD PTR [eax],edx
c0013e34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e38:	83 ec 0c             	sub    esp,0xc
c0013e3b:	50                   	push   eax
c0013e3c:	e8 e9 03 00 00       	call   c001422a <Device::~Device()>
c0013e41:	83 c4 10             	add    esp,0x10
c0013e44:	90                   	nop
c0013e45:	83 c4 0c             	add    esp,0xc
c0013e48:	c3                   	ret    
c0013e49:	90                   	nop

c0013e4a <Clock::~Clock()>:
c0013e4a:	83 ec 0c             	sub    esp,0xc
c0013e4d:	83 ec 0c             	sub    esp,0xc
c0013e50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e54:	e8 cd ff ff ff       	call   c0013e26 <Clock::~Clock()>
c0013e59:	83 c4 10             	add    esp,0x10
c0013e5c:	83 ec 08             	sub    esp,0x8
c0013e5f:	68 58 01 00 00       	push   0x158
c0013e64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e68:	e8 e4 ef ff ff       	call   c0012e51 <operator delete(void*, unsigned long)>
c0013e6d:	83 c4 10             	add    esp,0x10
c0013e70:	83 c4 0c             	add    esp,0xc
c0013e73:	c3                   	ret    

c0013e74 <Clock::timeInSecondsLocal()>:
c0013e74:	53                   	push   ebx
c0013e75:	83 ec 14             	sub    esp,0x14
c0013e78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e7c:	8b 10                	mov    edx,DWORD PTR [eax]
c0013e7e:	50                   	push   eax
c0013e7f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013e82:	0f b6 0d 54 e7 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e754
c0013e89:	03 0d 58 e7 02 c0    	add    ecx,DWORD PTR ds:0xc002e758
c0013e8f:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013e95:	89 cb                	mov    ebx,ecx
c0013e97:	c1 fb 1f             	sar    ebx,0x1f
c0013e9a:	01 c8                	add    eax,ecx
c0013e9c:	11 da                	adc    edx,ebx
c0013e9e:	83 c4 10             	add    esp,0x10
c0013ea1:	31 c9                	xor    ecx,ecx
c0013ea3:	80 3d 55 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e755,0x0
c0013eaa:	74 05                	je     c0013eb1 <Clock::timeInSecondsLocal()+0x3d>
c0013eac:	b9 08 07 00 00       	mov    ecx,0x708
c0013eb1:	31 db                	xor    ebx,ebx
c0013eb3:	01 c8                	add    eax,ecx
c0013eb5:	11 da                	adc    edx,ebx
c0013eb7:	83 c4 08             	add    esp,0x8
c0013eba:	5b                   	pop    ebx
c0013ebb:	c3                   	ret    

c0013ebc <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013ebc:	57                   	push   edi
c0013ebd:	56                   	push   esi
c0013ebe:	53                   	push   ebx
c0013ebf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013ec3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013ec7:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013ec9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013ecd:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013ed0:	0f b6 05 54 e7 02 c0 	movzx  eax,BYTE PTR ds:0xc002e754
c0013ed7:	03 05 58 e7 02 c0    	add    eax,DWORD PTR ds:0xc002e758
c0013edd:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013ee3:	99                   	cdq    
c0013ee4:	29 c6                	sub    esi,eax
c0013ee6:	19 d7                	sbb    edi,edx
c0013ee8:	89 f0                	mov    eax,esi
c0013eea:	89 fa                	mov    edx,edi
c0013eec:	31 f6                	xor    esi,esi
c0013eee:	80 3d 55 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e755,0x0
c0013ef5:	74 05                	je     c0013efc <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013ef7:	be 08 07 00 00       	mov    esi,0x708
c0013efc:	31 ff                	xor    edi,edi
c0013efe:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013f02:	29 f0                	sub    eax,esi
c0013f04:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013f08:	19 fa                	sbb    edx,edi
c0013f0a:	89 d8                	mov    eax,ebx
c0013f0c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013f10:	5b                   	pop    ebx
c0013f11:	5e                   	pop    esi
c0013f12:	5f                   	pop    edi
c0013f13:	ff e0                	jmp    eax

c0013f15 <datetimeToSeconds(datetime_t)>:
c0013f15:	55                   	push   ebp
c0013f16:	57                   	push   edi
c0013f17:	56                   	push   esi
c0013f18:	53                   	push   ebx
c0013f19:	83 ec 14             	sub    esp,0x14
c0013f1c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013f20:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013f24:	89 d3                	mov    ebx,edx
c0013f26:	0f b6 c6             	movzx  eax,dh
c0013f29:	c1 eb 10             	shr    ebx,0x10
c0013f2c:	48                   	dec    eax
c0013f2d:	66 81 eb 6c 07       	sub    bx,0x76c
c0013f32:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013f36:	0f b6 f5             	movzx  esi,ch
c0013f39:	89 cf                	mov    edi,ecx
c0013f3b:	6b f6 3c             	imul   esi,esi,0x3c
c0013f3e:	c1 ef 10             	shr    edi,0x10
c0013f41:	0f b6 c9             	movzx  ecx,cl
c0013f44:	89 f8                	mov    eax,edi
c0013f46:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013f4c:	0f b6 f8             	movzx  edi,al
c0013f4f:	0f b6 d2             	movzx  edx,dl
c0013f52:	01 fe                	add    esi,edi
c0013f54:	01 f1                	add    ecx,esi
c0013f56:	0f b7 f3             	movzx  esi,bx
c0013f59:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013f5d:	c1 f9 1f             	sar    ecx,0x1f
c0013f60:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013f65:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013f69:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013f6e:	8b 0c 8d 60 ad 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd52a0]
c0013f75:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013f79:	76 29                	jbe    c0013fa4 <datetimeToSeconds(datetime_t)+0x8f>
c0013f7b:	f6 c3 03             	test   bl,0x3
c0013f7e:	75 24                	jne    c0013fa4 <datetimeToSeconds(datetime_t)+0x8f>
c0013f80:	31 d2                	xor    edx,edx
c0013f82:	bf 64 00 00 00       	mov    edi,0x64
c0013f87:	89 d8                	mov    eax,ebx
c0013f89:	66 f7 f7             	div    di
c0013f8c:	66 85 d2             	test   dx,dx
c0013f8f:	75 12                	jne    c0013fa3 <datetimeToSeconds(datetime_t)+0x8e>
c0013f91:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013f97:	bf 90 01 00 00       	mov    edi,0x190
c0013f9c:	99                   	cdq    
c0013f9d:	f7 ff                	idiv   edi
c0013f9f:	85 d2                	test   edx,edx
c0013fa1:	75 01                	jne    c0013fa4 <datetimeToSeconds(datetime_t)+0x8f>
c0013fa3:	41                   	inc    ecx
c0013fa4:	66 83 fb 46          	cmp    bx,0x46
c0013fa8:	76 45                	jbe    c0013fef <datetimeToSeconds(datetime_t)+0xda>
c0013faa:	bb 46 00 00 00       	mov    ebx,0x46
c0013faf:	bf 64 00 00 00       	mov    edi,0x64
c0013fb4:	bd 90 01 00 00       	mov    ebp,0x190
c0013fb9:	b8 6d 01 00 00       	mov    eax,0x16d
c0013fbe:	f6 c3 03             	test   bl,0x3
c0013fc1:	75 23                	jne    c0013fe6 <datetimeToSeconds(datetime_t)+0xd1>
c0013fc3:	89 d8                	mov    eax,ebx
c0013fc5:	99                   	cdq    
c0013fc6:	f7 ff                	idiv   edi
c0013fc8:	b8 6e 01 00 00       	mov    eax,0x16e
c0013fcd:	85 d2                	test   edx,edx
c0013fcf:	75 15                	jne    c0013fe6 <datetimeToSeconds(datetime_t)+0xd1>
c0013fd1:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013fd7:	99                   	cdq    
c0013fd8:	f7 fd                	idiv   ebp
c0013fda:	83 fa 01             	cmp    edx,0x1
c0013fdd:	19 c0                	sbb    eax,eax
c0013fdf:	f7 d0                	not    eax
c0013fe1:	05 6e 01 00 00       	add    eax,0x16e
c0013fe6:	01 c1                	add    ecx,eax
c0013fe8:	43                   	inc    ebx
c0013fe9:	39 f3                	cmp    ebx,esi
c0013feb:	7c cc                	jl     c0013fb9 <datetimeToSeconds(datetime_t)+0xa4>
c0013fed:	eb 35                	jmp    c0014024 <datetimeToSeconds(datetime_t)+0x10f>
c0013fef:	74 33                	je     c0014024 <datetimeToSeconds(datetime_t)+0x10f>
c0013ff1:	b8 45 00 00 00       	mov    eax,0x45
c0013ff6:	89 c2                	mov    edx,eax
c0013ff8:	83 e2 03             	and    edx,0x3
c0013ffb:	39 f0                	cmp    eax,esi
c0013ffd:	7e 0f                	jle    c001400e <datetimeToSeconds(datetime_t)+0xf9>
c0013fff:	83 fa 01             	cmp    edx,0x1
c0014002:	19 d2                	sbb    edx,edx
c0014004:	48                   	dec    eax
c0014005:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c001400c:	eb e8                	jmp    c0013ff6 <datetimeToSeconds(datetime_t)+0xe1>
c001400e:	b8 6d 01 00 00       	mov    eax,0x16d
c0014013:	85 d2                	test   edx,edx
c0014015:	75 0b                	jne    c0014022 <datetimeToSeconds(datetime_t)+0x10d>
c0014017:	66 83 fb 01          	cmp    bx,0x1
c001401b:	19 c0                	sbb    eax,eax
c001401d:	05 6e 01 00 00       	add    eax,0x16e
c0014022:	29 c1                	sub    ecx,eax
c0014024:	b8 80 51 01 00       	mov    eax,0x15180
c0014029:	f7 e9                	imul   ecx
c001402b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001402f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0014033:	83 c4 14             	add    esp,0x14
c0014036:	5b                   	pop    ebx
c0014037:	5e                   	pop    esi
c0014038:	5f                   	pop    edi
c0014039:	5d                   	pop    ebp
c001403a:	c3                   	ret    
c001403b:	90                   	nop

c001403c <Clock::setTimeInDatetimeLocal(datetime_t)>:
c001403c:	57                   	push   edi
c001403d:	56                   	push   esi
c001403e:	53                   	push   ebx
c001403f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014043:	8b 06                	mov    eax,DWORD PTR [esi]
c0014045:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0014048:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001404c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014050:	e8 c0 fe ff ff       	call   c0013f15 <datetimeToSeconds(datetime_t)>
c0014055:	59                   	pop    ecx
c0014056:	0f b6 0d 54 e7 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e754
c001405d:	5b                   	pop    ebx
c001405e:	03 0d 58 e7 02 c0    	add    ecx,DWORD PTR ds:0xc002e758
c0014064:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001406a:	89 cb                	mov    ebx,ecx
c001406c:	c1 fb 1f             	sar    ebx,0x1f
c001406f:	29 c8                	sub    eax,ecx
c0014071:	19 da                	sbb    edx,ebx
c0014073:	31 c9                	xor    ecx,ecx
c0014075:	80 3d 55 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e755,0x0
c001407c:	74 05                	je     c0014083 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001407e:	b9 08 07 00 00       	mov    ecx,0x708
c0014083:	31 db                	xor    ebx,ebx
c0014085:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0014089:	29 c8                	sub    eax,ecx
c001408b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001408f:	19 da                	sbb    edx,ebx
c0014091:	89 f8                	mov    eax,edi
c0014093:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0014097:	5b                   	pop    ebx
c0014098:	5e                   	pop    esi
c0014099:	5f                   	pop    edi
c001409a:	ff e0                	jmp    eax

c001409c <secondsToDatetime(unsigned long long)>:
c001409c:	55                   	push   ebp
c001409d:	57                   	push   edi
c001409e:	56                   	push   esi
c001409f:	53                   	push   ebx
c00140a0:	83 ec 1c             	sub    esp,0x1c
c00140a3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00140a7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00140ab:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00140af:	6a 00                	push   0x0
c00140b1:	68 80 51 01 00       	push   0x15180
c00140b6:	55                   	push   ebp
c00140b7:	57                   	push   edi
c00140b8:	e8 2f 29 01 00       	call   c00269ec <__udivdi3>
c00140bd:	83 c4 10             	add    esp,0x10
c00140c0:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00140c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00140ca:	6a 00                	push   0x0
c00140cc:	68 80 51 01 00       	push   0x15180
c00140d1:	55                   	push   ebp
c00140d2:	57                   	push   edi
c00140d3:	bf 10 0e 00 00       	mov    edi,0xe10
c00140d8:	e8 0f 2a 01 00       	call   c0026aec <__umoddi3>
c00140dd:	83 c4 10             	add    esp,0x10
c00140e0:	99                   	cdq    
c00140e1:	f7 ff                	idiv   edi
c00140e3:	bf 3c 00 00 00       	mov    edi,0x3c
c00140e8:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00140eb:	89 d0                	mov    eax,edx
c00140ed:	99                   	cdq    
c00140ee:	f7 ff                	idiv   edi
c00140f0:	85 db                	test   ebx,ebx
c00140f2:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00140f5:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00140f8:	79 11                	jns    c001410b <secondsToDatetime(unsigned long long)+0x6f>
c00140fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00140fe:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0014104:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0014109:	eb 07                	jmp    c0014112 <secondsToDatetime(unsigned long long)+0x76>
c001410b:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0014110:	89 d8                	mov    eax,ebx
c0014112:	bf b4 05 00 00       	mov    edi,0x5b4
c0014117:	99                   	cdq    
c0014118:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c001411d:	f7 f9                	idiv   ecx
c001411f:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0014124:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014128:	31 d2                	xor    edx,edx
c001412a:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0014132:	01 c3                	add    ebx,eax
c0014134:	89 d8                	mov    eax,ebx
c0014136:	f7 f1                	div    ecx
c0014138:	31 d2                	xor    edx,edx
c001413a:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c001413d:	89 d8                	mov    eax,ebx
c001413f:	f7 f7                	div    edi
c0014141:	31 d2                	xor    edx,edx
c0014143:	29 c1                	sub    ecx,eax
c0014145:	89 d8                	mov    eax,ebx
c0014147:	f7 f5                	div    ebp
c0014149:	bd 6d 01 00 00       	mov    ebp,0x16d
c001414e:	29 c1                	sub    ecx,eax
c0014150:	31 d2                	xor    edx,edx
c0014152:	89 c8                	mov    eax,ecx
c0014154:	f7 f5                	div    ebp
c0014156:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001415b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001415f:	31 d2                	xor    edx,edx
c0014161:	89 c8                	mov    eax,ecx
c0014163:	f7 f5                	div    ebp
c0014165:	31 d2                	xor    edx,edx
c0014167:	01 c3                	add    ebx,eax
c0014169:	89 c8                	mov    eax,ecx
c001416b:	f7 f7                	div    edi
c001416d:	bf 99 00 00 00       	mov    edi,0x99
c0014172:	29 c3                	sub    ebx,eax
c0014174:	31 d2                	xor    edx,edx
c0014176:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001417e:	29 c3                	sub    ebx,eax
c0014180:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0014183:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0014186:	bb 05 00 00 00       	mov    ebx,0x5
c001418b:	83 c1 02             	add    ecx,0x2
c001418e:	89 c8                	mov    eax,ecx
c0014190:	f7 f7                	div    edi
c0014192:	31 d2                	xor    edx,edx
c0014194:	89 c7                	mov    edi,eax
c0014196:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001419c:	83 c0 02             	add    eax,0x2
c001419f:	f7 f3                	div    ebx
c00141a1:	89 eb                	mov    ebx,ebp
c00141a3:	29 c3                	sub    ebx,eax
c00141a5:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c00141ab:	88 1e                	mov    BYTE PTR [esi],bl
c00141ad:	19 c0                	sbb    eax,eax
c00141af:	31 d2                	xor    edx,edx
c00141b1:	83 e0 0c             	and    eax,0xc
c00141b4:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00141b8:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00141c0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00141c4:	83 f9 01             	cmp    ecx,0x1
c00141c7:	0f 96 c2             	setbe  dl
c00141ca:	41                   	inc    ecx
c00141cb:	01 d0                	add    eax,edx
c00141cd:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00141d0:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00141d4:	83 c4 1c             	add    esp,0x1c
c00141d7:	89 f0                	mov    eax,esi
c00141d9:	5b                   	pop    ebx
c00141da:	5e                   	pop    esi
c00141db:	5f                   	pop    edi
c00141dc:	5d                   	pop    ebp
c00141dd:	c2 04 00             	ret    0x4

c00141e0 <Clock::timeInDatetimeLocal()>:
c00141e0:	53                   	push   ebx
c00141e1:	83 ec 14             	sub    esp,0x14
c00141e4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00141e8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00141ec:	e8 83 fc ff ff       	call   c0013e74 <Clock::timeInSecondsLocal()>
c00141f1:	83 c4 0c             	add    esp,0xc
c00141f4:	52                   	push   edx
c00141f5:	50                   	push   eax
c00141f6:	53                   	push   ebx
c00141f7:	e8 a0 fe ff ff       	call   c001409c <secondsToDatetime(unsigned long long)>
c00141fc:	89 d8                	mov    eax,ebx
c00141fe:	83 c4 14             	add    esp,0x14
c0014201:	5b                   	pop    ebx
c0014202:	c2 04 00             	ret    0x4
c0014205:	90                   	nop

c0014206 <Device::hibernate()>:
c0014206:	c3                   	ret    
c0014207:	90                   	nop

c0014208 <Device::wake()>:
c0014208:	c3                   	ret    
c0014209:	90                   	nop

c001420a <Device::detect()>:
c001420a:	c3                   	ret    
c001420b:	90                   	nop

c001420c <Device::disableLegacy()>:
c001420c:	c3                   	ret    
c001420d:	90                   	nop

c001420e <Device::powerSaving(PowerSavingLevel)>:
c001420e:	c3                   	ret    
c001420f:	90                   	nop

c0014210 <DriverlessDevice::close(int, int, void*)>:
c0014210:	31 c0                	xor    eax,eax
c0014212:	c3                   	ret    
c0014213:	90                   	nop

c0014214 <DriverlessDevice::detect()>:
c0014214:	c3                   	ret    
c0014215:	90                   	nop

c0014216 <DriverlessDevice::open(int, int, void*)>:
c0014216:	83 ec 18             	sub    esp,0x18
c0014219:	68 90 ad 02 c0       	push   0xc002ad90
c001421e:	e8 c0 63 00 00       	call   c001a5e3 <Krnl::panic(char const*)>
c0014223:	83 c8 ff             	or     eax,0xffffffff
c0014226:	83 c4 1c             	add    esp,0x1c
c0014229:	c3                   	ret    

c001422a <Device::~Device()>:
c001422a:	ba b8 ad 02 c0       	mov    edx,0xc002adb8
c001422f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014233:	89 10                	mov    DWORD PTR [eax],edx
c0014235:	90                   	nop
c0014236:	c3                   	ret    
c0014237:	90                   	nop

c0014238 <Device::~Device()>:
c0014238:	83 ec 0c             	sub    esp,0xc
c001423b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001423f:	e8 e6 ff ff ff       	call   c001422a <Device::~Device()>
c0014244:	83 c4 04             	add    esp,0x4
c0014247:	83 ec 08             	sub    esp,0x8
c001424a:	68 58 01 00 00       	push   0x158
c001424f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014253:	e8 f9 eb ff ff       	call   c0012e51 <operator delete(void*, unsigned long)>
c0014258:	83 c4 10             	add    esp,0x10
c001425b:	83 c4 0c             	add    esp,0xc
c001425e:	c3                   	ret    
c001425f:	90                   	nop

c0014260 <Device::findAndLoadDriver()>:
c0014260:	c3                   	ret    
c0014261:	90                   	nop

c0014262 <Device::preOpenPCI(PCIDeviceInfo)>:
c0014262:	57                   	push   edi
c0014263:	b9 09 00 00 00       	mov    ecx,0x9
c0014268:	56                   	push   esi
c0014269:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001426d:	8d 74 24 10          	lea    esi,[esp+0x10]
c0014271:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001427b:	81 c7 18 01 00 00    	add    edi,0x118
c0014281:	fc                   	cld    
c0014282:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014284:	5e                   	pop    esi
c0014285:	5f                   	pop    edi
c0014286:	c3                   	ret    
c0014287:	90                   	nop

c0014288 <Device::preOpenACPI(void*, char*, char*)>:
c0014288:	56                   	push   esi
c0014289:	53                   	push   ebx
c001428a:	83 ec 08             	sub    esp,0x8
c001428d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014291:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014295:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c001429f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00142a3:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c00142a9:	6a 1e                	push   0x1e
c00142ab:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c00142b1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00142b5:	81 c3 3a 01 00 00    	add    ebx,0x13a
c00142bb:	50                   	push   eax
c00142bc:	e8 83 c4 fe ff       	call   c0000744 <memcpy>
c00142c1:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00142c5:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00142c9:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c00142d1:	83 c4 14             	add    esp,0x14
c00142d4:	5b                   	pop    ebx
c00142d5:	5e                   	pop    esi
c00142d6:	e9 69 c4 fe ff       	jmp    c0000744 <memcpy>
c00142db:	90                   	nop

c00142dc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00142dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00142e0:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00142e5:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00142ec:	75 0b                	jne    c00142f9 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c00142ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00142f0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00142f4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00142f7:	eb 1e                	jmp    c0014317 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c00142f9:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c00142fe:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014304:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001430a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001430c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014310:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014314:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0014317:	ff e0                	jmp    eax
c0014319:	90                   	nop

c001431a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c001431a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001431e:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0014323:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001432a:	75 0b                	jne    c0014337 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001432c:	8b 00                	mov    eax,DWORD PTR [eax]
c001432e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014332:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0014335:	eb 1e                	jmp    c0014355 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0014337:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c001433c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014342:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0014348:	8b 08                	mov    ecx,DWORD PTR [eax]
c001434a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001434e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014352:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0014355:	ff e0                	jmp    eax
c0014357:	90                   	nop

c0014358 <Device::addChild(Device*)>:
c0014358:	53                   	push   ebx
c0014359:	83 ec 08             	sub    esp,0x8
c001435c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014360:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014364:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c001436a:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0014370:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014372:	85 d2                	test   edx,edx
c0014374:	74 04                	je     c001437a <Device::addChild(Device*)+0x22>
c0014376:	89 d3                	mov    ebx,edx
c0014378:	eb f6                	jmp    c0014370 <Device::addChild(Device*)+0x18>
c001437a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001437d:	83 ec 0c             	sub    esp,0xc
c0014380:	6a 08                	push   0x8
c0014382:	e8 b9 b4 ff ff       	call   c000f840 <malloc>
c0014387:	89 03                	mov    DWORD PTR [ebx],eax
c0014389:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001438f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014396:	83 c4 18             	add    esp,0x18
c0014399:	5b                   	pop    ebx
c001439a:	c3                   	ret    
c001439b:	90                   	nop

c001439c <Device::removeAllChildren()>:
c001439c:	56                   	push   esi
c001439d:	53                   	push   ebx
c001439e:	52                   	push   edx
c001439f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00143a3:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00143a9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143ac:	74 17                	je     c00143c5 <Device::removeAllChildren()+0x29>
c00143ae:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00143b1:	85 c0                	test   eax,eax
c00143b3:	74 0c                	je     c00143c1 <Device::removeAllChildren()+0x25>
c00143b5:	83 ec 0c             	sub    esp,0xc
c00143b8:	8b 10                	mov    edx,DWORD PTR [eax]
c00143ba:	50                   	push   eax
c00143bb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00143be:	83 c4 10             	add    esp,0x10
c00143c1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143c3:	eb e4                	jmp    c00143a9 <Device::removeAllChildren()+0xd>
c00143c5:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00143cb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00143d1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00143d7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00143de:	58                   	pop    eax
c00143df:	5b                   	pop    ebx
c00143e0:	5e                   	pop    esi
c00143e1:	c3                   	ret    

c00143e2 <Device::hibernateAll()>:
c00143e2:	53                   	push   ebx
c00143e3:	83 ec 14             	sub    esp,0x14
c00143e6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00143ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143ec:	53                   	push   ebx
c00143ed:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00143f0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143f6:	83 c4 10             	add    esp,0x10
c00143f9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143fc:	74 0f                	je     c001440d <Device::hibernateAll()+0x2b>
c00143fe:	83 ec 0c             	sub    esp,0xc
c0014401:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014404:	e8 d9 ff ff ff       	call   c00143e2 <Device::hibernateAll()>
c0014409:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001440b:	eb e9                	jmp    c00143f6 <Device::hibernateAll()+0x14>
c001440d:	83 c4 08             	add    esp,0x8
c0014410:	5b                   	pop    ebx
c0014411:	c3                   	ret    

c0014412 <Device::wakeAll()>:
c0014412:	53                   	push   ebx
c0014413:	83 ec 14             	sub    esp,0x14
c0014416:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001441a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001441c:	53                   	push   ebx
c001441d:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0014420:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014426:	83 c4 10             	add    esp,0x10
c0014429:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001442c:	74 0f                	je     c001443d <Device::wakeAll()+0x2b>
c001442e:	83 ec 0c             	sub    esp,0xc
c0014431:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014434:	e8 d9 ff ff ff       	call   c0014412 <Device::wakeAll()>
c0014439:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001443b:	eb e9                	jmp    c0014426 <Device::wakeAll()+0x14>
c001443d:	83 c4 08             	add    esp,0x8
c0014440:	5b                   	pop    ebx
c0014441:	c3                   	ret    

c0014442 <Device::detectAll()>:
c0014442:	53                   	push   ebx
c0014443:	83 ec 14             	sub    esp,0x14
c0014446:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001444a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001444c:	53                   	push   ebx
c001444d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0014450:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014456:	83 c4 10             	add    esp,0x10
c0014459:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001445c:	74 0f                	je     c001446d <Device::detectAll()+0x2b>
c001445e:	83 ec 0c             	sub    esp,0xc
c0014461:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014464:	e8 d9 ff ff ff       	call   c0014442 <Device::detectAll()>
c0014469:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001446b:	eb e9                	jmp    c0014456 <Device::detectAll()+0x14>
c001446d:	83 c4 08             	add    esp,0x8
c0014470:	5b                   	pop    ebx
c0014471:	c3                   	ret    

c0014472 <Device::disableLegacyAll()>:
c0014472:	53                   	push   ebx
c0014473:	83 ec 14             	sub    esp,0x14
c0014476:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001447a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001447c:	53                   	push   ebx
c001447d:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0014480:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014486:	83 c4 10             	add    esp,0x10
c0014489:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001448c:	74 0f                	je     c001449d <Device::disableLegacyAll()+0x2b>
c001448e:	83 ec 0c             	sub    esp,0xc
c0014491:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014494:	e8 d9 ff ff ff       	call   c0014472 <Device::disableLegacyAll()>
c0014499:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001449b:	eb e9                	jmp    c0014486 <Device::disableLegacyAll()+0x14>
c001449d:	83 c4 08             	add    esp,0x8
c00144a0:	5b                   	pop    ebx
c00144a1:	c3                   	ret    

c00144a2 <Device::loadDriversForAll()>:
c00144a2:	53                   	push   ebx
c00144a3:	83 ec 08             	sub    esp,0x8
c00144a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144aa:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00144b0:	8b 18                	mov    ebx,DWORD PTR [eax]
c00144b2:	85 db                	test   ebx,ebx
c00144b4:	74 12                	je     c00144c8 <Device::loadDriversForAll()+0x26>
c00144b6:	83 ec 0c             	sub    esp,0xc
c00144b9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00144bc:	e8 e1 ff ff ff       	call   c00144a2 <Device::loadDriversForAll()>
c00144c1:	83 c4 10             	add    esp,0x10
c00144c4:	89 d8                	mov    eax,ebx
c00144c6:	eb e8                	jmp    c00144b0 <Device::loadDriversForAll()+0xe>
c00144c8:	83 c4 08             	add    esp,0x8
c00144cb:	5b                   	pop    ebx
c00144cc:	c3                   	ret    
c00144cd:	90                   	nop

c00144ce <Device::closeAll()>:
c00144ce:	53                   	push   ebx
c00144cf:	83 ec 08             	sub    esp,0x8
c00144d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00144d6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144d8:	6a 00                	push   0x0
c00144da:	6a 00                	push   0x0
c00144dc:	6a 00                	push   0x0
c00144de:	53                   	push   ebx
c00144df:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00144e2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144e8:	83 c4 10             	add    esp,0x10
c00144eb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00144ee:	74 0f                	je     c00144ff <Device::closeAll()+0x31>
c00144f0:	83 ec 0c             	sub    esp,0xc
c00144f3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144f6:	e8 d3 ff ff ff       	call   c00144ce <Device::closeAll()>
c00144fb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144fd:	eb e9                	jmp    c00144e8 <Device::closeAll()+0x1a>
c00144ff:	83 c4 08             	add    esp,0x8
c0014502:	5b                   	pop    ebx
c0014503:	c3                   	ret    

c0014504 <Device::powerSavingAll(PowerSavingLevel)>:
c0014504:	56                   	push   esi
c0014505:	53                   	push   ebx
c0014506:	83 ec 0c             	sub    esp,0xc
c0014509:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001450d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014511:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014513:	56                   	push   esi
c0014514:	53                   	push   ebx
c0014515:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0014518:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001451e:	83 c4 10             	add    esp,0x10
c0014521:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014524:	74 0f                	je     c0014535 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0014526:	52                   	push   edx
c0014527:	52                   	push   edx
c0014528:	56                   	push   esi
c0014529:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001452c:	e8 d3 ff ff ff       	call   c0014504 <Device::powerSavingAll(PowerSavingLevel)>
c0014531:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014533:	eb e9                	jmp    c001451e <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0014535:	58                   	pop    eax
c0014536:	5b                   	pop    ebx
c0014537:	5e                   	pop    esi
c0014538:	c3                   	ret    
c0014539:	90                   	nop

c001453a <Device::setName(char const*)>:
c001453a:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0014542:	e9 ed c2 fe ff       	jmp    c0000834 <strcpy>
c0014547:	90                   	nop

c0014548 <Device::Device(char const*)>:
c0014548:	83 ec 1c             	sub    esp,0x1c
c001454b:	ba b8 ad 02 c0       	mov    edx,0xc002adb8
c0014550:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014554:	89 10                	mov    DWORD PTR [eax],edx
c0014556:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001455a:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0014564:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014568:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014572:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014576:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014580:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014584:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001458e:	83 ec 08             	sub    esp,0x8
c0014591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014595:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014599:	e8 9c ff ff ff       	call   c001453a <Device::setName(char const*)>
c001459e:	83 c4 10             	add    esp,0x10
c00145a1:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c00145a9:	83 ec 0c             	sub    esp,0xc
c00145ac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145b0:	e8 8b b2 ff ff       	call   c000f840 <malloc>
c00145b5:	83 c4 10             	add    esp,0x10
c00145b8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00145be:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00145c5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00145c9:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00145cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145d3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00145d9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00145df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145e3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00145e9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00145f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145f4:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00145fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145ff:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0014606:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001460a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014614:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014618:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014622:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014626:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014630:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014634:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c001463e:	90                   	nop
c001463f:	83 c4 1c             	add    esp,0x1c
c0014642:	c3                   	ret    
c0014643:	90                   	nop

c0014644 <Device::getName()>:
c0014644:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014648:	05 d0 00 00 00       	add    eax,0xd0
c001464d:	c3                   	ret    

c001464e <DriverlessDevice::DriverlessDevice(char const*)>:
c001464e:	83 ec 0c             	sub    esp,0xc
c0014651:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014655:	83 ec 08             	sub    esp,0x8
c0014658:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001465c:	50                   	push   eax
c001465d:	e8 e6 fe ff ff       	call   c0014548 <Device::Device(char const*)>
c0014662:	83 c4 10             	add    esp,0x10
c0014665:	ba e4 ad 02 c0       	mov    edx,0xc002ade4
c001466a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001466e:	89 10                	mov    DWORD PTR [eax],edx
c0014670:	90                   	nop
c0014671:	83 c4 0c             	add    esp,0xc
c0014674:	c3                   	ret    
c0014675:	90                   	nop

c0014676 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0014676:	57                   	push   edi
c0014677:	56                   	push   esi
c0014678:	53                   	push   ebx
c0014679:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001467d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014681:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014685:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001468b:	75 0c                	jne    c0014699 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001468d:	52                   	push   edx
c001468e:	52                   	push   edx
c001468f:	53                   	push   ebx
c0014690:	56                   	push   esi
c0014691:	e8 94 42 01 00       	call   c002892a <LinkedList<Device>::addElement(Device*)>
c0014696:	83 c4 10             	add    esp,0x10
c0014699:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001469f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00146a2:	74 12                	je     c00146b6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c00146a4:	50                   	push   eax
c00146a5:	57                   	push   edi
c00146a6:	56                   	push   esi
c00146a7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00146aa:	e8 c7 ff ff ff       	call   c0014676 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00146af:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00146b1:	83 c4 10             	add    esp,0x10
c00146b4:	eb e9                	jmp    c001469f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00146b6:	5b                   	pop    ebx
c00146b7:	5e                   	pop    esi
c00146b8:	5f                   	pop    edi
c00146b9:	c3                   	ret    

c00146ba <getDevicesOfType(DeviceType)>:
c00146ba:	53                   	push   ebx
c00146bb:	83 ec 14             	sub    esp,0x14
c00146be:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00146c2:	53                   	push   ebx
c00146c3:	e8 3e 43 01 00       	call   c0028a06 <LinkedList<Device>::LinkedList()>
c00146c8:	83 c4 0c             	add    esp,0xc
c00146cb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00146cf:	53                   	push   ebx
c00146d0:	ff 35 c8 e5 02 c0    	push   DWORD PTR ds:0xc002e5c8
c00146d6:	e8 9b ff ff ff       	call   c0014676 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00146db:	89 d8                	mov    eax,ebx
c00146dd:	83 c4 18             	add    esp,0x18
c00146e0:	5b                   	pop    ebx
c00146e1:	c2 04 00             	ret    0x4

c00146e4 <HardDiskController::HardDiskController(char const*)>:
c00146e4:	83 ec 0c             	sub    esp,0xc
c00146e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146eb:	83 ec 08             	sub    esp,0x8
c00146ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146f2:	50                   	push   eax
c00146f3:	e8 50 fe ff ff       	call   c0014548 <Device::Device(char const*)>
c00146f8:	83 c4 10             	add    esp,0x10
c00146fb:	ba 10 ae 02 c0       	mov    edx,0xc002ae10
c0014700:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014704:	89 10                	mov    DWORD PTR [eax],edx
c0014706:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001470a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0014714:	90                   	nop
c0014715:	83 c4 0c             	add    esp,0xc
c0014718:	c3                   	ret    
c0014719:	90                   	nop

c001471a <HardDiskController::~HardDiskController()>:
c001471a:	83 ec 0c             	sub    esp,0xc
c001471d:	ba 10 ae 02 c0       	mov    edx,0xc002ae10
c0014722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014726:	89 10                	mov    DWORD PTR [eax],edx
c0014728:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001472c:	83 ec 0c             	sub    esp,0xc
c001472f:	50                   	push   eax
c0014730:	e8 f5 fa ff ff       	call   c001422a <Device::~Device()>
c0014735:	83 c4 10             	add    esp,0x10
c0014738:	90                   	nop
c0014739:	83 c4 0c             	add    esp,0xc
c001473c:	c3                   	ret    
c001473d:	90                   	nop

c001473e <HardDiskController::~HardDiskController()>:
c001473e:	83 ec 0c             	sub    esp,0xc
c0014741:	83 ec 0c             	sub    esp,0xc
c0014744:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014748:	e8 cd ff ff ff       	call   c001471a <HardDiskController::~HardDiskController()>
c001474d:	83 c4 10             	add    esp,0x10
c0014750:	83 ec 08             	sub    esp,0x8
c0014753:	68 58 01 00 00       	push   0x158
c0014758:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001475c:	e8 f0 e6 ff ff       	call   c0012e51 <operator delete(void*, unsigned long)>
c0014761:	83 c4 10             	add    esp,0x10
c0014764:	83 c4 0c             	add    esp,0xc
c0014767:	c3                   	ret    

c0014768 <PhysicalDisk::eject()>:
c0014768:	83 ec 18             	sub    esp,0x18
c001476b:	68 34 ae 02 c0       	push   0xc002ae34
c0014770:	e8 bc e7 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0014775:	83 c8 ff             	or     eax,0xffffffff
c0014778:	83 c4 1c             	add    esp,0x1c
c001477b:	c3                   	ret    

c001477c <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001477c:	83 ec 0c             	sub    esp,0xc
c001477f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014783:	83 ec 08             	sub    esp,0x8
c0014786:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001478a:	50                   	push   eax
c001478b:	e8 b8 fd ff ff       	call   c0014548 <Device::Device(char const*)>
c0014790:	83 c4 10             	add    esp,0x10
c0014793:	ba 64 ae 02 c0       	mov    edx,0xc002ae64
c0014798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001479c:	89 10                	mov    DWORD PTR [eax],edx
c001479e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147a2:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00147a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147ad:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c00147b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147b8:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00147c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147c6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00147ca:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00147d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147d4:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00147de:	90                   	nop
c00147df:	83 c4 0c             	add    esp,0xc
c00147e2:	c3                   	ret    
c00147e3:	90                   	nop

c00147e4 <PhysicalDisk::startCache()>:
c00147e4:	56                   	push   esi
c00147e5:	53                   	push   ebx
c00147e6:	83 ec 10             	sub    esp,0x10
c00147e9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00147ed:	6a 44                	push   0x44
c00147ef:	e8 4c b0 ff ff       	call   c000f840 <malloc>
c00147f4:	89 c6                	mov    esi,eax
c00147f6:	58                   	pop    eax
c00147f7:	5a                   	pop    edx
c00147f8:	53                   	push   ebx
c00147f9:	56                   	push   esi
c00147fa:	e8 39 27 00 00       	call   c0016f38 <VCache::VCache(PhysicalDisk*)>
c00147ff:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0014805:	83 c4 14             	add    esp,0x14
c0014808:	5b                   	pop    ebx
c0014809:	5e                   	pop    esi
c001480a:	c3                   	ret    
c001480b:	90                   	nop

c001480c <PhysicalDisk::~PhysicalDisk()>:
c001480c:	83 ec 0c             	sub    esp,0xc
c001480f:	ba 64 ae 02 c0       	mov    edx,0xc002ae64
c0014814:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014818:	89 10                	mov    DWORD PTR [eax],edx
c001481a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001481e:	83 ec 0c             	sub    esp,0xc
c0014821:	50                   	push   eax
c0014822:	e8 03 fa ff ff       	call   c001422a <Device::~Device()>
c0014827:	83 c4 10             	add    esp,0x10
c001482a:	90                   	nop
c001482b:	83 c4 0c             	add    esp,0xc
c001482e:	c3                   	ret    
c001482f:	90                   	nop

c0014830 <PhysicalDisk::~PhysicalDisk()>:
c0014830:	83 ec 0c             	sub    esp,0xc
c0014833:	83 ec 0c             	sub    esp,0xc
c0014836:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001483a:	e8 cd ff ff ff       	call   c001480c <PhysicalDisk::~PhysicalDisk()>
c001483f:	83 c4 10             	add    esp,0x10
c0014842:	83 ec 08             	sub    esp,0x8
c0014845:	68 6c 01 00 00       	push   0x16c
c001484a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001484e:	e8 fe e5 ff ff       	call   c0012e51 <operator delete(void*, unsigned long)>
c0014853:	83 c4 10             	add    esp,0x10
c0014856:	83 c4 0c             	add    esp,0xc
c0014859:	c3                   	ret    

c001485a <FPU::FPU(char const*)>:
c001485a:	83 ec 0c             	sub    esp,0xc
c001485d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014861:	83 ec 08             	sub    esp,0x8
c0014864:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014868:	50                   	push   eax
c0014869:	e8 da fc ff ff       	call   c0014548 <Device::Device(char const*)>
c001486e:	83 c4 10             	add    esp,0x10
c0014871:	ba a8 ae 02 c0       	mov    edx,0xc002aea8
c0014876:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001487a:	89 10                	mov    DWORD PTR [eax],edx
c001487c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014880:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001488a:	90                   	nop
c001488b:	83 c4 0c             	add    esp,0xc
c001488e:	c3                   	ret    
c001488f:	90                   	nop

c0014890 <FPU::~FPU()>:
c0014890:	83 ec 0c             	sub    esp,0xc
c0014893:	ba a8 ae 02 c0       	mov    edx,0xc002aea8
c0014898:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001489c:	89 10                	mov    DWORD PTR [eax],edx
c001489e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148a2:	83 ec 0c             	sub    esp,0xc
c00148a5:	50                   	push   eax
c00148a6:	e8 7f f9 ff ff       	call   c001422a <Device::~Device()>
c00148ab:	83 c4 10             	add    esp,0x10
c00148ae:	90                   	nop
c00148af:	83 c4 0c             	add    esp,0xc
c00148b2:	c3                   	ret    
c00148b3:	90                   	nop

c00148b4 <FPU::~FPU()>:
c00148b4:	83 ec 0c             	sub    esp,0xc
c00148b7:	83 ec 0c             	sub    esp,0xc
c00148ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148be:	e8 cd ff ff ff       	call   c0014890 <FPU::~FPU()>
c00148c3:	83 c4 10             	add    esp,0x10
c00148c6:	83 ec 08             	sub    esp,0x8
c00148c9:	68 58 01 00 00       	push   0x158
c00148ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148d2:	e8 7a e5 ff ff       	call   c0012e51 <operator delete(void*, unsigned long)>
c00148d7:	83 c4 10             	add    esp,0x10
c00148da:	83 c4 0c             	add    esp,0xc
c00148dd:	c3                   	ret    

c00148de <setupFPU()>:
c00148de:	53                   	push   ebx
c00148df:	83 ec 08             	sub    esp,0x8
c00148e2:	8b 15 c8 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5c8
c00148e8:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00148ef:	74 19                	je     c001490a <setupFPU()+0x2c>
c00148f1:	83 ec 0c             	sub    esp,0xc
c00148f4:	68 58 01 00 00       	push   0x158
c00148f9:	e8 42 af ff ff       	call   c000f840 <malloc>
c00148fe:	89 c3                	mov    ebx,eax
c0014900:	89 04 24             	mov    DWORD PTR [esp],eax
c0014903:	e8 66 0c 01 00       	call   c002556e <AVX::AVX()>
c0014908:	eb 5b                	jmp    c0014965 <setupFPU()+0x87>
c001490a:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014910:	84 c0                	test   al,al
c0014912:	79 19                	jns    c001492d <setupFPU()+0x4f>
c0014914:	83 ec 0c             	sub    esp,0xc
c0014917:	68 58 01 00 00       	push   0x158
c001491c:	e8 1f af ff ff       	call   c000f840 <malloc>
c0014921:	89 c3                	mov    ebx,eax
c0014923:	89 04 24             	mov    DWORD PTR [esp],eax
c0014926:	e8 69 0d 01 00       	call   c0025694 <SSE::SSE()>
c001492b:	eb 38                	jmp    c0014965 <setupFPU()+0x87>
c001492d:	a8 20                	test   al,0x20
c001492f:	74 19                	je     c001494a <setupFPU()+0x6c>
c0014931:	83 ec 0c             	sub    esp,0xc
c0014934:	68 58 01 00 00       	push   0x158
c0014939:	e8 02 af ff ff       	call   c000f840 <malloc>
c001493e:	89 c3                	mov    ebx,eax
c0014940:	89 04 24             	mov    DWORD PTR [esp],eax
c0014943:	e8 b6 0c 01 00       	call   c00255fe <MMX::MMX()>
c0014948:	eb 1b                	jmp    c0014965 <setupFPU()+0x87>
c001494a:	a8 10                	test   al,0x10
c001494c:	74 1c                	je     c001496a <setupFPU()+0x8c>
c001494e:	83 ec 0c             	sub    esp,0xc
c0014951:	68 58 01 00 00       	push   0x158
c0014956:	e8 e5 ae ff ff       	call   c000f840 <malloc>
c001495b:	89 c3                	mov    ebx,eax
c001495d:	89 04 24             	mov    DWORD PTR [esp],eax
c0014960:	e8 bd 0d 01 00       	call   c0025722 <x87::x87()>
c0014965:	83 c4 10             	add    esp,0x10
c0014968:	eb 24                	jmp    c001498e <setupFPU()+0xb0>
c001496a:	83 e0 ef             	and    eax,0xffffffef
c001496d:	83 ec 0c             	sub    esp,0xc
c0014970:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014976:	68 94 ae 02 c0       	push   0xc002ae94
c001497b:	e8 b1 e5 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0014980:	0f 20 c0             	mov    eax,cr0
c0014983:	83 c8 04             	or     eax,0x4
c0014986:	0f 22 c0             	mov    cr0,eax
c0014989:	31 db                	xor    ebx,ebx
c001498b:	83 c4 10             	add    esp,0x10
c001498e:	89 d8                	mov    eax,ebx
c0014990:	83 c4 08             	add    esp,0x8
c0014993:	5b                   	pop    ebx
c0014994:	c3                   	ret    
c0014995:	90                   	nop

c0014996 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014996:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001499a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001499e:	c1 e0 04             	shl    eax,0x4
c00149a1:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00149a5:	8d 50 10             	lea    edx,[eax+0x10]
c00149a8:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c00149ae:	74 08                	je     c00149b8 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c00149b0:	83 c0 04             	add    eax,0x4
c00149b3:	39 d0                	cmp    eax,edx
c00149b5:	75 f1                	jne    c00149a8 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c00149b7:	c3                   	ret    
c00149b8:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00149c2:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00149cc:	eb e2                	jmp    c00149b0 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00149ce <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00149ce:	57                   	push   edi
c00149cf:	31 c0                	xor    eax,eax
c00149d1:	56                   	push   esi
c00149d2:	53                   	push   ebx
c00149d3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00149d7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00149db:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00149df:	89 da                	mov    edx,ebx
c00149e1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00149e5:	c1 e2 04             	shl    edx,0x4
c00149e8:	01 ca                	add    edx,ecx
c00149ea:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00149f2:	74 16                	je     c0014a0a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00149f4:	40                   	inc    eax
c00149f5:	83 f8 04             	cmp    eax,0x4
c00149f8:	75 f0                	jne    c00149ea <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00149fa:	c7 44 24 10 d8 ae 02 c0 	mov    DWORD PTR [esp+0x10],0xc002aed8
c0014a02:	5b                   	pop    ebx
c0014a03:	5e                   	pop    esi
c0014a04:	5f                   	pop    edi
c0014a05:	e9 d9 5b 00 00       	jmp    c001a5e3 <Krnl::panic(char const*)>
c0014a0a:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014a0d:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014a10:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014a16:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014a1c:	5b                   	pop    ebx
c0014a1d:	5e                   	pop    esi
c0014a1e:	5f                   	pop    edi
c0014a1f:	c3                   	ret    

c0014a20 <doubleFault(regs*, void*)>:
c0014a20:	55                   	push   ebp
c0014a21:	89 e5                	mov    ebp,esp
c0014a23:	83 ec 08             	sub    esp,0x8
c0014a26:	83 ec 0c             	sub    esp,0xc
c0014a29:	68 13 af 02 c0       	push   0xc002af13
c0014a2e:	e8 b0 5b 00 00       	call   c001a5e3 <Krnl::panic(char const*)>
c0014a33:	83 c4 10             	add    esp,0x10
c0014a36:	90                   	nop
c0014a37:	c9                   	leave  
c0014a38:	c3                   	ret    
c0014a39:	90                   	nop

c0014a3a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014a3a:	56                   	push   esi
c0014a3b:	53                   	push   ebx
c0014a3c:	50                   	push   eax
c0014a3d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014a41:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014a45:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014a4a:	75 35                	jne    c0014a81 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014a4c:	8d 43 20             	lea    eax,[ebx+0x20]
c0014a4f:	31 d2                	xor    edx,edx
c0014a51:	89 c1                	mov    ecx,eax
c0014a53:	c1 e1 04             	shl    ecx,0x4
c0014a56:	01 f1                	add    ecx,esi
c0014a58:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014a60:	74 3e                	je     c0014aa0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014a62:	42                   	inc    edx
c0014a63:	83 fa 04             	cmp    edx,0x4
c0014a66:	75 f0                	jne    c0014a58 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014a68:	83 ec 0c             	sub    esp,0xc
c0014a6b:	68 58 af 02 c0       	push   0xc002af58
c0014a70:	e8 6e 5b 00 00       	call   c001a5e3 <Krnl::panic(char const*)>
c0014a75:	83 c4 10             	add    esp,0x10
c0014a78:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014a7d:	5a                   	pop    edx
c0014a7e:	5b                   	pop    ebx
c0014a7f:	5e                   	pop    esi
c0014a80:	c3                   	ret    
c0014a81:	83 ec 0c             	sub    esp,0xc
c0014a84:	56                   	push   esi
c0014a85:	e8 ba fb ff ff       	call   c0014644 <Device::getName()>
c0014a8a:	83 c4 10             	add    esp,0x10
c0014a8d:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014a90:	75 ba                	jne    c0014a4c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a92:	83 fb 0f             	cmp    ebx,0xf
c0014a95:	7f 29                	jg     c0014ac0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014a97:	0f b6 9b 20 d8 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd27e0]
c0014a9e:	eb ac                	jmp    c0014a4c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014aa0:	8d 04 82             	lea    eax,[edx+eax*4]
c0014aa3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014aa7:	8d 04 86             	lea    eax,[esi+eax*4]
c0014aaa:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014ab0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014ab4:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014aba:	89 d8                	mov    eax,ebx
c0014abc:	5a                   	pop    edx
c0014abd:	5b                   	pop    ebx
c0014abe:	5e                   	pop    esi
c0014abf:	c3                   	ret    
c0014ac0:	83 ec 0c             	sub    esp,0xc
c0014ac3:	68 20 af 02 c0       	push   0xc002af20
c0014ac8:	e8 16 5b 00 00       	call   c001a5e3 <Krnl::panic(char const*)>
c0014acd:	83 c4 10             	add    esp,0x10
c0014ad0:	e9 77 ff ff ff       	jmp    c0014a4c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014ad5:	90                   	nop

c0014ad6 <InterruptController::clearAllHandlers(int, bool)>:
c0014ad6:	56                   	push   esi
c0014ad7:	53                   	push   ebx
c0014ad8:	52                   	push   edx
c0014ad9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014add:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014ae1:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014ae6:	75 61                	jne    c0014b49 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014ae8:	8d 46 20             	lea    eax,[esi+0x20]
c0014aeb:	c1 e6 04             	shl    esi,0x4
c0014aee:	c1 e0 04             	shl    eax,0x4
c0014af1:	01 de                	add    esi,ebx
c0014af3:	01 d8                	add    eax,ebx
c0014af5:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014aff:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014b09:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014b13:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014b1d:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014b27:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014b31:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014b3b:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014b45:	58                   	pop    eax
c0014b46:	5b                   	pop    ebx
c0014b47:	5e                   	pop    esi
c0014b48:	c3                   	ret    
c0014b49:	83 ec 0c             	sub    esp,0xc
c0014b4c:	53                   	push   ebx
c0014b4d:	e8 f2 fa ff ff       	call   c0014644 <Device::getName()>
c0014b52:	83 c4 10             	add    esp,0x10
c0014b55:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014b58:	75 8e                	jne    c0014ae8 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b5a:	83 fe 0f             	cmp    esi,0xf
c0014b5d:	7f 09                	jg     c0014b68 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014b5f:	0f b6 b6 20 d8 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd27e0]
c0014b66:	eb 80                	jmp    c0014ae8 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b68:	83 ec 0c             	sub    esp,0xc
c0014b6b:	68 94 af 02 c0       	push   0xc002af94
c0014b70:	e8 6e 5a 00 00       	call   c001a5e3 <Krnl::panic(char const*)>
c0014b75:	83 c4 10             	add    esp,0x10
c0014b78:	e9 6b ff ff ff       	jmp    c0014ae8 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b7d:	90                   	nop

c0014b7e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014b7e:	56                   	push   esi
c0014b7f:	53                   	push   ebx
c0014b80:	52                   	push   edx
c0014b81:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014b85:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014b89:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014b8e:	75 3a                	jne    c0014bca <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014b90:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b94:	8d 50 20             	lea    edx,[eax+0x20]
c0014b97:	c1 e2 04             	shl    edx,0x4
c0014b9a:	8d 04 16             	lea    eax,[esi+edx*1]
c0014b9d:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014ba1:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014ba7:	74 0b                	je     c0014bb4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014ba9:	83 c0 04             	add    eax,0x4
c0014bac:	39 d0                	cmp    eax,edx
c0014bae:	75 f1                	jne    c0014ba1 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014bb0:	58                   	pop    eax
c0014bb1:	5b                   	pop    ebx
c0014bb2:	5e                   	pop    esi
c0014bb3:	c3                   	ret    
c0014bb4:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014bbe:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014bc8:	eb df                	jmp    c0014ba9 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014bca:	83 ec 0c             	sub    esp,0xc
c0014bcd:	56                   	push   esi
c0014bce:	e8 71 fa ff ff       	call   c0014644 <Device::getName()>
c0014bd3:	83 c4 10             	add    esp,0x10
c0014bd6:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014bd9:	75 b5                	jne    c0014b90 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014bdb:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014be0:	7f 11                	jg     c0014bf3 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014be2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014be6:	0f b6 80 20 d8 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd27e0]
c0014bed:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014bf1:	eb 9d                	jmp    c0014b90 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014bf3:	83 ec 0c             	sub    esp,0xc
c0014bf6:	68 94 af 02 c0       	push   0xc002af94
c0014bfb:	e8 e3 59 00 00       	call   c001a5e3 <Krnl::panic(char const*)>
c0014c00:	83 c4 10             	add    esp,0x10
c0014c03:	eb 8b                	jmp    c0014b90 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014c05 <nmiHandler(regs*, void*)>:
c0014c05:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0014c0a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014c0e:	e9 79 a3 ff ff       	jmp    c000ef8c <Computer::handleNMI()>

c0014c13 <int_handler>:
c0014c13:	55                   	push   ebp
c0014c14:	57                   	push   edi
c0014c15:	56                   	push   esi
c0014c16:	53                   	push   ebx
c0014c17:	83 ec 0c             	sub    esp,0xc
c0014c1a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014c1e:	80 3d 24 11 03 c0 00 	cmp    BYTE PTR ds:0xc0031124,0x0
c0014c25:	74 0b                	je     c0014c32 <int_handler+0x1f>
c0014c27:	fa                   	cli    
c0014c28:	f4                   	hlt    
c0014c29:	80 3d 24 11 03 c0 00 	cmp    BYTE PTR ds:0xc0031124,0x0
c0014c30:	75 f5                	jne    c0014c27 <int_handler+0x14>
c0014c32:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0014c37:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014c3a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014c40:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014c46:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014c49:	83 f8 17             	cmp    eax,0x17
c0014c4c:	77 13                	ja     c0014c61 <int_handler+0x4e>
c0014c4e:	83 ec 08             	sub    esp,0x8
c0014c51:	8b 17                	mov    edx,DWORD PTR [edi]
c0014c53:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014c56:	0f b6 c0             	movzx  eax,al
c0014c59:	50                   	push   eax
c0014c5a:	57                   	push   edi
c0014c5b:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014c5e:	83 c4 10             	add    esp,0x10
c0014c61:	83 c3 15             	add    ebx,0x15
c0014c64:	c1 e3 04             	shl    ebx,0x4
c0014c67:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014c6b:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014c72:	31 db                	xor    ebx,ebx
c0014c74:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014c78:	85 c0                	test   eax,eax
c0014c7a:	74 13                	je     c0014c8f <int_handler+0x7c>
c0014c7c:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014c7f:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014c83:	74 1c                	je     c0014ca1 <int_handler+0x8e>
c0014c85:	83 ec 08             	sub    esp,0x8
c0014c88:	52                   	push   edx
c0014c89:	56                   	push   esi
c0014c8a:	ff d0                	call   eax
c0014c8c:	83 c4 10             	add    esp,0x10
c0014c8f:	43                   	inc    ebx
c0014c90:	83 fb 04             	cmp    ebx,0x4
c0014c93:	75 df                	jne    c0014c74 <int_handler+0x61>
c0014c95:	83 c4 0c             	add    esp,0xc
c0014c98:	31 c0                	xor    eax,eax
c0014c9a:	5b                   	pop    ebx
c0014c9b:	31 d2                	xor    edx,edx
c0014c9d:	5e                   	pop    esi
c0014c9e:	5f                   	pop    edi
c0014c9f:	5d                   	pop    ebp
c0014ca0:	c3                   	ret    
c0014ca1:	83 ec 08             	sub    esp,0x8
c0014ca4:	52                   	push   edx
c0014ca5:	56                   	push   esi
c0014ca6:	ff d0                	call   eax
c0014ca8:	83 c4 10             	add    esp,0x10
c0014cab:	83 c4 0c             	add    esp,0xc
c0014cae:	5b                   	pop    ebx
c0014caf:	5e                   	pop    esi
c0014cb0:	5f                   	pop    edi
c0014cb1:	5d                   	pop    ebp
c0014cb2:	c3                   	ret    
c0014cb3:	90                   	nop

c0014cb4 <InterruptController::InterruptController(char const*)>:
c0014cb4:	83 ec 1c             	sub    esp,0x1c
c0014cb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cbb:	83 ec 08             	sub    esp,0x8
c0014cbe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014cc2:	50                   	push   eax
c0014cc3:	e8 80 f8 ff ff       	call   c0014548 <Device::Device(char const*)>
c0014cc8:	83 c4 10             	add    esp,0x10
c0014ccb:	ba 3c b2 02 c0       	mov    edx,0xc002b23c
c0014cd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cd4:	89 10                	mov    DWORD PTR [eax],edx
c0014cd6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cda:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014ce4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014cec:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014cf4:	7f 5e                	jg     c0014d54 <InterruptController::InterruptController(char const*)+0xa0>
c0014cf6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014cfe:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014d03:	7f 49                	jg     c0014d4e <InterruptController::InterruptController(char const*)+0x9a>
c0014d05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d09:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014d0d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014d14:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014d18:	01 ca                	add    edx,ecx
c0014d1a:	83 c2 54             	add    edx,0x54
c0014d1d:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014d25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d29:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014d2d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014d34:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014d38:	01 ca                	add    edx,ecx
c0014d3a:	81 c2 54 04 00 00    	add    edx,0x454
c0014d40:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014d48:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014d4c:	eb b0                	jmp    c0014cfe <InterruptController::InterruptController(char const*)+0x4a>
c0014d4e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014d52:	eb 98                	jmp    c0014cec <InterruptController::InterruptController(char const*)+0x38>
c0014d54:	90                   	nop
c0014d55:	83 c4 1c             	add    esp,0x1c
c0014d58:	c3                   	ret    
c0014d59:	90                   	nop

c0014d5a <InterruptController::~InterruptController()>:
c0014d5a:	83 ec 0c             	sub    esp,0xc
c0014d5d:	ba 3c b2 02 c0       	mov    edx,0xc002b23c
c0014d62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d66:	89 10                	mov    DWORD PTR [eax],edx
c0014d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d6c:	83 ec 0c             	sub    esp,0xc
c0014d6f:	50                   	push   eax
c0014d70:	e8 b5 f4 ff ff       	call   c001422a <Device::~Device()>
c0014d75:	83 c4 10             	add    esp,0x10
c0014d78:	90                   	nop
c0014d79:	83 c4 0c             	add    esp,0xc
c0014d7c:	c3                   	ret    
c0014d7d:	90                   	nop

c0014d7e <InterruptController::~InterruptController()>:
c0014d7e:	83 ec 0c             	sub    esp,0xc
c0014d81:	83 ec 0c             	sub    esp,0xc
c0014d84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d88:	e8 cd ff ff ff       	call   c0014d5a <InterruptController::~InterruptController()>
c0014d8d:	83 c4 10             	add    esp,0x10
c0014d90:	83 ec 08             	sub    esp,0x8
c0014d93:	68 58 21 00 00       	push   0x2158
c0014d98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d9c:	e8 b0 e0 ff ff       	call   c0012e51 <operator delete(void*, unsigned long)>
c0014da1:	83 c4 10             	add    esp,0x10
c0014da4:	83 c4 0c             	add    esp,0xc
c0014da7:	c3                   	ret    

c0014da8 <displayDebugInfo(regs*)>:
c0014da8:	55                   	push   ebp
c0014da9:	57                   	push   edi
c0014daa:	56                   	push   esi
c0014dab:	53                   	push   ebx
c0014dac:	83 ec 24             	sub    esp,0x24
c0014daf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014db3:	0f 20 c2             	mov    edx,cr0
c0014db6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014dba:	0f 20 d7             	mov    edi,cr2
c0014dbd:	0f 20 de             	mov    esi,cr3
c0014dc0:	0f 20 e5             	mov    ebp,cr4
c0014dc3:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014dc6:	68 ce af 02 c0       	push   0xc002afce
c0014dcb:	e8 61 e1 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0014dd0:	59                   	pop    ecx
c0014dd1:	58                   	pop    eax
c0014dd2:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014dd5:	68 d9 af 02 c0       	push   0xc002afd9
c0014dda:	e8 52 e1 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0014ddf:	58                   	pop    eax
c0014de0:	5a                   	pop    edx
c0014de1:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014de4:	68 e4 af 02 c0       	push   0xc002afe4
c0014de9:	e8 43 e1 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0014dee:	59                   	pop    ecx
c0014def:	58                   	pop    eax
c0014df0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014df3:	68 ef af 02 c0       	push   0xc002afef
c0014df8:	e8 34 e1 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0014dfd:	58                   	pop    eax
c0014dfe:	5a                   	pop    edx
c0014dff:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014e02:	68 fa af 02 c0       	push   0xc002affa
c0014e07:	e8 25 e1 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0014e0c:	59                   	pop    ecx
c0014e0d:	58                   	pop    eax
c0014e0e:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014e11:	68 05 b0 02 c0       	push   0xc002b005
c0014e16:	e8 16 e1 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0014e1b:	58                   	pop    eax
c0014e1c:	5a                   	pop    edx
c0014e1d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014e20:	68 10 b0 02 c0       	push   0xc002b010
c0014e25:	e8 07 e1 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0014e2a:	59                   	pop    ecx
c0014e2b:	58                   	pop    eax
c0014e2c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014e2f:	68 1b b0 02 c0       	push   0xc002b01b
c0014e34:	e8 f8 e0 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0014e39:	58                   	pop    eax
c0014e3a:	5a                   	pop    edx
c0014e3b:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014e3e:	68 26 b0 02 c0       	push   0xc002b026
c0014e43:	e8 e9 e0 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0014e48:	59                   	pop    ecx
c0014e49:	58                   	pop    eax
c0014e4a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014e4d:	68 35 b0 02 c0       	push   0xc002b035
c0014e52:	e8 da e0 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0014e57:	58                   	pop    eax
c0014e58:	5a                   	pop    edx
c0014e59:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014e5c:	68 40 b0 02 c0       	push   0xc002b040
c0014e61:	e8 cb e0 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0014e66:	59                   	pop    ecx
c0014e67:	58                   	pop    eax
c0014e68:	57                   	push   edi
c0014e69:	68 4b b0 02 c0       	push   0xc002b04b
c0014e6e:	e8 be e0 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0014e73:	58                   	pop    eax
c0014e74:	5a                   	pop    edx
c0014e75:	56                   	push   esi
c0014e76:	68 56 b0 02 c0       	push   0xc002b056
c0014e7b:	e8 b1 e0 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0014e80:	59                   	pop    ecx
c0014e81:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014e86:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e8c:	e8 b8 be ff ff       	call   c0010d49 <setActiveTerminal(VgaText*)>
c0014e91:	58                   	pop    eax
c0014e92:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014e95:	5a                   	pop    edx
c0014e96:	c1 e0 05             	shl    eax,0x5
c0014e99:	05 80 d5 02 c0       	add    eax,0xc002d580
c0014e9e:	50                   	push   eax
c0014e9f:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014ea4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014eaa:	e8 b9 c2 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c0014eaf:	59                   	pop    ecx
c0014eb0:	58                   	pop    eax
c0014eb1:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014eb6:	68 61 b0 02 c0       	push   0xc002b061
c0014ebb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ec1:	e8 a2 c2 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c0014ec6:	58                   	pop    eax
c0014ec7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ecc:	5a                   	pop    edx
c0014ecd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014ed0:	83 c0 0c             	add    eax,0xc
c0014ed3:	50                   	push   eax
c0014ed4:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014ed9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014edf:	e8 84 c2 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c0014ee4:	59                   	pop    ecx
c0014ee5:	58                   	pop    eax
c0014ee6:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014eeb:	68 6a b0 02 c0       	push   0xc002b06a
c0014ef0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ef6:	e8 6d c2 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c0014efb:	58                   	pop    eax
c0014efc:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014f01:	5a                   	pop    edx
c0014f02:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014f05:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f0b:	e8 7e c2 ff ff       	call   c001118e <VgaText::putx(unsigned int)>
c0014f10:	59                   	pop    ecx
c0014f11:	58                   	pop    eax
c0014f12:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014f17:	68 72 b0 02 c0       	push   0xc002b072
c0014f1c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f22:	e8 41 c2 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c0014f27:	58                   	pop    eax
c0014f28:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014f2d:	5a                   	pop    edx
c0014f2e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014f31:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f37:	e8 52 c2 ff ff       	call   c001118e <VgaText::putx(unsigned int)>
c0014f3c:	59                   	pop    ecx
c0014f3d:	58                   	pop    eax
c0014f3e:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014f43:	68 7a b0 02 c0       	push   0xc002b07a
c0014f48:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f4e:	e8 15 c2 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c0014f53:	58                   	pop    eax
c0014f54:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014f59:	5a                   	pop    edx
c0014f5a:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014f5d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f63:	e8 26 c2 ff ff       	call   c001118e <VgaText::putx(unsigned int)>
c0014f68:	59                   	pop    ecx
c0014f69:	58                   	pop    eax
c0014f6a:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014f6f:	68 82 b0 02 c0       	push   0xc002b082
c0014f74:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f7a:	e8 e9 c1 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c0014f7f:	58                   	pop    eax
c0014f80:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014f85:	5a                   	pop    edx
c0014f86:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014f89:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f8f:	e8 fa c1 ff ff       	call   c001118e <VgaText::putx(unsigned int)>
c0014f94:	59                   	pop    ecx
c0014f95:	58                   	pop    eax
c0014f96:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014f9b:	68 8a b0 02 c0       	push   0xc002b08a
c0014fa0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fa6:	e8 bd c1 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c0014fab:	58                   	pop    eax
c0014fac:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014fb1:	5a                   	pop    edx
c0014fb2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014fb5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fbb:	e8 ce c1 ff ff       	call   c001118e <VgaText::putx(unsigned int)>
c0014fc0:	59                   	pop    ecx
c0014fc1:	58                   	pop    eax
c0014fc2:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014fc7:	68 92 b0 02 c0       	push   0xc002b092
c0014fcc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fd2:	e8 91 c1 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c0014fd7:	58                   	pop    eax
c0014fd8:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014fdd:	5a                   	pop    edx
c0014fde:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014fe1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fe7:	e8 a2 c1 ff ff       	call   c001118e <VgaText::putx(unsigned int)>
c0014fec:	59                   	pop    ecx
c0014fed:	58                   	pop    eax
c0014fee:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014ff3:	68 9a b0 02 c0       	push   0xc002b09a
c0014ff8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ffe:	e8 65 c1 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c0015003:	58                   	pop    eax
c0015004:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0015009:	5a                   	pop    edx
c001500a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001500e:	52                   	push   edx
c001500f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015015:	e8 74 c1 ff ff       	call   c001118e <VgaText::putx(unsigned int)>
c001501a:	59                   	pop    ecx
c001501b:	58                   	pop    eax
c001501c:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0015021:	68 a3 b0 02 c0       	push   0xc002b0a3
c0015026:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001502c:	e8 37 c1 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c0015031:	58                   	pop    eax
c0015032:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0015037:	5a                   	pop    edx
c0015038:	57                   	push   edi
c0015039:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001503f:	e8 4a c1 ff ff       	call   c001118e <VgaText::putx(unsigned int)>
c0015044:	59                   	pop    ecx
c0015045:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001504a:	5f                   	pop    edi
c001504b:	68 ab b0 02 c0       	push   0xc002b0ab
c0015050:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015056:	e8 0d c1 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c001505b:	58                   	pop    eax
c001505c:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0015061:	5a                   	pop    edx
c0015062:	56                   	push   esi
c0015063:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015069:	e8 20 c1 ff ff       	call   c001118e <VgaText::putx(unsigned int)>
c001506e:	59                   	pop    ecx
c001506f:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0015074:	5e                   	pop    esi
c0015075:	68 b3 b0 02 c0       	push   0xc002b0b3
c001507a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015080:	e8 e3 c0 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c0015085:	5f                   	pop    edi
c0015086:	58                   	pop    eax
c0015087:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001508c:	55                   	push   ebp
c001508d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015093:	e8 f6 c0 ff ff       	call   c001118e <VgaText::putx(unsigned int)>
c0015098:	58                   	pop    eax
c0015099:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001509e:	5a                   	pop    edx
c001509f:	68 bb b0 02 c0       	push   0xc002b0bb
c00150a4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150aa:	e8 b9 c0 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c00150af:	0f 21 c0             	mov    eax,db0
c00150b2:	59                   	pop    ecx
c00150b3:	5e                   	pop    esi
c00150b4:	50                   	push   eax
c00150b5:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c00150ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150c0:	e8 c9 c0 ff ff       	call   c001118e <VgaText::putx(unsigned int)>
c00150c5:	5f                   	pop    edi
c00150c6:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c00150cb:	5d                   	pop    ebp
c00150cc:	68 c4 b0 02 c0       	push   0xc002b0c4
c00150d1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150d7:	e8 8c c0 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c00150dc:	0f 21 c8             	mov    eax,db1
c00150df:	5a                   	pop    edx
c00150e0:	59                   	pop    ecx
c00150e1:	50                   	push   eax
c00150e2:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c00150e7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150ed:	e8 9c c0 ff ff       	call   c001118e <VgaText::putx(unsigned int)>
c00150f2:	5e                   	pop    esi
c00150f3:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c00150f8:	5f                   	pop    edi
c00150f9:	68 cc b0 02 c0       	push   0xc002b0cc
c00150fe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015104:	e8 5f c0 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c0015109:	0f 21 d0             	mov    eax,db2
c001510c:	5d                   	pop    ebp
c001510d:	5a                   	pop    edx
c001510e:	50                   	push   eax
c001510f:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0015114:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001511a:	e8 6f c0 ff ff       	call   c001118e <VgaText::putx(unsigned int)>
c001511f:	59                   	pop    ecx
c0015120:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0015125:	5e                   	pop    esi
c0015126:	68 d4 b0 02 c0       	push   0xc002b0d4
c001512b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015131:	e8 32 c0 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c0015136:	0f 21 d8             	mov    eax,db3
c0015139:	5f                   	pop    edi
c001513a:	5d                   	pop    ebp
c001513b:	50                   	push   eax
c001513c:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0015141:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015147:	e8 42 c0 ff ff       	call   c001118e <VgaText::putx(unsigned int)>
c001514c:	58                   	pop    eax
c001514d:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0015152:	5a                   	pop    edx
c0015153:	68 dc b0 02 c0       	push   0xc002b0dc
c0015158:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001515e:	e8 05 c0 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c0015163:	0f 21 f0             	mov    eax,db6
c0015166:	59                   	pop    ecx
c0015167:	5e                   	pop    esi
c0015168:	50                   	push   eax
c0015169:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001516e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015174:	e8 15 c0 ff ff       	call   c001118e <VgaText::putx(unsigned int)>
c0015179:	5f                   	pop    edi
c001517a:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001517f:	5d                   	pop    ebp
c0015180:	68 e4 b0 02 c0       	push   0xc002b0e4
c0015185:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001518b:	e8 d8 bf ff ff       	call   c0011168 <VgaText::puts(char const*)>
c0015190:	0f 21 f8             	mov    eax,db7
c0015193:	5a                   	pop    edx
c0015194:	59                   	pop    ecx
c0015195:	50                   	push   eax
c0015196:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001519b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151a1:	e8 e8 bf ff ff       	call   c001118e <VgaText::putx(unsigned int)>
c00151a6:	5e                   	pop    esi
c00151a7:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00151aa:	e8 60 85 00 00       	call   c001d70f <Thr::getDriverNameFromAddress(unsigned long)>
c00151af:	83 c4 10             	add    esp,0x10
c00151b2:	85 c0                	test   eax,eax
c00151b4:	74 7d                	je     c0015233 <displayDebugInfo(regs*)+0x48b>
c00151b6:	89 c6                	mov    esi,eax
c00151b8:	50                   	push   eax
c00151b9:	50                   	push   eax
c00151ba:	56                   	push   esi
c00151bb:	68 ec b0 02 c0       	push   0xc002b0ec
c00151c0:	e8 6c dd ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c00151c5:	5a                   	pop    edx
c00151c6:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c00151cb:	59                   	pop    ecx
c00151cc:	68 fa b0 02 c0       	push   0xc002b0fa
c00151d1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151d7:	e8 8c bf ff ff       	call   c0011168 <VgaText::puts(char const*)>
c00151dc:	5f                   	pop    edi
c00151dd:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c00151e2:	5d                   	pop    ebp
c00151e3:	56                   	push   esi
c00151e4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151ea:	e8 79 bf ff ff       	call   c0011168 <VgaText::puts(char const*)>
c00151ef:	58                   	pop    eax
c00151f0:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c00151f5:	5a                   	pop    edx
c00151f6:	68 06 b1 02 c0       	push   0xc002b106
c00151fb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015201:	e8 62 bf ff ff       	call   c0011168 <VgaText::puts(char const*)>
c0015206:	59                   	pop    ecx
c0015207:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001520c:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0015212:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015215:	e8 2c 85 00 00       	call   c001d746 <Thr::getDriverOffsetFromAddress(unsigned long)>
c001521a:	5b                   	pop    ebx
c001521b:	5d                   	pop    ebp
c001521c:	50                   	push   eax
c001521d:	57                   	push   edi
c001521e:	e8 6b bf ff ff       	call   c001118e <VgaText::putx(unsigned int)>
c0015223:	58                   	pop    eax
c0015224:	5a                   	pop    edx
c0015225:	56                   	push   esi
c0015226:	68 12 b1 02 c0       	push   0xc002b112
c001522b:	e8 01 dd ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0015230:	83 c4 10             	add    esp,0x10
c0015233:	fa                   	cli    
c0015234:	f4                   	hlt    
c0015235:	eb fe                	jmp    c0015235 <displayDebugInfo(regs*)+0x48d>

c0015237 <x87EmulHandler(regs*, void*)>:
c0015237:	53                   	push   ebx
c0015238:	83 ec 14             	sub    esp,0x14
c001523b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001523f:	53                   	push   ebx
c0015240:	e8 57 a8 00 00       	call   c001fa9c <Vm::x87Handler(regs*)>
c0015245:	83 c4 10             	add    esp,0x10
c0015248:	84 c0                	test   al,al
c001524a:	74 05                	je     c0015251 <x87EmulHandler(regs*, void*)+0x1a>
c001524c:	83 c4 08             	add    esp,0x8
c001524f:	5b                   	pop    ebx
c0015250:	c3                   	ret    
c0015251:	83 ec 0c             	sub    esp,0xc
c0015254:	68 22 b1 02 c0       	push   0xc002b122
c0015259:	e8 d3 dc ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001525e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015261:	e8 42 fb ff ff       	call   c0014da8 <displayDebugInfo(regs*)>

c0015266 <gpFault(regs*, void*)>:
c0015266:	53                   	push   ebx
c0015267:	83 ec 14             	sub    esp,0x14
c001526a:	c7 05 74 e7 02 c0 19 ee 01 c0 	mov    DWORD PTR ds:0xc002e774,0xc001ee19
c0015274:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015278:	53                   	push   ebx
c0015279:	e8 9b 9b 00 00       	call   c001ee19 <Vm::faultHandler(regs*)>
c001527e:	83 c4 10             	add    esp,0x10
c0015281:	84 c0                	test   al,al
c0015283:	74 05                	je     c001528a <gpFault(regs*, void*)+0x24>
c0015285:	83 c4 08             	add    esp,0x8
c0015288:	5b                   	pop    ebx
c0015289:	c3                   	ret    
c001528a:	83 ec 0c             	sub    esp,0xc
c001528d:	68 38 b1 02 c0       	push   0xc002b138
c0015292:	e8 9a dc ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0015297:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001529a:	e8 09 fb ff ff       	call   c0014da8 <displayDebugInfo(regs*)>

c001529f <pgFault(regs*, void*)>:
c001529f:	53                   	push   ebx
c00152a0:	83 ec 14             	sub    esp,0x14
c00152a3:	68 53 b1 02 c0       	push   0xc002b153
c00152a8:	e8 84 dc ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c00152ad:	0f 20 d3             	mov    ebx,cr2
c00152b0:	58                   	pop    eax
c00152b1:	5a                   	pop    edx
c00152b2:	53                   	push   ebx
c00152b3:	68 60 b1 02 c0       	push   0xc002b160
c00152b8:	e8 74 dc ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c00152bd:	59                   	pop    ecx
c00152be:	58                   	pop    eax
c00152bf:	53                   	push   ebx
c00152c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152c5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00152c8:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00152ce:	e8 37 d8 ff ff       	call   c0012b0a <VAS::tryLoadBackOffDisk(unsigned long)>
c00152d3:	83 c4 10             	add    esp,0x10
c00152d6:	84 c0                	test   al,al
c00152d8:	74 05                	je     c00152df <pgFault(regs*, void*)+0x40>
c00152da:	83 c4 08             	add    esp,0x8
c00152dd:	5b                   	pop    ebx
c00152de:	c3                   	ret    
c00152df:	83 ec 0c             	sub    esp,0xc
c00152e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00152e6:	e8 bd fa ff ff       	call   c0014da8 <displayDebugInfo(regs*)>

c00152eb <otherISRHandler(regs*, void*)>:
c00152eb:	53                   	push   ebx
c00152ec:	83 ec 0c             	sub    esp,0xc
c00152ef:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00152f3:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00152f6:	50                   	push   eax
c00152f7:	50                   	push   eax
c00152f8:	68 6c b1 02 c0       	push   0xc002b16c
c00152fd:	e8 2f dc ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0015302:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015305:	e8 9e fa ff ff       	call   c0014da8 <displayDebugInfo(regs*)>

c001530a <opcodeFault(regs*, void*)>:
c001530a:	55                   	push   ebp
c001530b:	89 e5                	mov    ebp,esp
c001530d:	56                   	push   esi
c001530e:	53                   	push   ebx
c001530f:	83 ec 40             	sub    esp,0x40
c0015312:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0015317:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001531d:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0015323:	84 c0                	test   al,al
c0015325:	74 24                	je     c001534b <opcodeFault(regs*, void*)+0x41>
c0015327:	83 ec 0c             	sub    esp,0xc
c001532a:	68 8c b1 02 c0       	push   0xc002b18c
c001532f:	e8 fd db ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0015334:	83 c4 10             	add    esp,0x10
c0015337:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001533a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001533d:	8d 50 19             	lea    edx,[eax+0x19]
c0015340:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015343:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015346:	e9 be 05 00 00       	jmp    c0015909 <opcodeFault(regs*, void*)+0x5ff>
c001534b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001534e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015351:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015354:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0015358:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c001535c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001535f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015362:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0015365:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015368:	8a 00                	mov    al,BYTE PTR [eax]
c001536a:	3c f0                	cmp    al,0xf0
c001536c:	75 17                	jne    c0015385 <opcodeFault(regs*, void*)+0x7b>
c001536e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015371:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015374:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015377:	8d 50 01             	lea    edx,[eax+0x1]
c001537a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001537d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015380:	e9 da 00 00 00       	jmp    c001545f <opcodeFault(regs*, void*)+0x155>
c0015385:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015388:	8a 00                	mov    al,BYTE PTR [eax]
c001538a:	3c f2                	cmp    al,0xf2
c001538c:	74 09                	je     c0015397 <opcodeFault(regs*, void*)+0x8d>
c001538e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015391:	8a 00                	mov    al,BYTE PTR [eax]
c0015393:	3c f3                	cmp    al,0xf3
c0015395:	75 1b                	jne    c00153b2 <opcodeFault(regs*, void*)+0xa8>
c0015397:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001539b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001539e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153a1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153a4:	8d 50 01             	lea    edx,[eax+0x1]
c00153a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153aa:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153ad:	e9 ad 00 00 00       	jmp    c001545f <opcodeFault(regs*, void*)+0x155>
c00153b2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153b5:	8a 00                	mov    al,BYTE PTR [eax]
c00153b7:	3c 66                	cmp    al,0x66
c00153b9:	75 1f                	jne    c00153da <opcodeFault(regs*, void*)+0xd0>
c00153bb:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153bf:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c00153c3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153c9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153cc:	8d 50 01             	lea    edx,[eax+0x1]
c00153cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153d2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153d5:	e9 85 00 00 00       	jmp    c001545f <opcodeFault(regs*, void*)+0x155>
c00153da:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153dd:	8a 00                	mov    al,BYTE PTR [eax]
c00153df:	3c 67                	cmp    al,0x67
c00153e1:	75 18                	jne    c00153fb <opcodeFault(regs*, void*)+0xf1>
c00153e3:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153e7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ed:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153f0:	8d 50 01             	lea    edx,[eax+0x1]
c00153f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153f6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153f9:	eb 64                	jmp    c001545f <opcodeFault(regs*, void*)+0x155>
c00153fb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153fe:	8a 00                	mov    al,BYTE PTR [eax]
c0015400:	3c 2e                	cmp    al,0x2e
c0015402:	74 09                	je     c001540d <opcodeFault(regs*, void*)+0x103>
c0015404:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015407:	8a 00                	mov    al,BYTE PTR [eax]
c0015409:	3c 3e                	cmp    al,0x3e
c001540b:	75 18                	jne    c0015425 <opcodeFault(regs*, void*)+0x11b>
c001540d:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015411:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015414:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015417:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001541a:	8d 50 01             	lea    edx,[eax+0x1]
c001541d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015420:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015423:	eb 3a                	jmp    c001545f <opcodeFault(regs*, void*)+0x155>
c0015425:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015428:	8a 00                	mov    al,BYTE PTR [eax]
c001542a:	3c 36                	cmp    al,0x36
c001542c:	74 1b                	je     c0015449 <opcodeFault(regs*, void*)+0x13f>
c001542e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015431:	8a 00                	mov    al,BYTE PTR [eax]
c0015433:	3c 26                	cmp    al,0x26
c0015435:	74 12                	je     c0015449 <opcodeFault(regs*, void*)+0x13f>
c0015437:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001543a:	8a 00                	mov    al,BYTE PTR [eax]
c001543c:	3c 64                	cmp    al,0x64
c001543e:	74 09                	je     c0015449 <opcodeFault(regs*, void*)+0x13f>
c0015440:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015443:	8a 00                	mov    al,BYTE PTR [eax]
c0015445:	3c 65                	cmp    al,0x65
c0015447:	75 16                	jne    c001545f <opcodeFault(regs*, void*)+0x155>
c0015449:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001544d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015450:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015453:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015456:	8d 50 01             	lea    edx,[eax+0x1]
c0015459:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001545c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001545f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015462:	8a 00                	mov    al,BYTE PTR [eax]
c0015464:	3c 0f                	cmp    al,0xf
c0015466:	0f 85 ad 00 00 00    	jne    c0015519 <opcodeFault(regs*, void*)+0x20f>
c001546c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001546f:	40                   	inc    eax
c0015470:	8a 00                	mov    al,BYTE PTR [eax]
c0015472:	3c c2                	cmp    al,0xc2
c0015474:	74 0e                	je     c0015484 <opcodeFault(regs*, void*)+0x17a>
c0015476:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015479:	40                   	inc    eax
c001547a:	8a 00                	mov    al,BYTE PTR [eax]
c001547c:	3c c3                	cmp    al,0xc3
c001547e:	0f 85 95 00 00 00    	jne    c0015519 <opcodeFault(regs*, void*)+0x20f>
c0015484:	83 ec 0c             	sub    esp,0xc
c0015487:	68 af b1 02 c0       	push   0xc002b1af
c001548c:	e8 a0 da ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0015491:	83 c4 10             	add    esp,0x10
c0015494:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015497:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001549a:	8d 50 01             	lea    edx,[eax+0x1]
c001549d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154a0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154a3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00154a6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154a9:	8a 00                	mov    al,BYTE PTR [eax]
c00154ab:	8d 50 fe             	lea    edx,[eax-0x2]
c00154ae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154b1:	88 10                	mov    BYTE PTR [eax],dl
c00154b3:	8d 45 c2             	lea    eax,[ebp-0x3e]
c00154b6:	50                   	push   eax
c00154b7:	8d 45 c3             	lea    eax,[ebp-0x3d]
c00154ba:	50                   	push   eax
c00154bb:	8d 45 c4             	lea    eax,[ebp-0x3c]
c00154be:	50                   	push   eax
c00154bf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00154c2:	e8 e3 47 00 00       	call   c0019caa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00154c7:	83 c4 10             	add    esp,0x10
c00154ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154cd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154d0:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00154d3:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c00154d6:	01 d0                	add    eax,edx
c00154d8:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00154db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154de:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154e1:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00154e4:	48                   	dec    eax
c00154e5:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00154e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154eb:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00154ee:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154f4:	83 ec 04             	sub    esp,0x4
c00154f7:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00154fa:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00154fd:	50                   	push   eax
c00154fe:	e8 b1 ac fe ff       	call   c00001b4 <voodooXADD>
c0015503:	83 c4 10             	add    esp,0x10
c0015506:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0015509:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001550c:	01 c2                	add    edx,eax
c001550e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015511:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015514:	e9 f0 03 00 00       	jmp    c0015909 <opcodeFault(regs*, void*)+0x5ff>
c0015519:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001551c:	8a 00                	mov    al,BYTE PTR [eax]
c001551e:	3c 0f                	cmp    al,0xf
c0015520:	0f 85 8b 01 00 00    	jne    c00156b1 <opcodeFault(regs*, void*)+0x3a7>
c0015526:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015529:	40                   	inc    eax
c001552a:	8a 00                	mov    al,BYTE PTR [eax]
c001552c:	3c c7                	cmp    al,0xc7
c001552e:	0f 86 7d 01 00 00    	jbe    c00156b1 <opcodeFault(regs*, void*)+0x3a7>
c0015534:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015537:	40                   	inc    eax
c0015538:	8a 00                	mov    al,BYTE PTR [eax]
c001553a:	3c cf                	cmp    al,0xcf
c001553c:	0f 87 6f 01 00 00    	ja     c00156b1 <opcodeFault(regs*, void*)+0x3a7>
c0015542:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015545:	40                   	inc    eax
c0015546:	8a 00                	mov    al,BYTE PTR [eax]
c0015548:	83 c0 38             	add    eax,0x38
c001554b:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001554e:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015552:	75 0b                	jne    c001555f <opcodeFault(regs*, void*)+0x255>
c0015554:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015557:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001555a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001555d:	eb 75                	jmp    c00155d4 <opcodeFault(regs*, void*)+0x2ca>
c001555f:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015563:	75 0b                	jne    c0015570 <opcodeFault(regs*, void*)+0x266>
c0015565:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015568:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001556b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001556e:	eb 64                	jmp    c00155d4 <opcodeFault(regs*, void*)+0x2ca>
c0015570:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015574:	75 0b                	jne    c0015581 <opcodeFault(regs*, void*)+0x277>
c0015576:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015579:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001557c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001557f:	eb 53                	jmp    c00155d4 <opcodeFault(regs*, void*)+0x2ca>
c0015581:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015585:	75 0b                	jne    c0015592 <opcodeFault(regs*, void*)+0x288>
c0015587:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001558a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001558d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015590:	eb 42                	jmp    c00155d4 <opcodeFault(regs*, void*)+0x2ca>
c0015592:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015596:	75 0b                	jne    c00155a3 <opcodeFault(regs*, void*)+0x299>
c0015598:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001559b:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001559e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155a1:	eb 31                	jmp    c00155d4 <opcodeFault(regs*, void*)+0x2ca>
c00155a3:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00155a7:	75 0b                	jne    c00155b4 <opcodeFault(regs*, void*)+0x2aa>
c00155a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155ac:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00155af:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155b2:	eb 20                	jmp    c00155d4 <opcodeFault(regs*, void*)+0x2ca>
c00155b4:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00155b8:	75 0b                	jne    c00155c5 <opcodeFault(regs*, void*)+0x2bb>
c00155ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155bd:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00155c0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155c3:	eb 0f                	jmp    c00155d4 <opcodeFault(regs*, void*)+0x2ca>
c00155c5:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00155c9:	75 09                	jne    c00155d4 <opcodeFault(regs*, void*)+0x2ca>
c00155cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00155d1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155d4:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c00155d8:	74 10                	je     c00155ea <opcodeFault(regs*, void*)+0x2e0>
c00155da:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c00155e1:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c00155e8:	eb 2d                	jmp    c0015617 <opcodeFault(regs*, void*)+0x30d>
c00155ea:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00155ed:	c1 e0 18             	shl    eax,0x18
c00155f0:	89 c2                	mov    edx,eax
c00155f2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00155f5:	c1 e0 08             	shl    eax,0x8
c00155f8:	25 00 00 ff 00       	and    eax,0xff0000
c00155fd:	09 c2                	or     edx,eax
c00155ff:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015602:	c1 e8 08             	shr    eax,0x8
c0015605:	25 00 ff 00 00       	and    eax,0xff00
c001560a:	09 c2                	or     edx,eax
c001560c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001560f:	c1 e8 18             	shr    eax,0x18
c0015612:	09 d0                	or     eax,edx
c0015614:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015617:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001561b:	75 0b                	jne    c0015628 <opcodeFault(regs*, void*)+0x31e>
c001561d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015620:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015623:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015626:	eb 75                	jmp    c001569d <opcodeFault(regs*, void*)+0x393>
c0015628:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001562c:	75 0b                	jne    c0015639 <opcodeFault(regs*, void*)+0x32f>
c001562e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015631:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015634:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0015637:	eb 64                	jmp    c001569d <opcodeFault(regs*, void*)+0x393>
c0015639:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001563d:	75 0b                	jne    c001564a <opcodeFault(regs*, void*)+0x340>
c001563f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015642:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015645:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015648:	eb 53                	jmp    c001569d <opcodeFault(regs*, void*)+0x393>
c001564a:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c001564e:	75 0b                	jne    c001565b <opcodeFault(regs*, void*)+0x351>
c0015650:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015653:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015656:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0015659:	eb 42                	jmp    c001569d <opcodeFault(regs*, void*)+0x393>
c001565b:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001565f:	75 0b                	jne    c001566c <opcodeFault(regs*, void*)+0x362>
c0015661:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015664:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015667:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c001566a:	eb 31                	jmp    c001569d <opcodeFault(regs*, void*)+0x393>
c001566c:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015670:	75 0b                	jne    c001567d <opcodeFault(regs*, void*)+0x373>
c0015672:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015675:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015678:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001567b:	eb 20                	jmp    c001569d <opcodeFault(regs*, void*)+0x393>
c001567d:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015681:	75 0b                	jne    c001568e <opcodeFault(regs*, void*)+0x384>
c0015683:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015686:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015689:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001568c:	eb 0f                	jmp    c001569d <opcodeFault(regs*, void*)+0x393>
c001568e:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015692:	75 09                	jne    c001569d <opcodeFault(regs*, void*)+0x393>
c0015694:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015697:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001569a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001569d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156a0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00156a3:	8d 50 02             	lea    edx,[eax+0x2]
c00156a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156a9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00156ac:	e9 58 02 00 00       	jmp    c0015909 <opcodeFault(regs*, void*)+0x5ff>
c00156b1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156b4:	8a 00                	mov    al,BYTE PTR [eax]
c00156b6:	3c 0f                	cmp    al,0xf
c00156b8:	0f 85 76 01 00 00    	jne    c0015834 <opcodeFault(regs*, void*)+0x52a>
c00156be:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156c1:	40                   	inc    eax
c00156c2:	8a 00                	mov    al,BYTE PTR [eax]
c00156c4:	3c c7                	cmp    al,0xc7
c00156c6:	0f 85 68 01 00 00    	jne    c0015834 <opcodeFault(regs*, void*)+0x52a>
c00156cc:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00156cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156d2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00156d5:	8d 50 01             	lea    edx,[eax+0x1]
c00156d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156db:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00156de:	8d 45 ba             	lea    eax,[ebp-0x46]
c00156e1:	50                   	push   eax
c00156e2:	8d 45 bb             	lea    eax,[ebp-0x45]
c00156e5:	50                   	push   eax
c00156e6:	8d 45 bc             	lea    eax,[ebp-0x44]
c00156e9:	50                   	push   eax
c00156ea:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00156ed:	e8 b8 45 00 00       	call   c0019caa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00156f2:	83 c4 10             	add    esp,0x10
c00156f5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00156f8:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c00156fb:	83 f0 01             	xor    eax,0x1
c00156fe:	84 c0                	test   al,al
c0015700:	0f 84 2e 01 00 00    	je     c0015834 <opcodeFault(regs*, void*)+0x52a>
c0015706:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0015709:	3c 01                	cmp    al,0x1
c001570b:	0f 85 23 01 00 00    	jne    c0015834 <opcodeFault(regs*, void*)+0x52a>
c0015711:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0015714:	83 f0 01             	xor    eax,0x1
c0015717:	84 c0                	test   al,al
c0015719:	0f 84 15 01 00 00    	je     c0015834 <opcodeFault(regs*, void*)+0x52a>
c001571f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015722:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015725:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015728:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c001572f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015732:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015735:	89 c2                	mov    edx,eax
c0015737:	b8 00 00 00 00       	mov    eax,0x0
c001573c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001573f:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015742:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015745:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015748:	ba 00 00 00 00       	mov    edx,0x0
c001574d:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0015750:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0015753:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015756:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015759:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001575c:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0015763:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015766:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015769:	89 c2                	mov    edx,eax
c001576b:	b8 00 00 00 00       	mov    eax,0x0
c0015770:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015773:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0015776:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015779:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001577c:	ba 00 00 00 00       	mov    edx,0x0
c0015781:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0015784:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015787:	e8 7c 86 00 00       	call   c001de08 <lockScheduler()>
c001578c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001578f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015792:	8b 00                	mov    eax,DWORD PTR [eax]
c0015794:	89 c1                	mov    ecx,eax
c0015796:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0015799:	89 cb                	mov    ebx,ecx
c001579b:	89 d0                	mov    eax,edx
c001579d:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00157a0:	89 c6                	mov    esi,eax
c00157a2:	89 f0                	mov    eax,esi
c00157a4:	09 d8                	or     eax,ebx
c00157a6:	85 c0                	test   eax,eax
c00157a8:	75 21                	jne    c00157cb <opcodeFault(regs*, void*)+0x4c1>
c00157aa:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00157ad:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00157b0:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00157b3:	89 01                	mov    DWORD PTR [ecx],eax
c00157b5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00157b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157bb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00157be:	83 c8 40             	or     eax,0x40
c00157c1:	89 c2                	mov    edx,eax
c00157c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157c6:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00157c9:	eb 3e                	jmp    c0015809 <opcodeFault(regs*, void*)+0x4ff>
c00157cb:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00157ce:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00157d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00157d3:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00157d6:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00157d9:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00157dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157df:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00157e2:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00157e5:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00157e8:	89 d0                	mov    eax,edx
c00157ea:	31 d2                	xor    edx,edx
c00157ec:	89 c3                	mov    ebx,eax
c00157ee:	89 d6                	mov    esi,edx
c00157f0:	89 da                	mov    edx,ebx
c00157f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f5:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00157f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157fb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00157fe:	83 e0 bf             	and    eax,0xffffffbf
c0015801:	89 c2                	mov    edx,eax
c0015803:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015806:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015809:	e8 fc 85 00 00       	call   c001de0a <unlockScheduler()>
c001580e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015811:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015814:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0015817:	01 c2                	add    edx,eax
c0015819:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001581c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001581f:	83 ec 0c             	sub    esp,0xc
c0015822:	68 be b1 02 c0       	push   0xc002b1be
c0015827:	e8 05 d7 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001582c:	83 c4 10             	add    esp,0x10
c001582f:	e9 d5 00 00 00       	jmp    c0015909 <opcodeFault(regs*, void*)+0x5ff>
c0015834:	83 ec 0c             	sub    esp,0xc
c0015837:	68 d1 b1 02 c0       	push   0xc002b1d1
c001583c:	e8 f0 d6 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0015841:	83 c4 10             	add    esp,0x10
c0015844:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015847:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001584a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001584d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015850:	c1 e0 04             	shl    eax,0x4
c0015853:	01 d0                	add    eax,edx
c0015855:	83 c0 03             	add    eax,0x3
c0015858:	8a 00                	mov    al,BYTE PTR [eax]
c001585a:	0f b6 d8             	movzx  ebx,al
c001585d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015860:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015863:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015866:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015869:	c1 e0 04             	shl    eax,0x4
c001586c:	01 d0                	add    eax,edx
c001586e:	83 c0 02             	add    eax,0x2
c0015871:	8a 00                	mov    al,BYTE PTR [eax]
c0015873:	0f b6 c8             	movzx  ecx,al
c0015876:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015879:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001587c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001587f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015882:	c1 e0 04             	shl    eax,0x4
c0015885:	01 d0                	add    eax,edx
c0015887:	40                   	inc    eax
c0015888:	8a 00                	mov    al,BYTE PTR [eax]
c001588a:	0f b6 d0             	movzx  edx,al
c001588d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015890:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0015893:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015896:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015899:	c1 e0 04             	shl    eax,0x4
c001589c:	01 f0                	add    eax,esi
c001589e:	8a 00                	mov    al,BYTE PTR [eax]
c00158a0:	0f b6 c0             	movzx  eax,al
c00158a3:	83 ec 0c             	sub    esp,0xc
c00158a6:	53                   	push   ebx
c00158a7:	51                   	push   ecx
c00158a8:	52                   	push   edx
c00158a9:	50                   	push   eax
c00158aa:	68 e4 b1 02 c0       	push   0xc002b1e4
c00158af:	e8 7d d6 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c00158b4:	83 c4 20             	add    esp,0x20
c00158b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ba:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158bd:	83 c0 03             	add    eax,0x3
c00158c0:	8a 00                	mov    al,BYTE PTR [eax]
c00158c2:	0f b6 d8             	movzx  ebx,al
c00158c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158c8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158cb:	83 c0 02             	add    eax,0x2
c00158ce:	8a 00                	mov    al,BYTE PTR [eax]
c00158d0:	0f b6 c8             	movzx  ecx,al
c00158d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158d6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158d9:	40                   	inc    eax
c00158da:	8a 00                	mov    al,BYTE PTR [eax]
c00158dc:	0f b6 d0             	movzx  edx,al
c00158df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158e2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158e5:	8a 00                	mov    al,BYTE PTR [eax]
c00158e7:	0f b6 c0             	movzx  eax,al
c00158ea:	83 ec 0c             	sub    esp,0xc
c00158ed:	53                   	push   ebx
c00158ee:	51                   	push   ecx
c00158ef:	52                   	push   edx
c00158f0:	50                   	push   eax
c00158f1:	68 0c b2 02 c0       	push   0xc002b20c
c00158f6:	e8 36 d6 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c00158fb:	83 c4 20             	add    esp,0x20
c00158fe:	83 ec 0c             	sub    esp,0xc
c0015901:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015904:	e8 9f f4 ff ff       	call   c0014da8 <displayDebugInfo(regs*)>
c0015909:	8d 65 f8             	lea    esp,[ebp-0x8]
c001590c:	5b                   	pop    ebx
c001590d:	5e                   	pop    esi
c001590e:	5d                   	pop    ebp
c001590f:	c3                   	ret    

c0015910 <displayProgramFault(char const*)>:
c0015910:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015915:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015918:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001591e:	85 c0                	test   eax,eax
c0015920:	74 15                	je     c0015937 <displayProgramFault(char const*)+0x27>
c0015922:	83 ec 0c             	sub    esp,0xc
c0015925:	6a 04                	push   0x4
c0015927:	6a 0f                	push   0xf
c0015929:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001592d:	50                   	push   eax
c001592e:	e8 f7 b4 ff ff       	call   c0010e2a <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015933:	83 c4 1c             	add    esp,0x1c
c0015936:	c3                   	ret    
c0015937:	c3                   	ret    

c0015938 <setupInterruptController()>:
c0015938:	55                   	push   ebp
c0015939:	89 e5                	mov    ebp,esp
c001593b:	53                   	push   ebx
c001593c:	83 ec 24             	sub    esp,0x24
c001593f:	b8 00 00 00 00       	mov    eax,0x0
c0015944:	85 c0                	test   eax,eax
c0015946:	0f 95 c0             	setne  al
c0015949:	84 c0                	test   al,al
c001594b:	74 5b                	je     c00159a8 <setupInterruptController()+0x70>
c001594d:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015954:	83 ec 0c             	sub    esp,0xc
c0015957:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c001595a:	e8 e1 9e ff ff       	call   c000f840 <malloc>
c001595f:	83 c4 10             	add    esp,0x10
c0015962:	89 c3                	mov    ebx,eax
c0015964:	83 ec 0c             	sub    esp,0xc
c0015967:	53                   	push   ebx
c0015968:	e8 f3 ff 00 00       	call   c0025960 <APIC::APIC()>
c001596d:	83 c4 10             	add    esp,0x10
c0015970:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015973:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015976:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015979:	8b 00                	mov    eax,DWORD PTR [eax]
c001597b:	83 c0 08             	add    eax,0x8
c001597e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015980:	6a 00                	push   0x0
c0015982:	6a 00                	push   0x0
c0015984:	6a 00                	push   0x0
c0015986:	52                   	push   edx
c0015987:	ff d0                	call   eax
c0015989:	83 c4 10             	add    esp,0x10
c001598c:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0015991:	83 ec 08             	sub    esp,0x8
c0015994:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015997:	50                   	push   eax
c0015998:	e8 bb e9 ff ff       	call   c0014358 <Device::addChild(Device*)>
c001599d:	83 c4 10             	add    esp,0x10
c00159a0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00159a3:	e9 52 03 00 00       	jmp    c0015cfa <setupInterruptController()+0x3c2>
c00159a8:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c00159ad:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00159b3:	83 e0 01             	and    eax,0x1
c00159b6:	84 c0                	test   al,al
c00159b8:	0f 95 c0             	setne  al
c00159bb:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00159be:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c00159c5:	83 ec 0c             	sub    esp,0xc
c00159c8:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00159cb:	e8 70 9e ff ff       	call   c000f840 <malloc>
c00159d0:	83 c4 10             	add    esp,0x10
c00159d3:	89 c3                	mov    ebx,eax
c00159d5:	83 ec 0c             	sub    esp,0xc
c00159d8:	53                   	push   ebx
c00159d9:	e8 da 04 01 00       	call   c0025eb8 <PIC::PIC()>
c00159de:	83 c4 10             	add    esp,0x10
c00159e1:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00159e4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00159e7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00159ec:	83 c0 08             	add    eax,0x8
c00159ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00159f1:	6a 00                	push   0x0
c00159f3:	6a 00                	push   0x0
c00159f5:	6a 00                	push   0x0
c00159f7:	52                   	push   edx
c00159f8:	ff d0                	call   eax
c00159fa:	83 c4 10             	add    esp,0x10
c00159fd:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015a01:	74 73                	je     c0015a76 <setupInterruptController()+0x13e>
c0015a03:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a06:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a09:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a0b:	83 c0 0c             	add    eax,0xc
c0015a0e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a10:	6a 00                	push   0x0
c0015a12:	6a 00                	push   0x0
c0015a14:	6a 00                	push   0x0
c0015a16:	52                   	push   edx
c0015a17:	ff d0                	call   eax
c0015a19:	83 c4 10             	add    esp,0x10
c0015a1c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015a20:	74 15                	je     c0015a37 <setupInterruptController()+0xff>
c0015a22:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a25:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a27:	83 c0 04             	add    eax,0x4
c0015a2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a2c:	83 ec 0c             	sub    esp,0xc
c0015a2f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a32:	ff d0                	call   eax
c0015a34:	83 c4 10             	add    esp,0x10
c0015a37:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015a3e:	83 ec 0c             	sub    esp,0xc
c0015a41:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015a44:	e8 f7 9d ff ff       	call   c000f840 <malloc>
c0015a49:	83 c4 10             	add    esp,0x10
c0015a4c:	89 c3                	mov    ebx,eax
c0015a4e:	83 ec 0c             	sub    esp,0xc
c0015a51:	53                   	push   ebx
c0015a52:	e8 09 ff 00 00       	call   c0025960 <APIC::APIC()>
c0015a57:	83 c4 10             	add    esp,0x10
c0015a5a:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015a5d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a60:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a63:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a65:	83 c0 08             	add    eax,0x8
c0015a68:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a6a:	6a 00                	push   0x0
c0015a6c:	6a 00                	push   0x0
c0015a6e:	6a 00                	push   0x0
c0015a70:	52                   	push   edx
c0015a71:	ff d0                	call   eax
c0015a73:	83 c4 10             	add    esp,0x10
c0015a76:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0015a7b:	83 ec 08             	sub    esp,0x8
c0015a7e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a81:	50                   	push   eax
c0015a82:	e8 d1 e8 ff ff       	call   c0014358 <Device::addChild(Device*)>
c0015a87:	83 c4 10             	add    esp,0x10
c0015a8a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a8d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a8f:	83 c0 24             	add    eax,0x24
c0015a92:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a94:	6a 00                	push   0x0
c0015a96:	68 eb 52 01 c0       	push   0xc00152eb
c0015a9b:	6a 00                	push   0x0
c0015a9d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015aa0:	ff d0                	call   eax
c0015aa2:	83 c4 10             	add    esp,0x10
c0015aa5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aa8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aaa:	83 c0 24             	add    eax,0x24
c0015aad:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aaf:	6a 00                	push   0x0
c0015ab1:	68 eb 52 01 c0       	push   0xc00152eb
c0015ab6:	6a 01                	push   0x1
c0015ab8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015abb:	ff d0                	call   eax
c0015abd:	83 c4 10             	add    esp,0x10
c0015ac0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ac3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ac5:	83 c0 24             	add    eax,0x24
c0015ac8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aca:	6a 00                	push   0x0
c0015acc:	68 05 4c 01 c0       	push   0xc0014c05
c0015ad1:	6a 02                	push   0x2
c0015ad3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ad6:	ff d0                	call   eax
c0015ad8:	83 c4 10             	add    esp,0x10
c0015adb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ade:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ae0:	83 c0 24             	add    eax,0x24
c0015ae3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ae5:	6a 00                	push   0x0
c0015ae7:	68 eb 52 01 c0       	push   0xc00152eb
c0015aec:	6a 03                	push   0x3
c0015aee:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015af1:	ff d0                	call   eax
c0015af3:	83 c4 10             	add    esp,0x10
c0015af6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015af9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015afb:	83 c0 24             	add    eax,0x24
c0015afe:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b00:	6a 00                	push   0x0
c0015b02:	68 eb 52 01 c0       	push   0xc00152eb
c0015b07:	6a 04                	push   0x4
c0015b09:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b0c:	ff d0                	call   eax
c0015b0e:	83 c4 10             	add    esp,0x10
c0015b11:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b14:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b16:	83 c0 24             	add    eax,0x24
c0015b19:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b1b:	6a 00                	push   0x0
c0015b1d:	68 eb 52 01 c0       	push   0xc00152eb
c0015b22:	6a 05                	push   0x5
c0015b24:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b27:	ff d0                	call   eax
c0015b29:	83 c4 10             	add    esp,0x10
c0015b2c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b2f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b31:	83 c0 24             	add    eax,0x24
c0015b34:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b36:	6a 00                	push   0x0
c0015b38:	68 0a 53 01 c0       	push   0xc001530a
c0015b3d:	6a 06                	push   0x6
c0015b3f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b42:	ff d0                	call   eax
c0015b44:	83 c4 10             	add    esp,0x10
c0015b47:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b4c:	83 c0 24             	add    eax,0x24
c0015b4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b51:	6a 00                	push   0x0
c0015b53:	68 37 52 01 c0       	push   0xc0015237
c0015b58:	6a 07                	push   0x7
c0015b5a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b5d:	ff d0                	call   eax
c0015b5f:	83 c4 10             	add    esp,0x10
c0015b62:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b65:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b67:	83 c0 24             	add    eax,0x24
c0015b6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b6c:	6a 00                	push   0x0
c0015b6e:	68 20 4a 01 c0       	push   0xc0014a20
c0015b73:	6a 08                	push   0x8
c0015b75:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b78:	ff d0                	call   eax
c0015b7a:	83 c4 10             	add    esp,0x10
c0015b7d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b80:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b82:	83 c0 24             	add    eax,0x24
c0015b85:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b87:	6a 00                	push   0x0
c0015b89:	68 eb 52 01 c0       	push   0xc00152eb
c0015b8e:	6a 09                	push   0x9
c0015b90:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b93:	ff d0                	call   eax
c0015b95:	83 c4 10             	add    esp,0x10
c0015b98:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b9d:	83 c0 24             	add    eax,0x24
c0015ba0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ba2:	6a 00                	push   0x0
c0015ba4:	68 eb 52 01 c0       	push   0xc00152eb
c0015ba9:	6a 0a                	push   0xa
c0015bab:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bae:	ff d0                	call   eax
c0015bb0:	83 c4 10             	add    esp,0x10
c0015bb3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bb6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bb8:	83 c0 24             	add    eax,0x24
c0015bbb:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bbd:	6a 00                	push   0x0
c0015bbf:	68 eb 52 01 c0       	push   0xc00152eb
c0015bc4:	6a 0b                	push   0xb
c0015bc6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bc9:	ff d0                	call   eax
c0015bcb:	83 c4 10             	add    esp,0x10
c0015bce:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bd1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bd3:	83 c0 24             	add    eax,0x24
c0015bd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bd8:	6a 00                	push   0x0
c0015bda:	68 eb 52 01 c0       	push   0xc00152eb
c0015bdf:	6a 0c                	push   0xc
c0015be1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015be4:	ff d0                	call   eax
c0015be6:	83 c4 10             	add    esp,0x10
c0015be9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bec:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bee:	83 c0 24             	add    eax,0x24
c0015bf1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bf3:	6a 00                	push   0x0
c0015bf5:	68 66 52 01 c0       	push   0xc0015266
c0015bfa:	6a 0d                	push   0xd
c0015bfc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bff:	ff d0                	call   eax
c0015c01:	83 c4 10             	add    esp,0x10
c0015c04:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c07:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c09:	83 c0 24             	add    eax,0x24
c0015c0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c0e:	6a 00                	push   0x0
c0015c10:	68 9f 52 01 c0       	push   0xc001529f
c0015c15:	6a 0e                	push   0xe
c0015c17:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c1a:	ff d0                	call   eax
c0015c1c:	83 c4 10             	add    esp,0x10
c0015c1f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c22:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c24:	83 c0 24             	add    eax,0x24
c0015c27:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c29:	6a 00                	push   0x0
c0015c2b:	68 eb 52 01 c0       	push   0xc00152eb
c0015c30:	6a 0f                	push   0xf
c0015c32:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c35:	ff d0                	call   eax
c0015c37:	83 c4 10             	add    esp,0x10
c0015c3a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c3d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c3f:	83 c0 24             	add    eax,0x24
c0015c42:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c44:	6a 00                	push   0x0
c0015c46:	68 eb 52 01 c0       	push   0xc00152eb
c0015c4b:	6a 10                	push   0x10
c0015c4d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c50:	ff d0                	call   eax
c0015c52:	83 c4 10             	add    esp,0x10
c0015c55:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c58:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c5a:	83 c0 24             	add    eax,0x24
c0015c5d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c5f:	6a 00                	push   0x0
c0015c61:	68 eb 52 01 c0       	push   0xc00152eb
c0015c66:	6a 11                	push   0x11
c0015c68:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c6b:	ff d0                	call   eax
c0015c6d:	83 c4 10             	add    esp,0x10
c0015c70:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c73:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c75:	83 c0 24             	add    eax,0x24
c0015c78:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c7a:	6a 00                	push   0x0
c0015c7c:	68 eb 52 01 c0       	push   0xc00152eb
c0015c81:	6a 12                	push   0x12
c0015c83:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c86:	ff d0                	call   eax
c0015c88:	83 c4 10             	add    esp,0x10
c0015c8b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c90:	83 c0 24             	add    eax,0x24
c0015c93:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c95:	6a 00                	push   0x0
c0015c97:	68 eb 52 01 c0       	push   0xc00152eb
c0015c9c:	6a 13                	push   0x13
c0015c9e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ca1:	ff d0                	call   eax
c0015ca3:	83 c4 10             	add    esp,0x10
c0015ca6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ca9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cab:	83 c0 24             	add    eax,0x24
c0015cae:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cb0:	6a 00                	push   0x0
c0015cb2:	68 eb 52 01 c0       	push   0xc00152eb
c0015cb7:	6a 14                	push   0x14
c0015cb9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cbc:	ff d0                	call   eax
c0015cbe:	83 c4 10             	add    esp,0x10
c0015cc1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cc4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cc6:	83 c0 24             	add    eax,0x24
c0015cc9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ccb:	6a 00                	push   0x0
c0015ccd:	68 eb 52 01 c0       	push   0xc00152eb
c0015cd2:	6a 1e                	push   0x1e
c0015cd4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cd7:	ff d0                	call   eax
c0015cd9:	83 c4 10             	add    esp,0x10
c0015cdc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cdf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ce1:	83 c0 24             	add    eax,0x24
c0015ce4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ce6:	6a 00                	push   0x0
c0015ce8:	68 b7 c7 01 c0       	push   0xc001c7b7
c0015ced:	6a 60                	push   0x60
c0015cef:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cf2:	ff d0                	call   eax
c0015cf4:	83 c4 10             	add    esp,0x10
c0015cf7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cfa:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015cfd:	c9                   	leave  
c0015cfe:	c3                   	ret    
c0015cff:	90                   	nop

c0015d00 <InterruptController::convertLegacyIRQNumber(int)>:
c0015d00:	55                   	push   ebp
c0015d01:	89 e5                	mov    ebp,esp
c0015d03:	83 ec 08             	sub    esp,0x8
c0015d06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d09:	83 ec 0c             	sub    esp,0xc
c0015d0c:	50                   	push   eax
c0015d0d:	e8 32 e9 ff ff       	call   c0014644 <Device::getName()>
c0015d12:	83 c4 10             	add    esp,0x10
c0015d15:	8a 00                	mov    al,BYTE PTR [eax]
c0015d17:	3c 41                	cmp    al,0x41
c0015d19:	0f 94 c0             	sete   al
c0015d1c:	84 c0                	test   al,al
c0015d1e:	74 28                	je     c0015d48 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015d20:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015d24:	7f 12                	jg     c0015d38 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015d26:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d29:	05 20 d8 02 c0       	add    eax,0xc002d820
c0015d2e:	8a 00                	mov    al,BYTE PTR [eax]
c0015d30:	0f b6 c0             	movzx  eax,al
c0015d33:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015d36:	eb 10                	jmp    c0015d48 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015d38:	83 ec 0c             	sub    esp,0xc
c0015d3b:	68 20 af 02 c0       	push   0xc002af20
c0015d40:	e8 9e 48 00 00       	call   c001a5e3 <Krnl::panic(char const*)>
c0015d45:	83 c4 10             	add    esp,0x10
c0015d48:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d4b:	c9                   	leave  
c0015d4c:	c3                   	ret    
c0015d4d:	90                   	nop

c0015d4e <startGUI(void*)>:
c0015d4e:	55                   	push   ebp
c0015d4f:	89 e5                	mov    ebp,esp
c0015d51:	53                   	push   ebx
c0015d52:	83 ec 04             	sub    esp,0x4
c0015d55:	e8 b0 80 00 00       	call   c001de0a <unlockScheduler()>
c0015d5a:	8b 1d c8 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5c8
c0015d60:	83 ec 08             	sub    esp,0x8
c0015d63:	6a 01                	push   0x1
c0015d65:	68 7c b2 02 c0       	push   0xc002b27c
c0015d6a:	e8 f1 79 00 00       	call   c001d760 <Thr::loadDLL(char const*, bool)>
c0015d6f:	83 c4 10             	add    esp,0x10
c0015d72:	83 ec 08             	sub    esp,0x8
c0015d75:	53                   	push   ebx
c0015d76:	50                   	push   eax
c0015d77:	e8 18 7c 00 00       	call   c001d994 <Thr::executeDLL(unsigned long, void*)>
c0015d7c:	83 c4 10             	add    esp,0x10
c0015d7f:	8b 1d c8 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5c8
c0015d85:	83 ec 08             	sub    esp,0x8
c0015d88:	6a 01                	push   0x1
c0015d8a:	68 96 b2 02 c0       	push   0xc002b296
c0015d8f:	e8 cc 79 00 00       	call   c001d760 <Thr::loadDLL(char const*, bool)>
c0015d94:	83 c4 10             	add    esp,0x10
c0015d97:	83 ec 08             	sub    esp,0x8
c0015d9a:	53                   	push   ebx
c0015d9b:	50                   	push   eax
c0015d9c:	e8 f3 7b 00 00       	call   c001d994 <Thr::executeDLL(unsigned long, void*)>
c0015da1:	83 c4 10             	add    esp,0x10
c0015da4:	90                   	nop
c0015da5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015da8:	c9                   	leave  
c0015da9:	c3                   	ret    

c0015daa <startGUIVESA(void*)>:
c0015daa:	55                   	push   ebp
c0015dab:	89 e5                	mov    ebp,esp
c0015dad:	53                   	push   ebx
c0015dae:	83 ec 04             	sub    esp,0x4
c0015db1:	e8 54 80 00 00       	call   c001de0a <unlockScheduler()>
c0015db6:	8b 1d c8 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5c8
c0015dbc:	83 ec 08             	sub    esp,0x8
c0015dbf:	6a 01                	push   0x1
c0015dc1:	68 b0 b2 02 c0       	push   0xc002b2b0
c0015dc6:	e8 95 79 00 00       	call   c001d760 <Thr::loadDLL(char const*, bool)>
c0015dcb:	83 c4 10             	add    esp,0x10
c0015dce:	83 ec 08             	sub    esp,0x8
c0015dd1:	53                   	push   ebx
c0015dd2:	50                   	push   eax
c0015dd3:	e8 bc 7b 00 00       	call   c001d994 <Thr::executeDLL(unsigned long, void*)>
c0015dd8:	83 c4 10             	add    esp,0x10
c0015ddb:	8b 1d c8 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5c8
c0015de1:	83 ec 08             	sub    esp,0x8
c0015de4:	6a 01                	push   0x1
c0015de6:	68 96 b2 02 c0       	push   0xc002b296
c0015deb:	e8 70 79 00 00       	call   c001d760 <Thr::loadDLL(char const*, bool)>
c0015df0:	83 c4 10             	add    esp,0x10
c0015df3:	83 ec 08             	sub    esp,0x8
c0015df6:	53                   	push   ebx
c0015df7:	50                   	push   eax
c0015df8:	e8 97 7b 00 00       	call   c001d994 <Thr::executeDLL(unsigned long, void*)>
c0015dfd:	83 c4 10             	add    esp,0x10
c0015e00:	90                   	nop
c0015e01:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015e04:	c9                   	leave  
c0015e05:	c3                   	ret    

c0015e06 <sendKeyToTerminal(unsigned char)>:
c0015e06:	55                   	push   ebp
c0015e07:	89 e5                	mov    ebp,esp
c0015e09:	83 ec 28             	sub    esp,0x28
c0015e0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e0f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015e12:	a1 a4 e6 02 c0       	mov    eax,ds:0xc002e6a4
c0015e17:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015e1b:	83 ec 08             	sub    esp,0x8
c0015e1e:	52                   	push   edx
c0015e1f:	50                   	push   eax
c0015e20:	e8 41 b5 ff ff       	call   c0011366 <VgaText::receiveKey(unsigned char)>
c0015e25:	83 c4 10             	add    esp,0x10
c0015e28:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015e2c:	75 41                	jne    c0015e6f <sendKeyToTerminal(unsigned char)+0x69>
c0015e2e:	e8 fc 7f 00 00       	call   c001de2f <lockStuff()>
c0015e33:	a1 80 e7 02 c0       	mov    eax,ds:0xc002e780
c0015e38:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e3b:	c7 05 80 e7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e780,0x0
c0015e45:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015e49:	74 1f                	je     c0015e6a <sendKeyToTerminal(unsigned char)+0x64>
c0015e4b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e4e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015e51:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015e54:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015e57:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e5a:	83 ec 0c             	sub    esp,0xc
c0015e5d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015e60:	e8 bb 85 00 00       	call   c001e420 <unblockTask(ThreadControlBlock*)>
c0015e65:	83 c4 10             	add    esp,0x10
c0015e68:	eb db                	jmp    c0015e45 <sendKeyToTerminal(unsigned char)+0x3f>
c0015e6a:	e8 5a 83 00 00       	call   c001e1c9 <unlockStuff()>
c0015e6f:	90                   	nop
c0015e70:	c9                   	leave  
c0015e71:	c3                   	ret    

c0015e72 <sendKeyboardToken(KeyboardToken)>:
c0015e72:	55                   	push   ebp
c0015e73:	89 e5                	mov    ebp,esp
c0015e75:	83 ec 18             	sub    esp,0x18
c0015e78:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015e7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e7e:	0f b7 c0             	movzx  eax,ax
c0015e81:	83 f2 01             	xor    edx,0x1
c0015e84:	88 90 a0 e7 02 c0    	mov    BYTE PTR [eax-0x3ffd1860],dl
c0015e8a:	a1 88 e7 02 c0       	mov    eax,ds:0xc002e788
c0015e8f:	85 c0                	test   eax,eax
c0015e91:	74 24                	je     c0015eb7 <sendKeyboardToken(KeyboardToken)+0x45>
c0015e93:	8b 0d 88 e7 02 c0    	mov    ecx,DWORD PTR ds:0xc002e788
c0015e99:	83 ec 04             	sub    esp,0x4
c0015e9c:	68 a0 e7 02 c0       	push   0xc002e7a0
c0015ea1:	83 ec 08             	sub    esp,0x8
c0015ea4:	89 e2                	mov    edx,esp
c0015ea6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ea9:	89 02                	mov    DWORD PTR [edx],eax
c0015eab:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015eae:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015eb2:	ff d1                	call   ecx
c0015eb4:	83 c4 10             	add    esp,0x10
c0015eb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015eba:	66 3d 03 02          	cmp    ax,0x203
c0015ebe:	75 07                	jne    c0015ec7 <sendKeyboardToken(KeyboardToken)+0x55>
c0015ec0:	a0 a0 e8 02 c0       	mov    al,ds:0xc002e8a0
c0015ec5:	84 c0                	test   al,al
c0015ec7:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015ecb:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015ece:	a0 a8 eb 02 c0       	mov    al,ds:0xc002eba8
c0015ed3:	38 c2                	cmp    dl,al
c0015ed5:	74 1c                	je     c0015ef3 <sendKeyboardToken(KeyboardToken)+0x81>
c0015ed7:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015eda:	a2 a8 eb 02 c0       	mov    ds:0xc002eba8,al
c0015edf:	a0 a8 eb 02 c0       	mov    al,ds:0xc002eba8
c0015ee4:	0f b6 c0             	movzx  eax,al
c0015ee7:	83 ec 0c             	sub    esp,0xc
c0015eea:	50                   	push   eax
c0015eeb:	e8 d6 a6 ff ff       	call   c00105c6 <setTerminalScrollLock(bool)>
c0015ef0:	83 c4 10             	add    esp,0x10
c0015ef3:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015ef6:	84 c0                	test   al,al
c0015ef8:	0f 84 ae 00 00 00    	je     c0015fac <sendKeyboardToken(KeyboardToken)+0x13a>
c0015efe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f01:	66 3d 10 03          	cmp    ax,0x310
c0015f05:	75 06                	jne    c0015f0d <sendKeyboardToken(KeyboardToken)+0x9b>
c0015f07:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015f0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f10:	66 3d 11 03          	cmp    ax,0x311
c0015f14:	75 06                	jne    c0015f1c <sendKeyboardToken(KeyboardToken)+0xaa>
c0015f16:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015f1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f1f:	66 3d 12 03          	cmp    ax,0x312
c0015f23:	75 06                	jne    c0015f2b <sendKeyboardToken(KeyboardToken)+0xb9>
c0015f25:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015f2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f2e:	66 3d 13 03          	cmp    ax,0x313
c0015f32:	75 06                	jne    c0015f3a <sendKeyboardToken(KeyboardToken)+0xc8>
c0015f34:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015f3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f3d:	66 3d 14 03          	cmp    ax,0x314
c0015f41:	75 06                	jne    c0015f49 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015f43:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015f49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f4c:	66 3d 15 03          	cmp    ax,0x315
c0015f50:	75 06                	jne    c0015f58 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015f52:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015f58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f5b:	66 3d 16 03          	cmp    ax,0x316
c0015f5f:	75 06                	jne    c0015f67 <sendKeyboardToken(KeyboardToken)+0xf5>
c0015f61:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015f67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f6a:	66 3d 17 03          	cmp    ax,0x317
c0015f6e:	75 06                	jne    c0015f76 <sendKeyboardToken(KeyboardToken)+0x104>
c0015f70:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015f76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f79:	66 3d 18 03          	cmp    ax,0x318
c0015f7d:	75 06                	jne    c0015f85 <sendKeyboardToken(KeyboardToken)+0x113>
c0015f7f:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015f85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f88:	66 3d 19 03          	cmp    ax,0x319
c0015f8c:	75 06                	jne    c0015f94 <sendKeyboardToken(KeyboardToken)+0x122>
c0015f8e:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015f94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f97:	66 3d 1a 03          	cmp    ax,0x31a
c0015f9b:	0f 85 c9 00 00 00    	jne    c001606a <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015fa1:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015fa7:	e9 be 00 00 00       	jmp    c001606a <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015fac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015faf:	66 3d 10 03          	cmp    ax,0x310
c0015fb3:	75 0a                	jne    c0015fbf <sendKeyboardToken(KeyboardToken)+0x14d>
c0015fb5:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015fbb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fc2:	66 3d 11 03          	cmp    ax,0x311
c0015fc6:	75 0a                	jne    c0015fd2 <sendKeyboardToken(KeyboardToken)+0x160>
c0015fc8:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015fce:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fd5:	66 3d 12 03          	cmp    ax,0x312
c0015fd9:	75 0a                	jne    c0015fe5 <sendKeyboardToken(KeyboardToken)+0x173>
c0015fdb:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015fe1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fe5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fe8:	66 3d 13 03          	cmp    ax,0x313
c0015fec:	75 0a                	jne    c0015ff8 <sendKeyboardToken(KeyboardToken)+0x186>
c0015fee:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015ff4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ff8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ffb:	66 3d 14 03          	cmp    ax,0x314
c0015fff:	75 0a                	jne    c001600b <sendKeyboardToken(KeyboardToken)+0x199>
c0016001:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0016007:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001600b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001600e:	66 3d 15 03          	cmp    ax,0x315
c0016012:	75 0a                	jne    c001601e <sendKeyboardToken(KeyboardToken)+0x1ac>
c0016014:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001601a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001601e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016021:	66 3d 16 03          	cmp    ax,0x316
c0016025:	75 0a                	jne    c0016031 <sendKeyboardToken(KeyboardToken)+0x1bf>
c0016027:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001602d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016034:	66 3d 17 03          	cmp    ax,0x317
c0016038:	75 0a                	jne    c0016044 <sendKeyboardToken(KeyboardToken)+0x1d2>
c001603a:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0016040:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016044:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016047:	66 3d 18 03          	cmp    ax,0x318
c001604b:	75 0a                	jne    c0016057 <sendKeyboardToken(KeyboardToken)+0x1e5>
c001604d:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0016053:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016057:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001605a:	66 3d 19 03          	cmp    ax,0x319
c001605e:	75 0a                	jne    c001606a <sendKeyboardToken(KeyboardToken)+0x1f8>
c0016060:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0016066:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001606a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001606d:	66 3d 00 02          	cmp    ax,0x200
c0016071:	75 2c                	jne    c001609f <sendKeyboardToken(KeyboardToken)+0x22d>
c0016073:	a0 a0 eb 02 c0       	mov    al,ds:0xc002eba0
c0016078:	83 f0 01             	xor    eax,0x1
c001607b:	84 c0                	test   al,al
c001607d:	74 20                	je     c001609f <sendKeyboardToken(KeyboardToken)+0x22d>
c001607f:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0016084:	6a 01                	push   0x1
c0016086:	6a 00                	push   0x0
c0016088:	68 4e 5d 01 c0       	push   0xc0015d4e
c001608d:	50                   	push   eax
c001608e:	e8 a7 7e 00 00       	call   c001df3a <Process::createThread(void (*)(void*), void*, int)>
c0016093:	83 c4 10             	add    esp,0x10
c0016096:	c6 05 a0 eb 02 c0 01 	mov    BYTE PTR ds:0xc002eba0,0x1
c001609d:	eb 33                	jmp    c00160d2 <sendKeyboardToken(KeyboardToken)+0x260>
c001609f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160a2:	66 3d 01 02          	cmp    ax,0x201
c00160a6:	75 2a                	jne    c00160d2 <sendKeyboardToken(KeyboardToken)+0x260>
c00160a8:	a0 a0 eb 02 c0       	mov    al,ds:0xc002eba0
c00160ad:	83 f0 01             	xor    eax,0x1
c00160b0:	84 c0                	test   al,al
c00160b2:	74 1e                	je     c00160d2 <sendKeyboardToken(KeyboardToken)+0x260>
c00160b4:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c00160b9:	6a 01                	push   0x1
c00160bb:	6a 00                	push   0x0
c00160bd:	68 aa 5d 01 c0       	push   0xc0015daa
c00160c2:	50                   	push   eax
c00160c3:	e8 72 7e 00 00       	call   c001df3a <Process::createThread(void (*)(void*), void*, int)>
c00160c8:	83 c4 10             	add    esp,0x10
c00160cb:	c6 05 a0 eb 02 c0 01 	mov    BYTE PTR ds:0xc002eba0,0x1
c00160d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160d5:	66 3d 1d 03          	cmp    ax,0x31d
c00160d9:	75 06                	jne    c00160e1 <sendKeyboardToken(KeyboardToken)+0x26f>
c00160db:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00160e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160e4:	66 3d 1c 03          	cmp    ax,0x31c
c00160e8:	75 06                	jne    c00160f0 <sendKeyboardToken(KeyboardToken)+0x27e>
c00160ea:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00160f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160f3:	66 3d 1b 03          	cmp    ax,0x31b
c00160f7:	75 06                	jne    c00160ff <sendKeyboardToken(KeyboardToken)+0x28d>
c00160f9:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00160ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016102:	66 3d 1e 03          	cmp    ax,0x31e
c0016106:	75 06                	jne    c001610e <sendKeyboardToken(KeyboardToken)+0x29c>
c0016108:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001610e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016111:	66 3d 1f 03          	cmp    ax,0x31f
c0016115:	75 06                	jne    c001611d <sendKeyboardToken(KeyboardToken)+0x2ab>
c0016117:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001611d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016120:	66 3d 1a 03          	cmp    ax,0x31a
c0016124:	75 06                	jne    c001612c <sendKeyboardToken(KeyboardToken)+0x2ba>
c0016126:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001612c:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0016130:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016133:	83 f0 01             	xor    eax,0x1
c0016136:	84 c0                	test   al,al
c0016138:	74 77                	je     c00161b1 <sendKeyboardToken(KeyboardToken)+0x33f>
c001613a:	a0 a1 e8 02 c0       	mov    al,ds:0xc002e8a1
c001613f:	84 c0                	test   al,al
c0016141:	74 41                	je     c0016184 <sendKeyboardToken(KeyboardToken)+0x312>
c0016143:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016147:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c001614b:	74 2b                	je     c0016178 <sendKeyboardToken(KeyboardToken)+0x306>
c001614d:	8b 15 a4 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eba4
c0016153:	89 d0                	mov    eax,edx
c0016155:	c1 e0 02             	shl    eax,0x2
c0016158:	01 d0                	add    eax,edx
c001615a:	01 c0                	add    eax,eax
c001615c:	a3 a4 eb 02 c0       	mov    ds:0xc002eba4,eax
c0016161:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016164:	0f b7 c0             	movzx  eax,ax
c0016167:	8d 50 d0             	lea    edx,[eax-0x30]
c001616a:	a1 a4 eb 02 c0       	mov    eax,ds:0xc002eba4
c001616f:	01 d0                	add    eax,edx
c0016171:	a3 a4 eb 02 c0       	mov    ds:0xc002eba4,eax
c0016176:	eb 6d                	jmp    c00161e5 <sendKeyboardToken(KeyboardToken)+0x373>
c0016178:	c7 05 a4 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eba4,0x0
c0016182:	eb 61                	jmp    c00161e5 <sendKeyboardToken(KeyboardToken)+0x373>
c0016184:	a1 a4 eb 02 c0       	mov    eax,ds:0xc002eba4
c0016189:	85 c0                	test   eax,eax
c001618b:	74 18                	je     c00161a5 <sendKeyboardToken(KeyboardToken)+0x333>
c001618d:	a1 a4 eb 02 c0       	mov    eax,ds:0xc002eba4
c0016192:	0f b6 c0             	movzx  eax,al
c0016195:	83 ec 0c             	sub    esp,0xc
c0016198:	50                   	push   eax
c0016199:	e8 68 fc ff ff       	call   c0015e06 <sendKeyToTerminal(unsigned char)>
c001619e:	83 c4 10             	add    esp,0x10
c00161a1:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161a5:	c7 05 a4 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eba4,0x0
c00161af:	eb 34                	jmp    c00161e5 <sendKeyboardToken(KeyboardToken)+0x373>
c00161b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161b4:	66 3d 01 01          	cmp    ax,0x101
c00161b8:	75 2b                	jne    c00161e5 <sendKeyboardToken(KeyboardToken)+0x373>
c00161ba:	a1 a4 eb 02 c0       	mov    eax,ds:0xc002eba4
c00161bf:	85 c0                	test   eax,eax
c00161c1:	74 18                	je     c00161db <sendKeyboardToken(KeyboardToken)+0x369>
c00161c3:	a1 a4 eb 02 c0       	mov    eax,ds:0xc002eba4
c00161c8:	0f b6 c0             	movzx  eax,al
c00161cb:	83 ec 0c             	sub    esp,0xc
c00161ce:	50                   	push   eax
c00161cf:	e8 32 fc ff ff       	call   c0015e06 <sendKeyToTerminal(unsigned char)>
c00161d4:	83 c4 10             	add    esp,0x10
c00161d7:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161db:	c7 05 a4 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eba4,0x0
c00161e5:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00161e8:	83 f0 01             	xor    eax,0x1
c00161eb:	84 c0                	test   al,al
c00161ed:	74 4c                	je     c001623b <sendKeyboardToken(KeyboardToken)+0x3c9>
c00161ef:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00161f2:	83 f0 01             	xor    eax,0x1
c00161f5:	84 c0                	test   al,al
c00161f7:	74 42                	je     c001623b <sendKeyboardToken(KeyboardToken)+0x3c9>
c00161f9:	a0 a0 e8 02 c0       	mov    al,ds:0xc002e8a0
c00161fe:	83 f0 01             	xor    eax,0x1
c0016201:	84 c0                	test   al,al
c0016203:	74 36                	je     c001623b <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016205:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016208:	66 83 f8 1f          	cmp    ax,0x1f
c001620c:	76 09                	jbe    c0016217 <sendKeyboardToken(KeyboardToken)+0x3a5>
c001620e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016211:	66 83 f8 7e          	cmp    ax,0x7e
c0016215:	76 12                	jbe    c0016229 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0016217:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001621a:	66 83 f8 0a          	cmp    ax,0xa
c001621e:	74 09                	je     c0016229 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0016220:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016223:	66 83 f8 08          	cmp    ax,0x8
c0016227:	75 12                	jne    c001623b <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016229:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001622c:	0f b6 c0             	movzx  eax,al
c001622f:	83 ec 0c             	sub    esp,0xc
c0016232:	50                   	push   eax
c0016233:	e8 ce fb ff ff       	call   c0015e06 <sendKeyToTerminal(unsigned char)>
c0016238:	83 c4 10             	add    esp,0x10
c001623b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001623e:	83 f0 01             	xor    eax,0x1
c0016241:	84 c0                	test   al,al
c0016243:	74 4f                	je     c0016294 <sendKeyboardToken(KeyboardToken)+0x422>
c0016245:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016248:	83 f0 01             	xor    eax,0x1
c001624b:	84 c0                	test   al,al
c001624d:	74 45                	je     c0016294 <sendKeyboardToken(KeyboardToken)+0x422>
c001624f:	a0 a0 e8 02 c0       	mov    al,ds:0xc002e8a0
c0016254:	84 c0                	test   al,al
c0016256:	74 3c                	je     c0016294 <sendKeyboardToken(KeyboardToken)+0x422>
c0016258:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001625b:	66 83 f8 3f          	cmp    ax,0x3f
c001625f:	76 33                	jbe    c0016294 <sendKeyboardToken(KeyboardToken)+0x422>
c0016261:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016264:	66 83 f8 7f          	cmp    ax,0x7f
c0016268:	77 2a                	ja     c0016294 <sendKeyboardToken(KeyboardToken)+0x422>
c001626a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001626d:	88 c2                	mov    dl,al
c001626f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016272:	66 83 f8 5f          	cmp    ax,0x5f
c0016276:	76 04                	jbe    c001627c <sendKeyboardToken(KeyboardToken)+0x40a>
c0016278:	b0 20                	mov    al,0x20
c001627a:	eb 02                	jmp    c001627e <sendKeyboardToken(KeyboardToken)+0x40c>
c001627c:	b0 00                	mov    al,0x0
c001627e:	29 c2                	sub    edx,eax
c0016280:	88 d0                	mov    al,dl
c0016282:	83 e8 40             	sub    eax,0x40
c0016285:	0f b6 c0             	movzx  eax,al
c0016288:	83 ec 0c             	sub    esp,0xc
c001628b:	50                   	push   eax
c001628c:	e8 75 fb ff ff       	call   c0015e06 <sendKeyToTerminal(unsigned char)>
c0016291:	83 c4 10             	add    esp,0x10
c0016294:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016297:	66 3d 00 03          	cmp    ax,0x300
c001629b:	75 0f                	jne    c00162ac <sendKeyboardToken(KeyboardToken)+0x43a>
c001629d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00162a0:	83 f0 01             	xor    eax,0x1
c00162a3:	84 c0                	test   al,al
c00162a5:	74 05                	je     c00162ac <sendKeyboardToken(KeyboardToken)+0x43a>
c00162a7:	e8 4f ab ff ff       	call   c0010dfb <doTerminalCycle()>
c00162ac:	90                   	nop
c00162ad:	c9                   	leave  
c00162ae:	c3                   	ret    

c00162af <clearInternalKeybuffer(VgaText*)>:
c00162af:	55                   	push   ebp
c00162b0:	89 e5                	mov    ebp,esp
c00162b2:	83 ec 08             	sub    esp,0x8
c00162b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162b8:	05 34 11 00 00       	add    eax,0x1134
c00162bd:	83 ec 0c             	sub    esp,0xc
c00162c0:	50                   	push   eax
c00162c1:	e8 ce a4 fe ff       	call   c0000794 <strlen>
c00162c6:	83 c4 10             	add    esp,0x10
c00162c9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00162cc:	81 c2 34 11 00 00    	add    edx,0x1134
c00162d2:	83 ec 04             	sub    esp,0x4
c00162d5:	50                   	push   eax
c00162d6:	6a 00                	push   0x0
c00162d8:	52                   	push   edx
c00162d9:	e8 9a a4 fe ff       	call   c0000778 <memset>
c00162de:	83 c4 10             	add    esp,0x10
c00162e1:	90                   	nop
c00162e2:	c9                   	leave  
c00162e3:	c3                   	ret    

c00162e4 <readKeyboard(VgaText*, char*, unsigned long)>:
c00162e4:	55                   	push   ebp
c00162e5:	89 e5                	mov    ebp,esp
c00162e7:	83 ec 18             	sub    esp,0x18
c00162ea:	fb                   	sti    
c00162eb:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00162f2:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00162f6:	0f 84 8a 00 00 00    	je     c0016386 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c00162fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162ff:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0016305:	84 c0                	test   al,al
c0016307:	75 11                	jne    c001631a <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c0016309:	e8 fa 7a 00 00       	call   c001de08 <lockScheduler()>
c001630e:	e8 31 7e 00 00       	call   c001e144 <schedule()>
c0016313:	e8 f2 7a 00 00       	call   c001de0a <unlockScheduler()>
c0016318:	eb e2                	jmp    c00162fc <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c001631a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001631d:	8d 50 01             	lea    edx,[eax+0x1]
c0016320:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0016323:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016326:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c001632c:	88 10                	mov    BYTE PTR [eax],dl
c001632e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016331:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0016337:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001633a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001633d:	05 34 11 00 00       	add    eax,0x1134
c0016342:	83 ec 0c             	sub    esp,0xc
c0016345:	50                   	push   eax
c0016346:	e8 49 a4 fe ff       	call   c0000794 <strlen>
c001634b:	83 c4 10             	add    esp,0x10
c001634e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016351:	81 c2 34 11 00 00    	add    edx,0x1134
c0016357:	8d 4a 01             	lea    ecx,[edx+0x1]
c001635a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001635d:	81 c2 34 11 00 00    	add    edx,0x1134
c0016363:	83 ec 04             	sub    esp,0x4
c0016366:	50                   	push   eax
c0016367:	51                   	push   ecx
c0016368:	52                   	push   edx
c0016369:	e8 0e a3 fe ff       	call   c000067c <memmove>
c001636e:	83 c4 10             	add    esp,0x10
c0016371:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0016374:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0016377:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c001637b:	0f 85 71 ff ff ff    	jne    c00162f2 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0016381:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016384:	eb 03                	jmp    c0016389 <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c0016386:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016389:	c9                   	leave  
c001638a:	c3                   	ret    
c001638b:	90                   	nop

c001638c <Keyboard::Keyboard(char const*)>:
c001638c:	83 ec 0c             	sub    esp,0xc
c001638f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016393:	83 ec 08             	sub    esp,0x8
c0016396:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001639a:	50                   	push   eax
c001639b:	e8 a8 e1 ff ff       	call   c0014548 <Device::Device(char const*)>
c00163a0:	83 c4 10             	add    esp,0x10
c00163a3:	ba d4 b2 02 c0       	mov    edx,0xc002b2d4
c00163a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163ac:	89 10                	mov    DWORD PTR [eax],edx
c00163ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163b2:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00163bc:	c6 05 84 e7 02 c0 01 	mov    BYTE PTR ds:0xc002e784,0x1
c00163c3:	90                   	nop
c00163c4:	83 c4 0c             	add    esp,0xc
c00163c7:	c3                   	ret    

c00163c8 <Keyboard::~Keyboard()>:
c00163c8:	83 ec 0c             	sub    esp,0xc
c00163cb:	ba d4 b2 02 c0       	mov    edx,0xc002b2d4
c00163d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163d4:	89 10                	mov    DWORD PTR [eax],edx
c00163d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163da:	83 ec 0c             	sub    esp,0xc
c00163dd:	50                   	push   eax
c00163de:	e8 47 de ff ff       	call   c001422a <Device::~Device()>
c00163e3:	83 c4 10             	add    esp,0x10
c00163e6:	90                   	nop
c00163e7:	83 c4 0c             	add    esp,0xc
c00163ea:	c3                   	ret    
c00163eb:	90                   	nop

c00163ec <Keyboard::~Keyboard()>:
c00163ec:	83 ec 0c             	sub    esp,0xc
c00163ef:	83 ec 0c             	sub    esp,0xc
c00163f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163f6:	e8 cd ff ff ff       	call   c00163c8 <Keyboard::~Keyboard()>
c00163fb:	83 c4 10             	add    esp,0x10
c00163fe:	83 ec 08             	sub    esp,0x8
c0016401:	68 5c 01 00 00       	push   0x15c
c0016406:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001640a:	e8 42 ca ff ff       	call   c0012e51 <operator delete(void*, unsigned long)>
c001640f:	83 c4 10             	add    esp,0x10
c0016412:	83 c4 0c             	add    esp,0xc
c0016415:	c3                   	ret    

c0016416 <LogicalDisk::close(int, int, void*)>:
c0016416:	83 c8 ff             	or     eax,0xffffffff
c0016419:	c3                   	ret    

c001641a <LogicalDisk::~LogicalDisk()>:
c001641a:	83 ec 0c             	sub    esp,0xc
c001641d:	ba 84 b3 02 c0       	mov    edx,0xc002b384
c0016422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016426:	89 10                	mov    DWORD PTR [eax],edx
c0016428:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001642c:	83 ec 0c             	sub    esp,0xc
c001642f:	50                   	push   eax
c0016430:	e8 f5 dd ff ff       	call   c001422a <Device::~Device()>
c0016435:	83 c4 10             	add    esp,0x10
c0016438:	90                   	nop
c0016439:	83 c4 0c             	add    esp,0xc
c001643c:	c3                   	ret    
c001643d:	90                   	nop

c001643e <LogicalDisk::~LogicalDisk()>:
c001643e:	83 ec 0c             	sub    esp,0xc
c0016441:	83 ec 0c             	sub    esp,0xc
c0016444:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016448:	e8 cd ff ff ff       	call   c001641a <LogicalDisk::~LogicalDisk()>
c001644d:	83 c4 10             	add    esp,0x10
c0016450:	83 ec 08             	sub    esp,0x8
c0016453:	68 74 01 00 00       	push   0x174
c0016458:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001645c:	e8 f0 c9 ff ff       	call   c0012e51 <operator delete(void*, unsigned long)>
c0016461:	83 c4 10             	add    esp,0x10
c0016464:	83 c4 0c             	add    esp,0xc
c0016467:	c3                   	ret    

c0016468 <LogicalDisk::open(int, int, void*)>:
c0016468:	83 ec 18             	sub    esp,0x18
c001646b:	68 00 b3 02 c0       	push   0xc002b300
c0016470:	e8 6e 41 00 00       	call   c001a5e3 <Krnl::panic(char const*)>
c0016475:	83 c8 ff             	or     eax,0xffffffff
c0016478:	83 c4 1c             	add    esp,0x1c
c001647b:	c3                   	ret    

c001647c <LogicalDisk::absoluteToRelative(unsigned long long)>:
c001647c:	53                   	push   ebx
c001647d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016481:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016485:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016489:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c001648f:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0016495:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c001649b:	77 10                	ja     c00164ad <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c001649d:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00164a3:	89 d3                	mov    ebx,edx
c00164a5:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00164ab:	72 05                	jb     c00164b2 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00164ad:	83 c8 ff             	or     eax,0xffffffff
c00164b0:	89 c2                	mov    edx,eax
c00164b2:	5b                   	pop    ebx
c00164b3:	c3                   	ret    

c00164b4 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00164b4:	56                   	push   esi
c00164b5:	83 c8 ff             	or     eax,0xffffffff
c00164b8:	53                   	push   ebx
c00164b9:	89 c2                	mov    edx,eax
c00164bb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00164bf:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00164c3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00164c7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00164cd:	77 27                	ja     c00164f6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00164cf:	89 d8                	mov    eax,ebx
c00164d1:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c00164d7:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c00164dd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00164e2:	89 c2                	mov    edx,eax
c00164e4:	73 10                	jae    c00164f6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00164e6:	89 c8                	mov    eax,ecx
c00164e8:	89 da                	mov    edx,ebx
c00164ea:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00164f0:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c00164f6:	5b                   	pop    ebx
c00164f7:	5e                   	pop    esi
c00164f8:	c3                   	ret    
c00164f9:	90                   	nop

c00164fa <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c00164fa:	83 ec 1c             	sub    esp,0x1c
c00164fd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016501:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016505:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016509:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001650d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016511:	89 04 24             	mov    DWORD PTR [esp],eax
c0016514:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016518:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001651c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016520:	83 ec 08             	sub    esp,0x8
c0016523:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016527:	50                   	push   eax
c0016528:	e8 1b e0 ff ff       	call   c0014548 <Device::Device(char const*)>
c001652d:	83 c4 10             	add    esp,0x10
c0016530:	ba 84 b3 02 c0       	mov    edx,0xc002b384
c0016535:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016539:	89 10                	mov    DWORD PTR [eax],edx
c001653b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001653f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016546:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001654a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016551:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016555:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001655f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016563:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016567:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001656b:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0016571:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0016577:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001657b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001657e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016582:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0016588:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c001658e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016592:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016596:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c001659c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165a0:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00165aa:	90                   	nop
c00165ab:	83 c4 1c             	add    esp,0x1c
c00165ae:	c3                   	ret    
c00165af:	90                   	nop

c00165b0 <LogicalDisk::assignDriveLetter()>:
c00165b0:	55                   	push   ebp
c00165b1:	57                   	push   edi
c00165b2:	56                   	push   esi
c00165b3:	53                   	push   ebx
c00165b4:	83 ec 14             	sub    esp,0x14
c00165b7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00165bb:	8b 3d c0 eb 02 c0    	mov    edi,DWORD PTR ds:0xc002ebc0
c00165c1:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00165c7:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00165cb:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00165d1:	8b 3d c4 eb 02 c0    	mov    edi,DWORD PTR ds:0xc002ebc4
c00165d7:	3c 01                	cmp    al,0x1
c00165d9:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00165dd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00165e1:	19 c0                	sbb    eax,eax
c00165e3:	83 e0 02             	and    eax,0x2
c00165e6:	83 c0 41             	add    eax,0x41
c00165e9:	0f be e8             	movsx  ebp,al
c00165ec:	3c 43                	cmp    al,0x43
c00165ee:	75 10                	jne    c0016600 <LogicalDisk::assignDriveLetter()+0x50>
c00165f0:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c00165f7:	75 5d                	jne    c0016656 <LogicalDisk::assignDriveLetter()+0xa6>
c00165f9:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00165fe:	75 56                	jne    c0016656 <LogicalDisk::assignDriveLetter()+0xa6>
c0016600:	8d 75 bf             	lea    esi,[ebp-0x41]
c0016603:	ba 01 00 00 00       	mov    edx,0x1
c0016608:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c001660c:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0016610:	d3 e2                	shl    edx,cl
c0016612:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016616:	89 d7                	mov    edi,edx
c0016618:	89 d6                	mov    esi,edx
c001661a:	c1 ff 1f             	sar    edi,0x1f
c001661d:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0016621:	21 f9                	and    ecx,edi
c0016623:	09 d1                	or     ecx,edx
c0016625:	75 2f                	jne    c0016656 <LogicalDisk::assignDriveLetter()+0xa6>
c0016627:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001662b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001662f:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0016635:	09 f2                	or     edx,esi
c0016637:	89 15 c0 eb 02 c0    	mov    DWORD PTR ds:0xc002ebc0,edx
c001663d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016641:	09 fa                	or     edx,edi
c0016643:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0016647:	89 15 c4 eb 02 c0    	mov    DWORD PTR ds:0xc002ebc4,edx
c001664d:	89 1c bd e0 eb 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1420],ebx
c0016654:	eb 08                	jmp    c001665e <LogicalDisk::assignDriveLetter()+0xae>
c0016656:	45                   	inc    ebp
c0016657:	40                   	inc    eax
c0016658:	3c 5b                	cmp    al,0x5b
c001665a:	75 90                	jne    c00165ec <LogicalDisk::assignDriveLetter()+0x3c>
c001665c:	31 c0                	xor    eax,eax
c001665e:	83 c4 14             	add    esp,0x14
c0016661:	5b                   	pop    ebx
c0016662:	5e                   	pop    esi
c0016663:	5f                   	pop    edi
c0016664:	5d                   	pop    ebp
c0016665:	c3                   	ret    

c0016666 <LogicalDisk::mount()>:
c0016666:	56                   	push   esi
c0016667:	53                   	push   ebx
c0016668:	51                   	push   ecx
c0016669:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001666d:	8b 1d 4c e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e74c
c0016673:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c001667d:	85 db                	test   ebx,ebx
c001667f:	74 50                	je     c00166d1 <LogicalDisk::mount()+0x6b>
c0016681:	e8 6d 77 00 00       	call   c001ddf3 <getIRQNestingLevel()>
c0016686:	52                   	push   edx
c0016687:	52                   	push   edx
c0016688:	50                   	push   eax
c0016689:	68 24 b3 02 c0       	push   0xc002b324
c001668e:	e8 9e c8 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0016693:	83 c4 0c             	add    esp,0xc
c0016696:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001669d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001669f:	83 e8 41             	sub    eax,0x41
c00166a2:	50                   	push   eax
c00166a3:	56                   	push   esi
c00166a4:	53                   	push   ebx
c00166a5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00166a8:	83 c4 10             	add    esp,0x10
c00166ab:	84 c0                	test   al,al
c00166ad:	74 08                	je     c00166b7 <LogicalDisk::mount()+0x51>
c00166af:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00166b5:	eb 1c                	jmp    c00166d3 <LogicalDisk::mount()+0x6d>
c00166b7:	e8 37 77 00 00       	call   c001ddf3 <getIRQNestingLevel()>
c00166bc:	51                   	push   ecx
c00166bd:	51                   	push   ecx
c00166be:	50                   	push   eax
c00166bf:	68 3f b3 02 c0       	push   0xc002b33f
c00166c4:	e8 68 c8 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c00166c9:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00166cc:	83 c4 10             	add    esp,0x10
c00166cf:	eb ac                	jmp    c001667d <LogicalDisk::mount()+0x17>
c00166d1:	31 c0                	xor    eax,eax
c00166d3:	5a                   	pop    edx
c00166d4:	5b                   	pop    ebx
c00166d5:	5e                   	pop    esi
c00166d6:	c3                   	ret    
c00166d7:	90                   	nop

c00166d8 <LogicalDisk::unmount()>:
c00166d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00166dc:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00166e6:	c3                   	ret    
c00166e7:	90                   	nop

c00166e8 <LogicalDisk::eject()>:
c00166e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00166ec:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00166f2:	8b 10                	mov    edx,DWORD PTR [eax]
c00166f4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00166f8:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c00166fb:	90                   	nop

c00166fc <LogicalDisk::unassignDriveLetter()>:
c00166fc:	57                   	push   edi
c00166fd:	56                   	push   esi
c00166fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016702:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0016709:	84 c9                	test   cl,cl
c001670b:	75 0f                	jne    c001671c <LogicalDisk::unassignDriveLetter()+0x20>
c001670d:	c7 44 24 0c 5a b3 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b35a
c0016715:	5e                   	pop    esi
c0016716:	5f                   	pop    edi
c0016717:	e9 c7 3e 00 00       	jmp    c001a5e3 <Krnl::panic(char const*)>
c001671c:	83 e9 41             	sub    ecx,0x41
c001671f:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0016726:	b8 01 00 00 00       	mov    eax,0x1
c001672b:	c7 04 8d e0 eb 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1420],0x0
c0016736:	d3 e0                	shl    eax,cl
c0016738:	89 c7                	mov    edi,eax
c001673a:	f7 d0                	not    eax
c001673c:	c1 ff 1f             	sar    edi,0x1f
c001673f:	21 05 c0 eb 02 c0    	and    DWORD PTR ds:0xc002ebc0,eax
c0016745:	89 fe                	mov    esi,edi
c0016747:	f7 d6                	not    esi
c0016749:	21 35 c4 eb 02 c0    	and    DWORD PTR ds:0xc002ebc4,esi
c001674f:	5e                   	pop    esi
c0016750:	5f                   	pop    edi
c0016751:	c3                   	ret    

c0016752 <LogicalDisk::read(unsigned long long, int, void*)>:
c0016752:	57                   	push   edi
c0016753:	56                   	push   esi
c0016754:	53                   	push   ebx
c0016755:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016759:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001675d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016761:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016765:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001676b:	77 41                	ja     c00167ae <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001676d:	99                   	cdq    
c001676e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016774:	01 c8                	add    eax,ecx
c0016776:	11 da                	adc    edx,ebx
c0016778:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001677e:	19 d7                	sbb    edi,edx
c0016780:	72 33                	jb     c00167b5 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0016782:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016788:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001678e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016792:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016796:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001679c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00167a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00167a6:	5b                   	pop    ebx
c00167a7:	5e                   	pop    esi
c00167a8:	5f                   	pop    edi
c00167a9:	e9 b0 0a 00 00       	jmp    c001725e <VCache::read(unsigned long long, int, void*)>
c00167ae:	b8 05 00 00 00       	mov    eax,0x5
c00167b3:	eb 05                	jmp    c00167ba <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00167b5:	b8 07 00 00 00       	mov    eax,0x7
c00167ba:	5b                   	pop    ebx
c00167bb:	5e                   	pop    esi
c00167bc:	5f                   	pop    edi
c00167bd:	c3                   	ret    

c00167be <LogicalDisk::write(unsigned long long, int, void*)>:
c00167be:	57                   	push   edi
c00167bf:	56                   	push   esi
c00167c0:	53                   	push   ebx
c00167c1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00167c5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00167c9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00167cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00167d1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00167d7:	77 41                	ja     c001681a <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00167d9:	99                   	cdq    
c00167da:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00167e0:	01 c8                	add    eax,ecx
c00167e2:	11 da                	adc    edx,ebx
c00167e4:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00167ea:	19 d7                	sbb    edi,edx
c00167ec:	72 33                	jb     c0016821 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00167ee:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00167f4:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00167fa:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00167fe:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016802:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016808:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001680e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016812:	5b                   	pop    ebx
c0016813:	5e                   	pop    esi
c0016814:	5f                   	pop    edi
c0016815:	e9 4e 09 00 00       	jmp    c0017168 <VCache::write(unsigned long long, int, void*)>
c001681a:	b8 05 00 00 00       	mov    eax,0x5
c001681f:	eb 05                	jmp    c0016826 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0016821:	b8 07 00 00 00       	mov    eax,0x7
c0016826:	5b                   	pop    ebx
c0016827:	5e                   	pop    esi
c0016828:	5f                   	pop    edi
c0016829:	c3                   	ret    

c001682a <Mouse::Mouse(char const*)>:
c001682a:	83 ec 0c             	sub    esp,0xc
c001682d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016831:	83 ec 08             	sub    esp,0x8
c0016834:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016838:	50                   	push   eax
c0016839:	e8 0a dd ff ff       	call   c0014548 <Device::Device(char const*)>
c001683e:	83 c4 10             	add    esp,0x10
c0016841:	ba b0 b3 02 c0       	mov    edx,0xc002b3b0
c0016846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001684a:	89 10                	mov    DWORD PTR [eax],edx
c001684c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016850:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001685a:	90                   	nop
c001685b:	83 c4 0c             	add    esp,0xc
c001685e:	c3                   	ret    
c001685f:	90                   	nop

c0016860 <Mouse::~Mouse()>:
c0016860:	83 ec 0c             	sub    esp,0xc
c0016863:	ba b0 b3 02 c0       	mov    edx,0xc002b3b0
c0016868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001686c:	89 10                	mov    DWORD PTR [eax],edx
c001686e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016872:	83 ec 0c             	sub    esp,0xc
c0016875:	50                   	push   eax
c0016876:	e8 af d9 ff ff       	call   c001422a <Device::~Device()>
c001687b:	83 c4 10             	add    esp,0x10
c001687e:	90                   	nop
c001687f:	83 c4 0c             	add    esp,0xc
c0016882:	c3                   	ret    
c0016883:	90                   	nop

c0016884 <Mouse::~Mouse()>:
c0016884:	83 ec 0c             	sub    esp,0xc
c0016887:	83 ec 0c             	sub    esp,0xc
c001688a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001688e:	e8 cd ff ff ff       	call   c0016860 <Mouse::~Mouse()>
c0016893:	83 c4 10             	add    esp,0x10
c0016896:	83 ec 08             	sub    esp,0x8
c0016899:	68 58 01 00 00       	push   0x158
c001689e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168a2:	e8 aa c5 ff ff       	call   c0012e51 <operator delete(void*, unsigned long)>
c00168a7:	83 c4 10             	add    esp,0x10
c00168aa:	83 c4 0c             	add    esp,0xc
c00168ad:	c3                   	ret    

c00168ae <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00168ae:	55                   	push   ebp
c00168af:	57                   	push   edi
c00168b0:	56                   	push   esi
c00168b1:	53                   	push   ebx
c00168b2:	81 ec 28 01 00 00    	sub    esp,0x128
c00168b8:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00168bf:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00168c6:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00168cd:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00168d4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00168d8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00168dc:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00168e3:	e8 5c dd ff ff       	call   c0014644 <Device::getName()>
c00168e8:	5a                   	pop    edx
c00168e9:	59                   	pop    ecx
c00168ea:	50                   	push   eax
c00168eb:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00168ef:	55                   	push   ebp
c00168f0:	e8 3f 9f fe ff       	call   c0000834 <strcpy>
c00168f5:	5b                   	pop    ebx
c00168f6:	58                   	pop    eax
c00168f7:	68 d4 b3 02 c0       	push   0xc002b3d4
c00168fc:	55                   	push   ebp
c00168fd:	e8 72 a0 fe ff       	call   c0000974 <strcat>
c0016902:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016909:	e8 32 8f ff ff       	call   c000f840 <malloc>
c001690e:	83 c4 0c             	add    esp,0xc
c0016911:	89 c3                	mov    ebx,eax
c0016913:	57                   	push   edi
c0016914:	56                   	push   esi
c0016915:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016919:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001691d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016924:	55                   	push   ebp
c0016925:	50                   	push   eax
c0016926:	e8 cf fb ff ff       	call   c00164fa <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001692b:	83 c4 14             	add    esp,0x14
c001692e:	53                   	push   ebx
c001692f:	e8 7c fc ff ff       	call   c00165b0 <LogicalDisk::assignDriveLetter()>
c0016934:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016937:	89 c6                	mov    esi,eax
c0016939:	e8 28 fd ff ff       	call   c0016666 <LogicalDisk::mount()>
c001693e:	58                   	pop    eax
c001693f:	5a                   	pop    edx
c0016940:	53                   	push   ebx
c0016941:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016948:	e8 0b da ff ff       	call   c0014358 <Device::addChild(Device*)>
c001694d:	59                   	pop    ecx
c001694e:	89 f0                	mov    eax,esi
c0016950:	5b                   	pop    ebx
c0016951:	0f be f0             	movsx  esi,al
c0016954:	56                   	push   esi
c0016955:	68 df b3 02 c0       	push   0xc002b3df
c001695a:	e8 d2 c5 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001695f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016965:	5b                   	pop    ebx
c0016966:	5e                   	pop    esi
c0016967:	5f                   	pop    edi
c0016968:	5d                   	pop    ebp
c0016969:	c3                   	ret    

c001696a <createPartitionsForDisk(PhysicalDisk*)>:
c001696a:	55                   	push   ebp
c001696b:	57                   	push   edi
c001696c:	56                   	push   esi
c001696d:	53                   	push   ebx
c001696e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016974:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001697b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016981:	3d 00 02 00 00       	cmp    eax,0x200
c0016986:	74 27                	je     c00169af <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016988:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001698e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016994:	83 ec 10             	sub    esp,0x10
c0016997:	0f a4 f7 0a          	shld   edi,esi,0xa
c001699b:	99                   	cdq    
c001699c:	c1 e6 0a             	shl    esi,0xa
c001699f:	52                   	push   edx
c00169a0:	89 fd                	mov    ebp,edi
c00169a2:	50                   	push   eax
c00169a3:	55                   	push   ebp
c00169a4:	56                   	push   esi
c00169a5:	e8 42 00 01 00       	call   c00269ec <__udivdi3>
c00169aa:	e9 b1 00 00 00       	jmp    c0016a60 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00169af:	83 ec 0c             	sub    esp,0xc
c00169b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00169b4:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00169b8:	56                   	push   esi
c00169b9:	6a 01                	push   0x1
c00169bb:	6a 00                	push   0x0
c00169bd:	6a 00                	push   0x0
c00169bf:	53                   	push   ebx
c00169c0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00169c3:	83 c4 20             	add    esp,0x20
c00169c6:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00169ce:	75 0a                	jne    c00169da <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00169d0:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00169d8:	74 2c                	je     c0016a06 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00169da:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00169e0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00169e6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00169ec:	83 ec 10             	sub    esp,0x10
c00169ef:	0f a4 c2 0a          	shld   edx,eax,0xa
c00169f3:	89 f7                	mov    edi,esi
c00169f5:	c1 e0 0a             	shl    eax,0xa
c00169f8:	c1 ff 1f             	sar    edi,0x1f
c00169fb:	57                   	push   edi
c00169fc:	56                   	push   esi
c00169fd:	52                   	push   edx
c00169fe:	50                   	push   eax
c00169ff:	e8 e8 ff 00 00       	call   c00269ec <__udivdi3>
c0016a04:	eb 5a                	jmp    c0016a60 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016a06:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016a0d:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016a14:	83 e1 7f             	and    ecx,0x7f
c0016a17:	83 e0 7f             	and    eax,0x7f
c0016a1a:	01 c1                	add    ecx,eax
c0016a1c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016a23:	83 e0 7f             	and    eax,0x7f
c0016a26:	01 c1                	add    ecx,eax
c0016a28:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016a2f:	83 e0 7f             	and    eax,0x7f
c0016a32:	00 c1                	add    cl,al
c0016a34:	74 41                	je     c0016a77 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016a36:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016a3c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016a42:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016a48:	83 ec 10             	sub    esp,0x10
c0016a4b:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016a4f:	89 f7                	mov    edi,esi
c0016a51:	c1 e0 0a             	shl    eax,0xa
c0016a54:	c1 ff 1f             	sar    edi,0x1f
c0016a57:	57                   	push   edi
c0016a58:	56                   	push   esi
c0016a59:	52                   	push   edx
c0016a5a:	50                   	push   eax
c0016a5b:	e8 8c ff 00 00       	call   c00269ec <__udivdi3>
c0016a60:	83 c4 14             	add    esp,0x14
c0016a63:	52                   	push   edx
c0016a64:	50                   	push   eax
c0016a65:	6a 00                	push   0x0
c0016a67:	6a 00                	push   0x0
c0016a69:	53                   	push   ebx
c0016a6a:	e8 3f fe ff ff       	call   c00168ae <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016a6f:	83 c4 20             	add    esp,0x20
c0016a72:	e9 79 01 00 00       	jmp    c0016bf0 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016a77:	89 f0                	mov    eax,esi
c0016a79:	31 f6                	xor    esi,esi
c0016a7b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016a82:	75 02                	jne    c0016a86 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016a84:	89 f1                	mov    ecx,esi
c0016a86:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016a8d:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016a94:	c1 e2 08             	shl    edx,0x8
c0016a97:	c1 e7 10             	shl    edi,0x10
c0016a9a:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016aa2:	09 fa                	or     edx,edi
c0016aa4:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016aac:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016ab3:	83 c0 10             	add    eax,0x10
c0016ab6:	09 fa                	or     edx,edi
c0016ab8:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016abf:	c1 e7 18             	shl    edi,0x18
c0016ac2:	09 fa                	or     edx,edi
c0016ac4:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016acb:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016acf:	c1 e7 10             	shl    edi,0x10
c0016ad2:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016ad9:	c1 e2 08             	shl    edx,0x8
c0016adc:	09 fa                	or     edx,edi
c0016ade:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016ae5:	09 fa                	or     edx,edi
c0016ae7:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016aee:	c1 e7 18             	shl    edi,0x18
c0016af1:	09 fa                	or     edx,edi
c0016af3:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016af7:	46                   	inc    esi
c0016af8:	83 fe 04             	cmp    esi,0x4
c0016afb:	0f 85 7a ff ff ff    	jne    c0016a7b <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016b01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b05:	83 f0 01             	xor    eax,0x1
c0016b08:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016b0c:	75 57                	jne    c0016b65 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016b0e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b12:	83 f0 01             	xor    eax,0x1
c0016b15:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016b19:	75 4a                	jne    c0016b65 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016b1b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016b1f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016b27:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016b2f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016b35:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016b3b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016b41:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016b45:	89 f7                	mov    edi,esi
c0016b47:	c1 e0 0a             	shl    eax,0xa
c0016b4a:	c1 ff 1f             	sar    edi,0x1f
c0016b4d:	57                   	push   edi
c0016b4e:	56                   	push   esi
c0016b4f:	52                   	push   edx
c0016b50:	50                   	push   eax
c0016b51:	e8 96 fe 00 00       	call   c00269ec <__udivdi3>
c0016b56:	83 c4 10             	add    esp,0x10
c0016b59:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016b5d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016b61:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016b65:	84 c9                	test   cl,cl
c0016b67:	74 53                	je     c0016bbc <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016b69:	0f b6 c9             	movzx  ecx,cl
c0016b6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b70:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016b74:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016b78:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016b7c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016b80:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016b84:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016b88:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016b8c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016b90:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016b94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016b98:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016b9c:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016ba0:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016ba4:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016ba8:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016bac:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016bb0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016bb4:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016bb8:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016bbc:	31 ed                	xor    ebp,ebp
c0016bbe:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016bc2:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016bc6:	89 f8                	mov    eax,edi
c0016bc8:	09 f0                	or     eax,esi
c0016bca:	74 1e                	je     c0016bea <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016bcc:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016bd0:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016bd4:	89 d1                	mov    ecx,edx
c0016bd6:	09 c1                	or     ecx,eax
c0016bd8:	74 10                	je     c0016bea <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016bda:	83 ec 0c             	sub    esp,0xc
c0016bdd:	57                   	push   edi
c0016bde:	56                   	push   esi
c0016bdf:	52                   	push   edx
c0016be0:	50                   	push   eax
c0016be1:	53                   	push   ebx
c0016be2:	e8 c7 fc ff ff       	call   c00168ae <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016be7:	83 c4 20             	add    esp,0x20
c0016bea:	45                   	inc    ebp
c0016beb:	83 fd 04             	cmp    ebp,0x4
c0016bee:	75 ce                	jne    c0016bbe <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016bf0:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016bf6:	5b                   	pop    ebx
c0016bf7:	5e                   	pop    esi
c0016bf8:	5f                   	pop    edi
c0016bf9:	5d                   	pop    ebp
c0016bfa:	c3                   	ret    
c0016bfb:	90                   	nop

c0016bfc <Serial::Serial(char const*)>:
c0016bfc:	83 ec 0c             	sub    esp,0xc
c0016bff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c03:	83 ec 08             	sub    esp,0x8
c0016c06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c0a:	50                   	push   eax
c0016c0b:	e8 38 d9 ff ff       	call   c0014548 <Device::Device(char const*)>
c0016c10:	83 c4 10             	add    esp,0x10
c0016c13:	ba 0c b4 02 c0       	mov    edx,0xc002b40c
c0016c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c1c:	89 10                	mov    DWORD PTR [eax],edx
c0016c1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c22:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016c2c:	90                   	nop
c0016c2d:	83 c4 0c             	add    esp,0xc
c0016c30:	c3                   	ret    
c0016c31:	90                   	nop

c0016c32 <Serial::~Serial()>:
c0016c32:	83 ec 0c             	sub    esp,0xc
c0016c35:	ba 0c b4 02 c0       	mov    edx,0xc002b40c
c0016c3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c3e:	89 10                	mov    DWORD PTR [eax],edx
c0016c40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c44:	83 ec 0c             	sub    esp,0xc
c0016c47:	50                   	push   eax
c0016c48:	e8 dd d5 ff ff       	call   c001422a <Device::~Device()>
c0016c4d:	83 c4 10             	add    esp,0x10
c0016c50:	90                   	nop
c0016c51:	83 c4 0c             	add    esp,0xc
c0016c54:	c3                   	ret    
c0016c55:	90                   	nop

c0016c56 <Serial::~Serial()>:
c0016c56:	83 ec 0c             	sub    esp,0xc
c0016c59:	83 ec 0c             	sub    esp,0xc
c0016c5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c60:	e8 cd ff ff ff       	call   c0016c32 <Serial::~Serial()>
c0016c65:	83 c4 10             	add    esp,0x10
c0016c68:	83 ec 08             	sub    esp,0x8
c0016c6b:	68 58 01 00 00       	push   0x158
c0016c70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c74:	e8 d8 c1 ff ff       	call   c0012e51 <operator delete(void*, unsigned long)>
c0016c79:	83 c4 10             	add    esp,0x10
c0016c7c:	83 c4 0c             	add    esp,0xc
c0016c7f:	c3                   	ret    

c0016c80 <Timer::Timer(char const*)>:
c0016c80:	83 ec 0c             	sub    esp,0xc
c0016c83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c87:	83 ec 08             	sub    esp,0x8
c0016c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c8e:	50                   	push   eax
c0016c8f:	e8 b4 d8 ff ff       	call   c0014548 <Device::Device(char const*)>
c0016c94:	83 c4 10             	add    esp,0x10
c0016c97:	ba 50 b4 02 c0       	mov    edx,0xc002b450
c0016c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ca0:	89 10                	mov    DWORD PTR [eax],edx
c0016ca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ca6:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016cb0:	90                   	nop
c0016cb1:	83 c4 0c             	add    esp,0xc
c0016cb4:	c3                   	ret    
c0016cb5:	90                   	nop

c0016cb6 <Timer::~Timer()>:
c0016cb6:	83 ec 0c             	sub    esp,0xc
c0016cb9:	ba 50 b4 02 c0       	mov    edx,0xc002b450
c0016cbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cc2:	89 10                	mov    DWORD PTR [eax],edx
c0016cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cc8:	83 ec 0c             	sub    esp,0xc
c0016ccb:	50                   	push   eax
c0016ccc:	e8 59 d5 ff ff       	call   c001422a <Device::~Device()>
c0016cd1:	83 c4 10             	add    esp,0x10
c0016cd4:	90                   	nop
c0016cd5:	83 c4 0c             	add    esp,0xc
c0016cd8:	c3                   	ret    
c0016cd9:	90                   	nop

c0016cda <Timer::~Timer()>:
c0016cda:	83 ec 0c             	sub    esp,0xc
c0016cdd:	83 ec 0c             	sub    esp,0xc
c0016ce0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ce4:	e8 cd ff ff ff       	call   c0016cb6 <Timer::~Timer()>
c0016ce9:	83 c4 10             	add    esp,0x10
c0016cec:	83 ec 08             	sub    esp,0x8
c0016cef:	68 5c 01 00 00       	push   0x15c
c0016cf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cf8:	e8 54 c1 ff ff       	call   c0012e51 <operator delete(void*, unsigned long)>
c0016cfd:	83 c4 10             	add    esp,0x10
c0016d00:	83 c4 0c             	add    esp,0xc
c0016d03:	c3                   	ret    

c0016d04 <Timer::read()>:
c0016d04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d08:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016d0e:	c3                   	ret    

c0016d0f <timerHandler(unsigned long long)>:
c0016d0f:	55                   	push   ebp
c0016d10:	57                   	push   edi
c0016d11:	56                   	push   esi
c0016d12:	53                   	push   ebx
c0016d13:	83 ec 0c             	sub    esp,0xc
c0016d16:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016d1a:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016d1e:	01 35 50 ec 02 c0    	add    DWORD PTR ds:0xc002ec50,esi
c0016d24:	11 3d 54 ec 02 c0    	adc    DWORD PTR ds:0xc002ec54,edi
c0016d2a:	80 3d cd e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e5cd,0x0
c0016d31:	0f 84 07 01 00 00    	je     c0016e3e <timerHandler(unsigned long long)+0x12f>
c0016d37:	e8 f3 70 00 00       	call   c001de2f <lockStuff()>
c0016d3c:	83 ec 0c             	sub    esp,0xc
c0016d3f:	68 1c 1b 03 c0       	push   0xc0031b1c
c0016d44:	e8 15 1d 01 00       	call   c0028a5e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d49:	c7 04 24 1c 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b1c
c0016d50:	89 c3                	mov    ebx,eax
c0016d52:	e8 0f 1d 01 00       	call   c0028a66 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016d57:	83 c4 10             	add    esp,0x10
c0016d5a:	84 c0                	test   al,al
c0016d5c:	74 60                	je     c0016dbe <timerHandler(unsigned long long)+0xaf>
c0016d5e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016d64:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016d67:	85 c0                	test   eax,eax
c0016d69:	0f 85 91 00 00 00    	jne    c0016e00 <timerHandler(unsigned long long)+0xf1>
c0016d6f:	e9 be 00 00 00       	jmp    c0016e32 <timerHandler(unsigned long long)+0x123>
c0016d74:	83 ec 0c             	sub    esp,0xc
c0016d77:	55                   	push   ebp
c0016d78:	e8 a3 76 00 00       	call   c001e420 <unblockTask(ThreadControlBlock*)>
c0016d7d:	83 c4 10             	add    esp,0x10
c0016d80:	39 eb                	cmp    ebx,ebp
c0016d82:	75 12                	jne    c0016d96 <timerHandler(unsigned long long)+0x87>
c0016d84:	83 ec 0c             	sub    esp,0xc
c0016d87:	68 1c 1b 03 c0       	push   0xc0031b1c
c0016d8c:	e8 cd 1c 01 00       	call   c0028a5e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d91:	89 c3                	mov    ebx,eax
c0016d93:	83 c4 10             	add    esp,0x10
c0016d96:	83 ec 0c             	sub    esp,0xc
c0016d99:	68 1c 1b 03 c0       	push   0xc0031b1c
c0016d9e:	e8 c3 1c 01 00       	call   c0028a66 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016da3:	83 c4 10             	add    esp,0x10
c0016da6:	84 c0                	test   al,al
c0016da8:	75 b4                	jne    c0016d5e <timerHandler(unsigned long long)+0x4f>
c0016daa:	83 ec 0c             	sub    esp,0xc
c0016dad:	68 1c 1b 03 c0       	push   0xc0031b1c
c0016db2:	e8 a7 1c 01 00       	call   c0028a5e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016db7:	83 c4 10             	add    esp,0x10
c0016dba:	39 d8                	cmp    eax,ebx
c0016dbc:	74 a0                	je     c0016d5e <timerHandler(unsigned long long)+0x4f>
c0016dbe:	83 ec 0c             	sub    esp,0xc
c0016dc1:	68 1c 1b 03 c0       	push   0xc0031b1c
c0016dc6:	e8 93 1c 01 00       	call   c0028a5e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016dcb:	c7 04 24 1c 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b1c
c0016dd2:	89 c5                	mov    ebp,eax
c0016dd4:	e8 a9 1c 01 00       	call   c0028a82 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016dd9:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016ddc:	83 c4 10             	add    esp,0x10
c0016ddf:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016de2:	39 15 50 ec 02 c0    	cmp    DWORD PTR ds:0xc002ec50,edx
c0016de8:	a1 54 ec 02 c0       	mov    eax,ds:0xc002ec54
c0016ded:	19 c8                	sbb    eax,ecx
c0016def:	73 83                	jae    c0016d74 <timerHandler(unsigned long long)+0x65>
c0016df1:	50                   	push   eax
c0016df2:	50                   	push   eax
c0016df3:	55                   	push   ebp
c0016df4:	68 1c 1b 03 c0       	push   0xc0031b1c
c0016df9:	e8 32 1d 01 00       	call   c0028b30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016dfe:	eb 93                	jmp    c0016d93 <timerHandler(unsigned long long)+0x84>
c0016e00:	80 3d cc e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e5cc,0x0
c0016e07:	74 29                	je     c0016e32 <timerHandler(unsigned long long)+0x123>
c0016e09:	39 c6                	cmp    esi,eax
c0016e0b:	bb 00 00 00 00       	mov    ebx,0x0
c0016e10:	19 df                	sbb    edi,ebx
c0016e12:	72 19                	jb     c0016e2d <timerHandler(unsigned long long)+0x11e>
c0016e14:	e8 ef 6f 00 00       	call   c001de08 <lockScheduler()>
c0016e19:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e1e:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016e21:	e8 1e 73 00 00       	call   c001e144 <schedule()>
c0016e26:	e8 df 6f 00 00       	call   c001de0a <unlockScheduler()>
c0016e2b:	eb 05                	jmp    c0016e32 <timerHandler(unsigned long long)+0x123>
c0016e2d:	29 f0                	sub    eax,esi
c0016e2f:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016e32:	83 c4 0c             	add    esp,0xc
c0016e35:	5b                   	pop    ebx
c0016e36:	5e                   	pop    esi
c0016e37:	5f                   	pop    edi
c0016e38:	5d                   	pop    ebp
c0016e39:	e9 8b 73 00 00       	jmp    c001e1c9 <unlockStuff()>
c0016e3e:	83 c4 0c             	add    esp,0xc
c0016e41:	5b                   	pop    ebx
c0016e42:	5e                   	pop    esi
c0016e43:	5f                   	pop    edi
c0016e44:	5d                   	pop    ebp
c0016e45:	c3                   	ret    

c0016e46 <setupTimer(int)>:
c0016e46:	57                   	push   edi
c0016e47:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0016e4c:	56                   	push   esi
c0016e4d:	53                   	push   ebx
c0016e4e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016e52:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016e58:	83 ec 0c             	sub    esp,0xc
c0016e5b:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016e61:	e8 de d7 ff ff       	call   c0014644 <Device::getName()>
c0016e66:	83 c4 10             	add    esp,0x10
c0016e69:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016e6c:	0f 85 8d 00 00 00    	jne    c0016eff <setupTimer(int)+0xb9>
c0016e72:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0016e77:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016e7e:	74 7f                	je     c0016eff <setupTimer(int)+0xb9>
c0016e80:	83 ec 0c             	sub    esp,0xc
c0016e83:	68 5c 01 00 00       	push   0x15c
c0016e88:	e8 b3 89 ff ff       	call   c000f840 <malloc>
c0016e8d:	89 04 24             	mov    DWORD PTR [esp],eax
c0016e90:	89 c3                	mov    ebx,eax
c0016e92:	e8 2b f7 00 00       	call   c00265c2 <PIT::PIT()>
c0016e97:	59                   	pop    ecx
c0016e98:	5f                   	pop    edi
c0016e99:	53                   	push   ebx
c0016e9a:	ff 35 c8 e5 02 c0    	push   DWORD PTR ds:0xc002e5c8
c0016ea0:	e8 b3 d4 ff ff       	call   c0014358 <Device::addChild(Device*)>
c0016ea5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016ea7:	6a 00                	push   0x0
c0016ea9:	6a 00                	push   0x0
c0016eab:	56                   	push   esi
c0016eac:	53                   	push   ebx
c0016ead:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016eb0:	83 c4 14             	add    esp,0x14
c0016eb3:	68 60 01 00 00       	push   0x160
c0016eb8:	e8 83 89 ff ff       	call   c000f840 <malloc>
c0016ebd:	89 04 24             	mov    DWORD PTR [esp],eax
c0016ec0:	89 c7                	mov    edi,eax
c0016ec2:	e8 ab f5 00 00       	call   c0026472 <APICTimer::APICTimer()>
c0016ec7:	6a 00                	push   0x0
c0016ec9:	6a 00                	push   0x0
c0016ecb:	56                   	push   esi
c0016ecc:	57                   	push   edi
c0016ecd:	e8 a2 f4 00 00       	call   c0026374 <APICTimer::open(int, int, void*)>
c0016ed2:	83 c4 20             	add    esp,0x20
c0016ed5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016ed7:	6a 00                	push   0x0
c0016ed9:	6a 00                	push   0x0
c0016edb:	6a 00                	push   0x0
c0016edd:	53                   	push   ebx
c0016ede:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016ee1:	58                   	pop    eax
c0016ee2:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0016ee7:	5a                   	pop    edx
c0016ee8:	57                   	push   edi
c0016ee9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016eef:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016ef5:	e8 5e d4 ff ff       	call   c0014358 <Device::addChild(Device*)>
c0016efa:	83 c4 10             	add    esp,0x10
c0016efd:	eb 33                	jmp    c0016f32 <setupTimer(int)+0xec>
c0016eff:	83 ec 0c             	sub    esp,0xc
c0016f02:	68 5c 01 00 00       	push   0x15c
c0016f07:	e8 34 89 ff ff       	call   c000f840 <malloc>
c0016f0c:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f0f:	89 c3                	mov    ebx,eax
c0016f11:	e8 ac f6 00 00       	call   c00265c2 <PIT::PIT()>
c0016f16:	58                   	pop    eax
c0016f17:	5a                   	pop    edx
c0016f18:	53                   	push   ebx
c0016f19:	ff 35 c8 e5 02 c0    	push   DWORD PTR ds:0xc002e5c8
c0016f1f:	e8 34 d4 ff ff       	call   c0014358 <Device::addChild(Device*)>
c0016f24:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f26:	6a 00                	push   0x0
c0016f28:	6a 00                	push   0x0
c0016f2a:	56                   	push   esi
c0016f2b:	53                   	push   ebx
c0016f2c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016f2f:	83 c4 20             	add    esp,0x20
c0016f32:	89 d8                	mov    eax,ebx
c0016f34:	5b                   	pop    ebx
c0016f35:	5e                   	pop    esi
c0016f36:	5f                   	pop    edi
c0016f37:	c3                   	ret    

c0016f38 <VCache::VCache(PhysicalDisk*)>:
c0016f38:	53                   	push   ebx
c0016f39:	83 ec 18             	sub    esp,0x18
c0016f3c:	ba 80 b4 02 c0       	mov    edx,0xc002b480
c0016f41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f45:	89 10                	mov    DWORD PTR [eax],edx
c0016f47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f4b:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016f52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f56:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016f5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f61:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016f68:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016f6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f73:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016f7a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016f81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f85:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016f8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f90:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016f94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f98:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016f9f:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016fa6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016faa:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016fae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fb2:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016fb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fba:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016fbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fc2:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016fc9:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016fd1:	83 ec 0c             	sub    esp,0xc
c0016fd4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016fd8:	e8 63 88 ff ff       	call   c000f840 <malloc>
c0016fdd:	83 c4 10             	add    esp,0x10
c0016fe0:	89 c3                	mov    ebx,eax
c0016fe2:	83 ec 0c             	sub    esp,0xc
c0016fe5:	53                   	push   ebx
c0016fe6:	e8 3d 6f 00 00       	call   c001df28 <Mutex::Mutex()>
c0016feb:	83 c4 10             	add    esp,0x10
c0016fee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ff2:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016ff5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ff9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016ffd:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0017000:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017004:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001700b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001700f:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017015:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017019:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001701c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017020:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0017026:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001702c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0017030:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0017033:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0017036:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001703a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001703e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017042:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017048:	05 00 01 00 00       	add    eax,0x100
c001704d:	c1 e0 04             	shl    eax,0x4
c0017050:	83 ec 0c             	sub    esp,0xc
c0017053:	50                   	push   eax
c0017054:	e8 e7 87 ff ff       	call   c000f840 <malloc>
c0017059:	83 c4 10             	add    esp,0x10
c001705c:	89 c2                	mov    edx,eax
c001705e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017062:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017065:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017069:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0017070:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017074:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0017078:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001707c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017082:	c1 e0 07             	shl    eax,0x7
c0017085:	83 ec 0c             	sub    esp,0xc
c0017088:	50                   	push   eax
c0017089:	e8 b2 87 ff ff       	call   c000f840 <malloc>
c001708e:	83 c4 10             	add    esp,0x10
c0017091:	89 c2                	mov    edx,eax
c0017093:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017097:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001709a:	90                   	nop
c001709b:	83 c4 18             	add    esp,0x18
c001709e:	5b                   	pop    ebx
c001709f:	c3                   	ret    

c00170a0 <VCache::invalidateReadBuffer()>:
c00170a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170a4:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c00170aa:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00170ae:	c3                   	ret    
c00170af:	90                   	nop

c00170b0 <VCache::writeWriteBuffer()>:
c00170b0:	53                   	push   ebx
c00170b1:	83 ec 14             	sub    esp,0x14
c00170b4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00170b8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00170bb:	8b 10                	mov    edx,DWORD PTR [eax]
c00170bd:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00170c0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00170c3:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00170c6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00170c9:	50                   	push   eax
c00170ca:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00170cd:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00170d4:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00170db:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00170df:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00170e6:	83 c4 28             	add    esp,0x28
c00170e9:	5b                   	pop    ebx
c00170ea:	c3                   	ret    
c00170eb:	90                   	nop

c00170ec <VCache::~VCache()>:
c00170ec:	83 ec 0c             	sub    esp,0xc
c00170ef:	ba 80 b4 02 c0       	mov    edx,0xc002b480
c00170f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170f8:	89 10                	mov    DWORD PTR [eax],edx
c00170fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170fe:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0017101:	84 c0                	test   al,al
c0017103:	74 0f                	je     c0017114 <VCache::~VCache()+0x28>
c0017105:	83 ec 0c             	sub    esp,0xc
c0017108:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001710c:	e8 9f ff ff ff       	call   c00170b0 <VCache::writeWriteBuffer()>
c0017111:	83 c4 10             	add    esp,0x10
c0017114:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017118:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001711b:	83 ec 0c             	sub    esp,0xc
c001711e:	50                   	push   eax
c001711f:	e8 2c 87 ff ff       	call   c000f850 <free>
c0017124:	83 c4 10             	add    esp,0x10
c0017127:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001712b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001712e:	83 ec 0c             	sub    esp,0xc
c0017131:	50                   	push   eax
c0017132:	e8 19 87 ff ff       	call   c000f850 <free>
c0017137:	83 c4 10             	add    esp,0x10
c001713a:	90                   	nop
c001713b:	83 c4 0c             	add    esp,0xc
c001713e:	c3                   	ret    
c001713f:	90                   	nop

c0017140 <VCache::~VCache()>:
c0017140:	83 ec 0c             	sub    esp,0xc
c0017143:	83 ec 0c             	sub    esp,0xc
c0017146:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001714a:	e8 9d ff ff ff       	call   c00170ec <VCache::~VCache()>
c001714f:	83 c4 10             	add    esp,0x10
c0017152:	83 ec 08             	sub    esp,0x8
c0017155:	6a 44                	push   0x44
c0017157:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001715b:	e8 f1 bc ff ff       	call   c0012e51 <operator delete(void*, unsigned long)>
c0017160:	83 c4 10             	add    esp,0x10
c0017163:	83 c4 0c             	add    esp,0xc
c0017166:	c3                   	ret    
c0017167:	90                   	nop

c0017168 <VCache::write(unsigned long long, int, void*)>:
c0017168:	55                   	push   ebp
c0017169:	57                   	push   edi
c001716a:	56                   	push   esi
c001716b:	53                   	push   ebx
c001716c:	83 ec 28             	sub    esp,0x28
c001716f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017173:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017177:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001717b:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001717f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017182:	e8 03 72 00 00       	call   c001e38a <Semaphore::acquire()>
c0017187:	83 c4 10             	add    esp,0x10
c001718a:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001718e:	74 0c                	je     c001719c <VCache::write(unsigned long long, int, void*)+0x34>
c0017190:	83 ec 0c             	sub    esp,0xc
c0017193:	53                   	push   ebx
c0017194:	e8 07 ff ff ff       	call   c00170a0 <VCache::invalidateReadBuffer()>
c0017199:	83 c4 10             	add    esp,0x10
c001719c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00171a0:	74 66                	je     c0017208 <VCache::write(unsigned long long, int, void*)+0xa0>
c00171a2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00171a5:	99                   	cdq    
c00171a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00171aa:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00171ad:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00171b0:	89 c1                	mov    ecx,eax
c00171b2:	89 d0                	mov    eax,edx
c00171b4:	31 f1                	xor    ecx,esi
c00171b6:	31 f8                	xor    eax,edi
c00171b8:	89 ca                	mov    edx,ecx
c00171ba:	09 c2                	or     edx,eax
c00171bc:	75 3e                	jne    c00171fc <VCache::write(unsigned long long, int, void*)+0x94>
c00171be:	83 fd 01             	cmp    ebp,0x1
c00171c1:	75 39                	jne    c00171fc <VCache::write(unsigned long long, int, void*)+0x94>
c00171c3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00171c6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00171cc:	51                   	push   ecx
c00171cd:	50                   	push   eax
c00171ce:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00171d2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00171d6:	0f af c8             	imul   ecx,eax
c00171d9:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00171dc:	51                   	push   ecx
c00171dd:	e8 62 95 fe ff       	call   c0000744 <memcpy>
c00171e2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00171e5:	83 c4 10             	add    esp,0x10
c00171e8:	40                   	inc    eax
c00171e9:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00171ec:	83 c0 80             	add    eax,0xffffff80
c00171ef:	75 57                	jne    c0017248 <VCache::write(unsigned long long, int, void*)+0xe0>
c00171f1:	83 ec 0c             	sub    esp,0xc
c00171f4:	53                   	push   ebx
c00171f5:	e8 b6 fe ff ff       	call   c00170b0 <VCache::writeWriteBuffer()>
c00171fa:	eb 34                	jmp    c0017230 <VCache::write(unsigned long long, int, void*)+0xc8>
c00171fc:	83 ec 0c             	sub    esp,0xc
c00171ff:	53                   	push   ebx
c0017200:	e8 ab fe ff ff       	call   c00170b0 <VCache::writeWriteBuffer()>
c0017205:	83 c4 10             	add    esp,0x10
c0017208:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001720b:	83 fd 7f             	cmp    ebp,0x7f
c001720e:	7f 25                	jg     c0017235 <VCache::write(unsigned long long, int, void*)+0xcd>
c0017210:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0017213:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0017216:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0017219:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c001721d:	52                   	push   edx
c001721e:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0017224:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017228:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001722b:	e8 14 95 fe ff       	call   c0000744 <memcpy>
c0017230:	83 c4 10             	add    esp,0x10
c0017233:	eb 13                	jmp    c0017248 <VCache::write(unsigned long long, int, void*)+0xe0>
c0017235:	83 ec 0c             	sub    esp,0xc
c0017238:	8b 10                	mov    edx,DWORD PTR [eax]
c001723a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001723e:	55                   	push   ebp
c001723f:	57                   	push   edi
c0017240:	56                   	push   esi
c0017241:	50                   	push   eax
c0017242:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0017245:	83 c4 20             	add    esp,0x20
c0017248:	83 ec 0c             	sub    esp,0xc
c001724b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001724e:	e8 e5 76 00 00       	call   c001e938 <Semaphore::release()>
c0017253:	83 c4 2c             	add    esp,0x2c
c0017256:	31 c0                	xor    eax,eax
c0017258:	5b                   	pop    ebx
c0017259:	5e                   	pop    esi
c001725a:	5f                   	pop    edi
c001725b:	5d                   	pop    ebp
c001725c:	c3                   	ret    
c001725d:	90                   	nop

c001725e <VCache::read(unsigned long long, int, void*)>:
c001725e:	55                   	push   ebp
c001725f:	57                   	push   edi
c0017260:	56                   	push   esi
c0017261:	53                   	push   ebx
c0017262:	83 ec 28             	sub    esp,0x28
c0017265:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017269:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001726d:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017271:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017275:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0017279:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c001727d:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0017281:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017284:	e8 01 71 00 00       	call   c001e38a <Semaphore::acquire()>
c0017289:	83 c4 10             	add    esp,0x10
c001728c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017290:	74 0c                	je     c001729e <VCache::read(unsigned long long, int, void*)+0x40>
c0017292:	83 ec 0c             	sub    esp,0xc
c0017295:	53                   	push   ebx
c0017296:	e8 15 fe ff ff       	call   c00170b0 <VCache::writeWriteBuffer()>
c001729b:	83 c4 10             	add    esp,0x10
c001729e:	83 fe 01             	cmp    esi,0x1
c00172a1:	0f 85 80 00 00 00    	jne    c0017327 <VCache::read(unsigned long long, int, void*)+0xc9>
c00172a7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00172aa:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c00172b1:	75 74                	jne    c0017327 <VCache::read(unsigned long long, int, void*)+0xc9>
c00172b3:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00172b6:	89 d1                	mov    ecx,edx
c00172b8:	f7 d9                	neg    ecx
c00172ba:	89 cf                	mov    edi,ecx
c00172bc:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00172c0:	c1 ff 1f             	sar    edi,0x1f
c00172c3:	23 0c 24             	and    ecx,DWORD PTR [esp]
c00172c6:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00172ca:	89 ce                	mov    esi,ecx
c00172cc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00172d0:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c00172d4:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00172d8:	89 cf                	mov    edi,ecx
c00172da:	74 0a                	je     c00172e6 <VCache::read(unsigned long long, int, void*)+0x88>
c00172dc:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c00172df:	75 05                	jne    c00172e6 <VCache::read(unsigned long long, int, void*)+0x88>
c00172e1:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c00172e4:	74 1c                	je     c0017302 <VCache::read(unsigned long long, int, void*)+0xa4>
c00172e6:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c00172ea:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00172ed:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c00172f0:	83 ec 0c             	sub    esp,0xc
c00172f3:	8b 08                	mov    ecx,DWORD PTR [eax]
c00172f5:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00172f8:	52                   	push   edx
c00172f9:	57                   	push   edi
c00172fa:	56                   	push   esi
c00172fb:	50                   	push   eax
c00172fc:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c00172ff:	83 c4 20             	add    esp,0x20
c0017302:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017305:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001730b:	50                   	push   eax
c001730c:	52                   	push   edx
c001730d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017310:	48                   	dec    eax
c0017311:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c0017315:	0f af c2             	imul   eax,edx
c0017318:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001731b:	50                   	push   eax
c001731c:	55                   	push   ebp
c001731d:	e8 22 94 fe ff       	call   c0000744 <memcpy>
c0017322:	83 c4 10             	add    esp,0x10
c0017325:	eb 21                	jmp    c0017348 <VCache::read(unsigned long long, int, void*)+0xea>
c0017327:	83 ec 0c             	sub    esp,0xc
c001732a:	53                   	push   ebx
c001732b:	e8 70 fd ff ff       	call   c00170a0 <VCache::invalidateReadBuffer()>
c0017330:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017333:	8b 10                	mov    edx,DWORD PTR [eax]
c0017335:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017338:	56                   	push   esi
c0017339:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001733d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017341:	50                   	push   eax
c0017342:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0017345:	83 c4 20             	add    esp,0x20
c0017348:	83 ec 0c             	sub    esp,0xc
c001734b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001734e:	e8 e5 75 00 00       	call   c001e938 <Semaphore::release()>
c0017353:	83 c4 2c             	add    esp,0x2c
c0017356:	31 c0                	xor    eax,eax
c0017358:	5b                   	pop    ebx
c0017359:	5e                   	pop    esi
c001735a:	5f                   	pop    edi
c001735b:	5d                   	pop    ebp
c001735c:	c3                   	ret    
c001735d:	90                   	nop

c001735e <Video::putrect(int, int, int, int, unsigned int)>:
c001735e:	55                   	push   ebp
c001735f:	57                   	push   edi
c0017360:	56                   	push   esi
c0017361:	53                   	push   ebx
c0017362:	83 ec 1c             	sub    esp,0x1c
c0017365:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017369:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001736d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0017371:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0017375:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017379:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001737d:	01 df                	add    edi,ebx
c001737f:	39 fb                	cmp    ebx,edi
c0017381:	7d 1f                	jge    c00173a2 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0017383:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017387:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001738b:	7d 12                	jge    c001739f <Video::putrect(int, int, int, int, unsigned int)+0x41>
c001738d:	8b 16                	mov    edx,DWORD PTR [esi]
c001738f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0017393:	53                   	push   ebx
c0017394:	55                   	push   ebp
c0017395:	45                   	inc    ebp
c0017396:	56                   	push   esi
c0017397:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001739a:	83 c4 10             	add    esp,0x10
c001739d:	eb e8                	jmp    c0017387 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c001739f:	43                   	inc    ebx
c00173a0:	eb dd                	jmp    c001737f <Video::putrect(int, int, int, int, unsigned int)+0x21>
c00173a2:	83 c4 1c             	add    esp,0x1c
c00173a5:	5b                   	pop    ebx
c00173a6:	5e                   	pop    esi
c00173a7:	5f                   	pop    edi
c00173a8:	5d                   	pop    ebp
c00173a9:	c3                   	ret    

c00173aa <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c00173aa:	55                   	push   ebp
c00173ab:	57                   	push   edi
c00173ac:	31 ff                	xor    edi,edi
c00173ae:	56                   	push   esi
c00173af:	53                   	push   ebx
c00173b0:	83 ec 1c             	sub    esp,0x1c
c00173b3:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00173b7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00173bb:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c00173c2:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c00173c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00173cb:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00173cf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00173d3:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c00173d6:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00173da:	01 f9                	add    ecx,edi
c00173dc:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c00173e0:	7d 2f                	jge    c0017411 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c00173e2:	31 f6                	xor    esi,esi
c00173e4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00173e8:	01 f2                	add    edx,esi
c00173ea:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c00173ee:	7d 1a                	jge    c001740a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c00173f0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00173f3:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c00173f6:	46                   	inc    esi
c00173f7:	51                   	push   ecx
c00173f8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00173fc:	52                   	push   edx
c00173fd:	55                   	push   ebp
c00173fe:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017401:	83 c4 10             	add    esp,0x10
c0017404:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017408:	eb da                	jmp    c00173e4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001740a:	47                   	inc    edi
c001740b:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001740f:	eb c5                	jmp    c00173d6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0017411:	83 c4 1c             	add    esp,0x1c
c0017414:	5b                   	pop    ebx
c0017415:	5e                   	pop    esi
c0017416:	5f                   	pop    edi
c0017417:	5d                   	pop    ebp
c0017418:	c3                   	ret    
c0017419:	90                   	nop

c001741a <Video::blit(unsigned int*, int, int, int, int)>:
c001741a:	55                   	push   ebp
c001741b:	57                   	push   edi
c001741c:	56                   	push   esi
c001741d:	53                   	push   ebx
c001741e:	83 ec 1c             	sub    esp,0x1c
c0017421:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017425:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017429:	85 c0                	test   eax,eax
c001742b:	79 02                	jns    c001742f <Video::blit(unsigned int*, int, int, int, int)+0x15>
c001742d:	31 c0                	xor    eax,eax
c001742f:	c1 e0 02             	shl    eax,0x2
c0017432:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017436:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001743a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001743e:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0017442:	39 d8                	cmp    eax,ebx
c0017444:	7e 49                	jle    c001748f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017446:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001744c:	7c 41                	jl     c001748f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001744e:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0017452:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017456:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001745a:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c001745e:	39 f9                	cmp    ecx,edi
c0017460:	7e 22                	jle    c0017484 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0017462:	83 c5 04             	add    ebp,0x4
c0017465:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001746b:	7c 14                	jl     c0017481 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c001746d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001746f:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0017472:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017476:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001747a:	56                   	push   esi
c001747b:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001747e:	83 c4 10             	add    esp,0x10
c0017481:	47                   	inc    edi
c0017482:	eb d2                	jmp    c0017456 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0017484:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017488:	43                   	inc    ebx
c0017489:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001748d:	eb ab                	jmp    c001743a <Video::blit(unsigned int*, int, int, int, int)+0x20>
c001748f:	83 c4 1c             	add    esp,0x1c
c0017492:	5b                   	pop    ebx
c0017493:	5e                   	pop    esi
c0017494:	5f                   	pop    edi
c0017495:	5d                   	pop    ebp
c0017496:	c3                   	ret    
c0017497:	90                   	nop

c0017498 <Video::clearScreen(unsigned int)>:
c0017498:	57                   	push   edi
c0017499:	56                   	push   esi
c001749a:	53                   	push   ebx
c001749b:	31 db                	xor    ebx,ebx
c001749d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00174a1:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00174a7:	7e 1f                	jle    c00174c8 <Video::clearScreen(unsigned int)+0x30>
c00174a9:	31 ff                	xor    edi,edi
c00174ab:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00174b1:	7e 12                	jle    c00174c5 <Video::clearScreen(unsigned int)+0x2d>
c00174b3:	8b 06                	mov    eax,DWORD PTR [esi]
c00174b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00174b9:	53                   	push   ebx
c00174ba:	57                   	push   edi
c00174bb:	47                   	inc    edi
c00174bc:	56                   	push   esi
c00174bd:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00174c0:	83 c4 10             	add    esp,0x10
c00174c3:	eb e6                	jmp    c00174ab <Video::clearScreen(unsigned int)+0x13>
c00174c5:	43                   	inc    ebx
c00174c6:	eb d9                	jmp    c00174a1 <Video::clearScreen(unsigned int)+0x9>
c00174c8:	5b                   	pop    ebx
c00174c9:	5e                   	pop    esi
c00174ca:	5f                   	pop    edi
c00174cb:	c3                   	ret    

c00174cc <Video::putpixel(int, int, unsigned int)>:
c00174cc:	c7 44 24 04 88 b4 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b488
c00174d4:	e9 0a 31 00 00       	jmp    c001a5e3 <Krnl::panic(char const*)>
c00174d9:	90                   	nop

c00174da <Video::Video(char const*)>:
c00174da:	83 ec 0c             	sub    esp,0xc
c00174dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174e1:	83 ec 08             	sub    esp,0x8
c00174e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00174e8:	50                   	push   eax
c00174e9:	e8 5a d0 ff ff       	call   c0014548 <Device::Device(char const*)>
c00174ee:	83 c4 10             	add    esp,0x10
c00174f1:	ba 0c b5 02 c0       	mov    edx,0xc002b50c
c00174f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174fa:	89 10                	mov    DWORD PTR [eax],edx
c00174fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017500:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001750a:	90                   	nop
c001750b:	83 c4 0c             	add    esp,0xc
c001750e:	c3                   	ret    
c001750f:	90                   	nop

c0017510 <Video::~Video()>:
c0017510:	83 ec 0c             	sub    esp,0xc
c0017513:	ba 0c b5 02 c0       	mov    edx,0xc002b50c
c0017518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001751c:	89 10                	mov    DWORD PTR [eax],edx
c001751e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017522:	83 ec 0c             	sub    esp,0xc
c0017525:	50                   	push   eax
c0017526:	e8 ff cc ff ff       	call   c001422a <Device::~Device()>
c001752b:	83 c4 10             	add    esp,0x10
c001752e:	90                   	nop
c001752f:	83 c4 0c             	add    esp,0xc
c0017532:	c3                   	ret    
c0017533:	90                   	nop

c0017534 <Video::~Video()>:
c0017534:	83 ec 0c             	sub    esp,0xc
c0017537:	83 ec 0c             	sub    esp,0xc
c001753a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001753e:	e8 cd ff ff ff       	call   c0017510 <Video::~Video()>
c0017543:	83 c4 10             	add    esp,0x10
c0017546:	83 ec 08             	sub    esp,0x8
c0017549:	68 64 01 00 00       	push   0x164
c001754e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017552:	e8 fa b8 ff ff       	call   c0012e51 <operator delete(void*, unsigned long)>
c0017557:	83 c4 10             	add    esp,0x10
c001755a:	83 c4 0c             	add    esp,0xc
c001755d:	c3                   	ret    

c001755e <Video::isMonochrome()>:
c001755e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017562:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0017568:	c3                   	ret    
c0017569:	90                   	nop

c001756a <Video::getWidth()>:
c001756a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001756e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0017574:	c3                   	ret    
c0017575:	90                   	nop

c0017576 <Video::getHeight()>:
c0017576:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001757a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017580:	c3                   	ret    
c0017581:	90                   	nop

c0017582 <Video::drawCursor(int, int, unsigned char*, int)>:
c0017582:	55                   	push   ebp
c0017583:	57                   	push   edi
c0017584:	56                   	push   esi
c0017585:	53                   	push   ebx
c0017586:	83 ec 2c             	sub    esp,0x2c
c0017589:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001758d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017591:	83 f8 01             	cmp    eax,0x1
c0017594:	19 c9                	sbb    ecx,ecx
c0017596:	31 db                	xor    ebx,ebx
c0017598:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001759c:	89 cd                	mov    ebp,ecx
c001759e:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00175a6:	f7 d5                	not    ebp
c00175a8:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00175ae:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00175b2:	01 d8                	add    eax,ebx
c00175b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00175b8:	56                   	push   esi
c00175b9:	e8 b8 ff ff ff       	call   c0017576 <Video::getHeight()>
c00175be:	59                   	pop    ecx
c00175bf:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00175c3:	7e 70                	jle    c0017635 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00175c5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00175c9:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00175cd:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00175d0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00175d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00175d8:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00175df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00175e3:	89 f8                	mov    eax,edi
c00175e5:	83 c0 20             	add    eax,0x20
c00175e8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00175ec:	56                   	push   esi
c00175ed:	e8 78 ff ff ff       	call   c001756a <Video::getWidth()>
c00175f2:	5a                   	pop    edx
c00175f3:	39 c7                	cmp    edi,eax
c00175f5:	7d 34                	jge    c001762b <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00175f7:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00175fc:	74 05                	je     c0017603 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00175fe:	8b 06                	mov    eax,DWORD PTR [esi]
c0017600:	55                   	push   ebp
c0017601:	eb 0d                	jmp    c0017610 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0017603:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0017608:	74 12                	je     c001761c <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001760a:	8b 06                	mov    eax,DWORD PTR [esi]
c001760c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017610:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017614:	57                   	push   edi
c0017615:	56                   	push   esi
c0017616:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017619:	83 c4 10             	add    esp,0x10
c001761c:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0017620:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0017624:	47                   	inc    edi
c0017625:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0017629:	75 c1                	jne    c00175ec <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c001762b:	43                   	inc    ebx
c001762c:	83 fb 20             	cmp    ebx,0x20
c001762f:	0f 85 79 ff ff ff    	jne    c00175ae <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0017635:	83 c4 2c             	add    esp,0x2c
c0017638:	5b                   	pop    ebx
c0017639:	5e                   	pop    esi
c001763a:	5f                   	pop    edi
c001763b:	5d                   	pop    ebp
c001763c:	c3                   	ret    
c001763d:	90                   	nop

c001763e <Video::tgaParse(unsigned char*, int, int*, int*)>:
c001763e:	55                   	push   ebp
c001763f:	57                   	push   edi
c0017640:	56                   	push   esi
c0017641:	53                   	push   ebx
c0017642:	83 ec 28             	sub    esp,0x28
c0017645:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017649:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c001764d:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0017651:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0017655:	c1 e7 08             	shl    edi,0x8
c0017658:	01 c7                	add    edi,eax
c001765a:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c001765e:	c1 e0 08             	shl    eax,0x8
c0017661:	01 d0                	add    eax,edx
c0017663:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017667:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001766b:	0f af c7             	imul   eax,edi
c001766e:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0017675:	50                   	push   eax
c0017676:	e8 c5 81 ff ff       	call   c000f840 <malloc>
c001767b:	83 c4 10             	add    esp,0x10
c001767e:	89 c5                	mov    ebp,eax
c0017680:	85 c0                	test   eax,eax
c0017682:	75 15                	jne    c0017699 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0017684:	83 ec 0c             	sub    esp,0xc
c0017687:	68 a9 b4 02 c0       	push   0xc002b4a9
c001768c:	e8 a0 b8 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0017691:	83 c4 10             	add    esp,0x10
c0017694:	e9 1c 01 00 00       	jmp    c00177b5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017699:	be 12 00 00 00       	mov    esi,0x12
c001769e:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00176a2:	74 11                	je     c00176b5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c00176a4:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c00176a8:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c00176ac:	c1 fe 03             	sar    esi,0x3
c00176af:	0f af f0             	imul   esi,eax
c00176b2:	83 c6 12             	add    esi,0x12
c00176b5:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00176b9:	74 04                	je     c00176bf <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c00176bb:	85 ff                	test   edi,edi
c00176bd:	75 12                	jne    c00176d1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c00176bf:	83 ec 0c             	sub    esp,0xc
c00176c2:	68 c0 b4 02 c0       	push   0xc002b4c0
c00176c7:	e8 65 b8 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c00176cc:	e9 ce 00 00 00       	jmp    c001779f <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c00176d1:	52                   	push   edx
c00176d2:	52                   	push   edx
c00176d3:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c00176d7:	50                   	push   eax
c00176d8:	68 d5 b4 02 c0       	push   0xc002b4d5
c00176dd:	e8 4f b8 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c00176e2:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c00176e6:	83 c4 10             	add    esp,0x10
c00176e9:	80 fa 02             	cmp    dl,0x2
c00176ec:	0f 85 98 00 00 00    	jne    c001778a <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c00176f2:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c00176f7:	75 10                	jne    c0017709 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00176f9:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00176fd:	75 0a                	jne    c0017709 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00176ff:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0017702:	83 e8 18             	sub    eax,0x18
c0017705:	a8 f7                	test   al,0xf7
c0017707:	74 0a                	je     c0017713 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0017709:	83 ec 0c             	sub    esp,0xc
c001770c:	68 e2 b4 02 c0       	push   0xc002b4e2
c0017711:	eb 7f                	jmp    c0017792 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0017713:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001771b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017723:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017727:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001772f:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0017733:	75 0c                	jne    c0017741 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0017735:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c001773a:	c1 e0 18             	shl    eax,0x18
c001773d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017741:	41                   	inc    ecx
c0017742:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0017747:	c1 e2 10             	shl    edx,0x10
c001774a:	89 d0                	mov    eax,edx
c001774c:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0017751:	c1 e2 08             	shl    edx,0x8
c0017754:	09 c2                	or     edx,eax
c0017756:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c001775a:	09 c2                	or     edx,eax
c001775c:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0017760:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c0017764:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0017768:	c1 f8 03             	sar    eax,0x3
c001776b:	01 c6                	add    esi,eax
c001776d:	89 c8                	mov    eax,ecx
c001776f:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0017773:	39 c7                	cmp    edi,eax
c0017775:	7f b0                	jg     c0017727 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0017777:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001777b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001777f:	39 14 24             	cmp    DWORD PTR [esp],edx
c0017782:	7e 22                	jle    c00177a6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0017784:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0017788:	eb 99                	jmp    c0017723 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c001778a:	50                   	push   eax
c001778b:	50                   	push   eax
c001778c:	52                   	push   edx
c001778d:	68 f0 b4 02 c0       	push   0xc002b4f0
c0017792:	e8 9a b7 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0017797:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001779a:	e8 b1 80 ff ff       	call   c000f850 <free>
c001779f:	83 c4 10             	add    esp,0x10
c00177a2:	31 ed                	xor    ebp,ebp
c00177a4:	eb 0f                	jmp    c00177b5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00177a6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00177aa:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00177ad:	89 38                	mov    DWORD PTR [eax],edi
c00177af:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00177b3:	89 08                	mov    DWORD PTR [eax],ecx
c00177b5:	83 c4 1c             	add    esp,0x1c
c00177b8:	89 e8                	mov    eax,ebp
c00177ba:	5b                   	pop    ebx
c00177bb:	5e                   	pop    esi
c00177bc:	5f                   	pop    edi
c00177bd:	5d                   	pop    ebp
c00177be:	c3                   	ret    
c00177bf:	90                   	nop

c00177c0 <Video::putTGA(int, int, unsigned char*, int)>:
c00177c0:	55                   	push   ebp
c00177c1:	57                   	push   edi
c00177c2:	56                   	push   esi
c00177c3:	53                   	push   ebx
c00177c4:	83 ec 28             	sub    esp,0x28
c00177c7:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00177cb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00177cf:	50                   	push   eax
c00177d0:	8d 44 24 18          	lea    eax,[esp+0x18]
c00177d4:	50                   	push   eax
c00177d5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00177d9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00177dd:	56                   	push   esi
c00177de:	e8 5b fe ff ff       	call   c001763e <Video::tgaParse(unsigned char*, int, int*, int*)>
c00177e3:	83 c4 20             	add    esp,0x20
c00177e6:	85 c0                	test   eax,eax
c00177e8:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00177ec:	74 35                	je     c0017823 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00177ee:	89 c7                	mov    edi,eax
c00177f0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00177f4:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00177f8:	39 d8                	cmp    eax,ebx
c00177fa:	7e 27                	jle    c0017823 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00177fc:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017800:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017804:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0017808:	39 e8                	cmp    eax,ebp
c001780a:	7e 14                	jle    c0017820 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c001780c:	8b 06                	mov    eax,DWORD PTR [esi]
c001780e:	83 c7 04             	add    edi,0x4
c0017811:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0017814:	53                   	push   ebx
c0017815:	55                   	push   ebp
c0017816:	45                   	inc    ebp
c0017817:	56                   	push   esi
c0017818:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001781b:	83 c4 10             	add    esp,0x10
c001781e:	eb e0                	jmp    c0017800 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0017820:	43                   	inc    ebx
c0017821:	eb cd                	jmp    c00177f0 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0017823:	83 c4 1c             	add    esp,0x1c
c0017826:	5b                   	pop    ebx
c0017827:	5e                   	pop    esi
c0017828:	5f                   	pop    edi
c0017829:	5d                   	pop    ebp
c001782a:	c3                   	ret    
c001782b:	90                   	nop

c001782c <ACPI::close(int, int, void*)>:
c001782c:	83 ec 1c             	sub    esp,0x1c
c001782f:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0017837:	74 0a                	je     c0017843 <ACPI::close(int, int, void*)+0x17>
c0017839:	b8 00 00 00 00       	mov    eax,0x0
c001783e:	e9 9a 00 00 00       	jmp    c00178dd <ACPI::close(int, int, void*)+0xb1>
c0017843:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017848:	75 37                	jne    c0017881 <ACPI::close(int, int, void*)+0x55>
c001784a:	83 ec 0c             	sub    esp,0xc
c001784d:	68 4c b5 02 c0       	push   0xc002b54c
c0017852:	e8 da b6 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0017857:	83 c4 10             	add    esp,0x10
c001785a:	a1 88 0c 03 c0       	mov    eax,ds:0xc0030c88
c001785f:	85 c0                	test   eax,eax
c0017861:	74 07                	je     c001786a <ACPI::close(int, int, void*)+0x3e>
c0017863:	a1 88 0c 03 c0       	mov    eax,ds:0xc0030c88
c0017868:	ff d0                	call   eax
c001786a:	83 ec 0c             	sub    esp,0xc
c001786d:	68 70 b6 02 c0       	push   0xc002b670
c0017872:	e8 6c 2d 00 00       	call   c001a5e3 <Krnl::panic(char const*)>
c0017877:	83 c4 10             	add    esp,0x10
c001787a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001787f:	eb 5c                	jmp    c00178dd <ACPI::close(int, int, void*)+0xb1>
c0017881:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0017886:	75 50                	jne    c00178d8 <ACPI::close(int, int, void*)+0xac>
c0017888:	a1 84 0c 03 c0       	mov    eax,ds:0xc0030c84
c001788d:	85 c0                	test   eax,eax
c001788f:	74 07                	je     c0017898 <ACPI::close(int, int, void*)+0x6c>
c0017891:	a1 84 0c 03 c0       	mov    eax,ds:0xc0030c84
c0017896:	ff d0                	call   eax
c0017898:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001789d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00178a2:	83 e0 02             	and    eax,0x2
c00178a5:	74 1c                	je     c00178c3 <ACPI::close(int, int, void*)+0x97>
c00178a7:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00178ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00178b2:	89 c2                	mov    edx,eax
c00178b4:	ec                   	in     al,dx
c00178b5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00178b9:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00178bd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00178c1:	eb da                	jmp    c001789d <ACPI::close(int, int, void*)+0x71>
c00178c3:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00178ca:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00178cf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00178d3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00178d7:	ee                   	out    dx,al
c00178d8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00178dd:	83 c4 1c             	add    esp,0x1c
c00178e0:	c3                   	ret    

c00178e1 <findRSDP()>:
c00178e1:	83 ec 1c             	sub    esp,0x1c
c00178e4:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c00178e9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00178ef:	83 e0 04             	and    eax,0x4
c00178f2:	84 c0                	test   al,al
c00178f4:	75 07                	jne    c00178fd <findRSDP()+0x1c>
c00178f6:	b8 00 00 00 00       	mov    eax,0x0
c00178fb:	eb 6a                	jmp    c0017967 <findRSDP()+0x86>
c00178fd:	a1 10 e6 02 c0       	mov    eax,ds:0xc002e610
c0017902:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017907:	7f 1b                	jg     c0017924 <findRSDP()+0x43>
c0017909:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c001790e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017914:	83 e2 fb             	and    edx,0xfffffffb
c0017917:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001791d:	b8 00 00 00 00       	mov    eax,0x0
c0017922:	eb 43                	jmp    c0017967 <findRSDP()+0x86>
c0017924:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001792c:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017934:	77 2c                	ja     c0017962 <findRSDP()+0x81>
c0017936:	83 ec 04             	sub    esp,0x4
c0017939:	6a 08                	push   0x8
c001793b:	68 59 b5 02 c0       	push   0xc002b559
c0017940:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017944:	e8 f7 8c fe ff       	call   c0000640 <memcmp>
c0017949:	83 c4 10             	add    esp,0x10
c001794c:	85 c0                	test   eax,eax
c001794e:	0f 94 c0             	sete   al
c0017951:	84 c0                	test   al,al
c0017953:	74 06                	je     c001795b <findRSDP()+0x7a>
c0017955:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017959:	eb 0c                	jmp    c0017967 <findRSDP()+0x86>
c001795b:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017960:	eb ca                	jmp    c001792c <findRSDP()+0x4b>
c0017962:	b8 00 00 00 00       	mov    eax,0x0
c0017967:	83 c4 1c             	add    esp,0x1c
c001796a:	c3                   	ret    

c001796b <loadACPITables(unsigned char*)>:
c001796b:	56                   	push   esi
c001796c:	53                   	push   ebx
c001796d:	83 ec 44             	sub    esp,0x44
c0017970:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0017975:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001797b:	83 e0 04             	and    eax,0x4
c001797e:	84 c0                	test   al,al
c0017980:	0f 84 05 02 00 00    	je     c0017b8b <loadACPITables(unsigned char*)+0x220>
c0017986:	a0 a0 0e 03 c0       	mov    al,ds:0xc0030ea0
c001798b:	84 c0                	test   al,al
c001798d:	74 75                	je     c0017a04 <loadACPITables(unsigned char*)+0x99>
c001798f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017993:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017997:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001799b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001799e:	83 e8 24             	sub    eax,0x24
c00179a1:	c1 e8 03             	shr    eax,0x3
c00179a4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00179a8:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00179b0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00179b4:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00179b8:	0f 8d b2 00 00 00    	jge    c0017a70 <loadACPITables(unsigned char*)+0x105>
c00179be:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00179c2:	83 c0 24             	add    eax,0x24
c00179c5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00179c9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179cd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00179d1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00179d5:	c1 e0 03             	shl    eax,0x3
c00179d8:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c00179dc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00179e0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00179e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00179e5:	89 c1                	mov    ecx,eax
c00179e7:	a1 8c 0c 03 c0       	mov    eax,ds:0xc0030c8c
c00179ec:	8d 50 01             	lea    edx,[eax+0x1]
c00179ef:	89 15 8c 0c 03 c0    	mov    DWORD PTR ds:0xc0030c8c,edx
c00179f5:	89 ca                	mov    edx,ecx
c00179f7:	89 14 c5 a4 0c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf35c],edx
c00179fe:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0017a02:	eb ac                	jmp    c00179b0 <loadACPITables(unsigned char*)+0x45>
c0017a04:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a08:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017a0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a10:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a13:	83 e8 24             	sub    eax,0x24
c0017a16:	c1 e8 02             	shr    eax,0x2
c0017a19:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017a1d:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0017a25:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017a29:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0017a2d:	7d 41                	jge    c0017a70 <loadACPITables(unsigned char*)+0x105>
c0017a2f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a33:	83 c0 24             	add    eax,0x24
c0017a36:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017a3e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017a42:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017a46:	c1 e0 02             	shl    eax,0x2
c0017a49:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0017a4d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017a51:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017a53:	a1 8c 0c 03 c0       	mov    eax,ds:0xc0030c8c
c0017a58:	8d 50 01             	lea    edx,[eax+0x1]
c0017a5b:	89 15 8c 0c 03 c0    	mov    DWORD PTR ds:0xc0030c8c,edx
c0017a61:	89 ca                	mov    edx,ecx
c0017a63:	89 14 c5 a4 0c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf35c],edx
c0017a6a:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017a6e:	eb b5                	jmp    c0017a25 <loadACPITables(unsigned char*)+0xba>
c0017a70:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017a78:	a1 8c 0c 03 c0       	mov    eax,ds:0xc0030c8c
c0017a7d:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017a81:	0f 8d 05 01 00 00    	jge    c0017b8c <loadACPITables(unsigned char*)+0x221>
c0017a87:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a8b:	8b 04 c5 a4 0c 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf35c]
c0017a92:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a9a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017aa2:	25 ff 0f 00 00       	and    eax,0xfff
c0017aa7:	89 c6                	mov    esi,eax
c0017aa9:	e8 84 a3 ff ff       	call   c0011e32 <Virt::getAKernelVAS()>
c0017aae:	89 c3                	mov    ebx,eax
c0017ab0:	83 ec 0c             	sub    esp,0xc
c0017ab3:	6a 01                	push   0x1
c0017ab5:	e8 dd a0 ff ff       	call   c0011b97 <Virt::allocateKernelVirtualPages(int)>
c0017aba:	83 c4 10             	add    esp,0x10
c0017abd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017ac1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017ac7:	83 ec 0c             	sub    esp,0xc
c0017aca:	6a 01                	push   0x1
c0017acc:	6a 01                	push   0x1
c0017ace:	50                   	push   eax
c0017acf:	52                   	push   edx
c0017ad0:	53                   	push   ebx
c0017ad1:	e8 8c ab ff ff       	call   c0012662 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017ad6:	83 c4 20             	add    esp,0x20
c0017ad9:	09 f0                	or     eax,esi
c0017adb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017adf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ae3:	c1 e0 03             	shl    eax,0x3
c0017ae6:	05 a0 0c 03 c0       	add    eax,0xc0030ca0
c0017aeb:	83 ec 04             	sub    esp,0x4
c0017aee:	6a 04                	push   0x4
c0017af0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017af4:	50                   	push   eax
c0017af5:	e8 4a 8c fe ff       	call   c0000744 <memcpy>
c0017afa:	83 c4 10             	add    esp,0x10
c0017afd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b01:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b04:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017b08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017b0c:	05 00 10 00 00       	add    eax,0x1000
c0017b11:	c1 e8 0c             	shr    eax,0xc
c0017b14:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017b18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b1c:	89 04 24             	mov    DWORD PTR [esp],eax
c0017b1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b23:	25 ff 0f 00 00       	and    eax,0xfff
c0017b28:	89 c6                	mov    esi,eax
c0017b2a:	e8 03 a3 ff ff       	call   c0011e32 <Virt::getAKernelVAS()>
c0017b2f:	89 c3                	mov    ebx,eax
c0017b31:	83 ec 0c             	sub    esp,0xc
c0017b34:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017b38:	e8 5a a0 ff ff       	call   c0011b97 <Virt::allocateKernelVirtualPages(int)>
c0017b3d:	83 c4 10             	add    esp,0x10
c0017b40:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017b44:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017b4a:	83 ec 0c             	sub    esp,0xc
c0017b4d:	6a 01                	push   0x1
c0017b4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017b53:	50                   	push   eax
c0017b54:	52                   	push   edx
c0017b55:	53                   	push   ebx
c0017b56:	e8 07 ab ff ff       	call   c0012662 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017b5b:	83 c4 20             	add    esp,0x20
c0017b5e:	09 f0                	or     eax,esi
c0017b60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b64:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017b67:	83 ec 0c             	sub    esp,0xc
c0017b6a:	50                   	push   eax
c0017b6b:	e8 97 a4 ff ff       	call   c0012007 <Virt::freeKernelVirtualPages(unsigned long)>
c0017b70:	83 c4 10             	add    esp,0x10
c0017b73:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b77:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017b7b:	89 14 c5 a4 0c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf35c],edx
c0017b82:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017b86:	e9 ed fe ff ff       	jmp    c0017a78 <loadACPITables(unsigned char*)+0x10d>
c0017b8b:	90                   	nop
c0017b8c:	83 c4 44             	add    esp,0x44
c0017b8f:	5b                   	pop    ebx
c0017b90:	5e                   	pop    esi
c0017b91:	c3                   	ret    

c0017b92 <findRSDT(unsigned char*)>:
c0017b92:	56                   	push   esi
c0017b93:	53                   	push   ebx
c0017b94:	83 ec 44             	sub    esp,0x44
c0017b97:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0017b9c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017ba2:	83 e0 04             	and    eax,0x4
c0017ba5:	84 c0                	test   al,al
c0017ba7:	75 0a                	jne    c0017bb3 <findRSDT(unsigned char*)+0x21>
c0017ba9:	b8 00 00 00 00       	mov    eax,0x0
c0017bae:	e9 f7 00 00 00       	jmp    c0017caa <findRSDT(unsigned char*)+0x118>
c0017bb3:	83 ec 04             	sub    esp,0x4
c0017bb6:	6a 24                	push   0x24
c0017bb8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017bbc:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017bc0:	50                   	push   eax
c0017bc1:	e8 7e 8b fe ff       	call   c0000744 <memcpy>
c0017bc6:	83 c4 10             	add    esp,0x10
c0017bc9:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017bcd:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017bd1:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017bd9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017bdd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017be1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017be5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017be9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017bed:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017bf1:	25 ff 0f 00 00       	and    eax,0xfff
c0017bf6:	89 c6                	mov    esi,eax
c0017bf8:	e8 35 a2 ff ff       	call   c0011e32 <Virt::getAKernelVAS()>
c0017bfd:	89 c3                	mov    ebx,eax
c0017bff:	83 ec 0c             	sub    esp,0xc
c0017c02:	6a 02                	push   0x2
c0017c04:	e8 8e 9f ff ff       	call   c0011b97 <Virt::allocateKernelVirtualPages(int)>
c0017c09:	83 c4 10             	add    esp,0x10
c0017c0c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017c10:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c16:	83 ec 0c             	sub    esp,0xc
c0017c19:	6a 01                	push   0x1
c0017c1b:	6a 02                	push   0x2
c0017c1d:	50                   	push   eax
c0017c1e:	52                   	push   edx
c0017c1f:	53                   	push   ebx
c0017c20:	e8 3d aa ff ff       	call   c0012662 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c25:	83 c4 20             	add    esp,0x20
c0017c28:	09 f0                	or     eax,esi
c0017c2a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017c2e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c32:	25 ff 0f 00 00       	and    eax,0xfff
c0017c37:	89 c6                	mov    esi,eax
c0017c39:	e8 f4 a1 ff ff       	call   c0011e32 <Virt::getAKernelVAS()>
c0017c3e:	89 c3                	mov    ebx,eax
c0017c40:	83 ec 0c             	sub    esp,0xc
c0017c43:	6a 02                	push   0x2
c0017c45:	e8 4d 9f ff ff       	call   c0011b97 <Virt::allocateKernelVirtualPages(int)>
c0017c4a:	83 c4 10             	add    esp,0x10
c0017c4d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017c51:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c57:	83 ec 0c             	sub    esp,0xc
c0017c5a:	6a 01                	push   0x1
c0017c5c:	6a 02                	push   0x2
c0017c5e:	50                   	push   eax
c0017c5f:	52                   	push   edx
c0017c60:	53                   	push   ebx
c0017c61:	e8 fc a9 ff ff       	call   c0012662 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c66:	83 c4 20             	add    esp,0x20
c0017c69:	09 f0                	or     eax,esi
c0017c6b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017c6f:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017c74:	75 11                	jne    c0017c87 <findRSDT(unsigned char*)+0xf5>
c0017c76:	c6 05 a0 0e 03 c0 00 	mov    BYTE PTR ds:0xc0030ea0,0x0
c0017c7d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c81:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017c85:	eb 1f                	jmp    c0017ca6 <findRSDT(unsigned char*)+0x114>
c0017c87:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017c8c:	75 11                	jne    c0017c9f <findRSDT(unsigned char*)+0x10d>
c0017c8e:	c6 05 a0 0e 03 c0 01 	mov    BYTE PTR ds:0xc0030ea0,0x1
c0017c95:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c99:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017c9d:	eb 07                	jmp    c0017ca6 <findRSDT(unsigned char*)+0x114>
c0017c9f:	b8 00 00 00 00       	mov    eax,0x0
c0017ca4:	eb 04                	jmp    c0017caa <findRSDT(unsigned char*)+0x118>
c0017ca6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017caa:	83 c4 44             	add    esp,0x44
c0017cad:	5b                   	pop    ebx
c0017cae:	5e                   	pop    esi
c0017caf:	c3                   	ret    

c0017cb0 <findDataTable(unsigned char*, char*)>:
c0017cb0:	83 ec 1c             	sub    esp,0x1c
c0017cb3:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0017cb8:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017cbe:	83 e0 04             	and    eax,0x4
c0017cc1:	84 c0                	test   al,al
c0017cc3:	75 07                	jne    c0017ccc <findDataTable(unsigned char*, char*)+0x1c>
c0017cc5:	b8 00 00 00 00       	mov    eax,0x0
c0017cca:	eb 7c                	jmp    c0017d48 <findDataTable(unsigned char*, char*)+0x98>
c0017ccc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017cd4:	a1 8c 0c 03 c0       	mov    eax,ds:0xc0030c8c
c0017cd9:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017cdd:	7d 3a                	jge    c0017d19 <findDataTable(unsigned char*, char*)+0x69>
c0017cdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017ce3:	c1 e0 03             	shl    eax,0x3
c0017ce6:	05 a0 0c 03 c0       	add    eax,0xc0030ca0
c0017ceb:	83 ec 04             	sub    esp,0x4
c0017cee:	6a 04                	push   0x4
c0017cf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017cf4:	50                   	push   eax
c0017cf5:	e8 46 89 fe ff       	call   c0000640 <memcmp>
c0017cfa:	83 c4 10             	add    esp,0x10
c0017cfd:	85 c0                	test   eax,eax
c0017cff:	0f 94 c0             	sete   al
c0017d02:	84 c0                	test   al,al
c0017d04:	74 0d                	je     c0017d13 <findDataTable(unsigned char*, char*)+0x63>
c0017d06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d0a:	8b 04 c5 a4 0c 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf35c]
c0017d11:	eb 35                	jmp    c0017d48 <findDataTable(unsigned char*, char*)+0x98>
c0017d13:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017d17:	eb bb                	jmp    c0017cd4 <findDataTable(unsigned char*, char*)+0x24>
c0017d19:	a0 a0 0e 03 c0       	mov    al,ds:0xc0030ea0
c0017d1e:	84 c0                	test   al,al
c0017d20:	74 07                	je     c0017d29 <findDataTable(unsigned char*, char*)+0x79>
c0017d22:	b8 58 00 00 00       	mov    eax,0x58
c0017d27:	eb 05                	jmp    c0017d2e <findDataTable(unsigned char*, char*)+0x7e>
c0017d29:	b8 52 00 00 00       	mov    eax,0x52
c0017d2e:	83 ec 04             	sub    esp,0x4
c0017d31:	50                   	push   eax
c0017d32:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d36:	68 94 b6 02 c0       	push   0xc002b694
c0017d3b:	e8 f1 b1 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0017d40:	83 c4 10             	add    esp,0x10
c0017d43:	b8 00 00 00 00       	mov    eax,0x0
c0017d48:	83 c4 1c             	add    esp,0x1c
c0017d4b:	c3                   	ret    

c0017d4c <scanMADT()>:
c0017d4c:	53                   	push   ebx
c0017d4d:	83 ec 38             	sub    esp,0x38
c0017d50:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0017d55:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017d5b:	83 e0 04             	and    eax,0x4
c0017d5e:	84 c0                	test   al,al
c0017d60:	0f 84 63 04 00 00    	je     c00181c9 <scanMADT()+0x47d>
c0017d66:	e8 76 fb ff ff       	call   c00178e1 <findRSDP()>
c0017d6b:	a3 ac 0e 03 c0       	mov    ds:0xc0030eac,eax
c0017d70:	a1 ac 0e 03 c0       	mov    eax,ds:0xc0030eac
c0017d75:	85 c0                	test   eax,eax
c0017d77:	75 19                	jne    c0017d92 <scanMADT()+0x46>
c0017d79:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0017d7e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017d84:	83 e2 fb             	and    edx,0xfffffffb
c0017d87:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017d8d:	e9 3b 04 00 00       	jmp    c00181cd <scanMADT()+0x481>
c0017d92:	a1 ac 0e 03 c0       	mov    eax,ds:0xc0030eac
c0017d97:	83 ec 0c             	sub    esp,0xc
c0017d9a:	50                   	push   eax
c0017d9b:	e8 f2 fd ff ff       	call   c0017b92 <findRSDT(unsigned char*)>
c0017da0:	83 c4 10             	add    esp,0x10
c0017da3:	a3 a8 0e 03 c0       	mov    ds:0xc0030ea8,eax
c0017da8:	a1 a8 0e 03 c0       	mov    eax,ds:0xc0030ea8
c0017dad:	85 c0                	test   eax,eax
c0017daf:	75 19                	jne    c0017dca <scanMADT()+0x7e>
c0017db1:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0017db6:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017dbc:	83 e2 fb             	and    edx,0xfffffffb
c0017dbf:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017dc5:	e9 03 04 00 00       	jmp    c00181cd <scanMADT()+0x481>
c0017dca:	a1 a8 0e 03 c0       	mov    eax,ds:0xc0030ea8
c0017dcf:	83 ec 0c             	sub    esp,0xc
c0017dd2:	50                   	push   eax
c0017dd3:	e8 93 fb ff ff       	call   c001796b <loadACPITables(unsigned char*)>
c0017dd8:	83 c4 10             	add    esp,0x10
c0017ddb:	a1 a8 0e 03 c0       	mov    eax,ds:0xc0030ea8
c0017de0:	83 ec 08             	sub    esp,0x8
c0017de3:	68 62 b5 02 c0       	push   0xc002b562
c0017de8:	50                   	push   eax
c0017de9:	e8 c2 fe ff ff       	call   c0017cb0 <findDataTable(unsigned char*, char*)>
c0017dee:	83 c4 10             	add    esp,0x10
c0017df1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017df5:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017dfa:	75 19                	jne    c0017e15 <scanMADT()+0xc9>
c0017dfc:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0017e01:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017e07:	83 e2 fe             	and    edx,0xfffffffe
c0017e0a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017e10:	e9 b8 03 00 00       	jmp    c00181cd <scanMADT()+0x481>
c0017e15:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017e1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e21:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017e24:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017e28:	0f 87 9f 03 00 00    	ja     c00181cd <scanMADT()+0x481>
c0017e2e:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017e36:	0f 87 91 03 00 00    	ja     c00181cd <scanMADT()+0x481>
c0017e3c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e40:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017e44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e48:	8d 50 01             	lea    edx,[eax+0x1]
c0017e4b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e4f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e53:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017e57:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017e5b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e5f:	8d 50 01             	lea    edx,[eax+0x1]
c0017e62:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e66:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e6a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017e6e:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017e72:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017e77:	0f 86 4f 03 00 00    	jbe    c00181cc <scanMADT()+0x480>
c0017e7d:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017e82:	75 57                	jne    c0017edb <scanMADT()+0x18f>
c0017e84:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e88:	8d 50 01             	lea    edx,[eax+0x1]
c0017e8b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e8f:	8a 15 a0 10 03 c0    	mov    dl,BYTE PTR ds:0xc00310a0
c0017e95:	0f b6 d2             	movzx  edx,dl
c0017e98:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017e9c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017ea0:	88 82 e0 10 03 c0    	mov    BYTE PTR [edx-0x3ffcef20],al
c0017ea6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017eaa:	8d 50 01             	lea    edx,[eax+0x1]
c0017ead:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017eb1:	8a 15 a0 10 03 c0    	mov    dl,BYTE PTR ds:0xc00310a0
c0017eb7:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017eba:	88 0d a0 10 03 c0    	mov    BYTE PTR ds:0xc00310a0,cl
c0017ec0:	0f b6 d2             	movzx  edx,dl
c0017ec3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017ec7:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017ecb:	88 82 c0 10 03 c0    	mov    BYTE PTR [edx-0x3ffcef40],al
c0017ed1:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017ed6:	e9 da 02 00 00       	jmp    c00181b5 <scanMADT()+0x469>
c0017edb:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017ee0:	0f 85 14 01 00 00    	jne    c0017ffa <scanMADT()+0x2ae>
c0017ee6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017eea:	8d 50 01             	lea    edx,[eax+0x1]
c0017eed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ef1:	8a 15 60 0f 03 c0    	mov    dl,BYTE PTR ds:0xc0030f60
c0017ef7:	0f b6 d2             	movzx  edx,dl
c0017efa:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017efe:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017f02:	88 82 80 0f 03 c0    	mov    BYTE PTR [edx-0x3ffcf080],al
c0017f08:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017f0c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f10:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f14:	01 d0                	add    eax,edx
c0017f16:	83 c0 2c             	add    eax,0x2c
c0017f19:	8a 00                	mov    al,BYTE PTR [eax]
c0017f1b:	0f b6 d0             	movzx  edx,al
c0017f1e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f22:	8d 48 01             	lea    ecx,[eax+0x1]
c0017f25:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f29:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017f2d:	0f b6 c0             	movzx  eax,al
c0017f30:	c1 e0 08             	shl    eax,0x8
c0017f33:	89 d1                	mov    ecx,edx
c0017f35:	09 c1                	or     ecx,eax
c0017f37:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f3b:	8d 50 02             	lea    edx,[eax+0x2]
c0017f3e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f42:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f46:	0f b6 c0             	movzx  eax,al
c0017f49:	c1 e0 10             	shl    eax,0x10
c0017f4c:	09 c1                	or     ecx,eax
c0017f4e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f52:	8d 50 03             	lea    edx,[eax+0x3]
c0017f55:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f59:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f5d:	0f b6 c0             	movzx  eax,al
c0017f60:	c1 e0 18             	shl    eax,0x18
c0017f63:	09 c1                	or     ecx,eax
c0017f65:	89 ca                	mov    edx,ecx
c0017f67:	a0 60 0f 03 c0       	mov    al,ds:0xc0030f60
c0017f6c:	0f b6 c0             	movzx  eax,al
c0017f6f:	89 14 85 a0 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf060],edx
c0017f76:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017f7b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f7f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f83:	01 d0                	add    eax,edx
c0017f85:	83 c0 2c             	add    eax,0x2c
c0017f88:	8a 00                	mov    al,BYTE PTR [eax]
c0017f8a:	0f b6 d0             	movzx  edx,al
c0017f8d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f91:	8d 48 01             	lea    ecx,[eax+0x1]
c0017f94:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f98:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017f9c:	0f b6 c0             	movzx  eax,al
c0017f9f:	c1 e0 08             	shl    eax,0x8
c0017fa2:	89 d1                	mov    ecx,edx
c0017fa4:	09 c1                	or     ecx,eax
c0017fa6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017faa:	8d 50 02             	lea    edx,[eax+0x2]
c0017fad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fb1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017fb5:	0f b6 c0             	movzx  eax,al
c0017fb8:	c1 e0 10             	shl    eax,0x10
c0017fbb:	09 c1                	or     ecx,eax
c0017fbd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fc1:	8d 50 03             	lea    edx,[eax+0x3]
c0017fc4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fc8:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017fcc:	0f b6 c0             	movzx  eax,al
c0017fcf:	c1 e0 18             	shl    eax,0x18
c0017fd2:	09 c1                	or     ecx,eax
c0017fd4:	89 ca                	mov    edx,ecx
c0017fd6:	a0 60 0f 03 c0       	mov    al,ds:0xc0030f60
c0017fdb:	0f b6 c0             	movzx  eax,al
c0017fde:	89 14 85 20 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcefe0],edx
c0017fe5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017fea:	a0 60 0f 03 c0       	mov    al,ds:0xc0030f60
c0017fef:	40                   	inc    eax
c0017ff0:	a2 60 0f 03 c0       	mov    ds:0xc0030f60,al
c0017ff5:	e9 bb 01 00 00       	jmp    c00181b5 <scanMADT()+0x469>
c0017ffa:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017fff:	0f 85 e9 00 00 00    	jne    c00180ee <scanMADT()+0x3a2>
c0018005:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018009:	8d 50 01             	lea    edx,[eax+0x1]
c001800c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018010:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018014:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018018:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001801c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018020:	8d 50 01             	lea    edx,[eax+0x1]
c0018023:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018027:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001802b:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001802f:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018033:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018037:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001803b:	01 d0                	add    eax,edx
c001803d:	83 c0 2c             	add    eax,0x2c
c0018040:	8a 00                	mov    al,BYTE PTR [eax]
c0018042:	0f b6 d0             	movzx  edx,al
c0018045:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018049:	8d 48 01             	lea    ecx,[eax+0x1]
c001804c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018050:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018054:	0f b6 c0             	movzx  eax,al
c0018057:	c1 e0 08             	shl    eax,0x8
c001805a:	89 d1                	mov    ecx,edx
c001805c:	09 c1                	or     ecx,eax
c001805e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018062:	8d 50 02             	lea    edx,[eax+0x2]
c0018065:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018069:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001806d:	0f b6 c0             	movzx  eax,al
c0018070:	c1 e0 10             	shl    eax,0x10
c0018073:	09 c1                	or     ecx,eax
c0018075:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018079:	8d 50 03             	lea    edx,[eax+0x3]
c001807c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018080:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018084:	0f b6 c0             	movzx  eax,al
c0018087:	c1 e0 18             	shl    eax,0x18
c001808a:	09 c8                	or     eax,ecx
c001808c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018090:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018095:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018099:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001809d:	01 d0                	add    eax,edx
c001809f:	83 c0 2c             	add    eax,0x2c
c00180a2:	8a 00                	mov    al,BYTE PTR [eax]
c00180a4:	0f b6 c0             	movzx  eax,al
c00180a7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00180ab:	8d 4a 01             	lea    ecx,[edx+0x1]
c00180ae:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180b2:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00180b6:	0f b6 d2             	movzx  edx,dl
c00180b9:	c1 e2 08             	shl    edx,0x8
c00180bc:	09 d0                	or     eax,edx
c00180be:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00180c3:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00180c8:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00180cd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00180d1:	88 90 20 d8 02 c0    	mov    BYTE PTR [eax-0x3ffd27e0],dl
c00180d7:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00180dc:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00180e1:	66 89 84 12 40 0f 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcf0c0],ax
c00180e9:	e9 c7 00 00 00       	jmp    c00181b5 <scanMADT()+0x469>
c00180ee:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00180f3:	0f 85 b0 00 00 00    	jne    c00181a9 <scanMADT()+0x45d>
c00180f9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180fd:	8d 50 01             	lea    edx,[eax+0x1]
c0018100:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018104:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018108:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001810c:	0f b6 c0             	movzx  eax,al
c001810f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018113:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018117:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001811b:	01 d0                	add    eax,edx
c001811d:	83 c0 2c             	add    eax,0x2c
c0018120:	8a 00                	mov    al,BYTE PTR [eax]
c0018122:	0f b6 d0             	movzx  edx,al
c0018125:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018129:	8d 48 01             	lea    ecx,[eax+0x1]
c001812c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018130:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018134:	0f b6 c0             	movzx  eax,al
c0018137:	c1 e0 08             	shl    eax,0x8
c001813a:	09 d0                	or     eax,edx
c001813c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018140:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0018145:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018149:	8d 50 01             	lea    edx,[eax+0x1]
c001814c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018150:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018154:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018158:	0f b6 c0             	movzx  eax,al
c001815b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001815f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018163:	c1 e0 08             	shl    eax,0x8
c0018166:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001816a:	89 c1                	mov    ecx,eax
c001816c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018170:	c1 e0 18             	shl    eax,0x18
c0018173:	89 c3                	mov    ebx,eax
c0018175:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c001817a:	8d 50 01             	lea    edx,[eax+0x1]
c001817d:	89 15 b0 0e 03 c0    	mov    DWORD PTR ds:0xc0030eb0,edx
c0018183:	09 d9                	or     ecx,ebx
c0018185:	89 ca                	mov    edx,ecx
c0018187:	89 14 85 c0 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf140],edx
c001818e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018192:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018196:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001819a:	68 c4 b6 02 c0       	push   0xc002b6c4
c001819f:	e8 8d ad ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c00181a4:	83 c4 10             	add    esp,0x10
c00181a7:	eb 0c                	jmp    c00181b5 <scanMADT()+0x469>
c00181a9:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c00181ae:	75 05                	jne    c00181b5 <scanMADT()+0x469>
c00181b0:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c00181b5:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c00181ba:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00181be:	01 d0                	add    eax,edx
c00181c0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00181c4:	e9 54 fc ff ff       	jmp    c0017e1d <scanMADT()+0xd1>
c00181c9:	90                   	nop
c00181ca:	eb 01                	jmp    c00181cd <scanMADT()+0x481>
c00181cc:	90                   	nop
c00181cd:	83 c4 38             	add    esp,0x38
c00181d0:	5b                   	pop    ebx
c00181d1:	c3                   	ret    

c00181d2 <ACPI::ACPI()>:
c00181d2:	83 ec 0c             	sub    esp,0xc
c00181d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181d9:	83 ec 08             	sub    esp,0x8
c00181dc:	68 67 b5 02 c0       	push   0xc002b567
c00181e1:	50                   	push   eax
c00181e2:	e8 61 c3 ff ff       	call   c0014548 <Device::Device(char const*)>
c00181e7:	83 c4 10             	add    esp,0x10
c00181ea:	ba 38 b7 02 c0       	mov    edx,0xc002b738
c00181ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181f3:	89 10                	mov    DWORD PTR [eax],edx
c00181f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181f9:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018200:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018204:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001820e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018212:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c001821c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018220:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018227:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001822b:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0018232:	e8 15 fb ff ff       	call   c0017d4c <scanMADT()>
c0018237:	90                   	nop
c0018238:	83 c4 0c             	add    esp,0xc
c001823b:	c3                   	ret    

c001823c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c001823c:	83 ec 2c             	sub    esp,0x2c
c001823f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0018243:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018247:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001824b:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001824f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018254:	88 d0                	mov    al,dl
c0018256:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001825a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001825f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0018267:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001826b:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018271:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0018275:	0f 8d 97 00 00 00    	jge    c0018312 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c001827b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001827f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018283:	83 c2 2a             	add    edx,0x2a
c0018286:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001828a:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c001828f:	75 78                	jne    c0018309 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018291:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018295:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018299:	83 c2 2a             	add    edx,0x2a
c001829c:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c00182a0:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00182a4:	75 63                	jne    c0018309 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00182a6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00182ab:	74 3a                	je     c00182e7 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c00182ad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182b1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182b5:	83 c2 2a             	add    edx,0x2a
c00182b8:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00182bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00182c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00182c3:	39 c2                	cmp    edx,eax
c00182c5:	74 10                	je     c00182d7 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c00182c7:	83 ec 0c             	sub    esp,0xc
c00182ca:	68 00 b7 02 c0       	push   0xc002b700
c00182cf:	e8 0f 23 00 00       	call   c001a5e3 <Krnl::panic(char const*)>
c00182d4:	83 c4 10             	add    esp,0x10
c00182d7:	83 ec 0c             	sub    esp,0xc
c00182da:	68 6c b5 02 c0       	push   0xc002b56c
c00182df:	e8 ff 22 00 00       	call   c001a5e3 <Krnl::panic(char const*)>
c00182e4:	83 c4 10             	add    esp,0x10
c00182e7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00182eb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182ef:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182f3:	83 c2 2a             	add    edx,0x2a
c00182f6:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00182fa:	8b 02                	mov    eax,DWORD PTR [edx]
c00182fc:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00182ff:	89 01                	mov    DWORD PTR [ecx],eax
c0018301:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018304:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018309:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001830d:	e9 55 ff ff ff       	jmp    c0018267 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0018312:	90                   	nop
c0018313:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018317:	83 c4 2c             	add    esp,0x2c
c001831a:	c2 04 00             	ret    0x4
c001831d:	90                   	nop

c001831e <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c001831e:	83 ec 1c             	sub    esp,0x1c
c0018321:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018325:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0018329:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001832d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018332:	88 c8                	mov    al,cl
c0018334:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018338:	88 d0                	mov    al,dl
c001833a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001833e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018342:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018348:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001834c:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001834f:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0018353:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0018357:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001835b:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018361:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018365:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0018368:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001836c:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0018371:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018375:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001837b:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001837f:	8d 48 01             	lea    ecx,[eax+0x1]
c0018382:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018386:	83 c2 2a             	add    edx,0x2a
c0018389:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001838d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018391:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018397:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001839b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001839e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00183a2:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00183a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183aa:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00183b0:	8d 50 01             	lea    edx,[eax+0x1]
c00183b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183b7:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c00183bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183c1:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00183c7:	3d 00 02 00 00       	cmp    eax,0x200
c00183cc:	75 10                	jne    c00183de <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c00183ce:	83 ec 0c             	sub    esp,0xc
c00183d1:	68 7b b5 02 c0       	push   0xc002b57b
c00183d6:	e8 08 22 00 00       	call   c001a5e3 <Krnl::panic(char const*)>
c00183db:	83 c4 10             	add    esp,0x10
c00183de:	90                   	nop
c00183df:	83 c4 1c             	add    esp,0x1c
c00183e2:	c3                   	ret    
c00183e3:	90                   	nop

c00183e4 <ACPI::setScreenBrightnessLevel(void*, int)>:
c00183e4:	b8 00 00 00 00       	mov    eax,0x0
c00183e9:	c3                   	ret    

c00183ea <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00183ea:	83 ec 1c             	sub    esp,0x1c
c00183ed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00183f1:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00183f4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00183f8:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c00183fd:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018402:	83 ec 08             	sub    esp,0x8
c0018405:	52                   	push   edx
c0018406:	50                   	push   eax
c0018407:	e8 4c 6a ff ff       	call   c000ee58 <Computer::readCMOS(unsigned char)>
c001840c:	83 c4 10             	add    esp,0x10
c001840f:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018413:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0018418:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001841d:	83 ec 04             	sub    esp,0x4
c0018420:	6a 01                	push   0x1
c0018422:	52                   	push   edx
c0018423:	50                   	push   eax
c0018424:	e8 45 6b ff ff       	call   c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>
c0018429:	83 c4 10             	add    esp,0x10
c001842c:	90                   	nop
c001842d:	83 c4 1c             	add    esp,0x1c
c0018430:	c3                   	ret    
c0018431:	90                   	nop

c0018432 <ACPI::open(int, int, void*)>:
c0018432:	53                   	push   ebx
c0018433:	83 ec 28             	sub    esp,0x28
c0018436:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001843a:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018441:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018445:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c001844c:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0018451:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018457:	83 e0 04             	and    eax,0x4
c001845a:	84 c0                	test   al,al
c001845c:	74 47                	je     c00184a5 <ACPI::open(int, int, void*)+0x73>
c001845e:	a1 a8 0e 03 c0       	mov    eax,ds:0xc0030ea8
c0018463:	83 ec 08             	sub    esp,0x8
c0018466:	68 98 b5 02 c0       	push   0xc002b598
c001846b:	50                   	push   eax
c001846c:	e8 3f f8 ff ff       	call   c0017cb0 <findDataTable(unsigned char*, char*)>
c0018471:	83 c4 10             	add    esp,0x10
c0018474:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018478:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001847d:	74 26                	je     c00184a5 <ACPI::open(int, int, void*)+0x73>
c001847f:	83 ec 0c             	sub    esp,0xc
c0018482:	68 9d b5 02 c0       	push   0xc002b59d
c0018487:	e8 a5 aa ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001848c:	83 c4 10             	add    esp,0x10
c001848f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018493:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001849a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001849e:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00184a5:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c00184ad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00184b1:	8a 00                	mov    al,BYTE PTR [eax]
c00184b3:	3c 01                	cmp    al,0x1
c00184b5:	75 28                	jne    c00184df <ACPI::open(int, int, void*)+0xad>
c00184b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184bb:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00184c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184c6:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00184cd:	83 ec 0c             	sub    esp,0xc
c00184d0:	68 ae b5 02 c0       	push   0xc002b5ae
c00184d5:	e8 57 aa ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c00184da:	83 c4 10             	add    esp,0x10
c00184dd:	eb 25                	jmp    c0018504 <ACPI::open(int, int, void*)+0xd2>
c00184df:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00184e3:	8a 00                	mov    al,BYTE PTR [eax]
c00184e5:	3c 02                	cmp    al,0x2
c00184e7:	75 1b                	jne    c0018504 <ACPI::open(int, int, void*)+0xd2>
c00184e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184ed:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00184f4:	83 ec 0c             	sub    esp,0xc
c00184f7:	68 b6 b5 02 c0       	push   0xc002b5b6
c00184fc:	e8 30 aa ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0018501:	83 c4 10             	add    esp,0x10
c0018504:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018508:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001850e:	83 f0 01             	xor    eax,0x1
c0018511:	84 c0                	test   al,al
c0018513:	74 6a                	je     c001857f <ACPI::open(int, int, void*)+0x14d>
c0018515:	83 ec 0c             	sub    esp,0xc
c0018518:	68 be b5 02 c0       	push   0xc002b5be
c001851d:	e8 0f aa ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0018522:	83 c4 10             	add    esp,0x10
c0018525:	e8 26 7c fe ff       	call   c0000150 <manualPCIProbe>
c001852a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001852e:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0018533:	75 28                	jne    c001855d <ACPI::open(int, int, void*)+0x12b>
c0018535:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018539:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018540:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018544:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001854b:	83 ec 0c             	sub    esp,0xc
c001854e:	68 cc b5 02 c0       	push   0xc002b5cc
c0018553:	e8 d9 a9 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0018558:	83 c4 10             	add    esp,0x10
c001855b:	eb 22                	jmp    c001857f <ACPI::open(int, int, void*)+0x14d>
c001855d:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c0018562:	75 1b                	jne    c001857f <ACPI::open(int, int, void*)+0x14d>
c0018564:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018568:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001856f:	83 ec 0c             	sub    esp,0xc
c0018572:	68 d6 b5 02 c0       	push   0xc002b5d6
c0018577:	e8 b5 a9 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001857c:	83 c4 10             	add    esp,0x10
c001857f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018583:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018589:	84 c0                	test   al,al
c001858b:	74 13                	je     c00185a0 <ACPI::open(int, int, void*)+0x16e>
c001858d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018591:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c0018597:	83 f0 01             	xor    eax,0x1
c001859a:	0f b6 c0             	movzx  eax,al
c001859d:	40                   	inc    eax
c001859e:	eb 05                	jmp    c00185a5 <ACPI::open(int, int, void*)+0x173>
c00185a0:	b8 00 00 00 00       	mov    eax,0x0
c00185a5:	83 ec 08             	sub    esp,0x8
c00185a8:	50                   	push   eax
c00185a9:	68 e0 b5 02 c0       	push   0xc002b5e0
c00185ae:	e8 7e a9 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c00185b3:	83 c4 10             	add    esp,0x10
c00185b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185ba:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00185c0:	84 c0                	test   al,al
c00185c2:	74 67                	je     c001862b <ACPI::open(int, int, void*)+0x1f9>
c00185c4:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c00185cc:	83 ec 0c             	sub    esp,0xc
c00185cf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00185d3:	e8 68 72 ff ff       	call   c000f840 <malloc>
c00185d8:	83 c4 10             	add    esp,0x10
c00185db:	89 c3                	mov    ebx,eax
c00185dd:	83 ec 0c             	sub    esp,0xc
c00185e0:	53                   	push   ebx
c00185e1:	e8 26 a3 00 00       	call   c002290c <PCI::PCI()>
c00185e6:	83 c4 10             	add    esp,0x10
c00185e9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00185ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185f1:	83 ec 08             	sub    esp,0x8
c00185f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00185f8:	50                   	push   eax
c00185f9:	e8 5a bd ff ff       	call   c0014358 <Device::addChild(Device*)>
c00185fe:	83 c4 10             	add    esp,0x10
c0018601:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018605:	8b 00                	mov    eax,DWORD PTR [eax]
c0018607:	83 c0 08             	add    eax,0x8
c001860a:	8b 00                	mov    eax,DWORD PTR [eax]
c001860c:	6a 00                	push   0x0
c001860e:	6a 00                	push   0x0
c0018610:	6a 00                	push   0x0
c0018612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018616:	ff d0                	call   eax
c0018618:	83 c4 10             	add    esp,0x10
c001861b:	83 ec 0c             	sub    esp,0xc
c001861e:	68 e9 b5 02 c0       	push   0xc002b5e9
c0018623:	e8 09 a9 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0018628:	83 c4 10             	add    esp,0x10
c001862b:	83 ec 0c             	sub    esp,0xc
c001862e:	68 f4 b5 02 c0       	push   0xc002b5f4
c0018633:	e8 cb 46 00 00       	call   c001cd03 <Thr::loadKernelSymbolTable(char const*)>
c0018638:	83 c4 10             	add    esp,0x10
c001863b:	8b 1d c8 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5c8
c0018641:	83 ec 08             	sub    esp,0x8
c0018644:	6a 01                	push   0x1
c0018646:	68 12 b6 02 c0       	push   0xc002b612
c001864b:	e8 10 51 00 00       	call   c001d760 <Thr::loadDLL(char const*, bool)>
c0018650:	83 c4 10             	add    esp,0x10
c0018653:	83 ec 08             	sub    esp,0x8
c0018656:	53                   	push   ebx
c0018657:	50                   	push   eax
c0018658:	e8 37 53 00 00       	call   c001d994 <Thr::executeDLL(unsigned long, void*)>
c001865d:	83 c4 10             	add    esp,0x10
c0018660:	8b 1d c8 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5c8
c0018666:	83 ec 08             	sub    esp,0x8
c0018669:	6a 01                	push   0x1
c001866b:	68 2f b6 02 c0       	push   0xc002b62f
c0018670:	e8 eb 50 00 00       	call   c001d760 <Thr::loadDLL(char const*, bool)>
c0018675:	83 c4 10             	add    esp,0x10
c0018678:	83 ec 08             	sub    esp,0x8
c001867b:	53                   	push   ebx
c001867c:	50                   	push   eax
c001867d:	e8 12 53 00 00       	call   c001d994 <Thr::executeDLL(unsigned long, void*)>
c0018682:	83 c4 10             	add    esp,0x10
c0018685:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c001868a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018690:	83 e0 04             	and    eax,0x4
c0018693:	84 c0                	test   al,al
c0018695:	0f 84 d2 00 00 00    	je     c001876d <ACPI::open(int, int, void*)+0x33b>
c001869b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00186a2:	83 ec 0c             	sub    esp,0xc
c00186a5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00186a9:	e8 92 71 ff ff       	call   c000f840 <malloc>
c00186ae:	83 c4 10             	add    esp,0x10
c00186b1:	89 c3                	mov    ebx,eax
c00186b3:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c00186b8:	83 ec 04             	sub    esp,0x4
c00186bb:	50                   	push   eax
c00186bc:	68 4c b6 02 c0       	push   0xc002b64c
c00186c1:	53                   	push   ebx
c00186c2:	e8 c3 ad ff ff       	call   c001348a <File::File(char const*, Process*)>
c00186c7:	83 c4 10             	add    esp,0x10
c00186ca:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00186ce:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00186d3:	74 17                	je     c00186ec <ACPI::open(int, int, void*)+0x2ba>
c00186d5:	83 ec 0c             	sub    esp,0xc
c00186d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00186dc:	e8 7b b0 ff ff       	call   c001375c <File::exists()>
c00186e1:	83 c4 10             	add    esp,0x10
c00186e4:	84 c0                	test   al,al
c00186e6:	74 04                	je     c00186ec <ACPI::open(int, int, void*)+0x2ba>
c00186e8:	b0 01                	mov    al,0x1
c00186ea:	eb 02                	jmp    c00186ee <ACPI::open(int, int, void*)+0x2bc>
c00186ec:	b0 00                	mov    al,0x0
c00186ee:	84 c0                	test   al,al
c00186f0:	74 22                	je     c0018714 <ACPI::open(int, int, void*)+0x2e2>
c00186f2:	83 ec 08             	sub    esp,0x8
c00186f5:	6a 01                	push   0x1
c00186f7:	68 4c b6 02 c0       	push   0xc002b64c
c00186fc:	e8 5f 50 00 00       	call   c001d760 <Thr::loadDLL(char const*, bool)>
c0018701:	83 c4 10             	add    esp,0x10
c0018704:	83 ec 08             	sub    esp,0x8
c0018707:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001870b:	50                   	push   eax
c001870c:	e8 83 52 00 00       	call   c001d994 <Thr::executeDLL(unsigned long, void*)>
c0018711:	83 c4 10             	add    esp,0x10
c0018714:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018719:	74 1e                	je     c0018739 <ACPI::open(int, int, void*)+0x307>
c001871b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018720:	74 17                	je     c0018739 <ACPI::open(int, int, void*)+0x307>
c0018722:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018726:	8b 00                	mov    eax,DWORD PTR [eax]
c0018728:	83 c0 08             	add    eax,0x8
c001872b:	8b 00                	mov    eax,DWORD PTR [eax]
c001872d:	83 ec 0c             	sub    esp,0xc
c0018730:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018734:	ff d0                	call   eax
c0018736:	83 c4 10             	add    esp,0x10
c0018739:	a1 a8 0e 03 c0       	mov    eax,ds:0xc0030ea8
c001873e:	83 ec 08             	sub    esp,0x8
c0018741:	68 69 b6 02 c0       	push   0xc002b669
c0018746:	50                   	push   eax
c0018747:	e8 64 f5 ff ff       	call   c0017cb0 <findDataTable(unsigned char*, char*)>
c001874c:	83 c4 10             	add    esp,0x10
c001874f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018753:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018758:	74 13                	je     c001876d <ACPI::open(int, int, void*)+0x33b>
c001875a:	83 ec 08             	sub    esp,0x8
c001875d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018761:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018765:	e8 80 fc ff ff       	call   c00183ea <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001876a:	83 c4 10             	add    esp,0x10
c001876d:	b8 00 00 00 00       	mov    eax,0x0
c0018772:	83 c4 28             	add    esp,0x28
c0018775:	5b                   	pop    ebx
c0018776:	c3                   	ret    
c0018777:	90                   	nop

c0018778 <ACPI::sleep()>:
c0018778:	83 ec 0c             	sub    esp,0xc
c001877b:	a1 80 0c 03 c0       	mov    eax,ds:0xc0030c80
c0018780:	85 c0                	test   eax,eax
c0018782:	74 07                	je     c001878b <ACPI::sleep()+0x13>
c0018784:	a1 80 0c 03 c0       	mov    eax,ds:0xc0030c80
c0018789:	ff d0                	call   eax
c001878b:	90                   	nop
c001878c:	83 c4 0c             	add    esp,0xc
c001878f:	c3                   	ret    

c0018790 <CPU::close(int, int, void*)>:
c0018790:	31 c0                	xor    eax,eax
c0018792:	c3                   	ret    
c0018793:	90                   	nop

c0018794 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018794:	55                   	push   ebp
c0018795:	57                   	push   edi
c0018796:	56                   	push   esi
c0018797:	53                   	push   ebx
c0018798:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001879c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00187a0:	89 ce                	mov    esi,ecx
c00187a2:	89 d5                	mov    ebp,edx
c00187a4:	80 f9 04             	cmp    cl,0x4
c00187a7:	75 28                	jne    c00187d1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00187a9:	8d 42 f9             	lea    eax,[edx-0x7]
c00187ac:	3c 03                	cmp    al,0x3
c00187ae:	0f 86 63 01 00 00    	jbe    c0018917 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00187b4:	80 fa 03             	cmp    dl,0x3
c00187b7:	0f 84 5a 01 00 00    	je     c0018917 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00187bd:	8d 7a f2             	lea    edi,[edx-0xe]
c00187c0:	b8 f0 d9 02 c0       	mov    eax,0xc002d9f0
c00187c5:	89 fb                	mov    ebx,edi
c00187c7:	80 fb 01             	cmp    bl,0x1
c00187ca:	77 4e                	ja     c001881a <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00187cc:	e9 52 01 00 00       	jmp    c0018923 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187d1:	80 f9 05             	cmp    cl,0x5
c00187d4:	75 4d                	jne    c0018823 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00187d6:	b8 00 da 02 c0       	mov    eax,0xc002da00
c00187db:	80 fa 03             	cmp    dl,0x3
c00187de:	0f 86 3f 01 00 00    	jbe    c0018923 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187e4:	8d 7a fa             	lea    edi,[edx-0x6]
c00187e7:	b8 10 da 02 c0       	mov    eax,0xc002da10
c00187ec:	89 fb                	mov    ebx,edi
c00187ee:	80 fb 01             	cmp    bl,0x1
c00187f1:	0f 86 2c 01 00 00    	jbe    c0018923 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187f7:	b8 20 da 02 c0       	mov    eax,0xc002da20
c00187fc:	80 fa 08             	cmp    dl,0x8
c00187ff:	0f 84 1e 01 00 00    	je     c0018923 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018805:	89 d7                	mov    edi,edx
c0018807:	b8 30 da 02 c0       	mov    eax,0xc002da30
c001880c:	83 e7 fb             	and    edi,0xfffffffb
c001880f:	89 fb                	mov    ebx,edi
c0018811:	80 fb 09             	cmp    bl,0x9
c0018814:	0f 84 09 01 00 00    	je     c0018923 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001881a:	31 c0                	xor    eax,eax
c001881c:	89 eb                	mov    ebx,ebp
c001881e:	0f b6 fb             	movzx  edi,bl
c0018821:	eb 30                	jmp    c0018853 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018823:	31 c0                	xor    eax,eax
c0018825:	80 f9 06             	cmp    cl,0x6
c0018828:	75 f2                	jne    c001881c <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001882a:	80 fa 0a             	cmp    dl,0xa
c001882d:	77 ed                	ja     c001881c <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001882f:	bf de 05 00 00       	mov    edi,0x5de
c0018834:	0f a3 d7             	bt     edi,edx
c0018837:	73 e3                	jae    c001881c <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018839:	b8 40 da 02 c0       	mov    eax,0xc002da40
c001883e:	e9 e0 00 00 00       	jmp    c0018923 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018843:	39 c7                	cmp    edi,eax
c0018845:	0f 84 d3 00 00 00    	je     c001891e <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001884b:	40                   	inc    eax
c001884c:	3d d0 00 00 00       	cmp    eax,0xd0
c0018851:	74 09                	je     c001885c <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018853:	89 f3                	mov    ebx,esi
c0018855:	80 fb 0f             	cmp    bl,0xf
c0018858:	75 f1                	jne    c001884b <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c001885a:	eb e7                	jmp    c0018843 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c001885c:	80 f9 10             	cmp    cl,0x10
c001885f:	75 14                	jne    c0018875 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018861:	8d 42 fc             	lea    eax,[edx-0x4]
c0018864:	83 e0 fb             	and    eax,0xfffffffb
c0018867:	3c 02                	cmp    al,0x2
c0018869:	76 34                	jbe    c001889f <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c001886b:	b8 4e ba 02 c0       	mov    eax,0xc002ba4e
c0018870:	80 fa 02             	cmp    dl,0x2
c0018873:	eb 24                	jmp    c0018899 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018875:	80 f9 11             	cmp    cl,0x11
c0018878:	75 13                	jne    c001888d <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c001887a:	b8 4e ba 02 c0       	mov    eax,0xc002ba4e
c001887f:	80 fa 03             	cmp    dl,0x3
c0018882:	0f 85 9b 00 00 00    	jne    c0018923 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018888:	e9 91 00 00 00       	jmp    c001891e <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001888d:	80 f9 12             	cmp    cl,0x12
c0018890:	75 14                	jne    c00188a6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018892:	b8 4e ba 02 c0       	mov    eax,0xc002ba4e
c0018897:	fe ca                	dec    dl
c0018899:	0f 85 84 00 00 00    	jne    c0018923 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001889f:	b8 60 da 02 c0       	mov    eax,0xc002da60
c00188a4:	eb 7d                	jmp    c0018923 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188a6:	80 f9 14             	cmp    cl,0x14
c00188a9:	75 12                	jne    c00188bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00188ab:	4a                   	dec    edx
c00188ac:	b8 4e ba 02 c0       	mov    eax,0xc002ba4e
c00188b1:	80 fa 01             	cmp    dl,0x1
c00188b4:	77 6d                	ja     c0018923 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188b6:	b8 70 da 02 c0       	mov    eax,0xc002da70
c00188bb:	eb 66                	jmp    c0018923 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188bd:	80 f9 15             	cmp    cl,0x15
c00188c0:	75 31                	jne    c00188f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00188c2:	b8 80 da 02 c0       	mov    eax,0xc002da80
c00188c7:	80 fa 01             	cmp    dl,0x1
c00188ca:	74 57                	je     c0018923 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188cc:	b8 4e ba 02 c0       	mov    eax,0xc002ba4e
c00188d1:	80 fa 13             	cmp    dl,0x13
c00188d4:	76 0c                	jbe    c00188e2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00188d6:	80 fa 30             	cmp    dl,0x30
c00188d9:	75 48                	jne    c0018923 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188db:	b8 a0 da 02 c0       	mov    eax,0xc002daa0
c00188e0:	eb 41                	jmp    c0018923 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188e2:	b9 04 00 09 00       	mov    ecx,0x90004
c00188e7:	0f a3 d1             	bt     ecx,edx
c00188ea:	73 37                	jae    c0018923 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188ec:	b8 90 da 02 c0       	mov    eax,0xc002da90
c00188f1:	eb 30                	jmp    c0018923 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188f3:	b8 4e ba 02 c0       	mov    eax,0xc002ba4e
c00188f8:	80 f9 16             	cmp    cl,0x16
c00188fb:	75 26                	jne    c0018923 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188fd:	b8 b0 da 02 c0       	mov    eax,0xc002dab0
c0018902:	84 d2                	test   dl,dl
c0018904:	74 1d                	je     c0018923 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018906:	b8 4e ba 02 c0       	mov    eax,0xc002ba4e
c001890b:	80 fa 30             	cmp    dl,0x30
c001890e:	75 13                	jne    c0018923 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018910:	b8 c0 da 02 c0       	mov    eax,0xc002dac0
c0018915:	eb 0c                	jmp    c0018923 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018917:	b8 e0 d9 02 c0       	mov    eax,0xc002d9e0
c001891c:	eb 05                	jmp    c0018923 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001891e:	b8 50 da 02 c0       	mov    eax,0xc002da50
c0018923:	5b                   	pop    ebx
c0018924:	5e                   	pop    esi
c0018925:	5f                   	pop    edi
c0018926:	5d                   	pop    ebp
c0018927:	c3                   	ret    

c0018928 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018928:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001892c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018930:	80 f9 04             	cmp    cl,0x4
c0018933:	75 6b                	jne    c00189a0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018935:	b8 40 d8 02 c0       	mov    eax,0xc002d840
c001893a:	80 fa 01             	cmp    dl,0x1
c001893d:	0f 86 92 02 00 00    	jbe    c0018bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018943:	b8 50 d8 02 c0       	mov    eax,0xc002d850
c0018948:	80 fa 02             	cmp    dl,0x2
c001894b:	0f 84 84 02 00 00    	je     c0018bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018951:	b8 60 d8 02 c0       	mov    eax,0xc002d860
c0018956:	80 fa 03             	cmp    dl,0x3
c0018959:	0f 84 76 02 00 00    	je     c0018bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001895f:	b8 70 d8 02 c0       	mov    eax,0xc002d870
c0018964:	80 fa 04             	cmp    dl,0x4
c0018967:	0f 84 68 02 00 00    	je     c0018bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001896d:	b8 80 d8 02 c0       	mov    eax,0xc002d880
c0018972:	80 fa 05             	cmp    dl,0x5
c0018975:	0f 84 5a 02 00 00    	je     c0018bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001897b:	b8 60 d8 02 c0       	mov    eax,0xc002d860
c0018980:	80 fa 07             	cmp    dl,0x7
c0018983:	0f 84 4c 02 00 00    	je     c0018bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018989:	83 ea 08             	sub    edx,0x8
c001898c:	b8 4e ba 02 c0       	mov    eax,0xc002ba4e
c0018991:	80 fa 01             	cmp    dl,0x1
c0018994:	0f 87 3b 02 00 00    	ja     c0018bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001899a:	b8 90 d8 02 c0       	mov    eax,0xc002d890
c001899f:	c3                   	ret    
c00189a0:	80 f9 05             	cmp    cl,0x5
c00189a3:	75 45                	jne    c00189ea <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00189a5:	8d 4a ff             	lea    ecx,[edx-0x1]
c00189a8:	b8 a0 d8 02 c0       	mov    eax,0xc002d8a0
c00189ad:	80 f9 02             	cmp    cl,0x2
c00189b0:	0f 86 1f 02 00 00    	jbe    c0018bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189b6:	80 fa 04             	cmp    dl,0x4
c00189b9:	0f 84 f3 01 00 00    	je     c0018bb2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00189bf:	80 fa 07             	cmp    dl,0x7
c00189c2:	0f 84 0d 02 00 00    	je     c0018bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189c8:	b8 b0 d8 02 c0       	mov    eax,0xc002d8b0
c00189cd:	80 fa 08             	cmp    dl,0x8
c00189d0:	0f 84 ff 01 00 00    	je     c0018bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189d6:	b8 4e ba 02 c0       	mov    eax,0xc002ba4e
c00189db:	80 fa 09             	cmp    dl,0x9
c00189de:	0f 85 f1 01 00 00    	jne    c0018bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189e4:	b8 c0 d8 02 c0       	mov    eax,0xc002d8c0
c00189e9:	c3                   	ret    
c00189ea:	80 f9 06             	cmp    cl,0x6
c00189ed:	0f 85 85 01 00 00    	jne    c0018b78 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c00189f3:	b8 d0 d8 02 c0       	mov    eax,0xc002d8d0
c00189f8:	80 fa 01             	cmp    dl,0x1
c00189fb:	0f 84 d4 01 00 00    	je     c0018bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a01:	8d 42 fb             	lea    eax,[edx-0x5]
c0018a04:	3c 01                	cmp    al,0x1
c0018a06:	0f 86 ac 01 00 00    	jbe    c0018bb8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018a0c:	80 fa 03             	cmp    dl,0x3
c0018a0f:	0f 84 a3 01 00 00    	je     c0018bb8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018a15:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018a18:	b8 f0 d8 02 c0       	mov    eax,0xc002d8f0
c0018a1d:	80 f9 01             	cmp    cl,0x1
c0018a20:	0f 86 af 01 00 00    	jbe    c0018bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a26:	80 fa 09             	cmp    dl,0x9
c0018a29:	0f 84 8f 01 00 00    	je     c0018bbe <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018a2f:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018a32:	80 f9 01             	cmp    cl,0x1
c0018a35:	0f 86 9a 01 00 00    	jbe    c0018bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a3b:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c0018a40:	80 fa 0d             	cmp    dl,0xd
c0018a43:	0f 84 8c 01 00 00    	je     c0018bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a49:	b8 10 d9 02 c0       	mov    eax,0xc002d910
c0018a4e:	80 fa 0e             	cmp    dl,0xe
c0018a51:	0f 84 7e 01 00 00    	je     c0018bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a57:	b8 20 d9 02 c0       	mov    eax,0xc002d920
c0018a5c:	80 fa 0f             	cmp    dl,0xf
c0018a5f:	0f 84 70 01 00 00    	je     c0018bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a65:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c0018a6a:	80 fa 15             	cmp    dl,0x15
c0018a6d:	0f 84 62 01 00 00    	je     c0018bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a73:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018a76:	b8 20 d9 02 c0       	mov    eax,0xc002d920
c0018a7b:	80 f9 01             	cmp    cl,0x1
c0018a7e:	0f 86 51 01 00 00    	jbe    c0018bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a84:	80 fa 1a             	cmp    dl,0x1a
c0018a87:	0f 84 37 01 00 00    	je     c0018bc4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018a8d:	80 fa 1c             	cmp    dl,0x1c
c0018a90:	0f 84 34 01 00 00    	je     c0018bca <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018a96:	80 fa 1d             	cmp    dl,0x1d
c0018a99:	0f 84 36 01 00 00    	je     c0018bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a9f:	b8 50 d9 02 c0       	mov    eax,0xc002d950
c0018aa4:	80 fa 25             	cmp    dl,0x25
c0018aa7:	0f 84 28 01 00 00    	je     c0018bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aad:	8d 4a da             	lea    ecx,[edx-0x26]
c0018ab0:	b8 40 d9 02 c0       	mov    eax,0xc002d940
c0018ab5:	80 f9 01             	cmp    cl,0x1
c0018ab8:	0f 86 17 01 00 00    	jbe    c0018bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018abe:	b8 60 d9 02 c0       	mov    eax,0xc002d960
c0018ac3:	80 fa 2a             	cmp    dl,0x2a
c0018ac6:	0f 84 09 01 00 00    	je     c0018bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018acc:	b8 50 d9 02 c0       	mov    eax,0xc002d950
c0018ad1:	80 fa 2c             	cmp    dl,0x2c
c0018ad4:	0f 84 fb 00 00 00    	je     c0018bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ada:	b8 60 d9 02 c0       	mov    eax,0xc002d960
c0018adf:	80 fa 2d             	cmp    dl,0x2d
c0018ae2:	0f 84 ed 00 00 00    	je     c0018bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ae8:	b8 30 d9 02 c0       	mov    eax,0xc002d930
c0018aed:	80 fa 2e             	cmp    dl,0x2e
c0018af0:	0f 84 df 00 00 00    	je     c0018bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018af6:	b8 50 d9 02 c0       	mov    eax,0xc002d950
c0018afb:	80 fa 2f             	cmp    dl,0x2f
c0018afe:	0f 84 d1 00 00 00    	je     c0018bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b04:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018b07:	b8 40 d9 02 c0       	mov    eax,0xc002d940
c0018b0c:	80 f9 01             	cmp    cl,0x1
c0018b0f:	0f 86 c0 00 00 00    	jbe    c0018bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b15:	b8 70 d9 02 c0       	mov    eax,0xc002d970
c0018b1a:	80 fa 37             	cmp    dl,0x37
c0018b1d:	0f 84 b2 00 00 00    	je     c0018bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b23:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c0018b28:	80 fa 3a             	cmp    dl,0x3a
c0018b2b:	0f 84 a4 00 00 00    	je     c0018bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b31:	b8 90 d9 02 c0       	mov    eax,0xc002d990
c0018b36:	80 fa 3c             	cmp    dl,0x3c
c0018b39:	0f 84 96 00 00 00    	je     c0018bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b3f:	b8 a0 d9 02 c0       	mov    eax,0xc002d9a0
c0018b44:	80 fa 3d             	cmp    dl,0x3d
c0018b47:	0f 84 88 00 00 00    	je     c0018bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b4d:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c0018b52:	80 fa 3e             	cmp    dl,0x3e
c0018b55:	74 7e                	je     c0018bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b57:	8d 42 bb             	lea    eax,[edx-0x45]
c0018b5a:	3c 01                	cmp    al,0x1
c0018b5c:	76 72                	jbe    c0018bd0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018b5e:	80 fa 3f             	cmp    dl,0x3f
c0018b61:	74 6d                	je     c0018bd0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018b63:	80 fa 4a             	cmp    dl,0x4a
c0018b66:	74 0a                	je     c0018b72 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018b68:	b8 4e ba 02 c0       	mov    eax,0xc002ba4e
c0018b6d:	80 fa 4d             	cmp    dl,0x4d
c0018b70:	75 63                	jne    c0018bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b72:	b8 70 d9 02 c0       	mov    eax,0xc002d970
c0018b77:	c3                   	ret    
c0018b78:	b8 4e ba 02 c0       	mov    eax,0xc002ba4e
c0018b7d:	80 f9 0b             	cmp    cl,0xb
c0018b80:	75 0a                	jne    c0018b8c <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018b82:	fe ca                	dec    dl
c0018b84:	75 4f                	jne    c0018bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b86:	b8 b0 d9 02 c0       	mov    eax,0xc002d9b0
c0018b8b:	c3                   	ret    
c0018b8c:	80 f9 0f             	cmp    cl,0xf
c0018b8f:	75 44                	jne    c0018bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b91:	b8 c0 d9 02 c0       	mov    eax,0xc002d9c0
c0018b96:	80 fa 02             	cmp    dl,0x2
c0018b99:	76 3a                	jbe    c0018bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b9b:	8d 42 fd             	lea    eax,[edx-0x3]
c0018b9e:	3c 01                	cmp    al,0x1
c0018ba0:	76 0a                	jbe    c0018bac <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018ba2:	b8 4e ba 02 c0       	mov    eax,0xc002ba4e
c0018ba7:	80 fa 06             	cmp    dl,0x6
c0018baa:	75 29                	jne    c0018bd5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bac:	b8 d0 d9 02 c0       	mov    eax,0xc002d9d0
c0018bb1:	c3                   	ret    
c0018bb2:	b8 b0 d8 02 c0       	mov    eax,0xc002d8b0
c0018bb7:	c3                   	ret    
c0018bb8:	b8 e0 d8 02 c0       	mov    eax,0xc002d8e0
c0018bbd:	c3                   	ret    
c0018bbe:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c0018bc3:	c3                   	ret    
c0018bc4:	b8 30 d9 02 c0       	mov    eax,0xc002d930
c0018bc9:	c3                   	ret    
c0018bca:	b8 40 d9 02 c0       	mov    eax,0xc002d940
c0018bcf:	c3                   	ret    
c0018bd0:	b8 90 d9 02 c0       	mov    eax,0xc002d990
c0018bd5:	c3                   	ret    

c0018bd6 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018bd6:	60                   	pusha  
c0018bd7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018bdb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018bdf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018be3:	9c                   	pushf  
c0018be4:	fa                   	cli    
c0018be5:	0f 09                	wbinvd 
c0018be7:	0f 30                	wrmsr  
c0018be9:	9d                   	popf   
c0018bea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018bee:	89 02                	mov    DWORD PTR [edx],eax
c0018bf0:	61                   	popa   
c0018bf1:	c3                   	ret    

c0018bf2 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018bf2:	60                   	pusha  
c0018bf3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018bf7:	9c                   	pushf  
c0018bf8:	fa                   	cli    
c0018bf9:	0f 09                	wbinvd 
c0018bfb:	31 c0                	xor    eax,eax
c0018bfd:	31 d2                	xor    edx,edx
c0018bff:	0f 32                	rdmsr  
c0018c01:	9d                   	popf   
c0018c02:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018c06:	89 02                	mov    DWORD PTR [edx],eax
c0018c08:	61                   	popa   
c0018c09:	c3                   	ret    

c0018c0a <CPU::AMD_K6_writeback(int, int, int)>:
c0018c0a:	56                   	push   esi
c0018c0b:	53                   	push   ebx
c0018c0c:	83 ec 10             	sub    esp,0x10
c0018c0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c13:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018c18:	75 5d                	jne    c0018c77 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c1a:	83 f8 08             	cmp    eax,0x8
c0018c1d:	75 09                	jne    c0018c28 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018c1f:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018c24:	7e 13                	jle    c0018c39 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018c26:	eb 30                	jmp    c0018c58 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018c28:	83 f8 06             	cmp    eax,0x6
c0018c2b:	7c 4a                	jl     c0018c77 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c2d:	83 f8 07             	cmp    eax,0x7
c0018c30:	7e 07                	jle    c0018c39 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018c32:	83 f8 09             	cmp    eax,0x9
c0018c35:	74 21                	je     c0018c58 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018c37:	eb 3e                	jmp    c0018c77 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c39:	89 e6                	mov    esi,esp
c0018c3b:	8b 1d 04 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e604
c0018c41:	56                   	push   esi
c0018c42:	c1 eb 15             	shr    ebx,0x15
c0018c45:	68 82 00 00 c0       	push   0xc0000082
c0018c4a:	83 e3 7e             	and    ebx,0x7e
c0018c4d:	e8 a0 ff ff ff       	call   c0018bf2 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018c52:	56                   	push   esi
c0018c53:	6a 00                	push   0x0
c0018c55:	53                   	push   ebx
c0018c56:	eb 12                	jmp    c0018c6a <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018c58:	89 e3                	mov    ebx,esp
c0018c5a:	53                   	push   ebx
c0018c5b:	68 82 00 00 c0       	push   0xc0000082
c0018c60:	e8 8d ff ff ff       	call   c0018bf2 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018c65:	53                   	push   ebx
c0018c66:	6a 00                	push   0x0
c0018c68:	6a 00                	push   0x0
c0018c6a:	68 82 00 00 c0       	push   0xc0000082
c0018c6f:	e8 62 ff ff ff       	call   c0018bd6 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018c74:	83 c4 18             	add    esp,0x18
c0018c77:	83 c4 10             	add    esp,0x10
c0018c7a:	5b                   	pop    ebx
c0018c7b:	5e                   	pop    esi
c0018c7c:	c3                   	ret    
c0018c7d:	90                   	nop

c0018c7e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018c7e:	55                   	push   ebp
c0018c7f:	57                   	push   edi
c0018c80:	56                   	push   esi
c0018c81:	53                   	push   ebx
c0018c82:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c86:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018c8a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018c8e:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018c92:	39 05 e0 da 02 c0    	cmp    DWORD PTR ds:0xc002dae0,eax
c0018c98:	75 23                	jne    c0018cbd <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018c9a:	a1 0c 11 03 c0       	mov    eax,ds:0xc003110c
c0018c9f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018ca3:	89 06                	mov    DWORD PTR [esi],eax
c0018ca5:	a1 08 11 03 c0       	mov    eax,ds:0xc0031108
c0018caa:	89 07                	mov    DWORD PTR [edi],eax
c0018cac:	a1 04 11 03 c0       	mov    eax,ds:0xc0031104
c0018cb1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018cb4:	a1 00 11 03 c0       	mov    eax,ds:0xc0031100
c0018cb9:	89 02                	mov    DWORD PTR [edx],eax
c0018cbb:	eb 3f                	jmp    c0018cfc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018cbd:	31 c9                	xor    ecx,ecx
c0018cbf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018cc3:	0f a2                	cpuid  
c0018cc5:	89 06                	mov    DWORD PTR [esi],eax
c0018cc7:	89 1f                	mov    DWORD PTR [edi],ebx
c0018cc9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018ccd:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018cd0:	89 10                	mov    DWORD PTR [eax],edx
c0018cd2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018cd6:	a3 e0 da 02 c0       	mov    ds:0xc002dae0,eax
c0018cdb:	8b 06                	mov    eax,DWORD PTR [esi]
c0018cdd:	a3 0c 11 03 c0       	mov    ds:0xc003110c,eax
c0018ce2:	8b 07                	mov    eax,DWORD PTR [edi]
c0018ce4:	a3 08 11 03 c0       	mov    ds:0xc0031108,eax
c0018ce9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018cec:	a3 04 11 03 c0       	mov    ds:0xc0031104,eax
c0018cf1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018cf5:	8b 00                	mov    eax,DWORD PTR [eax]
c0018cf7:	a3 00 11 03 c0       	mov    ds:0xc0031100,eax
c0018cfc:	5b                   	pop    ebx
c0018cfd:	5e                   	pop    esi
c0018cfe:	5f                   	pop    edi
c0018cff:	5d                   	pop    ebp
c0018d00:	c3                   	ret    
c0018d01:	90                   	nop

c0018d02 <CPU::cpuidCheckEDX(unsigned int)>:
c0018d02:	83 ec 10             	sub    esp,0x10
c0018d05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d09:	50                   	push   eax
c0018d0a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d0e:	50                   	push   eax
c0018d0f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d13:	50                   	push   eax
c0018d14:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d18:	50                   	push   eax
c0018d19:	6a 01                	push   0x1
c0018d1b:	e8 5e ff ff ff       	call   c0018c7e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d20:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d24:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018d28:	0f 95 c0             	setne  al
c0018d2b:	83 c4 24             	add    esp,0x24
c0018d2e:	c3                   	ret    
c0018d2f:	90                   	nop

c0018d30 <CPU::cpuidCheckECX(unsigned int)>:
c0018d30:	83 ec 10             	sub    esp,0x10
c0018d33:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d37:	50                   	push   eax
c0018d38:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d3c:	50                   	push   eax
c0018d3d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d41:	50                   	push   eax
c0018d42:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d46:	50                   	push   eax
c0018d47:	6a 01                	push   0x1
c0018d49:	e8 30 ff ff ff       	call   c0018c7e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d4e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d52:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018d56:	0f 95 c0             	setne  al
c0018d59:	83 c4 24             	add    esp,0x24
c0018d5c:	c3                   	ret    
c0018d5d:	90                   	nop

c0018d5e <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018d5e:	83 ec 10             	sub    esp,0x10
c0018d61:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d65:	50                   	push   eax
c0018d66:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d6a:	50                   	push   eax
c0018d6b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d6f:	50                   	push   eax
c0018d70:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d74:	50                   	push   eax
c0018d75:	6a 07                	push   0x7
c0018d77:	e8 02 ff ff ff       	call   c0018c7e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d7c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d80:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018d84:	0f 95 c0             	setne  al
c0018d87:	83 c4 24             	add    esp,0x24
c0018d8a:	c3                   	ret    
c0018d8b:	90                   	nop

c0018d8c <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018d8c:	83 ec 10             	sub    esp,0x10
c0018d8f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d93:	50                   	push   eax
c0018d94:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d98:	50                   	push   eax
c0018d99:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d9d:	50                   	push   eax
c0018d9e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018da2:	50                   	push   eax
c0018da3:	6a 07                	push   0x7
c0018da5:	e8 d4 fe ff ff       	call   c0018c7e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018daa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018dae:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018db2:	0f 95 c0             	setne  al
c0018db5:	83 c4 24             	add    esp,0x24
c0018db8:	c3                   	ret    
c0018db9:	90                   	nop

c0018dba <CPU::CPU()>:
c0018dba:	83 ec 0c             	sub    esp,0xc
c0018dbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018dc1:	83 ec 08             	sub    esp,0x8
c0018dc4:	68 4e ba 02 c0       	push   0xc002ba4e
c0018dc9:	50                   	push   eax
c0018dca:	e8 79 b7 ff ff       	call   c0014548 <Device::Device(char const*)>
c0018dcf:	83 c4 10             	add    esp,0x10
c0018dd2:	ba 28 bb 02 c0       	mov    edx,0xc002bb28
c0018dd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ddb:	89 10                	mov    DWORD PTR [eax],edx
c0018ddd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018de1:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018deb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018def:	05 78 01 00 00       	add    eax,0x178
c0018df4:	83 ec 0c             	sub    esp,0xc
c0018df7:	50                   	push   eax
c0018df8:	e8 5b 62 ff ff       	call   c000f058 <GDT::GDT()>
c0018dfd:	83 c4 10             	add    esp,0x10
c0018e00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e04:	05 7c 09 00 00       	add    eax,0x97c
c0018e09:	83 ec 0c             	sub    esp,0xc
c0018e0c:	50                   	push   eax
c0018e0d:	e8 a8 64 ff ff       	call   c000f2ba <IDT::IDT()>
c0018e12:	83 c4 10             	add    esp,0x10
c0018e15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e19:	05 7c 11 00 00       	add    eax,0x117c
c0018e1e:	83 ec 0c             	sub    esp,0xc
c0018e21:	50                   	push   eax
c0018e22:	e8 a1 86 ff ff       	call   c00114c8 <TSS::TSS()>
c0018e27:	83 c4 10             	add    esp,0x10
c0018e2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e2e:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018e35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e39:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018e43:	90                   	nop
c0018e44:	83 c4 0c             	add    esp,0xc
c0018e47:	c3                   	ret    

c0018e48 <CPU::displayFeatures()>:
c0018e48:	53                   	push   ebx
c0018e49:	83 ec 10             	sub    esp,0x10
c0018e4c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018e50:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018e56:	68 5c b7 02 c0       	push   0xc002b75c
c0018e5b:	e8 d1 a0 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0018e60:	59                   	pop    ecx
c0018e61:	58                   	pop    eax
c0018e62:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018e68:	50                   	push   eax
c0018e69:	68 6d b7 02 c0       	push   0xc002b76d
c0018e6e:	e8 be a0 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0018e73:	58                   	pop    eax
c0018e74:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e7a:	5a                   	pop    edx
c0018e7b:	c1 e8 0e             	shr    eax,0xe
c0018e7e:	0f b6 c0             	movzx  eax,al
c0018e81:	50                   	push   eax
c0018e82:	68 7e b7 02 c0       	push   0xc002b77e
c0018e87:	e8 a5 a0 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0018e8c:	59                   	pop    ecx
c0018e8d:	58                   	pop    eax
c0018e8e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e94:	66 c1 e8 06          	shr    ax,0x6
c0018e98:	0f b6 c0             	movzx  eax,al
c0018e9b:	50                   	push   eax
c0018e9c:	68 8f b7 02 c0       	push   0xc002b78f
c0018ea1:	e8 8b a0 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0018ea6:	c7 04 24 3c bc 02 c0 	mov    DWORD PTR [esp],0xc002bc3c
c0018ead:	e8 7f a0 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0018eb2:	83 c4 10             	add    esp,0x10
c0018eb5:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c0018eba:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018ec1:	74 05                	je     c0018ec8 <CPU::displayFeatures()+0x80>
c0018ec3:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c0018ec8:	52                   	push   edx
c0018ec9:	52                   	push   edx
c0018eca:	50                   	push   eax
c0018ecb:	68 a0 b7 02 c0       	push   0xc002b7a0
c0018ed0:	e8 5c a0 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0018ed5:	83 c4 10             	add    esp,0x10
c0018ed8:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c0018edd:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018ee4:	78 05                	js     c0018eeb <CPU::displayFeatures()+0xa3>
c0018ee6:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c0018eeb:	51                   	push   ecx
c0018eec:	51                   	push   ecx
c0018eed:	50                   	push   eax
c0018eee:	68 b7 b7 02 c0       	push   0xc002b7b7
c0018ef3:	e8 39 a0 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0018ef8:	83 c4 10             	add    esp,0x10
c0018efb:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c0018f00:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018f07:	75 05                	jne    c0018f0e <CPU::displayFeatures()+0xc6>
c0018f09:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c0018f0e:	52                   	push   edx
c0018f0f:	52                   	push   edx
c0018f10:	50                   	push   eax
c0018f11:	68 ce b7 02 c0       	push   0xc002b7ce
c0018f16:	e8 16 a0 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0018f1b:	83 c4 10             	add    esp,0x10
c0018f1e:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c0018f23:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018f2a:	75 05                	jne    c0018f31 <CPU::displayFeatures()+0xe9>
c0018f2c:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c0018f31:	51                   	push   ecx
c0018f32:	51                   	push   ecx
c0018f33:	50                   	push   eax
c0018f34:	68 e5 b7 02 c0       	push   0xc002b7e5
c0018f39:	e8 f3 9f ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0018f3e:	83 c4 10             	add    esp,0x10
c0018f41:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c0018f46:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018f4d:	75 05                	jne    c0018f54 <CPU::displayFeatures()+0x10c>
c0018f4f:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c0018f54:	52                   	push   edx
c0018f55:	52                   	push   edx
c0018f56:	50                   	push   eax
c0018f57:	68 fc b7 02 c0       	push   0xc002b7fc
c0018f5c:	e8 d0 9f ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0018f61:	83 c4 10             	add    esp,0x10
c0018f64:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c0018f69:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018f70:	75 05                	jne    c0018f77 <CPU::displayFeatures()+0x12f>
c0018f72:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c0018f77:	51                   	push   ecx
c0018f78:	51                   	push   ecx
c0018f79:	50                   	push   eax
c0018f7a:	68 13 b8 02 c0       	push   0xc002b813
c0018f7f:	e8 ad 9f ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0018f84:	83 c4 10             	add    esp,0x10
c0018f87:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c0018f8c:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018f93:	75 05                	jne    c0018f9a <CPU::displayFeatures()+0x152>
c0018f95:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c0018f9a:	52                   	push   edx
c0018f9b:	52                   	push   edx
c0018f9c:	50                   	push   eax
c0018f9d:	68 2a b8 02 c0       	push   0xc002b82a
c0018fa2:	e8 8a 9f ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0018fa7:	83 c4 10             	add    esp,0x10
c0018faa:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c0018faf:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018fb6:	75 05                	jne    c0018fbd <CPU::displayFeatures()+0x175>
c0018fb8:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c0018fbd:	51                   	push   ecx
c0018fbe:	51                   	push   ecx
c0018fbf:	50                   	push   eax
c0018fc0:	68 41 b8 02 c0       	push   0xc002b841
c0018fc5:	e8 67 9f ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0018fca:	83 c4 10             	add    esp,0x10
c0018fcd:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c0018fd2:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018fd9:	75 05                	jne    c0018fe0 <CPU::displayFeatures()+0x198>
c0018fdb:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c0018fe0:	52                   	push   edx
c0018fe1:	52                   	push   edx
c0018fe2:	50                   	push   eax
c0018fe3:	68 58 b8 02 c0       	push   0xc002b858
c0018fe8:	e8 44 9f ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0018fed:	83 c4 10             	add    esp,0x10
c0018ff0:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c0018ff5:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0018ffc:	75 05                	jne    c0019003 <CPU::displayFeatures()+0x1bb>
c0018ffe:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c0019003:	51                   	push   ecx
c0019004:	51                   	push   ecx
c0019005:	50                   	push   eax
c0019006:	68 6f b8 02 c0       	push   0xc002b86f
c001900b:	e8 21 9f ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0019010:	83 c4 10             	add    esp,0x10
c0019013:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c0019018:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c001901f:	75 05                	jne    c0019026 <CPU::displayFeatures()+0x1de>
c0019021:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c0019026:	52                   	push   edx
c0019027:	52                   	push   edx
c0019028:	50                   	push   eax
c0019029:	68 86 b8 02 c0       	push   0xc002b886
c001902e:	e8 fe 9e ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0019033:	83 c4 10             	add    esp,0x10
c0019036:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c001903b:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0019042:	75 05                	jne    c0019049 <CPU::displayFeatures()+0x201>
c0019044:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c0019049:	51                   	push   ecx
c001904a:	51                   	push   ecx
c001904b:	50                   	push   eax
c001904c:	68 9d b8 02 c0       	push   0xc002b89d
c0019051:	e8 db 9e ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0019056:	83 c4 10             	add    esp,0x10
c0019059:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c001905e:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0019065:	75 05                	jne    c001906c <CPU::displayFeatures()+0x224>
c0019067:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c001906c:	52                   	push   edx
c001906d:	52                   	push   edx
c001906e:	50                   	push   eax
c001906f:	68 b4 b8 02 c0       	push   0xc002b8b4
c0019074:	e8 b8 9e ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0019079:	83 c4 10             	add    esp,0x10
c001907c:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c0019081:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0019088:	78 05                	js     c001908f <CPU::displayFeatures()+0x247>
c001908a:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c001908f:	51                   	push   ecx
c0019090:	51                   	push   ecx
c0019091:	50                   	push   eax
c0019092:	68 cb b8 02 c0       	push   0xc002b8cb
c0019097:	e8 95 9e ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001909c:	83 c4 10             	add    esp,0x10
c001909f:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c00190a4:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c00190ab:	75 05                	jne    c00190b2 <CPU::displayFeatures()+0x26a>
c00190ad:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c00190b2:	52                   	push   edx
c00190b3:	52                   	push   edx
c00190b4:	50                   	push   eax
c00190b5:	68 e2 b8 02 c0       	push   0xc002b8e2
c00190ba:	e8 72 9e ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c00190bf:	83 c4 18             	add    esp,0x18
c00190c2:	5b                   	pop    ebx
c00190c3:	c3                   	ret    

c00190c4 <CPU::detectFeatures()>:
c00190c4:	55                   	push   ebp
c00190c5:	57                   	push   edi
c00190c6:	56                   	push   esi
c00190c7:	53                   	push   ebx
c00190c8:	83 ec 50             	sub    esp,0x50
c00190cb:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00190cf:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c00190d9:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c00190e0:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c00190e6:	6a 0d                	push   0xd
c00190e8:	6a 00                	push   0x0
c00190ea:	57                   	push   edi
c00190eb:	e8 88 76 fe ff       	call   c0000778 <memset>
c00190f0:	83 c4 10             	add    esp,0x10
c00190f3:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c00190f8:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00190ff:	0f 84 20 09 00 00    	je     c0019a25 <CPU::detectFeatures()+0x961>
c0019105:	83 ec 0c             	sub    esp,0xc
c0019108:	6a 10                	push   0x10
c001910a:	e8 f3 fb ff ff       	call   c0018d02 <CPU::cpuidCheckEDX(unsigned int)>
c001910f:	83 e0 01             	and    eax,0x1
c0019112:	8d 14 00             	lea    edx,[eax+eax*1]
c0019115:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001911b:	83 e0 fd             	and    eax,0xfffffffd
c001911e:	09 d0                	or     eax,edx
c0019120:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019126:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001912d:	e8 d0 fb ff ff       	call   c0018d02 <CPU::cpuidCheckEDX(unsigned int)>
c0019132:	83 e0 01             	and    eax,0x1
c0019135:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001913c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019142:	83 e0 fb             	and    eax,0xfffffffb
c0019145:	09 d0                	or     eax,edx
c0019147:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001914d:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0019154:	e8 a9 fb ff ff       	call   c0018d02 <CPU::cpuidCheckEDX(unsigned int)>
c0019159:	83 e0 01             	and    eax,0x1
c001915c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0019163:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019169:	83 e0 f7             	and    eax,0xfffffff7
c001916c:	09 d0                	or     eax,edx
c001916e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019174:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001917b:	e8 82 fb ff ff       	call   c0018d02 <CPU::cpuidCheckEDX(unsigned int)>
c0019180:	83 e0 01             	and    eax,0x1
c0019183:	c1 e0 04             	shl    eax,0x4
c0019186:	88 c2                	mov    dl,al
c0019188:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001918e:	83 e0 ef             	and    eax,0xffffffef
c0019191:	09 d0                	or     eax,edx
c0019193:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019199:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00191a0:	e8 5d fb ff ff       	call   c0018d02 <CPU::cpuidCheckEDX(unsigned int)>
c00191a5:	83 e0 01             	and    eax,0x1
c00191a8:	c1 e0 05             	shl    eax,0x5
c00191ab:	88 c2                	mov    dl,al
c00191ad:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191b3:	83 e0 df             	and    eax,0xffffffdf
c00191b6:	09 d0                	or     eax,edx
c00191b8:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191be:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00191c5:	e8 38 fb ff ff       	call   c0018d02 <CPU::cpuidCheckEDX(unsigned int)>
c00191ca:	83 e0 01             	and    eax,0x1
c00191cd:	8d 14 00             	lea    edx,[eax+eax*1]
c00191d0:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00191d6:	83 e0 fd             	and    eax,0xfffffffd
c00191d9:	09 d0                	or     eax,edx
c00191db:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00191e1:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00191e8:	e8 15 fb ff ff       	call   c0018d02 <CPU::cpuidCheckEDX(unsigned int)>
c00191ed:	83 e0 01             	and    eax,0x1
c00191f0:	c1 e0 06             	shl    eax,0x6
c00191f3:	88 c2                	mov    dl,al
c00191f5:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00191fb:	83 e0 bf             	and    eax,0xffffffbf
c00191fe:	09 d0                	or     eax,edx
c0019200:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019206:	58                   	pop    eax
c0019207:	8d 74 24 28          	lea    esi,[esp+0x28]
c001920b:	56                   	push   esi
c001920c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019210:	55                   	push   ebp
c0019211:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019215:	50                   	push   eax
c0019216:	8d 54 24 28          	lea    edx,[esp+0x28]
c001921a:	52                   	push   edx
c001921b:	6a 00                	push   0x0
c001921d:	e8 5c fa ff ff       	call   c0018c7e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019222:	83 c4 1c             	add    esp,0x1c
c0019225:	6a 04                	push   0x4
c0019227:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001922b:	50                   	push   eax
c001922c:	57                   	push   edi
c001922d:	e8 12 75 fe ff       	call   c0000744 <memcpy>
c0019232:	83 c4 0c             	add    esp,0xc
c0019235:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c001923b:	6a 04                	push   0x4
c001923d:	56                   	push   esi
c001923e:	50                   	push   eax
c001923f:	e8 00 75 fe ff       	call   c0000744 <memcpy>
c0019244:	83 c4 0c             	add    esp,0xc
c0019247:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c001924d:	6a 04                	push   0x4
c001924f:	55                   	push   ebp
c0019250:	50                   	push   eax
c0019251:	e8 ee 74 fe ff       	call   c0000744 <memcpy>
c0019256:	58                   	pop    eax
c0019257:	5a                   	pop    edx
c0019258:	68 f9 b8 02 c0       	push   0xc002b8f9
c001925d:	57                   	push   edi
c001925e:	e8 5d 76 fe ff       	call   c00008c0 <strcmp>
c0019263:	83 c4 10             	add    esp,0x10
c0019266:	85 c0                	test   eax,eax
c0019268:	75 0f                	jne    c0019279 <CPU::detectFeatures()+0x1b5>
c001926a:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0019274:	e9 22 02 00 00       	jmp    c001949b <CPU::detectFeatures()+0x3d7>
c0019279:	50                   	push   eax
c001927a:	50                   	push   eax
c001927b:	68 06 b9 02 c0       	push   0xc002b906
c0019280:	57                   	push   edi
c0019281:	e8 3a 76 fe ff       	call   c00008c0 <strcmp>
c0019286:	83 c4 10             	add    esp,0x10
c0019289:	85 c0                	test   eax,eax
c001928b:	74 dd                	je     c001926a <CPU::detectFeatures()+0x1a6>
c001928d:	51                   	push   ecx
c001928e:	51                   	push   ecx
c001928f:	68 13 b9 02 c0       	push   0xc002b913
c0019294:	57                   	push   edi
c0019295:	e8 26 76 fe ff       	call   c00008c0 <strcmp>
c001929a:	83 c4 10             	add    esp,0x10
c001929d:	85 c0                	test   eax,eax
c001929f:	74 2a                	je     c00192cb <CPU::detectFeatures()+0x207>
c00192a1:	52                   	push   edx
c00192a2:	52                   	push   edx
c00192a3:	68 20 b9 02 c0       	push   0xc002b920
c00192a8:	57                   	push   edi
c00192a9:	e8 12 76 fe ff       	call   c00008c0 <strcmp>
c00192ae:	83 c4 10             	add    esp,0x10
c00192b1:	85 c0                	test   eax,eax
c00192b3:	74 16                	je     c00192cb <CPU::detectFeatures()+0x207>
c00192b5:	50                   	push   eax
c00192b6:	50                   	push   eax
c00192b7:	68 2d b9 02 c0       	push   0xc002b92d
c00192bc:	57                   	push   edi
c00192bd:	e8 fe 75 fe ff       	call   c00008c0 <strcmp>
c00192c2:	83 c4 10             	add    esp,0x10
c00192c5:	85 c0                	test   eax,eax
c00192c7:	74 48                	je     c0019311 <CPU::detectFeatures()+0x24d>
c00192c9:	eb 0f                	jmp    c00192da <CPU::detectFeatures()+0x216>
c00192cb:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00192d5:	e9 c1 01 00 00       	jmp    c001949b <CPU::detectFeatures()+0x3d7>
c00192da:	50                   	push   eax
c00192db:	50                   	push   eax
c00192dc:	68 3a b9 02 c0       	push   0xc002b93a
c00192e1:	57                   	push   edi
c00192e2:	e8 d9 75 fe ff       	call   c00008c0 <strcmp>
c00192e7:	83 c4 10             	add    esp,0x10
c00192ea:	85 c0                	test   eax,eax
c00192ec:	74 23                	je     c0019311 <CPU::detectFeatures()+0x24d>
c00192ee:	50                   	push   eax
c00192ef:	50                   	push   eax
c00192f0:	68 47 b9 02 c0       	push   0xc002b947
c00192f5:	57                   	push   edi
c00192f6:	e8 c5 75 fe ff       	call   c00008c0 <strcmp>
c00192fb:	83 c4 10             	add    esp,0x10
c00192fe:	85 c0                	test   eax,eax
c0019300:	75 1e                	jne    c0019320 <CPU::detectFeatures()+0x25c>
c0019302:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001930c:	e9 8a 01 00 00       	jmp    c001949b <CPU::detectFeatures()+0x3d7>
c0019311:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001931b:	e9 7b 01 00 00       	jmp    c001949b <CPU::detectFeatures()+0x3d7>
c0019320:	50                   	push   eax
c0019321:	50                   	push   eax
c0019322:	68 54 b9 02 c0       	push   0xc002b954
c0019327:	57                   	push   edi
c0019328:	e8 93 75 fe ff       	call   c00008c0 <strcmp>
c001932d:	83 c4 10             	add    esp,0x10
c0019330:	85 c0                	test   eax,eax
c0019332:	75 0f                	jne    c0019343 <CPU::detectFeatures()+0x27f>
c0019334:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001933e:	e9 58 01 00 00       	jmp    c001949b <CPU::detectFeatures()+0x3d7>
c0019343:	50                   	push   eax
c0019344:	50                   	push   eax
c0019345:	68 13 b9 02 c0       	push   0xc002b913
c001934a:	57                   	push   edi
c001934b:	e8 70 75 fe ff       	call   c00008c0 <strcmp>
c0019350:	83 c4 10             	add    esp,0x10
c0019353:	85 c0                	test   eax,eax
c0019355:	75 0f                	jne    c0019366 <CPU::detectFeatures()+0x2a2>
c0019357:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0019361:	e9 35 01 00 00       	jmp    c001949b <CPU::detectFeatures()+0x3d7>
c0019366:	50                   	push   eax
c0019367:	50                   	push   eax
c0019368:	68 61 b9 02 c0       	push   0xc002b961
c001936d:	57                   	push   edi
c001936e:	e8 4d 75 fe ff       	call   c00008c0 <strcmp>
c0019373:	83 c4 10             	add    esp,0x10
c0019376:	85 c0                	test   eax,eax
c0019378:	75 0f                	jne    c0019389 <CPU::detectFeatures()+0x2c5>
c001937a:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0019384:	e9 12 01 00 00       	jmp    c001949b <CPU::detectFeatures()+0x3d7>
c0019389:	51                   	push   ecx
c001938a:	51                   	push   ecx
c001938b:	68 6e b9 02 c0       	push   0xc002b96e
c0019390:	57                   	push   edi
c0019391:	e8 2a 75 fe ff       	call   c00008c0 <strcmp>
c0019396:	83 c4 10             	add    esp,0x10
c0019399:	85 c0                	test   eax,eax
c001939b:	75 0f                	jne    c00193ac <CPU::detectFeatures()+0x2e8>
c001939d:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00193a7:	e9 ef 00 00 00       	jmp    c001949b <CPU::detectFeatures()+0x3d7>
c00193ac:	52                   	push   edx
c00193ad:	52                   	push   edx
c00193ae:	68 7b b9 02 c0       	push   0xc002b97b
c00193b3:	57                   	push   edi
c00193b4:	e8 07 75 fe ff       	call   c00008c0 <strcmp>
c00193b9:	83 c4 10             	add    esp,0x10
c00193bc:	85 c0                	test   eax,eax
c00193be:	75 0f                	jne    c00193cf <CPU::detectFeatures()+0x30b>
c00193c0:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00193ca:	e9 cc 00 00 00       	jmp    c001949b <CPU::detectFeatures()+0x3d7>
c00193cf:	50                   	push   eax
c00193d0:	50                   	push   eax
c00193d1:	68 88 b9 02 c0       	push   0xc002b988
c00193d6:	57                   	push   edi
c00193d7:	e8 e4 74 fe ff       	call   c00008c0 <strcmp>
c00193dc:	83 c4 10             	add    esp,0x10
c00193df:	85 c0                	test   eax,eax
c00193e1:	75 0f                	jne    c00193f2 <CPU::detectFeatures()+0x32e>
c00193e3:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00193ed:	e9 a9 00 00 00       	jmp    c001949b <CPU::detectFeatures()+0x3d7>
c00193f2:	50                   	push   eax
c00193f3:	50                   	push   eax
c00193f4:	68 95 b9 02 c0       	push   0xc002b995
c00193f9:	57                   	push   edi
c00193fa:	e8 c1 74 fe ff       	call   c00008c0 <strcmp>
c00193ff:	83 c4 10             	add    esp,0x10
c0019402:	85 c0                	test   eax,eax
c0019404:	75 0f                	jne    c0019415 <CPU::detectFeatures()+0x351>
c0019406:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0019410:	e9 86 00 00 00       	jmp    c001949b <CPU::detectFeatures()+0x3d7>
c0019415:	50                   	push   eax
c0019416:	50                   	push   eax
c0019417:	68 a2 b9 02 c0       	push   0xc002b9a2
c001941c:	57                   	push   edi
c001941d:	e8 9e 74 fe ff       	call   c00008c0 <strcmp>
c0019422:	83 c4 10             	add    esp,0x10
c0019425:	85 c0                	test   eax,eax
c0019427:	75 0c                	jne    c0019435 <CPU::detectFeatures()+0x371>
c0019429:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0019433:	eb 66                	jmp    c001949b <CPU::detectFeatures()+0x3d7>
c0019435:	50                   	push   eax
c0019436:	50                   	push   eax
c0019437:	68 af b9 02 c0       	push   0xc002b9af
c001943c:	57                   	push   edi
c001943d:	e8 7e 74 fe ff       	call   c00008c0 <strcmp>
c0019442:	83 c4 10             	add    esp,0x10
c0019445:	85 c0                	test   eax,eax
c0019447:	75 0c                	jne    c0019455 <CPU::detectFeatures()+0x391>
c0019449:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0019453:	eb 46                	jmp    c001949b <CPU::detectFeatures()+0x3d7>
c0019455:	50                   	push   eax
c0019456:	50                   	push   eax
c0019457:	68 bc b9 02 c0       	push   0xc002b9bc
c001945c:	57                   	push   edi
c001945d:	e8 5e 74 fe ff       	call   c00008c0 <strcmp>
c0019462:	83 c4 10             	add    esp,0x10
c0019465:	85 c0                	test   eax,eax
c0019467:	74 e0                	je     c0019449 <CPU::detectFeatures()+0x385>
c0019469:	50                   	push   eax
c001946a:	50                   	push   eax
c001946b:	68 c9 b9 02 c0       	push   0xc002b9c9
c0019470:	57                   	push   edi
c0019471:	e8 4a 74 fe ff       	call   c00008c0 <strcmp>
c0019476:	83 c4 10             	add    esp,0x10
c0019479:	85 c0                	test   eax,eax
c001947b:	74 cc                	je     c0019449 <CPU::detectFeatures()+0x385>
c001947d:	51                   	push   ecx
c001947e:	51                   	push   ecx
c001947f:	68 d6 b9 02 c0       	push   0xc002b9d6
c0019484:	57                   	push   edi
c0019485:	e8 36 74 fe ff       	call   c00008c0 <strcmp>
c001948a:	83 c4 10             	add    esp,0x10
c001948d:	85 c0                	test   eax,eax
c001948f:	74 b8                	je     c0019449 <CPU::detectFeatures()+0x385>
c0019491:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001949b:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00194a0:	0f 86 be 00 00 00    	jbe    c0019564 <CPU::detectFeatures()+0x4a0>
c00194a6:	83 ec 0c             	sub    esp,0xc
c00194a9:	68 80 00 00 00       	push   0x80
c00194ae:	e8 ab f8 ff ff       	call   c0018d5e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00194b3:	83 e0 01             	and    eax,0x1
c00194b6:	c1 e0 06             	shl    eax,0x6
c00194b9:	88 c2                	mov    dl,al
c00194bb:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00194c1:	83 e0 bf             	and    eax,0xffffffbf
c00194c4:	09 d0                	or     eax,edx
c00194c6:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00194cc:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00194d3:	e8 86 f8 ff ff       	call   c0018d5e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00194d8:	83 e0 01             	and    eax,0x1
c00194db:	c1 e0 04             	shl    eax,0x4
c00194de:	88 c2                	mov    dl,al
c00194e0:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00194e6:	83 e0 ef             	and    eax,0xffffffef
c00194e9:	09 d0                	or     eax,edx
c00194eb:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00194f1:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00194f8:	e8 61 f8 ff ff       	call   c0018d5e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00194fd:	c1 e0 07             	shl    eax,0x7
c0019500:	88 c2                	mov    dl,al
c0019502:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019508:	83 e0 7f             	and    eax,0x7f
c001950b:	09 d0                	or     eax,edx
c001950d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019513:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001951a:	e8 6d f8 ff ff       	call   c0018d8c <CPU::cpuidCheckExtendedECX(unsigned int)>
c001951f:	83 e0 01             	and    eax,0x1
c0019522:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0019529:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001952f:	83 e0 f7             	and    eax,0xfffffff7
c0019532:	09 d0                	or     eax,edx
c0019534:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001953a:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0019541:	e8 46 f8 ff ff       	call   c0018d8c <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019546:	83 c4 10             	add    esp,0x10
c0019549:	83 e0 01             	and    eax,0x1
c001954c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019553:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019559:	83 e0 fb             	and    eax,0xfffffffb
c001955c:	09 d0                	or     eax,edx
c001955e:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019564:	83 ec 0c             	sub    esp,0xc
c0019567:	56                   	push   esi
c0019568:	55                   	push   ebp
c0019569:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001956d:	57                   	push   edi
c001956e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019572:	50                   	push   eax
c0019573:	6a 01                	push   0x1
c0019575:	e8 04 f7 ff ff       	call   c0018c7e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001957a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001957e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019584:	88 ca                	mov    dl,cl
c0019586:	83 e0 f0             	and    eax,0xfffffff0
c0019589:	83 e2 0f             	and    edx,0xf
c001958c:	09 d0                	or     eax,edx
c001958e:	88 ca                	mov    dl,cl
c0019590:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0019596:	c0 ea 04             	shr    dl,0x4
c0019599:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c001959d:	0f b6 c2             	movzx  eax,dl
c00195a0:	83 c4 20             	add    esp,0x20
c00195a3:	c1 e0 06             	shl    eax,0x6
c00195a6:	89 c5                	mov    ebp,eax
c00195a8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00195ae:	66 25 3f c0          	and    ax,0xc03f
c00195b2:	09 e8                	or     eax,ebp
c00195b4:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00195bb:	89 c8                	mov    eax,ecx
c00195bd:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00195c3:	c1 e8 08             	shr    eax,0x8
c00195c6:	83 e2 3f             	and    edx,0x3f
c00195c9:	83 e0 0f             	and    eax,0xf
c00195cc:	89 c5                	mov    ebp,eax
c00195ce:	c1 e5 06             	shl    ebp,0x6
c00195d1:	09 d5                	or     ebp,edx
c00195d3:	89 ea                	mov    edx,ebp
c00195d5:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00195db:	88 c2                	mov    dl,al
c00195dd:	c0 ea 02             	shr    dl,0x2
c00195e0:	89 d5                	mov    ebp,edx
c00195e2:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00195e8:	83 e2 c0             	and    edx,0xffffffc0
c00195eb:	09 d5                	or     ebp,edx
c00195ed:	89 ea                	mov    edx,ebp
c00195ef:	89 cd                	mov    ebp,ecx
c00195f1:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00195f7:	c1 ed 0c             	shr    ebp,0xc
c00195fa:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0019600:	83 e5 03             	and    ebp,0x3
c0019603:	83 e2 cf             	and    edx,0xffffffcf
c0019606:	c1 e5 04             	shl    ebp,0x4
c0019609:	09 d5                	or     ebp,edx
c001960b:	3c 06                	cmp    al,0x6
c001960d:	89 ea                	mov    edx,ebp
c001960f:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0019615:	74 04                	je     c001961b <CPU::detectFeatures()+0x557>
c0019617:	3c 0f                	cmp    al,0xf
c0019619:	75 5c                	jne    c0019677 <CPU::detectFeatures()+0x5b3>
c001961b:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001961f:	89 cd                	mov    ebp,ecx
c0019621:	c1 ed 10             	shr    ebp,0x10
c0019624:	c1 e5 04             	shl    ebp,0x4
c0019627:	09 ea                	or     edx,ebp
c0019629:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001962f:	0f b6 d2             	movzx  edx,dl
c0019632:	66 81 e5 3f c0       	and    bp,0xc03f
c0019637:	c1 e2 06             	shl    edx,0x6
c001963a:	09 ea                	or     edx,ebp
c001963c:	3c 0f                	cmp    al,0xf
c001963e:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0019645:	75 30                	jne    c0019677 <CPU::detectFeatures()+0x5b3>
c0019647:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c001964d:	c1 e9 14             	shr    ecx,0x14
c0019650:	83 e0 3f             	and    eax,0x3f
c0019653:	83 c1 0f             	add    ecx,0xf
c0019656:	88 ca                	mov    dl,cl
c0019658:	c0 e9 02             	shr    cl,0x2
c001965b:	c1 e2 06             	shl    edx,0x6
c001965e:	09 d0                	or     eax,edx
c0019660:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0019666:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c001966c:	83 e0 c0             	and    eax,0xffffffc0
c001966f:	09 c1                	or     ecx,eax
c0019671:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0019677:	83 ec 0c             	sub    esp,0xc
c001967a:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019681:	56                   	push   esi
c0019682:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019686:	50                   	push   eax
c0019687:	57                   	push   edi
c0019688:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001968c:	55                   	push   ebp
c001968d:	68 00 00 00 80       	push   0x80000000
c0019692:	e8 e7 f5 ff ff       	call   c0018c7e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019697:	83 c4 20             	add    esp,0x20
c001969a:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00196a2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00196a6:	76 1e                	jbe    c00196c6 <CPU::detectFeatures()+0x602>
c00196a8:	83 ec 0c             	sub    esp,0xc
c00196ab:	56                   	push   esi
c00196ac:	50                   	push   eax
c00196ad:	57                   	push   edi
c00196ae:	55                   	push   ebp
c00196af:	68 01 00 00 80       	push   0x80000001
c00196b4:	e8 c5 f5 ff ff       	call   c0018c7e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00196b9:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00196c3:	83 c4 20             	add    esp,0x20
c00196c6:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00196cc:	83 f8 01             	cmp    eax,0x1
c00196cf:	75 6f                	jne    c0019740 <CPU::detectFeatures()+0x67c>
c00196d1:	51                   	push   ecx
c00196d2:	51                   	push   ecx
c00196d3:	68 e2 b9 02 c0       	push   0xc002b9e2
c00196d8:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00196dc:	56                   	push   esi
c00196dd:	e8 52 71 fe ff       	call   c0000834 <strcpy>
c00196e2:	5f                   	pop    edi
c00196e3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00196e9:	5d                   	pop    ebp
c00196ea:	66 c1 e8 06          	shr    ax,0x6
c00196ee:	0f b6 c0             	movzx  eax,al
c00196f1:	50                   	push   eax
c00196f2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00196f8:	c1 e8 0e             	shr    eax,0xe
c00196fb:	0f b6 c0             	movzx  eax,al
c00196fe:	50                   	push   eax
c00196ff:	e8 24 f2 ff ff       	call   c0018928 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0019704:	5a                   	pop    edx
c0019705:	59                   	pop    ecx
c0019706:	50                   	push   eax
c0019707:	56                   	push   esi
c0019708:	e8 67 72 fe ff       	call   c0000974 <strcat>
c001970d:	5f                   	pop    edi
c001970e:	5d                   	pop    ebp
c001970f:	56                   	push   esi
c0019710:	53                   	push   ebx
c0019711:	e8 24 ae ff ff       	call   c001453a <Device::setName(char const*)>
c0019716:	58                   	pop    eax
c0019717:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001971d:	5a                   	pop    edx
c001971e:	68 e9 b9 02 c0       	push   0xc002b9e9
c0019723:	50                   	push   eax
c0019724:	e8 97 71 fe ff       	call   c00008c0 <strcmp>
c0019729:	83 c4 10             	add    esp,0x10
c001972c:	85 c0                	test   eax,eax
c001972e:	0f 85 71 03 00 00    	jne    c0019aa5 <CPU::detectFeatures()+0x9e1>
c0019734:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c001973b:	e9 65 03 00 00       	jmp    c0019aa5 <CPU::detectFeatures()+0x9e1>
c0019740:	83 f8 02             	cmp    eax,0x2
c0019743:	0f 85 b5 00 00 00    	jne    c00197fe <CPU::detectFeatures()+0x73a>
c0019749:	57                   	push   edi
c001974a:	57                   	push   edi
c001974b:	68 fb b9 02 c0       	push   0xc002b9fb
c0019750:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019754:	56                   	push   esi
c0019755:	e8 da 70 fe ff       	call   c0000834 <strcpy>
c001975a:	5d                   	pop    ebp
c001975b:	58                   	pop    eax
c001975c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019762:	66 c1 e8 06          	shr    ax,0x6
c0019766:	0f b6 c0             	movzx  eax,al
c0019769:	50                   	push   eax
c001976a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019770:	c1 e8 0e             	shr    eax,0xe
c0019773:	0f b6 c0             	movzx  eax,al
c0019776:	50                   	push   eax
c0019777:	e8 18 f0 ff ff       	call   c0018794 <CPU::lookupAMDName(unsigned char, unsigned char)>
c001977c:	5a                   	pop    edx
c001977d:	59                   	pop    ecx
c001977e:	50                   	push   eax
c001977f:	56                   	push   esi
c0019780:	e8 ef 71 fe ff       	call   c0000974 <strcat>
c0019785:	5f                   	pop    edi
c0019786:	5d                   	pop    ebp
c0019787:	56                   	push   esi
c0019788:	53                   	push   ebx
c0019789:	e8 ac ad ff ff       	call   c001453a <Device::setName(char const*)>
c001978e:	58                   	pop    eax
c001978f:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019795:	5a                   	pop    edx
c0019796:	68 00 ba 02 c0       	push   0xc002ba00
c001979b:	50                   	push   eax
c001979c:	e8 1f 71 fe ff       	call   c00008c0 <strcmp>
c00197a1:	83 c4 10             	add    esp,0x10
c00197a4:	85 c0                	test   eax,eax
c00197a6:	75 20                	jne    c00197c8 <CPU::detectFeatures()+0x704>
c00197a8:	8b 15 c8 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5c8
c00197ae:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00197b4:	a8 01                	test   al,0x1
c00197b6:	74 10                	je     c00197c8 <CPU::detectFeatures()+0x704>
c00197b8:	83 e0 fe             	and    eax,0xfffffffe
c00197bb:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00197c1:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00197c8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197ce:	c1 e8 0e             	shr    eax,0xe
c00197d1:	3c 05                	cmp    al,0x5
c00197d3:	0f 85 cc 02 00 00    	jne    c0019aa5 <CPU::detectFeatures()+0x9e1>
c00197d9:	56                   	push   esi
c00197da:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00197e0:	83 e0 0f             	and    eax,0xf
c00197e3:	50                   	push   eax
c00197e4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197ea:	66 c1 e8 06          	shr    ax,0x6
c00197ee:	0f b6 c0             	movzx  eax,al
c00197f1:	50                   	push   eax
c00197f2:	6a 05                	push   0x5
c00197f4:	e8 11 f4 ff ff       	call   c0018c0a <CPU::AMD_K6_writeback(int, int, int)>
c00197f9:	e9 1f 02 00 00       	jmp    c0019a1d <CPU::detectFeatures()+0x959>
c00197fe:	8d 50 fd             	lea    edx,[eax-0x3]
c0019801:	83 fa 01             	cmp    edx,0x1
c0019804:	76 09                	jbe    c001980f <CPU::detectFeatures()+0x74b>
c0019806:	83 f8 06             	cmp    eax,0x6
c0019809:	0f 85 91 01 00 00    	jne    c00199a0 <CPU::detectFeatures()+0x8dc>
c001980f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019815:	c1 ea 0e             	shr    edx,0xe
c0019818:	80 fa 05             	cmp    dl,0x5
c001981b:	75 7b                	jne    c0019898 <CPU::detectFeatures()+0x7d4>
c001981d:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019823:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019828:	66 81 fa 00 01       	cmp    dx,0x100
c001982d:	75 0c                	jne    c001983b <CPU::detectFeatures()+0x777>
c001982f:	51                   	push   ecx
c0019830:	51                   	push   ecx
c0019831:	68 07 ba 02 c0       	push   0xc002ba07
c0019836:	e9 dc 01 00 00       	jmp    c0019a17 <CPU::detectFeatures()+0x953>
c001983b:	66 81 fa 00 02       	cmp    dx,0x200
c0019840:	75 0c                	jne    c001984e <CPU::detectFeatures()+0x78a>
c0019842:	52                   	push   edx
c0019843:	52                   	push   edx
c0019844:	68 1a ba 02 c0       	push   0xc002ba1a
c0019849:	e9 c9 01 00 00       	jmp    c0019a17 <CPU::detectFeatures()+0x953>
c001984e:	66 81 fa 40 02       	cmp    dx,0x240
c0019853:	75 0c                	jne    c0019861 <CPU::detectFeatures()+0x79d>
c0019855:	50                   	push   eax
c0019856:	50                   	push   eax
c0019857:	68 2c ba 02 c0       	push   0xc002ba2c
c001985c:	e9 b6 01 00 00       	jmp    c0019a17 <CPU::detectFeatures()+0x953>
c0019861:	83 f8 06             	cmp    eax,0x6
c0019864:	75 0c                	jne    c0019872 <CPU::detectFeatures()+0x7ae>
c0019866:	50                   	push   eax
c0019867:	50                   	push   eax
c0019868:	68 3e ba 02 c0       	push   0xc002ba3e
c001986d:	e9 a5 01 00 00       	jmp    c0019a17 <CPU::detectFeatures()+0x953>
c0019872:	83 f8 04             	cmp    eax,0x4
c0019875:	75 0c                	jne    c0019883 <CPU::detectFeatures()+0x7bf>
c0019877:	50                   	push   eax
c0019878:	50                   	push   eax
c0019879:	68 4a ba 02 c0       	push   0xc002ba4a
c001987e:	e9 94 01 00 00       	jmp    c0019a17 <CPU::detectFeatures()+0x953>
c0019883:	83 f8 03             	cmp    eax,0x3
c0019886:	0f 85 19 02 00 00    	jne    c0019aa5 <CPU::detectFeatures()+0x9e1>
c001988c:	50                   	push   eax
c001988d:	50                   	push   eax
c001988e:	68 52 ba 02 c0       	push   0xc002ba52
c0019893:	e9 7f 01 00 00       	jmp    c0019a17 <CPU::detectFeatures()+0x953>
c0019898:	80 fa 06             	cmp    dl,0x6
c001989b:	0f 85 db 00 00 00    	jne    c001997c <CPU::detectFeatures()+0x8b8>
c00198a1:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00198a7:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00198ac:	66 81 fa 80 01       	cmp    dx,0x180
c00198b1:	75 0c                	jne    c00198bf <CPU::detectFeatures()+0x7fb>
c00198b3:	50                   	push   eax
c00198b4:	50                   	push   eax
c00198b5:	68 5d ba 02 c0       	push   0xc002ba5d
c00198ba:	e9 58 01 00 00       	jmp    c0019a17 <CPU::detectFeatures()+0x953>
c00198bf:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00198c5:	66 f7 c1 80 ff       	test   cx,0xff80
c00198ca:	75 0c                	jne    c00198d8 <CPU::detectFeatures()+0x814>
c00198cc:	50                   	push   eax
c00198cd:	50                   	push   eax
c00198ce:	68 6d ba 02 c0       	push   0xc002ba6d
c00198d3:	e9 3f 01 00 00       	jmp    c0019a17 <CPU::detectFeatures()+0x953>
c00198d8:	66 81 fa 40 02       	cmp    dx,0x240
c00198dd:	75 0c                	jne    c00198eb <CPU::detectFeatures()+0x827>
c00198df:	55                   	push   ebp
c00198e0:	55                   	push   ebp
c00198e1:	68 74 ba 02 c0       	push   0xc002ba74
c00198e6:	e9 2c 01 00 00       	jmp    c0019a17 <CPU::detectFeatures()+0x953>
c00198eb:	66 81 fa 80 02       	cmp    dx,0x280
c00198f0:	75 0c                	jne    c00198fe <CPU::detectFeatures()+0x83a>
c00198f2:	57                   	push   edi
c00198f3:	57                   	push   edi
c00198f4:	68 7d ba 02 c0       	push   0xc002ba7d
c00198f9:	e9 19 01 00 00       	jmp    c0019a17 <CPU::detectFeatures()+0x953>
c00198fe:	66 81 fa 40 03       	cmp    dx,0x340
c0019903:	74 ed                	je     c00198f2 <CPU::detectFeatures()+0x82e>
c0019905:	66 81 fa c0 03       	cmp    dx,0x3c0
c001990a:	75 0c                	jne    c0019918 <CPU::detectFeatures()+0x854>
c001990c:	56                   	push   esi
c001990d:	56                   	push   esi
c001990e:	68 84 ba 02 c0       	push   0xc002ba84
c0019913:	e9 ff 00 00 00       	jmp    c0019a17 <CPU::detectFeatures()+0x953>
c0019918:	83 f8 06             	cmp    eax,0x6
c001991b:	0f 84 45 ff ff ff    	je     c0019866 <CPU::detectFeatures()+0x7a2>
c0019921:	83 f8 04             	cmp    eax,0x4
c0019924:	0f 84 4d ff ff ff    	je     c0019877 <CPU::detectFeatures()+0x7b3>
c001992a:	83 f8 03             	cmp    eax,0x3
c001992d:	0f 85 72 01 00 00    	jne    c0019aa5 <CPU::detectFeatures()+0x9e1>
c0019933:	51                   	push   ecx
c0019934:	51                   	push   ecx
c0019935:	68 8d ba 02 c0       	push   0xc002ba8d
c001993a:	53                   	push   ebx
c001993b:	e8 fa ab ff ff       	call   c001453a <Device::setName(char const*)>
c0019940:	b1 c1                	mov    cl,0xc1
c0019942:	88 c8                	mov    al,cl
c0019944:	e6 22                	out    0x22,al
c0019946:	e4 23                	in     al,0x23
c0019948:	88 c2                	mov    dl,al
c001994a:	88 c8                	mov    al,cl
c001994c:	e6 22                	out    0x22,al
c001994e:	88 d0                	mov    al,dl
c0019950:	83 c8 10             	or     eax,0x10
c0019953:	e6 23                	out    0x23,al
c0019955:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001995c:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001995f:	89 d0                	mov    eax,edx
c0019961:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019967:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c001996b:	40                   	inc    eax
c001996c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019972:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019977:	e9 a1 00 00 00       	jmp    c0019a1d <CPU::detectFeatures()+0x959>
c001997c:	83 f8 06             	cmp    eax,0x6
c001997f:	0f 84 e1 fe ff ff    	je     c0019866 <CPU::detectFeatures()+0x7a2>
c0019985:	83 f8 04             	cmp    eax,0x4
c0019988:	0f 84 e9 fe ff ff    	je     c0019877 <CPU::detectFeatures()+0x7b3>
c001998e:	83 f8 03             	cmp    eax,0x3
c0019991:	0f 85 0e 01 00 00    	jne    c0019aa5 <CPU::detectFeatures()+0x9e1>
c0019997:	52                   	push   edx
c0019998:	52                   	push   edx
c0019999:	68 98 ba 02 c0       	push   0xc002ba98
c001999e:	eb 77                	jmp    c0019a17 <CPU::detectFeatures()+0x953>
c00199a0:	83 f8 07             	cmp    eax,0x7
c00199a3:	75 09                	jne    c00199ae <CPU::detectFeatures()+0x8ea>
c00199a5:	50                   	push   eax
c00199a6:	50                   	push   eax
c00199a7:	68 a2 ba 02 c0       	push   0xc002baa2
c00199ac:	eb 69                	jmp    c0019a17 <CPU::detectFeatures()+0x953>
c00199ae:	83 f8 0a             	cmp    eax,0xa
c00199b1:	75 09                	jne    c00199bc <CPU::detectFeatures()+0x8f8>
c00199b3:	50                   	push   eax
c00199b4:	50                   	push   eax
c00199b5:	68 ad ba 02 c0       	push   0xc002baad
c00199ba:	eb 5b                	jmp    c0019a17 <CPU::detectFeatures()+0x953>
c00199bc:	83 f8 0b             	cmp    eax,0xb
c00199bf:	75 09                	jne    c00199ca <CPU::detectFeatures()+0x906>
c00199c1:	50                   	push   eax
c00199c2:	50                   	push   eax
c00199c3:	68 b5 ba 02 c0       	push   0xc002bab5
c00199c8:	eb 4d                	jmp    c0019a17 <CPU::detectFeatures()+0x953>
c00199ca:	83 f8 08             	cmp    eax,0x8
c00199cd:	75 09                	jne    c00199d8 <CPU::detectFeatures()+0x914>
c00199cf:	50                   	push   eax
c00199d0:	50                   	push   eax
c00199d1:	68 be ba 02 c0       	push   0xc002babe
c00199d6:	eb 3f                	jmp    c0019a17 <CPU::detectFeatures()+0x953>
c00199d8:	83 f8 09             	cmp    eax,0x9
c00199db:	75 09                	jne    c00199e6 <CPU::detectFeatures()+0x922>
c00199dd:	50                   	push   eax
c00199de:	50                   	push   eax
c00199df:	68 c6 ba 02 c0       	push   0xc002bac6
c00199e4:	eb 31                	jmp    c0019a17 <CPU::detectFeatures()+0x953>
c00199e6:	83 f8 05             	cmp    eax,0x5
c00199e9:	75 09                	jne    c00199f4 <CPU::detectFeatures()+0x930>
c00199eb:	50                   	push   eax
c00199ec:	50                   	push   eax
c00199ed:	68 ce ba 02 c0       	push   0xc002bace
c00199f2:	eb 23                	jmp    c0019a17 <CPU::detectFeatures()+0x953>
c00199f4:	83 f8 0c             	cmp    eax,0xc
c00199f7:	75 09                	jne    c0019a02 <CPU::detectFeatures()+0x93e>
c00199f9:	55                   	push   ebp
c00199fa:	55                   	push   ebp
c00199fb:	68 dc ba 02 c0       	push   0xc002badc
c0019a00:	eb 15                	jmp    c0019a17 <CPU::detectFeatures()+0x953>
c0019a02:	83 f8 0d             	cmp    eax,0xd
c0019a05:	75 09                	jne    c0019a10 <CPU::detectFeatures()+0x94c>
c0019a07:	57                   	push   edi
c0019a08:	57                   	push   edi
c0019a09:	68 e7 ba 02 c0       	push   0xc002bae7
c0019a0e:	eb 07                	jmp    c0019a17 <CPU::detectFeatures()+0x953>
c0019a10:	56                   	push   esi
c0019a11:	56                   	push   esi
c0019a12:	68 fb ba 02 c0       	push   0xc002bafb
c0019a17:	53                   	push   ebx
c0019a18:	e8 1d ab ff ff       	call   c001453a <Device::setName(char const*)>
c0019a1d:	83 c4 10             	add    esp,0x10
c0019a20:	e9 80 00 00 00       	jmp    c0019aa5 <CPU::detectFeatures()+0x9e1>
c0019a25:	51                   	push   ecx
c0019a26:	51                   	push   ecx
c0019a27:	68 47 b9 02 c0       	push   0xc002b947
c0019a2c:	57                   	push   edi
c0019a2d:	e8 02 6e fe ff       	call   c0000834 <strcpy>
c0019a32:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019a3c:	e8 6d 68 fe ff       	call   c00002ae <is486>
c0019a41:	83 c4 10             	add    esp,0x10
c0019a44:	85 c0                	test   eax,eax
c0019a46:	74 2b                	je     c0019a73 <CPU::detectFeatures()+0x9af>
c0019a48:	52                   	push   edx
c0019a49:	52                   	push   edx
c0019a4a:	68 07 bb 02 c0       	push   0xc002bb07
c0019a4f:	53                   	push   ebx
c0019a50:	e8 e5 aa ff ff       	call   c001453a <Device::setName(char const*)>
c0019a55:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019a5c:	0f 20 c0             	mov    eax,cr0
c0019a5f:	83 e0 14             	and    eax,0x14
c0019a62:	83 c4 10             	add    esp,0x10
c0019a65:	83 f8 04             	cmp    eax,0x4
c0019a68:	75 1f                	jne    c0019a89 <CPU::detectFeatures()+0x9c5>
c0019a6a:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019a71:	eb 32                	jmp    c0019aa5 <CPU::detectFeatures()+0x9e1>
c0019a73:	50                   	push   eax
c0019a74:	50                   	push   eax
c0019a75:	68 12 bb 02 c0       	push   0xc002bb12
c0019a7a:	53                   	push   ebx
c0019a7b:	e8 ba aa ff ff       	call   c001453a <Device::setName(char const*)>
c0019a80:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019a87:	eb d3                	jmp    c0019a5c <CPU::detectFeatures()+0x998>
c0019a89:	e8 fb 67 fe ff       	call   c0000289 <hasLegacyFPU>
c0019a8e:	83 e0 01             	and    eax,0x1
c0019a91:	8d 14 00             	lea    edx,[eax+eax*1]
c0019a94:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019a9a:	83 e0 fd             	and    eax,0xfffffffd
c0019a9d:	09 d0                	or     eax,edx
c0019a9f:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019aa5:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019aac:	83 c4 4c             	add    esp,0x4c
c0019aaf:	5b                   	pop    ebx
c0019ab0:	5e                   	pop    esi
c0019ab1:	5f                   	pop    edi
c0019ab2:	5d                   	pop    ebp
c0019ab3:	c3                   	ret    

c0019ab4 <CPU::setupSMEP()>:
c0019ab4:	0f 20 e0             	mov    eax,cr4
c0019ab7:	0d 00 00 10 00       	or     eax,0x100000
c0019abc:	0f 22 e0             	mov    cr4,eax
c0019abf:	c3                   	ret    

c0019ac0 <CPU::setupUMIP()>:
c0019ac0:	0f 20 e0             	mov    eax,cr4
c0019ac3:	80 cc 08             	or     ah,0x8
c0019ac6:	0f 22 e0             	mov    cr4,eax
c0019ac9:	c3                   	ret    

c0019aca <CPU::setupTSC()>:
c0019aca:	0f 20 e0             	mov    eax,cr4
c0019acd:	83 c8 04             	or     eax,0x4
c0019ad0:	0f 22 e0             	mov    cr4,eax
c0019ad3:	c3                   	ret    

c0019ad4 <CPU::setupLargePages()>:
c0019ad4:	0f 20 e0             	mov    eax,cr4
c0019ad7:	83 c8 10             	or     eax,0x10
c0019ada:	0f 22 e0             	mov    cr4,eax
c0019add:	c3                   	ret    

c0019ade <CPU::setupPAT()>:
c0019ade:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0019ae3:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019aea:	74 2c                	je     c0019b18 <CPU::setupPAT()+0x3a>
c0019aec:	53                   	push   ebx
c0019aed:	83 ec 10             	sub    esp,0x10
c0019af0:	68 77 02 00 00       	push   0x277
c0019af5:	50                   	push   eax
c0019af6:	e8 ed 52 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019afb:	83 e2 f8             	and    edx,0xfffffff8
c0019afe:	83 ca 01             	or     edx,0x1
c0019b01:	52                   	push   edx
c0019b02:	50                   	push   eax
c0019b03:	68 77 02 00 00       	push   0x277
c0019b08:	ff 35 c8 e5 02 c0    	push   DWORD PTR ds:0xc002e5c8
c0019b0e:	e8 01 53 ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c0019b13:	83 c4 28             	add    esp,0x28
c0019b16:	5b                   	pop    ebx
c0019b17:	c3                   	ret    
c0019b18:	c3                   	ret    
c0019b19:	90                   	nop

c0019b1a <CPU::setupMTRR()>:
c0019b1a:	c3                   	ret    
c0019b1b:	90                   	nop

c0019b1c <CPU::setupGlobalPages()>:
c0019b1c:	0f 20 e0             	mov    eax,cr4
c0019b1f:	0c 80                	or     al,0x80
c0019b21:	0f 22 e0             	mov    cr4,eax
c0019b24:	c3                   	ret    
c0019b25:	90                   	nop

c0019b26 <CPU::allowUsermodeDataAccess()>:
c0019b26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b2a:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019b31:	74 03                	je     c0019b36 <CPU::allowUsermodeDataAccess()+0x10>
c0019b33:	0f 01 cb             	stac   
c0019b36:	c3                   	ret    
c0019b37:	90                   	nop

c0019b38 <CPU::prohibitUsermodeDataAccess()>:
c0019b38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b3c:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019b43:	74 03                	je     c0019b48 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019b45:	0f 01 ca             	clac   
c0019b48:	c3                   	ret    
c0019b49:	90                   	nop

c0019b4a <CPU::setupSMAP()>:
c0019b4a:	0f 20 e0             	mov    eax,cr4
c0019b4d:	0d 00 00 20 00       	or     eax,0x200000
c0019b52:	0f 22 e0             	mov    cr4,eax
c0019b55:	eb e1                	jmp    c0019b38 <CPU::prohibitUsermodeDataAccess()>
c0019b57:	90                   	nop

c0019b58 <CPU::setupFeatures()>:
c0019b58:	83 ec 0c             	sub    esp,0xc
c0019b5b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019b5f:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019b66:	74 07                	je     c0019b6f <CPU::setupFeatures()+0x17>
c0019b68:	52                   	push   edx
c0019b69:	e8 46 ff ff ff       	call   c0019ab4 <CPU::setupSMEP()>
c0019b6e:	58                   	pop    eax
c0019b6f:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019b76:	74 07                	je     c0019b7f <CPU::setupFeatures()+0x27>
c0019b78:	52                   	push   edx
c0019b79:	e8 cc ff ff ff       	call   c0019b4a <CPU::setupSMAP()>
c0019b7e:	58                   	pop    eax
c0019b7f:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019b86:	74 07                	je     c0019b8f <CPU::setupFeatures()+0x37>
c0019b88:	52                   	push   edx
c0019b89:	e8 32 ff ff ff       	call   c0019ac0 <CPU::setupUMIP()>
c0019b8e:	58                   	pop    eax
c0019b8f:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019b96:	74 07                	je     c0019b9f <CPU::setupFeatures()+0x47>
c0019b98:	52                   	push   edx
c0019b99:	e8 2c ff ff ff       	call   c0019aca <CPU::setupTSC()>
c0019b9e:	58                   	pop    eax
c0019b9f:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019ba6:	74 07                	je     c0019baf <CPU::setupFeatures()+0x57>
c0019ba8:	52                   	push   edx
c0019ba9:	e8 26 ff ff ff       	call   c0019ad4 <CPU::setupLargePages()>
c0019bae:	59                   	pop    ecx
c0019baf:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019bb6:	74 07                	je     c0019bbf <CPU::setupFeatures()+0x67>
c0019bb8:	52                   	push   edx
c0019bb9:	e8 5e ff ff ff       	call   c0019b1c <CPU::setupGlobalPages()>
c0019bbe:	58                   	pop    eax
c0019bbf:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019bc6:	74 0c                	je     c0019bd4 <CPU::setupFeatures()+0x7c>
c0019bc8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019bcc:	83 c4 0c             	add    esp,0xc
c0019bcf:	e9 0a ff ff ff       	jmp    c0019ade <CPU::setupPAT()>
c0019bd4:	83 c4 0c             	add    esp,0xc
c0019bd7:	c3                   	ret    

c0019bd8 <CPU::open(int, int, void*)>:
c0019bd8:	57                   	push   edi
c0019bd9:	56                   	push   esi
c0019bda:	53                   	push   ebx
c0019bdb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019bdf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019be3:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019be9:	83 ec 0c             	sub    esp,0xc
c0019bec:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019bf2:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019bf8:	50                   	push   eax
c0019bf9:	e8 d6 54 ff ff       	call   c000f0d4 <GDT::setup()>
c0019bfe:	83 c4 0c             	add    esp,0xc
c0019c01:	6a 00                	push   0x0
c0019c03:	68 ef be ad de       	push   0xdeadbeef
c0019c08:	57                   	push   edi
c0019c09:	e8 fa 78 ff ff       	call   c0011508 <TSS::setup(unsigned long, unsigned long)>
c0019c0e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019c11:	e8 d2 78 ff ff       	call   c00114e8 <TSS::flush()>
c0019c16:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019c1c:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c1f:	e8 0c 57 ff ff       	call   c000f330 <IDT::setup()>
c0019c24:	b8 00 04 00 00       	mov    eax,0x400
c0019c29:	0f 23 f8             	mov    db7,eax
c0019c2c:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019c36:	e8 a7 62 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0019c3b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019c41:	89 30                	mov    DWORD PTR [eax],esi
c0019c43:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019c49:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019c4c:	58                   	pop    eax
c0019c4d:	5a                   	pop    edx
c0019c4e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c54:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019c58:	e8 e9 89 ff ff       	call   c0012646 <VAS::setCPUSpecific(unsigned long)>
c0019c5d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c60:	e8 5f f4 ff ff       	call   c00190c4 <CPU::detectFeatures()>
c0019c65:	e8 ce bc ff ff       	call   c0015938 <setupInterruptController()>
c0019c6a:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019c70:	a1 e0 e5 02 c0       	mov    eax,ds:0xc002e5e0
c0019c75:	83 e0 10             	and    eax,0x10
c0019c78:	83 f8 01             	cmp    eax,0x1
c0019c7b:	19 c0                	sbb    eax,eax
c0019c7d:	83 e0 46             	and    eax,0x46
c0019c80:	83 c0 1e             	add    eax,0x1e
c0019c83:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c86:	e8 bb d1 ff ff       	call   c0016e46 <setupTimer(int)>
c0019c8b:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019c91:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c94:	e8 bf fe ff ff       	call   c0019b58 <CPU::setupFeatures()>
c0019c99:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c9c:	e8 a7 f1 ff ff       	call   c0018e48 <CPU::displayFeatures()>
c0019ca1:	83 c4 10             	add    esp,0x10
c0019ca4:	31 c0                	xor    eax,eax
c0019ca6:	5b                   	pop    ebx
c0019ca7:	5e                   	pop    esi
c0019ca8:	5f                   	pop    edi
c0019ca9:	c3                   	ret    

c0019caa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019caa:	57                   	push   edi
c0019cab:	56                   	push   esi
c0019cac:	53                   	push   ebx
c0019cad:	51                   	push   ecx
c0019cae:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019cb2:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019cb5:	0f 02 c0             	lar    eax,ax
c0019cb8:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019cbb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019cbf:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019cc2:	88 ca                	mov    dl,cl
c0019cc4:	c0 ea 06             	shr    dl,0x6
c0019cc7:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019ccb:	89 ca                	mov    edx,ecx
c0019ccd:	66 c1 ea 03          	shr    dx,0x3
c0019cd1:	83 e2 07             	and    edx,0x7
c0019cd4:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019cd9:	88 17                	mov    BYTE PTR [edi],dl
c0019cdb:	0f 84 a6 01 00 00    	je     c0019e87 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019ce1:	83 e1 07             	and    ecx,0x7
c0019ce4:	80 f9 04             	cmp    cl,0x4
c0019ce7:	0f 84 98 00 00 00    	je     c0019d85 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019ced:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019cf2:	0f 95 c0             	setne  al
c0019cf5:	80 f9 05             	cmp    cl,0x5
c0019cf8:	0f 95 c2             	setne  dl
c0019cfb:	08 c2                	or     dl,al
c0019cfd:	74 79                	je     c0019d78 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019cff:	84 c9                	test   cl,cl
c0019d01:	75 05                	jne    c0019d08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019d03:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019d06:	eb 3c                	jmp    c0019d44 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d08:	80 f9 01             	cmp    cl,0x1
c0019d0b:	75 05                	jne    c0019d12 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019d0d:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019d10:	eb 32                	jmp    c0019d44 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d12:	80 f9 02             	cmp    cl,0x2
c0019d15:	75 05                	jne    c0019d1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019d17:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019d1a:	eb 28                	jmp    c0019d44 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d1c:	31 c0                	xor    eax,eax
c0019d1e:	80 f9 03             	cmp    cl,0x3
c0019d21:	75 05                	jne    c0019d28 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019d23:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019d26:	eb 1c                	jmp    c0019d44 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d28:	80 f9 05             	cmp    cl,0x5
c0019d2b:	75 05                	jne    c0019d32 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019d2d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019d30:	eb 12                	jmp    c0019d44 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d32:	80 f9 06             	cmp    cl,0x6
c0019d35:	75 05                	jne    c0019d3c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019d37:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019d3a:	eb 08                	jmp    c0019d44 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d3c:	80 f9 07             	cmp    cl,0x7
c0019d3f:	75 03                	jne    c0019d44 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d41:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019d44:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019d49:	75 10                	jne    c0019d5b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019d4b:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019d4f:	b9 03 00 00 00       	mov    ecx,0x3
c0019d54:	01 d0                	add    eax,edx
c0019d56:	e9 37 01 00 00       	jmp    c0019e92 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d5b:	b9 02 00 00 00       	mov    ecx,0x2
c0019d60:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019d65:	0f 85 27 01 00 00    	jne    c0019e92 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d6b:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019d6e:	b9 06 00 00 00       	mov    ecx,0x6
c0019d73:	e9 1a 01 00 00       	jmp    c0019e92 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d78:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019d7b:	b9 06 00 00 00       	mov    ecx,0x6
c0019d80:	e9 0f 01 00 00       	jmp    c0019e94 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019d85:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019d88:	88 ca                	mov    dl,cl
c0019d8a:	c0 ea 06             	shr    dl,0x6
c0019d8d:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019d91:	89 ca                	mov    edx,ecx
c0019d93:	66 c1 ea 03          	shr    dx,0x3
c0019d97:	83 e2 07             	and    edx,0x7
c0019d9a:	80 e1 07             	and    cl,0x7
c0019d9d:	75 05                	jne    c0019da4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019d9f:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019da2:	eb 4c                	jmp    c0019df0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019da4:	80 f9 01             	cmp    cl,0x1
c0019da7:	75 05                	jne    c0019dae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019da9:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019dac:	eb 42                	jmp    c0019df0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019dae:	80 f9 02             	cmp    cl,0x2
c0019db1:	75 05                	jne    c0019db8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019db3:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019db6:	eb 38                	jmp    c0019df0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019db8:	80 f9 03             	cmp    cl,0x3
c0019dbb:	75 05                	jne    c0019dc2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019dbd:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019dc0:	eb 2e                	jmp    c0019df0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019dc2:	80 f9 04             	cmp    cl,0x4
c0019dc5:	75 12                	jne    c0019dd9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019dc7:	f6 c4 60             	test   ah,0x60
c0019dca:	75 08                	jne    c0019dd4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019dcc:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019dcf:	8d 78 14             	lea    edi,[eax+0x14]
c0019dd2:	eb 1c                	jmp    c0019df0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019dd4:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019dd7:	eb 17                	jmp    c0019df0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019dd9:	80 f9 05             	cmp    cl,0x5
c0019ddc:	75 05                	jne    c0019de3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019dde:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019de1:	eb 0d                	jmp    c0019df0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019de3:	80 f9 06             	cmp    cl,0x6
c0019de6:	75 05                	jne    c0019ded <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019de8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019deb:	eb 03                	jmp    c0019df0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ded:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019df0:	84 d2                	test   dl,dl
c0019df2:	75 05                	jne    c0019df9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019df4:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019df7:	eb 3c                	jmp    c0019e35 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019df9:	80 fa 01             	cmp    dl,0x1
c0019dfc:	75 05                	jne    c0019e03 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019dfe:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019e01:	eb 32                	jmp    c0019e35 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e03:	80 fa 02             	cmp    dl,0x2
c0019e06:	75 05                	jne    c0019e0d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019e08:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019e0b:	eb 28                	jmp    c0019e35 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e0d:	80 fa 03             	cmp    dl,0x3
c0019e10:	75 05                	jne    c0019e17 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019e12:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019e15:	eb 1e                	jmp    c0019e35 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e17:	31 c0                	xor    eax,eax
c0019e19:	80 fa 04             	cmp    dl,0x4
c0019e1c:	74 17                	je     c0019e35 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e1e:	80 fa 05             	cmp    dl,0x5
c0019e21:	75 05                	jne    c0019e28 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019e23:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019e26:	eb 0d                	jmp    c0019e35 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e28:	80 fa 06             	cmp    dl,0x6
c0019e2b:	75 05                	jne    c0019e32 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019e2d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019e30:	eb 03                	jmp    c0019e35 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e32:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019e35:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019e3a:	0f 94 c2             	sete   dl
c0019e3d:	80 f9 05             	cmp    cl,0x5
c0019e40:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019e44:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019e49:	d3 e0                	shl    eax,cl
c0019e4b:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019e4f:	74 0a                	je     c0019e5b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019e51:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019e54:	b9 07 00 00 00       	mov    ecx,0x7
c0019e59:	eb 37                	jmp    c0019e92 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019e5b:	01 f8                	add    eax,edi
c0019e5d:	b9 03 00 00 00       	mov    ecx,0x3
c0019e62:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019e67:	74 2b                	je     c0019e94 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e69:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019e6e:	75 0d                	jne    c0019e7d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019e70:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019e74:	01 c8                	add    eax,ecx
c0019e76:	b9 04 00 00 00       	mov    ecx,0x4
c0019e7b:	eb 17                	jmp    c0019e94 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e7d:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019e80:	b9 07 00 00 00       	mov    ecx,0x7
c0019e85:	eb 0d                	jmp    c0019e94 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e87:	b9 02 00 00 00       	mov    ecx,0x2
c0019e8c:	b2 01                	mov    dl,0x1
c0019e8e:	31 c0                	xor    eax,eax
c0019e90:	eb 02                	jmp    c0019e94 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e92:	31 d2                	xor    edx,edx
c0019e94:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019e98:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019e9a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019e9e:	88 11                	mov    BYTE PTR [ecx],dl
c0019ea0:	5a                   	pop    edx
c0019ea1:	5b                   	pop    ebx
c0019ea2:	5e                   	pop    esi
c0019ea3:	5f                   	pop    edi
c0019ea4:	c3                   	ret    

c0019ea5 <Krnl::smpEntry()>:
c0019ea5:	eb fe                	jmp    c0019ea5 <Krnl::smpEntry()>

c0019ea7 <Krnl::startCPU(int)>:
c0019ea7:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0019eac:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019eb3:	0f 84 36 01 00 00    	je     c0019fef <Krnl::startCPU(int)+0x148>
c0019eb9:	53                   	push   ebx
c0019eba:	83 ec 08             	sub    esp,0x8
c0019ebd:	e8 46 3f 00 00       	call   c001de08 <lockScheduler()>
c0019ec2:	52                   	push   edx
c0019ec3:	52                   	push   edx
c0019ec4:	6a 1b                	push   0x1b
c0019ec6:	ff 35 c8 e5 02 c0    	push   DWORD PTR ds:0xc002e5c8
c0019ecc:	e8 17 4f ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019ed1:	59                   	pop    ecx
c0019ed2:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019ed7:	89 c3                	mov    ebx,eax
c0019ed9:	58                   	pop    eax
c0019eda:	53                   	push   ebx
c0019edb:	68 4c bb 02 c0       	push   0xc002bb4c
c0019ee0:	e8 4c 90 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0019ee5:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019eef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ef3:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019efd:	c1 e0 18             	shl    eax,0x18
c0019f00:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019f06:	83 c4 10             	add    esp,0x10
c0019f09:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019f0f:	09 c2                	or     edx,eax
c0019f11:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019f17:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019f1d:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019f23:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019f29:	80 cd c5             	or     ch,0xc5
c0019f2c:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019f32:	f3 90                	pause  
c0019f34:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019f36:	0f ba e1 0c          	bt     ecx,0xc
c0019f3a:	72 f6                	jb     c0019f32 <Krnl::startCPU(int)+0x8b>
c0019f3c:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019f42:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019f48:	09 c1                	or     ecx,eax
c0019f4a:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019f50:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019f56:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019f5c:	80 cd 85             	or     ch,0x85
c0019f5f:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019f65:	f3 90                	pause  
c0019f67:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019f69:	0f ba e1 0c          	bt     ecx,0xc
c0019f6d:	72 f6                	jb     c0019f65 <Krnl::startCPU(int)+0xbe>
c0019f6f:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f79:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019f7f:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019f85:	09 c1                	or     ecx,eax
c0019f87:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019f8d:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019f93:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019f99:	81 c9 02 06 00 00    	or     ecx,0x602
c0019f9f:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019fa5:	f3 90                	pause  
c0019fa7:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019fa9:	0f ba e1 0c          	bt     ecx,0xc
c0019fad:	72 f6                	jb     c0019fa5 <Krnl::startCPU(int)+0xfe>
c0019faf:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019fb9:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019fbf:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019fc5:	09 c8                	or     eax,ecx
c0019fc7:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019fcd:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019fd3:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019fd8:	0d 02 06 00 00       	or     eax,0x602
c0019fdd:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019fe3:	f3 90                	pause  
c0019fe5:	8b 02                	mov    eax,DWORD PTR [edx]
c0019fe7:	0f ba e0 0c          	bt     eax,0xc
c0019feb:	72 f6                	jb     c0019fe3 <Krnl::startCPU(int)+0x13c>
c0019fed:	eb fe                	jmp    c0019fed <Krnl::startCPU(int)+0x146>
c0019fef:	c3                   	ret    

c0019ff0 <Krnl::startCPUs()>:
c0019ff0:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0019ff5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019ffb:	88 c2                	mov    dl,al
c0019ffd:	83 e2 0a             	and    edx,0xa
c001a000:	80 fa 0a             	cmp    dl,0xa
c001a003:	75 09                	jne    c001a00e <Krnl::startCPUs()+0x1e>
c001a005:	a8 01                	test   al,0x1
c001a007:	74 05                	je     c001a00e <Krnl::startCPUs()+0x1e>
c001a009:	e9 8d 61 fe ff       	jmp    c000019b <prepareTramp>
c001a00e:	c3                   	ret    
c001a00f:	90                   	nop

c001a010 <EnvVarContainer::getEnv(char const*)>:
c001a010:	57                   	push   edi
c001a011:	56                   	push   esi
c001a012:	53                   	push   ebx
c001a013:	31 db                	xor    ebx,ebx
c001a015:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a019:	39 1e                	cmp    DWORD PTR [esi],ebx
c001a01b:	7e 2b                	jle    c001a048 <EnvVarContainer::getEnv(char const*)+0x38>
c001a01d:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001a024:	50                   	push   eax
c001a025:	50                   	push   eax
c001a026:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a029:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001a02c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a030:	e8 8b 68 fe ff       	call   c00008c0 <strcmp>
c001a035:	83 c4 10             	add    esp,0x10
c001a038:	85 c0                	test   eax,eax
c001a03a:	75 09                	jne    c001a045 <EnvVarContainer::getEnv(char const*)+0x35>
c001a03c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a03f:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a043:	eb 05                	jmp    c001a04a <EnvVarContainer::getEnv(char const*)+0x3a>
c001a045:	43                   	inc    ebx
c001a046:	eb d1                	jmp    c001a019 <EnvVarContainer::getEnv(char const*)+0x9>
c001a048:	31 c0                	xor    eax,eax
c001a04a:	5b                   	pop    ebx
c001a04b:	5e                   	pop    esi
c001a04c:	5f                   	pop    edi
c001a04d:	c3                   	ret    

c001a04e <EnvVarContainer::setEnv(char const*, char const*)>:
c001a04e:	57                   	push   edi
c001a04f:	56                   	push   esi
c001a050:	53                   	push   ebx
c001a051:	83 ec 1c             	sub    esp,0x1c
c001a054:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a058:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a05c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a060:	57                   	push   edi
c001a061:	e8 2e 67 fe ff       	call   c0000794 <strlen>
c001a066:	40                   	inc    eax
c001a067:	89 04 24             	mov    DWORD PTR [esp],eax
c001a06a:	e8 d1 57 ff ff       	call   c000f840 <malloc>
c001a06f:	89 34 24             	mov    DWORD PTR [esp],esi
c001a072:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a076:	e8 19 67 fe ff       	call   c0000794 <strlen>
c001a07b:	40                   	inc    eax
c001a07c:	89 04 24             	mov    DWORD PTR [esp],eax
c001a07f:	e8 bc 57 ff ff       	call   c000f840 <malloc>
c001a084:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a087:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a08b:	e8 04 67 fe ff       	call   c0000794 <strlen>
c001a090:	83 c4 0c             	add    esp,0xc
c001a093:	40                   	inc    eax
c001a094:	50                   	push   eax
c001a095:	6a 00                	push   0x0
c001a097:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a09b:	e8 d8 66 fe ff       	call   c0000778 <memset>
c001a0a0:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a0a3:	e8 ec 66 fe ff       	call   c0000794 <strlen>
c001a0a8:	83 c4 0c             	add    esp,0xc
c001a0ab:	40                   	inc    eax
c001a0ac:	50                   	push   eax
c001a0ad:	57                   	push   edi
c001a0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a0b2:	e8 8d 66 fe ff       	call   c0000744 <memcpy>
c001a0b7:	89 34 24             	mov    DWORD PTR [esp],esi
c001a0ba:	e8 d5 66 fe ff       	call   c0000794 <strlen>
c001a0bf:	83 c4 0c             	add    esp,0xc
c001a0c2:	40                   	inc    eax
c001a0c3:	50                   	push   eax
c001a0c4:	6a 00                	push   0x0
c001a0c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a0ca:	e8 a9 66 fe ff       	call   c0000778 <memset>
c001a0cf:	89 34 24             	mov    DWORD PTR [esp],esi
c001a0d2:	e8 bd 66 fe ff       	call   c0000794 <strlen>
c001a0d7:	83 c4 0c             	add    esp,0xc
c001a0da:	40                   	inc    eax
c001a0db:	50                   	push   eax
c001a0dc:	56                   	push   esi
c001a0dd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a0e1:	e8 5e 66 fe ff       	call   c0000744 <memcpy>
c001a0e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a0e8:	40                   	inc    eax
c001a0e9:	89 03                	mov    DWORD PTR [ebx],eax
c001a0eb:	c1 e0 03             	shl    eax,0x3
c001a0ee:	5a                   	pop    edx
c001a0ef:	59                   	pop    ecx
c001a0f0:	50                   	push   eax
c001a0f1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001a0f4:	e8 33 57 ff ff       	call   c000f82c <realloc>
c001a0f9:	83 c4 0c             	add    esp,0xc
c001a0fc:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a0ff:	6a 08                	push   0x8
c001a101:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a105:	52                   	push   edx
c001a106:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a108:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a10c:	50                   	push   eax
c001a10d:	e8 32 66 fe ff       	call   c0000744 <memcpy>
c001a112:	83 c4 20             	add    esp,0x20
c001a115:	5b                   	pop    ebx
c001a116:	5e                   	pop    esi
c001a117:	5f                   	pop    edi
c001a118:	c3                   	ret    
c001a119:	90                   	nop

c001a11a <EnvVarContainer::deleteEnv(char const*)>:
c001a11a:	c3                   	ret    
c001a11b:	90                   	nop

c001a11c <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a11c:	55                   	push   ebp
c001a11d:	57                   	push   edi
c001a11e:	56                   	push   esi
c001a11f:	53                   	push   ebx
c001a120:	81 ec 38 01 00 00    	sub    esp,0x138
c001a126:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c001a12d:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c001a134:	68 14 01 00 00       	push   0x114
c001a139:	e8 02 57 ff ff       	call   c000f840 <malloc>
c001a13e:	83 c4 0c             	add    esp,0xc
c001a141:	89 c7                	mov    edi,eax
c001a143:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001a146:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a14d:	50                   	push   eax
c001a14e:	e8 37 93 ff ff       	call   c001348a <File::File(char const*, Process*)>
c001a153:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a156:	e8 01 96 ff ff       	call   c001375c <File::exists()>
c001a15b:	83 c4 10             	add    esp,0x10
c001a15e:	84 c0                	test   al,al
c001a160:	75 31                	jne    c001a193 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001a162:	51                   	push   ecx
c001a163:	51                   	push   ecx
c001a164:	6a 12                	push   0x12
c001a166:	57                   	push   edi
c001a167:	e8 82 93 ff ff       	call   c00134ee <File::open(FileOpenMode)>
c001a16c:	8b 07                	mov    eax,DWORD PTR [edi]
c001a16e:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001a171:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a174:	e8 1b 66 fe ff       	call   c0000794 <strlen>
c001a179:	5a                   	pop    edx
c001a17a:	31 d2                	xor    edx,edx
c001a17c:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a180:	51                   	push   ecx
c001a181:	55                   	push   ebp
c001a182:	52                   	push   edx
c001a183:	50                   	push   eax
c001a184:	57                   	push   edi
c001a185:	ff d3                	call   ebx
c001a187:	83 c4 14             	add    esp,0x14
c001a18a:	57                   	push   edi
c001a18b:	e8 bc 93 ff ff       	call   c001354c <File::close()>
c001a190:	83 c4 10             	add    esp,0x10
c001a193:	31 db                	xor    ebx,ebx
c001a195:	50                   	push   eax
c001a196:	31 ed                	xor    ebp,ebp
c001a198:	68 00 01 00 00       	push   0x100
c001a19d:	6a 00                	push   0x0
c001a19f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a1a3:	50                   	push   eax
c001a1a4:	e8 cf 65 fe ff       	call   c0000778 <memset>
c001a1a9:	58                   	pop    eax
c001a1aa:	5a                   	pop    edx
c001a1ab:	6a 01                	push   0x1
c001a1ad:	57                   	push   edi
c001a1ae:	e8 3b 93 ff ff       	call   c00134ee <File::open(FileOpenMode)>
c001a1b3:	83 c4 10             	add    esp,0x10
c001a1b6:	83 ec 0c             	sub    esp,0xc
c001a1b9:	8b 07                	mov    eax,DWORD PTR [edi]
c001a1bb:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a1bf:	51                   	push   ecx
c001a1c0:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a1c4:	52                   	push   edx
c001a1c5:	6a 00                	push   0x0
c001a1c7:	6a 01                	push   0x1
c001a1c9:	57                   	push   edi
c001a1ca:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a1cd:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a1d1:	83 c4 20             	add    esp,0x20
c001a1d4:	3c 0d                	cmp    al,0xd
c001a1d6:	0f 84 12 01 00 00    	je     c001a2ee <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a1dc:	85 db                	test   ebx,ebx
c001a1de:	0f 84 fd 00 00 00    	je     c001a2e1 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a1e4:	3c 0a                	cmp    al,0xa
c001a1e6:	74 13                	je     c001a1fb <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a1e8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a1ed:	74 0c                	je     c001a1fb <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a1ef:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a1f5:	0f 8e e6 00 00 00    	jle    c001a2e1 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a1fb:	83 ec 0c             	sub    esp,0xc
c001a1fe:	8d 53 01             	lea    edx,[ebx+0x1]
c001a201:	29 dd                	sub    ebp,ebx
c001a203:	52                   	push   edx
c001a204:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a208:	e8 33 56 ff ff       	call   c000f840 <malloc>
c001a20d:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a210:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a214:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a217:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a21b:	e8 20 56 ff ff       	call   c000f840 <malloc>
c001a220:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a224:	83 c4 0c             	add    esp,0xc
c001a227:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a22b:	52                   	push   edx
c001a22c:	6a 00                	push   0x0
c001a22e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a232:	e8 41 65 fe ff       	call   c0000778 <memset>
c001a237:	83 c4 0c             	add    esp,0xc
c001a23a:	53                   	push   ebx
c001a23b:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a23f:	55                   	push   ebp
c001a240:	01 eb                	add    ebx,ebp
c001a242:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a246:	e8 f9 64 fe ff       	call   c0000744 <memcpy>
c001a24b:	83 c4 0c             	add    esp,0xc
c001a24e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a252:	51                   	push   ecx
c001a253:	6a 00                	push   0x0
c001a255:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a259:	e8 1a 65 fe ff       	call   c0000778 <memset>
c001a25e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a261:	e8 2e 65 fe ff       	call   c0000794 <strlen>
c001a266:	83 c4 0c             	add    esp,0xc
c001a269:	50                   	push   eax
c001a26a:	53                   	push   ebx
c001a26b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a26f:	e8 d0 64 fe ff       	call   c0000744 <memcpy>
c001a274:	5b                   	pop    ebx
c001a275:	58                   	pop    eax
c001a276:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a27a:	68 5d bb 02 c0       	push   0xc002bb5d
c001a27f:	e8 ad 8c ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001a284:	8b 06                	mov    eax,DWORD PTR [esi]
c001a286:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a289:	40                   	inc    eax
c001a28a:	83 c4 10             	add    esp,0x10
c001a28d:	89 06                	mov    DWORD PTR [esi],eax
c001a28f:	85 d2                	test   edx,edx
c001a291:	75 0c                	jne    c001a29f <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a293:	83 ec 0c             	sub    esp,0xc
c001a296:	6a 08                	push   0x8
c001a298:	e8 a3 55 ff ff       	call   c000f840 <malloc>
c001a29d:	eb 0c                	jmp    c001a2ab <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a29f:	c1 e0 03             	shl    eax,0x3
c001a2a2:	51                   	push   ecx
c001a2a3:	51                   	push   ecx
c001a2a4:	50                   	push   eax
c001a2a5:	52                   	push   edx
c001a2a6:	e8 81 55 ff ff       	call   c000f82c <realloc>
c001a2ab:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a2ae:	83 c4 10             	add    esp,0x10
c001a2b1:	31 db                	xor    ebx,ebx
c001a2b3:	52                   	push   edx
c001a2b4:	6a 08                	push   0x8
c001a2b6:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a2ba:	50                   	push   eax
c001a2bb:	8b 16                	mov    edx,DWORD PTR [esi]
c001a2bd:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a2c0:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a2c4:	50                   	push   eax
c001a2c5:	e8 7a 64 fe ff       	call   c0000744 <memcpy>
c001a2ca:	83 c4 0c             	add    esp,0xc
c001a2cd:	68 00 01 00 00       	push   0x100
c001a2d2:	6a 00                	push   0x0
c001a2d4:	55                   	push   ebp
c001a2d5:	31 ed                	xor    ebp,ebp
c001a2d7:	e8 9c 64 fe ff       	call   c0000778 <memset>
c001a2dc:	83 c4 10             	add    esp,0x10
c001a2df:	eb 0d                	jmp    c001a2ee <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a2e1:	3c 3d                	cmp    al,0x3d
c001a2e3:	74 07                	je     c001a2ec <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a2e5:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a2e9:	45                   	inc    ebp
c001a2ea:	eb 02                	jmp    c001a2ee <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a2ec:	89 eb                	mov    ebx,ebp
c001a2ee:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a2f3:	0f 85 bd fe ff ff    	jne    c001a1b6 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a2f9:	50                   	push   eax
c001a2fa:	50                   	push   eax
c001a2fb:	ff 36                	push   DWORD PTR [esi]
c001a2fd:	68 6b bb 02 c0       	push   0xc002bb6b
c001a302:	e8 2a 8c ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001a307:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a30d:	5b                   	pop    ebx
c001a30e:	5e                   	pop    esi
c001a30f:	5f                   	pop    edi
c001a310:	5d                   	pop    ebp
c001a311:	c3                   	ret    

c001a312 <EnvVarContainer::__loadSystem()>:
c001a312:	83 ec 10             	sub    esp,0x10
c001a315:	68 00 db 02 c0       	push   0xc002db00
c001a31a:	68 96 bb 02 c0       	push   0xc002bb96
c001a31f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a323:	e8 f4 fd ff ff       	call   c001a11c <EnvVarContainer::loadFrom(char const*, char const*)>
c001a328:	83 c4 1c             	add    esp,0x1c
c001a32b:	c3                   	ret    

c001a32c <EnvVarContainer::__loadUser()>:
c001a32c:	c3                   	ret    
c001a32d:	90                   	nop

c001a32e <EnvVarContainer::EnvVarContainer(Process*)>:
c001a32e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a332:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a338:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a33c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a340:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a343:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a347:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a34e:	90                   	nop
c001a34f:	c3                   	ret    

c001a350 <EnvVarContainer::~EnvVarContainer()>:
c001a350:	83 ec 0c             	sub    esp,0xc
c001a353:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a357:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a35a:	85 c0                	test   eax,eax
c001a35c:	74 1d                	je     c001a37b <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a35e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a362:	8b 00                	mov    eax,DWORD PTR [eax]
c001a364:	85 c0                	test   eax,eax
c001a366:	74 13                	je     c001a37b <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a36c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a36f:	83 ec 0c             	sub    esp,0xc
c001a372:	50                   	push   eax
c001a373:	e8 d8 54 ff ff       	call   c000f850 <free>
c001a378:	83 c4 10             	add    esp,0x10
c001a37b:	90                   	nop
c001a37c:	83 c4 0c             	add    esp,0xc
c001a37f:	c3                   	ret    

c001a380 <Krnl::getEnv(Process*, char const*)>:
c001a380:	53                   	push   ebx
c001a381:	83 ec 08             	sub    esp,0x8
c001a384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a388:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a38c:	39 05 34 1b 03 c0    	cmp    DWORD PTR ds:0xc0031b34,eax
c001a392:	74 04                	je     c001a398 <Krnl::getEnv(Process*, char const*)+0x18>
c001a394:	85 c0                	test   eax,eax
c001a396:	75 0b                	jne    c001a3a3 <Krnl::getEnv(Process*, char const*)+0x23>
c001a398:	a1 14 11 03 c0       	mov    eax,ds:0xc0031114
c001a39d:	85 c0                	test   eax,eax
c001a39f:	75 19                	jne    c001a3ba <Krnl::getEnv(Process*, char const*)+0x3a>
c001a3a1:	eb 27                	jmp    c001a3ca <Krnl::getEnv(Process*, char const*)+0x4a>
c001a3a3:	52                   	push   edx
c001a3a4:	52                   	push   edx
c001a3a5:	53                   	push   ebx
c001a3a6:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a3ac:	e8 5f fc ff ff       	call   c001a010 <EnvVarContainer::getEnv(char const*)>
c001a3b1:	83 c4 10             	add    esp,0x10
c001a3b4:	85 c0                	test   eax,eax
c001a3b6:	75 28                	jne    c001a3e0 <Krnl::getEnv(Process*, char const*)+0x60>
c001a3b8:	eb de                	jmp    c001a398 <Krnl::getEnv(Process*, char const*)+0x18>
c001a3ba:	52                   	push   edx
c001a3bb:	52                   	push   edx
c001a3bc:	53                   	push   ebx
c001a3bd:	50                   	push   eax
c001a3be:	e8 4d fc ff ff       	call   c001a010 <EnvVarContainer::getEnv(char const*)>
c001a3c3:	83 c4 10             	add    esp,0x10
c001a3c6:	85 c0                	test   eax,eax
c001a3c8:	75 16                	jne    c001a3e0 <Krnl::getEnv(Process*, char const*)+0x60>
c001a3ca:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a3ce:	a1 18 11 03 c0       	mov    eax,ds:0xc0031118
c001a3d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a3d7:	83 c4 08             	add    esp,0x8
c001a3da:	5b                   	pop    ebx
c001a3db:	e9 30 fc ff ff       	jmp    c001a010 <EnvVarContainer::getEnv(char const*)>
c001a3e0:	83 c4 08             	add    esp,0x8
c001a3e3:	5b                   	pop    ebx
c001a3e4:	c3                   	ret    

c001a3e5 <Krnl::setEnvSystem(char const*, char const*)>:
c001a3e5:	83 ec 10             	sub    esp,0x10
c001a3e8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a3ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a3f0:	ff 35 18 11 03 c0    	push   DWORD PTR ds:0xc0031118
c001a3f6:	e8 53 fc ff ff       	call   c001a04e <EnvVarContainer::setEnv(char const*, char const*)>
c001a3fb:	83 c4 1c             	add    esp,0x1c
c001a3fe:	c3                   	ret    

c001a3ff <Krnl::setEnvUser(char const*, char const*)>:
c001a3ff:	a1 14 11 03 c0       	mov    eax,ds:0xc0031114
c001a404:	85 c0                	test   eax,eax
c001a406:	74 15                	je     c001a41d <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a408:	83 ec 10             	sub    esp,0x10
c001a40b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a40f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a413:	50                   	push   eax
c001a414:	e8 35 fc ff ff       	call   c001a04e <EnvVarContainer::setEnv(char const*, char const*)>
c001a419:	83 c4 1c             	add    esp,0x1c
c001a41c:	c3                   	ret    
c001a41d:	c3                   	ret    

c001a41e <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a41e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a422:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a428:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a42c:	e9 1d fc ff ff       	jmp    c001a04e <EnvVarContainer::setEnv(char const*, char const*)>

c001a431 <Krnl::deleteEnvSystem(char const*)>:
c001a431:	c3                   	ret    

c001a432 <Krnl::deleteEnvUser(char const*)>:
c001a432:	c3                   	ret    

c001a433 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a433:	c3                   	ret    

c001a434 <Krnl::newProcessEnv(Process*)>:
c001a434:	83 ec 28             	sub    esp,0x28
c001a437:	6a 0c                	push   0xc
c001a439:	e8 02 54 ff ff       	call   c000f840 <malloc>
c001a43e:	5a                   	pop    edx
c001a43f:	59                   	pop    ecx
c001a440:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a444:	50                   	push   eax
c001a445:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a449:	e8 e0 fe ff ff       	call   c001a32e <EnvVarContainer::EnvVarContainer(Process*)>
c001a44e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a452:	83 c4 2c             	add    esp,0x2c
c001a455:	c3                   	ret    

c001a456 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a456:	56                   	push   esi
c001a457:	53                   	push   ebx
c001a458:	83 ec 10             	sub    esp,0x10
c001a45b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a45f:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001a465:	6a 0c                	push   0xc
c001a467:	e8 d4 53 ff ff       	call   c000f840 <malloc>
c001a46c:	89 c3                	mov    ebx,eax
c001a46e:	58                   	pop    eax
c001a46f:	5a                   	pop    edx
c001a470:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a474:	53                   	push   ebx
c001a475:	e8 b4 fe ff ff       	call   c001a32e <EnvVarContainer::EnvVarContainer(Process*)>
c001a47a:	8b 06                	mov    eax,DWORD PTR [esi]
c001a47c:	89 03                	mov    DWORD PTR [ebx],eax
c001a47e:	c1 e0 03             	shl    eax,0x3
c001a481:	89 04 24             	mov    DWORD PTR [esp],eax
c001a484:	e8 b7 53 ff ff       	call   c000f840 <malloc>
c001a489:	83 c4 0c             	add    esp,0xc
c001a48c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a48f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a491:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a498:	52                   	push   edx
c001a499:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a49c:	50                   	push   eax
c001a49d:	e8 a2 62 fe ff       	call   c0000744 <memcpy>
c001a4a2:	89 d8                	mov    eax,ebx
c001a4a4:	83 c4 14             	add    esp,0x14
c001a4a7:	5b                   	pop    ebx
c001a4a8:	5e                   	pop    esi
c001a4a9:	c3                   	ret    

c001a4aa <Krnl::loadSystemEnv()>:
c001a4aa:	53                   	push   ebx
c001a4ab:	83 ec 14             	sub    esp,0x14
c001a4ae:	6a 0c                	push   0xc
c001a4b0:	e8 8b 53 ff ff       	call   c000f840 <malloc>
c001a4b5:	89 c3                	mov    ebx,eax
c001a4b7:	58                   	pop    eax
c001a4b8:	5a                   	pop    edx
c001a4b9:	ff 35 34 1b 03 c0    	push   DWORD PTR ds:0xc0031b34
c001a4bf:	53                   	push   ebx
c001a4c0:	e8 69 fe ff ff       	call   c001a32e <EnvVarContainer::EnvVarContainer(Process*)>
c001a4c5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a4c8:	89 1d 18 11 03 c0    	mov    DWORD PTR ds:0xc0031118,ebx
c001a4ce:	e8 3f fe ff ff       	call   c001a312 <EnvVarContainer::__loadSystem()>
c001a4d3:	83 c4 18             	add    esp,0x18
c001a4d6:	5b                   	pop    ebx
c001a4d7:	c3                   	ret    

c001a4d8 <Krnl::loadUserEnv()>:
c001a4d8:	53                   	push   ebx
c001a4d9:	83 ec 14             	sub    esp,0x14
c001a4dc:	6a 0c                	push   0xc
c001a4de:	e8 5d 53 ff ff       	call   c000f840 <malloc>
c001a4e3:	89 c3                	mov    ebx,eax
c001a4e5:	58                   	pop    eax
c001a4e6:	5a                   	pop    edx
c001a4e7:	ff 35 34 1b 03 c0    	push   DWORD PTR ds:0xc0031b34
c001a4ed:	53                   	push   ebx
c001a4ee:	e8 3b fe ff ff       	call   c001a32e <EnvVarContainer::EnvVarContainer(Process*)>
c001a4f3:	89 1d 14 11 03 c0    	mov    DWORD PTR ds:0xc0031114,ebx
c001a4f9:	83 c4 18             	add    esp,0x18
c001a4fc:	5b                   	pop    ebx
c001a4fd:	c3                   	ret    

c001a4fe <Krnl::flushEnv()>:
c001a4fe:	c3                   	ret    

c001a4ff <Krnl::getProcessTotalEnvCount(Process*)>:
c001a4ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a503:	8b 15 14 11 03 c0    	mov    edx,DWORD PTR ds:0xc0031114
c001a509:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a50f:	a1 18 11 03 c0       	mov    eax,ds:0xc0031118
c001a514:	8b 00                	mov    eax,DWORD PTR [eax]
c001a516:	03 01                	add    eax,DWORD PTR [ecx]
c001a518:	85 d2                	test   edx,edx
c001a51a:	74 02                	je     c001a51e <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a51c:	03 02                	add    eax,DWORD PTR [edx]
c001a51e:	c3                   	ret    

c001a51f <Krnl::getProcessEnvPair(Process*, int)>:
c001a51f:	57                   	push   edi
c001a520:	8b 0d 14 11 03 c0    	mov    ecx,DWORD PTR ds:0xc0031114
c001a526:	56                   	push   esi
c001a527:	85 c9                	test   ecx,ecx
c001a529:	53                   	push   ebx
c001a52a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a52e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a532:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a538:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a53c:	8b 02                	mov    eax,DWORD PTR [edx]
c001a53e:	75 47                	jne    c001a587 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a540:	39 c3                	cmp    ebx,eax
c001a542:	7c 47                	jl     c001a58b <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a544:	8b 15 18 11 03 c0    	mov    edx,DWORD PTR ds:0xc0031118
c001a54a:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a54c:	01 c1                	add    ecx,eax
c001a54e:	39 d9                	cmp    ecx,ebx
c001a550:	7e 6c                	jle    c001a5be <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a552:	51                   	push   ecx
c001a553:	89 d9                	mov    ecx,ebx
c001a555:	29 c1                	sub    ecx,eax
c001a557:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a55a:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a55e:	53                   	push   ebx
c001a55f:	68 b8 bb 02 c0       	push   0xc002bbb8
c001a564:	e8 c8 89 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001a569:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a56f:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a571:	a1 18 11 03 c0       	mov    eax,ds:0xc0031118
c001a576:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a579:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a57d:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a580:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a583:	89 06                	mov    DWORD PTR [esi],eax
c001a585:	eb 51                	jmp    c001a5d8 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a587:	39 c3                	cmp    ebx,eax
c001a589:	7d 05                	jge    c001a590 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a58b:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a58e:	eb 20                	jmp    c001a5b0 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a590:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a592:	8d 14 07             	lea    edx,[edi+eax*1]
c001a595:	39 da                	cmp    edx,ebx
c001a597:	7e 04                	jle    c001a59d <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a599:	29 c3                	sub    ebx,eax
c001a59b:	eb 10                	jmp    c001a5ad <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a59d:	8b 0d 18 11 03 c0    	mov    ecx,DWORD PTR ds:0xc0031118
c001a5a3:	03 11                	add    edx,DWORD PTR [ecx]
c001a5a5:	39 da                	cmp    edx,ebx
c001a5a7:	7e 15                	jle    c001a5be <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a5a9:	29 c3                	sub    ebx,eax
c001a5ab:	29 fb                	sub    ebx,edi
c001a5ad:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a5b0:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a5b4:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a5b7:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a5ba:	89 06                	mov    DWORD PTR [esi],eax
c001a5bc:	eb 1d                	jmp    c001a5db <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a5be:	83 ec 0c             	sub    esp,0xc
c001a5c1:	68 cc bb 02 c0       	push   0xc002bbcc
c001a5c6:	e8 18 00 00 00       	call   c001a5e3 <Krnl::panic(char const*)>
c001a5cb:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a5d1:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a5d8:	83 c4 10             	add    esp,0x10
c001a5db:	89 f0                	mov    eax,esi
c001a5dd:	5b                   	pop    ebx
c001a5de:	5e                   	pop    esi
c001a5df:	5f                   	pop    edi
c001a5e0:	c2 04 00             	ret    0x4

c001a5e3 <Krnl::panic(char const*)>:
c001a5e3:	55                   	push   ebp
c001a5e4:	89 e5                	mov    ebp,esp
c001a5e6:	53                   	push   ebx
c001a5e7:	83 ec 0c             	sub    esp,0xc
c001a5ea:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a5ed:	fa                   	cli    
c001a5ee:	c6 05 24 11 03 c0 01 	mov    BYTE PTR ds:0xc0031124,0x1
c001a5f5:	53                   	push   ebx
c001a5f6:	c6 05 04 d5 02 c0 00 	mov    BYTE PTR ds:0xc002d504,0x0
c001a5fd:	68 e6 bb 02 c0       	push   0xc002bbe6
c001a602:	e8 2a 89 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001a607:	58                   	pop    eax
c001a608:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a60d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a613:	e8 31 67 ff ff       	call   c0010d49 <setActiveTerminal(VgaText*)>
c001a618:	83 c4 0c             	add    esp,0xc
c001a61b:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a620:	6a 01                	push   0x1
c001a622:	6a 0f                	push   0xf
c001a624:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a62a:	e8 4b 61 ff ff       	call   c001077a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a62f:	58                   	pop    eax
c001a630:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a635:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a63b:	e8 aa 69 ff ff       	call   c0010fea <VgaText::clearScreen()>
c001a640:	58                   	pop    eax
c001a641:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a646:	5a                   	pop    edx
c001a647:	68 ff bb 02 c0       	push   0xc002bbff
c001a64c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a652:	e8 11 6b ff ff       	call   c0011168 <VgaText::puts(char const*)>
c001a657:	59                   	pop    ecx
c001a658:	58                   	pop    eax
c001a659:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a65e:	68 a4 bc 02 c0       	push   0xc002bca4
c001a663:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a669:	e8 fa 6a ff ff       	call   c0011168 <VgaText::puts(char const*)>
c001a66e:	58                   	pop    eax
c001a66f:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a674:	5a                   	pop    edx
c001a675:	68 1b bc 02 c0       	push   0xc002bc1b
c001a67a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a680:	e8 e3 6a ff ff       	call   c0011168 <VgaText::puts(char const*)>
c001a685:	59                   	pop    ecx
c001a686:	58                   	pop    eax
c001a687:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a68c:	53                   	push   ebx
c001a68d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a693:	e8 d0 6a ff ff       	call   c0011168 <VgaText::puts(char const*)>
c001a698:	58                   	pop    eax
c001a699:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a69e:	5a                   	pop    edx
c001a69f:	68 3b bc 02 c0       	push   0xc002bc3b
c001a6a4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6aa:	e8 b9 6a ff ff       	call   c0011168 <VgaText::puts(char const*)>
c001a6af:	a1 20 11 03 c0       	mov    eax,ds:0xc0031120
c001a6b4:	83 c4 10             	add    esp,0x10
c001a6b7:	85 c0                	test   eax,eax
c001a6b9:	74 02                	je     c001a6bd <Krnl::panic(char const*)+0xda>
c001a6bb:	ff d0                	call   eax
c001a6bd:	83 ec 0c             	sub    esp,0xc
c001a6c0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a6c3:	e8 47 30 00 00       	call   c001d70f <Thr::getDriverNameFromAddress(unsigned long)>
c001a6c8:	83 c4 10             	add    esp,0x10
c001a6cb:	89 c3                	mov    ebx,eax
c001a6cd:	85 c0                	test   eax,eax
c001a6cf:	0f 84 50 02 00 00    	je     c001a925 <Krnl::panic(char const*)+0x342>
c001a6d5:	83 ec 08             	sub    esp,0x8
c001a6d8:	8b 15 34 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b34
c001a6de:	68 e0 bc 02 c0       	push   0xc002bce0
c001a6e3:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a6e9:	e8 7a 6a ff ff       	call   c0011168 <VgaText::puts(char const*)>
c001a6ee:	58                   	pop    eax
c001a6ef:	5a                   	pop    edx
c001a6f0:	8b 15 34 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b34
c001a6f6:	68 1b bc 02 c0       	push   0xc002bc1b
c001a6fb:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a701:	e8 62 6a ff ff       	call   c0011168 <VgaText::puts(char const*)>
c001a706:	59                   	pop    ecx
c001a707:	58                   	pop    eax
c001a708:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a70d:	53                   	push   ebx
c001a70e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a714:	e8 4f 6a ff ff       	call   c0011168 <VgaText::puts(char const*)>
c001a719:	83 c4 10             	add    esp,0x10
c001a71c:	83 ec 08             	sub    esp,0x8
c001a71f:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a724:	68 3a bc 02 c0       	push   0xc002bc3a
c001a729:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a72f:	e8 34 6a ff ff       	call   c0011168 <VgaText::puts(char const*)>
c001a734:	58                   	pop    eax
c001a735:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a73a:	5a                   	pop    edx
c001a73b:	68 38 bd 02 c0       	push   0xc002bd38
c001a740:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a746:	e8 1d 6a ff ff       	call   c0011168 <VgaText::puts(char const*)>
c001a74b:	59                   	pop    ecx
c001a74c:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a751:	5b                   	pop    ebx
c001a752:	68 78 bd 02 c0       	push   0xc002bd78
c001a757:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a75d:	e8 06 6a ff ff       	call   c0011168 <VgaText::puts(char const*)>
c001a762:	58                   	pop    eax
c001a763:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a768:	5a                   	pop    edx
c001a769:	68 26 bc 02 c0       	push   0xc002bc26
c001a76e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a774:	e8 ef 69 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c001a779:	59                   	pop    ecx
c001a77a:	5b                   	pop    ebx
c001a77b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a77e:	68 3e bc 02 c0       	push   0xc002bc3e
c001a783:	e8 a9 87 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001a788:	58                   	pop    eax
c001a789:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a78c:	5a                   	pop    edx
c001a78d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a790:	68 47 bc 02 c0       	push   0xc002bc47
c001a795:	e8 97 87 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001a79a:	59                   	pop    ecx
c001a79b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a79e:	5b                   	pop    ebx
c001a79f:	8b 00                	mov    eax,DWORD PTR [eax]
c001a7a1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a7a4:	68 50 bc 02 c0       	push   0xc002bc50
c001a7a9:	e8 83 87 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001a7ae:	58                   	pop    eax
c001a7af:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a7b4:	5a                   	pop    edx
c001a7b5:	68 bc bd 02 c0       	push   0xc002bdbc
c001a7ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7c0:	e8 a3 69 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c001a7c5:	59                   	pop    ecx
c001a7c6:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a7cb:	5b                   	pop    ebx
c001a7cc:	68 59 bc 02 c0       	push   0xc002bc59
c001a7d1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7d7:	e8 8c 69 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c001a7dc:	0f 20 c0             	mov    eax,cr0
c001a7df:	5a                   	pop    edx
c001a7e0:	59                   	pop    ecx
c001a7e1:	50                   	push   eax
c001a7e2:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a7e7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7ed:	e8 9c 69 ff ff       	call   c001118e <VgaText::putx(unsigned int)>
c001a7f2:	5b                   	pop    ebx
c001a7f3:	58                   	pop    eax
c001a7f4:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a7f9:	68 63 bc 02 c0       	push   0xc002bc63
c001a7fe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a804:	e8 5f 69 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c001a809:	0f 20 d0             	mov    eax,cr2
c001a80c:	5a                   	pop    edx
c001a80d:	59                   	pop    ecx
c001a80e:	50                   	push   eax
c001a80f:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a814:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a81a:	e8 6f 69 ff ff       	call   c001118e <VgaText::putx(unsigned int)>
c001a81f:	5b                   	pop    ebx
c001a820:	58                   	pop    eax
c001a821:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a826:	68 6d bc 02 c0       	push   0xc002bc6d
c001a82b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a831:	e8 32 69 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c001a836:	0f 20 d8             	mov    eax,cr3
c001a839:	5a                   	pop    edx
c001a83a:	59                   	pop    ecx
c001a83b:	50                   	push   eax
c001a83c:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a841:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a847:	e8 42 69 ff ff       	call   c001118e <VgaText::putx(unsigned int)>
c001a84c:	5b                   	pop    ebx
c001a84d:	58                   	pop    eax
c001a84e:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a853:	68 80 bc 02 c0       	push   0xc002bc80
c001a858:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a85e:	e8 05 69 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c001a863:	0f 20 e0             	mov    eax,cr4
c001a866:	5a                   	pop    edx
c001a867:	59                   	pop    ecx
c001a868:	50                   	push   eax
c001a869:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a86e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a874:	e8 15 69 ff ff       	call   c001118e <VgaText::putx(unsigned int)>
c001a879:	5b                   	pop    ebx
c001a87a:	58                   	pop    eax
c001a87b:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a880:	68 8a bc 02 c0       	push   0xc002bc8a
c001a885:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a88b:	e8 d8 68 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c001a890:	5a                   	pop    edx
c001a891:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a896:	59                   	pop    ecx
c001a897:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a89d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a8a0:	50                   	push   eax
c001a8a1:	e8 e8 68 ff ff       	call   c001118e <VgaText::putx(unsigned int)>
c001a8a6:	5b                   	pop    ebx
c001a8a7:	58                   	pop    eax
c001a8a8:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a8ad:	68 a1 bc 02 c0       	push   0xc002bca1
c001a8b2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8b8:	e8 ab 68 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c001a8bd:	5a                   	pop    edx
c001a8be:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a8c3:	59                   	pop    ecx
c001a8c4:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a8ca:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a8cd:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a8d0:	50                   	push   eax
c001a8d1:	e8 b8 68 ff ff       	call   c001118e <VgaText::putx(unsigned int)>
c001a8d6:	5b                   	pop    ebx
c001a8d7:	58                   	pop    eax
c001a8d8:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a8dd:	68 a1 bc 02 c0       	push   0xc002bca1
c001a8e2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8e8:	e8 7b 68 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c001a8ed:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a8f2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a8f5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a8fb:	8b 12                	mov    edx,DWORD PTR [edx]
c001a8fd:	59                   	pop    ecx
c001a8fe:	5b                   	pop    ebx
c001a8ff:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a902:	50                   	push   eax
c001a903:	e8 86 68 ff ff       	call   c001118e <VgaText::putx(unsigned int)>
c001a908:	83 c4 10             	add    esp,0x10
c001a90b:	b2 fe                	mov    dl,0xfe
c001a90d:	e4 60                	in     al,0x60
c001a90f:	3c 1c                	cmp    al,0x1c
c001a911:	74 04                	je     c001a917 <Krnl::panic(char const*)+0x334>
c001a913:	3c 5a                	cmp    al,0x5a
c001a915:	75 f6                	jne    c001a90d <Krnl::panic(char const*)+0x32a>
c001a917:	e4 64                	in     al,0x64
c001a919:	a8 02                	test   al,0x2
c001a91b:	75 fa                	jne    c001a917 <Krnl::panic(char const*)+0x334>
c001a91d:	88 d0                	mov    al,dl
c001a91f:	e6 64                	out    0x64,al
c001a921:	fa                   	cli    
c001a922:	f4                   	hlt    
c001a923:	eb e8                	jmp    c001a90d <Krnl::panic(char const*)+0x32a>
c001a925:	50                   	push   eax
c001a926:	50                   	push   eax
c001a927:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a92c:	68 0c bd 02 c0       	push   0xc002bd0c
c001a931:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a937:	e8 2c 68 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c001a93c:	58                   	pop    eax
c001a93d:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a942:	5a                   	pop    edx
c001a943:	68 1b bc 02 c0       	push   0xc002bc1b
c001a948:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a94e:	e8 15 68 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c001a953:	59                   	pop    ecx
c001a954:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a959:	5b                   	pop    ebx
c001a95a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a95d:	83 c0 0c             	add    eax,0xc
c001a960:	50                   	push   eax
c001a961:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a966:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a96c:	e8 f7 67 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c001a971:	83 c4 10             	add    esp,0x10
c001a974:	e9 a3 fd ff ff       	jmp    c001a71c <Krnl::panic(char const*)+0x139>

c001a979 <Net::switchEndian16(unsigned short)>:
c001a979:	83 ec 04             	sub    esp,0x4
c001a97c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a980:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a984:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a988:	c1 f8 08             	sar    eax,0x8
c001a98b:	89 c2                	mov    edx,eax
c001a98d:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a991:	c1 e0 08             	shl    eax,0x8
c001a994:	09 d0                	or     eax,edx
c001a996:	83 c4 04             	add    esp,0x4
c001a999:	c3                   	ret    

c001a99a <Net::switchEndian32(unsigned int)>:
c001a99a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a99e:	c1 e8 18             	shr    eax,0x18
c001a9a1:	89 c2                	mov    edx,eax
c001a9a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9a7:	c1 e0 08             	shl    eax,0x8
c001a9aa:	25 00 00 ff 00       	and    eax,0xff0000
c001a9af:	09 c2                	or     edx,eax
c001a9b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9b5:	c1 e8 08             	shr    eax,0x8
c001a9b8:	25 00 ff 00 00       	and    eax,0xff00
c001a9bd:	09 c2                	or     edx,eax
c001a9bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9c3:	c1 e0 18             	shl    eax,0x18
c001a9c6:	09 d0                	or     eax,edx
c001a9c8:	c3                   	ret    

c001a9c9 <Net::crc32Calc(unsigned char*, int)>:
c001a9c9:	83 ec 10             	sub    esp,0x10
c001a9cc:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a9d1:	75 07                	jne    c001a9da <Net::crc32Calc(unsigned char*, int)+0x11>
c001a9d3:	b8 00 00 00 00       	mov    eax,0x0
c001a9d8:	eb 7c                	jmp    c001aa56 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a9da:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a9df:	7f 07                	jg     c001a9e8 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a9e1:	b8 00 00 00 00       	mov    eax,0x0
c001a9e6:	eb 6e                	jmp    c001aa56 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a9e8:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a9f0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a9f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9fc:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001aa00:	7d 4e                	jge    c001aa50 <Net::crc32Calc(unsigned char*, int)+0x87>
c001aa02:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001aa06:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aa0a:	01 d0                	add    eax,edx
c001aa0c:	8a 00                	mov    al,BYTE PTR [eax]
c001aa0e:	0f b6 c0             	movzx  eax,al
c001aa11:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001aa15:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aa1d:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001aa22:	7f 26                	jg     c001aa4a <Net::crc32Calc(unsigned char*, int)+0x81>
c001aa24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa28:	83 e0 01             	and    eax,0x1
c001aa2b:	74 0d                	je     c001aa3a <Net::crc32Calc(unsigned char*, int)+0x71>
c001aa2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa31:	d1 e8                	shr    eax,1
c001aa33:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001aa38:	eb 06                	jmp    c001aa40 <Net::crc32Calc(unsigned char*, int)+0x77>
c001aa3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa3e:	d1 e8                	shr    eax,1
c001aa40:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aa44:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aa48:	eb d3                	jmp    c001aa1d <Net::crc32Calc(unsigned char*, int)+0x54>
c001aa4a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001aa4e:	eb a8                	jmp    c001a9f8 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001aa50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa54:	f7 d0                	not    eax
c001aa56:	83 c4 10             	add    esp,0x10
c001aa59:	c3                   	ret    

c001aa5a <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001aa5a:	83 ec 1c             	sub    esp,0x1c
c001aa5d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa61:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aa65:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aa6d:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001aa72:	7f 14                	jg     c001aa88 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001aa74:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa78:	8d 50 01             	lea    edx,[eax+0x1]
c001aa7b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa7f:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001aa82:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aa86:	eb e5                	jmp    c001aa6d <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001aa88:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa8c:	8d 50 01             	lea    edx,[eax+0x1]
c001aa8f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa93:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001aa96:	83 ec 04             	sub    esp,0x4
c001aa99:	6a 06                	push   0x6
c001aa9b:	8d 44 24 36          	lea    eax,[esp+0x36]
c001aa9f:	50                   	push   eax
c001aaa0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aaa4:	e8 9b 5c fe ff       	call   c0000744 <memcpy>
c001aaa9:	83 c4 10             	add    esp,0x10
c001aaac:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001aab1:	83 ec 04             	sub    esp,0x4
c001aab4:	6a 06                	push   0x6
c001aab6:	8d 44 24 30          	lea    eax,[esp+0x30]
c001aaba:	50                   	push   eax
c001aabb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aabf:	e8 80 5c fe ff       	call   c0000744 <memcpy>
c001aac4:	83 c4 10             	add    esp,0x10
c001aac7:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001aacc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aad0:	0f b7 c0             	movzx  eax,ax
c001aad3:	c1 f8 08             	sar    eax,0x8
c001aad6:	89 c1                	mov    ecx,eax
c001aad8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aadc:	8d 50 01             	lea    edx,[eax+0x1]
c001aadf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aae3:	88 ca                	mov    dl,cl
c001aae5:	88 10                	mov    BYTE PTR [eax],dl
c001aae7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001aaeb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aaef:	8d 48 01             	lea    ecx,[eax+0x1]
c001aaf2:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001aaf6:	88 10                	mov    BYTE PTR [eax],dl
c001aaf8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001aafc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab00:	83 ec 04             	sub    esp,0x4
c001ab03:	52                   	push   edx
c001ab04:	50                   	push   eax
c001ab05:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ab09:	e8 36 5c fe ff       	call   c0000744 <memcpy>
c001ab0e:	83 c4 10             	add    esp,0x10
c001ab11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ab15:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001ab19:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab1d:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001ab21:	83 ec 08             	sub    esp,0x8
c001ab24:	50                   	push   eax
c001ab25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ab29:	e8 9b fe ff ff       	call   c001a9c9 <Net::crc32Calc(unsigned char*, int)>
c001ab2e:	83 c4 10             	add    esp,0x10
c001ab31:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ab35:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab39:	c1 e8 18             	shr    eax,0x18
c001ab3c:	89 c1                	mov    ecx,eax
c001ab3e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab42:	8d 50 01             	lea    edx,[eax+0x1]
c001ab45:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab49:	88 ca                	mov    dl,cl
c001ab4b:	88 10                	mov    BYTE PTR [eax],dl
c001ab4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab51:	c1 e8 10             	shr    eax,0x10
c001ab54:	89 c1                	mov    ecx,eax
c001ab56:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab5a:	8d 50 01             	lea    edx,[eax+0x1]
c001ab5d:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab61:	88 ca                	mov    dl,cl
c001ab63:	88 10                	mov    BYTE PTR [eax],dl
c001ab65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab69:	c1 e8 08             	shr    eax,0x8
c001ab6c:	89 c1                	mov    ecx,eax
c001ab6e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab72:	8d 50 01             	lea    edx,[eax+0x1]
c001ab75:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab79:	88 ca                	mov    dl,cl
c001ab7b:	88 10                	mov    BYTE PTR [eax],dl
c001ab7d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab81:	8d 50 01             	lea    edx,[eax+0x1]
c001ab84:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab88:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ab8c:	88 10                	mov    BYTE PTR [eax],dl
c001ab8e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ab92:	83 c4 1c             	add    esp,0x1c
c001ab95:	c3                   	ret    

c001ab96 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001ab96:	83 ec 2c             	sub    esp,0x2c
c001ab99:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aba1:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001aba6:	83 ec 04             	sub    esp,0x4
c001aba9:	6a 06                	push   0x6
c001abab:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001abaf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001abb3:	83 c0 0e             	add    eax,0xe
c001abb6:	50                   	push   eax
c001abb7:	e8 88 5b fe ff       	call   c0000744 <memcpy>
c001abbc:	83 c4 10             	add    esp,0x10
c001abbf:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001abc4:	83 ec 04             	sub    esp,0x4
c001abc7:	6a 06                	push   0x6
c001abc9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001abcd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001abd1:	83 c0 08             	add    eax,0x8
c001abd4:	50                   	push   eax
c001abd5:	e8 6a 5b fe ff       	call   c0000744 <memcpy>
c001abda:	83 c4 10             	add    esp,0x10
c001abdd:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001abe2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001abe6:	8d 50 01             	lea    edx,[eax+0x1]
c001abe9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001abed:	8a 00                	mov    al,BYTE PTR [eax]
c001abef:	0f b6 c0             	movzx  eax,al
c001abf2:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001abf7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001abfb:	8d 50 01             	lea    edx,[eax+0x1]
c001abfe:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac02:	8a 00                	mov    al,BYTE PTR [eax]
c001ac04:	0f b6 c0             	movzx  eax,al
c001ac07:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001ac0c:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001ac11:	c1 e0 08             	shl    eax,0x8
c001ac14:	89 c2                	mov    edx,eax
c001ac16:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ac1a:	09 d0                	or     eax,edx
c001ac1c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ac20:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001ac24:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001ac29:	75 3a                	jne    c001ac65 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ac2b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac2f:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ac32:	66 3d dc 05          	cmp    ax,0x5dc
c001ac36:	77 10                	ja     c001ac48 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001ac38:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac3c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ac3f:	0f b7 c0             	movzx  eax,ax
c001ac42:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ac46:	eb 1d                	jmp    c001ac65 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ac48:	83 ec 0c             	sub    esp,0xc
c001ac4b:	68 e4 bd 02 c0       	push   0xc002bde4
c001ac50:	e8 dc 82 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001ac55:	83 c4 10             	add    esp,0x10
c001ac58:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac5c:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001ac60:	e9 c0 00 00 00       	jmp    c001ad25 <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001ac65:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ac69:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac6d:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac6f:	83 ec 04             	sub    esp,0x4
c001ac72:	52                   	push   edx
c001ac73:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ac77:	50                   	push   eax
c001ac78:	e8 c7 5a fe ff       	call   c0000744 <memcpy>
c001ac7d:	83 c4 10             	add    esp,0x10
c001ac80:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac84:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001ac88:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac8c:	8d 50 01             	lea    edx,[eax+0x1]
c001ac8f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac93:	8a 00                	mov    al,BYTE PTR [eax]
c001ac95:	0f b6 c0             	movzx  eax,al
c001ac98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ac9c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aca0:	8d 50 01             	lea    edx,[eax+0x1]
c001aca3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001aca7:	8a 00                	mov    al,BYTE PTR [eax]
c001aca9:	0f b6 c0             	movzx  eax,al
c001acac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001acb0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001acb4:	8d 50 01             	lea    edx,[eax+0x1]
c001acb7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001acbb:	8a 00                	mov    al,BYTE PTR [eax]
c001acbd:	0f b6 c0             	movzx  eax,al
c001acc0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001acc4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001acc8:	8d 50 01             	lea    edx,[eax+0x1]
c001accb:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001accf:	8a 00                	mov    al,BYTE PTR [eax]
c001acd1:	0f b6 c0             	movzx  eax,al
c001acd4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001acd8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001acdc:	c1 e0 18             	shl    eax,0x18
c001acdf:	89 c2                	mov    edx,eax
c001ace1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ace5:	c1 e0 10             	shl    eax,0x10
c001ace8:	09 c2                	or     edx,eax
c001acea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001acee:	c1 e0 08             	shl    eax,0x8
c001acf1:	09 d0                	or     eax,edx
c001acf3:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001acf7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001acfb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001acff:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001ad03:	83 e8 04             	sub    eax,0x4
c001ad06:	83 ec 08             	sub    esp,0x8
c001ad09:	50                   	push   eax
c001ad0a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ad0e:	e8 b6 fc ff ff       	call   c001a9c9 <Net::crc32Calc(unsigned char*, int)>
c001ad13:	83 c4 10             	add    esp,0x10
c001ad16:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001ad1a:	0f 94 c2             	sete   dl
c001ad1d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad21:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001ad24:	90                   	nop
c001ad25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad29:	83 c4 2c             	add    esp,0x2c
c001ad2c:	c2 04 00             	ret    0x4

c001ad2f <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001ad2f:	55                   	push   ebp
c001ad30:	57                   	push   edi
c001ad31:	56                   	push   esi
c001ad32:	53                   	push   ebx
c001ad33:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ad39:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001ad40:	8a 1e                	mov    bl,BYTE PTR [esi]
c001ad42:	8d 6e 01             	lea    ebp,[esi+0x1]
c001ad45:	80 fb 40             	cmp    bl,0x40
c001ad48:	75 1b                	jne    c001ad65 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001ad4a:	8a 16                	mov    dl,BYTE PTR [esi]
c001ad4c:	84 d2                	test   dl,dl
c001ad4e:	0f 84 f1 00 00 00    	je     c001ae45 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad54:	8d 46 01             	lea    eax,[esi+0x1]
c001ad57:	80 fa 3a             	cmp    dl,0x3a
c001ad5a:	74 04                	je     c001ad60 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001ad5c:	89 c6                	mov    esi,eax
c001ad5e:	eb ea                	jmp    c001ad4a <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001ad60:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ad63:	89 c6                	mov    esi,eax
c001ad65:	50                   	push   eax
c001ad66:	6a 40                	push   0x40
c001ad68:	6a 00                	push   0x0
c001ad6a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ad6e:	50                   	push   eax
c001ad6f:	e8 04 5a fe ff       	call   c0000778 <memset>
c001ad74:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ad7b:	31 c0                	xor    eax,eax
c001ad7d:	83 c4 10             	add    esp,0x10
c001ad80:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ad82:	84 c9                	test   cl,cl
c001ad84:	0f 84 bb 00 00 00    	je     c001ae45 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad8a:	3d c7 00 00 00       	cmp    eax,0xc7
c001ad8f:	0f 8f b0 00 00 00    	jg     c001ae45 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad95:	80 f9 0a             	cmp    cl,0xa
c001ad98:	0f 85 98 00 00 00    	jne    c001ae36 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001ad9e:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001ada3:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001ada7:	a8 df                	test   al,0xdf
c001ada9:	0f 94 c1             	sete   cl
c001adac:	3c 23                	cmp    al,0x23
c001adae:	0f 94 c2             	sete   dl
c001adb1:	08 d1                	or     cl,dl
c001adb3:	75 4a                	jne    c001adff <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001adb5:	8d 50 f7             	lea    edx,[eax-0x9]
c001adb8:	80 fa 01             	cmp    dl,0x1
c001adbb:	76 42                	jbe    c001adff <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001adbd:	3c 5b                	cmp    al,0x5b
c001adbf:	75 42                	jne    c001ae03 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001adc1:	80 fb 40             	cmp    bl,0x40
c001adc4:	75 39                	jne    c001adff <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001adc6:	83 ec 0c             	sub    esp,0xc
c001adc9:	8d 54 24 65          	lea    edx,[esp+0x65]
c001adcd:	52                   	push   edx
c001adce:	e8 c1 59 fe ff       	call   c0000794 <strlen>
c001add3:	83 c4 10             	add    esp,0x10
c001add6:	83 f8 3f             	cmp    eax,0x3f
c001add9:	77 6a                	ja     c001ae45 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001addb:	50                   	push   eax
c001addc:	50                   	push   eax
c001addd:	8d 54 24 61          	lea    edx,[esp+0x61]
c001ade1:	52                   	push   edx
c001ade2:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ade6:	52                   	push   edx
c001ade7:	e8 48 5a fe ff       	call   c0000834 <strcpy>
c001adec:	58                   	pop    eax
c001aded:	8d 54 24 24          	lea    edx,[esp+0x24]
c001adf1:	52                   	push   edx
c001adf2:	e8 9d 59 fe ff       	call   c0000794 <strlen>
c001adf7:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001adfc:	83 c4 10             	add    esp,0x10
c001adff:	31 d2                	xor    edx,edx
c001ae01:	eb 3a                	jmp    c001ae3d <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001ae03:	80 fb 40             	cmp    bl,0x40
c001ae06:	74 06                	je     c001ae0e <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001ae08:	8d 44 24 58          	lea    eax,[esp+0x58]
c001ae0c:	eb 20                	jmp    c001ae2e <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001ae0e:	50                   	push   eax
c001ae0f:	50                   	push   eax
c001ae10:	55                   	push   ebp
c001ae11:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ae15:	50                   	push   eax
c001ae16:	e8 a5 5a fe ff       	call   c00008c0 <strcmp>
c001ae1b:	83 c4 10             	add    esp,0x10
c001ae1e:	85 c0                	test   eax,eax
c001ae20:	75 dd                	jne    c001adff <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae22:	eb e4                	jmp    c001ae08 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001ae24:	8d 50 01             	lea    edx,[eax+0x1]
c001ae27:	80 f9 3d             	cmp    cl,0x3d
c001ae2a:	74 1d                	je     c001ae49 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001ae2c:	89 d0                	mov    eax,edx
c001ae2e:	8a 08                	mov    cl,BYTE PTR [eax]
c001ae30:	84 c9                	test   cl,cl
c001ae32:	75 f0                	jne    c001ae24 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001ae34:	eb 0f                	jmp    c001ae45 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae36:	8d 50 01             	lea    edx,[eax+0x1]
c001ae39:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001ae3d:	47                   	inc    edi
c001ae3e:	89 d0                	mov    eax,edx
c001ae40:	e9 3b ff ff ff       	jmp    c001ad80 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001ae45:	31 c0                	xor    eax,eax
c001ae47:	eb 33                	jmp    c001ae7c <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001ae49:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ae4d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001ae50:	50                   	push   eax
c001ae51:	50                   	push   eax
c001ae52:	8d 44 24 60          	lea    eax,[esp+0x60]
c001ae56:	50                   	push   eax
c001ae57:	56                   	push   esi
c001ae58:	e8 63 5a fe ff       	call   c00008c0 <strcmp>
c001ae5d:	83 c4 10             	add    esp,0x10
c001ae60:	85 c0                	test   eax,eax
c001ae62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ae66:	75 97                	jne    c001adff <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae68:	51                   	push   ecx
c001ae69:	51                   	push   ecx
c001ae6a:	52                   	push   edx
c001ae6b:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001ae72:	e8 bd 59 fe ff       	call   c0000834 <strcpy>
c001ae77:	83 c4 10             	add    esp,0x10
c001ae7a:	b0 01                	mov    al,0x1
c001ae7c:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ae82:	5b                   	pop    ebx
c001ae83:	5e                   	pop    esi
c001ae84:	5f                   	pop    edi
c001ae85:	5d                   	pop    ebp
c001ae86:	c3                   	ret    

c001ae87 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001ae87:	57                   	push   edi
c001ae88:	56                   	push   esi
c001ae89:	53                   	push   ebx
c001ae8a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ae90:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001ae97:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001ae9e:	53                   	push   ebx
c001ae9f:	e8 f0 58 fe ff       	call   c0000794 <strlen>
c001aea4:	89 34 24             	mov    DWORD PTR [esp],esi
c001aea7:	89 c7                	mov    edi,eax
c001aea9:	e8 e6 58 fe ff       	call   c0000794 <strlen>
c001aeae:	83 c4 10             	add    esp,0x10
c001aeb1:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001aeb5:	3d ff 00 00 00       	cmp    eax,0xff
c001aeba:	0f 87 d3 00 00 00    	ja     c001af93 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001aec0:	57                   	push   edi
c001aec1:	57                   	push   edi
c001aec2:	56                   	push   esi
c001aec3:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001aec7:	56                   	push   esi
c001aec8:	e8 67 59 fe ff       	call   c0000834 <strcpy>
c001aecd:	58                   	pop    eax
c001aece:	5a                   	pop    edx
c001aecf:	68 ad c3 02 c0       	push   0xc002c3ad
c001aed4:	56                   	push   esi
c001aed5:	e8 9a 5a fe ff       	call   c0000974 <strcat>
c001aeda:	59                   	pop    ecx
c001aedb:	5f                   	pop    edi
c001aedc:	53                   	push   ebx
c001aedd:	56                   	push   esi
c001aede:	e8 91 5a fe ff       	call   c0000974 <strcat>
c001aee3:	58                   	pop    eax
c001aee4:	5a                   	pop    edx
c001aee5:	68 30 be 02 c0       	push   0xc002be30
c001aeea:	56                   	push   esi
c001aeeb:	e8 84 5a fe ff       	call   c0000974 <strcat>
c001aef0:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001aef7:	e8 44 49 ff ff       	call   c000f840 <malloc>
c001aefc:	83 c4 0c             	add    esp,0xc
c001aeff:	89 c3                	mov    ebx,eax
c001af01:	ff 35 34 1b 03 c0    	push   DWORD PTR ds:0xc0031b34
c001af07:	56                   	push   esi
c001af08:	50                   	push   eax
c001af09:	e8 7c 85 ff ff       	call   c001348a <File::File(char const*, Process*)>
c001af0e:	83 c4 10             	add    esp,0x10
c001af11:	85 db                	test   ebx,ebx
c001af13:	74 7e                	je     c001af93 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001af15:	51                   	push   ecx
c001af16:	51                   	push   ecx
c001af17:	6a 01                	push   0x1
c001af19:	53                   	push   ebx
c001af1a:	e8 cf 85 ff ff       	call   c00134ee <File::open(FileOpenMode)>
c001af1f:	83 c4 10             	add    esp,0x10
c001af22:	85 c0                	test   eax,eax
c001af24:	74 08                	je     c001af2e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001af26:	83 ec 0c             	sub    esp,0xc
c001af29:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af2b:	53                   	push   ebx
c001af2c:	eb 5f                	jmp    c001af8d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001af2e:	52                   	push   edx
c001af2f:	8d 44 24 17          	lea    eax,[esp+0x17]
c001af33:	50                   	push   eax
c001af34:	8d 44 24 20          	lea    eax,[esp+0x20]
c001af38:	50                   	push   eax
c001af39:	53                   	push   ebx
c001af3a:	e8 5b 88 ff ff       	call   c001379a <File::stat(unsigned long long*, bool*)>
c001af3f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001af43:	83 c4 10             	add    esp,0x10
c001af46:	89 c1                	mov    ecx,eax
c001af48:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001af4c:	74 31                	je     c001af7f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001af4e:	83 ec 0c             	sub    esp,0xc
c001af51:	50                   	push   eax
c001af52:	e8 e9 48 ff ff       	call   c000f840 <malloc>
c001af57:	89 c6                	mov    esi,eax
c001af59:	58                   	pop    eax
c001af5a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af5c:	8d 54 24 20          	lea    edx,[esp+0x20]
c001af60:	52                   	push   edx
c001af61:	56                   	push   esi
c001af62:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af66:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af6a:	53                   	push   ebx
c001af6b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001af6e:	83 c4 20             	add    esp,0x20
c001af71:	85 c0                	test   eax,eax
c001af73:	75 0a                	jne    c001af7f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001af75:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af79:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001af7d:	74 18                	je     c001af97 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001af7f:	83 ec 0c             	sub    esp,0xc
c001af82:	53                   	push   ebx
c001af83:	e8 c4 85 ff ff       	call   c001354c <File::close()>
c001af88:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af8a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af8d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001af90:	83 c4 10             	add    esp,0x10
c001af93:	31 c0                	xor    eax,eax
c001af95:	eb 3b                	jmp    c001afd2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001af97:	83 ec 0c             	sub    esp,0xc
c001af9a:	53                   	push   ebx
c001af9b:	e8 ac 85 ff ff       	call   c001354c <File::close()>
c001afa0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001afa2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001afa5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001afa8:	83 c4 0c             	add    esp,0xc
c001afab:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001afb2:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001afb9:	56                   	push   esi
c001afba:	e8 70 fd ff ff       	call   c001ad2f <Reg::findLineFromLoadedData(char*, char*, char*)>
c001afbf:	89 34 24             	mov    DWORD PTR [esp],esi
c001afc2:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001afc6:	e8 85 48 ff ff       	call   c000f850 <free>
c001afcb:	83 c4 10             	add    esp,0x10
c001afce:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001afd2:	81 c4 20 01 00 00    	add    esp,0x120
c001afd8:	5b                   	pop    ebx
c001afd9:	5e                   	pop    esi
c001afda:	5f                   	pop    edi
c001afdb:	c3                   	ret    

c001afdc <Reg::getLine(char*, char*, char*)>:
c001afdc:	57                   	push   edi
c001afdd:	56                   	push   esi
c001afde:	53                   	push   ebx
c001afdf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001afe3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001afe7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001afeb:	57                   	push   edi
c001afec:	56                   	push   esi
c001afed:	53                   	push   ebx
c001afee:	68 35 be 02 c0       	push   0xc002be35
c001aff3:	e8 8f fe ff ff       	call   c001ae87 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001aff8:	83 c4 10             	add    esp,0x10
c001affb:	84 c0                	test   al,al
c001affd:	75 10                	jne    c001b00f <Reg::getLine(char*, char*, char*)+0x33>
c001afff:	57                   	push   edi
c001b000:	56                   	push   esi
c001b001:	53                   	push   ebx
c001b002:	68 5a be 02 c0       	push   0xc002be5a
c001b007:	e8 7b fe ff ff       	call   c001ae87 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b00c:	83 c4 10             	add    esp,0x10
c001b00f:	5b                   	pop    ebx
c001b010:	5e                   	pop    esi
c001b011:	5f                   	pop    edi
c001b012:	c3                   	ret    

c001b013 <Reg::readInt(char*, char*, int*)>:
c001b013:	55                   	push   ebp
c001b014:	57                   	push   edi
c001b015:	56                   	push   esi
c001b016:	53                   	push   ebx
c001b017:	81 ec f0 00 00 00    	sub    esp,0xf0
c001b01d:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b021:	57                   	push   edi
c001b022:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b029:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b030:	e8 a7 ff ff ff       	call   c001afdc <Reg::getLine(char*, char*, char*)>
c001b035:	83 c4 10             	add    esp,0x10
c001b038:	84 c0                	test   al,al
c001b03a:	0f 84 b3 00 00 00    	je     c001b0f3 <Reg::readInt(char*, char*, int*)+0xe0>
c001b040:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b044:	80 fa 2b             	cmp    dl,0x2b
c001b047:	74 0c                	je     c001b055 <Reg::readInt(char*, char*, int*)+0x42>
c001b049:	80 fa 2d             	cmp    dl,0x2d
c001b04c:	75 0e                	jne    c001b05c <Reg::readInt(char*, char*, int*)+0x49>
c001b04e:	ba 01 00 00 00       	mov    edx,0x1
c001b053:	eb 0b                	jmp    c001b060 <Reg::readInt(char*, char*, int*)+0x4d>
c001b055:	ba 01 00 00 00       	mov    edx,0x1
c001b05a:	eb 02                	jmp    c001b05e <Reg::readInt(char*, char*, int*)+0x4b>
c001b05c:	31 d2                	xor    edx,edx
c001b05e:	31 c0                	xor    eax,eax
c001b060:	be 0a 00 00 00       	mov    esi,0xa
c001b065:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b06a:	75 20                	jne    c001b08c <Reg::readInt(char*, char*, int*)+0x79>
c001b06c:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b070:	80 f9 78             	cmp    cl,0x78
c001b073:	75 0a                	jne    c001b07f <Reg::readInt(char*, char*, int*)+0x6c>
c001b075:	83 c2 02             	add    edx,0x2
c001b078:	be 10 00 00 00       	mov    esi,0x10
c001b07d:	eb 0d                	jmp    c001b08c <Reg::readInt(char*, char*, int*)+0x79>
c001b07f:	80 f9 62             	cmp    cl,0x62
c001b082:	75 08                	jne    c001b08c <Reg::readInt(char*, char*, int*)+0x79>
c001b084:	83 c2 02             	add    edx,0x2
c001b087:	be 02 00 00 00       	mov    esi,0x2
c001b08c:	01 d7                	add    edi,edx
c001b08e:	31 d2                	xor    edx,edx
c001b090:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b092:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b096:	80 fb 0d             	cmp    bl,0xd
c001b099:	0f 94 c3             	sete   bl
c001b09c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b0a1:	0f 94 c1             	sete   cl
c001b0a4:	08 cb                	or     bl,cl
c001b0a6:	75 3a                	jne    c001b0e2 <Reg::readInt(char*, char*, int*)+0xcf>
c001b0a8:	0f af d6             	imul   edx,esi
c001b0ab:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b0b0:	83 fe 10             	cmp    esi,0x10
c001b0b3:	75 26                	jne    c001b0db <Reg::readInt(char*, char*, int*)+0xc8>
c001b0b5:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b0b9:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b0bc:	89 e9                	mov    ecx,ebp
c001b0be:	80 f9 05             	cmp    cl,0x5
c001b0c1:	77 06                	ja     c001b0c9 <Reg::readInt(char*, char*, int*)+0xb6>
c001b0c3:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b0c7:	eb 16                	jmp    c001b0df <Reg::readInt(char*, char*, int*)+0xcc>
c001b0c9:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b0cd:	83 e9 61             	sub    ecx,0x61
c001b0d0:	80 f9 05             	cmp    cl,0x5
c001b0d3:	77 06                	ja     c001b0db <Reg::readInt(char*, char*, int*)+0xc8>
c001b0d5:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b0d9:	eb 04                	jmp    c001b0df <Reg::readInt(char*, char*, int*)+0xcc>
c001b0db:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b0df:	47                   	inc    edi
c001b0e0:	eb ae                	jmp    c001b090 <Reg::readInt(char*, char*, int*)+0x7d>
c001b0e2:	84 c0                	test   al,al
c001b0e4:	74 02                	je     c001b0e8 <Reg::readInt(char*, char*, int*)+0xd5>
c001b0e6:	f7 da                	neg    edx
c001b0e8:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b0ef:	89 10                	mov    DWORD PTR [eax],edx
c001b0f1:	88 d8                	mov    al,bl
c001b0f3:	81 c4 ec 00 00 00    	add    esp,0xec
c001b0f9:	5b                   	pop    ebx
c001b0fa:	5e                   	pop    esi
c001b0fb:	5f                   	pop    edi
c001b0fc:	5d                   	pop    ebp
c001b0fd:	c3                   	ret    

c001b0fe <Reg::readString(char*, char*, char*, int)>:
c001b0fe:	57                   	push   edi
c001b0ff:	56                   	push   esi
c001b100:	53                   	push   ebx
c001b101:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b107:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b10e:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b112:	57                   	push   edi
c001b113:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b11a:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b121:	e8 b6 fe ff ff       	call   c001afdc <Reg::getLine(char*, char*, char*)>
c001b126:	83 c4 10             	add    esp,0x10
c001b129:	89 c6                	mov    esi,eax
c001b12b:	84 c0                	test   al,al
c001b12d:	74 44                	je     c001b173 <Reg::readString(char*, char*, char*, int)+0x75>
c001b12f:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b136:	31 c0                	xor    eax,eax
c001b138:	4a                   	dec    edx
c001b139:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b13c:	84 c9                	test   cl,cl
c001b13e:	74 0f                	je     c001b14f <Reg::readString(char*, char*, char*, int)+0x51>
c001b140:	39 c2                	cmp    edx,eax
c001b142:	7e 0b                	jle    c001b14f <Reg::readString(char*, char*, char*, int)+0x51>
c001b144:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b147:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b14c:	40                   	inc    eax
c001b14d:	eb ea                	jmp    c001b139 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b14f:	83 ec 0c             	sub    esp,0xc
c001b152:	53                   	push   ebx
c001b153:	e8 3c 56 fe ff       	call   c0000794 <strlen>
c001b158:	83 c4 10             	add    esp,0x10
c001b15b:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b160:	75 11                	jne    c001b173 <Reg::readString(char*, char*, char*, int)+0x75>
c001b162:	83 ec 0c             	sub    esp,0xc
c001b165:	53                   	push   ebx
c001b166:	e8 29 56 fe ff       	call   c0000794 <strlen>
c001b16b:	83 c4 10             	add    esp,0x10
c001b16e:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b173:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b179:	89 f0                	mov    eax,esi
c001b17b:	5b                   	pop    ebx
c001b17c:	5e                   	pop    esi
c001b17d:	5f                   	pop    edi
c001b17e:	c3                   	ret    

c001b17f <Reg::readBool(char*, char*, bool*)>:
c001b17f:	83 ec 20             	sub    esp,0x20
c001b182:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b186:	50                   	push   eax
c001b187:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b18b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b18f:	e8 7f fe ff ff       	call   c001b013 <Reg::readInt(char*, char*, int*)>
c001b194:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b199:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b19d:	0f 95 02             	setne  BYTE PTR [edx]
c001b1a0:	83 c4 2c             	add    esp,0x2c
c001b1a3:	c3                   	ret    

c001b1a4 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b1a4:	53                   	push   ebx
c001b1a5:	83 ec 1c             	sub    esp,0x1c
c001b1a8:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b1ac:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b1b0:	50                   	push   eax
c001b1b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1b9:	e8 c1 ff ff ff       	call   c001b17f <Reg::readBool(char*, char*, bool*)>
c001b1be:	83 c4 10             	add    esp,0x10
c001b1c1:	84 c0                	test   al,al
c001b1c3:	74 04                	je     c001b1c9 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b1c5:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b1c9:	88 d8                	mov    al,bl
c001b1cb:	83 c4 18             	add    esp,0x18
c001b1ce:	5b                   	pop    ebx
c001b1cf:	c3                   	ret    

c001b1d0 <Reg::readIntWithDefault(char*, char*, int)>:
c001b1d0:	53                   	push   ebx
c001b1d1:	83 ec 1c             	sub    esp,0x1c
c001b1d4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b1d8:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b1dc:	50                   	push   eax
c001b1dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1e5:	e8 29 fe ff ff       	call   c001b013 <Reg::readInt(char*, char*, int*)>
c001b1ea:	83 c4 10             	add    esp,0x10
c001b1ed:	84 c0                	test   al,al
c001b1ef:	74 04                	je     c001b1f5 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b1f1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b1f5:	89 d8                	mov    eax,ebx
c001b1f7:	83 c4 18             	add    esp,0x18
c001b1fa:	5b                   	pop    ebx
c001b1fb:	c3                   	ret    

c001b1fc <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b1fc:	57                   	push   edi
c001b1fd:	56                   	push   esi
c001b1fe:	53                   	push   ebx
c001b1ff:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b203:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b207:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b20b:	56                   	push   esi
c001b20c:	53                   	push   ebx
c001b20d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b211:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b215:	e8 e4 fe ff ff       	call   c001b0fe <Reg::readString(char*, char*, char*, int)>
c001b21a:	83 c4 10             	add    esp,0x10
c001b21d:	84 c0                	test   al,al
c001b21f:	75 1b                	jne    c001b23c <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b221:	50                   	push   eax
c001b222:	56                   	push   esi
c001b223:	4e                   	dec    esi
c001b224:	6a 00                	push   0x0
c001b226:	53                   	push   ebx
c001b227:	e8 4c 55 fe ff       	call   c0000778 <memset>
c001b22c:	83 c4 0c             	add    esp,0xc
c001b22f:	56                   	push   esi
c001b230:	57                   	push   edi
c001b231:	53                   	push   ebx
c001b232:	89 fb                	mov    ebx,edi
c001b234:	e8 0b 55 fe ff       	call   c0000744 <memcpy>
c001b239:	83 c4 10             	add    esp,0x10
c001b23c:	89 d8                	mov    eax,ebx
c001b23e:	5b                   	pop    ebx
c001b23f:	5e                   	pop    esi
c001b240:	5f                   	pop    edi
c001b241:	c3                   	ret    

c001b242 <Sys::eject(regs*)>:
c001b242:	83 ec 0c             	sub    esp,0xc
c001b245:	83 ca ff             	or     edx,0xffffffff
c001b248:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b24c:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b24f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b254:	83 e9 41             	sub    ecx,0x41
c001b257:	83 f9 19             	cmp    ecx,0x19
c001b25a:	77 18                	ja     c001b274 <Sys::eject(regs*)+0x32>
c001b25c:	8b 0c 8d e0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1420]
c001b263:	85 c9                	test   ecx,ecx
c001b265:	74 0d                	je     c001b274 <Sys::eject(regs*)+0x32>
c001b267:	83 ec 0c             	sub    esp,0xc
c001b26a:	51                   	push   ecx
c001b26b:	e8 78 b4 ff ff       	call   c00166e8 <LogicalDisk::eject()>
c001b270:	83 c4 10             	add    esp,0x10
c001b273:	99                   	cdq    
c001b274:	83 c4 0c             	add    esp,0xc
c001b277:	c3                   	ret    

c001b278 <Sys::exit(regs*)>:
c001b278:	83 ec 18             	sub    esp,0x18
c001b27b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b27f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b282:	e8 c4 35 00 00       	call   c001e84b <terminateTask(int)>
c001b287:	83 c8 ff             	or     eax,0xffffffff
c001b28a:	83 c4 1c             	add    esp,0x1c
c001b28d:	89 c2                	mov    edx,eax
c001b28f:	c3                   	ret    

c001b290 <Sys::getCwd(regs*)>:
c001b290:	83 ec 10             	sub    esp,0x10
c001b293:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b297:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b29a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b29d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2a2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b2a5:	e8 e2 7f ff ff       	call   c001328c <Fs::getcwd(Process*, char*, int)>
c001b2aa:	83 c4 1c             	add    esp,0x1c
c001b2ad:	99                   	cdq    
c001b2ae:	c3                   	ret    

c001b2af <Sys::getPID(regs*)>:
c001b2af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2b4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b2b7:	8b 00                	mov    eax,DWORD PTR [eax]
c001b2b9:	99                   	cdq    
c001b2ba:	c3                   	ret    

c001b2bb <Sys::getRAMData(regs*)>:
c001b2bb:	8b 0d 10 e6 02 c0    	mov    ecx,DWORD PTR ds:0xc002e610
c001b2c1:	6b 05 0c e6 02 c0 64 	imul   eax,DWORD PTR ds:0xc002e60c,0x64
c001b2c8:	99                   	cdq    
c001b2c9:	f7 f9                	idiv   ecx
c001b2cb:	c1 e0 18             	shl    eax,0x18
c001b2ce:	09 c8                	or     eax,ecx
c001b2d0:	99                   	cdq    
c001b2d1:	c3                   	ret    

c001b2d2 <Sys::loadDLL(regs*)>:
c001b2d2:	56                   	push   esi
c001b2d3:	53                   	push   ebx
c001b2d4:	31 d2                	xor    edx,edx
c001b2d6:	51                   	push   ecx
c001b2d7:	b8 01 00 00 00       	mov    eax,0x1
c001b2dc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b2e0:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b2e4:	0f 84 8c 00 00 00    	je     c001b376 <Sys::loadDLL(regs*)+0xa4>
c001b2ea:	83 ec 0c             	sub    esp,0xc
c001b2ed:	68 14 01 00 00       	push   0x114
c001b2f2:	e8 49 45 ff ff       	call   c000f840 <malloc>
c001b2f7:	83 c4 0c             	add    esp,0xc
c001b2fa:	89 c3                	mov    ebx,eax
c001b2fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b301:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b304:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b307:	53                   	push   ebx
c001b308:	e8 7d 81 ff ff       	call   c001348a <File::File(char const*, Process*)>
c001b30d:	83 c4 10             	add    esp,0x10
c001b310:	31 d2                	xor    edx,edx
c001b312:	b8 02 00 00 00       	mov    eax,0x2
c001b317:	85 db                	test   ebx,ebx
c001b319:	74 5b                	je     c001b376 <Sys::loadDLL(regs*)+0xa4>
c001b31b:	83 ec 0c             	sub    esp,0xc
c001b31e:	53                   	push   ebx
c001b31f:	e8 38 84 ff ff       	call   c001375c <File::exists()>
c001b324:	83 c4 10             	add    esp,0x10
c001b327:	84 c0                	test   al,al
c001b329:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b32b:	75 11                	jne    c001b33e <Sys::loadDLL(regs*)+0x6c>
c001b32d:	83 ec 0c             	sub    esp,0xc
c001b330:	53                   	push   ebx
c001b331:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b334:	83 c4 10             	add    esp,0x10
c001b337:	b8 03 00 00 00       	mov    eax,0x3
c001b33c:	eb 36                	jmp    c001b374 <Sys::loadDLL(regs*)+0xa2>
c001b33e:	83 ec 0c             	sub    esp,0xc
c001b341:	53                   	push   ebx
c001b342:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b345:	58                   	pop    eax
c001b346:	5a                   	pop    edx
c001b347:	6a 00                	push   0x0
c001b349:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b34c:	e8 0f 24 00 00       	call   c001d760 <Thr::loadDLL(char const*, bool)>
c001b351:	83 c4 10             	add    esp,0x10
c001b354:	89 c1                	mov    ecx,eax
c001b356:	31 d2                	xor    edx,edx
c001b358:	b8 04 00 00 00       	mov    eax,0x4
c001b35d:	85 c9                	test   ecx,ecx
c001b35f:	74 15                	je     c001b376 <Sys::loadDLL(regs*)+0xa4>
c001b361:	53                   	push   ebx
c001b362:	53                   	push   ebx
c001b363:	ff 35 c8 e5 02 c0    	push   DWORD PTR ds:0xc002e5c8
c001b369:	51                   	push   ecx
c001b36a:	e8 25 26 00 00       	call   c001d994 <Thr::executeDLL(unsigned long, void*)>
c001b36f:	83 c4 10             	add    esp,0x10
c001b372:	31 c0                	xor    eax,eax
c001b374:	31 d2                	xor    edx,edx
c001b376:	59                   	pop    ecx
c001b377:	5b                   	pop    ebx
c001b378:	5e                   	pop    esi
c001b379:	c3                   	ret    

c001b37a <Sys::read(regs*)>:
c001b37a:	57                   	push   edi
c001b37b:	56                   	push   esi
c001b37c:	53                   	push   ebx
c001b37d:	83 ec 10             	sub    esp,0x10
c001b380:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b384:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b387:	83 f8 02             	cmp    eax,0x2
c001b38a:	77 10                	ja     c001b39c <Sys::read(regs*)+0x22>
c001b38c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b391:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b394:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b39a:	eb 0e                	jmp    c001b3aa <Sys::read(regs*)+0x30>
c001b39c:	83 ec 0c             	sub    esp,0xc
c001b39f:	50                   	push   eax
c001b3a0:	e8 9c 66 ff ff       	call   c0011a41 <getFromFileDescriptor(int)>
c001b3a5:	83 c4 10             	add    esp,0x10
c001b3a8:	89 c1                	mov    ecx,eax
c001b3aa:	83 c8 ff             	or     eax,0xffffffff
c001b3ad:	85 c9                	test   ecx,ecx
c001b3af:	89 c2                	mov    edx,eax
c001b3b1:	74 28                	je     c001b3db <Sys::read(regs*)+0x61>
c001b3b3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b3bb:	31 ff                	xor    edi,edi
c001b3bd:	83 ec 0c             	sub    esp,0xc
c001b3c0:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b3c2:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b3c6:	52                   	push   edx
c001b3c7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b3ca:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b3cd:	57                   	push   edi
c001b3ce:	56                   	push   esi
c001b3cf:	51                   	push   ecx
c001b3d0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b3d3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b3d7:	83 c4 20             	add    esp,0x20
c001b3da:	99                   	cdq    
c001b3db:	83 c4 10             	add    esp,0x10
c001b3de:	5b                   	pop    ebx
c001b3df:	5e                   	pop    esi
c001b3e0:	5f                   	pop    edi
c001b3e1:	c3                   	ret    

c001b3e2 <Sys::sbrk(regs*)>:
c001b3e2:	56                   	push   esi
c001b3e3:	53                   	push   ebx
c001b3e4:	83 ec 0c             	sub    esp,0xc
c001b3e7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b3eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3f0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b3f3:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001b3f9:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c001b3fc:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b3ff:	68 75 be 02 c0       	push   0xc002be75
c001b404:	e8 28 7b ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001b409:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b40c:	83 c4 10             	add    esp,0x10
c001b40f:	85 c0                	test   eax,eax
c001b411:	75 0a                	jne    c001b41d <Sys::sbrk(regs*)+0x3b>
c001b413:	50                   	push   eax
c001b414:	50                   	push   eax
c001b415:	53                   	push   ebx
c001b416:	68 91 be 02 c0       	push   0xc002be91
c001b41b:	eb 54                	jmp    c001b471 <Sys::sbrk(regs*)+0x8f>
c001b41d:	79 0a                	jns    c001b429 <Sys::sbrk(regs*)+0x47>
c001b41f:	56                   	push   esi
c001b420:	56                   	push   esi
c001b421:	53                   	push   ebx
c001b422:	68 a4 be 02 c0       	push   0xc002bea4
c001b427:	eb 48                	jmp    c001b471 <Sys::sbrk(regs*)+0x8f>
c001b429:	3d 00 00 00 04       	cmp    eax,0x4000000
c001b42e:	76 17                	jbe    c001b447 <Sys::sbrk(regs*)+0x65>
c001b430:	51                   	push   ecx
c001b431:	51                   	push   ecx
c001b432:	53                   	push   ebx
c001b433:	68 b6 be 02 c0       	push   0xc002beb6
c001b438:	e8 f4 7a ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001b43d:	83 c8 ff             	or     eax,0xffffffff
c001b440:	83 c4 10             	add    esp,0x10
c001b443:	89 c2                	mov    edx,eax
c001b445:	eb 36                	jmp    c001b47d <Sys::sbrk(regs*)+0x9b>
c001b447:	05 ff 0f 00 00       	add    eax,0xfff
c001b44c:	56                   	push   esi
c001b44d:	c1 e8 0c             	shr    eax,0xc
c001b450:	68 07 04 00 00       	push   0x407
c001b455:	50                   	push   eax
c001b456:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b45b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b45e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b464:	e8 05 70 ff ff       	call   c001246e <VAS::allocatePages(int, int)>
c001b469:	58                   	pop    eax
c001b46a:	5a                   	pop    edx
c001b46b:	53                   	push   ebx
c001b46c:	68 cf be 02 c0       	push   0xc002becf
c001b471:	e8 bb 7a ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001b476:	89 d8                	mov    eax,ebx
c001b478:	31 d2                	xor    edx,edx
c001b47a:	83 c4 10             	add    esp,0x10
c001b47d:	59                   	pop    ecx
c001b47e:	5b                   	pop    ebx
c001b47f:	5e                   	pop    esi
c001b480:	c3                   	ret    

c001b481 <Sys::setCwd(regs*)>:
c001b481:	83 ec 14             	sub    esp,0x14
c001b484:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b488:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b48b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b490:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b493:	e8 63 83 ff ff       	call   c00137fb <Fs::setcwd(Process*, char*)>
c001b498:	83 c4 1c             	add    esp,0x1c
c001b49b:	99                   	cdq    
c001b49c:	c3                   	ret    

c001b49d <Sys::setTime(regs*)>:
c001b49d:	55                   	push   ebp
c001b49e:	31 d2                	xor    edx,edx
c001b4a0:	57                   	push   edi
c001b4a1:	bf 18 00 00 00       	mov    edi,0x18
c001b4a6:	56                   	push   esi
c001b4a7:	53                   	push   ebx
c001b4a8:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b4ad:	83 ec 30             	sub    esp,0x30
c001b4b0:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b4b4:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b4b7:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b4ba:	f7 f3                	div    ebx
c001b4bc:	89 d6                	mov    esi,edx
c001b4be:	31 d2                	xor    edx,edx
c001b4c0:	f7 f3                	div    ebx
c001b4c2:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b4c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b4c9:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b4ce:	31 d2                	xor    edx,edx
c001b4d0:	f7 f3                	div    ebx
c001b4d2:	31 d2                	xor    edx,edx
c001b4d4:	bb 0c 00 00 00       	mov    ebx,0xc
c001b4d9:	f7 f7                	div    edi
c001b4db:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b4de:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b4e2:	0f b7 cd             	movzx  ecx,bp
c001b4e5:	56                   	push   esi
c001b4e6:	89 c7                	mov    edi,eax
c001b4e8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b4ec:	c1 e6 10             	shl    esi,0x10
c001b4ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b4f3:	83 e7 1f             	and    edi,0x1f
c001b4f6:	51                   	push   ecx
c001b4f7:	47                   	inc    edi
c001b4f8:	c1 e8 05             	shr    eax,0x5
c001b4fb:	31 d2                	xor    edx,edx
c001b4fd:	f7 f3                	div    ebx
c001b4ff:	31 db                	xor    ebx,ebx
c001b501:	52                   	push   edx
c001b502:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b506:	57                   	push   edi
c001b507:	68 f5 be 02 c0       	push   0xc002bef5
c001b50c:	e8 20 7a ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001b511:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b515:	89 f8                	mov    eax,edi
c001b517:	31 c9                	xor    ecx,ecx
c001b519:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b51d:	88 c1                	mov    cl,al
c001b51f:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b525:	88 d5                	mov    ch,dl
c001b527:	c1 e0 10             	shl    eax,0x10
c001b52a:	0f b7 d1             	movzx  edx,cx
c001b52d:	09 c2                	or     edx,eax
c001b52f:	89 d8                	mov    eax,ebx
c001b531:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b536:	09 f0                	or     eax,esi
c001b538:	89 c3                	mov    ebx,eax
c001b53a:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b53e:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b542:	83 c4 18             	add    esp,0x18
c001b545:	53                   	push   ebx
c001b546:	52                   	push   edx
c001b547:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b54b:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b54f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b553:	e8 bd 89 ff ff       	call   c0013f15 <datetimeToSeconds(datetime_t)>
c001b558:	83 c4 0c             	add    esp,0xc
c001b55b:	52                   	push   edx
c001b55c:	50                   	push   eax
c001b55d:	56                   	push   esi
c001b55e:	e8 39 8b ff ff       	call   c001409c <secondsToDatetime(unsigned long long)>
c001b563:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b567:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b56b:	51                   	push   ecx
c001b56c:	89 d6                	mov    esi,edx
c001b56e:	51                   	push   ecx
c001b56f:	c1 ee 10             	shr    esi,0x10
c001b572:	89 f3                	mov    ebx,esi
c001b574:	0f b6 f3             	movzx  esi,bl
c001b577:	56                   	push   esi
c001b578:	0f b6 f6             	movzx  esi,dh
c001b57b:	0f b6 d2             	movzx  edx,dl
c001b57e:	56                   	push   esi
c001b57f:	52                   	push   edx
c001b580:	89 c2                	mov    edx,eax
c001b582:	c1 ea 10             	shr    edx,0x10
c001b585:	52                   	push   edx
c001b586:	0f b6 d4             	movzx  edx,ah
c001b589:	0f b6 c0             	movzx  eax,al
c001b58c:	52                   	push   edx
c001b58d:	50                   	push   eax
c001b58e:	68 11 bf 02 c0       	push   0xc002bf11
c001b593:	e8 99 79 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001b598:	83 c4 2c             	add    esp,0x2c
c001b59b:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c001b5a0:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b5a4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b5a8:	53                   	push   ebx
c001b5a9:	51                   	push   ecx
c001b5aa:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b5b0:	e8 87 8a ff ff       	call   c001403c <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b5b5:	83 f0 01             	xor    eax,0x1
c001b5b8:	31 d2                	xor    edx,edx
c001b5ba:	0f b6 c0             	movzx  eax,al
c001b5bd:	83 c4 3c             	add    esp,0x3c
c001b5c0:	5b                   	pop    ebx
c001b5c1:	5e                   	pop    esi
c001b5c2:	5f                   	pop    edi
c001b5c3:	5d                   	pop    ebp
c001b5c4:	c3                   	ret    

c001b5c5 <Sys::timezone(regs*)>:
c001b5c5:	53                   	push   ebx
c001b5c6:	83 ec 08             	sub    esp,0x8
c001b5c9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b5cd:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b5d1:	75 17                	jne    c001b5ea <Sys::timezone(regs*)+0x25>
c001b5d3:	83 ec 0c             	sub    esp,0xc
c001b5d6:	68 2d bf 02 c0       	push   0xc002bf2d
c001b5db:	e8 51 79 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001b5e0:	83 c8 ff             	or     eax,0xffffffff
c001b5e3:	83 c4 10             	add    esp,0x10
c001b5e6:	89 c2                	mov    edx,eax
c001b5e8:	eb 20                	jmp    c001b60a <Sys::timezone(regs*)+0x45>
c001b5ea:	83 ec 0c             	sub    esp,0xc
c001b5ed:	68 65 bf 02 c0       	push   0xc002bf65
c001b5f2:	e8 3a 79 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001b5f7:	58                   	pop    eax
c001b5f8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b5fb:	e8 9e 87 ff ff       	call   c0013d9e <User::loadClockSettings(int)>
c001b600:	83 c4 10             	add    esp,0x10
c001b603:	b8 01 00 00 00       	mov    eax,0x1
c001b608:	31 d2                	xor    edx,edx
c001b60a:	83 c4 08             	add    esp,0x8
c001b60d:	5b                   	pop    ebx
c001b60e:	c3                   	ret    

c001b60f <Sys::write(regs*)>:
c001b60f:	57                   	push   edi
c001b610:	56                   	push   esi
c001b611:	53                   	push   ebx
c001b612:	83 ec 10             	sub    esp,0x10
c001b615:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b619:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b61c:	83 f8 02             	cmp    eax,0x2
c001b61f:	77 10                	ja     c001b631 <Sys::write(regs*)+0x22>
c001b621:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b626:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b629:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b62f:	eb 0e                	jmp    c001b63f <Sys::write(regs*)+0x30>
c001b631:	83 ec 0c             	sub    esp,0xc
c001b634:	50                   	push   eax
c001b635:	e8 07 64 ff ff       	call   c0011a41 <getFromFileDescriptor(int)>
c001b63a:	83 c4 10             	add    esp,0x10
c001b63d:	89 c1                	mov    ecx,eax
c001b63f:	83 c8 ff             	or     eax,0xffffffff
c001b642:	85 c9                	test   ecx,ecx
c001b644:	89 c2                	mov    edx,eax
c001b646:	74 28                	je     c001b670 <Sys::write(regs*)+0x61>
c001b648:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b650:	31 ff                	xor    edi,edi
c001b652:	83 ec 0c             	sub    esp,0xc
c001b655:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b657:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b65b:	52                   	push   edx
c001b65c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b65f:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b662:	57                   	push   edi
c001b663:	56                   	push   esi
c001b664:	51                   	push   ecx
c001b665:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b668:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b66c:	83 c4 20             	add    esp,0x20
c001b66f:	99                   	cdq    
c001b670:	83 c4 10             	add    esp,0x10
c001b673:	5b                   	pop    ebx
c001b674:	5e                   	pop    esi
c001b675:	5f                   	pop    edi
c001b676:	c3                   	ret    

c001b677 <Sys::wsbe(regs*)>:
c001b677:	57                   	push   edi
c001b678:	b9 0b 00 00 00       	mov    ecx,0xb
c001b67d:	56                   	push   esi
c001b67e:	be a4 bf 02 c0       	mov    esi,0xc002bfa4
c001b683:	53                   	push   ebx
c001b684:	83 ec 30             	sub    esp,0x30
c001b687:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b68b:	fc                   	cld    
c001b68c:	83 ec 0c             	sub    esp,0xc
c001b68f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b691:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b695:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b69a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b69d:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b6a3:	8b 06                	mov    eax,DWORD PTR [esi]
c001b6a5:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b6a8:	57                   	push   edi
c001b6a9:	e8 e6 50 fe ff       	call   c0000794 <strlen>
c001b6ae:	5a                   	pop    edx
c001b6af:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b6b3:	52                   	push   edx
c001b6b4:	31 d2                	xor    edx,edx
c001b6b6:	57                   	push   edi
c001b6b7:	52                   	push   edx
c001b6b8:	50                   	push   eax
c001b6b9:	56                   	push   esi
c001b6ba:	ff d3                	call   ebx
c001b6bc:	83 c4 14             	add    esp,0x14
c001b6bf:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b6c3:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b6c6:	e8 80 31 00 00       	call   c001e84b <terminateTask(int)>
c001b6cb:	83 c4 40             	add    esp,0x40
c001b6ce:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b6d3:	5b                   	pop    ebx
c001b6d4:	31 d2                	xor    edx,edx
c001b6d6:	5e                   	pop    esi
c001b6d7:	5f                   	pop    edi
c001b6d8:	c3                   	ret    

c001b6d9 <Sys::yield(regs*)>:
c001b6d9:	57                   	push   edi
c001b6da:	56                   	push   esi
c001b6db:	53                   	push   ebx
c001b6dc:	e8 27 27 00 00       	call   c001de08 <lockScheduler()>
c001b6e1:	e8 5e 2a 00 00       	call   c001e144 <schedule()>
c001b6e6:	e8 1f 27 00 00       	call   c001de0a <unlockScheduler()>
c001b6eb:	8b 35 50 ec 02 c0    	mov    esi,DWORD PTR ds:0xc002ec50
c001b6f1:	8b 3d 54 ec 02 c0    	mov    edi,DWORD PTR ds:0xc002ec54
c001b6f7:	89 f0                	mov    eax,esi
c001b6f9:	89 fb                	mov    ebx,edi
c001b6fb:	89 f1                	mov    ecx,esi
c001b6fd:	c1 e0 07             	shl    eax,0x7
c001b700:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b704:	25 80 30 0f 00       	and    eax,0xf3080
c001b709:	c1 eb 17             	shr    ebx,0x17
c001b70c:	31 c8                	xor    eax,ecx
c001b70e:	89 da                	mov    edx,ebx
c001b710:	5b                   	pop    ebx
c001b711:	5e                   	pop    esi
c001b712:	5f                   	pop    edi
c001b713:	c3                   	ret    

c001b714 <sysCallSeekDir(regs*)>:
c001b714:	31 c0                	xor    eax,eax
c001b716:	31 d2                	xor    edx,edx
c001b718:	c3                   	ret    

c001b719 <sysCallTellDir(regs*)>:
c001b719:	31 c0                	xor    eax,eax
c001b71b:	31 d2                	xor    edx,edx
c001b71d:	c3                   	ret    

c001b71e <sysCallVerify(regs*)>:
c001b71e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b722:	31 d2                	xor    edx,edx
c001b724:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b727:	c3                   	ret    

c001b728 <sysFormatDisk(regs*)>:
c001b728:	56                   	push   esi
c001b729:	53                   	push   ebx
c001b72a:	53                   	push   ebx
c001b72b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b72f:	8b 1d 4c e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e74c
c001b735:	eb 25                	jmp    c001b75c <sysFormatDisk(regs*)+0x34>
c001b737:	83 ec 0c             	sub    esp,0xc
c001b73a:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b73d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b73f:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b742:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b745:	50                   	push   eax
c001b746:	ff 34 85 e0 eb 02 c0 	push   DWORD PTR [eax*4-0x3ffd1420]
c001b74d:	53                   	push   ebx
c001b74e:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b751:	83 c4 20             	add    esp,0x20
c001b754:	83 f8 08             	cmp    eax,0x8
c001b757:	75 12                	jne    c001b76b <sysFormatDisk(regs*)+0x43>
c001b759:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b75c:	85 db                	test   ebx,ebx
c001b75e:	75 d7                	jne    c001b737 <sysFormatDisk(regs*)+0xf>
c001b760:	59                   	pop    ecx
c001b761:	b8 03 00 00 00       	mov    eax,0x3
c001b766:	31 d2                	xor    edx,edx
c001b768:	5b                   	pop    ebx
c001b769:	5e                   	pop    esi
c001b76a:	c3                   	ret    
c001b76b:	85 c0                	test   eax,eax
c001b76d:	74 1b                	je     c001b78a <sysFormatDisk(regs*)+0x62>
c001b76f:	83 f8 09             	cmp    eax,0x9
c001b772:	74 0b                	je     c001b77f <sysFormatDisk(regs*)+0x57>
c001b774:	59                   	pop    ecx
c001b775:	b8 02 00 00 00       	mov    eax,0x2
c001b77a:	31 d2                	xor    edx,edx
c001b77c:	5b                   	pop    ebx
c001b77d:	5e                   	pop    esi
c001b77e:	c3                   	ret    
c001b77f:	59                   	pop    ecx
c001b780:	b8 01 00 00 00       	mov    eax,0x1
c001b785:	31 d2                	xor    edx,edx
c001b787:	5b                   	pop    ebx
c001b788:	5e                   	pop    esi
c001b789:	c3                   	ret    
c001b78a:	59                   	pop    ecx
c001b78b:	31 c0                	xor    eax,eax
c001b78d:	31 d2                	xor    edx,edx
c001b78f:	5b                   	pop    ebx
c001b790:	5e                   	pop    esi
c001b791:	c3                   	ret    

c001b792 <sysSetDiskVolumeLabel(regs*)>:
c001b792:	56                   	push   esi
c001b793:	53                   	push   ebx
c001b794:	53                   	push   ebx
c001b795:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b799:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b79c:	83 f8 19             	cmp    eax,0x19
c001b79f:	77 29                	ja     c001b7ca <sysSetDiskVolumeLabel(regs*)+0x38>
c001b7a1:	8b 0c 85 e0 eb 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1420]
c001b7a8:	85 c9                	test   ecx,ecx
c001b7aa:	74 1e                	je     c001b7ca <sysSetDiskVolumeLabel(regs*)+0x38>
c001b7ac:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b7af:	85 d2                	test   edx,edx
c001b7b1:	74 17                	je     c001b7ca <sysSetDiskVolumeLabel(regs*)+0x38>
c001b7b3:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b7b9:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b7bb:	52                   	push   edx
c001b7bc:	50                   	push   eax
c001b7bd:	51                   	push   ecx
c001b7be:	53                   	push   ebx
c001b7bf:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b7c2:	83 c4 10             	add    esp,0x10
c001b7c5:	99                   	cdq    
c001b7c6:	59                   	pop    ecx
c001b7c7:	5b                   	pop    ebx
c001b7c8:	5e                   	pop    esi
c001b7c9:	c3                   	ret    
c001b7ca:	59                   	pop    ecx
c001b7cb:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b7d0:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b7d5:	5b                   	pop    ebx
c001b7d6:	5e                   	pop    esi
c001b7d7:	c3                   	ret    

c001b7d8 <sysGetDiskVolumeLabel(regs*)>:
c001b7d8:	57                   	push   edi
c001b7d9:	56                   	push   esi
c001b7da:	53                   	push   ebx
c001b7db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7df:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b7e2:	83 fa 19             	cmp    edx,0x19
c001b7e5:	77 34                	ja     c001b81b <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7e7:	8b 0c 95 e0 eb 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1420]
c001b7ee:	85 c9                	test   ecx,ecx
c001b7f0:	74 29                	je     c001b81b <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7f2:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b7f5:	85 db                	test   ebx,ebx
c001b7f7:	74 22                	je     c001b81b <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7f9:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b7fc:	85 c0                	test   eax,eax
c001b7fe:	74 1b                	je     c001b81b <sysGetDiskVolumeLabel(regs*)+0x43>
c001b800:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b806:	83 ec 0c             	sub    esp,0xc
c001b809:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b80b:	50                   	push   eax
c001b80c:	53                   	push   ebx
c001b80d:	52                   	push   edx
c001b80e:	51                   	push   ecx
c001b80f:	56                   	push   esi
c001b810:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b813:	83 c4 20             	add    esp,0x20
c001b816:	99                   	cdq    
c001b817:	5b                   	pop    ebx
c001b818:	5e                   	pop    esi
c001b819:	5f                   	pop    edi
c001b81a:	c3                   	ret    
c001b81b:	5b                   	pop    ebx
c001b81c:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b821:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b826:	5e                   	pop    esi
c001b827:	5f                   	pop    edi
c001b828:	c3                   	ret    

c001b829 <sysShutdown(regs*)>:
c001b829:	83 ec 0c             	sub    esp,0xc
c001b82c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b830:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b833:	85 c0                	test   eax,eax
c001b835:	74 18                	je     c001b84f <sysShutdown(regs*)+0x26>
c001b837:	83 f8 01             	cmp    eax,0x1
c001b83a:	74 38                	je     c001b874 <sysShutdown(regs*)+0x4b>
c001b83c:	83 f8 02             	cmp    eax,0x2
c001b83f:	74 24                	je     c001b865 <sysShutdown(regs*)+0x3c>
c001b841:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b846:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b84b:	83 c4 0c             	add    esp,0xc
c001b84e:	c3                   	ret    
c001b84f:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c001b854:	8b 10                	mov    edx,DWORD PTR [eax]
c001b856:	6a 00                	push   0x0
c001b858:	6a 00                	push   0x0
c001b85a:	6a 00                	push   0x0
c001b85c:	50                   	push   eax
c001b85d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b860:	83 c4 10             	add    esp,0x10
c001b863:	eb dc                	jmp    c001b841 <sysShutdown(regs*)+0x18>
c001b865:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c001b86a:	8b 10                	mov    edx,DWORD PTR [eax]
c001b86c:	6a 00                	push   0x0
c001b86e:	6a 00                	push   0x0
c001b870:	6a 01                	push   0x1
c001b872:	eb e8                	jmp    c001b85c <sysShutdown(regs*)+0x33>
c001b874:	a1 80 0c 03 c0       	mov    eax,ds:0xc0030c80
c001b879:	85 c0                	test   eax,eax
c001b87b:	74 02                	je     c001b87f <sysShutdown(regs*)+0x56>
c001b87d:	ff d0                	call   eax
c001b87f:	31 c0                	xor    eax,eax
c001b881:	31 d2                	xor    edx,edx
c001b883:	83 c4 0c             	add    esp,0xc
c001b886:	c3                   	ret    

c001b887 <sysCallRealpath(regs*)>:
c001b887:	83 ec 0c             	sub    esp,0xc
c001b88a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b88e:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b891:	85 d2                	test   edx,edx
c001b893:	74 07                	je     c001b89c <sysCallRealpath(regs*)+0x15>
c001b895:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b898:	85 c0                	test   eax,eax
c001b89a:	75 0b                	jne    c001b8a7 <sysCallRealpath(regs*)+0x20>
c001b89c:	b8 01 00 00 00       	mov    eax,0x1
c001b8a1:	31 d2                	xor    edx,edx
c001b8a3:	83 c4 0c             	add    esp,0xc
c001b8a6:	c3                   	ret    
c001b8a7:	51                   	push   ecx
c001b8a8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b8ae:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b8b1:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b8b7:	51                   	push   ecx
c001b8b8:	52                   	push   edx
c001b8b9:	50                   	push   eax
c001b8ba:	e8 21 7a ff ff       	call   c00132e0 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b8bf:	83 c4 10             	add    esp,0x10
c001b8c2:	31 c0                	xor    eax,eax
c001b8c4:	31 d2                	xor    edx,edx
c001b8c6:	83 c4 0c             	add    esp,0xc
c001b8c9:	c3                   	ret    

c001b8ca <sysCallGetArgc(regs*)>:
c001b8ca:	83 ec 14             	sub    esp,0x14
c001b8cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8d2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8d5:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001b8db:	68 d0 bf 02 c0       	push   0xc002bfd0
c001b8e0:	e8 4c 76 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001b8e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8ea:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8ed:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b8f3:	83 c4 1c             	add    esp,0x1c
c001b8f6:	99                   	cdq    
c001b8f7:	c3                   	ret    

c001b8f8 <sysCallReadDir(regs*)>:
c001b8f8:	53                   	push   ebx
c001b8f9:	83 ec 18             	sub    esp,0x18
c001b8fc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b900:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b903:	83 f8 02             	cmp    eax,0x2
c001b906:	76 53                	jbe    c001b95b <sysCallReadDir(regs*)+0x63>
c001b908:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b90b:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b911:	77 4f                	ja     c001b962 <sysCallReadDir(regs*)+0x6a>
c001b913:	83 ec 0c             	sub    esp,0xc
c001b916:	50                   	push   eax
c001b917:	e8 25 61 ff ff       	call   c0011a41 <getFromFileDescriptor(int)>
c001b91c:	83 c4 10             	add    esp,0x10
c001b91f:	85 c0                	test   eax,eax
c001b921:	74 50                	je     c001b973 <sysCallReadDir(regs*)+0x7b>
c001b923:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b92b:	83 ec 0c             	sub    esp,0xc
c001b92e:	8b 10                	mov    edx,DWORD PTR [eax]
c001b930:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b934:	51                   	push   ecx
c001b935:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b938:	6a 00                	push   0x0
c001b93a:	68 10 01 00 00       	push   0x110
c001b93f:	50                   	push   eax
c001b940:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b943:	83 c4 20             	add    esp,0x20
c001b946:	85 c0                	test   eax,eax
c001b948:	74 38                	je     c001b982 <sysCallReadDir(regs*)+0x8a>
c001b94a:	83 f8 07             	cmp    eax,0x7
c001b94d:	74 0c                	je     c001b95b <sysCallReadDir(regs*)+0x63>
c001b94f:	b8 02 00 00 00       	mov    eax,0x2
c001b954:	31 d2                	xor    edx,edx
c001b956:	83 c4 18             	add    esp,0x18
c001b959:	5b                   	pop    ebx
c001b95a:	c3                   	ret    
c001b95b:	b8 01 00 00 00       	mov    eax,0x1
c001b960:	eb f2                	jmp    c001b954 <sysCallReadDir(regs*)+0x5c>
c001b962:	83 ec 08             	sub    esp,0x8
c001b965:	52                   	push   edx
c001b966:	68 e8 c0 02 c0       	push   0xc002c0e8
c001b96b:	e8 c1 75 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001b970:	83 c4 10             	add    esp,0x10
c001b973:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b978:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b97d:	83 c4 18             	add    esp,0x18
c001b980:	5b                   	pop    ebx
c001b981:	c3                   	ret    
c001b982:	31 c0                	xor    eax,eax
c001b984:	eb ce                	jmp    c001b954 <sysCallReadDir(regs*)+0x5c>

c001b986 <sysCallIsATTY(regs*)>:
c001b986:	83 ec 0c             	sub    esp,0xc
c001b989:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b98d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b990:	83 f8 02             	cmp    eax,0x2
c001b993:	76 07                	jbe    c001b99c <sysCallIsATTY(regs*)+0x16>
c001b995:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b99a:	75 26                	jne    c001b9c2 <sysCallIsATTY(regs*)+0x3c>
c001b99c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9a1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b9a4:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b9aa:	85 c0                	test   eax,eax
c001b9ac:	74 24                	je     c001b9d2 <sysCallIsATTY(regs*)+0x4c>
c001b9ae:	83 ec 0c             	sub    esp,0xc
c001b9b1:	8b 10                	mov    edx,DWORD PTR [eax]
c001b9b3:	50                   	push   eax
c001b9b4:	ff 12                	call   DWORD PTR [edx]
c001b9b6:	31 d2                	xor    edx,edx
c001b9b8:	0f b6 c0             	movzx  eax,al
c001b9bb:	83 c4 10             	add    esp,0x10
c001b9be:	83 c4 0c             	add    esp,0xc
c001b9c1:	c3                   	ret    
c001b9c2:	83 ec 0c             	sub    esp,0xc
c001b9c5:	50                   	push   eax
c001b9c6:	e8 76 60 ff ff       	call   c0011a41 <getFromFileDescriptor(int)>
c001b9cb:	83 c4 10             	add    esp,0x10
c001b9ce:	85 c0                	test   eax,eax
c001b9d0:	75 dc                	jne    c001b9ae <sysCallIsATTY(regs*)+0x28>
c001b9d2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b9d7:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b9dc:	83 c4 0c             	add    esp,0xc
c001b9df:	c3                   	ret    

c001b9e0 <sysCallSeek(regs*)>:
c001b9e0:	53                   	push   ebx
c001b9e1:	83 ec 08             	sub    esp,0x8
c001b9e4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b9e8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b9eb:	83 f8 02             	cmp    eax,0x2
c001b9ee:	76 4a                	jbe    c001ba3a <sysCallSeek(regs*)+0x5a>
c001b9f0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b9f5:	77 32                	ja     c001ba29 <sysCallSeek(regs*)+0x49>
c001b9f7:	83 ec 0c             	sub    esp,0xc
c001b9fa:	50                   	push   eax
c001b9fb:	e8 41 60 ff ff       	call   c0011a41 <getFromFileDescriptor(int)>
c001ba00:	83 c4 0c             	add    esp,0xc
c001ba03:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001ba06:	31 db                	xor    ebx,ebx
c001ba08:	53                   	push   ebx
c001ba09:	51                   	push   ecx
c001ba0a:	50                   	push   eax
c001ba0b:	e8 9c 7b ff ff       	call   c00135ac <File::seek(unsigned long long)>
c001ba10:	83 c4 10             	add    esp,0x10
c001ba13:	85 c0                	test   eax,eax
c001ba15:	0f 95 c0             	setne  al
c001ba18:	31 d2                	xor    edx,edx
c001ba1a:	0f b6 c0             	movzx  eax,al
c001ba1d:	f7 d8                	neg    eax
c001ba1f:	83 d2 00             	adc    edx,0x0
c001ba22:	83 c4 08             	add    esp,0x8
c001ba25:	f7 da                	neg    edx
c001ba27:	5b                   	pop    ebx
c001ba28:	c3                   	ret    
c001ba29:	83 ec 08             	sub    esp,0x8
c001ba2c:	50                   	push   eax
c001ba2d:	68 db bf 02 c0       	push   0xc002bfdb
c001ba32:	e8 fa 74 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001ba37:	83 c4 10             	add    esp,0x10
c001ba3a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba3f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba44:	83 c4 08             	add    esp,0x8
c001ba47:	5b                   	pop    ebx
c001ba48:	c3                   	ret    

c001ba49 <sysCallTell(regs*)>:
c001ba49:	53                   	push   ebx
c001ba4a:	83 ec 08             	sub    esp,0x8
c001ba4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba51:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba54:	83 f8 02             	cmp    eax,0x2
c001ba57:	76 5e                	jbe    c001bab7 <sysCallTell(regs*)+0x6e>
c001ba59:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba5e:	77 2d                	ja     c001ba8d <sysCallTell(regs*)+0x44>
c001ba60:	83 ec 0c             	sub    esp,0xc
c001ba63:	50                   	push   eax
c001ba64:	e8 d8 5f ff ff       	call   c0011a41 <getFromFileDescriptor(int)>
c001ba69:	5a                   	pop    edx
c001ba6a:	59                   	pop    ecx
c001ba6b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001ba6e:	50                   	push   eax
c001ba6f:	e8 8e 7b ff ff       	call   c0013602 <File::tell(unsigned long long*)>
c001ba74:	83 c4 10             	add    esp,0x10
c001ba77:	85 c0                	test   eax,eax
c001ba79:	0f 95 c0             	setne  al
c001ba7c:	31 d2                	xor    edx,edx
c001ba7e:	0f b6 c0             	movzx  eax,al
c001ba81:	f7 d8                	neg    eax
c001ba83:	83 d2 00             	adc    edx,0x0
c001ba86:	83 c4 08             	add    esp,0x8
c001ba89:	f7 da                	neg    edx
c001ba8b:	5b                   	pop    ebx
c001ba8c:	c3                   	ret    
c001ba8d:	83 ec 08             	sub    esp,0x8
c001ba90:	50                   	push   eax
c001ba91:	68 f5 bf 02 c0       	push   0xc002bff5
c001ba96:	e8 96 74 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001ba9b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001ba9e:	83 c4 10             	add    esp,0x10
c001baa1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001baa7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001baae:	31 d2                	xor    edx,edx
c001bab0:	31 c0                	xor    eax,eax
c001bab2:	83 c4 08             	add    esp,0x8
c001bab5:	5b                   	pop    ebx
c001bab6:	c3                   	ret    
c001bab7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001babc:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bac1:	83 c4 08             	add    esp,0x8
c001bac4:	5b                   	pop    ebx
c001bac5:	c3                   	ret    

c001bac6 <sysCallSize(regs*)>:
c001bac6:	53                   	push   ebx
c001bac7:	83 ec 18             	sub    esp,0x18
c001baca:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bace:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bad1:	83 f8 02             	cmp    eax,0x2
c001bad4:	76 64                	jbe    c001bb3a <sysCallSize(regs*)+0x74>
c001bad6:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001badb:	77 33                	ja     c001bb10 <sysCallSize(regs*)+0x4a>
c001badd:	83 ec 0c             	sub    esp,0xc
c001bae0:	50                   	push   eax
c001bae1:	e8 5b 5f ff ff       	call   c0011a41 <getFromFileDescriptor(int)>
c001bae6:	83 c4 0c             	add    esp,0xc
c001bae9:	8d 54 24 13          	lea    edx,[esp+0x13]
c001baed:	52                   	push   edx
c001baee:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001baf1:	50                   	push   eax
c001baf2:	e8 a3 7c ff ff       	call   c001379a <File::stat(unsigned long long*, bool*)>
c001baf7:	83 c4 10             	add    esp,0x10
c001bafa:	85 c0                	test   eax,eax
c001bafc:	0f 95 c0             	setne  al
c001baff:	31 d2                	xor    edx,edx
c001bb01:	0f b6 c0             	movzx  eax,al
c001bb04:	f7 d8                	neg    eax
c001bb06:	83 d2 00             	adc    edx,0x0
c001bb09:	83 c4 18             	add    esp,0x18
c001bb0c:	f7 da                	neg    edx
c001bb0e:	5b                   	pop    ebx
c001bb0f:	c3                   	ret    
c001bb10:	83 ec 08             	sub    esp,0x8
c001bb13:	50                   	push   eax
c001bb14:	68 0f c0 02 c0       	push   0xc002c00f
c001bb19:	e8 13 74 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001bb1e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bb21:	83 c4 10             	add    esp,0x10
c001bb24:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb2a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb31:	31 d2                	xor    edx,edx
c001bb33:	31 c0                	xor    eax,eax
c001bb35:	83 c4 18             	add    esp,0x18
c001bb38:	5b                   	pop    ebx
c001bb39:	c3                   	ret    
c001bb3a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb3f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb44:	83 c4 18             	add    esp,0x18
c001bb47:	5b                   	pop    ebx
c001bb48:	c3                   	ret    

c001bb49 <sysCallSizeFromFilename(regs*)>:
c001bb49:	57                   	push   edi
c001bb4a:	56                   	push   esi
c001bb4b:	53                   	push   ebx
c001bb4c:	83 ec 20             	sub    esp,0x20
c001bb4f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bb53:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001bb56:	83 fb 02             	cmp    ebx,0x2
c001bb59:	0f 86 99 00 00 00    	jbe    c001bbf8 <sysCallSizeFromFilename(regs*)+0xaf>
c001bb5f:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001bb65:	77 65                	ja     c001bbcc <sysCallSizeFromFilename(regs*)+0x83>
c001bb67:	83 ec 0c             	sub    esp,0xc
c001bb6a:	68 14 01 00 00       	push   0x114
c001bb6f:	e8 cc 3c ff ff       	call   c000f840 <malloc>
c001bb74:	83 c4 0c             	add    esp,0xc
c001bb77:	89 c6                	mov    esi,eax
c001bb79:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb7e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb81:	53                   	push   ebx
c001bb82:	56                   	push   esi
c001bb83:	e8 02 79 ff ff       	call   c001348a <File::File(char const*, Process*)>
c001bb88:	83 c4 0c             	add    esp,0xc
c001bb8b:	8d 44 24 23          	lea    eax,[esp+0x23]
c001bb8f:	50                   	push   eax
c001bb90:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001bb93:	56                   	push   esi
c001bb94:	e8 01 7c ff ff       	call   c001379a <File::stat(unsigned long long*, bool*)>
c001bb99:	83 c4 10             	add    esp,0x10
c001bb9c:	85 f6                	test   esi,esi
c001bb9e:	74 14                	je     c001bbb4 <sysCallSizeFromFilename(regs*)+0x6b>
c001bba0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bba4:	8b 16                	mov    edx,DWORD PTR [esi]
c001bba6:	83 ec 0c             	sub    esp,0xc
c001bba9:	56                   	push   esi
c001bbaa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bbad:	83 c4 10             	add    esp,0x10
c001bbb0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bbb4:	85 c0                	test   eax,eax
c001bbb6:	0f 95 c0             	setne  al
c001bbb9:	31 d2                	xor    edx,edx
c001bbbb:	0f b6 c0             	movzx  eax,al
c001bbbe:	f7 d8                	neg    eax
c001bbc0:	83 d2 00             	adc    edx,0x0
c001bbc3:	83 c4 20             	add    esp,0x20
c001bbc6:	f7 da                	neg    edx
c001bbc8:	5b                   	pop    ebx
c001bbc9:	5e                   	pop    esi
c001bbca:	5f                   	pop    edi
c001bbcb:	c3                   	ret    
c001bbcc:	83 ec 08             	sub    esp,0x8
c001bbcf:	53                   	push   ebx
c001bbd0:	68 0f c0 02 c0       	push   0xc002c00f
c001bbd5:	e8 57 73 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001bbda:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bbdd:	83 c4 10             	add    esp,0x10
c001bbe0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bbe6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bbed:	31 d2                	xor    edx,edx
c001bbef:	83 c4 20             	add    esp,0x20
c001bbf2:	31 c0                	xor    eax,eax
c001bbf4:	5b                   	pop    ebx
c001bbf5:	5e                   	pop    esi
c001bbf6:	5f                   	pop    edi
c001bbf7:	c3                   	ret    
c001bbf8:	83 c4 20             	add    esp,0x20
c001bbfb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc00:	5b                   	pop    ebx
c001bc01:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc06:	5e                   	pop    esi
c001bc07:	5f                   	pop    edi
c001bc08:	c3                   	ret    

c001bc09 <sysCallClose(regs*)>:
c001bc09:	53                   	push   ebx
c001bc0a:	83 ec 08             	sub    esp,0x8
c001bc0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc11:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bc14:	83 f8 02             	cmp    eax,0x2
c001bc17:	76 50                	jbe    c001bc69 <sysCallClose(regs*)+0x60>
c001bc19:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bc1e:	74 58                	je     c001bc78 <sysCallClose(regs*)+0x6f>
c001bc20:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bc25:	74 60                	je     c001bc87 <sysCallClose(regs*)+0x7e>
c001bc27:	77 2f                	ja     c001bc58 <sysCallClose(regs*)+0x4f>
c001bc29:	83 ec 0c             	sub    esp,0xc
c001bc2c:	50                   	push   eax
c001bc2d:	e8 0f 5e ff ff       	call   c0011a41 <getFromFileDescriptor(int)>
c001bc32:	89 c3                	mov    ebx,eax
c001bc34:	89 04 24             	mov    DWORD PTR [esp],eax
c001bc37:	e8 10 79 ff ff       	call   c001354c <File::close()>
c001bc3c:	83 c4 10             	add    esp,0x10
c001bc3f:	85 db                	test   ebx,ebx
c001bc41:	74 0c                	je     c001bc4f <sysCallClose(regs*)+0x46>
c001bc43:	83 ec 0c             	sub    esp,0xc
c001bc46:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc48:	53                   	push   ebx
c001bc49:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bc4c:	83 c4 10             	add    esp,0x10
c001bc4f:	31 c0                	xor    eax,eax
c001bc51:	31 d2                	xor    edx,edx
c001bc53:	83 c4 08             	add    esp,0x8
c001bc56:	5b                   	pop    ebx
c001bc57:	c3                   	ret    
c001bc58:	83 ec 08             	sub    esp,0x8
c001bc5b:	50                   	push   eax
c001bc5c:	68 0c c1 02 c0       	push   0xc002c10c
c001bc61:	e8 cb 72 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001bc66:	83 c4 10             	add    esp,0x10
c001bc69:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc6e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc73:	83 c4 08             	add    esp,0x8
c001bc76:	5b                   	pop    ebx
c001bc77:	c3                   	ret    
c001bc78:	83 ec 0c             	sub    esp,0xc
c001bc7b:	68 2a c0 02 c0       	push   0xc002c02a
c001bc80:	e8 ac 72 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001bc85:	eb c5                	jmp    c001bc4c <sysCallClose(regs*)+0x43>
c001bc87:	83 ec 0c             	sub    esp,0xc
c001bc8a:	68 38 c0 02 c0       	push   0xc002c038
c001bc8f:	eb ef                	jmp    c001bc80 <sysCallClose(regs*)+0x77>

c001bc91 <sysCallOpenDir(regs*)>:
c001bc91:	56                   	push   esi
c001bc92:	53                   	push   ebx
c001bc93:	53                   	push   ebx
c001bc94:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bc98:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bc9b:	85 f6                	test   esi,esi
c001bc9d:	74 59                	je     c001bcf8 <sysCallOpenDir(regs*)+0x67>
c001bc9f:	83 ec 0c             	sub    esp,0xc
c001bca2:	68 14 01 00 00       	push   0x114
c001bca7:	e8 94 3b ff ff       	call   c000f840 <malloc>
c001bcac:	83 c4 0c             	add    esp,0xc
c001bcaf:	89 c6                	mov    esi,eax
c001bcb1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bcb6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bcb9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bcbc:	56                   	push   esi
c001bcbd:	e8 74 7c ff ff       	call   c0013936 <Directory::Directory(char const*, Process*)>
c001bcc2:	83 c4 10             	add    esp,0x10
c001bcc5:	85 f6                	test   esi,esi
c001bcc7:	74 2f                	je     c001bcf8 <sysCallOpenDir(regs*)+0x67>
c001bcc9:	83 ec 0c             	sub    esp,0xc
c001bccc:	56                   	push   esi
c001bccd:	e8 c8 7c ff ff       	call   c001399a <Directory::open()>
c001bcd2:	83 c4 10             	add    esp,0x10
c001bcd5:	85 c0                	test   eax,eax
c001bcd7:	75 1f                	jne    c001bcf8 <sysCallOpenDir(regs*)+0x67>
c001bcd9:	83 ec 0c             	sub    esp,0xc
c001bcdc:	56                   	push   esi
c001bcdd:	e8 6a 5a ff ff       	call   c001174c <UnixFile::getFileDescriptor()>
c001bce2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bce5:	83 c4 10             	add    esp,0x10
c001bce8:	89 02                	mov    DWORD PTR [edx],eax
c001bcea:	c1 f8 1f             	sar    eax,0x1f
c001bced:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bcf0:	31 c0                	xor    eax,eax
c001bcf2:	59                   	pop    ecx
c001bcf3:	31 d2                	xor    edx,edx
c001bcf5:	5b                   	pop    ebx
c001bcf6:	5e                   	pop    esi
c001bcf7:	c3                   	ret    
c001bcf8:	59                   	pop    ecx
c001bcf9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bcfe:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd03:	5b                   	pop    ebx
c001bd04:	5e                   	pop    esi
c001bd05:	c3                   	ret    

c001bd06 <sysCallCloseDir(regs*)>:
c001bd06:	53                   	push   ebx
c001bd07:	83 ec 08             	sub    esp,0x8
c001bd0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd0e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bd11:	83 f8 02             	cmp    eax,0x2
c001bd14:	76 47                	jbe    c001bd5d <sysCallCloseDir(regs*)+0x57>
c001bd16:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bd1b:	77 2f                	ja     c001bd4c <sysCallCloseDir(regs*)+0x46>
c001bd1d:	83 ec 0c             	sub    esp,0xc
c001bd20:	50                   	push   eax
c001bd21:	e8 1b 5d ff ff       	call   c0011a41 <getFromFileDescriptor(int)>
c001bd26:	89 c3                	mov    ebx,eax
c001bd28:	89 04 24             	mov    DWORD PTR [esp],eax
c001bd2b:	e8 c6 7c ff ff       	call   c00139f6 <Directory::close()>
c001bd30:	83 c4 10             	add    esp,0x10
c001bd33:	85 db                	test   ebx,ebx
c001bd35:	74 0c                	je     c001bd43 <sysCallCloseDir(regs*)+0x3d>
c001bd37:	83 ec 0c             	sub    esp,0xc
c001bd3a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd3c:	53                   	push   ebx
c001bd3d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bd40:	83 c4 10             	add    esp,0x10
c001bd43:	31 c0                	xor    eax,eax
c001bd45:	31 d2                	xor    edx,edx
c001bd47:	83 c4 08             	add    esp,0x8
c001bd4a:	5b                   	pop    ebx
c001bd4b:	c3                   	ret    
c001bd4c:	83 ec 08             	sub    esp,0x8
c001bd4f:	50                   	push   eax
c001bd50:	68 34 c1 02 c0       	push   0xc002c134
c001bd55:	e8 d7 71 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001bd5a:	83 c4 10             	add    esp,0x10
c001bd5d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd62:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd67:	83 c4 08             	add    esp,0x8
c001bd6a:	5b                   	pop    ebx
c001bd6b:	c3                   	ret    

c001bd6c <sysCallMakeDir(regs*)>:
c001bd6c:	56                   	push   esi
c001bd6d:	53                   	push   ebx
c001bd6e:	83 ec 10             	sub    esp,0x10
c001bd71:	68 14 01 00 00       	push   0x114
c001bd76:	e8 c5 3a ff ff       	call   c000f840 <malloc>
c001bd7b:	83 c4 0c             	add    esp,0xc
c001bd7e:	89 c3                	mov    ebx,eax
c001bd80:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd85:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd88:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bd8c:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bd8f:	53                   	push   ebx
c001bd90:	e8 a1 7b ff ff       	call   c0013936 <Directory::Directory(char const*, Process*)>
c001bd95:	83 c4 10             	add    esp,0x10
c001bd98:	85 db                	test   ebx,ebx
c001bd9a:	74 32                	je     c001bdce <sysCallMakeDir(regs*)+0x62>
c001bd9c:	83 ec 0c             	sub    esp,0xc
c001bd9f:	53                   	push   ebx
c001bda0:	e8 d5 7d ff ff       	call   c0013b7a <Directory::create()>
c001bda5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bda8:	89 c6                	mov    esi,eax
c001bdaa:	e8 47 7c ff ff       	call   c00139f6 <Directory::close()>
c001bdaf:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bdb1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bdb4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bdb7:	83 c4 10             	add    esp,0x10
c001bdba:	31 c0                	xor    eax,eax
c001bdbc:	59                   	pop    ecx
c001bdbd:	85 f6                	test   esi,esi
c001bdbf:	5b                   	pop    ebx
c001bdc0:	0f 95 c0             	setne  al
c001bdc3:	5e                   	pop    esi
c001bdc4:	31 d2                	xor    edx,edx
c001bdc6:	f7 d8                	neg    eax
c001bdc8:	83 d2 00             	adc    edx,0x0
c001bdcb:	f7 da                	neg    edx
c001bdcd:	c3                   	ret    
c001bdce:	59                   	pop    ecx
c001bdcf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bdd4:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bdd9:	5b                   	pop    ebx
c001bdda:	5e                   	pop    esi
c001bddb:	c3                   	ret    

c001bddc <sysCallWait(regs*)>:
c001bddc:	83 ec 10             	sub    esp,0x10
c001bddf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bde3:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001bde6:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bde9:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001bdec:	e8 ce 24 00 00       	call   c001e2bf <waitTask(int, int*, int)>
c001bdf1:	83 c4 1c             	add    esp,0x1c
c001bdf4:	99                   	cdq    
c001bdf5:	c3                   	ret    

c001bdf6 <sysCallNotImpl(regs*)>:
c001bdf6:	83 ec 18             	sub    esp,0x18
c001bdf9:	68 46 c0 02 c0       	push   0xc002c046
c001bdfe:	e8 e0 e7 ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c001be03:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be08:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be0d:	83 c4 1c             	add    esp,0x1c
c001be10:	c3                   	ret    

c001be11 <sysPanic(regs*)>:
c001be11:	83 ec 18             	sub    esp,0x18
c001be14:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001be18:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001be1b:	e8 c3 e7 ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c001be20:	c7 04 24 60 c0 02 c0 	mov    DWORD PTR [esp],0xc002c060
c001be27:	e8 b7 e7 ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c001be2c:	b8 01 00 00 00       	mov    eax,0x1
c001be31:	31 d2                	xor    edx,edx
c001be33:	83 c4 1c             	add    esp,0x1c
c001be36:	c3                   	ret    

c001be37 <sysCallRmdir(regs*)>:
c001be37:	56                   	push   esi
c001be38:	53                   	push   ebx
c001be39:	83 ec 20             	sub    esp,0x20
c001be3c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001be40:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001be43:	68 14 01 00 00       	push   0x114
c001be48:	e8 f3 39 ff ff       	call   c000f840 <malloc>
c001be4d:	83 c4 0c             	add    esp,0xc
c001be50:	89 c3                	mov    ebx,eax
c001be52:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be57:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be5a:	56                   	push   esi
c001be5b:	53                   	push   ebx
c001be5c:	e8 29 76 ff ff       	call   c001348a <File::File(char const*, Process*)>
c001be61:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be64:	e8 fd 77 ff ff       	call   c0013666 <File::unlink()>
c001be69:	83 c4 10             	add    esp,0x10
c001be6c:	85 db                	test   ebx,ebx
c001be6e:	74 14                	je     c001be84 <sysCallRmdir(regs*)+0x4d>
c001be70:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be74:	8b 13                	mov    edx,DWORD PTR [ebx]
c001be76:	83 ec 0c             	sub    esp,0xc
c001be79:	53                   	push   ebx
c001be7a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001be7d:	83 c4 10             	add    esp,0x10
c001be80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be84:	85 c0                	test   eax,eax
c001be86:	0f 95 c0             	setne  al
c001be89:	31 d2                	xor    edx,edx
c001be8b:	0f b6 c0             	movzx  eax,al
c001be8e:	f7 d8                	neg    eax
c001be90:	83 d2 00             	adc    edx,0x0
c001be93:	83 c4 14             	add    esp,0x14
c001be96:	f7 da                	neg    edx
c001be98:	5b                   	pop    ebx
c001be99:	5e                   	pop    esi
c001be9a:	c3                   	ret    

c001be9b <sysCallUnlink(regs*)>:
c001be9b:	56                   	push   esi
c001be9c:	53                   	push   ebx
c001be9d:	83 ec 20             	sub    esp,0x20
c001bea0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bea4:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bea7:	68 14 01 00 00       	push   0x114
c001beac:	e8 8f 39 ff ff       	call   c000f840 <malloc>
c001beb1:	83 c4 0c             	add    esp,0xc
c001beb4:	89 c3                	mov    ebx,eax
c001beb6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bebb:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bebe:	56                   	push   esi
c001bebf:	53                   	push   ebx
c001bec0:	e8 c5 75 ff ff       	call   c001348a <File::File(char const*, Process*)>
c001bec5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bec8:	e8 99 77 ff ff       	call   c0013666 <File::unlink()>
c001becd:	83 c4 10             	add    esp,0x10
c001bed0:	85 db                	test   ebx,ebx
c001bed2:	74 14                	je     c001bee8 <sysCallUnlink(regs*)+0x4d>
c001bed4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bed8:	8b 13                	mov    edx,DWORD PTR [ebx]
c001beda:	83 ec 0c             	sub    esp,0xc
c001bedd:	53                   	push   ebx
c001bede:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bee1:	83 c4 10             	add    esp,0x10
c001bee4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bee8:	85 c0                	test   eax,eax
c001beea:	0f 95 c0             	setne  al
c001beed:	31 d2                	xor    edx,edx
c001beef:	0f b6 c0             	movzx  eax,al
c001bef2:	f7 d8                	neg    eax
c001bef4:	83 d2 00             	adc    edx,0x0
c001bef7:	83 c4 14             	add    esp,0x14
c001befa:	f7 da                	neg    edx
c001befc:	5b                   	pop    ebx
c001befd:	5e                   	pop    esi
c001befe:	c3                   	ret    

c001beff <sysCallGetArgv(regs*)>:
c001beff:	83 ec 0c             	sub    esp,0xc
c001bf02:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bf06:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bf09:	85 c0                	test   eax,eax
c001bf0b:	78 2b                	js     c001bf38 <sysCallGetArgv(regs*)+0x39>
c001bf0d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bf13:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bf16:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001bf1c:	7d 1a                	jge    c001bf38 <sysCallGetArgv(regs*)+0x39>
c001bf1e:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001bf25:	85 c0                	test   eax,eax
c001bf27:	74 17                	je     c001bf40 <sysCallGetArgv(regs*)+0x41>
c001bf29:	83 ec 08             	sub    esp,0x8
c001bf2c:	50                   	push   eax
c001bf2d:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bf30:	e8 ff 48 fe ff       	call   c0000834 <strcpy>
c001bf35:	83 c4 10             	add    esp,0x10
c001bf38:	31 c0                	xor    eax,eax
c001bf3a:	31 d2                	xor    edx,edx
c001bf3c:	83 c4 0c             	add    esp,0xc
c001bf3f:	c3                   	ret    
c001bf40:	b8 01 00 00 00       	mov    eax,0x1
c001bf45:	31 d2                	xor    edx,edx
c001bf47:	83 c4 0c             	add    esp,0xc
c001bf4a:	c3                   	ret    

c001bf4b <sysCallTTYName(regs*)>:
c001bf4b:	56                   	push   esi
c001bf4c:	53                   	push   ebx
c001bf4d:	53                   	push   ebx
c001bf4e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bf52:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001bf55:	85 c0                	test   eax,eax
c001bf57:	74 5f                	je     c001bfb8 <sysCallTTYName(regs*)+0x6d>
c001bf59:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bf5c:	83 f8 02             	cmp    eax,0x2
c001bf5f:	77 3e                	ja     c001bf9f <sysCallTTYName(regs*)+0x54>
c001bf61:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf66:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bf69:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001bf6f:	85 db                	test   ebx,ebx
c001bf71:	74 45                	je     c001bfb8 <sysCallTTYName(regs*)+0x6d>
c001bf73:	83 ec 0c             	sub    esp,0xc
c001bf76:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bf78:	53                   	push   ebx
c001bf79:	ff 10                	call   DWORD PTR [eax]
c001bf7b:	83 c4 10             	add    esp,0x10
c001bf7e:	84 c0                	test   al,al
c001bf80:	74 41                	je     c001bfc3 <sysCallTTYName(regs*)+0x78>
c001bf82:	83 ec 08             	sub    esp,0x8
c001bf85:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001bf8b:	53                   	push   ebx
c001bf8c:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bf8f:	e8 a0 48 fe ff       	call   c0000834 <strcpy>
c001bf94:	83 c4 10             	add    esp,0x10
c001bf97:	31 c0                	xor    eax,eax
c001bf99:	59                   	pop    ecx
c001bf9a:	31 d2                	xor    edx,edx
c001bf9c:	5b                   	pop    ebx
c001bf9d:	5e                   	pop    esi
c001bf9e:	c3                   	ret    
c001bf9f:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bfa4:	74 bb                	je     c001bf61 <sysCallTTYName(regs*)+0x16>
c001bfa6:	83 ec 0c             	sub    esp,0xc
c001bfa9:	50                   	push   eax
c001bfaa:	e8 92 5a ff ff       	call   c0011a41 <getFromFileDescriptor(int)>
c001bfaf:	83 c4 10             	add    esp,0x10
c001bfb2:	89 c3                	mov    ebx,eax
c001bfb4:	85 db                	test   ebx,ebx
c001bfb6:	75 bb                	jne    c001bf73 <sysCallTTYName(regs*)+0x28>
c001bfb8:	59                   	pop    ecx
c001bfb9:	b8 01 00 00 00       	mov    eax,0x1
c001bfbe:	31 d2                	xor    edx,edx
c001bfc0:	5b                   	pop    ebx
c001bfc1:	5e                   	pop    esi
c001bfc2:	c3                   	ret    
c001bfc3:	59                   	pop    ecx
c001bfc4:	b8 02 00 00 00       	mov    eax,0x2
c001bfc9:	31 d2                	xor    edx,edx
c001bfcb:	5b                   	pop    ebx
c001bfcc:	5e                   	pop    esi
c001bfcd:	c3                   	ret    

c001bfce <sysCallUSleep(regs*)>:
c001bfce:	83 ec 14             	sub    esp,0x14
c001bfd1:	b8 e8 03 00 00       	mov    eax,0x3e8
c001bfd6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bfda:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001bfe1:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001bfe4:	01 ca                	add    edx,ecx
c001bfe6:	52                   	push   edx
c001bfe7:	50                   	push   eax
c001bfe8:	e8 6b 23 00 00       	call   c001e358 <nanoSleep(unsigned long long)>
c001bfed:	31 c0                	xor    eax,eax
c001bfef:	31 d2                	xor    edx,edx
c001bff1:	83 c4 1c             	add    esp,0x1c
c001bff4:	c3                   	ret    

c001bff5 <sysCallSpawn(regs*)>:
c001bff5:	56                   	push   esi
c001bff6:	53                   	push   ebx
c001bff7:	53                   	push   ebx
c001bff8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bffc:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001bfff:	85 f6                	test   esi,esi
c001c001:	75 08                	jne    c001c00b <sysCallSpawn(regs*)+0x16>
c001c003:	59                   	pop    ecx
c001c004:	31 c0                	xor    eax,eax
c001c006:	31 d2                	xor    edx,edx
c001c008:	5b                   	pop    ebx
c001c009:	5e                   	pop    esi
c001c00a:	c3                   	ret    
c001c00b:	83 ec 0c             	sub    esp,0xc
c001c00e:	68 3f 07 00 00       	push   0x73f
c001c013:	e8 28 38 ff ff       	call   c000f840 <malloc>
c001c018:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001c01b:	89 c6                	mov    esi,eax
c001c01d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c022:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c025:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c028:	56                   	push   esi
c001c029:	e8 2a 1a 00 00       	call   c001da58 <Process::Process(char const*, Process*, char**)>
c001c02e:	83 c4 20             	add    esp,0x20
c001c031:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c038:	75 c9                	jne    c001c003 <sysCallSpawn(regs*)+0xe>
c001c03a:	83 ec 0c             	sub    esp,0xc
c001c03d:	56                   	push   esi
c001c03e:	e8 db 1f 00 00       	call   c001e01e <Process::createUserThread()>
c001c043:	8b 06                	mov    eax,DWORD PTR [esi]
c001c045:	83 c4 10             	add    esp,0x10
c001c048:	99                   	cdq    
c001c049:	59                   	pop    ecx
c001c04a:	5b                   	pop    ebx
c001c04b:	5e                   	pop    esi
c001c04c:	c3                   	ret    

c001c04d <sysCallGetEnv(regs*)>:
c001c04d:	55                   	push   ebp
c001c04e:	57                   	push   edi
c001c04f:	56                   	push   esi
c001c050:	53                   	push   ebx
c001c051:	83 ec 28             	sub    esp,0x28
c001c054:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c058:	68 6f c0 02 c0       	push   0xc002c06f
c001c05d:	e8 cf 6e ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001c062:	5f                   	pop    edi
c001c063:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c066:	5d                   	pop    ebp
c001c067:	53                   	push   ebx
c001c068:	68 9e c3 02 c0       	push   0xc002c39e
c001c06d:	e8 bf 6e ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001c072:	58                   	pop    eax
c001c073:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c076:	5a                   	pop    edx
c001c077:	57                   	push   edi
c001c078:	68 78 c0 02 c0       	push   0xc002c078
c001c07d:	e8 af 6e ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001c082:	59                   	pop    ecx
c001c083:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c088:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c08b:	e8 6f e4 ff ff       	call   c001a4ff <Krnl::getProcessTotalEnvCount(Process*)>
c001c090:	5a                   	pop    edx
c001c091:	89 c5                	mov    ebp,eax
c001c093:	59                   	pop    ecx
c001c094:	50                   	push   eax
c001c095:	68 82 c0 02 c0       	push   0xc002c082
c001c09a:	e8 92 6e ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001c09f:	83 c4 10             	add    esp,0x10
c001c0a2:	39 ef                	cmp    edi,ebp
c001c0a4:	7c 15                	jl     c001c0bb <sysCallGetEnv(regs*)+0x6e>
c001c0a6:	85 db                	test   ebx,ebx
c001c0a8:	75 0c                	jne    c001c0b6 <sysCallGetEnv(regs*)+0x69>
c001c0aa:	83 c4 1c             	add    esp,0x1c
c001c0ad:	31 c0                	xor    eax,eax
c001c0af:	5b                   	pop    ebx
c001c0b0:	31 d2                	xor    edx,edx
c001c0b2:	5e                   	pop    esi
c001c0b3:	5f                   	pop    edi
c001c0b4:	5d                   	pop    ebp
c001c0b5:	c3                   	ret    
c001c0b6:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c0b9:	eb ef                	jmp    c001c0aa <sysCallGetEnv(regs*)+0x5d>
c001c0bb:	83 ec 0c             	sub    esp,0xc
c001c0be:	68 8e c0 02 c0       	push   0xc002c08e
c001c0c3:	e8 69 6e ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001c0c8:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c0cc:	83 c4 0c             	add    esp,0xc
c001c0cf:	57                   	push   edi
c001c0d0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c0d6:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c0d9:	50                   	push   eax
c001c0da:	e8 40 e4 ff ff       	call   c001a51f <Krnl::getProcessEnvPair(Process*, int)>
c001c0df:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c0e3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c0e7:	68 1d c4 02 c0       	push   0xc002c41d
c001c0ec:	e8 40 6e ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001c0f1:	83 c4 10             	add    esp,0x10
c001c0f4:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c0f7:	85 f6                	test   esi,esi
c001c0f9:	75 47                	jne    c001c142 <sysCallGetEnv(regs*)+0xf5>
c001c0fb:	83 ec 0c             	sub    esp,0xc
c001c0fe:	55                   	push   ebp
c001c0ff:	e8 90 46 fe ff       	call   c0000794 <strlen>
c001c104:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c107:	89 c3                	mov    ebx,eax
c001c109:	e8 86 46 fe ff       	call   c0000794 <strlen>
c001c10e:	5a                   	pop    edx
c001c10f:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c113:	59                   	pop    ecx
c001c114:	50                   	push   eax
c001c115:	68 91 c0 02 c0       	push   0xc002c091
c001c11a:	e8 12 6e ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001c11f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c122:	e8 6d 46 fe ff       	call   c0000794 <strlen>
c001c127:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c12a:	89 c3                	mov    ebx,eax
c001c12c:	e8 63 46 fe ff       	call   c0000794 <strlen>
c001c131:	83 c4 10             	add    esp,0x10
c001c134:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c138:	83 c4 1c             	add    esp,0x1c
c001c13b:	31 d2                	xor    edx,edx
c001c13d:	5b                   	pop    ebx
c001c13e:	5e                   	pop    esi
c001c13f:	5f                   	pop    edi
c001c140:	5d                   	pop    ebp
c001c141:	c3                   	ret    
c001c142:	83 ec 0c             	sub    esp,0xc
c001c145:	68 37 c4 02 c0       	push   0xc002c437
c001c14a:	e8 e2 6d ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001c14f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c152:	58                   	pop    eax
c001c153:	5a                   	pop    edx
c001c154:	55                   	push   ebp
c001c155:	53                   	push   ebx
c001c156:	e8 d9 46 fe ff       	call   c0000834 <strcpy>
c001c15b:	59                   	pop    ecx
c001c15c:	5e                   	pop    esi
c001c15d:	68 9b c0 02 c0       	push   0xc002c09b
c001c162:	53                   	push   ebx
c001c163:	e8 0c 48 fe ff       	call   c0000974 <strcat>
c001c168:	5d                   	pop    ebp
c001c169:	58                   	pop    eax
c001c16a:	57                   	push   edi
c001c16b:	53                   	push   ebx
c001c16c:	e8 03 48 fe ff       	call   c0000974 <strcat>
c001c171:	c7 04 24 51 c4 02 c0 	mov    DWORD PTR [esp],0xc002c451
c001c178:	e8 b4 6d ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001c17d:	83 c4 10             	add    esp,0x10
c001c180:	e9 25 ff ff ff       	jmp    c001c0aa <sysCallGetEnv(regs*)+0x5d>

c001c185 <sysAppSettings(regs*)>:
c001c185:	53                   	push   ebx
c001c186:	83 ec 08             	sub    esp,0x8
c001c189:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c18d:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001c190:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001c196:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c19b:	66 3d c0 09          	cmp    ax,0x9c0
c001c19f:	75 2f                	jne    c001c1d0 <sysAppSettings(regs*)+0x4b>
c001c1a1:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001c1a7:	83 e0 1f             	and    eax,0x1f
c001c1aa:	3c 01                	cmp    al,0x1
c001c1ac:	74 2e                	je     c001c1dc <sysAppSettings(regs*)+0x57>
c001c1ae:	3c 07                	cmp    al,0x7
c001c1b0:	0f 84 bd 00 00 00    	je     c001c273 <sysAppSettings(regs*)+0xee>
c001c1b6:	84 c0                	test   al,al
c001c1b8:	0f 84 dc 00 00 00    	je     c001c29a <sysAppSettings(regs*)+0x115>
c001c1be:	3c 08                	cmp    al,0x8
c001c1c0:	74 6d                	je     c001c22f <sysAppSettings(regs*)+0xaa>
c001c1c2:	0f b6 c0             	movzx  eax,al
c001c1c5:	83 c4 08             	add    esp,0x8
c001c1c8:	05 e8 03 00 00       	add    eax,0x3e8
c001c1cd:	5b                   	pop    ebx
c001c1ce:	99                   	cdq    
c001c1cf:	c3                   	ret    
c001c1d0:	b8 01 00 00 00       	mov    eax,0x1
c001c1d5:	31 d2                	xor    edx,edx
c001c1d7:	83 c4 08             	add    esp,0x8
c001c1da:	5b                   	pop    ebx
c001c1db:	c3                   	ret    
c001c1dc:	51                   	push   ecx
c001c1dd:	68 00 01 00 00       	push   0x100
c001c1e2:	6a 00                	push   0x0
c001c1e4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1e9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1ec:	83 c0 0c             	add    eax,0xc
c001c1ef:	50                   	push   eax
c001c1f0:	e8 83 45 fe ff       	call   c0000778 <memset>
c001c1f5:	83 c4 0c             	add    esp,0xc
c001c1f8:	68 ff 00 00 00       	push   0xff
c001c1fd:	53                   	push   ebx
c001c1fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c203:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c206:	83 c0 0c             	add    eax,0xc
c001c209:	50                   	push   eax
c001c20a:	e8 35 45 fe ff       	call   c0000744 <memcpy>
c001c20f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c214:	5b                   	pop    ebx
c001c215:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c218:	5a                   	pop    edx
c001c219:	8d 50 0c             	lea    edx,[eax+0xc]
c001c21c:	52                   	push   edx
c001c21d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c223:	e8 94 49 ff ff       	call   c0010bbc <VgaText::setTitle(char*)>
c001c228:	83 c4 10             	add    esp,0x10
c001c22b:	31 c0                	xor    eax,eax
c001c22d:	eb a6                	jmp    c001c1d5 <sysAppSettings(regs*)+0x50>
c001c22f:	83 ec 08             	sub    esp,0x8
c001c232:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c238:	83 e0 0f             	and    eax,0xf
c001c23b:	50                   	push   eax
c001c23c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c241:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c244:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c24a:	e8 5d 49 ff ff       	call   c0010bac <VgaText::setTitleColour(VgaColour)>
c001c24f:	58                   	pop    eax
c001c250:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c256:	5a                   	pop    edx
c001c257:	c1 e8 04             	shr    eax,0x4
c001c25a:	83 e0 0f             	and    eax,0xf
c001c25d:	50                   	push   eax
c001c25e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c263:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c266:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c26c:	e8 2b 49 ff ff       	call   c0010b9c <VgaText::setTitleTextColour(VgaColour)>
c001c271:	eb b5                	jmp    c001c228 <sysAppSettings(regs*)+0xa3>
c001c273:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c278:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c27b:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c281:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c287:	c0 e8 06             	shr    al,0x6
c001c28a:	83 e0 01             	and    eax,0x1
c001c28d:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001c293:	31 c0                	xor    eax,eax
c001c295:	e9 3b ff ff ff       	jmp    c001c1d5 <sysAppSettings(regs*)+0x50>
c001c29a:	b8 02 00 00 00       	mov    eax,0x2
c001c29f:	e9 31 ff ff ff       	jmp    c001c1d5 <sysAppSettings(regs*)+0x50>

c001c2a4 <sysSetFatAttrib(regs*)>:
c001c2a4:	57                   	push   edi
c001c2a5:	56                   	push   esi
c001c2a6:	53                   	push   ebx
c001c2a7:	83 ec 1c             	sub    esp,0x1c
c001c2aa:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c2ae:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c2b1:	68 14 01 00 00       	push   0x114
c001c2b6:	e8 85 35 ff ff       	call   c000f840 <malloc>
c001c2bb:	83 c4 0c             	add    esp,0xc
c001c2be:	89 c3                	mov    ebx,eax
c001c2c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2c5:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c2c8:	57                   	push   edi
c001c2c9:	53                   	push   ebx
c001c2ca:	e8 bb 71 ff ff       	call   c001348a <File::File(char const*, Process*)>
c001c2cf:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c2d2:	83 c4 0c             	add    esp,0xc
c001c2d5:	0f b6 d4             	movzx  edx,ah
c001c2d8:	0f b6 c0             	movzx  eax,al
c001c2db:	52                   	push   edx
c001c2dc:	50                   	push   eax
c001c2dd:	53                   	push   ebx
c001c2de:	e8 1d 74 ff ff       	call   c0013700 <File::chfatattr(unsigned char, unsigned char)>
c001c2e3:	83 c4 10             	add    esp,0x10
c001c2e6:	85 db                	test   ebx,ebx
c001c2e8:	74 14                	je     c001c2fe <sysSetFatAttrib(regs*)+0x5a>
c001c2ea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c2ee:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c2f0:	83 ec 0c             	sub    esp,0xc
c001c2f3:	53                   	push   ebx
c001c2f4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c2f7:	83 c4 10             	add    esp,0x10
c001c2fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c2fe:	85 c0                	test   eax,eax
c001c300:	0f 95 c0             	setne  al
c001c303:	31 d2                	xor    edx,edx
c001c305:	0f b6 c0             	movzx  eax,al
c001c308:	f7 d8                	neg    eax
c001c30a:	83 d2 00             	adc    edx,0x0
c001c30d:	83 c4 10             	add    esp,0x10
c001c310:	f7 da                	neg    edx
c001c312:	5b                   	pop    ebx
c001c313:	5e                   	pop    esi
c001c314:	5f                   	pop    edi
c001c315:	c3                   	ret    

c001c316 <sysPipe(regs*)>:
c001c316:	57                   	push   edi
c001c317:	56                   	push   esi
c001c318:	53                   	push   ebx
c001c319:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c31d:	83 ec 0c             	sub    esp,0xc
c001c320:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c323:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c326:	6a 20                	push   0x20
c001c328:	e8 13 35 ff ff       	call   c000f840 <malloc>
c001c32d:	89 c3                	mov    ebx,eax
c001c32f:	58                   	pop    eax
c001c330:	5a                   	pop    edx
c001c331:	68 00 50 00 00       	push   0x5000
c001c336:	53                   	push   ebx
c001c337:	e8 b0 41 ff ff       	call   c00104ec <Pipe::Pipe(int)>
c001c33c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c33f:	e8 08 54 ff ff       	call   c001174c <UnixFile::getFileDescriptor()>
c001c344:	89 07                	mov    DWORD PTR [edi],eax
c001c346:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c349:	e8 fe 53 ff ff       	call   c001174c <UnixFile::getFileDescriptor()>
c001c34e:	83 c4 10             	add    esp,0x10
c001c351:	89 06                	mov    DWORD PTR [esi],eax
c001c353:	31 d2                	xor    edx,edx
c001c355:	5b                   	pop    ebx
c001c356:	31 c0                	xor    eax,eax
c001c358:	5e                   	pop    esi
c001c359:	5f                   	pop    edi
c001c35a:	c3                   	ret    

c001c35b <sysGetUnixTime(regs*)>:
c001c35b:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c001c360:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c366:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c36a:	e9 05 7b ff ff       	jmp    c0013e74 <Clock::timeInSecondsLocal()>

c001c36f <string_ends_with(char const*, char const*)>:
c001c36f:	57                   	push   edi
c001c370:	56                   	push   esi
c001c371:	53                   	push   ebx
c001c372:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c376:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c37a:	83 ec 0c             	sub    esp,0xc
c001c37d:	53                   	push   ebx
c001c37e:	e8 11 44 fe ff       	call   c0000794 <strlen>
c001c383:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c386:	89 c6                	mov    esi,eax
c001c388:	e8 07 44 fe ff       	call   c0000794 <strlen>
c001c38d:	83 c4 10             	add    esp,0x10
c001c390:	39 c6                	cmp    esi,eax
c001c392:	7d 06                	jge    c001c39a <string_ends_with(char const*, char const*)+0x2b>
c001c394:	5b                   	pop    ebx
c001c395:	31 c0                	xor    eax,eax
c001c397:	5e                   	pop    esi
c001c398:	5f                   	pop    edi
c001c399:	c3                   	ret    
c001c39a:	83 ec 08             	sub    esp,0x8
c001c39d:	29 c6                	sub    esi,eax
c001c39f:	57                   	push   edi
c001c3a0:	01 f3                	add    ebx,esi
c001c3a2:	53                   	push   ebx
c001c3a3:	e8 18 45 fe ff       	call   c00008c0 <strcmp>
c001c3a8:	83 c4 10             	add    esp,0x10
c001c3ab:	85 c0                	test   eax,eax
c001c3ad:	5b                   	pop    ebx
c001c3ae:	0f 94 c0             	sete   al
c001c3b1:	5e                   	pop    esi
c001c3b2:	0f b6 c0             	movzx  eax,al
c001c3b5:	5f                   	pop    edi
c001c3b6:	c3                   	ret    

c001c3b7 <sysCallOpen(regs*)>:
c001c3b7:	56                   	push   esi
c001c3b8:	53                   	push   ebx
c001c3b9:	81 ec 04 01 00 00    	sub    esp,0x104
c001c3bf:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c3c6:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c3c9:	85 c9                	test   ecx,ecx
c001c3cb:	0f 84 b3 00 00 00    	je     c001c484 <sysCallOpen(regs*)+0xcd>
c001c3d1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c3d4:	85 c0                	test   eax,eax
c001c3d6:	0f 84 a8 00 00 00    	je     c001c484 <sysCallOpen(regs*)+0xcd>
c001c3dc:	52                   	push   edx
c001c3dd:	68 9d c0 02 c0       	push   0xc002c09d
c001c3e2:	50                   	push   eax
c001c3e3:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c3e7:	56                   	push   esi
c001c3e8:	e8 f3 6e ff ff       	call   c00132e0 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c3ed:	89 34 24             	mov    DWORD PTR [esp],esi
c001c3f0:	e8 9f 43 fe ff       	call   c0000794 <strlen>
c001c3f5:	83 c4 10             	add    esp,0x10
c001c3f8:	48                   	dec    eax
c001c3f9:	74 1d                	je     c001c418 <sysCallOpen(regs*)+0x61>
c001c3fb:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c3fe:	eb 0f                	jmp    c001c40f <sysCallOpen(regs*)+0x58>
c001c400:	80 fa 3a             	cmp    dl,0x3a
c001c403:	74 0f                	je     c001c414 <sysCallOpen(regs*)+0x5d>
c001c405:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c409:	48                   	dec    eax
c001c40a:	74 0c                	je     c001c418 <sysCallOpen(regs*)+0x61>
c001c40c:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c40f:	80 fa 2e             	cmp    dl,0x2e
c001c412:	75 ec                	jne    c001c400 <sysCallOpen(regs*)+0x49>
c001c414:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c418:	83 ec 08             	sub    esp,0x8
c001c41b:	68 a1 c0 02 c0       	push   0xc002c0a1
c001c420:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c423:	e8 47 ff ff ff       	call   c001c36f <string_ends_with(char const*, char const*)>
c001c428:	83 c4 10             	add    esp,0x10
c001c42b:	85 c0                	test   eax,eax
c001c42d:	75 17                	jne    c001c446 <sysCallOpen(regs*)+0x8f>
c001c42f:	83 ec 08             	sub    esp,0x8
c001c432:	68 c2 c0 02 c0       	push   0xc002c0c2
c001c437:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c43a:	e8 30 ff ff ff       	call   c001c36f <string_ends_with(char const*, char const*)>
c001c43f:	83 c4 10             	add    esp,0x10
c001c442:	85 c0                	test   eax,eax
c001c444:	74 51                	je     c001c497 <sysCallOpen(regs*)+0xe0>
c001c446:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c449:	83 ec 08             	sub    esp,0x8
c001c44c:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c452:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c459:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c45c:	ff 30                	push   DWORD PTR [eax]
c001c45e:	68 a6 c0 02 c0       	push   0xc002c0a6
c001c463:	e8 c9 6a ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001c468:	c7 04 24 b5 c0 02 c0 	mov    DWORD PTR [esp],0xc002c0b5
c001c46f:	e8 bd 6a ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001c474:	83 c4 10             	add    esp,0x10
c001c477:	81 c4 04 01 00 00    	add    esp,0x104
c001c47d:	31 c0                	xor    eax,eax
c001c47f:	31 d2                	xor    edx,edx
c001c481:	5b                   	pop    ebx
c001c482:	5e                   	pop    esi
c001c483:	c3                   	ret    
c001c484:	81 c4 04 01 00 00    	add    esp,0x104
c001c48a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c48f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c494:	5b                   	pop    ebx
c001c495:	5e                   	pop    esi
c001c496:	c3                   	ret    
c001c497:	83 ec 08             	sub    esp,0x8
c001c49a:	68 a2 c0 02 c0       	push   0xc002c0a2
c001c49f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4a2:	e8 19 44 fe ff       	call   c00008c0 <strcmp>
c001c4a7:	83 c4 10             	add    esp,0x10
c001c4aa:	85 c0                	test   eax,eax
c001c4ac:	74 98                	je     c001c446 <sysCallOpen(regs*)+0x8f>
c001c4ae:	83 ec 08             	sub    esp,0x8
c001c4b1:	68 a1 c0 02 c0       	push   0xc002c0a1
c001c4b6:	56                   	push   esi
c001c4b7:	e8 b3 fe ff ff       	call   c001c36f <string_ends_with(char const*, char const*)>
c001c4bc:	83 c4 10             	add    esp,0x10
c001c4bf:	85 c0                	test   eax,eax
c001c4c1:	75 83                	jne    c001c446 <sysCallOpen(regs*)+0x8f>
c001c4c3:	83 ec 08             	sub    esp,0x8
c001c4c6:	68 c7 c0 02 c0       	push   0xc002c0c7
c001c4cb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4ce:	e8 9c fe ff ff       	call   c001c36f <string_ends_with(char const*, char const*)>
c001c4d3:	83 c4 10             	add    esp,0x10
c001c4d6:	85 c0                	test   eax,eax
c001c4d8:	0f 85 d9 00 00 00    	jne    c001c5b7 <sysCallOpen(regs*)+0x200>
c001c4de:	83 ec 08             	sub    esp,0x8
c001c4e1:	68 cc c0 02 c0       	push   0xc002c0cc
c001c4e6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4e9:	e8 81 fe ff ff       	call   c001c36f <string_ends_with(char const*, char const*)>
c001c4ee:	83 c4 10             	add    esp,0x10
c001c4f1:	85 c0                	test   eax,eax
c001c4f3:	0f 85 be 00 00 00    	jne    c001c5b7 <sysCallOpen(regs*)+0x200>
c001c4f9:	83 ec 08             	sub    esp,0x8
c001c4fc:	68 c8 c0 02 c0       	push   0xc002c0c8
c001c501:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c504:	e8 b7 43 fe ff       	call   c00008c0 <strcmp>
c001c509:	83 c4 10             	add    esp,0x10
c001c50c:	85 c0                	test   eax,eax
c001c50e:	0f 84 a3 00 00 00    	je     c001c5b7 <sysCallOpen(regs*)+0x200>
c001c514:	83 ec 08             	sub    esp,0x8
c001c517:	68 c7 c0 02 c0       	push   0xc002c0c7
c001c51c:	56                   	push   esi
c001c51d:	e8 4d fe ff ff       	call   c001c36f <string_ends_with(char const*, char const*)>
c001c522:	83 c4 10             	add    esp,0x10
c001c525:	85 c0                	test   eax,eax
c001c527:	0f 85 8a 00 00 00    	jne    c001c5b7 <sysCallOpen(regs*)+0x200>
c001c52d:	83 ec 0c             	sub    esp,0xc
c001c530:	68 14 01 00 00       	push   0x114
c001c535:	e8 06 33 ff ff       	call   c000f840 <malloc>
c001c53a:	83 c4 0c             	add    esp,0xc
c001c53d:	89 c6                	mov    esi,eax
c001c53f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c544:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c547:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c54a:	56                   	push   esi
c001c54b:	e8 3a 6f ff ff       	call   c001348a <File::File(char const*, Process*)>
c001c550:	83 c4 10             	add    esp,0x10
c001c553:	85 f6                	test   esi,esi
c001c555:	0f 84 29 ff ff ff    	je     c001c484 <sysCallOpen(regs*)+0xcd>
c001c55b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c55e:	0f b6 c2             	movzx  eax,dl
c001c561:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c564:	89 d0                	mov    eax,edx
c001c566:	83 e0 01             	and    eax,0x1
c001c569:	f6 c2 02             	test   dl,0x2
c001c56c:	74 03                	je     c001c571 <sysCallOpen(regs*)+0x1ba>
c001c56e:	83 c8 02             	or     eax,0x2
c001c571:	f6 c2 04             	test   dl,0x4
c001c574:	74 03                	je     c001c579 <sysCallOpen(regs*)+0x1c2>
c001c576:	83 c8 04             	or     eax,0x4
c001c579:	f6 c2 08             	test   dl,0x8
c001c57c:	74 03                	je     c001c581 <sysCallOpen(regs*)+0x1ca>
c001c57e:	83 c8 0a             	or     eax,0xa
c001c581:	83 e2 10             	and    edx,0x10
c001c584:	74 03                	je     c001c589 <sysCallOpen(regs*)+0x1d2>
c001c586:	83 c8 12             	or     eax,0x12
c001c589:	83 ec 08             	sub    esp,0x8
c001c58c:	50                   	push   eax
c001c58d:	56                   	push   esi
c001c58e:	e8 5b 6f ff ff       	call   c00134ee <File::open(FileOpenMode)>
c001c593:	83 c4 10             	add    esp,0x10
c001c596:	85 c0                	test   eax,eax
c001c598:	0f 85 e6 fe ff ff    	jne    c001c484 <sysCallOpen(regs*)+0xcd>
c001c59e:	83 ec 0c             	sub    esp,0xc
c001c5a1:	56                   	push   esi
c001c5a2:	e8 a5 51 ff ff       	call   c001174c <UnixFile::getFileDescriptor()>
c001c5a7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c5aa:	89 02                	mov    DWORD PTR [edx],eax
c001c5ac:	c1 f8 1f             	sar    eax,0x1f
c001c5af:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c5b2:	e9 bd fe ff ff       	jmp    c001c474 <sysCallOpen(regs*)+0xbd>
c001c5b7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c5ba:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c5c0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c5c7:	e9 ab fe ff ff       	jmp    c001c477 <sysCallOpen(regs*)+0xc0>

c001c5cc <Sys::loadSyscalls()>:
c001c5cc:	c7 05 40 11 03 c0 d9 b6 01 c0 	mov    DWORD PTR ds:0xc0031140,0xc001b6d9
c001c5d6:	c7 05 44 11 03 c0 78 b2 01 c0 	mov    DWORD PTR ds:0xc0031144,0xc001b278
c001c5e0:	c7 05 48 11 03 c0 e2 b3 01 c0 	mov    DWORD PTR ds:0xc0031148,0xc001b3e2
c001c5ea:	c7 05 4c 11 03 c0 0f b6 01 c0 	mov    DWORD PTR ds:0xc003114c,0xc001b60f
c001c5f4:	c7 05 50 11 03 c0 7a b3 01 c0 	mov    DWORD PTR ds:0xc0031150,0xc001b37a
c001c5fe:	c7 05 54 11 03 c0 af b2 01 c0 	mov    DWORD PTR ds:0xc0031154,0xc001b2af
c001c608:	c7 05 58 11 03 c0 90 b2 01 c0 	mov    DWORD PTR ds:0xc0031158,0xc001b290
c001c612:	c7 05 5c 11 03 c0 81 b4 01 c0 	mov    DWORD PTR ds:0xc003115c,0xc001b481
c001c61c:	c7 05 64 11 03 c0 09 bc 01 c0 	mov    DWORD PTR ds:0xc0031164,0xc001bc09
c001c626:	c7 05 60 11 03 c0 b7 c3 01 c0 	mov    DWORD PTR ds:0xc0031160,0xc001c3b7
c001c630:	c7 05 68 11 03 c0 91 bc 01 c0 	mov    DWORD PTR ds:0xc0031168,0xc001bc91
c001c63a:	c7 05 6c 11 03 c0 f8 b8 01 c0 	mov    DWORD PTR ds:0xc003116c,0xc001b8f8
c001c644:	c7 05 70 11 03 c0 14 b7 01 c0 	mov    DWORD PTR ds:0xc0031170,0xc001b714
c001c64e:	c7 05 74 11 03 c0 19 b7 01 c0 	mov    DWORD PTR ds:0xc0031174,0xc001b719
c001c658:	c7 05 78 11 03 c0 6c bd 01 c0 	mov    DWORD PTR ds:0xc0031178,0xc001bd6c
c001c662:	c7 05 7c 11 03 c0 06 bd 01 c0 	mov    DWORD PTR ds:0xc003117c,0xc001bd06
c001c66c:	c7 05 80 11 03 c0 e0 b9 01 c0 	mov    DWORD PTR ds:0xc0031180,0xc001b9e0
c001c676:	c7 05 84 11 03 c0 49 ba 01 c0 	mov    DWORD PTR ds:0xc0031184,0xc001ba49
c001c680:	c7 05 88 11 03 c0 c6 ba 01 c0 	mov    DWORD PTR ds:0xc0031188,0xc001bac6
c001c68a:	c7 05 8c 11 03 c0 1e b7 01 c0 	mov    DWORD PTR ds:0xc003118c,0xc001b71e
c001c694:	c7 05 90 11 03 c0 dc bd 01 c0 	mov    DWORD PTR ds:0xc0031190,0xc001bddc
c001c69e:	c7 05 94 11 03 c0 f6 bd 01 c0 	mov    DWORD PTR ds:0xc0031194,0xc001bdf6
c001c6a8:	c7 05 98 11 03 c0 f6 bd 01 c0 	mov    DWORD PTR ds:0xc0031198,0xc001bdf6
c001c6b2:	c7 05 9c 11 03 c0 37 be 01 c0 	mov    DWORD PTR ds:0xc003119c,0xc001be37
c001c6bc:	c7 05 a0 11 03 c0 9b be 01 c0 	mov    DWORD PTR ds:0xc00311a0,0xc001be9b
c001c6c6:	c7 05 a4 11 03 c0 ca b8 01 c0 	mov    DWORD PTR ds:0xc00311a4,0xc001b8ca
c001c6d0:	c7 05 a8 11 03 c0 ff be 01 c0 	mov    DWORD PTR ds:0xc00311a8,0xc001beff
c001c6da:	c7 05 ac 11 03 c0 87 b8 01 c0 	mov    DWORD PTR ds:0xc00311ac,0xc001b887
c001c6e4:	c7 05 b0 11 03 c0 4b bf 01 c0 	mov    DWORD PTR ds:0xc00311b0,0xc001bf4b
c001c6ee:	c7 05 b4 11 03 c0 86 b9 01 c0 	mov    DWORD PTR ds:0xc00311b4,0xc001b986
c001c6f8:	c7 05 b8 11 03 c0 ce bf 01 c0 	mov    DWORD PTR ds:0xc00311b8,0xc001bfce
c001c702:	c7 05 bc 11 03 c0 49 bb 01 c0 	mov    DWORD PTR ds:0xc00311bc,0xc001bb49
c001c70c:	c7 05 c0 11 03 c0 f5 bf 01 c0 	mov    DWORD PTR ds:0xc00311c0,0xc001bff5
c001c716:	c7 05 c4 11 03 c0 4d c0 01 c0 	mov    DWORD PTR ds:0xc00311c4,0xc001c04d
c001c720:	c7 05 c8 11 03 c0 85 c1 01 c0 	mov    DWORD PTR ds:0xc00311c8,0xc001c185
c001c72a:	c7 05 cc 11 03 c0 28 b7 01 c0 	mov    DWORD PTR ds:0xc00311cc,0xc001b728
c001c734:	c7 05 d0 11 03 c0 92 b7 01 c0 	mov    DWORD PTR ds:0xc00311d0,0xc001b792
c001c73e:	c7 05 d4 11 03 c0 d8 b7 01 c0 	mov    DWORD PTR ds:0xc00311d4,0xc001b7d8
c001c748:	c7 05 d8 11 03 c0 a4 c2 01 c0 	mov    DWORD PTR ds:0xc00311d8,0xc001c2a4
c001c752:	c7 05 dc 11 03 c0 11 be 01 c0 	mov    DWORD PTR ds:0xc00311dc,0xc001be11
c001c75c:	c7 05 e0 11 03 c0 29 b8 01 c0 	mov    DWORD PTR ds:0xc00311e0,0xc001b829
c001c766:	c7 05 e4 11 03 c0 16 c3 01 c0 	mov    DWORD PTR ds:0xc00311e4,0xc001c316
c001c770:	c7 05 e8 11 03 c0 5b c3 01 c0 	mov    DWORD PTR ds:0xc00311e8,0xc001c35b
c001c77a:	c7 05 ec 11 03 c0 d2 b2 01 c0 	mov    DWORD PTR ds:0xc00311ec,0xc001b2d2
c001c784:	c7 05 f0 11 03 c0 9d b4 01 c0 	mov    DWORD PTR ds:0xc00311f0,0xc001b49d
c001c78e:	c7 05 f4 11 03 c0 c5 b5 01 c0 	mov    DWORD PTR ds:0xc00311f4,0xc001b5c5
c001c798:	c7 05 f8 11 03 c0 42 b2 01 c0 	mov    DWORD PTR ds:0xc00311f8,0xc001b242
c001c7a2:	c7 05 fc 11 03 c0 77 b6 01 c0 	mov    DWORD PTR ds:0xc00311fc,0xc001b677
c001c7ac:	c7 05 00 12 03 c0 bb b2 01 c0 	mov    DWORD PTR ds:0xc0031200,0xc001b2bb
c001c7b6:	c3                   	ret    

c001c7b7 <Sys::systemCall(regs*, void*)>:
c001c7b7:	53                   	push   ebx
c001c7b8:	83 ec 08             	sub    esp,0x8
c001c7bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c7bf:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c7c2:	83 f8 7f             	cmp    eax,0x7f
c001c7c5:	77 16                	ja     c001c7dd <Sys::systemCall(regs*, void*)+0x26>
c001c7c7:	8b 14 85 40 11 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffceec0]
c001c7ce:	85 d2                	test   edx,edx
c001c7d0:	74 0b                	je     c001c7dd <Sys::systemCall(regs*, void*)+0x26>
c001c7d2:	83 ec 0c             	sub    esp,0xc
c001c7d5:	53                   	push   ebx
c001c7d6:	ff d2                	call   edx
c001c7d8:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c7db:	eb 0d                	jmp    c001c7ea <Sys::systemCall(regs*, void*)+0x33>
c001c7dd:	52                   	push   edx
c001c7de:	52                   	push   edx
c001c7df:	50                   	push   eax
c001c7e0:	68 d1 c0 02 c0       	push   0xc002c0d1
c001c7e5:	e8 47 67 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001c7ea:	83 c4 10             	add    esp,0x10
c001c7ed:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c7f2:	31 d2                	xor    edx,edx
c001c7f4:	83 c4 08             	add    esp,0x8
c001c7f7:	5b                   	pop    ebx
c001c7f8:	c3                   	ret    

c001c7f9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c7f9:	55                   	push   ebp
c001c7fa:	57                   	push   edi
c001c7fb:	56                   	push   esi
c001c7fc:	53                   	push   ebx
c001c7fd:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c803:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c80a:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c811:	85 c0                	test   eax,eax
c001c813:	0f 95 c1             	setne  cl
c001c816:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c81e:	0f 94 c2             	sete   dl
c001c821:	84 d1                	test   cl,dl
c001c823:	74 23                	je     c001c848 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c825:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c82b:	74 1b                	je     c001c848 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c82d:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c833:	89 da                	mov    edx,ebx
c001c835:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c83b:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c841:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c848:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001c84f:	05 ff 0f 00 00       	add    eax,0xfff
c001c854:	83 ec 0c             	sub    esp,0xc
c001c857:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c85b:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001c861:	c1 e8 0c             	shr    eax,0xc
c001c864:	89 ef                	mov    edi,ebp
c001c866:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c86a:	c1 ef 0c             	shr    edi,0xc
c001c86d:	6a 01                	push   0x1
c001c86f:	e8 23 53 ff ff       	call   c0011b97 <Virt::allocateKernelVirtualPages(int)>
c001c874:	89 c6                	mov    esi,eax
c001c876:	58                   	pop    eax
c001c877:	5a                   	pop    edx
c001c878:	57                   	push   edi
c001c879:	68 57 c1 02 c0       	push   0xc002c157
c001c87e:	e8 ae 66 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001c883:	59                   	pop    ecx
c001c884:	58                   	pop    eax
c001c885:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c889:	68 69 c1 02 c0       	push   0xc002c169
c001c88e:	e8 9e 66 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001c893:	83 c4 10             	add    esp,0x10
c001c896:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001c89c:	0f 86 24 01 00 00    	jbe    c001c9c6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001c8a2:	c1 e7 0c             	shl    edi,0xc
c001c8a5:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001c8a8:	89 df                	mov    edi,ebx
c001c8aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8ae:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001c8b5:	01 dd                	add    ebp,ebx
c001c8b7:	29 fd                	sub    ebp,edi
c001c8b9:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001c8bd:	0f 84 01 01 00 00    	je     c001c9c4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c8c3:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001c8c9:	76 05                	jbe    c001c8d0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001c8cb:	bd 00 10 00 00       	mov    ebp,0x1000
c001c8d0:	83 ec 0c             	sub    esp,0xc
c001c8d3:	31 d2                	xor    edx,edx
c001c8d5:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c8dc:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c8de:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c8e2:	50                   	push   eax
c001c8e3:	8d 44 24 30          	lea    eax,[esp+0x30]
c001c8e7:	50                   	push   eax
c001c8e8:	52                   	push   edx
c001c8e9:	55                   	push   ebp
c001c8ea:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c8f1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c8f4:	83 c4 20             	add    esp,0x20
c001c8f7:	85 c0                	test   eax,eax
c001c8f9:	74 0a                	je     c001c905 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001c8fb:	53                   	push   ebx
c001c8fc:	53                   	push   ebx
c001c8fd:	50                   	push   eax
c001c8fe:	68 7b c1 02 c0       	push   0xc002c17b
c001c903:	eb 0f                	jmp    c001c914 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001c905:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001c909:	74 20                	je     c001c92b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001c90b:	51                   	push   ecx
c001c90c:	51                   	push   ecx
c001c90d:	6a 00                	push   0x0
c001c90f:	68 a6 c1 02 c0       	push   0xc002c1a6
c001c914:	e8 18 66 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001c919:	89 34 24             	mov    DWORD PTR [esp],esi
c001c91c:	e8 e6 56 ff ff       	call   c0012007 <Virt::freeKernelVirtualPages(unsigned long)>
c001c921:	83 c4 10             	add    esp,0x10
c001c924:	31 c0                	xor    eax,eax
c001c926:	e9 55 01 00 00       	jmp    c001ca80 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001c92b:	e8 d8 14 00 00       	call   c001de08 <lockScheduler()>
c001c930:	e8 ad 35 ff ff       	call   c000fee2 <Phys::allocatePage()>
c001c935:	6a 07                	push   0x7
c001c937:	89 c5                	mov    ebp,eax
c001c939:	56                   	push   esi
c001c93a:	50                   	push   eax
c001c93b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c940:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c943:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c949:	e8 20 5a ff ff       	call   c001236e <VAS::mapPage(unsigned long, unsigned long, int)>
c001c94e:	83 c4 0c             	add    esp,0xc
c001c951:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c958:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c95e:	6a 00                	push   0x0
c001c960:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c965:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c968:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c96e:	e8 65 58 ff ff       	call   c00121d8 <VAS::mapOtherVASIn(bool, VAS*)>
c001c973:	58                   	pop    eax
c001c974:	5a                   	pop    edx
c001c975:	68 07 0c 00 00       	push   0xc07
c001c97a:	57                   	push   edi
c001c97b:	81 c7 00 10 00 00    	add    edi,0x1000
c001c981:	55                   	push   ebp
c001c982:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c989:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c98f:	6a 00                	push   0x0
c001c991:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c996:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c999:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c99f:	e8 84 5d ff ff       	call   c0012728 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c9a4:	83 c4 1c             	add    esp,0x1c
c001c9a7:	68 00 10 00 00       	push   0x1000
c001c9ac:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c9b0:	50                   	push   eax
c001c9b1:	56                   	push   esi
c001c9b2:	e8 8d 3d fe ff       	call   c0000744 <memcpy>
c001c9b7:	e8 4e 14 00 00       	call   c001de0a <unlockScheduler()>
c001c9bc:	83 c4 10             	add    esp,0x10
c001c9bf:	e9 ea fe ff ff       	jmp    c001c8ae <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001c9c4:	89 fb                	mov    ebx,edi
c001c9c6:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c9ce:	0f 86 9e 00 00 00    	jbe    c001ca72 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001c9d4:	e8 2f 14 00 00       	call   c001de08 <lockScheduler()>
c001c9d9:	51                   	push   ecx
c001c9da:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c9e1:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9e7:	6a 00                	push   0x0
c001c9e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9ee:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9f1:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9f7:	e8 dc 57 ff ff       	call   c00121d8 <VAS::mapOtherVASIn(bool, VAS*)>
c001c9fc:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ca00:	c1 e7 0c             	shl    edi,0xc
c001ca03:	01 df                	add    edi,ebx
c001ca05:	83 c4 10             	add    esp,0x10
c001ca08:	39 fb                	cmp    ebx,edi
c001ca0a:	74 61                	je     c001ca6d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x274>
c001ca0c:	e8 d1 34 ff ff       	call   c000fee2 <Phys::allocatePage()>
c001ca11:	6a 07                	push   0x7
c001ca13:	89 c5                	mov    ebp,eax
c001ca15:	56                   	push   esi
c001ca16:	50                   	push   eax
c001ca17:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca1c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca1f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca25:	e8 44 59 ff ff       	call   c001236e <VAS::mapPage(unsigned long, unsigned long, int)>
c001ca2a:	58                   	pop    eax
c001ca2b:	5a                   	pop    edx
c001ca2c:	68 07 0c 00 00       	push   0xc07
c001ca31:	53                   	push   ebx
c001ca32:	81 c3 00 10 00 00    	add    ebx,0x1000
c001ca38:	55                   	push   ebp
c001ca39:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001ca40:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca46:	6a 00                	push   0x0
c001ca48:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca4d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca50:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca56:	e8 cd 5c ff ff       	call   c0012728 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ca5b:	83 c4 1c             	add    esp,0x1c
c001ca5e:	68 00 10 00 00       	push   0x1000
c001ca63:	6a 00                	push   0x0
c001ca65:	56                   	push   esi
c001ca66:	e8 0d 3d fe ff       	call   c0000778 <memset>
c001ca6b:	eb 98                	jmp    c001ca05 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x20c>
c001ca6d:	e8 98 13 00 00       	call   c001de0a <unlockScheduler()>
c001ca72:	83 ec 0c             	sub    esp,0xc
c001ca75:	56                   	push   esi
c001ca76:	e8 8c 55 ff ff       	call   c0012007 <Virt::freeKernelVirtualPages(unsigned long)>
c001ca7b:	83 c4 10             	add    esp,0x10
c001ca7e:	b0 01                	mov    al,0x1
c001ca80:	81 c4 2c 10 00 00    	add    esp,0x102c
c001ca86:	5b                   	pop    ebx
c001ca87:	5e                   	pop    esi
c001ca88:	5f                   	pop    edi
c001ca89:	5d                   	pop    ebp
c001ca8a:	c3                   	ret    

c001ca8b <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001ca8b:	55                   	push   ebp
c001ca8c:	57                   	push   edi
c001ca8d:	56                   	push   esi
c001ca8e:	53                   	push   ebx
c001ca8f:	83 ec 48             	sub    esp,0x48
c001ca92:	68 14 01 00 00       	push   0x114
c001ca97:	e8 a4 2d ff ff       	call   c000f840 <malloc>
c001ca9c:	83 c4 0c             	add    esp,0xc
c001ca9f:	89 c6                	mov    esi,eax
c001caa1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001caa5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001caa9:	50                   	push   eax
c001caaa:	e8 db 69 ff ff       	call   c001348a <File::File(char const*, Process*)>
c001caaf:	58                   	pop    eax
c001cab0:	5a                   	pop    edx
c001cab1:	6a 01                	push   0x1
c001cab3:	56                   	push   esi
c001cab4:	e8 35 6a ff ff       	call   c00134ee <File::open(FileOpenMode)>
c001cab9:	83 c4 10             	add    esp,0x10
c001cabc:	85 c0                	test   eax,eax
c001cabe:	0f 85 47 01 00 00    	jne    c001cc0b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cac4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001cacc:	83 ec 0c             	sub    esp,0xc
c001cacf:	6a 34                	push   0x34
c001cad1:	e8 6a 2d ff ff       	call   c000f840 <malloc>
c001cad6:	89 c3                	mov    ebx,eax
c001cad8:	58                   	pop    eax
c001cad9:	8b 06                	mov    eax,DWORD PTR [esi]
c001cadb:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001cadf:	57                   	push   edi
c001cae0:	53                   	push   ebx
c001cae1:	6a 00                	push   0x0
c001cae3:	6a 34                	push   0x34
c001cae5:	56                   	push   esi
c001cae6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cae9:	83 c4 20             	add    esp,0x20
c001caec:	85 c0                	test   eax,eax
c001caee:	0f 85 17 01 00 00    	jne    c001cc0b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001caf4:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001cafa:	0f 85 0b 01 00 00    	jne    c001cc0b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb00:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001cb03:	85 c0                	test   eax,eax
c001cb05:	0f 84 00 01 00 00    	je     c001cc0b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb0b:	31 d2                	xor    edx,edx
c001cb0d:	55                   	push   ebp
c001cb0e:	52                   	push   edx
c001cb0f:	50                   	push   eax
c001cb10:	56                   	push   esi
c001cb11:	e8 96 6a ff ff       	call   c00135ac <File::seek(unsigned long long)>
c001cb16:	83 c4 10             	add    esp,0x10
c001cb19:	85 c0                	test   eax,eax
c001cb1b:	0f 85 ea 00 00 00    	jne    c001cc0b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb21:	83 ec 0c             	sub    esp,0xc
c001cb24:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001cb27:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cb2b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cb2f:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cb33:	0f af c2             	imul   eax,edx
c001cb36:	50                   	push   eax
c001cb37:	e8 04 2d ff ff       	call   c000f840 <malloc>
c001cb3c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cb3e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cb42:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cb45:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cb49:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cb4d:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cb51:	0f af c2             	imul   eax,edx
c001cb54:	99                   	cdq    
c001cb55:	52                   	push   edx
c001cb56:	50                   	push   eax
c001cb57:	56                   	push   esi
c001cb58:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb5b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001cb5e:	83 c4 20             	add    esp,0x20
c001cb61:	85 c0                	test   eax,eax
c001cb63:	0f 84 a2 00 00 00    	je     c001cc0b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb69:	31 d2                	xor    edx,edx
c001cb6b:	51                   	push   ecx
c001cb6c:	52                   	push   edx
c001cb6d:	50                   	push   eax
c001cb6e:	56                   	push   esi
c001cb6f:	e8 38 6a ff ff       	call   c00135ac <File::seek(unsigned long long)>
c001cb74:	83 c4 10             	add    esp,0x10
c001cb77:	85 c0                	test   eax,eax
c001cb79:	0f 85 8c 00 00 00    	jne    c001cc0b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb7f:	83 ec 0c             	sub    esp,0xc
c001cb82:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cb86:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cb8a:	31 ed                	xor    ebp,ebp
c001cb8c:	0f af c2             	imul   eax,edx
c001cb8f:	50                   	push   eax
c001cb90:	e8 ab 2c ff ff       	call   c000f840 <malloc>
c001cb95:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cb97:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cb9b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cb9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cba2:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cba6:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cbaa:	0f af c2             	imul   eax,edx
c001cbad:	99                   	cdq    
c001cbae:	52                   	push   edx
c001cbaf:	50                   	push   eax
c001cbb0:	56                   	push   esi
c001cbb1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cbb4:	83 c4 20             	add    esp,0x20
c001cbb7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cbbf:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cbc3:	0f 86 80 00 00 00    	jbe    c001cc49 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cbc9:	0f b7 fd             	movzx  edi,bp
c001cbcc:	c1 e7 05             	shl    edi,0x5
c001cbcf:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cbd3:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cbd6:	75 6b                	jne    c001cc43 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cbd8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cbdb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cbdf:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cbe2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cbe6:	52                   	push   edx
c001cbe7:	31 d2                	xor    edx,edx
c001cbe9:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cbec:	52                   	push   edx
c001cbed:	50                   	push   eax
c001cbee:	56                   	push   esi
c001cbef:	e8 b8 69 ff ff       	call   c00135ac <File::seek(unsigned long long)>
c001cbf4:	83 c4 10             	add    esp,0x10
c001cbf7:	85 c0                	test   eax,eax
c001cbf9:	74 17                	je     c001cc12 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001cbfb:	83 ec 0c             	sub    esp,0xc
c001cbfe:	68 d2 c1 02 c0       	push   0xc002c1d2
c001cc03:	e8 29 63 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001cc08:	83 c4 10             	add    esp,0x10
c001cc0b:	31 c0                	xor    eax,eax
c001cc0d:	e9 87 00 00 00       	jmp    c001cc99 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cc12:	83 ec 0c             	sub    esp,0xc
c001cc15:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cc18:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cc1b:	50                   	push   eax
c001cc1c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cc20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cc24:	56                   	push   esi
c001cc25:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cc29:	e8 cb fb ff ff       	call   c001c7f9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cc2e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cc32:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cc36:	83 c4 20             	add    esp,0x20
c001cc39:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cc3d:	73 04                	jae    c001cc43 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cc3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cc43:	45                   	inc    ebp
c001cc44:	e9 76 ff ff ff       	jmp    c001cbbf <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cc49:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cc4d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cc51:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cc55:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001cc5b:	83 ec 0c             	sub    esp,0xc
c001cc5e:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001cc64:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cc69:	05 00 10 00 00       	add    eax,0x1000
c001cc6e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cc71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc75:	e8 d6 2b ff ff       	call   c000f850 <free>
c001cc7a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cc7d:	e8 ce 2b ff ff       	call   c000f850 <free>
c001cc82:	58                   	pop    eax
c001cc83:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc87:	e8 c4 2b ff ff       	call   c000f850 <free>
c001cc8c:	89 34 24             	mov    DWORD PTR [esp],esi
c001cc8f:	e8 b8 68 ff ff       	call   c001354c <File::close()>
c001cc94:	83 c4 10             	add    esp,0x10
c001cc97:	b0 01                	mov    al,0x1
c001cc99:	83 c4 3c             	add    esp,0x3c
c001cc9c:	5b                   	pop    ebx
c001cc9d:	5e                   	pop    esi
c001cc9e:	5f                   	pop    edi
c001cc9f:	5d                   	pop    ebp
c001cca0:	c3                   	ret    

c001cca1 <Thr::runtimeReferenceHelper()>:
c001cca1:	83 ec 18             	sub    esp,0x18
c001cca4:	68 da c1 02 c0       	push   0xc002c1da
c001cca9:	e8 83 62 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001ccae:	fa                   	cli    
c001ccaf:	83 c4 10             	add    esp,0x10
c001ccb2:	eb fe                	jmp    c001ccb2 <Thr::runtimeReferenceHelper()+0x11>

c001ccb4 <Thr::getAddressOfKernelSymbol(char const*)>:
c001ccb4:	57                   	push   edi
c001ccb5:	56                   	push   esi
c001ccb6:	53                   	push   ebx
c001ccb7:	31 db                	xor    ebx,ebx
c001ccb9:	39 1d e0 1a 03 c0    	cmp    DWORD PTR ds:0xc0031ae0,ebx
c001ccbf:	7e 3c                	jle    c001ccfd <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001ccc1:	8b 34 9d 60 1a 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffce5a0]
c001ccc8:	31 ff                	xor    edi,edi
c001ccca:	39 3c 9d 60 19 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffce6a0],edi
c001ccd1:	7e 27                	jle    c001ccfa <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001ccd3:	50                   	push   eax
c001ccd4:	50                   	push   eax
c001ccd5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ccd9:	8b 06                	mov    eax,DWORD PTR [esi]
c001ccdb:	03 04 9d e0 19 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffce620]
c001cce2:	50                   	push   eax
c001cce3:	e8 d8 3b fe ff       	call   c00008c0 <strcmp>
c001cce8:	83 c4 10             	add    esp,0x10
c001cceb:	85 c0                	test   eax,eax
c001cced:	75 05                	jne    c001ccf4 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001ccef:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001ccf2:	eb 0b                	jmp    c001ccff <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001ccf4:	83 c6 10             	add    esi,0x10
c001ccf7:	47                   	inc    edi
c001ccf8:	eb d0                	jmp    c001ccca <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001ccfa:	43                   	inc    ebx
c001ccfb:	eb bc                	jmp    c001ccb9 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001ccfd:	31 c0                	xor    eax,eax
c001ccff:	5b                   	pop    ebx
c001cd00:	5e                   	pop    esi
c001cd01:	5f                   	pop    edi
c001cd02:	c3                   	ret    

c001cd03 <Thr::loadKernelSymbolTable(char const*)>:
c001cd03:	55                   	push   ebp
c001cd04:	57                   	push   edi
c001cd05:	56                   	push   esi
c001cd06:	53                   	push   ebx
c001cd07:	83 ec 68             	sub    esp,0x68
c001cd0a:	8b 35 34 1b 03 c0    	mov    esi,DWORD PTR ds:0xc0031b34
c001cd10:	68 14 01 00 00       	push   0x114
c001cd15:	e8 26 2b ff ff       	call   c000f840 <malloc>
c001cd1a:	83 c4 0c             	add    esp,0xc
c001cd1d:	89 c3                	mov    ebx,eax
c001cd1f:	56                   	push   esi
c001cd20:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cd24:	50                   	push   eax
c001cd25:	e8 60 67 ff ff       	call   c001348a <File::File(char const*, Process*)>
c001cd2a:	5e                   	pop    esi
c001cd2b:	5f                   	pop    edi
c001cd2c:	6a 01                	push   0x1
c001cd2e:	53                   	push   ebx
c001cd2f:	e8 ba 67 ff ff       	call   c00134ee <File::open(FileOpenMode)>
c001cd34:	83 c4 10             	add    esp,0x10
c001cd37:	85 c0                	test   eax,eax
c001cd39:	74 0a                	je     c001cd45 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cd3b:	83 ec 0c             	sub    esp,0xc
c001cd3e:	68 fc c1 02 c0       	push   0xc002c1fc
c001cd43:	eb 34                	jmp    c001cd79 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cd45:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001cd4d:	83 ec 0c             	sub    esp,0xc
c001cd50:	6a 34                	push   0x34
c001cd52:	e8 e9 2a ff ff       	call   c000f840 <malloc>
c001cd57:	59                   	pop    ecx
c001cd58:	89 c7                	mov    edi,eax
c001cd5a:	8d 74 24 34          	lea    esi,[esp+0x34]
c001cd5e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd60:	56                   	push   esi
c001cd61:	57                   	push   edi
c001cd62:	6a 00                	push   0x0
c001cd64:	6a 34                	push   0x34
c001cd66:	53                   	push   ebx
c001cd67:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cd6a:	83 c4 20             	add    esp,0x20
c001cd6d:	85 c0                	test   eax,eax
c001cd6f:	74 17                	je     c001cd88 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001cd71:	83 ec 0c             	sub    esp,0xc
c001cd74:	68 13 c2 02 c0       	push   0xc002c213
c001cd79:	e8 65 d8 ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c001cd7e:	83 c4 10             	add    esp,0x10
c001cd81:	31 c0                	xor    eax,eax
c001cd83:	e9 31 02 00 00       	jmp    c001cfb9 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001cd88:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cd8e:	75 e1                	jne    c001cd71 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd90:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cd93:	85 c0                	test   eax,eax
c001cd95:	74 da                	je     c001cd71 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd97:	52                   	push   edx
c001cd98:	31 d2                	xor    edx,edx
c001cd9a:	52                   	push   edx
c001cd9b:	50                   	push   eax
c001cd9c:	53                   	push   ebx
c001cd9d:	e8 0a 68 ff ff       	call   c00135ac <File::seek(unsigned long long)>
c001cda2:	83 c4 10             	add    esp,0x10
c001cda5:	85 c0                	test   eax,eax
c001cda7:	75 c8                	jne    c001cd71 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cda9:	83 ec 0c             	sub    esp,0xc
c001cdac:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cdb0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cdb4:	31 ed                	xor    ebp,ebp
c001cdb6:	0f af c2             	imul   eax,edx
c001cdb9:	50                   	push   eax
c001cdba:	e8 81 2a ff ff       	call   c000f840 <malloc>
c001cdbf:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cdc1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cdc5:	89 34 24             	mov    DWORD PTR [esp],esi
c001cdc8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cdcc:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cdd0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cdd4:	0f af c2             	imul   eax,edx
c001cdd7:	99                   	cdq    
c001cdd8:	52                   	push   edx
c001cdd9:	50                   	push   eax
c001cdda:	53                   	push   ebx
c001cddb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cdde:	83 c4 20             	add    esp,0x20
c001cde1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cde9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cdf1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cdf9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ce01:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001ce05:	0f 86 aa 00 00 00    	jbe    c001ceb5 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001ce0b:	0f b7 f5             	movzx  esi,bp
c001ce0e:	6b f6 28             	imul   esi,esi,0x28
c001ce11:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ce15:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ce18:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ce1c:	50                   	push   eax
c001ce1d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ce21:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001ce25:	8b 16                	mov    edx,DWORD PTR [esi]
c001ce27:	6b c0 28             	imul   eax,eax,0x28
c001ce2a:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001ce2e:	89 d0                	mov    eax,edx
c001ce30:	31 d2                	xor    edx,edx
c001ce32:	52                   	push   edx
c001ce33:	50                   	push   eax
c001ce34:	53                   	push   ebx
c001ce35:	e8 72 67 ff ff       	call   c00135ac <File::seek(unsigned long long)>
c001ce3a:	83 c4 0c             	add    esp,0xc
c001ce3d:	6a 20                	push   0x20
c001ce3f:	6a 00                	push   0x0
c001ce41:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ce45:	52                   	push   edx
c001ce46:	e8 2d 39 fe ff       	call   c0000778 <memset>
c001ce4b:	58                   	pop    eax
c001ce4c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce4e:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001ce52:	51                   	push   ecx
c001ce53:	8d 54 24 40          	lea    edx,[esp+0x40]
c001ce57:	52                   	push   edx
c001ce58:	6a 00                	push   0x0
c001ce5a:	6a 1f                	push   0x1f
c001ce5c:	53                   	push   ebx
c001ce5d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce60:	83 c4 18             	add    esp,0x18
c001ce63:	68 2a c2 02 c0       	push   0xc002c22a
c001ce68:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ce6c:	52                   	push   edx
c001ce6d:	e8 4e 3a fe ff       	call   c00008c0 <strcmp>
c001ce72:	83 c4 10             	add    esp,0x10
c001ce75:	85 c0                	test   eax,eax
c001ce77:	75 0f                	jne    c001ce88 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001ce79:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ce7c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ce80:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce84:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ce88:	50                   	push   eax
c001ce89:	50                   	push   eax
c001ce8a:	68 32 c2 02 c0       	push   0xc002c232
c001ce8f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001ce93:	50                   	push   eax
c001ce94:	e8 27 3a fe ff       	call   c00008c0 <strcmp>
c001ce99:	83 c4 10             	add    esp,0x10
c001ce9c:	85 c0                	test   eax,eax
c001ce9e:	75 0f                	jne    c001ceaf <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001cea0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cea3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cea7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ceab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ceaf:	45                   	inc    ebp
c001ceb0:	e9 4c ff ff ff       	jmp    c001ce01 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001ceb5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ceba:	75 10                	jne    c001cecc <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001cebc:	83 ec 0c             	sub    esp,0xc
c001cebf:	68 3a c2 02 c0       	push   0xc002c23a
c001cec4:	e8 1a d7 ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c001cec9:	83 c4 10             	add    esp,0x10
c001cecc:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001ced1:	75 10                	jne    c001cee3 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001ced3:	83 ec 0c             	sub    esp,0xc
c001ced6:	68 3a c2 02 c0       	push   0xc002c23a
c001cedb:	e8 03 d7 ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c001cee0:	83 c4 10             	add    esp,0x10
c001cee3:	31 d2                	xor    edx,edx
c001cee5:	50                   	push   eax
c001cee6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ceea:	52                   	push   edx
c001ceeb:	50                   	push   eax
c001ceec:	53                   	push   ebx
c001ceed:	e8 ba 66 ff ff       	call   c00135ac <File::seek(unsigned long long)>
c001cef2:	5a                   	pop    edx
c001cef3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cef7:	e8 44 29 ff ff       	call   c000f840 <malloc>
c001cefc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cf00:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cf04:	31 c9                	xor    ecx,ecx
c001cf06:	5e                   	pop    esi
c001cf07:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf09:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001cf0d:	55                   	push   ebp
c001cf0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf12:	51                   	push   ecx
c001cf13:	52                   	push   edx
c001cf14:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cf18:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001cf1c:	53                   	push   ebx
c001cf1d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf20:	83 c4 14             	add    esp,0x14
c001cf23:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cf27:	e8 14 29 ff ff       	call   c000f840 <malloc>
c001cf2c:	89 c6                	mov    esi,eax
c001cf2e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf30:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf33:	56                   	push   esi
c001cf34:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cf38:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cf3c:	51                   	push   ecx
c001cf3d:	52                   	push   edx
c001cf3e:	53                   	push   ebx
c001cf3f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf42:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf46:	8b 15 e0 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031ae0
c001cf4c:	83 c4 1c             	add    esp,0x1c
c001cf4f:	c1 e8 04             	shr    eax,0x4
c001cf52:	89 04 95 60 19 03 c0 	mov    DWORD PTR [edx*4-0x3ffce6a0],eax
c001cf59:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cf5d:	31 d2                	xor    edx,edx
c001cf5f:	52                   	push   edx
c001cf60:	50                   	push   eax
c001cf61:	53                   	push   ebx
c001cf62:	e8 45 66 ff ff       	call   c00135ac <File::seek(unsigned long long)>
c001cf67:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cf69:	31 d2                	xor    edx,edx
c001cf6b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf6e:	56                   	push   esi
c001cf6f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cf73:	52                   	push   edx
c001cf74:	50                   	push   eax
c001cf75:	53                   	push   ebx
c001cf76:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cf79:	83 c4 14             	add    esp,0x14
c001cf7c:	53                   	push   ebx
c001cf7d:	e8 ca 65 ff ff       	call   c001354c <File::close()>
c001cf82:	5d                   	pop    ebp
c001cf83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf87:	e8 c4 28 ff ff       	call   c000f850 <free>
c001cf8c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cf8f:	e8 bc 28 ff ff       	call   c000f850 <free>
c001cf94:	a1 e0 1a 03 c0       	mov    eax,ds:0xc0031ae0
c001cf99:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cf9d:	8d 50 01             	lea    edx,[eax+0x1]
c001cfa0:	89 0c 85 60 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5a0],ecx
c001cfa7:	89 34 85 e0 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce620],esi
c001cfae:	89 15 e0 1a 03 c0    	mov    DWORD PTR ds:0xc0031ae0,edx
c001cfb4:	83 c4 10             	add    esp,0x10
c001cfb7:	b0 01                	mov    al,0x1
c001cfb9:	83 c4 5c             	add    esp,0x5c
c001cfbc:	5b                   	pop    ebx
c001cfbd:	5e                   	pop    esi
c001cfbe:	5f                   	pop    edi
c001cfbf:	5d                   	pop    ebp
c001cfc0:	c3                   	ret    

c001cfc1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001cfc1:	55                   	push   ebp
c001cfc2:	57                   	push   edi
c001cfc3:	56                   	push   esi
c001cfc4:	53                   	push   ebx
c001cfc5:	81 ec 68 03 00 00    	sub    esp,0x368
c001cfcb:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001cfd2:	8b 1d 34 1b 03 c0    	mov    ebx,DWORD PTR ds:0xc0031b34
c001cfd8:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001cfdc:	68 14 01 00 00       	push   0x114
c001cfe1:	e8 5a 28 ff ff       	call   c000f840 <malloc>
c001cfe6:	83 c4 0c             	add    esp,0xc
c001cfe9:	89 c5                	mov    ebp,eax
c001cfeb:	53                   	push   ebx
c001cfec:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001cff3:	50                   	push   eax
c001cff4:	e8 91 64 ff ff       	call   c001348a <File::File(char const*, Process*)>
c001cff9:	5e                   	pop    esi
c001cffa:	5f                   	pop    edi
c001cffb:	6a 01                	push   0x1
c001cffd:	55                   	push   ebp
c001cffe:	e8 eb 64 ff ff       	call   c00134ee <File::open(FileOpenMode)>
c001d003:	83 c4 10             	add    esp,0x10
c001d006:	85 c0                	test   eax,eax
c001d008:	0f 85 8d 06 00 00    	jne    c001d69b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d00e:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001d016:	83 ec 0c             	sub    esp,0xc
c001d019:	6a 34                	push   0x34
c001d01b:	e8 20 28 ff ff       	call   c000f840 <malloc>
c001d020:	5b                   	pop    ebx
c001d021:	89 c7                	mov    edi,eax
c001d023:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d027:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d02a:	53                   	push   ebx
c001d02b:	57                   	push   edi
c001d02c:	6a 00                	push   0x0
c001d02e:	6a 34                	push   0x34
c001d030:	55                   	push   ebp
c001d031:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d034:	83 c4 20             	add    esp,0x20
c001d037:	85 c0                	test   eax,eax
c001d039:	0f 85 5c 06 00 00    	jne    c001d69b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d03f:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d045:	0f 85 50 06 00 00    	jne    c001d69b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d04b:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d04e:	85 c0                	test   eax,eax
c001d050:	0f 84 45 06 00 00    	je     c001d69b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d056:	31 d2                	xor    edx,edx
c001d058:	51                   	push   ecx
c001d059:	52                   	push   edx
c001d05a:	50                   	push   eax
c001d05b:	55                   	push   ebp
c001d05c:	e8 4b 65 ff ff       	call   c00135ac <File::seek(unsigned long long)>
c001d061:	83 c4 10             	add    esp,0x10
c001d064:	85 c0                	test   eax,eax
c001d066:	0f 85 2f 06 00 00    	jne    c001d69b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d06c:	83 ec 0c             	sub    esp,0xc
c001d06f:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d072:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d076:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d07a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d07e:	0f af c2             	imul   eax,edx
c001d081:	50                   	push   eax
c001d082:	e8 b9 27 ff ff       	call   c000f840 <malloc>
c001d087:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d08a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d08e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d091:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d095:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d099:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d09d:	0f af c2             	imul   eax,edx
c001d0a0:	99                   	cdq    
c001d0a1:	52                   	push   edx
c001d0a2:	50                   	push   eax
c001d0a3:	55                   	push   ebp
c001d0a4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d0a7:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d0aa:	83 c4 20             	add    esp,0x20
c001d0ad:	85 c0                	test   eax,eax
c001d0af:	0f 84 e6 05 00 00    	je     c001d69b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0b5:	52                   	push   edx
c001d0b6:	31 d2                	xor    edx,edx
c001d0b8:	52                   	push   edx
c001d0b9:	50                   	push   eax
c001d0ba:	55                   	push   ebp
c001d0bb:	e8 ec 64 ff ff       	call   c00135ac <File::seek(unsigned long long)>
c001d0c0:	83 c4 10             	add    esp,0x10
c001d0c3:	85 c0                	test   eax,eax
c001d0c5:	0f 85 d0 05 00 00    	jne    c001d69b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0cb:	83 ec 0c             	sub    esp,0xc
c001d0ce:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d0d2:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d0d6:	31 f6                	xor    esi,esi
c001d0d8:	0f af c2             	imul   eax,edx
c001d0db:	50                   	push   eax
c001d0dc:	e8 5f 27 ff ff       	call   c000f840 <malloc>
c001d0e1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d0e4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d0e8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d0eb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d0ef:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d0f3:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d0f7:	0f af c2             	imul   eax,edx
c001d0fa:	99                   	cdq    
c001d0fb:	52                   	push   edx
c001d0fc:	50                   	push   eax
c001d0fd:	55                   	push   ebp
c001d0fe:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d101:	83 c4 20             	add    esp,0x20
c001d104:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d108:	0f 86 8a 00 00 00    	jbe    c001d198 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d10e:	0f b7 de             	movzx  ebx,si
c001d111:	c1 e3 05             	shl    ebx,0x5
c001d114:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d118:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d11b:	75 75                	jne    c001d192 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d11d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d120:	31 d2                	xor    edx,edx
c001d122:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d126:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d129:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d12d:	50                   	push   eax
c001d12e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d131:	52                   	push   edx
c001d132:	50                   	push   eax
c001d133:	55                   	push   ebp
c001d134:	e8 73 64 ff ff       	call   c00135ac <File::seek(unsigned long long)>
c001d139:	83 c4 10             	add    esp,0x10
c001d13c:	85 c0                	test   eax,eax
c001d13e:	0f 85 57 05 00 00    	jne    c001d69b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d144:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d14b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d14e:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d152:	31 d2                	xor    edx,edx
c001d154:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d158:	83 ec 0c             	sub    esp,0xc
c001d15b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d15f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d166:	50                   	push   eax
c001d167:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d16b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d16f:	52                   	push   edx
c001d170:	50                   	push   eax
c001d171:	55                   	push   ebp
c001d172:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d175:	83 c4 1c             	add    esp,0x1c
c001d178:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d17b:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d17e:	50                   	push   eax
c001d17f:	6a 00                	push   0x0
c001d181:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d185:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d189:	50                   	push   eax
c001d18a:	e8 e9 35 fe ff       	call   c0000778 <memset>
c001d18f:	83 c4 10             	add    esp,0x10
c001d192:	46                   	inc    esi
c001d193:	e9 6c ff ff ff       	jmp    c001d104 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d198:	53                   	push   ebx
c001d199:	31 db                	xor    ebx,ebx
c001d19b:	68 00 01 00 00       	push   0x100
c001d1a0:	6a 00                	push   0x0
c001d1a2:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d1a6:	50                   	push   eax
c001d1a7:	e8 cc 35 fe ff       	call   c0000778 <memset>
c001d1ac:	83 c4 0c             	add    esp,0xc
c001d1af:	68 00 01 00 00       	push   0x100
c001d1b4:	6a 00                	push   0x0
c001d1b6:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d1bd:	50                   	push   eax
c001d1be:	e8 b5 35 fe ff       	call   c0000778 <memset>
c001d1c3:	83 c4 10             	add    esp,0x10
c001d1c6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d1ce:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d1d6:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d1de:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d1e6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d1ee:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d1f2:	0f 86 30 01 00 00    	jbe    c001d328 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d1f8:	0f b7 f3             	movzx  esi,bx
c001d1fb:	6b f6 28             	imul   esi,esi,0x28
c001d1fe:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d202:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d205:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d209:	52                   	push   edx
c001d20a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d20e:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d212:	8b 06                	mov    eax,DWORD PTR [esi]
c001d214:	6b d2 28             	imul   edx,edx,0x28
c001d217:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d21b:	31 d2                	xor    edx,edx
c001d21d:	52                   	push   edx
c001d21e:	50                   	push   eax
c001d21f:	55                   	push   ebp
c001d220:	e8 87 63 ff ff       	call   c00135ac <File::seek(unsigned long long)>
c001d225:	83 c4 0c             	add    esp,0xc
c001d228:	6a 20                	push   0x20
c001d22a:	6a 00                	push   0x0
c001d22c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d233:	51                   	push   ecx
c001d234:	e8 3f 35 fe ff       	call   c0000778 <memset>
c001d239:	59                   	pop    ecx
c001d23a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d23d:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d241:	52                   	push   edx
c001d242:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d249:	51                   	push   ecx
c001d24a:	6a 00                	push   0x0
c001d24c:	6a 1f                	push   0x1f
c001d24e:	55                   	push   ebp
c001d24f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d252:	83 c4 1c             	add    esp,0x1c
c001d255:	6a 09                	push   0x9
c001d257:	68 54 c2 02 c0       	push   0xc002c254
c001d25c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d263:	51                   	push   ecx
c001d264:	e8 d7 33 fe ff       	call   c0000640 <memcmp>
c001d269:	83 c4 10             	add    esp,0x10
c001d26c:	85 c0                	test   eax,eax
c001d26e:	75 21                	jne    c001d291 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d270:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d274:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d278:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d27c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d280:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d283:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d28a:	89 d0                	mov    eax,edx
c001d28c:	40                   	inc    eax
c001d28d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d291:	50                   	push   eax
c001d292:	6a 09                	push   0x9
c001d294:	68 5e c2 02 c0       	push   0xc002c25e
c001d299:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2a0:	50                   	push   eax
c001d2a1:	e8 9a 33 fe ff       	call   c0000640 <memcmp>
c001d2a6:	83 c4 10             	add    esp,0x10
c001d2a9:	85 c0                	test   eax,eax
c001d2ab:	75 21                	jne    c001d2ce <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d2ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d2b1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d2b5:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d2b9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d2bd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d2c0:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d2c7:	89 d0                	mov    eax,edx
c001d2c9:	40                   	inc    eax
c001d2ca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d2ce:	50                   	push   eax
c001d2cf:	50                   	push   eax
c001d2d0:	68 2a c2 02 c0       	push   0xc002c22a
c001d2d5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2dc:	50                   	push   eax
c001d2dd:	e8 de 35 fe ff       	call   c00008c0 <strcmp>
c001d2e2:	83 c4 10             	add    esp,0x10
c001d2e5:	85 c0                	test   eax,eax
c001d2e7:	75 0f                	jne    c001d2f8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d2e9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d2ec:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d2f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d2f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d2f8:	50                   	push   eax
c001d2f9:	50                   	push   eax
c001d2fa:	68 32 c2 02 c0       	push   0xc002c232
c001d2ff:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d306:	50                   	push   eax
c001d307:	e8 b4 35 fe ff       	call   c00008c0 <strcmp>
c001d30c:	83 c4 10             	add    esp,0x10
c001d30f:	85 c0                	test   eax,eax
c001d311:	75 0f                	jne    c001d322 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d313:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d316:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d31a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d31e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d322:	43                   	inc    ebx
c001d323:	e9 c6 fe ff ff       	jmp    c001d1ee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d328:	31 d2                	xor    edx,edx
c001d32a:	50                   	push   eax
c001d32b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d32f:	52                   	push   edx
c001d330:	50                   	push   eax
c001d331:	55                   	push   ebp
c001d332:	e8 75 62 ff ff       	call   c00135ac <File::seek(unsigned long long)>
c001d337:	58                   	pop    eax
c001d338:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d33c:	e8 ff 24 ff ff       	call   c000f840 <malloc>
c001d341:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d344:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d348:	31 d2                	xor    edx,edx
c001d34a:	58                   	pop    eax
c001d34b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d34f:	53                   	push   ebx
c001d350:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d354:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d358:	52                   	push   edx
c001d359:	50                   	push   eax
c001d35a:	55                   	push   ebp
c001d35b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d35e:	83 c4 14             	add    esp,0x14
c001d361:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d365:	e8 d6 24 ff ff       	call   c000f840 <malloc>
c001d36a:	31 d2                	xor    edx,edx
c001d36c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d370:	83 c4 0c             	add    esp,0xc
c001d373:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d377:	52                   	push   edx
c001d378:	50                   	push   eax
c001d379:	55                   	push   ebp
c001d37a:	e8 2d 62 ff ff       	call   c00135ac <File::seek(unsigned long long)>
c001d37f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d382:	31 d2                	xor    edx,edx
c001d384:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d387:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d38b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d38f:	52                   	push   edx
c001d390:	50                   	push   eax
c001d391:	55                   	push   ebp
c001d392:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d395:	83 c4 20             	add    esp,0x20
c001d398:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d3a0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d3a4:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d3a8:	0f 84 f1 02 00 00    	je     c001d69f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001d3ae:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d3b5:	31 d2                	xor    edx,edx
c001d3b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d3bb:	c1 e8 03             	shr    eax,0x3
c001d3be:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d3c2:	51                   	push   ecx
c001d3c3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d3c7:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d3cb:	52                   	push   edx
c001d3cc:	50                   	push   eax
c001d3cd:	55                   	push   ebp
c001d3ce:	e8 d9 61 ff ff       	call   c00135ac <File::seek(unsigned long long)>
c001d3d3:	5b                   	pop    ebx
c001d3d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3d8:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d3df:	e8 5c 24 ff ff       	call   c000f840 <malloc>
c001d3e4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d3e7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d3eb:	31 d2                	xor    edx,edx
c001d3ed:	5e                   	pop    esi
c001d3ee:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d3f2:	50                   	push   eax
c001d3f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3f7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d3fb:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d402:	52                   	push   edx
c001d403:	50                   	push   eax
c001d404:	55                   	push   ebp
c001d405:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d408:	83 c4 20             	add    esp,0x20
c001d40b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d413:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d417:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d41b:	0f 8d 62 02 00 00    	jge    c001d683 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001d421:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d425:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d429:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d42e:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d431:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d435:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d439:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d43d:	89 d8                	mov    eax,ebx
c001d43f:	c1 e8 08             	shr    eax,0x8
c001d442:	89 c6                	mov    esi,eax
c001d444:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d448:	c1 e6 04             	shl    esi,0x4
c001d44b:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d44f:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d452:	85 d2                	test   edx,edx
c001d454:	0f 85 bf 00 00 00    	jne    c001d519 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d45a:	83 ec 0c             	sub    esp,0xc
c001d45d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d461:	03 06                	add    eax,DWORD PTR [esi]
c001d463:	50                   	push   eax
c001d464:	e8 4b f8 ff ff       	call   c001ccb4 <Thr::getAddressOfKernelSymbol(char const*)>
c001d469:	83 c4 10             	add    esp,0x10
c001d46c:	89 c2                	mov    edx,eax
c001d46e:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d473:	85 c0                	test   eax,eax
c001d475:	0f 85 9e 00 00 00    	jne    c001d519 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d47b:	83 ec 0c             	sub    esp,0xc
c001d47e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d482:	03 06                	add    eax,DWORD PTR [esi]
c001d484:	50                   	push   eax
c001d485:	e8 6b 10 ff ff       	call   c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>
c001d48a:	83 c4 10             	add    esp,0x10
c001d48d:	89 c2                	mov    edx,eax
c001d48f:	85 c0                	test   eax,eax
c001d491:	0f 85 82 00 00 00    	jne    c001d519 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d497:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d49b:	50                   	push   eax
c001d49c:	50                   	push   eax
c001d49d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4a1:	03 06                	add    eax,DWORD PTR [esi]
c001d4a3:	50                   	push   eax
c001d4a4:	68 68 c2 02 c0       	push   0xc002c268
c001d4a9:	e8 83 5a ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001d4ae:	58                   	pop    eax
c001d4af:	5a                   	pop    edx
c001d4b0:	68 82 c2 02 c0       	push   0xc002c282
c001d4b5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4bc:	50                   	push   eax
c001d4bd:	e8 72 33 fe ff       	call   c0000834 <strcpy>
c001d4c2:	59                   	pop    ecx
c001d4c3:	58                   	pop    eax
c001d4c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4c8:	03 06                	add    eax,DWORD PTR [esi]
c001d4ca:	50                   	push   eax
c001d4cb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4d2:	50                   	push   eax
c001d4d3:	e8 9c 34 fe ff       	call   c0000974 <strcat>
c001d4d8:	58                   	pop    eax
c001d4d9:	5a                   	pop    edx
c001d4da:	68 18 c3 02 c0       	push   0xc002c318
c001d4df:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4e6:	50                   	push   eax
c001d4e7:	e8 88 34 fe ff       	call   c0000974 <strcat>
c001d4ec:	83 c4 10             	add    esp,0x10
c001d4ef:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d4f4:	0f 84 43 01 00 00    	je     c001d63d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d4fa:	83 ec 0c             	sub    esp,0xc
c001d4fd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d504:	50                   	push   eax
c001d505:	e8 d9 d0 ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c001d50a:	83 c4 10             	add    esp,0x10
c001d50d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d511:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d515:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d519:	80 fb 01             	cmp    bl,0x1
c001d51c:	75 7d                	jne    c001d59b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001d51e:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d525:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d529:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d52d:	01 ce                	add    esi,ecx
c001d52f:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d535:	0f 94 c0             	sete   al
c001d538:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d53e:	0f 94 c3             	sete   bl
c001d541:	09 c3                	or     ebx,eax
c001d543:	8b 06                	mov    eax,DWORD PTR [esi]
c001d545:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d54a:	74 36                	je     c001d582 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001d54c:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d54f:	84 db                	test   bl,bl
c001d551:	75 0a                	jne    c001d55d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001d553:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d557:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d55b:	76 37                	jbe    c001d594 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d55d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d561:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d566:	0f 84 d1 00 00 00    	je     c001d63d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d56c:	83 ec 0c             	sub    esp,0xc
c001d56f:	68 99 c2 02 c0       	push   0xc002c299
c001d574:	e8 6a d0 ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c001d579:	83 c4 10             	add    esp,0x10
c001d57c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d580:	eb 12                	jmp    c001d594 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d582:	01 c1                	add    ecx,eax
c001d584:	84 db                	test   bl,bl
c001d586:	75 0c                	jne    c001d594 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d588:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d58c:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d590:	77 02                	ja     c001d594 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d592:	01 d1                	add    ecx,edx
c001d594:	89 0e                	mov    DWORD PTR [esi],ecx
c001d596:	e9 df 00 00 00       	jmp    c001d67a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d59b:	80 fb 02             	cmp    bl,0x2
c001d59e:	75 71                	jne    c001d611 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001d5a0:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d5a7:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d5ab:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d5af:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d5b5:	74 15                	je     c001d5cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d5b7:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d5bd:	74 0d                	je     c001d5cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d5bf:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d5c3:	83 e8 04             	sub    eax,0x4
c001d5c6:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d5ca:	76 1f                	jbe    c001d5eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001d5cc:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d5d0:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d5d5:	74 66                	je     c001d63d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d5d7:	83 ec 0c             	sub    esp,0xc
c001d5da:	68 b5 c2 02 c0       	push   0xc002c2b5
c001d5df:	e8 ff cf ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c001d5e4:	83 c4 10             	add    esp,0x10
c001d5e7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d5eb:	8b 06                	mov    eax,DWORD PTR [esi]
c001d5ed:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d5f2:	74 13                	je     c001d607 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001d5f4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d5f8:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d5ff:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d603:	01 c8                	add    eax,ecx
c001d605:	eb 04                	jmp    c001d60b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001d607:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d60b:	01 c2                	add    edx,eax
c001d60d:	89 16                	mov    DWORD PTR [esi],edx
c001d60f:	eb 69                	jmp    c001d67a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d611:	0f b6 db             	movzx  ebx,bl
c001d614:	50                   	push   eax
c001d615:	50                   	push   eax
c001d616:	53                   	push   ebx
c001d617:	68 d1 c2 02 c0       	push   0xc002c2d1
c001d61c:	e8 10 59 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001d621:	83 c4 10             	add    esp,0x10
c001d624:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d629:	74 12                	je     c001d63d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d62b:	83 ec 0c             	sub    esp,0xc
c001d62e:	68 dc c2 02 c0       	push   0xc002c2dc
c001d633:	e8 ab cf ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c001d638:	83 c4 10             	add    esp,0x10
c001d63b:	eb 3d                	jmp    c001d67a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d63d:	83 ec 0c             	sub    esp,0xc
c001d640:	55                   	push   ebp
c001d641:	e8 06 5f ff ff       	call   c001354c <File::close()>
c001d646:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d649:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d64c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d64f:	59                   	pop    ecx
c001d650:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d654:	e8 f7 21 ff ff       	call   c000f850 <free>
c001d659:	5b                   	pop    ebx
c001d65a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d65e:	e8 ed 21 ff ff       	call   c000f850 <free>
c001d663:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d666:	e8 e5 21 ff ff       	call   c000f850 <free>
c001d66b:	5e                   	pop    esi
c001d66c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d670:	e8 db 21 ff ff       	call   c000f850 <free>
c001d675:	83 c4 10             	add    esp,0x10
c001d678:	eb 21                	jmp    c001d69b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d67a:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d67e:	e9 90 fd ff ff       	jmp    c001d413 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d683:	83 ec 0c             	sub    esp,0xc
c001d686:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d68a:	e8 c1 21 ff ff       	call   c000f850 <free>
c001d68f:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d693:	83 c4 10             	add    esp,0x10
c001d696:	e9 05 fd ff ff       	jmp    c001d3a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d69b:	31 c0                	xor    eax,eax
c001d69d:	eb 33                	jmp    c001d6d2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001d69f:	83 ec 0c             	sub    esp,0xc
c001d6a2:	55                   	push   ebp
c001d6a3:	e8 a4 5e ff ff       	call   c001354c <File::close()>
c001d6a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d6ab:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d6ae:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d6b1:	58                   	pop    eax
c001d6b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d6b6:	e8 95 21 ff ff       	call   c000f850 <free>
c001d6bb:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d6be:	e8 8d 21 ff ff       	call   c000f850 <free>
c001d6c3:	5a                   	pop    edx
c001d6c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d6c8:	e8 83 21 ff ff       	call   c000f850 <free>
c001d6cd:	83 c4 10             	add    esp,0x10
c001d6d0:	b0 01                	mov    al,0x1
c001d6d2:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d6d8:	5b                   	pop    ebx
c001d6d9:	5e                   	pop    esi
c001d6da:	5f                   	pop    edi
c001d6db:	5d                   	pop    ebp
c001d6dc:	c3                   	ret    

c001d6dd <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d6dd:	56                   	push   esi
c001d6de:	31 d2                	xor    edx,edx
c001d6e0:	53                   	push   ebx
c001d6e1:	8b 1d 40 13 03 c0    	mov    ebx,DWORD PTR ds:0xc0031340
c001d6e7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d6eb:	39 d3                	cmp    ebx,edx
c001d6ed:	7e 1b                	jle    c001d70a <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d6ef:	8b 04 95 60 15 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffceaa0]
c001d6f6:	39 c8                	cmp    eax,ecx
c001d6f8:	77 0d                	ja     c001d707 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d6fa:	8b 34 95 60 13 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffceca0]
c001d701:	01 c6                	add    esi,eax
c001d703:	39 ce                	cmp    esi,ecx
c001d705:	77 05                	ja     c001d70c <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d707:	42                   	inc    edx
c001d708:	eb e1                	jmp    c001d6eb <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d70a:	31 c0                	xor    eax,eax
c001d70c:	5b                   	pop    ebx
c001d70d:	5e                   	pop    esi
c001d70e:	c3                   	ret    

c001d70f <Thr::getDriverNameFromAddress(unsigned long)>:
c001d70f:	53                   	push   ebx
c001d710:	31 c0                	xor    eax,eax
c001d712:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d716:	8b 1d 40 13 03 c0    	mov    ebx,DWORD PTR ds:0xc0031340
c001d71c:	39 c3                	cmp    ebx,eax
c001d71e:	7e 22                	jle    c001d742 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d720:	8b 14 85 60 15 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffceaa0]
c001d727:	39 ca                	cmp    edx,ecx
c001d729:	77 14                	ja     c001d73f <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d72b:	03 14 85 60 13 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffceca0]
c001d732:	39 ca                	cmp    edx,ecx
c001d734:	76 09                	jbe    c001d73f <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d736:	8b 04 85 60 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce8a0]
c001d73d:	eb 05                	jmp    c001d744 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d73f:	40                   	inc    eax
c001d740:	eb da                	jmp    c001d71c <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d742:	31 c0                	xor    eax,eax
c001d744:	5b                   	pop    ebx
c001d745:	c3                   	ret    

c001d746 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d746:	53                   	push   ebx
c001d747:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d74b:	53                   	push   ebx
c001d74c:	e8 8c ff ff ff       	call   c001d6dd <Thr::getDriverBaseFromAddress(unsigned long)>
c001d751:	5a                   	pop    edx
c001d752:	31 d2                	xor    edx,edx
c001d754:	85 c0                	test   eax,eax
c001d756:	74 04                	je     c001d75c <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d758:	89 da                	mov    edx,ebx
c001d75a:	29 c2                	sub    edx,eax
c001d75c:	89 d0                	mov    eax,edx
c001d75e:	5b                   	pop    ebx
c001d75f:	c3                   	ret    

c001d760 <Thr::loadDLL(char const*, bool)>:
c001d760:	55                   	push   ebp
c001d761:	57                   	push   edi
c001d762:	56                   	push   esi
c001d763:	53                   	push   ebx
c001d764:	81 ec 34 01 00 00    	sub    esp,0x134
c001d76a:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d771:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d778:	56                   	push   esi
c001d779:	68 f4 c2 02 c0       	push   0xc002c2f4
c001d77e:	e8 ae 57 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001d783:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d78a:	e8 b1 20 ff ff       	call   c000f840 <malloc>
c001d78f:	83 c4 0c             	add    esp,0xc
c001d792:	89 c3                	mov    ebx,eax
c001d794:	ff 35 34 1b 03 c0    	push   DWORD PTR ds:0xc0031b34
c001d79a:	56                   	push   esi
c001d79b:	50                   	push   eax
c001d79c:	e8 e9 5c ff ff       	call   c001348a <File::File(char const*, Process*)>
c001d7a1:	83 c4 10             	add    esp,0x10
c001d7a4:	85 db                	test   ebx,ebx
c001d7a6:	75 3c                	jne    c001d7e4 <Thr::loadDLL(char const*, bool)+0x84>
c001d7a8:	89 e8                	mov    eax,ebp
c001d7aa:	84 c0                	test   al,al
c001d7ac:	0f 84 d5 01 00 00    	je     c001d987 <Thr::loadDLL(char const*, bool)+0x227>
c001d7b2:	57                   	push   edi
c001d7b3:	57                   	push   edi
c001d7b4:	68 05 c3 02 c0       	push   0xc002c305
c001d7b9:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d7bd:	57                   	push   edi
c001d7be:	e8 71 30 fe ff       	call   c0000834 <strcpy>
c001d7c3:	58                   	pop    eax
c001d7c4:	5a                   	pop    edx
c001d7c5:	56                   	push   esi
c001d7c6:	57                   	push   edi
c001d7c7:	e8 a8 31 fe ff       	call   c0000974 <strcat>
c001d7cc:	59                   	pop    ecx
c001d7cd:	58                   	pop    eax
c001d7ce:	68 18 c3 02 c0       	push   0xc002c318
c001d7d3:	57                   	push   edi
c001d7d4:	e8 9b 31 fe ff       	call   c0000974 <strcat>
c001d7d9:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d7dc:	e8 02 ce ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c001d7e1:	83 c4 10             	add    esp,0x10
c001d7e4:	51                   	push   ecx
c001d7e5:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d7e9:	50                   	push   eax
c001d7ea:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d7ee:	50                   	push   eax
c001d7ef:	53                   	push   ebx
c001d7f0:	e8 a5 5f ff ff       	call   c001379a <File::stat(unsigned long long*, bool*)>
c001d7f5:	83 c4 10             	add    esp,0x10
c001d7f8:	85 db                	test   ebx,ebx
c001d7fa:	74 0c                	je     c001d808 <Thr::loadDLL(char const*, bool)+0xa8>
c001d7fc:	83 ec 0c             	sub    esp,0xc
c001d7ff:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d801:	53                   	push   ebx
c001d802:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d805:	83 c4 10             	add    esp,0x10
c001d808:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d80d:	75 0a                	jne    c001d819 <Thr::loadDLL(char const*, bool)+0xb9>
c001d80f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d813:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d817:	75 3c                	jne    c001d855 <Thr::loadDLL(char const*, bool)+0xf5>
c001d819:	89 e8                	mov    eax,ebp
c001d81b:	84 c0                	test   al,al
c001d81d:	0f 84 4c 01 00 00    	je     c001d96f <Thr::loadDLL(char const*, bool)+0x20f>
c001d823:	51                   	push   ecx
c001d824:	51                   	push   ecx
c001d825:	68 05 c3 02 c0       	push   0xc002c305
c001d82a:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d82e:	53                   	push   ebx
c001d82f:	e8 00 30 fe ff       	call   c0000834 <strcpy>
c001d834:	5f                   	pop    edi
c001d835:	58                   	pop    eax
c001d836:	56                   	push   esi
c001d837:	53                   	push   ebx
c001d838:	e8 37 31 fe ff       	call   c0000974 <strcat>
c001d83d:	58                   	pop    eax
c001d83e:	5a                   	pop    edx
c001d83f:	68 18 c3 02 c0       	push   0xc002c318
c001d844:	53                   	push   ebx
c001d845:	e8 2a 31 fe ff       	call   c0000974 <strcat>
c001d84a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d84d:	e8 91 cd ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c001d852:	83 c4 10             	add    esp,0x10
c001d855:	e8 d8 45 ff ff       	call   c0011e32 <Virt::getAKernelVAS()>
c001d85a:	51                   	push   ecx
c001d85b:	6a 03                	push   0x3
c001d85d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d861:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d865:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d86b:	83 d3 00             	adc    ebx,0x0
c001d86e:	89 ca                	mov    edx,ecx
c001d870:	89 d1                	mov    ecx,edx
c001d872:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d876:	51                   	push   ecx
c001d877:	50                   	push   eax
c001d878:	e8 f1 4b ff ff       	call   c001246e <VAS::allocatePages(int, int)>
c001d87d:	5f                   	pop    edi
c001d87e:	89 c3                	mov    ebx,eax
c001d880:	58                   	pop    eax
c001d881:	53                   	push   ebx
c001d882:	68 1a c3 02 c0       	push   0xc002c31a
c001d887:	e8 a5 56 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001d88c:	89 34 24             	mov    DWORD PTR [esp],esi
c001d88f:	e8 00 2f fe ff       	call   c0000794 <strlen>
c001d894:	8b 3d 40 13 03 c0    	mov    edi,DWORD PTR ds:0xc0031340
c001d89a:	40                   	inc    eax
c001d89b:	89 04 24             	mov    DWORD PTR [esp],eax
c001d89e:	e8 9d 1f ff ff       	call   c000f840 <malloc>
c001d8a3:	89 04 bd 60 17 03 c0 	mov    DWORD PTR [edi*4-0x3ffce8a0],eax
c001d8aa:	58                   	pop    eax
c001d8ab:	a1 40 13 03 c0       	mov    eax,ds:0xc0031340
c001d8b0:	5a                   	pop    edx
c001d8b1:	56                   	push   esi
c001d8b2:	ff 34 85 60 17 03 c0 	push   DWORD PTR [eax*4-0x3ffce8a0]
c001d8b9:	e8 76 2f fe ff       	call   c0000834 <strcpy>
c001d8be:	a1 40 13 03 c0       	mov    eax,ds:0xc0031340
c001d8c3:	8d 50 01             	lea    edx,[eax+0x1]
c001d8c6:	89 1c 85 60 15 03 c0 	mov    DWORD PTR [eax*4-0x3ffceaa0],ebx
c001d8cd:	89 15 40 13 03 c0    	mov    DWORD PTR ds:0xc0031340,edx
c001d8d3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d8d7:	83 c4 0c             	add    esp,0xc
c001d8da:	89 14 85 60 13 03 c0 	mov    DWORD PTR [eax*4-0x3ffceca0],edx
c001d8e1:	6a 01                	push   0x1
c001d8e3:	53                   	push   ebx
c001d8e4:	56                   	push   esi
c001d8e5:	e8 d7 f6 ff ff       	call   c001cfc1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d8ea:	83 c4 10             	add    esp,0x10
c001d8ed:	89 c7                	mov    edi,eax
c001d8ef:	84 c0                	test   al,al
c001d8f1:	0f 85 8c 00 00 00    	jne    c001d983 <Thr::loadDLL(char const*, bool)+0x223>
c001d8f7:	89 e8                	mov    eax,ebp
c001d8f9:	84 c0                	test   al,al
c001d8fb:	74 76                	je     c001d973 <Thr::loadDLL(char const*, bool)+0x213>
c001d8fd:	83 ec 0c             	sub    esp,0xc
c001d900:	68 27 c3 02 c0       	push   0xc002c327
c001d905:	e8 d9 cc ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c001d90a:	83 c4 10             	add    esp,0x10
c001d90d:	eb 64                	jmp    c001d973 <Thr::loadDLL(char const*, bool)+0x213>
c001d90f:	e8 1e 45 ff ff       	call   c0011e32 <Virt::getAKernelVAS()>
c001d914:	89 f5                	mov    ebp,esi
c001d916:	c1 e5 0c             	shl    ebp,0xc
c001d919:	52                   	push   edx
c001d91a:	01 dd                	add    ebp,ebx
c001d91c:	52                   	push   edx
c001d91d:	55                   	push   ebp
c001d91e:	50                   	push   eax
c001d91f:	e8 c4 46 ff ff       	call   c0011fe8 <VAS::getPageTableEntry(unsigned long)>
c001d924:	83 c4 10             	add    esp,0x10
c001d927:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d92a:	75 0c                	jne    c001d938 <Thr::loadDLL(char const*, bool)+0x1d8>
c001d92c:	83 ec 0c             	sub    esp,0xc
c001d92f:	55                   	push   ebp
c001d930:	e8 23 25 ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c001d935:	83 c4 10             	add    esp,0x10
c001d938:	46                   	inc    esi
c001d939:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d93d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d941:	05 ff 0f 00 00       	add    eax,0xfff
c001d946:	83 d2 00             	adc    edx,0x0
c001d949:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d94d:	c1 ea 0c             	shr    edx,0xc
c001d950:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d954:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d958:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d95c:	ba 00 00 00 00       	mov    edx,0x0
c001d961:	89 d0                	mov    eax,edx
c001d963:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d967:	72 a6                	jb     c001d90f <Thr::loadDLL(char const*, bool)+0x1af>
c001d969:	89 f8                	mov    eax,edi
c001d96b:	84 c0                	test   al,al
c001d96d:	75 18                	jne    c001d987 <Thr::loadDLL(char const*, bool)+0x227>
c001d96f:	31 db                	xor    ebx,ebx
c001d971:	eb 14                	jmp    c001d987 <Thr::loadDLL(char const*, bool)+0x227>
c001d973:	83 ec 0c             	sub    esp,0xc
c001d976:	68 46 c3 02 c0       	push   0xc002c346
c001d97b:	e8 63 cc ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c001d980:	83 c4 10             	add    esp,0x10
c001d983:	31 f6                	xor    esi,esi
c001d985:	eb b2                	jmp    c001d939 <Thr::loadDLL(char const*, bool)+0x1d9>
c001d987:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d98d:	89 d8                	mov    eax,ebx
c001d98f:	5b                   	pop    ebx
c001d990:	5e                   	pop    esi
c001d991:	5f                   	pop    edi
c001d992:	5d                   	pop    ebp
c001d993:	c3                   	ret    

c001d994 <Thr::executeDLL(unsigned long, void*)>:
c001d994:	56                   	push   esi
c001d995:	53                   	push   ebx
c001d996:	52                   	push   edx
c001d997:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d99b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d99f:	85 db                	test   ebx,ebx
c001d9a1:	75 10                	jne    c001d9b3 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d9a3:	83 ec 0c             	sub    esp,0xc
c001d9a6:	68 62 c3 02 c0       	push   0xc002c362
c001d9ab:	e8 33 cc ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c001d9b0:	83 c4 10             	add    esp,0x10
c001d9b3:	50                   	push   eax
c001d9b4:	50                   	push   eax
c001d9b5:	53                   	push   ebx
c001d9b6:	68 8c c3 02 c0       	push   0xc002c38c
c001d9bb:	e8 71 55 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001d9c0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d9c4:	89 d8                	mov    eax,ebx
c001d9c6:	83 c4 14             	add    esp,0x14
c001d9c9:	5b                   	pop    ebx
c001d9ca:	5e                   	pop    esi
c001d9cb:	ff e0                	jmp    eax
c001d9cd:	90                   	nop

c001d9ce <changeTSS>:
c001d9ce:	83 ec 14             	sub    esp,0x14
c001d9d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d9d6:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d9d9:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d9de:	c1 e2 15             	shl    edx,0x15
c001d9e1:	29 d0                	sub    eax,edx
c001d9e3:	50                   	push   eax
c001d9e4:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c001d9e9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d9ef:	05 7c 11 00 00       	add    eax,0x117c
c001d9f4:	50                   	push   eax
c001d9f5:	e8 dc 3a ff ff       	call   c00114d6 <TSS::setESP(unsigned long)>
c001d9fa:	83 c4 1c             	add    esp,0x1c
c001d9fd:	c3                   	ret    

c001d9fe <Process::addArgs(char**)>:
c001d9fe:	57                   	push   edi
c001d9ff:	56                   	push   esi
c001da00:	53                   	push   ebx
c001da01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001da05:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001da09:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001da13:	85 ff                	test   edi,edi
c001da15:	74 3d                	je     c001da54 <Process::addArgs(char**)+0x56>
c001da17:	8b 07                	mov    eax,DWORD PTR [edi]
c001da19:	85 c0                	test   eax,eax
c001da1b:	74 37                	je     c001da54 <Process::addArgs(char**)+0x56>
c001da1d:	31 db                	xor    ebx,ebx
c001da1f:	83 ec 0c             	sub    esp,0xc
c001da22:	50                   	push   eax
c001da23:	e8 6c 2d fe ff       	call   c0000794 <strlen>
c001da28:	40                   	inc    eax
c001da29:	89 04 24             	mov    DWORD PTR [esp],eax
c001da2c:	e8 0f 1e ff ff       	call   c000f840 <malloc>
c001da31:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001da38:	5a                   	pop    edx
c001da39:	59                   	pop    ecx
c001da3a:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001da3d:	43                   	inc    ebx
c001da3e:	50                   	push   eax
c001da3f:	e8 f0 2d fe ff       	call   c0000834 <strcpy>
c001da44:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001da4a:	83 c4 10             	add    esp,0x10
c001da4d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001da50:	85 c0                	test   eax,eax
c001da52:	75 cb                	jne    c001da1f <Process::addArgs(char**)+0x21>
c001da54:	5b                   	pop    ebx
c001da55:	5e                   	pop    esi
c001da56:	5f                   	pop    edi
c001da57:	c3                   	ret    

c001da58 <Process::Process(char const*, Process*, char**)>:
c001da58:	56                   	push   esi
c001da59:	53                   	push   ebx
c001da5a:	83 ec 14             	sub    esp,0x14
c001da5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da61:	05 0c 02 00 00       	add    eax,0x20c
c001da66:	bb 07 00 00 00       	mov    ebx,0x7
c001da6b:	89 c6                	mov    esi,eax
c001da6d:	85 db                	test   ebx,ebx
c001da6f:	78 12                	js     c001da83 <Process::Process(char const*, Process*, char**)+0x2b>
c001da71:	83 ec 0c             	sub    esp,0xc
c001da74:	56                   	push   esi
c001da75:	e8 28 b2 00 00       	call   c0028ca2 <ThreadControlBlock::ThreadControlBlock()>
c001da7a:	83 c4 10             	add    esp,0x10
c001da7d:	83 c6 63             	add    esi,0x63
c001da80:	4b                   	dec    ebx
c001da81:	eb ea                	jmp    c001da6d <Process::Process(char const*, Process*, char**)+0x15>
c001da83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da87:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001da8e:	83 ec 0c             	sub    esp,0xc
c001da91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da95:	e8 9a c9 ff ff       	call   c001a434 <Krnl::newProcessEnv(Process*)>
c001da9a:	83 c4 10             	add    esp,0x10
c001da9d:	89 c2                	mov    edx,eax
c001da9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daa3:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001daa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daad:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dab6:	a1 50 db 02 c0       	mov    eax,ds:0xc002db50
c001dabb:	8d 50 01             	lea    edx,[eax+0x1]
c001dabe:	89 15 50 db 02 c0    	mov    DWORD PTR ds:0xc002db50,edx
c001dac4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dac8:	89 02                	mov    DWORD PTR [edx],eax
c001daca:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001dad2:	83 ec 0c             	sub    esp,0xc
c001dad5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001dad9:	e8 62 1d ff ff       	call   c000f840 <malloc>
c001dade:	83 c4 10             	add    esp,0x10
c001dae1:	89 c3                	mov    ebx,eax
c001dae3:	83 ec 08             	sub    esp,0x8
c001dae6:	6a 00                	push   0x0
c001dae8:	53                   	push   ebx
c001dae9:	e8 28 4d ff ff       	call   c0012816 <VAS::VAS(bool)>
c001daee:	83 c4 10             	add    esp,0x10
c001daf1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daf5:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dafb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daff:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001db09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db0d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001db11:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001db17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db1b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db21:	85 c0                	test   eax,eax
c001db23:	74 42                	je     c001db67 <Process::Process(char const*, Process*, char**)+0x10f>
c001db25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db29:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db2f:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001db35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db39:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001db3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db43:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db49:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001db4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db53:	05 0c 01 00 00       	add    eax,0x10c
c001db58:	83 ec 08             	sub    esp,0x8
c001db5b:	52                   	push   edx
c001db5c:	50                   	push   eax
c001db5d:	e8 d2 2c fe ff       	call   c0000834 <strcpy>
c001db62:	83 c4 10             	add    esp,0x10
c001db65:	eb 63                	jmp    c001dbca <Process::Process(char const*, Process*, char**)+0x172>
c001db67:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001db6f:	83 ec 0c             	sub    esp,0xc
c001db72:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001db76:	e8 c5 1c ff ff       	call   c000f840 <malloc>
c001db7b:	83 c4 10             	add    esp,0x10
c001db7e:	89 c3                	mov    ebx,eax
c001db80:	83 ec 08             	sub    esp,0x8
c001db83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db87:	53                   	push   ebx
c001db88:	e8 47 36 ff ff       	call   c00111d4 <VgaText::VgaText(char const*)>
c001db8d:	83 c4 10             	add    esp,0x10
c001db90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db94:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001db9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db9e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dba4:	83 ec 0c             	sub    esp,0xc
c001dba7:	50                   	push   eax
c001dba8:	e8 1a 2a ff ff       	call   c00105c7 <addToTerminalCycle(VgaText*)>
c001dbad:	83 c4 10             	add    esp,0x10
c001dbb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbb4:	05 0c 01 00 00       	add    eax,0x10c
c001dbb9:	83 ec 08             	sub    esp,0x8
c001dbbc:	68 ab c3 02 c0       	push   0xc002c3ab
c001dbc1:	50                   	push   eax
c001dbc2:	e8 6d 2c fe ff       	call   c0000834 <strcpy>
c001dbc7:	83 c4 10             	add    esp,0x10
c001dbca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbce:	83 c0 0c             	add    eax,0xc
c001dbd1:	83 ec 08             	sub    esp,0x8
c001dbd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbd8:	50                   	push   eax
c001dbd9:	e8 56 2c fe ff       	call   c0000834 <strcpy>
c001dbde:	83 c4 10             	add    esp,0x10
c001dbe1:	83 ec 08             	sub    esp,0x8
c001dbe4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dbe8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbec:	e8 0d fe ff ff       	call   c001d9fe <Process::addArgs(char**)>
c001dbf1:	83 c4 10             	add    esp,0x10
c001dbf4:	83 ec 08             	sub    esp,0x8
c001dbf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbfb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbff:	e8 87 ee ff ff       	call   c001ca8b <Thr::loadProgramIntoMemory(Process*, char const*)>
c001dc04:	83 c4 10             	add    esp,0x10
c001dc07:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dc0b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dc0f:	83 f0 01             	xor    eax,0x1
c001dc12:	88 c2                	mov    dl,al
c001dc14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc18:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001dc1e:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dc23:	83 ec 08             	sub    esp,0x8
c001dc26:	50                   	push   eax
c001dc27:	68 a8 c4 02 c0       	push   0xc002c4a8
c001dc2c:	e8 00 53 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001dc31:	83 c4 10             	add    esp,0x10
c001dc34:	90                   	nop
c001dc35:	83 c4 14             	add    esp,0x14
c001dc38:	5b                   	pop    ebx
c001dc39:	5e                   	pop    esi
c001dc3a:	c3                   	ret    
c001dc3b:	90                   	nop

c001dc3c <Process::Process(bool, char const*, Process*, char**)>:
c001dc3c:	56                   	push   esi
c001dc3d:	53                   	push   ebx
c001dc3e:	83 ec 24             	sub    esp,0x24
c001dc41:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dc45:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dc49:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc4d:	05 0c 02 00 00       	add    eax,0x20c
c001dc52:	bb 07 00 00 00       	mov    ebx,0x7
c001dc57:	89 c6                	mov    esi,eax
c001dc59:	85 db                	test   ebx,ebx
c001dc5b:	78 12                	js     c001dc6f <Process::Process(bool, char const*, Process*, char**)+0x33>
c001dc5d:	83 ec 0c             	sub    esp,0xc
c001dc60:	56                   	push   esi
c001dc61:	e8 3c b0 00 00       	call   c0028ca2 <ThreadControlBlock::ThreadControlBlock()>
c001dc66:	83 c4 10             	add    esp,0x10
c001dc69:	83 c6 63             	add    esi,0x63
c001dc6c:	4b                   	dec    ebx
c001dc6d:	eb ea                	jmp    c001dc59 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001dc6f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc73:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dc7a:	83 ec 0c             	sub    esp,0xc
c001dc7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dc81:	e8 ae c7 ff ff       	call   c001a434 <Krnl::newProcessEnv(Process*)>
c001dc86:	83 c4 10             	add    esp,0x10
c001dc89:	89 c2                	mov    edx,eax
c001dc8b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc8f:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dc95:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc99:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dca2:	a1 50 db 02 c0       	mov    eax,ds:0xc002db50
c001dca7:	8d 50 01             	lea    edx,[eax+0x1]
c001dcaa:	89 15 50 db 02 c0    	mov    DWORD PTR ds:0xc002db50,edx
c001dcb0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dcb4:	89 02                	mov    DWORD PTR [edx],eax
c001dcb6:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001dcbe:	83 ec 0c             	sub    esp,0xc
c001dcc1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001dcc5:	e8 76 1b ff ff       	call   c000f840 <malloc>
c001dcca:	83 c4 10             	add    esp,0x10
c001dccd:	89 c3                	mov    ebx,eax
c001dccf:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dcd4:	83 ec 08             	sub    esp,0x8
c001dcd7:	50                   	push   eax
c001dcd8:	53                   	push   ebx
c001dcd9:	e8 38 4b ff ff       	call   c0012816 <VAS::VAS(bool)>
c001dcde:	83 c4 10             	add    esp,0x10
c001dce1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dce5:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dceb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcef:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dcf9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcfd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dd01:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dd07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd0b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd11:	85 c0                	test   eax,eax
c001dd13:	74 42                	je     c001dd57 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001dd15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd19:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd1f:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dd25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd29:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dd2f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd33:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd39:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dd3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd43:	05 0c 01 00 00       	add    eax,0x10c
c001dd48:	83 ec 08             	sub    esp,0x8
c001dd4b:	52                   	push   edx
c001dd4c:	50                   	push   eax
c001dd4d:	e8 e2 2a fe ff       	call   c0000834 <strcpy>
c001dd52:	83 c4 10             	add    esp,0x10
c001dd55:	eb 63                	jmp    c001ddba <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001dd57:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001dd5f:	83 ec 0c             	sub    esp,0xc
c001dd62:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001dd66:	e8 d5 1a ff ff       	call   c000f840 <malloc>
c001dd6b:	83 c4 10             	add    esp,0x10
c001dd6e:	89 c3                	mov    ebx,eax
c001dd70:	83 ec 08             	sub    esp,0x8
c001dd73:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dd77:	53                   	push   ebx
c001dd78:	e8 57 34 ff ff       	call   c00111d4 <VgaText::VgaText(char const*)>
c001dd7d:	83 c4 10             	add    esp,0x10
c001dd80:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd84:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dd8a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd8e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dd94:	83 ec 0c             	sub    esp,0xc
c001dd97:	50                   	push   eax
c001dd98:	e8 2a 28 ff ff       	call   c00105c7 <addToTerminalCycle(VgaText*)>
c001dd9d:	83 c4 10             	add    esp,0x10
c001dda0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dda4:	05 0c 01 00 00       	add    eax,0x10c
c001dda9:	83 ec 08             	sub    esp,0x8
c001ddac:	68 ab c3 02 c0       	push   0xc002c3ab
c001ddb1:	50                   	push   eax
c001ddb2:	e8 7d 2a fe ff       	call   c0000834 <strcpy>
c001ddb7:	83 c4 10             	add    esp,0x10
c001ddba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddbe:	83 c0 0c             	add    eax,0xc
c001ddc1:	83 ec 08             	sub    esp,0x8
c001ddc4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001ddc8:	50                   	push   eax
c001ddc9:	e8 66 2a fe ff       	call   c0000834 <strcpy>
c001ddce:	83 c4 10             	add    esp,0x10
c001ddd1:	83 ec 08             	sub    esp,0x8
c001ddd4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ddd8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dddc:	e8 1d fc ff ff       	call   c001d9fe <Process::addArgs(char**)>
c001dde1:	83 c4 10             	add    esp,0x10
c001dde4:	90                   	nop
c001dde5:	83 c4 24             	add    esp,0x24
c001dde8:	5b                   	pop    ebx
c001dde9:	5e                   	pop    esi
c001ddea:	c3                   	ret    

c001ddeb <disableIRQs()>:
c001ddeb:	fa                   	cli    
c001ddec:	ff 05 0c 1b 03 c0    	inc    DWORD PTR ds:0xc0031b0c
c001ddf2:	c3                   	ret    

c001ddf3 <getIRQNestingLevel()>:
c001ddf3:	a1 0c 1b 03 c0       	mov    eax,ds:0xc0031b0c
c001ddf8:	c3                   	ret    

c001ddf9 <enableIRQs()>:
c001ddf9:	a1 0c 1b 03 c0       	mov    eax,ds:0xc0031b0c
c001ddfe:	48                   	dec    eax
c001ddff:	a3 0c 1b 03 c0       	mov    ds:0xc0031b0c,eax
c001de04:	75 01                	jne    c001de07 <enableIRQs()+0xe>
c001de06:	fb                   	sti    
c001de07:	c3                   	ret    

c001de08 <lockScheduler()>:
c001de08:	eb e1                	jmp    c001ddeb <disableIRQs()>

c001de0a <unlockScheduler()>:
c001de0a:	eb ed                	jmp    c001ddf9 <enableIRQs()>

c001de0c <userModeEntryPoint(void*)>:
c001de0c:	83 ec 0c             	sub    esp,0xc
c001de0f:	e8 f6 ff ff ff       	call   c001de0a <unlockScheduler()>
c001de14:	fb                   	sti    
c001de15:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de1a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001de1d:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001de23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001de27:	83 c4 0c             	add    esp,0xc
c001de2a:	e9 fb 24 fe ff       	jmp    c000032a <goToUsermode>

c001de2f <lockStuff()>:
c001de2f:	e8 b7 ff ff ff       	call   c001ddeb <disableIRQs()>
c001de34:	ff 05 08 1b 03 c0    	inc    DWORD PTR ds:0xc0031b08
c001de3a:	c3                   	ret    

c001de3b <taskStartupFunction>:
c001de3b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de40:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001de43:	c3                   	ret    

c001de44 <updateTimeUsed()>:
c001de44:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c001de49:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001de4f:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001de56:	74 50                	je     c001dea8 <updateTimeUsed()+0x64>
c001de58:	57                   	push   edi
c001de59:	56                   	push   esi
c001de5a:	53                   	push   ebx
c001de5b:	0f 31                	rdtsc  
c001de5d:	89 c1                	mov    ecx,eax
c001de5f:	a3 48 1b 03 c0       	mov    ds:0xc0031b48,eax
c001de64:	2b 0d 38 1b 03 c0    	sub    ecx,DWORD PTR ds:0xc0031b38
c001de6a:	89 d3                	mov    ebx,edx
c001de6c:	89 0d 40 1b 03 c0    	mov    DWORD PTR ds:0xc0031b40,ecx
c001de72:	1b 1d 3c 1b 03 c0    	sbb    ebx,DWORD PTR ds:0xc0031b3c
c001de78:	a3 38 1b 03 c0       	mov    ds:0xc0031b38,eax
c001de7d:	89 1d 44 1b 03 c0    	mov    DWORD PTR ds:0xc0031b44,ebx
c001de83:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de88:	89 15 4c 1b 03 c0    	mov    DWORD PTR ds:0xc0031b4c,edx
c001de8e:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001de91:	89 15 3c 1b 03 c0    	mov    DWORD PTR ds:0xc0031b3c,edx
c001de97:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001de9a:	01 f1                	add    ecx,esi
c001de9c:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001de9f:	11 fb                	adc    ebx,edi
c001dea1:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001dea4:	5b                   	pop    ebx
c001dea5:	5e                   	pop    esi
c001dea6:	5f                   	pop    edi
c001dea7:	c3                   	ret    
c001dea8:	c3                   	ret    

c001dea9 <switchToThread(ThreadControlBlock*)>:
c001dea9:	53                   	push   ebx
c001deaa:	83 ec 08             	sub    esp,0x8
c001dead:	a1 08 1b 03 c0       	mov    eax,ds:0xc0031b08
c001deb2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001deb6:	85 c0                	test   eax,eax
c001deb8:	75 30                	jne    c001deea <switchToThread(ThreadControlBlock*)+0x41>
c001deba:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001debd:	3c ff                	cmp    al,0xff
c001debf:	74 25                	je     c001dee6 <switchToThread(ThreadControlBlock*)+0x3d>
c001dec1:	0f b6 d0             	movzx  edx,al
c001dec4:	b8 84 03 00 00       	mov    eax,0x384
c001dec9:	29 d0                	sub    eax,edx
c001decb:	c1 e0 10             	shl    eax,0x10
c001dece:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001ded1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001ded4:	e8 6b ff ff ff       	call   c001de44 <updateTimeUsed()>
c001ded9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001dedd:	83 c4 08             	add    esp,0x8
c001dee0:	5b                   	pop    ebx
c001dee1:	e9 7c 24 fe ff       	jmp    c0000362 <switchToThreadASM>
c001dee6:	31 c0                	xor    eax,eax
c001dee8:	eb e7                	jmp    c001ded1 <switchToThread(ThreadControlBlock*)+0x28>
c001deea:	c7 05 04 1b 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031b04,0x1
c001def4:	83 c4 08             	add    esp,0x8
c001def7:	5b                   	pop    ebx
c001def8:	c3                   	ret    
c001def9:	90                   	nop

c001defa <Semaphore::Semaphore(int)>:
c001defa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001defe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001df02:	89 10                	mov    DWORD PTR [eax],edx
c001df04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df08:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001df0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df13:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001df1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df1e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001df25:	90                   	nop
c001df26:	c3                   	ret    
c001df27:	90                   	nop

c001df28 <Mutex::Mutex()>:
c001df28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df2c:	6a 01                	push   0x1
c001df2e:	50                   	push   eax
c001df2f:	e8 c6 ff ff ff       	call   c001defa <Semaphore::Semaphore(int)>
c001df34:	83 c4 08             	add    esp,0x8
c001df37:	90                   	nop
c001df38:	c3                   	ret    
c001df39:	90                   	nop

c001df3a <Process::createThread(void (*)(void*), void*, int)>:
c001df3a:	55                   	push   ebp
c001df3b:	31 c9                	xor    ecx,ecx
c001df3d:	57                   	push   edi
c001df3e:	56                   	push   esi
c001df3f:	53                   	push   ebx
c001df40:	83 ec 1c             	sub    esp,0x1c
c001df43:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001df47:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001df4e:	89 f2                	mov    edx,esi
c001df50:	0f b7 c2             	movzx  eax,dx
c001df53:	83 e2 01             	and    edx,0x1
c001df56:	74 14                	je     c001df6c <Process::createThread(void (*)(void*), void*, int)+0x32>
c001df58:	d1 f8                	sar    eax,1
c001df5a:	41                   	inc    ecx
c001df5b:	89 c2                	mov    edx,eax
c001df5d:	83 f9 10             	cmp    ecx,0x10
c001df60:	75 ee                	jne    c001df50 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001df62:	83 c4 1c             	add    esp,0x1c
c001df65:	31 c0                	xor    eax,eax
c001df67:	5b                   	pop    ebx
c001df68:	5e                   	pop    esi
c001df69:	5f                   	pop    edi
c001df6a:	5d                   	pop    ebp
c001df6b:	c3                   	ret    
c001df6c:	83 ec 08             	sub    esp,0x8
c001df6f:	b8 01 00 00 00       	mov    eax,0x1
c001df74:	d3 e0                	shl    eax,cl
c001df76:	09 c6                	or     esi,eax
c001df78:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001df7e:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001df85:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001df88:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001df8b:	01 ce                	add    esi,ecx
c001df8d:	89 f0                	mov    eax,esi
c001df8f:	c1 e0 05             	shl    eax,0x5
c001df92:	01 c6                	add    esi,eax
c001df94:	8d 04 33             	lea    eax,[ebx+esi*1]
c001df97:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001df9d:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001dfa3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001dfa7:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001dfad:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001dfb3:	89 ca                	mov    edx,ecx
c001dfb5:	f7 da                	neg    edx
c001dfb7:	c1 e2 15             	shl    edx,0x15
c001dfba:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001dfc0:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001dfc6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001dfca:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001dfd4:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001dfda:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dfde:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001dfe4:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001dfee:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001dff8:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001dfff:	50                   	push   eax
c001e000:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e004:	68 28 1b 03 c0       	push   0xc0031b28
c001e009:	e8 22 ab 00 00       	call   c0028b30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e00e:	83 c4 10             	add    esp,0x10
c001e011:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e015:	83 c4 1c             	add    esp,0x1c
c001e018:	5b                   	pop    ebx
c001e019:	5e                   	pop    esi
c001e01a:	5f                   	pop    edi
c001e01b:	5d                   	pop    ebp
c001e01c:	c3                   	ret    
c001e01d:	90                   	nop

c001e01e <Process::createUserThread()>:
c001e01e:	83 ec 0c             	sub    esp,0xc
c001e021:	68 80 00 00 00       	push   0x80
c001e026:	6a 00                	push   0x0
c001e028:	68 0c de 01 c0       	push   0xc001de0c
c001e02d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e031:	e8 04 ff ff ff       	call   c001df3a <Process::createThread(void (*)(void*), void*, int)>
c001e036:	83 c4 1c             	add    esp,0x1c
c001e039:	c3                   	ret    

c001e03a <setupMultitasking(void (*)())>:
c001e03a:	56                   	push   esi
c001e03b:	53                   	push   ebx
c001e03c:	53                   	push   ebx
c001e03d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e041:	eb 10                	jmp    c001e053 <setupMultitasking(void (*)())+0x19>
c001e043:	83 ec 0c             	sub    esp,0xc
c001e046:	68 28 1b 03 c0       	push   0xc0031b28
c001e04b:	e8 32 aa 00 00       	call   c0028a82 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e050:	83 c4 10             	add    esp,0x10
c001e053:	83 ec 0c             	sub    esp,0xc
c001e056:	68 28 1b 03 c0       	push   0xc0031b28
c001e05b:	e8 06 aa 00 00       	call   c0028a66 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e060:	83 c4 10             	add    esp,0x10
c001e063:	84 c0                	test   al,al
c001e065:	74 dc                	je     c001e043 <setupMultitasking(void (*)())+0x9>
c001e067:	83 ec 0c             	sub    esp,0xc
c001e06a:	68 3f 07 00 00       	push   0x73f
c001e06f:	e8 cc 17 ff ff       	call   c000f840 <malloc>
c001e074:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e07b:	89 c3                	mov    ebx,eax
c001e07d:	6a 00                	push   0x0
c001e07f:	68 af c3 02 c0       	push   0xc002c3af
c001e084:	6a 01                	push   0x1
c001e086:	50                   	push   eax
c001e087:	e8 b0 fb ff ff       	call   c001dc3c <Process::Process(bool, char const*, Process*, char**)>
c001e08c:	83 c4 18             	add    esp,0x18
c001e08f:	89 1d 34 1b 03 c0    	mov    DWORD PTR ds:0xc0031b34,ebx
c001e095:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e09b:	68 d0 c4 02 c0       	push   0xc002c4d0
c001e0a0:	e8 8c 4e ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001e0a5:	58                   	pop    eax
c001e0a6:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e0ac:	e8 98 2c ff ff       	call   c0010d49 <setActiveTerminal(VgaText*)>
c001e0b1:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e0b9:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e0bf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e0c2:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e0cc:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e0d2:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e0d8:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e0e2:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e0ec:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e0f6:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e0fc:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e102:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e10c:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e112:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e11c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e122:	5a                   	pop    edx
c001e123:	59                   	pop    ecx
c001e124:	68 ab c3 02 c0       	push   0xc002c3ab
c001e129:	50                   	push   eax
c001e12a:	e8 05 27 fe ff       	call   c0000834 <strcpy>
c001e12f:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e136:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e13a:	83 c4 14             	add    esp,0x14
c001e13d:	5b                   	pop    ebx
c001e13e:	5e                   	pop    esi
c001e13f:	e9 10 22 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e144 <schedule()>:
c001e144:	a1 08 1b 03 c0       	mov    eax,ds:0xc0031b08
c001e149:	85 c0                	test   eax,eax
c001e14b:	74 0b                	je     c001e158 <schedule()+0x14>
c001e14d:	c7 05 04 1b 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031b04,0x1
c001e157:	c3                   	ret    
c001e158:	53                   	push   ebx
c001e159:	83 ec 14             	sub    esp,0x14
c001e15c:	68 28 1b 03 c0       	push   0xc0031b28
c001e161:	e8 00 a9 00 00       	call   c0028a66 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e166:	83 c4 10             	add    esp,0x10
c001e169:	84 c0                	test   al,al
c001e16b:	75 38                	jne    c001e1a5 <schedule()+0x61>
c001e16d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e172:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e175:	4a                   	dec    edx
c001e176:	74 32                	je     c001e1aa <schedule()+0x66>
c001e178:	83 ec 0c             	sub    esp,0xc
c001e17b:	68 28 1b 03 c0       	push   0xc0031b28
c001e180:	e8 d9 a8 00 00       	call   c0028a5e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e185:	c7 04 24 28 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b28
c001e18c:	89 c3                	mov    ebx,eax
c001e18e:	e8 ef a8 00 00       	call   c0028a82 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e193:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e19a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e19d:	e8 07 fd ff ff       	call   c001dea9 <switchToThread(ThreadControlBlock*)>
c001e1a2:	83 c4 10             	add    esp,0x10
c001e1a5:	83 c4 08             	add    esp,0x8
c001e1a8:	5b                   	pop    ebx
c001e1a9:	c3                   	ret    
c001e1aa:	83 ec 08             	sub    esp,0x8
c001e1ad:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e1b4:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e1ba:	68 28 1b 03 c0       	push   0xc0031b28
c001e1bf:	e8 6c a9 00 00       	call   c0028b30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e1c4:	83 c4 10             	add    esp,0x10
c001e1c7:	eb af                	jmp    c001e178 <schedule()+0x34>

c001e1c9 <unlockStuff()>:
c001e1c9:	a1 08 1b 03 c0       	mov    eax,ds:0xc0031b08
c001e1ce:	48                   	dec    eax
c001e1cf:	a3 08 1b 03 c0       	mov    ds:0xc0031b08,eax
c001e1d4:	75 09                	jne    c001e1df <unlockStuff()+0x16>
c001e1d6:	a1 04 1b 03 c0       	mov    eax,ds:0xc0031b04
c001e1db:	85 c0                	test   eax,eax
c001e1dd:	75 05                	jne    c001e1e4 <unlockStuff()+0x1b>
c001e1df:	e9 15 fc ff ff       	jmp    c001ddf9 <enableIRQs()>
c001e1e4:	83 ec 0c             	sub    esp,0xc
c001e1e7:	c7 05 04 1b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031b04,0x0
c001e1f1:	e8 4e ff ff ff       	call   c001e144 <schedule()>
c001e1f6:	83 c4 0c             	add    esp,0xc
c001e1f9:	e9 fb fb ff ff       	jmp    c001ddf9 <enableIRQs()>

c001e1fe <Semaphore::tryAcquire()>:
c001e1fe:	83 ec 0c             	sub    esp,0xc
c001e201:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e205:	e8 25 fc ff ff       	call   c001de2f <lockStuff()>
c001e20a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e20d:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e20f:	7c 0b                	jl     c001e21c <Semaphore::tryAcquire()+0x1e>
c001e211:	e8 b3 ff ff ff       	call   c001e1c9 <unlockStuff()>
c001e216:	31 c0                	xor    eax,eax
c001e218:	83 c4 0c             	add    esp,0xc
c001e21b:	c3                   	ret    
c001e21c:	42                   	inc    edx
c001e21d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e220:	e8 a4 ff ff ff       	call   c001e1c9 <unlockStuff()>
c001e225:	b0 01                	mov    al,0x1
c001e227:	83 c4 0c             	add    esp,0xc
c001e22a:	c3                   	ret    
c001e22b:	90                   	nop

c001e22c <Semaphore::assertLocked(char const*)>:
c001e22c:	83 ec 0c             	sub    esp,0xc
c001e22f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e233:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e237:	e8 f3 fb ff ff       	call   c001de2f <lockStuff()>
c001e23c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e23e:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001e241:	7c 05                	jl     c001e248 <Semaphore::assertLocked(char const*)+0x1c>
c001e243:	83 c4 0c             	add    esp,0xc
c001e246:	eb 81                	jmp    c001e1c9 <unlockStuff()>
c001e248:	83 ec 0c             	sub    esp,0xc
c001e24b:	52                   	push   edx
c001e24c:	e8 92 c3 ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c001e251:	83 c4 10             	add    esp,0x10
c001e254:	83 c4 0c             	add    esp,0xc
c001e257:	e9 6d ff ff ff       	jmp    c001e1c9 <unlockStuff()>

c001e25c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e25c:	83 ec 0c             	sub    esp,0xc
c001e25f:	e8 8f fb ff ff       	call   c001ddf3 <getIRQNestingLevel()>
c001e264:	83 ec 08             	sub    esp,0x8
c001e267:	50                   	push   eax
c001e268:	68 04 c5 02 c0       	push   0xc002c504
c001e26d:	e8 bf 4c ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001e272:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e276:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e27b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e27e:	e8 c1 fe ff ff       	call   c001e144 <schedule()>
c001e283:	e8 82 fb ff ff       	call   c001de0a <unlockScheduler()>
c001e288:	e8 66 fb ff ff       	call   c001ddf3 <getIRQNestingLevel()>
c001e28d:	5a                   	pop    edx
c001e28e:	59                   	pop    ecx
c001e28f:	50                   	push   eax
c001e290:	68 38 c5 02 c0       	push   0xc002c538
c001e295:	e8 97 4c ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001e29a:	83 c4 1c             	add    esp,0x1c
c001e29d:	c3                   	ret    

c001e29e <blockTask(TaskState)>:
c001e29e:	83 ec 0c             	sub    esp,0xc
c001e2a1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e2a5:	e8 5e fb ff ff       	call   c001de08 <lockScheduler()>
c001e2aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2af:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e2b2:	e8 8d fe ff ff       	call   c001e144 <schedule()>
c001e2b7:	83 c4 0c             	add    esp,0xc
c001e2ba:	e9 4b fb ff ff       	jmp    c001de0a <unlockScheduler()>

c001e2bf <waitTask(int, int*, int)>:
c001e2bf:	83 ec 18             	sub    esp,0x18
c001e2c2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2c7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e2cb:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e2ce:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e2d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2d7:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e2da:	6a 07                	push   0x7
c001e2dc:	e8 bd ff ff ff       	call   c001e29e <blockTask(TaskState)>
c001e2e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2e6:	83 c4 10             	add    esp,0x10
c001e2e9:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e2ec:	85 d2                	test   edx,edx
c001e2ee:	74 0a                	je     c001e2fa <waitTask(int, int*, int)+0x3b>
c001e2f0:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e2f3:	89 02                	mov    DWORD PTR [edx],eax
c001e2f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2fa:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e2fd:	83 c4 0c             	add    esp,0xc
c001e300:	c3                   	ret    

c001e301 <nanoSleepUntil(unsigned long long)>:
c001e301:	83 ec 0c             	sub    esp,0xc
c001e304:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e308:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e30c:	3b 05 50 ec 02 c0    	cmp    eax,DWORD PTR ds:0xc002ec50
c001e312:	89 d1                	mov    ecx,edx
c001e314:	1b 0d 54 ec 02 c0    	sbb    ecx,DWORD PTR ds:0xc002ec54
c001e31a:	73 04                	jae    c001e320 <nanoSleepUntil(unsigned long long)+0x1f>
c001e31c:	83 c4 0c             	add    esp,0xc
c001e31f:	c3                   	ret    
c001e320:	e8 0a fb ff ff       	call   c001de2f <lockStuff()>
c001e325:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e32b:	83 ec 08             	sub    esp,0x8
c001e32e:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e331:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e334:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e33a:	68 1c 1b 03 c0       	push   0xc0031b1c
c001e33f:	e8 ec a7 00 00       	call   c0028b30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e344:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e34b:	e8 4e ff ff ff       	call   c001e29e <blockTask(TaskState)>
c001e350:	83 c4 1c             	add    esp,0x1c
c001e353:	e9 71 fe ff ff       	jmp    c001e1c9 <unlockStuff()>

c001e358 <nanoSleep(unsigned long long)>:
c001e358:	a1 50 ec 02 c0       	mov    eax,ds:0xc002ec50
c001e35d:	8b 15 54 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ec54
c001e363:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e367:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e36b:	eb 94                	jmp    c001e301 <nanoSleepUntil(unsigned long long)>

c001e36d <sleep(unsigned long long)>:
c001e36d:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e375:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e37a:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e37e:	01 ca                	add    edx,ecx
c001e380:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e384:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e388:	eb ce                	jmp    c001e358 <nanoSleep(unsigned long long)>

c001e38a <Semaphore::acquire()>:
c001e38a:	83 ec 0c             	sub    esp,0xc
c001e38d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e391:	e8 99 fa ff ff       	call   c001de2f <lockStuff()>
c001e396:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e399:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e39b:	7d 0c                	jge    c001e3a9 <Semaphore::acquire()+0x1f>
c001e39d:	42                   	inc    edx
c001e39e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e3a1:	83 c4 0c             	add    esp,0xc
c001e3a4:	e9 20 fe ff ff       	jmp    c001e1c9 <unlockStuff()>
c001e3a9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e3af:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001e3b6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e3b9:	85 d2                	test   edx,edx
c001e3bb:	74 2a                	je     c001e3e7 <Semaphore::acquire()+0x5d>
c001e3bd:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e3c0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e3c6:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001e3c9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e3cf:	83 ec 0c             	sub    esp,0xc
c001e3d2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e3d5:	6a 05                	push   0x5
c001e3d7:	e8 c2 fe ff ff       	call   c001e29e <blockTask(TaskState)>
c001e3dc:	83 c4 10             	add    esp,0x10
c001e3df:	83 c4 0c             	add    esp,0xc
c001e3e2:	e9 e2 fd ff ff       	jmp    c001e1c9 <unlockStuff()>
c001e3e7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e3ed:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e3f0:	eb d7                	jmp    c001e3c9 <Semaphore::acquire()+0x3f>

c001e3f2 <taskReturned>:
c001e3f2:	83 ec 18             	sub    esp,0x18
c001e3f5:	68 6c c5 02 c0       	push   0xc002c56c
c001e3fa:	e8 e4 c1 ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c001e3ff:	83 c4 10             	add    esp,0x10
c001e402:	83 ec 0c             	sub    esp,0xc
c001e405:	6a 02                	push   0x2
c001e407:	e8 92 fe ff ff       	call   c001e29e <blockTask(TaskState)>
c001e40c:	e8 f7 f9 ff ff       	call   c001de08 <lockScheduler()>
c001e411:	e8 2e fd ff ff       	call   c001e144 <schedule()>
c001e416:	e8 ef f9 ff ff       	call   c001de0a <unlockScheduler()>
c001e41b:	83 c4 10             	add    esp,0x10
c001e41e:	eb e2                	jmp    c001e402 <taskReturned+0x10>

c001e420 <unblockTask(ThreadControlBlock*)>:
c001e420:	53                   	push   ebx
c001e421:	83 ec 08             	sub    esp,0x8
c001e424:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e428:	e8 db f9 ff ff       	call   c001de08 <lockScheduler()>
c001e42d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e430:	85 c0                	test   eax,eax
c001e432:	74 5c                	je     c001e490 <unblockTask(ThreadControlBlock*)+0x70>
c001e434:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e437:	48                   	dec    eax
c001e438:	74 31                	je     c001e46b <unblockTask(ThreadControlBlock*)+0x4b>
c001e43a:	83 ec 0c             	sub    esp,0xc
c001e43d:	68 28 1b 03 c0       	push   0xc0031b28
c001e442:	e8 17 a6 00 00       	call   c0028a5e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e447:	83 c4 10             	add    esp,0x10
c001e44a:	85 c0                	test   eax,eax
c001e44c:	75 17                	jne    c001e465 <unblockTask(ThreadControlBlock*)+0x45>
c001e44e:	eb 65                	jmp    c001e4b5 <unblockTask(ThreadControlBlock*)+0x95>
c001e450:	83 ec 08             	sub    esp,0x8
c001e453:	50                   	push   eax
c001e454:	68 28 1b 03 c0       	push   0xc0031b28
c001e459:	e8 da a8 00 00       	call   c0028d38 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e45e:	83 c4 10             	add    esp,0x10
c001e461:	85 c0                	test   eax,eax
c001e463:	74 50                	je     c001e4b5 <unblockTask(ThreadControlBlock*)+0x95>
c001e465:	39 c3                	cmp    ebx,eax
c001e467:	75 e7                	jne    c001e450 <unblockTask(ThreadControlBlock*)+0x30>
c001e469:	eb 1c                	jmp    c001e487 <unblockTask(ThreadControlBlock*)+0x67>
c001e46b:	83 ec 0c             	sub    esp,0xc
c001e46e:	68 5c c6 02 c0       	push   0xc002c65c
c001e473:	e8 b9 4a ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001e478:	c7 04 24 e8 c5 02 c0 	mov    DWORD PTR [esp],0xc002c5e8
c001e47f:	e8 ad 4a ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001e484:	83 c4 10             	add    esp,0x10
c001e487:	83 c4 08             	add    esp,0x8
c001e48a:	5b                   	pop    ebx
c001e48b:	e9 7a f9 ff ff       	jmp    c001de0a <unlockScheduler()>
c001e490:	83 ec 0c             	sub    esp,0xc
c001e493:	68 a0 c5 02 c0       	push   0xc002c5a0
c001e498:	e8 94 4a ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001e49d:	c7 04 24 e8 c5 02 c0 	mov    DWORD PTR [esp],0xc002c5e8
c001e4a4:	e8 88 4a ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001e4a9:	83 c4 10             	add    esp,0x10
c001e4ac:	83 c4 08             	add    esp,0x8
c001e4af:	5b                   	pop    ebx
c001e4b0:	e9 55 f9 ff ff       	jmp    c001de0a <unlockScheduler()>
c001e4b5:	83 ec 08             	sub    esp,0x8
c001e4b8:	53                   	push   ebx
c001e4b9:	68 28 1b 03 c0       	push   0xc0031b28
c001e4be:	e8 6d a6 00 00       	call   c0028b30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e4c3:	83 c4 10             	add    esp,0x10
c001e4c6:	83 c4 08             	add    esp,0x8
c001e4c9:	5b                   	pop    ebx
c001e4ca:	e9 3b f9 ff ff       	jmp    c001de0a <unlockScheduler()>

c001e4cf <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e4cf:	55                   	push   ebp
c001e4d0:	57                   	push   edi
c001e4d1:	56                   	push   esi
c001e4d2:	53                   	push   ebx
c001e4d3:	83 ec 1c             	sub    esp,0x1c
c001e4d6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e4da:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e4dd:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e4e3:	85 ff                	test   edi,edi
c001e4e5:	7e 20                	jle    c001e507 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e4e7:	31 f6                	xor    esi,esi
c001e4e9:	83 ec 0c             	sub    esp,0xc
c001e4ec:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e4f3:	46                   	inc    esi
c001e4f4:	e8 57 13 ff ff       	call   c000f850 <free>
c001e4f9:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e4fc:	83 c4 10             	add    esp,0x10
c001e4ff:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e505:	7f e2                	jg     c001e4e9 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e507:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e511:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e516:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e519:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e51c:	d3 c0                	rol    eax,cl
c001e51e:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e525:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e528:	89 f7                	mov    edi,esi
c001e52a:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e532:	0f 85 74 01 00 00    	jne    c001e6ac <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e538:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e53e:	85 ed                	test   ebp,ebp
c001e540:	74 1b                	je     c001e55d <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e542:	83 ec 0c             	sub    esp,0xc
c001e545:	55                   	push   ebp
c001e546:	e8 05 be ff ff       	call   c001a350 <EnvVarContainer::~EnvVarContainer()>
c001e54b:	59                   	pop    ecx
c001e54c:	5e                   	pop    esi
c001e54d:	6a 0c                	push   0xc
c001e54f:	55                   	push   ebp
c001e550:	e8 fc 48 ff ff       	call   c0012e51 <operator delete(void*, unsigned long)>
c001e555:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e558:	83 c4 10             	add    esp,0x10
c001e55b:	89 f7                	mov    edi,esi
c001e55d:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e563:	85 c0                	test   eax,eax
c001e565:	0f 84 aa 00 00 00    	je     c001e615 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e56b:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e56e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e572:	31 c9                	xor    ecx,ecx
c001e574:	eb 10                	jmp    c001e586 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e576:	41                   	inc    ecx
c001e577:	83 f9 10             	cmp    ecx,0x10
c001e57a:	0f 84 95 00 00 00    	je     c001e615 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e580:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e586:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e58d:	d3 fa                	sar    edx,cl
c001e58f:	83 e2 01             	and    edx,0x1
c001e592:	74 e2                	je     c001e576 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e594:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e597:	01 ca                	add    edx,ecx
c001e599:	89 d5                	mov    ebp,edx
c001e59b:	c1 e5 05             	shl    ebp,0x5
c001e59e:	01 ea                	add    edx,ebp
c001e5a0:	01 d0                	add    eax,edx
c001e5a2:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e5a8:	83 fd 07             	cmp    ebp,0x7
c001e5ab:	75 c9                	jne    c001e576 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e5ad:	05 40 02 00 00       	add    eax,0x240
c001e5b2:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e5b5:	83 fd ff             	cmp    ebp,0xffffffff
c001e5b8:	0f 8c 08 01 00 00    	jl     c001e6c6 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e5be:	0f 84 b9 01 00 00    	je     c001e77d <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e5c4:	85 ed                	test   ebp,ebp
c001e5c6:	0f 84 a0 01 00 00    	je     c001e76c <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e5cc:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e5ce:	75 a6                	jne    c001e576 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e5d0:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e5d6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e5da:	01 d0                	add    eax,edx
c001e5dc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e5e0:	83 ec 0c             	sub    esp,0xc
c001e5e3:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e5e9:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e5ec:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e5f2:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e5f9:	50                   	push   eax
c001e5fa:	e8 21 fe ff ff       	call   c001e420 <unblockTask(ThreadControlBlock*)>
c001e5ff:	83 c4 10             	add    esp,0x10
c001e602:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e605:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e609:	89 f7                	mov    edi,esi
c001e60b:	41                   	inc    ecx
c001e60c:	83 f9 10             	cmp    ecx,0x10
c001e60f:	0f 85 6b ff ff ff    	jne    c001e580 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e615:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e61b:	85 c0                	test   eax,eax
c001e61d:	74 5d                	je     c001e67c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e61f:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e625:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e62b:	74 4f                	je     c001e67c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e62d:	83 ec 0c             	sub    esp,0xc
c001e630:	68 28 1b 03 c0       	push   0xc0031b28
c001e635:	e8 24 a4 00 00       	call   c0028a5e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e63a:	c7 04 24 28 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b28
c001e641:	89 c7                	mov    edi,eax
c001e643:	e8 1e a4 00 00       	call   c0028a66 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e648:	83 c4 10             	add    esp,0x10
c001e64b:	84 c0                	test   al,al
c001e64d:	0f 84 e4 00 00 00    	je     c001e737 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e653:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e656:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e65c:	85 d2                	test   edx,edx
c001e65e:	74 0f                	je     c001e66f <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e660:	83 ec 0c             	sub    esp,0xc
c001e663:	8b 02                	mov    eax,DWORD PTR [edx]
c001e665:	52                   	push   edx
c001e666:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e669:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e66c:	83 c4 10             	add    esp,0x10
c001e66f:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e679:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e67c:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e682:	85 db                	test   ebx,ebx
c001e684:	74 16                	je     c001e69c <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e686:	83 ec 0c             	sub    esp,0xc
c001e689:	53                   	push   ebx
c001e68a:	e8 73 3b ff ff       	call   c0012202 <VAS::~VAS()>
c001e68f:	58                   	pop    eax
c001e690:	5a                   	pop    edx
c001e691:	6a 10                	push   0x10
c001e693:	53                   	push   ebx
c001e694:	e8 b8 47 ff ff       	call   c0012e51 <operator delete(void*, unsigned long)>
c001e699:	83 c4 10             	add    esp,0x10
c001e69c:	83 ec 0c             	sub    esp,0xc
c001e69f:	68 b6 c3 02 c0       	push   0xc002c3b6
c001e6a4:	e8 88 48 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001e6a9:	83 c4 10             	add    esp,0x10
c001e6ac:	83 ec 08             	sub    esp,0x8
c001e6af:	68 3f 07 00 00       	push   0x73f
c001e6b4:	68 c4 c3 02 c0       	push   0xc002c3c4
c001e6b9:	e8 73 48 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001e6be:	83 c4 2c             	add    esp,0x2c
c001e6c1:	5b                   	pop    ebx
c001e6c2:	5e                   	pop    esi
c001e6c3:	5f                   	pop    edi
c001e6c4:	5d                   	pop    ebp
c001e6c5:	c3                   	ret    
c001e6c6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e6ca:	83 ec 0c             	sub    esp,0xc
c001e6cd:	68 a0 c6 02 c0       	push   0xc002c6a0
c001e6d2:	e8 0c bf ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c001e6d7:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e6da:	83 c4 10             	add    esp,0x10
c001e6dd:	89 f7                	mov    edi,esi
c001e6df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e6e3:	e9 8e fe ff ff       	jmp    c001e576 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e6e8:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e6ee:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e6f4:	75 1c                	jne    c001e712 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e6f6:	83 ec 0c             	sub    esp,0xc
c001e6f9:	68 08 c7 02 c0       	push   0xc002c708
c001e6fe:	e8 2e 48 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001e703:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e70a:	e8 8f fb ff ff       	call   c001e29e <blockTask(TaskState)>
c001e70f:	83 c4 10             	add    esp,0x10
c001e712:	83 ec 08             	sub    esp,0x8
c001e715:	56                   	push   esi
c001e716:	68 28 1b 03 c0       	push   0xc0031b28
c001e71b:	e8 10 a4 00 00       	call   c0028b30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e720:	c7 04 24 28 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b28
c001e727:	e8 32 a3 00 00       	call   c0028a5e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e72c:	83 c4 10             	add    esp,0x10
c001e72f:	39 f8                	cmp    eax,edi
c001e731:	0f 84 1c ff ff ff    	je     c001e653 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e737:	83 ec 0c             	sub    esp,0xc
c001e73a:	68 28 1b 03 c0       	push   0xc0031b28
c001e73f:	e8 1a a3 00 00       	call   c0028a5e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e744:	c7 04 24 28 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b28
c001e74b:	89 c6                	mov    esi,eax
c001e74d:	e8 30 a3 00 00       	call   c0028a82 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e752:	83 c4 10             	add    esp,0x10
c001e755:	39 f3                	cmp    ebx,esi
c001e757:	74 b9                	je     c001e712 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e759:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e75c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e75f:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e765:	75 ab                	jne    c001e712 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e767:	e9 7c ff ff ff       	jmp    c001e6e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e76c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e770:	83 ec 0c             	sub    esp,0xc
c001e773:	68 d4 c6 02 c0       	push   0xc002c6d4
c001e778:	e9 55 ff ff ff       	jmp    c001e6d2 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e77d:	8b 36                	mov    esi,DWORD PTR [esi]
c001e77f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e783:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e786:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e789:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e78f:	01 d7                	add    edi,edx
c001e791:	89 f8                	mov    eax,edi
c001e793:	e9 44 fe ff ff       	jmp    c001e5dc <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e798 <cleanerTaskFunction(void*)>:
c001e798:	53                   	push   ebx
c001e799:	83 ec 08             	sub    esp,0x8
c001e79c:	e8 69 f6 ff ff       	call   c001de0a <unlockScheduler()>
c001e7a1:	e8 62 f6 ff ff       	call   c001de08 <lockScheduler()>
c001e7a6:	80 3d ec 1a 03 c0 00 	cmp    BYTE PTR ds:0xc0031aec,0x0
c001e7ad:	0f 85 8e 00 00 00    	jne    c001e841 <cleanerTaskFunction(void*)+0xa9>
c001e7b3:	83 ec 0c             	sub    esp,0xc
c001e7b6:	6a 02                	push   0x2
c001e7b8:	e8 9f fa ff ff       	call   c001e25c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e7bd:	83 c4 10             	add    esp,0x10
c001e7c0:	c6 05 ec 1a 03 c0 00 	mov    BYTE PTR ds:0xc0031aec,0x0
c001e7c7:	e8 63 f6 ff ff       	call   c001de2f <lockStuff()>
c001e7cc:	e8 37 f6 ff ff       	call   c001de08 <lockScheduler()>
c001e7d1:	83 ec 0c             	sub    esp,0xc
c001e7d4:	68 10 1b 03 c0       	push   0xc0031b10
c001e7d9:	e8 88 a2 00 00       	call   c0028a66 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e7de:	83 c4 10             	add    esp,0x10
c001e7e1:	84 c0                	test   al,al
c001e7e3:	75 40                	jne    c001e825 <cleanerTaskFunction(void*)+0x8d>
c001e7e5:	83 ec 0c             	sub    esp,0xc
c001e7e8:	68 10 1b 03 c0       	push   0xc0031b10
c001e7ed:	e8 6c a2 00 00       	call   c0028a5e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e7f2:	c7 04 24 10 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b10
c001e7f9:	89 c3                	mov    ebx,eax
c001e7fb:	e8 82 a2 00 00       	call   c0028a82 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e800:	c7 04 24 da c3 02 c0 	mov    DWORD PTR [esp],0xc002c3da
c001e807:	e8 25 47 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001e80c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e80f:	e8 bb fc ff ff       	call   c001e4cf <cleanupTerminatedTask(ThreadControlBlock*)>
c001e814:	c7 04 24 f3 c3 02 c0 	mov    DWORD PTR [esp],0xc002c3f3
c001e81b:	e8 11 47 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001e820:	83 c4 10             	add    esp,0x10
c001e823:	eb ac                	jmp    c001e7d1 <cleanerTaskFunction(void*)+0x39>
c001e825:	e8 e0 f5 ff ff       	call   c001de0a <unlockScheduler()>
c001e82a:	e8 9a f9 ff ff       	call   c001e1c9 <unlockStuff()>
c001e82f:	e8 d4 f5 ff ff       	call   c001de08 <lockScheduler()>
c001e834:	80 3d ec 1a 03 c0 00 	cmp    BYTE PTR ds:0xc0031aec,0x0
c001e83b:	0f 84 72 ff ff ff    	je     c001e7b3 <cleanerTaskFunction(void*)+0x1b>
c001e841:	e8 c4 f5 ff ff       	call   c001de0a <unlockScheduler()>
c001e846:	e9 75 ff ff ff       	jmp    c001e7c0 <cleanerTaskFunction(void*)+0x28>

c001e84b <terminateTask(int)>:
c001e84b:	83 ec 14             	sub    esp,0x14
c001e84e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e853:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e856:	83 c0 0c             	add    eax,0xc
c001e859:	50                   	push   eax
c001e85a:	68 30 c7 02 c0       	push   0xc002c730
c001e85f:	e8 cd 46 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001e864:	e8 c6 f5 ff ff       	call   c001de2f <lockStuff()>
c001e869:	e8 9a f5 ff ff       	call   c001de08 <lockScheduler()>
c001e86e:	c7 04 24 06 c4 02 c0 	mov    DWORD PTR [esp],0xc002c406
c001e875:	e8 b7 46 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001e87a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e87e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e883:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e886:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e88b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e88e:	5a                   	pop    edx
c001e88f:	59                   	pop    ecx
c001e890:	50                   	push   eax
c001e891:	68 10 1b 03 c0       	push   0xc0031b10
c001e896:	e8 95 a2 00 00       	call   c0028b30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e89b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8a0:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e8a7:	c7 04 24 20 c4 02 c0 	mov    DWORD PTR [esp],0xc002c420
c001e8ae:	e8 7e 46 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001e8b3:	83 c4 10             	add    esp,0x10
c001e8b6:	a1 e8 1a 03 c0       	mov    eax,ds:0xc0031ae8
c001e8bb:	85 c0                	test   eax,eax
c001e8bd:	74 5a                	je     c001e919 <terminateTask(int)+0xce>
c001e8bf:	83 ec 0c             	sub    esp,0xc
c001e8c2:	68 3a c4 02 c0       	push   0xc002c43a
c001e8c7:	e8 65 46 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001e8cc:	58                   	pop    eax
c001e8cd:	c6 05 ec 1a 03 c0 01 	mov    BYTE PTR ds:0xc0031aec,0x1
c001e8d4:	ff 35 e8 1a 03 c0    	push   DWORD PTR ds:0xc0031ae8
c001e8da:	e8 41 fb ff ff       	call   c001e420 <unblockTask(ThreadControlBlock*)>
c001e8df:	c7 04 24 54 c4 02 c0 	mov    DWORD PTR [esp],0xc002c454
c001e8e6:	e8 46 46 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001e8eb:	83 c4 10             	add    esp,0x10
c001e8ee:	e8 17 f5 ff ff       	call   c001de0a <unlockScheduler()>
c001e8f3:	e8 d1 f8 ff ff       	call   c001e1c9 <unlockStuff()>
c001e8f8:	83 ec 0c             	sub    esp,0xc
c001e8fb:	68 8c c4 02 c0       	push   0xc002c48c
c001e900:	e8 2c 46 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001e905:	83 c4 10             	add    esp,0x10
c001e908:	e8 fb f4 ff ff       	call   c001de08 <lockScheduler()>
c001e90d:	e8 32 f8 ff ff       	call   c001e144 <schedule()>
c001e912:	e8 f3 f4 ff ff       	call   c001de0a <unlockScheduler()>
c001e917:	eb ef                	jmp    c001e908 <terminateTask(int)+0xbd>
c001e919:	83 ec 0c             	sub    esp,0xc
c001e91c:	68 6e c4 02 c0       	push   0xc002c46e
c001e921:	e8 0b 46 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001e926:	83 c4 10             	add    esp,0x10
c001e929:	eb c3                	jmp    c001e8ee <terminateTask(int)+0xa3>

c001e92b <Thr::terminateFromIRQ(int)>:
c001e92b:	83 ec 18             	sub    esp,0x18
c001e92e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e932:	e8 14 ff ff ff       	call   c001e84b <terminateTask(int)>
c001e937:	90                   	nop

c001e938 <Semaphore::release()>:
c001e938:	83 ec 0c             	sub    esp,0xc
c001e93b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e93f:	e8 eb f4 ff ff       	call   c001de2f <lockStuff()>
c001e944:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e947:	85 d2                	test   edx,edx
c001e949:	74 1a                	je     c001e965 <Semaphore::release()+0x2d>
c001e94b:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001e94e:	83 ec 0c             	sub    esp,0xc
c001e951:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e954:	52                   	push   edx
c001e955:	e8 c6 fa ff ff       	call   c001e420 <unblockTask(ThreadControlBlock*)>
c001e95a:	83 c4 10             	add    esp,0x10
c001e95d:	83 c4 0c             	add    esp,0xc
c001e960:	e9 64 f8 ff ff       	jmp    c001e1c9 <unlockStuff()>
c001e965:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e968:	83 c4 0c             	add    esp,0xc
c001e96b:	e9 59 f8 ff ff       	jmp    c001e1c9 <unlockStuff()>

c001e970 <__static_initialization_and_destruction_0(int, int)>:
c001e970:	83 ec 0c             	sub    esp,0xc
c001e973:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e978:	0f 85 88 00 00 00    	jne    c001ea06 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e97e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e986:	75 7e                	jne    c001ea06 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e988:	83 ec 0c             	sub    esp,0xc
c001e98b:	68 28 1b 03 c0       	push   0xc0031b28
c001e990:	e8 4b a3 00 00       	call   c0028ce0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e995:	83 c4 10             	add    esp,0x10
c001e998:	83 ec 04             	sub    esp,0x4
c001e99b:	68 e8 d4 02 c0       	push   0xc002d4e8
c001e9a0:	68 28 1b 03 c0       	push   0xc0031b28
c001e9a5:	68 a0 8c 02 c0       	push   0xc0028ca0
c001e9aa:	e8 1c 44 ff ff       	call   c0012dcb <__cxa_atexit>
c001e9af:	83 c4 10             	add    esp,0x10
c001e9b2:	83 ec 0c             	sub    esp,0xc
c001e9b5:	68 1c 1b 03 c0       	push   0xc0031b1c
c001e9ba:	e8 21 a3 00 00       	call   c0028ce0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e9bf:	83 c4 10             	add    esp,0x10
c001e9c2:	83 ec 04             	sub    esp,0x4
c001e9c5:	68 e8 d4 02 c0       	push   0xc002d4e8
c001e9ca:	68 1c 1b 03 c0       	push   0xc0031b1c
c001e9cf:	68 a0 8c 02 c0       	push   0xc0028ca0
c001e9d4:	e8 f2 43 ff ff       	call   c0012dcb <__cxa_atexit>
c001e9d9:	83 c4 10             	add    esp,0x10
c001e9dc:	83 ec 0c             	sub    esp,0xc
c001e9df:	68 10 1b 03 c0       	push   0xc0031b10
c001e9e4:	e8 f7 a2 00 00       	call   c0028ce0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e9e9:	83 c4 10             	add    esp,0x10
c001e9ec:	83 ec 04             	sub    esp,0x4
c001e9ef:	68 e8 d4 02 c0       	push   0xc002d4e8
c001e9f4:	68 10 1b 03 c0       	push   0xc0031b10
c001e9f9:	68 a0 8c 02 c0       	push   0xc0028ca0
c001e9fe:	e8 c8 43 ff ff       	call   c0012dcb <__cxa_atexit>
c001ea03:	83 c4 10             	add    esp,0x10
c001ea06:	90                   	nop
c001ea07:	83 c4 0c             	add    esp,0xc
c001ea0a:	c3                   	ret    

c001ea0b <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001ea0b:	83 ec 0c             	sub    esp,0xc
c001ea0e:	83 ec 08             	sub    esp,0x8
c001ea11:	68 ff ff 00 00       	push   0xffff
c001ea16:	6a 01                	push   0x1
c001ea18:	e8 53 ff ff ff       	call   c001e970 <__static_initialization_and_destruction_0(int, int)>
c001ea1d:	83 c4 10             	add    esp,0x10
c001ea20:	83 c4 0c             	add    esp,0xc
c001ea23:	c3                   	ret    

c001ea24 <Vm::inbv(unsigned short)>:
c001ea24:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ea28:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ea2d:	75 06                	jne    c001ea35 <Vm::inbv(unsigned short)+0x11>
c001ea2f:	a0 6c 1b 03 c0       	mov    al,ds:0xc0031b6c
c001ea34:	c3                   	ret    
c001ea35:	ec                   	in     al,dx
c001ea36:	c3                   	ret    

c001ea37 <Vm::outbv(unsigned short, unsigned char)>:
c001ea37:	53                   	push   ebx
c001ea38:	83 ec 08             	sub    esp,0x8
c001ea3b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ea3f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ea43:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ea48:	75 38                	jne    c001ea82 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001ea4a:	0f b6 c3             	movzx  eax,bl
c001ea4d:	51                   	push   ecx
c001ea4e:	51                   	push   ecx
c001ea4f:	50                   	push   eax
c001ea50:	68 4f c7 02 c0       	push   0xc002c74f
c001ea55:	e8 d7 44 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001ea5a:	8b 15 6c 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b6c
c001ea60:	83 c4 10             	add    esp,0x10
c001ea63:	8d 42 01             	lea    eax,[edx+0x1]
c001ea66:	88 9a 80 1b 03 c0    	mov    BYTE PTR [edx-0x3ffce480],bl
c001ea6c:	a3 6c 1b 03 c0       	mov    ds:0xc0031b6c,eax
c001ea71:	83 f8 20             	cmp    eax,0x20
c001ea74:	75 0f                	jne    c001ea85 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001ea76:	c7 05 6c 1b 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0031b6c,0x1f
c001ea80:	eb 03                	jmp    c001ea85 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001ea82:	88 d8                	mov    al,bl
c001ea84:	ee                   	out    dx,al
c001ea85:	83 c4 08             	add    esp,0x8
c001ea88:	5b                   	pop    ebx
c001ea89:	c3                   	ret    

c001ea8a <Vm::realToLinear(unsigned short, unsigned short)>:
c001ea8a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ea8f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ea94:	c1 e0 04             	shl    eax,0x4
c001ea97:	01 d0                	add    eax,edx
c001ea99:	c3                   	ret    

c001ea9a <Vm::getSegment(unsigned int)>:
c001ea9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea9e:	c1 e8 10             	shr    eax,0x10
c001eaa1:	c3                   	ret    

c001eaa2 <Vm::getOffset(unsigned int)>:
c001eaa2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eaa6:	c3                   	ret    

c001eaa7 <Vm::mainloop2()>:
c001eaa7:	83 ec 0c             	sub    esp,0xc
c001eaaa:	e8 59 f3 ff ff       	call   c001de08 <lockScheduler()>
c001eaaf:	83 ec 0c             	sub    esp,0xc
c001eab2:	c6 05 65 1b 03 c0 01 	mov    BYTE PTR ds:0xc0031b65,0x1
c001eab9:	6a 02                	push   0x2
c001eabb:	e8 9c f7 ff ff       	call   c001e25c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eac0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eac5:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001eac9:	52                   	push   edx
c001eaca:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001eace:	52                   	push   edx
c001eacf:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001ead3:	52                   	push   edx
c001ead4:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001ead8:	50                   	push   eax
c001ead9:	e8 1c 18 fe ff       	call   c00002fa <goToVM86>
c001eade:	83 c4 2c             	add    esp,0x2c
c001eae1:	c3                   	ret    

c001eae2 <Vm::mainVm8086Loop(void*)>:
c001eae2:	83 ec 0c             	sub    esp,0xc
c001eae5:	e8 20 f3 ff ff       	call   c001de0a <unlockScheduler()>
c001eaea:	83 c4 0c             	add    esp,0xc
c001eaed:	eb b8                	jmp    c001eaa7 <Vm::mainloop2()>

c001eaef <Vm::mainloop3(unsigned long)>:
c001eaef:	53                   	push   ebx
c001eaf0:	83 ec 08             	sub    esp,0x8
c001eaf3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eaf7:	e8 0c f3 ff ff       	call   c001de08 <lockScheduler()>
c001eafc:	83 ec 0c             	sub    esp,0xc
c001eaff:	89 1d 60 1b 03 c0    	mov    DWORD PTR ds:0xc0031b60,ebx
c001eb05:	6a 02                	push   0x2
c001eb07:	c6 05 64 1b 03 c0 01 	mov    BYTE PTR ds:0xc0031b64,0x1
c001eb0e:	e8 49 f7 ff ff       	call   c001e25c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eb13:	83 c4 18             	add    esp,0x18
c001eb16:	5b                   	pop    ebx
c001eb17:	eb 8e                	jmp    c001eaa7 <Vm::mainloop2()>

c001eb19 <Vm::initialise8086()>:
c001eb19:	83 ec 0c             	sub    esp,0xc
c001eb1c:	68 80 00 00 00       	push   0x80
c001eb21:	6a 00                	push   0x0
c001eb23:	68 e2 ea 01 c0       	push   0xc001eae2
c001eb28:	ff 35 34 1b 03 c0    	push   DWORD PTR ds:0xc0031b34
c001eb2e:	e8 07 f4 ff ff       	call   c001df3a <Process::createThread(void (*)(void*), void*, int)>
c001eb33:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001eb3a:	a3 68 1b 03 c0       	mov    ds:0xc0031b68,eax
c001eb3f:	68 00 01 00 00       	push   0x100
c001eb44:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001eb49:	6a 00                	push   0x0
c001eb4b:	6a 00                	push   0x0
c001eb4d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001eb53:	e8 0a 3b ff ff       	call   c0012662 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001eb58:	83 c4 2c             	add    esp,0x2c
c001eb5b:	c3                   	ret    

c001eb5c <Vm::finish8086()>:
c001eb5c:	53                   	push   ebx
c001eb5d:	83 ec 08             	sub    esp,0x8
c001eb60:	e8 a3 f2 ff ff       	call   c001de08 <lockScheduler()>
c001eb65:	80 3d 64 1b 03 c0 00 	cmp    BYTE PTR ds:0xc0031b64,0x0
c001eb6c:	75 0c                	jne    c001eb7a <Vm::finish8086()+0x1e>
c001eb6e:	e8 d1 f5 ff ff       	call   c001e144 <schedule()>
c001eb73:	e8 92 f2 ff ff       	call   c001de0a <unlockScheduler()>
c001eb78:	eb e6                	jmp    c001eb60 <Vm::finish8086()+0x4>
c001eb7a:	83 ec 0c             	sub    esp,0xc
c001eb7d:	8b 1d 60 1b 03 c0    	mov    ebx,DWORD PTR ds:0xc0031b60
c001eb83:	ff 35 68 1b 03 c0    	push   DWORD PTR ds:0xc0031b68
c001eb89:	c6 05 64 1b 03 c0 00 	mov    BYTE PTR ds:0xc0031b64,0x0
c001eb90:	e8 8b f8 ff ff       	call   c001e420 <unblockTask(ThreadControlBlock*)>
c001eb95:	e8 70 f2 ff ff       	call   c001de0a <unlockScheduler()>
c001eb9a:	89 d8                	mov    eax,ebx
c001eb9c:	83 c4 18             	add    esp,0x18
c001eb9f:	5b                   	pop    ebx
c001eba0:	c3                   	ret    

c001eba1 <Vm::getOutput8086(unsigned char*)>:
c001eba1:	83 ec 10             	sub    esp,0x10
c001eba4:	ff 35 6c 1b 03 c0    	push   DWORD PTR ds:0xc0031b6c
c001ebaa:	68 80 1b 03 c0       	push   0xc0031b80
c001ebaf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ebb3:	e8 8c 1b fe ff       	call   c0000744 <memcpy>
c001ebb8:	a1 6c 1b 03 c0       	mov    eax,ds:0xc0031b6c
c001ebbd:	c7 05 6c 1b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031b6c,0x0
c001ebc7:	83 c4 1c             	add    esp,0x1c
c001ebca:	c3                   	ret    

c001ebcb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001ebcb:	55                   	push   ebp
c001ebcc:	57                   	push   edi
c001ebcd:	56                   	push   esi
c001ebce:	53                   	push   ebx
c001ebcf:	83 ec 2c             	sub    esp,0x2c
c001ebd2:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ebd6:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001ebda:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001ebde:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ebe2:	e8 21 f2 ff ff       	call   c001de08 <lockScheduler()>
c001ebe7:	a0 65 1b 03 c0       	mov    al,ds:0xc0031b65
c001ebec:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ebf0:	84 c0                	test   al,al
c001ebf2:	75 0c                	jne    c001ec00 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001ebf4:	e8 4b f5 ff ff       	call   c001e144 <schedule()>
c001ebf9:	e8 0c f2 ff ff       	call   c001de0a <unlockScheduler()>
c001ebfe:	eb e2                	jmp    c001ebe2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ec00:	a1 68 1b 03 c0       	mov    eax,ds:0xc0031b68
c001ec05:	c7 05 6c 1b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031b6c,0x0
c001ec0f:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001ec13:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001ec17:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001ec1b:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001ec1f:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ec23:	50                   	push   eax
c001ec24:	6a 20                	push   0x20
c001ec26:	6a 00                	push   0x0
c001ec28:	68 80 1b 03 c0       	push   0xc0031b80
c001ec2d:	e8 46 1b fe ff       	call   c0000778 <memset>
c001ec32:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ec39:	e8 02 0c ff ff       	call   c000f840 <malloc>
c001ec3e:	83 c4 0c             	add    esp,0xc
c001ec41:	89 c7                	mov    edi,eax
c001ec43:	ff 35 34 1b 03 c0    	push   DWORD PTR ds:0xc0031b34
c001ec49:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ec4d:	50                   	push   eax
c001ec4e:	e8 37 48 ff ff       	call   c001348a <File::File(char const*, Process*)>
c001ec53:	83 c4 10             	add    esp,0x10
c001ec56:	85 ff                	test   edi,edi
c001ec58:	75 0a                	jne    c001ec64 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001ec5a:	83 ec 0c             	sub    esp,0xc
c001ec5d:	68 6b c7 02 c0       	push   0xc002c76b
c001ec62:	eb 27                	jmp    c001ec8b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001ec64:	50                   	push   eax
c001ec65:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ec69:	50                   	push   eax
c001ec6a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ec6e:	50                   	push   eax
c001ec6f:	57                   	push   edi
c001ec70:	e8 25 4b ff ff       	call   c001379a <File::stat(unsigned long long*, bool*)>
c001ec75:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001ec7a:	83 c4 10             	add    esp,0x10
c001ec7d:	89 e8                	mov    eax,ebp
c001ec7f:	84 c0                	test   al,al
c001ec81:	74 19                	je     c001ec9c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001ec83:	83 ec 0c             	sub    esp,0xc
c001ec86:	68 7f c7 02 c0       	push   0xc002c77f
c001ec8b:	e8 53 b9 ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c001ec90:	31 ed                	xor    ebp,ebp
c001ec92:	e8 73 f1 ff ff       	call   c001de0a <unlockScheduler()>
c001ec97:	83 c4 10             	add    esp,0x10
c001ec9a:	eb 75                	jmp    c001ed11 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ec9c:	50                   	push   eax
c001ec9d:	50                   	push   eax
c001ec9e:	6a 01                	push   0x1
c001eca0:	57                   	push   edi
c001eca1:	e8 48 48 ff ff       	call   c00134ee <File::open(FileOpenMode)>
c001eca6:	83 c4 10             	add    esp,0x10
c001eca9:	85 c0                	test   eax,eax
c001ecab:	74 17                	je     c001ecc4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001ecad:	83 ec 0c             	sub    esp,0xc
c001ecb0:	68 98 c7 02 c0       	push   0xc002c798
c001ecb5:	e8 29 b9 ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c001ecba:	e8 4b f1 ff ff       	call   c001de0a <unlockScheduler()>
c001ecbf:	83 c4 10             	add    esp,0x10
c001ecc2:	eb 4d                	jmp    c001ed11 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ecc4:	0f b7 f6             	movzx  esi,si
c001ecc7:	50                   	push   eax
c001ecc8:	0f b7 db             	movzx  ebx,bx
c001eccb:	50                   	push   eax
c001eccc:	56                   	push   esi
c001eccd:	53                   	push   ebx
c001ecce:	e8 b7 fd ff ff       	call   c001ea8a <Vm::realToLinear(unsigned short, unsigned short)>
c001ecd3:	5a                   	pop    edx
c001ecd4:	8b 17                	mov    edx,DWORD PTR [edi]
c001ecd6:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ecda:	51                   	push   ecx
c001ecdb:	50                   	push   eax
c001ecdc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ece0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ece4:	57                   	push   edi
c001ece5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ece8:	83 c4 14             	add    esp,0x14
c001eceb:	57                   	push   edi
c001ecec:	e8 5b 48 ff ff       	call   c001354c <File::close()>
c001ecf1:	c6 05 65 1b 03 c0 00 	mov    BYTE PTR ds:0xc0031b65,0x0
c001ecf8:	e8 0d f1 ff ff       	call   c001de0a <unlockScheduler()>
c001ecfd:	59                   	pop    ecx
c001ecfe:	ff 35 68 1b 03 c0    	push   DWORD PTR ds:0xc0031b68
c001ed04:	e8 17 f7 ff ff       	call   c001e420 <unblockTask(ThreadControlBlock*)>
c001ed09:	83 c4 10             	add    esp,0x10
c001ed0c:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001ed11:	83 c4 2c             	add    esp,0x2c
c001ed14:	89 e8                	mov    eax,ebp
c001ed16:	5b                   	pop    ebx
c001ed17:	5e                   	pop    esi
c001ed18:	5f                   	pop    edi
c001ed19:	5d                   	pop    ebp
c001ed1a:	c3                   	ret    

c001ed1b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001ed1b:	57                   	push   edi
c001ed1c:	56                   	push   esi
c001ed1d:	53                   	push   ebx
c001ed1e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ed22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed26:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ed2a:	83 e8 06             	sub    eax,0x6
c001ed2d:	0f b7 c0             	movzx  eax,ax
c001ed30:	50                   	push   eax
c001ed31:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001ed36:	50                   	push   eax
c001ed37:	e8 4e fd ff ff       	call   c001ea8a <Vm::realToLinear(unsigned short, unsigned short)>
c001ed3c:	5a                   	pop    edx
c001ed3d:	5e                   	pop    esi
c001ed3e:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001ed41:	8d 56 fa             	lea    edx,[esi-0x6]
c001ed44:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ed4a:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001ed4d:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001ed50:	83 c2 02             	add    edx,0x2
c001ed53:	66 89 10             	mov    WORD PTR [eax],dx
c001ed56:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001ed59:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001ed5d:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001ed60:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001ed64:	89 d6                	mov    esi,edx
c001ed66:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001ed6c:	66 81 e6 ff fd       	and    si,0xfdff
c001ed71:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001ed75:	74 07                	je     c001ed7e <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001ed77:	89 d6                	mov    esi,edx
c001ed79:	66 81 ce 00 02       	or     si,0x200
c001ed7e:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001ed82:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ed87:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ed8b:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001ed93:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001ed96:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001ed9e:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001eda1:	5b                   	pop    ebx
c001eda2:	5e                   	pop    esi
c001eda3:	5f                   	pop    edi
c001eda4:	c3                   	ret    

c001eda5 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001eda5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edaa:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edaf:	c1 e0 04             	shl    eax,0x4
c001edb2:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001edb5:	c3                   	ret    

c001edb6 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001edb6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edbb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edc0:	c1 e0 04             	shl    eax,0x4
c001edc3:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001edc7:	c3                   	ret    

c001edc8 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001edc8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edcd:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edd2:	c1 e0 04             	shl    eax,0x4
c001edd5:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001edd8:	c3                   	ret    

c001edd9 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001edd9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edde:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ede3:	c1 e0 04             	shl    eax,0x4
c001ede6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001edea:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001eded:	c3                   	ret    

c001edee <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001edee:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edf3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edf8:	c1 e0 04             	shl    eax,0x4
c001edfb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001edff:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001ee03:	c3                   	ret    

c001ee04 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001ee04:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee09:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee0e:	c1 e0 04             	shl    eax,0x4
c001ee11:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee15:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001ee18:	c3                   	ret    

c001ee19 <Vm::faultHandler(regs*)>:
c001ee19:	55                   	push   ebp
c001ee1a:	57                   	push   edi
c001ee1b:	56                   	push   esi
c001ee1c:	53                   	push   ebx
c001ee1d:	83 ec 1c             	sub    esp,0x1c
c001ee20:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ee24:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001ee27:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001ee2a:	0f b7 c1             	movzx  eax,cx
c001ee2d:	50                   	push   eax
c001ee2e:	0f b7 c3             	movzx  eax,bx
c001ee31:	c1 e3 04             	shl    ebx,0x4
c001ee34:	50                   	push   eax
c001ee35:	e8 50 fc ff ff       	call   c001ea8a <Vm::realToLinear(unsigned short, unsigned short)>
c001ee3a:	5a                   	pop    edx
c001ee3b:	89 c5                	mov    ebp,eax
c001ee3d:	5e                   	pop    esi
c001ee3e:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001ee42:	50                   	push   eax
c001ee43:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001ee47:	50                   	push   eax
c001ee48:	e8 3d fc ff ff       	call   c001ea8a <Vm::realToLinear(unsigned short, unsigned short)>
c001ee4d:	01 cb                	add    ebx,ecx
c001ee4f:	89 c6                	mov    esi,eax
c001ee51:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001ee55:	50                   	push   eax
c001ee56:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee5a:	50                   	push   eax
c001ee5b:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ee5f:	50                   	push   eax
c001ee60:	55                   	push   ebp
c001ee61:	53                   	push   ebx
c001ee62:	b3 06                	mov    bl,0x6
c001ee64:	68 b1 c7 02 c0       	push   0xc002c7b1
c001ee69:	e8 c3 40 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001ee6e:	83 c4 20             	add    esp,0x20
c001ee71:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001ee76:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ee7b:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ee7f:	3c 9d                	cmp    al,0x9d
c001ee81:	0f 84 d7 02 00 00    	je     c001f15e <Vm::faultHandler(regs*)+0x345>
c001ee87:	0f 87 a3 00 00 00    	ja     c001ef30 <Vm::faultHandler(regs*)+0x117>
c001ee8d:	3c 66                	cmp    al,0x66
c001ee8f:	0f 84 15 02 00 00    	je     c001f0aa <Vm::faultHandler(regs*)+0x291>
c001ee95:	77 5f                	ja     c001eef6 <Vm::faultHandler(regs*)+0xdd>
c001ee97:	3c 36                	cmp    al,0x36
c001ee99:	0f 84 f1 01 00 00    	je     c001f090 <Vm::faultHandler(regs*)+0x277>
c001ee9f:	77 28                	ja     c001eec9 <Vm::faultHandler(regs*)+0xb0>
c001eea1:	3c 26                	cmp    al,0x26
c001eea3:	0f 84 99 01 00 00    	je     c001f042 <Vm::faultHandler(regs*)+0x229>
c001eea9:	3c 2e                	cmp    al,0x2e
c001eeab:	0f 85 3b 07 00 00    	jne    c001f5ec <Vm::faultHandler(regs*)+0x7d3>
c001eeb1:	83 ec 0c             	sub    esp,0xc
c001eeb4:	31 db                	xor    ebx,ebx
c001eeb6:	68 c6 c7 02 c0       	push   0xc002c7c6
c001eebb:	e8 71 40 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001eec0:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eec3:	83 c4 10             	add    esp,0x10
c001eec6:	45                   	inc    ebp
c001eec7:	eb b2                	jmp    c001ee7b <Vm::faultHandler(regs*)+0x62>
c001eec9:	3c 64                	cmp    al,0x64
c001eecb:	0f 84 8b 01 00 00    	je     c001f05c <Vm::faultHandler(regs*)+0x243>
c001eed1:	0f 87 9f 01 00 00    	ja     c001f076 <Vm::faultHandler(regs*)+0x25d>
c001eed7:	3c 3e                	cmp    al,0x3e
c001eed9:	0f 85 0d 07 00 00    	jne    c001f5ec <Vm::faultHandler(regs*)+0x7d3>
c001eedf:	83 ec 0c             	sub    esp,0xc
c001eee2:	b3 01                	mov    bl,0x1
c001eee4:	68 ca c7 02 c0       	push   0xc002c7ca
c001eee9:	e8 43 40 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001eeee:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eef1:	83 c4 10             	add    esp,0x10
c001eef4:	eb d0                	jmp    c001eec6 <Vm::faultHandler(regs*)+0xad>
c001eef6:	3c 6d                	cmp    al,0x6d
c001eef8:	0f 84 af 03 00 00    	je     c001f2ad <Vm::faultHandler(regs*)+0x494>
c001eefe:	77 15                	ja     c001ef15 <Vm::faultHandler(regs*)+0xfc>
c001ef00:	3c 67                	cmp    al,0x67
c001ef02:	0f 84 bf 01 00 00    	je     c001f0c7 <Vm::faultHandler(regs*)+0x2ae>
c001ef08:	3c 6c                	cmp    al,0x6c
c001ef0a:	0f 84 3f 03 00 00    	je     c001f24f <Vm::faultHandler(regs*)+0x436>
c001ef10:	e9 d7 06 00 00       	jmp    c001f5ec <Vm::faultHandler(regs*)+0x7d3>
c001ef15:	3c 6f                	cmp    al,0x6f
c001ef17:	0f 84 a4 04 00 00    	je     c001f3c1 <Vm::faultHandler(regs*)+0x5a8>
c001ef1d:	0f 82 11 04 00 00    	jb     c001f334 <Vm::faultHandler(regs*)+0x51b>
c001ef23:	3c 9c                	cmp    al,0x9c
c001ef25:	0f 84 ba 01 00 00    	je     c001f0e5 <Vm::faultHandler(regs*)+0x2cc>
c001ef2b:	e9 bc 06 00 00       	jmp    c001f5ec <Vm::faultHandler(regs*)+0x7d3>
c001ef30:	3c ec                	cmp    al,0xec
c001ef32:	0f 84 24 06 00 00    	je     c001f55c <Vm::faultHandler(regs*)+0x743>
c001ef38:	0f 87 93 00 00 00    	ja     c001efd1 <Vm::faultHandler(regs*)+0x1b8>
c001ef3e:	3c e4                	cmp    al,0xe4
c001ef40:	0f 84 5c 05 00 00    	je     c001f4a2 <Vm::faultHandler(regs*)+0x689>
c001ef46:	77 6a                	ja     c001efb2 <Vm::faultHandler(regs*)+0x199>
c001ef48:	3c cd                	cmp    al,0xcd
c001ef4a:	0f 84 7e 02 00 00    	je     c001f1ce <Vm::faultHandler(regs*)+0x3b5>
c001ef50:	3c cf                	cmp    al,0xcf
c001ef52:	0f 85 94 06 00 00    	jne    c001f5ec <Vm::faultHandler(regs*)+0x7d3>
c001ef58:	83 ec 0c             	sub    esp,0xc
c001ef5b:	68 0e c8 02 c0       	push   0xc002c80e
c001ef60:	e8 cc 3f ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001ef65:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001ef68:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001ef6b:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001ef6f:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001ef72:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001ef76:	0d 00 02 02 00       	or     eax,0x20200
c001ef7b:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001ef7e:	56                   	push   esi
c001ef7f:	53                   	push   ebx
c001ef80:	52                   	push   edx
c001ef81:	68 14 c8 02 c0       	push   0xc002c814
c001ef86:	e8 a6 3f ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001ef8b:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001ef8f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ef95:	66 c1 e8 09          	shr    ax,0x9
c001ef99:	83 e0 01             	and    eax,0x1
c001ef9c:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ef9f:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001efa2:	83 c0 06             	add    eax,0x6
c001efa5:	25 ff ff 00 00       	and    eax,0xffff
c001efaa:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001efad:	e9 95 02 00 00       	jmp    c001f247 <Vm::faultHandler(regs*)+0x42e>
c001efb2:	3c e6                	cmp    al,0xe6
c001efb4:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001efb8:	0f 84 4e 05 00 00    	je     c001f50c <Vm::faultHandler(regs*)+0x6f3>
c001efbe:	0f 82 0a 05 00 00    	jb     c001f4ce <Vm::faultHandler(regs*)+0x6b5>
c001efc4:	3c e7                	cmp    al,0xe7
c001efc6:	0f 84 69 05 00 00    	je     c001f535 <Vm::faultHandler(regs*)+0x71c>
c001efcc:	e9 1b 06 00 00       	jmp    c001f5ec <Vm::faultHandler(regs*)+0x7d3>
c001efd1:	3c ef                	cmp    al,0xef
c001efd3:	0f 84 e6 05 00 00    	je     c001f5bf <Vm::faultHandler(regs*)+0x7a6>
c001efd9:	77 37                	ja     c001f012 <Vm::faultHandler(regs*)+0x1f9>
c001efdb:	3c ed                	cmp    al,0xed
c001efdd:	0f 84 a3 05 00 00    	je     c001f586 <Vm::faultHandler(regs*)+0x76d>
c001efe3:	3c ee                	cmp    al,0xee
c001efe5:	0f 85 01 06 00 00    	jne    c001f5ec <Vm::faultHandler(regs*)+0x7d3>
c001efeb:	52                   	push   edx
c001efec:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001efef:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001eff2:	68 af c8 02 c0       	push   0xc002c8af
c001eff7:	e8 35 3f ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001effc:	59                   	pop    ecx
c001effd:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f001:	5b                   	pop    ebx
c001f002:	50                   	push   eax
c001f003:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f007:	50                   	push   eax
c001f008:	e8 2a fa ff ff       	call   c001ea37 <Vm::outbv(unsigned short, unsigned char)>
c001f00d:	e9 a5 05 00 00       	jmp    c001f5b7 <Vm::faultHandler(regs*)+0x79e>
c001f012:	3c fa                	cmp    al,0xfa
c001f014:	0f 84 f7 01 00 00    	je     c001f211 <Vm::faultHandler(regs*)+0x3f8>
c001f01a:	3c fb                	cmp    al,0xfb
c001f01c:	0f 84 0a 02 00 00    	je     c001f22c <Vm::faultHandler(regs*)+0x413>
c001f022:	3c f3                	cmp    al,0xf3
c001f024:	0f 85 c2 05 00 00    	jne    c001f5ec <Vm::faultHandler(regs*)+0x7d3>
c001f02a:	83 ec 0c             	sub    esp,0xc
c001f02d:	68 e7 c7 02 c0       	push   0xc002c7e7
c001f032:	e8 fa 3e ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001f037:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f03a:	83 c4 10             	add    esp,0x10
c001f03d:	e9 84 fe ff ff       	jmp    c001eec6 <Vm::faultHandler(regs*)+0xad>
c001f042:	83 ec 0c             	sub    esp,0xc
c001f045:	b3 02                	mov    bl,0x2
c001f047:	68 c2 c7 02 c0       	push   0xc002c7c2
c001f04c:	e8 e0 3e ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001f051:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f054:	83 c4 10             	add    esp,0x10
c001f057:	e9 6a fe ff ff       	jmp    c001eec6 <Vm::faultHandler(regs*)+0xad>
c001f05c:	83 ec 0c             	sub    esp,0xc
c001f05f:	b3 03                	mov    bl,0x3
c001f061:	68 ce c7 02 c0       	push   0xc002c7ce
c001f066:	e8 c6 3e ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001f06b:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f06e:	83 c4 10             	add    esp,0x10
c001f071:	e9 50 fe ff ff       	jmp    c001eec6 <Vm::faultHandler(regs*)+0xad>
c001f076:	83 ec 0c             	sub    esp,0xc
c001f079:	b3 04                	mov    bl,0x4
c001f07b:	68 d2 c7 02 c0       	push   0xc002c7d2
c001f080:	e8 ac 3e ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001f085:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f088:	83 c4 10             	add    esp,0x10
c001f08b:	e9 36 fe ff ff       	jmp    c001eec6 <Vm::faultHandler(regs*)+0xad>
c001f090:	83 ec 0c             	sub    esp,0xc
c001f093:	b3 05                	mov    bl,0x5
c001f095:	68 d6 c7 02 c0       	push   0xc002c7d6
c001f09a:	e8 92 3e ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001f09f:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0a2:	83 c4 10             	add    esp,0x10
c001f0a5:	e9 1c fe ff ff       	jmp    c001eec6 <Vm::faultHandler(regs*)+0xad>
c001f0aa:	83 ec 0c             	sub    esp,0xc
c001f0ad:	68 da c7 02 c0       	push   0xc002c7da
c001f0b2:	e8 7a 3e ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001f0b7:	83 c4 10             	add    esp,0x10
c001f0ba:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0bd:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f0c2:	e9 ff fd ff ff       	jmp    c001eec6 <Vm::faultHandler(regs*)+0xad>
c001f0c7:	50                   	push   eax
c001f0c8:	50                   	push   eax
c001f0c9:	6a 01                	push   0x1
c001f0cb:	68 df c7 02 c0       	push   0xc002c7df
c001f0d0:	e8 5c 3e ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001f0d5:	83 c4 10             	add    esp,0x10
c001f0d8:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0db:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f0e0:	e9 e1 fd ff ff       	jmp    c001eec6 <Vm::faultHandler(regs*)+0xad>
c001f0e5:	83 ec 0c             	sub    esp,0xc
c001f0e8:	68 ed c7 02 c0       	push   0xc002c7ed
c001f0ed:	e8 3f 3e ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001f0f2:	83 c4 10             	add    esp,0x10
c001f0f5:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f0f8:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f0fd:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f100:	74 2f                	je     c001f131 <Vm::faultHandler(regs*)+0x318>
c001f102:	83 ea 04             	sub    edx,0x4
c001f105:	25 ff 0d 00 00       	and    eax,0xdff
c001f10a:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f110:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f113:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f116:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f11c:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f120:	0f 84 bf 04 00 00    	je     c001f5e5 <Vm::faultHandler(regs*)+0x7cc>
c001f126:	80 cc 02             	or     ah,0x2
c001f129:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f12c:	e9 b4 04 00 00       	jmp    c001f5e5 <Vm::faultHandler(regs*)+0x7cc>
c001f131:	83 ea 02             	sub    edx,0x2
c001f134:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f13a:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f13d:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f141:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f147:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f14b:	74 05                	je     c001f152 <Vm::faultHandler(regs*)+0x339>
c001f14d:	80 cc 02             	or     ah,0x2
c001f150:	eb 03                	jmp    c001f155 <Vm::faultHandler(regs*)+0x33c>
c001f152:	80 e4 fd             	and    ah,0xfd
c001f155:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f159:	e9 87 04 00 00       	jmp    c001f5e5 <Vm::faultHandler(regs*)+0x7cc>
c001f15e:	83 ec 0c             	sub    esp,0xc
c001f161:	68 f4 c7 02 c0       	push   0xc002c7f4
c001f166:	e8 c6 3d ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001f16b:	83 c4 10             	add    esp,0x10
c001f16e:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f173:	74 28                	je     c001f19d <Vm::faultHandler(regs*)+0x384>
c001f175:	8b 06                	mov    eax,DWORD PTR [esi]
c001f177:	25 ff 0d 00 00       	and    eax,0xdff
c001f17c:	0d 00 02 02 00       	or     eax,0x20200
c001f181:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f184:	8b 06                	mov    eax,DWORD PTR [esi]
c001f186:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f18c:	c1 e8 09             	shr    eax,0x9
c001f18f:	83 e0 01             	and    eax,0x1
c001f192:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f195:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f198:	83 c0 04             	add    eax,0x4
c001f19b:	eb 24                	jmp    c001f1c1 <Vm::faultHandler(regs*)+0x3a8>
c001f19d:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f1a0:	0d 00 02 02 00       	or     eax,0x20200
c001f1a5:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f1a8:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f1ab:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f1b1:	66 c1 e8 09          	shr    ax,0x9
c001f1b5:	83 e0 01             	and    eax,0x1
c001f1b8:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f1bb:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f1be:	83 c0 02             	add    eax,0x2
c001f1c1:	25 ff ff 00 00       	and    eax,0xffff
c001f1c6:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f1c9:	e9 17 04 00 00       	jmp    c001f5e5 <Vm::faultHandler(regs*)+0x7cc>
c001f1ce:	53                   	push   ebx
c001f1cf:	53                   	push   ebx
c001f1d0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f1d4:	50                   	push   eax
c001f1d5:	68 fa c7 02 c0       	push   0xc002c7fa
c001f1da:	e8 52 3d ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001f1df:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f1e3:	83 c4 10             	add    esp,0x10
c001f1e6:	3c ee                	cmp    al,0xee
c001f1e8:	75 10                	jne    c001f1fa <Vm::faultHandler(regs*)+0x3e1>
c001f1ea:	83 ec 0c             	sub    esp,0xc
c001f1ed:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f1f0:	e8 fa f8 ff ff       	call   c001eaef <Vm::mainloop3(unsigned long)>
c001f1f5:	e9 c0 03 00 00       	jmp    c001f5ba <Vm::faultHandler(regs*)+0x7a1>
c001f1fa:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f1fe:	83 ec 0c             	sub    esp,0xc
c001f201:	53                   	push   ebx
c001f202:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f206:	53                   	push   ebx
c001f207:	55                   	push   ebp
c001f208:	50                   	push   eax
c001f209:	57                   	push   edi
c001f20a:	e8 0c fb ff ff       	call   c001ed1b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f20f:	eb 36                	jmp    c001f247 <Vm::faultHandler(regs*)+0x42e>
c001f211:	83 ec 0c             	sub    esp,0xc
c001f214:	68 04 c8 02 c0       	push   0xc002c804
c001f219:	e8 13 3d ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001f21e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f223:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f227:	e9 8b 03 00 00       	jmp    c001f5b7 <Vm::faultHandler(regs*)+0x79e>
c001f22c:	83 ec 0c             	sub    esp,0xc
c001f22f:	68 09 c8 02 c0       	push   0xc002c809
c001f234:	e8 f8 3c ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001f239:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f23e:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f242:	e9 70 03 00 00       	jmp    c001f5b7 <Vm::faultHandler(regs*)+0x79e>
c001f247:	83 c4 20             	add    esp,0x20
c001f24a:	e9 99 03 00 00       	jmp    c001f5e8 <Vm::faultHandler(regs*)+0x7cf>
c001f24f:	83 ec 0c             	sub    esp,0xc
c001f252:	68 47 c8 02 c0       	push   0xc002c847
c001f257:	e8 d5 3c ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001f25c:	83 c4 10             	add    esp,0x10
c001f25f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f262:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f267:	74 0d                	je     c001f276 <Vm::faultHandler(regs*)+0x45d>
c001f269:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f270:	0f 87 9e 01 00 00    	ja     c001f414 <Vm::faultHandler(regs*)+0x5fb>
c001f276:	83 ec 0c             	sub    esp,0xc
c001f279:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f27d:	0f b7 db             	movzx  ebx,bx
c001f280:	50                   	push   eax
c001f281:	e8 9e f7 ff ff       	call   c001ea24 <Vm::inbv(unsigned short)>
c001f286:	83 c4 0c             	add    esp,0xc
c001f289:	0f b6 c0             	movzx  eax,al
c001f28c:	50                   	push   eax
c001f28d:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f291:	50                   	push   eax
c001f292:	53                   	push   ebx
c001f293:	e8 41 fb ff ff       	call   c001edd9 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f298:	83 c4 10             	add    esp,0x10
c001f29b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f29e:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f2a2:	74 03                	je     c001f2a7 <Vm::faultHandler(regs*)+0x48e>
c001f2a4:	48                   	dec    eax
c001f2a5:	eb 01                	jmp    c001f2a8 <Vm::faultHandler(regs*)+0x48f>
c001f2a7:	40                   	inc    eax
c001f2a8:	0f b7 c0             	movzx  eax,ax
c001f2ab:	eb 7f                	jmp    c001f32c <Vm::faultHandler(regs*)+0x513>
c001f2ad:	83 ec 0c             	sub    esp,0xc
c001f2b0:	68 79 c8 02 c0       	push   0xc002c879
c001f2b5:	e8 77 3c ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001f2ba:	83 c4 10             	add    esp,0x10
c001f2bd:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f2c0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f2c5:	74 0d                	je     c001f2d4 <Vm::faultHandler(regs*)+0x4bb>
c001f2c7:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f2ce:	0f 87 40 01 00 00    	ja     c001f414 <Vm::faultHandler(regs*)+0x5fb>
c001f2d4:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f2d7:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f2db:	0f b7 db             	movzx  ebx,bx
c001f2de:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f2e3:	74 20                	je     c001f305 <Vm::faultHandler(regs*)+0x4ec>
c001f2e5:	ed                   	in     eax,dx
c001f2e6:	51                   	push   ecx
c001f2e7:	50                   	push   eax
c001f2e8:	56                   	push   esi
c001f2e9:	53                   	push   ebx
c001f2ea:	e8 15 fb ff ff       	call   c001ee04 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f2ef:	83 c4 10             	add    esp,0x10
c001f2f2:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f2f5:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f2f9:	74 05                	je     c001f300 <Vm::faultHandler(regs*)+0x4e7>
c001f2fb:	83 e8 04             	sub    eax,0x4
c001f2fe:	eb 27                	jmp    c001f327 <Vm::faultHandler(regs*)+0x50e>
c001f300:	83 c0 04             	add    eax,0x4
c001f303:	eb 22                	jmp    c001f327 <Vm::faultHandler(regs*)+0x50e>
c001f305:	66 ed                	in     ax,dx
c001f307:	0f b7 c0             	movzx  eax,ax
c001f30a:	52                   	push   edx
c001f30b:	50                   	push   eax
c001f30c:	56                   	push   esi
c001f30d:	53                   	push   ebx
c001f30e:	e8 db fa ff ff       	call   c001edee <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f313:	83 c4 10             	add    esp,0x10
c001f316:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f319:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f31d:	74 05                	je     c001f324 <Vm::faultHandler(regs*)+0x50b>
c001f31f:	83 e8 02             	sub    eax,0x2
c001f322:	eb 03                	jmp    c001f327 <Vm::faultHandler(regs*)+0x50e>
c001f324:	83 c0 02             	add    eax,0x2
c001f327:	25 ff ff 00 00       	and    eax,0xffff
c001f32c:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f32f:	e9 b1 02 00 00       	jmp    c001f5e5 <Vm::faultHandler(regs*)+0x7cc>
c001f334:	83 ec 0c             	sub    esp,0xc
c001f337:	4b                   	dec    ebx
c001f338:	68 7f c8 02 c0       	push   0xc002c87f
c001f33d:	e8 ef 3b ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001f342:	83 c4 10             	add    esp,0x10
c001f345:	80 fb 05             	cmp    bl,0x5
c001f348:	77 0a                	ja     c001f354 <Vm::faultHandler(regs*)+0x53b>
c001f34a:	0f b6 db             	movzx  ebx,bl
c001f34d:	ff 24 9d f0 c8 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3710]
c001f354:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f358:	eb 1b                	jmp    c001f375 <Vm::faultHandler(regs*)+0x55c>
c001f35a:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f35e:	eb 15                	jmp    c001f375 <Vm::faultHandler(regs*)+0x55c>
c001f360:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f364:	eb 0f                	jmp    c001f375 <Vm::faultHandler(regs*)+0x55c>
c001f366:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f36a:	eb 09                	jmp    c001f375 <Vm::faultHandler(regs*)+0x55c>
c001f36c:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f36f:	eb 04                	jmp    c001f375 <Vm::faultHandler(regs*)+0x55c>
c001f371:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f375:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f37a:	74 0d                	je     c001f389 <Vm::faultHandler(regs*)+0x570>
c001f37c:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f383:	0f 87 8b 00 00 00    	ja     c001f414 <Vm::faultHandler(regs*)+0x5fb>
c001f389:	53                   	push   ebx
c001f38a:	53                   	push   ebx
c001f38b:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f38f:	52                   	push   edx
c001f390:	50                   	push   eax
c001f391:	e8 0f fa ff ff       	call   c001eda5 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f396:	5e                   	pop    esi
c001f397:	0f b6 c0             	movzx  eax,al
c001f39a:	5d                   	pop    ebp
c001f39b:	50                   	push   eax
c001f39c:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f3a0:	50                   	push   eax
c001f3a1:	e8 91 f6 ff ff       	call   c001ea37 <Vm::outbv(unsigned short, unsigned char)>
c001f3a6:	83 c4 10             	add    esp,0x10
c001f3a9:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f3ac:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f3b0:	74 03                	je     c001f3b5 <Vm::faultHandler(regs*)+0x59c>
c001f3b2:	48                   	dec    eax
c001f3b3:	eb 01                	jmp    c001f3b6 <Vm::faultHandler(regs*)+0x59d>
c001f3b5:	40                   	inc    eax
c001f3b6:	0f b7 c0             	movzx  eax,ax
c001f3b9:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f3bc:	e9 24 02 00 00       	jmp    c001f5e5 <Vm::faultHandler(regs*)+0x7cc>
c001f3c1:	83 ec 0c             	sub    esp,0xc
c001f3c4:	4b                   	dec    ebx
c001f3c5:	68 7f c8 02 c0       	push   0xc002c87f
c001f3ca:	e8 62 3b ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001f3cf:	83 c4 10             	add    esp,0x10
c001f3d2:	80 fb 05             	cmp    bl,0x5
c001f3d5:	77 0a                	ja     c001f3e1 <Vm::faultHandler(regs*)+0x5c8>
c001f3d7:	0f b6 db             	movzx  ebx,bl
c001f3da:	ff 24 9d 08 c9 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd36f8]
c001f3e1:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f3e5:	eb 1b                	jmp    c001f402 <Vm::faultHandler(regs*)+0x5e9>
c001f3e7:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f3eb:	eb 15                	jmp    c001f402 <Vm::faultHandler(regs*)+0x5e9>
c001f3ed:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f3f1:	eb 0f                	jmp    c001f402 <Vm::faultHandler(regs*)+0x5e9>
c001f3f3:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f3f7:	eb 09                	jmp    c001f402 <Vm::faultHandler(regs*)+0x5e9>
c001f3f9:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f3fc:	eb 04                	jmp    c001f402 <Vm::faultHandler(regs*)+0x5e9>
c001f3fe:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f402:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001f405:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f40a:	74 39                	je     c001f445 <Vm::faultHandler(regs*)+0x62c>
c001f40c:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001f412:	76 31                	jbe    c001f445 <Vm::faultHandler(regs*)+0x62c>
c001f414:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f418:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f41c:	51                   	push   ecx
c001f41d:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f421:	51                   	push   ecx
c001f422:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f426:	51                   	push   ecx
c001f427:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f42b:	51                   	push   ecx
c001f42c:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f430:	52                   	push   edx
c001f431:	50                   	push   eax
c001f432:	50                   	push   eax
c001f433:	68 4c c8 02 c0       	push   0xc002c84c
c001f438:	e8 f4 3a ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001f43d:	83 c4 20             	add    esp,0x20
c001f440:	e9 fb 01 00 00       	jmp    c001f640 <Vm::faultHandler(regs*)+0x827>
c001f445:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001f448:	0f b7 d3             	movzx  edx,bx
c001f44b:	81 e6 00 04 00 00    	and    esi,0x400
c001f451:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001f454:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f459:	74 1d                	je     c001f478 <Vm::faultHandler(regs*)+0x65f>
c001f45b:	51                   	push   ecx
c001f45c:	51                   	push   ecx
c001f45d:	52                   	push   edx
c001f45e:	50                   	push   eax
c001f45f:	e8 64 f9 ff ff       	call   c001edc8 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f464:	83 c4 10             	add    esp,0x10
c001f467:	89 ea                	mov    edx,ebp
c001f469:	ef                   	out    dx,eax
c001f46a:	85 f6                	test   esi,esi
c001f46c:	74 05                	je     c001f473 <Vm::faultHandler(regs*)+0x65a>
c001f46e:	83 eb 04             	sub    ebx,0x4
c001f471:	eb 21                	jmp    c001f494 <Vm::faultHandler(regs*)+0x67b>
c001f473:	83 c3 04             	add    ebx,0x4
c001f476:	eb 1c                	jmp    c001f494 <Vm::faultHandler(regs*)+0x67b>
c001f478:	51                   	push   ecx
c001f479:	51                   	push   ecx
c001f47a:	52                   	push   edx
c001f47b:	50                   	push   eax
c001f47c:	e8 35 f9 ff ff       	call   c001edb6 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f481:	83 c4 10             	add    esp,0x10
c001f484:	89 ea                	mov    edx,ebp
c001f486:	66 ef                	out    dx,ax
c001f488:	85 f6                	test   esi,esi
c001f48a:	74 05                	je     c001f491 <Vm::faultHandler(regs*)+0x678>
c001f48c:	83 eb 02             	sub    ebx,0x2
c001f48f:	eb 03                	jmp    c001f494 <Vm::faultHandler(regs*)+0x67b>
c001f491:	83 c3 02             	add    ebx,0x2
c001f494:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001f49a:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001f49d:	e9 43 01 00 00       	jmp    c001f5e5 <Vm::faultHandler(regs*)+0x7cc>
c001f4a2:	53                   	push   ebx
c001f4a3:	53                   	push   ebx
c001f4a4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4a8:	50                   	push   eax
c001f4a9:	68 85 c8 02 c0       	push   0xc002c885
c001f4ae:	e8 7e 3a ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001f4b3:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f4ba:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4be:	89 04 24             	mov    DWORD PTR [esp],eax
c001f4c1:	e8 5e f5 ff ff       	call   c001ea24 <Vm::inbv(unsigned short)>
c001f4c6:	0f b6 c0             	movzx  eax,al
c001f4c9:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f4cc:	eb 5e                	jmp    c001f52c <Vm::faultHandler(regs*)+0x713>
c001f4ce:	51                   	push   ecx
c001f4cf:	51                   	push   ecx
c001f4d0:	53                   	push   ebx
c001f4d1:	68 8b c8 02 c0       	push   0xc002c88b
c001f4d6:	e8 56 3a ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001f4db:	83 c4 10             	add    esp,0x10
c001f4de:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f4e3:	74 07                	je     c001f4ec <Vm::faultHandler(regs*)+0x6d3>
c001f4e5:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f4e9:	ed                   	in     eax,dx
c001f4ea:	eb 14                	jmp    c001f500 <Vm::faultHandler(regs*)+0x6e7>
c001f4ec:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001f4ef:	66 31 db             	xor    bx,bx
c001f4f2:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001f4f5:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f4f9:	66 ed                	in     ax,dx
c001f4fb:	0f b7 c0             	movzx  eax,ax
c001f4fe:	09 d8                	or     eax,ebx
c001f500:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f503:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f507:	e9 dc 00 00 00       	jmp    c001f5e8 <Vm::faultHandler(regs*)+0x7cf>
c001f50c:	50                   	push   eax
c001f50d:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f510:	53                   	push   ebx
c001f511:	68 91 c8 02 c0       	push   0xc002c891
c001f516:	e8 16 3a ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001f51b:	58                   	pop    eax
c001f51c:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f520:	5a                   	pop    edx
c001f521:	50                   	push   eax
c001f522:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f526:	50                   	push   eax
c001f527:	e8 0b f5 ff ff       	call   c001ea37 <Vm::outbv(unsigned short, unsigned char)>
c001f52c:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f530:	e9 85 00 00 00       	jmp    c001f5ba <Vm::faultHandler(regs*)+0x7a1>
c001f535:	50                   	push   eax
c001f536:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f539:	53                   	push   ebx
c001f53a:	68 9a c8 02 c0       	push   0xc002c89a
c001f53f:	e8 ed 39 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001f544:	83 c4 10             	add    esp,0x10
c001f547:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f54b:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f550:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f553:	74 03                	je     c001f558 <Vm::faultHandler(regs*)+0x73f>
c001f555:	ef                   	out    dx,eax
c001f556:	eb ab                	jmp    c001f503 <Vm::faultHandler(regs*)+0x6ea>
c001f558:	66 ef                	out    dx,ax
c001f55a:	eb a7                	jmp    c001f503 <Vm::faultHandler(regs*)+0x6ea>
c001f55c:	55                   	push   ebp
c001f55d:	55                   	push   ebp
c001f55e:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f561:	68 a3 c8 02 c0       	push   0xc002c8a3
c001f566:	e8 c6 39 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001f56b:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f572:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f576:	89 04 24             	mov    DWORD PTR [esp],eax
c001f579:	e8 a6 f4 ff ff       	call   c001ea24 <Vm::inbv(unsigned short)>
c001f57e:	0f b6 c0             	movzx  eax,al
c001f581:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f584:	eb 31                	jmp    c001f5b7 <Vm::faultHandler(regs*)+0x79e>
c001f586:	56                   	push   esi
c001f587:	56                   	push   esi
c001f588:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f58b:	68 a9 c8 02 c0       	push   0xc002c8a9
c001f590:	e8 9c 39 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001f595:	83 c4 10             	add    esp,0x10
c001f598:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f59b:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f5a0:	74 03                	je     c001f5a5 <Vm::faultHandler(regs*)+0x78c>
c001f5a2:	ed                   	in     eax,dx
c001f5a3:	eb 0d                	jmp    c001f5b2 <Vm::faultHandler(regs*)+0x799>
c001f5a5:	66 ed                	in     ax,dx
c001f5a7:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001f5aa:	0f b7 c0             	movzx  eax,ax
c001f5ad:	66 31 d2             	xor    dx,dx
c001f5b0:	09 d0                	or     eax,edx
c001f5b2:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f5b5:	eb 2e                	jmp    c001f5e5 <Vm::faultHandler(regs*)+0x7cc>
c001f5b7:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f5ba:	83 c4 10             	add    esp,0x10
c001f5bd:	eb 29                	jmp    c001f5e8 <Vm::faultHandler(regs*)+0x7cf>
c001f5bf:	50                   	push   eax
c001f5c0:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f5c3:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f5c6:	68 b8 c8 02 c0       	push   0xc002c8b8
c001f5cb:	e8 61 39 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001f5d0:	83 c4 10             	add    esp,0x10
c001f5d3:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f5d6:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f5db:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f5de:	74 03                	je     c001f5e3 <Vm::faultHandler(regs*)+0x7ca>
c001f5e0:	ef                   	out    dx,eax
c001f5e1:	eb 02                	jmp    c001f5e5 <Vm::faultHandler(regs*)+0x7cc>
c001f5e3:	66 ef                	out    dx,ax
c001f5e5:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f5e8:	b0 01                	mov    al,0x1
c001f5ea:	eb 56                	jmp    c001f642 <Vm::faultHandler(regs*)+0x829>
c001f5ec:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f5f0:	51                   	push   ecx
c001f5f1:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f5f5:	51                   	push   ecx
c001f5f6:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f5fa:	51                   	push   ecx
c001f5fb:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f5ff:	51                   	push   ecx
c001f600:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f604:	52                   	push   edx
c001f605:	50                   	push   eax
c001f606:	50                   	push   eax
c001f607:	68 c1 c8 02 c0       	push   0xc002c8c1
c001f60c:	e8 20 39 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c001f611:	83 c4 20             	add    esp,0x20
c001f614:	83 ec 0c             	sub    esp,0xc
c001f617:	6a 60                	push   0x60
c001f619:	e8 06 f4 ff ff       	call   c001ea24 <Vm::inbv(unsigned short)>
c001f61e:	83 c4 10             	add    esp,0x10
c001f621:	3c 1c                	cmp    al,0x1c
c001f623:	74 04                	je     c001f629 <Vm::faultHandler(regs*)+0x810>
c001f625:	3c 5a                	cmp    al,0x5a
c001f627:	75 eb                	jne    c001f614 <Vm::faultHandler(regs*)+0x7fb>
c001f629:	3c 1c                	cmp    al,0x1c
c001f62b:	74 04                	je     c001f631 <Vm::faultHandler(regs*)+0x818>
c001f62d:	3c 5a                	cmp    al,0x5a
c001f62f:	75 0f                	jne    c001f640 <Vm::faultHandler(regs*)+0x827>
c001f631:	83 ec 0c             	sub    esp,0xc
c001f634:	6a 60                	push   0x60
c001f636:	e8 e9 f3 ff ff       	call   c001ea24 <Vm::inbv(unsigned short)>
c001f63b:	83 c4 10             	add    esp,0x10
c001f63e:	eb e9                	jmp    c001f629 <Vm::faultHandler(regs*)+0x810>
c001f640:	31 c0                	xor    eax,eax
c001f642:	83 c4 1c             	add    esp,0x1c
c001f645:	5b                   	pop    ebx
c001f646:	5e                   	pop    esi
c001f647:	5f                   	pop    edi
c001f648:	5d                   	pop    ebp
c001f649:	c3                   	ret    

c001f64a <Vm::fpuInternalTo32(unsigned long long)>:
c001f64a:	57                   	push   edi
c001f64b:	56                   	push   esi
c001f64c:	53                   	push   ebx
c001f64d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f651:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f655:	89 d6                	mov    esi,edx
c001f657:	89 d7                	mov    edi,edx
c001f659:	89 c1                	mov    ecx,eax
c001f65b:	c1 ef 14             	shr    edi,0x14
c001f65e:	89 d3                	mov    ebx,edx
c001f660:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f666:	31 d2                	xor    edx,edx
c001f668:	89 f8                	mov    eax,edi
c001f66a:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f670:	bf ff 00 00 00       	mov    edi,0xff
c001f675:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f67a:	83 d2 ff             	adc    edx,0xffffffff
c001f67d:	39 c7                	cmp    edi,eax
c001f67f:	bf 00 00 00 00       	mov    edi,0x0
c001f684:	19 d7                	sbb    edi,edx
c001f686:	72 15                	jb     c001f69d <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f688:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f68c:	c1 e0 17             	shl    eax,0x17
c001f68f:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f695:	09 f1                	or     ecx,esi
c001f697:	09 c1                	or     ecx,eax
c001f699:	89 cf                	mov    edi,ecx
c001f69b:	eb 02                	jmp    c001f69f <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f69d:	31 ff                	xor    edi,edi
c001f69f:	89 f8                	mov    eax,edi
c001f6a1:	5b                   	pop    ebx
c001f6a2:	5e                   	pop    esi
c001f6a3:	5f                   	pop    edi
c001f6a4:	c3                   	ret    

c001f6a5 <Vm::fpuInternalTo64(unsigned long long)>:
c001f6a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6a9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f6ad:	c3                   	ret    

c001f6ae <Vm::fpu32ToInternal(unsigned int)>:
c001f6ae:	57                   	push   edi
c001f6af:	31 ff                	xor    edi,edi
c001f6b1:	56                   	push   esi
c001f6b2:	53                   	push   ebx
c001f6b3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f6b7:	89 cb                	mov    ebx,ecx
c001f6b9:	89 ce                	mov    esi,ecx
c001f6bb:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f6c1:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f6c7:	c1 e9 17             	shr    ecx,0x17
c001f6ca:	89 f0                	mov    eax,esi
c001f6cc:	0f b6 d1             	movzx  edx,cl
c001f6cf:	81 c2 80 03 00 00    	add    edx,0x380
c001f6d5:	89 d1                	mov    ecx,edx
c001f6d7:	89 fa                	mov    edx,edi
c001f6d9:	c1 e1 14             	shl    ecx,0x14
c001f6dc:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f6e0:	c1 e0 1d             	shl    eax,0x1d
c001f6e3:	89 d7                	mov    edi,edx
c001f6e5:	89 c6                	mov    esi,eax
c001f6e7:	89 ca                	mov    edx,ecx
c001f6e9:	89 f0                	mov    eax,esi
c001f6eb:	09 fa                	or     edx,edi
c001f6ed:	09 da                	or     edx,ebx
c001f6ef:	5b                   	pop    ebx
c001f6f0:	5e                   	pop    esi
c001f6f1:	5f                   	pop    edi
c001f6f2:	c3                   	ret    

c001f6f3 <Vm::fpu64ToInternal(unsigned long long)>:
c001f6f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6f7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f6fb:	c3                   	ret    

c001f6fc <Vm::fpuFloatToLong(unsigned long long)>:
c001f6fc:	57                   	push   edi
c001f6fd:	31 c0                	xor    eax,eax
c001f6ff:	56                   	push   esi
c001f700:	31 d2                	xor    edx,edx
c001f702:	53                   	push   ebx
c001f703:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f707:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f70b:	89 d9                	mov    ecx,ebx
c001f70d:	c1 e9 14             	shr    ecx,0x14
c001f710:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f716:	89 cf                	mov    edi,ecx
c001f718:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f71e:	78 33                	js     c001f753 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f720:	89 d9                	mov    ecx,ebx
c001f722:	89 f0                	mov    eax,esi
c001f724:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f72a:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f730:	89 ca                	mov    edx,ecx
c001f732:	b9 34 00 00 00       	mov    ecx,0x34
c001f737:	29 f9                	sub    ecx,edi
c001f739:	0f ad d0             	shrd   eax,edx,cl
c001f73c:	d3 fa                	sar    edx,cl
c001f73e:	f6 c1 20             	test   cl,0x20
c001f741:	74 05                	je     c001f748 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f743:	89 d0                	mov    eax,edx
c001f745:	c1 fa 1f             	sar    edx,0x1f
c001f748:	85 db                	test   ebx,ebx
c001f74a:	79 07                	jns    c001f753 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f74c:	f7 d8                	neg    eax
c001f74e:	83 d2 00             	adc    edx,0x0
c001f751:	f7 da                	neg    edx
c001f753:	5b                   	pop    ebx
c001f754:	5e                   	pop    esi
c001f755:	5f                   	pop    edi
c001f756:	c3                   	ret    

c001f757 <Vm::fpuULongToFloat(unsigned long long)>:
c001f757:	57                   	push   edi
c001f758:	31 c9                	xor    ecx,ecx
c001f75a:	56                   	push   esi
c001f75b:	53                   	push   ebx
c001f75c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f760:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f764:	0f ba e7 14          	bt     edi,0x14
c001f768:	72 07                	jb     c001f771 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f76a:	01 f6                	add    esi,esi
c001f76c:	11 ff                	adc    edi,edi
c001f76e:	41                   	inc    ecx
c001f76f:	eb f3                	jmp    c001f764 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f771:	89 fa                	mov    edx,edi
c001f773:	89 f0                	mov    eax,esi
c001f775:	bb 33 04 00 00       	mov    ebx,0x433
c001f77a:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f780:	29 cb                	sub    ebx,ecx
c001f782:	89 d9                	mov    ecx,ebx
c001f784:	5b                   	pop    ebx
c001f785:	c1 e1 14             	shl    ecx,0x14
c001f788:	5e                   	pop    esi
c001f789:	09 ca                	or     edx,ecx
c001f78b:	5f                   	pop    edi
c001f78c:	c3                   	ret    

c001f78d <Vm::fpuLongToFloat(long long)>:
c001f78d:	56                   	push   esi
c001f78e:	31 c0                	xor    eax,eax
c001f790:	53                   	push   ebx
c001f791:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f795:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f799:	39 c8                	cmp    eax,ecx
c001f79b:	19 d8                	sbb    eax,ebx
c001f79d:	7d 04                	jge    c001f7a3 <Vm::fpuLongToFloat(long long)+0x16>
c001f79f:	31 f6                	xor    esi,esi
c001f7a1:	eb 0c                	jmp    c001f7af <Vm::fpuLongToFloat(long long)+0x22>
c001f7a3:	f7 d9                	neg    ecx
c001f7a5:	be 01 00 00 00       	mov    esi,0x1
c001f7aa:	83 d3 00             	adc    ebx,0x0
c001f7ad:	f7 db                	neg    ebx
c001f7af:	31 c0                	xor    eax,eax
c001f7b1:	0f ba e3 14          	bt     ebx,0x14
c001f7b5:	72 07                	jb     c001f7be <Vm::fpuLongToFloat(long long)+0x31>
c001f7b7:	01 c9                	add    ecx,ecx
c001f7b9:	11 db                	adc    ebx,ebx
c001f7bb:	40                   	inc    eax
c001f7bc:	eb f3                	jmp    c001f7b1 <Vm::fpuLongToFloat(long long)+0x24>
c001f7be:	ba 33 04 00 00       	mov    edx,0x433
c001f7c3:	29 c2                	sub    edx,eax
c001f7c5:	89 c8                	mov    eax,ecx
c001f7c7:	c1 e2 14             	shl    edx,0x14
c001f7ca:	89 d9                	mov    ecx,ebx
c001f7cc:	89 f3                	mov    ebx,esi
c001f7ce:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f7d4:	09 ca                	or     edx,ecx
c001f7d6:	84 db                	test   bl,bl
c001f7d8:	74 06                	je     c001f7e0 <Vm::fpuLongToFloat(long long)+0x53>
c001f7da:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f7e0:	5b                   	pop    ebx
c001f7e1:	5e                   	pop    esi
c001f7e2:	c3                   	ret    

c001f7e3 <Vm::fpuGet0()>:
c001f7e3:	31 c0                	xor    eax,eax
c001f7e5:	31 d2                	xor    edx,edx
c001f7e7:	c3                   	ret    

c001f7e8 <Vm::fpuGet1()>:
c001f7e8:	b8 01 00 00 00       	mov    eax,0x1
c001f7ed:	31 d2                	xor    edx,edx
c001f7ef:	c3                   	ret    

c001f7f0 <Vm::fpuGetPi()>:
c001f7f0:	b8 03 00 00 00       	mov    eax,0x3
c001f7f5:	31 d2                	xor    edx,edx
c001f7f7:	c3                   	ret    

c001f7f8 <Vm::fpuGetLog2E()>:
c001f7f8:	83 ec 18             	sub    esp,0x18
c001f7fb:	68 20 c9 02 c0       	push   0xc002c920
c001f800:	e8 de ad ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c001f805:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f80a:	31 d2                	xor    edx,edx
c001f80c:	83 c4 1c             	add    esp,0x1c
c001f80f:	c3                   	ret    

c001f810 <Vm::fpuGetLogE2()>:
c001f810:	83 ec 18             	sub    esp,0x18
c001f813:	68 2c c9 02 c0       	push   0xc002c92c
c001f818:	e8 c6 ad ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c001f81d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f822:	31 d2                	xor    edx,edx
c001f824:	83 c4 1c             	add    esp,0x1c
c001f827:	c3                   	ret    

c001f828 <Vm::fpuGetLog210()>:
c001f828:	83 ec 18             	sub    esp,0x18
c001f82b:	68 38 c9 02 c0       	push   0xc002c938
c001f830:	e8 ae ad ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c001f835:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f83a:	31 d2                	xor    edx,edx
c001f83c:	83 c4 1c             	add    esp,0x1c
c001f83f:	c3                   	ret    

c001f840 <Vm::fpuGetLog102()>:
c001f840:	83 ec 18             	sub    esp,0x18
c001f843:	68 45 c9 02 c0       	push   0xc002c945
c001f848:	e8 96 ad ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c001f84d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f852:	31 d2                	xor    edx,edx
c001f854:	83 c4 1c             	add    esp,0x1c
c001f857:	c3                   	ret    

c001f858 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f858:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f85c:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f860:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f864:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f868:	0f 92 c0             	setb   al
c001f86b:	c3                   	ret    

c001f86c <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f86c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f874:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f878:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f87c:	09 c2                	or     edx,eax
c001f87e:	0f 94 c0             	sete   al
c001f881:	c3                   	ret    

c001f882 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f882:	57                   	push   edi
c001f883:	56                   	push   esi
c001f884:	53                   	push   ebx
c001f885:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f889:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f88d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f891:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f895:	57                   	push   edi
c001f896:	56                   	push   esi
c001f897:	53                   	push   ebx
c001f898:	51                   	push   ecx
c001f899:	e8 ce ff ff ff       	call   c001f86c <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f89e:	83 c4 10             	add    esp,0x10
c001f8a1:	88 c2                	mov    dl,al
c001f8a3:	31 c0                	xor    eax,eax
c001f8a5:	84 d2                	test   dl,dl
c001f8a7:	75 0c                	jne    c001f8b5 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f8a9:	57                   	push   edi
c001f8aa:	56                   	push   esi
c001f8ab:	53                   	push   ebx
c001f8ac:	51                   	push   ecx
c001f8ad:	e8 a6 ff ff ff       	call   c001f858 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f8b2:	83 c4 10             	add    esp,0x10
c001f8b5:	83 e0 01             	and    eax,0x1
c001f8b8:	5b                   	pop    ebx
c001f8b9:	88 c1                	mov    cl,al
c001f8bb:	83 e2 01             	and    edx,0x1
c001f8be:	a0 a1 1b 03 c0       	mov    al,ds:0xc0031ba1
c001f8c3:	c1 e2 06             	shl    edx,0x6
c001f8c6:	83 e0 ba             	and    eax,0xffffffba
c001f8c9:	5e                   	pop    esi
c001f8ca:	09 c8                	or     eax,ecx
c001f8cc:	5f                   	pop    edi
c001f8cd:	09 d0                	or     eax,edx
c001f8cf:	a2 a1 1b 03 c0       	mov    ds:0xc0031ba1,al
c001f8d4:	c3                   	ret    

c001f8d5 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f8d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f8d9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f8dd:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f8e1:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f8e5:	c3                   	ret    

c001f8e6 <Vm::fpuAbs(unsigned long long)>:
c001f8e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f8ee:	c3                   	ret    

c001f8ef <Vm::fpuChs(unsigned long long)>:
c001f8ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8f3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f8f7:	f7 d8                	neg    eax
c001f8f9:	83 d2 00             	adc    edx,0x0
c001f8fc:	f7 da                	neg    edx
c001f8fe:	c3                   	ret    

c001f8ff <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f8ff:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f903:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f908:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f90c:	eb c7                	jmp    c001f8d5 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f90e <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f90e:	53                   	push   ebx
c001f90f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f913:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f917:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f91b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f91f:	0f af ca             	imul   ecx,edx
c001f922:	0f af d8             	imul   ebx,eax
c001f925:	f7 e2                	mul    edx
c001f927:	01 d9                	add    ecx,ebx
c001f929:	5b                   	pop    ebx
c001f92a:	01 ca                	add    edx,ecx
c001f92c:	c3                   	ret    

c001f92d <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f92d:	83 ec 0c             	sub    esp,0xc
c001f930:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f934:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f938:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f93c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f940:	e8 a7 70 00 00       	call   c00269ec <__udivdi3>
c001f945:	83 c4 1c             	add    esp,0x1c
c001f948:	c3                   	ret    

c001f949 <Vm::fpuSquare(unsigned long long)>:
c001f949:	50                   	push   eax
c001f94a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f94e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f952:	52                   	push   edx
c001f953:	50                   	push   eax
c001f954:	52                   	push   edx
c001f955:	50                   	push   eax
c001f956:	e8 b3 ff ff ff       	call   c001f90e <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f95b:	83 c4 14             	add    esp,0x14
c001f95e:	c3                   	ret    

c001f95f <Vm::fpuGetReg(int)>:
c001f95f:	83 ec 0c             	sub    esp,0xc
c001f962:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f967:	76 10                	jbe    c001f979 <Vm::fpuGetReg(int)+0x1a>
c001f969:	83 ec 0c             	sub    esp,0xc
c001f96c:	68 52 c9 02 c0       	push   0xc002c952
c001f971:	e8 6d ac ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c001f976:	83 c4 10             	add    esp,0x10
c001f979:	a0 a1 1b 03 c0       	mov    al,ds:0xc0031ba1
c001f97e:	b9 08 00 00 00       	mov    ecx,0x8
c001f983:	c0 e8 03             	shr    al,0x3
c001f986:	83 e0 07             	and    eax,0x7
c001f989:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f98d:	99                   	cdq    
c001f98e:	f7 f9                	idiv   ecx
c001f990:	8b 04 d5 a4 1b 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffce45c]
c001f997:	8b 14 d5 a8 1b 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffce458]
c001f99e:	83 c4 0c             	add    esp,0xc
c001f9a1:	c3                   	ret    

c001f9a2 <Vm::fpuSetReg(int, unsigned long long)>:
c001f9a2:	57                   	push   edi
c001f9a3:	56                   	push   esi
c001f9a4:	52                   	push   edx
c001f9a5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f9a9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f9ad:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f9b2:	76 10                	jbe    c001f9c4 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f9b4:	83 ec 0c             	sub    esp,0xc
c001f9b7:	68 65 c9 02 c0       	push   0xc002c965
c001f9bc:	e8 22 ac ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c001f9c1:	83 c4 10             	add    esp,0x10
c001f9c4:	a0 a1 1b 03 c0       	mov    al,ds:0xc0031ba1
c001f9c9:	b9 08 00 00 00       	mov    ecx,0x8
c001f9ce:	c0 e8 03             	shr    al,0x3
c001f9d1:	83 e0 07             	and    eax,0x7
c001f9d4:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f9d8:	99                   	cdq    
c001f9d9:	f7 f9                	idiv   ecx
c001f9db:	89 34 d5 a4 1b 03 c0 	mov    DWORD PTR [edx*8-0x3ffce45c],esi
c001f9e2:	89 3c d5 a8 1b 03 c0 	mov    DWORD PTR [edx*8-0x3ffce458],edi
c001f9e9:	58                   	pop    eax
c001f9ea:	5e                   	pop    esi
c001f9eb:	5f                   	pop    edi
c001f9ec:	c3                   	ret    

c001f9ed <Vm::fpuPush(unsigned long long)>:
c001f9ed:	a0 a1 1b 03 c0       	mov    al,ds:0xc0031ba1
c001f9f2:	c0 e8 03             	shr    al,0x3
c001f9f5:	83 e0 07             	and    eax,0x7
c001f9f8:	83 c0 07             	add    eax,0x7
c001f9fb:	88 c2                	mov    dl,al
c001f9fd:	83 e0 07             	and    eax,0x7
c001fa00:	83 e2 07             	and    edx,0x7
c001fa03:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001fa0a:	8a 15 a1 1b 03 c0    	mov    dl,BYTE PTR ds:0xc0031ba1
c001fa10:	83 e2 c7             	and    edx,0xffffffc7
c001fa13:	09 ca                	or     edx,ecx
c001fa15:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fa19:	88 15 a1 1b 03 c0    	mov    BYTE PTR ds:0xc0031ba1,dl
c001fa1f:	89 0c c5 a8 1b 03 c0 	mov    DWORD PTR [eax*8-0x3ffce458],ecx
c001fa26:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fa2a:	89 14 c5 a4 1b 03 c0 	mov    DWORD PTR [eax*8-0x3ffce45c],edx
c001fa31:	a1 e4 1b 03 c0       	mov    eax,ds:0xc0031be4
c001fa36:	83 f8 08             	cmp    eax,0x8
c001fa39:	75 08                	jne    c001fa43 <Vm::fpuPush(unsigned long long)+0x56>
c001fa3b:	80 0d a0 1b 03 c0 40 	or     BYTE PTR ds:0xc0031ba0,0x40
c001fa42:	c3                   	ret    
c001fa43:	40                   	inc    eax
c001fa44:	a3 e4 1b 03 c0       	mov    ds:0xc0031be4,eax
c001fa49:	c3                   	ret    

c001fa4a <Vm::fpuPop()>:
c001fa4a:	8a 0d a1 1b 03 c0    	mov    cl,BYTE PTR ds:0xc0031ba1
c001fa50:	53                   	push   ebx
c001fa51:	c0 e9 03             	shr    cl,0x3
c001fa54:	8a 1d a1 1b 03 c0    	mov    bl,BYTE PTR ds:0xc0031ba1
c001fa5a:	83 e1 07             	and    ecx,0x7
c001fa5d:	83 e3 c7             	and    ebx,0xffffffc7
c001fa60:	8b 04 cd a4 1b 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffce45c]
c001fa67:	8b 14 cd a8 1b 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffce458]
c001fa6e:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001fa75:	83 e1 38             	and    ecx,0x38
c001fa78:	09 d9                	or     ecx,ebx
c001fa7a:	88 0d a1 1b 03 c0    	mov    BYTE PTR ds:0xc0031ba1,cl
c001fa80:	8b 0d e4 1b 03 c0    	mov    ecx,DWORD PTR ds:0xc0031be4
c001fa86:	85 c9                	test   ecx,ecx
c001fa88:	74 09                	je     c001fa93 <Vm::fpuPop()+0x49>
c001fa8a:	49                   	dec    ecx
c001fa8b:	89 0d e4 1b 03 c0    	mov    DWORD PTR ds:0xc0031be4,ecx
c001fa91:	eb 07                	jmp    c001fa9a <Vm::fpuPop()+0x50>
c001fa93:	80 0d a0 1b 03 c0 40 	or     BYTE PTR ds:0xc0031ba0,0x40
c001fa9a:	5b                   	pop    ebx
c001fa9b:	c3                   	ret    

c001fa9c <Vm::x87Handler(regs*)>:
c001fa9c:	55                   	push   ebp
c001fa9d:	57                   	push   edi
c001fa9e:	56                   	push   esi
c001fa9f:	53                   	push   ebx
c001faa0:	83 ec 1c             	sub    esp,0x1c
c001faa3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001faa7:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001faac:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001faaf:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001fab7:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001fabb:	50                   	push   eax
c001fabc:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001fac0:	50                   	push   eax
c001fac1:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fac5:	50                   	push   eax
c001fac6:	53                   	push   ebx
c001fac7:	e8 de a1 ff ff       	call   c0019caa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001facc:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001facf:	83 c4 10             	add    esp,0x10
c001fad2:	89 c6                	mov    esi,eax
c001fad4:	80 fa d9             	cmp    dl,0xd9
c001fad7:	0f 85 52 01 00 00    	jne    c001fc2f <Vm::x87Handler(regs*)+0x193>
c001fadd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fae1:	8d 50 20             	lea    edx,[eax+0x20]
c001fae4:	80 fa 0e             	cmp    dl,0xe
c001fae7:	0f 87 86 00 00 00    	ja     c001fb73 <Vm::x87Handler(regs*)+0xd7>
c001faed:	0f b6 d2             	movzx  edx,dl
c001faf0:	ff 24 95 78 c9 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd3688]
c001faf7:	e8 e7 fc ff ff       	call   c001f7e3 <Vm::fpuGet0()>
c001fafc:	eb 05                	jmp    c001fb03 <Vm::x87Handler(regs*)+0x67>
c001fafe:	e8 e5 fc ff ff       	call   c001f7e8 <Vm::fpuGet1()>
c001fb03:	57                   	push   edi
c001fb04:	57                   	push   edi
c001fb05:	52                   	push   edx
c001fb06:	50                   	push   eax
c001fb07:	e8 e1 fe ff ff       	call   c001f9ed <Vm::fpuPush(unsigned long long)>
c001fb0c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fb10:	83 c4 10             	add    esp,0x10
c001fb13:	b0 01                	mov    al,0x1
c001fb15:	e9 e3 09 00 00       	jmp    c00204fd <Vm::x87Handler(regs*)+0xa61>
c001fb1a:	83 ec 0c             	sub    esp,0xc
c001fb1d:	6a 00                	push   0x0
c001fb1f:	e8 3b fe ff ff       	call   c001f95f <Vm::fpuGetReg(int)>
c001fb24:	59                   	pop    ecx
c001fb25:	5e                   	pop    esi
c001fb26:	52                   	push   edx
c001fb27:	50                   	push   eax
c001fb28:	e8 c2 fd ff ff       	call   c001f8ef <Vm::fpuChs(unsigned long long)>
c001fb2d:	eb 13                	jmp    c001fb42 <Vm::x87Handler(regs*)+0xa6>
c001fb2f:	83 ec 0c             	sub    esp,0xc
c001fb32:	6a 00                	push   0x0
c001fb34:	e8 26 fe ff ff       	call   c001f95f <Vm::fpuGetReg(int)>
c001fb39:	5f                   	pop    edi
c001fb3a:	5d                   	pop    ebp
c001fb3b:	52                   	push   edx
c001fb3c:	50                   	push   eax
c001fb3d:	e8 a4 fd ff ff       	call   c001f8e6 <Vm::fpuAbs(unsigned long long)>
c001fb42:	83 c4 0c             	add    esp,0xc
c001fb45:	52                   	push   edx
c001fb46:	50                   	push   eax
c001fb47:	6a 00                	push   0x0
c001fb49:	e8 54 fe ff ff       	call   c001f9a2 <Vm::fpuSetReg(int, unsigned long long)>
c001fb4e:	eb bc                	jmp    c001fb0c <Vm::x87Handler(regs*)+0x70>
c001fb50:	e8 d3 fc ff ff       	call   c001f828 <Vm::fpuGetLog210()>
c001fb55:	eb ac                	jmp    c001fb03 <Vm::x87Handler(regs*)+0x67>
c001fb57:	e8 9c fc ff ff       	call   c001f7f8 <Vm::fpuGetLog2E()>
c001fb5c:	eb a5                	jmp    c001fb03 <Vm::x87Handler(regs*)+0x67>
c001fb5e:	e8 8d fc ff ff       	call   c001f7f0 <Vm::fpuGetPi()>
c001fb63:	eb 9e                	jmp    c001fb03 <Vm::x87Handler(regs*)+0x67>
c001fb65:	e8 d6 fc ff ff       	call   c001f840 <Vm::fpuGetLog102()>
c001fb6a:	eb 97                	jmp    c001fb03 <Vm::x87Handler(regs*)+0x67>
c001fb6c:	e8 9f fc ff ff       	call   c001f810 <Vm::fpuGetLogE2()>
c001fb71:	eb 90                	jmp    c001fb03 <Vm::x87Handler(regs*)+0x67>
c001fb73:	8d 50 40             	lea    edx,[eax+0x40]
c001fb76:	80 fa 07             	cmp    dl,0x7
c001fb79:	77 15                	ja     c001fb90 <Vm::x87Handler(regs*)+0xf4>
c001fb7b:	83 ec 0c             	sub    esp,0xc
c001fb7e:	2d c0 00 00 00       	sub    eax,0xc0
c001fb83:	50                   	push   eax
c001fb84:	e8 d6 fd ff ff       	call   c001f95f <Vm::fpuGetReg(int)>
c001fb89:	59                   	pop    ecx
c001fb8a:	5e                   	pop    esi
c001fb8b:	e9 75 ff ff ff       	jmp    c001fb05 <Vm::x87Handler(regs*)+0x69>
c001fb90:	8d 50 38             	lea    edx,[eax+0x38]
c001fb93:	80 fa 07             	cmp    dl,0x7
c001fb96:	77 3c                	ja     c001fbd4 <Vm::x87Handler(regs*)+0x138>
c001fb98:	83 ec 0c             	sub    esp,0xc
c001fb9b:	2d c8 00 00 00       	sub    eax,0xc8
c001fba0:	50                   	push   eax
c001fba1:	e8 b9 fd ff ff       	call   c001f95f <Vm::fpuGetReg(int)>
c001fba6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fbad:	89 c6                	mov    esi,eax
c001fbaf:	89 d7                	mov    edi,edx
c001fbb1:	e8 a9 fd ff ff       	call   c001f95f <Vm::fpuGetReg(int)>
c001fbb6:	83 c4 0c             	add    esp,0xc
c001fbb9:	52                   	push   edx
c001fbba:	50                   	push   eax
c001fbbb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fbbf:	2d c8 00 00 00       	sub    eax,0xc8
c001fbc4:	50                   	push   eax
c001fbc5:	e8 d8 fd ff ff       	call   c001f9a2 <Vm::fpuSetReg(int, unsigned long long)>
c001fbca:	83 c4 0c             	add    esp,0xc
c001fbcd:	57                   	push   edi
c001fbce:	56                   	push   esi
c001fbcf:	e9 73 ff ff ff       	jmp    c001fb47 <Vm::x87Handler(regs*)+0xab>
c001fbd4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fbd8:	84 d2                	test   dl,dl
c001fbda:	75 0f                	jne    c001fbeb <Vm::x87Handler(regs*)+0x14f>
c001fbdc:	83 ec 0c             	sub    esp,0xc
c001fbdf:	ff 36                	push   DWORD PTR [esi]
c001fbe1:	e8 c8 fa ff ff       	call   c001f6ae <Vm::fpu32ToInternal(unsigned int)>
c001fbe6:	e9 bf 00 00 00       	jmp    c001fcaa <Vm::x87Handler(regs*)+0x20e>
c001fbeb:	80 fa 03             	cmp    dl,0x3
c001fbee:	75 13                	jne    c001fc03 <Vm::x87Handler(regs*)+0x167>
c001fbf0:	e8 55 fe ff ff       	call   c001fa4a <Vm::fpuPop()>
c001fbf5:	55                   	push   ebp
c001fbf6:	55                   	push   ebp
c001fbf7:	52                   	push   edx
c001fbf8:	50                   	push   eax
c001fbf9:	e8 4c fa ff ff       	call   c001f64a <Vm::fpuInternalTo32(unsigned long long)>
c001fbfe:	e9 88 00 00 00       	jmp    c001fc8b <Vm::x87Handler(regs*)+0x1ef>
c001fc03:	80 fa 05             	cmp    dl,0x5
c001fc06:	75 0e                	jne    c001fc16 <Vm::x87Handler(regs*)+0x17a>
c001fc08:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fc0b:	66 a3 a2 1b 03 c0    	mov    ds:0xc0031ba2,ax
c001fc11:	e9 df 00 00 00       	jmp    c001fcf5 <Vm::x87Handler(regs*)+0x259>
c001fc16:	31 c0                	xor    eax,eax
c001fc18:	80 fa 07             	cmp    dl,0x7
c001fc1b:	0f 85 dc 08 00 00    	jne    c00204fd <Vm::x87Handler(regs*)+0xa61>
c001fc21:	66 a1 a2 1b 03 c0    	mov    ax,ds:0xc0031ba2
c001fc27:	66 89 06             	mov    WORD PTR [esi],ax
c001fc2a:	e9 c6 00 00 00       	jmp    c001fcf5 <Vm::x87Handler(regs*)+0x259>
c001fc2f:	80 fa d8             	cmp    dl,0xd8
c001fc32:	0f 84 c9 00 00 00    	je     c001fd01 <Vm::x87Handler(regs*)+0x265>
c001fc38:	80 fa dc             	cmp    dl,0xdc
c001fc3b:	0f 84 0d 02 00 00    	je     c001fe4e <Vm::x87Handler(regs*)+0x3b2>
c001fc41:	80 fa de             	cmp    dl,0xde
c001fc44:	0f 84 cd 02 00 00    	je     c001ff17 <Vm::x87Handler(regs*)+0x47b>
c001fc4a:	80 fa dd             	cmp    dl,0xdd
c001fc4d:	0f 84 5f 04 00 00    	je     c00200b2 <Vm::x87Handler(regs*)+0x616>
c001fc53:	80 fa da             	cmp    dl,0xda
c001fc56:	0f 84 24 05 00 00    	je     c0020180 <Vm::x87Handler(regs*)+0x6e4>
c001fc5c:	80 fa df             	cmp    dl,0xdf
c001fc5f:	0f 84 68 05 00 00    	je     c00201cd <Vm::x87Handler(regs*)+0x731>
c001fc65:	31 c0                	xor    eax,eax
c001fc67:	80 fa db             	cmp    dl,0xdb
c001fc6a:	0f 85 8d 08 00 00    	jne    c00204fd <Vm::x87Handler(regs*)+0xa61>
c001fc70:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc74:	80 fa 03             	cmp    dl,0x3
c001fc77:	0f 85 70 06 00 00    	jne    c00202ed <Vm::x87Handler(regs*)+0x851>
c001fc7d:	e8 c8 fd ff ff       	call   c001fa4a <Vm::fpuPop()>
c001fc82:	55                   	push   ebp
c001fc83:	55                   	push   ebp
c001fc84:	52                   	push   edx
c001fc85:	50                   	push   eax
c001fc86:	e8 71 fa ff ff       	call   c001f6fc <Vm::fpuFloatToLong(unsigned long long)>
c001fc8b:	83 c4 10             	add    esp,0x10
c001fc8e:	89 06                	mov    DWORD PTR [esi],eax
c001fc90:	eb 63                	jmp    c001fcf5 <Vm::x87Handler(regs*)+0x259>
c001fc92:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc96:	84 d2                	test   dl,dl
c001fc98:	0f 85 e6 05 00 00    	jne    c0020284 <Vm::x87Handler(regs*)+0x7e8>
c001fc9e:	57                   	push   edi
c001fc9f:	57                   	push   edi
c001fca0:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fca3:	ff 36                	push   DWORD PTR [esi]
c001fca5:	e8 49 fa ff ff       	call   c001f6f3 <Vm::fpu64ToInternal(unsigned long long)>
c001fcaa:	5e                   	pop    esi
c001fcab:	5f                   	pop    edi
c001fcac:	52                   	push   edx
c001fcad:	50                   	push   eax
c001fcae:	e8 3a fd ff ff       	call   c001f9ed <Vm::fpuPush(unsigned long long)>
c001fcb3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fcb7:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fcba:	e9 51 fe ff ff       	jmp    c001fb10 <Vm::x87Handler(regs*)+0x74>
c001fcbf:	80 fa 03             	cmp    dl,0x3
c001fcc2:	0f 85 d7 06 00 00    	jne    c002039f <Vm::x87Handler(regs*)+0x903>
c001fcc8:	57                   	push   edi
c001fcc9:	57                   	push   edi
c001fcca:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fccd:	ff 36                	push   DWORD PTR [esi]
c001fccf:	e8 1f fa ff ff       	call   c001f6f3 <Vm::fpu64ToInternal(unsigned long long)>
c001fcd4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fcdb:	89 c6                	mov    esi,eax
c001fcdd:	89 d7                	mov    edi,edx
c001fcdf:	e8 7b fc ff ff       	call   c001f95f <Vm::fpuGetReg(int)>
c001fce4:	57                   	push   edi
c001fce5:	56                   	push   esi
c001fce6:	52                   	push   edx
c001fce7:	50                   	push   eax
c001fce8:	e8 95 fb ff ff       	call   c001f882 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fced:	83 c4 20             	add    esp,0x20
c001fcf0:	e8 55 fd ff ff       	call   c001fa4a <Vm::fpuPop()>
c001fcf5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fcf9:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fcfc:	e9 12 fe ff ff       	jmp    c001fb13 <Vm::x87Handler(regs*)+0x77>
c001fd01:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd05:	8d 50 40             	lea    edx,[eax+0x40]
c001fd08:	80 fa 07             	cmp    dl,0x7
c001fd0b:	77 29                	ja     c001fd36 <Vm::x87Handler(regs*)+0x29a>
c001fd0d:	83 ec 0c             	sub    esp,0xc
c001fd10:	2d c0 00 00 00       	sub    eax,0xc0
c001fd15:	50                   	push   eax
c001fd16:	e8 44 fc ff ff       	call   c001f95f <Vm::fpuGetReg(int)>
c001fd1b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd22:	89 c6                	mov    esi,eax
c001fd24:	89 d7                	mov    edi,edx
c001fd26:	e8 34 fc ff ff       	call   c001f95f <Vm::fpuGetReg(int)>
c001fd2b:	57                   	push   edi
c001fd2c:	56                   	push   esi
c001fd2d:	52                   	push   edx
c001fd2e:	50                   	push   eax
c001fd2f:	e8 a1 fb ff ff       	call   c001f8d5 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fd34:	eb 2f                	jmp    c001fd65 <Vm::x87Handler(regs*)+0x2c9>
c001fd36:	8d 50 38             	lea    edx,[eax+0x38]
c001fd39:	80 fa 07             	cmp    dl,0x7
c001fd3c:	77 2f                	ja     c001fd6d <Vm::x87Handler(regs*)+0x2d1>
c001fd3e:	83 ec 0c             	sub    esp,0xc
c001fd41:	2d c8 00 00 00       	sub    eax,0xc8
c001fd46:	50                   	push   eax
c001fd47:	e8 13 fc ff ff       	call   c001f95f <Vm::fpuGetReg(int)>
c001fd4c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd53:	89 c6                	mov    esi,eax
c001fd55:	89 d7                	mov    edi,edx
c001fd57:	e8 03 fc ff ff       	call   c001f95f <Vm::fpuGetReg(int)>
c001fd5c:	57                   	push   edi
c001fd5d:	56                   	push   esi
c001fd5e:	52                   	push   edx
c001fd5f:	50                   	push   eax
c001fd60:	e8 a9 fb ff ff       	call   c001f90e <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fd65:	83 c4 1c             	add    esp,0x1c
c001fd68:	e9 d8 fd ff ff       	jmp    c001fb45 <Vm::x87Handler(regs*)+0xa9>
c001fd6d:	8d 50 30             	lea    edx,[eax+0x30]
c001fd70:	80 fa 07             	cmp    dl,0x7
c001fd73:	77 0d                	ja     c001fd82 <Vm::x87Handler(regs*)+0x2e6>
c001fd75:	83 ec 0c             	sub    esp,0xc
c001fd78:	2d d0 00 00 00       	sub    eax,0xd0
c001fd7d:	e9 99 03 00 00       	jmp    c002011b <Vm::x87Handler(regs*)+0x67f>
c001fd82:	8d 50 28             	lea    edx,[eax+0x28]
c001fd85:	80 fa 07             	cmp    dl,0x7
c001fd88:	77 0d                	ja     c001fd97 <Vm::x87Handler(regs*)+0x2fb>
c001fd8a:	83 ec 0c             	sub    esp,0xc
c001fd8d:	2d d8 00 00 00       	sub    eax,0xd8
c001fd92:	e9 c0 03 00 00       	jmp    c0020157 <Vm::x87Handler(regs*)+0x6bb>
c001fd97:	8d 50 20             	lea    edx,[eax+0x20]
c001fd9a:	80 fa 07             	cmp    dl,0x7
c001fd9d:	77 1b                	ja     c001fdba <Vm::x87Handler(regs*)+0x31e>
c001fd9f:	83 ec 0c             	sub    esp,0xc
c001fda2:	2d e0 00 00 00       	sub    eax,0xe0
c001fda7:	50                   	push   eax
c001fda8:	e8 b2 fb ff ff       	call   c001f95f <Vm::fpuGetReg(int)>
c001fdad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdb4:	89 c6                	mov    esi,eax
c001fdb6:	89 d7                	mov    edi,edx
c001fdb8:	eb 22                	jmp    c001fddc <Vm::x87Handler(regs*)+0x340>
c001fdba:	8d 50 18             	lea    edx,[eax+0x18]
c001fdbd:	80 fa 07             	cmp    dl,0x7
c001fdc0:	77 2d                	ja     c001fdef <Vm::x87Handler(regs*)+0x353>
c001fdc2:	83 ec 0c             	sub    esp,0xc
c001fdc5:	6a 00                	push   0x0
c001fdc7:	e8 93 fb ff ff       	call   c001f95f <Vm::fpuGetReg(int)>
c001fdcc:	89 c6                	mov    esi,eax
c001fdce:	89 d7                	mov    edi,edx
c001fdd0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdd4:	2d e8 00 00 00       	sub    eax,0xe8
c001fdd9:	89 04 24             	mov    DWORD PTR [esp],eax
c001fddc:	e8 7e fb ff ff       	call   c001f95f <Vm::fpuGetReg(int)>
c001fde1:	57                   	push   edi
c001fde2:	56                   	push   esi
c001fde3:	52                   	push   edx
c001fde4:	50                   	push   eax
c001fde5:	e8 15 fb ff ff       	call   c001f8ff <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fdea:	e9 76 ff ff ff       	jmp    c001fd65 <Vm::x87Handler(regs*)+0x2c9>
c001fdef:	8d 50 10             	lea    edx,[eax+0x10]
c001fdf2:	80 fa 07             	cmp    dl,0x7
c001fdf5:	77 1b                	ja     c001fe12 <Vm::x87Handler(regs*)+0x376>
c001fdf7:	83 ec 0c             	sub    esp,0xc
c001fdfa:	2d f0 00 00 00       	sub    eax,0xf0
c001fdff:	50                   	push   eax
c001fe00:	e8 5a fb ff ff       	call   c001f95f <Vm::fpuGetReg(int)>
c001fe05:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe0c:	89 c6                	mov    esi,eax
c001fe0e:	89 d7                	mov    edi,edx
c001fe10:	eb 22                	jmp    c001fe34 <Vm::x87Handler(regs*)+0x398>
c001fe12:	3c f7                	cmp    al,0xf7
c001fe14:	0f 86 d1 03 00 00    	jbe    c00201eb <Vm::x87Handler(regs*)+0x74f>
c001fe1a:	83 ec 0c             	sub    esp,0xc
c001fe1d:	6a 00                	push   0x0
c001fe1f:	e8 3b fb ff ff       	call   c001f95f <Vm::fpuGetReg(int)>
c001fe24:	89 c6                	mov    esi,eax
c001fe26:	89 d7                	mov    edi,edx
c001fe28:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe2c:	2d f8 00 00 00       	sub    eax,0xf8
c001fe31:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe34:	e8 26 fb ff ff       	call   c001f95f <Vm::fpuGetReg(int)>
c001fe39:	57                   	push   edi
c001fe3a:	56                   	push   esi
c001fe3b:	52                   	push   edx
c001fe3c:	50                   	push   eax
c001fe3d:	e8 eb fa ff ff       	call   c001f92d <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fe42:	83 c4 1c             	add    esp,0x1c
c001fe45:	52                   	push   edx
c001fe46:	50                   	push   eax
c001fe47:	6a 00                	push   0x0
c001fe49:	e9 51 02 00 00       	jmp    c002009f <Vm::x87Handler(regs*)+0x603>
c001fe4e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe52:	8d 50 40             	lea    edx,[eax+0x40]
c001fe55:	80 fa 07             	cmp    dl,0x7
c001fe58:	77 37                	ja     c001fe91 <Vm::x87Handler(regs*)+0x3f5>
c001fe5a:	83 ec 0c             	sub    esp,0xc
c001fe5d:	2d c0 00 00 00       	sub    eax,0xc0
c001fe62:	50                   	push   eax
c001fe63:	e8 f7 fa ff ff       	call   c001f95f <Vm::fpuGetReg(int)>
c001fe68:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe6f:	89 c6                	mov    esi,eax
c001fe71:	89 d7                	mov    edi,edx
c001fe73:	e8 e7 fa ff ff       	call   c001f95f <Vm::fpuGetReg(int)>
c001fe78:	57                   	push   edi
c001fe79:	56                   	push   esi
c001fe7a:	52                   	push   edx
c001fe7b:	50                   	push   eax
c001fe7c:	e8 54 fa ff ff       	call   c001f8d5 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fe81:	83 c4 1c             	add    esp,0x1c
c001fe84:	52                   	push   edx
c001fe85:	50                   	push   eax
c001fe86:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe8a:	2d c0 00 00 00       	sub    eax,0xc0
c001fe8f:	eb 3d                	jmp    c001fece <Vm::x87Handler(regs*)+0x432>
c001fe91:	8d 50 38             	lea    edx,[eax+0x38]
c001fe94:	80 fa 07             	cmp    dl,0x7
c001fe97:	77 3b                	ja     c001fed4 <Vm::x87Handler(regs*)+0x438>
c001fe99:	83 ec 0c             	sub    esp,0xc
c001fe9c:	2d c8 00 00 00       	sub    eax,0xc8
c001fea1:	50                   	push   eax
c001fea2:	e8 b8 fa ff ff       	call   c001f95f <Vm::fpuGetReg(int)>
c001fea7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001feae:	89 c6                	mov    esi,eax
c001feb0:	89 d7                	mov    edi,edx
c001feb2:	e8 a8 fa ff ff       	call   c001f95f <Vm::fpuGetReg(int)>
c001feb7:	57                   	push   edi
c001feb8:	56                   	push   esi
c001feb9:	52                   	push   edx
c001feba:	50                   	push   eax
c001febb:	e8 4e fa ff ff       	call   c001f90e <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fec0:	83 c4 1c             	add    esp,0x1c
c001fec3:	52                   	push   edx
c001fec4:	50                   	push   eax
c001fec5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fec9:	2d c8 00 00 00       	sub    eax,0xc8
c001fece:	50                   	push   eax
c001fecf:	e9 75 fc ff ff       	jmp    c001fb49 <Vm::x87Handler(regs*)+0xad>
c001fed4:	83 c0 18             	add    eax,0x18
c001fed7:	3c 07                	cmp    al,0x7
c001fed9:	0f 87 3b 04 00 00    	ja     c002031a <Vm::x87Handler(regs*)+0x87e>
c001fedf:	83 ec 0c             	sub    esp,0xc
c001fee2:	6a 00                	push   0x0
c001fee4:	e8 76 fa ff ff       	call   c001f95f <Vm::fpuGetReg(int)>
c001fee9:	89 c6                	mov    esi,eax
c001feeb:	89 d7                	mov    edi,edx
c001feed:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fef1:	2d e8 00 00 00       	sub    eax,0xe8
c001fef6:	89 04 24             	mov    DWORD PTR [esp],eax
c001fef9:	e8 61 fa ff ff       	call   c001f95f <Vm::fpuGetReg(int)>
c001fefe:	57                   	push   edi
c001feff:	56                   	push   esi
c001ff00:	52                   	push   edx
c001ff01:	50                   	push   eax
c001ff02:	e8 f8 f9 ff ff       	call   c001f8ff <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ff07:	83 c4 1c             	add    esp,0x1c
c001ff0a:	52                   	push   edx
c001ff0b:	50                   	push   eax
c001ff0c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff10:	2d e8 00 00 00       	sub    eax,0xe8
c001ff15:	eb b7                	jmp    c001fece <Vm::x87Handler(regs*)+0x432>
c001ff17:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff1b:	8d 50 40             	lea    edx,[eax+0x40]
c001ff1e:	80 fa 07             	cmp    dl,0x7
c001ff21:	77 3a                	ja     c001ff5d <Vm::x87Handler(regs*)+0x4c1>
c001ff23:	83 ec 0c             	sub    esp,0xc
c001ff26:	2d c0 00 00 00       	sub    eax,0xc0
c001ff2b:	50                   	push   eax
c001ff2c:	e8 2e fa ff ff       	call   c001f95f <Vm::fpuGetReg(int)>
c001ff31:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff38:	89 c6                	mov    esi,eax
c001ff3a:	89 d7                	mov    edi,edx
c001ff3c:	e8 1e fa ff ff       	call   c001f95f <Vm::fpuGetReg(int)>
c001ff41:	57                   	push   edi
c001ff42:	56                   	push   esi
c001ff43:	52                   	push   edx
c001ff44:	50                   	push   eax
c001ff45:	e8 8b f9 ff ff       	call   c001f8d5 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ff4a:	83 c4 1c             	add    esp,0x1c
c001ff4d:	52                   	push   edx
c001ff4e:	50                   	push   eax
c001ff4f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff53:	2d c0 00 00 00       	sub    eax,0xc0
c001ff58:	e9 9e 01 00 00       	jmp    c00200fb <Vm::x87Handler(regs*)+0x65f>
c001ff5d:	8d 50 20             	lea    edx,[eax+0x20]
c001ff60:	80 fa 07             	cmp    dl,0x7
c001ff63:	77 3a                	ja     c001ff9f <Vm::x87Handler(regs*)+0x503>
c001ff65:	83 ec 0c             	sub    esp,0xc
c001ff68:	2d e0 00 00 00       	sub    eax,0xe0
c001ff6d:	50                   	push   eax
c001ff6e:	e8 ec f9 ff ff       	call   c001f95f <Vm::fpuGetReg(int)>
c001ff73:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff7a:	89 c6                	mov    esi,eax
c001ff7c:	89 d7                	mov    edi,edx
c001ff7e:	e8 dc f9 ff ff       	call   c001f95f <Vm::fpuGetReg(int)>
c001ff83:	57                   	push   edi
c001ff84:	56                   	push   esi
c001ff85:	52                   	push   edx
c001ff86:	50                   	push   eax
c001ff87:	e8 73 f9 ff ff       	call   c001f8ff <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ff8c:	83 c4 1c             	add    esp,0x1c
c001ff8f:	52                   	push   edx
c001ff90:	50                   	push   eax
c001ff91:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff95:	2d e0 00 00 00       	sub    eax,0xe0
c001ff9a:	e9 5c 01 00 00       	jmp    c00200fb <Vm::x87Handler(regs*)+0x65f>
c001ff9f:	8d 50 18             	lea    edx,[eax+0x18]
c001ffa2:	80 fa 07             	cmp    dl,0x7
c001ffa5:	77 3b                	ja     c001ffe2 <Vm::x87Handler(regs*)+0x546>
c001ffa7:	83 ec 0c             	sub    esp,0xc
c001ffaa:	6a 00                	push   0x0
c001ffac:	e8 ae f9 ff ff       	call   c001f95f <Vm::fpuGetReg(int)>
c001ffb1:	89 c6                	mov    esi,eax
c001ffb3:	89 d7                	mov    edi,edx
c001ffb5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffb9:	2d e8 00 00 00       	sub    eax,0xe8
c001ffbe:	89 04 24             	mov    DWORD PTR [esp],eax
c001ffc1:	e8 99 f9 ff ff       	call   c001f95f <Vm::fpuGetReg(int)>
c001ffc6:	57                   	push   edi
c001ffc7:	56                   	push   esi
c001ffc8:	52                   	push   edx
c001ffc9:	50                   	push   eax
c001ffca:	e8 30 f9 ff ff       	call   c001f8ff <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ffcf:	83 c4 1c             	add    esp,0x1c
c001ffd2:	52                   	push   edx
c001ffd3:	50                   	push   eax
c001ffd4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffd8:	2d e8 00 00 00       	sub    eax,0xe8
c001ffdd:	e9 19 01 00 00       	jmp    c00200fb <Vm::x87Handler(regs*)+0x65f>
c001ffe2:	8d 50 38             	lea    edx,[eax+0x38]
c001ffe5:	80 fa 07             	cmp    dl,0x7
c001ffe8:	77 37                	ja     c0020021 <Vm::x87Handler(regs*)+0x585>
c001ffea:	83 ec 0c             	sub    esp,0xc
c001ffed:	2d c8 00 00 00       	sub    eax,0xc8
c001fff2:	50                   	push   eax
c001fff3:	e8 67 f9 ff ff       	call   c001f95f <Vm::fpuGetReg(int)>
c001fff8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ffff:	89 c6                	mov    esi,eax
c0020001:	89 d7                	mov    edi,edx
c0020003:	e8 57 f9 ff ff       	call   c001f95f <Vm::fpuGetReg(int)>
c0020008:	57                   	push   edi
c0020009:	56                   	push   esi
c002000a:	52                   	push   edx
c002000b:	50                   	push   eax
c002000c:	e8 fd f8 ff ff       	call   c001f90e <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020011:	83 c4 1c             	add    esp,0x1c
c0020014:	52                   	push   edx
c0020015:	50                   	push   eax
c0020016:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002001a:	2d c8 00 00 00       	sub    eax,0xc8
c002001f:	eb 7d                	jmp    c002009e <Vm::x87Handler(regs*)+0x602>
c0020021:	3c f7                	cmp    al,0xf7
c0020023:	76 38                	jbe    c002005d <Vm::x87Handler(regs*)+0x5c1>
c0020025:	83 ec 0c             	sub    esp,0xc
c0020028:	6a 00                	push   0x0
c002002a:	e8 30 f9 ff ff       	call   c001f95f <Vm::fpuGetReg(int)>
c002002f:	89 c6                	mov    esi,eax
c0020031:	89 d7                	mov    edi,edx
c0020033:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020037:	2d f8 00 00 00       	sub    eax,0xf8
c002003c:	89 04 24             	mov    DWORD PTR [esp],eax
c002003f:	e8 1b f9 ff ff       	call   c001f95f <Vm::fpuGetReg(int)>
c0020044:	57                   	push   edi
c0020045:	56                   	push   esi
c0020046:	52                   	push   edx
c0020047:	50                   	push   eax
c0020048:	e8 e0 f8 ff ff       	call   c001f92d <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002004d:	83 c4 1c             	add    esp,0x1c
c0020050:	52                   	push   edx
c0020051:	50                   	push   eax
c0020052:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020056:	2d f8 00 00 00       	sub    eax,0xf8
c002005b:	eb 41                	jmp    c002009e <Vm::x87Handler(regs*)+0x602>
c002005d:	8d 50 10             	lea    edx,[eax+0x10]
c0020060:	80 fa 07             	cmp    dl,0x7
c0020063:	0f 87 5a 01 00 00    	ja     c00201c3 <Vm::x87Handler(regs*)+0x727>
c0020069:	83 ec 0c             	sub    esp,0xc
c002006c:	2d f0 00 00 00       	sub    eax,0xf0
c0020071:	50                   	push   eax
c0020072:	e8 e8 f8 ff ff       	call   c001f95f <Vm::fpuGetReg(int)>
c0020077:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002007e:	89 c6                	mov    esi,eax
c0020080:	89 d7                	mov    edi,edx
c0020082:	e8 d8 f8 ff ff       	call   c001f95f <Vm::fpuGetReg(int)>
c0020087:	57                   	push   edi
c0020088:	56                   	push   esi
c0020089:	52                   	push   edx
c002008a:	50                   	push   eax
c002008b:	e8 9d f8 ff ff       	call   c001f92d <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020090:	83 c4 1c             	add    esp,0x1c
c0020093:	52                   	push   edx
c0020094:	50                   	push   eax
c0020095:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020099:	2d f0 00 00 00       	sub    eax,0xf0
c002009e:	50                   	push   eax
c002009f:	e8 fe f8 ff ff       	call   c001f9a2 <Vm::fpuSetReg(int, unsigned long long)>
c00200a4:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00200a8:	e8 9d f9 ff ff       	call   c001fa4a <Vm::fpuPop()>
c00200ad:	e9 5e fa ff ff       	jmp    c001fb10 <Vm::x87Handler(regs*)+0x74>
c00200b2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200b6:	8d 50 30             	lea    edx,[eax+0x30]
c00200b9:	80 fa 07             	cmp    dl,0x7
c00200bc:	77 1d                	ja     c00200db <Vm::x87Handler(regs*)+0x63f>
c00200be:	83 ec 0c             	sub    esp,0xc
c00200c1:	6a 00                	push   0x0
c00200c3:	e8 97 f8 ff ff       	call   c001f95f <Vm::fpuGetReg(int)>
c00200c8:	83 c4 0c             	add    esp,0xc
c00200cb:	52                   	push   edx
c00200cc:	50                   	push   eax
c00200cd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200d1:	2d d0 00 00 00       	sub    eax,0xd0
c00200d6:	e9 f3 fd ff ff       	jmp    c001fece <Vm::x87Handler(regs*)+0x432>
c00200db:	8d 50 28             	lea    edx,[eax+0x28]
c00200de:	80 fa 07             	cmp    dl,0x7
c00200e1:	77 28                	ja     c002010b <Vm::x87Handler(regs*)+0x66f>
c00200e3:	83 ec 0c             	sub    esp,0xc
c00200e6:	6a 00                	push   0x0
c00200e8:	e8 72 f8 ff ff       	call   c001f95f <Vm::fpuGetReg(int)>
c00200ed:	83 c4 0c             	add    esp,0xc
c00200f0:	52                   	push   edx
c00200f1:	50                   	push   eax
c00200f2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200f6:	2d d8 00 00 00       	sub    eax,0xd8
c00200fb:	50                   	push   eax
c00200fc:	e8 a1 f8 ff ff       	call   c001f9a2 <Vm::fpuSetReg(int, unsigned long long)>
c0020101:	e8 44 f9 ff ff       	call   c001fa4a <Vm::fpuPop()>
c0020106:	e9 01 fa ff ff       	jmp    c001fb0c <Vm::x87Handler(regs*)+0x70>
c002010b:	8d 50 20             	lea    edx,[eax+0x20]
c002010e:	80 fa 07             	cmp    dl,0x7
c0020111:	77 30                	ja     c0020143 <Vm::x87Handler(regs*)+0x6a7>
c0020113:	83 ec 0c             	sub    esp,0xc
c0020116:	2d e0 00 00 00       	sub    eax,0xe0
c002011b:	50                   	push   eax
c002011c:	e8 3e f8 ff ff       	call   c001f95f <Vm::fpuGetReg(int)>
c0020121:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020128:	89 c6                	mov    esi,eax
c002012a:	89 d7                	mov    edi,edx
c002012c:	e8 2e f8 ff ff       	call   c001f95f <Vm::fpuGetReg(int)>
c0020131:	57                   	push   edi
c0020132:	56                   	push   esi
c0020133:	52                   	push   edx
c0020134:	50                   	push   eax
c0020135:	e8 48 f7 ff ff       	call   c001f882 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002013a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002013e:	e9 54 02 00 00       	jmp    c0020397 <Vm::x87Handler(regs*)+0x8fb>
c0020143:	8d 50 18             	lea    edx,[eax+0x18]
c0020146:	80 fa 07             	cmp    dl,0x7
c0020149:	0f 87 43 fb ff ff    	ja     c001fc92 <Vm::x87Handler(regs*)+0x1f6>
c002014f:	83 ec 0c             	sub    esp,0xc
c0020152:	2d e8 00 00 00       	sub    eax,0xe8
c0020157:	50                   	push   eax
c0020158:	e8 02 f8 ff ff       	call   c001f95f <Vm::fpuGetReg(int)>
c002015d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020164:	89 c6                	mov    esi,eax
c0020166:	89 d7                	mov    edi,edx
c0020168:	e8 f2 f7 ff ff       	call   c001f95f <Vm::fpuGetReg(int)>
c002016d:	57                   	push   edi
c002016e:	56                   	push   esi
c002016f:	52                   	push   edx
c0020170:	50                   	push   eax
c0020171:	e8 0c f7 ff ff       	call   c001f882 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020176:	83 c4 20             	add    esp,0x20
c0020179:	e8 cc f8 ff ff       	call   c001fa4a <Vm::fpuPop()>
c002017e:	eb 62                	jmp    c00201e2 <Vm::x87Handler(regs*)+0x746>
c0020180:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c0020184:	0f 85 0f 01 00 00    	jne    c0020299 <Vm::x87Handler(regs*)+0x7fd>
c002018a:	83 ec 0c             	sub    esp,0xc
c002018d:	6a 01                	push   0x1
c002018f:	e8 cb f7 ff ff       	call   c001f95f <Vm::fpuGetReg(int)>
c0020194:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002019b:	89 c6                	mov    esi,eax
c002019d:	89 d7                	mov    edi,edx
c002019f:	e8 bb f7 ff ff       	call   c001f95f <Vm::fpuGetReg(int)>
c00201a4:	57                   	push   edi
c00201a5:	56                   	push   esi
c00201a6:	52                   	push   edx
c00201a7:	50                   	push   eax
c00201a8:	e8 d5 f6 ff ff       	call   c001f882 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00201ad:	83 c4 20             	add    esp,0x20
c00201b0:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00201b4:	e8 91 f8 ff ff       	call   c001fa4a <Vm::fpuPop()>
c00201b9:	e8 8c f8 ff ff       	call   c001fa4a <Vm::fpuPop()>
c00201be:	e9 50 f9 ff ff       	jmp    c001fb13 <Vm::x87Handler(regs*)+0x77>
c00201c3:	3c d9                	cmp    al,0xd9
c00201c5:	0f 85 b5 02 00 00    	jne    c0020480 <Vm::x87Handler(regs*)+0x9e4>
c00201cb:	eb bd                	jmp    c002018a <Vm::x87Handler(regs*)+0x6ee>
c00201cd:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c00201d1:	0f 85 ea 02 00 00    	jne    c00204c1 <Vm::x87Handler(regs*)+0xa25>
c00201d7:	0f b7 05 a0 1b 03 c0 	movzx  eax,WORD PTR ds:0xc0031ba0
c00201de:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c00201e2:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00201e6:	e9 28 f9 ff ff       	jmp    c001fb13 <Vm::x87Handler(regs*)+0x77>
c00201eb:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00201ef:	84 d2                	test   dl,dl
c00201f1:	75 0f                	jne    c0020202 <Vm::x87Handler(regs*)+0x766>
c00201f3:	83 ec 0c             	sub    esp,0xc
c00201f6:	ff 36                	push   DWORD PTR [esi]
c00201f8:	e8 b1 f4 ff ff       	call   c001f6ae <Vm::fpu32ToInternal(unsigned int)>
c00201fd:	e9 2c 01 00 00       	jmp    c002032e <Vm::x87Handler(regs*)+0x892>
c0020202:	80 fa 01             	cmp    dl,0x1
c0020205:	75 0f                	jne    c0020216 <Vm::x87Handler(regs*)+0x77a>
c0020207:	83 ec 0c             	sub    esp,0xc
c002020a:	ff 36                	push   DWORD PTR [esi]
c002020c:	e8 9d f4 ff ff       	call   c001f6ae <Vm::fpu32ToInternal(unsigned int)>
c0020211:	e9 81 02 00 00       	jmp    c0020497 <Vm::x87Handler(regs*)+0x9fb>
c0020216:	80 fa 04             	cmp    dl,0x4
c0020219:	75 0f                	jne    c002022a <Vm::x87Handler(regs*)+0x78e>
c002021b:	83 ec 0c             	sub    esp,0xc
c002021e:	ff 36                	push   DWORD PTR [esi]
c0020220:	e8 89 f4 ff ff       	call   c001f6ae <Vm::fpu32ToInternal(unsigned int)>
c0020225:	e9 86 01 00 00       	jmp    c00203b0 <Vm::x87Handler(regs*)+0x914>
c002022a:	80 fa 05             	cmp    dl,0x5
c002022d:	75 1b                	jne    c002024a <Vm::x87Handler(regs*)+0x7ae>
c002022f:	83 ec 0c             	sub    esp,0xc
c0020232:	6a 00                	push   0x0
c0020234:	e8 26 f7 ff ff       	call   c001f95f <Vm::fpuGetReg(int)>
c0020239:	89 c7                	mov    edi,eax
c002023b:	89 d5                	mov    ebp,edx
c002023d:	58                   	pop    eax
c002023e:	ff 36                	push   DWORD PTR [esi]
c0020240:	e8 69 f4 ff ff       	call   c001f6ae <Vm::fpu32ToInternal(unsigned int)>
c0020245:	e9 a3 01 00 00       	jmp    c00203ed <Vm::x87Handler(regs*)+0x951>
c002024a:	80 fa 06             	cmp    dl,0x6
c002024d:	75 0f                	jne    c002025e <Vm::x87Handler(regs*)+0x7c2>
c002024f:	83 ec 0c             	sub    esp,0xc
c0020252:	ff 36                	push   DWORD PTR [esi]
c0020254:	e8 55 f4 ff ff       	call   c001f6ae <Vm::fpu32ToInternal(unsigned int)>
c0020259:	e9 ae 01 00 00       	jmp    c002040c <Vm::x87Handler(regs*)+0x970>
c002025e:	31 c0                	xor    eax,eax
c0020260:	80 fa 07             	cmp    dl,0x7
c0020263:	0f 85 94 02 00 00    	jne    c00204fd <Vm::x87Handler(regs*)+0xa61>
c0020269:	83 ec 0c             	sub    esp,0xc
c002026c:	6a 00                	push   0x0
c002026e:	e8 ec f6 ff ff       	call   c001f95f <Vm::fpuGetReg(int)>
c0020273:	89 c7                	mov    edi,eax
c0020275:	89 d5                	mov    ebp,edx
c0020277:	58                   	pop    eax
c0020278:	ff 36                	push   DWORD PTR [esi]
c002027a:	e8 2f f4 ff ff       	call   c001f6ae <Vm::fpu32ToInternal(unsigned int)>
c002027f:	e9 cb 01 00 00       	jmp    c002044f <Vm::x87Handler(regs*)+0x9b3>
c0020284:	80 fa 03             	cmp    dl,0x3
c0020287:	0f 85 d3 01 00 00    	jne    c0020460 <Vm::x87Handler(regs*)+0x9c4>
c002028d:	e8 b8 f7 ff ff       	call   c001fa4a <Vm::fpuPop()>
c0020292:	51                   	push   ecx
c0020293:	51                   	push   ecx
c0020294:	e9 de 01 00 00       	jmp    c0020477 <Vm::x87Handler(regs*)+0x9db>
c0020299:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002029d:	80 fa 01             	cmp    dl,0x1
c00202a0:	75 09                	jne    c00202ab <Vm::x87Handler(regs*)+0x80f>
c00202a2:	57                   	push   edi
c00202a3:	57                   	push   edi
c00202a4:	8b 06                	mov    eax,DWORD PTR [esi]
c00202a6:	e9 e3 01 00 00       	jmp    c002048e <Vm::x87Handler(regs*)+0x9f2>
c00202ab:	80 fa 04             	cmp    dl,0x4
c00202ae:	75 12                	jne    c00202c2 <Vm::x87Handler(regs*)+0x826>
c00202b0:	31 d2                	xor    edx,edx
c00202b2:	51                   	push   ecx
c00202b3:	51                   	push   ecx
c00202b4:	8b 06                	mov    eax,DWORD PTR [esi]
c00202b6:	52                   	push   edx
c00202b7:	50                   	push   eax
c00202b8:	e8 d0 f4 ff ff       	call   c001f78d <Vm::fpuLongToFloat(long long)>
c00202bd:	e9 ee 00 00 00       	jmp    c00203b0 <Vm::x87Handler(regs*)+0x914>
c00202c2:	31 c0                	xor    eax,eax
c00202c4:	80 fa 07             	cmp    dl,0x7
c00202c7:	0f 85 30 02 00 00    	jne    c00204fd <Vm::x87Handler(regs*)+0xa61>
c00202cd:	83 ec 0c             	sub    esp,0xc
c00202d0:	6a 00                	push   0x0
c00202d2:	e8 88 f6 ff ff       	call   c001f95f <Vm::fpuGetReg(int)>
c00202d7:	89 c7                	mov    edi,eax
c00202d9:	89 d5                	mov    ebp,edx
c00202db:	58                   	pop    eax
c00202dc:	8b 06                	mov    eax,DWORD PTR [esi]
c00202de:	5a                   	pop    edx
c00202df:	31 d2                	xor    edx,edx
c00202e1:	52                   	push   edx
c00202e2:	50                   	push   eax
c00202e3:	e8 a5 f4 ff ff       	call   c001f78d <Vm::fpuLongToFloat(long long)>
c00202e8:	e9 62 01 00 00       	jmp    c002044f <Vm::x87Handler(regs*)+0x9b3>
c00202ed:	84 d2                	test   dl,dl
c00202ef:	75 0d                	jne    c00202fe <Vm::x87Handler(regs*)+0x862>
c00202f1:	31 d2                	xor    edx,edx
c00202f3:	55                   	push   ebp
c00202f4:	55                   	push   ebp
c00202f5:	8b 06                	mov    eax,DWORD PTR [esi]
c00202f7:	52                   	push   edx
c00202f8:	50                   	push   eax
c00202f9:	e9 d3 01 00 00       	jmp    c00204d1 <Vm::x87Handler(regs*)+0xa35>
c00202fe:	31 c0                	xor    eax,eax
c0020300:	80 fa 02             	cmp    dl,0x2
c0020303:	0f 85 f4 01 00 00    	jne    c00204fd <Vm::x87Handler(regs*)+0xa61>
c0020309:	83 ec 0c             	sub    esp,0xc
c002030c:	6a 00                	push   0x0
c002030e:	e8 4c f6 ff ff       	call   c001f95f <Vm::fpuGetReg(int)>
c0020313:	59                   	pop    ecx
c0020314:	5f                   	pop    edi
c0020315:	e9 6a f9 ff ff       	jmp    c001fc84 <Vm::x87Handler(regs*)+0x1e8>
c002031a:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002031e:	84 d2                	test   dl,dl
c0020320:	75 2a                	jne    c002034c <Vm::x87Handler(regs*)+0x8b0>
c0020322:	50                   	push   eax
c0020323:	50                   	push   eax
c0020324:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020327:	ff 36                	push   DWORD PTR [esi]
c0020329:	e8 c5 f3 ff ff       	call   c001f6f3 <Vm::fpu64ToInternal(unsigned long long)>
c002032e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020335:	89 c6                	mov    esi,eax
c0020337:	89 d7                	mov    edi,edx
c0020339:	e8 21 f6 ff ff       	call   c001f95f <Vm::fpuGetReg(int)>
c002033e:	57                   	push   edi
c002033f:	56                   	push   esi
c0020340:	52                   	push   edx
c0020341:	50                   	push   eax
c0020342:	e8 8e f5 ff ff       	call   c001f8d5 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020347:	e9 64 01 00 00       	jmp    c00204b0 <Vm::x87Handler(regs*)+0xa14>
c002034c:	80 fa 01             	cmp    dl,0x1
c002034f:	75 11                	jne    c0020362 <Vm::x87Handler(regs*)+0x8c6>
c0020351:	50                   	push   eax
c0020352:	50                   	push   eax
c0020353:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020356:	ff 36                	push   DWORD PTR [esi]
c0020358:	e8 96 f3 ff ff       	call   c001f6f3 <Vm::fpu64ToInternal(unsigned long long)>
c002035d:	e9 35 01 00 00       	jmp    c0020497 <Vm::x87Handler(regs*)+0x9fb>
c0020362:	80 fa 02             	cmp    dl,0x2
c0020365:	0f 85 54 f9 ff ff    	jne    c001fcbf <Vm::x87Handler(regs*)+0x223>
c002036b:	55                   	push   ebp
c002036c:	55                   	push   ebp
c002036d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020370:	ff 36                	push   DWORD PTR [esi]
c0020372:	e8 7c f3 ff ff       	call   c001f6f3 <Vm::fpu64ToInternal(unsigned long long)>
c0020377:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002037e:	89 c6                	mov    esi,eax
c0020380:	89 d7                	mov    edi,edx
c0020382:	e8 d8 f5 ff ff       	call   c001f95f <Vm::fpuGetReg(int)>
c0020387:	57                   	push   edi
c0020388:	56                   	push   esi
c0020389:	52                   	push   edx
c002038a:	50                   	push   eax
c002038b:	e8 f2 f4 ff ff       	call   c001f882 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020390:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020394:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020397:	83 c4 20             	add    esp,0x20
c002039a:	e9 74 f7 ff ff       	jmp    c001fb13 <Vm::x87Handler(regs*)+0x77>
c002039f:	80 fa 04             	cmp    dl,0x4
c00203a2:	75 2a                	jne    c00203ce <Vm::x87Handler(regs*)+0x932>
c00203a4:	51                   	push   ecx
c00203a5:	51                   	push   ecx
c00203a6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203a9:	ff 36                	push   DWORD PTR [esi]
c00203ab:	e8 43 f3 ff ff       	call   c001f6f3 <Vm::fpu64ToInternal(unsigned long long)>
c00203b0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203b7:	89 c6                	mov    esi,eax
c00203b9:	89 d7                	mov    edi,edx
c00203bb:	e8 9f f5 ff ff       	call   c001f95f <Vm::fpuGetReg(int)>
c00203c0:	57                   	push   edi
c00203c1:	56                   	push   esi
c00203c2:	52                   	push   edx
c00203c3:	50                   	push   eax
c00203c4:	e8 36 f5 ff ff       	call   c001f8ff <Vm::fpuSub(unsigned long long, unsigned long long)>
c00203c9:	e9 e2 00 00 00       	jmp    c00204b0 <Vm::x87Handler(regs*)+0xa14>
c00203ce:	80 fa 05             	cmp    dl,0x5
c00203d1:	75 28                	jne    c00203fb <Vm::x87Handler(regs*)+0x95f>
c00203d3:	83 ec 0c             	sub    esp,0xc
c00203d6:	6a 00                	push   0x0
c00203d8:	e8 82 f5 ff ff       	call   c001f95f <Vm::fpuGetReg(int)>
c00203dd:	89 c7                	mov    edi,eax
c00203df:	89 d5                	mov    ebp,edx
c00203e1:	58                   	pop    eax
c00203e2:	5a                   	pop    edx
c00203e3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203e6:	ff 36                	push   DWORD PTR [esi]
c00203e8:	e8 06 f3 ff ff       	call   c001f6f3 <Vm::fpu64ToInternal(unsigned long long)>
c00203ed:	83 c4 10             	add    esp,0x10
c00203f0:	55                   	push   ebp
c00203f1:	57                   	push   edi
c00203f2:	52                   	push   edx
c00203f3:	50                   	push   eax
c00203f4:	e8 06 f5 ff ff       	call   c001f8ff <Vm::fpuSub(unsigned long long, unsigned long long)>
c00203f9:	eb 60                	jmp    c002045b <Vm::x87Handler(regs*)+0x9bf>
c00203fb:	80 fa 06             	cmp    dl,0x6
c00203fe:	75 2a                	jne    c002042a <Vm::x87Handler(regs*)+0x98e>
c0020400:	51                   	push   ecx
c0020401:	51                   	push   ecx
c0020402:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020405:	ff 36                	push   DWORD PTR [esi]
c0020407:	e8 e7 f2 ff ff       	call   c001f6f3 <Vm::fpu64ToInternal(unsigned long long)>
c002040c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020413:	89 c6                	mov    esi,eax
c0020415:	89 d7                	mov    edi,edx
c0020417:	e8 43 f5 ff ff       	call   c001f95f <Vm::fpuGetReg(int)>
c002041c:	57                   	push   edi
c002041d:	56                   	push   esi
c002041e:	52                   	push   edx
c002041f:	50                   	push   eax
c0020420:	e8 08 f5 ff ff       	call   c001f92d <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020425:	e9 86 00 00 00       	jmp    c00204b0 <Vm::x87Handler(regs*)+0xa14>
c002042a:	31 c0                	xor    eax,eax
c002042c:	80 fa 07             	cmp    dl,0x7
c002042f:	0f 85 c8 00 00 00    	jne    c00204fd <Vm::x87Handler(regs*)+0xa61>
c0020435:	83 ec 0c             	sub    esp,0xc
c0020438:	6a 00                	push   0x0
c002043a:	e8 20 f5 ff ff       	call   c001f95f <Vm::fpuGetReg(int)>
c002043f:	89 c7                	mov    edi,eax
c0020441:	89 d5                	mov    ebp,edx
c0020443:	58                   	pop    eax
c0020444:	5a                   	pop    edx
c0020445:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020448:	ff 36                	push   DWORD PTR [esi]
c002044a:	e8 a4 f2 ff ff       	call   c001f6f3 <Vm::fpu64ToInternal(unsigned long long)>
c002044f:	83 c4 10             	add    esp,0x10
c0020452:	55                   	push   ebp
c0020453:	57                   	push   edi
c0020454:	52                   	push   edx
c0020455:	50                   	push   eax
c0020456:	e8 d2 f4 ff ff       	call   c001f92d <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002045b:	83 c4 0c             	add    esp,0xc
c002045e:	eb 53                	jmp    c00204b3 <Vm::x87Handler(regs*)+0xa17>
c0020460:	31 c0                	xor    eax,eax
c0020462:	80 fa 02             	cmp    dl,0x2
c0020465:	0f 85 92 00 00 00    	jne    c00204fd <Vm::x87Handler(regs*)+0xa61>
c002046b:	83 ec 0c             	sub    esp,0xc
c002046e:	6a 00                	push   0x0
c0020470:	e8 ea f4 ff ff       	call   c001f95f <Vm::fpuGetReg(int)>
c0020475:	59                   	pop    ecx
c0020476:	5f                   	pop    edi
c0020477:	52                   	push   edx
c0020478:	50                   	push   eax
c0020479:	e8 27 f2 ff ff       	call   c001f6a5 <Vm::fpuInternalTo64(unsigned long long)>
c002047e:	eb 70                	jmp    c00204f0 <Vm::x87Handler(regs*)+0xa54>
c0020480:	31 c0                	xor    eax,eax
c0020482:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020487:	75 74                	jne    c00204fd <Vm::x87Handler(regs*)+0xa61>
c0020489:	50                   	push   eax
c002048a:	50                   	push   eax
c002048b:	0f b7 06             	movzx  eax,WORD PTR [esi]
c002048e:	31 d2                	xor    edx,edx
c0020490:	52                   	push   edx
c0020491:	50                   	push   eax
c0020492:	e8 f6 f2 ff ff       	call   c001f78d <Vm::fpuLongToFloat(long long)>
c0020497:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002049e:	89 c6                	mov    esi,eax
c00204a0:	89 d7                	mov    edi,edx
c00204a2:	e8 b8 f4 ff ff       	call   c001f95f <Vm::fpuGetReg(int)>
c00204a7:	57                   	push   edi
c00204a8:	56                   	push   esi
c00204a9:	52                   	push   edx
c00204aa:	50                   	push   eax
c00204ab:	e8 5e f4 ff ff       	call   c001f90e <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00204b0:	83 c4 1c             	add    esp,0x1c
c00204b3:	52                   	push   edx
c00204b4:	50                   	push   eax
c00204b5:	6a 00                	push   0x0
c00204b7:	e8 e6 f4 ff ff       	call   c001f9a2 <Vm::fpuSetReg(int, unsigned long long)>
c00204bc:	e9 f2 f7 ff ff       	jmp    c001fcb3 <Vm::x87Handler(regs*)+0x217>
c00204c1:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00204c5:	80 fa 05             	cmp    dl,0x5
c00204c8:	75 11                	jne    c00204db <Vm::x87Handler(regs*)+0xa3f>
c00204ca:	55                   	push   ebp
c00204cb:	55                   	push   ebp
c00204cc:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00204cf:	ff 36                	push   DWORD PTR [esi]
c00204d1:	e8 81 f2 ff ff       	call   c001f757 <Vm::fpuULongToFloat(unsigned long long)>
c00204d6:	e9 cf f7 ff ff       	jmp    c001fcaa <Vm::x87Handler(regs*)+0x20e>
c00204db:	31 c0                	xor    eax,eax
c00204dd:	80 fa 07             	cmp    dl,0x7
c00204e0:	75 1b                	jne    c00204fd <Vm::x87Handler(regs*)+0xa61>
c00204e2:	e8 63 f5 ff ff       	call   c001fa4a <Vm::fpuPop()>
c00204e7:	51                   	push   ecx
c00204e8:	51                   	push   ecx
c00204e9:	52                   	push   edx
c00204ea:	50                   	push   eax
c00204eb:	e8 0c f2 ff ff       	call   c001f6fc <Vm::fpuFloatToLong(unsigned long long)>
c00204f0:	83 c4 10             	add    esp,0x10
c00204f3:	89 06                	mov    DWORD PTR [esi],eax
c00204f5:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c00204f8:	e9 f8 f7 ff ff       	jmp    c001fcf5 <Vm::x87Handler(regs*)+0x259>
c00204fd:	83 c4 1c             	add    esp,0x1c
c0020500:	5b                   	pop    ebx
c0020501:	5e                   	pop    esi
c0020502:	5f                   	pop    edi
c0020503:	5d                   	pop    ebp
c0020504:	c3                   	ret    

c0020505 <__static_initialization_and_destruction_0(int, int)>:
c0020505:	83 ec 0c             	sub    esp,0xc
c0020508:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c002050d:	75 1a                	jne    c0020529 <__static_initialization_and_destruction_0(int, int)+0x24>
c002050f:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0020517:	75 10                	jne    c0020529 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020519:	83 ec 0c             	sub    esp,0xc
c002051c:	68 a0 1b 03 c0       	push   0xc0031ba0
c0020521:	e8 1a 88 00 00       	call   c0028d40 <Vm::_FPUState::_FPUState()>
c0020526:	83 c4 10             	add    esp,0x10
c0020529:	90                   	nop
c002052a:	83 c4 0c             	add    esp,0xc
c002052d:	c3                   	ret    

c002052e <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c002052e:	83 ec 0c             	sub    esp,0xc
c0020531:	83 ec 08             	sub    esp,0x8
c0020534:	68 ff ff 00 00       	push   0xffff
c0020539:	6a 01                	push   0x1
c002053b:	e8 c5 ff ff ff       	call   c0020505 <__static_initialization_and_destruction_0(int, int)>
c0020540:	83 c4 10             	add    esp,0x10
c0020543:	83 c4 0c             	add    esp,0xc
c0020546:	c3                   	ret    
c0020547:	90                   	nop

c0020548 <FAT::getName()>:
c0020548:	b8 b4 c9 02 c0       	mov    eax,0xc002c9b4
c002054d:	c3                   	ret    

c002054e <FAT::tell(void*, unsigned long long*)>:
c002054e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020553:	75 06                	jne    c002055b <FAT::tell(void*, unsigned long long*)+0xd>
c0020555:	b8 04 00 00 00       	mov    eax,0x4
c002055a:	c3                   	ret    
c002055b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020560:	75 06                	jne    c0020568 <FAT::tell(void*, unsigned long long*)+0x1a>
c0020562:	b8 04 00 00 00       	mov    eax,0x4
c0020567:	c3                   	ret    
c0020568:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002056c:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c002056f:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0020572:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020576:	89 01                	mov    DWORD PTR [ecx],eax
c0020578:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002057b:	b8 00 00 00 00       	mov    eax,0x0
c0020580:	c3                   	ret    
c0020581:	90                   	nop

c0020582 <FAT::stat(void*, unsigned long long*)>:
c0020582:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020587:	75 06                	jne    c002058f <FAT::stat(void*, unsigned long long*)+0xd>
c0020589:	b8 04 00 00 00       	mov    eax,0x4
c002058e:	c3                   	ret    
c002058f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020594:	75 06                	jne    c002059c <FAT::stat(void*, unsigned long long*)+0x1a>
c0020596:	b8 04 00 00 00       	mov    eax,0x4
c002059b:	c3                   	ret    
c002059c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00205a0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00205a3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00205a6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00205aa:	89 01                	mov    DWORD PTR [ecx],eax
c00205ac:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00205af:	b8 00 00 00 00       	mov    eax,0x0
c00205b4:	c3                   	ret    
c00205b5:	90                   	nop

c00205b6 <FAT::~FAT()>:
c00205b6:	83 ec 0c             	sub    esp,0xc
c00205b9:	ba 38 ca 02 c0       	mov    edx,0xc002ca38
c00205be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205c2:	89 10                	mov    DWORD PTR [eax],edx
c00205c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205c8:	83 ec 0c             	sub    esp,0xc
c00205cb:	50                   	push   eax
c00205cc:	e8 89 2c ff ff       	call   c001325a <Filesystem::~Filesystem()>
c00205d1:	83 c4 10             	add    esp,0x10
c00205d4:	90                   	nop
c00205d5:	83 c4 0c             	add    esp,0xc
c00205d8:	c3                   	ret    
c00205d9:	90                   	nop

c00205da <FAT::~FAT()>:
c00205da:	83 ec 0c             	sub    esp,0xc
c00205dd:	83 ec 0c             	sub    esp,0xc
c00205e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205e4:	e8 cd ff ff ff       	call   c00205b6 <FAT::~FAT()>
c00205e9:	83 c4 10             	add    esp,0x10
c00205ec:	83 ec 08             	sub    esp,0x8
c00205ef:	6a 08                	push   0x8
c00205f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205f5:	e8 57 28 ff ff       	call   c0012e51 <operator delete(void*, unsigned long)>
c00205fa:	83 c4 10             	add    esp,0x10
c00205fd:	83 c4 0c             	add    esp,0xc
c0020600:	c3                   	ret    
c0020601:	90                   	nop

c0020602 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0020602:	83 ec 1c             	sub    esp,0x1c
c0020605:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c002060c:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0020611:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020615:	8b 04 85 20 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3e0]
c002061c:	83 f8 ff             	cmp    eax,0xffffffff
c002061f:	75 34                	jne    c0020655 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0020621:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020625:	88 c2                	mov    dl,al
c0020627:	a1 00 1c 03 c0       	mov    eax,ds:0xc0031c00
c002062c:	01 d0                	add    eax,edx
c002062e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020632:	8b 15 00 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c00
c0020638:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002063c:	89 14 85 20 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce3e0],edx
c0020643:	a1 00 1c 03 c0       	mov    eax,ds:0xc0031c00
c0020648:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002064c:	89 14 85 a0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce360],edx
c0020653:	eb 17                	jmp    c002066c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0020655:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020659:	88 c2                	mov    dl,al
c002065b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002065f:	8b 04 85 20 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3e0]
c0020666:	01 d0                	add    eax,edx
c0020668:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002066c:	83 ec 04             	sub    esp,0x4
c002066f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020673:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020677:	8d 44 24 15          	lea    eax,[esp+0x15]
c002067b:	50                   	push   eax
c002067c:	e8 b7 66 fe ff       	call   c0006d38 <f_getlabel>
c0020681:	83 c4 10             	add    esp,0x10
c0020684:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020688:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002068d:	75 07                	jne    c0020696 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c002068f:	b8 00 00 00 00       	mov    eax,0x0
c0020694:	eb 05                	jmp    c002069b <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020696:	b8 01 00 00 00       	mov    eax,0x1
c002069b:	83 c4 1c             	add    esp,0x1c
c002069e:	c3                   	ret    
c002069f:	90                   	nop

c00206a0 <FAT::setlabel(LogicalDisk*, int, char*)>:
c00206a0:	57                   	push   edi
c00206a1:	83 ec 58             	sub    esp,0x58
c00206a4:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00206ac:	8d 54 24 10          	lea    edx,[esp+0x10]
c00206b0:	b9 0f 00 00 00       	mov    ecx,0xf
c00206b5:	b8 00 00 00 00       	mov    eax,0x0
c00206ba:	fc                   	cld    
c00206bb:	89 d7                	mov    edi,edx
c00206bd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00206bf:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00206c3:	8b 04 85 20 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3e0]
c00206ca:	83 f8 ff             	cmp    eax,0xffffffff
c00206cd:	75 34                	jne    c0020703 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c00206cf:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00206d3:	88 c2                	mov    dl,al
c00206d5:	a1 00 1c 03 c0       	mov    eax,ds:0xc0031c00
c00206da:	01 d0                	add    eax,edx
c00206dc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00206e0:	8b 15 00 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c00
c00206e6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00206ea:	89 14 85 20 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce3e0],edx
c00206f1:	a1 00 1c 03 c0       	mov    eax,ds:0xc0031c00
c00206f6:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00206fa:	89 14 85 a0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce360],edx
c0020701:	eb 17                	jmp    c002071a <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0020703:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020707:	88 c2                	mov    dl,al
c0020709:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002070d:	8b 04 85 20 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3e0]
c0020714:	01 d0                	add    eax,edx
c0020716:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002071a:	83 ec 08             	sub    esp,0x8
c002071d:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0020721:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020725:	50                   	push   eax
c0020726:	e8 49 02 fe ff       	call   c0000974 <strcat>
c002072b:	83 c4 10             	add    esp,0x10
c002072e:	83 ec 0c             	sub    esp,0xc
c0020731:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020735:	50                   	push   eax
c0020736:	e8 eb 67 fe ff       	call   c0006f26 <f_setlabel>
c002073b:	83 c4 10             	add    esp,0x10
c002073e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020742:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020747:	75 07                	jne    c0020750 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020749:	b8 00 00 00 00       	mov    eax,0x0
c002074e:	eb 05                	jmp    c0020755 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020750:	b8 01 00 00 00       	mov    eax,0x1
c0020755:	83 c4 58             	add    esp,0x58
c0020758:	5f                   	pop    edi
c0020759:	c3                   	ret    

c002075a <FAT::format(LogicalDisk*, int, char const*, int)>:
c002075a:	83 ec 2c             	sub    esp,0x2c
c002075d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020765:	83 ec 08             	sub    esp,0x8
c0020768:	68 d8 c9 02 c0       	push   0xc002c9d8
c002076d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020771:	e8 4a 01 fe ff       	call   c00008c0 <strcmp>
c0020776:	83 c4 10             	add    esp,0x10
c0020779:	85 c0                	test   eax,eax
c002077b:	0f 94 c0             	sete   al
c002077e:	84 c0                	test   al,al
c0020780:	74 0d                	je     c002078f <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020782:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002078a:	e9 a6 00 00 00       	jmp    c0020835 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002078f:	83 ec 08             	sub    esp,0x8
c0020792:	68 ca c9 02 c0       	push   0xc002c9ca
c0020797:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002079b:	e8 20 01 fe ff       	call   c00008c0 <strcmp>
c00207a0:	83 c4 10             	add    esp,0x10
c00207a3:	85 c0                	test   eax,eax
c00207a5:	0f 94 c0             	sete   al
c00207a8:	84 c0                	test   al,al
c00207aa:	74 0a                	je     c00207b6 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c00207ac:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00207b4:	eb 7f                	jmp    c0020835 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00207b6:	83 ec 08             	sub    esp,0x8
c00207b9:	68 d0 c9 02 c0       	push   0xc002c9d0
c00207be:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00207c2:	e8 f9 00 fe ff       	call   c00008c0 <strcmp>
c00207c7:	83 c4 10             	add    esp,0x10
c00207ca:	85 c0                	test   eax,eax
c00207cc:	0f 94 c0             	sete   al
c00207cf:	84 c0                	test   al,al
c00207d1:	74 0a                	je     c00207dd <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c00207d3:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00207db:	eb 58                	jmp    c0020835 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00207dd:	83 ec 08             	sub    esp,0x8
c00207e0:	68 ac 94 02 c0       	push   0xc00294ac
c00207e5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00207e9:	e8 d2 00 fe ff       	call   c00008c0 <strcmp>
c00207ee:	83 c4 10             	add    esp,0x10
c00207f1:	85 c0                	test   eax,eax
c00207f3:	0f 94 c0             	sete   al
c00207f6:	84 c0                	test   al,al
c00207f8:	74 0a                	je     c0020804 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c00207fa:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0020802:	eb 31                	jmp    c0020835 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020804:	83 ec 08             	sub    esp,0x8
c0020807:	68 d6 c9 02 c0       	push   0xc002c9d6
c002080c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020810:	e8 ab 00 fe ff       	call   c00008c0 <strcmp>
c0020815:	83 c4 10             	add    esp,0x10
c0020818:	85 c0                	test   eax,eax
c002081a:	0f 94 c0             	sete   al
c002081d:	84 c0                	test   al,al
c002081f:	74 0a                	je     c002082b <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0020821:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0020829:	eb 0a                	jmp    c0020835 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002082b:	b8 08 00 00 00       	mov    eax,0x8
c0020830:	e9 04 01 00 00       	jmp    c0020939 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020835:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c002083c:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0020841:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020845:	8b 04 85 20 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3e0]
c002084c:	83 f8 ff             	cmp    eax,0xffffffff
c002084f:	75 34                	jne    c0020885 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020851:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020855:	88 c2                	mov    dl,al
c0020857:	a1 00 1c 03 c0       	mov    eax,ds:0xc0031c00
c002085c:	01 d0                	add    eax,edx
c002085e:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020862:	8b 15 00 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c00
c0020868:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002086c:	89 14 85 20 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce3e0],edx
c0020873:	a1 00 1c 03 c0       	mov    eax,ds:0xc0031c00
c0020878:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002087c:	89 14 85 a0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce360],edx
c0020883:	eb 17                	jmp    c002089c <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020885:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020889:	88 c2                	mov    dl,al
c002088b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002088f:	8b 04 85 20 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3e0]
c0020896:	01 d0                	add    eax,edx
c0020898:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002089c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00208a0:	88 04 24             	mov    BYTE PTR [esp],al
c00208a3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00208a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00208ab:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00208b3:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00208b8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00208c0:	83 ec 0c             	sub    esp,0xc
c00208c3:	68 00 20 00 00       	push   0x2000
c00208c8:	e8 73 ef fe ff       	call   c000f840 <malloc>
c00208cd:	83 c4 10             	add    esp,0x10
c00208d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00208d4:	68 00 20 00 00       	push   0x2000
c00208d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00208dd:	8d 44 24 08          	lea    eax,[esp+0x8]
c00208e1:	50                   	push   eax
c00208e2:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00208e6:	50                   	push   eax
c00208e7:	e8 85 6a fe ff       	call   c0007371 <f_mkfs>
c00208ec:	83 c4 10             	add    esp,0x10
c00208ef:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00208f3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00208f8:	75 07                	jne    c0020901 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c00208fa:	b8 00 00 00 00       	mov    eax,0x0
c00208ff:	eb 38                	jmp    c0020939 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020901:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020906:	75 17                	jne    c002091f <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0020908:	83 ec 0c             	sub    esp,0xc
c002090b:	68 08 ca 02 c0       	push   0xc002ca08
c0020910:	e8 1c 26 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0020915:	83 c4 10             	add    esp,0x10
c0020918:	b8 09 00 00 00       	mov    eax,0x9
c002091d:	eb 1a                	jmp    c0020939 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002091f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020923:	83 ec 08             	sub    esp,0x8
c0020926:	50                   	push   eax
c0020927:	68 dc c9 02 c0       	push   0xc002c9dc
c002092c:	e8 00 26 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0020931:	83 c4 10             	add    esp,0x10
c0020934:	b8 01 00 00 00       	mov    eax,0x1
c0020939:	83 c4 2c             	add    esp,0x2c
c002093c:	c3                   	ret    
c002093d:	90                   	nop

c002093e <FAT::tryMount(LogicalDisk*, int)>:
c002093e:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020944:	a1 00 1c 03 c0       	mov    eax,ds:0xc0031c00
c0020949:	83 f8 14             	cmp    eax,0x14
c002094c:	75 17                	jne    c0020965 <FAT::tryMount(LogicalDisk*, int)+0x27>
c002094e:	83 ec 0c             	sub    esp,0xc
c0020951:	68 ee c9 02 c0       	push   0xc002c9ee
c0020956:	e8 88 9c ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c002095b:	83 c4 10             	add    esp,0x10
c002095e:	b0 00                	mov    al,0x0
c0020960:	e9 d7 01 00 00       	jmp    c0020b3c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020965:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c002096c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020972:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020978:	3d 00 02 00 00       	cmp    eax,0x200
c002097d:	74 07                	je     c0020986 <FAT::tryMount(LogicalDisk*, int)+0x48>
c002097f:	b0 00                	mov    al,0x0
c0020981:	e9 b6 01 00 00       	jmp    c0020b3c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020986:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c002098e:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020995:	8b 04 85 20 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3e0]
c002099c:	83 f8 ff             	cmp    eax,0xffffffff
c002099f:	74 07                	je     c00209a8 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c00209a1:	b0 01                	mov    al,0x1
c00209a3:	e9 94 01 00 00       	jmp    c0020b3c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00209a8:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c00209b2:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c00209ba:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c00209c1:	88 c2                	mov    dl,al
c00209c3:	a1 00 1c 03 c0       	mov    eax,ds:0xc0031c00
c00209c8:	01 d0                	add    eax,edx
c00209ca:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c00209d1:	8b 15 00 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c00
c00209d7:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00209de:	89 14 85 20 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce3e0],edx
c00209e5:	a1 00 1c 03 c0       	mov    eax,ds:0xc0031c00
c00209ea:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00209f1:	89 14 85 a0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce360],edx
c00209f8:	83 ec 0c             	sub    esp,0xc
c00209fb:	68 54 02 00 00       	push   0x254
c0020a00:	e8 3b ee fe ff       	call   c000f840 <malloc>
c0020a05:	83 c4 10             	add    esp,0x10
c0020a08:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020a0f:	83 ec 04             	sub    esp,0x4
c0020a12:	6a 00                	push   0x0
c0020a14:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020a1b:	50                   	push   eax
c0020a1c:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020a23:	e8 07 45 fe ff       	call   c0004f2f <f_mount>
c0020a28:	83 c4 10             	add    esp,0x10
c0020a2b:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020a32:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020a3a:	74 19                	je     c0020a55 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020a3c:	83 ec 0c             	sub    esp,0xc
c0020a3f:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020a46:	e8 15 ee fe ff       	call   c000f860 <rfree>
c0020a4b:	83 c4 10             	add    esp,0x10
c0020a4e:	b0 00                	mov    al,0x0
c0020a50:	e9 e7 00 00 00       	jmp    c0020b3c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a55:	83 ec 04             	sub    esp,0x4
c0020a58:	68 00 01 00 00       	push   0x100
c0020a5d:	6a 00                	push   0x0
c0020a5f:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020a66:	50                   	push   eax
c0020a67:	e8 0c fd fd ff       	call   c0000778 <memset>
c0020a6c:	83 c4 10             	add    esp,0x10
c0020a6f:	83 ec 08             	sub    esp,0x8
c0020a72:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020a79:	50                   	push   eax
c0020a7a:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020a81:	50                   	push   eax
c0020a82:	e8 ed fe fd ff       	call   c0000974 <strcat>
c0020a87:	83 c4 10             	add    esp,0x10
c0020a8a:	83 ec 08             	sub    esp,0x8
c0020a8d:	68 fc c9 02 c0       	push   0xc002c9fc
c0020a92:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020a99:	50                   	push   eax
c0020a9a:	e8 d5 fe fd ff       	call   c0000974 <strcat>
c0020a9f:	83 c4 10             	add    esp,0x10
c0020aa2:	83 ec 04             	sub    esp,0x4
c0020aa5:	6a 01                	push   0x1
c0020aa7:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020aae:	50                   	push   eax
c0020aaf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020ab3:	50                   	push   eax
c0020ab4:	e8 d8 44 fe ff       	call   c0004f91 <f_open>
c0020ab9:	83 c4 10             	add    esp,0x10
c0020abc:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020ac3:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020aca:	85 c0                	test   eax,eax
c0020acc:	74 0a                	je     c0020ad8 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020ace:	78 2d                	js     c0020afd <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020ad0:	83 e8 04             	sub    eax,0x4
c0020ad3:	83 f8 01             	cmp    eax,0x1
c0020ad6:	77 25                	ja     c0020afd <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020ad8:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020ae0:	83 ec 0c             	sub    esp,0xc
c0020ae3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020ae7:	50                   	push   eax
c0020ae8:	e8 f6 4f fe ff       	call   c0005ae3 <f_close>
c0020aed:	83 c4 10             	add    esp,0x10
c0020af0:	90                   	nop
c0020af1:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020af9:	74 3a                	je     c0020b35 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020afb:	eb 2d                	jmp    c0020b2a <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020afd:	83 ec 0c             	sub    esp,0xc
c0020b00:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020b07:	e8 54 ed fe ff       	call   c000f860 <rfree>
c0020b0c:	83 c4 10             	add    esp,0x10
c0020b0f:	83 ec 04             	sub    esp,0x4
c0020b12:	6a 00                	push   0x0
c0020b14:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020b1b:	50                   	push   eax
c0020b1c:	6a 00                	push   0x0
c0020b1e:	e8 0c 44 fe ff       	call   c0004f2f <f_mount>
c0020b23:	83 c4 10             	add    esp,0x10
c0020b26:	b0 00                	mov    al,0x0
c0020b28:	eb 12                	jmp    c0020b3c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020b2a:	a1 00 1c 03 c0       	mov    eax,ds:0xc0031c00
c0020b2f:	40                   	inc    eax
c0020b30:	a3 00 1c 03 c0       	mov    ds:0xc0031c00,eax
c0020b35:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020b3c:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020b42:	c3                   	ret    
c0020b43:	90                   	nop

c0020b44 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020b44:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0020b4a:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0020b52:	74 0a                	je     c0020b5e <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0020b54:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0020b5c:	75 0a                	jne    c0020b68 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0020b5e:	b8 04 00 00 00       	mov    eax,0x4
c0020b63:	e9 db 00 00 00       	jmp    c0020c43 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020b68:	83 ec 08             	sub    esp,0x8
c0020b6b:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020b72:	50                   	push   eax
c0020b73:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0020b7a:	e8 6e 55 fe ff       	call   c00060ed <f_readdir>
c0020b7f:	83 c4 10             	add    esp,0x10
c0020b82:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0020b89:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020b8f:	83 ec 0c             	sub    esp,0xc
c0020b92:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020b99:	83 c0 1a             	add    eax,0x1a
c0020b9c:	50                   	push   eax
c0020b9d:	e8 f2 fb fd ff       	call   c0000794 <strlen>
c0020ba2:	83 c4 10             	add    esp,0x10
c0020ba5:	ba 00 00 00 00       	mov    edx,0x0
c0020baa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020bae:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020bb2:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0020bb9:	0f b6 c0             	movzx  eax,al
c0020bbc:	83 e0 10             	and    eax,0x10
c0020bbf:	74 07                	je     c0020bc8 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020bc1:	b8 02 00 00 00       	mov    eax,0x2
c0020bc6:	eb 05                	jmp    c0020bcd <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0020bc8:	b8 01 00 00 00       	mov    eax,0x1
c0020bcd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020bd1:	83 ec 08             	sub    esp,0x8
c0020bd4:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020bdb:	83 c0 1a             	add    eax,0x1a
c0020bde:	50                   	push   eax
c0020bdf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020be3:	83 c0 10             	add    eax,0x10
c0020be6:	50                   	push   eax
c0020be7:	e8 48 fc fd ff       	call   c0000834 <strcpy>
c0020bec:	83 c4 10             	add    esp,0x10
c0020bef:	83 ec 04             	sub    esp,0x4
c0020bf2:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020bf9:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020bfd:	50                   	push   eax
c0020bfe:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020c05:	e8 3a fb fd ff       	call   c0000744 <memcpy>
c0020c0a:	83 c4 10             	add    esp,0x10
c0020c0d:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020c14:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020c1a:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020c21:	84 c0                	test   al,al
c0020c23:	75 07                	jne    c0020c2c <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020c25:	b8 07 00 00 00       	mov    eax,0x7
c0020c2a:	eb 17                	jmp    c0020c43 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020c2c:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020c33:	85 c0                	test   eax,eax
c0020c35:	75 07                	jne    c0020c3e <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020c37:	b8 00 00 00 00       	mov    eax,0x0
c0020c3c:	eb 05                	jmp    c0020c43 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020c3e:	b8 01 00 00 00       	mov    eax,0x1
c0020c43:	81 c4 3c 02 00 00    	add    esp,0x23c
c0020c49:	c3                   	ret    

c0020c4a <FAT::read(void*, unsigned long, void*, int*)>:
c0020c4a:	83 ec 1c             	sub    esp,0x1c
c0020c4d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c52:	74 07                	je     c0020c5b <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020c54:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020c59:	75 07                	jne    c0020c62 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020c5b:	b8 04 00 00 00       	mov    eax,0x4
c0020c60:	eb 3d                	jmp    c0020c9f <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020c62:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c66:	50                   	push   eax
c0020c67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020c6b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020c6f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c73:	e8 55 47 fe ff       	call   c00053cd <f_read>
c0020c78:	83 c4 10             	add    esp,0x10
c0020c7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c83:	89 c2                	mov    edx,eax
c0020c85:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020c89:	89 10                	mov    DWORD PTR [eax],edx
c0020c8b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020c8f:	85 c0                	test   eax,eax
c0020c91:	75 07                	jne    c0020c9a <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020c93:	b8 00 00 00 00       	mov    eax,0x0
c0020c98:	eb 05                	jmp    c0020c9f <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020c9a:	b8 01 00 00 00       	mov    eax,0x1
c0020c9f:	83 c4 1c             	add    esp,0x1c
c0020ca2:	c3                   	ret    
c0020ca3:	90                   	nop

c0020ca4 <FAT::write(void*, unsigned long, void*, int*)>:
c0020ca4:	83 ec 1c             	sub    esp,0x1c
c0020ca7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020cac:	74 07                	je     c0020cb5 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020cae:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020cb3:	75 07                	jne    c0020cbc <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020cb5:	b8 04 00 00 00       	mov    eax,0x4
c0020cba:	eb 3d                	jmp    c0020cf9 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020cbc:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020cc0:	50                   	push   eax
c0020cc1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020cc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020cc9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ccd:	e8 7b 49 fe ff       	call   c000564d <f_write>
c0020cd2:	83 c4 10             	add    esp,0x10
c0020cd5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020cd9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020cdd:	89 c2                	mov    edx,eax
c0020cdf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020ce3:	89 10                	mov    DWORD PTR [eax],edx
c0020ce5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020ce9:	85 c0                	test   eax,eax
c0020ceb:	75 07                	jne    c0020cf4 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020ced:	b8 00 00 00 00       	mov    eax,0x0
c0020cf2:	eb 05                	jmp    c0020cf9 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020cf4:	b8 01 00 00 00       	mov    eax,0x1
c0020cf9:	83 c4 1c             	add    esp,0x1c
c0020cfc:	c3                   	ret    
c0020cfd:	90                   	nop

c0020cfe <FAT::close(void*)>:
c0020cfe:	83 ec 1c             	sub    esp,0x1c
c0020d01:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d06:	75 07                	jne    c0020d0f <FAT::close(void*)+0x11>
c0020d08:	b8 04 00 00 00       	mov    eax,0x4
c0020d0d:	eb 36                	jmp    c0020d45 <FAT::close(void*)+0x47>
c0020d0f:	83 ec 0c             	sub    esp,0xc
c0020d12:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d16:	e8 c8 4d fe ff       	call   c0005ae3 <f_close>
c0020d1b:	83 c4 10             	add    esp,0x10
c0020d1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d22:	83 ec 0c             	sub    esp,0xc
c0020d25:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d29:	e8 22 eb fe ff       	call   c000f850 <free>
c0020d2e:	83 c4 10             	add    esp,0x10
c0020d31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d35:	85 c0                	test   eax,eax
c0020d37:	75 07                	jne    c0020d40 <FAT::close(void*)+0x42>
c0020d39:	b8 00 00 00 00       	mov    eax,0x0
c0020d3e:	eb 05                	jmp    c0020d45 <FAT::close(void*)+0x47>
c0020d40:	b8 01 00 00 00       	mov    eax,0x1
c0020d45:	83 c4 1c             	add    esp,0x1c
c0020d48:	c3                   	ret    
c0020d49:	90                   	nop

c0020d4a <FAT::closeDir(void*)>:
c0020d4a:	83 ec 1c             	sub    esp,0x1c
c0020d4d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d52:	75 07                	jne    c0020d5b <FAT::closeDir(void*)+0x11>
c0020d54:	b8 04 00 00 00       	mov    eax,0x4
c0020d59:	eb 36                	jmp    c0020d91 <FAT::closeDir(void*)+0x47>
c0020d5b:	83 ec 0c             	sub    esp,0xc
c0020d5e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d62:	e8 64 53 fe ff       	call   c00060cb <f_closedir>
c0020d67:	83 c4 10             	add    esp,0x10
c0020d6a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d6e:	83 ec 0c             	sub    esp,0xc
c0020d71:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d75:	e8 d6 ea fe ff       	call   c000f850 <free>
c0020d7a:	83 c4 10             	add    esp,0x10
c0020d7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d81:	85 c0                	test   eax,eax
c0020d83:	75 07                	jne    c0020d8c <FAT::closeDir(void*)+0x42>
c0020d85:	b8 00 00 00 00       	mov    eax,0x0
c0020d8a:	eb 05                	jmp    c0020d91 <FAT::closeDir(void*)+0x47>
c0020d8c:	b8 01 00 00 00       	mov    eax,0x1
c0020d91:	83 c4 1c             	add    esp,0x1c
c0020d94:	c3                   	ret    
c0020d95:	90                   	nop

c0020d96 <FAT::seek(void*, unsigned long long)>:
c0020d96:	83 ec 2c             	sub    esp,0x2c
c0020d99:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020d9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020da1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020da5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020da9:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020dae:	75 07                	jne    c0020db7 <FAT::seek(void*, unsigned long long)+0x21>
c0020db0:	b8 04 00 00 00       	mov    eax,0x4
c0020db5:	eb 2f                	jmp    c0020de6 <FAT::seek(void*, unsigned long long)+0x50>
c0020db7:	83 ec 04             	sub    esp,0x4
c0020dba:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020dbe:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020dc2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020dc6:	e8 47 4d fe ff       	call   c0005b12 <f_lseek>
c0020dcb:	83 c4 10             	add    esp,0x10
c0020dce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020dd2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020dd6:	85 c0                	test   eax,eax
c0020dd8:	75 07                	jne    c0020de1 <FAT::seek(void*, unsigned long long)+0x4b>
c0020dda:	b8 00 00 00 00       	mov    eax,0x0
c0020ddf:	eb 05                	jmp    c0020de6 <FAT::seek(void*, unsigned long long)+0x50>
c0020de1:	b8 01 00 00 00       	mov    eax,0x1
c0020de6:	83 c4 2c             	add    esp,0x2c
c0020de9:	c3                   	ret    

c0020dea <fatWrapperReadDisk>:
c0020dea:	83 ec 1c             	sub    esp,0x1c
c0020ded:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020df1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020df5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020df9:	89 04 24             	mov    DWORD PTR [esp],eax
c0020dfc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020e00:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020e04:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e09:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c0020e10:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e14:	83 ec 0c             	sub    esp,0xc
c0020e17:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e1b:	52                   	push   edx
c0020e1c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e20:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e24:	50                   	push   eax
c0020e25:	e8 28 59 ff ff       	call   c0016752 <LogicalDisk::read(unsigned long long, int, void*)>
c0020e2a:	83 c4 20             	add    esp,0x20
c0020e2d:	83 c4 1c             	add    esp,0x1c
c0020e30:	c3                   	ret    

c0020e31 <fatWrapperWriteDisk>:
c0020e31:	83 ec 1c             	sub    esp,0x1c
c0020e34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e38:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020e3c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020e40:	89 04 24             	mov    DWORD PTR [esp],eax
c0020e43:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020e47:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020e4b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e50:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c0020e57:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e5b:	83 ec 0c             	sub    esp,0xc
c0020e5e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e62:	52                   	push   edx
c0020e63:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e6b:	50                   	push   eax
c0020e6c:	e8 4d 59 ff ff       	call   c00167be <LogicalDisk::write(unsigned long long, int, void*)>
c0020e71:	83 c4 20             	add    esp,0x20
c0020e74:	83 c4 1c             	add    esp,0x1c
c0020e77:	c3                   	ret    

c0020e78 <fatWrapperIoctl>:
c0020e78:	53                   	push   ebx
c0020e79:	83 ec 28             	sub    esp,0x28
c0020e7c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e80:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020e84:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020e88:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020e8c:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020e91:	75 31                	jne    c0020ec4 <fatWrapperIoctl+0x4c>
c0020e93:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e97:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020e9b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ea0:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c0020ea7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020ead:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020eb3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020eb7:	66 89 02             	mov    WORD PTR [edx],ax
c0020eba:	b8 00 00 00 00       	mov    eax,0x0
c0020ebf:	e9 b2 00 00 00       	jmp    c0020f76 <fatWrapperIoctl+0xfe>
c0020ec4:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020ec9:	75 6a                	jne    c0020f35 <fatWrapperIoctl+0xbd>
c0020ecb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020ecf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020ed3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ed8:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c0020edf:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020ee5:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020eeb:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020ef1:	89 c8                	mov    eax,ecx
c0020ef3:	89 da                	mov    edx,ebx
c0020ef5:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020ef9:	c1 e0 0a             	shl    eax,0xa
c0020efc:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020f01:	8b 0c 8d e0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1420]
c0020f08:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020f0e:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020f14:	89 cb                	mov    ebx,ecx
c0020f16:	c1 fb 1f             	sar    ebx,0x1f
c0020f19:	53                   	push   ebx
c0020f1a:	51                   	push   ecx
c0020f1b:	52                   	push   edx
c0020f1c:	50                   	push   eax
c0020f1d:	e8 ca 5a 00 00       	call   c00269ec <__udivdi3>
c0020f22:	83 c4 10             	add    esp,0x10
c0020f25:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020f29:	89 01                	mov    DWORD PTR [ecx],eax
c0020f2b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020f2e:	b8 00 00 00 00       	mov    eax,0x0
c0020f33:	eb 41                	jmp    c0020f76 <fatWrapperIoctl+0xfe>
c0020f35:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020f3a:	75 07                	jne    c0020f43 <fatWrapperIoctl+0xcb>
c0020f3c:	b8 00 00 00 00       	mov    eax,0x0
c0020f41:	eb 33                	jmp    c0020f76 <fatWrapperIoctl+0xfe>
c0020f43:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020f48:	75 19                	jne    c0020f63 <fatWrapperIoctl+0xeb>
c0020f4a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020f52:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f56:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020f5c:	b8 00 00 00 00       	mov    eax,0x0
c0020f61:	eb 13                	jmp    c0020f76 <fatWrapperIoctl+0xfe>
c0020f63:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020f68:	75 07                	jne    c0020f71 <fatWrapperIoctl+0xf9>
c0020f6a:	b8 00 00 00 00       	mov    eax,0x0
c0020f6f:	eb 05                	jmp    c0020f76 <fatWrapperIoctl+0xfe>
c0020f71:	b8 04 00 00 00       	mov    eax,0x4
c0020f76:	83 c4 28             	add    esp,0x28
c0020f79:	5b                   	pop    ebx
c0020f7a:	c3                   	ret    
c0020f7b:	90                   	nop

c0020f7c <FAT::FAT()>:
c0020f7c:	83 ec 1c             	sub    esp,0x1c
c0020f7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f83:	83 ec 0c             	sub    esp,0xc
c0020f86:	50                   	push   eax
c0020f87:	e8 aa 22 ff ff       	call   c0013236 <Filesystem::Filesystem()>
c0020f8c:	83 c4 10             	add    esp,0x10
c0020f8f:	ba 38 ca 02 c0       	mov    edx,0xc002ca38
c0020f94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f98:	89 10                	mov    DWORD PTR [eax],edx
c0020f9a:	c7 05 00 1c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031c00,0x0
c0020fa4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020fac:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020fb1:	7f 15                	jg     c0020fc8 <FAT::FAT()+0x4c>
c0020fb3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020fb7:	c7 04 85 20 1c 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffce3e0],0xffffffff
c0020fc2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020fc6:	eb e4                	jmp    c0020fac <FAT::FAT()+0x30>
c0020fc8:	90                   	nop
c0020fc9:	83 c4 1c             	add    esp,0x1c
c0020fcc:	c3                   	ret    
c0020fcd:	90                   	nop

c0020fce <FAT::fixFilepath(char*)>:
c0020fce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fd2:	8a 00                	mov    al,BYTE PTR [eax]
c0020fd4:	3c 40                	cmp    al,0x40
c0020fd6:	7e 2c                	jle    c0021004 <FAT::fixFilepath(char*)+0x36>
c0020fd8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fdc:	8a 00                	mov    al,BYTE PTR [eax]
c0020fde:	83 e8 41             	sub    eax,0x41
c0020fe1:	88 c2                	mov    dl,al
c0020fe3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fe7:	88 10                	mov    BYTE PTR [eax],dl
c0020fe9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fed:	8a 00                	mov    al,BYTE PTR [eax]
c0020fef:	0f be c0             	movsx  eax,al
c0020ff2:	8b 04 85 20 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3e0]
c0020ff9:	83 c0 30             	add    eax,0x30
c0020ffc:	88 c2                	mov    dl,al
c0020ffe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021002:	88 10                	mov    BYTE PTR [eax],dl
c0021004:	90                   	nop
c0021005:	c3                   	ret    

c0021006 <FAT::open(char const*, void**, FileOpenMode)>:
c0021006:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002100c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021014:	74 0a                	je     c0021020 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0021016:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c002101e:	75 0a                	jne    c002102a <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0021020:	b8 04 00 00 00       	mov    eax,0x4
c0021025:	e9 fd 00 00 00       	jmp    c0021127 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c002102a:	83 ec 08             	sub    esp,0x8
c002102d:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021034:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021038:	50                   	push   eax
c0021039:	e8 f6 f7 fd ff       	call   c0000834 <strcpy>
c002103e:	83 c4 10             	add    esp,0x10
c0021041:	83 ec 08             	sub    esp,0x8
c0021044:	8d 44 24 10          	lea    eax,[esp+0x10]
c0021048:	50                   	push   eax
c0021049:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021050:	e8 79 ff ff ff       	call   c0020fce <FAT::fixFilepath(char*)>
c0021055:	83 c4 10             	add    esp,0x10
c0021058:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0021060:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021067:	83 e0 01             	and    eax,0x1
c002106a:	74 08                	je     c0021074 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c002106c:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0021074:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002107b:	83 e0 04             	and    eax,0x4
c002107e:	74 10                	je     c0021090 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0021080:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0021088:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021090:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021097:	83 e0 02             	and    eax,0x2
c002109a:	74 08                	je     c00210a4 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c002109c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00210a4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00210ab:	83 e0 08             	and    eax,0x8
c00210ae:	74 08                	je     c00210b8 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c00210b0:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00210b8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00210bf:	83 e0 10             	and    eax,0x10
c00210c2:	74 08                	je     c00210cc <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c00210c4:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00210cc:	83 ec 0c             	sub    esp,0xc
c00210cf:	68 50 02 00 00       	push   0x250
c00210d4:	e8 67 e7 fe ff       	call   c000f840 <malloc>
c00210d9:	83 c4 10             	add    esp,0x10
c00210dc:	89 c2                	mov    edx,eax
c00210de:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00210e5:	89 10                	mov    DWORD PTR [eax],edx
c00210e7:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00210ef:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00210f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00210f8:	83 ec 04             	sub    esp,0x4
c00210fb:	52                   	push   edx
c00210fc:	8d 54 24 10          	lea    edx,[esp+0x10]
c0021100:	52                   	push   edx
c0021101:	50                   	push   eax
c0021102:	e8 8a 3e fe ff       	call   c0004f91 <f_open>
c0021107:	83 c4 10             	add    esp,0x10
c002110a:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0021111:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0021119:	74 07                	je     c0021122 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c002111b:	b8 01 00 00 00       	mov    eax,0x1
c0021120:	eb 05                	jmp    c0021127 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0021122:	b8 00 00 00 00       	mov    eax,0x0
c0021127:	81 c4 1c 01 00 00    	add    esp,0x11c
c002112d:	c3                   	ret    

c002112e <FAT::openDir(char const*, void**)>:
c002112e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021134:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002113c:	74 0a                	je     c0021148 <FAT::openDir(char const*, void**)+0x1a>
c002113e:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021146:	75 07                	jne    c002114f <FAT::openDir(char const*, void**)+0x21>
c0021148:	b8 04 00 00 00       	mov    eax,0x4
c002114d:	eb 7d                	jmp    c00211cc <FAT::openDir(char const*, void**)+0x9e>
c002114f:	83 ec 08             	sub    esp,0x8
c0021152:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021159:	8d 44 24 18          	lea    eax,[esp+0x18]
c002115d:	50                   	push   eax
c002115e:	e8 d1 f6 fd ff       	call   c0000834 <strcpy>
c0021163:	83 c4 10             	add    esp,0x10
c0021166:	83 ec 08             	sub    esp,0x8
c0021169:	8d 44 24 14          	lea    eax,[esp+0x14]
c002116d:	50                   	push   eax
c002116e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021175:	e8 54 fe ff ff       	call   c0020fce <FAT::fixFilepath(char*)>
c002117a:	83 c4 10             	add    esp,0x10
c002117d:	83 ec 0c             	sub    esp,0xc
c0021180:	6a 4c                	push   0x4c
c0021182:	e8 b9 e6 fe ff       	call   c000f840 <malloc>
c0021187:	83 c4 10             	add    esp,0x10
c002118a:	89 c2                	mov    edx,eax
c002118c:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021193:	89 10                	mov    DWORD PTR [eax],edx
c0021195:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002119c:	8b 00                	mov    eax,DWORD PTR [eax]
c002119e:	83 ec 08             	sub    esp,0x8
c00211a1:	8d 54 24 14          	lea    edx,[esp+0x14]
c00211a5:	52                   	push   edx
c00211a6:	50                   	push   eax
c00211a7:	e8 1d 4e fe ff       	call   c0005fc9 <f_opendir>
c00211ac:	83 c4 10             	add    esp,0x10
c00211af:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00211b6:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00211be:	74 07                	je     c00211c7 <FAT::openDir(char const*, void**)+0x99>
c00211c0:	b8 01 00 00 00       	mov    eax,0x1
c00211c5:	eb 05                	jmp    c00211cc <FAT::openDir(char const*, void**)+0x9e>
c00211c7:	b8 00 00 00 00       	mov    eax,0x0
c00211cc:	81 c4 1c 01 00 00    	add    esp,0x11c
c00211d2:	c3                   	ret    
c00211d3:	90                   	nop

c00211d4 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00211d4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00211da:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00211e2:	75 0a                	jne    c00211ee <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c00211e4:	b8 04 00 00 00       	mov    eax,0x4
c00211e9:	e9 c9 00 00 00       	jmp    c00212b7 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00211ee:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00211f6:	75 0a                	jne    c0021202 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c00211f8:	b8 04 00 00 00       	mov    eax,0x4
c00211fd:	e9 b5 00 00 00       	jmp    c00212b7 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021202:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c002120a:	75 0a                	jne    c0021216 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c002120c:	b8 04 00 00 00       	mov    eax,0x4
c0021211:	e9 a1 00 00 00       	jmp    c00212b7 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021216:	83 ec 08             	sub    esp,0x8
c0021219:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021220:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021227:	50                   	push   eax
c0021228:	e8 07 f6 fd ff       	call   c0000834 <strcpy>
c002122d:	83 c4 10             	add    esp,0x10
c0021230:	83 ec 08             	sub    esp,0x8
c0021233:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c002123a:	50                   	push   eax
c002123b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021242:	e8 87 fd ff ff       	call   c0020fce <FAT::fixFilepath(char*)>
c0021247:	83 c4 10             	add    esp,0x10
c002124a:	83 ec 08             	sub    esp,0x8
c002124d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021251:	50                   	push   eax
c0021252:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021259:	50                   	push   eax
c002125a:	e8 29 4f fe ff       	call   c0006188 <f_stat>
c002125f:	83 c4 10             	add    esp,0x10
c0021262:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021269:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021270:	85 c0                	test   eax,eax
c0021272:	74 07                	je     c002127b <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0021274:	83 f8 04             	cmp    eax,0x4
c0021277:	74 32                	je     c00212ab <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0021279:	eb 37                	jmp    c00212b2 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c002127b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002127f:	0f b6 c0             	movzx  eax,al
c0021282:	83 e0 10             	and    eax,0x10
c0021285:	0f 95 c2             	setne  dl
c0021288:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c002128f:	88 10                	mov    BYTE PTR [eax],dl
c0021291:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021294:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021298:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c002129f:	89 01                	mov    DWORD PTR [ecx],eax
c00212a1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00212a4:	b8 00 00 00 00       	mov    eax,0x0
c00212a9:	eb 0c                	jmp    c00212b7 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00212ab:	b8 02 00 00 00       	mov    eax,0x2
c00212b0:	eb 05                	jmp    c00212b7 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00212b2:	b8 01 00 00 00       	mov    eax,0x1
c00212b7:	81 c4 2c 02 00 00    	add    esp,0x22c
c00212bd:	c3                   	ret    

c00212be <FAT::unlink(char const*)>:
c00212be:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00212c4:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00212cc:	75 07                	jne    c00212d5 <FAT::unlink(char const*)+0x17>
c00212ce:	b8 04 00 00 00       	mov    eax,0x4
c00212d3:	eb 5c                	jmp    c0021331 <FAT::unlink(char const*)+0x73>
c00212d5:	83 ec 08             	sub    esp,0x8
c00212d8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00212df:	8d 44 24 18          	lea    eax,[esp+0x18]
c00212e3:	50                   	push   eax
c00212e4:	e8 4b f5 fd ff       	call   c0000834 <strcpy>
c00212e9:	83 c4 10             	add    esp,0x10
c00212ec:	83 ec 08             	sub    esp,0x8
c00212ef:	8d 44 24 14          	lea    eax,[esp+0x14]
c00212f3:	50                   	push   eax
c00212f4:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00212fb:	e8 ce fc ff ff       	call   c0020fce <FAT::fixFilepath(char*)>
c0021300:	83 c4 10             	add    esp,0x10
c0021303:	83 ec 0c             	sub    esp,0xc
c0021306:	8d 44 24 18          	lea    eax,[esp+0x18]
c002130a:	50                   	push   eax
c002130b:	e8 ca 51 fe ff       	call   c00064da <f_unlink>
c0021310:	83 c4 10             	add    esp,0x10
c0021313:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002131a:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021321:	85 c0                	test   eax,eax
c0021323:	75 07                	jne    c002132c <FAT::unlink(char const*)+0x6e>
c0021325:	b8 00 00 00 00       	mov    eax,0x0
c002132a:	eb 05                	jmp    c0021331 <FAT::unlink(char const*)+0x73>
c002132c:	b8 01 00 00 00       	mov    eax,0x1
c0021331:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021337:	c3                   	ret    

c0021338 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0021338:	81 ec 2c 01 00 00    	sub    esp,0x12c
c002133e:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0021345:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c002134c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021350:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021354:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c002135c:	75 0a                	jne    c0021368 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c002135e:	b8 04 00 00 00       	mov    eax,0x4
c0021363:	e9 1c 01 00 00       	jmp    c0021484 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021368:	83 ec 08             	sub    esp,0x8
c002136b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021372:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021376:	50                   	push   eax
c0021377:	e8 b8 f4 fd ff       	call   c0000834 <strcpy>
c002137c:	83 c4 10             	add    esp,0x10
c002137f:	83 ec 08             	sub    esp,0x8
c0021382:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021386:	50                   	push   eax
c0021387:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002138e:	e8 3b fc ff ff       	call   c0020fce <FAT::fixFilepath(char*)>
c0021393:	83 c4 10             	add    esp,0x10
c0021396:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c002139e:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00213a6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213ab:	83 e0 01             	and    eax,0x1
c00213ae:	74 08                	je     c00213b8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c00213b0:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00213b8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213bd:	83 e0 02             	and    eax,0x2
c00213c0:	74 08                	je     c00213ca <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c00213c2:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00213ca:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213cf:	83 e0 04             	and    eax,0x4
c00213d2:	74 08                	je     c00213dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c00213d4:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00213dc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213e1:	83 e0 08             	and    eax,0x8
c00213e4:	74 08                	je     c00213ee <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c00213e6:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00213ee:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213f3:	83 e0 01             	and    eax,0x1
c00213f6:	74 08                	je     c0021400 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c00213f8:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0021400:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021405:	83 e0 02             	and    eax,0x2
c0021408:	74 08                	je     c0021412 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c002140a:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0021412:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021417:	83 e0 04             	and    eax,0x4
c002141a:	74 08                	je     c0021424 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c002141c:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0021424:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021429:	83 e0 08             	and    eax,0x8
c002142c:	74 08                	je     c0021436 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c002142e:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0021436:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c002143d:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0021444:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c002144c:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0021454:	83 ec 04             	sub    esp,0x4
c0021457:	52                   	push   edx
c0021458:	50                   	push   eax
c0021459:	8d 44 24 24          	lea    eax,[esp+0x24]
c002145d:	50                   	push   eax
c002145e:	e8 19 57 fe ff       	call   c0006b7c <f_chmod>
c0021463:	83 c4 10             	add    esp,0x10
c0021466:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c002146d:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021474:	85 c0                	test   eax,eax
c0021476:	75 07                	jne    c002147f <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021478:	b8 00 00 00 00       	mov    eax,0x0
c002147d:	eb 05                	jmp    c0021484 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c002147f:	b8 01 00 00 00       	mov    eax,0x1
c0021484:	81 c4 2c 01 00 00    	add    esp,0x12c
c002148a:	c3                   	ret    
c002148b:	90                   	nop

c002148c <FAT::rename(char const*, char const*)>:
c002148c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021492:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c002149a:	74 0a                	je     c00214a6 <FAT::rename(char const*, char const*)+0x1a>
c002149c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00214a4:	75 0a                	jne    c00214b0 <FAT::rename(char const*, char const*)+0x24>
c00214a6:	b8 04 00 00 00       	mov    eax,0x4
c00214ab:	e9 98 00 00 00       	jmp    c0021548 <FAT::rename(char const*, char const*)+0xbc>
c00214b0:	83 ec 08             	sub    esp,0x8
c00214b3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00214ba:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00214c1:	50                   	push   eax
c00214c2:	e8 6d f3 fd ff       	call   c0000834 <strcpy>
c00214c7:	83 c4 10             	add    esp,0x10
c00214ca:	83 ec 08             	sub    esp,0x8
c00214cd:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00214d4:	50                   	push   eax
c00214d5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00214dc:	e8 ed fa ff ff       	call   c0020fce <FAT::fixFilepath(char*)>
c00214e1:	83 c4 10             	add    esp,0x10
c00214e4:	83 ec 08             	sub    esp,0x8
c00214e7:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00214ee:	8d 44 24 18          	lea    eax,[esp+0x18]
c00214f2:	50                   	push   eax
c00214f3:	e8 3c f3 fd ff       	call   c0000834 <strcpy>
c00214f8:	83 c4 10             	add    esp,0x10
c00214fb:	83 ec 08             	sub    esp,0x8
c00214fe:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021502:	50                   	push   eax
c0021503:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002150a:	e8 bf fa ff ff       	call   c0020fce <FAT::fixFilepath(char*)>
c002150f:	83 c4 10             	add    esp,0x10
c0021512:	83 ec 08             	sub    esp,0x8
c0021515:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021519:	50                   	push   eax
c002151a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021521:	50                   	push   eax
c0021522:	e8 62 53 fe ff       	call   c0006889 <f_rename>
c0021527:	83 c4 10             	add    esp,0x10
c002152a:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0021531:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0021538:	85 c0                	test   eax,eax
c002153a:	75 07                	jne    c0021543 <FAT::rename(char const*, char const*)+0xb7>
c002153c:	b8 00 00 00 00       	mov    eax,0x0
c0021541:	eb 05                	jmp    c0021548 <FAT::rename(char const*, char const*)+0xbc>
c0021543:	b8 01 00 00 00       	mov    eax,0x1
c0021548:	81 c4 1c 02 00 00    	add    esp,0x21c
c002154e:	c3                   	ret    
c002154f:	90                   	nop

c0021550 <FAT::mkdir(char const*)>:
c0021550:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021556:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002155e:	75 07                	jne    c0021567 <FAT::mkdir(char const*)+0x17>
c0021560:	b8 04 00 00 00       	mov    eax,0x4
c0021565:	eb 5c                	jmp    c00215c3 <FAT::mkdir(char const*)+0x73>
c0021567:	83 ec 08             	sub    esp,0x8
c002156a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021571:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021575:	50                   	push   eax
c0021576:	e8 b9 f2 fd ff       	call   c0000834 <strcpy>
c002157b:	83 c4 10             	add    esp,0x10
c002157e:	83 ec 08             	sub    esp,0x8
c0021581:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021585:	50                   	push   eax
c0021586:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002158d:	e8 3c fa ff ff       	call   c0020fce <FAT::fixFilepath(char*)>
c0021592:	83 c4 10             	add    esp,0x10
c0021595:	83 ec 0c             	sub    esp,0xc
c0021598:	8d 44 24 18          	lea    eax,[esp+0x18]
c002159c:	50                   	push   eax
c002159d:	e8 bb 50 fe ff       	call   c000665d <f_mkdir>
c00215a2:	83 c4 10             	add    esp,0x10
c00215a5:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00215ac:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00215b3:	85 c0                	test   eax,eax
c00215b5:	75 07                	jne    c00215be <FAT::mkdir(char const*)+0x6e>
c00215b7:	b8 00 00 00 00       	mov    eax,0x0
c00215bc:	eb 05                	jmp    c00215c3 <FAT::mkdir(char const*)+0x73>
c00215be:	b8 01 00 00 00       	mov    eax,0x1
c00215c3:	81 c4 1c 01 00 00    	add    esp,0x11c
c00215c9:	c3                   	ret    

c00215ca <FAT::exists(char const*)>:
c00215ca:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00215d0:	83 ec 08             	sub    esp,0x8
c00215d3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00215da:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00215de:	50                   	push   eax
c00215df:	e8 50 f2 fd ff       	call   c0000834 <strcpy>
c00215e4:	83 c4 10             	add    esp,0x10
c00215e7:	83 ec 08             	sub    esp,0x8
c00215ea:	8d 44 24 08          	lea    eax,[esp+0x8]
c00215ee:	50                   	push   eax
c00215ef:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00215f6:	e8 d3 f9 ff ff       	call   c0020fce <FAT::fixFilepath(char*)>
c00215fb:	83 c4 10             	add    esp,0x10
c00215fe:	83 ec 08             	sub    esp,0x8
c0021601:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021608:	50                   	push   eax
c0021609:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002160d:	50                   	push   eax
c002160e:	e8 75 4b fe ff       	call   c0006188 <f_stat>
c0021613:	83 c4 10             	add    esp,0x10
c0021616:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c002161d:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021624:	85 c0                	test   eax,eax
c0021626:	75 04                	jne    c002162c <FAT::exists(char const*)+0x62>
c0021628:	b0 01                	mov    al,0x1
c002162a:	eb 02                	jmp    c002162e <FAT::exists(char const*)+0x64>
c002162c:	b0 00                	mov    al,0x0
c002162e:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021634:	c3                   	ret    
c0021635:	90                   	nop

c0021636 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0021636:	b8 08 00 00 00       	mov    eax,0x8
c002163b:	c3                   	ret    

c002163c <ISO9660::seek(void*, unsigned long long)>:
c002163c:	53                   	push   ebx
c002163d:	b8 04 00 00 00       	mov    eax,0x4
c0021642:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021646:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002164a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002164e:	85 d2                	test   edx,edx
c0021650:	74 17                	je     c0021669 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021652:	89 c8                	mov    eax,ecx
c0021654:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0021657:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c002165a:	b8 01 00 00 00       	mov    eax,0x1
c002165f:	73 08                	jae    c0021669 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021661:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021664:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021667:	31 c0                	xor    eax,eax
c0021669:	5b                   	pop    ebx
c002166a:	c3                   	ret    
c002166b:	90                   	nop

c002166c <ISO9660::tell(void*, unsigned long long*)>:
c002166c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021670:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021674:	85 d2                	test   edx,edx
c0021676:	74 12                	je     c002168a <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021678:	85 c0                	test   eax,eax
c002167a:	74 0e                	je     c002168a <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002167c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002167f:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021682:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021685:	89 10                	mov    DWORD PTR [eax],edx
c0021687:	31 c0                	xor    eax,eax
c0021689:	c3                   	ret    
c002168a:	b8 04 00 00 00       	mov    eax,0x4
c002168f:	c3                   	ret    

c0021690 <ISO9660::getName()>:
c0021690:	b8 94 ca 02 c0       	mov    eax,0xc002ca94
c0021695:	c3                   	ret    

c0021696 <ISO9660::stat(void*, unsigned long long*)>:
c0021696:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002169a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002169e:	85 d2                	test   edx,edx
c00216a0:	74 12                	je     c00216b4 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00216a2:	85 c0                	test   eax,eax
c00216a4:	74 0e                	je     c00216b4 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00216a6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00216a9:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00216ac:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00216af:	89 10                	mov    DWORD PTR [eax],edx
c00216b1:	31 c0                	xor    eax,eax
c00216b3:	c3                   	ret    
c00216b4:	b8 04 00 00 00       	mov    eax,0x4
c00216b9:	c3                   	ret    

c00216ba <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00216ba:	b8 01 00 00 00       	mov    eax,0x1
c00216bf:	c3                   	ret    

c00216c0 <ISO9660::unlink(char const*)>:
c00216c0:	b8 01 00 00 00       	mov    eax,0x1
c00216c5:	c3                   	ret    

c00216c6 <ISO9660::write(void*, unsigned long, void*, int*)>:
c00216c6:	b8 01 00 00 00       	mov    eax,0x1
c00216cb:	c3                   	ret    

c00216cc <ISO9660::rename(char const*, char const*)>:
c00216cc:	b8 01 00 00 00       	mov    eax,0x1
c00216d1:	c3                   	ret    

c00216d2 <ISO9660::mkdir(char const*)>:
c00216d2:	b8 01 00 00 00       	mov    eax,0x1
c00216d7:	c3                   	ret    

c00216d8 <ISO9660::close(void*)>:
c00216d8:	83 ec 0c             	sub    esp,0xc
c00216db:	b8 04 00 00 00       	mov    eax,0x4
c00216e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00216e4:	85 d2                	test   edx,edx
c00216e6:	74 0e                	je     c00216f6 <ISO9660::close(void*)+0x1e>
c00216e8:	83 ec 0c             	sub    esp,0xc
c00216eb:	52                   	push   edx
c00216ec:	e8 5f e1 fe ff       	call   c000f850 <free>
c00216f1:	83 c4 10             	add    esp,0x10
c00216f4:	31 c0                	xor    eax,eax
c00216f6:	83 c4 0c             	add    esp,0xc
c00216f9:	c3                   	ret    

c00216fa <ISO9660::closeDir(void*)>:
c00216fa:	83 ec 0c             	sub    esp,0xc
c00216fd:	b8 04 00 00 00       	mov    eax,0x4
c0021702:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021706:	85 d2                	test   edx,edx
c0021708:	74 0e                	je     c0021718 <ISO9660::closeDir(void*)+0x1e>
c002170a:	83 ec 0c             	sub    esp,0xc
c002170d:	52                   	push   edx
c002170e:	e8 3d e1 fe ff       	call   c000f850 <free>
c0021713:	83 c4 10             	add    esp,0x10
c0021716:	31 c0                	xor    eax,eax
c0021718:	83 c4 0c             	add    esp,0xc
c002171b:	c3                   	ret    

c002171c <ISO9660::~ISO9660()>:
c002171c:	83 ec 0c             	sub    esp,0xc
c002171f:	ba f8 ca 02 c0       	mov    edx,0xc002caf8
c0021724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021728:	89 10                	mov    DWORD PTR [eax],edx
c002172a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002172e:	83 ec 0c             	sub    esp,0xc
c0021731:	50                   	push   eax
c0021732:	e8 23 1b ff ff       	call   c001325a <Filesystem::~Filesystem()>
c0021737:	83 c4 10             	add    esp,0x10
c002173a:	90                   	nop
c002173b:	83 c4 0c             	add    esp,0xc
c002173e:	c3                   	ret    
c002173f:	90                   	nop

c0021740 <ISO9660::~ISO9660()>:
c0021740:	83 ec 0c             	sub    esp,0xc
c0021743:	83 ec 0c             	sub    esp,0xc
c0021746:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002174a:	e8 cd ff ff ff       	call   c002171c <ISO9660::~ISO9660()>
c002174f:	83 c4 10             	add    esp,0x10
c0021752:	83 ec 08             	sub    esp,0x8
c0021755:	6a 08                	push   0x8
c0021757:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002175b:	e8 f1 16 ff ff       	call   c0012e51 <operator delete(void*, unsigned long)>
c0021760:	83 c4 10             	add    esp,0x10
c0021763:	83 c4 0c             	add    esp,0xc
c0021766:	c3                   	ret    

c0021767 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021767:	55                   	push   ebp
c0021768:	31 c9                	xor    ecx,ecx
c002176a:	57                   	push   edi
c002176b:	56                   	push   esi
c002176c:	53                   	push   ebx
c002176d:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021771:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021775:	89 eb                	mov    ebx,ebp
c0021777:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c002177b:	39 ce                	cmp    esi,ecx
c002177d:	7e 17                	jle    c0021796 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c002177f:	31 d2                	xor    edx,edx
c0021781:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021785:	7d 13                	jge    c002179a <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021787:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002178b:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c002178e:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021791:	75 0d                	jne    c00217a0 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021793:	42                   	inc    edx
c0021794:	eb eb                	jmp    c0021781 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021796:	31 c0                	xor    eax,eax
c0021798:	eb 0a                	jmp    c00217a4 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002179a:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c002179e:	eb 04                	jmp    c00217a4 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00217a0:	41                   	inc    ecx
c00217a1:	43                   	inc    ebx
c00217a2:	eb d7                	jmp    c002177b <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c00217a4:	5b                   	pop    ebx
c00217a5:	5e                   	pop    esi
c00217a6:	5f                   	pop    edi
c00217a7:	5d                   	pop    ebp
c00217a8:	c3                   	ret    

c00217a9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00217a9:	56                   	push   esi
c00217aa:	53                   	push   ebx
c00217ab:	52                   	push   edx
c00217ac:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00217b0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00217b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00217b8:	39 0d 00 1d 03 c0    	cmp    DWORD PTR ds:0xc0031d00,ecx
c00217be:	75 08                	jne    c00217c8 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c00217c0:	38 05 54 db 02 c0    	cmp    BYTE PTR ds:0xc002db54,al
c00217c6:	74 2b                	je     c00217f3 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c00217c8:	83 ec 0c             	sub    esp,0xc
c00217cb:	a2 54 db 02 c0       	mov    ds:0xc002db54,al
c00217d0:	68 20 1d 03 c0       	push   0xc0031d20
c00217d5:	0f be c0             	movsx  eax,al
c00217d8:	6a 01                	push   0x1
c00217da:	89 0d 00 1d 03 c0    	mov    DWORD PTR ds:0xc0031d00,ecx
c00217e0:	31 db                	xor    ebx,ebx
c00217e2:	53                   	push   ebx
c00217e3:	51                   	push   ecx
c00217e4:	ff 34 85 dc ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd1524]
c00217eb:	e8 62 4f ff ff       	call   c0016752 <LogicalDisk::read(unsigned long long, int, void*)>
c00217f0:	83 c4 20             	add    esp,0x20
c00217f3:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c00217fb:	c7 44 24 14 20 1d 03 c0 	mov    DWORD PTR [esp+0x14],0xc0031d20
c0021803:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021807:	58                   	pop    eax
c0021808:	5b                   	pop    ebx
c0021809:	5e                   	pop    esi
c002180a:	e9 35 ef fd ff       	jmp    c0000744 <memcpy>
c002180f:	90                   	nop

c0021810 <ISO9660::tryMount(LogicalDisk*, int)>:
c0021810:	81 ec 10 08 00 00    	sub    esp,0x810
c0021816:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c002181d:	83 c0 41             	add    eax,0x41
c0021820:	0f be c0             	movsx  eax,al
c0021823:	50                   	push   eax
c0021824:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021828:	50                   	push   eax
c0021829:	6a 10                	push   0x10
c002182b:	e8 79 ff ff ff       	call   c00217a9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021830:	83 c4 10             	add    esp,0x10
c0021833:	31 c0                	xor    eax,eax
c0021835:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c002183a:	75 1d                	jne    c0021859 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002183c:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0021841:	75 16                	jne    c0021859 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021843:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021848:	75 0f                	jne    c0021859 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002184a:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c002184f:	75 08                	jne    c0021859 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021851:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021856:	0f 94 c0             	sete   al
c0021859:	81 c4 0c 08 00 00    	add    esp,0x80c
c002185f:	c3                   	ret    

c0021860 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021860:	55                   	push   ebp
c0021861:	57                   	push   edi
c0021862:	56                   	push   esi
c0021863:	53                   	push   ebx
c0021864:	81 ec 2c 08 00 00    	sub    esp,0x82c
c002186a:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021871:	85 ed                	test   ebp,ebp
c0021873:	0f 84 d6 01 00 00    	je     c0021a4f <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021879:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021881:	0f 84 c8 01 00 00    	je     c0021a4f <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021887:	b8 01 00 00 00       	mov    eax,0x1
c002188c:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021890:	0f 85 be 01 00 00    	jne    c0021a54 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021896:	31 d2                	xor    edx,edx
c0021898:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c002189f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00218a2:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c00218a5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00218a9:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c00218ac:	89 04 24             	mov    DWORD PTR [esp],eax
c00218af:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00218b3:	01 f0                	add    eax,esi
c00218b5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00218b8:	11 fa                	adc    edx,edi
c00218ba:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00218be:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00218c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00218c6:	19 d1                	sbb    ecx,edx
c00218c8:	72 0a                	jb     c00218d4 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c00218ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00218ce:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00218d2:	eb 13                	jmp    c00218e7 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c00218d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00218d8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00218dc:	29 f0                	sub    eax,esi
c00218de:	19 fa                	sbb    edx,edi
c00218e0:	89 04 24             	mov    DWORD PTR [esp],eax
c00218e3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00218e7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00218ea:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00218ed:	0f a4 c2 0b          	shld   edx,eax,0xb
c00218f1:	51                   	push   ecx
c00218f2:	c1 e0 0b             	shl    eax,0xb
c00218f5:	01 c6                	add    esi,eax
c00218f7:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00218fb:	11 d7                	adc    edi,edx
c00218fd:	50                   	push   eax
c00218fe:	89 fa                	mov    edx,edi
c0021900:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0021904:	89 f0                	mov    eax,esi
c0021906:	53                   	push   ebx
c0021907:	0f ac d0 0b          	shrd   eax,edx,0xb
c002190b:	50                   	push   eax
c002190c:	e8 98 fe ff ff       	call   c00217a9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021911:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021915:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021918:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c002191c:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0021922:	83 c4 10             	add    esp,0x10
c0021925:	b8 00 08 00 00       	mov    eax,0x800
c002192a:	29 d0                	sub    eax,edx
c002192c:	39 c1                	cmp    ecx,eax
c002192e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0021932:	83 d9 00             	sbb    ecx,0x0
c0021935:	7d 1c                	jge    c0021953 <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c0021937:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c002193c:	75 12                	jne    c0021950 <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c002193e:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021945:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002194b:	e9 fb 00 00 00       	jmp    c0021a4b <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c0021950:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021953:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c0021956:	31 d2                	xor    edx,edx
c0021958:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c002195c:	39 c2                	cmp    edx,eax
c002195e:	7d 14                	jge    c0021974 <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c0021960:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021967:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002196b:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c002196e:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021971:	42                   	inc    edx
c0021972:	eb e8                	jmp    c002195c <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c0021974:	89 c3                	mov    ebx,eax
c0021976:	85 c0                	test   eax,eax
c0021978:	79 02                	jns    c002197c <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c002197a:	31 db                	xor    ebx,ebx
c002197c:	99                   	cdq    
c002197d:	01 c3                	add    ebx,eax
c002197f:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c0021986:	01 c6                	add    esi,eax
c0021988:	11 d7                	adc    edi,edx
c002198a:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c002198e:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021992:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021995:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021999:	29 c6                	sub    esi,eax
c002199b:	19 d7                	sbb    edi,edx
c002199d:	89 34 24             	mov    DWORD PTR [esp],esi
c00219a0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00219a4:	b8 ff 07 00 00       	mov    eax,0x7ff
c00219a9:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00219ac:	b8 00 00 00 00       	mov    eax,0x0
c00219b1:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00219b5:	7d 3e                	jge    c00219f5 <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c00219b7:	52                   	push   edx
c00219b8:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00219bc:	50                   	push   eax
c00219bd:	53                   	push   ebx
c00219be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00219c2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00219c6:	0f ac d0 0b          	shrd   eax,edx,0xb
c00219ca:	50                   	push   eax
c00219cb:	e8 d9 fd ff ff       	call   c00217a9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00219d0:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c00219d8:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c00219dd:	81 c3 00 08 00 00    	add    ebx,0x800
c00219e3:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c00219eb:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c00219f0:	83 c4 10             	add    esp,0x10
c00219f3:	eb af                	jmp    c00219a4 <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c00219f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00219f9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00219fc:	74 32                	je     c0021a30 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c00219fe:	50                   	push   eax
c00219ff:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021a03:	50                   	push   eax
c0021a04:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021a08:	50                   	push   eax
c0021a09:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0021a0d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0021a11:	0f ac fe 0b          	shrd   esi,edi,0xb
c0021a15:	56                   	push   esi
c0021a16:	e8 8e fd ff ff       	call   c00217a9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a1b:	83 c4 0c             	add    esp,0xc
c0021a1e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0021a22:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021a26:	50                   	push   eax
c0021a27:	53                   	push   ebx
c0021a28:	e8 17 ed fd ff       	call   c0000744 <memcpy>
c0021a2d:	83 c4 10             	add    esp,0x10
c0021a30:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021a37:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021a3b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021a3f:	89 38                	mov    DWORD PTR [eax],edi
c0021a41:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a45:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021a48:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021a4b:	31 c0                	xor    eax,eax
c0021a4d:	eb 05                	jmp    c0021a54 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021a4f:	b8 04 00 00 00       	mov    eax,0x4
c0021a54:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021a5a:	5b                   	pop    ebx
c0021a5b:	5e                   	pop    esi
c0021a5c:	5f                   	pop    edi
c0021a5d:	5d                   	pop    ebp
c0021a5e:	c3                   	ret    
c0021a5f:	90                   	nop

c0021a60 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021a60:	55                   	push   ebp
c0021a61:	57                   	push   edi
c0021a62:	56                   	push   esi
c0021a63:	53                   	push   ebx
c0021a64:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021a6a:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0021a71:	85 f6                	test   esi,esi
c0021a73:	0f 84 64 02 00 00    	je     c0021cdd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021a79:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021a81:	0f 84 56 02 00 00    	je     c0021cdd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021a87:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0021a8a:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0021a8d:	75 0a                	jne    c0021a99 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021a8f:	b8 07 00 00 00       	mov    eax,0x7
c0021a94:	e9 49 02 00 00       	jmp    c0021ce2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021a99:	50                   	push   eax
c0021a9a:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021a9e:	50                   	push   eax
c0021a9f:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021aa6:	53                   	push   ebx
c0021aa7:	8b 06                	mov    eax,DWORD PTR [esi]
c0021aa9:	c1 e0 0b             	shl    eax,0xb
c0021aac:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0021aaf:	c1 e8 0b             	shr    eax,0xb
c0021ab2:	50                   	push   eax
c0021ab3:	e8 f1 fc ff ff       	call   c00217a9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021ab8:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021abb:	83 c4 10             	add    esp,0x10
c0021abe:	89 c1                	mov    ecx,eax
c0021ac0:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0021ac3:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021ac9:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021acc:	84 db                	test   bl,bl
c0021ace:	0f 85 90 00 00 00    	jne    c0021b64 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0021ad4:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0021ada:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021ae0:	29 c7                	sub    edi,eax
c0021ae2:	89 fb                	mov    ebx,edi
c0021ae4:	c1 fb 1f             	sar    ebx,0x1f
c0021ae7:	01 f8                	add    eax,edi
c0021ae9:	11 da                	adc    edx,ebx
c0021aeb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021aef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021af3:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0021af6:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0021af9:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021afc:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021aff:	89 04 24             	mov    DWORD PTR [esp],eax
c0021b02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021b06:	89 d8                	mov    eax,ebx
c0021b08:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021b0b:	ba 00 00 00 00       	mov    edx,0x0
c0021b10:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021b14:	b8 00 00 00 00       	mov    eax,0x0
c0021b19:	73 0b                	jae    c0021b26 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0021b1b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021b1e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021b22:	29 f8                	sub    eax,edi
c0021b24:	19 da                	sbb    edx,ebx
c0021b26:	89 d3                	mov    ebx,edx
c0021b28:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021b2b:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021b2e:	09 c3                	or     ebx,eax
c0021b30:	0f 84 59 ff ff ff    	je     c0021a8f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021b36:	55                   	push   ebp
c0021b37:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021b3b:	50                   	push   eax
c0021b3c:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021b43:	53                   	push   ebx
c0021b44:	8b 06                	mov    eax,DWORD PTR [esi]
c0021b46:	c1 e0 0b             	shl    eax,0xb
c0021b49:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0021b4d:	c1 e8 0b             	shr    eax,0xb
c0021b50:	50                   	push   eax
c0021b51:	e8 53 fc ff ff       	call   c00217a9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021b56:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021b59:	83 c4 10             	add    esp,0x10
c0021b5c:	25 ff 07 00 00       	and    eax,0x7ff
c0021b61:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021b64:	57                   	push   edi
c0021b65:	6a 28                	push   0x28
c0021b67:	6a 00                	push   0x0
c0021b69:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021b6d:	50                   	push   eax
c0021b6e:	e8 05 ec fd ff       	call   c0000778 <memset>
c0021b73:	31 d2                	xor    edx,edx
c0021b75:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0021b78:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021b7e:	89 f8                	mov    eax,edi
c0021b80:	83 c0 21             	add    eax,0x21
c0021b83:	83 d2 00             	adc    edx,0x0
c0021b86:	89 c7                	mov    edi,eax
c0021b88:	89 d5                	mov    ebp,edx
c0021b8a:	83 c4 10             	add    esp,0x10
c0021b8d:	31 c9                	xor    ecx,ecx
c0021b8f:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0021b96:	83 f9 28             	cmp    ecx,0x28
c0021b99:	88 04 24             	mov    BYTE PTR [esp],al
c0021b9c:	0f 94 c2             	sete   dl
c0021b9f:	88 d0                	mov    al,dl
c0021ba1:	ba ff 07 00 00       	mov    edx,0x7ff
c0021ba6:	39 fa                	cmp    edx,edi
c0021ba8:	ba 00 00 00 00       	mov    edx,0x0
c0021bad:	19 ea                	sbb    edx,ebp
c0021baf:	0f 92 c2             	setb   dl
c0021bb2:	09 c2                	or     edx,eax
c0021bb4:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021bb8:	0f 94 c0             	sete   al
c0021bbb:	08 d0                	or     al,dl
c0021bbd:	75 16                	jne    c0021bd5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021bbf:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021bc3:	74 10                	je     c0021bd5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021bc5:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021bc8:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021bcc:	41                   	inc    ecx
c0021bcd:	83 c7 01             	add    edi,0x1
c0021bd0:	83 d5 00             	adc    ebp,0x0
c0021bd3:	eb ba                	jmp    c0021b8f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021bd5:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021bdc:	83 ec 0c             	sub    esp,0xc
c0021bdf:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021be3:	57                   	push   edi
c0021be4:	e8 ab eb fd ff       	call   c0000794 <strlen>
c0021be9:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021bf1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021bf5:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021bfc:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021bff:	5a                   	pop    edx
c0021c00:	25 ff 07 00 00       	and    eax,0x7ff
c0021c05:	01 c8                	add    eax,ecx
c0021c07:	59                   	pop    ecx
c0021c08:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021c0e:	83 e0 02             	and    eax,0x2
c0021c11:	3c 01                	cmp    al,0x1
c0021c13:	19 c0                	sbb    eax,eax
c0021c15:	83 c0 02             	add    eax,0x2
c0021c18:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021c1c:	57                   	push   edi
c0021c1d:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021c21:	50                   	push   eax
c0021c22:	e8 0d ec fd ff       	call   c0000834 <strcpy>
c0021c27:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021c2b:	83 c4 10             	add    esp,0x10
c0021c2e:	84 c0                	test   al,al
c0021c30:	75 21                	jne    c0021c53 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021c32:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021c3a:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021c42:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021c4a:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021c51:	eb 28                	jmp    c0021c7b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021c53:	fe c8                	dec    al
c0021c55:	75 24                	jne    c0021c7b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021c57:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021c5f:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021c67:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021c6f:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021c76:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021c7b:	0f b6 fb             	movzx  edi,bl
c0021c7e:	31 db                	xor    ebx,ebx
c0021c80:	50                   	push   eax
c0021c81:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0021c88:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021c8c:	50                   	push   eax
c0021c8d:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0021c94:	e8 ab ea fd ff       	call   c0000744 <memcpy>
c0021c99:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0021ca0:	89 f9                	mov    ecx,edi
c0021ca2:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021ca8:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0021cab:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021cae:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021cb1:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021cb4:	83 c4 10             	add    esp,0x10
c0021cb7:	39 c7                	cmp    edi,eax
c0021cb9:	89 df                	mov    edi,ebx
c0021cbb:	19 d7                	sbb    edi,edx
c0021cbd:	72 10                	jb     c0021ccf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021cbf:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021cc6:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021ccd:	eb 0a                	jmp    c0021cd9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021ccf:	29 c8                	sub    eax,ecx
c0021cd1:	19 da                	sbb    edx,ebx
c0021cd3:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021cd6:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021cd9:	31 c0                	xor    eax,eax
c0021cdb:	eb 05                	jmp    c0021ce2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021cdd:	b8 04 00 00 00       	mov    eax,0x4
c0021ce2:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021ce8:	5b                   	pop    ebx
c0021ce9:	5e                   	pop    esi
c0021cea:	5f                   	pop    edi
c0021ceb:	5d                   	pop    ebp
c0021cec:	c3                   	ret    

c0021ced <readRoot(unsigned int*, unsigned int*, char)>:
c0021ced:	81 ec 40 08 00 00    	sub    esp,0x840
c0021cf3:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021cfb:	50                   	push   eax
c0021cfc:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021d00:	50                   	push   eax
c0021d01:	6a 10                	push   0x10
c0021d03:	e8 a1 fa ff ff       	call   c00217a9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021d08:	83 c4 0c             	add    esp,0xc
c0021d0b:	6a 22                	push   0x22
c0021d0d:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021d14:	50                   	push   eax
c0021d15:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021d19:	50                   	push   eax
c0021d1a:	e8 25 ea fd ff       	call   c0000744 <memcpy>
c0021d1f:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021d26:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021d2a:	89 10                	mov    DWORD PTR [eax],edx
c0021d2c:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021d33:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021d37:	89 10                	mov    DWORD PTR [eax],edx
c0021d39:	b0 01                	mov    al,0x1
c0021d3b:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021d41:	c3                   	ret    

c0021d42 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021d42:	55                   	push   ebp
c0021d43:	57                   	push   edi
c0021d44:	56                   	push   esi
c0021d45:	53                   	push   ebx
c0021d46:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021d4c:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021d53:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021d5a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021d5e:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021d62:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021d66:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021d6a:	75 03                	jne    c0021d6f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021d6c:	83 c3 02             	add    ebx,0x2
c0021d6f:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021d72:	75 03                	jne    c0021d77 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021d74:	43                   	inc    ebx
c0021d75:	eb f8                	jmp    c0021d6f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021d77:	51                   	push   ecx
c0021d78:	68 00 01 00 00       	push   0x100
c0021d7d:	6a 00                	push   0x0
c0021d7f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021d83:	50                   	push   eax
c0021d84:	e8 ef e9 fd ff       	call   c0000778 <memset>
c0021d89:	83 c4 10             	add    esp,0x10
c0021d8c:	31 d2                	xor    edx,edx
c0021d8e:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021d91:	84 c0                	test   al,al
c0021d93:	74 21                	je     c0021db6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021d95:	3c 2f                	cmp    al,0x2f
c0021d97:	75 0b                	jne    c0021da4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021d99:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021d9d:	bd 01 00 00 00       	mov    ebp,0x1
c0021da2:	eb 14                	jmp    c0021db8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021da4:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021da7:	80 f9 19             	cmp    cl,0x19
c0021daa:	77 03                	ja     c0021daf <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021dac:	83 e8 20             	sub    eax,0x20
c0021daf:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021db3:	42                   	inc    edx
c0021db4:	eb d8                	jmp    c0021d8e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021db6:	31 ed                	xor    ebp,ebp
c0021db8:	83 ec 0c             	sub    esp,0xc
c0021dbb:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021dc2:	e8 79 da fe ff       	call   c000f840 <malloc>
c0021dc7:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021dce:	89 c6                	mov    esi,eax
c0021dd0:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021dd6:	c1 ef 0b             	shr    edi,0xb
c0021dd9:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021de0:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021de4:	83 c4 10             	add    esp,0x10
c0021de7:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021dec:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021df0:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021df7:	74 28                	je     c0021e21 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021df9:	52                   	push   edx
c0021dfa:	57                   	push   edi
c0021dfb:	50                   	push   eax
c0021dfc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021e00:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021e07:	e8 9d f9 ff ff       	call   c00217a9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021e0c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021e10:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021e17:	05 00 08 00 00       	add    eax,0x800
c0021e1c:	83 c4 10             	add    esp,0x10
c0021e1f:	eb cb                	jmp    c0021dec <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021e21:	83 ec 0c             	sub    esp,0xc
c0021e24:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021e28:	57                   	push   edi
c0021e29:	e8 66 e9 fd ff       	call   c0000794 <strlen>
c0021e2e:	50                   	push   eax
c0021e2f:	57                   	push   edi
c0021e30:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021e37:	56                   	push   esi
c0021e38:	e8 2a f9 ff ff       	call   c0021767 <__memmem(unsigned char*, int, unsigned char*, int)>
c0021e3d:	83 c4 20             	add    esp,0x20
c0021e40:	85 c0                	test   eax,eax
c0021e42:	75 13                	jne    c0021e57 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021e44:	83 ec 0c             	sub    esp,0xc
c0021e47:	56                   	push   esi
c0021e48:	e8 03 da fe ff       	call   c000f850 <free>
c0021e4d:	83 c4 10             	add    esp,0x10
c0021e50:	31 c0                	xor    eax,eax
c0021e52:	e9 b3 00 00 00       	jmp    c0021f0a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021e57:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021e5b:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021e5f:	c1 e7 08             	shl    edi,0x8
c0021e62:	c1 e2 10             	shl    edx,0x10
c0021e65:	09 d7                	or     edi,edx
c0021e67:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021e6b:	09 d7                	or     edi,edx
c0021e6d:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021e71:	c1 e2 18             	shl    edx,0x18
c0021e74:	09 d7                	or     edi,edx
c0021e76:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021e7a:	89 d1                	mov    ecx,edx
c0021e7c:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021e80:	c1 e1 08             	shl    ecx,0x8
c0021e83:	c1 e2 10             	shl    edx,0x10
c0021e86:	09 ca                	or     edx,ecx
c0021e88:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021e8c:	09 ca                	or     edx,ecx
c0021e8e:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021e92:	c1 e1 18             	shl    ecx,0x18
c0021e95:	09 ca                	or     edx,ecx
c0021e97:	89 e9                	mov    ecx,ebp
c0021e99:	84 c9                	test   cl,cl
c0021e9b:	74 3c                	je     c0021ed9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021e9d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021ea1:	83 ec 0c             	sub    esp,0xc
c0021ea4:	56                   	push   esi
c0021ea5:	e8 a6 d9 fe ff       	call   c000f850 <free>
c0021eaa:	83 c4 0c             	add    esp,0xc
c0021ead:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021eb4:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021eb9:	50                   	push   eax
c0021eba:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021ec1:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021ec8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021ecc:	52                   	push   edx
c0021ecd:	57                   	push   edi
c0021ece:	53                   	push   ebx
c0021ecf:	e8 6e fe ff ff       	call   c0021d42 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021ed4:	83 c4 20             	add    esp,0x20
c0021ed7:	eb 31                	jmp    c0021f0a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021ed9:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021edc:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021ee3:	d0 e8                	shr    al,1
c0021ee5:	89 3b                	mov    DWORD PTR [ebx],edi
c0021ee7:	83 e0 01             	and    eax,0x1
c0021eea:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021ef1:	83 ec 0c             	sub    esp,0xc
c0021ef4:	89 13                	mov    DWORD PTR [ebx],edx
c0021ef6:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021efd:	89 03                	mov    DWORD PTR [ebx],eax
c0021eff:	56                   	push   esi
c0021f00:	e8 4b d9 fe ff       	call   c000f850 <free>
c0021f05:	83 c4 10             	add    esp,0x10
c0021f08:	b0 01                	mov    al,0x1
c0021f0a:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021f10:	5b                   	pop    ebx
c0021f11:	5e                   	pop    esi
c0021f12:	5f                   	pop    edi
c0021f13:	5d                   	pop    ebp
c0021f14:	c3                   	ret    

c0021f15 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021f15:	55                   	push   ebp
c0021f16:	57                   	push   edi
c0021f17:	56                   	push   esi
c0021f18:	53                   	push   ebx
c0021f19:	83 ec 20             	sub    esp,0x20
c0021f1c:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021f20:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021f24:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021f28:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021f30:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021f38:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021f3d:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021f43:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021f49:	57                   	push   edi
c0021f4a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021f4e:	50                   	push   eax
c0021f4f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021f53:	50                   	push   eax
c0021f54:	e8 94 fd ff ff       	call   c0021ced <readRoot(unsigned int*, unsigned int*, char)>
c0021f59:	5a                   	pop    edx
c0021f5a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021f5e:	e8 31 e8 fd ff       	call   c0000794 <strlen>
c0021f63:	83 c4 10             	add    esp,0x10
c0021f66:	83 f8 03             	cmp    eax,0x3
c0021f69:	77 17                	ja     c0021f82 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021f6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021f6f:	89 03                	mov    DWORD PTR [ebx],eax
c0021f71:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f75:	89 06                	mov    DWORD PTR [esi],eax
c0021f77:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021f7e:	b0 01                	mov    al,0x1
c0021f80:	eb 19                	jmp    c0021f9b <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021f82:	50                   	push   eax
c0021f83:	55                   	push   ebp
c0021f84:	57                   	push   edi
c0021f85:	56                   	push   esi
c0021f86:	53                   	push   ebx
c0021f87:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021f8b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021f8f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021f93:	e8 aa fd ff ff       	call   c0021d42 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021f98:	83 c4 20             	add    esp,0x20
c0021f9b:	83 c4 1c             	add    esp,0x1c
c0021f9e:	5b                   	pop    ebx
c0021f9f:	5e                   	pop    esi
c0021fa0:	5f                   	pop    edi
c0021fa1:	5d                   	pop    ebp
c0021fa2:	c3                   	ret    
c0021fa3:	90                   	nop

c0021fa4 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021fa4:	57                   	push   edi
c0021fa5:	56                   	push   esi
c0021fa6:	53                   	push   ebx
c0021fa7:	83 ec 10             	sub    esp,0x10
c0021faa:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021fae:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021fb2:	85 ff                	test   edi,edi
c0021fb4:	0f 84 9d 00 00 00    	je     c0022057 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021fba:	85 f6                	test   esi,esi
c0021fbc:	0f 84 95 00 00 00    	je     c0022057 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021fc2:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021fc7:	74 17                	je     c0021fe0 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0021fc9:	83 ec 0c             	sub    esp,0xc
c0021fcc:	68 af ca 02 c0       	push   0xc002caaf
c0021fd1:	e8 5b 0f ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0021fd6:	83 c4 10             	add    esp,0x10
c0021fd9:	b8 03 00 00 00       	mov    eax,0x3
c0021fde:	eb 7c                	jmp    c002205c <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021fe0:	83 ec 0c             	sub    esp,0xc
c0021fe3:	6a 1c                	push   0x1c
c0021fe5:	e8 56 d8 fe ff       	call   c000f840 <malloc>
c0021fea:	89 07                	mov    DWORD PTR [edi],eax
c0021fec:	89 c3                	mov    ebx,eax
c0021fee:	58                   	pop    eax
c0021fef:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021ff3:	50                   	push   eax
c0021ff4:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021ff7:	50                   	push   eax
c0021ff8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021ffc:	50                   	push   eax
c0021ffd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022001:	50                   	push   eax
c0022002:	56                   	push   esi
c0022003:	e8 0d ff ff ff       	call   c0021f15 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022008:	83 c4 20             	add    esp,0x20
c002200b:	84 c0                	test   al,al
c002200d:	74 07                	je     c0022016 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c002200f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022014:	74 0b                	je     c0022021 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0022016:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c002201a:	b8 01 00 00 00       	mov    eax,0x1
c002201f:	eb 3b                	jmp    c002205c <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022021:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022025:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022029:	89 03                	mov    DWORD PTR [ebx],eax
c002202b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022032:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022036:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002203d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022044:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022047:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002204e:	8a 06                	mov    al,BYTE PTR [esi]
c0022050:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022053:	31 c0                	xor    eax,eax
c0022055:	eb 05                	jmp    c002205c <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022057:	b8 04 00 00 00       	mov    eax,0x4
c002205c:	83 c4 10             	add    esp,0x10
c002205f:	5b                   	pop    ebx
c0022060:	5e                   	pop    esi
c0022061:	5f                   	pop    edi
c0022062:	c3                   	ret    
c0022063:	90                   	nop

c0022064 <ISO9660::exists(char const*)>:
c0022064:	83 ec 28             	sub    esp,0x28
c0022067:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002206b:	8d 54 24 18          	lea    edx,[esp+0x18]
c002206f:	52                   	push   edx
c0022070:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0022073:	52                   	push   edx
c0022074:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022078:	52                   	push   edx
c0022079:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002207d:	52                   	push   edx
c002207e:	50                   	push   eax
c002207f:	e8 91 fe ff ff       	call   c0021f15 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022084:	83 c4 3c             	add    esp,0x3c
c0022087:	c3                   	ret    

c0022088 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0022088:	56                   	push   esi
c0022089:	53                   	push   ebx
c002208a:	83 ec 14             	sub    esp,0x14
c002208d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022091:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022095:	85 db                	test   ebx,ebx
c0022097:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002209b:	0f 94 c2             	sete   dl
c002209e:	85 f6                	test   esi,esi
c00220a0:	0f 94 c0             	sete   al
c00220a3:	08 c2                	or     dl,al
c00220a5:	75 68                	jne    c002210f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00220a7:	85 c9                	test   ecx,ecx
c00220a9:	74 64                	je     c002210f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00220ab:	83 ec 0c             	sub    esp,0xc
c00220ae:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00220b1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00220b5:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00220bb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00220c2:	50                   	push   eax
c00220c3:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c00220c6:	50                   	push   eax
c00220c7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220cb:	50                   	push   eax
c00220cc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220d0:	50                   	push   eax
c00220d1:	51                   	push   ecx
c00220d2:	e8 3e fe ff ff       	call   c0021f15 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00220d7:	83 c4 20             	add    esp,0x20
c00220da:	ba 01 00 00 00       	mov    edx,0x1
c00220df:	84 c0                	test   al,al
c00220e1:	74 31                	je     c0022114 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00220e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00220e7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00220ee:	89 03                	mov    DWORD PTR [ebx],eax
c00220f0:	ba 00 00 00 00       	mov    edx,0x0
c00220f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00220f9:	85 c0                	test   eax,eax
c00220fb:	0f 95 06             	setne  BYTE PTR [esi]
c00220fe:	74 14                	je     c0022114 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022100:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022106:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002210d:	eb 05                	jmp    c0022114 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002210f:	ba 04 00 00 00       	mov    edx,0x4
c0022114:	83 c4 14             	add    esp,0x14
c0022117:	89 d0                	mov    eax,edx
c0022119:	5b                   	pop    ebx
c002211a:	5e                   	pop    esi
c002211b:	c3                   	ret    

c002211c <ISO9660::openDir(char const*, void**)>:
c002211c:	57                   	push   edi
c002211d:	56                   	push   esi
c002211e:	53                   	push   ebx
c002211f:	83 ec 10             	sub    esp,0x10
c0022122:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022126:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002212a:	85 ff                	test   edi,edi
c002212c:	0f 84 95 00 00 00    	je     c00221c7 <ISO9660::openDir(char const*, void**)+0xab>
c0022132:	85 f6                	test   esi,esi
c0022134:	0f 84 8d 00 00 00    	je     c00221c7 <ISO9660::openDir(char const*, void**)+0xab>
c002213a:	83 ec 0c             	sub    esp,0xc
c002213d:	6a 1c                	push   0x1c
c002213f:	e8 fc d6 fe ff       	call   c000f840 <malloc>
c0022144:	89 07                	mov    DWORD PTR [edi],eax
c0022146:	89 c3                	mov    ebx,eax
c0022148:	59                   	pop    ecx
c0022149:	8d 44 24 18          	lea    eax,[esp+0x18]
c002214d:	50                   	push   eax
c002214e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022151:	50                   	push   eax
c0022152:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022156:	50                   	push   eax
c0022157:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002215b:	50                   	push   eax
c002215c:	56                   	push   esi
c002215d:	e8 b3 fd ff ff       	call   c0021f15 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022162:	83 c4 20             	add    esp,0x20
c0022165:	84 c0                	test   al,al
c0022167:	74 07                	je     c0022170 <ISO9660::openDir(char const*, void**)+0x54>
c0022169:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002216e:	75 21                	jne    c0022191 <ISO9660::openDir(char const*, void**)+0x75>
c0022170:	0f b6 c0             	movzx  eax,al
c0022173:	52                   	push   edx
c0022174:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022178:	50                   	push   eax
c0022179:	68 d5 ca 02 c0       	push   0xc002cad5
c002217e:	e8 ae 0d ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0022183:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022187:	83 c4 10             	add    esp,0x10
c002218a:	b8 01 00 00 00       	mov    eax,0x1
c002218f:	eb 3b                	jmp    c00221cc <ISO9660::openDir(char const*, void**)+0xb0>
c0022191:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022195:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022199:	89 03                	mov    DWORD PTR [ebx],eax
c002219b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00221a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00221a6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00221ad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00221b4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00221b7:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00221be:	8a 06                	mov    al,BYTE PTR [esi]
c00221c0:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00221c3:	31 c0                	xor    eax,eax
c00221c5:	eb 05                	jmp    c00221cc <ISO9660::openDir(char const*, void**)+0xb0>
c00221c7:	b8 04 00 00 00       	mov    eax,0x4
c00221cc:	83 c4 10             	add    esp,0x10
c00221cf:	5b                   	pop    ebx
c00221d0:	5e                   	pop    esi
c00221d1:	5f                   	pop    edi
c00221d2:	c3                   	ret    
c00221d3:	90                   	nop

c00221d4 <ISO9660::ISO9660()>:
c00221d4:	83 ec 0c             	sub    esp,0xc
c00221d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221db:	83 ec 0c             	sub    esp,0xc
c00221de:	50                   	push   eax
c00221df:	e8 52 10 ff ff       	call   c0013236 <Filesystem::Filesystem()>
c00221e4:	83 c4 10             	add    esp,0x10
c00221e7:	ba f8 ca 02 c0       	mov    edx,0xc002caf8
c00221ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221f0:	89 10                	mov    DWORD PTR [eax],edx
c00221f2:	90                   	nop
c00221f3:	83 c4 0c             	add    esp,0xc
c00221f6:	c3                   	ret    
c00221f7:	90                   	nop

c00221f8 <SoundChannel::~SoundChannel()>:
c00221f8:	83 ec 0c             	sub    esp,0xc
c00221fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221ff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0022202:	83 ec 0c             	sub    esp,0xc
c0022205:	50                   	push   eax
c0022206:	e8 45 d6 fe ff       	call   c000f850 <free>
c002220b:	83 c4 10             	add    esp,0x10
c002220e:	90                   	nop
c002220f:	83 c4 0c             	add    esp,0xc
c0022212:	c3                   	ret    
c0022213:	90                   	nop

c0022214 <SoundChannel::setSpeed(float)>:
c0022214:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022218:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002221c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002221f:	c3                   	ret    

c0022220 <SoundChannel::getSpeed()>:
c0022220:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022224:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0022227:	c3                   	ret    

c0022228 <SoundChannel::setVolume(int)>:
c0022228:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002222c:	83 f8 64             	cmp    eax,0x64
c002222f:	7e 05                	jle    c0022236 <SoundChannel::setVolume(int)+0xe>
c0022231:	b8 64 00 00 00       	mov    eax,0x64
c0022236:	85 c0                	test   eax,eax
c0022238:	79 02                	jns    c002223c <SoundChannel::setVolume(int)+0x14>
c002223a:	31 c0                	xor    eax,eax
c002223c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022240:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0022243:	c3                   	ret    

c0022244 <SoundChannel::getVolume()>:
c0022244:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022248:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c002224b:	c3                   	ret    

c002224c <SoundChannel::pause()>:
c002224c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022250:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0022254:	c3                   	ret    
c0022255:	90                   	nop

c0022256 <SoundChannel::SoundChannel(int, int, int, int)>:
c0022256:	83 ec 1c             	sub    esp,0x1c
c0022259:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002225d:	e8 ea ff ff ff       	call   c002224c <SoundChannel::pause()>
c0022262:	83 c4 04             	add    esp,0x4
c0022265:	6a 50                	push   0x50
c0022267:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002226b:	e8 b8 ff ff ff       	call   c0022228 <SoundChannel::setVolume(int)>
c0022270:	83 c4 08             	add    esp,0x8
c0022273:	a1 70 cb 02 c0       	mov    eax,ds:0xc002cb70
c0022278:	50                   	push   eax
c0022279:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002227d:	e8 92 ff ff ff       	call   c0022214 <SoundChannel::setSpeed(float)>
c0022282:	83 c4 08             	add    esp,0x8
c0022285:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022289:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002228d:	89 10                	mov    DWORD PTR [eax],edx
c002228f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022293:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022297:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002229a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002229e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00222a2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00222a5:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c00222aa:	75 23                	jne    c00222cf <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c00222ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222b0:	8b 10                	mov    edx,DWORD PTR [eax]
c00222b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00222b9:	0f af c2             	imul   eax,edx
c00222bc:	85 c0                	test   eax,eax
c00222be:	79 03                	jns    c00222c3 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c00222c0:	83 c0 03             	add    eax,0x3
c00222c3:	c1 f8 02             	sar    eax,0x2
c00222c6:	05 a0 0f 00 00       	add    eax,0xfa0
c00222cb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00222cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222d3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00222d7:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00222da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222de:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00222e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222e9:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00222f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222f4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00222f7:	c1 e0 02             	shl    eax,0x2
c00222fa:	83 ec 0c             	sub    esp,0xc
c00222fd:	50                   	push   eax
c00222fe:	e8 3d d5 fe ff       	call   c000f840 <malloc>
c0022303:	83 c4 10             	add    esp,0x10
c0022306:	89 c2                	mov    edx,eax
c0022308:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002230c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c002230f:	83 ec 04             	sub    esp,0x4
c0022312:	8d 44 24 08          	lea    eax,[esp+0x8]
c0022316:	50                   	push   eax
c0022317:	6a 01                	push   0x1
c0022319:	6a 04                	push   0x4
c002231b:	e8 7f 68 fe ff       	call   c0008b9f <src_new>
c0022320:	83 c4 10             	add    esp,0x10
c0022323:	89 c2                	mov    edx,eax
c0022325:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022329:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c002232c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022330:	85 c0                	test   eax,eax
c0022332:	74 10                	je     c0022344 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0022334:	83 ec 0c             	sub    esp,0xc
c0022337:	68 54 cb 02 c0       	push   0xc002cb54
c002233c:	e8 a2 82 ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c0022341:	83 c4 10             	add    esp,0x10
c0022344:	a0 20 29 03 c0       	mov    al,ds:0xc0032920
c0022349:	83 f0 01             	xor    eax,0x1
c002234c:	84 c0                	test   al,al
c002234e:	74 57                	je     c00223a7 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0022350:	a1 74 cb 02 c0       	mov    eax,ds:0xc002cb74
c0022355:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022359:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022361:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0022369:	7f 35                	jg     c00223a0 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c002236b:	83 ec 0c             	sub    esp,0xc
c002236e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022372:	e8 a0 4f 00 00       	call   c0027317 <__floatsisf>
c0022377:	83 c4 10             	add    esp,0x10
c002237a:	8b 15 74 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb74
c0022380:	83 ec 08             	sub    esp,0x8
c0022383:	52                   	push   edx
c0022384:	50                   	push   eax
c0022385:	e8 9f 4b 00 00       	call   c0026f29 <__mulsf3>
c002238a:	83 c4 10             	add    esp,0x10
c002238d:	89 c2                	mov    edx,eax
c002238f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022393:	89 14 85 20 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdae0],edx
c002239a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002239e:	eb c1                	jmp    c0022361 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c00223a0:	c6 05 20 29 03 c0 01 	mov    BYTE PTR ds:0xc0032920,0x1
c00223a7:	90                   	nop
c00223a8:	83 c4 1c             	add    esp,0x1c
c00223ab:	c3                   	ret    

c00223ac <SoundChannel::play()>:
c00223ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223b0:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c00223b4:	c3                   	ret    
c00223b5:	90                   	nop

c00223b6 <SoundChannel::paused()>:
c00223b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223ba:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c00223bd:	c3                   	ret    

c00223be <SoundChannel::getSampleRate()>:
c00223be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00223c4:	c3                   	ret    
c00223c5:	90                   	nop

c00223c6 <SoundChannel::getBits()>:
c00223c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00223cd:	c3                   	ret    

c00223ce <SoundChannel::getBufferUsed()>:
c00223ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223d2:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00223d5:	c3                   	ret    

c00223d6 <SoundChannel::getBufferSize()>:
c00223d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223da:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00223dd:	c3                   	ret    

c00223de <SoundChannel::unbuffer(float*, int, int)>:
c00223de:	56                   	push   esi
c00223df:	53                   	push   ebx
c00223e0:	83 ec 40             	sub    esp,0x40
c00223e3:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00223e7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00223ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00223ee:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00223f1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00223f5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00223f9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00223fd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0022401:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022405:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022409:	e8 09 4f 00 00       	call   c0027317 <__floatsisf>
c002240e:	5a                   	pop    edx
c002240f:	89 c6                	mov    esi,eax
c0022411:	ff 33                	push   DWORD PTR [ebx]
c0022413:	e8 ff 4e 00 00       	call   c0027317 <__floatsisf>
c0022418:	59                   	pop    ecx
c0022419:	5a                   	pop    edx
c002241a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c002241d:	50                   	push   eax
c002241e:	e8 06 4b 00 00       	call   c0026f29 <__mulsf3>
c0022423:	59                   	pop    ecx
c0022424:	5a                   	pop    edx
c0022425:	50                   	push   eax
c0022426:	56                   	push   esi
c0022427:	e8 c0 4c 00 00       	call   c00270ec <__divsf3>
c002242c:	89 04 24             	mov    DWORD PTR [esp],eax
c002242f:	e8 b3 61 00 00       	call   c00285e7 <__extendsfdf2>
c0022434:	59                   	pop    ecx
c0022435:	5e                   	pop    esi
c0022436:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002243a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c002243e:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0022446:	8d 44 24 14          	lea    eax,[esp+0x14]
c002244a:	50                   	push   eax
c002244b:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c002244e:	e8 41 63 fe ff       	call   c0008794 <src_process>
c0022453:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022457:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c002245a:	83 c4 0c             	add    esp,0xc
c002245d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0022460:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0022463:	29 d0                	sub    eax,edx
c0022465:	c1 e0 02             	shl    eax,0x2
c0022468:	50                   	push   eax
c0022469:	8d 04 91             	lea    eax,[ecx+edx*4]
c002246c:	50                   	push   eax
c002246d:	51                   	push   ecx
c002246e:	e8 09 e2 fd ff       	call   c000067c <memmove>
c0022473:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022477:	83 c4 44             	add    esp,0x44
c002247a:	5b                   	pop    ebx
c002247b:	5e                   	pop    esi
c002247c:	c3                   	ret    
c002247d:	90                   	nop

c002247e <SoundChannel::buffer8(unsigned char*, int)>:
c002247e:	55                   	push   ebp
c002247f:	57                   	push   edi
c0022480:	56                   	push   esi
c0022481:	53                   	push   ebx
c0022482:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022486:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c002248a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c002248d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022491:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022494:	74 7a                	je     c0022510 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022496:	85 ff                	test   edi,edi
c0022498:	7e 76                	jle    c0022510 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c002249a:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c002249e:	8d 70 01             	lea    esi,[eax+0x1]
c00224a1:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00224a4:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00224a7:	8b 1c 9d 20 25 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdae0]
c00224ae:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00224b1:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00224b4:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00224b7:	74 5e                	je     c0022517 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c00224b9:	83 ff 01             	cmp    edi,0x1
c00224bc:	74 4b                	je     c0022509 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c00224be:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00224c2:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00224c5:	8d 70 01             	lea    esi,[eax+0x1]
c00224c8:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00224cb:	8b 1c 9d 20 25 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdae0]
c00224d2:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00224d5:	b8 02 00 00 00       	mov    eax,0x2
c00224da:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00224dd:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00224e0:	75 23                	jne    c0022505 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c00224e2:	eb 27                	jmp    c002250b <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00224e4:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c00224e9:	8d 71 01             	lea    esi,[ecx+0x1]
c00224ec:	40                   	inc    eax
c00224ed:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00224f0:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c00224f3:	8b 1c 9d 20 25 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdae0]
c00224fa:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c00224fd:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022500:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022503:	74 06                	je     c002250b <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022505:	39 c7                	cmp    edi,eax
c0022507:	75 db                	jne    c00224e4 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022509:	89 f8                	mov    eax,edi
c002250b:	5b                   	pop    ebx
c002250c:	5e                   	pop    esi
c002250d:	5f                   	pop    edi
c002250e:	5d                   	pop    ebp
c002250f:	c3                   	ret    
c0022510:	5b                   	pop    ebx
c0022511:	31 c0                	xor    eax,eax
c0022513:	5e                   	pop    esi
c0022514:	5f                   	pop    edi
c0022515:	5d                   	pop    ebp
c0022516:	c3                   	ret    
c0022517:	b8 01 00 00 00       	mov    eax,0x1
c002251c:	eb ed                	jmp    c002250b <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c002251e <SoundDevice::SoundDevice(char const*)>:
c002251e:	83 ec 1c             	sub    esp,0x1c
c0022521:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022525:	83 ec 08             	sub    esp,0x8
c0022528:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002252c:	50                   	push   eax
c002252d:	e8 16 20 ff ff       	call   c0014548 <Device::Device(char const*)>
c0022532:	83 c4 10             	add    esp,0x10
c0022535:	ba 80 cb 02 c0       	mov    edx,0xc002cb80
c002253a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002253e:	89 10                	mov    DWORD PTR [eax],edx
c0022540:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022544:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c002254e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022552:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c002255c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022564:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022569:	7f 19                	jg     c0022584 <SoundDevice::SoundDevice(char const*)+0x66>
c002256b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002256f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022573:	83 c2 54             	add    edx,0x54
c0022576:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c002257e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022582:	eb e0                	jmp    c0022564 <SoundDevice::SoundDevice(char const*)+0x46>
c0022584:	90                   	nop
c0022585:	83 c4 1c             	add    esp,0x1c
c0022588:	c3                   	ret    
c0022589:	90                   	nop

c002258a <SoundDevice::~SoundDevice()>:
c002258a:	53                   	push   ebx
c002258b:	83 ec 18             	sub    esp,0x18
c002258e:	ba 80 cb 02 c0       	mov    edx,0xc002cb80
c0022593:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022597:	89 10                	mov    DWORD PTR [eax],edx
c0022599:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00225a1:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00225a6:	7f 46                	jg     c00225ee <SoundDevice::~SoundDevice()+0x64>
c00225a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00225b0:	83 c2 54             	add    edx,0x54
c00225b3:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c00225b7:	85 c0                	test   eax,eax
c00225b9:	74 2d                	je     c00225e8 <SoundDevice::~SoundDevice()+0x5e>
c00225bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00225c3:	83 c2 54             	add    edx,0x54
c00225c6:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c00225ca:	85 db                	test   ebx,ebx
c00225cc:	74 1a                	je     c00225e8 <SoundDevice::~SoundDevice()+0x5e>
c00225ce:	83 ec 0c             	sub    esp,0xc
c00225d1:	53                   	push   ebx
c00225d2:	e8 21 fc ff ff       	call   c00221f8 <SoundChannel::~SoundChannel()>
c00225d7:	83 c4 10             	add    esp,0x10
c00225da:	83 ec 08             	sub    esp,0x8
c00225dd:	6a 2c                	push   0x2c
c00225df:	53                   	push   ebx
c00225e0:	e8 6c 08 ff ff       	call   c0012e51 <operator delete(void*, unsigned long)>
c00225e5:	83 c4 10             	add    esp,0x10
c00225e8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00225ec:	eb b3                	jmp    c00225a1 <SoundDevice::~SoundDevice()+0x17>
c00225ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225f2:	83 ec 0c             	sub    esp,0xc
c00225f5:	50                   	push   eax
c00225f6:	e8 2f 1c ff ff       	call   c001422a <Device::~Device()>
c00225fb:	83 c4 10             	add    esp,0x10
c00225fe:	90                   	nop
c00225ff:	83 c4 18             	add    esp,0x18
c0022602:	5b                   	pop    ebx
c0022603:	c3                   	ret    

c0022604 <SoundDevice::~SoundDevice()>:
c0022604:	83 ec 0c             	sub    esp,0xc
c0022607:	83 ec 0c             	sub    esp,0xc
c002260a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002260e:	e8 77 ff ff ff       	call   c002258a <SoundDevice::~SoundDevice()>
c0022613:	83 c4 10             	add    esp,0x10
c0022616:	83 ec 08             	sub    esp,0x8
c0022619:	68 e4 01 00 00       	push   0x1e4
c002261e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022622:	e8 2a 08 ff ff       	call   c0012e51 <operator delete(void*, unsigned long)>
c0022627:	83 c4 10             	add    esp,0x10
c002262a:	83 c4 0c             	add    esp,0xc
c002262d:	c3                   	ret    

c002262e <SoundDevice::getFreeChannelNum()>:
c002262e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022632:	31 c0                	xor    eax,eax
c0022634:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c002263c:	74 09                	je     c0022647 <SoundDevice::getFreeChannelNum()+0x19>
c002263e:	40                   	inc    eax
c002263f:	83 f8 20             	cmp    eax,0x20
c0022642:	75 f0                	jne    c0022634 <SoundDevice::getFreeChannelNum()+0x6>
c0022644:	83 c8 ff             	or     eax,0xffffffff
c0022647:	c3                   	ret    

c0022648 <SoundDevice::addChannel(SoundChannel*)>:
c0022648:	56                   	push   esi
c0022649:	53                   	push   ebx
c002264a:	51                   	push   ecx
c002264b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002264f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022653:	53                   	push   ebx
c0022654:	e8 d5 ff ff ff       	call   c002262e <SoundDevice::getFreeChannelNum()>
c0022659:	5a                   	pop    edx
c002265a:	83 f8 ff             	cmp    eax,0xffffffff
c002265d:	74 51                	je     c00226b0 <SoundDevice::addChannel(SoundChannel*)+0x68>
c002265f:	85 f6                	test   esi,esi
c0022661:	74 4d                	je     c00226b0 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022663:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c002266a:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022671:	75 30                	jne    c00226a3 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0022673:	83 ec 0c             	sub    esp,0xc
c0022676:	56                   	push   esi
c0022677:	e8 42 fd ff ff       	call   c00223be <SoundChannel::getSampleRate()>
c002267c:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0022682:	89 34 24             	mov    DWORD PTR [esp],esi
c0022685:	e8 3c fd ff ff       	call   c00223c6 <SoundChannel::getBits()>
c002268a:	83 c4 0c             	add    esp,0xc
c002268d:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022693:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022695:	50                   	push   eax
c0022696:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c002269c:	53                   	push   ebx
c002269d:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00226a0:	83 c4 10             	add    esp,0x10
c00226a3:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c00226a9:	b8 01 00 00 00       	mov    eax,0x1
c00226ae:	eb 03                	jmp    c00226b3 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c00226b0:	83 c8 ff             	or     eax,0xffffffff
c00226b3:	5a                   	pop    edx
c00226b4:	5b                   	pop    ebx
c00226b5:	5e                   	pop    esi
c00226b6:	c3                   	ret    
c00226b7:	90                   	nop

c00226b8 <SoundDevice::removeChannel(int)>:
c00226b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00226bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00226c0:	83 fa 1f             	cmp    edx,0x1f
c00226c3:	77 23                	ja     c00226e8 <SoundDevice::removeChannel(int)+0x30>
c00226c5:	8d 14 90             	lea    edx,[eax+edx*4]
c00226c8:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c00226cf:	74 17                	je     c00226e8 <SoundDevice::removeChannel(int)+0x30>
c00226d1:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c00226db:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c00226e1:	75 05                	jne    c00226e8 <SoundDevice::removeChannel(int)+0x30>
c00226e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00226e5:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c00226e8:	c3                   	ret    
c00226e9:	90                   	nop

c00226ea <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c00226ea:	57                   	push   edi
c00226eb:	56                   	push   esi
c00226ec:	53                   	push   ebx
c00226ed:	31 db                	xor    ebx,ebx
c00226ef:	83 ec 10             	sub    esp,0x10
c00226f2:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00226f6:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00226fa:	0f 8d cb 00 00 00    	jge    c00227cb <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0022700:	83 ec 0c             	sub    esp,0xc
c0022703:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022707:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c002270a:	e8 d8 5e 00 00       	call   c00285e7 <__extendsfdf2>
c002270f:	83 c4 10             	add    esp,0x10
c0022712:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022716:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002271a:	68 00 00 f0 3f       	push   0x3ff00000
c002271f:	6a 00                	push   0x0
c0022721:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022725:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022729:	e8 45 4e 00 00       	call   c0027573 <__adddf3>
c002272e:	83 c4 10             	add    esp,0x10
c0022731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022735:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022739:	68 00 00 e0 3f       	push   0x3fe00000
c002273e:	6a 00                	push   0x0
c0022740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022748:	e8 a3 54 00 00       	call   c0027bf0 <__muldf3>
c002274d:	83 c4 10             	add    esp,0x10
c0022750:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022754:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022758:	68 00 00 60 40       	push   0x40600000
c002275d:	6a 00                	push   0x0
c002275f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022763:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022767:	e8 84 54 00 00       	call   c0027bf0 <__muldf3>
c002276c:	59                   	pop    ecx
c002276d:	5f                   	pop    edi
c002276e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022772:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022776:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002277a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002277e:	e8 40 5d 00 00       	call   c00284c3 <__truncdfsf2>
c0022783:	5a                   	pop    edx
c0022784:	89 c7                	mov    edi,eax
c0022786:	59                   	pop    ecx
c0022787:	68 00 00 fe 42       	push   0x42fe0000
c002278c:	50                   	push   eax
c002278d:	e8 db 4d 00 00       	call   c002756d <__gesf2>
c0022792:	83 c4 10             	add    esp,0x10
c0022795:	85 c0                	test   eax,eax
c0022797:	78 06                	js     c002279f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022799:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c002279d:	eb 26                	jmp    c00227c5 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002279f:	50                   	push   eax
c00227a0:	50                   	push   eax
c00227a1:	6a 00                	push   0x0
c00227a3:	57                   	push   edi
c00227a4:	e8 c8 4d 00 00       	call   c0027571 <__lesf2>
c00227a9:	83 c4 10             	add    esp,0x10
c00227ac:	85 c0                	test   eax,eax
c00227ae:	7f 06                	jg     c00227b6 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c00227b0:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c00227b4:	eb 0f                	jmp    c00227c5 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00227b6:	83 ec 0c             	sub    esp,0xc
c00227b9:	57                   	push   edi
c00227ba:	e8 bd 5e 00 00       	call   c002867c <lrintf>
c00227bf:	83 c4 10             	add    esp,0x10
c00227c2:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00227c5:	43                   	inc    ebx
c00227c6:	e9 2b ff ff ff       	jmp    c00226f6 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c00227cb:	83 c4 10             	add    esp,0x10
c00227ce:	5b                   	pop    ebx
c00227cf:	5e                   	pop    esi
c00227d0:	5f                   	pop    edi
c00227d1:	c3                   	ret    

c00227d2 <SoundDevice::getAudio(int, float*, float*)>:
c00227d2:	55                   	push   ebp
c00227d3:	57                   	push   edi
c00227d4:	56                   	push   esi
c00227d5:	53                   	push   ebx
c00227d6:	31 db                	xor    ebx,ebx
c00227d8:	83 ec 20             	sub    esp,0x20
c00227db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00227df:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00227e3:	c1 e0 02             	shl    eax,0x2
c00227e6:	50                   	push   eax
c00227e7:	6a 00                	push   0x0
c00227e9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00227ed:	e8 86 df fd ff       	call   c0000778 <memset>
c00227f2:	83 c4 10             	add    esp,0x10
c00227f5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00227f9:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c0022800:	85 c0                	test   eax,eax
c0022802:	0f 84 d7 00 00 00    	je     c00228df <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022808:	83 ec 0c             	sub    esp,0xc
c002280b:	50                   	push   eax
c002280c:	e8 a5 fb ff ff       	call   c00223b6 <SoundChannel::paused()>
c0022811:	83 c4 10             	add    esp,0x10
c0022814:	84 c0                	test   al,al
c0022816:	0f 85 c3 00 00 00    	jne    c00228df <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002281c:	83 ec 0c             	sub    esp,0xc
c002281f:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022826:	e8 19 fa ff ff       	call   c0022244 <SoundChannel::getVolume()>
c002282b:	83 c4 10             	add    esp,0x10
c002282e:	85 c0                	test   eax,eax
c0022830:	0f 84 a9 00 00 00    	je     c00228df <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022836:	83 ec 0c             	sub    esp,0xc
c0022839:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022840:	e8 ff f9 ff ff       	call   c0022244 <SoundChannel::getVolume()>
c0022845:	83 ec 0c             	sub    esp,0xc
c0022848:	50                   	push   eax
c0022849:	e8 c9 4a 00 00       	call   c0027317 <__floatsisf>
c002284e:	59                   	pop    ecx
c002284f:	5d                   	pop    ebp
c0022850:	31 ed                	xor    ebp,ebp
c0022852:	68 00 00 c8 42       	push   0x42c80000
c0022857:	50                   	push   eax
c0022858:	e8 8f 48 00 00       	call   c00270ec <__divsf3>
c002285d:	83 c4 10             	add    esp,0x10
c0022860:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022864:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0022868:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c002286e:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0022872:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022879:	e8 60 fb ff ff       	call   c00223de <SoundChannel::unbuffer(float*, int, int)>
c002287e:	83 c4 20             	add    esp,0x20
c0022881:	89 c1                	mov    ecx,eax
c0022883:	39 cd                	cmp    ebp,ecx
c0022885:	7d 52                	jge    c00228d9 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0022887:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002288b:	50                   	push   eax
c002288c:	50                   	push   eax
c002288d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0022891:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022894:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022898:	e8 8c 46 00 00       	call   c0026f29 <__mulsf3>
c002289d:	5a                   	pop    edx
c002289e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00228a2:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c00228a8:	e8 6a 4a 00 00       	call   c0027317 <__floatsisf>
c00228ad:	59                   	pop    ecx
c00228ae:	5a                   	pop    edx
c00228af:	50                   	push   eax
c00228b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00228b4:	e8 33 48 00 00       	call   c00270ec <__divsf3>
c00228b9:	59                   	pop    ecx
c00228ba:	5a                   	pop    edx
c00228bb:	50                   	push   eax
c00228bc:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00228c0:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00228c3:	e8 3e 43 00 00       	call   c0026c06 <__addsf3>
c00228c8:	83 c4 10             	add    esp,0x10
c00228cb:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00228cf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00228d3:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c00228d6:	45                   	inc    ebp
c00228d7:	eb aa                	jmp    c0022883 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c00228d9:	39 cf                	cmp    edi,ecx
c00228db:	7e 02                	jle    c00228df <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00228dd:	89 cf                	mov    edi,ecx
c00228df:	43                   	inc    ebx
c00228e0:	83 fb 20             	cmp    ebx,0x20
c00228e3:	0f 85 10 ff ff ff    	jne    c00227f9 <SoundDevice::getAudio(int, float*, float*)+0x27>
c00228e9:	83 c4 1c             	add    esp,0x1c
c00228ec:	89 f8                	mov    eax,edi
c00228ee:	5b                   	pop    ebx
c00228ef:	5e                   	pop    esi
c00228f0:	5f                   	pop    edi
c00228f1:	5d                   	pop    ebp
c00228f2:	c3                   	ret    
c00228f3:	90                   	nop

c00228f4 <PCI::open(int, int, void*)>:
c00228f4:	83 ec 18             	sub    esp,0x18
c00228f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00228fb:	8b 10                	mov    edx,DWORD PTR [eax]
c00228fd:	50                   	push   eax
c00228fe:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0022901:	31 c0                	xor    eax,eax
c0022903:	83 c4 1c             	add    esp,0x1c
c0022906:	c3                   	ret    
c0022907:	90                   	nop

c0022908 <PCI::close(int, int, void*)>:
c0022908:	31 c0                	xor    eax,eax
c002290a:	c3                   	ret    
c002290b:	90                   	nop

c002290c <PCI::PCI()>:
c002290c:	83 ec 0c             	sub    esp,0xc
c002290f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022913:	83 ec 08             	sub    esp,0x8
c0022916:	68 b0 cb 02 c0       	push   0xc002cbb0
c002291b:	50                   	push   eax
c002291c:	e8 ab 12 ff ff       	call   c0013bcc <Bus::Bus(char const*)>
c0022921:	83 c4 10             	add    esp,0x10
c0022924:	ba 1c cc 02 c0       	mov    edx,0xc002cc1c
c0022929:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002292d:	89 10                	mov    DWORD PTR [eax],edx
c002292f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022933:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022939:	0f b6 d0             	movzx  edx,al
c002293c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022940:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0022947:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002294b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022951:	0f b6 d0             	movzx  edx,al
c0022954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022958:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c002295d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022961:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022967:	8d 50 01             	lea    edx,[eax+0x1]
c002296a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002296e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022974:	0f b6 d0             	movzx  edx,al
c0022977:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002297b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002297f:	83 c9 c0             	or     ecx,0xffffffc0
c0022982:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022986:	90                   	nop
c0022987:	83 c4 0c             	add    esp,0xc
c002298a:	c3                   	ret    
c002298b:	90                   	nop

c002298c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002298c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0022990:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022995:	89 ca                	mov    edx,ecx
c0022997:	c1 e0 10             	shl    eax,0x10
c002299a:	81 e2 fc 00 00 00    	and    edx,0xfc
c00229a0:	09 d0                	or     eax,edx
c00229a2:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00229a7:	c1 e2 08             	shl    edx,0x8
c00229aa:	09 d0                	or     eax,edx
c00229ac:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c00229b1:	c1 e2 0b             	shl    edx,0xb
c00229b4:	09 d0                	or     eax,edx
c00229b6:	ba f8 0c 00 00       	mov    edx,0xcf8
c00229bb:	0d 00 00 00 80       	or     eax,0x80000000
c00229c0:	ef                   	out    dx,eax
c00229c1:	ba fc 0c 00 00       	mov    edx,0xcfc
c00229c6:	ed                   	in     eax,dx
c00229c7:	83 e1 02             	and    ecx,0x2
c00229ca:	0f b6 c9             	movzx  ecx,cl
c00229cd:	c1 e1 03             	shl    ecx,0x3
c00229d0:	d3 e8                	shr    eax,cl
c00229d2:	c3                   	ret    
c00229d3:	90                   	nop

c00229d4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00229d4:	6a 00                	push   0x0
c00229d6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229db:	50                   	push   eax
c00229dc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229e1:	50                   	push   eax
c00229e2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229e7:	50                   	push   eax
c00229e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229ec:	e8 9b ff ff ff       	call   c002298c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229f1:	83 c4 14             	add    esp,0x14
c00229f4:	c3                   	ret    
c00229f5:	90                   	nop

c00229f6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00229f6:	6a 0e                	push   0xe
c00229f8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229fd:	50                   	push   eax
c00229fe:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a03:	50                   	push   eax
c0022a04:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a09:	50                   	push   eax
c0022a0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a0e:	e8 79 ff ff ff       	call   c002298c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a13:	83 c4 14             	add    esp,0x14
c0022a16:	0f b6 c0             	movzx  eax,al
c0022a19:	c3                   	ret    

c0022a1a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022a1a:	55                   	push   ebp
c0022a1b:	57                   	push   edi
c0022a1c:	56                   	push   esi
c0022a1d:	53                   	push   ebx
c0022a1e:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0022a23:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0022a28:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0022a2d:	6a 0a                	push   0xa
c0022a2f:	56                   	push   esi
c0022a30:	55                   	push   ebp
c0022a31:	57                   	push   edi
c0022a32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022a36:	e8 51 ff ff ff       	call   c002298c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a3b:	6a 0a                	push   0xa
c0022a3d:	89 c3                	mov    ebx,eax
c0022a3f:	56                   	push   esi
c0022a40:	0f b6 db             	movzx  ebx,bl
c0022a43:	55                   	push   ebp
c0022a44:	57                   	push   edi
c0022a45:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022a49:	e8 3e ff ff ff       	call   c002298c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a4e:	83 c4 28             	add    esp,0x28
c0022a51:	25 00 ff 00 00       	and    eax,0xff00
c0022a56:	09 d8                	or     eax,ebx
c0022a58:	5b                   	pop    ebx
c0022a59:	5e                   	pop    esi
c0022a5a:	5f                   	pop    edi
c0022a5b:	5d                   	pop    ebp
c0022a5c:	c3                   	ret    
c0022a5d:	90                   	nop

c0022a5e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022a5e:	6a 08                	push   0x8
c0022a60:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a65:	50                   	push   eax
c0022a66:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a6b:	50                   	push   eax
c0022a6c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a71:	50                   	push   eax
c0022a72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a76:	e8 11 ff ff ff       	call   c002298c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a7b:	83 c4 14             	add    esp,0x14
c0022a7e:	0f b6 c4             	movzx  eax,ah
c0022a81:	c3                   	ret    

c0022a82 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022a82:	6a 08                	push   0x8
c0022a84:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a89:	50                   	push   eax
c0022a8a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a8f:	50                   	push   eax
c0022a90:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a95:	50                   	push   eax
c0022a96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a9a:	e8 ed fe ff ff       	call   c002298c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a9f:	83 c4 14             	add    esp,0x14
c0022aa2:	c3                   	ret    
c0022aa3:	90                   	nop

c0022aa4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022aa4:	6a 3c                	push   0x3c
c0022aa6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022aab:	50                   	push   eax
c0022aac:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ab1:	50                   	push   eax
c0022ab2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ab7:	50                   	push   eax
c0022ab8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022abc:	e8 cb fe ff ff       	call   c002298c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ac1:	83 c4 14             	add    esp,0x14
c0022ac4:	c3                   	ret    
c0022ac5:	90                   	nop

c0022ac6 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022ac6:	6a 18                	push   0x18
c0022ac8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022acd:	50                   	push   eax
c0022ace:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ad3:	50                   	push   eax
c0022ad4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ad9:	50                   	push   eax
c0022ada:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ade:	e8 a9 fe ff ff       	call   c002298c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ae3:	83 c4 14             	add    esp,0x14
c0022ae6:	0f b6 c4             	movzx  eax,ah
c0022ae9:	c3                   	ret    

c0022aea <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022aea:	55                   	push   ebp
c0022aeb:	57                   	push   edi
c0022aec:	56                   	push   esi
c0022aed:	53                   	push   ebx
c0022aee:	50                   	push   eax
c0022aef:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0022af3:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0022af8:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022afd:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0022b02:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022b09:	8d 43 12             	lea    eax,[ebx+0x12]
c0022b0c:	83 c3 10             	add    ebx,0x10
c0022b0f:	0f b6 c0             	movzx  eax,al
c0022b12:	0f b6 db             	movzx  ebx,bl
c0022b15:	50                   	push   eax
c0022b16:	51                   	push   ecx
c0022b17:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022b1b:	57                   	push   edi
c0022b1c:	55                   	push   ebp
c0022b1d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0022b21:	e8 66 fe ff ff       	call   c002298c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b26:	53                   	push   ebx
c0022b27:	89 c6                	mov    esi,eax
c0022b29:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022b2d:	c1 e6 10             	shl    esi,0x10
c0022b30:	51                   	push   ecx
c0022b31:	57                   	push   edi
c0022b32:	55                   	push   ebp
c0022b33:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022b37:	e8 50 fe ff ff       	call   c002298c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b3c:	83 c4 2c             	add    esp,0x2c
c0022b3f:	0f b7 c0             	movzx  eax,ax
c0022b42:	5b                   	pop    ebx
c0022b43:	09 f0                	or     eax,esi
c0022b45:	5e                   	pop    esi
c0022b46:	5f                   	pop    edi
c0022b47:	5d                   	pop    ebp
c0022b48:	c3                   	ret    
c0022b49:	90                   	nop

c0022b4a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022b4a:	53                   	push   ebx
c0022b4b:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022b50:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0022b55:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022b59:	c1 e1 10             	shl    ecx,0x10
c0022b5c:	25 fc 00 00 00       	and    eax,0xfc
c0022b61:	09 c1                	or     ecx,eax
c0022b63:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b68:	c1 e0 08             	shl    eax,0x8
c0022b6b:	09 c1                	or     ecx,eax
c0022b6d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022b72:	c1 e0 0b             	shl    eax,0xb
c0022b75:	09 c1                	or     ecx,eax
c0022b77:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022b7d:	89 c8                	mov    eax,ecx
c0022b7f:	ef                   	out    dx,eax
c0022b80:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022b85:	ed                   	in     eax,dx
c0022b86:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0022b8b:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0022b90:	74 0a                	je     c0022b9c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0022b92:	0f b7 d8             	movzx  ebx,ax
c0022b95:	89 d0                	mov    eax,edx
c0022b97:	c1 e0 10             	shl    eax,0x10
c0022b9a:	eb 05                	jmp    c0022ba1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0022b9c:	66 31 c0             	xor    ax,ax
c0022b9f:	89 d3                	mov    ebx,edx
c0022ba1:	09 c3                	or     ebx,eax
c0022ba3:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022ba8:	89 c8                	mov    eax,ecx
c0022baa:	ef                   	out    dx,eax
c0022bab:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022bb0:	89 d8                	mov    eax,ebx
c0022bb2:	ef                   	out    dx,eax
c0022bb3:	5b                   	pop    ebx
c0022bb4:	c3                   	ret    
c0022bb5:	90                   	nop

c0022bb6 <PCI::checkBus(unsigned char)>:
c0022bb6:	56                   	push   esi
c0022bb7:	53                   	push   ebx
c0022bb8:	31 db                	xor    ebx,ebx
c0022bba:	51                   	push   ecx
c0022bbb:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022bc0:	52                   	push   edx
c0022bc1:	53                   	push   ebx
c0022bc2:	43                   	inc    ebx
c0022bc3:	56                   	push   esi
c0022bc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022bc8:	e8 2b 03 00 00       	call   c0022ef8 <PCI::checkDevice(unsigned char, unsigned char)>
c0022bcd:	83 c4 10             	add    esp,0x10
c0022bd0:	83 fb 20             	cmp    ebx,0x20
c0022bd3:	75 eb                	jne    c0022bc0 <PCI::checkBus(unsigned char)+0xa>
c0022bd5:	58                   	pop    eax
c0022bd6:	5b                   	pop    ebx
c0022bd7:	5e                   	pop    esi
c0022bd8:	c3                   	ret    
c0022bd9:	90                   	nop

c0022bda <PCI::foundDevice(PCIDeviceInfo)>:
c0022bda:	55                   	push   ebp
c0022bdb:	57                   	push   edi
c0022bdc:	56                   	push   esi
c0022bdd:	53                   	push   ebx
c0022bde:	83 ec 1c             	sub    esp,0x1c
c0022be1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022be5:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022beb:	0f 84 52 01 00 00    	je     c0022d43 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022bf1:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022bf5:	66 81 f9 06 04       	cmp    cx,0x406
c0022bfa:	75 2c                	jne    c0022c28 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022bfc:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022c01:	50                   	push   eax
c0022c02:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022c07:	50                   	push   eax
c0022c08:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022c0d:	50                   	push   eax
c0022c0e:	56                   	push   esi
c0022c0f:	e8 b2 fe ff ff       	call   c0022ac6 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022c14:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022c18:	0f b6 c0             	movzx  eax,al
c0022c1b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022c1f:	83 c4 2c             	add    esp,0x2c
c0022c22:	5b                   	pop    ebx
c0022c23:	5e                   	pop    esi
c0022c24:	5f                   	pop    edi
c0022c25:	5d                   	pop    ebp
c0022c26:	eb 8e                	jmp    c0022bb6 <PCI::checkBus(unsigned char)>
c0022c28:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022c2c:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022c32:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022c36:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022c3a:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022c3e:	88 d3                	mov    bl,dl
c0022c40:	85 c0                	test   eax,eax
c0022c42:	74 33                	je     c0022c77 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022c44:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022c47:	85 d2                	test   edx,edx
c0022c49:	74 28                	je     c0022c73 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c4b:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022c51:	31 ef                	xor    edi,ebp
c0022c53:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022c59:	75 18                	jne    c0022c73 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c5b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022c5f:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022c65:	75 0c                	jne    c0022c73 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c67:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022c6d:	0f 84 d0 00 00 00    	je     c0022d43 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022c73:	8b 00                	mov    eax,DWORD PTR [eax]
c0022c75:	eb c9                	jmp    c0022c40 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022c77:	66 81 f9 01 06       	cmp    cx,0x601
c0022c7c:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022c80:	75 19                	jne    c0022c9b <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022c82:	83 ec 0c             	sub    esp,0xc
c0022c85:	68 64 01 00 00       	push   0x164
c0022c8a:	e8 b1 cb fe ff       	call   c000f840 <malloc>
c0022c8f:	89 c5                	mov    ebp,eax
c0022c91:	89 04 24             	mov    DWORD PTR [esp],eax
c0022c94:	e8 95 0f 00 00       	call   c0023c2e <SATABus::SATABus()>
c0022c99:	eb 1e                	jmp    c0022cb9 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022c9b:	66 81 f9 01 01       	cmp    cx,0x101
c0022ca0:	75 60                	jne    c0022d02 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022ca2:	83 ec 0c             	sub    esp,0xc
c0022ca5:	68 70 02 00 00       	push   0x270
c0022caa:	e8 91 cb fe ff       	call   c000f840 <malloc>
c0022caf:	89 c5                	mov    ebp,eax
c0022cb1:	89 04 24             	mov    DWORD PTR [esp],eax
c0022cb4:	e8 03 03 00 00       	call   c0022fbc <IDE::IDE()>
c0022cb9:	58                   	pop    eax
c0022cba:	5a                   	pop    edx
c0022cbb:	55                   	push   ebp
c0022cbc:	56                   	push   esi
c0022cbd:	e8 96 16 ff ff       	call   c0014358 <Device::addChild(Device*)>
c0022cc2:	83 ec 1c             	sub    esp,0x1c
c0022cc5:	b9 09 00 00 00       	mov    ecx,0x9
c0022cca:	fc                   	cld    
c0022ccb:	89 e7                	mov    edi,esp
c0022ccd:	89 de                	mov    esi,ebx
c0022ccf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022cd1:	55                   	push   ebp
c0022cd2:	e8 8b 15 ff ff       	call   c0014262 <Device::preOpenPCI(PCIDeviceInfo)>
c0022cd7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022cda:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022cde:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022ce6:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022cee:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022cf6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022cf9:	83 c4 4c             	add    esp,0x4c
c0022cfc:	5b                   	pop    ebx
c0022cfd:	5e                   	pop    esi
c0022cfe:	5f                   	pop    edi
c0022cff:	5d                   	pop    ebp
c0022d00:	ff e0                	jmp    eax
c0022d02:	83 ec 0c             	sub    esp,0xc
c0022d05:	68 58 01 00 00       	push   0x158
c0022d0a:	e8 31 cb fe ff       	call   c000f840 <malloc>
c0022d0f:	89 c5                	mov    ebp,eax
c0022d11:	58                   	pop    eax
c0022d12:	5a                   	pop    edx
c0022d13:	68 b8 cb 02 c0       	push   0xc002cbb8
c0022d18:	55                   	push   ebp
c0022d19:	e8 30 19 ff ff       	call   c001464e <DriverlessDevice::DriverlessDevice(char const*)>
c0022d1e:	59                   	pop    ecx
c0022d1f:	5f                   	pop    edi
c0022d20:	55                   	push   ebp
c0022d21:	56                   	push   esi
c0022d22:	e8 31 16 ff ff       	call   c0014358 <Device::addChild(Device*)>
c0022d27:	b9 09 00 00 00       	mov    ecx,0x9
c0022d2c:	fc                   	cld    
c0022d2d:	89 df                	mov    edi,ebx
c0022d2f:	89 de                	mov    esi,ebx
c0022d31:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022d33:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022d37:	83 c4 2c             	add    esp,0x2c
c0022d3a:	5b                   	pop    ebx
c0022d3b:	5e                   	pop    esi
c0022d3c:	5f                   	pop    edi
c0022d3d:	5d                   	pop    ebp
c0022d3e:	e9 1f 15 ff ff       	jmp    c0014262 <Device::preOpenPCI(PCIDeviceInfo)>
c0022d43:	83 c4 1c             	add    esp,0x1c
c0022d46:	5b                   	pop    ebx
c0022d47:	5e                   	pop    esi
c0022d48:	5f                   	pop    edi
c0022d49:	5d                   	pop    ebp
c0022d4a:	c3                   	ret    
c0022d4b:	90                   	nop

c0022d4c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022d4c:	55                   	push   ebp
c0022d4d:	57                   	push   edi
c0022d4e:	56                   	push   esi
c0022d4f:	53                   	push   ebx
c0022d50:	83 ec 5c             	sub    esp,0x5c
c0022d53:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022d57:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022d5b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022d5f:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022d64:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022d68:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022d6c:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022d71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022d75:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0022d7a:	6a 0c                	push   0xc
c0022d7c:	55                   	push   ebp
c0022d7d:	53                   	push   ebx
c0022d7e:	57                   	push   edi
c0022d7f:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022d86:	e8 01 fc ff ff       	call   c002298c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d8b:	55                   	push   ebp
c0022d8c:	53                   	push   ebx
c0022d8d:	57                   	push   edi
c0022d8e:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022d95:	e8 80 fc ff ff       	call   c0022a1a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022d9a:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0022d9f:	83 c4 24             	add    esp,0x24
c0022da2:	55                   	push   ebp
c0022da3:	53                   	push   ebx
c0022da4:	57                   	push   edi
c0022da5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022da9:	e8 f6 fc ff ff       	call   c0022aa4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022dae:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022db2:	6a 3c                	push   0x3c
c0022db4:	55                   	push   ebp
c0022db5:	53                   	push   ebx
c0022db6:	57                   	push   edi
c0022db7:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022dbe:	e8 c9 fb ff ff       	call   c002298c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022dc3:	0f b6 c4             	movzx  eax,ah
c0022dc6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022dca:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022dce:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022dd2:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0022dd7:	83 c4 24             	add    esp,0x24
c0022dda:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022de0:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022de7:	74 6c                	je     c0022e55 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022de9:	31 f6                	xor    esi,esi
c0022deb:	8b 15 c8 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5c8
c0022df1:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022df7:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022dfd:	7e 56                	jle    c0022e55 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022dff:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022e02:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022e09:	39 cb                	cmp    ebx,ecx
c0022e0b:	75 45                	jne    c0022e52 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022e0d:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022e14:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022e18:	75 38                	jne    c0022e52 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022e1a:	83 ec 0c             	sub    esp,0xc
c0022e1d:	68 d2 cb 02 c0       	push   0xc002cbd2
c0022e22:	e8 0a 01 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0022e27:	8b 15 c8 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5c8
c0022e2d:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022e33:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022e3b:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022e3f:	52                   	push   edx
c0022e40:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022e44:	53                   	push   ebx
c0022e45:	68 f7 cb 02 c0       	push   0xc002cbf7
c0022e4a:	e8 e2 00 ff ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0022e4f:	83 c4 20             	add    esp,0x20
c0022e52:	46                   	inc    esi
c0022e53:	eb 96                	jmp    c0022deb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022e55:	31 d2                	xor    edx,edx
c0022e57:	83 ec 0c             	sub    esp,0xc
c0022e5a:	55                   	push   ebp
c0022e5b:	53                   	push   ebx
c0022e5c:	57                   	push   edi
c0022e5d:	52                   	push   edx
c0022e5e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022e62:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022e69:	e8 7c fc ff ff       	call   c0022aea <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e6e:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022e72:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022e76:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022e7a:	42                   	inc    edx
c0022e7b:	83 c4 20             	add    esp,0x20
c0022e7e:	83 fa 06             	cmp    edx,0x6
c0022e81:	75 d4                	jne    c0022e57 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022e83:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022e87:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022e8b:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022e8f:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022e93:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022e97:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022e9b:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022ea0:	86 e0                	xchg   al,ah
c0022ea2:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022ea7:	55                   	push   ebp
c0022ea8:	53                   	push   ebx
c0022ea9:	57                   	push   edi
c0022eaa:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022eae:	e8 ab fb ff ff       	call   c0022a5e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022eb3:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022eb7:	55                   	push   ebp
c0022eb8:	53                   	push   ebx
c0022eb9:	57                   	push   edi
c0022eba:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022ec1:	e8 0e fb ff ff       	call   c00229d4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022ec6:	83 ec 0c             	sub    esp,0xc
c0022ec9:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022ece:	b9 09 00 00 00       	mov    ecx,0x9
c0022ed3:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022ed7:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022edb:	fc                   	cld    
c0022edc:	89 e7                	mov    edi,esp
c0022ede:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022ee0:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022ee7:	e8 ee fc ff ff       	call   c0022bda <PCI::foundDevice(PCIDeviceInfo)>
c0022eec:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022ef2:	5b                   	pop    ebx
c0022ef3:	5e                   	pop    esi
c0022ef4:	5f                   	pop    edi
c0022ef5:	5d                   	pop    ebp
c0022ef6:	c3                   	ret    
c0022ef7:	90                   	nop

c0022ef8 <PCI::checkDevice(unsigned char, unsigned char)>:
c0022ef8:	55                   	push   ebp
c0022ef9:	57                   	push   edi
c0022efa:	56                   	push   esi
c0022efb:	53                   	push   ebx
c0022efc:	83 ec 0c             	sub    esp,0xc
c0022eff:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022f03:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022f08:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022f0d:	6a 00                	push   0x0
c0022f0f:	56                   	push   esi
c0022f10:	57                   	push   edi
c0022f11:	55                   	push   ebp
c0022f12:	e8 bd fa ff ff       	call   c00229d4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f17:	6a 00                	push   0x0
c0022f19:	56                   	push   esi
c0022f1a:	57                   	push   edi
c0022f1b:	55                   	push   ebp
c0022f1c:	e8 2b fe ff ff       	call   c0022d4c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022f21:	83 c4 20             	add    esp,0x20
c0022f24:	6a 00                	push   0x0
c0022f26:	56                   	push   esi
c0022f27:	57                   	push   edi
c0022f28:	55                   	push   ebp
c0022f29:	e8 c8 fa ff ff       	call   c00229f6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022f2e:	83 c4 10             	add    esp,0x10
c0022f31:	84 c0                	test   al,al
c0022f33:	79 27                	jns    c0022f5c <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022f35:	bb 01 00 00 00       	mov    ebx,0x1
c0022f3a:	53                   	push   ebx
c0022f3b:	56                   	push   esi
c0022f3c:	57                   	push   edi
c0022f3d:	55                   	push   ebp
c0022f3e:	e8 91 fa ff ff       	call   c00229d4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f43:	83 c4 10             	add    esp,0x10
c0022f46:	66 40                	inc    ax
c0022f48:	74 0c                	je     c0022f56 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022f4a:	53                   	push   ebx
c0022f4b:	56                   	push   esi
c0022f4c:	57                   	push   edi
c0022f4d:	55                   	push   ebp
c0022f4e:	e8 f9 fd ff ff       	call   c0022d4c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022f53:	83 c4 10             	add    esp,0x10
c0022f56:	43                   	inc    ebx
c0022f57:	83 fb 08             	cmp    ebx,0x8
c0022f5a:	75 de                	jne    c0022f3a <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022f5c:	83 c4 0c             	add    esp,0xc
c0022f5f:	5b                   	pop    ebx
c0022f60:	5e                   	pop    esi
c0022f61:	5f                   	pop    edi
c0022f62:	5d                   	pop    ebp
c0022f63:	c3                   	ret    

c0022f64 <PCI::detect()>:
c0022f64:	56                   	push   esi
c0022f65:	53                   	push   ebx
c0022f66:	53                   	push   ebx
c0022f67:	31 db                	xor    ebx,ebx
c0022f69:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022f6d:	6a 00                	push   0x0
c0022f6f:	6a 00                	push   0x0
c0022f71:	6a 00                	push   0x0
c0022f73:	56                   	push   esi
c0022f74:	e8 7d fa ff ff       	call   c00229f6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022f79:	83 c4 10             	add    esp,0x10
c0022f7c:	a8 80                	test   al,0x80
c0022f7e:	75 21                	jne    c0022fa1 <PCI::detect()+0x3d>
c0022f80:	51                   	push   ecx
c0022f81:	51                   	push   ecx
c0022f82:	6a 00                	push   0x0
c0022f84:	56                   	push   esi
c0022f85:	e8 2c fc ff ff       	call   c0022bb6 <PCI::checkBus(unsigned char)>
c0022f8a:	83 c4 10             	add    esp,0x10
c0022f8d:	eb 24                	jmp    c0022fb3 <PCI::detect()+0x4f>
c0022f8f:	52                   	push   edx
c0022f90:	52                   	push   edx
c0022f91:	53                   	push   ebx
c0022f92:	43                   	inc    ebx
c0022f93:	56                   	push   esi
c0022f94:	e8 1d fc ff ff       	call   c0022bb6 <PCI::checkBus(unsigned char)>
c0022f99:	83 c4 10             	add    esp,0x10
c0022f9c:	83 fb 08             	cmp    ebx,0x8
c0022f9f:	74 12                	je     c0022fb3 <PCI::detect()+0x4f>
c0022fa1:	53                   	push   ebx
c0022fa2:	6a 00                	push   0x0
c0022fa4:	6a 00                	push   0x0
c0022fa6:	56                   	push   esi
c0022fa7:	e8 28 fa ff ff       	call   c00229d4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022fac:	83 c4 10             	add    esp,0x10
c0022faf:	66 40                	inc    ax
c0022fb1:	74 dc                	je     c0022f8f <PCI::detect()+0x2b>
c0022fb3:	58                   	pop    eax
c0022fb4:	5b                   	pop    ebx
c0022fb5:	5e                   	pop    esi
c0022fb6:	c3                   	ret    
c0022fb7:	90                   	nop

c0022fb8 <IDE::close(int, int, void*)>:
c0022fb8:	83 c8 ff             	or     eax,0xffffffff
c0022fbb:	c3                   	ret    

c0022fbc <IDE::IDE()>:
c0022fbc:	83 ec 0c             	sub    esp,0xc
c0022fbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fc3:	83 ec 08             	sub    esp,0x8
c0022fc6:	68 40 cc 02 c0       	push   0xc002cc40
c0022fcb:	50                   	push   eax
c0022fcc:	e8 13 17 ff ff       	call   c00146e4 <HardDiskController::HardDiskController(char const*)>
c0022fd1:	83 c4 10             	add    esp,0x10
c0022fd4:	ba 80 ce 02 c0       	mov    edx,0xc002ce80
c0022fd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fdd:	89 10                	mov    DWORD PTR [eax],edx
c0022fdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fe3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022fea:	90                   	nop
c0022feb:	83 c4 0c             	add    esp,0xc
c0022fee:	c3                   	ret    
c0022fef:	90                   	nop

c0022ff0 <IDE::prepareInterrupt(unsigned char)>:
c0022ff0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022ff5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022ff9:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0023001:	c3                   	ret    

c0023002 <selectDrive(unsigned char, unsigned char)>:
c0023002:	c3                   	ret    
c0023003:	90                   	nop

c0023004 <IDE::getBase(unsigned char)>:
c0023004:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0023009:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002300d:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0023015:	c3                   	ret    

c0023016 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0023016:	55                   	push   ebp
c0023017:	57                   	push   edi
c0023018:	56                   	push   esi
c0023019:	53                   	push   ebx
c002301a:	83 ec 1c             	sub    esp,0x1c
c002301d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023021:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023025:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0023028:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002302c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023030:	80 f9 03             	cmp    cl,0x3
c0023033:	77 51                	ja     c0023086 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0023035:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023039:	0f b6 f2             	movzx  esi,dl
c002303c:	0f b6 db             	movzx  ebx,bl
c002303f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023042:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0023046:	83 ca 80             	or     edx,0xffffff80
c0023049:	0f b6 d2             	movzx  edx,dl
c002304c:	52                   	push   edx
c002304d:	6a 0c                	push   0xc
c002304f:	56                   	push   esi
c0023050:	57                   	push   edi
c0023051:	e8 c0 ff ff ff       	call   c0023016 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023056:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c002305b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002305f:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0023063:	ee                   	out    dx,al
c0023064:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0023069:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c002306d:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0023071:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023075:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002307d:	83 c4 2c             	add    esp,0x2c
c0023080:	5b                   	pop    ebx
c0023081:	5e                   	pop    esi
c0023082:	5f                   	pop    edi
c0023083:	5d                   	pop    ebp
c0023084:	eb 90                	jmp    c0023016 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023086:	80 fb 07             	cmp    bl,0x7
c0023089:	77 12                	ja     c002309d <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c002308b:	0f b6 d2             	movzx  edx,dl
c002308e:	0f b6 db             	movzx  ebx,bl
c0023091:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0023099:	89 da                	mov    edx,ebx
c002309b:	eb 2f                	jmp    c00230cc <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002309d:	80 fb 0d             	cmp    bl,0xd
c00230a0:	77 13                	ja     c00230b5 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c00230a2:	0f b6 d2             	movzx  edx,dl
c00230a5:	0f b6 db             	movzx  ebx,bl
c00230a8:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c00230af:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c00230b3:	eb 17                	jmp    c00230cc <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00230b5:	80 fb 15             	cmp    bl,0x15
c00230b8:	77 13                	ja     c00230cd <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c00230ba:	0f b6 d2             	movzx  edx,dl
c00230bd:	0f b6 db             	movzx  ebx,bl
c00230c0:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c00230c8:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c00230cc:	ee                   	out    dx,al
c00230cd:	83 c4 1c             	add    esp,0x1c
c00230d0:	5b                   	pop    ebx
c00230d1:	5e                   	pop    esi
c00230d2:	5f                   	pop    edi
c00230d3:	5d                   	pop    ebp
c00230d4:	c3                   	ret    
c00230d5:	90                   	nop

c00230d6 <IDE::read(unsigned char, unsigned char)>:
c00230d6:	55                   	push   ebp
c00230d7:	57                   	push   edi
c00230d8:	56                   	push   esi
c00230d9:	53                   	push   ebx
c00230da:	83 ec 1c             	sub    esp,0x1c
c00230dd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00230e1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00230e5:	8d 43 f8             	lea    eax,[ebx-0x8]
c00230e8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00230ec:	3c 03                	cmp    al,0x3
c00230ee:	77 43                	ja     c0023133 <IDE::read(unsigned char, unsigned char)+0x5d>
c00230f0:	0f b6 f2             	movzx  esi,dl
c00230f3:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00230f6:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00230fa:	83 c8 80             	or     eax,0xffffff80
c00230fd:	0f b6 c0             	movzx  eax,al
c0023100:	50                   	push   eax
c0023101:	6a 0c                	push   0xc
c0023103:	56                   	push   esi
c0023104:	57                   	push   edi
c0023105:	e8 0c ff ff ff       	call   c0023016 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002310a:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c002310f:	0f b6 c3             	movzx  eax,bl
c0023112:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0023116:	ec                   	in     al,dx
c0023117:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002311b:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0023120:	52                   	push   edx
c0023121:	6a 0c                	push   0xc
c0023123:	56                   	push   esi
c0023124:	57                   	push   edi
c0023125:	e8 ec fe ff ff       	call   c0023016 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002312a:	83 c4 20             	add    esp,0x20
c002312d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023131:	eb 49                	jmp    c002317c <IDE::read(unsigned char, unsigned char)+0xa6>
c0023133:	80 fb 07             	cmp    bl,0x7
c0023136:	77 12                	ja     c002314a <IDE::read(unsigned char, unsigned char)+0x74>
c0023138:	0f b6 d2             	movzx  edx,dl
c002313b:	0f b6 c3             	movzx  eax,bl
c002313e:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023146:	89 c2                	mov    edx,eax
c0023148:	eb 31                	jmp    c002317b <IDE::read(unsigned char, unsigned char)+0xa5>
c002314a:	80 fb 0d             	cmp    bl,0xd
c002314d:	77 13                	ja     c0023162 <IDE::read(unsigned char, unsigned char)+0x8c>
c002314f:	0f b6 d2             	movzx  edx,dl
c0023152:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023159:	0f b6 d3             	movzx  edx,bl
c002315c:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0023160:	eb 19                	jmp    c002317b <IDE::read(unsigned char, unsigned char)+0xa5>
c0023162:	31 c0                	xor    eax,eax
c0023164:	80 fb 15             	cmp    bl,0x15
c0023167:	77 13                	ja     c002317c <IDE::read(unsigned char, unsigned char)+0xa6>
c0023169:	0f b6 d2             	movzx  edx,dl
c002316c:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023174:	0f b6 d3             	movzx  edx,bl
c0023177:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002317b:	ec                   	in     al,dx
c002317c:	83 c4 1c             	add    esp,0x1c
c002317f:	5b                   	pop    ebx
c0023180:	5e                   	pop    esi
c0023181:	5f                   	pop    edi
c0023182:	5d                   	pop    ebp
c0023183:	c3                   	ret    

c0023184 <IDE::waitInterrupt(unsigned char)>:
c0023184:	55                   	push   ebp
c0023185:	57                   	push   edi
c0023186:	56                   	push   esi
c0023187:	53                   	push   ebx
c0023188:	31 db                	xor    ebx,ebx
c002318a:	83 ec 0c             	sub    esp,0xc
c002318d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023191:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023196:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c002319e:	89 e8                	mov    eax,ebp
c00231a0:	84 c0                	test   al,al
c00231a2:	75 34                	jne    c00231d8 <IDE::waitInterrupt(unsigned char)+0x54>
c00231a4:	52                   	push   edx
c00231a5:	6a 0c                	push   0xc
c00231a7:	56                   	push   esi
c00231a8:	57                   	push   edi
c00231a9:	e8 28 ff ff ff       	call   c00230d6 <IDE::read(unsigned char, unsigned char)>
c00231ae:	83 c4 10             	add    esp,0x10
c00231b1:	a8 01                	test   al,0x1
c00231b3:	75 2b                	jne    c00231e0 <IDE::waitInterrupt(unsigned char)+0x5c>
c00231b5:	f6 c3 04             	test   bl,0x4
c00231b8:	75 16                	jne    c00231d0 <IDE::waitInterrupt(unsigned char)+0x4c>
c00231ba:	83 fb 32             	cmp    ebx,0x32
c00231bd:	7e 11                	jle    c00231d0 <IDE::waitInterrupt(unsigned char)+0x4c>
c00231bf:	50                   	push   eax
c00231c0:	50                   	push   eax
c00231c1:	6a 00                	push   0x0
c00231c3:	68 80 96 98 00       	push   0x989680
c00231c8:	e8 8b b1 ff ff       	call   c001e358 <nanoSleep(unsigned long long)>
c00231cd:	83 c4 10             	add    esp,0x10
c00231d0:	83 fb 3c             	cmp    ebx,0x3c
c00231d3:	74 0b                	je     c00231e0 <IDE::waitInterrupt(unsigned char)+0x5c>
c00231d5:	43                   	inc    ebx
c00231d6:	eb be                	jmp    c0023196 <IDE::waitInterrupt(unsigned char)+0x12>
c00231d8:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c00231e0:	83 c4 0c             	add    esp,0xc
c00231e3:	89 e8                	mov    eax,ebp
c00231e5:	5b                   	pop    ebx
c00231e6:	5e                   	pop    esi
c00231e7:	5f                   	pop    edi
c00231e8:	5d                   	pop    ebp
c00231e9:	c3                   	ret    

c00231ea <ideChannel0IRQHandler(regs*, void*)>:
c00231ea:	83 ec 10             	sub    esp,0x10
c00231ed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00231f1:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00231f8:	6a 07                	push   0x7
c00231fa:	6a 00                	push   0x0
c00231fc:	50                   	push   eax
c00231fd:	e8 d4 fe ff ff       	call   c00230d6 <IDE::read(unsigned char, unsigned char)>
c0023202:	83 c4 1c             	add    esp,0x1c
c0023205:	c3                   	ret    

c0023206 <ideChannel1IRQHandler(regs*, void*)>:
c0023206:	83 ec 10             	sub    esp,0x10
c0023209:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002320d:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023214:	6a 07                	push   0x7
c0023216:	6a 01                	push   0x1
c0023218:	50                   	push   eax
c0023219:	e8 b8 fe ff ff       	call   c00230d6 <IDE::read(unsigned char, unsigned char)>
c002321e:	83 c4 1c             	add    esp,0x1c
c0023221:	c3                   	ret    

c0023222 <IDE::enableIRQs(unsigned char, bool)>:
c0023222:	57                   	push   edi
c0023223:	56                   	push   esi
c0023224:	be 04 00 00 00       	mov    esi,0x4
c0023229:	53                   	push   ebx
c002322a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c002322f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023233:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023238:	0f 94 c0             	sete   al
c002323b:	d1 e0                	shl    eax,1
c002323d:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023244:	0f b6 c0             	movzx  eax,al
c0023247:	50                   	push   eax
c0023248:	6a 0c                	push   0xc
c002324a:	57                   	push   edi
c002324b:	53                   	push   ebx
c002324c:	e8 c5 fd ff ff       	call   c0023016 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023251:	83 c4 10             	add    esp,0x10
c0023254:	50                   	push   eax
c0023255:	6a 0c                	push   0xc
c0023257:	57                   	push   edi
c0023258:	53                   	push   ebx
c0023259:	e8 78 fe ff ff       	call   c00230d6 <IDE::read(unsigned char, unsigned char)>
c002325e:	83 c4 10             	add    esp,0x10
c0023261:	4e                   	dec    esi
c0023262:	75 f0                	jne    c0023254 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023264:	5b                   	pop    ebx
c0023265:	5e                   	pop    esi
c0023266:	5f                   	pop    edi
c0023267:	c3                   	ret    

c0023268 <IDE::open(int, int, void*)>:
c0023268:	55                   	push   ebp
c0023269:	57                   	push   edi
c002326a:	56                   	push   esi
c002326b:	53                   	push   ebx
c002326c:	83 ec 1c             	sub    esp,0x1c
c002326f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023273:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c002327c:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023285:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002328c:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023293:	0f 85 b0 02 00 00    	jne    c0023549 <IDE::open(int, int, void*)+0x2e1>
c0023299:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c002329f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00232a3:	83 e0 7f             	and    eax,0x7f
c00232a6:	3c 05                	cmp    al,0x5
c00232a8:	74 04                	je     c00232ae <IDE::open(int, int, void*)+0x46>
c00232aa:	3c 0f                	cmp    al,0xf
c00232ac:	75 32                	jne    c00232e0 <IDE::open(int, int, void*)+0x78>
c00232ae:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00232b4:	83 e0 fc             	and    eax,0xfffffffc
c00232b7:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00232be:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c00232c4:	83 e0 fc             	and    eax,0xfffffffc
c00232c7:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00232ce:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00232d4:	83 e0 fc             	and    eax,0xfffffffc
c00232d7:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00232de:	eb 14                	jmp    c00232f4 <IDE::open(int, int, void*)+0x8c>
c00232e0:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00232ea:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00232f4:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00232fb:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023302:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023306:	89 c6                	mov    esi,eax
c0023308:	bf f8 0c 00 00       	mov    edi,0xcf8
c002330d:	c1 e6 10             	shl    esi,0x10
c0023310:	89 e8                	mov    eax,ebp
c0023312:	89 fa                	mov    edx,edi
c0023314:	c1 e0 0b             	shl    eax,0xb
c0023317:	09 f0                	or     eax,esi
c0023319:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023320:	c1 e6 08             	shl    esi,0x8
c0023323:	09 c6                	or     esi,eax
c0023325:	89 f0                	mov    eax,esi
c0023327:	0d 08 00 00 80       	or     eax,0x80000008
c002332c:	ef                   	out    dx,eax
c002332d:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023332:	89 ca                	mov    edx,ecx
c0023334:	ed                   	in     eax,dx
c0023335:	c1 e8 10             	shr    eax,0x10
c0023338:	3d ff ff 00 00       	cmp    eax,0xffff
c002333d:	0f 84 f5 00 00 00    	je     c0023438 <IDE::open(int, int, void*)+0x1d0>
c0023343:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023349:	89 fa                	mov    edx,edi
c002334b:	89 f0                	mov    eax,esi
c002334d:	ef                   	out    dx,eax
c002334e:	b0 fe                	mov    al,0xfe
c0023350:	89 ca                	mov    edx,ecx
c0023352:	ee                   	out    dx,al
c0023353:	89 f0                	mov    eax,esi
c0023355:	89 fa                	mov    edx,edi
c0023357:	ef                   	out    dx,eax
c0023358:	89 ca                	mov    edx,ecx
c002335a:	ed                   	in     eax,dx
c002335b:	3c fe                	cmp    al,0xfe
c002335d:	0f 85 a9 00 00 00    	jne    c002340c <IDE::open(int, int, void*)+0x1a4>
c0023363:	8b 15 c8 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5c8
c0023369:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023370:	74 33                	je     c00233a5 <IDE::open(int, int, void*)+0x13d>
c0023372:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023378:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c002337c:	40                   	inc    eax
c002337d:	83 ec 0c             	sub    esp,0xc
c0023380:	0f b6 c0             	movzx  eax,al
c0023383:	50                   	push   eax
c0023384:	55                   	push   ebp
c0023385:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023389:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c002338f:	51                   	push   ecx
c0023390:	e8 a7 4e ff ff       	call   c001823c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023395:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c002339a:	83 c4 1c             	add    esp,0x1c
c002339d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00233a3:	eb 0a                	jmp    c00233af <IDE::open(int, int, void*)+0x147>
c00233a5:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00233af:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00233b6:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00233bd:	c1 e1 10             	shl    ecx,0x10
c00233c0:	c1 e0 08             	shl    eax,0x8
c00233c3:	bf f8 0c 00 00       	mov    edi,0xcf8
c00233c8:	09 c1                	or     ecx,eax
c00233ca:	89 fa                	mov    edx,edi
c00233cc:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00233d3:	c1 e0 0b             	shl    eax,0xb
c00233d6:	09 c1                	or     ecx,eax
c00233d8:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00233de:	89 c8                	mov    eax,ecx
c00233e0:	ef                   	out    dx,eax
c00233e1:	be fc 0c 00 00       	mov    esi,0xcfc
c00233e6:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00233ec:	89 f2                	mov    edx,esi
c00233ee:	ee                   	out    dx,al
c00233ef:	89 c8                	mov    eax,ecx
c00233f1:	89 fa                	mov    edx,edi
c00233f3:	ef                   	out    dx,eax
c00233f4:	89 f2                	mov    edx,esi
c00233f6:	ed                   	in     eax,dx
c00233f7:	0f b6 c0             	movzx  eax,al
c00233fa:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023400:	74 46                	je     c0023448 <IDE::open(int, int, void*)+0x1e0>
c0023402:	83 ec 0c             	sub    esp,0xc
c0023405:	68 58 cc 02 c0       	push   0xc002cc58
c002340a:	eb 34                	jmp    c0023440 <IDE::open(int, int, void*)+0x1d8>
c002340c:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023415:	75 17                	jne    c002342e <IDE::open(int, int, void*)+0x1c6>
c0023417:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c002341c:	74 07                	je     c0023425 <IDE::open(int, int, void*)+0x1bd>
c002341e:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023423:	75 09                	jne    c002342e <IDE::open(int, int, void*)+0x1c6>
c0023425:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002342c:	eb 1a                	jmp    c0023448 <IDE::open(int, int, void*)+0x1e0>
c002342e:	83 ec 0c             	sub    esp,0xc
c0023431:	68 60 cc 02 c0       	push   0xc002cc60
c0023436:	eb 08                	jmp    c0023440 <IDE::open(int, int, void*)+0x1d8>
c0023438:	83 ec 0c             	sub    esp,0xc
c002343b:	68 91 cc 02 c0       	push   0xc002cc91
c0023440:	e8 9e 71 ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c0023445:	83 c4 10             	add    esp,0x10
c0023448:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c002344f:	79 1a                	jns    c002346b <IDE::open(int, int, void*)+0x203>
c0023451:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023457:	83 e0 fc             	and    eax,0xfffffffc
c002345a:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023461:	83 c0 08             	add    eax,0x8
c0023464:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c002346b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023471:	89 c2                	mov    edx,eax
c0023473:	83 e2 0f             	and    edx,0xf
c0023476:	66 83 fa 08          	cmp    dx,0x8
c002347a:	75 0a                	jne    c0023486 <IDE::open(int, int, void*)+0x21e>
c002347c:	83 e8 02             	sub    eax,0x2
c002347f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023486:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c002348c:	89 c2                	mov    edx,eax
c002348e:	83 e2 0f             	and    edx,0xf
c0023491:	66 83 fa 08          	cmp    dx,0x8
c0023495:	75 0a                	jne    c00234a1 <IDE::open(int, int, void*)+0x239>
c0023497:	83 e8 02             	sub    eax,0x2
c002349a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00234a1:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00234a8:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00234af:	89 d0                	mov    eax,edx
c00234b1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00234b4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00234b8:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00234bc:	8d 4a 01             	lea    ecx,[edx+0x1]
c00234bf:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00234c4:	0f b6 c9             	movzx  ecx,cl
c00234c7:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00234ce:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00234d1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00234d5:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00234d9:	8d 50 02             	lea    edx,[eax+0x2]
c00234dc:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00234e1:	0f b6 d2             	movzx  edx,dl
c00234e4:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00234ea:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00234ed:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00234f1:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00234f5:	8d 48 03             	lea    ecx,[eax+0x3]
c00234f8:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00234fd:	0f b6 c9             	movzx  ecx,cl
c0023500:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023506:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023509:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002350d:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023511:	8d 50 04             	lea    edx,[eax+0x4]
c0023514:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c002351a:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002351f:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023526:	66 85 f6             	test   si,si
c0023529:	74 3e                	je     c0023569 <IDE::open(int, int, void*)+0x301>
c002352b:	0f b6 d2             	movzx  edx,dl
c002352e:	83 c0 05             	add    eax,0x5
c0023531:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023534:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023538:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c002353c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023542:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023547:	eb 20                	jmp    c0023569 <IDE::open(int, int, void*)+0x301>
c0023549:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023553:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002355d:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023564:	e9 02 ff ff ff       	jmp    c002346b <IDE::open(int, int, void*)+0x203>
c0023569:	52                   	push   edx
c002356a:	52                   	push   edx
c002356b:	6a 00                	push   0x0
c002356d:	53                   	push   ebx
c002356e:	e8 7d fa ff ff       	call   c0022ff0 <IDE::prepareInterrupt(unsigned char)>
c0023573:	59                   	pop    ecx
c0023574:	5e                   	pop    esi
c0023575:	6a 01                	push   0x1
c0023577:	53                   	push   ebx
c0023578:	e8 73 fa ff ff       	call   c0022ff0 <IDE::prepareInterrupt(unsigned char)>
c002357d:	83 c4 0c             	add    esp,0xc
c0023580:	6a 00                	push   0x0
c0023582:	6a 00                	push   0x0
c0023584:	53                   	push   ebx
c0023585:	e8 98 fc ff ff       	call   c0023222 <IDE::enableIRQs(unsigned char, bool)>
c002358a:	83 c4 0c             	add    esp,0xc
c002358d:	6a 00                	push   0x0
c002358f:	6a 01                	push   0x1
c0023591:	53                   	push   ebx
c0023592:	e8 8b fc ff ff       	call   c0023222 <IDE::enableIRQs(unsigned char, bool)>
c0023597:	83 c4 10             	add    esp,0x10
c002359a:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00235a1:	74 40                	je     c00235e3 <IDE::open(int, int, void*)+0x37b>
c00235a3:	83 ec 0c             	sub    esp,0xc
c00235a6:	68 bb cc 02 c0       	push   0xc002ccbb
c00235ab:	e8 81 f9 fe ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c00235b0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00235b3:	6a 01                	push   0x1
c00235b5:	68 ea 31 02 c0       	push   0xc00231ea
c00235ba:	6a 0e                	push   0xe
c00235bc:	53                   	push   ebx
c00235bd:	e8 1a 0d ff ff       	call   c00142dc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235c2:	83 c4 14             	add    esp,0x14
c00235c5:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00235cb:	53                   	push   ebx
c00235cc:	6a 01                	push   0x1
c00235ce:	68 06 32 02 c0       	push   0xc0023206
c00235d3:	6a 0f                	push   0xf
c00235d5:	53                   	push   ebx
c00235d6:	e8 01 0d ff ff       	call   c00142dc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235db:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00235e1:	eb 4a                	jmp    c002362d <IDE::open(int, int, void*)+0x3c5>
c00235e3:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00235ed:	50                   	push   eax
c00235ee:	6a 0f                	push   0xf
c00235f0:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00235f6:	68 d7 cc 02 c0       	push   0xc002ccd7
c00235fb:	e8 31 f9 fe ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0023600:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023603:	6a 00                	push   0x0
c0023605:	68 ea 31 02 c0       	push   0xc00231ea
c002360a:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023610:	53                   	push   ebx
c0023611:	e8 c6 0c ff ff       	call   c00142dc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023616:	83 c4 14             	add    esp,0x14
c0023619:	53                   	push   ebx
c002361a:	6a 00                	push   0x0
c002361c:	68 06 32 02 c0       	push   0xc0023206
c0023621:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023627:	53                   	push   ebx
c0023628:	e8 af 0c ff ff       	call   c00142dc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002362d:	8b 03                	mov    eax,DWORD PTR [ebx]
c002362f:	83 c4 20             	add    esp,0x20
c0023632:	83 ec 0c             	sub    esp,0xc
c0023635:	53                   	push   ebx
c0023636:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023639:	83 c4 0c             	add    esp,0xc
c002363c:	6a 07                	push   0x7
c002363e:	6a 00                	push   0x0
c0023640:	53                   	push   ebx
c0023641:	e8 90 fa ff ff       	call   c00230d6 <IDE::read(unsigned char, unsigned char)>
c0023646:	83 c4 0c             	add    esp,0xc
c0023649:	6a 07                	push   0x7
c002364b:	6a 01                	push   0x1
c002364d:	53                   	push   ebx
c002364e:	e8 83 fa ff ff       	call   c00230d6 <IDE::read(unsigned char, unsigned char)>
c0023653:	83 c4 0c             	add    esp,0xc
c0023656:	6a 01                	push   0x1
c0023658:	6a 00                	push   0x0
c002365a:	53                   	push   ebx
c002365b:	e8 c2 fb ff ff       	call   c0023222 <IDE::enableIRQs(unsigned char, bool)>
c0023660:	83 c4 0c             	add    esp,0xc
c0023663:	6a 01                	push   0x1
c0023665:	6a 01                	push   0x1
c0023667:	53                   	push   ebx
c0023668:	e8 b5 fb ff ff       	call   c0023222 <IDE::enableIRQs(unsigned char, bool)>
c002366d:	83 c4 2c             	add    esp,0x2c
c0023670:	31 c0                	xor    eax,eax
c0023672:	5b                   	pop    ebx
c0023673:	5e                   	pop    esi
c0023674:	5f                   	pop    edi
c0023675:	5d                   	pop    ebp
c0023676:	c3                   	ret    
c0023677:	90                   	nop

c0023678 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023678:	55                   	push   ebp
c0023679:	57                   	push   edi
c002367a:	56                   	push   esi
c002367b:	53                   	push   ebx
c002367c:	83 ec 1c             	sub    esp,0x1c
c002367f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023683:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023687:	8d 50 f8             	lea    edx,[eax-0x8]
c002368a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002368e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023692:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023696:	80 fa 03             	cmp    dl,0x3
c0023699:	77 5d                	ja     c00236f8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c002369b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002369f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00236a3:	0f b6 db             	movzx  ebx,bl
c00236a6:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00236a9:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00236ad:	83 ca 80             	or     edx,0xffffff80
c00236b0:	0f b6 d2             	movzx  edx,dl
c00236b3:	52                   	push   edx
c00236b4:	6a 0c                	push   0xc
c00236b6:	53                   	push   ebx
c00236b7:	56                   	push   esi
c00236b8:	e8 59 f9 ff ff       	call   c0023016 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236bd:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00236c2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00236c6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00236ca:	0f b6 c0             	movzx  eax,al
c00236cd:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00236d1:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00236d3:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00236d8:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00236dc:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00236e0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00236e4:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00236ec:	83 c4 2c             	add    esp,0x2c
c00236ef:	5b                   	pop    ebx
c00236f0:	5e                   	pop    esi
c00236f1:	5f                   	pop    edi
c00236f2:	5d                   	pop    ebp
c00236f3:	e9 1e f9 ff ff       	jmp    c0023016 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236f8:	3c 07                	cmp    al,0x7
c00236fa:	77 10                	ja     c002370c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00236fc:	0f b6 db             	movzx  ebx,bl
c00236ff:	0f b6 d0             	movzx  edx,al
c0023702:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c002370a:	eb 2d                	jmp    c0023739 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002370c:	3c 0d                	cmp    al,0xd
c002370e:	77 13                	ja     c0023723 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0023710:	0f b6 db             	movzx  ebx,bl
c0023713:	0f b6 c0             	movzx  eax,al
c0023716:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c002371d:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023721:	eb 16                	jmp    c0023739 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023723:	3c 15                	cmp    al,0x15
c0023725:	77 14                	ja     c002373b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023727:	0f b6 db             	movzx  ebx,bl
c002372a:	0f b6 c0             	movzx  eax,al
c002372d:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023735:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023739:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002373b:	83 c4 1c             	add    esp,0x1c
c002373e:	5b                   	pop    ebx
c002373f:	5e                   	pop    esi
c0023740:	5f                   	pop    edi
c0023741:	5d                   	pop    ebp
c0023742:	c3                   	ret    
c0023743:	90                   	nop

c0023744 <IDE::detect()>:
c0023744:	55                   	push   ebp
c0023745:	57                   	push   edi
c0023746:	56                   	push   esi
c0023747:	53                   	push   ebx
c0023748:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002374e:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023755:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c002375c:	0f 85 be 02 00 00    	jne    c0023a20 <IDE::detect()+0x2dc>
c0023762:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023769:	31 f6                	xor    esi,esi
c002376b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023773:	31 ed                	xor    ebp,ebp
c0023775:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023779:	c1 e0 06             	shl    eax,0x6
c002377c:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023784:	89 e8                	mov    eax,ebp
c0023786:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002378a:	c1 e0 04             	shl    eax,0x4
c002378d:	83 c8 a0             	or     eax,0xffffffa0
c0023790:	0f b6 c0             	movzx  eax,al
c0023793:	50                   	push   eax
c0023794:	6a 06                	push   0x6
c0023796:	56                   	push   esi
c0023797:	53                   	push   ebx
c0023798:	e8 79 f8 ff ff       	call   c0023016 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002379d:	83 c4 0c             	add    esp,0xc
c00237a0:	6a 0c                	push   0xc
c00237a2:	56                   	push   esi
c00237a3:	53                   	push   ebx
c00237a4:	e8 2d f9 ff ff       	call   c00230d6 <IDE::read(unsigned char, unsigned char)>
c00237a9:	83 c4 0c             	add    esp,0xc
c00237ac:	6a 0c                	push   0xc
c00237ae:	56                   	push   esi
c00237af:	53                   	push   ebx
c00237b0:	e8 21 f9 ff ff       	call   c00230d6 <IDE::read(unsigned char, unsigned char)>
c00237b5:	83 c4 0c             	add    esp,0xc
c00237b8:	6a 0c                	push   0xc
c00237ba:	56                   	push   esi
c00237bb:	53                   	push   ebx
c00237bc:	e8 15 f9 ff ff       	call   c00230d6 <IDE::read(unsigned char, unsigned char)>
c00237c1:	83 c4 0c             	add    esp,0xc
c00237c4:	6a 0c                	push   0xc
c00237c6:	56                   	push   esi
c00237c7:	53                   	push   ebx
c00237c8:	e8 09 f9 ff ff       	call   c00230d6 <IDE::read(unsigned char, unsigned char)>
c00237cd:	68 ec 00 00 00       	push   0xec
c00237d2:	6a 07                	push   0x7
c00237d4:	56                   	push   esi
c00237d5:	53                   	push   ebx
c00237d6:	e8 3b f8 ff ff       	call   c0023016 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00237db:	83 c4 1c             	add    esp,0x1c
c00237de:	6a 0c                	push   0xc
c00237e0:	56                   	push   esi
c00237e1:	53                   	push   ebx
c00237e2:	e8 ef f8 ff ff       	call   c00230d6 <IDE::read(unsigned char, unsigned char)>
c00237e7:	83 c4 0c             	add    esp,0xc
c00237ea:	6a 0c                	push   0xc
c00237ec:	56                   	push   esi
c00237ed:	53                   	push   ebx
c00237ee:	e8 e3 f8 ff ff       	call   c00230d6 <IDE::read(unsigned char, unsigned char)>
c00237f3:	83 c4 0c             	add    esp,0xc
c00237f6:	6a 0c                	push   0xc
c00237f8:	56                   	push   esi
c00237f9:	53                   	push   ebx
c00237fa:	e8 d7 f8 ff ff       	call   c00230d6 <IDE::read(unsigned char, unsigned char)>
c00237ff:	83 c4 0c             	add    esp,0xc
c0023802:	6a 0c                	push   0xc
c0023804:	56                   	push   esi
c0023805:	53                   	push   ebx
c0023806:	e8 cb f8 ff ff       	call   c00230d6 <IDE::read(unsigned char, unsigned char)>
c002380b:	83 c4 0c             	add    esp,0xc
c002380e:	6a 0c                	push   0xc
c0023810:	56                   	push   esi
c0023811:	53                   	push   ebx
c0023812:	e8 bf f8 ff ff       	call   c00230d6 <IDE::read(unsigned char, unsigned char)>
c0023817:	83 c4 10             	add    esp,0x10
c002381a:	84 c0                	test   al,al
c002381c:	0f 84 8b 01 00 00    	je     c00239ad <IDE::detect()+0x269>
c0023822:	31 ff                	xor    edi,edi
c0023824:	50                   	push   eax
c0023825:	6a 0c                	push   0xc
c0023827:	56                   	push   esi
c0023828:	53                   	push   ebx
c0023829:	e8 a8 f8 ff ff       	call   c00230d6 <IDE::read(unsigned char, unsigned char)>
c002382e:	83 c4 10             	add    esp,0x10
c0023831:	a8 01                	test   al,0x1
c0023833:	0f 85 8e 01 00 00    	jne    c00239c7 <IDE::detect()+0x283>
c0023839:	84 c0                	test   al,al
c002383b:	78 04                	js     c0023841 <IDE::detect()+0xfd>
c002383d:	a8 08                	test   al,0x8
c002383f:	75 27                	jne    c0023868 <IDE::detect()+0x124>
c0023841:	47                   	inc    edi
c0023842:	81 ff 17 01 00 00    	cmp    edi,0x117
c0023848:	7e da                	jle    c0023824 <IDE::detect()+0xe0>
c002384a:	50                   	push   eax
c002384b:	50                   	push   eax
c002384c:	6a 00                	push   0x0
c002384e:	68 40 4b 4c 00       	push   0x4c4b40
c0023853:	e8 00 ab ff ff       	call   c001e358 <nanoSleep(unsigned long long)>
c0023858:	83 c4 10             	add    esp,0x10
c002385b:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0023861:	75 c1                	jne    c0023824 <IDE::detect()+0xe0>
c0023863:	e9 5f 01 00 00       	jmp    c00239c7 <IDE::detect()+0x283>
c0023868:	31 c9                	xor    ecx,ecx
c002386a:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002386e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023872:	83 ec 0c             	sub    esp,0xc
c0023875:	68 80 00 00 00       	push   0x80
c002387a:	57                   	push   edi
c002387b:	6a 00                	push   0x0
c002387d:	56                   	push   esi
c002387e:	53                   	push   ebx
c002387f:	e8 f4 fd ff ff       	call   c0023678 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0023884:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0023889:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002388d:	89 d1                	mov    ecx,edx
c002388f:	c1 e0 06             	shl    eax,0x6
c0023892:	01 d8                	add    eax,ebx
c0023894:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002389b:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00238a2:	89 f2                	mov    edx,esi
c00238a4:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00238aa:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00238ae:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00238b4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00238b8:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00238bf:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00238c7:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00238ce:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00238d6:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00238dc:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00238e3:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00238e9:	8d 54 24 58          	lea    edx,[esp+0x58]
c00238ed:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00238f1:	83 c4 20             	add    esp,0x20
c00238f4:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00238f7:	83 c0 02             	add    eax,0x2
c00238fa:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0023900:	83 c7 02             	add    edi,0x2
c0023903:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0023906:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002390c:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0023910:	75 e2                	jne    c00238f4 <IDE::detect()+0x1b0>
c0023912:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023916:	c1 e0 06             	shl    eax,0x6
c0023919:	01 d8                	add    eax,ebx
c002391b:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0023921:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0023928:	66 c1 ea 09          	shr    dx,0x9
c002392c:	83 e2 01             	and    edx,0x1
c002392f:	84 c9                	test   cl,cl
c0023931:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023937:	75 2f                	jne    c0023968 <IDE::detect()+0x224>
c0023939:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c002393f:	85 c0                	test   eax,eax
c0023941:	74 66                	je     c00239a9 <IDE::detect()+0x265>
c0023943:	50                   	push   eax
c0023944:	55                   	push   ebp
c0023945:	56                   	push   esi
c0023946:	68 f3 cc 02 c0       	push   0xc002ccf3
c002394b:	e8 e1 f5 fe ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0023950:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023957:	e8 e4 be fe ff       	call   c000f840 <malloc>
c002395c:	89 c7                	mov    edi,eax
c002395e:	89 04 24             	mov    DWORD PTR [esp],eax
c0023961:	e8 78 06 00 00       	call   c0023fde <ATA::ATA()>
c0023966:	eb 28                	jmp    c0023990 <IDE::detect()+0x24c>
c0023968:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c002396e:	55                   	push   ebp
c002396f:	56                   	push   esi
c0023970:	68 22 cd 02 c0       	push   0xc002cd22
c0023975:	e8 b7 f5 fe ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c002397a:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023981:	e8 ba be fe ff       	call   c000f840 <malloc>
c0023986:	89 c7                	mov    edi,eax
c0023988:	89 04 24             	mov    DWORD PTR [esp],eax
c002398b:	e8 8e 0c 00 00       	call   c002461e <ATAPI::ATAPI()>
c0023990:	5a                   	pop    edx
c0023991:	59                   	pop    ecx
c0023992:	57                   	push   edi
c0023993:	53                   	push   ebx
c0023994:	e8 bf 09 ff ff       	call   c0014358 <Device::addChild(Device*)>
c0023999:	8b 07                	mov    eax,DWORD PTR [edi]
c002399b:	53                   	push   ebx
c002399c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00239a0:	6a 00                	push   0x0
c00239a2:	57                   	push   edi
c00239a3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00239a6:	83 c4 20             	add    esp,0x20
c00239a9:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00239ad:	4d                   	dec    ebp
c00239ae:	74 0a                	je     c00239ba <IDE::detect()+0x276>
c00239b0:	bd 01 00 00 00       	mov    ebp,0x1
c00239b5:	e9 bb fd ff ff       	jmp    c0023775 <IDE::detect()+0x31>
c00239ba:	4e                   	dec    esi
c00239bb:	74 63                	je     c0023a20 <IDE::detect()+0x2dc>
c00239bd:	be 01 00 00 00       	mov    esi,0x1
c00239c2:	e9 ac fd ff ff       	jmp    c0023773 <IDE::detect()+0x2f>
c00239c7:	50                   	push   eax
c00239c8:	6a 04                	push   0x4
c00239ca:	56                   	push   esi
c00239cb:	53                   	push   ebx
c00239cc:	e8 05 f7 ff ff       	call   c00230d6 <IDE::read(unsigned char, unsigned char)>
c00239d1:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00239d5:	83 c4 0c             	add    esp,0xc
c00239d8:	6a 05                	push   0x5
c00239da:	56                   	push   esi
c00239db:	53                   	push   ebx
c00239dc:	e8 f5 f6 ff ff       	call   c00230d6 <IDE::read(unsigned char, unsigned char)>
c00239e1:	83 c4 10             	add    esp,0x10
c00239e4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00239e8:	80 fa 14             	cmp    dl,0x14
c00239eb:	75 04                	jne    c00239f1 <IDE::detect()+0x2ad>
c00239ed:	3c eb                	cmp    al,0xeb
c00239ef:	eb 07                	jmp    c00239f8 <IDE::detect()+0x2b4>
c00239f1:	3c 96                	cmp    al,0x96
c00239f3:	75 b8                	jne    c00239ad <IDE::detect()+0x269>
c00239f5:	80 fa 69             	cmp    dl,0x69
c00239f8:	75 b3                	jne    c00239ad <IDE::detect()+0x269>
c00239fa:	68 a1 00 00 00       	push   0xa1
c00239ff:	6a 07                	push   0x7
c0023a01:	56                   	push   esi
c0023a02:	53                   	push   ebx
c0023a03:	e8 0e f6 ff ff       	call   c0023016 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a08:	5f                   	pop    edi
c0023a09:	58                   	pop    eax
c0023a0a:	6a 00                	push   0x0
c0023a0c:	68 40 42 0f 00       	push   0xf4240
c0023a11:	e8 42 a9 ff ff       	call   c001e358 <nanoSleep(unsigned long long)>
c0023a16:	83 c4 10             	add    esp,0x10
c0023a19:	b1 01                	mov    cl,0x1
c0023a1b:	e9 4a fe ff ff       	jmp    c002386a <IDE::detect()+0x126>
c0023a20:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023a26:	5b                   	pop    ebx
c0023a27:	5e                   	pop    esi
c0023a28:	5f                   	pop    edi
c0023a29:	5d                   	pop    ebp
c0023a2a:	c3                   	ret    
c0023a2b:	90                   	nop

c0023a2c <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023a2c:	55                   	push   ebp
c0023a2d:	57                   	push   edi
c0023a2e:	56                   	push   esi
c0023a2f:	53                   	push   ebx
c0023a30:	83 ec 1c             	sub    esp,0x1c
c0023a33:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023a37:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023a3b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023a3f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023a43:	88 c3                	mov    bl,al
c0023a45:	84 c0                	test   al,al
c0023a47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023a4b:	0f 84 67 01 00 00    	je     c0023bb8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0023a51:	83 ec 0c             	sub    esp,0xc
c0023a54:	68 53 cd 02 c0       	push   0xc002cd53
c0023a59:	e8 d3 f4 fe ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0023a5e:	83 c4 10             	add    esp,0x10
c0023a61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023a65:	3c 01                	cmp    al,0x1
c0023a67:	75 17                	jne    c0023a80 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0023a69:	83 ec 0c             	sub    esp,0xc
c0023a6c:	b3 13                	mov    bl,0x13
c0023a6e:	68 5f cd 02 c0       	push   0xc002cd5f
c0023a73:	e8 b9 f4 fe ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0023a78:	83 c4 10             	add    esp,0x10
c0023a7b:	e9 25 01 00 00       	jmp    c0023ba5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023a80:	3c 02                	cmp    al,0x2
c0023a82:	0f 85 ef 00 00 00    	jne    c0023b77 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0023a88:	d1 e6                	shl    esi,1
c0023a8a:	09 ee                	or     esi,ebp
c0023a8c:	52                   	push   edx
c0023a8d:	89 f0                	mov    eax,esi
c0023a8f:	6a 01                	push   0x1
c0023a91:	0f b6 f0             	movzx  esi,al
c0023a94:	c1 e6 06             	shl    esi,0x6
c0023a97:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023a9f:	50                   	push   eax
c0023aa0:	57                   	push   edi
c0023aa1:	e8 30 f6 ff ff       	call   c00230d6 <IDE::read(unsigned char, unsigned char)>
c0023aa6:	83 c4 10             	add    esp,0x10
c0023aa9:	89 c6                	mov    esi,eax
c0023aab:	a8 01                	test   al,0x1
c0023aad:	74 12                	je     c0023ac1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0023aaf:	83 ec 0c             	sub    esp,0xc
c0023ab2:	b3 07                	mov    bl,0x7
c0023ab4:	68 74 cd 02 c0       	push   0xc002cd74
c0023ab9:	e8 73 f4 fe ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0023abe:	83 c4 10             	add    esp,0x10
c0023ac1:	f7 c6 02 00 00 00    	test   esi,0x2
c0023ac7:	74 12                	je     c0023adb <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0023ac9:	83 ec 0c             	sub    esp,0xc
c0023acc:	b3 03                	mov    bl,0x3
c0023ace:	68 92 cd 02 c0       	push   0xc002cd92
c0023ad3:	e8 59 f4 fe ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0023ad8:	83 c4 10             	add    esp,0x10
c0023adb:	f7 c6 04 00 00 00    	test   esi,0x4
c0023ae1:	74 12                	je     c0023af5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0023ae3:	83 ec 0c             	sub    esp,0xc
c0023ae6:	b3 14                	mov    bl,0x14
c0023ae8:	68 b2 cd 02 c0       	push   0xc002cdb2
c0023aed:	e8 3f f4 fe ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0023af2:	83 c4 10             	add    esp,0x10
c0023af5:	f7 c6 08 00 00 00    	test   esi,0x8
c0023afb:	74 12                	je     c0023b0f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0023afd:	83 ec 0c             	sub    esp,0xc
c0023b00:	b3 03                	mov    bl,0x3
c0023b02:	68 92 cd 02 c0       	push   0xc002cd92
c0023b07:	e8 25 f4 fe ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0023b0c:	83 c4 10             	add    esp,0x10
c0023b0f:	f7 c6 10 00 00 00    	test   esi,0x10
c0023b15:	74 12                	je     c0023b29 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0023b17:	83 ec 0c             	sub    esp,0xc
c0023b1a:	b3 15                	mov    bl,0x15
c0023b1c:	68 ca cd 02 c0       	push   0xc002cdca
c0023b21:	e8 0b f4 fe ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0023b26:	83 c4 10             	add    esp,0x10
c0023b29:	f7 c6 20 00 00 00    	test   esi,0x20
c0023b2f:	74 12                	je     c0023b43 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0023b31:	83 ec 0c             	sub    esp,0xc
c0023b34:	b3 03                	mov    bl,0x3
c0023b36:	68 92 cd 02 c0       	push   0xc002cd92
c0023b3b:	e8 f1 f3 fe ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0023b40:	83 c4 10             	add    esp,0x10
c0023b43:	f7 c6 40 00 00 00    	test   esi,0x40
c0023b49:	74 12                	je     c0023b5d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0023b4b:	83 ec 0c             	sub    esp,0xc
c0023b4e:	b3 16                	mov    bl,0x16
c0023b50:	68 e4 cd 02 c0       	push   0xc002cde4
c0023b55:	e8 d7 f3 fe ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0023b5a:	83 c4 10             	add    esp,0x10
c0023b5d:	89 f0                	mov    eax,esi
c0023b5f:	84 c0                	test   al,al
c0023b61:	79 42                	jns    c0023ba5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b63:	83 ec 0c             	sub    esp,0xc
c0023b66:	b3 0d                	mov    bl,0xd
c0023b68:	68 05 ce 02 c0       	push   0xc002ce05
c0023b6d:	e8 bf f3 fe ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0023b72:	83 c4 10             	add    esp,0x10
c0023b75:	eb 2e                	jmp    c0023ba5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b77:	3c 03                	cmp    al,0x3
c0023b79:	75 14                	jne    c0023b8f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0023b7b:	83 ec 0c             	sub    esp,0xc
c0023b7e:	b3 17                	mov    bl,0x17
c0023b80:	68 19 ce 02 c0       	push   0xc002ce19
c0023b85:	e8 a7 f3 fe ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0023b8a:	83 c4 10             	add    esp,0x10
c0023b8d:	eb 16                	jmp    c0023ba5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b8f:	3c 04                	cmp    al,0x4
c0023b91:	75 12                	jne    c0023ba5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b93:	83 ec 0c             	sub    esp,0xc
c0023b96:	b3 08                	mov    bl,0x8
c0023b98:	68 2f ce 02 c0       	push   0xc002ce2f
c0023b9d:	e8 8f f3 fe ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0023ba2:	83 c4 10             	add    esp,0x10
c0023ba5:	50                   	push   eax
c0023ba6:	50                   	push   eax
c0023ba7:	0f b6 c3             	movzx  eax,bl
c0023baa:	50                   	push   eax
c0023bab:	68 47 ce 02 c0       	push   0xc002ce47
c0023bb0:	e8 7c f3 fe ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0023bb5:	83 c4 10             	add    esp,0x10
c0023bb8:	83 c4 1c             	add    esp,0x1c
c0023bbb:	88 d8                	mov    al,bl
c0023bbd:	5b                   	pop    ebx
c0023bbe:	5e                   	pop    esi
c0023bbf:	5f                   	pop    edi
c0023bc0:	5d                   	pop    ebp
c0023bc1:	c3                   	ret    

c0023bc2 <IDE::polling(unsigned char, unsigned int)>:
c0023bc2:	57                   	push   edi
c0023bc3:	56                   	push   esi
c0023bc4:	53                   	push   ebx
c0023bc5:	bb 04 00 00 00       	mov    ebx,0x4
c0023bca:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023bce:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023bd3:	52                   	push   edx
c0023bd4:	6a 0c                	push   0xc
c0023bd6:	56                   	push   esi
c0023bd7:	57                   	push   edi
c0023bd8:	e8 f9 f4 ff ff       	call   c00230d6 <IDE::read(unsigned char, unsigned char)>
c0023bdd:	83 c4 10             	add    esp,0x10
c0023be0:	4b                   	dec    ebx
c0023be1:	75 f0                	jne    c0023bd3 <IDE::polling(unsigned char, unsigned int)+0x11>
c0023be3:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023be8:	50                   	push   eax
c0023be9:	6a 0c                	push   0xc
c0023beb:	56                   	push   esi
c0023bec:	57                   	push   edi
c0023bed:	e8 e4 f4 ff ff       	call   c00230d6 <IDE::read(unsigned char, unsigned char)>
c0023bf2:	83 c4 10             	add    esp,0x10
c0023bf5:	a8 01                	test   al,0x1
c0023bf7:	74 12                	je     c0023c0b <IDE::polling(unsigned char, unsigned int)+0x49>
c0023bf9:	83 ec 0c             	sub    esp,0xc
c0023bfc:	68 61 ce 02 c0       	push   0xc002ce61
c0023c01:	e8 2b f3 fe ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0023c06:	83 c4 10             	add    esp,0x10
c0023c09:	eb 17                	jmp    c0023c22 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023c0b:	a8 20                	test   al,0x20
c0023c0d:	75 0f                	jne    c0023c1e <IDE::polling(unsigned char, unsigned int)+0x5c>
c0023c0f:	4b                   	dec    ebx
c0023c10:	74 10                	je     c0023c22 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023c12:	84 c0                	test   al,al
c0023c14:	78 d2                	js     c0023be8 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023c16:	a8 08                	test   al,0x8
c0023c18:	74 ce                	je     c0023be8 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023c1a:	31 c0                	xor    eax,eax
c0023c1c:	eb 06                	jmp    c0023c24 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023c1e:	b0 01                	mov    al,0x1
c0023c20:	eb 02                	jmp    c0023c24 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023c22:	b0 02                	mov    al,0x2
c0023c24:	5b                   	pop    ebx
c0023c25:	5e                   	pop    esi
c0023c26:	5f                   	pop    edi
c0023c27:	c3                   	ret    

c0023c28 <SATABus::close(int, int, void*)>:
c0023c28:	31 c0                	xor    eax,eax
c0023c2a:	c3                   	ret    
c0023c2b:	90                   	nop

c0023c2c <SATABus::detect()>:
c0023c2c:	c3                   	ret    
c0023c2d:	90                   	nop

c0023c2e <SATABus::SATABus()>:
c0023c2e:	83 ec 0c             	sub    esp,0xc
c0023c31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c35:	83 ec 08             	sub    esp,0x8
c0023c38:	68 a4 ce 02 c0       	push   0xc002cea4
c0023c3d:	50                   	push   eax
c0023c3e:	e8 a1 0a ff ff       	call   c00146e4 <HardDiskController::HardDiskController(char const*)>
c0023c43:	83 c4 10             	add    esp,0x10
c0023c46:	ba 60 cf 02 c0       	mov    edx,0xc002cf60
c0023c4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c4f:	89 10                	mov    DWORD PTR [eax],edx
c0023c51:	83 ec 0c             	sub    esp,0xc
c0023c54:	6a 50                	push   0x50
c0023c56:	e8 c3 c3 fe ff       	call   c001001e <Phys::allocateContiguousPages(int)>
c0023c5b:	83 c4 10             	add    esp,0x10
c0023c5e:	89 c2                	mov    edx,eax
c0023c60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c64:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023c6a:	83 ec 0c             	sub    esp,0xc
c0023c6d:	6a 50                	push   0x50
c0023c6f:	e8 23 df fe ff       	call   c0011b97 <Virt::allocateKernelVirtualPages(int)>
c0023c74:	83 c4 10             	add    esp,0x10
c0023c77:	89 c2                	mov    edx,eax
c0023c79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c7d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023c83:	e8 aa e1 fe ff       	call   c0011e32 <Virt::getAKernelVAS()>
c0023c88:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023c8c:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023c92:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023c96:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023c9c:	83 ec 0c             	sub    esp,0xc
c0023c9f:	6a 03                	push   0x3
c0023ca1:	6a 50                	push   0x50
c0023ca3:	51                   	push   ecx
c0023ca4:	52                   	push   edx
c0023ca5:	50                   	push   eax
c0023ca6:	e8 b7 e9 fe ff       	call   c0012662 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023cab:	83 c4 20             	add    esp,0x20
c0023cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cb2:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0023cb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cbc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023cc2:	83 ec 04             	sub    esp,0x4
c0023cc5:	52                   	push   edx
c0023cc6:	50                   	push   eax
c0023cc7:	68 c8 ce 02 c0       	push   0xc002cec8
c0023ccc:	e8 60 f2 fe ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0023cd1:	83 c4 10             	add    esp,0x10
c0023cd4:	90                   	nop
c0023cd5:	83 c4 0c             	add    esp,0xc
c0023cd8:	c3                   	ret    
c0023cd9:	90                   	nop

c0023cda <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023cda:	83 ec 0c             	sub    esp,0xc
c0023cdd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023ce1:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023ce4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023ce7:	09 c2                	or     edx,eax
c0023ce9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ced:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023cf3:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023cf5:	31 c0                	xor    eax,eax
c0023cf7:	c1 e9 08             	shr    ecx,0x8
c0023cfa:	83 e1 0f             	and    ecx,0xf
c0023cfd:	39 c8                	cmp    eax,ecx
c0023cff:	74 0a                	je     c0023d0b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023d01:	f6 c2 01             	test   dl,0x1
c0023d04:	74 18                	je     c0023d1e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023d06:	d1 ea                	shr    edx,1
c0023d08:	40                   	inc    eax
c0023d09:	eb f2                	jmp    c0023cfd <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023d0b:	83 ec 0c             	sub    esp,0xc
c0023d0e:	68 ec ce 02 c0       	push   0xc002ceec
c0023d13:	e8 cb 68 ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c0023d18:	83 c4 10             	add    esp,0x10
c0023d1b:	83 c8 ff             	or     eax,0xffffffff
c0023d1e:	83 c4 0c             	add    esp,0xc
c0023d21:	c3                   	ret    

c0023d22 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023d22:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023d26:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023d29:	89 c2                	mov    edx,eax
c0023d2b:	c1 ea 08             	shr    edx,0x8
c0023d2e:	83 e2 0f             	and    edx,0xf
c0023d31:	fe ca                	dec    dl
c0023d33:	75 31                	jne    c0023d66 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023d35:	83 e0 0f             	and    eax,0xf
c0023d38:	3c 03                	cmp    al,0x3
c0023d3a:	75 2a                	jne    c0023d66 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023d3c:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023d3f:	b8 02 00 00 00       	mov    eax,0x2
c0023d44:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023d4a:	74 1c                	je     c0023d68 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023d4c:	b8 04 00 00 00       	mov    eax,0x4
c0023d51:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023d57:	74 0f                	je     c0023d68 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023d59:	31 c0                	xor    eax,eax
c0023d5b:	83 fa 03             	cmp    edx,0x3
c0023d5e:	0f 94 c0             	sete   al
c0023d61:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023d65:	c3                   	ret    
c0023d66:	31 c0                	xor    eax,eax
c0023d68:	c3                   	ret    
c0023d69:	90                   	nop

c0023d6a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023d6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023d6e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d71:	0f ba e2 0f          	bt     edx,0xf
c0023d75:	72 f7                	jb     c0023d6e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023d77:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d7a:	83 ca 10             	or     edx,0x10
c0023d7d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d80:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d83:	83 ca 01             	or     edx,0x1
c0023d86:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d89:	c3                   	ret    

c0023d8a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023d8a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023d8e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d91:	83 e2 fe             	and    edx,0xfffffffe
c0023d94:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d97:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d9a:	83 e2 ef             	and    edx,0xffffffef
c0023d9d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023da0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023da3:	0f ba e2 0e          	bt     edx,0xe
c0023da7:	72 f7                	jb     c0023da0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023da9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023dac:	0f ba e2 0f          	bt     edx,0xf
c0023db0:	72 ee                	jb     c0023da0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023db2:	c3                   	ret    
c0023db3:	90                   	nop

c0023db4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023db4:	55                   	push   ebp
c0023db5:	57                   	push   edi
c0023db6:	56                   	push   esi
c0023db7:	53                   	push   ebx
c0023db8:	83 ec 1c             	sub    esp,0x1c
c0023dbb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023dbf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023dc3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023dc7:	53                   	push   ebx
c0023dc8:	89 fd                	mov    ebp,edi
c0023dca:	56                   	push   esi
c0023dcb:	c1 e5 0a             	shl    ebp,0xa
c0023dce:	e8 b7 ff ff ff       	call   c0023d8a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023dd3:	83 ec 0c             	sub    esp,0xc
c0023dd6:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023ddc:	01 e8                	add    eax,ebp
c0023dde:	89 03                	mov    DWORD PTR [ebx],eax
c0023de0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023de2:	68 00 04 00 00       	push   0x400
c0023de7:	6a 00                	push   0x0
c0023de9:	50                   	push   eax
c0023dea:	e8 89 c9 fd ff       	call   c0000778 <memset>
c0023def:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023df5:	89 fa                	mov    edx,edi
c0023df7:	01 e8                	add    eax,ebp
c0023df9:	c1 e7 0d             	shl    edi,0xd
c0023dfc:	89 03                	mov    DWORD PTR [ebx],eax
c0023dfe:	c1 e2 08             	shl    edx,0x8
c0023e01:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023e08:	81 c2 00 80 00 00    	add    edx,0x8000
c0023e0e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023e12:	89 d0                	mov    eax,edx
c0023e14:	83 c4 1c             	add    esp,0x1c
c0023e17:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023e1d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023e20:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023e23:	68 00 01 00 00       	push   0x100
c0023e28:	6a 00                	push   0x0
c0023e2a:	50                   	push   eax
c0023e2b:	e8 48 c9 fd ff       	call   c0000778 <memset>
c0023e30:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023e34:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023e3a:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023e40:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023e44:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023e47:	83 c4 10             	add    esp,0x10
c0023e4a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023e51:	31 ff                	xor    edi,edi
c0023e53:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023e59:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023e5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023e63:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023e69:	83 c5 20             	add    ebp,0x20
c0023e6c:	01 f8                	add    eax,edi
c0023e6e:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023e71:	52                   	push   edx
c0023e72:	68 00 01 00 00       	push   0x100
c0023e77:	6a 00                	push   0x0
c0023e79:	50                   	push   eax
c0023e7a:	e8 f9 c8 fd ff       	call   c0000778 <memset>
c0023e7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023e83:	83 c4 10             	add    esp,0x10
c0023e86:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023e8c:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023e93:	01 f8                	add    eax,edi
c0023e95:	81 c7 00 01 00 00    	add    edi,0x100
c0023e9b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023e9e:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023ea4:	75 b3                	jne    c0023e59 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023ea6:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023eaa:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023eae:	83 c4 1c             	add    esp,0x1c
c0023eb1:	5b                   	pop    ebx
c0023eb2:	5e                   	pop    esi
c0023eb3:	5f                   	pop    edi
c0023eb4:	5d                   	pop    ebp
c0023eb5:	e9 b0 fe ff ff       	jmp    c0023d6a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023eba <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023eba:	55                   	push   ebp
c0023ebb:	57                   	push   edi
c0023ebc:	56                   	push   esi
c0023ebd:	53                   	push   ebx
c0023ebe:	31 db                	xor    ebx,ebx
c0023ec0:	83 ec 0c             	sub    esp,0xc
c0023ec3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023ec7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023ecb:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023ece:	f7 c7 01 00 00 00    	test   edi,0x1
c0023ed4:	0f 84 aa 00 00 00    	je     c0023f84 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023eda:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023ede:	89 d8                	mov    eax,ebx
c0023ee0:	c1 e0 07             	shl    eax,0x7
c0023ee3:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023eea:	55                   	push   ebp
c0023eeb:	56                   	push   esi
c0023eec:	e8 31 fe ff ff       	call   c0023d22 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023ef1:	5a                   	pop    edx
c0023ef2:	83 f8 01             	cmp    eax,0x1
c0023ef5:	59                   	pop    ecx
c0023ef6:	75 30                	jne    c0023f28 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0023ef8:	50                   	push   eax
c0023ef9:	50                   	push   eax
c0023efa:	53                   	push   ebx
c0023efb:	68 11 cf 02 c0       	push   0xc002cf11
c0023f00:	e8 2c f0 fe ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0023f05:	83 c4 0c             	add    esp,0xc
c0023f08:	53                   	push   ebx
c0023f09:	55                   	push   ebp
c0023f0a:	56                   	push   esi
c0023f0b:	e8 a4 fe ff ff       	call   c0023db4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023f10:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023f17:	e8 24 b9 fe ff       	call   c000f840 <malloc>
c0023f1c:	89 c5                	mov    ebp,eax
c0023f1e:	89 04 24             	mov    DWORD PTR [esp],eax
c0023f21:	e8 60 0d 00 00       	call   c0024c86 <SATA::SATA()>
c0023f26:	eb 33                	jmp    c0023f5b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0023f28:	83 f8 04             	cmp    eax,0x4
c0023f2b:	75 47                	jne    c0023f74 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0023f2d:	50                   	push   eax
c0023f2e:	50                   	push   eax
c0023f2f:	53                   	push   ebx
c0023f30:	68 28 cf 02 c0       	push   0xc002cf28
c0023f35:	e8 f7 ef fe ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0023f3a:	83 c4 0c             	add    esp,0xc
c0023f3d:	53                   	push   ebx
c0023f3e:	55                   	push   ebp
c0023f3f:	56                   	push   esi
c0023f40:	e8 6f fe ff ff       	call   c0023db4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023f45:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023f4c:	e8 ef b8 fe ff       	call   c000f840 <malloc>
c0023f51:	89 c5                	mov    ebp,eax
c0023f53:	89 04 24             	mov    DWORD PTR [esp],eax
c0023f56:	e8 d7 10 00 00       	call   c0025032 <SATAPI::SATAPI()>
c0023f5b:	5a                   	pop    edx
c0023f5c:	59                   	pop    ecx
c0023f5d:	55                   	push   ebp
c0023f5e:	56                   	push   esi
c0023f5f:	e8 f4 03 ff ff       	call   c0014358 <Device::addChild(Device*)>
c0023f64:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023f67:	56                   	push   esi
c0023f68:	6a 00                	push   0x0
c0023f6a:	53                   	push   ebx
c0023f6b:	55                   	push   ebp
c0023f6c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023f6f:	83 c4 20             	add    esp,0x20
c0023f72:	eb 10                	jmp    c0023f84 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023f74:	50                   	push   eax
c0023f75:	50                   	push   eax
c0023f76:	53                   	push   ebx
c0023f77:	68 41 cf 02 c0       	push   0xc002cf41
c0023f7c:	e8 b0 ef fe ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0023f81:	83 c4 10             	add    esp,0x10
c0023f84:	d1 ef                	shr    edi,1
c0023f86:	43                   	inc    ebx
c0023f87:	83 fb 20             	cmp    ebx,0x20
c0023f8a:	0f 85 3e ff ff ff    	jne    c0023ece <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023f90:	83 c4 0c             	add    esp,0xc
c0023f93:	5b                   	pop    ebx
c0023f94:	5e                   	pop    esi
c0023f95:	5f                   	pop    edi
c0023f96:	5d                   	pop    ebp
c0023f97:	c3                   	ret    

c0023f98 <SATABus::open(int, int, void*)>:
c0023f98:	83 ec 14             	sub    esp,0x14
c0023f9b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023f9f:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023fa5:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023fab:	52                   	push   edx
c0023fac:	50                   	push   eax
c0023fad:	e8 08 ff ff ff       	call   c0023eba <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023fb2:	31 c0                	xor    eax,eax
c0023fb4:	83 c4 1c             	add    esp,0x1c
c0023fb7:	c3                   	ret    

c0023fb8 <ATA::close(int, int, void*)>:
c0023fb8:	83 ec 0c             	sub    esp,0xc
c0023fbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023fbf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023fc5:	85 c0                	test   eax,eax
c0023fc7:	74 0c                	je     c0023fd5 <ATA::close(int, int, void*)+0x1d>
c0023fc9:	83 ec 0c             	sub    esp,0xc
c0023fcc:	8b 10                	mov    edx,DWORD PTR [eax]
c0023fce:	50                   	push   eax
c0023fcf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023fd2:	83 c4 10             	add    esp,0x10
c0023fd5:	31 c0                	xor    eax,eax
c0023fd7:	83 c4 0c             	add    esp,0xc
c0023fda:	c3                   	ret    
c0023fdb:	90                   	nop

c0023fdc <ATA::powerSaving(PowerSavingLevel)>:
c0023fdc:	c3                   	ret    
c0023fdd:	90                   	nop

c0023fde <ATA::ATA()>:
c0023fde:	83 ec 0c             	sub    esp,0xc
c0023fe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023fe5:	83 ec 04             	sub    esp,0x4
c0023fe8:	68 00 02 00 00       	push   0x200
c0023fed:	68 29 d0 02 c0       	push   0xc002d029
c0023ff2:	50                   	push   eax
c0023ff3:	e8 84 07 ff ff       	call   c001477c <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023ff8:	83 c4 10             	add    esp,0x10
c0023ffb:	ba ac cf 02 c0       	mov    edx,0xc002cfac
c0024000:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024004:	89 10                	mov    DWORD PTR [eax],edx
c0024006:	90                   	nop
c0024007:	83 c4 0c             	add    esp,0xc
c002400a:	c3                   	ret    
c002400b:	90                   	nop

c002400c <ATA::flush(bool)>:
c002400c:	53                   	push   ebx
c002400d:	83 ec 08             	sub    esp,0x8
c0024010:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0024015:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024019:	19 c0                	sbb    eax,eax
c002401b:	83 e0 fd             	and    eax,0xfffffffd
c002401e:	05 ea 00 00 00       	add    eax,0xea
c0024023:	50                   	push   eax
c0024024:	6a 07                	push   0x7
c0024026:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002402d:	50                   	push   eax
c002402e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024034:	e8 dd ef ff ff       	call   c0023016 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024039:	83 c4 0c             	add    esp,0xc
c002403c:	6a 00                	push   0x0
c002403e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024045:	50                   	push   eax
c0024046:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002404c:	e8 71 fb ff ff       	call   c0023bc2 <IDE::polling(unsigned char, unsigned int)>
c0024051:	83 c4 18             	add    esp,0x18
c0024054:	5b                   	pop    ebx
c0024055:	c3                   	ret    

c0024056 <ATA::readyForCommand()>:
c0024056:	56                   	push   esi
c0024057:	53                   	push   ebx
c0024058:	31 db                	xor    ebx,ebx
c002405a:	50                   	push   eax
c002405b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002405f:	50                   	push   eax
c0024060:	6a 0c                	push   0xc
c0024062:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024069:	50                   	push   eax
c002406a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024070:	e8 61 f0 ff ff       	call   c00230d6 <IDE::read(unsigned char, unsigned char)>
c0024075:	83 c4 10             	add    esp,0x10
c0024078:	a8 88                	test   al,0x88
c002407a:	74 23                	je     c002409f <ATA::readyForCommand()+0x49>
c002407c:	43                   	inc    ebx
c002407d:	83 fb 63             	cmp    ebx,0x63
c0024080:	7e dd                	jle    c002405f <ATA::readyForCommand()+0x9>
c0024082:	51                   	push   ecx
c0024083:	51                   	push   ecx
c0024084:	6a 00                	push   0x0
c0024086:	68 40 42 0f 00       	push   0xf4240
c002408b:	e8 c8 a2 ff ff       	call   c001e358 <nanoSleep(unsigned long long)>
c0024090:	83 c4 10             	add    esp,0x10
c0024093:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024099:	75 c4                	jne    c002405f <ATA::readyForCommand()+0x9>
c002409b:	31 c0                	xor    eax,eax
c002409d:	eb 02                	jmp    c00240a1 <ATA::readyForCommand()+0x4b>
c002409f:	b0 01                	mov    al,0x1
c00240a1:	5a                   	pop    edx
c00240a2:	5b                   	pop    ebx
c00240a3:	5e                   	pop    esi
c00240a4:	c3                   	ret    
c00240a5:	90                   	nop

c00240a6 <ATA::access(unsigned long long, int, void*, bool)>:
c00240a6:	55                   	push   ebp
c00240a7:	57                   	push   edi
c00240a8:	56                   	push   esi
c00240a9:	53                   	push   ebx
c00240aa:	83 ec 2c             	sub    esp,0x2c
c00240ad:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00240b1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00240b5:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00240b9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00240bd:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00240c1:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00240c5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00240c9:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00240cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00240d3:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00240d9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00240dd:	c1 e0 06             	shl    eax,0x6
c00240e0:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c00240e8:	74 5d                	je     c0024147 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c00240ea:	89 fa                	mov    edx,edi
c00240ec:	89 f0                	mov    eax,esi
c00240ee:	0f ac d0 1c          	shrd   eax,edx,0x1c
c00240f2:	c1 ea 1c             	shr    edx,0x1c
c00240f5:	89 d1                	mov    ecx,edx
c00240f7:	09 c1                	or     ecx,eax
c00240f9:	74 25                	je     c0024120 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c00240fb:	31 ed                	xor    ebp,ebp
c00240fd:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0024104:	89 fa                	mov    edx,edi
c0024106:	89 f0                	mov    eax,esi
c0024108:	0f ad d0             	shrd   eax,edx,cl
c002410b:	d3 ea                	shr    edx,cl
c002410d:	f6 c1 20             	test   cl,0x20
c0024110:	74 02                	je     c0024114 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0024112:	89 d0                	mov    eax,edx
c0024114:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0024118:	45                   	inc    ebp
c0024119:	83 fd 06             	cmp    ebp,0x6
c002411c:	75 df                	jne    c00240fd <ATA::access(unsigned long long, int, void*, bool)+0x57>
c002411e:	eb 76                	jmp    c0024196 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0024120:	89 f0                	mov    eax,esi
c0024122:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0024127:	89 fa                	mov    edx,edi
c0024129:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024130:	0f ac d0 10          	shrd   eax,edx,0x10
c0024134:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024139:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002413d:	c1 ee 18             	shr    esi,0x18
c0024140:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0024145:	eb 56                	jmp    c002419d <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024147:	6a 00                	push   0x0
c0024149:	6a 3f                	push   0x3f
c002414b:	57                   	push   edi
c002414c:	56                   	push   esi
c002414d:	e8 9a 29 00 00       	call   c0026aec <__umoddi3>
c0024152:	83 c4 10             	add    esp,0x10
c0024155:	40                   	inc    eax
c0024156:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c002415a:	6a 00                	push   0x0
c002415c:	68 f0 03 00 00       	push   0x3f0
c0024161:	57                   	push   edi
c0024162:	56                   	push   esi
c0024163:	e8 84 28 00 00       	call   c00269ec <__udivdi3>
c0024168:	83 c4 10             	add    esp,0x10
c002416b:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0024170:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024177:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002417c:	6a 00                	push   0x0
c002417e:	6a 3f                	push   0x3f
c0024180:	57                   	push   edi
c0024181:	56                   	push   esi
c0024182:	e8 65 28 00 00       	call   c00269ec <__udivdi3>
c0024187:	83 c4 10             	add    esp,0x10
c002418a:	89 c6                	mov    esi,eax
c002418c:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0024191:	83 e6 0f             	and    esi,0xf
c0024194:	eb 07                	jmp    c002419d <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024196:	31 f6                	xor    esi,esi
c0024198:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c002419d:	bf 01 00 00 00       	mov    edi,0x1
c00241a2:	50                   	push   eax
c00241a3:	6a 00                	push   0x0
c00241a5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241ac:	50                   	push   eax
c00241ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00241b1:	e8 6c f0 ff ff       	call   c0023222 <IDE::enableIRQs(unsigned char, bool)>
c00241b6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00241b9:	e8 98 fe ff ff       	call   c0024056 <ATA::readyForCommand()>
c00241be:	83 c4 10             	add    esp,0x10
c00241c1:	84 c0                	test   al,al
c00241c3:	0f 84 5a 02 00 00    	je     c0024423 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c00241c9:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00241cf:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00241d5:	c1 e0 04             	shl    eax,0x4
c00241d8:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c00241df:	09 c6                	or     esi,eax
c00241e1:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c00241e6:	75 05                	jne    c00241ed <ATA::access(unsigned long long, int, void*, bool)+0x147>
c00241e8:	83 ce a0             	or     esi,0xffffffa0
c00241eb:	eb 03                	jmp    c00241f0 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c00241ed:	83 ce e0             	or     esi,0xffffffe0
c00241f0:	89 f0                	mov    eax,esi
c00241f2:	0f b6 f0             	movzx  esi,al
c00241f5:	56                   	push   esi
c00241f6:	6a 06                	push   0x6
c00241f8:	51                   	push   ecx
c00241f9:	52                   	push   edx
c00241fa:	e8 17 ee ff ff       	call   c0023016 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241ff:	83 c4 10             	add    esp,0x10
c0024202:	6a 00                	push   0x0
c0024204:	6a 01                	push   0x1
c0024206:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002420d:	50                   	push   eax
c002420e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024214:	e8 fd ed ff ff       	call   c0023016 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024219:	83 c4 10             	add    esp,0x10
c002421c:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024221:	75 6e                	jne    c0024291 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0024223:	6a 00                	push   0x0
c0024225:	6a 08                	push   0x8
c0024227:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002422e:	50                   	push   eax
c002422f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024235:	e8 dc ed ff ff       	call   c0023016 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002423a:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c002423f:	50                   	push   eax
c0024240:	6a 09                	push   0x9
c0024242:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024249:	50                   	push   eax
c002424a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024250:	e8 c1 ed ff ff       	call   c0023016 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024255:	83 c4 20             	add    esp,0x20
c0024258:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c002425d:	50                   	push   eax
c002425e:	6a 0a                	push   0xa
c0024260:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024267:	50                   	push   eax
c0024268:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002426e:	e8 a3 ed ff ff       	call   c0023016 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024273:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024278:	50                   	push   eax
c0024279:	6a 0b                	push   0xb
c002427b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024282:	50                   	push   eax
c0024283:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024289:	e8 88 ed ff ff       	call   c0023016 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002428e:	83 c4 20             	add    esp,0x20
c0024291:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024296:	50                   	push   eax
c0024297:	6a 02                	push   0x2
c0024299:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242a0:	50                   	push   eax
c00242a1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242a7:	e8 6a ed ff ff       	call   c0023016 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242ac:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c00242b1:	50                   	push   eax
c00242b2:	6a 03                	push   0x3
c00242b4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242bb:	50                   	push   eax
c00242bc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242c2:	e8 4f ed ff ff       	call   c0023016 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242c7:	83 c4 20             	add    esp,0x20
c00242ca:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00242cf:	50                   	push   eax
c00242d0:	6a 04                	push   0x4
c00242d2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242d9:	50                   	push   eax
c00242da:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242e0:	e8 31 ed ff ff       	call   c0023016 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242e5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00242ea:	50                   	push   eax
c00242eb:	6a 05                	push   0x5
c00242ed:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242f4:	50                   	push   eax
c00242f5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242fb:	e8 16 ed ff ff       	call   c0023016 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024300:	83 c4 20             	add    esp,0x20
c0024303:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024308:	0f 94 c0             	sete   al
c002430b:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024310:	74 09                	je     c002431b <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0024312:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024319:	eb 07                	jmp    c0024322 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c002431b:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0024322:	0f b6 c0             	movzx  eax,al
c0024325:	50                   	push   eax
c0024326:	6a 07                	push   0x7
c0024328:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002432f:	50                   	push   eax
c0024330:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024336:	e8 db ec ff ff       	call   c0023016 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002433b:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002433f:	83 c4 10             	add    esp,0x10
c0024342:	85 f6                	test   esi,esi
c0024344:	0f 84 ba 00 00 00    	je     c0024404 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c002434a:	50                   	push   eax
c002434b:	6a 01                	push   0x1
c002434d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024354:	50                   	push   eax
c0024355:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002435b:	e8 62 f8 ff ff       	call   c0023bc2 <IDE::polling(unsigned char, unsigned int)>
c0024360:	83 c4 10             	add    esp,0x10
c0024363:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024369:	84 c0                	test   al,al
c002436b:	74 2c                	je     c0024399 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c002436d:	0f b6 f8             	movzx  edi,al
c0024370:	0f b6 d2             	movzx  edx,dl
c0024373:	57                   	push   edi
c0024374:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c002437b:	50                   	push   eax
c002437c:	52                   	push   edx
c002437d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024383:	e8 a4 f6 ff ff       	call   c0023a2c <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024388:	c7 04 24 84 cf 02 c0 	mov    DWORD PTR [esp],0xc002cf84
c002438f:	e8 9d eb fe ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0024394:	e9 87 00 00 00       	jmp    c0024420 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024399:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c002439e:	74 33                	je     c00243d3 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c00243a0:	31 ed                	xor    ebp,ebp
c00243a2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00243a6:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c00243aa:	50                   	push   eax
c00243ab:	50                   	push   eax
c00243ac:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243b3:	50                   	push   eax
c00243b4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243ba:	e8 45 ec ff ff       	call   c0023004 <IDE::getBase(unsigned char)>
c00243bf:	89 c2                	mov    edx,eax
c00243c1:	89 f8                	mov    eax,edi
c00243c3:	66 ef                	out    dx,ax
c00243c5:	45                   	inc    ebp
c00243c6:	83 c4 10             	add    esp,0x10
c00243c9:	81 fd 00 01 00 00    	cmp    ebp,0x100
c00243cf:	75 d1                	jne    c00243a2 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c00243d1:	eb 23                	jmp    c00243f6 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c00243d3:	0f b6 d2             	movzx  edx,dl
c00243d6:	51                   	push   ecx
c00243d7:	51                   	push   ecx
c00243d8:	52                   	push   edx
c00243d9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243df:	e8 20 ec ff ff       	call   c0023004 <IDE::getBase(unsigned char)>
c00243e4:	b9 00 01 00 00       	mov    ecx,0x100
c00243e9:	89 c2                	mov    edx,eax
c00243eb:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c00243ef:	fc                   	cld    
c00243f0:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c00243f3:	83 c4 10             	add    esp,0x10
c00243f6:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c00243fe:	4e                   	dec    esi
c00243ff:	e9 3e ff ff ff       	jmp    c0024342 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024404:	31 ff                	xor    edi,edi
c0024406:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002440b:	74 16                	je     c0024423 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c002440d:	50                   	push   eax
c002440e:	50                   	push   eax
c002440f:	31 c0                	xor    eax,eax
c0024411:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024416:	0f 94 c0             	sete   al
c0024419:	50                   	push   eax
c002441a:	53                   	push   ebx
c002441b:	e8 ec fb ff ff       	call   c002400c <ATA::flush(bool)>
c0024420:	83 c4 10             	add    esp,0x10
c0024423:	83 c4 2c             	add    esp,0x2c
c0024426:	89 f8                	mov    eax,edi
c0024428:	5b                   	pop    ebx
c0024429:	5e                   	pop    esi
c002442a:	5f                   	pop    edi
c002442b:	5d                   	pop    ebp
c002442c:	c3                   	ret    
c002442d:	90                   	nop

c002442e <ATA::read(unsigned long long, int, void*)>:
c002442e:	57                   	push   edi
c002442f:	b8 04 00 00 00       	mov    eax,0x4
c0024434:	56                   	push   esi
c0024435:	53                   	push   ebx
c0024436:	83 ec 10             	sub    esp,0x10
c0024439:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002443d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024441:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024444:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024448:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002444c:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024452:	77 3b                	ja     c002448f <ATA::read(unsigned long long, int, void*)+0x61>
c0024454:	b8 06 00 00 00       	mov    eax,0x6
c0024459:	85 d2                	test   edx,edx
c002445b:	74 32                	je     c002448f <ATA::read(unsigned long long, int, void*)+0x61>
c002445d:	50                   	push   eax
c002445e:	50                   	push   eax
c002445f:	6a 00                	push   0x0
c0024461:	52                   	push   edx
c0024462:	53                   	push   ebx
c0024463:	57                   	push   edi
c0024464:	56                   	push   esi
c0024465:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024469:	e8 38 fc ff ff       	call   c00240a6 <ATA::access(unsigned long long, int, void*, bool)>
c002446e:	83 c4 20             	add    esp,0x20
c0024471:	85 c0                	test   eax,eax
c0024473:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024477:	75 11                	jne    c002448a <ATA::read(unsigned long long, int, void*)+0x5c>
c0024479:	01 1d 28 29 03 c0    	add    DWORD PTR ds:0xc0032928,ebx
c002447f:	e8 68 c5 fe ff       	call   c00109ec <VgaText::updateDiskUsage()>
c0024484:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024488:	eb 05                	jmp    c002448f <ATA::read(unsigned long long, int, void*)+0x61>
c002448a:	b8 01 00 00 00       	mov    eax,0x1
c002448f:	83 c4 10             	add    esp,0x10
c0024492:	5b                   	pop    ebx
c0024493:	5e                   	pop    esi
c0024494:	5f                   	pop    edi
c0024495:	c3                   	ret    

c0024496 <ATA::write(unsigned long long, int, void*)>:
c0024496:	57                   	push   edi
c0024497:	b8 04 00 00 00       	mov    eax,0x4
c002449c:	56                   	push   esi
c002449d:	53                   	push   ebx
c002449e:	83 ec 10             	sub    esp,0x10
c00244a1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00244a5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00244a9:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00244ac:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00244b0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00244b4:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00244ba:	77 3b                	ja     c00244f7 <ATA::write(unsigned long long, int, void*)+0x61>
c00244bc:	b8 06 00 00 00       	mov    eax,0x6
c00244c1:	85 d2                	test   edx,edx
c00244c3:	74 32                	je     c00244f7 <ATA::write(unsigned long long, int, void*)+0x61>
c00244c5:	50                   	push   eax
c00244c6:	50                   	push   eax
c00244c7:	6a 01                	push   0x1
c00244c9:	52                   	push   edx
c00244ca:	53                   	push   ebx
c00244cb:	57                   	push   edi
c00244cc:	56                   	push   esi
c00244cd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00244d1:	e8 d0 fb ff ff       	call   c00240a6 <ATA::access(unsigned long long, int, void*, bool)>
c00244d6:	83 c4 20             	add    esp,0x20
c00244d9:	85 c0                	test   eax,eax
c00244db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00244df:	75 11                	jne    c00244f2 <ATA::write(unsigned long long, int, void*)+0x5c>
c00244e1:	01 1d 24 29 03 c0    	add    DWORD PTR ds:0xc0032924,ebx
c00244e7:	e8 00 c5 fe ff       	call   c00109ec <VgaText::updateDiskUsage()>
c00244ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00244f0:	eb 05                	jmp    c00244f7 <ATA::write(unsigned long long, int, void*)+0x61>
c00244f2:	b8 01 00 00 00       	mov    eax,0x1
c00244f7:	83 c4 10             	add    esp,0x10
c00244fa:	5b                   	pop    ebx
c00244fb:	5e                   	pop    esi
c00244fc:	5f                   	pop    edi
c00244fd:	c3                   	ret    

c00244fe <ATA::detectCHS()>:
c00244fe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024502:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024508:	c1 e0 06             	shl    eax,0x6
c002450b:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024511:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002451b:	c7 44 24 04 8f cf 02 c0 	mov    DWORD PTR [esp+0x4],0xc002cf8f
c0024523:	e9 bb 60 ff ff       	jmp    c001a5e3 <Krnl::panic(char const*)>

c0024528 <ATA::open(int, int, void*)>:
c0024528:	53                   	push   ebx
c0024529:	83 ec 08             	sub    esp,0x8
c002452c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024530:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024534:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024538:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002453e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024544:	c1 e0 06             	shl    eax,0x6
c0024547:	01 d0                	add    eax,edx
c0024549:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024550:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024556:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002455d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024567:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c002456d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024574:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002457b:	75 0c                	jne    c0024589 <ATA::open(int, int, void*)+0x61>
c002457d:	83 ec 0c             	sub    esp,0xc
c0024580:	53                   	push   ebx
c0024581:	e8 78 ff ff ff       	call   c00244fe <ATA::detectCHS()>
c0024586:	83 c4 10             	add    esp,0x10
c0024589:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002458f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024595:	c1 e0 06             	shl    eax,0x6
c0024598:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c002459f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00245a9:	d1 e8                	shr    eax,1
c00245ab:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00245b1:	6a 04                	push   0x4
c00245b3:	6a 0c                	push   0xc
c00245b5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00245bc:	50                   	push   eax
c00245bd:	52                   	push   edx
c00245be:	e8 53 ea ff ff       	call   c0023016 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245c3:	90                   	nop
c00245c4:	90                   	nop
c00245c5:	6a 00                	push   0x0
c00245c7:	6a 0c                	push   0xc
c00245c9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00245d0:	50                   	push   eax
c00245d1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00245d7:	e8 3a ea ff ff       	call   c0023016 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245dc:	83 c4 14             	add    esp,0x14
c00245df:	53                   	push   ebx
c00245e0:	e8 ff 01 ff ff       	call   c00147e4 <PhysicalDisk::startCache()>
c00245e5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00245e8:	e8 7d 23 ff ff       	call   c001696a <createPartitionsForDisk(PhysicalDisk*)>
c00245ed:	31 c0                	xor    eax,eax
c00245ef:	83 c4 18             	add    esp,0x18
c00245f2:	5b                   	pop    ebx
c00245f3:	c3                   	ret    

c00245f4 <ATAPI::write(unsigned long long, int, void*)>:
c00245f4:	b8 03 00 00 00       	mov    eax,0x3
c00245f9:	c3                   	ret    

c00245fa <ATAPI::close(int, int, void*)>:
c00245fa:	83 ec 0c             	sub    esp,0xc
c00245fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024601:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024607:	85 c0                	test   eax,eax
c0024609:	74 0c                	je     c0024617 <ATAPI::close(int, int, void*)+0x1d>
c002460b:	83 ec 0c             	sub    esp,0xc
c002460e:	8b 10                	mov    edx,DWORD PTR [eax]
c0024610:	50                   	push   eax
c0024611:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024614:	83 c4 10             	add    esp,0x10
c0024617:	31 c0                	xor    eax,eax
c0024619:	83 c4 0c             	add    esp,0xc
c002461c:	c3                   	ret    
c002461d:	90                   	nop

c002461e <ATAPI::ATAPI()>:
c002461e:	83 ec 0c             	sub    esp,0xc
c0024621:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024625:	83 ec 04             	sub    esp,0x4
c0024628:	68 00 08 00 00       	push   0x800
c002462d:	68 c9 d0 02 c0       	push   0xc002d0c9
c0024632:	50                   	push   eax
c0024633:	e8 44 01 ff ff       	call   c001477c <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024638:	83 c4 10             	add    esp,0x10
c002463b:	ba e4 cf 02 c0       	mov    edx,0xc002cfe4
c0024640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024644:	89 10                	mov    DWORD PTR [eax],edx
c0024646:	90                   	nop
c0024647:	83 c4 0c             	add    esp,0xc
c002464a:	c3                   	ret    
c002464b:	90                   	nop

c002464c <ATAPI::readyForCommand()>:
c002464c:	56                   	push   esi
c002464d:	53                   	push   ebx
c002464e:	31 db                	xor    ebx,ebx
c0024650:	50                   	push   eax
c0024651:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024655:	50                   	push   eax
c0024656:	6a 0c                	push   0xc
c0024658:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002465f:	50                   	push   eax
c0024660:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024666:	e8 6b ea ff ff       	call   c00230d6 <IDE::read(unsigned char, unsigned char)>
c002466b:	83 c4 10             	add    esp,0x10
c002466e:	a8 88                	test   al,0x88
c0024670:	74 23                	je     c0024695 <ATAPI::readyForCommand()+0x49>
c0024672:	43                   	inc    ebx
c0024673:	83 fb 63             	cmp    ebx,0x63
c0024676:	7e dd                	jle    c0024655 <ATAPI::readyForCommand()+0x9>
c0024678:	51                   	push   ecx
c0024679:	51                   	push   ecx
c002467a:	6a 00                	push   0x0
c002467c:	68 40 42 0f 00       	push   0xf4240
c0024681:	e8 d2 9c ff ff       	call   c001e358 <nanoSleep(unsigned long long)>
c0024686:	83 c4 10             	add    esp,0x10
c0024689:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002468f:	75 c4                	jne    c0024655 <ATAPI::readyForCommand()+0x9>
c0024691:	31 c0                	xor    eax,eax
c0024693:	eb 02                	jmp    c0024697 <ATAPI::readyForCommand()+0x4b>
c0024695:	b0 01                	mov    al,0x1
c0024697:	5a                   	pop    edx
c0024698:	5b                   	pop    ebx
c0024699:	5e                   	pop    esi
c002469a:	c3                   	ret    
c002469b:	90                   	nop

c002469c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c002469c:	55                   	push   ebp
c002469d:	57                   	push   edi
c002469e:	56                   	push   esi
c002469f:	53                   	push   ebx
c00246a0:	83 ec 20             	sub    esp,0x20
c00246a3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00246a7:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00246ab:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00246af:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00246b3:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00246b7:	6a 01                	push   0x1
c00246b9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246c0:	50                   	push   eax
c00246c1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246c7:	e8 56 eb ff ff       	call   c0023222 <IDE::enableIRQs(unsigned char, bool)>
c00246cc:	5e                   	pop    esi
c00246cd:	58                   	pop    eax
c00246ce:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246d5:	50                   	push   eax
c00246d6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246dc:	e8 0f e9 ff ff       	call   c0022ff0 <IDE::prepareInterrupt(unsigned char)>
c00246e1:	89 3c 24             	mov    DWORD PTR [esp],edi
c00246e4:	e8 63 ff ff ff       	call   c002464c <ATAPI::readyForCommand()>
c00246e9:	83 c4 10             	add    esp,0x10
c00246ec:	84 c0                	test   al,al
c00246ee:	75 0a                	jne    c00246fa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c00246f0:	bb 01 00 00 00       	mov    ebx,0x1
c00246f5:	e9 57 02 00 00       	jmp    c0024951 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00246fa:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0024700:	c1 e0 04             	shl    eax,0x4
c0024703:	0f b6 c0             	movzx  eax,al
c0024706:	50                   	push   eax
c0024707:	6a 06                	push   0x6
c0024709:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024710:	50                   	push   eax
c0024711:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024717:	e8 fa e8 ff ff       	call   c0023016 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002471c:	6a 00                	push   0x0
c002471e:	6a 01                	push   0x1
c0024720:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024727:	50                   	push   eax
c0024728:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002472e:	e8 e3 e8 ff ff       	call   c0023016 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024733:	83 c4 20             	add    esp,0x20
c0024736:	0f b6 c3             	movzx  eax,bl
c0024739:	0f b6 df             	movzx  ebx,bh
c002473c:	50                   	push   eax
c002473d:	6a 04                	push   0x4
c002473f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024746:	50                   	push   eax
c0024747:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002474d:	e8 c4 e8 ff ff       	call   c0023016 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024752:	53                   	push   ebx
c0024753:	6a 05                	push   0x5
c0024755:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002475c:	50                   	push   eax
c002475d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024763:	e8 ae e8 ff ff       	call   c0023016 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024768:	83 c4 20             	add    esp,0x20
c002476b:	68 a0 00 00 00       	push   0xa0
c0024770:	6a 07                	push   0x7
c0024772:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024779:	50                   	push   eax
c002477a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024780:	e8 91 e8 ff ff       	call   c0023016 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024785:	83 c4 0c             	add    esp,0xc
c0024788:	6a 01                	push   0x1
c002478a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024791:	50                   	push   eax
c0024792:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024798:	e8 25 f4 ff ff       	call   c0023bc2 <IDE::polling(unsigned char, unsigned int)>
c002479d:	83 c4 10             	add    esp,0x10
c00247a0:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c00247a6:	84 c0                	test   al,al
c00247a8:	74 23                	je     c00247cd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c00247aa:	0f b6 d8             	movzx  ebx,al
c00247ad:	0f b6 d2             	movzx  edx,dl
c00247b0:	53                   	push   ebx
c00247b1:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c00247b8:	50                   	push   eax
c00247b9:	52                   	push   edx
c00247ba:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247c0:	e8 67 f2 ff ff       	call   c0023a2c <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00247c5:	83 c4 10             	add    esp,0x10
c00247c8:	e9 84 01 00 00       	jmp    c0024951 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00247cd:	0f b6 d2             	movzx  edx,dl
c00247d0:	53                   	push   ebx
c00247d1:	53                   	push   ebx
c00247d2:	52                   	push   edx
c00247d3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247d9:	e8 26 e8 ff ff       	call   c0023004 <IDE::getBase(unsigned char)>
c00247de:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00247e2:	b9 06 00 00 00       	mov    ecx,0x6
c00247e7:	89 c2                	mov    edx,eax
c00247e9:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00247ec:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00247f0:	83 c4 10             	add    esp,0x10
c00247f3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00247f9:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024800:	85 db                	test   ebx,ebx
c0024802:	0f 84 ec 00 00 00    	je     c00248f4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024808:	51                   	push   ecx
c0024809:	51                   	push   ecx
c002480a:	52                   	push   edx
c002480b:	50                   	push   eax
c002480c:	e8 73 e9 ff ff       	call   c0023184 <IDE::waitInterrupt(unsigned char)>
c0024811:	83 c4 10             	add    esp,0x10
c0024814:	84 c0                	test   al,al
c0024816:	0f 84 d4 fe ff ff    	je     c00246f0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002481c:	56                   	push   esi
c002481d:	56                   	push   esi
c002481e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024825:	50                   	push   eax
c0024826:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002482c:	e8 bf e7 ff ff       	call   c0022ff0 <IDE::prepareInterrupt(unsigned char)>
c0024831:	83 c4 0c             	add    esp,0xc
c0024834:	6a 04                	push   0x4
c0024836:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002483d:	50                   	push   eax
c002483e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024844:	e8 8d e8 ff ff       	call   c00230d6 <IDE::read(unsigned char, unsigned char)>
c0024849:	83 c4 0c             	add    esp,0xc
c002484c:	89 c6                	mov    esi,eax
c002484e:	6a 05                	push   0x5
c0024850:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024857:	50                   	push   eax
c0024858:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002485e:	e8 73 e8 ff ff       	call   c00230d6 <IDE::read(unsigned char, unsigned char)>
c0024863:	89 f1                	mov    ecx,esi
c0024865:	0f b6 c0             	movzx  eax,al
c0024868:	0f b6 f1             	movzx  esi,cl
c002486b:	c1 e0 08             	shl    eax,0x8
c002486e:	09 c6                	or     esi,eax
c0024870:	d1 fe                	sar    esi,1
c0024872:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0024876:	83 c4 10             	add    esp,0x10
c0024879:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c002487e:	74 41                	je     c00248c1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0024880:	31 c9                	xor    ecx,ecx
c0024882:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024888:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002488f:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0024893:	75 0a                	jne    c002489f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0024895:	01 c9                	add    ecx,ecx
c0024897:	01 cd                	add    ebp,ecx
c0024899:	4b                   	dec    ebx
c002489a:	e9 54 ff ff ff       	jmp    c00247f3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c002489f:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00248a4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00248a8:	51                   	push   ecx
c00248a9:	51                   	push   ecx
c00248aa:	52                   	push   edx
c00248ab:	50                   	push   eax
c00248ac:	e8 53 e7 ff ff       	call   c0023004 <IDE::getBase(unsigned char)>
c00248b1:	89 c2                	mov    edx,eax
c00248b3:	89 f0                	mov    eax,esi
c00248b5:	66 ef                	out    dx,ax
c00248b7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00248bb:	83 c4 10             	add    esp,0x10
c00248be:	41                   	inc    ecx
c00248bf:	eb c1                	jmp    c0024882 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c00248c1:	31 f6                	xor    esi,esi
c00248c3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00248c9:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00248d0:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00248d4:	75 06                	jne    c00248dc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c00248d6:	01 f6                	add    esi,esi
c00248d8:	01 f5                	add    ebp,esi
c00248da:	eb bd                	jmp    c0024899 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c00248dc:	51                   	push   ecx
c00248dd:	51                   	push   ecx
c00248de:	52                   	push   edx
c00248df:	50                   	push   eax
c00248e0:	e8 1f e7 ff ff       	call   c0023004 <IDE::getBase(unsigned char)>
c00248e5:	89 c2                	mov    edx,eax
c00248e7:	66 ed                	in     ax,dx
c00248e9:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00248ee:	83 c4 10             	add    esp,0x10
c00248f1:	46                   	inc    esi
c00248f2:	eb cf                	jmp    c00248c3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c00248f4:	51                   	push   ecx
c00248f5:	51                   	push   ecx
c00248f6:	52                   	push   edx
c00248f7:	50                   	push   eax
c00248f8:	e8 87 e8 ff ff       	call   c0023184 <IDE::waitInterrupt(unsigned char)>
c00248fd:	83 c4 10             	add    esp,0x10
c0024900:	84 c0                	test   al,al
c0024902:	0f 84 e8 fd ff ff    	je     c00246f0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024908:	bb a0 86 01 00       	mov    ebx,0x186a0
c002490d:	52                   	push   edx
c002490e:	52                   	push   edx
c002490f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024916:	50                   	push   eax
c0024917:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002491d:	e8 ce e6 ff ff       	call   c0022ff0 <IDE::prepareInterrupt(unsigned char)>
c0024922:	83 c4 10             	add    esp,0x10
c0024925:	50                   	push   eax
c0024926:	50                   	push   eax
c0024927:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002492e:	50                   	push   eax
c002492f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024935:	e8 ca e6 ff ff       	call   c0023004 <IDE::getBase(unsigned char)>
c002493a:	8d 50 07             	lea    edx,[eax+0x7]
c002493d:	ec                   	in     al,dx
c002493e:	83 c4 10             	add    esp,0x10
c0024941:	a8 88                	test   al,0x88
c0024943:	74 0a                	je     c002494f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0024945:	4b                   	dec    ebx
c0024946:	75 dd                	jne    c0024925 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0024948:	bb 02 00 00 00       	mov    ebx,0x2
c002494d:	eb 02                	jmp    c0024951 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002494f:	31 db                	xor    ebx,ebx
c0024951:	83 c4 1c             	add    esp,0x1c
c0024954:	89 d8                	mov    eax,ebx
c0024956:	5b                   	pop    ebx
c0024957:	5e                   	pop    esi
c0024958:	5f                   	pop    edi
c0024959:	5d                   	pop    ebp
c002495a:	c3                   	ret    
c002495b:	90                   	nop

c002495c <ATAPI::diskRemoved()>:
c002495c:	83 ec 18             	sub    esp,0x18
c002495f:	68 d5 d0 02 c0       	push   0xc002d0d5
c0024964:	e8 c8 e5 fe ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0024969:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002496d:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0024974:	83 c4 1c             	add    esp,0x1c
c0024977:	c3                   	ret    

c0024978 <ATAPI::eject()>:
c0024978:	57                   	push   edi
c0024979:	b9 03 00 00 00       	mov    ecx,0x3
c002497e:	53                   	push   ebx
c002497f:	83 ec 14             	sub    esp,0x14
c0024982:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024986:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002498a:	fc                   	cld    
c002498b:	31 c0                	xor    eax,eax
c002498d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002498f:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024994:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024999:	50                   	push   eax
c002499a:	50                   	push   eax
c002499b:	6a 00                	push   0x0
c002499d:	6a 00                	push   0x0
c002499f:	6a 00                	push   0x0
c00249a1:	6a 02                	push   0x2
c00249a3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00249a7:	50                   	push   eax
c00249a8:	53                   	push   ebx
c00249a9:	e8 ee fc ff ff       	call   c002469c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00249ae:	83 c4 14             	add    esp,0x14
c00249b1:	53                   	push   ebx
c00249b2:	e8 a5 ff ff ff       	call   c002495c <ATAPI::diskRemoved()>
c00249b7:	83 c4 24             	add    esp,0x24
c00249ba:	31 c0                	xor    eax,eax
c00249bc:	5b                   	pop    ebx
c00249bd:	5f                   	pop    edi
c00249be:	c3                   	ret    
c00249bf:	90                   	nop

c00249c0 <ATAPI::diskInserted()>:
c00249c0:	53                   	push   ebx
c00249c1:	83 ec 14             	sub    esp,0x14
c00249c4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00249c8:	68 ec d0 02 c0       	push   0xc002d0ec
c00249cd:	e8 5f e5 fe ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c00249d2:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c00249d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00249dc:	e8 03 fe fe ff       	call   c00147e4 <PhysicalDisk::startCache()>
c00249e1:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00249e5:	83 c4 18             	add    esp,0x18
c00249e8:	5b                   	pop    ebx
c00249e9:	e9 7c 1f ff ff       	jmp    c001696a <createPartitionsForDisk(PhysicalDisk*)>

c00249ee <ATAPI::detectMedia()>:
c00249ee:	56                   	push   esi
c00249ef:	53                   	push   ebx
c00249f0:	83 ec 28             	sub    esp,0x28
c00249f3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00249f7:	6a 0c                	push   0xc
c00249f9:	6a 00                	push   0x0
c00249fb:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00249ff:	56                   	push   esi
c0024a00:	e8 73 bd fd ff       	call   c0000778 <memset>
c0024a05:	58                   	pop    eax
c0024a06:	5a                   	pop    edx
c0024a07:	6a 00                	push   0x0
c0024a09:	6a 00                	push   0x0
c0024a0b:	6a 00                	push   0x0
c0024a0d:	6a 00                	push   0x0
c0024a0f:	56                   	push   esi
c0024a10:	53                   	push   ebx
c0024a11:	e8 86 fc ff ff       	call   c002469c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024a16:	83 c4 1c             	add    esp,0x1c
c0024a19:	6a 0c                	push   0xc
c0024a1b:	6a 00                	push   0x0
c0024a1d:	56                   	push   esi
c0024a1e:	e8 55 bd fd ff       	call   c0000778 <memset>
c0024a23:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024a28:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024a2d:	59                   	pop    ecx
c0024a2e:	58                   	pop    eax
c0024a2f:	6a 01                	push   0x1
c0024a31:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024a35:	50                   	push   eax
c0024a36:	6a 00                	push   0x0
c0024a38:	6a 12                	push   0x12
c0024a3a:	56                   	push   esi
c0024a3b:	53                   	push   ebx
c0024a3c:	e8 5b fc ff ff       	call   c002469c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024a41:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024a45:	83 c4 20             	add    esp,0x20
c0024a48:	83 e0 7f             	and    eax,0x7f
c0024a4b:	3c 70                	cmp    al,0x70
c0024a4d:	74 15                	je     c0024a64 <ATAPI::detectMedia()+0x76>
c0024a4f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a56:	75 0c                	jne    c0024a64 <ATAPI::detectMedia()+0x76>
c0024a58:	83 ec 0c             	sub    esp,0xc
c0024a5b:	53                   	push   ebx
c0024a5c:	e8 5f ff ff ff       	call   c00249c0 <ATAPI::diskInserted()>
c0024a61:	83 c4 10             	add    esp,0x10
c0024a64:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024a68:	83 e0 0f             	and    eax,0xf
c0024a6b:	3c 02                	cmp    al,0x2
c0024a6d:	75 1b                	jne    c0024a8a <ATAPI::detectMedia()+0x9c>
c0024a6f:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024a74:	75 2d                	jne    c0024aa3 <ATAPI::detectMedia()+0xb5>
c0024a76:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a7d:	74 24                	je     c0024aa3 <ATAPI::detectMedia()+0xb5>
c0024a7f:	83 ec 0c             	sub    esp,0xc
c0024a82:	53                   	push   ebx
c0024a83:	e8 d4 fe ff ff       	call   c002495c <ATAPI::diskRemoved()>
c0024a88:	eb 16                	jmp    c0024aa0 <ATAPI::detectMedia()+0xb2>
c0024a8a:	84 c0                	test   al,al
c0024a8c:	75 15                	jne    c0024aa3 <ATAPI::detectMedia()+0xb5>
c0024a8e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a95:	75 0c                	jne    c0024aa3 <ATAPI::detectMedia()+0xb5>
c0024a97:	83 ec 0c             	sub    esp,0xc
c0024a9a:	53                   	push   ebx
c0024a9b:	e8 20 ff ff ff       	call   c00249c0 <ATAPI::diskInserted()>
c0024aa0:	83 c4 10             	add    esp,0x10
c0024aa3:	83 c4 24             	add    esp,0x24
c0024aa6:	5b                   	pop    ebx
c0024aa7:	5e                   	pop    esi
c0024aa8:	c3                   	ret    
c0024aa9:	90                   	nop

c0024aaa <ATAPI::open(int, int, void*)>:
c0024aaa:	53                   	push   ebx
c0024aab:	83 ec 08             	sub    esp,0x8
c0024aae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024ab2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024ab6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024aba:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024ac0:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024ac6:	c1 e0 06             	shl    eax,0x6
c0024ac9:	01 d0                	add    eax,edx
c0024acb:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024ad2:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024ad8:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024adf:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024ae9:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024aef:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024af6:	6a 04                	push   0x4
c0024af8:	6a 0c                	push   0xc
c0024afa:	51                   	push   ecx
c0024afb:	52                   	push   edx
c0024afc:	e8 15 e5 ff ff       	call   c0023016 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b01:	90                   	nop
c0024b02:	90                   	nop
c0024b03:	6a 00                	push   0x0
c0024b05:	6a 0c                	push   0xc
c0024b07:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b0e:	50                   	push   eax
c0024b0f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b15:	e8 fc e4 ff ff       	call   c0023016 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b1a:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024b21:	83 c4 14             	add    esp,0x14
c0024b24:	53                   	push   ebx
c0024b25:	e8 c4 fe ff ff       	call   c00249ee <ATAPI::detectMedia()>
c0024b2a:	31 c0                	xor    eax,eax
c0024b2c:	83 c4 18             	add    esp,0x18
c0024b2f:	5b                   	pop    ebx
c0024b30:	c3                   	ret    
c0024b31:	90                   	nop

c0024b32 <ATAPI::read(unsigned long long, int, void*)>:
c0024b32:	55                   	push   ebp
c0024b33:	57                   	push   edi
c0024b34:	56                   	push   esi
c0024b35:	53                   	push   ebx
c0024b36:	83 ec 1c             	sub    esp,0x1c
c0024b39:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024b3d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024b41:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024b45:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024b4c:	74 41                	je     c0024b8f <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024b4e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024b52:	b9 03 00 00 00       	mov    ecx,0x3
c0024b57:	fc                   	cld    
c0024b58:	31 c0                	xor    eax,eax
c0024b5a:	86 fb                	xchg   bl,bh
c0024b5c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024b5e:	c1 c3 10             	rol    ebx,0x10
c0024b61:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024b66:	89 e8                	mov    eax,ebp
c0024b68:	86 fb                	xchg   bl,bh
c0024b6a:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024b6e:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024b72:	50                   	push   eax
c0024b73:	50                   	push   eax
c0024b74:	55                   	push   ebp
c0024b75:	c1 e5 0b             	shl    ebp,0xb
c0024b78:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024b7c:	6a 00                	push   0x0
c0024b7e:	55                   	push   ebp
c0024b7f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024b83:	50                   	push   eax
c0024b84:	56                   	push   esi
c0024b85:	e8 12 fb ff ff       	call   c002469c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024b8a:	83 c4 20             	add    esp,0x20
c0024b8d:	eb 1a                	jmp    c0024ba9 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024b8f:	83 ec 0c             	sub    esp,0xc
c0024b92:	56                   	push   esi
c0024b93:	e8 56 fe ff ff       	call   c00249ee <ATAPI::detectMedia()>
c0024b98:	83 c4 10             	add    esp,0x10
c0024b9b:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024ba2:	75 aa                	jne    c0024b4e <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024ba4:	b8 02 00 00 00       	mov    eax,0x2
c0024ba9:	83 c4 1c             	add    esp,0x1c
c0024bac:	5b                   	pop    ebx
c0024bad:	5e                   	pop    esi
c0024bae:	5f                   	pop    edi
c0024baf:	5d                   	pop    ebp
c0024bb0:	c3                   	ret    
c0024bb1:	90                   	nop

c0024bb2 <SATA::close(int, int, void*)>:
c0024bb2:	83 ec 0c             	sub    esp,0xc
c0024bb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024bb9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024bbf:	85 c0                	test   eax,eax
c0024bc1:	74 0c                	je     c0024bcf <SATA::close(int, int, void*)+0x1d>
c0024bc3:	83 ec 0c             	sub    esp,0xc
c0024bc6:	8b 10                	mov    edx,DWORD PTR [eax]
c0024bc8:	50                   	push   eax
c0024bc9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024bcc:	83 c4 10             	add    esp,0x10
c0024bcf:	31 c0                	xor    eax,eax
c0024bd1:	83 c4 0c             	add    esp,0xc
c0024bd4:	c3                   	ret    
c0024bd5:	90                   	nop

c0024bd6 <SATA::powerSaving(PowerSavingLevel)>:
c0024bd6:	c3                   	ret    
c0024bd7:	90                   	nop

c0024bd8 <SATA::open(int, int, void*)>:
c0024bd8:	56                   	push   esi
c0024bd9:	53                   	push   ebx
c0024bda:	50                   	push   eax
c0024bdb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024bdf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024be3:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024bed:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024bf3:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024bfd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024c01:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024c0b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024c11:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024c18:	e8 c5 b2 fe ff       	call   c000fee2 <Phys::allocatePage()>
c0024c1d:	89 c6                	mov    esi,eax
c0024c1f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024c25:	81 c6 00 10 00 00    	add    esi,0x1000
c0024c2b:	e8 b2 b2 fe ff       	call   c000fee2 <Phys::allocatePage()>
c0024c30:	39 c6                	cmp    esi,eax
c0024c32:	74 10                	je     c0024c44 <SATA::open(int, int, void*)+0x6c>
c0024c34:	83 ec 0c             	sub    esp,0xc
c0024c37:	68 14 d0 02 c0       	push   0xc002d014
c0024c3c:	e8 a2 59 ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c0024c41:	83 c4 10             	add    esp,0x10
c0024c44:	83 ec 0c             	sub    esp,0xc
c0024c47:	6a 02                	push   0x2
c0024c49:	e8 49 cf fe ff       	call   c0011b97 <Virt::allocateKernelVirtualPages(int)>
c0024c4e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024c54:	e8 d9 d1 fe ff       	call   c0011e32 <Virt::getAKernelVAS()>
c0024c59:	6a 03                	push   0x3
c0024c5b:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024c61:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024c67:	50                   	push   eax
c0024c68:	e8 01 d7 fe ff       	call   c001236e <VAS::mapPage(unsigned long, unsigned long, int)>
c0024c6d:	83 c4 14             	add    esp,0x14
c0024c70:	53                   	push   ebx
c0024c71:	e8 6e fb fe ff       	call   c00147e4 <PhysicalDisk::startCache()>
c0024c76:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024c79:	e8 ec 1c ff ff       	call   c001696a <createPartitionsForDisk(PhysicalDisk*)>
c0024c7e:	83 c4 14             	add    esp,0x14
c0024c81:	31 c0                	xor    eax,eax
c0024c83:	5b                   	pop    ebx
c0024c84:	5e                   	pop    esi
c0024c85:	c3                   	ret    

c0024c86 <SATA::SATA()>:
c0024c86:	83 ec 0c             	sub    esp,0xc
c0024c89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c8d:	83 ec 04             	sub    esp,0x4
c0024c90:	68 00 02 00 00       	push   0x200
c0024c95:	68 28 d0 02 c0       	push   0xc002d028
c0024c9a:	50                   	push   eax
c0024c9b:	e8 dc fa fe ff       	call   c001477c <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024ca0:	83 c4 10             	add    esp,0x10
c0024ca3:	ba 98 d0 02 c0       	mov    edx,0xc002d098
c0024ca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024cac:	89 10                	mov    DWORD PTR [eax],edx
c0024cae:	90                   	nop
c0024caf:	83 c4 0c             	add    esp,0xc
c0024cb2:	c3                   	ret    
c0024cb3:	90                   	nop

c0024cb4 <SATA::access(unsigned long long, int, void*, bool)>:
c0024cb4:	55                   	push   ebp
c0024cb5:	57                   	push   edi
c0024cb6:	56                   	push   esi
c0024cb7:	53                   	push   ebx
c0024cb8:	83 ec 2c             	sub    esp,0x2c
c0024cbb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024cbf:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024cc3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024cc7:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0024ccb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024ccf:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024cd4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024cd8:	7e 10                	jle    c0024cea <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024cda:	83 ec 0c             	sub    esp,0xc
c0024cdd:	68 38 d0 02 c0       	push   0xc002d038
c0024ce2:	e8 fc 58 ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c0024ce7:	83 c4 10             	add    esp,0x10
c0024cea:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c0024cf0:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024cf6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024cfc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024d00:	89 f0                	mov    eax,esi
c0024d02:	c1 e0 07             	shl    eax,0x7
c0024d05:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024d09:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024d13:	53                   	push   ebx
c0024d14:	8d 46 02             	lea    eax,[esi+0x2]
c0024d17:	53                   	push   ebx
c0024d18:	c1 e0 07             	shl    eax,0x7
c0024d1b:	bb 01 00 00 00       	mov    ebx,0x1
c0024d20:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0024d24:	50                   	push   eax
c0024d25:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024d2b:	e8 aa ef ff ff       	call   c0023cda <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024d30:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024d34:	83 c4 10             	add    esp,0x10
c0024d37:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024d3c:	0f 84 ce 01 00 00    	je     c0024f10 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024d42:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024d46:	c1 e0 09             	shl    eax,0x9
c0024d49:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024d4e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024d52:	74 17                	je     c0024d6b <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c0024d54:	51                   	push   ecx
c0024d55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024d59:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024d5d:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024d63:	e8 dc b9 fd ff       	call   c0000744 <memcpy>
c0024d68:	83 c4 10             	add    esp,0x10
c0024d6b:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024d71:	8d 46 02             	lea    eax,[esi+0x2]
c0024d74:	c1 e0 07             	shl    eax,0x7
c0024d77:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024d7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0024d7d:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024d83:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024d89:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024d8d:	c1 e1 05             	shl    ecx,0x5
c0024d90:	01 c8                	add    eax,ecx
c0024d92:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024d96:	8a 18                	mov    bl,BYTE PTR [eax]
c0024d98:	83 e1 01             	and    ecx,0x1
c0024d9b:	83 e3 bf             	and    ebx,0xffffffbf
c0024d9e:	c1 e1 06             	shl    ecx,0x6
c0024da1:	09 d9                	or     ecx,ebx
c0024da3:	88 08                	mov    BYTE PTR [eax],cl
c0024da5:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024da7:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024dad:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024db3:	89 08                	mov    DWORD PTR [eax],ecx
c0024db5:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024dbb:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024dc1:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024dc7:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024dca:	52                   	push   edx
c0024dcb:	68 90 00 00 00       	push   0x90
c0024dd0:	6a 00                	push   0x0
c0024dd2:	53                   	push   ebx
c0024dd3:	e8 a0 b9 fd ff       	call   c0000778 <memset>
c0024dd8:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024dde:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0024de2:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024de8:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024dec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024df0:	83 c4 10             	add    esp,0x10
c0024df3:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024df6:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024dfc:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024e02:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024e07:	09 c8                	or     eax,ecx
c0024e09:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024e0f:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024e12:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024e19:	66 25 00 7f          	and    ax,0x7f00
c0024e1d:	66 0d 27 80          	or     ax,0x8027
c0024e21:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0024e26:	66 89 03             	mov    WORD PTR [ebx],ax
c0024e29:	19 c0                	sbb    eax,eax
c0024e2b:	83 e0 f0             	and    eax,0xfffffff0
c0024e2e:	83 c0 35             	add    eax,0x35
c0024e31:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0024e34:	89 f8                	mov    eax,edi
c0024e36:	c1 e8 10             	shr    eax,0x10
c0024e39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024e3c:	89 f8                	mov    eax,edi
c0024e3e:	c1 e8 18             	shr    eax,0x18
c0024e41:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024e44:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024e48:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024e4b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024e4f:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024e52:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024e56:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024e5a:	89 f3                	mov    ebx,esi
c0024e5c:	31 c0                	xor    eax,eax
c0024e5e:	c1 e3 07             	shl    ebx,0x7
c0024e61:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0024e65:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0024e6b:	80 e1 88             	and    cl,0x88
c0024e6e:	74 0a                	je     c0024e7a <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0024e70:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e75:	74 0a                	je     c0024e81 <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c0024e77:	40                   	inc    eax
c0024e78:	eb eb                	jmp    c0024e65 <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0024e7a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e7f:	75 0a                	jne    c0024e8b <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c0024e81:	83 ec 0c             	sub    esp,0xc
c0024e84:	68 71 d0 02 c0       	push   0xc002d071
c0024e89:	eb 56                	jmp    c0024ee1 <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0024e8b:	b8 01 00 00 00       	mov    eax,0x1
c0024e90:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0024e94:	c1 e6 07             	shl    esi,0x7
c0024e97:	d3 e0                	shl    eax,cl
c0024e99:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0024e9d:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0024ea3:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c0024ea9:	85 c8                	test   eax,ecx
c0024eab:	74 20                	je     c0024ecd <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0024ead:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0024eb3:	0f ba e1 1e          	bt     ecx,0x1e
c0024eb7:	73 ea                	jae    c0024ea3 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0024eb9:	83 ec 0c             	sub    esp,0xc
c0024ebc:	31 db                	xor    ebx,ebx
c0024ebe:	68 7f d0 02 c0       	push   0xc002d07f
c0024ec3:	e8 1b 57 ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c0024ec8:	83 c4 10             	add    esp,0x10
c0024ecb:	eb 43                	jmp    c0024f10 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024ecd:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0024ed3:	0f ba e0 1e          	bt     eax,0x1e
c0024ed7:	73 17                	jae    c0024ef0 <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0024ed9:	83 ec 0c             	sub    esp,0xc
c0024edc:	68 7f d0 02 c0       	push   0xc002d07f
c0024ee1:	e8 fd 56 ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c0024ee6:	bb 01 00 00 00       	mov    ebx,0x1
c0024eeb:	83 c4 10             	add    esp,0x10
c0024eee:	eb 20                	jmp    c0024f10 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024ef0:	31 db                	xor    ebx,ebx
c0024ef2:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024ef7:	75 17                	jne    c0024f10 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024ef9:	50                   	push   eax
c0024efa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024efe:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024f04:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024f08:	e8 37 b8 fd ff       	call   c0000744 <memcpy>
c0024f0d:	83 c4 10             	add    esp,0x10
c0024f10:	83 c4 2c             	add    esp,0x2c
c0024f13:	89 d8                	mov    eax,ebx
c0024f15:	5b                   	pop    ebx
c0024f16:	5e                   	pop    esi
c0024f17:	5f                   	pop    edi
c0024f18:	5d                   	pop    ebp
c0024f19:	c3                   	ret    

c0024f1a <SATA::read(unsigned long long, int, void*)>:
c0024f1a:	57                   	push   edi
c0024f1b:	b8 04 00 00 00       	mov    eax,0x4
c0024f20:	56                   	push   esi
c0024f21:	53                   	push   ebx
c0024f22:	83 ec 10             	sub    esp,0x10
c0024f25:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024f29:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024f2d:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024f30:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024f34:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024f38:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024f3e:	77 3b                	ja     c0024f7b <SATA::read(unsigned long long, int, void*)+0x61>
c0024f40:	b8 06 00 00 00       	mov    eax,0x6
c0024f45:	85 d2                	test   edx,edx
c0024f47:	74 32                	je     c0024f7b <SATA::read(unsigned long long, int, void*)+0x61>
c0024f49:	50                   	push   eax
c0024f4a:	50                   	push   eax
c0024f4b:	6a 00                	push   0x0
c0024f4d:	52                   	push   edx
c0024f4e:	53                   	push   ebx
c0024f4f:	57                   	push   edi
c0024f50:	56                   	push   esi
c0024f51:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024f55:	e8 5a fd ff ff       	call   c0024cb4 <SATA::access(unsigned long long, int, void*, bool)>
c0024f5a:	83 c4 20             	add    esp,0x20
c0024f5d:	85 c0                	test   eax,eax
c0024f5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024f63:	75 11                	jne    c0024f76 <SATA::read(unsigned long long, int, void*)+0x5c>
c0024f65:	01 1d 28 29 03 c0    	add    DWORD PTR ds:0xc0032928,ebx
c0024f6b:	e8 7c ba fe ff       	call   c00109ec <VgaText::updateDiskUsage()>
c0024f70:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024f74:	eb 05                	jmp    c0024f7b <SATA::read(unsigned long long, int, void*)+0x61>
c0024f76:	b8 01 00 00 00       	mov    eax,0x1
c0024f7b:	83 c4 10             	add    esp,0x10
c0024f7e:	5b                   	pop    ebx
c0024f7f:	5e                   	pop    esi
c0024f80:	5f                   	pop    edi
c0024f81:	c3                   	ret    

c0024f82 <SATA::write(unsigned long long, int, void*)>:
c0024f82:	55                   	push   ebp
c0024f83:	b8 04 00 00 00       	mov    eax,0x4
c0024f88:	57                   	push   edi
c0024f89:	56                   	push   esi
c0024f8a:	53                   	push   ebx
c0024f8b:	83 ec 1c             	sub    esp,0x1c
c0024f8e:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024f92:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0024f96:	8d 75 ff             	lea    esi,[ebp-0x1]
c0024f99:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0024f9d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0024fa1:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024fa7:	77 56                	ja     c0024fff <SATA::write(unsigned long long, int, void*)+0x7d>
c0024fa9:	b8 06 00 00 00       	mov    eax,0x6
c0024fae:	85 ff                	test   edi,edi
c0024fb0:	74 4d                	je     c0024fff <SATA::write(unsigned long long, int, void*)+0x7d>
c0024fb2:	89 ee                	mov    esi,ebp
c0024fb4:	c1 e6 09             	shl    esi,0x9
c0024fb7:	01 fe                	add    esi,edi
c0024fb9:	89 c8                	mov    eax,ecx
c0024fbb:	89 da                	mov    edx,ebx
c0024fbd:	83 c0 01             	add    eax,0x1
c0024fc0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024fc4:	83 d2 00             	adc    edx,0x0
c0024fc7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0024fcb:	50                   	push   eax
c0024fcc:	50                   	push   eax
c0024fcd:	6a 01                	push   0x1
c0024fcf:	57                   	push   edi
c0024fd0:	81 c7 00 02 00 00    	add    edi,0x200
c0024fd6:	6a 01                	push   0x1
c0024fd8:	53                   	push   ebx
c0024fd9:	51                   	push   ecx
c0024fda:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024fde:	e8 d1 fc ff ff       	call   c0024cb4 <SATA::access(unsigned long long, int, void*, bool)>
c0024fe3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024fe7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024feb:	83 c4 20             	add    esp,0x20
c0024fee:	39 f7                	cmp    edi,esi
c0024ff0:	75 c7                	jne    c0024fb9 <SATA::write(unsigned long long, int, void*)+0x37>
c0024ff2:	01 2d 24 29 03 c0    	add    DWORD PTR ds:0xc0032924,ebp
c0024ff8:	e8 ef b9 fe ff       	call   c00109ec <VgaText::updateDiskUsage()>
c0024ffd:	31 c0                	xor    eax,eax
c0024fff:	83 c4 1c             	add    esp,0x1c
c0025002:	5b                   	pop    ebx
c0025003:	5e                   	pop    esi
c0025004:	5f                   	pop    edi
c0025005:	5d                   	pop    ebp
c0025006:	c3                   	ret    
c0025007:	90                   	nop

c0025008 <SATAPI::write(unsigned long long, int, void*)>:
c0025008:	b8 03 00 00 00       	mov    eax,0x3
c002500d:	c3                   	ret    

c002500e <SATAPI::close(int, int, void*)>:
c002500e:	83 ec 0c             	sub    esp,0xc
c0025011:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025015:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002501b:	85 c0                	test   eax,eax
c002501d:	74 0c                	je     c002502b <SATAPI::close(int, int, void*)+0x1d>
c002501f:	83 ec 0c             	sub    esp,0xc
c0025022:	8b 10                	mov    edx,DWORD PTR [eax]
c0025024:	50                   	push   eax
c0025025:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0025028:	83 c4 10             	add    esp,0x10
c002502b:	31 c0                	xor    eax,eax
c002502d:	83 c4 0c             	add    esp,0xc
c0025030:	c3                   	ret    
c0025031:	90                   	nop

c0025032 <SATAPI::SATAPI()>:
c0025032:	83 ec 0c             	sub    esp,0xc
c0025035:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025039:	83 ec 04             	sub    esp,0x4
c002503c:	68 00 08 00 00       	push   0x800
c0025041:	68 c8 d0 02 c0       	push   0xc002d0c8
c0025046:	50                   	push   eax
c0025047:	e8 30 f7 fe ff       	call   c001477c <PhysicalDisk::PhysicalDisk(char const*, int)>
c002504c:	83 c4 10             	add    esp,0x10
c002504f:	ba 74 d1 02 c0       	mov    edx,0xc002d174
c0025054:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025058:	89 10                	mov    DWORD PTR [eax],edx
c002505a:	90                   	nop
c002505b:	83 c4 0c             	add    esp,0xc
c002505e:	c3                   	ret    
c002505f:	90                   	nop

c0025060 <SATAPI::diskRemoved()>:
c0025060:	83 ec 18             	sub    esp,0x18
c0025063:	68 d4 d0 02 c0       	push   0xc002d0d4
c0025068:	e8 c4 de fe ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c002506d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025071:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0025078:	83 c4 1c             	add    esp,0x1c
c002507b:	c3                   	ret    

c002507c <SATAPI::diskInserted()>:
c002507c:	53                   	push   ebx
c002507d:	83 ec 14             	sub    esp,0x14
c0025080:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025084:	68 eb d0 02 c0       	push   0xc002d0eb
c0025089:	e8 a3 de fe ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c002508e:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0025095:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025098:	e8 47 f7 fe ff       	call   c00147e4 <PhysicalDisk::startCache()>
c002509d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00250a1:	83 c4 18             	add    esp,0x18
c00250a4:	5b                   	pop    ebx
c00250a5:	e9 c0 18 ff ff       	jmp    c001696a <createPartitionsForDisk(PhysicalDisk*)>

c00250aa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c00250aa:	55                   	push   ebp
c00250ab:	57                   	push   edi
c00250ac:	56                   	push   esi
c00250ad:	53                   	push   ebx
c00250ae:	83 ec 24             	sub    esp,0x24
c00250b1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00250b5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00250b9:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c00250bf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00250c3:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00250c7:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c00250cd:	8d 5f 02             	lea    ebx,[edi+0x2]
c00250d0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00250d6:	c1 e3 07             	shl    ebx,0x7
c00250d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00250dd:	89 f8                	mov    eax,edi
c00250df:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00250e3:	c1 e0 07             	shl    eax,0x7
c00250e6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00250ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00250ee:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00250f8:	53                   	push   ebx
c00250f9:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c00250ff:	e8 d6 eb ff ff       	call   c0023cda <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025104:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025108:	83 c4 10             	add    esp,0x10
c002510b:	b8 01 00 00 00       	mov    eax,0x1
c0025110:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0025115:	0f 84 8a 01 00 00    	je     c00252a5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c002511b:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0025121:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025123:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025129:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002512f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0025133:	c1 e1 05             	shl    ecx,0x5
c0025136:	01 c8                	add    eax,ecx
c0025138:	8b 08                	mov    ecx,DWORD PTR [eax]
c002513a:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0025140:	81 c9 25 00 01 00    	or     ecx,0x10025
c0025146:	89 08                	mov    DWORD PTR [eax],ecx
c0025148:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c002514e:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0025154:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c002515a:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c002515d:	52                   	push   edx
c002515e:	68 90 00 00 00       	push   0x90
c0025163:	6a 00                	push   0x0
c0025165:	53                   	push   ebx
c0025166:	e8 0d b6 fd ff       	call   c0000778 <memset>
c002516b:	83 c4 0c             	add    esp,0xc
c002516e:	8d 43 40             	lea    eax,[ebx+0x40]
c0025171:	6a 0c                	push   0xc
c0025173:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025177:	50                   	push   eax
c0025178:	e8 c7 b5 fd ff       	call   c0000744 <memcpy>
c002517d:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c0025183:	89 ea                	mov    edx,ebp
c0025185:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c002518b:	c1 ea 18             	shr    edx,0x18
c002518e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025192:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0025195:	8d 48 ff             	lea    ecx,[eax-0x1]
c0025198:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c002519c:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c00251a2:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c00251a8:	25 00 00 c0 ff       	and    eax,0xffc00000
c00251ad:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c00251b1:	09 c8                	or     eax,ecx
c00251b3:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c00251b7:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c00251bd:	66 8b 03             	mov    ax,WORD PTR [ebx]
c00251c0:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c00251c7:	66 25 00 7f          	and    ax,0x7f00
c00251cb:	66 0d 27 80          	or     ax,0x8027
c00251cf:	66 89 03             	mov    WORD PTR [ebx],ax
c00251d2:	89 e8                	mov    eax,ebp
c00251d4:	c1 e8 10             	shr    eax,0x10
c00251d7:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00251da:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00251de:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c00251e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00251e5:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c00251e8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00251ec:	83 c4 10             	add    esp,0x10
c00251ef:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c00251f3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00251f7:	31 c0                	xor    eax,eax
c00251f9:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c00251ff:	80 e1 88             	and    cl,0x88
c0025202:	74 0a                	je     c002520e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c0025204:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025209:	74 0a                	je     c0025215 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c002520b:	40                   	inc    eax
c002520c:	eb eb                	jmp    c00251f9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c002520e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025213:	75 0f                	jne    c0025224 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c0025215:	83 ec 0c             	sub    esp,0xc
c0025218:	68 71 d0 02 c0       	push   0xc002d071
c002521d:	e8 c1 53 ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c0025222:	eb 3a                	jmp    c002525e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c0025224:	b8 01 00 00 00       	mov    eax,0x1
c0025229:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002522d:	c1 e7 07             	shl    edi,0x7
c0025230:	d3 e0                	shl    eax,cl
c0025232:	03 3c 24             	add    edi,DWORD PTR [esp]
c0025235:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c002523b:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c0025241:	85 d0                	test   eax,edx
c0025243:	74 23                	je     c0025268 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c0025245:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c002524b:	0f ba e2 1e          	bt     edx,0x1e
c002524f:	73 ea                	jae    c002523b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c0025251:	83 ec 0c             	sub    esp,0xc
c0025254:	68 03 d1 02 c0       	push   0xc002d103
c0025259:	e8 d3 dc fe ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c002525e:	83 c4 10             	add    esp,0x10
c0025261:	b8 01 00 00 00       	mov    eax,0x1
c0025266:	eb 3d                	jmp    c00252a5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0025268:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c002526e:	0f ba e0 1e          	bt     eax,0x1e
c0025272:	73 0a                	jae    c002527e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c0025274:	83 ec 0c             	sub    esp,0xc
c0025277:	68 16 d1 02 c0       	push   0xc002d116
c002527c:	eb db                	jmp    c0025259 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c002527e:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0025283:	74 1e                	je     c00252a3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0025285:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c002528a:	74 17                	je     c00252a3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c002528c:	50                   	push   eax
c002528d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025291:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c0025297:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c002529b:	e8 a4 b4 fd ff       	call   c0000744 <memcpy>
c00252a0:	83 c4 10             	add    esp,0x10
c00252a3:	31 c0                	xor    eax,eax
c00252a5:	83 c4 1c             	add    esp,0x1c
c00252a8:	5b                   	pop    ebx
c00252a9:	5e                   	pop    esi
c00252aa:	5f                   	pop    edi
c00252ab:	5d                   	pop    ebp
c00252ac:	c3                   	ret    
c00252ad:	90                   	nop

c00252ae <SATAPI::eject()>:
c00252ae:	57                   	push   edi
c00252af:	b9 03 00 00 00       	mov    ecx,0x3
c00252b4:	53                   	push   ebx
c00252b5:	83 ec 14             	sub    esp,0x14
c00252b8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00252bc:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00252c0:	fc                   	cld    
c00252c1:	31 c0                	xor    eax,eax
c00252c3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00252c5:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00252ca:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00252cf:	50                   	push   eax
c00252d0:	6a 00                	push   0x0
c00252d2:	6a 00                	push   0x0
c00252d4:	6a 00                	push   0x0
c00252d6:	6a 00                	push   0x0
c00252d8:	6a 02                	push   0x2
c00252da:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00252de:	50                   	push   eax
c00252df:	53                   	push   ebx
c00252e0:	e8 c5 fd ff ff       	call   c00250aa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00252e5:	83 c4 14             	add    esp,0x14
c00252e8:	53                   	push   ebx
c00252e9:	e8 72 fd ff ff       	call   c0025060 <SATAPI::diskRemoved()>
c00252ee:	83 c4 24             	add    esp,0x24
c00252f1:	31 c0                	xor    eax,eax
c00252f3:	5b                   	pop    ebx
c00252f4:	5f                   	pop    edi
c00252f5:	c3                   	ret    

c00252f6 <SATAPI::detectMedia()>:
c00252f6:	56                   	push   esi
c00252f7:	53                   	push   ebx
c00252f8:	83 ec 28             	sub    esp,0x28
c00252fb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00252ff:	6a 0c                	push   0xc
c0025301:	6a 00                	push   0x0
c0025303:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025307:	56                   	push   esi
c0025308:	e8 6b b4 fd ff       	call   c0000778 <memset>
c002530d:	83 c4 0c             	add    esp,0xc
c0025310:	6a 00                	push   0x0
c0025312:	6a 00                	push   0x0
c0025314:	6a 00                	push   0x0
c0025316:	6a 00                	push   0x0
c0025318:	6a 00                	push   0x0
c002531a:	56                   	push   esi
c002531b:	53                   	push   ebx
c002531c:	e8 89 fd ff ff       	call   c00250aa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025321:	83 c4 1c             	add    esp,0x1c
c0025324:	6a 0c                	push   0xc
c0025326:	6a 00                	push   0x0
c0025328:	56                   	push   esi
c0025329:	e8 4a b4 fd ff       	call   c0000778 <memset>
c002532e:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025333:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025338:	83 c4 0c             	add    esp,0xc
c002533b:	6a 01                	push   0x1
c002533d:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025341:	50                   	push   eax
c0025342:	6a 00                	push   0x0
c0025344:	6a 00                	push   0x0
c0025346:	6a 12                	push   0x12
c0025348:	56                   	push   esi
c0025349:	53                   	push   ebx
c002534a:	e8 5b fd ff ff       	call   c00250aa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002534f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025353:	83 c4 20             	add    esp,0x20
c0025356:	83 e0 7f             	and    eax,0x7f
c0025359:	3c 70                	cmp    al,0x70
c002535b:	74 15                	je     c0025372 <SATAPI::detectMedia()+0x7c>
c002535d:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025364:	75 0c                	jne    c0025372 <SATAPI::detectMedia()+0x7c>
c0025366:	83 ec 0c             	sub    esp,0xc
c0025369:	53                   	push   ebx
c002536a:	e8 0d fd ff ff       	call   c002507c <SATAPI::diskInserted()>
c002536f:	83 c4 10             	add    esp,0x10
c0025372:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025376:	83 e0 0f             	and    eax,0xf
c0025379:	3c 02                	cmp    al,0x2
c002537b:	75 1b                	jne    c0025398 <SATAPI::detectMedia()+0xa2>
c002537d:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025382:	75 2d                	jne    c00253b1 <SATAPI::detectMedia()+0xbb>
c0025384:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002538b:	74 24                	je     c00253b1 <SATAPI::detectMedia()+0xbb>
c002538d:	83 ec 0c             	sub    esp,0xc
c0025390:	53                   	push   ebx
c0025391:	e8 ca fc ff ff       	call   c0025060 <SATAPI::diskRemoved()>
c0025396:	eb 16                	jmp    c00253ae <SATAPI::detectMedia()+0xb8>
c0025398:	84 c0                	test   al,al
c002539a:	75 15                	jne    c00253b1 <SATAPI::detectMedia()+0xbb>
c002539c:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00253a3:	75 0c                	jne    c00253b1 <SATAPI::detectMedia()+0xbb>
c00253a5:	83 ec 0c             	sub    esp,0xc
c00253a8:	53                   	push   ebx
c00253a9:	e8 ce fc ff ff       	call   c002507c <SATAPI::diskInserted()>
c00253ae:	83 c4 10             	add    esp,0x10
c00253b1:	83 c4 24             	add    esp,0x24
c00253b4:	5b                   	pop    ebx
c00253b5:	5e                   	pop    esi
c00253b6:	c3                   	ret    
c00253b7:	90                   	nop

c00253b8 <SATAPI::open(int, int, void*)>:
c00253b8:	56                   	push   esi
c00253b9:	53                   	push   ebx
c00253ba:	50                   	push   eax
c00253bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00253bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00253c3:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00253cd:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00253d3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00253dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253e1:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00253eb:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00253f1:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00253f8:	e8 e5 aa fe ff       	call   c000fee2 <Phys::allocatePage()>
c00253fd:	89 c6                	mov    esi,eax
c00253ff:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025405:	81 c6 00 10 00 00    	add    esi,0x1000
c002540b:	e8 d2 aa fe ff       	call   c000fee2 <Phys::allocatePage()>
c0025410:	39 c6                	cmp    esi,eax
c0025412:	74 10                	je     c0025424 <SATAPI::open(int, int, void*)+0x6c>
c0025414:	83 ec 0c             	sub    esp,0xc
c0025417:	68 2b d1 02 c0       	push   0xc002d12b
c002541c:	e8 c2 51 ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c0025421:	83 c4 10             	add    esp,0x10
c0025424:	83 ec 0c             	sub    esp,0xc
c0025427:	6a 02                	push   0x2
c0025429:	e8 69 c7 fe ff       	call   c0011b97 <Virt::allocateKernelVirtualPages(int)>
c002542e:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025434:	e8 f9 c9 fe ff       	call   c0011e32 <Virt::getAKernelVAS()>
c0025439:	6a 03                	push   0x3
c002543b:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0025441:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025447:	50                   	push   eax
c0025448:	e8 21 cf fe ff       	call   c001236e <VAS::mapPage(unsigned long, unsigned long, int)>
c002544d:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025454:	83 c4 14             	add    esp,0x14
c0025457:	53                   	push   ebx
c0025458:	e8 99 fe ff ff       	call   c00252f6 <SATAPI::detectMedia()>
c002545d:	83 c4 14             	add    esp,0x14
c0025460:	31 c0                	xor    eax,eax
c0025462:	5b                   	pop    ebx
c0025463:	5e                   	pop    esi
c0025464:	c3                   	ret    
c0025465:	90                   	nop

c0025466 <SATAPI::read(unsigned long long, int, void*)>:
c0025466:	55                   	push   ebp
c0025467:	57                   	push   edi
c0025468:	56                   	push   esi
c0025469:	53                   	push   ebx
c002546a:	83 ec 1c             	sub    esp,0x1c
c002546d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025471:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025475:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025479:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025480:	74 19                	je     c002549b <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025482:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025487:	7e 2e                	jle    c00254b7 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025489:	83 ec 0c             	sub    esp,0xc
c002548c:	68 41 d1 02 c0       	push   0xc002d141
c0025491:	e8 4d 51 ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c0025496:	83 c4 10             	add    esp,0x10
c0025499:	eb 1c                	jmp    c00254b7 <SATAPI::read(unsigned long long, int, void*)+0x51>
c002549b:	83 ec 0c             	sub    esp,0xc
c002549e:	55                   	push   ebp
c002549f:	e8 52 fe ff ff       	call   c00252f6 <SATAPI::detectMedia()>
c00254a4:	83 c4 10             	add    esp,0x10
c00254a7:	b8 02 00 00 00       	mov    eax,0x2
c00254ac:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00254b3:	75 cd                	jne    c0025482 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c00254b5:	eb 49                	jmp    c0025500 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c00254b7:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00254bb:	b9 03 00 00 00       	mov    ecx,0x3
c00254c0:	fc                   	cld    
c00254c1:	31 c0                	xor    eax,eax
c00254c3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00254c5:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00254ca:	89 d8                	mov    eax,ebx
c00254cc:	86 e0                	xchg   al,ah
c00254ce:	c1 c0 10             	rol    eax,0x10
c00254d1:	86 e0                	xchg   al,ah
c00254d3:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c00254d7:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c00254db:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00254df:	50                   	push   eax
c00254e0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00254e4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00254e8:	56                   	push   esi
c00254e9:	53                   	push   ebx
c00254ea:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00254ee:	c1 e0 0b             	shl    eax,0xb
c00254f1:	50                   	push   eax
c00254f2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00254f6:	50                   	push   eax
c00254f7:	55                   	push   ebp
c00254f8:	e8 ad fb ff ff       	call   c00250aa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00254fd:	83 c4 20             	add    esp,0x20
c0025500:	83 c4 1c             	add    esp,0x1c
c0025503:	5b                   	pop    ebx
c0025504:	5e                   	pop    esi
c0025505:	5f                   	pop    edi
c0025506:	5d                   	pop    ebp
c0025507:	c3                   	ret    

c0025508 <AVX::open(int, int, void*)>:
c0025508:	83 ec 0c             	sub    esp,0xc
c002550b:	e8 48 11 00 00       	call   c0026658 <avxInit>
c0025510:	b8 00 00 00 00       	mov    eax,0x0
c0025515:	83 c4 0c             	add    esp,0xc
c0025518:	c3                   	ret    
c0025519:	90                   	nop

c002551a <AVX::close(int, int, void*)>:
c002551a:	83 ec 0c             	sub    esp,0xc
c002551d:	e8 37 11 00 00       	call   c0026659 <avxClose>
c0025522:	b8 00 00 00 00       	mov    eax,0x0
c0025527:	83 c4 0c             	add    esp,0xc
c002552a:	c3                   	ret    
c002552b:	90                   	nop

c002552c <AVX::available()>:
c002552c:	83 ec 0c             	sub    esp,0xc
c002552f:	e8 1c 11 00 00       	call   c0026650 <avxDetect>
c0025534:	85 c0                	test   eax,eax
c0025536:	0f 95 c0             	setne  al
c0025539:	83 c4 0c             	add    esp,0xc
c002553c:	c3                   	ret    
c002553d:	90                   	nop

c002553e <AVX::save(void*)>:
c002553e:	83 ec 0c             	sub    esp,0xc
c0025541:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025545:	83 ec 0c             	sub    esp,0xc
c0025548:	50                   	push   eax
c0025549:	e8 08 11 00 00       	call   c0026656 <avxSave>
c002554e:	83 c4 10             	add    esp,0x10
c0025551:	90                   	nop
c0025552:	83 c4 0c             	add    esp,0xc
c0025555:	c3                   	ret    

c0025556 <AVX::load(void*)>:
c0025556:	83 ec 0c             	sub    esp,0xc
c0025559:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002555d:	83 ec 0c             	sub    esp,0xc
c0025560:	50                   	push   eax
c0025561:	e8 f1 10 00 00       	call   c0026657 <avxLoad>
c0025566:	83 c4 10             	add    esp,0x10
c0025569:	90                   	nop
c002556a:	83 c4 0c             	add    esp,0xc
c002556d:	c3                   	ret    

c002556e <AVX::AVX()>:
c002556e:	83 ec 0c             	sub    esp,0xc
c0025571:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025575:	83 ec 08             	sub    esp,0x8
c0025578:	68 a4 d1 02 c0       	push   0xc002d1a4
c002557d:	50                   	push   eax
c002557e:	e8 d7 f2 fe ff       	call   c001485a <FPU::FPU(char const*)>
c0025583:	83 c4 10             	add    esp,0x10
c0025586:	ba b4 d1 02 c0       	mov    edx,0xc002d1b4
c002558b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002558f:	89 10                	mov    DWORD PTR [eax],edx
c0025591:	90                   	nop
c0025592:	83 c4 0c             	add    esp,0xc
c0025595:	c3                   	ret    

c0025596 <MMX::available()>:
c0025596:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c002559b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00255a1:	83 e0 20             	and    eax,0x20
c00255a4:	84 c0                	test   al,al
c00255a6:	0f 95 c0             	setne  al
c00255a9:	c3                   	ret    

c00255aa <MMX::open(int, int, void*)>:
c00255aa:	83 ec 0c             	sub    esp,0xc
c00255ad:	e8 2a 11 00 00       	call   c00266dc <x87Init>
c00255b2:	b8 00 00 00 00       	mov    eax,0x0
c00255b7:	83 c4 0c             	add    esp,0xc
c00255ba:	c3                   	ret    
c00255bb:	90                   	nop

c00255bc <MMX::close(int, int, void*)>:
c00255bc:	83 ec 0c             	sub    esp,0xc
c00255bf:	e8 32 11 00 00       	call   c00266f6 <x87Close>
c00255c4:	b8 00 00 00 00       	mov    eax,0x0
c00255c9:	83 c4 0c             	add    esp,0xc
c00255cc:	c3                   	ret    
c00255cd:	90                   	nop

c00255ce <MMX::save(void*)>:
c00255ce:	83 ec 0c             	sub    esp,0xc
c00255d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255d5:	83 ec 0c             	sub    esp,0xc
c00255d8:	50                   	push   eax
c00255d9:	e8 f3 10 00 00       	call   c00266d1 <x87Save>
c00255de:	83 c4 10             	add    esp,0x10
c00255e1:	90                   	nop
c00255e2:	83 c4 0c             	add    esp,0xc
c00255e5:	c3                   	ret    

c00255e6 <MMX::load(void*)>:
c00255e6:	83 ec 0c             	sub    esp,0xc
c00255e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255ed:	83 ec 0c             	sub    esp,0xc
c00255f0:	50                   	push   eax
c00255f1:	e8 e1 10 00 00       	call   c00266d7 <x87Load>
c00255f6:	83 c4 10             	add    esp,0x10
c00255f9:	90                   	nop
c00255fa:	83 c4 0c             	add    esp,0xc
c00255fd:	c3                   	ret    

c00255fe <MMX::MMX()>:
c00255fe:	83 ec 0c             	sub    esp,0xc
c0025601:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025605:	83 ec 08             	sub    esp,0x8
c0025608:	68 e4 d1 02 c0       	push   0xc002d1e4
c002560d:	50                   	push   eax
c002560e:	e8 47 f2 fe ff       	call   c001485a <FPU::FPU(char const*)>
c0025613:	83 c4 10             	add    esp,0x10
c0025616:	ba f4 d1 02 c0       	mov    edx,0xc002d1f4
c002561b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002561f:	89 10                	mov    DWORD PTR [eax],edx
c0025621:	90                   	nop
c0025622:	83 c4 0c             	add    esp,0xc
c0025625:	c3                   	ret    

c0025626 <SSE::open(int, int, void*)>:
c0025626:	83 ec 0c             	sub    esp,0xc
c0025629:	e8 66 10 00 00       	call   c0026694 <sseInit>
c002562e:	b8 00 00 00 00       	mov    eax,0x0
c0025633:	83 c4 0c             	add    esp,0xc
c0025636:	c3                   	ret    
c0025637:	90                   	nop

c0025638 <SSE::close(int, int, void*)>:
c0025638:	83 ec 0c             	sub    esp,0xc
c002563b:	e8 64 10 00 00       	call   c00266a4 <sseClose>
c0025640:	b8 00 00 00 00       	mov    eax,0x0
c0025645:	83 c4 0c             	add    esp,0xc
c0025648:	c3                   	ret    
c0025649:	90                   	nop

c002564a <SSE::available()>:
c002564a:	83 ec 1c             	sub    esp,0x1c
c002564d:	e8 1e 10 00 00       	call   c0026670 <absolutelyNoChanceInHell>
c0025652:	85 c0                	test   eax,eax
c0025654:	0f 95 c0             	setne  al
c0025657:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002565b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002565f:	83 c4 1c             	add    esp,0x1c
c0025662:	c3                   	ret    
c0025663:	90                   	nop

c0025664 <SSE::save(void*)>:
c0025664:	83 ec 0c             	sub    esp,0xc
c0025667:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002566b:	83 ec 0c             	sub    esp,0xc
c002566e:	50                   	push   eax
c002566f:	e8 14 10 00 00       	call   c0026688 <sseSave>
c0025674:	83 c4 10             	add    esp,0x10
c0025677:	90                   	nop
c0025678:	83 c4 0c             	add    esp,0xc
c002567b:	c3                   	ret    

c002567c <SSE::load(void*)>:
c002567c:	83 ec 0c             	sub    esp,0xc
c002567f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025683:	83 ec 0c             	sub    esp,0xc
c0025686:	50                   	push   eax
c0025687:	e8 02 10 00 00       	call   c002668e <sseLoad>
c002568c:	83 c4 10             	add    esp,0x10
c002568f:	90                   	nop
c0025690:	83 c4 0c             	add    esp,0xc
c0025693:	c3                   	ret    

c0025694 <SSE::SSE()>:
c0025694:	83 ec 0c             	sub    esp,0xc
c0025697:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002569b:	83 ec 08             	sub    esp,0x8
c002569e:	68 24 d2 02 c0       	push   0xc002d224
c00256a3:	50                   	push   eax
c00256a4:	e8 b1 f1 fe ff       	call   c001485a <FPU::FPU(char const*)>
c00256a9:	83 c4 10             	add    esp,0x10
c00256ac:	ba 34 d2 02 c0       	mov    edx,0xc002d234
c00256b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256b5:	89 10                	mov    DWORD PTR [eax],edx
c00256b7:	90                   	nop
c00256b8:	83 c4 0c             	add    esp,0xc
c00256bb:	c3                   	ret    

c00256bc <x87::open(int, int, void*)>:
c00256bc:	83 ec 0c             	sub    esp,0xc
c00256bf:	e8 18 10 00 00       	call   c00266dc <x87Init>
c00256c4:	b8 00 00 00 00       	mov    eax,0x0
c00256c9:	83 c4 0c             	add    esp,0xc
c00256cc:	c3                   	ret    
c00256cd:	90                   	nop

c00256ce <x87::close(int, int, void*)>:
c00256ce:	83 ec 0c             	sub    esp,0xc
c00256d1:	e8 20 10 00 00       	call   c00266f6 <x87Close>
c00256d6:	b8 00 00 00 00       	mov    eax,0x0
c00256db:	83 c4 0c             	add    esp,0xc
c00256de:	c3                   	ret    
c00256df:	90                   	nop

c00256e0 <x87::available()>:
c00256e0:	83 ec 0c             	sub    esp,0xc
c00256e3:	e8 ce 0f 00 00       	call   c00266b6 <x87Detect>
c00256e8:	85 c0                	test   eax,eax
c00256ea:	0f 95 c0             	setne  al
c00256ed:	83 c4 0c             	add    esp,0xc
c00256f0:	c3                   	ret    
c00256f1:	90                   	nop

c00256f2 <x87::save(void*)>:
c00256f2:	83 ec 0c             	sub    esp,0xc
c00256f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256f9:	83 ec 0c             	sub    esp,0xc
c00256fc:	50                   	push   eax
c00256fd:	e8 cf 0f 00 00       	call   c00266d1 <x87Save>
c0025702:	83 c4 10             	add    esp,0x10
c0025705:	90                   	nop
c0025706:	83 c4 0c             	add    esp,0xc
c0025709:	c3                   	ret    

c002570a <x87::load(void*)>:
c002570a:	83 ec 0c             	sub    esp,0xc
c002570d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025711:	83 ec 0c             	sub    esp,0xc
c0025714:	50                   	push   eax
c0025715:	e8 bd 0f 00 00       	call   c00266d7 <x87Load>
c002571a:	83 c4 10             	add    esp,0x10
c002571d:	90                   	nop
c002571e:	83 c4 0c             	add    esp,0xc
c0025721:	c3                   	ret    

c0025722 <x87::x87()>:
c0025722:	83 ec 0c             	sub    esp,0xc
c0025725:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025729:	83 ec 08             	sub    esp,0x8
c002572c:	68 64 d2 02 c0       	push   0xc002d264
c0025731:	50                   	push   eax
c0025732:	e8 23 f1 fe ff       	call   c001485a <FPU::FPU(char const*)>
c0025737:	83 c4 10             	add    esp,0x10
c002573a:	ba 74 d2 02 c0       	mov    edx,0xc002d274
c002573f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025743:	89 10                	mov    DWORD PTR [eax],edx
c0025745:	90                   	nop
c0025746:	83 c4 0c             	add    esp,0xc
c0025749:	c3                   	ret    

c002574a <APIC::disable()>:
c002574a:	90                   	nop
c002574b:	c3                   	ret    

c002574c <APIC::close(int, int, void*)>:
c002574c:	55                   	push   ebp
c002574d:	89 e5                	mov    ebp,esp
c002574f:	83 ec 08             	sub    esp,0x8
c0025752:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025755:	8b 00                	mov    eax,DWORD PTR [eax]
c0025757:	83 c0 3c             	add    eax,0x3c
c002575a:	8b 00                	mov    eax,DWORD PTR [eax]
c002575c:	83 ec 0c             	sub    esp,0xc
c002575f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025762:	ff d0                	call   eax
c0025764:	83 c4 10             	add    esp,0x10
c0025767:	b8 00 00 00 00       	mov    eax,0x0
c002576c:	c9                   	leave  
c002576d:	c3                   	ret    

c002576e <IOAPIC::close(int, int, void*)>:
c002576e:	b8 00 00 00 00       	mov    eax,0x0
c0025773:	c3                   	ret    

c0025774 <APIC::io_wait()>:
c0025774:	eb 00                	jmp    c0025776 <APIC::io_wait()+0x2>
c0025776:	eb 00                	jmp    c0025778 <APIC::io_wait()+0x4>
c0025778:	90                   	nop
c0025779:	c3                   	ret    

c002577a <APIC::getBase()>:
c002577a:	55                   	push   ebp
c002577b:	89 e5                	mov    ebp,esp
c002577d:	83 ec 18             	sub    esp,0x18
c0025780:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0025785:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002578b:	83 e0 08             	and    eax,0x8
c002578e:	84 c0                	test   al,al
c0025790:	75 07                	jne    c0025799 <APIC::getBase()+0x1f>
c0025792:	b8 00 00 00 00       	mov    eax,0x0
c0025797:	eb 21                	jmp    c00257ba <APIC::getBase()+0x40>
c0025799:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c002579e:	83 ec 08             	sub    esp,0x8
c00257a1:	6a 1b                	push   0x1b
c00257a3:	50                   	push   eax
c00257a4:	e8 3f 96 fe ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c00257a9:	83 c4 10             	add    esp,0x10
c00257ac:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00257af:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00257b2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00257b5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00257ba:	c9                   	leave  
c00257bb:	c3                   	ret    

c00257bc <APIC::eoi(unsigned char)>:
c00257bc:	55                   	push   ebp
c00257bd:	89 e5                	mov    ebp,esp
c00257bf:	83 ec 28             	sub    esp,0x28
c00257c2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00257c5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00257c8:	83 ec 0c             	sub    esp,0xc
c00257cb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257ce:	e8 a7 ff ff ff       	call   c002577a <APIC::getBase()>
c00257d3:	83 c4 10             	add    esp,0x10
c00257d6:	05 b0 00 00 00       	add    eax,0xb0
c00257db:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00257de:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00257e1:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00257e7:	90                   	nop
c00257e8:	c9                   	leave  
c00257e9:	c3                   	ret    

c00257ea <APIC::open(int, int, void*)>:
c00257ea:	55                   	push   ebp
c00257eb:	89 e5                	mov    ebp,esp
c00257ed:	57                   	push   edi
c00257ee:	56                   	push   esi
c00257ef:	53                   	push   ebx
c00257f0:	83 ec 2c             	sub    esp,0x2c
c00257f3:	83 ec 0c             	sub    esp,0xc
c00257f6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257f9:	e8 7c ff ff ff       	call   c002577a <APIC::getBase()>
c00257fe:	83 c4 10             	add    esp,0x10
c0025801:	89 c2                	mov    edx,eax
c0025803:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025806:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002580c:	0f b6 f8             	movzx  edi,al
c002580f:	89 d0                	mov    eax,edx
c0025811:	ba 00 00 00 00       	mov    edx,0x0
c0025816:	89 c1                	mov    ecx,eax
c0025818:	80 e5 ff             	and    ch,0xff
c002581b:	89 cb                	mov    ebx,ecx
c002581d:	0f b6 f2             	movzx  esi,dl
c0025820:	89 d8                	mov    eax,ebx
c0025822:	89 f2                	mov    edx,esi
c0025824:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025827:	8d 5f 08             	lea    ebx,[edi+0x8]
c002582a:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002582e:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025832:	83 e0 00             	and    eax,0x0
c0025835:	09 d0                	or     eax,edx
c0025837:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002583b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002583e:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025844:	8d 50 01             	lea    edx,[eax+0x1]
c0025847:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002584a:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025850:	0f b6 d0             	movzx  edx,al
c0025853:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025856:	83 c2 08             	add    edx,0x8
c0025859:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002585d:	0f b6 c9             	movzx  ecx,cl
c0025860:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025866:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002586a:	83 ec 0c             	sub    esp,0xc
c002586d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025870:	e8 05 ff ff ff       	call   c002577a <APIC::getBase()>
c0025875:	83 c4 10             	add    esp,0x10
c0025878:	05 f0 00 00 00       	add    eax,0xf0
c002587d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025880:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025883:	8b 00                	mov    eax,DWORD PTR [eax]
c0025885:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025888:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c002588f:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0025896:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025899:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002589c:	89 10                	mov    DWORD PTR [eax],edx
c002589e:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00258a5:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c00258aa:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00258ad:	7d 7c                	jge    c002592b <APIC::open(int, int, void*)+0x141>
c00258af:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00258b2:	8b 04 85 c0 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf140]
c00258b9:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00258bc:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00258bf:	8b 04 85 c0 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf140]
c00258c6:	c1 e8 08             	shr    eax,0x8
c00258c9:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00258cd:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00258d0:	8b 04 85 c0 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf140]
c00258d7:	c1 e8 18             	shr    eax,0x18
c00258da:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00258dd:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00258e1:	75 40                	jne    c0025923 <APIC::open(int, int, void*)+0x139>
c00258e3:	83 ec 0c             	sub    esp,0xc
c00258e6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258e9:	e8 8c fe ff ff       	call   c002577a <APIC::getBase()>
c00258ee:	83 c4 10             	add    esp,0x10
c00258f1:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00258f5:	75 07                	jne    c00258fe <APIC::open(int, int, void*)+0x114>
c00258f7:	ba 60 03 00 00       	mov    edx,0x360
c00258fc:	eb 05                	jmp    c0025903 <APIC::open(int, int, void*)+0x119>
c00258fe:	ba 50 03 00 00       	mov    edx,0x350
c0025903:	01 d0                	add    eax,edx
c0025905:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025908:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002590b:	8b 00                	mov    eax,DWORD PTR [eax]
c002590d:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0025910:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0025917:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c002591b:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002591e:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025921:	89 10                	mov    DWORD PTR [eax],edx
c0025923:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0025926:	e9 7a ff ff ff       	jmp    c00258a5 <APIC::open(int, int, void*)+0xbb>
c002592b:	b8 00 00 00 00       	mov    eax,0x0
c0025930:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025933:	5b                   	pop    ebx
c0025934:	5e                   	pop    esi
c0025935:	5f                   	pop    edi
c0025936:	5d                   	pop    ebp
c0025937:	c3                   	ret    

c0025938 <IOAPIC::IOAPIC()>:
c0025938:	83 ec 0c             	sub    esp,0xc
c002593b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002593f:	83 ec 08             	sub    esp,0x8
c0025942:	68 a4 d2 02 c0       	push   0xc002d2a4
c0025947:	50                   	push   eax
c0025948:	e8 fb eb fe ff       	call   c0014548 <Device::Device(char const*)>
c002594d:	83 c4 10             	add    esp,0x10
c0025950:	ba cc d3 02 c0       	mov    edx,0xc002d3cc
c0025955:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025959:	89 10                	mov    DWORD PTR [eax],edx
c002595b:	90                   	nop
c002595c:	83 c4 0c             	add    esp,0xc
c002595f:	c3                   	ret    

c0025960 <APIC::APIC()>:
c0025960:	53                   	push   ebx
c0025961:	83 ec 18             	sub    esp,0x18
c0025964:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025968:	83 ec 08             	sub    esp,0x8
c002596b:	68 ac d2 02 c0       	push   0xc002d2ac
c0025970:	50                   	push   eax
c0025971:	e8 3e f3 fe ff       	call   c0014cb4 <InterruptController::InterruptController(char const*)>
c0025976:	83 c4 10             	add    esp,0x10
c0025979:	ba 84 d3 02 c0       	mov    edx,0xc002d384
c002597e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025982:	89 10                	mov    DWORD PTR [eax],edx
c0025984:	a0 80 29 03 c0       	mov    al,ds:0xc0032980
c0025989:	83 f0 01             	xor    eax,0x1
c002598c:	84 c0                	test   al,al
c002598e:	0f 84 a1 00 00 00    	je     c0025a35 <APIC::APIC()+0xd5>
c0025994:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025999:	a0 60 0f 03 c0       	mov    al,ds:0xc0030f60
c002599e:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00259a2:	0f 83 86 00 00 00    	jae    c0025a2e <APIC::APIC()+0xce>
c00259a8:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00259b0:	83 ec 0c             	sub    esp,0xc
c00259b3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00259b7:	e8 84 9e fe ff       	call   c000f840 <malloc>
c00259bc:	83 c4 10             	add    esp,0x10
c00259bf:	89 c3                	mov    ebx,eax
c00259c1:	83 ec 0c             	sub    esp,0xc
c00259c4:	53                   	push   ebx
c00259c5:	e8 6e ff ff ff       	call   c0025938 <IOAPIC::IOAPIC()>
c00259ca:	83 c4 10             	add    esp,0x10
c00259cd:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00259d1:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00259d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00259da:	89 14 85 60 29 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd6a0],edx
c00259e1:	a1 40 29 03 c0       	mov    eax,ds:0xc0032940
c00259e6:	40                   	inc    eax
c00259e7:	a3 40 29 03 c0       	mov    ds:0xc0032940,eax
c00259ec:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c00259f1:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00259f7:	83 ec 08             	sub    esp,0x8
c00259fa:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00259fe:	50                   	push   eax
c00259ff:	e8 54 e9 fe ff       	call   c0014358 <Device::addChild(Device*)>
c0025a04:	83 c4 10             	add    esp,0x10
c0025a07:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025a0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a0d:	83 c0 08             	add    eax,0x8
c0025a10:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a12:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025a17:	6a 00                	push   0x0
c0025a19:	6a 00                	push   0x0
c0025a1b:	52                   	push   edx
c0025a1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025a20:	ff d0                	call   eax
c0025a22:	83 c4 10             	add    esp,0x10
c0025a25:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025a29:	e9 6b ff ff ff       	jmp    c0025999 <APIC::APIC()+0x39>
c0025a2e:	c6 05 80 29 03 c0 01 	mov    BYTE PTR ds:0xc0032980,0x1
c0025a35:	90                   	nop
c0025a36:	83 c4 18             	add    esp,0x18
c0025a39:	5b                   	pop    ebx
c0025a3a:	c3                   	ret    
c0025a3b:	90                   	nop

c0025a3c <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025a3c:	55                   	push   ebp
c0025a3d:	89 e5                	mov    ebp,esp
c0025a3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a42:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025a48:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025a4b:	72 1d                	jb     c0025a6a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025a4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a50:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025a56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a59:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025a5f:	01 d0                	add    eax,edx
c0025a61:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025a64:	73 04                	jae    c0025a6a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025a66:	b0 01                	mov    al,0x1
c0025a68:	eb 02                	jmp    c0025a6c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025a6a:	b0 00                	mov    al,0x0
c0025a6c:	5d                   	pop    ebp
c0025a6d:	c3                   	ret    

c0025a6e <IOAPIC::read(int)>:
c0025a6e:	55                   	push   ebp
c0025a6f:	89 e5                	mov    ebp,esp
c0025a71:	83 ec 10             	sub    esp,0x10
c0025a74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a77:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025a7d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025a80:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a83:	0f b6 d0             	movzx  edx,al
c0025a86:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025a89:	89 10                	mov    DWORD PTR [eax],edx
c0025a8b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025a8e:	83 c0 10             	add    eax,0x10
c0025a91:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a93:	c9                   	leave  
c0025a94:	c3                   	ret    
c0025a95:	90                   	nop

c0025a96 <IOAPIC::open(int, int, void*)>:
c0025a96:	55                   	push   ebp
c0025a97:	89 e5                	mov    ebp,esp
c0025a99:	57                   	push   edi
c0025a9a:	56                   	push   esi
c0025a9b:	53                   	push   ebx
c0025a9c:	83 ec 0c             	sub    esp,0xc
c0025a9f:	83 ec 0c             	sub    esp,0xc
c0025aa2:	68 d7 d2 02 c0       	push   0xc002d2d7
c0025aa7:	e8 85 d4 fe ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0025aac:	83 c4 10             	add    esp,0x10
c0025aaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ab2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025ab5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025abb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025abe:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025ac4:	8b 14 85 a0 0f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf060]
c0025acb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ace:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025ad4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ad7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025add:	8b 14 85 20 10 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcefe0]
c0025ae4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ae7:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025aed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025af0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025af6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025af9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025aff:	0f b6 f8             	movzx  edi,al
c0025b02:	89 d0                	mov    eax,edx
c0025b04:	ba 00 00 00 00       	mov    edx,0x0
c0025b09:	89 c1                	mov    ecx,eax
c0025b0b:	80 e5 ff             	and    ch,0xff
c0025b0e:	89 cb                	mov    ebx,ecx
c0025b10:	0f b6 f2             	movzx  esi,dl
c0025b13:	89 d8                	mov    eax,ebx
c0025b15:	89 f2                	mov    edx,esi
c0025b17:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025b1a:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025b1d:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025b21:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025b25:	83 e0 00             	and    eax,0x0
c0025b28:	09 d0                	or     eax,edx
c0025b2a:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025b2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b31:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025b37:	8d 50 01             	lea    edx,[eax+0x1]
c0025b3a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025b3d:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025b43:	0f b6 d0             	movzx  edx,al
c0025b46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b49:	83 c2 08             	add    edx,0x8
c0025b4c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025b50:	0f b6 c9             	movzx  ecx,cl
c0025b53:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025b59:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025b5d:	83 ec 08             	sub    esp,0x8
c0025b60:	6a 01                	push   0x1
c0025b62:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b65:	e8 04 ff ff ff       	call   c0025a6e <IOAPIC::read(int)>
c0025b6a:	83 c4 10             	add    esp,0x10
c0025b6d:	c1 f8 10             	sar    eax,0x10
c0025b70:	0f b6 c0             	movzx  eax,al
c0025b73:	8d 50 01             	lea    edx,[eax+0x1]
c0025b76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b79:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025b7f:	b8 00 00 00 00       	mov    eax,0x0
c0025b84:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025b87:	5b                   	pop    ebx
c0025b88:	5e                   	pop    esi
c0025b89:	5f                   	pop    edi
c0025b8a:	5d                   	pop    ebp
c0025b8b:	c3                   	ret    

c0025b8c <IOAPIC::write(int, int)>:
c0025b8c:	55                   	push   ebp
c0025b8d:	89 e5                	mov    ebp,esp
c0025b8f:	83 ec 10             	sub    esp,0x10
c0025b92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b95:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025b9b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025b9e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ba1:	0f b6 d0             	movzx  edx,al
c0025ba4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025ba7:	89 10                	mov    DWORD PTR [eax],edx
c0025ba9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025bac:	8d 50 10             	lea    edx,[eax+0x10]
c0025baf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025bb2:	89 02                	mov    DWORD PTR [edx],eax
c0025bb4:	90                   	nop
c0025bb5:	c9                   	leave  
c0025bb6:	c3                   	ret    
c0025bb7:	90                   	nop

c0025bb8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025bb8:	55                   	push   ebp
c0025bb9:	89 e5                	mov    ebp,esp
c0025bbb:	53                   	push   ebx
c0025bbc:	83 ec 2c             	sub    esp,0x2c
c0025bbf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025bc2:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025bc5:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025bc8:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025bcb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025bce:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025bd1:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025bd4:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025bd7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025bda:	88 d8                	mov    al,bl
c0025bdc:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025bdf:	88 c8                	mov    al,cl
c0025be1:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025be4:	88 d0                	mov    al,dl
c0025be6:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025be9:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025bed:	83 c0 08             	add    eax,0x8
c0025bf0:	01 c0                	add    eax,eax
c0025bf2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025bf5:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025bf9:	83 c0 08             	add    eax,0x8
c0025bfc:	01 c0                	add    eax,eax
c0025bfe:	40                   	inc    eax
c0025bff:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025c02:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025c05:	50                   	push   eax
c0025c06:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c09:	e8 60 fe ff ff       	call   c0025a6e <IOAPIC::read(int)>
c0025c0e:	83 c4 08             	add    esp,0x8
c0025c11:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025c14:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025c1b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025c1e:	c1 e0 18             	shl    eax,0x18
c0025c21:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025c24:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025c27:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025c2a:	52                   	push   edx
c0025c2b:	50                   	push   eax
c0025c2c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c2f:	e8 58 ff ff ff       	call   c0025b8c <IOAPIC::write(int, int)>
c0025c34:	83 c4 0c             	add    esp,0xc
c0025c37:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025c3a:	50                   	push   eax
c0025c3b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c3e:	e8 2b fe ff ff       	call   c0025a6e <IOAPIC::read(int)>
c0025c43:	83 c4 08             	add    esp,0x8
c0025c46:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025c49:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025c50:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025c57:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025c5e:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025c62:	74 09                	je     c0025c6d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025c64:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025c6b:	eb 07                	jmp    c0025c74 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025c6d:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025c74:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025c78:	74 09                	je     c0025c83 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025c7a:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025c81:	eb 07                	jmp    c0025c8a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025c83:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025c8a:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025c91:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025c95:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025c98:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025c9b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025c9e:	52                   	push   edx
c0025c9f:	50                   	push   eax
c0025ca0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ca3:	e8 e4 fe ff ff       	call   c0025b8c <IOAPIC::write(int, int)>
c0025ca8:	83 c4 0c             	add    esp,0xc
c0025cab:	90                   	nop
c0025cac:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025caf:	c9                   	leave  
c0025cb0:	c3                   	ret    
c0025cb1:	90                   	nop

c0025cb2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025cb2:	55                   	push   ebp
c0025cb3:	89 e5                	mov    ebp,esp
c0025cb5:	57                   	push   edi
c0025cb6:	56                   	push   esi
c0025cb7:	53                   	push   ebx
c0025cb8:	83 ec 2c             	sub    esp,0x2c
c0025cbb:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025cbe:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025cc1:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025cc5:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025cc9:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025ccd:	74 5a                	je     c0025d29 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025ccf:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025cd3:	7f 44                	jg     c0025d19 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025cd5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025cd8:	05 20 d8 02 c0       	add    eax,0xc002d820
c0025cdd:	8a 00                	mov    al,BYTE PTR [eax]
c0025cdf:	0f b6 c0             	movzx  eax,al
c0025ce2:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025ce5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ce8:	66 8b 84 00 40 0f 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf0c0]
c0025cf0:	0f b7 c0             	movzx  eax,ax
c0025cf3:	83 e0 02             	and    eax,0x2
c0025cf6:	85 c0                	test   eax,eax
c0025cf8:	74 04                	je     c0025cfe <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025cfa:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025cfe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d01:	66 8b 84 00 40 0f 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf0c0]
c0025d09:	0f b7 c0             	movzx  eax,ax
c0025d0c:	83 e0 08             	and    eax,0x8
c0025d0f:	85 c0                	test   eax,eax
c0025d11:	74 16                	je     c0025d29 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025d13:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025d17:	eb 10                	jmp    c0025d29 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025d19:	83 ec 0c             	sub    esp,0xc
c0025d1c:	68 e8 d2 02 c0       	push   0xc002d2e8
c0025d21:	e8 bd 48 ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c0025d26:	83 c4 10             	add    esp,0x10
c0025d29:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025d2d:	a1 40 29 03 c0       	mov    eax,ds:0xc0032940
c0025d32:	83 ec 08             	sub    esp,0x8
c0025d35:	50                   	push   eax
c0025d36:	68 20 d3 02 c0       	push   0xc002d320
c0025d3b:	e8 f1 d1 fe ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0025d40:	83 c4 10             	add    esp,0x10
c0025d43:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025d4a:	a1 40 29 03 c0       	mov    eax,ds:0xc0032940
c0025d4f:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025d52:	7d 67                	jge    c0025dbb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025d54:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025d57:	8b 04 85 60 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd6a0]
c0025d5e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025d61:	83 ec 08             	sub    esp,0x8
c0025d64:	52                   	push   edx
c0025d65:	50                   	push   eax
c0025d66:	e8 d1 fc ff ff       	call   c0025a3c <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025d6b:	83 c4 10             	add    esp,0x10
c0025d6e:	84 c0                	test   al,al
c0025d70:	74 44                	je     c0025db6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025d72:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025d75:	8b 1c 85 60 29 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcd6a0]
c0025d7c:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025d80:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025d83:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025d87:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d8a:	83 c0 20             	add    eax,0x20
c0025d8d:	0f b6 f0             	movzx  esi,al
c0025d90:	b8 00 00 00 00       	mov    eax,0x0
c0025d95:	99                   	cdq    
c0025d96:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025d99:	0f b6 c9             	movzx  ecx,cl
c0025d9c:	83 ec 04             	sub    esp,0x4
c0025d9f:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025da2:	57                   	push   edi
c0025da3:	56                   	push   esi
c0025da4:	52                   	push   edx
c0025da5:	50                   	push   eax
c0025da6:	51                   	push   ecx
c0025da7:	53                   	push   ebx
c0025da8:	e8 0b fe ff ff       	call   c0025bb8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025dad:	83 c4 20             	add    esp,0x20
c0025db0:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025db4:	eb 05                	jmp    c0025dbb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025db6:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025db9:	eb 8f                	jmp    c0025d4a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025dbb:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025dbe:	83 f0 01             	xor    eax,0x1
c0025dc1:	84 c0                	test   al,al
c0025dc3:	74 10                	je     c0025dd5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025dc5:	83 ec 0c             	sub    esp,0xc
c0025dc8:	68 37 d3 02 c0       	push   0xc002d337
c0025dcd:	e8 11 48 ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c0025dd2:	83 c4 10             	add    esp,0x10
c0025dd5:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025dd9:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025de0:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025de4:	7f 65                	jg     c0025e4b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025de6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025de9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025dec:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025df3:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025df6:	01 ca                	add    edx,ecx
c0025df8:	83 c2 54             	add    edx,0x54
c0025dfb:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025dff:	85 c0                	test   eax,eax
c0025e01:	75 43                	jne    c0025e46 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025e03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e06:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e09:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025e10:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025e13:	01 ca                	add    edx,ecx
c0025e15:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025e18:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025e1b:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025e1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e22:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e25:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025e2c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025e2f:	01 ca                	add    edx,ecx
c0025e31:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025e37:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025e3a:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025e3e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e41:	83 e8 20             	sub    eax,0x20
c0025e44:	eb 1a                	jmp    c0025e60 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025e46:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025e49:	eb 95                	jmp    c0025de0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025e4b:	83 ec 0c             	sub    esp,0xc
c0025e4e:	68 44 d3 02 c0       	push   0xc002d344
c0025e53:	e8 8b 47 ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c0025e58:	83 c4 10             	add    esp,0x10
c0025e5b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025e60:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025e63:	5b                   	pop    ebx
c0025e64:	5e                   	pop    esi
c0025e65:	5f                   	pop    edi
c0025e66:	5d                   	pop    ebp
c0025e67:	c3                   	ret    

c0025e68 <PIC::disable()>:
c0025e68:	55                   	push   ebp
c0025e69:	89 e5                	mov    ebp,esp
c0025e6b:	83 ec 10             	sub    esp,0x10
c0025e6e:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025e74:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025e78:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025e7b:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025e7f:	ee                   	out    dx,al
c0025e80:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025e86:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025e8a:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025e8d:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025e91:	ee                   	out    dx,al
c0025e92:	90                   	nop
c0025e93:	c9                   	leave  
c0025e94:	c3                   	ret    
c0025e95:	90                   	nop

c0025e96 <PIC::close(int, int, void*)>:
c0025e96:	55                   	push   ebp
c0025e97:	89 e5                	mov    ebp,esp
c0025e99:	83 ec 08             	sub    esp,0x8
c0025e9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e9f:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ea1:	83 c0 3c             	add    eax,0x3c
c0025ea4:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ea6:	83 ec 0c             	sub    esp,0xc
c0025ea9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025eac:	ff d0                	call   eax
c0025eae:	83 c4 10             	add    esp,0x10
c0025eb1:	b8 00 00 00 00       	mov    eax,0x0
c0025eb6:	c9                   	leave  
c0025eb7:	c3                   	ret    

c0025eb8 <PIC::PIC()>:
c0025eb8:	83 ec 0c             	sub    esp,0xc
c0025ebb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ebf:	83 ec 08             	sub    esp,0x8
c0025ec2:	68 f0 d3 02 c0       	push   0xc002d3f0
c0025ec7:	50                   	push   eax
c0025ec8:	e8 e7 ed fe ff       	call   c0014cb4 <InterruptController::InterruptController(char const*)>
c0025ecd:	83 c4 10             	add    esp,0x10
c0025ed0:	ba 1c d4 02 c0       	mov    edx,0xc002d41c
c0025ed5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ed9:	89 10                	mov    DWORD PTR [eax],edx
c0025edb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025edf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ee5:	0f b6 d0             	movzx  edx,al
c0025ee8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eec:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025ef3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ef7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025efd:	0f b6 d0             	movzx  edx,al
c0025f00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f04:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025f09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f0d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f13:	8d 50 01             	lea    edx,[eax+0x1]
c0025f16:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025f1a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025f20:	0f b6 d0             	movzx  edx,al
c0025f23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f27:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025f2b:	83 e1 3f             	and    ecx,0x3f
c0025f2e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025f32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f36:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f3c:	0f b6 d0             	movzx  edx,al
c0025f3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f43:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025f4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f4e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f54:	0f b6 d0             	movzx  edx,al
c0025f57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f5b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025f60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f64:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f6a:	8d 50 01             	lea    edx,[eax+0x1]
c0025f6d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025f71:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025f77:	0f b6 d0             	movzx  edx,al
c0025f7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f7e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025f82:	83 e1 3f             	and    ecx,0x3f
c0025f85:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025f89:	90                   	nop
c0025f8a:	83 c4 0c             	add    esp,0xc
c0025f8d:	c3                   	ret    

c0025f8e <PIC::ioWait()>:
c0025f8e:	eb 00                	jmp    c0025f90 <PIC::ioWait()+0x2>
c0025f90:	eb 00                	jmp    c0025f92 <PIC::ioWait()+0x4>
c0025f92:	90                   	nop
c0025f93:	c3                   	ret    

c0025f94 <PIC::getIRQReg(int)>:
c0025f94:	55                   	push   ebp
c0025f95:	89 e5                	mov    ebp,esp
c0025f97:	83 ec 10             	sub    esp,0x10
c0025f9a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f9d:	0f b6 c0             	movzx  eax,al
c0025fa0:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025fa6:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025fa9:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025fac:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025fb0:	ee                   	out    dx,al
c0025fb1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025fb4:	0f b6 c0             	movzx  eax,al
c0025fb7:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025fbd:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025fc0:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025fc3:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025fc7:	ee                   	out    dx,al
c0025fc8:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025fce:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025fd2:	89 c2                	mov    edx,eax
c0025fd4:	ec                   	in     al,dx
c0025fd5:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025fd8:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025fdb:	0f b6 c0             	movzx  eax,al
c0025fde:	c1 e0 08             	shl    eax,0x8
c0025fe1:	89 c1                	mov    ecx,eax
c0025fe3:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025fe9:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025fed:	89 c2                	mov    edx,eax
c0025fef:	ec                   	in     al,dx
c0025ff0:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025ff3:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025ff6:	0f b6 c0             	movzx  eax,al
c0025ff9:	09 c8                	or     eax,ecx
c0025ffb:	c9                   	leave  
c0025ffc:	c3                   	ret    
c0025ffd:	90                   	nop

c0025ffe <PIC::eoi(unsigned char)>:
c0025ffe:	55                   	push   ebp
c0025fff:	89 e5                	mov    ebp,esp
c0026001:	83 ec 14             	sub    esp,0x14
c0026004:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026007:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c002600a:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002600e:	75 1e                	jne    c002602e <PIC::eoi(unsigned char)+0x30>
c0026010:	6a 0b                	push   0xb
c0026012:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026015:	e8 7a ff ff ff       	call   c0025f94 <PIC::getIRQReg(int)>
c002601a:	83 c4 08             	add    esp,0x8
c002601d:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0026021:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0026025:	25 80 00 00 00       	and    eax,0x80
c002602a:	85 c0                	test   eax,eax
c002602c:	74 5f                	je     c002608d <PIC::eoi(unsigned char)+0x8f>
c002602e:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0026032:	75 2d                	jne    c0026061 <PIC::eoi(unsigned char)+0x63>
c0026034:	6a 0b                	push   0xb
c0026036:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026039:	e8 56 ff ff ff       	call   c0025f94 <PIC::getIRQReg(int)>
c002603e:	83 c4 08             	add    esp,0x8
c0026041:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0026045:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026048:	66 85 c0             	test   ax,ax
c002604b:	78 14                	js     c0026061 <PIC::eoi(unsigned char)+0x63>
c002604d:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0026053:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0026057:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002605a:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c002605e:	ee                   	out    dx,al
c002605f:	eb 2d                	jmp    c002608e <PIC::eoi(unsigned char)+0x90>
c0026061:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026065:	76 12                	jbe    c0026079 <PIC::eoi(unsigned char)+0x7b>
c0026067:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c002606d:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0026071:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026074:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026078:	ee                   	out    dx,al
c0026079:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002607f:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0026083:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026086:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002608a:	ee                   	out    dx,al
c002608b:	eb 01                	jmp    c002608e <PIC::eoi(unsigned char)+0x90>
c002608d:	90                   	nop
c002608e:	c9                   	leave  
c002608f:	c3                   	ret    

c0026090 <PIC::remap()>:
c0026090:	55                   	push   ebp
c0026091:	89 e5                	mov    ebp,esp
c0026093:	83 ec 48             	sub    esp,0x48
c0026096:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c002609d:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c00260a4:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c00260aa:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c00260ad:	89 c2                	mov    edx,eax
c00260af:	ec                   	in     al,dx
c00260b0:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c00260b3:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c00260b6:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00260b9:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c00260bf:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c00260c2:	89 c2                	mov    edx,eax
c00260c4:	ec                   	in     al,dx
c00260c5:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c00260c8:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c00260cb:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c00260ce:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c00260d4:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c00260d8:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c00260db:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c00260de:	ee                   	out    dx,al
c00260df:	83 ec 0c             	sub    esp,0xc
c00260e2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260e5:	e8 a4 fe ff ff       	call   c0025f8e <PIC::ioWait()>
c00260ea:	83 c4 10             	add    esp,0x10
c00260ed:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c00260f3:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c00260f7:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c00260fa:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00260fd:	ee                   	out    dx,al
c00260fe:	83 ec 0c             	sub    esp,0xc
c0026101:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026104:	e8 85 fe ff ff       	call   c0025f8e <PIC::ioWait()>
c0026109:	83 c4 10             	add    esp,0x10
c002610c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002610f:	0f b6 c0             	movzx  eax,al
c0026112:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0026118:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c002611b:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c002611e:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0026121:	ee                   	out    dx,al
c0026122:	83 ec 0c             	sub    esp,0xc
c0026125:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026128:	e8 61 fe ff ff       	call   c0025f8e <PIC::ioWait()>
c002612d:	83 c4 10             	add    esp,0x10
c0026130:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026133:	0f b6 c0             	movzx  eax,al
c0026136:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c002613c:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c002613f:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0026142:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026145:	ee                   	out    dx,al
c0026146:	83 ec 0c             	sub    esp,0xc
c0026149:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002614c:	e8 3d fe ff ff       	call   c0025f8e <PIC::ioWait()>
c0026151:	83 c4 10             	add    esp,0x10
c0026154:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c002615a:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c002615e:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0026161:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0026164:	ee                   	out    dx,al
c0026165:	83 ec 0c             	sub    esp,0xc
c0026168:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002616b:	e8 1e fe ff ff       	call   c0025f8e <PIC::ioWait()>
c0026170:	83 c4 10             	add    esp,0x10
c0026173:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026179:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c002617d:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0026180:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026183:	ee                   	out    dx,al
c0026184:	83 ec 0c             	sub    esp,0xc
c0026187:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002618a:	e8 ff fd ff ff       	call   c0025f8e <PIC::ioWait()>
c002618f:	83 c4 10             	add    esp,0x10
c0026192:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0026198:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c002619c:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c002619f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00261a2:	ee                   	out    dx,al
c00261a3:	83 ec 0c             	sub    esp,0xc
c00261a6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261a9:	e8 e0 fd ff ff       	call   c0025f8e <PIC::ioWait()>
c00261ae:	83 c4 10             	add    esp,0x10
c00261b1:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c00261b7:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c00261bb:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c00261be:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00261c1:	ee                   	out    dx,al
c00261c2:	83 ec 0c             	sub    esp,0xc
c00261c5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261c8:	e8 c1 fd ff ff       	call   c0025f8e <PIC::ioWait()>
c00261cd:	83 c4 10             	add    esp,0x10
c00261d0:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c00261d4:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c00261da:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c00261dd:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c00261e0:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00261e3:	ee                   	out    dx,al
c00261e4:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c00261e8:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c00261ee:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c00261f1:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c00261f4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00261f7:	ee                   	out    dx,al
c00261f8:	90                   	nop
c00261f9:	c9                   	leave  
c00261fa:	c3                   	ret    
c00261fb:	90                   	nop

c00261fc <PIC::open(int, int, void*)>:
c00261fc:	55                   	push   ebp
c00261fd:	89 e5                	mov    ebp,esp
c00261ff:	83 ec 18             	sub    esp,0x18
c0026202:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0026208:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c002620c:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002620f:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026213:	ee                   	out    dx,al
c0026214:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c002621a:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c002621e:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026221:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026225:	ee                   	out    dx,al
c0026226:	83 ec 0c             	sub    esp,0xc
c0026229:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002622c:	e8 5f fe ff ff       	call   c0026090 <PIC::remap()>
c0026231:	83 c4 10             	add    esp,0x10
c0026234:	b8 00 00 00 00       	mov    eax,0x0
c0026239:	c9                   	leave  
c002623a:	c3                   	ret    
c002623b:	90                   	nop

c002623c <APICTimer::close(int, int, void*)>:
c002623c:	b8 00 00 00 00       	mov    eax,0x0
c0026241:	c3                   	ret    

c0026242 <apicTimerHandler(regs*, void*)>:
c0026242:	83 ec 0c             	sub    esp,0xc
c0026245:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026249:	8b 00                	mov    eax,DWORD PTR [eax]
c002624b:	99                   	cdq    
c002624c:	52                   	push   edx
c002624d:	50                   	push   eax
c002624e:	6a 00                	push   0x0
c0026250:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026255:	e8 92 07 00 00       	call   c00269ec <__udivdi3>
c002625a:	83 c4 10             	add    esp,0x10
c002625d:	83 ec 08             	sub    esp,0x8
c0026260:	52                   	push   edx
c0026261:	50                   	push   eax
c0026262:	e8 a8 0a ff ff       	call   c0016d0f <timerHandler(unsigned long long)>
c0026267:	83 c4 10             	add    esp,0x10
c002626a:	90                   	nop
c002626b:	83 c4 0c             	add    esp,0xc
c002626e:	c3                   	ret    
c002626f:	90                   	nop

c0026270 <APICTimer::write(int)>:
c0026270:	53                   	push   ebx
c0026271:	83 ec 28             	sub    esp,0x28
c0026274:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026278:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002627c:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026282:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0026287:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002628d:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026293:	83 ec 0c             	sub    esp,0xc
c0026296:	50                   	push   eax
c0026297:	e8 de f4 ff ff       	call   c002577a <APIC::getBase()>
c002629c:	83 c4 10             	add    esp,0x10
c002629f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00262a3:	a1 50 ec 02 c0       	mov    eax,ds:0xc002ec50
c00262a8:	8b 15 54 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ec54
c00262ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00262b2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00262b6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262ba:	05 e0 03 00 00       	add    eax,0x3e0
c00262bf:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00262c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262c9:	05 80 03 00 00       	add    eax,0x380
c00262ce:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00262d4:	fb                   	sti    
c00262d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262d9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00262dd:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c00262e2:	83 d2 00             	adc    edx,0x0
c00262e5:	89 c1                	mov    ecx,eax
c00262e7:	89 d3                	mov    ebx,edx
c00262e9:	a1 50 ec 02 c0       	mov    eax,ds:0xc002ec50
c00262ee:	8b 15 54 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ec54
c00262f4:	39 c8                	cmp    eax,ecx
c00262f6:	89 d0                	mov    eax,edx
c00262f8:	19 d8                	sbb    eax,ebx
c00262fa:	73 02                	jae    c00262fe <APICTimer::write(int)+0x8e>
c00262fc:	eb d7                	jmp    c00262d5 <APICTimer::write(int)+0x65>
c00262fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026302:	05 20 03 00 00       	add    eax,0x320
c0026307:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c002630d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026311:	05 90 03 00 00       	add    eax,0x390
c0026316:	8b 00                	mov    eax,DWORD PTR [eax]
c0026318:	f7 d0                	not    eax
c002631a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002631e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026322:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026326:	ba 00 00 00 00       	mov    edx,0x0
c002632b:	f7 f3                	div    ebx
c002632d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026331:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026335:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002633b:	0d 00 00 02 00       	or     eax,0x20000
c0026340:	89 c2                	mov    edx,eax
c0026342:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026346:	05 20 03 00 00       	add    eax,0x320
c002634b:	89 10                	mov    DWORD PTR [eax],edx
c002634d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026351:	05 e0 03 00 00       	add    eax,0x3e0
c0026356:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002635c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026360:	05 80 03 00 00       	add    eax,0x380
c0026365:	89 c2                	mov    edx,eax
c0026367:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002636b:	89 02                	mov    DWORD PTR [edx],eax
c002636d:	90                   	nop
c002636e:	83 c4 28             	add    esp,0x28
c0026371:	5b                   	pop    ebx
c0026372:	c3                   	ret    
c0026373:	90                   	nop

c0026374 <APICTimer::open(int, int, void*)>:
c0026374:	57                   	push   edi
c0026375:	56                   	push   esi
c0026376:	53                   	push   ebx
c0026377:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002637b:	8b 00                	mov    eax,DWORD PTR [eax]
c002637d:	83 c0 24             	add    eax,0x24
c0026380:	8b 00                	mov    eax,DWORD PTR [eax]
c0026382:	83 ec 08             	sub    esp,0x8
c0026385:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026389:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002638d:	ff d0                	call   eax
c002638f:	83 c4 10             	add    esp,0x10
c0026392:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0026397:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002639d:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00263a3:	83 ec 0c             	sub    esp,0xc
c00263a6:	50                   	push   eax
c00263a7:	e8 ce f3 ff ff       	call   c002577a <APIC::getBase()>
c00263ac:	83 c4 10             	add    esp,0x10
c00263af:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c00263b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263b9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00263bf:	0f b6 f8             	movzx  edi,al
c00263c2:	89 d0                	mov    eax,edx
c00263c4:	ba 00 00 00 00       	mov    edx,0x0
c00263c9:	89 c1                	mov    ecx,eax
c00263cb:	80 e5 ff             	and    ch,0xff
c00263ce:	89 cb                	mov    ebx,ecx
c00263d0:	0f b6 f2             	movzx  esi,dl
c00263d3:	89 d8                	mov    eax,ebx
c00263d5:	89 f2                	mov    edx,esi
c00263d7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00263db:	8d 5f 08             	lea    ebx,[edi+0x8]
c00263de:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00263e2:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00263e6:	83 e0 00             	and    eax,0x0
c00263e9:	09 d0                	or     eax,edx
c00263eb:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00263ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263f3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00263f9:	8d 50 01             	lea    edx,[eax+0x1]
c00263fc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026400:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026406:	0f b6 d0             	movzx  edx,al
c0026409:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002640d:	83 c2 08             	add    edx,0x8
c0026410:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026414:	0f b6 c9             	movzx  ecx,cl
c0026417:	81 c9 00 00 01 00    	or     ecx,0x10000
c002641d:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026421:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026425:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026429:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002642f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026433:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026437:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002643d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026441:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026447:	83 ec 0c             	sub    esp,0xc
c002644a:	51                   	push   ecx
c002644b:	6a 01                	push   0x1
c002644d:	68 42 62 02 c0       	push   0xc0026242
c0026452:	52                   	push   edx
c0026453:	50                   	push   eax
c0026454:	e8 83 de fe ff       	call   c00142dc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026459:	83 c4 20             	add    esp,0x20
c002645c:	89 c2                	mov    edx,eax
c002645e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026462:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026468:	b8 00 00 00 00       	mov    eax,0x0
c002646d:	5b                   	pop    ebx
c002646e:	5e                   	pop    esi
c002646f:	5f                   	pop    edi
c0026470:	c3                   	ret    
c0026471:	90                   	nop

c0026472 <APICTimer::APICTimer()>:
c0026472:	83 ec 0c             	sub    esp,0xc
c0026475:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026479:	83 ec 08             	sub    esp,0x8
c002647c:	68 5c d4 02 c0       	push   0xc002d45c
c0026481:	50                   	push   eax
c0026482:	e8 f9 07 ff ff       	call   c0016c80 <Timer::Timer(char const*)>
c0026487:	83 c4 10             	add    esp,0x10
c002648a:	ba 70 d4 02 c0       	mov    edx,0xc002d470
c002648f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026493:	89 10                	mov    DWORD PTR [eax],edx
c0026495:	90                   	nop
c0026496:	83 c4 0c             	add    esp,0xc
c0026499:	c3                   	ret    

c002649a <PIT::write(int)>:
c002649a:	83 ec 10             	sub    esp,0x10
c002649d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00264a1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00264a5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00264ab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00264af:	a3 84 29 03 c0       	mov    ds:0xc0032984,eax
c00264b4:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00264b9:	99                   	cdq    
c00264ba:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00264be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00264c2:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00264c9:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00264ce:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00264d2:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00264d7:	ee                   	out    dx,al
c00264d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00264dc:	0f b6 c0             	movzx  eax,al
c00264df:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00264e6:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00264ea:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00264ee:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00264f3:	ee                   	out    dx,al
c00264f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00264f8:	c1 f8 08             	sar    eax,0x8
c00264fb:	0f b6 c0             	movzx  eax,al
c00264fe:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026505:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026509:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002650d:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026512:	ee                   	out    dx,al
c0026513:	90                   	nop
c0026514:	83 c4 10             	add    esp,0x10
c0026517:	c3                   	ret    

c0026518 <pitHandler(regs*, void*)>:
c0026518:	83 ec 0c             	sub    esp,0xc
c002651b:	a1 84 29 03 c0       	mov    eax,ds:0xc0032984
c0026520:	99                   	cdq    
c0026521:	52                   	push   edx
c0026522:	50                   	push   eax
c0026523:	6a 00                	push   0x0
c0026525:	68 00 ca 9a 3b       	push   0x3b9aca00
c002652a:	e8 bd 04 00 00       	call   c00269ec <__udivdi3>
c002652f:	83 c4 10             	add    esp,0x10
c0026532:	83 ec 08             	sub    esp,0x8
c0026535:	52                   	push   edx
c0026536:	50                   	push   eax
c0026537:	e8 d3 07 ff ff       	call   c0016d0f <timerHandler(unsigned long long)>
c002653c:	83 c4 10             	add    esp,0x10
c002653f:	90                   	nop
c0026540:	83 c4 0c             	add    esp,0xc
c0026543:	c3                   	ret    

c0026544 <PIT::open(int, int, void*)>:
c0026544:	83 ec 0c             	sub    esp,0xc
c0026547:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002654b:	8b 00                	mov    eax,DWORD PTR [eax]
c002654d:	83 c0 24             	add    eax,0x24
c0026550:	8b 00                	mov    eax,DWORD PTR [eax]
c0026552:	83 ec 08             	sub    esp,0x8
c0026555:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026559:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002655d:	ff d0                	call   eax
c002655f:	83 c4 10             	add    esp,0x10
c0026562:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026566:	83 ec 0c             	sub    esp,0xc
c0026569:	6a 00                	push   0x0
c002656b:	6a 01                	push   0x1
c002656d:	68 18 65 02 c0       	push   0xc0026518
c0026572:	6a 00                	push   0x0
c0026574:	50                   	push   eax
c0026575:	e8 62 dd fe ff       	call   c00142dc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002657a:	83 c4 20             	add    esp,0x20
c002657d:	89 c2                	mov    edx,eax
c002657f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026583:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026589:	b8 00 00 00 00       	mov    eax,0x0
c002658e:	83 c4 0c             	add    esp,0xc
c0026591:	c3                   	ret    

c0026592 <PIT::close(int, int, void*)>:
c0026592:	83 ec 0c             	sub    esp,0xc
c0026595:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026599:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00265a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265a7:	6a 01                	push   0x1
c00265a9:	68 18 65 02 c0       	push   0xc0026518
c00265ae:	6a 00                	push   0x0
c00265b0:	50                   	push   eax
c00265b1:	e8 64 dd fe ff       	call   c001431a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00265b6:	83 c4 10             	add    esp,0x10
c00265b9:	b8 00 00 00 00       	mov    eax,0x0
c00265be:	83 c4 0c             	add    esp,0xc
c00265c1:	c3                   	ret    

c00265c2 <PIT::PIT()>:
c00265c2:	83 ec 0c             	sub    esp,0xc
c00265c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265c9:	83 ec 08             	sub    esp,0x8
c00265cc:	68 98 d4 02 c0       	push   0xc002d498
c00265d1:	50                   	push   eax
c00265d2:	e8 a9 06 ff ff       	call   c0016c80 <Timer::Timer(char const*)>
c00265d7:	83 c4 10             	add    esp,0x10
c00265da:	ba c0 d4 02 c0       	mov    edx,0xc002d4c0
c00265df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265e3:	89 10                	mov    DWORD PTR [eax],edx
c00265e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265e9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00265ef:	0f b6 d0             	movzx  edx,al
c00265f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265f6:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00265fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026601:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026607:	0f b6 d0             	movzx  edx,al
c002660a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002660e:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0026613:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026617:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002661d:	8d 50 01             	lea    edx,[eax+0x1]
c0026620:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026624:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002662a:	0f b6 d0             	movzx  edx,al
c002662d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026631:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026635:	83 e1 3f             	and    ecx,0x3f
c0026638:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002663c:	90                   	nop
c002663d:	83 c4 0c             	add    esp,0xc
c0026640:	c3                   	ret    
c0026641:	66 90                	xchg   ax,ax
c0026643:	66 90                	xchg   ax,ax
c0026645:	66 90                	xchg   ax,ax
c0026647:	66 90                	xchg   ax,ax
c0026649:	66 90                	xchg   ax,ax
c002664b:	66 90                	xchg   ax,ax
c002664d:	66 90                	xchg   ax,ax
c002664f:	90                   	nop

c0026650 <avxDetect>:
c0026650:	b8 00 00 00 00       	mov    eax,0x0
c0026655:	c3                   	ret    

c0026656 <avxSave>:
c0026656:	c3                   	ret    

c0026657 <avxLoad>:
c0026657:	c3                   	ret    

c0026658 <avxInit>:
c0026658:	c3                   	ret    

c0026659 <avxClose>:
c0026659:	c3                   	ret    

c002665a <wouldSheSayYes>:
c002665a:	c3                   	ret    
c002665b:	49                   	dec    ecx
c002665c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026660:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026664:	75 20                	jne    c0026686 <sseDetect.noSSE+0x1>
c0026666:	4e                   	dec    esi
c0026667:	79 61                	jns    c00266ca <x87Detect+0x14>
c0026669:	68 2e 2e 2e 00       	push   0x2e2e2e
c002666e:	66 90                	xchg   ax,ax

c0026670 <absolutelyNoChanceInHell>:
c0026670:	b8 01 00 00 00       	mov    eax,0x1
c0026675:	0f a2                	cpuid  
c0026677:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002667d:	74 06                	je     c0026685 <sseDetect.noSSE>
c002667f:	b8 01 00 00 00       	mov    eax,0x1
c0026684:	c3                   	ret    

c0026685 <sseDetect.noSSE>:
c0026685:	31 c0                	xor    eax,eax
c0026687:	c3                   	ret    

c0026688 <sseSave>:
c0026688:	0f ae 44 24 08       	fxsave [esp+0x8]
c002668d:	c3                   	ret    

c002668e <sseLoad>:
c002668e:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0026693:	c3                   	ret    

c0026694 <sseInit>:
c0026694:	e8 43 00 00 00       	call   c00266dc <x87Init>
c0026699:	0f 20 e0             	mov    eax,cr4
c002669c:	66 0d 00 06          	or     ax,0x600
c00266a0:	0f 22 e0             	mov    cr4,eax
c00266a3:	c3                   	ret    

c00266a4 <sseClose>:
c00266a4:	c3                   	ret    
c00266a5:	66 90                	xchg   ax,ax
c00266a7:	66 90                	xchg   ax,ax
c00266a9:	66 90                	xchg   ax,ax
c00266ab:	66 90                	xchg   ax,ax
c00266ad:	66 90                	xchg   ax,ax
c00266af:	90                   	nop

c00266b0 <value_37F>:
c00266b0:	7f 03                	jg     c00266b5 <value_37A+0x1>

c00266b2 <value_37E>:
c00266b2:	7e 03                	jle    c00266b7 <x87Detect+0x1>

c00266b4 <value_37A>:
c00266b4:	7a 03                	jp     c00266b9 <x87Detect+0x3>

c00266b6 <x87Detect>:
c00266b6:	b8 01 00 00 00       	mov    eax,0x1
c00266bb:	0f a2                	cpuid  
c00266bd:	f7 c2 01 00 00 00    	test   edx,0x1
c00266c3:	74 06                	je     c00266cb <x87Detect.nox87>
c00266c5:	b8 01 00 00 00       	mov    eax,0x1
c00266ca:	c3                   	ret    

c00266cb <x87Detect.nox87>:
c00266cb:	b8 00 00 00 00       	mov    eax,0x0
c00266d0:	c3                   	ret    

c00266d1 <x87Save>:
c00266d1:	9b dd 74 24 08       	fsave  [esp+0x8]
c00266d6:	c3                   	ret    

c00266d7 <x87Load>:
c00266d7:	dd 64 24 08          	frstor [esp+0x8]
c00266db:	c3                   	ret    

c00266dc <x87Init>:
c00266dc:	9b db e3             	finit  
c00266df:	0f 20 c0             	mov    eax,cr0
c00266e2:	66 25 fb ff          	and    ax,0xfffb
c00266e6:	66 0d 22 00          	or     ax,0x22
c00266ea:	0f 22 c0             	mov    cr0,eax
c00266ed:	0f 06                	clts   
c00266ef:	d9 2d b4 66 02 c0    	fldcw  WORD PTR ds:0xc00266b4
c00266f5:	c3                   	ret    

c00266f6 <x87Close>:
c00266f6:	c3                   	ret    
c00266f7:	90                   	nop

c00266f8 <__do_global_ctors_aux>:
c00266f8:	a1 3c 92 02 c0       	mov    eax,ds:0xc002923c
c00266fd:	83 f8 ff             	cmp    eax,0xffffffff
c0026700:	74 1a                	je     c002671c <__do_global_ctors_aux+0x24>
c0026702:	55                   	push   ebp
c0026703:	89 e5                	mov    ebp,esp
c0026705:	53                   	push   ebx
c0026706:	52                   	push   edx
c0026707:	bb 3c 92 02 c0       	mov    ebx,0xc002923c
c002670c:	ff d0                	call   eax
c002670e:	83 eb 04             	sub    ebx,0x4
c0026711:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026713:	83 f8 ff             	cmp    eax,0xffffffff
c0026716:	75 f4                	jne    c002670c <__do_global_ctors_aux+0x14>
c0026718:	58                   	pop    eax
c0026719:	5b                   	pop    ebx
c002671a:	5d                   	pop    ebp
c002671b:	c3                   	ret    
c002671c:	c3                   	ret    
c002671d:	66 90                	xchg   ax,ax
c002671f:	90                   	nop

c0026720 <__divdi3>:
c0026720:	55                   	push   ebp
c0026721:	57                   	push   edi
c0026722:	56                   	push   esi
c0026723:	53                   	push   ebx
c0026724:	83 ec 1c             	sub    esp,0x1c
c0026727:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002672b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002672f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026732:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026736:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002673a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002673e:	85 db                	test   ebx,ebx
c0026740:	0f 88 8e 00 00 00    	js     c00267d4 <__divdi3+0xb4>
c0026746:	89 dd                	mov    ebp,ebx
c0026748:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026750:	89 d3                	mov    ebx,edx
c0026752:	85 d2                	test   edx,edx
c0026754:	79 0d                	jns    c0026763 <__divdi3+0x43>
c0026756:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002675a:	f7 d8                	neg    eax
c002675c:	83 d2 00             	adc    edx,0x0
c002675f:	f7 da                	neg    edx
c0026761:	89 d3                	mov    ebx,edx
c0026763:	89 c7                	mov    edi,eax
c0026765:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026768:	85 db                	test   ebx,ebx
c002676a:	75 48                	jne    c00267b4 <__divdi3+0x94>
c002676c:	39 ef                	cmp    edi,ebp
c002676e:	76 24                	jbe    c0026794 <__divdi3+0x74>
c0026770:	89 ea                	mov    edx,ebp
c0026772:	f7 f7                	div    edi
c0026774:	89 c1                	mov    ecx,eax
c0026776:	31 f6                	xor    esi,esi
c0026778:	89 c8                	mov    eax,ecx
c002677a:	89 f2                	mov    edx,esi
c002677c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026780:	85 c9                	test   ecx,ecx
c0026782:	74 07                	je     c002678b <__divdi3+0x6b>
c0026784:	f7 d8                	neg    eax
c0026786:	83 d2 00             	adc    edx,0x0
c0026789:	f7 da                	neg    edx
c002678b:	83 c4 1c             	add    esp,0x1c
c002678e:	5b                   	pop    ebx
c002678f:	5e                   	pop    esi
c0026790:	5f                   	pop    edi
c0026791:	5d                   	pop    ebp
c0026792:	c3                   	ret    
c0026793:	90                   	nop
c0026794:	85 ff                	test   edi,edi
c0026796:	75 0b                	jne    c00267a3 <__divdi3+0x83>
c0026798:	b8 01 00 00 00       	mov    eax,0x1
c002679d:	31 d2                	xor    edx,edx
c002679f:	f7 f3                	div    ebx
c00267a1:	89 c7                	mov    edi,eax
c00267a3:	31 d2                	xor    edx,edx
c00267a5:	89 e8                	mov    eax,ebp
c00267a7:	f7 f7                	div    edi
c00267a9:	89 c6                	mov    esi,eax
c00267ab:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00267ae:	f7 f7                	div    edi
c00267b0:	89 c1                	mov    ecx,eax
c00267b2:	eb c4                	jmp    c0026778 <__divdi3+0x58>
c00267b4:	39 eb                	cmp    ebx,ebp
c00267b6:	77 3c                	ja     c00267f4 <__divdi3+0xd4>
c00267b8:	0f bd f3             	bsr    esi,ebx
c00267bb:	83 f6 1f             	xor    esi,0x1f
c00267be:	75 40                	jne    c0026800 <__divdi3+0xe0>
c00267c0:	39 eb                	cmp    ebx,ebp
c00267c2:	72 09                	jb     c00267cd <__divdi3+0xad>
c00267c4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00267c7:	0f 87 97 00 00 00    	ja     c0026864 <__divdi3+0x144>
c00267cd:	b9 01 00 00 00       	mov    ecx,0x1
c00267d2:	eb a4                	jmp    c0026778 <__divdi3+0x58>
c00267d4:	f7 d9                	neg    ecx
c00267d6:	83 d3 00             	adc    ebx,0x0
c00267d9:	f7 db                	neg    ebx
c00267db:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00267de:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00267e2:	89 dd                	mov    ebp,ebx
c00267e4:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00267ec:	e9 5f ff ff ff       	jmp    c0026750 <__divdi3+0x30>
c00267f1:	8d 76 00             	lea    esi,[esi+0x0]
c00267f4:	31 f6                	xor    esi,esi
c00267f6:	31 c9                	xor    ecx,ecx
c00267f8:	e9 7b ff ff ff       	jmp    c0026778 <__divdi3+0x58>
c00267fd:	8d 76 00             	lea    esi,[esi+0x0]
c0026800:	b8 20 00 00 00       	mov    eax,0x20
c0026805:	29 f0                	sub    eax,esi
c0026807:	89 f1                	mov    ecx,esi
c0026809:	d3 e3                	shl    ebx,cl
c002680b:	89 fa                	mov    edx,edi
c002680d:	88 c1                	mov    cl,al
c002680f:	d3 ea                	shr    edx,cl
c0026811:	09 da                	or     edx,ebx
c0026813:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026817:	89 f1                	mov    ecx,esi
c0026819:	d3 e7                	shl    edi,cl
c002681b:	89 eb                	mov    ebx,ebp
c002681d:	88 c1                	mov    cl,al
c002681f:	d3 eb                	shr    ebx,cl
c0026821:	89 f1                	mov    ecx,esi
c0026823:	d3 e5                	shl    ebp,cl
c0026825:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026828:	88 c1                	mov    cl,al
c002682a:	d3 ea                	shr    edx,cl
c002682c:	09 d5                	or     ebp,edx
c002682e:	89 e8                	mov    eax,ebp
c0026830:	89 da                	mov    edx,ebx
c0026832:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0026836:	89 d3                	mov    ebx,edx
c0026838:	89 c5                	mov    ebp,eax
c002683a:	f7 e7                	mul    edi
c002683c:	39 d3                	cmp    ebx,edx
c002683e:	72 18                	jb     c0026858 <__divdi3+0x138>
c0026840:	74 0a                	je     c002684c <__divdi3+0x12c>
c0026842:	89 e9                	mov    ecx,ebp
c0026844:	31 f6                	xor    esi,esi
c0026846:	e9 2d ff ff ff       	jmp    c0026778 <__divdi3+0x58>
c002684b:	90                   	nop
c002684c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002684f:	89 f1                	mov    ecx,esi
c0026851:	d3 e7                	shl    edi,cl
c0026853:	39 c7                	cmp    edi,eax
c0026855:	73 eb                	jae    c0026842 <__divdi3+0x122>
c0026857:	90                   	nop
c0026858:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002685b:	31 f6                	xor    esi,esi
c002685d:	e9 16 ff ff ff       	jmp    c0026778 <__divdi3+0x58>
c0026862:	66 90                	xchg   ax,ax
c0026864:	31 c9                	xor    ecx,ecx
c0026866:	e9 0d ff ff ff       	jmp    c0026778 <__divdi3+0x58>
c002686b:	90                   	nop

c002686c <__moddi3>:
c002686c:	55                   	push   ebp
c002686d:	57                   	push   edi
c002686e:	56                   	push   esi
c002686f:	53                   	push   ebx
c0026870:	83 ec 2c             	sub    esp,0x2c
c0026873:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0026877:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002687b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002687f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0026883:	85 db                	test   ebx,ebx
c0026885:	0f 88 85 00 00 00    	js     c0026910 <__moddi3+0xa4>
c002688b:	89 de                	mov    esi,ebx
c002688d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0026895:	89 d7                	mov    edi,edx
c0026897:	85 d2                	test   edx,edx
c0026899:	79 09                	jns    c00268a4 <__moddi3+0x38>
c002689b:	f7 d8                	neg    eax
c002689d:	83 d2 00             	adc    edx,0x0
c00268a0:	f7 da                	neg    edx
c00268a2:	89 d7                	mov    edi,edx
c00268a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00268a8:	89 cd                	mov    ebp,ecx
c00268aa:	85 ff                	test   edi,edi
c00268ac:	75 52                	jne    c0026900 <__moddi3+0x94>
c00268ae:	89 c3                	mov    ebx,eax
c00268b0:	39 f0                	cmp    eax,esi
c00268b2:	76 24                	jbe    c00268d8 <__moddi3+0x6c>
c00268b4:	89 c8                	mov    eax,ecx
c00268b6:	89 f2                	mov    edx,esi
c00268b8:	f7 f3                	div    ebx
c00268ba:	89 d6                	mov    esi,edx
c00268bc:	89 f0                	mov    eax,esi
c00268be:	31 d2                	xor    edx,edx
c00268c0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00268c4:	85 c9                	test   ecx,ecx
c00268c6:	74 07                	je     c00268cf <__moddi3+0x63>
c00268c8:	f7 d8                	neg    eax
c00268ca:	83 d2 00             	adc    edx,0x0
c00268cd:	f7 da                	neg    edx
c00268cf:	83 c4 2c             	add    esp,0x2c
c00268d2:	5b                   	pop    ebx
c00268d3:	5e                   	pop    esi
c00268d4:	5f                   	pop    edi
c00268d5:	5d                   	pop    ebp
c00268d6:	c3                   	ret    
c00268d7:	90                   	nop
c00268d8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00268dc:	85 db                	test   ebx,ebx
c00268de:	75 0d                	jne    c00268ed <__moddi3+0x81>
c00268e0:	b8 01 00 00 00       	mov    eax,0x1
c00268e5:	31 d2                	xor    edx,edx
c00268e7:	f7 f7                	div    edi
c00268e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00268ed:	89 f0                	mov    eax,esi
c00268ef:	31 d2                	xor    edx,edx
c00268f1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00268f5:	f7 f7                	div    edi
c00268f7:	89 e8                	mov    eax,ebp
c00268f9:	f7 f7                	div    edi
c00268fb:	89 d6                	mov    esi,edx
c00268fd:	eb bd                	jmp    c00268bc <__moddi3+0x50>
c00268ff:	90                   	nop
c0026900:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026904:	39 f7                	cmp    edi,esi
c0026906:	76 20                	jbe    c0026928 <__moddi3+0xbc>
c0026908:	89 c8                	mov    eax,ecx
c002690a:	89 f2                	mov    edx,esi
c002690c:	eb b2                	jmp    c00268c0 <__moddi3+0x54>
c002690e:	66 90                	xchg   ax,ax
c0026910:	f7 d9                	neg    ecx
c0026912:	83 d3 00             	adc    ebx,0x0
c0026915:	f7 db                	neg    ebx
c0026917:	89 de                	mov    esi,ebx
c0026919:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026921:	e9 6f ff ff ff       	jmp    c0026895 <__moddi3+0x29>
c0026926:	66 90                	xchg   ax,ax
c0026928:	0f bd c7             	bsr    eax,edi
c002692b:	83 f0 1f             	xor    eax,0x1f
c002692e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0026932:	75 24                	jne    c0026958 <__moddi3+0xec>
c0026934:	39 f7                	cmp    edi,esi
c0026936:	72 06                	jb     c002693e <__moddi3+0xd2>
c0026938:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002693c:	77 0c                	ja     c002694a <__moddi3+0xde>
c002693e:	89 e9                	mov    ecx,ebp
c0026940:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0026944:	19 fe                	sbb    esi,edi
c0026946:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002694a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002694e:	89 f2                	mov    edx,esi
c0026950:	e9 6b ff ff ff       	jmp    c00268c0 <__moddi3+0x54>
c0026955:	8d 76 00             	lea    esi,[esi+0x0]
c0026958:	b8 20 00 00 00       	mov    eax,0x20
c002695d:	89 c2                	mov    edx,eax
c002695f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026963:	29 da                	sub    edx,ebx
c0026965:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026969:	88 d9                	mov    cl,bl
c002696b:	d3 e7                	shl    edi,cl
c002696d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026971:	88 d1                	mov    cl,dl
c0026973:	d3 e8                	shr    eax,cl
c0026975:	09 c7                	or     edi,eax
c0026977:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002697b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002697f:	89 d8                	mov    eax,ebx
c0026981:	88 d9                	mov    cl,bl
c0026983:	d3 e7                	shl    edi,cl
c0026985:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026989:	89 f3                	mov    ebx,esi
c002698b:	88 d1                	mov    cl,dl
c002698d:	d3 eb                	shr    ebx,cl
c002698f:	89 c7                	mov    edi,eax
c0026991:	88 c1                	mov    cl,al
c0026993:	d3 e6                	shl    esi,cl
c0026995:	89 e8                	mov    eax,ebp
c0026997:	88 d1                	mov    cl,dl
c0026999:	d3 e8                	shr    eax,cl
c002699b:	09 f0                	or     eax,esi
c002699d:	89 f9                	mov    ecx,edi
c002699f:	d3 e5                	shl    ebp,cl
c00269a1:	89 da                	mov    edx,ebx
c00269a3:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00269a7:	89 d3                	mov    ebx,edx
c00269a9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00269ad:	89 c6                	mov    esi,eax
c00269af:	89 d1                	mov    ecx,edx
c00269b1:	39 d3                	cmp    ebx,edx
c00269b3:	72 27                	jb     c00269dc <__moddi3+0x170>
c00269b5:	74 21                	je     c00269d8 <__moddi3+0x16c>
c00269b7:	29 f5                	sub    ebp,esi
c00269b9:	19 cb                	sbb    ebx,ecx
c00269bb:	89 de                	mov    esi,ebx
c00269bd:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00269c1:	d3 e6                	shl    esi,cl
c00269c3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00269c7:	89 f9                	mov    ecx,edi
c00269c9:	d3 ed                	shr    ebp,cl
c00269cb:	09 ee                	or     esi,ebp
c00269cd:	89 f0                	mov    eax,esi
c00269cf:	d3 eb                	shr    ebx,cl
c00269d1:	89 da                	mov    edx,ebx
c00269d3:	e9 e8 fe ff ff       	jmp    c00268c0 <__moddi3+0x54>
c00269d8:	39 c5                	cmp    ebp,eax
c00269da:	73 db                	jae    c00269b7 <__moddi3+0x14b>
c00269dc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00269e0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00269e4:	89 d1                	mov    ecx,edx
c00269e6:	89 c6                	mov    esi,eax
c00269e8:	eb cd                	jmp    c00269b7 <__moddi3+0x14b>
c00269ea:	66 90                	xchg   ax,ax

c00269ec <__udivdi3>:
c00269ec:	55                   	push   ebp
c00269ed:	57                   	push   edi
c00269ee:	56                   	push   esi
c00269ef:	53                   	push   ebx
c00269f0:	83 ec 1c             	sub    esp,0x1c
c00269f3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00269f7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00269fb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00269ff:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026a03:	85 d2                	test   edx,edx
c0026a05:	75 41                	jne    c0026a48 <__udivdi3+0x5c>
c0026a07:	39 f7                	cmp    edi,esi
c0026a09:	76 15                	jbe    c0026a20 <__udivdi3+0x34>
c0026a0b:	89 e8                	mov    eax,ebp
c0026a0d:	89 f2                	mov    edx,esi
c0026a0f:	f7 f7                	div    edi
c0026a11:	31 db                	xor    ebx,ebx
c0026a13:	89 da                	mov    edx,ebx
c0026a15:	83 c4 1c             	add    esp,0x1c
c0026a18:	5b                   	pop    ebx
c0026a19:	5e                   	pop    esi
c0026a1a:	5f                   	pop    edi
c0026a1b:	5d                   	pop    ebp
c0026a1c:	c3                   	ret    
c0026a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0026a20:	89 f9                	mov    ecx,edi
c0026a22:	85 ff                	test   edi,edi
c0026a24:	75 0b                	jne    c0026a31 <__udivdi3+0x45>
c0026a26:	b8 01 00 00 00       	mov    eax,0x1
c0026a2b:	31 d2                	xor    edx,edx
c0026a2d:	f7 f7                	div    edi
c0026a2f:	89 c1                	mov    ecx,eax
c0026a31:	31 d2                	xor    edx,edx
c0026a33:	89 f0                	mov    eax,esi
c0026a35:	f7 f1                	div    ecx
c0026a37:	89 c3                	mov    ebx,eax
c0026a39:	89 e8                	mov    eax,ebp
c0026a3b:	f7 f1                	div    ecx
c0026a3d:	89 da                	mov    edx,ebx
c0026a3f:	83 c4 1c             	add    esp,0x1c
c0026a42:	5b                   	pop    ebx
c0026a43:	5e                   	pop    esi
c0026a44:	5f                   	pop    edi
c0026a45:	5d                   	pop    ebp
c0026a46:	c3                   	ret    
c0026a47:	90                   	nop
c0026a48:	39 f2                	cmp    edx,esi
c0026a4a:	77 1c                	ja     c0026a68 <__udivdi3+0x7c>
c0026a4c:	0f bd da             	bsr    ebx,edx
c0026a4f:	83 f3 1f             	xor    ebx,0x1f
c0026a52:	75 24                	jne    c0026a78 <__udivdi3+0x8c>
c0026a54:	39 f2                	cmp    edx,esi
c0026a56:	72 08                	jb     c0026a60 <__udivdi3+0x74>
c0026a58:	39 ef                	cmp    edi,ebp
c0026a5a:	0f 87 84 00 00 00    	ja     c0026ae4 <__udivdi3+0xf8>
c0026a60:	b8 01 00 00 00       	mov    eax,0x1
c0026a65:	eb ac                	jmp    c0026a13 <__udivdi3+0x27>
c0026a67:	90                   	nop
c0026a68:	31 db                	xor    ebx,ebx
c0026a6a:	31 c0                	xor    eax,eax
c0026a6c:	89 da                	mov    edx,ebx
c0026a6e:	83 c4 1c             	add    esp,0x1c
c0026a71:	5b                   	pop    ebx
c0026a72:	5e                   	pop    esi
c0026a73:	5f                   	pop    edi
c0026a74:	5d                   	pop    ebp
c0026a75:	c3                   	ret    
c0026a76:	66 90                	xchg   ax,ax
c0026a78:	b8 20 00 00 00       	mov    eax,0x20
c0026a7d:	29 d8                	sub    eax,ebx
c0026a7f:	88 d9                	mov    cl,bl
c0026a81:	d3 e2                	shl    edx,cl
c0026a83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026a87:	89 fa                	mov    edx,edi
c0026a89:	88 c1                	mov    cl,al
c0026a8b:	d3 ea                	shr    edx,cl
c0026a8d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026a91:	09 d1                	or     ecx,edx
c0026a93:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026a97:	88 d9                	mov    cl,bl
c0026a99:	d3 e7                	shl    edi,cl
c0026a9b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026a9f:	89 f7                	mov    edi,esi
c0026aa1:	88 c1                	mov    cl,al
c0026aa3:	d3 ef                	shr    edi,cl
c0026aa5:	88 d9                	mov    cl,bl
c0026aa7:	d3 e6                	shl    esi,cl
c0026aa9:	89 ea                	mov    edx,ebp
c0026aab:	88 c1                	mov    cl,al
c0026aad:	d3 ea                	shr    edx,cl
c0026aaf:	09 d6                	or     esi,edx
c0026ab1:	89 f0                	mov    eax,esi
c0026ab3:	89 fa                	mov    edx,edi
c0026ab5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026ab9:	89 d7                	mov    edi,edx
c0026abb:	89 c6                	mov    esi,eax
c0026abd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026ac1:	39 d7                	cmp    edi,edx
c0026ac3:	72 13                	jb     c0026ad8 <__udivdi3+0xec>
c0026ac5:	74 09                	je     c0026ad0 <__udivdi3+0xe4>
c0026ac7:	89 f0                	mov    eax,esi
c0026ac9:	31 db                	xor    ebx,ebx
c0026acb:	e9 43 ff ff ff       	jmp    c0026a13 <__udivdi3+0x27>
c0026ad0:	88 d9                	mov    cl,bl
c0026ad2:	d3 e5                	shl    ebp,cl
c0026ad4:	39 c5                	cmp    ebp,eax
c0026ad6:	73 ef                	jae    c0026ac7 <__udivdi3+0xdb>
c0026ad8:	8d 46 ff             	lea    eax,[esi-0x1]
c0026adb:	31 db                	xor    ebx,ebx
c0026add:	e9 31 ff ff ff       	jmp    c0026a13 <__udivdi3+0x27>
c0026ae2:	66 90                	xchg   ax,ax
c0026ae4:	31 c0                	xor    eax,eax
c0026ae6:	e9 28 ff ff ff       	jmp    c0026a13 <__udivdi3+0x27>
c0026aeb:	90                   	nop

c0026aec <__umoddi3>:
c0026aec:	55                   	push   ebp
c0026aed:	57                   	push   edi
c0026aee:	56                   	push   esi
c0026aef:	53                   	push   ebx
c0026af0:	83 ec 1c             	sub    esp,0x1c
c0026af3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026af7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026afb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026aff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026b03:	89 da                	mov    edx,ebx
c0026b05:	85 c0                	test   eax,eax
c0026b07:	75 37                	jne    c0026b40 <__umoddi3+0x54>
c0026b09:	39 df                	cmp    edi,ebx
c0026b0b:	76 13                	jbe    c0026b20 <__umoddi3+0x34>
c0026b0d:	89 f0                	mov    eax,esi
c0026b0f:	f7 f7                	div    edi
c0026b11:	89 d0                	mov    eax,edx
c0026b13:	31 d2                	xor    edx,edx
c0026b15:	83 c4 1c             	add    esp,0x1c
c0026b18:	5b                   	pop    ebx
c0026b19:	5e                   	pop    esi
c0026b1a:	5f                   	pop    edi
c0026b1b:	5d                   	pop    ebp
c0026b1c:	c3                   	ret    
c0026b1d:	8d 76 00             	lea    esi,[esi+0x0]
c0026b20:	89 fd                	mov    ebp,edi
c0026b22:	85 ff                	test   edi,edi
c0026b24:	75 0b                	jne    c0026b31 <__umoddi3+0x45>
c0026b26:	b8 01 00 00 00       	mov    eax,0x1
c0026b2b:	31 d2                	xor    edx,edx
c0026b2d:	f7 f7                	div    edi
c0026b2f:	89 c5                	mov    ebp,eax
c0026b31:	89 d8                	mov    eax,ebx
c0026b33:	31 d2                	xor    edx,edx
c0026b35:	f7 f5                	div    ebp
c0026b37:	89 f0                	mov    eax,esi
c0026b39:	f7 f5                	div    ebp
c0026b3b:	89 d0                	mov    eax,edx
c0026b3d:	eb d4                	jmp    c0026b13 <__umoddi3+0x27>
c0026b3f:	90                   	nop
c0026b40:	89 f1                	mov    ecx,esi
c0026b42:	39 d8                	cmp    eax,ebx
c0026b44:	76 0a                	jbe    c0026b50 <__umoddi3+0x64>
c0026b46:	89 f0                	mov    eax,esi
c0026b48:	83 c4 1c             	add    esp,0x1c
c0026b4b:	5b                   	pop    ebx
c0026b4c:	5e                   	pop    esi
c0026b4d:	5f                   	pop    edi
c0026b4e:	5d                   	pop    ebp
c0026b4f:	c3                   	ret    
c0026b50:	0f bd e8             	bsr    ebp,eax
c0026b53:	83 f5 1f             	xor    ebp,0x1f
c0026b56:	75 1c                	jne    c0026b74 <__umoddi3+0x88>
c0026b58:	39 d8                	cmp    eax,ebx
c0026b5a:	72 04                	jb     c0026b60 <__umoddi3+0x74>
c0026b5c:	39 f7                	cmp    edi,esi
c0026b5e:	77 08                	ja     c0026b68 <__umoddi3+0x7c>
c0026b60:	89 da                	mov    edx,ebx
c0026b62:	29 fe                	sub    esi,edi
c0026b64:	19 c2                	sbb    edx,eax
c0026b66:	89 f1                	mov    ecx,esi
c0026b68:	89 c8                	mov    eax,ecx
c0026b6a:	83 c4 1c             	add    esp,0x1c
c0026b6d:	5b                   	pop    ebx
c0026b6e:	5e                   	pop    esi
c0026b6f:	5f                   	pop    edi
c0026b70:	5d                   	pop    ebp
c0026b71:	c3                   	ret    
c0026b72:	66 90                	xchg   ax,ax
c0026b74:	ba 20 00 00 00       	mov    edx,0x20
c0026b79:	29 ea                	sub    edx,ebp
c0026b7b:	89 e9                	mov    ecx,ebp
c0026b7d:	d3 e0                	shl    eax,cl
c0026b7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026b83:	89 f8                	mov    eax,edi
c0026b85:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026b89:	88 d1                	mov    cl,dl
c0026b8b:	d3 e8                	shr    eax,cl
c0026b8d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026b91:	09 c1                	or     ecx,eax
c0026b93:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026b97:	89 e9                	mov    ecx,ebp
c0026b99:	d3 e7                	shl    edi,cl
c0026b9b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026b9f:	89 d8                	mov    eax,ebx
c0026ba1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026ba5:	88 d1                	mov    cl,dl
c0026ba7:	d3 e8                	shr    eax,cl
c0026ba9:	89 c7                	mov    edi,eax
c0026bab:	89 e9                	mov    ecx,ebp
c0026bad:	d3 e3                	shl    ebx,cl
c0026baf:	89 f0                	mov    eax,esi
c0026bb1:	88 d1                	mov    cl,dl
c0026bb3:	d3 e8                	shr    eax,cl
c0026bb5:	09 d8                	or     eax,ebx
c0026bb7:	89 e9                	mov    ecx,ebp
c0026bb9:	d3 e6                	shl    esi,cl
c0026bbb:	89 f3                	mov    ebx,esi
c0026bbd:	89 fa                	mov    edx,edi
c0026bbf:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026bc3:	89 d1                	mov    ecx,edx
c0026bc5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026bc9:	89 c6                	mov    esi,eax
c0026bcb:	89 d7                	mov    edi,edx
c0026bcd:	39 d1                	cmp    ecx,edx
c0026bcf:	72 27                	jb     c0026bf8 <__umoddi3+0x10c>
c0026bd1:	74 21                	je     c0026bf4 <__umoddi3+0x108>
c0026bd3:	89 ca                	mov    edx,ecx
c0026bd5:	29 f3                	sub    ebx,esi
c0026bd7:	19 fa                	sbb    edx,edi
c0026bd9:	89 d0                	mov    eax,edx
c0026bdb:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026bdf:	d3 e0                	shl    eax,cl
c0026be1:	89 e9                	mov    ecx,ebp
c0026be3:	d3 eb                	shr    ebx,cl
c0026be5:	09 d8                	or     eax,ebx
c0026be7:	d3 ea                	shr    edx,cl
c0026be9:	83 c4 1c             	add    esp,0x1c
c0026bec:	5b                   	pop    ebx
c0026bed:	5e                   	pop    esi
c0026bee:	5f                   	pop    edi
c0026bef:	5d                   	pop    ebp
c0026bf0:	c3                   	ret    
c0026bf1:	8d 76 00             	lea    esi,[esi+0x0]
c0026bf4:	39 c3                	cmp    ebx,eax
c0026bf6:	73 db                	jae    c0026bd3 <__umoddi3+0xe7>
c0026bf8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026bfc:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026c00:	89 d7                	mov    edi,edx
c0026c02:	89 c6                	mov    esi,eax
c0026c04:	eb cd                	jmp    c0026bd3 <__umoddi3+0xe7>

c0026c06 <__addsf3>:
c0026c06:	55                   	push   ebp
c0026c07:	89 e5                	mov    ebp,esp
c0026c09:	57                   	push   edi
c0026c0a:	56                   	push   esi
c0026c0b:	53                   	push   ebx
c0026c0c:	83 ec 08             	sub    esp,0x8
c0026c0f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026c12:	89 fa                	mov    edx,edi
c0026c14:	89 f8                	mov    eax,edi
c0026c16:	c1 f8 17             	sar    eax,0x17
c0026c19:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026c1c:	c1 e2 08             	shl    edx,0x8
c0026c1f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026c25:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026c28:	89 de                	mov    esi,ebx
c0026c2a:	c1 fe 17             	sar    esi,0x17
c0026c2d:	c1 e3 08             	shl    ebx,0x8
c0026c30:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026c36:	31 f0                	xor    eax,esi
c0026c38:	0f 88 3b 01 00 00    	js     c0026d79 <__addsf3+0x173>
c0026c3e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026c41:	29 f1                	sub    ecx,esi
c0026c43:	85 c9                	test   ecx,ecx
c0026c45:	7e 54                	jle    c0026c9b <__addsf3+0x95>
c0026c47:	89 f0                	mov    eax,esi
c0026c49:	84 c0                	test   al,al
c0026c4b:	75 10                	jne    c0026c5d <__addsf3+0x57>
c0026c4d:	85 db                	test   ebx,ebx
c0026c4f:	0f 84 aa 02 00 00    	je     c0026eff <__addsf3+0x2f9>
c0026c55:	49                   	dec    ecx
c0026c56:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026c59:	74 38                	je     c0026c93 <__addsf3+0x8d>
c0026c5b:	eb 13                	jmp    c0026c70 <__addsf3+0x6a>
c0026c5d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026c60:	f7 d0                	not    eax
c0026c62:	84 c0                	test   al,al
c0026c64:	0f 84 95 02 00 00    	je     c0026eff <__addsf3+0x2f9>
c0026c6a:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026c70:	83 f9 1f             	cmp    ecx,0x1f
c0026c73:	0f 8f 86 02 00 00    	jg     c0026eff <__addsf3+0x2f9>
c0026c79:	89 de                	mov    esi,ebx
c0026c7b:	d3 ee                	shr    esi,cl
c0026c7d:	b8 20 00 00 00       	mov    eax,0x20
c0026c82:	29 c8                	sub    eax,ecx
c0026c84:	89 c1                	mov    ecx,eax
c0026c86:	d3 e3                	shl    ebx,cl
c0026c88:	31 c0                	xor    eax,eax
c0026c8a:	85 db                	test   ebx,ebx
c0026c8c:	0f 95 c0             	setne  al
c0026c8f:	09 f0                	or     eax,esi
c0026c91:	01 d0                	add    eax,edx
c0026c93:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026c96:	e9 b6 00 00 00       	jmp    c0026d51 <__addsf3+0x14b>
c0026c9b:	74 5c                	je     c0026cf9 <__addsf3+0xf3>
c0026c9d:	89 f1                	mov    ecx,esi
c0026c9f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026ca2:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026ca5:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026ca9:	75 14                	jne    c0026cbf <__addsf3+0xb9>
c0026cab:	85 d2                	test   edx,edx
c0026cad:	0f 84 4c 02 00 00    	je     c0026eff <__addsf3+0x2f9>
c0026cb3:	49                   	dec    ecx
c0026cb4:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026cb7:	0f 84 94 00 00 00    	je     c0026d51 <__addsf3+0x14b>
c0026cbd:	eb 12                	jmp    c0026cd1 <__addsf3+0xcb>
c0026cbf:	89 f0                	mov    eax,esi
c0026cc1:	f7 d0                	not    eax
c0026cc3:	84 c0                	test   al,al
c0026cc5:	0f 84 34 02 00 00    	je     c0026eff <__addsf3+0x2f9>
c0026ccb:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026cd1:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026cd4:	83 f9 1f             	cmp    ecx,0x1f
c0026cd7:	0f 8f 22 02 00 00    	jg     c0026eff <__addsf3+0x2f9>
c0026cdd:	89 d7                	mov    edi,edx
c0026cdf:	d3 ef                	shr    edi,cl
c0026ce1:	b8 20 00 00 00       	mov    eax,0x20
c0026ce6:	29 c8                	sub    eax,ecx
c0026ce8:	89 c1                	mov    ecx,eax
c0026cea:	d3 e2                	shl    edx,cl
c0026cec:	31 c0                	xor    eax,eax
c0026cee:	85 d2                	test   edx,edx
c0026cf0:	0f 95 c0             	setne  al
c0026cf3:	09 f8                	or     eax,edi
c0026cf5:	01 d8                	add    eax,ebx
c0026cf7:	eb 58                	jmp    c0026d51 <__addsf3+0x14b>
c0026cf9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026cfc:	8d 70 01             	lea    esi,[eax+0x1]
c0026cff:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026d05:	75 32                	jne    c0026d39 <__addsf3+0x133>
c0026d07:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026d0b:	75 1f                	jne    c0026d2c <__addsf3+0x126>
c0026d0d:	85 d2                	test   edx,edx
c0026d0f:	0f 84 e0 01 00 00    	je     c0026ef5 <__addsf3+0x2ef>
c0026d15:	85 db                	test   ebx,ebx
c0026d17:	0f 84 e2 01 00 00    	je     c0026eff <__addsf3+0x2f9>
c0026d1d:	89 d0                	mov    eax,edx
c0026d1f:	01 d8                	add    eax,ebx
c0026d21:	0f 89 a9 01 00 00    	jns    c0026ed0 <__addsf3+0x2ca>
c0026d27:	e9 9d 01 00 00       	jmp    c0026ec9 <__addsf3+0x2c3>
c0026d2c:	85 d2                	test   edx,edx
c0026d2e:	0f 85 cb 01 00 00    	jne    c0026eff <__addsf3+0x2f9>
c0026d34:	e9 bc 01 00 00       	jmp    c0026ef5 <__addsf3+0x2ef>
c0026d39:	31 c0                	xor    eax,eax
c0026d3b:	89 f1                	mov    ecx,esi
c0026d3d:	f7 d1                	not    ecx
c0026d3f:	84 c9                	test   cl,cl
c0026d41:	0f 84 90 01 00 00    	je     c0026ed7 <__addsf3+0x2d1>
c0026d47:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026d4a:	d1 e8                	shr    eax,1
c0026d4c:	e9 86 01 00 00       	jmp    c0026ed7 <__addsf3+0x2d1>
c0026d51:	85 c0                	test   eax,eax
c0026d53:	0f 89 7e 01 00 00    	jns    c0026ed7 <__addsf3+0x2d1>
c0026d59:	46                   	inc    esi
c0026d5a:	89 f2                	mov    edx,esi
c0026d5c:	f7 d2                	not    edx
c0026d5e:	84 d2                	test   dl,dl
c0026d60:	0f 84 6f 01 00 00    	je     c0026ed5 <__addsf3+0x2cf>
c0026d66:	89 c2                	mov    edx,eax
c0026d68:	83 e2 01             	and    edx,0x1
c0026d6b:	d1 e8                	shr    eax,1
c0026d6d:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026d72:	09 d0                	or     eax,edx
c0026d74:	e9 5e 01 00 00       	jmp    c0026ed7 <__addsf3+0x2d1>
c0026d79:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026d7d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026d80:	89 f0                	mov    eax,esi
c0026d82:	0f b6 c0             	movzx  eax,al
c0026d85:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026d88:	29 c1                	sub    ecx,eax
c0026d8a:	85 c9                	test   ecx,ecx
c0026d8c:	7e 55                	jle    c0026de3 <__addsf3+0x1dd>
c0026d8e:	85 c0                	test   eax,eax
c0026d90:	75 11                	jne    c0026da3 <__addsf3+0x19d>
c0026d92:	85 db                	test   ebx,ebx
c0026d94:	0f 84 65 01 00 00    	je     c0026eff <__addsf3+0x2f9>
c0026d9a:	49                   	dec    ecx
c0026d9b:	75 19                	jne    c0026db6 <__addsf3+0x1b0>
c0026d9d:	89 d0                	mov    eax,edx
c0026d9f:	29 d8                	sub    eax,ebx
c0026da1:	eb 38                	jmp    c0026ddb <__addsf3+0x1d5>
c0026da3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026da6:	f7 d0                	not    eax
c0026da8:	84 c0                	test   al,al
c0026daa:	0f 84 4f 01 00 00    	je     c0026eff <__addsf3+0x2f9>
c0026db0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026db6:	83 f9 1f             	cmp    ecx,0x1f
c0026db9:	0f 8f 40 01 00 00    	jg     c0026eff <__addsf3+0x2f9>
c0026dbf:	89 de                	mov    esi,ebx
c0026dc1:	d3 ee                	shr    esi,cl
c0026dc3:	b8 20 00 00 00       	mov    eax,0x20
c0026dc8:	29 c8                	sub    eax,ecx
c0026dca:	89 c1                	mov    ecx,eax
c0026dcc:	d3 e3                	shl    ebx,cl
c0026dce:	31 c0                	xor    eax,eax
c0026dd0:	85 db                	test   ebx,ebx
c0026dd2:	0f 95 c0             	setne  al
c0026dd5:	09 f0                	or     eax,esi
c0026dd7:	29 c2                	sub    edx,eax
c0026dd9:	89 d0                	mov    eax,edx
c0026ddb:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026dde:	e9 af 00 00 00       	jmp    c0026e92 <__addsf3+0x28c>
c0026de3:	74 5c                	je     c0026e41 <__addsf3+0x23b>
c0026de5:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026de8:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026deb:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026def:	75 14                	jne    c0026e05 <__addsf3+0x1ff>
c0026df1:	85 d2                	test   edx,edx
c0026df3:	0f 84 06 01 00 00    	je     c0026eff <__addsf3+0x2f9>
c0026df9:	48                   	dec    eax
c0026dfa:	75 1b                	jne    c0026e17 <__addsf3+0x211>
c0026dfc:	89 d8                	mov    eax,ebx
c0026dfe:	29 d0                	sub    eax,edx
c0026e00:	e9 8d 00 00 00       	jmp    c0026e92 <__addsf3+0x28c>
c0026e05:	89 f1                	mov    ecx,esi
c0026e07:	f7 d1                	not    ecx
c0026e09:	84 c9                	test   cl,cl
c0026e0b:	0f 84 ee 00 00 00    	je     c0026eff <__addsf3+0x2f9>
c0026e11:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026e17:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e1a:	83 f8 1f             	cmp    eax,0x1f
c0026e1d:	0f 8f dc 00 00 00    	jg     c0026eff <__addsf3+0x2f9>
c0026e23:	89 d7                	mov    edi,edx
c0026e25:	88 c1                	mov    cl,al
c0026e27:	d3 ef                	shr    edi,cl
c0026e29:	b9 20 00 00 00       	mov    ecx,0x20
c0026e2e:	29 c1                	sub    ecx,eax
c0026e30:	d3 e2                	shl    edx,cl
c0026e32:	31 c0                	xor    eax,eax
c0026e34:	85 d2                	test   edx,edx
c0026e36:	0f 95 c0             	setne  al
c0026e39:	09 f8                	or     eax,edi
c0026e3b:	29 c3                	sub    ebx,eax
c0026e3d:	89 d8                	mov    eax,ebx
c0026e3f:	eb 51                	jmp    c0026e92 <__addsf3+0x28c>
c0026e41:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026e44:	40                   	inc    eax
c0026e45:	a8 fe                	test   al,0xfe
c0026e47:	75 3d                	jne    c0026e86 <__addsf3+0x280>
c0026e49:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026e4d:	0f 85 a7 00 00 00    	jne    c0026efa <__addsf3+0x2f4>
c0026e53:	85 d2                	test   edx,edx
c0026e55:	75 12                	jne    c0026e69 <__addsf3+0x263>
c0026e57:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e5a:	85 db                	test   ebx,ebx
c0026e5c:	0f 85 9d 00 00 00    	jne    c0026eff <__addsf3+0x2f9>
c0026e62:	31 ff                	xor    edi,edi
c0026e64:	e9 96 00 00 00       	jmp    c0026eff <__addsf3+0x2f9>
c0026e69:	85 db                	test   ebx,ebx
c0026e6b:	0f 84 8e 00 00 00    	je     c0026eff <__addsf3+0x2f9>
c0026e71:	89 d0                	mov    eax,edx
c0026e73:	29 d8                	sub    eax,ebx
c0026e75:	79 06                	jns    c0026e7d <__addsf3+0x277>
c0026e77:	89 d8                	mov    eax,ebx
c0026e79:	29 d0                	sub    eax,edx
c0026e7b:	eb 5a                	jmp    c0026ed7 <__addsf3+0x2d1>
c0026e7d:	bf 00 00 00 00       	mov    edi,0x0
c0026e82:	74 7b                	je     c0026eff <__addsf3+0x2f9>
c0026e84:	eb 4a                	jmp    c0026ed0 <__addsf3+0x2ca>
c0026e86:	89 d0                	mov    eax,edx
c0026e88:	29 d8                	sub    eax,ebx
c0026e8a:	79 12                	jns    c0026e9e <__addsf3+0x298>
c0026e8c:	89 d8                	mov    eax,ebx
c0026e8e:	29 d0                	sub    eax,edx
c0026e90:	eb 09                	jmp    c0026e9b <__addsf3+0x295>
c0026e92:	85 c0                	test   eax,eax
c0026e94:	79 41                	jns    c0026ed7 <__addsf3+0x2d1>
c0026e96:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026e9b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026e9e:	31 f6                	xor    esi,esi
c0026ea0:	85 c0                	test   eax,eax
c0026ea2:	74 33                	je     c0026ed7 <__addsf3+0x2d1>
c0026ea4:	0f bd c8             	bsr    ecx,eax
c0026ea7:	83 f1 1f             	xor    ecx,0x1f
c0026eaa:	d3 e0                	shl    eax,cl
c0026eac:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026eb0:	39 ca                	cmp    edx,ecx
c0026eb2:	7f 10                	jg     c0026ec4 <__addsf3+0x2be>
c0026eb4:	29 d1                	sub    ecx,edx
c0026eb6:	41                   	inc    ecx
c0026eb7:	d3 e8                	shr    eax,cl
c0026eb9:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026ebc:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026ec2:	eb 13                	jmp    c0026ed7 <__addsf3+0x2d1>
c0026ec4:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026ec7:	29 ce                	sub    esi,ecx
c0026ec9:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026ece:	eb 07                	jmp    c0026ed7 <__addsf3+0x2d1>
c0026ed0:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026ed3:	eb 02                	jmp    c0026ed7 <__addsf3+0x2d1>
c0026ed5:	31 c0                	xor    eax,eax
c0026ed7:	89 c2                	mov    edx,eax
c0026ed9:	c1 ea 08             	shr    edx,0x8
c0026edc:	a8 7f                	test   al,0x7f
c0026ede:	0f 95 c1             	setne  cl
c0026ee1:	09 d1                	or     ecx,edx
c0026ee3:	83 e1 01             	and    ecx,0x1
c0026ee6:	c1 e8 07             	shr    eax,0x7
c0026ee9:	21 c8                	and    eax,ecx
c0026eeb:	c1 e6 17             	shl    esi,0x17
c0026eee:	09 d6                	or     esi,edx
c0026ef0:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026ef3:	eb 0a                	jmp    c0026eff <__addsf3+0x2f9>
c0026ef5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026ef8:	eb 05                	jmp    c0026eff <__addsf3+0x2f9>
c0026efa:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026eff:	89 f8                	mov    eax,edi
c0026f01:	5a                   	pop    edx
c0026f02:	59                   	pop    ecx
c0026f03:	5b                   	pop    ebx
c0026f04:	5e                   	pop    esi
c0026f05:	5f                   	pop    edi
c0026f06:	5d                   	pop    ebp
c0026f07:	c3                   	ret    

c0026f08 <__subsf3>:
c0026f08:	55                   	push   ebp
c0026f09:	89 e5                	mov    ebp,esp
c0026f0b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026f0e:	05 00 00 00 80       	add    eax,0x80000000
c0026f13:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026f16:	5d                   	pop    ebp
c0026f17:	e9 ea fc ff ff       	jmp    c0026c06 <__addsf3>

c0026f1c <__negsf2>:
c0026f1c:	55                   	push   ebp
c0026f1d:	89 e5                	mov    ebp,esp
c0026f1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026f22:	05 00 00 00 80       	add    eax,0x80000000
c0026f27:	5d                   	pop    ebp
c0026f28:	c3                   	ret    

c0026f29 <__mulsf3>:
c0026f29:	55                   	push   ebp
c0026f2a:	89 e5                	mov    ebp,esp
c0026f2c:	57                   	push   edi
c0026f2d:	56                   	push   esi
c0026f2e:	53                   	push   ebx
c0026f2f:	83 ec 1c             	sub    esp,0x1c
c0026f32:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026f35:	89 f0                	mov    eax,esi
c0026f37:	89 f1                	mov    ecx,esi
c0026f39:	c1 f9 17             	sar    ecx,0x17
c0026f3c:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026f3f:	c1 e0 08             	shl    eax,0x8
c0026f42:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026f47:	89 c1                	mov    ecx,eax
c0026f49:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026f4c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026f4f:	89 c7                	mov    edi,eax
c0026f51:	c1 ff 17             	sar    edi,0x17
c0026f54:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026f58:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026f5b:	89 f8                	mov    eax,edi
c0026f5d:	0f b6 c0             	movzx  eax,al
c0026f60:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026f63:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026f67:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026f6a:	42                   	inc    edx
c0026f6b:	80 e2 fe             	and    dl,0xfe
c0026f6e:	75 7b                	jne    c0026feb <__mulsf3+0xc2>
c0026f70:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026f74:	74 54                	je     c0026fca <__mulsf3+0xa1>
c0026f76:	85 c9                	test   ecx,ecx
c0026f78:	0f 85 64 01 00 00    	jne    c00270e2 <__mulsf3+0x1b9>
c0026f7e:	8d 57 01             	lea    edx,[edi+0x1]
c0026f81:	80 e2 fe             	and    dl,0xfe
c0026f84:	75 1f                	jne    c0026fa5 <__mulsf3+0x7c>
c0026f86:	85 c0                	test   eax,eax
c0026f88:	b8 00 00 00 00       	mov    eax,0x0
c0026f8d:	74 29                	je     c0026fb8 <__mulsf3+0x8f>
c0026f8f:	53                   	push   ebx
c0026f90:	53                   	push   ebx
c0026f91:	50                   	push   eax
c0026f92:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f95:	e8 96 05 00 00       	call   c0027530 <__nesf2>
c0026f9a:	83 c4 10             	add    esp,0x10
c0026f9d:	85 c0                	test   eax,eax
c0026f9f:	0f 85 3a 01 00 00    	jne    c00270df <__mulsf3+0x1b6>
c0026fa5:	85 ff                	test   edi,edi
c0026fa7:	0f 89 35 01 00 00    	jns    c00270e2 <__mulsf3+0x1b9>
c0026fad:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026fb3:	e9 2a 01 00 00       	jmp    c00270e2 <__mulsf3+0x1b9>
c0026fb8:	51                   	push   ecx
c0026fb9:	51                   	push   ecx
c0026fba:	50                   	push   eax
c0026fbb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026fbe:	e8 6d 05 00 00       	call   c0027530 <__nesf2>
c0026fc3:	83 c4 10             	add    esp,0x10
c0026fc6:	85 c0                	test   eax,eax
c0026fc8:	eb 15                	jmp    c0026fdf <__mulsf3+0xb6>
c0026fca:	85 c9                	test   ecx,ecx
c0026fcc:	74 0b                	je     c0026fd9 <__mulsf3+0xb0>
c0026fce:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026fd1:	01 c9                	add    ecx,ecx
c0026fd3:	78 16                	js     c0026feb <__mulsf3+0xc2>
c0026fd5:	89 d3                	mov    ebx,edx
c0026fd7:	eb f5                	jmp    c0026fce <__mulsf3+0xa5>
c0026fd9:	89 f8                	mov    eax,edi
c0026fdb:	f7 d0                	not    eax
c0026fdd:	84 c0                	test   al,al
c0026fdf:	75 c4                	jne    c0026fa5 <__mulsf3+0x7c>
c0026fe1:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026fe6:	e9 f7 00 00 00       	jmp    c00270e2 <__mulsf3+0x1b9>
c0026feb:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026fee:	c1 e6 08             	shl    esi,0x8
c0026ff1:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026ff7:	8d 57 01             	lea    edx,[edi+0x1]
c0026ffa:	80 e2 fe             	and    dl,0xfe
c0026ffd:	75 63                	jne    c0027062 <__mulsf3+0x139>
c0026fff:	85 c0                	test   eax,eax
c0027001:	74 2f                	je     c0027032 <__mulsf3+0x109>
c0027003:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027007:	0f 89 d2 00 00 00    	jns    c00270df <__mulsf3+0x1b6>
c002700d:	52                   	push   edx
c002700e:	52                   	push   edx
c002700f:	6a 00                	push   0x0
c0027011:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027014:	e8 dc 04 00 00       	call   c00274f5 <__eqsf2>
c0027019:	83 c4 10             	add    esp,0x10
c002701c:	85 c0                	test   eax,eax
c002701e:	0f 85 bb 00 00 00    	jne    c00270df <__mulsf3+0x1b6>
c0027024:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027027:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c002702d:	e9 b0 00 00 00       	jmp    c00270e2 <__mulsf3+0x1b9>
c0027032:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027035:	50                   	push   eax
c0027036:	50                   	push   eax
c0027037:	6a 00                	push   0x0
c0027039:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002703c:	e8 b4 04 00 00       	call   c00274f5 <__eqsf2>
c0027041:	83 c4 10             	add    esp,0x10
c0027044:	85 c0                	test   eax,eax
c0027046:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027049:	75 0c                	jne    c0027057 <__mulsf3+0x12e>
c002704b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c002704f:	0f 89 8a 00 00 00    	jns    c00270df <__mulsf3+0x1b6>
c0027055:	eb cd                	jmp    c0027024 <__mulsf3+0xfb>
c0027057:	8d 43 ff             	lea    eax,[ebx-0x1]
c002705a:	01 f6                	add    esi,esi
c002705c:	78 04                	js     c0027062 <__mulsf3+0x139>
c002705e:	89 c3                	mov    ebx,eax
c0027060:	eb f5                	jmp    c0027057 <__mulsf3+0x12e>
c0027062:	89 c8                	mov    eax,ecx
c0027064:	0d 00 00 00 80       	or     eax,0x80000000
c0027069:	81 ce 00 00 00 80    	or     esi,0x80000000
c002706f:	f7 e6                	mul    esi
c0027071:	85 c0                	test   eax,eax
c0027073:	0f 95 c0             	setne  al
c0027076:	0f b6 c0             	movzx  eax,al
c0027079:	09 c2                	or     edx,eax
c002707b:	78 03                	js     c0027080 <__mulsf3+0x157>
c002707d:	01 d2                	add    edx,edx
c002707f:	4b                   	dec    ebx
c0027080:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0027086:	7f 22                	jg     c00270aa <__mulsf3+0x181>
c0027088:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002708e:	85 db                	test   ebx,ebx
c0027090:	7f 23                	jg     c00270b5 <__mulsf3+0x18c>
c0027092:	83 fb e9             	cmp    ebx,0xffffffe9
c0027095:	7c 1a                	jl     c00270b1 <__mulsf3+0x188>
c0027097:	81 ca 00 00 00 80    	or     edx,0x80000000
c002709d:	b9 01 00 00 00       	mov    ecx,0x1
c00270a2:	29 d9                	sub    ecx,ebx
c00270a4:	d3 ea                	shr    edx,cl
c00270a6:	31 db                	xor    ebx,ebx
c00270a8:	eb 0b                	jmp    c00270b5 <__mulsf3+0x18c>
c00270aa:	bb ff 00 00 00       	mov    ebx,0xff
c00270af:	eb 02                	jmp    c00270b3 <__mulsf3+0x18a>
c00270b1:	31 db                	xor    ebx,ebx
c00270b3:	31 d2                	xor    edx,edx
c00270b5:	89 d0                	mov    eax,edx
c00270b7:	c1 e8 08             	shr    eax,0x8
c00270ba:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00270bd:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00270c3:	09 fb                	or     ebx,edi
c00270c5:	c1 e3 17             	shl    ebx,0x17
c00270c8:	09 c3                	or     ebx,eax
c00270ca:	f6 c2 7f             	test   dl,0x7f
c00270cd:	0f 95 c1             	setne  cl
c00270d0:	09 c8                	or     eax,ecx
c00270d2:	83 e0 01             	and    eax,0x1
c00270d5:	c1 ea 07             	shr    edx,0x7
c00270d8:	21 c2                	and    edx,eax
c00270da:	8d 34 13             	lea    esi,[ebx+edx*1]
c00270dd:	eb 03                	jmp    c00270e2 <__mulsf3+0x1b9>
c00270df:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00270e2:	89 f0                	mov    eax,esi
c00270e4:	8d 65 f4             	lea    esp,[ebp-0xc]
c00270e7:	5b                   	pop    ebx
c00270e8:	5e                   	pop    esi
c00270e9:	5f                   	pop    edi
c00270ea:	5d                   	pop    ebp
c00270eb:	c3                   	ret    

c00270ec <__divsf3>:
c00270ec:	55                   	push   ebp
c00270ed:	89 e5                	mov    ebp,esp
c00270ef:	57                   	push   edi
c00270f0:	56                   	push   esi
c00270f1:	53                   	push   ebx
c00270f2:	83 ec 1c             	sub    esp,0x1c
c00270f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00270f8:	89 d8                	mov    eax,ebx
c00270fa:	89 d9                	mov    ecx,ebx
c00270fc:	c1 f9 17             	sar    ecx,0x17
c00270ff:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027102:	c1 e0 08             	shl    eax,0x8
c0027105:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002710a:	89 c1                	mov    ecx,eax
c002710c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002710f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027112:	89 c7                	mov    edi,eax
c0027114:	c1 ff 17             	sar    edi,0x17
c0027117:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002711b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002711e:	89 f8                	mov    eax,edi
c0027120:	0f b6 c0             	movzx  eax,al
c0027123:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027126:	29 c6                	sub    esi,eax
c0027128:	83 c6 7f             	add    esi,0x7f
c002712b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002712e:	42                   	inc    edx
c002712f:	80 e2 fe             	and    dl,0xfe
c0027132:	0f 85 9c 00 00 00    	jne    c00271d4 <__divsf3+0xe8>
c0027138:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002713c:	74 33                	je     c0027171 <__divsf3+0x85>
c002713e:	85 c9                	test   ecx,ecx
c0027140:	0f 85 c7 01 00 00    	jne    c002730d <__divsf3+0x221>
c0027146:	8d 57 01             	lea    edx,[edi+0x1]
c0027149:	80 e2 fe             	and    dl,0xfe
c002714c:	75 2f                	jne    c002717d <__divsf3+0x91>
c002714e:	85 c0                	test   eax,eax
c0027150:	74 2b                	je     c002717d <__divsf3+0x91>
c0027152:	51                   	push   ecx
c0027153:	51                   	push   ecx
c0027154:	6a 00                	push   0x0
c0027156:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027159:	e8 d2 03 00 00       	call   c0027530 <__nesf2>
c002715e:	83 c4 10             	add    esp,0x10
c0027161:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027164:	85 c0                	test   eax,eax
c0027166:	0f 85 a1 01 00 00    	jne    c002730d <__divsf3+0x221>
c002716c:	e9 92 01 00 00       	jmp    c0027303 <__divsf3+0x217>
c0027171:	85 c9                	test   ecx,ecx
c0027173:	75 1b                	jne    c0027190 <__divsf3+0xa4>
c0027175:	8d 57 01             	lea    edx,[edi+0x1]
c0027178:	80 e2 fe             	and    dl,0xfe
c002717b:	74 1e                	je     c002719b <__divsf3+0xaf>
c002717d:	85 ff                	test   edi,edi
c002717f:	0f 89 88 01 00 00    	jns    c002730d <__divsf3+0x221>
c0027185:	81 c3 00 00 00 80    	add    ebx,0x80000000
c002718b:	e9 7d 01 00 00       	jmp    c002730d <__divsf3+0x221>
c0027190:	8d 56 ff             	lea    edx,[esi-0x1]
c0027193:	01 c9                	add    ecx,ecx
c0027195:	78 3d                	js     c00271d4 <__divsf3+0xe8>
c0027197:	89 d6                	mov    esi,edx
c0027199:	eb f5                	jmp    c0027190 <__divsf3+0xa4>
c002719b:	85 c0                	test   eax,eax
c002719d:	b8 00 00 00 00       	mov    eax,0x0
c00271a2:	74 18                	je     c00271bc <__divsf3+0xd0>
c00271a4:	52                   	push   edx
c00271a5:	52                   	push   edx
c00271a6:	50                   	push   eax
c00271a7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271aa:	e8 81 03 00 00       	call   c0027530 <__nesf2>
c00271af:	83 c4 10             	add    esp,0x10
c00271b2:	85 c0                	test   eax,eax
c00271b4:	0f 85 50 01 00 00    	jne    c002730a <__divsf3+0x21e>
c00271ba:	eb c1                	jmp    c002717d <__divsf3+0x91>
c00271bc:	56                   	push   esi
c00271bd:	56                   	push   esi
c00271be:	50                   	push   eax
c00271bf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271c2:	e8 69 03 00 00       	call   c0027530 <__nesf2>
c00271c7:	83 c4 10             	add    esp,0x10
c00271ca:	85 c0                	test   eax,eax
c00271cc:	0f 84 31 01 00 00    	je     c0027303 <__divsf3+0x217>
c00271d2:	eb a9                	jmp    c002717d <__divsf3+0x91>
c00271d4:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c00271d7:	c1 e3 08             	shl    ebx,0x8
c00271da:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00271e0:	8d 57 01             	lea    edx,[edi+0x1]
c00271e3:	80 e2 fe             	and    dl,0xfe
c00271e6:	75 71                	jne    c0027259 <__divsf3+0x16d>
c00271e8:	85 c0                	test   eax,eax
c00271ea:	ba 00 00 00 00       	mov    edx,0x0
c00271ef:	74 2f                	je     c0027220 <__divsf3+0x134>
c00271f1:	51                   	push   ecx
c00271f2:	51                   	push   ecx
c00271f3:	52                   	push   edx
c00271f4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271f7:	e8 f9 02 00 00       	call   c00274f5 <__eqsf2>
c00271fc:	83 c4 10             	add    esp,0x10
c00271ff:	85 c0                	test   eax,eax
c0027201:	0f 85 03 01 00 00    	jne    c002730a <__divsf3+0x21e>
c0027207:	31 d2                	xor    edx,edx
c0027209:	89 d3                	mov    ebx,edx
c002720b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002720e:	31 f8                	xor    eax,edi
c0027210:	0f 89 f7 00 00 00    	jns    c002730d <__divsf3+0x221>
c0027216:	bb 00 00 00 80       	mov    ebx,0x80000000
c002721b:	e9 ed 00 00 00       	jmp    c002730d <__divsf3+0x221>
c0027220:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027223:	50                   	push   eax
c0027224:	50                   	push   eax
c0027225:	52                   	push   edx
c0027226:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027229:	e8 c7 02 00 00       	call   c00274f5 <__eqsf2>
c002722e:	83 c4 10             	add    esp,0x10
c0027231:	85 c0                	test   eax,eax
c0027233:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027236:	75 16                	jne    c002724e <__divsf3+0x162>
c0027238:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002723b:	31 fb                	xor    ebx,edi
c002723d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0027243:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027249:	e9 bf 00 00 00       	jmp    c002730d <__divsf3+0x221>
c002724e:	8d 46 01             	lea    eax,[esi+0x1]
c0027251:	01 db                	add    ebx,ebx
c0027253:	78 04                	js     c0027259 <__divsf3+0x16d>
c0027255:	89 c6                	mov    esi,eax
c0027257:	eb f5                	jmp    c002724e <__divsf3+0x162>
c0027259:	89 c8                	mov    eax,ecx
c002725b:	0d 00 00 00 80       	or     eax,0x80000000
c0027260:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027266:	31 d2                	xor    edx,edx
c0027268:	39 d8                	cmp    eax,ebx
c002726a:	72 07                	jb     c0027273 <__divsf3+0x187>
c002726c:	29 d8                	sub    eax,ebx
c002726e:	ba 01 00 00 00       	mov    edx,0x1
c0027273:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c002727a:	01 d2                	add    edx,edx
c002727c:	89 c1                	mov    ecx,eax
c002727e:	01 c0                	add    eax,eax
c0027280:	85 c9                	test   ecx,ecx
c0027282:	78 04                	js     c0027288 <__divsf3+0x19c>
c0027284:	39 c3                	cmp    ebx,eax
c0027286:	77 05                	ja     c002728d <__divsf3+0x1a1>
c0027288:	29 d8                	sub    eax,ebx
c002728a:	83 ca 01             	or     edx,0x1
c002728d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027290:	75 e8                	jne    c002727a <__divsf3+0x18e>
c0027292:	85 c0                	test   eax,eax
c0027294:	0f 95 c0             	setne  al
c0027297:	0f b6 c0             	movzx  eax,al
c002729a:	c1 e2 06             	shl    edx,0x6
c002729d:	09 c2                	or     edx,eax
c002729f:	78 03                	js     c00272a4 <__divsf3+0x1b8>
c00272a1:	01 d2                	add    edx,edx
c00272a3:	4e                   	dec    esi
c00272a4:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00272aa:	7f 22                	jg     c00272ce <__divsf3+0x1e2>
c00272ac:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00272b2:	85 f6                	test   esi,esi
c00272b4:	7f 23                	jg     c00272d9 <__divsf3+0x1ed>
c00272b6:	83 fe e9             	cmp    esi,0xffffffe9
c00272b9:	7c 1a                	jl     c00272d5 <__divsf3+0x1e9>
c00272bb:	81 ca 00 00 00 80    	or     edx,0x80000000
c00272c1:	b9 01 00 00 00       	mov    ecx,0x1
c00272c6:	29 f1                	sub    ecx,esi
c00272c8:	d3 ea                	shr    edx,cl
c00272ca:	31 f6                	xor    esi,esi
c00272cc:	eb 0b                	jmp    c00272d9 <__divsf3+0x1ed>
c00272ce:	be ff 00 00 00       	mov    esi,0xff
c00272d3:	eb 02                	jmp    c00272d7 <__divsf3+0x1eb>
c00272d5:	31 f6                	xor    esi,esi
c00272d7:	31 d2                	xor    edx,edx
c00272d9:	89 d0                	mov    eax,edx
c00272db:	c1 e8 08             	shr    eax,0x8
c00272de:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00272e1:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00272e7:	09 fe                	or     esi,edi
c00272e9:	c1 e6 17             	shl    esi,0x17
c00272ec:	09 c6                	or     esi,eax
c00272ee:	f6 c2 7f             	test   dl,0x7f
c00272f1:	0f 95 c1             	setne  cl
c00272f4:	09 c8                	or     eax,ecx
c00272f6:	83 e0 01             	and    eax,0x1
c00272f9:	c1 ea 07             	shr    edx,0x7
c00272fc:	21 c2                	and    edx,eax
c00272fe:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027301:	eb 0a                	jmp    c002730d <__divsf3+0x221>
c0027303:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027308:	eb 03                	jmp    c002730d <__divsf3+0x221>
c002730a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002730d:	89 d8                	mov    eax,ebx
c002730f:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027312:	5b                   	pop    ebx
c0027313:	5e                   	pop    esi
c0027314:	5f                   	pop    edi
c0027315:	5d                   	pop    ebp
c0027316:	c3                   	ret    

c0027317 <__floatsisf>:
c0027317:	55                   	push   ebp
c0027318:	89 e5                	mov    ebp,esp
c002731a:	53                   	push   ebx
c002731b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002731e:	85 d2                	test   edx,edx
c0027320:	7e 2b                	jle    c002734d <__floatsisf+0x36>
c0027322:	0f bd ca             	bsr    ecx,edx
c0027325:	83 f1 1f             	xor    ecx,0x1f
c0027328:	d3 e2                	shl    edx,cl
c002732a:	89 d0                	mov    eax,edx
c002732c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027331:	89 c3                	mov    ebx,eax
c0027333:	c1 eb 08             	shr    ebx,0x8
c0027336:	80 e2 7f             	and    dl,0x7f
c0027339:	0f 95 c2             	setne  dl
c002733c:	09 da                	or     edx,ebx
c002733e:	83 e2 01             	and    edx,0x1
c0027341:	c1 e8 07             	shr    eax,0x7
c0027344:	21 c2                	and    edx,eax
c0027346:	b8 9e 00 00 00       	mov    eax,0x9e
c002734b:	eb 32                	jmp    c002737f <__floatsisf+0x68>
c002734d:	b8 00 00 00 00       	mov    eax,0x0
c0027352:	74 34                	je     c0027388 <__floatsisf+0x71>
c0027354:	f7 da                	neg    edx
c0027356:	0f bd ca             	bsr    ecx,edx
c0027359:	83 f1 1f             	xor    ecx,0x1f
c002735c:	d3 e2                	shl    edx,cl
c002735e:	89 d0                	mov    eax,edx
c0027360:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027365:	89 c3                	mov    ebx,eax
c0027367:	c1 eb 08             	shr    ebx,0x8
c002736a:	80 e2 7f             	and    dl,0x7f
c002736d:	0f 95 c2             	setne  dl
c0027370:	09 da                	or     edx,ebx
c0027372:	83 e2 01             	and    edx,0x1
c0027375:	c1 e8 07             	shr    eax,0x7
c0027378:	21 c2                	and    edx,eax
c002737a:	b8 9e 01 00 00       	mov    eax,0x19e
c002737f:	29 c8                	sub    eax,ecx
c0027381:	c1 e0 17             	shl    eax,0x17
c0027384:	09 d8                	or     eax,ebx
c0027386:	01 d0                	add    eax,edx
c0027388:	5b                   	pop    ebx
c0027389:	5d                   	pop    ebp
c002738a:	c3                   	ret    

c002738b <__floatunsisf>:
c002738b:	55                   	push   ebp
c002738c:	89 e5                	mov    ebp,esp
c002738e:	53                   	push   ebx
c002738f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027392:	31 c0                	xor    eax,eax
c0027394:	85 d2                	test   edx,edx
c0027396:	74 32                	je     c00273ca <__floatunsisf+0x3f>
c0027398:	0f bd ca             	bsr    ecx,edx
c002739b:	83 f1 1f             	xor    ecx,0x1f
c002739e:	d3 e2                	shl    edx,cl
c00273a0:	89 d0                	mov    eax,edx
c00273a2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00273a7:	89 c3                	mov    ebx,eax
c00273a9:	c1 eb 08             	shr    ebx,0x8
c00273ac:	80 e2 7f             	and    dl,0x7f
c00273af:	0f 95 c2             	setne  dl
c00273b2:	09 da                	or     edx,ebx
c00273b4:	83 e2 01             	and    edx,0x1
c00273b7:	c1 e8 07             	shr    eax,0x7
c00273ba:	21 c2                	and    edx,eax
c00273bc:	b8 9e 00 00 00       	mov    eax,0x9e
c00273c1:	29 c8                	sub    eax,ecx
c00273c3:	c1 e0 17             	shl    eax,0x17
c00273c6:	09 d8                	or     eax,ebx
c00273c8:	01 d0                	add    eax,edx
c00273ca:	5b                   	pop    ebx
c00273cb:	5d                   	pop    ebp
c00273cc:	c3                   	ret    

c00273cd <__fixsfsi>:
c00273cd:	55                   	push   ebp
c00273ce:	89 e5                	mov    ebp,esp
c00273d0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00273d3:	89 d1                	mov    ecx,edx
c00273d5:	c1 e1 08             	shl    ecx,0x8
c00273d8:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c00273de:	c1 fa 17             	sar    edx,0x17
c00273e1:	78 1c                	js     c00273ff <__fixsfsi+0x32>
c00273e3:	83 ea 7f             	sub    edx,0x7f
c00273e6:	31 c0                	xor    eax,eax
c00273e8:	83 fa 1e             	cmp    edx,0x1e
c00273eb:	77 40                	ja     c002742d <__fixsfsi+0x60>
c00273ed:	89 c8                	mov    eax,ecx
c00273ef:	0d 00 00 00 80       	or     eax,0x80000000
c00273f4:	b9 1f 00 00 00       	mov    ecx,0x1f
c00273f9:	29 d1                	sub    ecx,edx
c00273fb:	d3 e8                	shr    eax,cl
c00273fd:	eb 2e                	jmp    c002742d <__fixsfsi+0x60>
c00273ff:	31 c0                	xor    eax,eax
c0027401:	81 c2 81 00 00 00    	add    edx,0x81
c0027407:	78 24                	js     c002742d <__fixsfsi+0x60>
c0027409:	83 fa 1e             	cmp    edx,0x1e
c002740c:	7e 09                	jle    c0027417 <__fixsfsi+0x4a>
c002740e:	83 fa 1f             	cmp    edx,0x1f
c0027411:	75 18                	jne    c002742b <__fixsfsi+0x5e>
c0027413:	85 c9                	test   ecx,ecx
c0027415:	75 14                	jne    c002742b <__fixsfsi+0x5e>
c0027417:	89 c8                	mov    eax,ecx
c0027419:	0d 00 00 00 80       	or     eax,0x80000000
c002741e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027423:	29 d1                	sub    ecx,edx
c0027425:	d3 e8                	shr    eax,cl
c0027427:	f7 d8                	neg    eax
c0027429:	eb 02                	jmp    c002742d <__fixsfsi+0x60>
c002742b:	31 c0                	xor    eax,eax
c002742d:	5d                   	pop    ebp
c002742e:	c3                   	ret    

c002742f <__fixunssfsi>:
c002742f:	55                   	push   ebp
c0027430:	89 e5                	mov    ebp,esp
c0027432:	53                   	push   ebx
c0027433:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027436:	89 d3                	mov    ebx,edx
c0027438:	c1 fb 17             	sar    ebx,0x17
c002743b:	83 eb 7f             	sub    ebx,0x7f
c002743e:	31 c0                	xor    eax,eax
c0027440:	83 fb 1f             	cmp    ebx,0x1f
c0027443:	77 18                	ja     c002745d <__fixunssfsi+0x2e>
c0027445:	89 d0                	mov    eax,edx
c0027447:	c1 e0 08             	shl    eax,0x8
c002744a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002744f:	0d 00 00 00 80       	or     eax,0x80000000
c0027454:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027459:	29 d9                	sub    ecx,ebx
c002745b:	d3 e8                	shr    eax,cl
c002745d:	5b                   	pop    ebx
c002745e:	5d                   	pop    ebp
c002745f:	c3                   	ret    

c0027460 <__cmpsf2>:
c0027460:	55                   	push   ebp
c0027461:	89 e5                	mov    ebp,esp
c0027463:	57                   	push   edi
c0027464:	56                   	push   esi
c0027465:	53                   	push   ebx
c0027466:	83 ec 24             	sub    esp,0x24
c0027469:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002746c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002746f:	e8 4f 10 00 00       	call   c00284c3 <__truncdfsf2>
c0027474:	5a                   	pop    edx
c0027475:	59                   	pop    ecx
c0027476:	89 c3                	mov    ebx,eax
c0027478:	c1 e8 17             	shr    eax,0x17
c002747b:	0f b6 f0             	movzx  esi,al
c002747e:	89 d8                	mov    eax,ebx
c0027480:	c1 e8 1f             	shr    eax,0x1f
c0027483:	31 c6                	xor    esi,eax
c0027485:	c1 e3 08             	shl    ebx,0x8
c0027488:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002748b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002748e:	e8 30 10 00 00       	call   c00284c3 <__truncdfsf2>
c0027493:	83 c4 10             	add    esp,0x10
c0027496:	89 c1                	mov    ecx,eax
c0027498:	c1 e9 17             	shr    ecx,0x17
c002749b:	0f b6 c9             	movzx  ecx,cl
c002749e:	89 c7                	mov    edi,eax
c00274a0:	c1 ef 1f             	shr    edi,0x1f
c00274a3:	89 ca                	mov    edx,ecx
c00274a5:	31 fa                	xor    edx,edi
c00274a7:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00274aa:	c1 e0 08             	shl    eax,0x8
c00274ad:	89 c2                	mov    edx,eax
c00274af:	89 d8                	mov    eax,ebx
c00274b1:	09 d0                	or     eax,edx
c00274b3:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00274b8:	09 f0                	or     eax,esi
c00274ba:	75 08                	jne    c00274c4 <__cmpsf2+0x64>
c00274bc:	31 c0                	xor    eax,eax
c00274be:	39 f9                	cmp    ecx,edi
c00274c0:	75 0c                	jne    c00274ce <__cmpsf2+0x6e>
c00274c2:	eb 29                	jmp    c00274ed <__cmpsf2+0x8d>
c00274c4:	b8 01 00 00 00       	mov    eax,0x1
c00274c9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00274cc:	7f 1f                	jg     c00274ed <__cmpsf2+0x8d>
c00274ce:	83 c8 ff             	or     eax,0xffffffff
c00274d1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00274d4:	7c 17                	jl     c00274ed <__cmpsf2+0x8d>
c00274d6:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00274dc:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00274e2:	b8 01 00 00 00       	mov    eax,0x1
c00274e7:	39 d3                	cmp    ebx,edx
c00274e9:	77 02                	ja     c00274ed <__cmpsf2+0x8d>
c00274eb:	19 c0                	sbb    eax,eax
c00274ed:	8d 65 f4             	lea    esp,[ebp-0xc]
c00274f0:	5b                   	pop    ebx
c00274f1:	5e                   	pop    esi
c00274f2:	5f                   	pop    edi
c00274f3:	5d                   	pop    ebp
c00274f4:	c3                   	ret    

c00274f5 <__eqsf2>:
c00274f5:	55                   	push   ebp
c00274f6:	89 e5                	mov    ebp,esp
c00274f8:	83 ec 24             	sub    esp,0x24
c00274fb:	6a 01                	push   0x1
c00274fd:	83 ec 0c             	sub    esp,0xc
c0027500:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027503:	e8 df 10 00 00       	call   c00285e7 <__extendsfdf2>
c0027508:	83 c4 10             	add    esp,0x10
c002750b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002750e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027511:	52                   	push   edx
c0027512:	50                   	push   eax
c0027513:	50                   	push   eax
c0027514:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027517:	e8 cb 10 00 00       	call   c00285e7 <__extendsfdf2>
c002751c:	59                   	pop    ecx
c002751d:	59                   	pop    ecx
c002751e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027521:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027524:	52                   	push   edx
c0027525:	50                   	push   eax
c0027526:	e8 35 ff ff ff       	call   c0027460 <__cmpsf2>
c002752b:	83 c4 20             	add    esp,0x20
c002752e:	c9                   	leave  
c002752f:	c3                   	ret    

c0027530 <__nesf2>:
c0027530:	eb c3                	jmp    c00274f5 <__eqsf2>

c0027532 <__gtsf2>:
c0027532:	55                   	push   ebp
c0027533:	89 e5                	mov    ebp,esp
c0027535:	83 ec 24             	sub    esp,0x24
c0027538:	6a ff                	push   0xffffffff
c002753a:	83 ec 0c             	sub    esp,0xc
c002753d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027540:	e8 a2 10 00 00       	call   c00285e7 <__extendsfdf2>
c0027545:	83 c4 10             	add    esp,0x10
c0027548:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002754b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002754e:	52                   	push   edx
c002754f:	50                   	push   eax
c0027550:	50                   	push   eax
c0027551:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027554:	e8 8e 10 00 00       	call   c00285e7 <__extendsfdf2>
c0027559:	59                   	pop    ecx
c002755a:	59                   	pop    ecx
c002755b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002755e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027561:	52                   	push   edx
c0027562:	50                   	push   eax
c0027563:	e8 f8 fe ff ff       	call   c0027460 <__cmpsf2>
c0027568:	83 c4 20             	add    esp,0x20
c002756b:	c9                   	leave  
c002756c:	c3                   	ret    

c002756d <__gesf2>:
c002756d:	eb c3                	jmp    c0027532 <__gtsf2>

c002756f <__ltsf2>:
c002756f:	eb 84                	jmp    c00274f5 <__eqsf2>

c0027571 <__lesf2>:
c0027571:	eb 82                	jmp    c00274f5 <__eqsf2>

c0027573 <__adddf3>:
c0027573:	55                   	push   ebp
c0027574:	89 e5                	mov    ebp,esp
c0027576:	57                   	push   edi
c0027577:	56                   	push   esi
c0027578:	53                   	push   ebx
c0027579:	83 ec 24             	sub    esp,0x24
c002757c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002757f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027582:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027585:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027588:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002758b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002758e:	89 c8                	mov    eax,ecx
c0027590:	89 ce                	mov    esi,ecx
c0027592:	c1 fe 14             	sar    esi,0x14
c0027595:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027598:	89 fb                	mov    ebx,edi
c002759a:	89 fa                	mov    edx,edi
c002759c:	c1 e2 0b             	shl    edx,0xb
c002759f:	c1 e0 0b             	shl    eax,0xb
c00275a2:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00275a7:	c1 eb 15             	shr    ebx,0x15
c00275aa:	09 d8                	or     eax,ebx
c00275ac:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00275af:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00275b2:	c1 fe 14             	sar    esi,0x14
c00275b5:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00275b8:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00275bb:	89 f3                	mov    ebx,esi
c00275bd:	c1 e3 0b             	shl    ebx,0xb
c00275c0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00275c3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00275c6:	c1 e3 0b             	shl    ebx,0xb
c00275c9:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c00275cf:	c1 ee 15             	shr    esi,0x15
c00275d2:	09 f3                	or     ebx,esi
c00275d4:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c00275d7:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00275da:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c00275dd:	0f 88 5f 02 00 00    	js     c0027842 <__adddf3+0x2cf>
c00275e3:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00275e6:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c00275e9:	85 db                	test   ebx,ebx
c00275eb:	0f 8e c7 00 00 00    	jle    c00276b8 <__adddf3+0x145>
c00275f1:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c00275f8:	75 1a                	jne    c0027614 <__adddf3+0xa1>
c00275fa:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00275fd:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027600:	0f 84 b2 05 00 00    	je     c0027bb8 <__adddf3+0x645>
c0027606:	4b                   	dec    ebx
c0027607:	75 23                	jne    c002762c <__adddf3+0xb9>
c0027609:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002760c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c002760f:	e9 99 00 00 00       	jmp    c00276ad <__adddf3+0x13a>
c0027614:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027617:	f7 d6                	not    esi
c0027619:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002761f:	0f 84 93 05 00 00    	je     c0027bb8 <__adddf3+0x645>
c0027625:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002762c:	83 fb 1f             	cmp    ebx,0x1f
c002762f:	7e 42                	jle    c0027673 <__adddf3+0x100>
c0027631:	83 fb 3f             	cmp    ebx,0x3f
c0027634:	0f 8f 7e 05 00 00    	jg     c0027bb8 <__adddf3+0x645>
c002763a:	83 e3 1f             	and    ebx,0x1f
c002763d:	89 d9                	mov    ecx,ebx
c002763f:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027642:	d3 ef                	shr    edi,cl
c0027644:	31 db                	xor    ebx,ebx
c0027646:	85 c9                	test   ecx,ecx
c0027648:	74 15                	je     c002765f <__adddf3+0xec>
c002764a:	be 20 00 00 00       	mov    esi,0x20
c002764f:	29 ce                	sub    esi,ecx
c0027651:	89 f1                	mov    ecx,esi
c0027653:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027656:	d3 e6                	shl    esi,cl
c0027658:	31 db                	xor    ebx,ebx
c002765a:	85 f6                	test   esi,esi
c002765c:	0f 95 c3             	setne  bl
c002765f:	31 c9                	xor    ecx,ecx
c0027661:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027665:	0f 95 c1             	setne  cl
c0027668:	09 cf                	or     edi,ecx
c002766a:	09 fb                	or     ebx,edi
c002766c:	01 da                	add    edx,ebx
c002766e:	83 d0 00             	adc    eax,0x0
c0027671:	eb 3a                	jmp    c00276ad <__adddf3+0x13a>
c0027673:	bf 20 00 00 00       	mov    edi,0x20
c0027678:	29 df                	sub    edi,ebx
c002767a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002767d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027680:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027683:	d3 e6                	shl    esi,cl
c0027685:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027688:	88 d9                	mov    cl,bl
c002768a:	d3 ef                	shr    edi,cl
c002768c:	09 fe                	or     esi,edi
c002768e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027691:	88 d9                	mov    cl,bl
c0027693:	d3 ef                	shr    edi,cl
c0027695:	89 fb                	mov    ebx,edi
c0027697:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002769a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002769d:	d3 e7                	shl    edi,cl
c002769f:	85 ff                	test   edi,edi
c00276a1:	0f 95 c1             	setne  cl
c00276a4:	0f b6 c9             	movzx  ecx,cl
c00276a7:	09 ce                	or     esi,ecx
c00276a9:	01 f2                	add    edx,esi
c00276ab:	11 d8                	adc    eax,ebx
c00276ad:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00276b0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00276b3:	e9 52 01 00 00       	jmp    c002780a <__adddf3+0x297>
c00276b8:	0f 84 d5 00 00 00    	je     c0027793 <__adddf3+0x220>
c00276be:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00276c1:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c00276c4:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00276c7:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00276ca:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00276d1:	75 20                	jne    c00276f3 <__adddf3+0x180>
c00276d3:	89 d6                	mov    esi,edx
c00276d5:	09 c6                	or     esi,eax
c00276d7:	0f 84 db 04 00 00    	je     c0027bb8 <__adddf3+0x645>
c00276dd:	4b                   	dec    ebx
c00276de:	75 29                	jne    c0027709 <__adddf3+0x196>
c00276e0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00276e3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00276e6:	01 d1                	add    ecx,edx
c00276e8:	11 c6                	adc    esi,eax
c00276ea:	89 f0                	mov    eax,esi
c00276ec:	89 ca                	mov    edx,ecx
c00276ee:	e9 17 01 00 00       	jmp    c002780a <__adddf3+0x297>
c00276f3:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00276f6:	f7 d6                	not    esi
c00276f8:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00276fe:	0f 84 b4 04 00 00    	je     c0027bb8 <__adddf3+0x645>
c0027704:	0d 00 00 00 80       	or     eax,0x80000000
c0027709:	83 fb 1f             	cmp    ebx,0x1f
c002770c:	7e 48                	jle    c0027756 <__adddf3+0x1e3>
c002770e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027711:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027714:	83 fb 3f             	cmp    ebx,0x3f
c0027717:	0f 8f 9b 04 00 00    	jg     c0027bb8 <__adddf3+0x645>
c002771d:	83 e3 1f             	and    ebx,0x1f
c0027720:	89 d9                	mov    ecx,ebx
c0027722:	89 c7                	mov    edi,eax
c0027724:	d3 ef                	shr    edi,cl
c0027726:	31 db                	xor    ebx,ebx
c0027728:	85 c9                	test   ecx,ecx
c002772a:	74 12                	je     c002773e <__adddf3+0x1cb>
c002772c:	be 20 00 00 00       	mov    esi,0x20
c0027731:	29 ce                	sub    esi,ecx
c0027733:	89 f1                	mov    ecx,esi
c0027735:	d3 e0                	shl    eax,cl
c0027737:	31 db                	xor    ebx,ebx
c0027739:	85 c0                	test   eax,eax
c002773b:	0f 95 c3             	setne  bl
c002773e:	31 c0                	xor    eax,eax
c0027740:	85 d2                	test   edx,edx
c0027742:	0f 95 c0             	setne  al
c0027745:	09 c7                	or     edi,eax
c0027747:	09 fb                	or     ebx,edi
c0027749:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002774c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002774f:	01 da                	add    edx,ebx
c0027751:	83 d6 00             	adc    esi,0x0
c0027754:	eb 39                	jmp    c002778f <__adddf3+0x21c>
c0027756:	be 20 00 00 00       	mov    esi,0x20
c002775b:	29 de                	sub    esi,ebx
c002775d:	89 c7                	mov    edi,eax
c002775f:	89 f1                	mov    ecx,esi
c0027761:	d3 e7                	shl    edi,cl
c0027763:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027766:	89 d7                	mov    edi,edx
c0027768:	88 d9                	mov    cl,bl
c002776a:	d3 ef                	shr    edi,cl
c002776c:	89 f9                	mov    ecx,edi
c002776e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027771:	09 cf                	or     edi,ecx
c0027773:	88 d9                	mov    cl,bl
c0027775:	d3 e8                	shr    eax,cl
c0027777:	89 f1                	mov    ecx,esi
c0027779:	d3 e2                	shl    edx,cl
c002777b:	85 d2                	test   edx,edx
c002777d:	0f 95 c2             	setne  dl
c0027780:	0f b6 d2             	movzx  edx,dl
c0027783:	09 d7                	or     edi,edx
c0027785:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027788:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002778b:	01 fa                	add    edx,edi
c002778d:	11 c6                	adc    esi,eax
c002778f:	89 f0                	mov    eax,esi
c0027791:	eb 77                	jmp    c002780a <__adddf3+0x297>
c0027793:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027796:	46                   	inc    esi
c0027797:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002779a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00277a0:	75 41                	jne    c00277e3 <__adddf3+0x270>
c00277a2:	89 d3                	mov    ebx,edx
c00277a4:	09 c3                	or     ebx,eax
c00277a6:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00277ad:	75 27                	jne    c00277d6 <__adddf3+0x263>
c00277af:	85 db                	test   ebx,ebx
c00277b1:	0f 84 fb 03 00 00    	je     c0027bb2 <__adddf3+0x63f>
c00277b7:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00277ba:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00277bd:	0f 84 f5 03 00 00    	je     c0027bb8 <__adddf3+0x645>
c00277c3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00277c6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00277c9:	85 c0                	test   eax,eax
c00277cb:	0f 89 91 03 00 00    	jns    c0027b62 <__adddf3+0x5ef>
c00277d1:	e9 85 03 00 00       	jmp    c0027b5b <__adddf3+0x5e8>
c00277d6:	85 db                	test   ebx,ebx
c00277d8:	0f 85 da 03 00 00    	jne    c0027bb8 <__adddf3+0x645>
c00277de:	e9 cf 03 00 00       	jmp    c0027bb2 <__adddf3+0x63f>
c00277e3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00277e6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00277e9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00277ec:	f7 d1                	not    ecx
c00277ee:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00277f4:	0f 84 70 03 00 00    	je     c0027b6a <__adddf3+0x5f7>
c00277fa:	d1 ea                	shr    edx,1
c00277fc:	89 c1                	mov    ecx,eax
c00277fe:	c1 e1 1f             	shl    ecx,0x1f
c0027801:	09 ca                	or     edx,ecx
c0027803:	d1 e8                	shr    eax,1
c0027805:	e9 6f 03 00 00       	jmp    c0027b79 <__adddf3+0x606>
c002780a:	85 c0                	test   eax,eax
c002780c:	0f 89 67 03 00 00    	jns    c0027b79 <__adddf3+0x606>
c0027812:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0027815:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027818:	f7 d1                	not    ecx
c002781a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027820:	0f 84 44 03 00 00    	je     c0027b6a <__adddf3+0x5f7>
c0027826:	89 d1                	mov    ecx,edx
c0027828:	d1 e9                	shr    ecx,1
c002782a:	83 e2 01             	and    edx,0x1
c002782d:	09 ca                	or     edx,ecx
c002782f:	89 c1                	mov    ecx,eax
c0027831:	c1 e1 1f             	shl    ecx,0x1f
c0027834:	09 ca                	or     edx,ecx
c0027836:	d1 e8                	shr    eax,1
c0027838:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002783d:	e9 37 03 00 00       	jmp    c0027b79 <__adddf3+0x606>
c0027842:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027845:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002784b:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c002784e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027851:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027857:	29 de                	sub    esi,ebx
c0027859:	85 f6                	test   esi,esi
c002785b:	0f 8e bd 00 00 00    	jle    c002791e <__adddf3+0x3ab>
c0027861:	85 db                	test   ebx,ebx
c0027863:	75 17                	jne    c002787c <__adddf3+0x309>
c0027865:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027868:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002786b:	0f 84 47 03 00 00    	je     c0027bb8 <__adddf3+0x645>
c0027871:	4e                   	dec    esi
c0027872:	75 20                	jne    c0027894 <__adddf3+0x321>
c0027874:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027877:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002787a:	eb 5b                	jmp    c00278d7 <__adddf3+0x364>
c002787c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002787f:	f7 d3                	not    ebx
c0027881:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027887:	0f 84 2b 03 00 00    	je     c0027bb8 <__adddf3+0x645>
c002788d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027894:	83 fe 1f             	cmp    esi,0x1f
c0027897:	7e 49                	jle    c00278e2 <__adddf3+0x36f>
c0027899:	83 fe 3f             	cmp    esi,0x3f
c002789c:	0f 8f 16 03 00 00    	jg     c0027bb8 <__adddf3+0x645>
c00278a2:	83 e6 1f             	and    esi,0x1f
c00278a5:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00278a8:	89 f1                	mov    ecx,esi
c00278aa:	d3 ef                	shr    edi,cl
c00278ac:	31 db                	xor    ebx,ebx
c00278ae:	85 f6                	test   esi,esi
c00278b0:	74 13                	je     c00278c5 <__adddf3+0x352>
c00278b2:	b9 20 00 00 00       	mov    ecx,0x20
c00278b7:	29 f1                	sub    ecx,esi
c00278b9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00278bc:	d3 e6                	shl    esi,cl
c00278be:	31 db                	xor    ebx,ebx
c00278c0:	85 f6                	test   esi,esi
c00278c2:	0f 95 c3             	setne  bl
c00278c5:	31 c9                	xor    ecx,ecx
c00278c7:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00278cb:	0f 95 c1             	setne  cl
c00278ce:	09 cf                	or     edi,ecx
c00278d0:	09 fb                	or     ebx,edi
c00278d2:	29 da                	sub    edx,ebx
c00278d4:	83 d8 00             	sbb    eax,0x0
c00278d7:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00278da:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00278dd:	e9 aa 01 00 00       	jmp    c0027a8c <__adddf3+0x519>
c00278e2:	bf 20 00 00 00       	mov    edi,0x20
c00278e7:	29 f7                	sub    edi,esi
c00278e9:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00278ec:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00278ef:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00278f2:	d3 e3                	shl    ebx,cl
c00278f4:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00278f7:	89 f1                	mov    ecx,esi
c00278f9:	d3 ef                	shr    edi,cl
c00278fb:	09 fb                	or     ebx,edi
c00278fd:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027900:	89 f1                	mov    ecx,esi
c0027902:	d3 ef                	shr    edi,cl
c0027904:	89 fe                	mov    esi,edi
c0027906:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027909:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002790c:	d3 e7                	shl    edi,cl
c002790e:	85 ff                	test   edi,edi
c0027910:	0f 95 c1             	setne  cl
c0027913:	0f b6 c9             	movzx  ecx,cl
c0027916:	09 cb                	or     ebx,ecx
c0027918:	29 da                	sub    edx,ebx
c002791a:	19 f0                	sbb    eax,esi
c002791c:	eb b9                	jmp    c00278d7 <__adddf3+0x364>
c002791e:	0f 84 cd 00 00 00    	je     c00279f1 <__adddf3+0x47e>
c0027924:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0027927:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002792a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002792d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027931:	75 1b                	jne    c002794e <__adddf3+0x3db>
c0027933:	89 d6                	mov    esi,edx
c0027935:	09 c6                	or     esi,eax
c0027937:	0f 84 7b 02 00 00    	je     c0027bb8 <__adddf3+0x645>
c002793d:	4b                   	dec    ebx
c002793e:	75 24                	jne    c0027964 <__adddf3+0x3f1>
c0027940:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027943:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027946:	29 d1                	sub    ecx,edx
c0027948:	19 c6                	sbb    esi,eax
c002794a:	89 ca                	mov    edx,ecx
c002794c:	eb 61                	jmp    c00279af <__adddf3+0x43c>
c002794e:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027951:	f7 d6                	not    esi
c0027953:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027959:	0f 84 59 02 00 00    	je     c0027bb8 <__adddf3+0x645>
c002795f:	0d 00 00 00 80       	or     eax,0x80000000
c0027964:	83 fb 1f             	cmp    ebx,0x1f
c0027967:	7e 4d                	jle    c00279b6 <__adddf3+0x443>
c0027969:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002796c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002796f:	83 fb 3f             	cmp    ebx,0x3f
c0027972:	0f 8f 40 02 00 00    	jg     c0027bb8 <__adddf3+0x645>
c0027978:	83 e3 1f             	and    ebx,0x1f
c002797b:	89 d9                	mov    ecx,ebx
c002797d:	89 c7                	mov    edi,eax
c002797f:	d3 ef                	shr    edi,cl
c0027981:	31 db                	xor    ebx,ebx
c0027983:	85 c9                	test   ecx,ecx
c0027985:	74 12                	je     c0027999 <__adddf3+0x426>
c0027987:	be 20 00 00 00       	mov    esi,0x20
c002798c:	29 ce                	sub    esi,ecx
c002798e:	89 f1                	mov    ecx,esi
c0027990:	d3 e0                	shl    eax,cl
c0027992:	31 db                	xor    ebx,ebx
c0027994:	85 c0                	test   eax,eax
c0027996:	0f 95 c3             	setne  bl
c0027999:	31 c0                	xor    eax,eax
c002799b:	85 d2                	test   edx,edx
c002799d:	0f 95 c0             	setne  al
c00279a0:	09 c7                	or     edi,eax
c00279a2:	09 fb                	or     ebx,edi
c00279a4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00279a7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00279aa:	29 da                	sub    edx,ebx
c00279ac:	83 de 00             	sbb    esi,0x0
c00279af:	89 f0                	mov    eax,esi
c00279b1:	e9 d6 00 00 00       	jmp    c0027a8c <__adddf3+0x519>
c00279b6:	be 20 00 00 00       	mov    esi,0x20
c00279bb:	29 de                	sub    esi,ebx
c00279bd:	89 c7                	mov    edi,eax
c00279bf:	89 f1                	mov    ecx,esi
c00279c1:	d3 e7                	shl    edi,cl
c00279c3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00279c6:	89 d7                	mov    edi,edx
c00279c8:	88 d9                	mov    cl,bl
c00279ca:	d3 ef                	shr    edi,cl
c00279cc:	89 f9                	mov    ecx,edi
c00279ce:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00279d1:	09 cf                	or     edi,ecx
c00279d3:	88 d9                	mov    cl,bl
c00279d5:	d3 e8                	shr    eax,cl
c00279d7:	89 f1                	mov    ecx,esi
c00279d9:	d3 e2                	shl    edx,cl
c00279db:	85 d2                	test   edx,edx
c00279dd:	0f 95 c2             	setne  dl
c00279e0:	0f b6 d2             	movzx  edx,dl
c00279e3:	09 d7                	or     edi,edx
c00279e5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00279e8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00279eb:	29 fa                	sub    edx,edi
c00279ed:	19 c6                	sbb    esi,eax
c00279ef:	eb be                	jmp    c00279af <__adddf3+0x43c>
c00279f1:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00279f4:	8d 5e 01             	lea    ebx,[esi+0x1]
c00279f7:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c00279fd:	75 6a                	jne    c0027a69 <__adddf3+0x4f6>
c00279ff:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027a03:	75 58                	jne    c0027a5d <__adddf3+0x4ea>
c0027a05:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027a08:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027a0b:	89 d6                	mov    esi,edx
c0027a0d:	09 c6                	or     esi,eax
c0027a0f:	75 17                	jne    c0027a28 <__adddf3+0x4b5>
c0027a11:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027a14:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027a17:	85 db                	test   ebx,ebx
c0027a19:	0f 85 99 01 00 00    	jne    c0027bb8 <__adddf3+0x645>
c0027a1f:	31 ff                	xor    edi,edi
c0027a21:	31 c9                	xor    ecx,ecx
c0027a23:	e9 90 01 00 00       	jmp    c0027bb8 <__adddf3+0x645>
c0027a28:	85 db                	test   ebx,ebx
c0027a2a:	0f 84 88 01 00 00    	je     c0027bb8 <__adddf3+0x645>
c0027a30:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027a33:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027a36:	85 c0                	test   eax,eax
c0027a38:	79 10                	jns    c0027a4a <__adddf3+0x4d7>
c0027a3a:	31 c9                	xor    ecx,ecx
c0027a3c:	f7 da                	neg    edx
c0027a3e:	0f 95 c1             	setne  cl
c0027a41:	01 c8                	add    eax,ecx
c0027a43:	f7 d8                	neg    eax
c0027a45:	e9 2f 01 00 00       	jmp    c0027b79 <__adddf3+0x606>
c0027a4a:	31 ff                	xor    edi,edi
c0027a4c:	31 c9                	xor    ecx,ecx
c0027a4e:	89 c3                	mov    ebx,eax
c0027a50:	09 d3                	or     ebx,edx
c0027a52:	0f 84 60 01 00 00    	je     c0027bb8 <__adddf3+0x645>
c0027a58:	e9 05 01 00 00       	jmp    c0027b62 <__adddf3+0x5ef>
c0027a5d:	31 ff                	xor    edi,edi
c0027a5f:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027a64:	e9 4f 01 00 00       	jmp    c0027bb8 <__adddf3+0x645>
c0027a69:	89 c1                	mov    ecx,eax
c0027a6b:	89 d0                	mov    eax,edx
c0027a6d:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027a70:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027a73:	89 ca                	mov    edx,ecx
c0027a75:	85 c9                	test   ecx,ecx
c0027a77:	79 2c                	jns    c0027aa5 <__adddf3+0x532>
c0027a79:	31 c9                	xor    ecx,ecx
c0027a7b:	f7 d8                	neg    eax
c0027a7d:	0f 95 c1             	setne  cl
c0027a80:	01 ca                	add    edx,ecx
c0027a82:	f7 da                	neg    edx
c0027a84:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027a87:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027a8a:	eb 19                	jmp    c0027aa5 <__adddf3+0x532>
c0027a8c:	85 c0                	test   eax,eax
c0027a8e:	0f 89 e5 00 00 00    	jns    c0027b79 <__adddf3+0x606>
c0027a94:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027a99:	89 c1                	mov    ecx,eax
c0027a9b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027a9e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027aa1:	89 d0                	mov    eax,edx
c0027aa3:	89 ca                	mov    edx,ecx
c0027aa5:	85 d2                	test   edx,edx
c0027aa7:	74 59                	je     c0027b02 <__adddf3+0x58f>
c0027aa9:	0f bd da             	bsr    ebx,edx
c0027aac:	83 f3 1f             	xor    ebx,0x1f
c0027aaf:	88 d9                	mov    cl,bl
c0027ab1:	d3 e2                	shl    edx,cl
c0027ab3:	bf 20 00 00 00       	mov    edi,0x20
c0027ab8:	89 f9                	mov    ecx,edi
c0027aba:	29 d9                	sub    ecx,ebx
c0027abc:	89 c6                	mov    esi,eax
c0027abe:	d3 ee                	shr    esi,cl
c0027ac0:	09 d6                	or     esi,edx
c0027ac2:	88 d9                	mov    cl,bl
c0027ac4:	d3 e0                	shl    eax,cl
c0027ac6:	89 c2                	mov    edx,eax
c0027ac8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027acb:	25 ff 07 00 00       	and    eax,0x7ff
c0027ad0:	39 d8                	cmp    eax,ebx
c0027ad2:	7f 22                	jg     c0027af6 <__adddf3+0x583>
c0027ad4:	29 c3                	sub    ebx,eax
c0027ad6:	43                   	inc    ebx
c0027ad7:	88 d9                	mov    cl,bl
c0027ad9:	d3 ea                	shr    edx,cl
c0027adb:	29 df                	sub    edi,ebx
c0027add:	89 f9                	mov    ecx,edi
c0027adf:	89 f0                	mov    eax,esi
c0027ae1:	d3 e0                	shl    eax,cl
c0027ae3:	09 c2                	or     edx,eax
c0027ae5:	89 f0                	mov    eax,esi
c0027ae7:	88 d9                	mov    cl,bl
c0027ae9:	d3 e8                	shr    eax,cl
c0027aeb:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027aee:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027af4:	eb 6f                	jmp    c0027b65 <__adddf3+0x5f2>
c0027af6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027af9:	29 d8                	sub    eax,ebx
c0027afb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027afe:	89 f0                	mov    eax,esi
c0027b00:	eb 59                	jmp    c0027b5b <__adddf3+0x5e8>
c0027b02:	85 c0                	test   eax,eax
c0027b04:	74 6a                	je     c0027b70 <__adddf3+0x5fd>
c0027b06:	0f bd c8             	bsr    ecx,eax
c0027b09:	83 f1 1f             	xor    ecx,0x1f
c0027b0c:	d3 e0                	shl    eax,cl
c0027b0e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027b11:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027b17:	83 c1 20             	add    ecx,0x20
c0027b1a:	39 cb                	cmp    ebx,ecx
c0027b1c:	7f 35                	jg     c0027b53 <__adddf3+0x5e0>
c0027b1e:	29 d9                	sub    ecx,ebx
c0027b20:	8d 71 01             	lea    esi,[ecx+0x1]
c0027b23:	83 fe 1f             	cmp    esi,0x1f
c0027b26:	7e 09                	jle    c0027b31 <__adddf3+0x5be>
c0027b28:	83 e9 1f             	sub    ecx,0x1f
c0027b2b:	d3 e8                	shr    eax,cl
c0027b2d:	89 c3                	mov    ebx,eax
c0027b2f:	eb 11                	jmp    c0027b42 <__adddf3+0x5cf>
c0027b31:	b9 20 00 00 00       	mov    ecx,0x20
c0027b36:	29 f1                	sub    ecx,esi
c0027b38:	89 c3                	mov    ebx,eax
c0027b3a:	d3 e3                	shl    ebx,cl
c0027b3c:	89 f1                	mov    ecx,esi
c0027b3e:	d3 e8                	shr    eax,cl
c0027b40:	89 c2                	mov    edx,eax
c0027b42:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b45:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027b4a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b4d:	89 d0                	mov    eax,edx
c0027b4f:	89 da                	mov    edx,ebx
c0027b51:	eb 26                	jmp    c0027b79 <__adddf3+0x606>
c0027b53:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b56:	29 cf                	sub    edi,ecx
c0027b58:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027b5b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b60:	eb 17                	jmp    c0027b79 <__adddf3+0x606>
c0027b62:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b65:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027b68:	eb 0f                	jmp    c0027b79 <__adddf3+0x606>
c0027b6a:	31 d2                	xor    edx,edx
c0027b6c:	31 c0                	xor    eax,eax
c0027b6e:	eb 09                	jmp    c0027b79 <__adddf3+0x606>
c0027b70:	89 c2                	mov    edx,eax
c0027b72:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027b79:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027b7c:	c1 e1 14             	shl    ecx,0x14
c0027b7f:	89 c3                	mov    ebx,eax
c0027b81:	c1 eb 0b             	shr    ebx,0xb
c0027b84:	09 d9                	or     ecx,ebx
c0027b86:	89 d3                	mov    ebx,edx
c0027b88:	c1 eb 0b             	shr    ebx,0xb
c0027b8b:	c1 e0 15             	shl    eax,0x15
c0027b8e:	09 d8                	or     eax,ebx
c0027b90:	89 c7                	mov    edi,eax
c0027b92:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027b98:	0f 95 c0             	setne  al
c0027b9b:	89 c6                	mov    esi,eax
c0027b9d:	09 f3                	or     ebx,esi
c0027b9f:	83 e3 01             	and    ebx,0x1
c0027ba2:	c1 ea 0a             	shr    edx,0xa
c0027ba5:	21 da                	and    edx,ebx
c0027ba7:	89 f8                	mov    eax,edi
c0027ba9:	01 d0                	add    eax,edx
c0027bab:	83 d1 00             	adc    ecx,0x0
c0027bae:	89 c7                	mov    edi,eax
c0027bb0:	eb 06                	jmp    c0027bb8 <__adddf3+0x645>
c0027bb2:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027bb5:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027bb8:	89 f8                	mov    eax,edi
c0027bba:	89 ca                	mov    edx,ecx
c0027bbc:	83 c4 24             	add    esp,0x24
c0027bbf:	5b                   	pop    ebx
c0027bc0:	5e                   	pop    esi
c0027bc1:	5f                   	pop    edi
c0027bc2:	5d                   	pop    ebp
c0027bc3:	c3                   	ret    

c0027bc4 <__subdf3>:
c0027bc4:	55                   	push   ebp
c0027bc5:	89 e5                	mov    ebp,esp
c0027bc7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027bca:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027bcd:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027bd3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027bd6:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027bd9:	5d                   	pop    ebp
c0027bda:	e9 94 f9 ff ff       	jmp    c0027573 <__adddf3>

c0027bdf <__negdf2>:
c0027bdf:	55                   	push   ebp
c0027be0:	89 e5                	mov    ebp,esp
c0027be2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027be5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027be8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027bee:	5d                   	pop    ebp
c0027bef:	c3                   	ret    

c0027bf0 <__muldf3>:
c0027bf0:	55                   	push   ebp
c0027bf1:	89 e5                	mov    ebp,esp
c0027bf3:	57                   	push   edi
c0027bf4:	56                   	push   esi
c0027bf5:	53                   	push   ebx
c0027bf6:	83 ec 24             	sub    esp,0x24
c0027bf9:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027bfc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027bff:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c02:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027c05:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027c08:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027c0b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027c0e:	89 c8                	mov    eax,ecx
c0027c10:	c1 f8 14             	sar    eax,0x14
c0027c13:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027c16:	89 f8                	mov    eax,edi
c0027c18:	89 fb                	mov    ebx,edi
c0027c1a:	c1 e3 0b             	shl    ebx,0xb
c0027c1d:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027c20:	c1 e1 0b             	shl    ecx,0xb
c0027c23:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027c29:	c1 e8 15             	shr    eax,0x15
c0027c2c:	09 c1                	or     ecx,eax
c0027c2e:	89 d6                	mov    esi,edx
c0027c30:	89 d0                	mov    eax,edx
c0027c32:	c1 f8 14             	sar    eax,0x14
c0027c35:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027c38:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027c3b:	89 c3                	mov    ebx,eax
c0027c3d:	c1 e3 0b             	shl    ebx,0xb
c0027c40:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027c43:	c1 e6 0b             	shl    esi,0xb
c0027c46:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027c4c:	c1 e8 15             	shr    eax,0x15
c0027c4f:	09 c6                	or     esi,eax
c0027c51:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c54:	25 ff 07 00 00       	and    eax,0x7ff
c0027c59:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027c5c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c5f:	25 ff 07 00 00       	and    eax,0x7ff
c0027c64:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027c67:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027c6a:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027c6d:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027c74:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c77:	40                   	inc    eax
c0027c78:	a9 fe 07 00 00       	test   eax,0x7fe
c0027c7d:	0f 85 8d 00 00 00    	jne    c0027d10 <__muldf3+0x120>
c0027c83:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027c86:	09 c8                	or     eax,ecx
c0027c88:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027c8c:	74 44                	je     c0027cd2 <__muldf3+0xe2>
c0027c8e:	85 c0                	test   eax,eax
c0027c90:	0f 85 31 02 00 00    	jne    c0027ec7 <__muldf3+0x2d7>
c0027c96:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c99:	40                   	inc    eax
c0027c9a:	a9 fe 07 00 00       	test   eax,0x7fe
c0027c9f:	75 13                	jne    c0027cb4 <__muldf3+0xc4>
c0027ca1:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027ca4:	09 f1                	or     ecx,esi
c0027ca6:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027caa:	74 22                	je     c0027cce <__muldf3+0xde>
c0027cac:	85 c9                	test   ecx,ecx
c0027cae:	0f 85 0d 02 00 00    	jne    c0027ec1 <__muldf3+0x2d1>
c0027cb4:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027cb8:	0f 89 09 02 00 00    	jns    c0027ec7 <__muldf3+0x2d7>
c0027cbe:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027cc1:	05 00 00 00 80       	add    eax,0x80000000
c0027cc6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027cc9:	e9 f9 01 00 00       	jmp    c0027ec7 <__muldf3+0x2d7>
c0027cce:	85 c9                	test   ecx,ecx
c0027cd0:	eb 2e                	jmp    c0027d00 <__muldf3+0x110>
c0027cd2:	85 c0                	test   eax,eax
c0027cd4:	74 20                	je     c0027cf6 <__muldf3+0x106>
c0027cd6:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027cd9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027cdc:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027cdf:	c1 ef 1f             	shr    edi,0x1f
c0027ce2:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027ce5:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027ce8:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027ceb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027cee:	09 f9                	or     ecx,edi
c0027cf0:	78 1e                	js     c0027d10 <__muldf3+0x120>
c0027cf2:	89 c3                	mov    ebx,eax
c0027cf4:	eb e0                	jmp    c0027cd6 <__muldf3+0xe6>
c0027cf6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027cf9:	f7 d0                	not    eax
c0027cfb:	a9 ff 07 00 00       	test   eax,0x7ff
c0027d00:	75 b2                	jne    c0027cb4 <__muldf3+0xc4>
c0027d02:	31 ff                	xor    edi,edi
c0027d04:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027d0b:	e9 b7 01 00 00       	jmp    c0027ec7 <__muldf3+0x2d7>
c0027d10:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d13:	40                   	inc    eax
c0027d14:	a9 fe 07 00 00       	test   eax,0x7fe
c0027d19:	75 57                	jne    c0027d72 <__muldf3+0x182>
c0027d1b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027d1e:	09 f0                	or     eax,esi
c0027d20:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027d24:	74 23                	je     c0027d49 <__muldf3+0x159>
c0027d26:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027d2a:	0f 89 91 01 00 00    	jns    c0027ec1 <__muldf3+0x2d1>
c0027d30:	85 c0                	test   eax,eax
c0027d32:	0f 85 89 01 00 00    	jne    c0027ec1 <__muldf3+0x2d1>
c0027d38:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027d3b:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027d41:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d44:	e9 7e 01 00 00       	jmp    c0027ec7 <__muldf3+0x2d7>
c0027d49:	85 c0                	test   eax,eax
c0027d4b:	75 0c                	jne    c0027d59 <__muldf3+0x169>
c0027d4d:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027d51:	0f 89 6a 01 00 00    	jns    c0027ec1 <__muldf3+0x2d1>
c0027d57:	eb df                	jmp    c0027d38 <__muldf3+0x148>
c0027d59:	01 f6                	add    esi,esi
c0027d5b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027d5e:	c1 ea 1f             	shr    edx,0x1f
c0027d61:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027d64:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027d67:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027d6a:	09 d6                	or     esi,edx
c0027d6c:	78 04                	js     c0027d72 <__muldf3+0x182>
c0027d6e:	89 c3                	mov    ebx,eax
c0027d70:	eb e7                	jmp    c0027d59 <__muldf3+0x169>
c0027d72:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027d78:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027d7e:	89 c8                	mov    eax,ecx
c0027d80:	f7 e6                	mul    esi
c0027d82:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027d85:	89 c7                	mov    edi,eax
c0027d87:	89 c8                	mov    eax,ecx
c0027d89:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027d8c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027d8f:	89 c1                	mov    ecx,eax
c0027d91:	89 f0                	mov    eax,esi
c0027d93:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027d96:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027d99:	89 c6                	mov    esi,eax
c0027d9b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027d9e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027da1:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027da4:	31 c0                	xor    eax,eax
c0027da6:	01 f1                	add    ecx,esi
c0027da8:	0f 92 c0             	setb   al
c0027dab:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027dae:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027db1:	83 d6 00             	adc    esi,0x0
c0027db4:	01 c7                	add    edi,eax
c0027db6:	83 d6 00             	adc    esi,0x0
c0027db9:	01 ca                	add    edx,ecx
c0027dbb:	0f 92 c1             	setb   cl
c0027dbe:	0f b6 c9             	movzx  ecx,cl
c0027dc1:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027dc4:	83 d6 00             	adc    esi,0x0
c0027dc7:	01 cf                	add    edi,ecx
c0027dc9:	83 d6 00             	adc    esi,0x0
c0027dcc:	31 c9                	xor    ecx,ecx
c0027dce:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027dd1:	0f 95 c1             	setne  cl
c0027dd4:	09 cf                	or     edi,ecx
c0027dd6:	85 f6                	test   esi,esi
c0027dd8:	78 0c                	js     c0027de6 <__muldf3+0x1f6>
c0027dda:	01 f6                	add    esi,esi
c0027ddc:	89 f8                	mov    eax,edi
c0027dde:	c1 e8 1f             	shr    eax,0x1f
c0027de1:	09 c6                	or     esi,eax
c0027de3:	01 ff                	add    edi,edi
c0027de5:	4b                   	dec    ebx
c0027de6:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027dec:	0f 8f 85 00 00 00    	jg     c0027e77 <__muldf3+0x287>
c0027df2:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027df8:	85 db                	test   ebx,ebx
c0027dfa:	0f 8f 84 00 00 00    	jg     c0027e84 <__muldf3+0x294>
c0027e00:	83 fb cc             	cmp    ebx,0xffffffcc
c0027e03:	7c 79                	jl     c0027e7e <__muldf3+0x28e>
c0027e05:	ba 01 00 00 00       	mov    edx,0x1
c0027e0a:	29 da                	sub    edx,ebx
c0027e0c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027e12:	83 fa 1f             	cmp    edx,0x1f
c0027e15:	7e 30                	jle    c0027e47 <__muldf3+0x257>
c0027e17:	83 fa 20             	cmp    edx,0x20
c0027e1a:	75 0b                	jne    c0027e27 <__muldf3+0x237>
c0027e1c:	31 c0                	xor    eax,eax
c0027e1e:	85 ff                	test   edi,edi
c0027e20:	0f 95 c0             	setne  al
c0027e23:	89 c7                	mov    edi,eax
c0027e25:	eb 1a                	jmp    c0027e41 <__muldf3+0x251>
c0027e27:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027e2a:	89 f0                	mov    eax,esi
c0027e2c:	d3 e0                	shl    eax,cl
c0027e2e:	09 f8                	or     eax,edi
c0027e30:	0f 95 c0             	setne  al
c0027e33:	0f b6 c0             	movzx  eax,al
c0027e36:	89 c7                	mov    edi,eax
c0027e38:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027e3d:	29 d9                	sub    ecx,ebx
c0027e3f:	d3 ee                	shr    esi,cl
c0027e41:	09 f7                	or     edi,esi
c0027e43:	31 db                	xor    ebx,ebx
c0027e45:	eb 3b                	jmp    c0027e82 <__muldf3+0x292>
c0027e47:	83 c3 1f             	add    ebx,0x1f
c0027e4a:	89 f0                	mov    eax,esi
c0027e4c:	88 d9                	mov    cl,bl
c0027e4e:	d3 e0                	shl    eax,cl
c0027e50:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027e53:	89 f8                	mov    eax,edi
c0027e55:	88 d1                	mov    cl,dl
c0027e57:	d3 e8                	shr    eax,cl
c0027e59:	89 c1                	mov    ecx,eax
c0027e5b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027e5e:	09 c8                	or     eax,ecx
c0027e60:	88 d9                	mov    cl,bl
c0027e62:	d3 e7                	shl    edi,cl
c0027e64:	31 db                	xor    ebx,ebx
c0027e66:	85 ff                	test   edi,edi
c0027e68:	0f 95 c3             	setne  bl
c0027e6b:	89 df                	mov    edi,ebx
c0027e6d:	09 c7                	or     edi,eax
c0027e6f:	88 d1                	mov    cl,dl
c0027e71:	d3 ee                	shr    esi,cl
c0027e73:	31 db                	xor    ebx,ebx
c0027e75:	eb 0d                	jmp    c0027e84 <__muldf3+0x294>
c0027e77:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027e7c:	eb 02                	jmp    c0027e80 <__muldf3+0x290>
c0027e7e:	31 db                	xor    ebx,ebx
c0027e80:	31 ff                	xor    edi,edi
c0027e82:	31 f6                	xor    esi,esi
c0027e84:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027e87:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027e8a:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027e8f:	09 c3                	or     ebx,eax
c0027e91:	c1 e3 14             	shl    ebx,0x14
c0027e94:	89 f0                	mov    eax,esi
c0027e96:	c1 e8 0b             	shr    eax,0xb
c0027e99:	09 c3                	or     ebx,eax
c0027e9b:	89 f8                	mov    eax,edi
c0027e9d:	c1 e8 0b             	shr    eax,0xb
c0027ea0:	c1 e6 15             	shl    esi,0x15
c0027ea3:	09 c6                	or     esi,eax
c0027ea5:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027eab:	0f 95 c1             	setne  cl
c0027eae:	09 c8                	or     eax,ecx
c0027eb0:	83 e0 01             	and    eax,0x1
c0027eb3:	c1 ef 0a             	shr    edi,0xa
c0027eb6:	21 c7                	and    edi,eax
c0027eb8:	01 f7                	add    edi,esi
c0027eba:	83 d3 00             	adc    ebx,0x0
c0027ebd:	89 da                	mov    edx,ebx
c0027ebf:	eb 03                	jmp    c0027ec4 <__muldf3+0x2d4>
c0027ec1:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027ec4:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027ec7:	89 f8                	mov    eax,edi
c0027ec9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027ecc:	83 c4 24             	add    esp,0x24
c0027ecf:	5b                   	pop    ebx
c0027ed0:	5e                   	pop    esi
c0027ed1:	5f                   	pop    edi
c0027ed2:	5d                   	pop    ebp
c0027ed3:	c3                   	ret    

c0027ed4 <__divdf3>:
c0027ed4:	55                   	push   ebp
c0027ed5:	89 e5                	mov    ebp,esp
c0027ed7:	57                   	push   edi
c0027ed8:	56                   	push   esi
c0027ed9:	53                   	push   ebx
c0027eda:	83 ec 2c             	sub    esp,0x2c
c0027edd:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027ee0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027ee3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027ee6:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027ee9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027eec:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027eef:	89 ce                	mov    esi,ecx
c0027ef1:	89 c8                	mov    eax,ecx
c0027ef3:	c1 f8 14             	sar    eax,0x14
c0027ef6:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027ef9:	89 f8                	mov    eax,edi
c0027efb:	89 fb                	mov    ebx,edi
c0027efd:	c1 e3 0b             	shl    ebx,0xb
c0027f00:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027f03:	c1 e6 0b             	shl    esi,0xb
c0027f06:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027f0c:	c1 e8 15             	shr    eax,0x15
c0027f0f:	09 c6                	or     esi,eax
c0027f11:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027f14:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027f17:	89 c2                	mov    edx,eax
c0027f19:	c1 fa 14             	sar    edx,0x14
c0027f1c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027f1f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027f22:	89 de                	mov    esi,ebx
c0027f24:	c1 e6 0b             	shl    esi,0xb
c0027f27:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027f2a:	c1 e0 0b             	shl    eax,0xb
c0027f2d:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027f32:	c1 eb 15             	shr    ebx,0x15
c0027f35:	09 d8                	or     eax,ebx
c0027f37:	89 c2                	mov    edx,eax
c0027f39:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027f3c:	25 ff 07 00 00       	and    eax,0x7ff
c0027f41:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027f44:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027f47:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027f4d:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027f50:	29 d8                	sub    eax,ebx
c0027f52:	05 ff 03 00 00       	add    eax,0x3ff
c0027f57:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027f5a:	46                   	inc    esi
c0027f5b:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027f61:	0f 85 a5 00 00 00    	jne    c002800c <__divdf3+0x138>
c0027f67:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027f6a:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027f6d:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027f71:	74 2a                	je     c0027f9d <__divdf3+0xc9>
c0027f73:	85 f6                	test   esi,esi
c0027f75:	0f 85 cc 02 00 00    	jne    c0028247 <__divdf3+0x373>
c0027f7b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027f7e:	40                   	inc    eax
c0027f7f:	a9 fe 07 00 00       	test   eax,0x7fe
c0027f84:	75 26                	jne    c0027fac <__divdf3+0xd8>
c0027f86:	85 db                	test   ebx,ebx
c0027f88:	74 22                	je     c0027fac <__divdf3+0xd8>
c0027f8a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027f8d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027f90:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027f93:	09 d0                	or     eax,edx
c0027f95:	0f 85 ac 02 00 00    	jne    c0028247 <__divdf3+0x373>
c0027f9b:	eb 63                	jmp    c0028000 <__divdf3+0x12c>
c0027f9d:	85 f6                	test   esi,esi
c0027f9f:	75 22                	jne    c0027fc3 <__divdf3+0xef>
c0027fa1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027fa4:	40                   	inc    eax
c0027fa5:	a9 fe 07 00 00       	test   eax,0x7fe
c0027faa:	74 36                	je     c0027fe2 <__divdf3+0x10e>
c0027fac:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027fb0:	0f 89 91 02 00 00    	jns    c0028247 <__divdf3+0x373>
c0027fb6:	89 f8                	mov    eax,edi
c0027fb8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027fbe:	e9 80 02 00 00       	jmp    c0028243 <__divdf3+0x36f>
c0027fc3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027fc6:	01 f6                	add    esi,esi
c0027fc8:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027fcb:	c1 ef 1f             	shr    edi,0x1f
c0027fce:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027fd1:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027fd4:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027fd7:	09 f7                	or     edi,esi
c0027fd9:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027fdc:	78 2e                	js     c002800c <__divdf3+0x138>
c0027fde:	89 c8                	mov    eax,ecx
c0027fe0:	eb e1                	jmp    c0027fc3 <__divdf3+0xef>
c0027fe2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027fe5:	09 d0                	or     eax,edx
c0027fe7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027feb:	74 0f                	je     c0027ffc <__divdf3+0x128>
c0027fed:	85 c0                	test   eax,eax
c0027fef:	74 bb                	je     c0027fac <__divdf3+0xd8>
c0027ff1:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027ff4:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027ff7:	e9 4b 02 00 00       	jmp    c0028247 <__divdf3+0x373>
c0027ffc:	85 c0                	test   eax,eax
c0027ffe:	75 ac                	jne    c0027fac <__divdf3+0xd8>
c0028000:	31 ff                	xor    edi,edi
c0028002:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0028007:	e9 3b 02 00 00       	jmp    c0028247 <__divdf3+0x373>
c002800c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002800f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0028012:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0028018:	75 6b                	jne    c0028085 <__divdf3+0x1b1>
c002801a:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002801d:	09 d6                	or     esi,edx
c002801f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0028023:	74 28                	je     c002804d <__divdf3+0x179>
c0028025:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028028:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c002802b:	85 f6                	test   esi,esi
c002802d:	0f 85 14 02 00 00    	jne    c0028247 <__divdf3+0x373>
c0028033:	31 ff                	xor    edi,edi
c0028035:	31 c9                	xor    ecx,ecx
c0028037:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002803a:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002803d:	0f 89 04 02 00 00    	jns    c0028247 <__divdf3+0x373>
c0028043:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028048:	e9 fa 01 00 00       	jmp    c0028247 <__divdf3+0x373>
c002804d:	85 f6                	test   esi,esi
c002804f:	75 1b                	jne    c002806c <__divdf3+0x198>
c0028051:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028054:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028057:	25 00 00 00 80       	and    eax,0x80000000
c002805c:	31 c9                	xor    ecx,ecx
c002805e:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0028063:	89 cf                	mov    edi,ecx
c0028065:	89 c1                	mov    ecx,eax
c0028067:	e9 db 01 00 00       	jmp    c0028247 <__divdf3+0x373>
c002806c:	01 d2                	add    edx,edx
c002806e:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028071:	c1 eb 1f             	shr    ebx,0x1f
c0028074:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028077:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c002807a:	8d 48 01             	lea    ecx,[eax+0x1]
c002807d:	09 da                	or     edx,ebx
c002807f:	78 04                	js     c0028085 <__divdf3+0x1b1>
c0028081:	89 c8                	mov    eax,ecx
c0028083:	eb e7                	jmp    c002806c <__divdf3+0x198>
c0028085:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028088:	81 ce 00 00 00 80    	or     esi,0x80000000
c002808e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028094:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0028097:	39 d6                	cmp    esi,edx
c0028099:	77 0d                	ja     c00280a8 <__divdf3+0x1d4>
c002809b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002809e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c00280a1:	72 1b                	jb     c00280be <__divdf3+0x1ea>
c00280a3:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c00280a6:	75 16                	jne    c00280be <__divdf3+0x1ea>
c00280a8:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00280ab:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00280ae:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c00280b1:	83 de 00             	sbb    esi,0x0
c00280b4:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c00280b7:	ba 01 00 00 00       	mov    edx,0x1
c00280bc:	eb 02                	jmp    c00280c0 <__divdf3+0x1ec>
c00280be:	31 d2                	xor    edx,edx
c00280c0:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c00280c7:	31 ff                	xor    edi,edi
c00280c9:	01 ff                	add    edi,edi
c00280cb:	89 d1                	mov    ecx,edx
c00280cd:	c1 e9 1f             	shr    ecx,0x1f
c00280d0:	09 cf                	or     edi,ecx
c00280d2:	8d 1c 12             	lea    ebx,[edx+edx*1]
c00280d5:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c00280d8:	89 da                	mov    edx,ebx
c00280da:	89 f3                	mov    ebx,esi
c00280dc:	8d 34 36             	lea    esi,[esi+esi*1]
c00280df:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00280e2:	c1 e9 1f             	shr    ecx,0x1f
c00280e5:	09 ce                	or     esi,ecx
c00280e7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00280ea:	01 c9                	add    ecx,ecx
c00280ec:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c00280ef:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00280f2:	85 db                	test   ebx,ebx
c00280f4:	78 29                	js     c002811f <__divdf3+0x24b>
c00280f6:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c00280f9:	72 07                	jb     c0028102 <__divdf3+0x22e>
c00280fb:	75 3c                	jne    c0028139 <__divdf3+0x265>
c00280fd:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028100:	77 37                	ja     c0028139 <__divdf3+0x265>
c0028102:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028105:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028108:	31 d2                	xor    edx,edx
c002810a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c002810d:	0f 97 c2             	seta   dl
c0028110:	29 d6                	sub    esi,edx
c0028112:	89 d9                	mov    ecx,ebx
c0028114:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0028117:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c002811a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002811d:	eb 17                	jmp    c0028136 <__divdf3+0x262>
c002811f:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028122:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028125:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028128:	0f 97 c1             	seta   cl
c002812b:	0f b6 c9             	movzx  ecx,cl
c002812e:	29 ce                	sub    esi,ecx
c0028130:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0028133:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0028136:	83 ca 01             	or     edx,0x1
c0028139:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c002813c:	75 8b                	jne    c00280c9 <__divdf3+0x1f5>
c002813e:	c1 e7 09             	shl    edi,0x9
c0028141:	89 d1                	mov    ecx,edx
c0028143:	c1 e9 17             	shr    ecx,0x17
c0028146:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028149:	09 f3                	or     ebx,esi
c002814b:	0f 95 c3             	setne  bl
c002814e:	0f b6 db             	movzx  ebx,bl
c0028151:	c1 e2 09             	shl    edx,0x9
c0028154:	09 d3                	or     ebx,edx
c0028156:	89 ca                	mov    edx,ecx
c0028158:	09 fa                	or     edx,edi
c002815a:	78 0c                	js     c0028168 <__divdf3+0x294>
c002815c:	01 d2                	add    edx,edx
c002815e:	89 d9                	mov    ecx,ebx
c0028160:	c1 e9 1f             	shr    ecx,0x1f
c0028163:	09 ca                	or     edx,ecx
c0028165:	01 db                	add    ebx,ebx
c0028167:	48                   	dec    eax
c0028168:	3d fe 07 00 00       	cmp    eax,0x7fe
c002816d:	0f 8f 83 00 00 00    	jg     c00281f6 <__divdf3+0x322>
c0028173:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028179:	85 c0                	test   eax,eax
c002817b:	0f 8f 82 00 00 00    	jg     c0028203 <__divdf3+0x32f>
c0028181:	83 f8 cc             	cmp    eax,0xffffffcc
c0028184:	7c 77                	jl     c00281fd <__divdf3+0x329>
c0028186:	be 01 00 00 00       	mov    esi,0x1
c002818b:	29 c6                	sub    esi,eax
c002818d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028193:	83 fe 1f             	cmp    esi,0x1f
c0028196:	7e 2f                	jle    c00281c7 <__divdf3+0x2f3>
c0028198:	83 fe 20             	cmp    esi,0x20
c002819b:	75 0a                	jne    c00281a7 <__divdf3+0x2d3>
c002819d:	85 db                	test   ebx,ebx
c002819f:	0f 95 c3             	setne  bl
c00281a2:	0f b6 db             	movzx  ebx,bl
c00281a5:	eb 1a                	jmp    c00281c1 <__divdf3+0x2ed>
c00281a7:	8d 48 3f             	lea    ecx,[eax+0x3f]
c00281aa:	89 d7                	mov    edi,edx
c00281ac:	d3 e7                	shl    edi,cl
c00281ae:	89 f9                	mov    ecx,edi
c00281b0:	09 d9                	or     ecx,ebx
c00281b2:	0f 95 c3             	setne  bl
c00281b5:	0f b6 db             	movzx  ebx,bl
c00281b8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00281bd:	29 c1                	sub    ecx,eax
c00281bf:	d3 ea                	shr    edx,cl
c00281c1:	09 d3                	or     ebx,edx
c00281c3:	31 c0                	xor    eax,eax
c00281c5:	eb 3a                	jmp    c0028201 <__divdf3+0x32d>
c00281c7:	83 c0 1f             	add    eax,0x1f
c00281ca:	89 d7                	mov    edi,edx
c00281cc:	88 c1                	mov    cl,al
c00281ce:	d3 e7                	shl    edi,cl
c00281d0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00281d3:	89 df                	mov    edi,ebx
c00281d5:	89 f1                	mov    ecx,esi
c00281d7:	d3 ef                	shr    edi,cl
c00281d9:	89 f9                	mov    ecx,edi
c00281db:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00281de:	09 cf                	or     edi,ecx
c00281e0:	88 c1                	mov    cl,al
c00281e2:	d3 e3                	shl    ebx,cl
c00281e4:	85 db                	test   ebx,ebx
c00281e6:	0f 95 c3             	setne  bl
c00281e9:	0f b6 db             	movzx  ebx,bl
c00281ec:	09 fb                	or     ebx,edi
c00281ee:	89 f1                	mov    ecx,esi
c00281f0:	d3 ea                	shr    edx,cl
c00281f2:	31 c0                	xor    eax,eax
c00281f4:	eb 0d                	jmp    c0028203 <__divdf3+0x32f>
c00281f6:	b8 ff 07 00 00       	mov    eax,0x7ff
c00281fb:	eb 02                	jmp    c00281ff <__divdf3+0x32b>
c00281fd:	31 c0                	xor    eax,eax
c00281ff:	31 db                	xor    ebx,ebx
c0028201:	31 d2                	xor    edx,edx
c0028203:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0028206:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028209:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c002820f:	09 c8                	or     eax,ecx
c0028211:	c1 e0 14             	shl    eax,0x14
c0028214:	89 d1                	mov    ecx,edx
c0028216:	c1 e9 0b             	shr    ecx,0xb
c0028219:	09 c8                	or     eax,ecx
c002821b:	89 c6                	mov    esi,eax
c002821d:	89 d9                	mov    ecx,ebx
c002821f:	c1 e9 0b             	shr    ecx,0xb
c0028222:	c1 e2 15             	shl    edx,0x15
c0028225:	09 ca                	or     edx,ecx
c0028227:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c002822d:	0f 95 c0             	setne  al
c0028230:	09 c1                	or     ecx,eax
c0028232:	83 e1 01             	and    ecx,0x1
c0028235:	c1 eb 0a             	shr    ebx,0xa
c0028238:	21 cb                	and    ebx,ecx
c002823a:	01 d3                	add    ebx,edx
c002823c:	89 d8                	mov    eax,ebx
c002823e:	83 d6 00             	adc    esi,0x0
c0028241:	89 f2                	mov    edx,esi
c0028243:	89 c7                	mov    edi,eax
c0028245:	89 d1                	mov    ecx,edx
c0028247:	89 f8                	mov    eax,edi
c0028249:	89 ca                	mov    edx,ecx
c002824b:	83 c4 2c             	add    esp,0x2c
c002824e:	5b                   	pop    ebx
c002824f:	5e                   	pop    esi
c0028250:	5f                   	pop    edi
c0028251:	5d                   	pop    ebp
c0028252:	c3                   	ret    

c0028253 <__floatsidf>:
c0028253:	55                   	push   ebp
c0028254:	89 e5                	mov    ebp,esp
c0028256:	56                   	push   esi
c0028257:	53                   	push   ebx
c0028258:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002825b:	85 db                	test   ebx,ebx
c002825d:	7e 15                	jle    c0028274 <__floatsidf+0x21>
c002825f:	0f bd cb             	bsr    ecx,ebx
c0028262:	83 f1 1f             	xor    ecx,0x1f
c0028265:	d3 e3                	shl    ebx,cl
c0028267:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c002826d:	b8 1e 04 00 00       	mov    eax,0x41e
c0028272:	eb 21                	jmp    c0028295 <__floatsidf+0x42>
c0028274:	b8 00 00 00 00       	mov    eax,0x0
c0028279:	ba 00 00 00 00       	mov    edx,0x0
c002827e:	74 2a                	je     c00282aa <__floatsidf+0x57>
c0028280:	f7 db                	neg    ebx
c0028282:	0f bd cb             	bsr    ecx,ebx
c0028285:	83 f1 1f             	xor    ecx,0x1f
c0028288:	d3 e3                	shl    ebx,cl
c002828a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028290:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028295:	29 c8                	sub    eax,ecx
c0028297:	c1 e0 14             	shl    eax,0x14
c002829a:	89 c1                	mov    ecx,eax
c002829c:	89 de                	mov    esi,ebx
c002829e:	c1 ee 0b             	shr    esi,0xb
c00282a1:	09 f1                	or     ecx,esi
c00282a3:	89 ca                	mov    edx,ecx
c00282a5:	c1 e3 15             	shl    ebx,0x15
c00282a8:	89 d8                	mov    eax,ebx
c00282aa:	5b                   	pop    ebx
c00282ab:	5e                   	pop    esi
c00282ac:	5d                   	pop    ebp
c00282ad:	c3                   	ret    

c00282ae <__floatunsidf>:
c00282ae:	55                   	push   ebp
c00282af:	89 e5                	mov    ebp,esp
c00282b1:	56                   	push   esi
c00282b2:	53                   	push   ebx
c00282b3:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00282b6:	85 db                	test   ebx,ebx
c00282b8:	74 2a                	je     c00282e4 <__floatunsidf+0x36>
c00282ba:	0f bd cb             	bsr    ecx,ebx
c00282bd:	83 f1 1f             	xor    ecx,0x1f
c00282c0:	d3 e3                	shl    ebx,cl
c00282c2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00282c8:	b8 1e 04 00 00       	mov    eax,0x41e
c00282cd:	29 c8                	sub    eax,ecx
c00282cf:	c1 e0 14             	shl    eax,0x14
c00282d2:	89 c1                	mov    ecx,eax
c00282d4:	89 de                	mov    esi,ebx
c00282d6:	c1 ee 0b             	shr    esi,0xb
c00282d9:	09 f1                	or     ecx,esi
c00282db:	89 ca                	mov    edx,ecx
c00282dd:	c1 e3 15             	shl    ebx,0x15
c00282e0:	89 d8                	mov    eax,ebx
c00282e2:	eb 04                	jmp    c00282e8 <__floatunsidf+0x3a>
c00282e4:	31 c0                	xor    eax,eax
c00282e6:	31 d2                	xor    edx,edx
c00282e8:	5b                   	pop    ebx
c00282e9:	5e                   	pop    esi
c00282ea:	5d                   	pop    ebp
c00282eb:	c3                   	ret    

c00282ec <__fixdfsi>:
c00282ec:	55                   	push   ebp
c00282ed:	89 e5                	mov    ebp,esp
c00282ef:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00282f2:	89 d1                	mov    ecx,edx
c00282f4:	c1 e1 0b             	shl    ecx,0xb
c00282f7:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00282fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028300:	c1 e8 15             	shr    eax,0x15
c0028303:	09 c1                	or     ecx,eax
c0028305:	c1 fa 14             	sar    edx,0x14
c0028308:	78 1f                	js     c0028329 <__fixdfsi+0x3d>
c002830a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028310:	31 c0                	xor    eax,eax
c0028312:	83 fa 1e             	cmp    edx,0x1e
c0028315:	77 40                	ja     c0028357 <__fixdfsi+0x6b>
c0028317:	89 c8                	mov    eax,ecx
c0028319:	0d 00 00 00 80       	or     eax,0x80000000
c002831e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028323:	29 d1                	sub    ecx,edx
c0028325:	d3 e8                	shr    eax,cl
c0028327:	eb 2e                	jmp    c0028357 <__fixdfsi+0x6b>
c0028329:	31 c0                	xor    eax,eax
c002832b:	81 c2 01 04 00 00    	add    edx,0x401
c0028331:	78 24                	js     c0028357 <__fixdfsi+0x6b>
c0028333:	83 fa 1e             	cmp    edx,0x1e
c0028336:	7e 09                	jle    c0028341 <__fixdfsi+0x55>
c0028338:	83 fa 1f             	cmp    edx,0x1f
c002833b:	75 18                	jne    c0028355 <__fixdfsi+0x69>
c002833d:	85 c9                	test   ecx,ecx
c002833f:	75 14                	jne    c0028355 <__fixdfsi+0x69>
c0028341:	89 c8                	mov    eax,ecx
c0028343:	0d 00 00 00 80       	or     eax,0x80000000
c0028348:	b9 1f 00 00 00       	mov    ecx,0x1f
c002834d:	29 d1                	sub    ecx,edx
c002834f:	d3 e8                	shr    eax,cl
c0028351:	f7 d8                	neg    eax
c0028353:	eb 02                	jmp    c0028357 <__fixdfsi+0x6b>
c0028355:	31 c0                	xor    eax,eax
c0028357:	5d                   	pop    ebp
c0028358:	c3                   	ret    

c0028359 <__fixunsdfsi>:
c0028359:	55                   	push   ebp
c002835a:	89 e5                	mov    ebp,esp
c002835c:	53                   	push   ebx
c002835d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028360:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028363:	89 d3                	mov    ebx,edx
c0028365:	c1 fb 14             	sar    ebx,0x14
c0028368:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c002836e:	31 c0                	xor    eax,eax
c0028370:	83 fb 1f             	cmp    ebx,0x1f
c0028373:	77 1d                	ja     c0028392 <__fixunsdfsi+0x39>
c0028375:	89 d0                	mov    eax,edx
c0028377:	c1 e0 0b             	shl    eax,0xb
c002837a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002837f:	c1 e9 15             	shr    ecx,0x15
c0028382:	09 c8                	or     eax,ecx
c0028384:	0d 00 00 00 80       	or     eax,0x80000000
c0028389:	b9 1f 00 00 00       	mov    ecx,0x1f
c002838e:	29 d9                	sub    ecx,ebx
c0028390:	d3 e8                	shr    eax,cl
c0028392:	5b                   	pop    ebx
c0028393:	5d                   	pop    ebp
c0028394:	c3                   	ret    

c0028395 <__cmpdf2>:
c0028395:	55                   	push   ebp
c0028396:	89 e5                	mov    ebp,esp
c0028398:	57                   	push   edi
c0028399:	56                   	push   esi
c002839a:	53                   	push   ebx
c002839b:	83 ec 0c             	sub    esp,0xc
c002839e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00283a1:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00283a4:	89 ca                	mov    edx,ecx
c00283a6:	c1 ea 14             	shr    edx,0x14
c00283a9:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00283af:	89 cb                	mov    ebx,ecx
c00283b1:	c1 fb 1f             	sar    ebx,0x1f
c00283b4:	31 da                	xor    edx,ebx
c00283b6:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00283b9:	89 df                	mov    edi,ebx
c00283bb:	c1 e7 0b             	shl    edi,0xb
c00283be:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00283c1:	c1 e1 0b             	shl    ecx,0xb
c00283c4:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00283ca:	c1 eb 15             	shr    ebx,0x15
c00283cd:	09 d9                	or     ecx,ebx
c00283cf:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c00283d2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00283d5:	89 ce                	mov    esi,ecx
c00283d7:	c1 ee 14             	shr    esi,0x14
c00283da:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00283e0:	89 cb                	mov    ebx,ecx
c00283e2:	c1 fb 1f             	sar    ebx,0x1f
c00283e5:	31 de                	xor    esi,ebx
c00283e7:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00283ea:	89 df                	mov    edi,ebx
c00283ec:	c1 e7 0b             	shl    edi,0xb
c00283ef:	c1 e1 0b             	shl    ecx,0xb
c00283f2:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00283f8:	c1 eb 15             	shr    ebx,0x15
c00283fb:	09 d9                	or     ecx,ebx
c00283fd:	89 d3                	mov    ebx,edx
c00283ff:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028405:	43                   	inc    ebx
c0028406:	83 fb 01             	cmp    ebx,0x1
c0028409:	77 08                	ja     c0028413 <__cmpdf2+0x7e>
c002840b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c002840e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028411:	75 68                	jne    c002847b <__cmpdf2+0xe6>
c0028413:	89 f3                	mov    ebx,esi
c0028415:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002841b:	43                   	inc    ebx
c002841c:	83 fb 01             	cmp    ebx,0x1
c002841f:	77 06                	ja     c0028427 <__cmpdf2+0x92>
c0028421:	89 fb                	mov    ebx,edi
c0028423:	09 cb                	or     ebx,ecx
c0028425:	75 54                	jne    c002847b <__cmpdf2+0xe6>
c0028427:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002842a:	09 f8                	or     eax,edi
c002842c:	09 c8                	or     eax,ecx
c002842e:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028431:	75 12                	jne    c0028445 <__cmpdf2+0xb0>
c0028433:	8d 42 01             	lea    eax,[edx+0x1]
c0028436:	83 f8 01             	cmp    eax,0x1
c0028439:	77 0a                	ja     c0028445 <__cmpdf2+0xb0>
c002843b:	8d 5e 01             	lea    ebx,[esi+0x1]
c002843e:	31 c0                	xor    eax,eax
c0028440:	83 fb 01             	cmp    ebx,0x1
c0028443:	76 36                	jbe    c002847b <__cmpdf2+0xe6>
c0028445:	b8 01 00 00 00       	mov    eax,0x1
c002844a:	39 f2                	cmp    edx,esi
c002844c:	7f 2d                	jg     c002847b <__cmpdf2+0xe6>
c002844e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028453:	7c 26                	jl     c002847b <__cmpdf2+0xe6>
c0028455:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028458:	77 07                	ja     c0028461 <__cmpdf2+0xcc>
c002845a:	72 16                	jb     c0028472 <__cmpdf2+0xdd>
c002845c:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c002845f:	76 0a                	jbe    c002846b <__cmpdf2+0xd6>
c0028461:	89 d0                	mov    eax,edx
c0028463:	c1 f8 1f             	sar    eax,0x1f
c0028466:	83 c8 01             	or     eax,0x1
c0028469:	eb 10                	jmp    c002847b <__cmpdf2+0xe6>
c002846b:	b8 00 00 00 00       	mov    eax,0x0
c0028470:	73 09                	jae    c002847b <__cmpdf2+0xe6>
c0028472:	89 d0                	mov    eax,edx
c0028474:	c1 f8 1f             	sar    eax,0x1f
c0028477:	83 e0 02             	and    eax,0x2
c002847a:	48                   	dec    eax
c002847b:	83 c4 0c             	add    esp,0xc
c002847e:	5b                   	pop    ebx
c002847f:	5e                   	pop    esi
c0028480:	5f                   	pop    edi
c0028481:	5d                   	pop    ebp
c0028482:	c3                   	ret    

c0028483 <__eqdf2>:
c0028483:	55                   	push   ebp
c0028484:	89 e5                	mov    ebp,esp
c0028486:	50                   	push   eax
c0028487:	6a 01                	push   0x1
c0028489:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002848c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002848f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028492:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028495:	e8 fb fe ff ff       	call   c0028395 <__cmpdf2>
c002849a:	83 c4 18             	add    esp,0x18
c002849d:	c9                   	leave  
c002849e:	c3                   	ret    

c002849f <__nedf2>:
c002849f:	eb e2                	jmp    c0028483 <__eqdf2>

c00284a1 <__gtdf2>:
c00284a1:	55                   	push   ebp
c00284a2:	89 e5                	mov    ebp,esp
c00284a4:	50                   	push   eax
c00284a5:	6a ff                	push   0xffffffff
c00284a7:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00284aa:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00284ad:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00284b0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00284b3:	e8 dd fe ff ff       	call   c0028395 <__cmpdf2>
c00284b8:	83 c4 18             	add    esp,0x18
c00284bb:	c9                   	leave  
c00284bc:	c3                   	ret    

c00284bd <__gedf2>:
c00284bd:	eb e2                	jmp    c00284a1 <__gtdf2>

c00284bf <__ltdf2>:
c00284bf:	eb c2                	jmp    c0028483 <__eqdf2>

c00284c1 <__ledf2>:
c00284c1:	eb c0                	jmp    c0028483 <__eqdf2>

c00284c3 <__truncdfsf2>:
c00284c3:	55                   	push   ebp
c00284c4:	89 e5                	mov    ebp,esp
c00284c6:	57                   	push   edi
c00284c7:	56                   	push   esi
c00284c8:	53                   	push   ebx
c00284c9:	83 ec 0c             	sub    esp,0xc
c00284cc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00284cf:	89 d1                	mov    ecx,edx
c00284d1:	c1 f9 14             	sar    ecx,0x14
c00284d4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00284d7:	89 df                	mov    edi,ebx
c00284d9:	c1 e7 0b             	shl    edi,0xb
c00284dc:	89 d0                	mov    eax,edx
c00284de:	c1 e0 0b             	shl    eax,0xb
c00284e1:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00284e6:	c1 eb 15             	shr    ebx,0x15
c00284e9:	09 d8                	or     eax,ebx
c00284eb:	89 cb                	mov    ebx,ecx
c00284ed:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00284f3:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c00284f9:	81 fe fd 00 00 00    	cmp    esi,0xfd
c00284ff:	0f 86 9e 00 00 00    	jbe    c00285a3 <__truncdfsf2+0xe0>
c0028505:	85 db                	test   ebx,ebx
c0028507:	75 0a                	jne    c0028513 <__truncdfsf2+0x50>
c0028509:	c1 fa 17             	sar    edx,0x17
c002850c:	30 d2                	xor    dl,dl
c002850e:	e9 84 00 00 00       	jmp    c0028597 <__truncdfsf2+0xd4>
c0028513:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028519:	83 fe 83             	cmp    esi,0xffffff83
c002851c:	7d 4b                	jge    c0028569 <__truncdfsf2+0xa6>
c002851e:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0028523:	29 f1                	sub    ecx,esi
c0028525:	83 f9 1f             	cmp    ecx,0x1f
c0028528:	7f 6b                	jg     c0028595 <__truncdfsf2+0xd2>
c002852a:	0d 00 00 00 80       	or     eax,0x80000000
c002852f:	89 c3                	mov    ebx,eax
c0028531:	d3 eb                	shr    ebx,cl
c0028533:	be 01 00 00 00       	mov    esi,0x1
c0028538:	d3 e6                	shl    esi,cl
c002853a:	4e                   	dec    esi
c002853b:	21 f0                	and    eax,esi
c002853d:	09 f8                	or     eax,edi
c002853f:	0f 95 c0             	setne  al
c0028542:	0f b6 c0             	movzx  eax,al
c0028545:	09 c3                	or     ebx,eax
c0028547:	89 d9                	mov    ecx,ebx
c0028549:	c1 e9 08             	shr    ecx,0x8
c002854c:	f6 c3 7f             	test   bl,0x7f
c002854f:	0f 95 c0             	setne  al
c0028552:	09 c8                	or     eax,ecx
c0028554:	83 e0 01             	and    eax,0x1
c0028557:	c1 eb 07             	shr    ebx,0x7
c002855a:	21 c3                	and    ebx,eax
c002855c:	81 e2 00 00 00 80    	and    edx,0x80000000
c0028562:	09 d1                	or     ecx,edx
c0028564:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0028567:	eb 76                	jmp    c00285df <__truncdfsf2+0x11c>
c0028569:	83 c6 80             	add    esi,0xffffff80
c002856c:	7e 1d                	jle    c002858b <__truncdfsf2+0xc8>
c002856e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028574:	75 0b                	jne    c0028581 <__truncdfsf2+0xbe>
c0028576:	09 f8                	or     eax,edi
c0028578:	74 09                	je     c0028583 <__truncdfsf2+0xc0>
c002857a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c002857f:	eb 02                	jmp    c0028583 <__truncdfsf2+0xc0>
c0028581:	31 c0                	xor    eax,eax
c0028583:	c1 fa 17             	sar    edx,0x17
c0028586:	80 ca ff             	or     dl,0xff
c0028589:	eb 0e                	jmp    c0028599 <__truncdfsf2+0xd6>
c002858b:	c1 fa 1f             	sar    edx,0x1f
c002858e:	c1 e2 08             	shl    edx,0x8
c0028591:	09 ca                	or     edx,ecx
c0028593:	eb 04                	jmp    c0028599 <__truncdfsf2+0xd6>
c0028595:	31 d2                	xor    edx,edx
c0028597:	31 c0                	xor    eax,eax
c0028599:	c1 e2 17             	shl    edx,0x17
c002859c:	c1 e8 08             	shr    eax,0x8
c002859f:	09 d0                	or     eax,edx
c00285a1:	eb 3c                	jmp    c00285df <__truncdfsf2+0x11c>
c00285a3:	81 e9 80 03 00 00    	sub    ecx,0x380
c00285a9:	89 ca                	mov    edx,ecx
c00285ab:	c1 fa 0b             	sar    edx,0xb
c00285ae:	c1 e2 08             	shl    edx,0x8
c00285b1:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00285b4:	31 db                	xor    ebx,ebx
c00285b6:	85 ff                	test   edi,edi
c00285b8:	0f 95 c3             	setne  bl
c00285bb:	09 d8                	or     eax,ebx
c00285bd:	89 c3                	mov    ebx,eax
c00285bf:	c1 eb 08             	shr    ebx,0x8
c00285c2:	a8 7f                	test   al,0x7f
c00285c4:	0f 95 c2             	setne  dl
c00285c7:	89 d6                	mov    esi,edx
c00285c9:	09 de                	or     esi,ebx
c00285cb:	83 e6 01             	and    esi,0x1
c00285ce:	c1 e8 07             	shr    eax,0x7
c00285d1:	21 f0                	and    eax,esi
c00285d3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00285d6:	09 ca                	or     edx,ecx
c00285d8:	c1 e2 17             	shl    edx,0x17
c00285db:	09 da                	or     edx,ebx
c00285dd:	01 d0                	add    eax,edx
c00285df:	83 c4 0c             	add    esp,0xc
c00285e2:	5b                   	pop    ebx
c00285e3:	5e                   	pop    esi
c00285e4:	5f                   	pop    edi
c00285e5:	5d                   	pop    ebp
c00285e6:	c3                   	ret    

c00285e7 <__extendsfdf2>:
c00285e7:	55                   	push   ebp
c00285e8:	89 e5                	mov    ebp,esp
c00285ea:	57                   	push   edi
c00285eb:	56                   	push   esi
c00285ec:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00285ef:	89 d1                	mov    ecx,edx
c00285f1:	c1 f9 17             	sar    ecx,0x17
c00285f4:	c1 e2 08             	shl    edx,0x8
c00285f7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00285fd:	89 c8                	mov    eax,ecx
c00285ff:	80 e4 f8             	and    ah,0xf8
c0028602:	8d 71 01             	lea    esi,[ecx+0x1]
c0028605:	81 e6 fe 00 00 00    	and    esi,0xfe
c002860b:	75 27                	jne    c0028634 <__extendsfdf2+0x4d>
c002860d:	81 e1 ff 00 00 00    	and    ecx,0xff
c0028613:	75 18                	jne    c002862d <__extendsfdf2+0x46>
c0028615:	85 d2                	test   edx,edx
c0028617:	74 20                	je     c0028639 <__extendsfdf2+0x52>
c0028619:	41                   	inc    ecx
c002861a:	01 d2                	add    edx,edx
c002861c:	79 fb                	jns    c0028619 <__extendsfdf2+0x32>
c002861e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028624:	29 c8                	sub    eax,ecx
c0028626:	05 81 03 00 00       	add    eax,0x381
c002862b:	eb 0c                	jmp    c0028639 <__extendsfdf2+0x52>
c002862d:	05 00 07 00 00       	add    eax,0x700
c0028632:	eb 05                	jmp    c0028639 <__extendsfdf2+0x52>
c0028634:	05 80 03 00 00       	add    eax,0x380
c0028639:	c1 e0 14             	shl    eax,0x14
c002863c:	89 c1                	mov    ecx,eax
c002863e:	89 d0                	mov    eax,edx
c0028640:	c1 e8 0b             	shr    eax,0xb
c0028643:	09 c1                	or     ecx,eax
c0028645:	c1 e2 15             	shl    edx,0x15
c0028648:	89 d0                	mov    eax,edx
c002864a:	89 ca                	mov    edx,ecx
c002864c:	5e                   	pop    esi
c002864d:	5f                   	pop    edi
c002864e:	5d                   	pop    ebp
c002864f:	c3                   	ret    

c0028650 <fabs>:
c0028650:	83 ec 0c             	sub    esp,0xc
c0028653:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028657:	89 04 24             	mov    DWORD PTR [esp],eax
c002865a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002865e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028663:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028667:	dd 04 24             	fld    QWORD PTR [esp]
c002866a:	83 c4 0c             	add    esp,0xc
c002866d:	c3                   	ret    
c002866e:	66 90                	xchg   ax,ax

c0028670 <lrint>:
c0028670:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028674:	83 ec 04             	sub    esp,0x4
c0028677:	db 1c 24             	fistp  DWORD PTR [esp]
c002867a:	58                   	pop    eax
c002867b:	c3                   	ret    

c002867c <lrintf>:
c002867c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028680:	83 ec 04             	sub    esp,0x4
c0028683:	db 1c 24             	fistp  DWORD PTR [esp]
c0028686:	58                   	pop    eax
c0028687:	c3                   	ret    

Disassembly of section .init:

c0028688 <_init>:
c0028688:	55                   	push   ebp
c0028689:	89 e5                	mov    ebp,esp
c002868b:	e8 88 7a fd ff       	call   c0000118 <frame_dummy>
c0028690:	e8 63 e0 ff ff       	call   c00266f8 <__do_global_ctors_aux>
c0028695:	5d                   	pop    ebp
c0028696:	c3                   	ret    

Disassembly of section .fini:

c0028697 <_fini>:
c0028697:	55                   	push   ebp
c0028698:	89 e5                	mov    ebp,esp
c002869a:	e8 09 7a fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002869f:	5d                   	pop    ebp
c00286a0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00286a2 <Computer::~Computer()>:
c00286a2:	83 ec 0c             	sub    esp,0xc
c00286a5:	ba e8 a1 02 c0       	mov    edx,0xc002a1e8
c00286aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286ae:	89 10                	mov    DWORD PTR [eax],edx
c00286b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286b4:	83 ec 0c             	sub    esp,0xc
c00286b7:	50                   	push   eax
c00286b8:	e8 6d bb fe ff       	call   c001422a <Device::~Device()>
c00286bd:	83 c4 10             	add    esp,0x10
c00286c0:	90                   	nop
c00286c1:	83 c4 0c             	add    esp,0xc
c00286c4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00286c6 <Computer::~Computer()>:
c00286c6:	83 ec 0c             	sub    esp,0xc
c00286c9:	83 ec 0c             	sub    esp,0xc
c00286cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00286d0:	e8 cd ff ff ff       	call   c00286a2 <Computer::~Computer()>
c00286d5:	83 c4 10             	add    esp,0x10
c00286d8:	83 ec 08             	sub    esp,0x8
c00286db:	68 ec 01 00 00       	push   0x1ec
c00286e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00286e4:	e8 68 a7 fe ff       	call   c0012e51 <operator delete(void*, unsigned long)>
c00286e9:	83 c4 10             	add    esp,0x10
c00286ec:	83 c4 0c             	add    esp,0xc
c00286ef:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00286f0 <idleCommon()>:
c00286f0:	83 ec 0c             	sub    esp,0xc
c00286f3:	e8 10 57 ff ff       	call   c001de08 <lockScheduler()>
c00286f8:	e8 47 5a ff ff       	call   c001e144 <schedule()>
c00286fd:	83 c4 0c             	add    esp,0xc
c0028700:	e9 05 57 ff ff       	jmp    c001de0a <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028706 <LinkedList<UnixFile>::~LinkedList()>:
c0028706:	90                   	nop
c0028707:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028708 <LinkedList<UnixFile>::LinkedList()>:
c0028708:	83 ec 0c             	sub    esp,0xc
c002870b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002870f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028715:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028719:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028724:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002872b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002872f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028735:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028739:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028744:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002874b:	83 ec 0c             	sub    esp,0xc
c002874e:	68 ba a4 02 c0       	push   0xc002a4ba
c0028753:	e8 d9 a7 fe ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0028758:	83 c4 10             	add    esp,0x10
c002875b:	90                   	nop
c002875c:	83 c4 0c             	add    esp,0xc
c002875f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028760 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028760:	83 ec 0c             	sub    esp,0xc
c0028763:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028768:	75 10                	jne    c002877a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002876a:	83 ec 0c             	sub    esp,0xc
c002876d:	68 d4 a4 02 c0       	push   0xc002a4d4
c0028772:	e8 6c 1e ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c0028777:	83 c4 10             	add    esp,0x10
c002877a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002877e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028780:	85 c0                	test   eax,eax
c0028782:	74 34                	je     c00287b8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028784:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028788:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002878b:	85 c0                	test   eax,eax
c002878d:	74 29                	je     c00287b8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002878f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028793:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028796:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002879a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002879d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287a5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00287a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287af:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00287b6:	eb 65                	jmp    c002881d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00287b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00287be:	85 c0                	test   eax,eax
c00287c0:	75 4b                	jne    c002880d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00287c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287c9:	85 c0                	test   eax,eax
c00287cb:	75 40                	jne    c002880d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00287cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287d1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287d5:	89 10                	mov    DWORD PTR [eax],edx
c00287d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287df:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00287e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287e9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00287f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287f7:	85 c0                	test   eax,eax
c00287f9:	74 22                	je     c002881d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00287fb:	83 ec 0c             	sub    esp,0xc
c00287fe:	68 f6 a4 02 c0       	push   0xc002a4f6
c0028803:	e8 db 1d ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c0028808:	83 c4 10             	add    esp,0x10
c002880b:	eb 10                	jmp    c002881d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002880d:	83 ec 0c             	sub    esp,0xc
c0028810:	68 00 a5 02 c0       	push   0xc002a500
c0028815:	e8 c9 1d ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c002881a:	83 c4 10             	add    esp,0x10
c002881d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028821:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028824:	8d 50 01             	lea    edx,[eax+0x1]
c0028827:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002882b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002882e:	90                   	nop
c002882f:	83 c4 0c             	add    esp,0xc
c0028832:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0028834 <LinkedList<UnixFile>::getFirstElement()>:
c0028834:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028838:	8b 00                	mov    eax,DWORD PTR [eax]
c002883a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002883c <LinkedList<UnixFile>::removeFirst()>:
c002883c:	83 ec 0c             	sub    esp,0xc
c002883f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028843:	8b 00                	mov    eax,DWORD PTR [eax]
c0028845:	85 c0                	test   eax,eax
c0028847:	75 12                	jne    c002885b <LinkedList<UnixFile>::removeFirst()+0x1f>
c0028849:	83 ec 0c             	sub    esp,0xc
c002884c:	68 0c a5 02 c0       	push   0xc002a50c
c0028851:	e8 8d 1d ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c0028856:	83 c4 10             	add    esp,0x10
c0028859:	eb 7e                	jmp    c00288d9 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002885b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002885f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028862:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028865:	85 c0                	test   eax,eax
c0028867:	74 10                	je     c0028879 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0028869:	83 ec 0c             	sub    esp,0xc
c002886c:	68 57 a5 02 c0       	push   0xc002a557
c0028871:	e8 6d 1d ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c0028876:	83 c4 10             	add    esp,0x10
c0028879:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002887d:	8b 00                	mov    eax,DWORD PTR [eax]
c002887f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028882:	85 c0                	test   eax,eax
c0028884:	75 33                	jne    c00288b9 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0028886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002888a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028890:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028894:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002889b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002889f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288a2:	83 f8 01             	cmp    eax,0x1
c00288a5:	74 21                	je     c00288c8 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00288a7:	83 ec 0c             	sub    esp,0xc
c00288aa:	68 30 a5 02 c0       	push   0xc002a530
c00288af:	e8 2f 1d ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c00288b4:	83 c4 10             	add    esp,0x10
c00288b7:	eb 0f                	jmp    c00288c8 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00288b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00288bf:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00288c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288c6:	89 10                	mov    DWORD PTR [eax],edx
c00288c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288cc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288cf:	8d 50 ff             	lea    edx,[eax-0x1]
c00288d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288d6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00288d9:	83 c4 0c             	add    esp,0xc
c00288dc:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00288de <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00288de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00288e2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288e5:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00288e6 <DriverlessDevice::~DriverlessDevice()>:
c00288e6:	ba e4 ad 02 c0       	mov    edx,0xc002ade4
c00288eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288ef:	89 10                	mov    DWORD PTR [eax],edx
c00288f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288f5:	50                   	push   eax
c00288f6:	e8 2f b9 fe ff       	call   c001422a <Device::~Device()>
c00288fb:	83 c4 04             	add    esp,0x4
c00288fe:	90                   	nop
c00288ff:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028900 <DriverlessDevice::~DriverlessDevice()>:
c0028900:	83 ec 0c             	sub    esp,0xc
c0028903:	83 ec 0c             	sub    esp,0xc
c0028906:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002890a:	e8 d7 ff ff ff       	call   c00288e6 <DriverlessDevice::~DriverlessDevice()>
c002890f:	83 c4 10             	add    esp,0x10
c0028912:	83 ec 08             	sub    esp,0x8
c0028915:	68 58 01 00 00       	push   0x158
c002891a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002891e:	e8 2e a5 fe ff       	call   c0012e51 <operator delete(void*, unsigned long)>
c0028923:	83 c4 10             	add    esp,0x10
c0028926:	83 c4 0c             	add    esp,0xc
c0028929:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002892a <LinkedList<Device>::addElement(Device*)>:
c002892a:	83 ec 0c             	sub    esp,0xc
c002892d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028932:	75 10                	jne    c0028944 <LinkedList<Device>::addElement(Device*)+0x1a>
c0028934:	83 ec 0c             	sub    esp,0xc
c0028937:	68 d4 a4 02 c0       	push   0xc002a4d4
c002893c:	e8 a2 1c ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c0028941:	83 c4 10             	add    esp,0x10
c0028944:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028948:	8b 00                	mov    eax,DWORD PTR [eax]
c002894a:	85 c0                	test   eax,eax
c002894c:	74 3a                	je     c0028988 <LinkedList<Device>::addElement(Device*)+0x5e>
c002894e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028952:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028955:	85 c0                	test   eax,eax
c0028957:	74 2f                	je     c0028988 <LinkedList<Device>::addElement(Device*)+0x5e>
c0028959:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002895d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028960:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028964:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002896a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002896e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028972:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028975:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028979:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002897c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028986:	eb 68                	jmp    c00289f0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002898c:	8b 00                	mov    eax,DWORD PTR [eax]
c002898e:	85 c0                	test   eax,eax
c0028990:	75 4e                	jne    c00289e0 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028992:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028996:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028999:	85 c0                	test   eax,eax
c002899b:	75 43                	jne    c00289e0 <LinkedList<Device>::addElement(Device*)+0xb6>
c002899d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00289a5:	89 10                	mov    DWORD PTR [eax],edx
c00289a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00289af:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00289b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289b9:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00289c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289c7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289ca:	85 c0                	test   eax,eax
c00289cc:	74 22                	je     c00289f0 <LinkedList<Device>::addElement(Device*)+0xc6>
c00289ce:	83 ec 0c             	sub    esp,0xc
c00289d1:	68 f6 a4 02 c0       	push   0xc002a4f6
c00289d6:	e8 08 1c ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c00289db:	83 c4 10             	add    esp,0x10
c00289de:	eb 10                	jmp    c00289f0 <LinkedList<Device>::addElement(Device*)+0xc6>
c00289e0:	83 ec 0c             	sub    esp,0xc
c00289e3:	68 00 a5 02 c0       	push   0xc002a500
c00289e8:	e8 f6 1b ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c00289ed:	83 c4 10             	add    esp,0x10
c00289f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289f7:	8d 50 01             	lea    edx,[eax+0x1]
c00289fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289fe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028a01:	90                   	nop
c0028a02:	83 c4 0c             	add    esp,0xc
c0028a05:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028a06 <LinkedList<Device>::LinkedList()>:
c0028a06:	83 ec 0c             	sub    esp,0xc
c0028a09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a0d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028a13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a17:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a22:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028a29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a2d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028a33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a37:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a42:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028a49:	83 ec 0c             	sub    esp,0xc
c0028a4c:	68 ba a4 02 c0       	push   0xc002a4ba
c0028a51:	e8 db a4 fe ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0028a56:	83 c4 10             	add    esp,0x10
c0028a59:	90                   	nop
c0028a5a:	83 c4 0c             	add    esp,0xc
c0028a5d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0028a5e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0028a5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a62:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a64:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028a66 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028a66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a6c:	85 c0                	test   eax,eax
c0028a6e:	75 0e                	jne    c0028a7e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028a70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a74:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a77:	85 c0                	test   eax,eax
c0028a79:	75 03                	jne    c0028a7e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028a7b:	b0 01                	mov    al,0x1
c0028a7d:	c3                   	ret    
c0028a7e:	b0 00                	mov    al,0x0
c0028a80:	90                   	nop
c0028a81:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028a82 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028a82:	83 ec 0c             	sub    esp,0xc
c0028a85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a89:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a8b:	85 c0                	test   eax,eax
c0028a8d:	75 15                	jne    c0028aa4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0028a8f:	83 ec 0c             	sub    esp,0xc
c0028a92:	68 0c a5 02 c0       	push   0xc002a50c
c0028a97:	e8 47 1b ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c0028a9c:	83 c4 10             	add    esp,0x10
c0028a9f:	e9 88 00 00 00       	jmp    c0028b2c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028aa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aa8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028aab:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028aae:	85 c0                	test   eax,eax
c0028ab0:	0f 95 c0             	setne  al
c0028ab3:	84 c0                	test   al,al
c0028ab5:	74 10                	je     c0028ac7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028ab7:	83 ec 0c             	sub    esp,0xc
c0028aba:	68 57 a5 02 c0       	push   0xc002a557
c0028abf:	e8 1f 1b ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c0028ac4:	83 c4 10             	add    esp,0x10
c0028ac7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028acb:	8b 00                	mov    eax,DWORD PTR [eax]
c0028acd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028ad0:	85 c0                	test   eax,eax
c0028ad2:	0f 94 c0             	sete   al
c0028ad5:	84 c0                	test   al,al
c0028ad7:	74 33                	je     c0028b0c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028ad9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028add:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028ae3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ae7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028aee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028af2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028af5:	83 f8 01             	cmp    eax,0x1
c0028af8:	74 21                	je     c0028b1b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028afa:	83 ec 0c             	sub    esp,0xc
c0028afd:	68 30 a5 02 c0       	push   0xc002a530
c0028b02:	e8 dc 1a ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c0028b07:	83 c4 10             	add    esp,0x10
c0028b0a:	eb 0f                	jmp    c0028b1b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028b0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b10:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b12:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028b15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b19:	89 10                	mov    DWORD PTR [eax],edx
c0028b1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b1f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b22:	8d 50 ff             	lea    edx,[eax-0x1]
c0028b25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b29:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028b2c:	83 c4 0c             	add    esp,0xc
c0028b2f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028b30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028b30:	83 ec 0c             	sub    esp,0xc
c0028b33:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028b38:	75 10                	jne    c0028b4a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028b3a:	83 ec 0c             	sub    esp,0xc
c0028b3d:	68 d4 a4 02 c0       	push   0xc002a4d4
c0028b42:	e8 9c 1a ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c0028b47:	83 c4 10             	add    esp,0x10
c0028b4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b4e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b50:	85 c0                	test   eax,eax
c0028b52:	74 34                	je     c0028b88 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028b54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b58:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b5b:	85 c0                	test   eax,eax
c0028b5d:	74 29                	je     c0028b88 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028b5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b63:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b66:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b6a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028b6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b71:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b75:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028b78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b7f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028b86:	eb 65                	jmp    c0028bed <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028b88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b8c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b8e:	85 c0                	test   eax,eax
c0028b90:	75 4b                	jne    c0028bdd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028b92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b96:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b99:	85 c0                	test   eax,eax
c0028b9b:	75 40                	jne    c0028bdd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028b9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ba1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028ba5:	89 10                	mov    DWORD PTR [eax],edx
c0028ba7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028baf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028bb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bb6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028bb9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bc4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028bc7:	85 c0                	test   eax,eax
c0028bc9:	74 22                	je     c0028bed <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028bcb:	83 ec 0c             	sub    esp,0xc
c0028bce:	68 f6 a4 02 c0       	push   0xc002a4f6
c0028bd3:	e8 0b 1a ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c0028bd8:	83 c4 10             	add    esp,0x10
c0028bdb:	eb 10                	jmp    c0028bed <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028bdd:	83 ec 0c             	sub    esp,0xc
c0028be0:	68 00 a5 02 c0       	push   0xc002a500
c0028be5:	e8 f9 19 ff ff       	call   c001a5e3 <Krnl::panic(char const*)>
c0028bea:	83 c4 10             	add    esp,0x10
c0028bed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bf1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028bf4:	8d 50 01             	lea    edx,[eax+0x1]
c0028bf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bfb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028bfe:	90                   	nop
c0028bff:	83 c4 0c             	add    esp,0xc
c0028c02:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028c04 <ACPI::~ACPI()>:
c0028c04:	83 ec 0c             	sub    esp,0xc
c0028c07:	ba 38 b7 02 c0       	mov    edx,0xc002b738
c0028c0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c10:	89 10                	mov    DWORD PTR [eax],edx
c0028c12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c16:	83 ec 0c             	sub    esp,0xc
c0028c19:	50                   	push   eax
c0028c1a:	e8 0b b6 fe ff       	call   c001422a <Device::~Device()>
c0028c1f:	83 c4 10             	add    esp,0x10
c0028c22:	90                   	nop
c0028c23:	83 c4 0c             	add    esp,0xc
c0028c26:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028c28 <ACPI::~ACPI()>:
c0028c28:	83 ec 0c             	sub    esp,0xc
c0028c2b:	83 ec 0c             	sub    esp,0xc
c0028c2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c32:	e8 cd ff ff ff       	call   c0028c04 <ACPI::~ACPI()>
c0028c37:	83 c4 10             	add    esp,0x10
c0028c3a:	83 ec 08             	sub    esp,0x8
c0028c3d:	68 68 12 00 00       	push   0x1268
c0028c42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c46:	e8 06 a2 fe ff       	call   c0012e51 <operator delete(void*, unsigned long)>
c0028c4b:	83 c4 10             	add    esp,0x10
c0028c4e:	83 c4 0c             	add    esp,0xc
c0028c51:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028c52 <CPU::~CPU()>:
c0028c52:	83 ec 0c             	sub    esp,0xc
c0028c55:	ba 28 bb 02 c0       	mov    edx,0xc002bb28
c0028c5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c5e:	89 10                	mov    DWORD PTR [eax],edx
c0028c60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c64:	83 ec 0c             	sub    esp,0xc
c0028c67:	50                   	push   eax
c0028c68:	e8 bd b5 fe ff       	call   c001422a <Device::~Device()>
c0028c6d:	83 c4 10             	add    esp,0x10
c0028c70:	90                   	nop
c0028c71:	83 c4 0c             	add    esp,0xc
c0028c74:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028c76 <CPU::~CPU()>:
c0028c76:	83 ec 0c             	sub    esp,0xc
c0028c79:	83 ec 0c             	sub    esp,0xc
c0028c7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c80:	e8 cd ff ff ff       	call   c0028c52 <CPU::~CPU()>
c0028c85:	83 c4 10             	add    esp,0x10
c0028c88:	83 ec 08             	sub    esp,0x8
c0028c8b:	68 98 11 00 00       	push   0x1198
c0028c90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c94:	e8 b8 a1 fe ff       	call   c0012e51 <operator delete(void*, unsigned long)>
c0028c99:	83 c4 10             	add    esp,0x10
c0028c9c:	83 c4 0c             	add    esp,0xc
c0028c9f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028ca0 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028ca0:	90                   	nop
c0028ca1:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028ca2 <ThreadControlBlock::ThreadControlBlock()>:
c0028ca2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ca6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028cad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cb1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028cb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cbc:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028cc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cc7:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028cce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cd2:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028cd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cda:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028cde:	90                   	nop
c0028cdf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028ce0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028ce0:	83 ec 0c             	sub    esp,0xc
c0028ce3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ce7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028ced:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cf1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028cf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cfc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028d03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d07:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d11:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028d18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d1c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028d23:	83 ec 0c             	sub    esp,0xc
c0028d26:	68 ba a4 02 c0       	push   0xc002a4ba
c0028d2b:	e8 01 a2 fe ff       	call   c0012f31 <Dbg::kprintf(char const*, ...)>
c0028d30:	83 c4 10             	add    esp,0x10
c0028d33:	90                   	nop
c0028d34:	83 c4 0c             	add    esp,0xc
c0028d37:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028d38 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028d38:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028d3c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028d3f:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028d40 <Vm::_FPUState::_FPUState()>:
c0028d40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d44:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028d4b:	90                   	nop
c0028d4c:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028d4e <PCI::~PCI()>:
c0028d4e:	83 ec 0c             	sub    esp,0xc
c0028d51:	ba 1c cc 02 c0       	mov    edx,0xc002cc1c
c0028d56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d5a:	89 10                	mov    DWORD PTR [eax],edx
c0028d5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d60:	83 ec 0c             	sub    esp,0xc
c0028d63:	50                   	push   eax
c0028d64:	e8 99 ae fe ff       	call   c0013c02 <Bus::~Bus()>
c0028d69:	83 c4 10             	add    esp,0x10
c0028d6c:	90                   	nop
c0028d6d:	83 c4 0c             	add    esp,0xc
c0028d70:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028d72 <PCI::~PCI()>:
c0028d72:	83 ec 0c             	sub    esp,0xc
c0028d75:	83 ec 0c             	sub    esp,0xc
c0028d78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d7c:	e8 cd ff ff ff       	call   c0028d4e <PCI::~PCI()>
c0028d81:	83 c4 10             	add    esp,0x10
c0028d84:	83 ec 08             	sub    esp,0x8
c0028d87:	68 58 01 00 00       	push   0x158
c0028d8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d90:	e8 bc a0 fe ff       	call   c0012e51 <operator delete(void*, unsigned long)>
c0028d95:	83 c4 10             	add    esp,0x10
c0028d98:	83 c4 0c             	add    esp,0xc
c0028d9b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028d9c <IDE::~IDE()>:
c0028d9c:	83 ec 0c             	sub    esp,0xc
c0028d9f:	ba 80 ce 02 c0       	mov    edx,0xc002ce80
c0028da4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028da8:	89 10                	mov    DWORD PTR [eax],edx
c0028daa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dae:	83 ec 0c             	sub    esp,0xc
c0028db1:	50                   	push   eax
c0028db2:	e8 63 b9 fe ff       	call   c001471a <HardDiskController::~HardDiskController()>
c0028db7:	83 c4 10             	add    esp,0x10
c0028dba:	90                   	nop
c0028dbb:	83 c4 0c             	add    esp,0xc
c0028dbe:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028dc0 <IDE::~IDE()>:
c0028dc0:	83 ec 0c             	sub    esp,0xc
c0028dc3:	83 ec 0c             	sub    esp,0xc
c0028dc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dca:	e8 cd ff ff ff       	call   c0028d9c <IDE::~IDE()>
c0028dcf:	83 c4 10             	add    esp,0x10
c0028dd2:	83 ec 08             	sub    esp,0x8
c0028dd5:	68 70 02 00 00       	push   0x270
c0028dda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dde:	e8 6e a0 fe ff       	call   c0012e51 <operator delete(void*, unsigned long)>
c0028de3:	83 c4 10             	add    esp,0x10
c0028de6:	83 c4 0c             	add    esp,0xc
c0028de9:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028dea <SATABus::~SATABus()>:
c0028dea:	83 ec 0c             	sub    esp,0xc
c0028ded:	ba 60 cf 02 c0       	mov    edx,0xc002cf60
c0028df2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028df6:	89 10                	mov    DWORD PTR [eax],edx
c0028df8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dfc:	83 ec 0c             	sub    esp,0xc
c0028dff:	50                   	push   eax
c0028e00:	e8 15 b9 fe ff       	call   c001471a <HardDiskController::~HardDiskController()>
c0028e05:	83 c4 10             	add    esp,0x10
c0028e08:	90                   	nop
c0028e09:	83 c4 0c             	add    esp,0xc
c0028e0c:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028e0e <SATABus::~SATABus()>:
c0028e0e:	83 ec 0c             	sub    esp,0xc
c0028e11:	83 ec 0c             	sub    esp,0xc
c0028e14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e18:	e8 cd ff ff ff       	call   c0028dea <SATABus::~SATABus()>
c0028e1d:	83 c4 10             	add    esp,0x10
c0028e20:	83 ec 08             	sub    esp,0x8
c0028e23:	68 64 01 00 00       	push   0x164
c0028e28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e2c:	e8 20 a0 fe ff       	call   c0012e51 <operator delete(void*, unsigned long)>
c0028e31:	83 c4 10             	add    esp,0x10
c0028e34:	83 c4 0c             	add    esp,0xc
c0028e37:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028e38 <ATA::~ATA()>:
c0028e38:	83 ec 0c             	sub    esp,0xc
c0028e3b:	ba ac cf 02 c0       	mov    edx,0xc002cfac
c0028e40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e44:	89 10                	mov    DWORD PTR [eax],edx
c0028e46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e4a:	83 ec 0c             	sub    esp,0xc
c0028e4d:	50                   	push   eax
c0028e4e:	e8 b9 b9 fe ff       	call   c001480c <PhysicalDisk::~PhysicalDisk()>
c0028e53:	83 c4 10             	add    esp,0x10
c0028e56:	90                   	nop
c0028e57:	83 c4 0c             	add    esp,0xc
c0028e5a:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028e5c <ATA::~ATA()>:
c0028e5c:	83 ec 0c             	sub    esp,0xc
c0028e5f:	83 ec 0c             	sub    esp,0xc
c0028e62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e66:	e8 cd ff ff ff       	call   c0028e38 <ATA::~ATA()>
c0028e6b:	83 c4 10             	add    esp,0x10
c0028e6e:	83 ec 08             	sub    esp,0x8
c0028e71:	68 7c 01 00 00       	push   0x17c
c0028e76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e7a:	e8 d2 9f fe ff       	call   c0012e51 <operator delete(void*, unsigned long)>
c0028e7f:	83 c4 10             	add    esp,0x10
c0028e82:	83 c4 0c             	add    esp,0xc
c0028e85:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028e86 <ATAPI::~ATAPI()>:
c0028e86:	83 ec 0c             	sub    esp,0xc
c0028e89:	ba e4 cf 02 c0       	mov    edx,0xc002cfe4
c0028e8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e92:	89 10                	mov    DWORD PTR [eax],edx
c0028e94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e98:	83 ec 0c             	sub    esp,0xc
c0028e9b:	50                   	push   eax
c0028e9c:	e8 6b b9 fe ff       	call   c001480c <PhysicalDisk::~PhysicalDisk()>
c0028ea1:	83 c4 10             	add    esp,0x10
c0028ea4:	90                   	nop
c0028ea5:	83 c4 0c             	add    esp,0xc
c0028ea8:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028eaa <ATAPI::~ATAPI()>:
c0028eaa:	83 ec 0c             	sub    esp,0xc
c0028ead:	83 ec 0c             	sub    esp,0xc
c0028eb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028eb4:	e8 cd ff ff ff       	call   c0028e86 <ATAPI::~ATAPI()>
c0028eb9:	83 c4 10             	add    esp,0x10
c0028ebc:	83 ec 08             	sub    esp,0x8
c0028ebf:	68 80 01 00 00       	push   0x180
c0028ec4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ec8:	e8 84 9f fe ff       	call   c0012e51 <operator delete(void*, unsigned long)>
c0028ecd:	83 c4 10             	add    esp,0x10
c0028ed0:	83 c4 0c             	add    esp,0xc
c0028ed3:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028ed4 <SATA::~SATA()>:
c0028ed4:	83 ec 0c             	sub    esp,0xc
c0028ed7:	ba 98 d0 02 c0       	mov    edx,0xc002d098
c0028edc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ee0:	89 10                	mov    DWORD PTR [eax],edx
c0028ee2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ee6:	83 ec 0c             	sub    esp,0xc
c0028ee9:	50                   	push   eax
c0028eea:	e8 1d b9 fe ff       	call   c001480c <PhysicalDisk::~PhysicalDisk()>
c0028eef:	83 c4 10             	add    esp,0x10
c0028ef2:	90                   	nop
c0028ef3:	83 c4 0c             	add    esp,0xc
c0028ef6:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028ef8 <SATA::~SATA()>:
c0028ef8:	83 ec 0c             	sub    esp,0xc
c0028efb:	83 ec 0c             	sub    esp,0xc
c0028efe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f02:	e8 cd ff ff ff       	call   c0028ed4 <SATA::~SATA()>
c0028f07:	83 c4 10             	add    esp,0x10
c0028f0a:	83 ec 08             	sub    esp,0x8
c0028f0d:	68 7c 01 00 00       	push   0x17c
c0028f12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f16:	e8 36 9f fe ff       	call   c0012e51 <operator delete(void*, unsigned long)>
c0028f1b:	83 c4 10             	add    esp,0x10
c0028f1e:	83 c4 0c             	add    esp,0xc
c0028f21:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028f22 <SATAPI::~SATAPI()>:
c0028f22:	83 ec 0c             	sub    esp,0xc
c0028f25:	ba 74 d1 02 c0       	mov    edx,0xc002d174
c0028f2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f2e:	89 10                	mov    DWORD PTR [eax],edx
c0028f30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f34:	83 ec 0c             	sub    esp,0xc
c0028f37:	50                   	push   eax
c0028f38:	e8 cf b8 fe ff       	call   c001480c <PhysicalDisk::~PhysicalDisk()>
c0028f3d:	83 c4 10             	add    esp,0x10
c0028f40:	90                   	nop
c0028f41:	83 c4 0c             	add    esp,0xc
c0028f44:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028f46 <SATAPI::~SATAPI()>:
c0028f46:	83 ec 0c             	sub    esp,0xc
c0028f49:	83 ec 0c             	sub    esp,0xc
c0028f4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f50:	e8 cd ff ff ff       	call   c0028f22 <SATAPI::~SATAPI()>
c0028f55:	83 c4 10             	add    esp,0x10
c0028f58:	83 ec 08             	sub    esp,0x8
c0028f5b:	68 80 01 00 00       	push   0x180
c0028f60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f64:	e8 e8 9e fe ff       	call   c0012e51 <operator delete(void*, unsigned long)>
c0028f69:	83 c4 10             	add    esp,0x10
c0028f6c:	83 c4 0c             	add    esp,0xc
c0028f6f:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028f70 <AVX::~AVX()>:
c0028f70:	83 ec 0c             	sub    esp,0xc
c0028f73:	ba b4 d1 02 c0       	mov    edx,0xc002d1b4
c0028f78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f7c:	89 10                	mov    DWORD PTR [eax],edx
c0028f7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f82:	83 ec 0c             	sub    esp,0xc
c0028f85:	50                   	push   eax
c0028f86:	e8 05 b9 fe ff       	call   c0014890 <FPU::~FPU()>
c0028f8b:	83 c4 10             	add    esp,0x10
c0028f8e:	90                   	nop
c0028f8f:	83 c4 0c             	add    esp,0xc
c0028f92:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028f94 <AVX::~AVX()>:
c0028f94:	83 ec 0c             	sub    esp,0xc
c0028f97:	83 ec 0c             	sub    esp,0xc
c0028f9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f9e:	e8 cd ff ff ff       	call   c0028f70 <AVX::~AVX()>
c0028fa3:	83 c4 10             	add    esp,0x10
c0028fa6:	83 ec 08             	sub    esp,0x8
c0028fa9:	68 58 01 00 00       	push   0x158
c0028fae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fb2:	e8 9a 9e fe ff       	call   c0012e51 <operator delete(void*, unsigned long)>
c0028fb7:	83 c4 10             	add    esp,0x10
c0028fba:	83 c4 0c             	add    esp,0xc
c0028fbd:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028fbe <MMX::~MMX()>:
c0028fbe:	83 ec 0c             	sub    esp,0xc
c0028fc1:	ba f4 d1 02 c0       	mov    edx,0xc002d1f4
c0028fc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fca:	89 10                	mov    DWORD PTR [eax],edx
c0028fcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fd0:	83 ec 0c             	sub    esp,0xc
c0028fd3:	50                   	push   eax
c0028fd4:	e8 b7 b8 fe ff       	call   c0014890 <FPU::~FPU()>
c0028fd9:	83 c4 10             	add    esp,0x10
c0028fdc:	90                   	nop
c0028fdd:	83 c4 0c             	add    esp,0xc
c0028fe0:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028fe2 <MMX::~MMX()>:
c0028fe2:	83 ec 0c             	sub    esp,0xc
c0028fe5:	83 ec 0c             	sub    esp,0xc
c0028fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fec:	e8 cd ff ff ff       	call   c0028fbe <MMX::~MMX()>
c0028ff1:	83 c4 10             	add    esp,0x10
c0028ff4:	83 ec 08             	sub    esp,0x8
c0028ff7:	68 58 01 00 00       	push   0x158
c0028ffc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029000:	e8 4c 9e fe ff       	call   c0012e51 <operator delete(void*, unsigned long)>
c0029005:	83 c4 10             	add    esp,0x10
c0029008:	83 c4 0c             	add    esp,0xc
c002900b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c002900c <SSE::~SSE()>:
c002900c:	83 ec 0c             	sub    esp,0xc
c002900f:	ba 34 d2 02 c0       	mov    edx,0xc002d234
c0029014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029018:	89 10                	mov    DWORD PTR [eax],edx
c002901a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002901e:	83 ec 0c             	sub    esp,0xc
c0029021:	50                   	push   eax
c0029022:	e8 69 b8 fe ff       	call   c0014890 <FPU::~FPU()>
c0029027:	83 c4 10             	add    esp,0x10
c002902a:	90                   	nop
c002902b:	83 c4 0c             	add    esp,0xc
c002902e:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0029030 <SSE::~SSE()>:
c0029030:	83 ec 0c             	sub    esp,0xc
c0029033:	83 ec 0c             	sub    esp,0xc
c0029036:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002903a:	e8 cd ff ff ff       	call   c002900c <SSE::~SSE()>
c002903f:	83 c4 10             	add    esp,0x10
c0029042:	83 ec 08             	sub    esp,0x8
c0029045:	68 58 01 00 00       	push   0x158
c002904a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002904e:	e8 fe 9d fe ff       	call   c0012e51 <operator delete(void*, unsigned long)>
c0029053:	83 c4 10             	add    esp,0x10
c0029056:	83 c4 0c             	add    esp,0xc
c0029059:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c002905a <x87::~x87()>:
c002905a:	83 ec 0c             	sub    esp,0xc
c002905d:	ba 74 d2 02 c0       	mov    edx,0xc002d274
c0029062:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029066:	89 10                	mov    DWORD PTR [eax],edx
c0029068:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002906c:	83 ec 0c             	sub    esp,0xc
c002906f:	50                   	push   eax
c0029070:	e8 1b b8 fe ff       	call   c0014890 <FPU::~FPU()>
c0029075:	83 c4 10             	add    esp,0x10
c0029078:	90                   	nop
c0029079:	83 c4 0c             	add    esp,0xc
c002907c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002907e <x87::~x87()>:
c002907e:	83 ec 0c             	sub    esp,0xc
c0029081:	83 ec 0c             	sub    esp,0xc
c0029084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029088:	e8 cd ff ff ff       	call   c002905a <x87::~x87()>
c002908d:	83 c4 10             	add    esp,0x10
c0029090:	83 ec 08             	sub    esp,0x8
c0029093:	68 58 01 00 00       	push   0x158
c0029098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002909c:	e8 b0 9d fe ff       	call   c0012e51 <operator delete(void*, unsigned long)>
c00290a1:	83 c4 10             	add    esp,0x10
c00290a4:	83 c4 0c             	add    esp,0xc
c00290a7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00290a8 <IOAPIC::~IOAPIC()>:
c00290a8:	83 ec 0c             	sub    esp,0xc
c00290ab:	ba cc d3 02 c0       	mov    edx,0xc002d3cc
c00290b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290b4:	89 10                	mov    DWORD PTR [eax],edx
c00290b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290ba:	83 ec 0c             	sub    esp,0xc
c00290bd:	50                   	push   eax
c00290be:	e8 67 b1 fe ff       	call   c001422a <Device::~Device()>
c00290c3:	83 c4 10             	add    esp,0x10
c00290c6:	90                   	nop
c00290c7:	83 c4 0c             	add    esp,0xc
c00290ca:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00290cc <IOAPIC::~IOAPIC()>:
c00290cc:	83 ec 0c             	sub    esp,0xc
c00290cf:	83 ec 0c             	sub    esp,0xc
c00290d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290d6:	e8 cd ff ff ff       	call   c00290a8 <IOAPIC::~IOAPIC()>
c00290db:	83 c4 10             	add    esp,0x10
c00290de:	83 ec 08             	sub    esp,0x8
c00290e1:	68 68 01 00 00       	push   0x168
c00290e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290ea:	e8 62 9d fe ff       	call   c0012e51 <operator delete(void*, unsigned long)>
c00290ef:	83 c4 10             	add    esp,0x10
c00290f2:	83 c4 0c             	add    esp,0xc
c00290f5:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00290f6 <APIC::~APIC()>:
c00290f6:	83 ec 0c             	sub    esp,0xc
c00290f9:	ba 84 d3 02 c0       	mov    edx,0xc002d384
c00290fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029102:	89 10                	mov    DWORD PTR [eax],edx
c0029104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029108:	83 ec 0c             	sub    esp,0xc
c002910b:	50                   	push   eax
c002910c:	e8 49 bc fe ff       	call   c0014d5a <InterruptController::~InterruptController()>
c0029111:	83 c4 10             	add    esp,0x10
c0029114:	90                   	nop
c0029115:	83 c4 0c             	add    esp,0xc
c0029118:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c002911a <APIC::~APIC()>:
c002911a:	83 ec 0c             	sub    esp,0xc
c002911d:	83 ec 0c             	sub    esp,0xc
c0029120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029124:	e8 cd ff ff ff       	call   c00290f6 <APIC::~APIC()>
c0029129:	83 c4 10             	add    esp,0x10
c002912c:	83 ec 08             	sub    esp,0x8
c002912f:	68 58 21 00 00       	push   0x2158
c0029134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029138:	e8 14 9d fe ff       	call   c0012e51 <operator delete(void*, unsigned long)>
c002913d:	83 c4 10             	add    esp,0x10
c0029140:	83 c4 0c             	add    esp,0xc
c0029143:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029144 <PIC::~PIC()>:
c0029144:	83 ec 0c             	sub    esp,0xc
c0029147:	ba 1c d4 02 c0       	mov    edx,0xc002d41c
c002914c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029150:	89 10                	mov    DWORD PTR [eax],edx
c0029152:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029156:	83 ec 0c             	sub    esp,0xc
c0029159:	50                   	push   eax
c002915a:	e8 fb bb fe ff       	call   c0014d5a <InterruptController::~InterruptController()>
c002915f:	83 c4 10             	add    esp,0x10
c0029162:	90                   	nop
c0029163:	83 c4 0c             	add    esp,0xc
c0029166:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029168 <PIC::~PIC()>:
c0029168:	83 ec 0c             	sub    esp,0xc
c002916b:	83 ec 0c             	sub    esp,0xc
c002916e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029172:	e8 cd ff ff ff       	call   c0029144 <PIC::~PIC()>
c0029177:	83 c4 10             	add    esp,0x10
c002917a:	83 ec 08             	sub    esp,0x8
c002917d:	68 58 21 00 00       	push   0x2158
c0029182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029186:	e8 c6 9c fe ff       	call   c0012e51 <operator delete(void*, unsigned long)>
c002918b:	83 c4 10             	add    esp,0x10
c002918e:	83 c4 0c             	add    esp,0xc
c0029191:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029192 <APICTimer::~APICTimer()>:
c0029192:	83 ec 0c             	sub    esp,0xc
c0029195:	ba 70 d4 02 c0       	mov    edx,0xc002d470
c002919a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002919e:	89 10                	mov    DWORD PTR [eax],edx
c00291a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291a4:	83 ec 0c             	sub    esp,0xc
c00291a7:	50                   	push   eax
c00291a8:	e8 09 db fe ff       	call   c0016cb6 <Timer::~Timer()>
c00291ad:	83 c4 10             	add    esp,0x10
c00291b0:	90                   	nop
c00291b1:	83 c4 0c             	add    esp,0xc
c00291b4:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00291b6 <APICTimer::~APICTimer()>:
c00291b6:	83 ec 0c             	sub    esp,0xc
c00291b9:	83 ec 0c             	sub    esp,0xc
c00291bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291c0:	e8 cd ff ff ff       	call   c0029192 <APICTimer::~APICTimer()>
c00291c5:	83 c4 10             	add    esp,0x10
c00291c8:	83 ec 08             	sub    esp,0x8
c00291cb:	68 60 01 00 00       	push   0x160
c00291d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291d4:	e8 78 9c fe ff       	call   c0012e51 <operator delete(void*, unsigned long)>
c00291d9:	83 c4 10             	add    esp,0x10
c00291dc:	83 c4 0c             	add    esp,0xc
c00291df:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00291e0 <PIT::~PIT()>:
c00291e0:	83 ec 0c             	sub    esp,0xc
c00291e3:	ba c0 d4 02 c0       	mov    edx,0xc002d4c0
c00291e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291ec:	89 10                	mov    DWORD PTR [eax],edx
c00291ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291f2:	83 ec 0c             	sub    esp,0xc
c00291f5:	50                   	push   eax
c00291f6:	e8 bb da fe ff       	call   c0016cb6 <Timer::~Timer()>
c00291fb:	83 c4 10             	add    esp,0x10
c00291fe:	90                   	nop
c00291ff:	83 c4 0c             	add    esp,0xc
c0029202:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029204 <PIT::~PIT()>:
c0029204:	83 ec 0c             	sub    esp,0xc
c0029207:	83 ec 0c             	sub    esp,0xc
c002920a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002920e:	e8 cd ff ff ff       	call   c00291e0 <PIT::~PIT()>
c0029213:	83 c4 10             	add    esp,0x10
c0029216:	83 ec 08             	sub    esp,0x8
c0029219:	68 5c 01 00 00       	push   0x15c
c002921e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029222:	e8 2a 9c fe ff       	call   c0012e51 <operator delete(void*, unsigned long)>
c0029227:	83 c4 10             	add    esp,0x10
c002922a:	83 c4 0c             	add    esp,0xc
c002922d:	c3                   	ret    
