
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f3 77 00 00       	call   c0007813 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 74 fb 01 c0       	mov    eax,0xc001fb74
c0000025:	3d 74 fb 01 c0       	cmp    eax,0xc001fb74
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 74 fb 01 c0       	push   0xc001fb74
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 74 fb 01 c0       	mov    eax,0xc001fb74
c0000051:	2d 74 fb 01 c0       	sub    eax,0xc001fb74
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 74 fb 01 c0       	push   0xc001fb74
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 10 02 c0 00 	cmp    BYTE PTR ds:0xc00210c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 18 ce 01 c0       	mov    ebx,0xc001ce18
c0000097:	81 eb 14 ce 01 c0    	sub    ebx,0xc001ce14
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 14 ce 01 c0       	mov    esi,0xc001ce14
c00000a6:	a1 c4 10 02 c0       	mov    eax,ds:0xc00210c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 10 02 c0       	mov    ds:0xc00210c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 10 02 c0       	mov    eax,ds:0xc00210c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 74 fb 01 c0       	push   0xc001fb74
c00000d8:	e8 23 ff ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 10 02 c0 01 	mov    BYTE PTR ds:0xc00210c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 10 02 c0       	push   0xc00210c8
c0000108:	68 74 fb 01 c0       	push   0xc001fb74
c000010d:	e8 ee fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000297:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000029a:	0f 20 d9             	mov    ecx,cr3
c000029d:	39 c8                	cmp    eax,ecx
c000029f:	74 03                	je     c00002a4 <commonThreadSwitch.doneVAS>
c00002a1:	0f 22 d8             	mov    cr3,eax

c00002a4 <commonThreadSwitch.doneVAS>:
c00002a4:	85 d2                	test   edx,edx
c00002a6:	75 11                	jne    c00002b9 <commonThreadSwitch.firstTime>
c00002a8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002ab:	e8 b0 2d 01 00       	call   c0013060 <changeTSS>
c00002b0:	5d                   	pop    ebp
c00002b1:	5f                   	pop    edi
c00002b2:	5e                   	pop    esi
c00002b3:	5a                   	pop    edx
c00002b4:	59                   	pop    ecx
c00002b5:	5b                   	pop    ebx
c00002b6:	58                   	pop    eax
c00002b7:	9d                   	popf   
c00002b8:	c3                   	ret    

c00002b9 <commonThreadSwitch.firstTime>:
c00002b9:	fa                   	cli    
c00002ba:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002bd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002c2:	60                   	pusha  
c00002c3:	e8 66 a0 00 00       	call   c000a32e <mapVASFirstTime>
c00002c8:	61                   	popa   
c00002c9:	89 c4                	mov    esp,eax
c00002cb:	56                   	push   esi
c00002cc:	52                   	push   edx
c00002cd:	e8 8e 2d 01 00       	call   c0013060 <changeTSS>
c00002d2:	5a                   	pop    edx
c00002d3:	5e                   	pop    esi
c00002d4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002db:	5d                   	pop    ebp
c00002dc:	5f                   	pop    edi
c00002dd:	5e                   	pop    esi
c00002de:	59                   	pop    ecx
c00002df:	59                   	pop    ecx
c00002e0:	5b                   	pop    ebx
c00002e1:	58                   	pop    eax
c00002e2:	81 c4 04 00 00 00    	add    esp,0x4
c00002e8:	6a 02                	push   0x2
c00002ea:	9d                   	popf   
c00002eb:	52                   	push   edx
c00002ec:	e8 97 32 01 00       	call   c0013588 <taskStartupFunction>
c00002f1:	5a                   	pop    edx
c00002f2:	50                   	push   eax
c00002f3:	ff d2                	call   edx
c00002f5:	e8 e6 38 01 00       	call   c0013be0 <taskReturned>
c00002fa:	e9 fb ff ff ff       	jmp    c00002fa <commonThreadSwitch.firstTime+0x41>

c00002ff <asmQuickAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmQuickAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 02                	jb     c000030e <asmQuickAcquireLock.spin_with_pause>
c000030c:	fa                   	cli    
c000030d:	c3                   	ret    

c000030e <asmQuickAcquireLock.spin_with_pause>:
c000030e:	f3 90                	pause  
c0000310:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000316:	75 f6                	jne    c000030e <asmQuickAcquireLock.spin_with_pause>
c0000318:	e9 e8 ff ff ff       	jmp    c0000305 <asmQuickAcquireLock.retry>

c000031d <asmQuickReleaseLock>:
c000031d:	55                   	push   ebp
c000031e:	89 e5                	mov    ebp,esp
c0000320:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000327:	5d                   	pop    ebp
c0000328:	c3                   	ret    

c0000329 <asmAcquireLock>:
c0000329:	55                   	push   ebp
c000032a:	89 e5                	mov    ebp,esp
c000032c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032f <asmAcquireLock.retry>:
c000032f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000334:	72 05                	jb     c000033b <asmAcquireLock.spin_with_pause>
c0000336:	9c                   	pushf  
c0000337:	58                   	pop    eax
c0000338:	fa                   	cli    
c0000339:	5d                   	pop    ebp
c000033a:	c3                   	ret    

c000033b <asmAcquireLock.spin_with_pause>:
c000033b:	f3 90                	pause  
c000033d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000343:	75 f6                	jne    c000033b <asmAcquireLock.spin_with_pause>
c0000345:	e9 e5 ff ff ff       	jmp    c000032f <asmAcquireLock.retry>

c000034a <asmReleaseLock>:
c000034a:	55                   	push   ebp
c000034b:	89 e5                	mov    ebp,esp
c000034d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000350:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000353:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000359:	52                   	push   edx
c000035a:	9d                   	popf   
c000035b:	5d                   	pop    ebp
c000035c:	c3                   	ret    

c000035d <loadGDT>:
c000035d:	0f 01 15 c0 1e 02 c0 	lgdtd  ds:0xc0021ec0
c0000364:	66 b8 10 00          	mov    ax,0x10
c0000368:	66 8e d8             	mov    ds,ax
c000036b:	66 8e c0             	mov    es,ax
c000036e:	66 8e e0             	mov    fs,ax
c0000371:	66 8e e8             	mov    gs,ax
c0000374:	66 8e d0             	mov    ss,ax
c0000377:	e9 00 00 00 00       	jmp    c000037c <flush2>

c000037c <flush2>:
c000037c:	c3                   	ret    

c000037d <memcpy>:
c000037d:	e9 6c fe 00 00       	jmp    c00101ee <__not_memcpy>
c0000382:	66 90                	xchg   ax,ax
c0000384:	66 90                	xchg   ax,ax
c0000386:	66 90                	xchg   ax,ax
c0000388:	66 90                	xchg   ax,ax
c000038a:	66 90                	xchg   ax,ax
c000038c:	66 90                	xchg   ax,ax
c000038e:	66 90                	xchg   ax,ax

c0000390 <memcmp>:
c0000390:	56                   	push   esi
c0000391:	53                   	push   ebx
c0000392:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000396:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000039a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000039e:	85 f6                	test   esi,esi
c00003a0:	74 1c                	je     c00003be <memcmp+0x2e>
c00003a2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003a6:	38 cb                	cmp    bl,cl
c00003a8:	75 26                	jne    c00003d0 <memcmp+0x40>
c00003aa:	01 c6                	add    esi,eax
c00003ac:	eb 0a                	jmp    c00003b8 <memcmp+0x28>
c00003ae:	66 90                	xchg   ax,ax
c00003b0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003b2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003b4:	38 d9                	cmp    cl,bl
c00003b6:	75 18                	jne    c00003d0 <memcmp+0x40>
c00003b8:	40                   	inc    eax
c00003b9:	42                   	inc    edx
c00003ba:	39 f0                	cmp    eax,esi
c00003bc:	75 f2                	jne    c00003b0 <memcmp+0x20>
c00003be:	31 c0                	xor    eax,eax
c00003c0:	5b                   	pop    ebx
c00003c1:	5e                   	pop    esi
c00003c2:	c3                   	ret    
c00003c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003d0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003d6:	31 c0                	xor    eax,eax
c00003d8:	88 c8                	mov    al,cl
c00003da:	29 d8                	sub    eax,ebx
c00003dc:	5b                   	pop    ebx
c00003dd:	5e                   	pop    esi
c00003de:	c3                   	ret    
c00003df:	90                   	nop

c00003e0 <memmove>:
c00003e0:	55                   	push   ebp
c00003e1:	57                   	push   edi
c00003e2:	56                   	push   esi
c00003e3:	53                   	push   ebx
c00003e4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003e8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003f0:	39 dd                	cmp    ebp,ebx
c00003f2:	0f 83 98 00 00 00    	jae    c0000490 <memmove+0xb0>
c00003f8:	85 d2                	test   edx,edx
c00003fa:	0f 84 7c 00 00 00    	je     c000047c <memmove+0x9c>
c0000400:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000403:	8d 75 04             	lea    esi,[ebp+0x4]
c0000406:	39 cd                	cmp    ebp,ecx
c0000408:	0f 93 c1             	setae  cl
c000040b:	39 f3                	cmp    ebx,esi
c000040d:	0f 93 c0             	setae  al
c0000410:	89 c6                	mov    esi,eax
c0000412:	09 ce                	or     esi,ecx
c0000414:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000417:	89 f0                	mov    eax,esi
c0000419:	83 f9 0c             	cmp    ecx,0xc
c000041c:	0f 97 c1             	seta   cl
c000041f:	84 c8                	test   al,cl
c0000421:	0f 84 89 00 00 00    	je     c00004b0 <memmove+0xd0>
c0000427:	89 e9                	mov    ecx,ebp
c0000429:	09 d9                	or     ecx,ebx
c000042b:	83 e1 03             	and    ecx,0x3
c000042e:	0f 85 7c 00 00 00    	jne    c00004b0 <memmove+0xd0>
c0000434:	89 d7                	mov    edi,edx
c0000436:	89 d9                	mov    ecx,ebx
c0000438:	83 e7 fc             	and    edi,0xfffffffc
c000043b:	89 ee                	mov    esi,ebp
c000043d:	01 df                	add    edi,ebx
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x60>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0x9c>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0x9c>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0x9c>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0x9c>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0x9c>
c0000496:	4b                   	dec    ebx
c0000497:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	4a                   	dec    edx
c00004a7:	75 f7                	jne    c00004a0 <memmove+0xc0>
c00004a9:	5b                   	pop    ebx
c00004aa:	89 e8                	mov    eax,ebp
c00004ac:	5e                   	pop    esi
c00004ad:	5f                   	pop    edi
c00004ae:	5d                   	pop    ebp
c00004af:	c3                   	ret    
c00004b0:	01 ea                	add    edx,ebp
c00004b2:	89 e9                	mov    ecx,ebp
c00004b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004c0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004c2:	41                   	inc    ecx
c00004c3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004c6:	43                   	inc    ebx
c00004c7:	39 d1                	cmp    ecx,edx
c00004c9:	75 f5                	jne    c00004c0 <memmove+0xe0>
c00004cb:	eb af                	jmp    c000047c <memmove+0x9c>
c00004cd:	8d 76 00             	lea    esi,[esi+0x0]

c00004d0 <memset>:
c00004d0:	57                   	push   edi
c00004d1:	53                   	push   ebx
c00004d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004d6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004da:	85 d2                	test   edx,edx
c00004dc:	74 1f                	je     c00004fd <memset+0x2d>
c00004de:	31 c0                	xor    eax,eax
c00004e0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00004e4:	88 c4                	mov    ah,al
c00004e6:	89 c1                	mov    ecx,eax
c00004e8:	c1 e1 10             	shl    ecx,0x10
c00004eb:	09 c8                	or     eax,ecx
c00004ed:	83 fa 04             	cmp    edx,0x4
c00004f0:	73 1e                	jae    c0000510 <memset+0x40>
c00004f2:	85 d2                	test   edx,edx
c00004f4:	74 07                	je     c00004fd <memset+0x2d>
c00004f6:	88 03                	mov    BYTE PTR [ebx],al
c00004f8:	f6 c2 02             	test   dl,0x2
c00004fb:	75 30                	jne    c000052d <memset+0x5d>
c00004fd:	89 d8                	mov    eax,ebx
c00004ff:	5b                   	pop    ebx
c0000500:	5f                   	pop    edi
c0000501:	c3                   	ret    
c0000502:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000509:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000510:	89 03                	mov    DWORD PTR [ebx],eax
c0000512:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000515:	89 d9                	mov    ecx,ebx
c0000517:	83 e7 fc             	and    edi,0xfffffffc
c000051a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000051e:	29 f9                	sub    ecx,edi
c0000520:	01 d1                	add    ecx,edx
c0000522:	c1 e9 02             	shr    ecx,0x2
c0000525:	fc                   	cld    
c0000526:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000528:	89 d8                	mov    eax,ebx
c000052a:	5b                   	pop    ebx
c000052b:	5f                   	pop    edi
c000052c:	c3                   	ret    
c000052d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000532:	eb c9                	jmp    c00004fd <memset+0x2d>
c0000534:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000053a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000540 <strlen>:
c0000540:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000544:	31 c0                	xor    eax,eax
c0000546:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000549:	74 15                	je     c0000560 <strlen+0x20>
c000054b:	90                   	nop
c000054c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000550:	40                   	inc    eax
c0000551:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000555:	75 f9                	jne    c0000550 <strlen+0x10>
c0000557:	c3                   	ret    
c0000558:	90                   	nop
c0000559:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000560:	c3                   	ret    
c0000561:	eb 0d                	jmp    c0000570 <strpbrk>
c0000563:	90                   	nop
c0000564:	90                   	nop
c0000565:	90                   	nop
c0000566:	90                   	nop
c0000567:	90                   	nop
c0000568:	90                   	nop
c0000569:	90                   	nop
c000056a:	90                   	nop
c000056b:	90                   	nop
c000056c:	90                   	nop
c000056d:	90                   	nop
c000056e:	90                   	nop
c000056f:	90                   	nop

c0000570 <strpbrk>:
c0000570:	57                   	push   edi
c0000571:	56                   	push   esi
c0000572:	53                   	push   ebx
c0000573:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000577:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000057b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000057d:	84 db                	test   bl,bl
c000057f:	74 21                	je     c00005a2 <strpbrk+0x32>
c0000581:	8a 07                	mov    al,BYTE PTR [edi]
c0000583:	84 c0                	test   al,al
c0000585:	74 14                	je     c000059b <strpbrk+0x2b>
c0000587:	38 d8                	cmp    al,bl
c0000589:	74 19                	je     c00005a4 <strpbrk+0x34>
c000058b:	89 fa                	mov    edx,edi
c000058d:	eb 05                	jmp    c0000594 <strpbrk+0x24>
c000058f:	90                   	nop
c0000590:	38 d9                	cmp    cl,bl
c0000592:	74 10                	je     c00005a4 <strpbrk+0x34>
c0000594:	42                   	inc    edx
c0000595:	8a 0a                	mov    cl,BYTE PTR [edx]
c0000597:	84 c9                	test   cl,cl
c0000599:	75 f5                	jne    c0000590 <strpbrk+0x20>
c000059b:	46                   	inc    esi
c000059c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059e:	84 db                	test   bl,bl
c00005a0:	75 e1                	jne    c0000583 <strpbrk+0x13>
c00005a2:	31 f6                	xor    esi,esi
c00005a4:	89 f0                	mov    eax,esi
c00005a6:	5b                   	pop    ebx
c00005a7:	5e                   	pop    esi
c00005a8:	5f                   	pop    edi
c00005a9:	c3                   	ret    
c00005aa:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005b0 <strtok>:
c00005b0:	56                   	push   esi
c00005b1:	53                   	push   ebx
c00005b2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005b6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005ba:	85 db                	test   ebx,ebx
c00005bc:	75 07                	jne    c00005c5 <strtok+0x15>
c00005be:	eb 30                	jmp    c00005f0 <strtok+0x40>
c00005c0:	43                   	inc    ebx
c00005c1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005c5:	56                   	push   esi
c00005c6:	53                   	push   ebx
c00005c7:	e8 a4 ff ff ff       	call   c0000570 <strpbrk>
c00005cc:	5a                   	pop    edx
c00005cd:	a3 e0 10 02 c0       	mov    ds:0xc00210e0,eax
c00005d2:	59                   	pop    ecx
c00005d3:	39 d8                	cmp    eax,ebx
c00005d5:	74 e9                	je     c00005c0 <strtok+0x10>
c00005d7:	85 c0                	test   eax,eax
c00005d9:	74 1f                	je     c00005fa <strtok+0x4a>
c00005db:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005de:	8d 50 01             	lea    edx,[eax+0x1]
c00005e1:	89 d8                	mov    eax,ebx
c00005e3:	89 15 e0 10 02 c0    	mov    DWORD PTR ds:0xc00210e0,edx
c00005e9:	5b                   	pop    ebx
c00005ea:	5e                   	pop    esi
c00005eb:	c3                   	ret    
c00005ec:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00005f0:	8b 1d e0 10 02 c0    	mov    ebx,DWORD PTR ds:0xc00210e0
c00005f6:	85 db                	test   ebx,ebx
c00005f8:	75 cb                	jne    c00005c5 <strtok+0x15>
c00005fa:	31 c0                	xor    eax,eax
c00005fc:	5b                   	pop    ebx
c00005fd:	5e                   	pop    esi
c00005fe:	c3                   	ret    
c00005ff:	90                   	nop

c0000600 <strcpy>:
c0000600:	53                   	push   ebx
c0000601:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000605:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000609:	89 c3                	mov    ebx,eax
c000060b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000060d:	84 d2                	test   dl,dl
c000060f:	74 19                	je     c000062a <strcpy+0x2a>
c0000611:	eb 0d                	jmp    c0000620 <strcpy+0x20>
c0000613:	90                   	nop
c0000614:	90                   	nop
c0000615:	90                   	nop
c0000616:	90                   	nop
c0000617:	90                   	nop
c0000618:	90                   	nop
c0000619:	90                   	nop
c000061a:	90                   	nop
c000061b:	90                   	nop
c000061c:	90                   	nop
c000061d:	90                   	nop
c000061e:	90                   	nop
c000061f:	90                   	nop
c0000620:	88 13                	mov    BYTE PTR [ebx],dl
c0000622:	41                   	inc    ecx
c0000623:	43                   	inc    ebx
c0000624:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000626:	84 d2                	test   dl,dl
c0000628:	75 f6                	jne    c0000620 <strcpy+0x20>
c000062a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000062d:	5b                   	pop    ebx
c000062e:	c3                   	ret    
c000062f:	90                   	nop

c0000630 <strncpy>:
c0000630:	57                   	push   edi
c0000631:	56                   	push   esi
c0000632:	53                   	push   ebx
c0000633:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000637:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000063b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000063f:	85 ff                	test   edi,edi
c0000641:	74 3e                	je     c0000681 <strncpy+0x51>
c0000643:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000645:	8d 47 ff             	lea    eax,[edi-0x1]
c0000648:	8d 4a 01             	lea    ecx,[edx+0x1]
c000064b:	88 1a                	mov    BYTE PTR [edx],bl
c000064d:	84 db                	test   bl,bl
c000064f:	74 3f                	je     c0000690 <strncpy+0x60>
c0000651:	85 c0                	test   eax,eax
c0000653:	74 2c                	je     c0000681 <strncpy+0x51>
c0000655:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000658:	8d 47 fe             	lea    eax,[edi-0x2]
c000065b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000065e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000661:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000664:	84 db                	test   bl,bl
c0000666:	75 15                	jne    c000067d <strncpy+0x4d>
c0000668:	eb 26                	jmp    c0000690 <strncpy+0x60>
c000066a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000670:	47                   	inc    edi
c0000671:	41                   	inc    ecx
c0000672:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000675:	48                   	dec    eax
c0000676:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000679:	84 db                	test   bl,bl
c000067b:	74 13                	je     c0000690 <strncpy+0x60>
c000067d:	85 c0                	test   eax,eax
c000067f:	75 ef                	jne    c0000670 <strncpy+0x40>
c0000681:	5b                   	pop    ebx
c0000682:	89 d0                	mov    eax,edx
c0000684:	5e                   	pop    esi
c0000685:	5f                   	pop    edi
c0000686:	c3                   	ret    
c0000687:	89 f6                	mov    esi,esi
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000690:	85 c0                	test   eax,eax
c0000692:	74 ed                	je     c0000681 <strncpy+0x51>
c0000694:	83 f8 04             	cmp    eax,0x4
c0000697:	73 17                	jae    c00006b0 <strncpy+0x80>
c0000699:	85 c0                	test   eax,eax
c000069b:	74 e4                	je     c0000681 <strncpy+0x51>
c000069d:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006a0:	a8 02                	test   al,0x2
c00006a2:	74 dd                	je     c0000681 <strncpy+0x51>
c00006a4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006ab:	eb d4                	jmp    c0000681 <strncpy+0x51>
c00006ad:	8d 76 00             	lea    esi,[esi+0x0]
c00006b0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006b6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006b9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006c1:	83 e7 fc             	and    edi,0xfffffffc
c00006c4:	29 f9                	sub    ecx,edi
c00006c6:	01 c1                	add    ecx,eax
c00006c8:	c1 e9 02             	shr    ecx,0x2
c00006cb:	fc                   	cld    
c00006cc:	31 c0                	xor    eax,eax
c00006ce:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006d0:	89 d0                	mov    eax,edx
c00006d2:	5b                   	pop    ebx
c00006d3:	5e                   	pop    esi
c00006d4:	5f                   	pop    edi
c00006d5:	c3                   	ret    
c00006d6:	8d 76 00             	lea    esi,[esi+0x0]
c00006d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00006e0 <strcmp>:
c00006e0:	56                   	push   esi
c00006e1:	53                   	push   ebx
c00006e2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00006e6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00006ea:	8a 16                	mov    dl,BYTE PTR [esi]
c00006ec:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00006ee:	38 d1                	cmp    cl,dl
c00006f0:	75 1d                	jne    c000070f <strcmp+0x2f>
c00006f2:	84 c9                	test   cl,cl
c00006f4:	74 2a                	je     c0000720 <strcmp+0x40>
c00006f6:	b8 01 00 00 00       	mov    eax,0x1
c00006fb:	eb 08                	jmp    c0000705 <strcmp+0x25>
c00006fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000700:	40                   	inc    eax
c0000701:	84 d2                	test   dl,dl
c0000703:	74 1b                	je     c0000720 <strcmp+0x40>
c0000705:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000708:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000070b:	38 ca                	cmp    dl,cl
c000070d:	74 f1                	je     c0000700 <strcmp+0x20>
c000070f:	31 c0                	xor    eax,eax
c0000711:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000717:	88 d0                	mov    al,dl
c0000719:	5b                   	pop    ebx
c000071a:	29 c8                	sub    eax,ecx
c000071c:	5e                   	pop    esi
c000071d:	c3                   	ret    
c000071e:	66 90                	xchg   ax,ax
c0000720:	31 c0                	xor    eax,eax
c0000722:	5b                   	pop    ebx
c0000723:	5e                   	pop    esi
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000730 <strchr>:
c0000730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000734:	8a 10                	mov    dl,BYTE PTR [eax]
c0000736:	84 d2                	test   dl,dl
c0000738:	74 21                	je     c000075b <strchr+0x2b>
c000073a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000073e:	38 ca                	cmp    dl,cl
c0000740:	75 12                	jne    c0000754 <strchr+0x24>
c0000742:	eb 1a                	jmp    c000075e <strchr+0x2e>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000750:	38 ca                	cmp    dl,cl
c0000752:	74 09                	je     c000075d <strchr+0x2d>
c0000754:	40                   	inc    eax
c0000755:	8a 10                	mov    dl,BYTE PTR [eax]
c0000757:	84 d2                	test   dl,dl
c0000759:	75 f5                	jne    c0000750 <strchr+0x20>
c000075b:	31 c0                	xor    eax,eax
c000075d:	c3                   	ret    
c000075e:	c3                   	ret    
c000075f:	90                   	nop

c0000760 <strncmp>:
c0000760:	57                   	push   edi
c0000761:	56                   	push   esi
c0000762:	53                   	push   ebx
c0000763:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000767:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000076f:	85 ff                	test   edi,edi
c0000771:	74 2f                	je     c00007a2 <strncmp+0x42>
c0000773:	8a 16                	mov    dl,BYTE PTR [esi]
c0000775:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000777:	38 d1                	cmp    cl,dl
c0000779:	75 35                	jne    c00007b0 <strncmp+0x50>
c000077b:	8d 46 01             	lea    eax,[esi+0x1]
c000077e:	84 c9                	test   cl,cl
c0000780:	74 20                	je     c00007a2 <strncmp+0x42>
c0000782:	01 fe                	add    esi,edi
c0000784:	eb 17                	jmp    c000079d <strncmp+0x3d>
c0000786:	8d 76 00             	lea    esi,[esi+0x0]
c0000789:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000790:	8a 10                	mov    dl,BYTE PTR [eax]
c0000792:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000794:	38 ca                	cmp    dl,cl
c0000796:	75 18                	jne    c00007b0 <strncmp+0x50>
c0000798:	40                   	inc    eax
c0000799:	84 d2                	test   dl,dl
c000079b:	74 05                	je     c00007a2 <strncmp+0x42>
c000079d:	43                   	inc    ebx
c000079e:	39 c6                	cmp    esi,eax
c00007a0:	75 ee                	jne    c0000790 <strncmp+0x30>
c00007a2:	5b                   	pop    ebx
c00007a3:	31 c0                	xor    eax,eax
c00007a5:	5e                   	pop    esi
c00007a6:	5f                   	pop    edi
c00007a7:	c3                   	ret    
c00007a8:	90                   	nop
c00007a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007b0:	5b                   	pop    ebx
c00007b1:	31 c0                	xor    eax,eax
c00007b3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007b9:	88 d0                	mov    al,dl
c00007bb:	5e                   	pop    esi
c00007bc:	29 c8                	sub    eax,ecx
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    

c00007c0 <strcat>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	89 c3                	mov    ebx,eax
c00007cc:	eb 04                	jmp    c00007d2 <strcat+0x12>
c00007ce:	66 90                	xchg   ax,ax
c00007d0:	89 d3                	mov    ebx,edx
c00007d2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007d5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007d9:	75 f5                	jne    c00007d0 <strcat+0x10>
c00007db:	31 d2                	xor    edx,edx
c00007dd:	8d 76 00             	lea    esi,[esi+0x0]
c00007e0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00007e3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00007e6:	42                   	inc    edx
c00007e7:	84 c9                	test   cl,cl
c00007e9:	75 f5                	jne    c00007e0 <strcat+0x20>
c00007eb:	5b                   	pop    ebx
c00007ec:	5e                   	pop    esi
c00007ed:	c3                   	ret    
c00007ee:	66 90                	xchg   ax,ax

c00007f0 <strncat>:
c00007f0:	56                   	push   esi
c00007f1:	53                   	push   ebx
c00007f2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00007fe:	85 f6                	test   esi,esi
c0000800:	74 2e                	je     c0000830 <strncat+0x40>
c0000802:	89 c2                	mov    edx,eax
c0000804:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000080a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000810:	42                   	inc    edx
c0000811:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000815:	75 f9                	jne    c0000810 <strncat+0x20>
c0000817:	01 ce                	add    esi,ecx
c0000819:	eb 0a                	jmp    c0000825 <strncat+0x35>
c000081b:	90                   	nop
c000081c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000820:	39 f1                	cmp    ecx,esi
c0000822:	74 1c                	je     c0000840 <strncat+0x50>
c0000824:	42                   	inc    edx
c0000825:	41                   	inc    ecx
c0000826:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000829:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000082c:	84 db                	test   bl,bl
c000082e:	75 f0                	jne    c0000820 <strncat+0x30>
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000839:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000840:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000843:	5b                   	pop    ebx
c0000844:	5e                   	pop    esi
c0000845:	c3                   	ret    
c0000846:	8d 76 00             	lea    esi,[esi+0x0]
c0000849:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000850 <strstr>:
c0000850:	57                   	push   edi
c0000851:	56                   	push   esi
c0000852:	53                   	push   ebx
c0000853:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000857:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000085b:	57                   	push   edi
c000085c:	e8 df fc ff ff       	call   c0000540 <strlen>
c0000861:	59                   	pop    ecx
c0000862:	85 c0                	test   eax,eax
c0000864:	74 3a                	je     c00008a0 <strstr+0x50>
c0000866:	89 c6                	mov    esi,eax
c0000868:	eb 16                	jmp    c0000880 <strstr+0x30>
c000086a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000870:	56                   	push   esi
c0000871:	57                   	push   edi
c0000872:	53                   	push   ebx
c0000873:	e8 18 fb ff ff       	call   c0000390 <memcmp>
c0000878:	83 c4 0c             	add    esp,0xc
c000087b:	85 c0                	test   eax,eax
c000087d:	74 21                	je     c00008a0 <strstr+0x50>
c000087f:	43                   	inc    ebx
c0000880:	53                   	push   ebx
c0000881:	e8 ba fc ff ff       	call   c0000540 <strlen>
c0000886:	5a                   	pop    edx
c0000887:	39 f0                	cmp    eax,esi
c0000889:	73 e5                	jae    c0000870 <strstr+0x20>
c000088b:	5b                   	pop    ebx
c000088c:	31 c0                	xor    eax,eax
c000088e:	5e                   	pop    esi
c000088f:	5f                   	pop    edi
c0000890:	c3                   	ret    
c0000891:	eb 0d                	jmp    c00008a0 <strstr+0x50>
c0000893:	90                   	nop
c0000894:	90                   	nop
c0000895:	90                   	nop
c0000896:	90                   	nop
c0000897:	90                   	nop
c0000898:	90                   	nop
c0000899:	90                   	nop
c000089a:	90                   	nop
c000089b:	90                   	nop
c000089c:	90                   	nop
c000089d:	90                   	nop
c000089e:	90                   	nop
c000089f:	90                   	nop
c00008a0:	89 d8                	mov    eax,ebx
c00008a2:	5b                   	pop    ebx
c00008a3:	5e                   	pop    esi
c00008a4:	5f                   	pop    edi
c00008a5:	c3                   	ret    
c00008a6:	8d 76 00             	lea    esi,[esi+0x0]
c00008a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008b0 <toupper>:
c00008b0:	31 d2                	xor    edx,edx
c00008b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008b6:	88 c2                	mov    dl,al
c00008b8:	f6 82 20 ce 01 c0 02 	test   BYTE PTR [edx-0x3ffe31e0],0x2
c00008bf:	74 03                	je     c00008c4 <toupper+0x14>
c00008c1:	83 e8 20             	sub    eax,0x20
c00008c4:	c3                   	ret    
c00008c5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <tolower>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 20 ce 01 c0 01 	test   BYTE PTR [edx-0x3ffe31e0],0x1
c00008df:	74 03                	je     c00008e4 <tolower+0x14>
c00008e1:	83 c0 20             	add    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <simple_strtoul>:
c00008f0:	55                   	push   ebp
c00008f1:	57                   	push   edi
c00008f2:	56                   	push   esi
c00008f3:	53                   	push   ebx
c00008f4:	83 ec 08             	sub    esp,0x8
c00008f7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008fb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008ff:	90                   	nop
c0000900:	31 d2                	xor    edx,edx
c0000902:	8a 01                	mov    al,BYTE PTR [ecx]
c0000904:	88 c2                	mov    dl,al
c0000906:	f6 82 20 ce 01 c0 08 	test   BYTE PTR [edx-0x3ffe31e0],0x8
c000090d:	75 04                	jne    c0000913 <simple_strtoul+0x23>
c000090f:	3c 09                	cmp    al,0x9
c0000911:	75 0d                	jne    c0000920 <simple_strtoul+0x30>
c0000913:	41                   	inc    ecx
c0000914:	eb ea                	jmp    c0000900 <simple_strtoul+0x10>
c0000916:	8d 76 00             	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	3c 2d                	cmp    al,0x2d
c0000922:	0f 84 48 01 00 00    	je     c0000a70 <simple_strtoul+0x180>
c0000928:	3c 2b                	cmp    al,0x2b
c000092a:	0f 84 e0 00 00 00    	je     c0000a10 <simple_strtoul+0x120>
c0000930:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000938:	85 f6                	test   esi,esi
c000093a:	0f 85 e1 00 00 00    	jne    c0000a21 <simple_strtoul+0x131>
c0000940:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000943:	80 fa 30             	cmp    dl,0x30
c0000946:	0f 84 75 01 00 00    	je     c0000ac1 <simple_strtoul+0x1d1>
c000094c:	be 0a 00 00 00       	mov    esi,0xa
c0000951:	84 d2                	test   dl,dl
c0000953:	0f 84 9f 01 00 00    	je     c0000af8 <simple_strtoul+0x208>
c0000959:	31 ed                	xor    ebp,ebp
c000095b:	31 ff                	xor    edi,edi
c000095d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000964:	eb 35                	jmp    c000099b <simple_strtoul+0xab>
c0000966:	8d 76 00             	lea    esi,[esi+0x0]
c0000969:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000970:	83 eb 30             	sub    ebx,0x30
c0000973:	39 f3                	cmp    ebx,esi
c0000975:	73 59                	jae    c00009d0 <simple_strtoul+0xe0>
c0000977:	31 d2                	xor    edx,edx
c0000979:	89 d8                	mov    eax,ebx
c000097b:	f7 d0                	not    eax
c000097d:	f7 f6                	div    esi
c000097f:	39 f8                	cmp    eax,edi
c0000981:	0f 82 c9 00 00 00    	jb     c0000a50 <simple_strtoul+0x160>
c0000987:	0f af fe             	imul   edi,esi
c000098a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000991:	01 df                	add    edi,ebx
c0000993:	41                   	inc    ecx
c0000994:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000997:	84 d2                	test   dl,dl
c0000999:	74 35                	je     c00009d0 <simple_strtoul+0xe0>
c000099b:	31 db                	xor    ebx,ebx
c000099d:	88 d3                	mov    bl,dl
c000099f:	f6 83 20 ce 01 c0 04 	test   BYTE PTR [ebx-0x3ffe31e0],0x4
c00009a6:	75 c8                	jne    c0000970 <simple_strtoul+0x80>
c00009a8:	52                   	push   edx
c00009a9:	e8 02 ff ff ff       	call   c00008b0 <toupper>
c00009ae:	31 d2                	xor    edx,edx
c00009b0:	5b                   	pop    ebx
c00009b1:	88 c2                	mov    dl,al
c00009b3:	f6 82 20 ce 01 c0 01 	test   BYTE PTR [edx-0x3ffe31e0],0x1
c00009ba:	74 14                	je     c00009d0 <simple_strtoul+0xe0>
c00009bc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009bf:	39 f3                	cmp    ebx,esi
c00009c1:	72 b4                	jb     c0000977 <simple_strtoul+0x87>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009d4:	85 c0                	test   eax,eax
c00009d6:	74 18                	je     c00009f0 <simple_strtoul+0x100>
c00009d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009db:	09 f8                	or     eax,edi
c00009dd:	0f 85 7d 00 00 00    	jne    c0000a60 <simple_strtoul+0x170>
c00009e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009e7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00009eb:	31 ff                	xor    edi,edi
c00009ed:	89 30                	mov    DWORD PTR [eax],esi
c00009ef:	90                   	nop
c00009f0:	4d                   	dec    ebp
c00009f1:	75 05                	jne    c00009f8 <simple_strtoul+0x108>
c00009f3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00009f8:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009fd:	75 02                	jne    c0000a01 <simple_strtoul+0x111>
c00009ff:	f7 df                	neg    edi
c0000a01:	83 c4 08             	add    esp,0x8
c0000a04:	89 f8                	mov    eax,edi
c0000a06:	5b                   	pop    ebx
c0000a07:	5e                   	pop    esi
c0000a08:	5f                   	pop    edi
c0000a09:	5d                   	pop    ebp
c0000a0a:	c3                   	ret    
c0000a0b:	90                   	nop
c0000a0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a10:	41                   	inc    ecx
c0000a11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a19:	85 f6                	test   esi,esi
c0000a1b:	0f 84 1f ff ff ff    	je     c0000940 <simple_strtoul+0x50>
c0000a21:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a24:	83 f8 22             	cmp    eax,0x22
c0000a27:	77 7b                	ja     c0000aa4 <simple_strtoul+0x1b4>
c0000a29:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a2c:	83 fe 08             	cmp    esi,0x8
c0000a2f:	0f 84 b3 00 00 00    	je     c0000ae8 <simple_strtoul+0x1f8>
c0000a35:	83 fe 10             	cmp    esi,0x10
c0000a38:	0f 85 13 ff ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000a3e:	80 fa 30             	cmp    dl,0x30
c0000a41:	74 3b                	je     c0000a7e <simple_strtoul+0x18e>
c0000a43:	be 10 00 00 00       	mov    esi,0x10
c0000a48:	e9 04 ff ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a50:	bd 01 00 00 00       	mov    ebp,0x1
c0000a55:	31 ff                	xor    edi,edi
c0000a57:	e9 37 ff ff ff       	jmp    c0000993 <simple_strtoul+0xa3>
c0000a5c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	89 08                	mov    DWORD PTR [eax],ecx
c0000a66:	eb 88                	jmp    c00009f0 <simple_strtoul+0x100>
c0000a68:	90                   	nop
c0000a69:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a70:	41                   	inc    ecx
c0000a71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a79:	e9 ba fe ff ff       	jmp    c0000938 <simple_strtoul+0x48>
c0000a7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000a82:	88 04 24             	mov    BYTE PTR [esp],al
c0000a85:	50                   	push   eax
c0000a86:	e8 45 fe ff ff       	call   c00008d0 <tolower>
c0000a8b:	5e                   	pop    esi
c0000a8c:	83 f8 78             	cmp    eax,0x78
c0000a8f:	0f 84 88 00 00 00    	je     c0000b1d <simple_strtoul+0x22d>
c0000a95:	41                   	inc    ecx
c0000a96:	be 10 00 00 00       	mov    esi,0x10
c0000a9b:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000a9f:	e9 ad fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000aa4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000aa8:	85 ff                	test   edi,edi
c0000aaa:	74 5e                	je     c0000b0a <simple_strtoul+0x21a>
c0000aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab0:	85 c9                	test   ecx,ecx
c0000ab2:	75 50                	jne    c0000b04 <simple_strtoul+0x214>
c0000ab4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aba:	31 ff                	xor    edi,edi
c0000abc:	e9 37 ff ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000ac1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ac5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ac8:	50                   	push   eax
c0000ac9:	e8 02 fe ff ff       	call   c00008d0 <tolower>
c0000ace:	5d                   	pop    ebp
c0000acf:	83 f8 78             	cmp    eax,0x78
c0000ad2:	74 3d                	je     c0000b11 <simple_strtoul+0x221>
c0000ad4:	41                   	inc    ecx
c0000ad5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000ad9:	80 fa 30             	cmp    dl,0x30
c0000adc:	74 13                	je     c0000af1 <simple_strtoul+0x201>
c0000ade:	be 08 00 00 00       	mov    esi,0x8
c0000ae3:	e9 69 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000ae8:	80 fa 30             	cmp    dl,0x30
c0000aeb:	0f 85 60 fe ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000af1:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000af5:	41                   	inc    ecx
c0000af6:	eb e6                	jmp    c0000ade <simple_strtoul+0x1ee>
c0000af8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000afc:	85 d2                	test   edx,edx
c0000afe:	74 0a                	je     c0000b0a <simple_strtoul+0x21a>
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b08:	89 30                	mov    DWORD PTR [eax],esi
c0000b0a:	31 ff                	xor    edi,edi
c0000b0c:	e9 e7 fe ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000b11:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b15:	83 c1 02             	add    ecx,0x2
c0000b18:	e9 21 ff ff ff       	jmp    c0000a3e <simple_strtoul+0x14e>
c0000b1d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b21:	be 10 00 00 00       	mov    esi,0x10
c0000b26:	83 c1 02             	add    ecx,0x2
c0000b29:	e9 23 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>

c0000b2e <largebin_index>:
c0000b2e:	89 c2                	mov    edx,eax
c0000b30:	c1 ea 08             	shr    edx,0x8
c0000b33:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b39:	77 10                	ja     c0000b4b <largebin_index+0x1d>
c0000b3b:	0f bd d2             	bsr    edx,edx
c0000b3e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b41:	d3 e8                	shr    eax,cl
c0000b43:	83 e0 03             	and    eax,0x3
c0000b46:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b4a:	c3                   	ret    
c0000b4b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b50:	c3                   	ret    

c0000b51 <malloc_init_state>:
c0000b51:	53                   	push   ebx
c0000b52:	8d 50 34             	lea    edx,[eax+0x34]
c0000b55:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b5b:	89 d1                	mov    ecx,edx
c0000b5d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b60:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b63:	83 c2 08             	add    edx,0x8
c0000b66:	39 da                	cmp    edx,ebx
c0000b68:	75 f3                	jne    c0000b5d <malloc_init_state+0xc>
c0000b6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b6c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b76:	83 e2 03             	and    edx,0x3
c0000b79:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000b83:	83 ca 48             	or     edx,0x48
c0000b86:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000b90:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000b9a:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ba1:	89 10                	mov    DWORD PTR [eax],edx
c0000ba3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ba6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bb0:	5b                   	pop    ebx
c0000bb1:	c3                   	ret    

c0000bb2 <malloc_consolidate>:
c0000bb2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bb4:	85 d2                	test   edx,edx
c0000bb6:	0f 84 d8 00 00 00    	je     c0000c94 <malloc_consolidate+0xe2>
c0000bbc:	55                   	push   ebp
c0000bbd:	83 e2 fd             	and    edx,0xfffffffd
c0000bc0:	57                   	push   edi
c0000bc1:	89 c5                	mov    ebp,eax
c0000bc3:	56                   	push   esi
c0000bc4:	8d 78 34             	lea    edi,[eax+0x34]
c0000bc7:	53                   	push   ebx
c0000bc8:	83 ec 10             	sub    esp,0x10
c0000bcb:	89 10                	mov    DWORD PTR [eax],edx
c0000bcd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bd1:	c1 ea 03             	shr    edx,0x3
c0000bd4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bd8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bdc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bdf:	85 d2                	test   edx,edx
c0000be1:	0f 84 98 00 00 00    	je     c0000c7f <malloc_consolidate+0xcd>
c0000be7:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000bee:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000bf1:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000bf4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000bf8:	89 f9                	mov    ecx,edi
c0000bfa:	83 e1 fe             	and    ecx,0xfffffffe
c0000bfd:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c00:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c03:	83 e3 fc             	and    ebx,0xfffffffc
c0000c06:	83 e7 01             	and    edi,0x1
c0000c09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c0c:	75 14                	jne    c0000c22 <malloc_consolidate+0x70>
c0000c0e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c10:	29 fa                	sub    edx,edi
c0000c12:	01 f9                	add    ecx,edi
c0000c14:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c17:	89 fb                	mov    ebx,edi
c0000c19:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c1c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c1f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c22:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c25:	74 40                	je     c0000c67 <malloc_consolidate+0xb5>
c0000c27:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c2a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c2d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c31:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c34:	83 e7 01             	and    edi,0x1
c0000c37:	75 0e                	jne    c0000c47 <malloc_consolidate+0x95>
c0000c39:	01 d9                	add    ecx,ebx
c0000c3b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c3e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c41:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c44:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c47:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c4a:	89 ce                	mov    esi,ecx
c0000c4c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c4f:	83 ce 01             	or     esi,0x1
c0000c52:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c55:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c58:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c5b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c5f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c62:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c65:	eb 0c                	jmp    c0000c73 <malloc_consolidate+0xc1>
c0000c67:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c6a:	83 c9 01             	or     ecx,0x1
c0000c6d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c70:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c77:	85 d2                	test   edx,edx
c0000c79:	0f 85 6f ff ff ff    	jne    c0000bee <malloc_consolidate+0x3c>
c0000c7f:	83 c5 04             	add    ebp,0x4
c0000c82:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000c86:	0f 85 50 ff ff ff    	jne    c0000bdc <malloc_consolidate+0x2a>
c0000c8c:	83 c4 10             	add    esp,0x10
c0000c8f:	5b                   	pop    ebx
c0000c90:	5e                   	pop    esi
c0000c91:	5f                   	pop    edi
c0000c92:	5d                   	pop    ebp
c0000c93:	c3                   	ret    
c0000c94:	e9 b8 fe ff ff       	jmp    c0000b51 <malloc_init_state>

c0000c99 <dlfree>:
c0000c99:	57                   	push   edi
c0000c9a:	56                   	push   esi
c0000c9b:	53                   	push   ebx
c0000c9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ca0:	85 db                	test   ebx,ebx
c0000ca2:	0f 84 e2 00 00 00    	je     c0000d8a <dlfree+0xf1>
c0000ca8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cab:	8b 0d 00 11 02 c0    	mov    ecx,DWORD PTR ds:0xc0021100
c0000cb1:	89 f0                	mov    eax,esi
c0000cb3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cb6:	83 e0 fc             	and    eax,0xfffffffc
c0000cb9:	39 c1                	cmp    ecx,eax
c0000cbb:	72 24                	jb     c0000ce1 <dlfree+0x48>
c0000cbd:	83 c9 03             	or     ecx,0x3
c0000cc0:	c1 e8 03             	shr    eax,0x3
c0000cc3:	89 0d 00 11 02 c0    	mov    DWORD PTR ds:0xc0021100,ecx
c0000cc9:	83 e8 02             	sub    eax,0x2
c0000ccc:	8b 0c 85 04 11 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdeefc]
c0000cd3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cd5:	89 14 85 04 11 02 c0 	mov    DWORD PTR [eax*4-0x3ffdeefc],edx
c0000cdc:	e9 a9 00 00 00       	jmp    c0000d8a <dlfree+0xf1>
c0000ce1:	83 e6 02             	and    esi,0x2
c0000ce4:	0f 85 a0 00 00 00    	jne    c0000d8a <dlfree+0xf1>
c0000cea:	83 c9 01             	or     ecx,0x1
c0000ced:	8d 34 02             	lea    esi,[edx+eax*1]
c0000cf0:	89 0d 00 11 02 c0    	mov    DWORD PTR ds:0xc0021100,ecx
c0000cf6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000cf9:	83 e1 fc             	and    ecx,0xfffffffc
c0000cfc:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d00:	75 13                	jne    c0000d15 <dlfree+0x7c>
c0000d02:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d05:	29 da                	sub    edx,ebx
c0000d07:	01 d8                	add    eax,ebx
c0000d09:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d0c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d0f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d12:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d15:	39 35 2c 11 02 c0    	cmp    DWORD PTR ds:0xc002112c,esi
c0000d1b:	74 40                	je     c0000d5d <dlfree+0xc4>
c0000d1d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d21:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d24:	80 e3 01             	and    bl,0x1
c0000d27:	75 0e                	jne    c0000d37 <dlfree+0x9e>
c0000d29:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d2c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d2f:	01 c8                	add    eax,ecx
c0000d31:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d34:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d37:	8b 0d 3c 11 02 c0    	mov    ecx,DWORD PTR ds:0xc002113c
c0000d3d:	c7 42 0c 34 11 02 c0 	mov    DWORD PTR [edx+0xc],0xc0021134
c0000d44:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d47:	89 15 3c 11 02 c0    	mov    DWORD PTR ds:0xc002113c,edx
c0000d4d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d50:	89 c1                	mov    ecx,eax
c0000d52:	83 c9 01             	or     ecx,0x1
c0000d55:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d58:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d5b:	eb 10                	jmp    c0000d6d <dlfree+0xd4>
c0000d5d:	01 c8                	add    eax,ecx
c0000d5f:	89 c1                	mov    ecx,eax
c0000d61:	83 c9 01             	or     ecx,0x1
c0000d64:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d67:	89 15 2c 11 02 c0    	mov    DWORD PTR ds:0xc002112c,edx
c0000d6d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d72:	76 16                	jbe    c0000d8a <dlfree+0xf1>
c0000d74:	f6 05 00 11 02 c0 02 	test   BYTE PTR ds:0xc0021100,0x2
c0000d7b:	74 0d                	je     c0000d8a <dlfree+0xf1>
c0000d7d:	5b                   	pop    ebx
c0000d7e:	b8 00 11 02 c0       	mov    eax,0xc0021100
c0000d83:	5e                   	pop    esi
c0000d84:	5f                   	pop    edi
c0000d85:	e9 28 fe ff ff       	jmp    c0000bb2 <malloc_consolidate>
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	c3                   	ret    

c0000d8e <sYSMALLOc>:
c0000d8e:	55                   	push   ebp
c0000d8f:	57                   	push   edi
c0000d90:	56                   	push   esi
c0000d91:	53                   	push   ebx
c0000d92:	89 d3                	mov    ebx,edx
c0000d94:	83 ec 2c             	sub    esp,0x2c
c0000d97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000d9b:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000da1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000da4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dab:	74 1f                	je     c0000dcc <sYSMALLOc+0x3e>
c0000dad:	89 d8                	mov    eax,ebx
c0000daf:	e8 fe fd ff ff       	call   c0000bb2 <malloc_consolidate>
c0000db4:	83 ec 0c             	sub    esp,0xc
c0000db7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dbb:	83 e8 07             	sub    eax,0x7
c0000dbe:	50                   	push   eax
c0000dbf:	e8 30 02 00 00       	call   c0000ff4 <dlmalloc>
c0000dc4:	83 c4 10             	add    esp,0x10
c0000dc7:	e9 20 02 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000dcc:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dcf:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000dd5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000dd8:	83 e0 fc             	and    eax,0xfffffffc
c0000ddb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ddf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000de3:	83 c0 10             	add    eax,0x10
c0000de6:	01 c1                	add    ecx,eax
c0000de8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000dec:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000df3:	74 04                	je     c0000df9 <sYSMALLOc+0x6b>
c0000df5:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000df9:	f7 da                	neg    edx
c0000dfb:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000dff:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e03:	21 d1                	and    ecx,edx
c0000e05:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e09:	7f 07                	jg     c0000e12 <sYSMALLOc+0x84>
c0000e0b:	31 c0                	xor    eax,eax
c0000e0d:	e9 da 01 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000e12:	83 ec 0c             	sub    esp,0xc
c0000e15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e19:	e8 72 68 00 00       	call   c0007690 <sbrk>
c0000e1e:	83 c4 10             	add    esp,0x10
c0000e21:	89 c6                	mov    esi,eax
c0000e23:	83 f8 ff             	cmp    eax,0xffffffff
c0000e26:	74 e3                	je     c0000e0b <sYSMALLOc+0x7d>
c0000e28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e2c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e30:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e33:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e39:	39 f1                	cmp    ecx,esi
c0000e3b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e41:	75 13                	jne    c0000e56 <sYSMALLOc+0xc8>
c0000e43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e47:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e4b:	83 c8 01             	or     eax,0x1
c0000e4e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e51:	e9 3e 01 00 00       	jmp    c0000f94 <sYSMALLOc+0x206>
c0000e56:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e5c:	88 d0                	mov    al,dl
c0000e5e:	83 e0 01             	and    eax,0x1
c0000e61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e66:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e6a:	0f 95 c0             	setne  al
c0000e6d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e71:	39 f1                	cmp    ecx,esi
c0000e73:	76 12                	jbe    c0000e87 <sYSMALLOc+0xf9>
c0000e75:	84 c0                	test   al,al
c0000e77:	74 0e                	je     c0000e87 <sYSMALLOc+0xf9>
c0000e79:	83 e2 fe             	and    edx,0xfffffffe
c0000e7c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000e82:	e9 83 00 00 00       	jmp    c0000f0a <sYSMALLOc+0x17c>
c0000e87:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000e8c:	74 7c                	je     c0000f0a <sYSMALLOc+0x17c>
c0000e8e:	84 c0                	test   al,al
c0000e90:	74 0c                	je     c0000e9e <sYSMALLOc+0x110>
c0000e92:	89 f0                	mov    eax,esi
c0000e94:	29 c8                	sub    eax,ecx
c0000e96:	01 e8                	add    eax,ebp
c0000e98:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000e9e:	89 f2                	mov    edx,esi
c0000ea0:	83 e2 07             	and    edx,0x7
c0000ea3:	74 0c                	je     c0000eb1 <sYSMALLOc+0x123>
c0000ea5:	b8 08 00 00 00       	mov    eax,0x8
c0000eaa:	29 d0                	sub    eax,edx
c0000eac:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000eaf:	eb 04                	jmp    c0000eb5 <sYSMALLOc+0x127>
c0000eb1:	89 f5                	mov    ebp,esi
c0000eb3:	31 c0                	xor    eax,eax
c0000eb5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000eb9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ebd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ec1:	01 c1                	add    ecx,eax
c0000ec3:	83 ec 0c             	sub    esp,0xc
c0000ec6:	01 f1                	add    ecx,esi
c0000ec8:	01 ca                	add    edx,ecx
c0000eca:	29 c8                	sub    eax,ecx
c0000ecc:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	52                   	push   edx
c0000ed3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ed7:	e8 b4 67 00 00       	call   c0007690 <sbrk>
c0000edc:	83 c4 10             	add    esp,0x10
c0000edf:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee6:	75 0f                	jne    c0000ef7 <sYSMALLOc+0x169>
c0000ee8:	83 ec 0c             	sub    esp,0xc
c0000eeb:	6a 00                	push   0x0
c0000eed:	e8 9e 67 00 00       	call   c0007690 <sbrk>
c0000ef2:	83 c4 10             	add    esp,0x10
c0000ef5:	eb 30                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000ef7:	39 c6                	cmp    esi,eax
c0000ef9:	76 33                	jbe    c0000f2e <sYSMALLOc+0x1a0>
c0000efb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eff:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f06:	01 f0                	add    eax,esi
c0000f08:	eb 1d                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000f0a:	83 ec 0c             	sub    esp,0xc
c0000f0d:	89 f5                	mov    ebp,esi
c0000f0f:	6a 00                	push   0x0
c0000f11:	e8 7a 67 00 00       	call   c0007690 <sbrk>
c0000f16:	89 c2                	mov    edx,eax
c0000f18:	29 f2                	sub    edx,esi
c0000f1a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f1e:	83 c4 10             	add    esp,0x10
c0000f21:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f27:	31 d2                	xor    edx,edx
c0000f29:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2c:	74 66                	je     c0000f94 <sYSMALLOc+0x206>
c0000f2e:	29 e8                	sub    eax,ebp
c0000f30:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f33:	01 d0                	add    eax,edx
c0000f35:	83 c8 01             	or     eax,0x1
c0000f38:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f3b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f41:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f46:	74 4c                	je     c0000f94 <sYSMALLOc+0x206>
c0000f48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4c:	83 e8 0c             	sub    eax,0xc
c0000f4f:	83 e0 f8             	and    eax,0xfffffff8
c0000f52:	89 c2                	mov    edx,eax
c0000f54:	83 ca 01             	or     edx,0x1
c0000f57:	83 f8 0f             	cmp    eax,0xf
c0000f5a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f5d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f65:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f6d:	76 25                	jbe    c0000f94 <sYSMALLOc+0x206>
c0000f6f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f75:	83 ec 0c             	sub    esp,0xc
c0000f78:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000f82:	83 c7 08             	add    edi,0x8
c0000f85:	57                   	push   edi
c0000f86:	e8 0e fd ff ff       	call   c0000c99 <dlfree>
c0000f8b:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000f91:	83 c4 10             	add    esp,0x10
c0000f94:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000f9a:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fa0:	73 06                	jae    c0000fa8 <sYSMALLOc+0x21a>
c0000fa2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fa8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fae:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fb4:	73 06                	jae    c0000fbc <sYSMALLOc+0x22e>
c0000fb6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fbc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fbf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fc2:	83 e2 fc             	and    edx,0xfffffffc
c0000fc5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fc9:	0f 82 3c fe ff ff    	jb     c0000e0b <sYSMALLOc+0x7d>
c0000fcf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000fd3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000fd6:	29 fa                	sub    edx,edi
c0000fd8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000fdb:	83 ca 01             	or     edx,0x1
c0000fde:	89 fb                	mov    ebx,edi
c0000fe0:	83 c0 08             	add    eax,0x8
c0000fe3:	83 cb 01             	or     ebx,0x1
c0000fe6:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000fe9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000fec:	83 c4 2c             	add    esp,0x2c
c0000fef:	5b                   	pop    ebx
c0000ff0:	5e                   	pop    esi
c0000ff1:	5f                   	pop    edi
c0000ff2:	5d                   	pop    ebp
c0000ff3:	c3                   	ret    

c0000ff4 <dlmalloc>:
c0000ff4:	55                   	push   ebp
c0000ff5:	57                   	push   edi
c0000ff6:	56                   	push   esi
c0000ff7:	53                   	push   ebx
c0000ff8:	83 ec 1c             	sub    esp,0x1c
c0000ffb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000fff:	83 f8 df             	cmp    eax,0xffffffdf
c0001002:	0f 87 70 03 00 00    	ja     c0001378 <dlmalloc+0x384>
c0001008:	83 c0 0b             	add    eax,0xb
c000100b:	be 10 00 00 00       	mov    esi,0x10
c0001010:	83 f8 0f             	cmp    eax,0xf
c0001013:	76 05                	jbe    c000101a <dlmalloc+0x26>
c0001015:	83 e0 f8             	and    eax,0xfffffff8
c0001018:	89 c6                	mov    esi,eax
c000101a:	8b 3d 00 11 02 c0    	mov    edi,DWORD PTR ds:0xc0021100
c0001020:	f7 c7 01 00 00 00    	test   edi,0x1
c0001026:	75 17                	jne    c000103f <dlmalloc+0x4b>
c0001028:	85 ff                	test   edi,edi
c000102a:	0f 85 05 03 00 00    	jne    c0001335 <dlmalloc+0x341>
c0001030:	b8 00 11 02 c0       	mov    eax,0xc0021100
c0001035:	e8 78 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c000103a:	e9 f6 02 00 00       	jmp    c0001335 <dlmalloc+0x341>
c000103f:	39 f7                	cmp    edi,esi
c0001041:	72 1f                	jb     c0001062 <dlmalloc+0x6e>
c0001043:	89 f2                	mov    edx,esi
c0001045:	c1 ea 03             	shr    edx,0x3
c0001048:	83 ea 02             	sub    edx,0x2
c000104b:	8b 04 95 04 11 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdeefc]
c0001052:	85 c0                	test   eax,eax
c0001054:	74 0c                	je     c0001062 <dlmalloc+0x6e>
c0001056:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001059:	89 0c 95 04 11 02 c0 	mov    DWORD PTR [edx*4-0x3ffdeefc],ecx
c0001060:	eb 30                	jmp    c0001092 <dlmalloc+0x9e>
c0001062:	89 f0                	mov    eax,esi
c0001064:	81 fe ff 00 00 00    	cmp    esi,0xff
c000106a:	77 2e                	ja     c000109a <dlmalloc+0xa6>
c000106c:	c1 e8 03             	shr    eax,0x3
c000106f:	8d 14 c5 34 11 02 c0 	lea    edx,[eax*8-0x3ffdeecc]
c0001076:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000107a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000107d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001080:	39 c3                	cmp    ebx,eax
c0001082:	74 2e                	je     c00010b2 <dlmalloc+0xbe>
c0001084:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001087:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000108c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000108f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001092:	83 c0 08             	add    eax,0x8
c0001095:	e9 e0 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c000109a:	e8 8f fa ff ff       	call   c0000b2e <largebin_index>
c000109f:	83 e7 02             	and    edi,0x2
c00010a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a6:	74 0a                	je     c00010b2 <dlmalloc+0xbe>
c00010a8:	b8 00 11 02 c0       	mov    eax,0xc0021100
c00010ad:	e8 00 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c00010b2:	8d 46 10             	lea    eax,[esi+0x10]
c00010b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010b9:	8b 1d 40 11 02 c0    	mov    ebx,DWORD PTR ds:0xc0021140
c00010bf:	81 fb 34 11 02 c0    	cmp    ebx,0xc0021134
c00010c5:	0f 84 13 01 00 00    	je     c00011de <dlmalloc+0x1ea>
c00010cb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ce:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010d1:	83 e7 fc             	and    edi,0xfffffffc
c00010d4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010da:	77 4c                	ja     c0001128 <dlmalloc+0x134>
c00010dc:	3d 34 11 02 c0       	cmp    eax,0xc0021134
c00010e1:	75 45                	jne    c0001128 <dlmalloc+0x134>
c00010e3:	39 1d 30 11 02 c0    	cmp    DWORD PTR ds:0xc0021130,ebx
c00010e9:	75 3d                	jne    c0001128 <dlmalloc+0x134>
c00010eb:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00010ef:	73 37                	jae    c0001128 <dlmalloc+0x134>
c00010f1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00010f4:	89 fa                	mov    edx,edi
c00010f6:	a3 3c 11 02 c0       	mov    ds:0xc002113c,eax
c00010fb:	a3 40 11 02 c0       	mov    ds:0xc0021140,eax
c0001100:	a3 30 11 02 c0       	mov    ds:0xc0021130,eax
c0001105:	29 f2                	sub    edx,esi
c0001107:	c7 40 08 34 11 02 c0 	mov    DWORD PTR [eax+0x8],0xc0021134
c000110e:	c7 40 0c 34 11 02 c0 	mov    DWORD PTR [eax+0xc],0xc0021134
c0001115:	83 ce 01             	or     esi,0x1
c0001118:	89 d1                	mov    ecx,edx
c000111a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000111d:	83 c9 01             	or     ecx,0x1
c0001120:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001123:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001126:	eb 15                	jmp    c000113d <dlmalloc+0x149>
c0001128:	a3 40 11 02 c0       	mov    ds:0xc0021140,eax
c000112d:	39 fe                	cmp    esi,edi
c000112f:	c7 40 08 34 11 02 c0 	mov    DWORD PTR [eax+0x8],0xc0021134
c0001136:	75 0d                	jne    c0001145 <dlmalloc+0x151>
c0001138:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000113d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001140:	e9 35 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001145:	89 f8                	mov    eax,edi
c0001147:	81 ff ff 00 00 00    	cmp    edi,0xff
c000114d:	77 19                	ja     c0001168 <dlmalloc+0x174>
c000114f:	c1 e8 03             	shr    eax,0x3
c0001152:	8d 14 00             	lea    edx,[eax+eax*1]
c0001155:	83 c2 0d             	add    edx,0xd
c0001158:	8d 2c 95 f8 10 02 c0 	lea    ebp,[edx*4-0x3ffdef08]
c000115f:	8b 14 95 00 11 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdef00]
c0001166:	eb 46                	jmp    c00011ae <dlmalloc+0x1ba>
c0001168:	e8 c1 f9 ff ff       	call   c0000b2e <largebin_index>
c000116d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001170:	83 c2 0d             	add    edx,0xd
c0001173:	8d 0c 95 00 11 02 c0 	lea    ecx,[edx*4-0x3ffdef00]
c000117a:	8b 14 95 00 11 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdef00]
c0001181:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001184:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001188:	89 d5                	mov    ebp,edx
c000118a:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000118e:	74 1e                	je     c00011ae <dlmalloc+0x1ba>
c0001190:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001193:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001196:	77 12                	ja     c00011aa <dlmalloc+0x1b6>
c0001198:	83 cf 01             	or     edi,0x1
c000119b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000119e:	76 05                	jbe    c00011a5 <dlmalloc+0x1b1>
c00011a0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011a3:	eb f6                	jmp    c000119b <dlmalloc+0x1a7>
c00011a5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011a8:	eb 04                	jmp    c00011ae <dlmalloc+0x1ba>
c00011aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ae:	89 c7                	mov    edi,eax
c00011b0:	88 c1                	mov    cl,al
c00011b2:	c1 ff 05             	sar    edi,0x5
c00011b5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011b9:	bf 01 00 00 00       	mov    edi,0x1
c00011be:	d3 e7                	shl    edi,cl
c00011c0:	89 f8                	mov    eax,edi
c00011c2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011c6:	09 04 bd 34 14 02 c0 	or     DWORD PTR [edi*4-0x3ffdebcc],eax
c00011cd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011d0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011d3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011d6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011d9:	e9 db fe ff ff       	jmp    c00010b9 <dlmalloc+0xc5>
c00011de:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011e4:	76 78                	jbe    c000125e <dlmalloc+0x26a>
c00011e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00011ea:	8d 04 c5 34 11 02 c0 	lea    eax,[eax*8-0x3ffdeecc]
c00011f1:	8d 48 f8             	lea    ecx,[eax-0x8]
c00011f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00011f7:	39 ca                	cmp    edx,ecx
c00011f9:	74 63                	je     c000125e <dlmalloc+0x26a>
c00011fb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00011fe:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001201:	83 e3 fc             	and    ebx,0xfffffffc
c0001204:	39 de                	cmp    esi,ebx
c0001206:	77 52                	ja     c000125a <dlmalloc+0x266>
c0001208:	89 df                	mov    edi,ebx
c000120a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000120d:	29 f7                	sub    edi,esi
c000120f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001212:	01 d3                	add    ebx,edx
c0001214:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001217:	83 ff 0f             	cmp    edi,0xf
c000121a:	8d 42 08             	lea    eax,[edx+0x8]
c000121d:	77 09                	ja     c0001228 <dlmalloc+0x234>
c000121f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001223:	e9 52 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001228:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000122b:	83 ce 01             	or     esi,0x1
c000122e:	89 0d 3c 11 02 c0    	mov    DWORD PTR ds:0xc002113c,ecx
c0001234:	89 0d 40 11 02 c0    	mov    DWORD PTR ds:0xc0021140,ecx
c000123a:	c7 41 08 34 11 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0021134
c0001241:	c7 41 0c 34 11 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0021134
c0001248:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000124b:	89 fa                	mov    edx,edi
c000124d:	83 ca 01             	or     edx,0x1
c0001250:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001253:	89 3b                	mov    DWORD PTR [ebx],edi
c0001255:	e9 20 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c000125a:	89 c2                	mov    edx,eax
c000125c:	eb 99                	jmp    c00011f7 <dlmalloc+0x203>
c000125e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001262:	b8 01 00 00 00       	mov    eax,0x1
c0001267:	41                   	inc    ecx
c0001268:	89 cb                	mov    ebx,ecx
c000126a:	8d 14 cd 2c 11 02 c0 	lea    edx,[ecx*8-0x3ffdeed4]
c0001271:	c1 eb 05             	shr    ebx,0x5
c0001274:	d3 e0                	shl    eax,cl
c0001276:	8b 3c 9d 34 14 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdebcc]
c000127d:	39 f8                	cmp    eax,edi
c000127f:	77 04                	ja     c0001285 <dlmalloc+0x291>
c0001281:	85 c0                	test   eax,eax
c0001283:	75 26                	jne    c00012ab <dlmalloc+0x2b7>
c0001285:	43                   	inc    ebx
c0001286:	83 fb 02             	cmp    ebx,0x2
c0001289:	0f 87 a6 00 00 00    	ja     c0001335 <dlmalloc+0x341>
c000128f:	8b 3c 9d 34 14 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdebcc]
c0001296:	85 ff                	test   edi,edi
c0001298:	74 eb                	je     c0001285 <dlmalloc+0x291>
c000129a:	89 d8                	mov    eax,ebx
c000129c:	c1 e0 06             	shl    eax,0x6
c000129f:	8d 14 85 2c 11 02 c0 	lea    edx,[eax*4-0x3ffdeed4]
c00012a6:	b8 01 00 00 00       	mov    eax,0x1
c00012ab:	85 f8                	test   eax,edi
c00012ad:	75 07                	jne    c00012b6 <dlmalloc+0x2c2>
c00012af:	83 c2 08             	add    edx,0x8
c00012b2:	01 c0                	add    eax,eax
c00012b4:	eb f5                	jmp    c00012ab <dlmalloc+0x2b7>
c00012b6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012b9:	39 ca                	cmp    edx,ecx
c00012bb:	75 14                	jne    c00012d1 <dlmalloc+0x2dd>
c00012bd:	89 c1                	mov    ecx,eax
c00012bf:	83 c2 08             	add    edx,0x8
c00012c2:	f7 d1                	not    ecx
c00012c4:	01 c0                	add    eax,eax
c00012c6:	21 cf                	and    edi,ecx
c00012c8:	89 3c 9d 34 14 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdebcc],edi
c00012cf:	eb ac                	jmp    c000127d <dlmalloc+0x289>
c00012d1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012d4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012d7:	83 e0 fc             	and    eax,0xfffffffc
c00012da:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012dd:	89 c3                	mov    ebx,eax
c00012df:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00012e2:	29 f3                	sub    ebx,esi
c00012e4:	8d 14 01             	lea    edx,[ecx+eax*1]
c00012e7:	83 fb 0f             	cmp    ebx,0xf
c00012ea:	8d 41 08             	lea    eax,[ecx+0x8]
c00012ed:	77 09                	ja     c00012f8 <dlmalloc+0x304>
c00012ef:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00012f3:	e9 82 00 00 00       	jmp    c000137a <dlmalloc+0x386>
c00012f8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00012fb:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001301:	89 3d 3c 11 02 c0    	mov    DWORD PTR ds:0xc002113c,edi
c0001307:	89 3d 40 11 02 c0    	mov    DWORD PTR ds:0xc0021140,edi
c000130d:	c7 47 08 34 11 02 c0 	mov    DWORD PTR [edi+0x8],0xc0021134
c0001314:	c7 47 0c 34 11 02 c0 	mov    DWORD PTR [edi+0xc],0xc0021134
c000131b:	77 06                	ja     c0001323 <dlmalloc+0x32f>
c000131d:	89 3d 30 11 02 c0    	mov    DWORD PTR ds:0xc0021130,edi
c0001323:	83 ce 01             	or     esi,0x1
c0001326:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001329:	89 d9                	mov    ecx,ebx
c000132b:	83 c9 01             	or     ecx,0x1
c000132e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001331:	89 1a                	mov    DWORD PTR [edx],ebx
c0001333:	eb 45                	jmp    c000137a <dlmalloc+0x386>
c0001335:	a1 2c 11 02 c0       	mov    eax,ds:0xc002112c
c000133a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000133d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001340:	83 e2 fc             	and    edx,0xfffffffc
c0001343:	39 d1                	cmp    ecx,edx
c0001345:	77 1e                	ja     c0001365 <dlmalloc+0x371>
c0001347:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000134a:	89 f3                	mov    ebx,esi
c000134c:	89 0d 2c 11 02 c0    	mov    DWORD PTR ds:0xc002112c,ecx
c0001352:	83 cb 01             	or     ebx,0x1
c0001355:	29 f2                	sub    edx,esi
c0001357:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000135a:	83 ca 01             	or     edx,0x1
c000135d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001360:	e9 2d fd ff ff       	jmp    c0001092 <dlmalloc+0x9e>
c0001365:	83 c4 1c             	add    esp,0x1c
c0001368:	89 f0                	mov    eax,esi
c000136a:	5b                   	pop    ebx
c000136b:	ba 00 11 02 c0       	mov    edx,0xc0021100
c0001370:	5e                   	pop    esi
c0001371:	5f                   	pop    edi
c0001372:	5d                   	pop    ebp
c0001373:	e9 16 fa ff ff       	jmp    c0000d8e <sYSMALLOc>
c0001378:	31 c0                	xor    eax,eax
c000137a:	83 c4 1c             	add    esp,0x1c
c000137d:	5b                   	pop    ebx
c000137e:	5e                   	pop    esi
c000137f:	5f                   	pop    edi
c0001380:	5d                   	pop    ebp
c0001381:	c3                   	ret    

c0001382 <iALLOc>:
c0001382:	55                   	push   ebp
c0001383:	89 c5                	mov    ebp,eax
c0001385:	57                   	push   edi
c0001386:	56                   	push   esi
c0001387:	53                   	push   ebx
c0001388:	83 ec 2c             	sub    esp,0x2c
c000138b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000138f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001393:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001397:	83 3d 00 11 02 c0 00 	cmp    DWORD PTR ds:0xc0021100,0x0
c000139e:	75 12                	jne    c00013b2 <iALLOc+0x30>
c00013a0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013a4:	b8 00 11 02 c0       	mov    eax,0xc0021100
c00013a9:	e8 04 f8 ff ff       	call   c0000bb2 <malloc_consolidate>
c00013ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013b2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013b7:	74 12                	je     c00013cb <iALLOc+0x49>
c00013b9:	85 ed                	test   ebp,ebp
c00013bb:	0f 84 64 01 00 00    	je     c0001525 <iALLOc+0x1a3>
c00013c1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013c9:	eb 33                	jmp    c00013fe <iALLOc+0x7c>
c00013cb:	85 ed                	test   ebp,ebp
c00013cd:	75 14                	jne    c00013e3 <iALLOc+0x61>
c00013cf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013d7:	83 c4 2c             	add    esp,0x2c
c00013da:	5b                   	pop    ebx
c00013db:	5e                   	pop    esi
c00013dc:	5f                   	pop    edi
c00013dd:	5d                   	pop    ebp
c00013de:	e9 11 fc ff ff       	jmp    c0000ff4 <dlmalloc>
c00013e3:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00013ea:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00013f2:	83 f8 0f             	cmp    eax,0xf
c00013f5:	76 07                	jbe    c00013fe <iALLOc+0x7c>
c00013f7:	83 e0 f8             	and    eax,0xfffffff8
c00013fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00013fe:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001403:	75 09                	jne    c000140e <iALLOc+0x8c>
c0001405:	89 d0                	mov    eax,edx
c0001407:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000140a:	31 f6                	xor    esi,esi
c000140c:	eb 3b                	jmp    c0001449 <iALLOc+0xc7>
c000140e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001410:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001418:	83 c0 0b             	add    eax,0xb
c000141b:	83 f8 0f             	cmp    eax,0xf
c000141e:	76 07                	jbe    c0001427 <iALLOc+0xa5>
c0001420:	83 e0 f8             	and    eax,0xfffffff8
c0001423:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001427:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000142b:	0f af f5             	imul   esi,ebp
c000142e:	eb 25                	jmp    c0001455 <iALLOc+0xd3>
c0001430:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001432:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001435:	bb 10 00 00 00       	mov    ebx,0x10
c000143a:	83 f9 0f             	cmp    ecx,0xf
c000143d:	76 05                	jbe    c0001444 <iALLOc+0xc2>
c000143f:	83 e1 f8             	and    ecx,0xfffffff8
c0001442:	89 cb                	mov    ebx,ecx
c0001444:	01 de                	add    esi,ebx
c0001446:	83 c0 04             	add    eax,0x4
c0001449:	39 c7                	cmp    edi,eax
c000144b:	75 e3                	jne    c0001430 <iALLOc+0xae>
c000144d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001455:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001459:	8b 1d 54 14 02 c0    	mov    ebx,DWORD PTR ds:0xc0021454
c000145f:	83 ec 0c             	sub    esp,0xc
c0001462:	c7 05 54 14 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021454,0x0
c000146c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001470:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001474:	50                   	push   eax
c0001475:	e8 7a fb ff ff       	call   c0000ff4 <dlmalloc>
c000147a:	83 c4 10             	add    esp,0x10
c000147d:	89 1d 54 14 02 c0    	mov    DWORD PTR ds:0xc0021454,ebx
c0001483:	85 c0                	test   eax,eax
c0001485:	0f 84 92 00 00 00    	je     c000151d <iALLOc+0x19b>
c000148b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000148e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001491:	83 e3 fc             	and    ebx,0xfffffffc
c0001494:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001498:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000149d:	74 1e                	je     c00014bd <iALLOc+0x13b>
c000149f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014a3:	89 d9                	mov    ecx,ebx
c00014a5:	52                   	push   edx
c00014a6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014aa:	83 e9 04             	sub    ecx,0x4
c00014ad:	51                   	push   ecx
c00014ae:	6a 00                	push   0x0
c00014b0:	50                   	push   eax
c00014b1:	e8 1a f0 ff ff       	call   c00004d0 <memset>
c00014b6:	83 c4 10             	add    esp,0x10
c00014b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014bd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014c2:	75 14                	jne    c00014d8 <iALLOc+0x156>
c00014c4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014c7:	29 f3                	sub    ebx,esi
c00014c9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014cc:	83 cb 01             	or     ebx,0x1
c00014cf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014d3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014d6:	89 f3                	mov    ebx,esi
c00014d8:	31 c0                	xor    eax,eax
c00014da:	4d                   	dec    ebp
c00014db:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014de:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00014e2:	39 c5                	cmp    ebp,eax
c00014e4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00014e7:	74 2c                	je     c0001515 <iALLOc+0x193>
c00014e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00014ed:	85 c9                	test   ecx,ecx
c00014ef:	75 15                	jne    c0001506 <iALLOc+0x184>
c00014f1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00014f4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00014f7:	b9 10 00 00 00       	mov    ecx,0x10
c00014fc:	83 fe 0f             	cmp    esi,0xf
c00014ff:	76 05                	jbe    c0001506 <iALLOc+0x184>
c0001501:	83 e6 f8             	and    esi,0xfffffff8
c0001504:	89 f1                	mov    ecx,esi
c0001506:	89 ce                	mov    esi,ecx
c0001508:	29 cb                	sub    ebx,ecx
c000150a:	83 ce 01             	or     esi,0x1
c000150d:	40                   	inc    eax
c000150e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001511:	01 cf                	add    edi,ecx
c0001513:	eb c6                	jmp    c00014db <iALLOc+0x159>
c0001515:	83 cb 01             	or     ebx,0x1
c0001518:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000151b:	eb 08                	jmp    c0001525 <iALLOc+0x1a3>
c000151d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001525:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001529:	83 c4 2c             	add    esp,0x2c
c000152c:	5b                   	pop    ebx
c000152d:	5e                   	pop    esi
c000152e:	5f                   	pop    edi
c000152f:	5d                   	pop    ebp
c0001530:	c3                   	ret    

c0001531 <dlrealloc>:
c0001531:	55                   	push   ebp
c0001532:	57                   	push   edi
c0001533:	56                   	push   esi
c0001534:	53                   	push   ebx
c0001535:	83 ec 1c             	sub    esp,0x1c
c0001538:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000153c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001540:	85 db                	test   ebx,ebx
c0001542:	75 10                	jne    c0001554 <dlrealloc+0x23>
c0001544:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001548:	83 c4 1c             	add    esp,0x1c
c000154b:	5b                   	pop    ebx
c000154c:	5e                   	pop    esi
c000154d:	5f                   	pop    edi
c000154e:	5d                   	pop    ebp
c000154f:	e9 a0 fa ff ff       	jmp    c0000ff4 <dlmalloc>
c0001554:	83 f8 df             	cmp    eax,0xffffffdf
c0001557:	76 07                	jbe    c0001560 <dlrealloc+0x2f>
c0001559:	31 db                	xor    ebx,ebx
c000155b:	e9 6a 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c0001560:	83 c0 0b             	add    eax,0xb
c0001563:	bd 10 00 00 00       	mov    ebp,0x10
c0001568:	83 f8 0f             	cmp    eax,0xf
c000156b:	76 05                	jbe    c0001572 <dlrealloc+0x41>
c000156d:	83 e0 f8             	and    eax,0xfffffff8
c0001570:	89 c5                	mov    ebp,eax
c0001572:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001575:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001578:	89 c6                	mov    esi,eax
c000157a:	83 e6 fc             	and    esi,0xfffffffc
c000157d:	a8 02                	test   al,0x2
c000157f:	75 d8                	jne    c0001559 <dlrealloc+0x28>
c0001581:	39 f5                	cmp    ebp,esi
c0001583:	0f 86 04 01 00 00    	jbe    c000168d <dlrealloc+0x15c>
c0001589:	8d 14 37             	lea    edx,[edi+esi*1]
c000158c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000158f:	39 15 2c 11 02 c0    	cmp    DWORD PTR ds:0xc002112c,edx
c0001595:	75 33                	jne    c00015ca <dlrealloc+0x99>
c0001597:	83 e1 fc             	and    ecx,0xfffffffc
c000159a:	01 f1                	add    ecx,esi
c000159c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015a0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015a3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015a7:	77 49                	ja     c00015f2 <dlrealloc+0xc1>
c00015a9:	01 ef                	add    edi,ebp
c00015ab:	83 e0 01             	and    eax,0x1
c00015ae:	09 e8                	or     eax,ebp
c00015b0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015b3:	89 3d 2c 11 02 c0    	mov    DWORD PTR ds:0xc002112c,edi
c00015b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015bd:	29 e8                	sub    eax,ebp
c00015bf:	83 c8 01             	or     eax,0x1
c00015c2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015c5:	e9 00 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c00015ca:	89 c8                	mov    eax,ecx
c00015cc:	83 e0 fe             	and    eax,0xfffffffe
c00015cf:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015d4:	75 1c                	jne    c00015f2 <dlrealloc+0xc1>
c00015d6:	83 e1 fc             	and    ecx,0xfffffffc
c00015d9:	01 f1                	add    ecx,esi
c00015db:	39 cd                	cmp    ebp,ecx
c00015dd:	77 13                	ja     c00015f2 <dlrealloc+0xc1>
c00015df:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00015e2:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00015e5:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00015e8:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00015eb:	89 ce                	mov    esi,ecx
c00015ed:	e9 9b 00 00 00       	jmp    c000168d <dlrealloc+0x15c>
c00015f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00015f6:	8d 45 f9             	lea    eax,[ebp-0x7]
c00015f9:	83 ec 0c             	sub    esp,0xc
c00015fc:	50                   	push   eax
c00015fd:	e8 f2 f9 ff ff       	call   c0000ff4 <dlmalloc>
c0001602:	83 c4 10             	add    esp,0x10
c0001605:	85 c0                	test   eax,eax
c0001607:	0f 84 4c ff ff ff    	je     c0001559 <dlrealloc+0x28>
c000160d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001610:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001614:	39 ca                	cmp    edx,ecx
c0001616:	75 0a                	jne    c0001622 <dlrealloc+0xf1>
c0001618:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000161b:	83 e0 fc             	and    eax,0xfffffffc
c000161e:	01 c6                	add    esi,eax
c0001620:	eb 6b                	jmp    c000168d <dlrealloc+0x15c>
c0001622:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001625:	83 f9 27             	cmp    ecx,0x27
c0001628:	76 08                	jbe    c0001632 <dlrealloc+0x101>
c000162a:	89 de                	mov    esi,ebx
c000162c:	89 c7                	mov    edi,eax
c000162e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001630:	eb 43                	jmp    c0001675 <dlrealloc+0x144>
c0001632:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001634:	83 f9 13             	cmp    ecx,0x13
c0001637:	89 10                	mov    DWORD PTR [eax],edx
c0001639:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000163c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000163f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001642:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001645:	76 2e                	jbe    c0001675 <dlrealloc+0x144>
c0001647:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000164a:	83 f9 1b             	cmp    ecx,0x1b
c000164d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001650:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001653:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001656:	76 1d                	jbe    c0001675 <dlrealloc+0x144>
c0001658:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000165b:	83 f9 23             	cmp    ecx,0x23
c000165e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001661:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001664:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001667:	76 0c                	jbe    c0001675 <dlrealloc+0x144>
c0001669:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000166c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000166f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001672:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001675:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001679:	83 ec 0c             	sub    esp,0xc
c000167c:	53                   	push   ebx
c000167d:	e8 17 f6 ff ff       	call   c0000c99 <dlfree>
c0001682:	83 c4 10             	add    esp,0x10
c0001685:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001689:	89 c3                	mov    ebx,eax
c000168b:	eb 3d                	jmp    c00016ca <dlrealloc+0x199>
c000168d:	89 f2                	mov    edx,esi
c000168f:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001692:	29 ea                	sub    edx,ebp
c0001694:	83 e1 01             	and    ecx,0x1
c0001697:	8d 04 37             	lea    eax,[edi+esi*1]
c000169a:	83 fa 0f             	cmp    edx,0xf
c000169d:	77 0b                	ja     c00016aa <dlrealloc+0x179>
c000169f:	09 ce                	or     esi,ecx
c00016a1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016a4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016a8:	eb 20                	jmp    c00016ca <dlrealloc+0x199>
c00016aa:	01 ef                	add    edi,ebp
c00016ac:	83 ec 0c             	sub    esp,0xc
c00016af:	09 cd                	or     ebp,ecx
c00016b1:	83 ca 01             	or     edx,0x1
c00016b4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016b7:	83 c7 08             	add    edi,0x8
c00016ba:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016bd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c1:	57                   	push   edi
c00016c2:	e8 d2 f5 ff ff       	call   c0000c99 <dlfree>
c00016c7:	83 c4 10             	add    esp,0x10
c00016ca:	83 c4 1c             	add    esp,0x1c
c00016cd:	89 d8                	mov    eax,ebx
c00016cf:	5b                   	pop    ebx
c00016d0:	5e                   	pop    esi
c00016d1:	5f                   	pop    edi
c00016d2:	5d                   	pop    ebp
c00016d3:	c3                   	ret    

c00016d4 <dlmemalign>:
c00016d4:	55                   	push   ebp
c00016d5:	57                   	push   edi
c00016d6:	56                   	push   esi
c00016d7:	53                   	push   ebx
c00016d8:	83 ec 0c             	sub    esp,0xc
c00016db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00016e3:	83 fa 08             	cmp    edx,0x8
c00016e6:	77 10                	ja     c00016f8 <dlmemalign+0x24>
c00016e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00016ec:	83 c4 0c             	add    esp,0xc
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	e9 fc f8 ff ff       	jmp    c0000ff4 <dlmalloc>
c00016f8:	bf 10 00 00 00       	mov    edi,0x10
c00016fd:	83 fa 0f             	cmp    edx,0xf
c0001700:	76 13                	jbe    c0001715 <dlmemalign+0x41>
c0001702:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001705:	85 d1                	test   ecx,edx
c0001707:	75 04                	jne    c000170d <dlmemalign+0x39>
c0001709:	89 d7                	mov    edi,edx
c000170b:	eb 08                	jmp    c0001715 <dlmemalign+0x41>
c000170d:	39 d7                	cmp    edi,edx
c000170f:	73 04                	jae    c0001715 <dlmemalign+0x41>
c0001711:	01 ff                	add    edi,edi
c0001713:	eb f8                	jmp    c000170d <dlmemalign+0x39>
c0001715:	83 f8 df             	cmp    eax,0xffffffdf
c0001718:	76 07                	jbe    c0001721 <dlmemalign+0x4d>
c000171a:	31 c0                	xor    eax,eax
c000171c:	e9 ce 00 00 00       	jmp    c00017ef <dlmemalign+0x11b>
c0001721:	83 c0 0b             	add    eax,0xb
c0001724:	bd 10 00 00 00       	mov    ebp,0x10
c0001729:	83 f8 0f             	cmp    eax,0xf
c000172c:	76 05                	jbe    c0001733 <dlmemalign+0x5f>
c000172e:	83 e0 f8             	and    eax,0xfffffff8
c0001731:	89 c5                	mov    ebp,eax
c0001733:	83 ec 0c             	sub    esp,0xc
c0001736:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000173a:	50                   	push   eax
c000173b:	e8 b4 f8 ff ff       	call   c0000ff4 <dlmalloc>
c0001740:	83 c4 10             	add    esp,0x10
c0001743:	89 c1                	mov    ecx,eax
c0001745:	85 c0                	test   eax,eax
c0001747:	74 d1                	je     c000171a <dlmemalign+0x46>
c0001749:	31 d2                	xor    edx,edx
c000174b:	8d 70 f8             	lea    esi,[eax-0x8]
c000174e:	f7 f7                	div    edi
c0001750:	85 d2                	test   edx,edx
c0001752:	74 62                	je     c00017b6 <dlmemalign+0xe2>
c0001754:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001758:	89 f8                	mov    eax,edi
c000175a:	f7 d8                	neg    eax
c000175c:	21 c3                	and    ebx,eax
c000175e:	83 eb 08             	sub    ebx,0x8
c0001761:	89 d8                	mov    eax,ebx
c0001763:	29 f0                	sub    eax,esi
c0001765:	83 f8 0f             	cmp    eax,0xf
c0001768:	77 02                	ja     c000176c <dlmemalign+0x98>
c000176a:	01 fb                	add    ebx,edi
c000176c:	89 d8                	mov    eax,ebx
c000176e:	29 f0                	sub    eax,esi
c0001770:	89 c6                	mov    esi,eax
c0001772:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001775:	89 c2                	mov    edx,eax
c0001777:	83 e2 fc             	and    edx,0xfffffffc
c000177a:	29 f2                	sub    edx,esi
c000177c:	a8 02                	test   al,0x2
c000177e:	74 10                	je     c0001790 <dlmemalign+0xbc>
c0001780:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001783:	83 ca 02             	or     edx,0x2
c0001786:	8d 43 08             	lea    eax,[ebx+0x8]
c0001789:	89 33                	mov    DWORD PTR [ebx],esi
c000178b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000178e:	eb 5f                	jmp    c00017ef <dlmemalign+0x11b>
c0001790:	83 ec 0c             	sub    esp,0xc
c0001793:	89 d0                	mov    eax,edx
c0001795:	83 c8 01             	or     eax,0x1
c0001798:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000179b:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017a0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a3:	83 e0 01             	and    eax,0x1
c00017a6:	09 f0                	or     eax,esi
c00017a8:	89 de                	mov    esi,ebx
c00017aa:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017ad:	51                   	push   ecx
c00017ae:	e8 e6 f4 ff ff       	call   c0000c99 <dlfree>
c00017b3:	83 c4 10             	add    esp,0x10
c00017b6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017b9:	a8 02                	test   al,0x2
c00017bb:	75 2f                	jne    c00017ec <dlmemalign+0x118>
c00017bd:	83 e0 fc             	and    eax,0xfffffffc
c00017c0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017c3:	39 c2                	cmp    edx,eax
c00017c5:	73 25                	jae    c00017ec <dlmemalign+0x118>
c00017c7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ca:	83 ec 0c             	sub    esp,0xc
c00017cd:	29 e8                	sub    eax,ebp
c00017cf:	83 c2 08             	add    edx,0x8
c00017d2:	83 c8 01             	or     eax,0x1
c00017d5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017d8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017db:	83 e0 01             	and    eax,0x1
c00017de:	09 c5                	or     ebp,eax
c00017e0:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00017e3:	52                   	push   edx
c00017e4:	e8 b0 f4 ff ff       	call   c0000c99 <dlfree>
c00017e9:	83 c4 10             	add    esp,0x10
c00017ec:	8d 46 08             	lea    eax,[esi+0x8]
c00017ef:	83 c4 0c             	add    esp,0xc
c00017f2:	5b                   	pop    ebx
c00017f3:	5e                   	pop    esi
c00017f4:	5f                   	pop    edi
c00017f5:	5d                   	pop    ebp
c00017f6:	c3                   	ret    

c00017f7 <dlcalloc>:
c00017f7:	53                   	push   ebx
c00017f8:	83 ec 14             	sub    esp,0x14
c00017fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00017ff:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001804:	50                   	push   eax
c0001805:	e8 ea f7 ff ff       	call   c0000ff4 <dlmalloc>
c000180a:	83 c4 10             	add    esp,0x10
c000180d:	89 c3                	mov    ebx,eax
c000180f:	85 c0                	test   eax,eax
c0001811:	74 77                	je     c000188a <dlcalloc+0x93>
c0001813:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001816:	89 d0                	mov    eax,edx
c0001818:	83 e0 fc             	and    eax,0xfffffffc
c000181b:	80 e2 02             	and    dl,0x2
c000181e:	75 5a                	jne    c000187a <dlcalloc+0x83>
c0001820:	83 e8 04             	sub    eax,0x4
c0001823:	83 f8 27             	cmp    eax,0x27
c0001826:	76 03                	jbe    c000182b <dlcalloc+0x34>
c0001828:	51                   	push   ecx
c0001829:	eb 53                	jmp    c000187e <dlcalloc+0x87>
c000182b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001831:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001838:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000183f:	83 f8 13             	cmp    eax,0x13
c0001842:	76 46                	jbe    c000188a <dlcalloc+0x93>
c0001844:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000184b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001852:	83 f8 1b             	cmp    eax,0x1b
c0001855:	76 33                	jbe    c000188a <dlcalloc+0x93>
c0001857:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000185e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001865:	83 f8 23             	cmp    eax,0x23
c0001868:	76 20                	jbe    c000188a <dlcalloc+0x93>
c000186a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001871:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001878:	eb 10                	jmp    c000188a <dlcalloc+0x93>
c000187a:	83 e8 08             	sub    eax,0x8
c000187d:	52                   	push   edx
c000187e:	50                   	push   eax
c000187f:	6a 00                	push   0x0
c0001881:	53                   	push   ebx
c0001882:	e8 49 ec ff ff       	call   c00004d0 <memset>
c0001887:	83 c4 10             	add    esp,0x10
c000188a:	89 d8                	mov    eax,ebx
c000188c:	83 c4 08             	add    esp,0x8
c000188f:	5b                   	pop    ebx
c0001890:	c3                   	ret    

c0001891 <dlcfree>:
c0001891:	e9 03 f4 ff ff       	jmp    c0000c99 <dlfree>

c0001896 <dlindependent_calloc>:
c0001896:	83 ec 28             	sub    esp,0x28
c0001899:	b9 03 00 00 00       	mov    ecx,0x3
c000189e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018aa:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018b2:	e8 cb fa ff ff       	call   c0001382 <iALLOc>
c00018b7:	83 c4 2c             	add    esp,0x2c
c00018ba:	c3                   	ret    

c00018bb <dlindependent_comalloc>:
c00018bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018c3:	31 c9                	xor    ecx,ecx
c00018c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018cd:	e9 b0 fa ff ff       	jmp    c0001382 <iALLOc>

c00018d2 <dlvalloc>:
c00018d2:	83 ec 0c             	sub    esp,0xc
c00018d5:	83 3d 00 11 02 c0 00 	cmp    DWORD PTR ds:0xc0021100,0x0
c00018dc:	75 0a                	jne    c00018e8 <dlvalloc+0x16>
c00018de:	b8 00 11 02 c0       	mov    eax,0xc0021100
c00018e3:	e8 ca f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c00018e8:	50                   	push   eax
c00018e9:	50                   	push   eax
c00018ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00018ee:	ff 35 5c 14 02 c0    	push   DWORD PTR ds:0xc002145c
c00018f4:	e8 db fd ff ff       	call   c00016d4 <dlmemalign>
c00018f9:	83 c4 1c             	add    esp,0x1c
c00018fc:	c3                   	ret    

c00018fd <dlpvalloc>:
c00018fd:	83 ec 0c             	sub    esp,0xc
c0001900:	83 3d 00 11 02 c0 00 	cmp    DWORD PTR ds:0xc0021100,0x0
c0001907:	75 0a                	jne    c0001913 <dlpvalloc+0x16>
c0001909:	b8 00 11 02 c0       	mov    eax,0xc0021100
c000190e:	e8 9f f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001913:	a1 5c 14 02 c0       	mov    eax,ds:0xc002145c
c0001918:	89 c1                	mov    ecx,eax
c000191a:	52                   	push   edx
c000191b:	f7 d9                	neg    ecx
c000191d:	52                   	push   edx
c000191e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001922:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001926:	21 ca                	and    edx,ecx
c0001928:	52                   	push   edx
c0001929:	50                   	push   eax
c000192a:	e8 a5 fd ff ff       	call   c00016d4 <dlmemalign>
c000192f:	83 c4 1c             	add    esp,0x1c
c0001932:	c3                   	ret    

c0001933 <dlmalloc_trim>:
c0001933:	b8 00 11 02 c0       	mov    eax,0xc0021100
c0001938:	e8 75 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000193d:	31 c0                	xor    eax,eax
c000193f:	c3                   	ret    

c0001940 <dlmalloc_usable_size>:
c0001940:	53                   	push   ebx
c0001941:	31 c0                	xor    eax,eax
c0001943:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001947:	85 c9                	test   ecx,ecx
c0001949:	74 24                	je     c000196f <dlmalloc_usable_size+0x2f>
c000194b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000194e:	f6 c2 02             	test   dl,0x2
c0001951:	74 08                	je     c000195b <dlmalloc_usable_size+0x1b>
c0001953:	83 e2 fc             	and    edx,0xfffffffc
c0001956:	8d 42 f8             	lea    eax,[edx-0x8]
c0001959:	eb 14                	jmp    c000196f <dlmalloc_usable_size+0x2f>
c000195b:	89 d3                	mov    ebx,edx
c000195d:	31 c0                	xor    eax,eax
c000195f:	83 e3 fe             	and    ebx,0xfffffffe
c0001962:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001967:	74 06                	je     c000196f <dlmalloc_usable_size+0x2f>
c0001969:	83 e2 fc             	and    edx,0xfffffffc
c000196c:	8d 42 fc             	lea    eax,[edx-0x4]
c000196f:	5b                   	pop    ebx
c0001970:	c3                   	ret    

c0001971 <dlmallinfo>:
c0001971:	55                   	push   ebp
c0001972:	57                   	push   edi
c0001973:	56                   	push   esi
c0001974:	53                   	push   ebx
c0001975:	83 ec 08             	sub    esp,0x8
c0001978:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000197c:	83 3d 2c 11 02 c0 00 	cmp    DWORD PTR ds:0xc002112c,0x0
c0001983:	75 0a                	jne    c000198f <dlmallinfo+0x1e>
c0001985:	b8 00 11 02 c0       	mov    eax,0xc0021100
c000198a:	e8 23 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000198f:	a1 2c 11 02 c0       	mov    eax,ds:0xc002112c
c0001994:	31 ed                	xor    ebp,ebp
c0001996:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001999:	31 c9                	xor    ecx,ecx
c000199b:	83 e0 fc             	and    eax,0xfffffffc
c000199e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019a2:	31 c0                	xor    eax,eax
c00019a4:	8b 14 85 04 11 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdeefc]
c00019ab:	85 d2                	test   edx,edx
c00019ad:	74 0e                	je     c00019bd <dlmallinfo+0x4c>
c00019af:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019b2:	45                   	inc    ebp
c00019b3:	83 e6 fc             	and    esi,0xfffffffc
c00019b6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019b9:	01 f1                	add    ecx,esi
c00019bb:	eb ee                	jmp    c00019ab <dlmallinfo+0x3a>
c00019bd:	40                   	inc    eax
c00019be:	83 f8 0a             	cmp    eax,0xa
c00019c1:	75 e1                	jne    c00019a4 <dlmallinfo+0x33>
c00019c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019c7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ce:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019d1:	b8 34 11 02 c0       	mov    eax,0xc0021134
c00019d6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019d9:	39 f0                	cmp    eax,esi
c00019db:	74 10                	je     c00019ed <dlmallinfo+0x7c>
c00019dd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00019e0:	ff 04 24             	inc    DWORD PTR [esp]
c00019e3:	83 e7 fc             	and    edi,0xfffffffc
c00019e6:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00019e9:	01 fa                	add    edx,edi
c00019eb:	eb ec                	jmp    c00019d9 <dlmallinfo+0x68>
c00019ed:	83 c0 08             	add    eax,0x8
c00019f0:	3d 2c 14 02 c0       	cmp    eax,0xc002142c
c00019f5:	75 df                	jne    c00019d6 <dlmallinfo+0x65>
c00019f7:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00019fa:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00019fd:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a00:	a1 68 14 02 c0       	mov    eax,ds:0xc0021468
c0001a05:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a08:	89 03                	mov    DWORD PTR [ebx],eax
c0001a0a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a0d:	8b 35 50 14 02 c0    	mov    esi,DWORD PTR ds:0xc0021450
c0001a13:	29 d0                	sub    eax,edx
c0001a15:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a18:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a1b:	8b 35 64 14 02 c0    	mov    esi,DWORD PTR ds:0xc0021464
c0001a21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a25:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a28:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a2b:	8b 35 74 14 02 c0    	mov    esi,DWORD PTR ds:0xc0021474
c0001a31:	89 d8                	mov    eax,ebx
c0001a33:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a36:	83 c4 08             	add    esp,0x8
c0001a39:	5b                   	pop    ebx
c0001a3a:	5e                   	pop    esi
c0001a3b:	5f                   	pop    edi
c0001a3c:	5d                   	pop    ebp
c0001a3d:	c2 04 00             	ret    0x4

c0001a40 <dlmalloc_stats>:
c0001a40:	83 ec 30             	sub    esp,0x30
c0001a43:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a47:	50                   	push   eax
c0001a48:	e8 24 ff ff ff       	call   c0001971 <dlmallinfo>
c0001a4d:	83 c4 30             	add    esp,0x30
c0001a50:	c3                   	ret    

c0001a51 <dlmallopt>:
c0001a51:	56                   	push   esi
c0001a52:	b8 00 11 02 c0       	mov    eax,0xc0021100
c0001a57:	53                   	push   ebx
c0001a58:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a60:	e8 4d f1 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001a65:	8d 46 04             	lea    eax,[esi+0x4]
c0001a68:	83 f8 05             	cmp    eax,0x5
c0001a6b:	77 67                	ja     c0001ad4 <dlmallopt+0x83>
c0001a6d:	ff 24 85 24 cf 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe30dc]
c0001a74:	83 fb 50             	cmp    ebx,0x50
c0001a77:	77 5b                	ja     c0001ad4 <dlmallopt+0x83>
c0001a79:	ba 08 00 00 00       	mov    edx,0x8
c0001a7e:	85 db                	test   ebx,ebx
c0001a80:	74 12                	je     c0001a94 <dlmallopt+0x43>
c0001a82:	83 c3 0b             	add    ebx,0xb
c0001a85:	ba 10 00 00 00       	mov    edx,0x10
c0001a8a:	83 fb 0f             	cmp    ebx,0xf
c0001a8d:	76 05                	jbe    c0001a94 <dlmallopt+0x43>
c0001a8f:	89 da                	mov    edx,ebx
c0001a91:	83 e2 f8             	and    edx,0xfffffff8
c0001a94:	a1 00 11 02 c0       	mov    eax,ds:0xc0021100
c0001a99:	83 e0 03             	and    eax,0x3
c0001a9c:	09 d0                	or     eax,edx
c0001a9e:	a3 00 11 02 c0       	mov    ds:0xc0021100,eax
c0001aa3:	eb 31                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aa5:	89 1d 44 14 02 c0    	mov    DWORD PTR ds:0xc0021444,ebx
c0001aab:	eb 06                	jmp    c0001ab3 <dlmallopt+0x62>
c0001aad:	89 1d 48 14 02 c0    	mov    DWORD PTR ds:0xc0021448,ebx
c0001ab3:	be 01 00 00 00       	mov    esi,0x1
c0001ab8:	eb 1c                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aba:	89 1d 4c 14 02 c0    	mov    DWORD PTR ds:0xc002144c,ebx
c0001ac0:	eb f1                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ac2:	31 f6                	xor    esi,esi
c0001ac4:	85 db                	test   ebx,ebx
c0001ac6:	75 0e                	jne    c0001ad6 <dlmallopt+0x85>
c0001ac8:	c7 05 54 14 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021454,0x0
c0001ad2:	eb df                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ad4:	31 f6                	xor    esi,esi
c0001ad6:	89 f0                	mov    eax,esi
c0001ad8:	5b                   	pop    ebx
c0001ad9:	5e                   	pop    esi
c0001ada:	c3                   	ret    
c0001adb:	90                   	nop

c0001adc <isblank>:
c0001adc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ae1:	74 09                	je     c0001aec <isblank+0x10>
c0001ae3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ae8:	75 0a                	jne    c0001af4 <isblank+0x18>
c0001aea:	66 90                	xchg   ax,ax
c0001aec:	b8 01 00 00 00       	mov    eax,0x1
c0001af1:	c3                   	ret    
c0001af2:	66 90                	xchg   ax,ax
c0001af4:	b8 00 00 00 00       	mov    eax,0x0
c0001af9:	c3                   	ret    
c0001afa:	66 90                	xchg   ax,ax

c0001afc <iscntrl>:
c0001afc:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001b01:	7e 09                	jle    c0001b0c <iscntrl+0x10>
c0001b03:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001b08:	75 0a                	jne    c0001b14 <iscntrl+0x18>
c0001b0a:	66 90                	xchg   ax,ax
c0001b0c:	b8 01 00 00 00       	mov    eax,0x1
c0001b11:	c3                   	ret    
c0001b12:	66 90                	xchg   ax,ax
c0001b14:	b8 00 00 00 00       	mov    eax,0x0
c0001b19:	c3                   	ret    
c0001b1a:	66 90                	xchg   ax,ax

c0001b1c <isdigit>:
c0001b1c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b21:	7e 0d                	jle    c0001b30 <isdigit+0x14>
c0001b23:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b28:	7f 06                	jg     c0001b30 <isdigit+0x14>
c0001b2a:	b8 01 00 00 00       	mov    eax,0x1
c0001b2f:	c3                   	ret    
c0001b30:	b8 00 00 00 00       	mov    eax,0x0
c0001b35:	c3                   	ret    
c0001b36:	66 90                	xchg   ax,ax

c0001b38 <islower>:
c0001b38:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b3d:	7e 0d                	jle    c0001b4c <islower+0x14>
c0001b3f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b44:	7f 06                	jg     c0001b4c <islower+0x14>
c0001b46:	b8 01 00 00 00       	mov    eax,0x1
c0001b4b:	c3                   	ret    
c0001b4c:	b8 00 00 00 00       	mov    eax,0x0
c0001b51:	c3                   	ret    
c0001b52:	66 90                	xchg   ax,ax

c0001b54 <isspace>:
c0001b54:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b59:	7c 19                	jl     c0001b74 <isspace+0x20>
c0001b5b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b60:	7e 0a                	jle    c0001b6c <isspace+0x18>
c0001b62:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b67:	75 0b                	jne    c0001b74 <isspace+0x20>
c0001b69:	8d 76 00             	lea    esi,[esi+0x0]
c0001b6c:	b8 01 00 00 00       	mov    eax,0x1
c0001b71:	c3                   	ret    
c0001b72:	66 90                	xchg   ax,ax
c0001b74:	b8 00 00 00 00       	mov    eax,0x0
c0001b79:	c3                   	ret    
c0001b7a:	66 90                	xchg   ax,ax

c0001b7c <isupper>:
c0001b7c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001b81:	7e 0d                	jle    c0001b90 <isupper+0x14>
c0001b83:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001b88:	7f 06                	jg     c0001b90 <isupper+0x14>
c0001b8a:	b8 01 00 00 00       	mov    eax,0x1
c0001b8f:	c3                   	ret    
c0001b90:	b8 00 00 00 00       	mov    eax,0x0
c0001b95:	c3                   	ret    
c0001b96:	66 90                	xchg   ax,ax

c0001b98 <isalpha>:
c0001b98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001b9c:	e8 db ff ff ff       	call   c0001b7c <isupper>
c0001ba1:	83 c4 04             	add    esp,0x4
c0001ba4:	85 c0                	test   eax,eax
c0001ba6:	75 10                	jne    c0001bb8 <isalpha+0x20>
c0001ba8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bac:	e8 87 ff ff ff       	call   c0001b38 <islower>
c0001bb1:	83 c4 04             	add    esp,0x4
c0001bb4:	85 c0                	test   eax,eax
c0001bb6:	74 08                	je     c0001bc0 <isalpha+0x28>
c0001bb8:	b8 01 00 00 00       	mov    eax,0x1
c0001bbd:	c3                   	ret    
c0001bbe:	66 90                	xchg   ax,ax
c0001bc0:	b8 00 00 00 00       	mov    eax,0x0
c0001bc5:	c3                   	ret    
c0001bc6:	66 90                	xchg   ax,ax

c0001bc8 <isalnum>:
c0001bc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bcc:	e8 c7 ff ff ff       	call   c0001b98 <isalpha>
c0001bd1:	83 c4 04             	add    esp,0x4
c0001bd4:	85 c0                	test   eax,eax
c0001bd6:	75 10                	jne    c0001be8 <isalnum+0x20>
c0001bd8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bdc:	e8 3b ff ff ff       	call   c0001b1c <isdigit>
c0001be1:	83 c4 04             	add    esp,0x4
c0001be4:	85 c0                	test   eax,eax
c0001be6:	74 08                	je     c0001bf0 <isalnum+0x28>
c0001be8:	b8 01 00 00 00       	mov    eax,0x1
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax
c0001bf0:	b8 00 00 00 00       	mov    eax,0x0
c0001bf5:	c3                   	ret    
c0001bf6:	66 90                	xchg   ax,ax

c0001bf8 <ispunct>:
c0001bf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bfc:	e8 c7 ff ff ff       	call   c0001bc8 <isalnum>
c0001c01:	83 c4 04             	add    esp,0x4
c0001c04:	85 c0                	test   eax,eax
c0001c06:	75 28                	jne    c0001c30 <ispunct+0x38>
c0001c08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c0c:	e8 43 ff ff ff       	call   c0001b54 <isspace>
c0001c11:	83 c4 04             	add    esp,0x4
c0001c14:	85 c0                	test   eax,eax
c0001c16:	75 18                	jne    c0001c30 <ispunct+0x38>
c0001c18:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c1c:	e8 db fe ff ff       	call   c0001afc <iscntrl>
c0001c21:	83 c4 04             	add    esp,0x4
c0001c24:	85 c0                	test   eax,eax
c0001c26:	75 08                	jne    c0001c30 <ispunct+0x38>
c0001c28:	b8 01 00 00 00       	mov    eax,0x1
c0001c2d:	c3                   	ret    
c0001c2e:	66 90                	xchg   ax,ax
c0001c30:	b8 00 00 00 00       	mov    eax,0x0
c0001c35:	c3                   	ret    
c0001c36:	66 90                	xchg   ax,ax

c0001c38 <isgraph>:
c0001c38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c3c:	e8 87 ff ff ff       	call   c0001bc8 <isalnum>
c0001c41:	83 c4 04             	add    esp,0x4
c0001c44:	85 c0                	test   eax,eax
c0001c46:	75 10                	jne    c0001c58 <isgraph+0x20>
c0001c48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c4c:	e8 a7 ff ff ff       	call   c0001bf8 <ispunct>
c0001c51:	83 c4 04             	add    esp,0x4
c0001c54:	85 c0                	test   eax,eax
c0001c56:	74 08                	je     c0001c60 <isgraph+0x28>
c0001c58:	b8 01 00 00 00       	mov    eax,0x1
c0001c5d:	c3                   	ret    
c0001c5e:	66 90                	xchg   ax,ax
c0001c60:	b8 00 00 00 00       	mov    eax,0x0
c0001c65:	c3                   	ret    
c0001c66:	66 90                	xchg   ax,ax

c0001c68 <isprint>:
c0001c68:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c6c:	e8 c7 ff ff ff       	call   c0001c38 <isgraph>
c0001c71:	83 c4 04             	add    esp,0x4
c0001c74:	85 c0                	test   eax,eax
c0001c76:	75 08                	jne    c0001c80 <isprint+0x18>
c0001c78:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c7d:	75 09                	jne    c0001c88 <isprint+0x20>
c0001c7f:	90                   	nop
c0001c80:	b8 01 00 00 00       	mov    eax,0x1
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax
c0001c88:	b8 00 00 00 00       	mov    eax,0x0
c0001c8d:	c3                   	ret    
c0001c8e:	66 90                	xchg   ax,ax

c0001c90 <isxdigit>:
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 83 fe ff ff       	call   c0001b1c <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	75 20                	jne    c0001cc0 <isxdigit+0x30>
c0001ca0:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ca5:	7e 09                	jle    c0001cb0 <isxdigit+0x20>
c0001ca7:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001cac:	7e 12                	jle    c0001cc0 <isxdigit+0x30>
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cb5:	7e 11                	jle    c0001cc8 <isxdigit+0x38>
c0001cb7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cbc:	7f 0a                	jg     c0001cc8 <isxdigit+0x38>
c0001cbe:	66 90                	xchg   ax,ax
c0001cc0:	b8 01 00 00 00       	mov    eax,0x1
c0001cc5:	c3                   	ret    
c0001cc6:	66 90                	xchg   ax,ax
c0001cc8:	b8 00 00 00 00       	mov    eax,0x0
c0001ccd:	c3                   	ret    

c0001cce <disk_status>:
c0001cce:	31 c0                	xor    eax,eax
c0001cd0:	c3                   	ret    

c0001cd1 <disk_initialize>:
c0001cd1:	31 c0                	xor    eax,eax
c0001cd3:	c3                   	ret    

c0001cd4 <disk_read>:
c0001cd4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cd9:	0f b6 04 85 c0 52 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdad40]
c0001ce1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ce5:	e9 86 52 01 00       	jmp    c0016f70 <fatWrapperReadDisk>

c0001cea <disk_write>:
c0001cea:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cef:	0f b6 04 85 c0 52 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdad40]
c0001cf7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001cfb:	e9 b4 52 01 00       	jmp    c0016fb4 <fatWrapperWriteDisk>

c0001d00 <disk_ioctl>:
c0001d00:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001d05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001d09:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d0e:	0f b6 04 85 c0 52 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdad40]
c0001d16:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d1a:	e9 d9 52 01 00       	jmp    c0016ff8 <fatWrapperIoctl>

c0001d1f <ld_word>:
c0001d1f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d23:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d26:	c1 e2 08             	shl    edx,0x8
c0001d29:	09 d0                	or     eax,edx
c0001d2b:	c3                   	ret    

c0001d2c <ld_dword>:
c0001d2c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d30:	89 d1                	mov    ecx,edx
c0001d32:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d36:	c1 e1 08             	shl    ecx,0x8
c0001d39:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d3c:	09 ca                	or     edx,ecx
c0001d3e:	c1 e2 08             	shl    edx,0x8
c0001d41:	09 d0                	or     eax,edx
c0001d43:	c3                   	ret    

c0001d44 <st_word>:
c0001d44:	66 89 10             	mov    WORD PTR [eax],dx
c0001d47:	c3                   	ret    

c0001d48 <st_dword>:
c0001d48:	89 10                	mov    DWORD PTR [eax],edx
c0001d4a:	c3                   	ret    

c0001d4b <mem_cpy>:
c0001d4b:	85 c9                	test   ecx,ecx
c0001d4d:	74 10                	je     c0001d5f <mem_cpy+0x14>
c0001d4f:	57                   	push   edi
c0001d50:	01 c1                	add    ecx,eax
c0001d52:	56                   	push   esi
c0001d53:	89 c7                	mov    edi,eax
c0001d55:	89 d6                	mov    esi,edx
c0001d57:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d58:	39 f9                	cmp    ecx,edi
c0001d5a:	75 fb                	jne    c0001d57 <mem_cpy+0xc>
c0001d5c:	5e                   	pop    esi
c0001d5d:	5f                   	pop    edi
c0001d5e:	c3                   	ret    
c0001d5f:	c3                   	ret    

c0001d60 <mem_set>:
c0001d60:	01 c1                	add    ecx,eax
c0001d62:	40                   	inc    eax
c0001d63:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d66:	39 c8                	cmp    eax,ecx
c0001d68:	75 f8                	jne    c0001d62 <mem_set+0x2>
c0001d6a:	c3                   	ret    

c0001d6b <mem_cmp>:
c0001d6b:	57                   	push   edi
c0001d6c:	56                   	push   esi
c0001d6d:	89 c6                	mov    esi,eax
c0001d6f:	53                   	push   ebx
c0001d70:	46                   	inc    esi
c0001d71:	42                   	inc    edx
c0001d72:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d76:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d7a:	29 fb                	sub    ebx,edi
c0001d7c:	89 cf                	mov    edi,ecx
c0001d7e:	29 f7                	sub    edi,esi
c0001d80:	01 c7                	add    edi,eax
c0001d82:	74 04                	je     c0001d88 <mem_cmp+0x1d>
c0001d84:	85 db                	test   ebx,ebx
c0001d86:	74 e8                	je     c0001d70 <mem_cmp+0x5>
c0001d88:	89 d8                	mov    eax,ebx
c0001d8a:	5b                   	pop    ebx
c0001d8b:	5e                   	pop    esi
c0001d8c:	5f                   	pop    edi
c0001d8d:	c3                   	ret    

c0001d8e <chk_chr>:
c0001d8e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d91:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d94:	74 07                	je     c0001d9d <chk_chr+0xf>
c0001d96:	39 d1                	cmp    ecx,edx
c0001d98:	74 03                	je     c0001d9d <chk_chr+0xf>
c0001d9a:	40                   	inc    eax
c0001d9b:	eb f1                	jmp    c0001d8e <chk_chr>
c0001d9d:	89 c8                	mov    eax,ecx
c0001d9f:	c3                   	ret    

c0001da0 <dbc_1st>:
c0001da0:	31 c0                	xor    eax,eax
c0001da2:	c3                   	ret    

c0001da3 <dbc_2nd>:
c0001da3:	31 c0                	xor    eax,eax
c0001da5:	c3                   	ret    

c0001da6 <tchar2uni>:
c0001da6:	57                   	push   edi
c0001da7:	89 c7                	mov    edi,eax
c0001da9:	56                   	push   esi
c0001daa:	53                   	push   ebx
c0001dab:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001dad:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001daf:	8d 73 01             	lea    esi,[ebx+0x1]
c0001db2:	84 c9                	test   cl,cl
c0001db4:	78 0a                	js     c0001dc0 <tchar2uni+0x1a>
c0001db6:	0f b6 d1             	movzx  edx,cl
c0001db9:	89 f3                	mov    ebx,esi
c0001dbb:	e9 9f 00 00 00       	jmp    c0001e5f <tchar2uni+0xb9>
c0001dc0:	88 ca                	mov    dl,cl
c0001dc2:	83 e2 e0             	and    edx,0xffffffe0
c0001dc5:	80 fa c0             	cmp    dl,0xc0
c0001dc8:	75 0c                	jne    c0001dd6 <tchar2uni+0x30>
c0001dca:	89 ca                	mov    edx,ecx
c0001dcc:	b9 01 00 00 00       	mov    ecx,0x1
c0001dd1:	83 e2 1f             	and    edx,0x1f
c0001dd4:	eb 2e                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dd6:	88 ca                	mov    dl,cl
c0001dd8:	83 e2 f0             	and    edx,0xfffffff0
c0001ddb:	80 fa e0             	cmp    dl,0xe0
c0001dde:	75 0c                	jne    c0001dec <tchar2uni+0x46>
c0001de0:	89 ca                	mov    edx,ecx
c0001de2:	b9 02 00 00 00       	mov    ecx,0x2
c0001de7:	83 e2 0f             	and    edx,0xf
c0001dea:	eb 18                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dec:	88 ca                	mov    dl,cl
c0001dee:	83 e2 f8             	and    edx,0xfffffff8
c0001df1:	88 d0                	mov    al,dl
c0001df3:	83 ca ff             	or     edx,0xffffffff
c0001df6:	3c f0                	cmp    al,0xf0
c0001df8:	75 6c                	jne    c0001e66 <tchar2uni+0xc0>
c0001dfa:	89 ca                	mov    edx,ecx
c0001dfc:	b9 03 00 00 00       	mov    ecx,0x3
c0001e01:	83 e2 07             	and    edx,0x7
c0001e04:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001e08:	46                   	inc    esi
c0001e09:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001e0c:	88 c8                	mov    al,cl
c0001e0e:	83 e0 c0             	and    eax,0xffffffc0
c0001e11:	3c 80                	cmp    al,0x80
c0001e13:	75 4e                	jne    c0001e63 <tchar2uni+0xbd>
c0001e15:	c1 e2 06             	shl    edx,0x6
c0001e18:	83 e1 3f             	and    ecx,0x3f
c0001e1b:	09 ca                	or     edx,ecx
c0001e1d:	39 de                	cmp    esi,ebx
c0001e1f:	75 e7                	jne    c0001e08 <tchar2uni+0x62>
c0001e21:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e24:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e2a:	77 37                	ja     c0001e63 <tchar2uni+0xbd>
c0001e2c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e32:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e38:	76 29                	jbe    c0001e63 <tchar2uni+0xbd>
c0001e3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e40:	76 1d                	jbe    c0001e5f <tchar2uni+0xb9>
c0001e42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e4e:	c1 e1 06             	shl    ecx,0x6
c0001e51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e57:	09 ca                	or     edx,ecx
c0001e59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e5f:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e61:	eb 03                	jmp    c0001e66 <tchar2uni+0xc0>
c0001e63:	83 ca ff             	or     edx,0xffffffff
c0001e66:	5b                   	pop    ebx
c0001e67:	89 d0                	mov    eax,edx
c0001e69:	5e                   	pop    esi
c0001e6a:	5f                   	pop    edi
c0001e6b:	c3                   	ret    

c0001e6c <put_utf>:
c0001e6c:	53                   	push   ebx
c0001e6d:	83 f8 7f             	cmp    eax,0x7f
c0001e70:	89 c3                	mov    ebx,eax
c0001e72:	b0 00                	mov    al,0x0
c0001e74:	77 11                	ja     c0001e87 <put_utf+0x1b>
c0001e76:	85 c9                	test   ecx,ecx
c0001e78:	0f 84 e5 00 00 00    	je     c0001f63 <put_utf+0xf7>
c0001e7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001e80:	b0 01                	mov    al,0x1
c0001e82:	e9 dc 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001e87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e8d:	77 23                	ja     c0001eb2 <put_utf+0x46>
c0001e8f:	83 f9 01             	cmp    ecx,0x1
c0001e92:	0f 86 cb 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001e98:	89 d8                	mov    eax,ebx
c0001e9a:	83 e3 3f             	and    ebx,0x3f
c0001e9d:	c1 e8 06             	shr    eax,0x6
c0001ea0:	83 cb 80             	or     ebx,0xffffff80
c0001ea3:	83 c8 c0             	or     eax,0xffffffc0
c0001ea6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001ea9:	88 02                	mov    BYTE PTR [edx],al
c0001eab:	b0 02                	mov    al,0x2
c0001ead:	e9 b1 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001eb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001eb8:	77 40                	ja     c0001efa <put_utf+0x8e>
c0001eba:	83 f9 02             	cmp    ecx,0x2
c0001ebd:	0f 86 a0 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ec3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ec9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001ecf:	0f 86 8e 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ed5:	89 d8                	mov    eax,ebx
c0001ed7:	c1 e8 0c             	shr    eax,0xc
c0001eda:	83 c8 e0             	or     eax,0xffffffe0
c0001edd:	88 02                	mov    BYTE PTR [edx],al
c0001edf:	89 d8                	mov    eax,ebx
c0001ee1:	83 e3 3f             	and    ebx,0x3f
c0001ee4:	c1 e8 06             	shr    eax,0x6
c0001ee7:	83 cb 80             	or     ebx,0xffffff80
c0001eea:	83 e0 3f             	and    eax,0x3f
c0001eed:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001ef0:	83 c8 80             	or     eax,0xffffff80
c0001ef3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ef6:	b0 03                	mov    al,0x3
c0001ef8:	eb 69                	jmp    c0001f63 <put_utf+0xf7>
c0001efa:	83 f9 03             	cmp    ecx,0x3
c0001efd:	76 64                	jbe    c0001f63 <put_utf+0xf7>
c0001eff:	89 d9                	mov    ecx,ebx
c0001f01:	0f b7 c3             	movzx  eax,bx
c0001f04:	66 31 c9             	xor    cx,cx
c0001f07:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001f0d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f13:	c1 e9 06             	shr    ecx,0x6
c0001f16:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f1c:	77 43                	ja     c0001f61 <put_utf+0xf5>
c0001f1e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f24:	77 3b                	ja     c0001f61 <put_utf+0xf5>
c0001f26:	09 cb                	or     ebx,ecx
c0001f28:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f2e:	89 d8                	mov    eax,ebx
c0001f30:	c1 e8 12             	shr    eax,0x12
c0001f33:	83 c8 f0             	or     eax,0xfffffff0
c0001f36:	88 02                	mov    BYTE PTR [edx],al
c0001f38:	89 d8                	mov    eax,ebx
c0001f3a:	c1 e8 0c             	shr    eax,0xc
c0001f3d:	83 e0 3f             	and    eax,0x3f
c0001f40:	83 c8 80             	or     eax,0xffffff80
c0001f43:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f46:	89 d8                	mov    eax,ebx
c0001f48:	83 e3 3f             	and    ebx,0x3f
c0001f4b:	c1 e8 06             	shr    eax,0x6
c0001f4e:	83 cb 80             	or     ebx,0xffffff80
c0001f51:	83 e0 3f             	and    eax,0x3f
c0001f54:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f57:	83 c8 80             	or     eax,0xffffff80
c0001f5a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f5d:	b0 04                	mov    al,0x4
c0001f5f:	eb 02                	jmp    c0001f63 <put_utf+0xf7>
c0001f61:	31 c0                	xor    eax,eax
c0001f63:	5b                   	pop    ebx
c0001f64:	c3                   	ret    

c0001f65 <clst2sect>:
c0001f65:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f68:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f6b:	83 ea 02             	sub    edx,0x2
c0001f6e:	39 ca                	cmp    edx,ecx
c0001f70:	76 0d                	jbe    c0001f7f <clst2sect+0x1a>
c0001f72:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f76:	0f af d1             	imul   edx,ecx
c0001f79:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f7c:	89 d0                	mov    eax,edx
c0001f7e:	c3                   	ret    
c0001f7f:	31 c0                	xor    eax,eax
c0001f81:	c3                   	ret    

c0001f82 <pick_lfn>:
c0001f82:	55                   	push   ebp
c0001f83:	57                   	push   edi
c0001f84:	56                   	push   esi
c0001f85:	89 d6                	mov    esi,edx
c0001f87:	53                   	push   ebx
c0001f88:	89 c3                	mov    ebx,eax
c0001f8a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f8d:	e8 8d fd ff ff       	call   c0001d1f <ld_word>
c0001f92:	66 85 c0             	test   ax,ax
c0001f95:	74 04                	je     c0001f9b <pick_lfn+0x19>
c0001f97:	31 c0                	xor    eax,eax
c0001f99:	eb 5c                	jmp    c0001ff7 <pick_lfn+0x75>
c0001f9b:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f9e:	bd 01 00 00 00       	mov    ebp,0x1
c0001fa3:	83 e1 bf             	and    ecx,0xffffffbf
c0001fa6:	31 ff                	xor    edi,edi
c0001fa8:	49                   	dec    ecx
c0001fa9:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fac:	0f b6 87 80 d0 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe2f80]
c0001fb3:	01 f0                	add    eax,esi
c0001fb5:	e8 65 fd ff ff       	call   c0001d1f <ld_word>
c0001fba:	66 85 ed             	test   bp,bp
c0001fbd:	74 11                	je     c0001fd0 <pick_lfn+0x4e>
c0001fbf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fc5:	77 d0                	ja     c0001f97 <pick_lfn+0x15>
c0001fc7:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fcb:	89 c5                	mov    ebp,eax
c0001fcd:	41                   	inc    ecx
c0001fce:	eb 04                	jmp    c0001fd4 <pick_lfn+0x52>
c0001fd0:	66 40                	inc    ax
c0001fd2:	75 c3                	jne    c0001f97 <pick_lfn+0x15>
c0001fd4:	47                   	inc    edi
c0001fd5:	83 ff 0d             	cmp    edi,0xd
c0001fd8:	75 d2                	jne    c0001fac <pick_lfn+0x2a>
c0001fda:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fdd:	74 13                	je     c0001ff2 <pick_lfn+0x70>
c0001fdf:	66 85 ed             	test   bp,bp
c0001fe2:	74 0e                	je     c0001ff2 <pick_lfn+0x70>
c0001fe4:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fea:	77 ab                	ja     c0001f97 <pick_lfn+0x15>
c0001fec:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ff2:	b8 01 00 00 00       	mov    eax,0x1
c0001ff7:	5b                   	pop    ebx
c0001ff8:	5e                   	pop    esi
c0001ff9:	5f                   	pop    edi
c0001ffa:	5d                   	pop    ebp
c0001ffb:	c3                   	ret    

c0001ffc <put_lfn>:
c0001ffc:	55                   	push   ebp
c0001ffd:	31 ed                	xor    ebp,ebp
c0001fff:	57                   	push   edi
c0002000:	89 d7                	mov    edi,edx
c0002002:	56                   	push   esi
c0002003:	31 f6                	xor    esi,esi
c0002005:	53                   	push   ebx
c0002006:	83 ec 08             	sub    esp,0x8
c0002009:	89 04 24             	mov    DWORD PTR [esp],eax
c000200c:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002010:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002014:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000201a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000201d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002020:	31 d2                	xor    edx,edx
c0002022:	e8 1d fd ff ff       	call   c0001d44 <st_word>
c0002027:	0f b6 d9             	movzx  ebx,cl
c000202a:	4b                   	dec    ebx
c000202b:	6b db 0d             	imul   ebx,ebx,0xd
c000202e:	66 83 fe ff          	cmp    si,0xffff
c0002032:	74 08                	je     c000203c <put_lfn+0x40>
c0002034:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002037:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000203b:	43                   	inc    ebx
c000203c:	0f b6 85 80 d0 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe2f80]
c0002043:	0f b7 d6             	movzx  edx,si
c0002046:	01 f8                	add    eax,edi
c0002048:	e8 f7 fc ff ff       	call   c0001d44 <st_word>
c000204d:	66 85 f6             	test   si,si
c0002050:	75 03                	jne    c0002055 <put_lfn+0x59>
c0002052:	83 ce ff             	or     esi,0xffffffff
c0002055:	45                   	inc    ebp
c0002056:	83 fd 0d             	cmp    ebp,0xd
c0002059:	75 d3                	jne    c000202e <put_lfn+0x32>
c000205b:	66 46                	inc    si
c000205d:	74 0a                	je     c0002069 <put_lfn+0x6d>
c000205f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002062:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002067:	75 09                	jne    c0002072 <put_lfn+0x76>
c0002069:	88 c8                	mov    al,cl
c000206b:	83 c8 40             	or     eax,0x40
c000206e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002072:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002076:	88 07                	mov    BYTE PTR [edi],al
c0002078:	83 c4 08             	add    esp,0x8
c000207b:	5b                   	pop    ebx
c000207c:	5e                   	pop    esi
c000207d:	5f                   	pop    edi
c000207e:	5d                   	pop    ebp
c000207f:	c3                   	ret    

c0002080 <gen_numname>:
c0002080:	57                   	push   edi
c0002081:	89 cf                	mov    edi,ecx
c0002083:	56                   	push   esi
c0002084:	b9 0b 00 00 00       	mov    ecx,0xb
c0002089:	53                   	push   ebx
c000208a:	89 c6                	mov    esi,eax
c000208c:	83 ec 10             	sub    esp,0x10
c000208f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002093:	e8 b3 fc ff ff       	call   c0001d4b <mem_cpy>
c0002098:	83 fb 05             	cmp    ebx,0x5
c000209b:	76 2d                	jbe    c00020ca <gen_numname+0x4a>
c000209d:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020a0:	66 85 c0             	test   ax,ax
c00020a3:	74 25                	je     c00020ca <gen_numname+0x4a>
c00020a5:	83 c7 02             	add    edi,0x2
c00020a8:	ba 10 00 00 00       	mov    edx,0x10
c00020ad:	01 db                	add    ebx,ebx
c00020af:	89 c1                	mov    ecx,eax
c00020b1:	66 d1 e8             	shr    ax,1
c00020b4:	83 e1 01             	and    ecx,0x1
c00020b7:	01 cb                	add    ebx,ecx
c00020b9:	0f ba e3 10          	bt     ebx,0x10
c00020bd:	73 06                	jae    c00020c5 <gen_numname+0x45>
c00020bf:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020c5:	4a                   	dec    edx
c00020c6:	75 e5                	jne    c00020ad <gen_numname+0x2d>
c00020c8:	eb d3                	jmp    c000209d <gen_numname+0x1d>
c00020ca:	b8 07 00 00 00       	mov    eax,0x7
c00020cf:	88 d9                	mov    cl,bl
c00020d1:	83 e1 0f             	and    ecx,0xf
c00020d4:	8d 51 30             	lea    edx,[ecx+0x30]
c00020d7:	80 fa 39             	cmp    dl,0x39
c00020da:	76 03                	jbe    c00020df <gen_numname+0x5f>
c00020dc:	8d 51 37             	lea    edx,[ecx+0x37]
c00020df:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020e2:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020e6:	89 da                	mov    edx,ebx
c00020e8:	c1 ea 04             	shr    edx,0x4
c00020eb:	83 fb 0f             	cmp    ebx,0xf
c00020ee:	76 06                	jbe    c00020f6 <gen_numname+0x76>
c00020f0:	89 c8                	mov    eax,ecx
c00020f2:	89 d3                	mov    ebx,edx
c00020f4:	eb d9                	jmp    c00020cf <gen_numname+0x4f>
c00020f6:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020fb:	31 d2                	xor    edx,edx
c00020fd:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002100:	8d 04 16             	lea    eax,[esi+edx*1]
c0002103:	39 ca                	cmp    edx,ecx
c0002105:	73 18                	jae    c000211f <gen_numname+0x9f>
c0002107:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000210a:	3c 20                	cmp    al,0x20
c000210c:	74 11                	je     c000211f <gen_numname+0x9f>
c000210e:	e8 8d fc ff ff       	call   c0001da0 <dbc_1st>
c0002113:	85 c0                	test   eax,eax
c0002115:	74 05                	je     c000211c <gen_numname+0x9c>
c0002117:	39 d3                	cmp    ebx,edx
c0002119:	74 04                	je     c000211f <gen_numname+0x9f>
c000211b:	42                   	inc    edx
c000211c:	42                   	inc    edx
c000211d:	eb e1                	jmp    c0002100 <gen_numname+0x80>
c000211f:	b0 20                	mov    al,0x20
c0002121:	83 f9 07             	cmp    ecx,0x7
c0002124:	77 05                	ja     c000212b <gen_numname+0xab>
c0002126:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000212a:	41                   	inc    ecx
c000212b:	42                   	inc    edx
c000212c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002130:	83 fa 07             	cmp    edx,0x7
c0002133:	76 ea                	jbe    c000211f <gen_numname+0x9f>
c0002135:	83 c4 10             	add    esp,0x10
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	c3                   	ret    

c000213c <sum_sfn>:
c000213c:	31 c9                	xor    ecx,ecx
c000213e:	31 d2                	xor    edx,edx
c0002140:	d0 ca                	ror    dl,1
c0002142:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002145:	41                   	inc    ecx
c0002146:	83 f9 0b             	cmp    ecx,0xb
c0002149:	75 f5                	jne    c0002140 <sum_sfn+0x4>
c000214b:	88 d0                	mov    al,dl
c000214d:	c3                   	ret    

c000214e <get_ldnumber>:
c000214e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002150:	85 d2                	test   edx,edx
c0002152:	74 14                	je     c0002168 <get_ldnumber+0x1a>
c0002154:	56                   	push   esi
c0002155:	53                   	push   ebx
c0002156:	89 d3                	mov    ebx,edx
c0002158:	43                   	inc    ebx
c0002159:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000215c:	80 f9 1f             	cmp    cl,0x1f
c000215f:	76 0d                	jbe    c000216e <get_ldnumber+0x20>
c0002161:	80 f9 3a             	cmp    cl,0x3a
c0002164:	75 f2                	jne    c0002158 <get_ldnumber+0xa>
c0002166:	eb 0a                	jmp    c0002172 <get_ldnumber+0x24>
c0002168:	83 c9 ff             	or     ecx,0xffffffff
c000216b:	89 c8                	mov    eax,ecx
c000216d:	c3                   	ret    
c000216e:	31 c9                	xor    ecx,ecx
c0002170:	eb 24                	jmp    c0002196 <get_ldnumber+0x48>
c0002172:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002175:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002178:	80 f9 09             	cmp    cl,0x9
c000217b:	77 16                	ja     c0002193 <get_ldnumber+0x45>
c000217d:	83 c2 02             	add    edx,0x2
c0002180:	83 c9 ff             	or     ecx,0xffffffff
c0002183:	39 d3                	cmp    ebx,edx
c0002185:	75 0f                	jne    c0002196 <get_ldnumber+0x48>
c0002187:	89 f2                	mov    edx,esi
c0002189:	89 18                	mov    DWORD PTR [eax],ebx
c000218b:	0f be ca             	movsx  ecx,dl
c000218e:	83 e9 30             	sub    ecx,0x30
c0002191:	eb 03                	jmp    c0002196 <get_ldnumber+0x48>
c0002193:	83 c9 ff             	or     ecx,0xffffffff
c0002196:	89 c8                	mov    eax,ecx
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	c3                   	ret    

c000219b <validate>:
c000219b:	56                   	push   esi
c000219c:	53                   	push   ebx
c000219d:	89 d6                	mov    esi,edx
c000219f:	51                   	push   ecx
c00021a0:	85 c0                	test   eax,eax
c00021a2:	75 09                	jne    c00021ad <validate+0x12>
c00021a4:	b8 09 00 00 00       	mov    eax,0x9
c00021a9:	31 c9                	xor    ecx,ecx
c00021ab:	eb 2f                	jmp    c00021dc <validate+0x41>
c00021ad:	89 c3                	mov    ebx,eax
c00021af:	8b 00                	mov    eax,DWORD PTR [eax]
c00021b1:	85 c0                	test   eax,eax
c00021b3:	74 ef                	je     c00021a4 <validate+0x9>
c00021b5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021b8:	74 ea                	je     c00021a4 <validate+0x9>
c00021ba:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021be:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021c2:	75 e0                	jne    c00021a4 <validate+0x9>
c00021c4:	83 ec 0c             	sub    esp,0xc
c00021c7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021cb:	50                   	push   eax
c00021cc:	e8 fd fa ff ff       	call   c0001cce <disk_status>
c00021d1:	83 c4 10             	add    esp,0x10
c00021d4:	a8 01                	test   al,0x1
c00021d6:	75 cc                	jne    c00021a4 <validate+0x9>
c00021d8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021da:	31 c0                	xor    eax,eax
c00021dc:	89 0e                	mov    DWORD PTR [esi],ecx
c00021de:	5a                   	pop    edx
c00021df:	5b                   	pop    ebx
c00021e0:	5e                   	pop    esi
c00021e1:	c3                   	ret    

c00021e2 <sync_window>:
c00021e2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00021e6:	74 58                	je     c0002240 <sync_window+0x5e>
c00021e8:	56                   	push   esi
c00021e9:	53                   	push   ebx
c00021ea:	8d 70 34             	lea    esi,[eax+0x34]
c00021ed:	51                   	push   ecx
c00021ee:	89 c3                	mov    ebx,eax
c00021f0:	6a 01                	push   0x1
c00021f2:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00021f5:	56                   	push   esi
c00021f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021fa:	50                   	push   eax
c00021fb:	e8 ea fa ff ff       	call   c0001cea <disk_write>
c0002200:	83 c4 10             	add    esp,0x10
c0002203:	ba 01 00 00 00       	mov    edx,0x1
c0002208:	85 c0                	test   eax,eax
c000220a:	75 2e                	jne    c000223a <sync_window+0x58>
c000220c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000220f:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002212:	89 c1                	mov    ecx,eax
c0002214:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002218:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000221b:	39 d1                	cmp    ecx,edx
c000221d:	73 19                	jae    c0002238 <sync_window+0x56>
c000221f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002223:	75 13                	jne    c0002238 <sync_window+0x56>
c0002225:	6a 01                	push   0x1
c0002227:	01 d0                	add    eax,edx
c0002229:	50                   	push   eax
c000222a:	56                   	push   esi
c000222b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000222f:	50                   	push   eax
c0002230:	e8 b5 fa ff ff       	call   c0001cea <disk_write>
c0002235:	83 c4 10             	add    esp,0x10
c0002238:	31 d2                	xor    edx,edx
c000223a:	89 d0                	mov    eax,edx
c000223c:	5a                   	pop    edx
c000223d:	5b                   	pop    ebx
c000223e:	5e                   	pop    esi
c000223f:	c3                   	ret    
c0002240:	31 d2                	xor    edx,edx
c0002242:	89 d0                	mov    eax,edx
c0002244:	c3                   	ret    

c0002245 <move_window>:
c0002245:	57                   	push   edi
c0002246:	56                   	push   esi
c0002247:	31 f6                	xor    esi,esi
c0002249:	53                   	push   ebx
c000224a:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000224d:	74 32                	je     c0002281 <move_window+0x3c>
c000224f:	89 c3                	mov    ebx,eax
c0002251:	89 d7                	mov    edi,edx
c0002253:	e8 8a ff ff ff       	call   c00021e2 <sync_window>
c0002258:	89 c6                	mov    esi,eax
c000225a:	85 c0                	test   eax,eax
c000225c:	75 23                	jne    c0002281 <move_window+0x3c>
c000225e:	6a 01                	push   0x1
c0002260:	8d 43 34             	lea    eax,[ebx+0x34]
c0002263:	57                   	push   edi
c0002264:	50                   	push   eax
c0002265:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002269:	50                   	push   eax
c000226a:	e8 65 fa ff ff       	call   c0001cd4 <disk_read>
c000226f:	83 c4 10             	add    esp,0x10
c0002272:	85 c0                	test   eax,eax
c0002274:	74 08                	je     c000227e <move_window+0x39>
c0002276:	be 01 00 00 00       	mov    esi,0x1
c000227b:	83 cf ff             	or     edi,0xffffffff
c000227e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002281:	89 f0                	mov    eax,esi
c0002283:	5b                   	pop    ebx
c0002284:	5e                   	pop    esi
c0002285:	5f                   	pop    edi
c0002286:	c3                   	ret    

c0002287 <check_fs>:
c0002287:	53                   	push   ebx
c0002288:	89 c3                	mov    ebx,eax
c000228a:	83 ec 08             	sub    esp,0x8
c000228d:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002291:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002298:	e8 a8 ff ff ff       	call   c0002245 <move_window>
c000229d:	ba 04 00 00 00       	mov    edx,0x4
c00022a2:	85 c0                	test   eax,eax
c00022a4:	75 68                	jne    c000230e <check_fs+0x87>
c00022a6:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00022ac:	e8 6e fa ff ff       	call   c0001d1f <ld_word>
c00022b1:	ba 03 00 00 00       	mov    edx,0x3
c00022b6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022ba:	75 52                	jne    c000230e <check_fs+0x87>
c00022bc:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022bf:	8d 50 18             	lea    edx,[eax+0x18]
c00022c2:	80 fa 01             	cmp    dl,0x1
c00022c5:	76 09                	jbe    c00022d0 <check_fs+0x49>
c00022c7:	ba 02 00 00 00       	mov    edx,0x2
c00022cc:	3c eb                	cmp    al,0xeb
c00022ce:	75 3e                	jne    c000230e <check_fs+0x87>
c00022d0:	ba 78 f0 01 c0       	mov    edx,0xc001f078
c00022d5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022d8:	b9 03 00 00 00       	mov    ecx,0x3
c00022dd:	e8 89 fa ff ff       	call   c0001d6b <mem_cmp>
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	85 c0                	test   eax,eax
c00022e6:	74 26                	je     c000230e <check_fs+0x87>
c00022e8:	ba 3c cf 01 c0       	mov    edx,0xc001cf3c
c00022ed:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00022f3:	b9 05 00 00 00       	mov    ecx,0x5
c00022f8:	e8 6e fa ff ff       	call   c0001d6b <mem_cmp>
c00022fd:	31 d2                	xor    edx,edx
c00022ff:	85 c0                	test   eax,eax
c0002301:	74 0b                	je     c000230e <check_fs+0x87>
c0002303:	31 d2                	xor    edx,edx
c0002305:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002309:	0f 95 c2             	setne  dl
c000230c:	01 d2                	add    edx,edx
c000230e:	89 d0                	mov    eax,edx
c0002310:	83 c4 08             	add    esp,0x8
c0002313:	5b                   	pop    ebx
c0002314:	c3                   	ret    

c0002315 <find_volume>:
c0002315:	55                   	push   ebp
c0002316:	57                   	push   edi
c0002317:	56                   	push   esi
c0002318:	89 c6                	mov    esi,eax
c000231a:	53                   	push   ebx
c000231b:	89 d3                	mov    ebx,edx
c000231d:	83 ec 2c             	sub    esp,0x2c
c0002320:	31 d2                	xor    edx,edx
c0002322:	e8 60 ff ff ff       	call   c0002287 <check_fs>
c0002327:	83 f8 02             	cmp    eax,0x2
c000232a:	74 06                	je     c0002332 <find_volume+0x1d>
c000232c:	77 62                	ja     c0002390 <find_volume+0x7b>
c000232e:	85 db                	test   ebx,ebx
c0002330:	74 5e                	je     c0002390 <find_volume+0x7b>
c0002332:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002336:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000233c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002342:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002346:	89 cf                	mov    edi,ecx
c0002348:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000234c:	89 e8                	mov    eax,ebp
c000234e:	83 c5 10             	add    ebp,0x10
c0002351:	e8 d6 f9 ff ff       	call   c0001d2c <ld_dword>
c0002356:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000235a:	89 01                	mov    DWORD PTR [ecx],eax
c000235c:	83 c1 04             	add    ecx,0x4
c000235f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002363:	75 e3                	jne    c0002348 <find_volume+0x33>
c0002365:	31 ed                	xor    ebp,ebp
c0002367:	85 db                	test   ebx,ebx
c0002369:	74 03                	je     c000236e <find_volume+0x59>
c000236b:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000236e:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002371:	b8 03 00 00 00       	mov    eax,0x3
c0002376:	85 d2                	test   edx,edx
c0002378:	74 0c                	je     c0002386 <find_volume+0x71>
c000237a:	89 f0                	mov    eax,esi
c000237c:	e8 06 ff ff ff       	call   c0002287 <check_fs>
c0002381:	83 f8 01             	cmp    eax,0x1
c0002384:	76 0a                	jbe    c0002390 <find_volume+0x7b>
c0002386:	85 db                	test   ebx,ebx
c0002388:	75 06                	jne    c0002390 <find_volume+0x7b>
c000238a:	45                   	inc    ebp
c000238b:	83 fd 03             	cmp    ebp,0x3
c000238e:	76 de                	jbe    c000236e <find_volume+0x59>
c0002390:	83 c4 2c             	add    esp,0x2c
c0002393:	5b                   	pop    ebx
c0002394:	5e                   	pop    esi
c0002395:	5f                   	pop    edi
c0002396:	5d                   	pop    ebp
c0002397:	c3                   	ret    

c0002398 <mount_volume>:
c0002398:	55                   	push   ebp
c0002399:	89 d5                	mov    ebp,edx
c000239b:	57                   	push   edi
c000239c:	89 cf                	mov    edi,ecx
c000239e:	56                   	push   esi
c000239f:	53                   	push   ebx
c00023a0:	bb 0b 00 00 00       	mov    ebx,0xb
c00023a5:	83 ec 2c             	sub    esp,0x2c
c00023a8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00023ae:	e8 9b fd ff ff       	call   c000214e <get_ldnumber>
c00023b3:	85 c0                	test   eax,eax
c00023b5:	0f 88 d6 02 00 00    	js     c0002691 <mount_volume+0x2f9>
c00023bb:	8b 34 85 a0 14 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdeb60]
c00023c2:	89 c2                	mov    edx,eax
c00023c4:	bb 0c 00 00 00       	mov    ebx,0xc
c00023c9:	85 f6                	test   esi,esi
c00023cb:	0f 84 c0 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c00023d1:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023d4:	83 e7 fe             	and    edi,0xfffffffe
c00023d7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023da:	74 3a                	je     c0002416 <mount_volume+0x7e>
c00023dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023e0:	83 ec 0c             	sub    esp,0xc
c00023e3:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00023e7:	50                   	push   eax
c00023e8:	e8 e1 f8 ff ff       	call   c0001cce <disk_status>
c00023ed:	83 c4 10             	add    esp,0x10
c00023f0:	a8 01                	test   al,0x1
c00023f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00023f6:	75 1e                	jne    c0002416 <mount_volume+0x7e>
c00023f8:	31 db                	xor    ebx,ebx
c00023fa:	89 f9                	mov    ecx,edi
c00023fc:	84 c9                	test   cl,cl
c00023fe:	0f 84 8d 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002404:	a8 04                	test   al,0x4
c0002406:	0f 84 85 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c000240c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002411:	e9 7b 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002416:	83 ec 0c             	sub    esp,0xc
c0002419:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000241c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000241f:	0f b6 c2             	movzx  eax,dl
c0002422:	bb 03 00 00 00       	mov    ebx,0x3
c0002427:	50                   	push   eax
c0002428:	e8 a4 f8 ff ff       	call   c0001cd1 <disk_initialize>
c000242d:	83 c4 10             	add    esp,0x10
c0002430:	a8 01                	test   al,0x1
c0002432:	0f 85 59 02 00 00    	jne    c0002691 <mount_volume+0x2f9>
c0002438:	89 f9                	mov    ecx,edi
c000243a:	84 c9                	test   cl,cl
c000243c:	74 04                	je     c0002442 <mount_volume+0xaa>
c000243e:	a8 04                	test   al,0x4
c0002440:	75 ca                	jne    c000240c <mount_volume+0x74>
c0002442:	31 d2                	xor    edx,edx
c0002444:	89 f0                	mov    eax,esi
c0002446:	bb 01 00 00 00       	mov    ebx,0x1
c000244b:	e8 c5 fe ff ff       	call   c0002315 <find_volume>
c0002450:	83 f8 04             	cmp    eax,0x4
c0002453:	0f 84 38 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002459:	83 f8 01             	cmp    eax,0x1
c000245c:	76 0a                	jbe    c0002468 <mount_volume+0xd0>
c000245e:	bb 0d 00 00 00       	mov    ebx,0xd
c0002463:	e9 29 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002468:	8d 46 3f             	lea    eax,[esi+0x3f]
c000246b:	e8 af f8 ff ff       	call   c0001d1f <ld_word>
c0002470:	66 3d 00 02          	cmp    ax,0x200
c0002474:	75 e8                	jne    c000245e <mount_volume+0xc6>
c0002476:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002479:	e8 a1 f8 ff ff       	call   c0001d1f <ld_word>
c000247e:	0f b7 c0             	movzx  eax,ax
c0002481:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002485:	85 c0                	test   eax,eax
c0002487:	75 0c                	jne    c0002495 <mount_volume+0xfd>
c0002489:	8d 46 58             	lea    eax,[esi+0x58]
c000248c:	e8 9b f8 ff ff       	call   c0001d2c <ld_dword>
c0002491:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002495:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002498:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c000249b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000249f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00024a3:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00024a6:	89 e8                	mov    eax,ebp
c00024a8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00024ab:	8d 45 ff             	lea    eax,[ebp-0x1]
c00024ae:	3c 01                	cmp    al,0x1
c00024b0:	77 ac                	ja     c000245e <mount_volume+0xc6>
c00024b2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024b6:	89 c3                	mov    ebx,eax
c00024b8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024bc:	66 85 c0             	test   ax,ax
c00024bf:	74 9d                	je     c000245e <mount_volume+0xc6>
c00024c1:	8d 40 ff             	lea    eax,[eax-0x1]
c00024c4:	85 d8                	test   eax,ebx
c00024c6:	75 96                	jne    c000245e <mount_volume+0xc6>
c00024c8:	8d 46 45             	lea    eax,[esi+0x45]
c00024cb:	e8 4f f8 ff ff       	call   c0001d1f <ld_word>
c00024d0:	89 c7                	mov    edi,eax
c00024d2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024d6:	a8 0f                	test   al,0xf
c00024d8:	75 84                	jne    c000245e <mount_volume+0xc6>
c00024da:	8d 46 47             	lea    eax,[esi+0x47]
c00024dd:	e8 3d f8 ff ff       	call   c0001d1f <ld_word>
c00024e2:	0f b7 d0             	movzx  edx,ax
c00024e5:	85 d2                	test   edx,edx
c00024e7:	75 0a                	jne    c00024f3 <mount_volume+0x15b>
c00024e9:	8d 46 54             	lea    eax,[esi+0x54]
c00024ec:	e8 3b f8 ff ff       	call   c0001d2c <ld_dword>
c00024f1:	89 c2                	mov    edx,eax
c00024f3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f7:	8d 46 42             	lea    eax,[esi+0x42]
c00024fa:	e8 20 f8 ff ff       	call   c0001d1f <ld_word>
c00024ff:	66 85 c0             	test   ax,ax
c0002502:	0f 84 56 ff ff ff    	je     c000245e <mount_volume+0xc6>
c0002508:	89 e9                	mov    ecx,ebp
c000250a:	0f b7 c0             	movzx  eax,ax
c000250d:	0f b6 e9             	movzx  ebp,cl
c0002510:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002514:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002518:	89 f8                	mov    eax,edi
c000251a:	0f af cd             	imul   ecx,ebp
c000251d:	66 c1 e8 04          	shr    ax,0x4
c0002521:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002525:	0f b7 c0             	movzx  eax,ax
c0002528:	01 c8                	add    eax,ecx
c000252a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000252e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002532:	39 c2                	cmp    edx,eax
c0002534:	0f 82 24 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000253a:	29 c2                	sub    edx,eax
c000253c:	89 d5                	mov    ebp,edx
c000253e:	89 d0                	mov    eax,edx
c0002540:	31 d2                	xor    edx,edx
c0002542:	f7 f3                	div    ebx
c0002544:	39 dd                	cmp    ebp,ebx
c0002546:	0f 82 12 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000254c:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002551:	0f 87 07 ff ff ff    	ja     c000245e <mount_volume+0xc6>
c0002557:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000255c:	0f 86 1f 01 00 00    	jbe    c0002681 <mount_volume+0x2e9>
c0002562:	bb 03 00 00 00       	mov    ebx,0x3
c0002567:	8d 68 02             	lea    ebp,[eax+0x2]
c000256a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000256e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002572:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002576:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002579:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000257c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002580:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002583:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002587:	83 fb 03             	cmp    ebx,0x3
c000258a:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000258d:	75 21                	jne    c00025b0 <mount_volume+0x218>
c000258f:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002592:	e8 88 f7 ff ff       	call   c0001d1f <ld_word>
c0002597:	66 09 c7             	or     di,ax
c000259a:	0f 85 be fe ff ff    	jne    c000245e <mount_volume+0xc6>
c00025a0:	8d 46 60             	lea    eax,[esi+0x60]
c00025a3:	c1 e5 02             	shl    ebp,0x2
c00025a6:	e8 81 f7 ff ff       	call   c0001d2c <ld_dword>
c00025ab:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025ae:	eb 22                	jmp    c00025d2 <mount_volume+0x23a>
c00025b0:	66 85 ff             	test   di,di
c00025b3:	0f 84 a5 fe ff ff    	je     c000245e <mount_volume+0xc6>
c00025b9:	01 c8                	add    eax,ecx
c00025bb:	83 fb 02             	cmp    ebx,0x2
c00025be:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025c1:	75 04                	jne    c00025c7 <mount_volume+0x22f>
c00025c3:	01 ed                	add    ebp,ebp
c00025c5:	eb 0b                	jmp    c00025d2 <mount_volume+0x23a>
c00025c7:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025cb:	83 e5 01             	and    ebp,0x1
c00025ce:	d1 e8                	shr    eax,1
c00025d0:	01 c5                	add    ebp,eax
c00025d2:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025d8:	c1 ed 09             	shr    ebp,0x9
c00025db:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025df:	0f 87 79 fe ff ff    	ja     c000245e <mount_volume+0xc6>
c00025e5:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00025ec:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00025f3:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00025f7:	83 fb 03             	cmp    ebx,0x3
c00025fa:	75 6e                	jne    c000266a <mount_volume+0x2d2>
c00025fc:	8d 46 64             	lea    eax,[esi+0x64]
c00025ff:	e8 1b f7 ff ff       	call   c0001d1f <ld_word>
c0002604:	66 48                	dec    ax
c0002606:	75 62                	jne    c000266a <mount_volume+0x2d2>
c0002608:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000260c:	89 f0                	mov    eax,esi
c000260e:	42                   	inc    edx
c000260f:	e8 31 fc ff ff       	call   c0002245 <move_window>
c0002614:	85 c0                	test   eax,eax
c0002616:	75 52                	jne    c000266a <mount_volume+0x2d2>
c0002618:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000261c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002622:	e8 f8 f6 ff ff       	call   c0001d1f <ld_word>
c0002627:	66 3d 55 aa          	cmp    ax,0xaa55
c000262b:	75 3d                	jne    c000266a <mount_volume+0x2d2>
c000262d:	8d 46 34             	lea    eax,[esi+0x34]
c0002630:	e8 f7 f6 ff ff       	call   c0001d2c <ld_dword>
c0002635:	3d 52 52 61 41       	cmp    eax,0x41615252
c000263a:	75 2e                	jne    c000266a <mount_volume+0x2d2>
c000263c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002642:	e8 e5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002647:	3d 72 72 41 61       	cmp    eax,0x61417272
c000264c:	75 1c                	jne    c000266a <mount_volume+0x2d2>
c000264e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002654:	e8 d3 f6 ff ff       	call   c0001d2c <ld_dword>
c0002659:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000265c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002662:	e8 c5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002667:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000266a:	66 a1 80 14 02 c0    	mov    ax,ds:0xc0021480
c0002670:	88 1e                	mov    BYTE PTR [esi],bl
c0002672:	40                   	inc    eax
c0002673:	31 db                	xor    ebx,ebx
c0002675:	66 a3 80 14 02 c0    	mov    ds:0xc0021480,ax
c000267b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000267f:	eb 10                	jmp    c0002691 <mount_volume+0x2f9>
c0002681:	31 db                	xor    ebx,ebx
c0002683:	3d f5 0f 00 00       	cmp    eax,0xff5
c0002688:	0f 97 c3             	seta   bl
c000268b:	43                   	inc    ebx
c000268c:	e9 d6 fe ff ff       	jmp    c0002567 <mount_volume+0x1cf>
c0002691:	83 c4 2c             	add    esp,0x2c
c0002694:	89 d8                	mov    eax,ebx
c0002696:	5b                   	pop    ebx
c0002697:	5e                   	pop    esi
c0002698:	5f                   	pop    edi
c0002699:	5d                   	pop    ebp
c000269a:	c3                   	ret    

c000269b <put_fat>:
c000269b:	55                   	push   ebp
c000269c:	bd 02 00 00 00       	mov    ebp,0x2
c00026a1:	57                   	push   edi
c00026a2:	56                   	push   esi
c00026a3:	53                   	push   ebx
c00026a4:	83 ec 1c             	sub    esp,0x1c
c00026a7:	83 fa 01             	cmp    edx,0x1
c00026aa:	0f 86 31 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b0:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026b3:	0f 86 28 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b9:	89 c6                	mov    esi,eax
c00026bb:	89 cf                	mov    edi,ecx
c00026bd:	8a 00                	mov    al,BYTE PTR [eax]
c00026bf:	89 d3                	mov    ebx,edx
c00026c1:	3c 02                	cmp    al,0x2
c00026c3:	0f 84 ac 00 00 00    	je     c0002775 <put_fat+0xda>
c00026c9:	3c 03                	cmp    al,0x3
c00026cb:	0f 84 d1 00 00 00    	je     c00027a2 <put_fat+0x107>
c00026d1:	fe c8                	dec    al
c00026d3:	0f 85 08 01 00 00    	jne    c00027e1 <put_fat+0x146>
c00026d9:	89 d1                	mov    ecx,edx
c00026db:	89 f0                	mov    eax,esi
c00026dd:	d1 e9                	shr    ecx,1
c00026df:	01 d1                	add    ecx,edx
c00026e1:	89 ca                	mov    edx,ecx
c00026e3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00026e7:	c1 ea 09             	shr    edx,0x9
c00026ea:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00026ed:	e8 53 fb ff ff       	call   c0002245 <move_window>
c00026f2:	89 c5                	mov    ebp,eax
c00026f4:	85 c0                	test   eax,eax
c00026f6:	0f 85 e5 00 00 00    	jne    c00027e1 <put_fat+0x146>
c00026fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002700:	8d 46 34             	lea    eax,[esi+0x34]
c0002703:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002707:	8d 41 01             	lea    eax,[ecx+0x1]
c000270a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002710:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002714:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002718:	89 f8                	mov    eax,edi
c000271a:	83 e3 01             	and    ebx,0x1
c000271d:	74 0c                	je     c000272b <put_fat+0x90>
c000271f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002721:	89 f8                	mov    eax,edi
c0002723:	83 e2 0f             	and    edx,0xf
c0002726:	c1 e0 04             	shl    eax,0x4
c0002729:	09 d0                	or     eax,edx
c000272b:	88 01                	mov    BYTE PTR [ecx],al
c000272d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002731:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002735:	c1 ea 09             	shr    edx,0x9
c0002738:	89 f0                	mov    eax,esi
c000273a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000273d:	e8 03 fb ff ff       	call   c0002245 <move_window>
c0002742:	89 c5                	mov    ebp,eax
c0002744:	85 c0                	test   eax,eax
c0002746:	0f 85 95 00 00 00    	jne    c00027e1 <put_fat+0x146>
c000274c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002750:	25 ff 01 00 00       	and    eax,0x1ff
c0002755:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002759:	85 db                	test   ebx,ebx
c000275b:	74 07                	je     c0002764 <put_fat+0xc9>
c000275d:	c1 ef 04             	shr    edi,0x4
c0002760:	89 f9                	mov    ecx,edi
c0002762:	eb 0d                	jmp    c0002771 <put_fat+0xd6>
c0002764:	8a 08                	mov    cl,BYTE PTR [eax]
c0002766:	c1 ef 08             	shr    edi,0x8
c0002769:	83 e1 f0             	and    ecx,0xfffffff0
c000276c:	83 e7 0f             	and    edi,0xf
c000276f:	09 f9                	or     ecx,edi
c0002771:	88 08                	mov    BYTE PTR [eax],cl
c0002773:	eb 27                	jmp    c000279c <put_fat+0x101>
c0002775:	c1 ea 08             	shr    edx,0x8
c0002778:	89 f0                	mov    eax,esi
c000277a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000277d:	e8 c3 fa ff ff       	call   c0002245 <move_window>
c0002782:	89 c5                	mov    ebp,eax
c0002784:	85 c0                	test   eax,eax
c0002786:	75 59                	jne    c00027e1 <put_fat+0x146>
c0002788:	01 db                	add    ebx,ebx
c000278a:	0f b7 d7             	movzx  edx,di
c000278d:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002793:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002797:	e8 a8 f5 ff ff       	call   c0001d44 <st_word>
c000279c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00027a0:	eb 3f                	jmp    c00027e1 <put_fat+0x146>
c00027a2:	c1 ea 07             	shr    edx,0x7
c00027a5:	89 f0                	mov    eax,esi
c00027a7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027aa:	e8 96 fa ff ff       	call   c0002245 <move_window>
c00027af:	89 c5                	mov    ebp,eax
c00027b1:	85 c0                	test   eax,eax
c00027b3:	75 2c                	jne    c00027e1 <put_fat+0x146>
c00027b5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027bb:	c1 e3 02             	shl    ebx,0x2
c00027be:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027c4:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027c8:	89 d8                	mov    eax,ebx
c00027ca:	e8 5d f5 ff ff       	call   c0001d2c <ld_dword>
c00027cf:	25 00 00 00 f0       	and    eax,0xf0000000
c00027d4:	09 f8                	or     eax,edi
c00027d6:	89 c2                	mov    edx,eax
c00027d8:	89 d8                	mov    eax,ebx
c00027da:	e8 69 f5 ff ff       	call   c0001d48 <st_dword>
c00027df:	eb bb                	jmp    c000279c <put_fat+0x101>
c00027e1:	83 c4 1c             	add    esp,0x1c
c00027e4:	89 e8                	mov    eax,ebp
c00027e6:	5b                   	pop    ebx
c00027e7:	5e                   	pop    esi
c00027e8:	5f                   	pop    edi
c00027e9:	5d                   	pop    ebp
c00027ea:	c3                   	ret    

c00027eb <dir_clear>:
c00027eb:	55                   	push   ebp
c00027ec:	57                   	push   edi
c00027ed:	56                   	push   esi
c00027ee:	89 c6                	mov    esi,eax
c00027f0:	53                   	push   ebx
c00027f1:	83 ec 1c             	sub    esp,0x1c
c00027f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027f8:	e8 e5 f9 ff ff       	call   c00021e2 <sync_window>
c00027fd:	85 c0                	test   eax,eax
c00027ff:	0f 85 c0 00 00 00    	jne    c00028c5 <dir_clear+0xda>
c0002805:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002809:	89 f0                	mov    eax,esi
c000280b:	e8 55 f7 ff ff       	call   c0001f65 <clst2sect>
c0002810:	31 d2                	xor    edx,edx
c0002812:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002815:	89 c5                	mov    ebp,eax
c0002817:	b9 00 02 00 00       	mov    ecx,0x200
c000281c:	8d 46 34             	lea    eax,[esi+0x34]
c000281f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002823:	e8 38 f5 ff ff       	call   c0001d60 <mem_set>
c0002828:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000282c:	c1 e3 09             	shl    ebx,0x9
c000282f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002835:	76 1b                	jbe    c0002852 <dir_clear+0x67>
c0002837:	bb 00 80 00 00       	mov    ebx,0x8000
c000283c:	eb 14                	jmp    c0002852 <dir_clear+0x67>
c000283e:	83 ec 0c             	sub    esp,0xc
c0002841:	53                   	push   ebx
c0002842:	e8 25 32 00 00       	call   c0005a6c <ff_memalloc>
c0002847:	83 c4 10             	add    esp,0x10
c000284a:	89 c7                	mov    edi,eax
c000284c:	85 c0                	test   eax,eax
c000284e:	75 7c                	jne    c00028cc <dir_clear+0xe1>
c0002850:	d1 eb                	shr    ebx,1
c0002852:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002858:	77 e4                	ja     c000283e <dir_clear+0x53>
c000285a:	31 db                	xor    ebx,ebx
c000285c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002860:	39 d8                	cmp    eax,ebx
c0002862:	76 53                	jbe    c00028b7 <dir_clear+0xcc>
c0002864:	6a 01                	push   0x1
c0002866:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002869:	50                   	push   eax
c000286a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000286e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002872:	50                   	push   eax
c0002873:	e8 72 f4 ff ff       	call   c0001cea <disk_write>
c0002878:	83 c4 10             	add    esp,0x10
c000287b:	85 c0                	test   eax,eax
c000287d:	75 38                	jne    c00028b7 <dir_clear+0xcc>
c000287f:	43                   	inc    ebx
c0002880:	eb da                	jmp    c000285c <dir_clear+0x71>
c0002882:	52                   	push   edx
c0002883:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002886:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000288a:	50                   	push   eax
c000288b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000288f:	57                   	push   edi
c0002890:	50                   	push   eax
c0002891:	e8 54 f4 ff ff       	call   c0001cea <disk_write>
c0002896:	83 c4 10             	add    esp,0x10
c0002899:	85 c0                	test   eax,eax
c000289b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000289f:	75 0a                	jne    c00028ab <dir_clear+0xc0>
c00028a1:	01 d3                	add    ebx,edx
c00028a3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028a7:	39 d8                	cmp    eax,ebx
c00028a9:	77 d7                	ja     c0002882 <dir_clear+0x97>
c00028ab:	83 ec 0c             	sub    esp,0xc
c00028ae:	57                   	push   edi
c00028af:	e8 d0 31 00 00       	call   c0005a84 <ff_memfree>
c00028b4:	83 c4 10             	add    esp,0x10
c00028b7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028bb:	39 d8                	cmp    eax,ebx
c00028bd:	0f 95 c0             	setne  al
c00028c0:	0f b6 c0             	movzx  eax,al
c00028c3:	eb 19                	jmp    c00028de <dir_clear+0xf3>
c00028c5:	b8 01 00 00 00       	mov    eax,0x1
c00028ca:	eb 12                	jmp    c00028de <dir_clear+0xf3>
c00028cc:	89 d9                	mov    ecx,ebx
c00028ce:	31 d2                	xor    edx,edx
c00028d0:	e8 8b f4 ff ff       	call   c0001d60 <mem_set>
c00028d5:	89 da                	mov    edx,ebx
c00028d7:	31 db                	xor    ebx,ebx
c00028d9:	c1 ea 09             	shr    edx,0x9
c00028dc:	eb c5                	jmp    c00028a3 <dir_clear+0xb8>
c00028de:	83 c4 1c             	add    esp,0x1c
c00028e1:	5b                   	pop    ebx
c00028e2:	5e                   	pop    esi
c00028e3:	5f                   	pop    edi
c00028e4:	5d                   	pop    ebp
c00028e5:	c3                   	ret    

c00028e6 <create_name>:
c00028e6:	55                   	push   ebp
c00028e7:	89 d5                	mov    ebp,edx
c00028e9:	57                   	push   edi
c00028ea:	89 c7                	mov    edi,eax
c00028ec:	56                   	push   esi
c00028ed:	31 f6                	xor    esi,esi
c00028ef:	53                   	push   ebx
c00028f0:	83 ec 3c             	sub    esp,0x3c
c00028f3:	8b 02                	mov    eax,DWORD PTR [edx]
c00028f5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00028f9:	8b 07                	mov    eax,DWORD PTR [edi]
c00028fb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00028fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002902:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002906:	e8 9b f4 ff ff       	call   c0001da6 <tchar2uni>
c000290b:	89 c3                	mov    ebx,eax
c000290d:	83 f8 ff             	cmp    eax,0xffffffff
c0002910:	75 0a                	jne    c000291c <create_name+0x36>
c0002912:	b8 06 00 00 00       	mov    eax,0x6
c0002917:	e9 9e 02 00 00       	jmp    c0002bba <create_name+0x2d4>
c000291c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002921:	76 0c                	jbe    c000292f <create_name+0x49>
c0002923:	c1 e8 10             	shr    eax,0x10
c0002926:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000292a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000292e:	46                   	inc    esi
c000292f:	66 83 fb 1f          	cmp    bx,0x1f
c0002933:	76 4f                	jbe    c0002984 <create_name+0x9e>
c0002935:	66 83 fb 5c          	cmp    bx,0x5c
c0002939:	74 35                	je     c0002970 <create_name+0x8a>
c000293b:	66 83 fb 2f          	cmp    bx,0x2f
c000293f:	74 2f                	je     c0002970 <create_name+0x8a>
c0002941:	66 83 fb 7f          	cmp    bx,0x7f
c0002945:	77 11                	ja     c0002958 <create_name+0x72>
c0002947:	0f b7 d3             	movzx  edx,bx
c000294a:	b8 42 cf 01 c0       	mov    eax,0xc001cf42
c000294f:	e8 3a f4 ff ff       	call   c0001d8e <chk_chr>
c0002954:	85 c0                	test   eax,eax
c0002956:	75 ba                	jne    c0002912 <create_name+0x2c>
c0002958:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000295e:	77 b2                	ja     c0002912 <create_name+0x2c>
c0002960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002964:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002968:	46                   	inc    esi
c0002969:	eb 97                	jmp    c0002902 <create_name+0x1c>
c000296b:	40                   	inc    eax
c000296c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002970:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002974:	8a 10                	mov    dl,BYTE PTR [eax]
c0002976:	80 fa 2f             	cmp    dl,0x2f
c0002979:	74 f0                	je     c000296b <create_name+0x85>
c000297b:	80 fa 5c             	cmp    dl,0x5c
c000297e:	74 eb                	je     c000296b <create_name+0x85>
c0002980:	31 db                	xor    ebx,ebx
c0002982:	eb 02                	jmp    c0002986 <create_name+0xa0>
c0002984:	b3 04                	mov    bl,0x4
c0002986:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000298a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000298d:	85 f6                	test   esi,esi
c000298f:	74 18                	je     c00029a9 <create_name+0xc3>
c0002991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002995:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c000299a:	66 83 f8 20          	cmp    ax,0x20
c000299e:	74 06                	je     c00029a6 <create_name+0xc0>
c00029a0:	66 83 f8 2e          	cmp    ax,0x2e
c00029a4:	75 03                	jne    c00029a9 <create_name+0xc3>
c00029a6:	4e                   	dec    esi
c00029a7:	eb e4                	jmp    c000298d <create_name+0xa7>
c00029a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ad:	31 ed                	xor    ebp,ebp
c00029af:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029b5:	85 f6                	test   esi,esi
c00029b7:	0f 84 55 ff ff ff    	je     c0002912 <create_name+0x2c>
c00029bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029c1:	8d 55 01             	lea    edx,[ebp+0x1]
c00029c4:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029c8:	66 83 f8 20          	cmp    ax,0x20
c00029cc:	75 04                	jne    c00029d2 <create_name+0xec>
c00029ce:	89 d5                	mov    ebp,edx
c00029d0:	eb eb                	jmp    c00029bd <create_name+0xd7>
c00029d2:	85 ed                	test   ebp,ebp
c00029d4:	75 06                	jne    c00029dc <create_name+0xf6>
c00029d6:	66 83 f8 2e          	cmp    ax,0x2e
c00029da:	75 08                	jne    c00029e4 <create_name+0xfe>
c00029dc:	83 cb 03             	or     ebx,0x3
c00029df:	eb 03                	jmp    c00029e4 <create_name+0xfe>
c00029e1:	4e                   	dec    esi
c00029e2:	74 0c                	je     c00029f0 <create_name+0x10a>
c00029e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029e8:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c00029ee:	75 f1                	jne    c00029e1 <create_name+0xfb>
c00029f0:	b9 0b 00 00 00       	mov    ecx,0xb
c00029f5:	8d 47 20             	lea    eax,[edi+0x20]
c00029f8:	ba 20 00 00 00       	mov    edx,0x20
c00029fd:	e8 5e f3 ff ff       	call   c0001d60 <mem_set>
c0002a02:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002a0a:	31 c9                	xor    ecx,ecx
c0002a0c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002a11:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a1c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a20:	66 85 ed             	test   bp,bp
c0002a23:	0f 84 30 01 00 00    	je     c0002b59 <create_name+0x273>
c0002a29:	66 83 fd 20          	cmp    bp,0x20
c0002a2d:	74 10                	je     c0002a3f <create_name+0x159>
c0002a2f:	66 83 fd 2e          	cmp    bp,0x2e
c0002a33:	75 13                	jne    c0002a48 <create_name+0x162>
c0002a35:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a39:	0f 84 6b 01 00 00    	je     c0002baa <create_name+0x2c4>
c0002a3f:	83 cb 03             	or     ebx,0x3
c0002a42:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002a46:	eb c9                	jmp    c0002a11 <create_name+0x12b>
c0002a48:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002a4c:	73 0b                	jae    c0002a59 <create_name+0x173>
c0002a4e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a52:	75 47                	jne    c0002a9b <create_name+0x1b5>
c0002a54:	e9 51 01 00 00       	jmp    c0002baa <create_name+0x2c4>
c0002a59:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002a5e:	75 10                	jne    c0002a70 <create_name+0x18a>
c0002a60:	83 cb 03             	or     ebx,0x3
c0002a63:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a6b:	e9 e9 00 00 00       	jmp    c0002b59 <create_name+0x273>
c0002a70:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a74:	74 0d                	je     c0002a83 <create_name+0x19d>
c0002a76:	83 cb 03             	or     ebx,0x3
c0002a79:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a7d:	0f 87 d6 00 00 00    	ja     c0002b59 <create_name+0x273>
c0002a83:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002a88:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002a8c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a94:	b9 08 00 00 00       	mov    ecx,0x8
c0002a99:	eb a7                	jmp    c0002a42 <create_name+0x15c>
c0002a9b:	66 83 fd 7f          	cmp    bp,0x7f
c0002a9f:	76 68                	jbe    c0002b09 <create_name+0x223>
c0002aa1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002aa5:	88 da                	mov    dl,bl
c0002aa7:	83 ca 02             	or     edx,0x2
c0002aaa:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002aae:	50                   	push   eax
c0002aaf:	50                   	push   eax
c0002ab0:	68 b5 01 00 00       	push   0x1b5
c0002ab5:	55                   	push   ebp
c0002ab6:	e8 e1 2f 00 00       	call   c0005a9c <ff_uni2oem>
c0002abb:	83 c4 10             	add    esp,0x10
c0002abe:	89 c5                	mov    ebp,eax
c0002ac0:	a8 80                	test   al,0x80
c0002ac2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ac6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002aca:	74 0c                	je     c0002ad8 <create_name+0x1f2>
c0002acc:	83 e5 7f             	and    ebp,0x7f
c0002acf:	0f b6 ad 00 d0 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe3000]
c0002ad6:	eb 2a                	jmp    c0002b02 <create_name+0x21c>
c0002ad8:	66 3d ff 00          	cmp    ax,0xff
c0002adc:	76 24                	jbe    c0002b02 <create_name+0x21c>
c0002ade:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ae2:	48                   	dec    eax
c0002ae3:	39 c8                	cmp    eax,ecx
c0002ae5:	77 0c                	ja     c0002af3 <create_name+0x20d>
c0002ae7:	83 cb 03             	or     ebx,0x3
c0002aea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002aee:	e9 4f ff ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002af3:	89 e8                	mov    eax,ebp
c0002af5:	88 d3                	mov    bl,dl
c0002af7:	66 c1 e8 08          	shr    ax,0x8
c0002afb:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002aff:	41                   	inc    ecx
c0002b00:	eb 4b                	jmp    c0002b4d <create_name+0x267>
c0002b02:	88 d3                	mov    bl,dl
c0002b04:	66 85 ed             	test   bp,bp
c0002b07:	74 19                	je     c0002b22 <create_name+0x23c>
c0002b09:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b0d:	0f b7 d5             	movzx  edx,bp
c0002b10:	b8 4b cf 01 c0       	mov    eax,0xc001cf4b
c0002b15:	e8 74 f2 ff ff       	call   c0001d8e <chk_chr>
c0002b1a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b1e:	85 c0                	test   eax,eax
c0002b20:	74 0a                	je     c0002b2c <create_name+0x246>
c0002b22:	83 cb 03             	or     ebx,0x3
c0002b25:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b2a:	eb 21                	jmp    c0002b4d <create_name+0x267>
c0002b2c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b2f:	66 83 f8 19          	cmp    ax,0x19
c0002b33:	77 07                	ja     c0002b3c <create_name+0x256>
c0002b35:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002b3a:	eb 11                	jmp    c0002b4d <create_name+0x267>
c0002b3c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b3f:	66 83 f8 19          	cmp    ax,0x19
c0002b43:	77 08                	ja     c0002b4d <create_name+0x267>
c0002b45:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002b4a:	83 ed 20             	sub    ebp,0x20
c0002b4d:	89 e8                	mov    eax,ebp
c0002b4f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b53:	41                   	inc    ecx
c0002b54:	e9 e9 fe ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002b59:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b5d:	75 04                	jne    c0002b63 <create_name+0x27d>
c0002b5f:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b63:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002b68:	75 05                	jne    c0002b6f <create_name+0x289>
c0002b6a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002b6f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b73:	83 e0 0c             	and    eax,0xc
c0002b76:	3c 0c                	cmp    al,0xc
c0002b78:	74 0b                	je     c0002b85 <create_name+0x29f>
c0002b7a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b7e:	83 e0 03             	and    eax,0x3
c0002b81:	3c 03                	cmp    al,0x3
c0002b83:	75 05                	jne    c0002b8a <create_name+0x2a4>
c0002b85:	83 cb 02             	or     ebx,0x2
c0002b88:	eb 19                	jmp    c0002ba3 <create_name+0x2bd>
c0002b8a:	f6 c3 02             	test   bl,0x2
c0002b8d:	75 14                	jne    c0002ba3 <create_name+0x2bd>
c0002b8f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002b94:	74 03                	je     c0002b99 <create_name+0x2b3>
c0002b96:	83 cb 10             	or     ebx,0x10
c0002b99:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0002b9e:	74 03                	je     c0002ba3 <create_name+0x2bd>
c0002ba0:	83 cb 08             	or     ebx,0x8
c0002ba3:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002ba6:	31 c0                	xor    eax,eax
c0002ba8:	eb 10                	jmp    c0002bba <create_name+0x2d4>
c0002baa:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002baf:	0f 85 ce fe ff ff    	jne    c0002a83 <create_name+0x19d>
c0002bb5:	e9 a6 fe ff ff       	jmp    c0002a60 <create_name+0x17a>
c0002bba:	83 c4 3c             	add    esp,0x3c
c0002bbd:	5b                   	pop    ebx
c0002bbe:	5e                   	pop    esi
c0002bbf:	5f                   	pop    edi
c0002bc0:	5d                   	pop    ebp
c0002bc1:	c3                   	ret    

c0002bc2 <cmp_lfn>:
c0002bc2:	55                   	push   ebp
c0002bc3:	57                   	push   edi
c0002bc4:	89 d7                	mov    edi,edx
c0002bc6:	56                   	push   esi
c0002bc7:	53                   	push   ebx
c0002bc8:	83 ec 1c             	sub    esp,0x1c
c0002bcb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bcf:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bd2:	e8 48 f1 ff ff       	call   c0001d1f <ld_word>
c0002bd7:	66 85 c0             	test   ax,ax
c0002bda:	74 07                	je     c0002be3 <cmp_lfn+0x21>
c0002bdc:	31 c0                	xor    eax,eax
c0002bde:	e9 9a 00 00 00       	jmp    c0002c7d <cmp_lfn+0xbb>
c0002be3:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002be5:	bd 01 00 00 00       	mov    ebp,0x1
c0002bea:	83 e3 3f             	and    ebx,0x3f
c0002bed:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002bf5:	4b                   	dec    ebx
c0002bf6:	6b db 0d             	imul   ebx,ebx,0xd
c0002bf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bfd:	0f b6 80 80 d0 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe2f80]
c0002c04:	01 f8                	add    eax,edi
c0002c06:	e8 14 f1 ff ff       	call   c0001d1f <ld_word>
c0002c0b:	66 85 ed             	test   bp,bp
c0002c0e:	89 c6                	mov    esi,eax
c0002c10:	74 3c                	je     c0002c4e <cmp_lfn+0x8c>
c0002c12:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c18:	77 c2                	ja     c0002bdc <cmp_lfn+0x1a>
c0002c1a:	83 ec 0c             	sub    esp,0xc
c0002c1d:	0f b7 c0             	movzx  eax,ax
c0002c20:	50                   	push   eax
c0002c21:	e8 8e 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c26:	89 c5                	mov    ebp,eax
c0002c28:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c2b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c33:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c37:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c3a:	e8 75 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c3f:	83 c4 10             	add    esp,0x10
c0002c42:	39 c5                	cmp    ebp,eax
c0002c44:	75 96                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c46:	89 f5                	mov    ebp,esi
c0002c48:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c4c:	eb 04                	jmp    c0002c52 <cmp_lfn+0x90>
c0002c4e:	66 46                	inc    si
c0002c50:	75 8a                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c52:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c56:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c5b:	75 9c                	jne    c0002bf9 <cmp_lfn+0x37>
c0002c5d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c60:	74 16                	je     c0002c78 <cmp_lfn+0xb6>
c0002c62:	66 85 ed             	test   bp,bp
c0002c65:	74 11                	je     c0002c78 <cmp_lfn+0xb6>
c0002c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c6b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c70:	0f 94 c0             	sete   al
c0002c73:	0f b6 c0             	movzx  eax,al
c0002c76:	eb 05                	jmp    c0002c7d <cmp_lfn+0xbb>
c0002c78:	b8 01 00 00 00       	mov    eax,0x1
c0002c7d:	83 c4 1c             	add    esp,0x1c
c0002c80:	5b                   	pop    ebx
c0002c81:	5e                   	pop    esi
c0002c82:	5f                   	pop    edi
c0002c83:	5d                   	pop    ebp
c0002c84:	c3                   	ret    

c0002c85 <sync_fs>:
c0002c85:	56                   	push   esi
c0002c86:	53                   	push   ebx
c0002c87:	53                   	push   ebx
c0002c88:	89 c3                	mov    ebx,eax
c0002c8a:	e8 53 f5 ff ff       	call   c00021e2 <sync_window>
c0002c8f:	85 c0                	test   eax,eax
c0002c91:	0f 85 9a 00 00 00    	jne    c0002d31 <sync_fs+0xac>
c0002c97:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002c9a:	75 7b                	jne    c0002d17 <sync_fs+0x92>
c0002c9c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002ca0:	75 75                	jne    c0002d17 <sync_fs+0x92>
c0002ca2:	b9 00 02 00 00       	mov    ecx,0x200
c0002ca7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002caa:	31 d2                	xor    edx,edx
c0002cac:	89 f0                	mov    eax,esi
c0002cae:	e8 ad f0 ff ff       	call   c0001d60 <mem_set>
c0002cb3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002cb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002cbe:	e8 81 f0 ff ff       	call   c0001d44 <st_word>
c0002cc3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002cc8:	89 f0                	mov    eax,esi
c0002cca:	e8 79 f0 ff ff       	call   c0001d48 <st_dword>
c0002ccf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cd5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cda:	e8 69 f0 ff ff       	call   c0001d48 <st_dword>
c0002cdf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002ce2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002ce8:	e8 5b f0 ff ff       	call   c0001d48 <st_dword>
c0002ced:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002cf0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002cf6:	e8 4d f0 ff ff       	call   c0001d48 <st_dword>
c0002cfb:	6a 01                	push   0x1
c0002cfd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002d00:	40                   	inc    eax
c0002d01:	50                   	push   eax
c0002d02:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002d05:	56                   	push   esi
c0002d06:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d0a:	50                   	push   eax
c0002d0b:	e8 da ef ff ff       	call   c0001cea <disk_write>
c0002d10:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d14:	83 c4 10             	add    esp,0x10
c0002d17:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d1b:	51                   	push   ecx
c0002d1c:	6a 00                	push   0x0
c0002d1e:	6a 00                	push   0x0
c0002d20:	50                   	push   eax
c0002d21:	e8 da ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d26:	83 c4 10             	add    esp,0x10
c0002d29:	85 c0                	test   eax,eax
c0002d2b:	0f 95 c0             	setne  al
c0002d2e:	0f b6 c0             	movzx  eax,al
c0002d31:	5a                   	pop    edx
c0002d32:	5b                   	pop    ebx
c0002d33:	5e                   	pop    esi
c0002d34:	c3                   	ret    

c0002d35 <create_partition>:
c0002d35:	55                   	push   ebp
c0002d36:	0f b6 c0             	movzx  eax,al
c0002d39:	57                   	push   edi
c0002d3a:	56                   	push   esi
c0002d3b:	53                   	push   ebx
c0002d3c:	83 ec 40             	sub    esp,0x40
c0002d3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d47:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d4b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d4f:	50                   	push   eax
c0002d50:	6a 01                	push   0x1
c0002d52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d56:	e8 a5 ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d5b:	83 c4 10             	add    esp,0x10
c0002d5e:	85 c0                	test   eax,eax
c0002d60:	0f 85 69 01 00 00    	jne    c0002ecf <create_partition+0x19a>
c0002d66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d6a:	b9 05 00 00 00       	mov    ecx,0x5
c0002d6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d73:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d78:	31 d2                	xor    edx,edx
c0002d7a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d83:	f7 f3                	div    ebx
c0002d85:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002d8a:	76 0c                	jbe    c0002d98 <create_partition+0x63>
c0002d8c:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002d90:	49                   	dec    ecx
c0002d91:	75 e5                	jne    c0002d78 <create_partition+0x43>
c0002d93:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002d98:	b9 00 02 00 00       	mov    ecx,0x200
c0002d9d:	31 d2                	xor    edx,edx
c0002d9f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002da3:	e8 b8 ef ff ff       	call   c0001d60 <mem_set>
c0002da8:	b9 64 00 00 00       	mov    ecx,0x64
c0002dad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002db1:	31 d2                	xor    edx,edx
c0002db3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002dbb:	f7 f1                	div    ecx
c0002dbd:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002dc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002dc6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dca:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002dd0:	85 c9                	test   ecx,ecx
c0002dd2:	75 34                	jne    c0002e08 <create_partition+0xd3>
c0002dd4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dd8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ddd:	05 fe 01 00 00       	add    eax,0x1fe
c0002de2:	e8 5d ef ff ff       	call   c0001d44 <st_word>
c0002de7:	6a 01                	push   0x1
c0002de9:	6a 00                	push   0x0
c0002deb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002def:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002df3:	e8 f2 ee ff ff       	call   c0001cea <disk_write>
c0002df8:	83 c4 10             	add    esp,0x10
c0002dfb:	85 c0                	test   eax,eax
c0002dfd:	0f 95 c0             	setne  al
c0002e00:	0f b6 c0             	movzx  eax,al
c0002e03:	e9 cc 00 00 00       	jmp    c0002ed4 <create_partition+0x19f>
c0002e08:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002e0c:	76 c6                	jbe    c0002dd4 <create_partition+0x9f>
c0002e0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e12:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e16:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e19:	83 fe 64             	cmp    esi,0x64
c0002e1c:	77 0d                	ja     c0002e2b <create_partition+0xf6>
c0002e1e:	74 07                	je     c0002e27 <create_partition+0xf2>
c0002e20:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e25:	eb 04                	jmp    c0002e2b <create_partition+0xf6>
c0002e27:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e2b:	31 c0                	xor    eax,eax
c0002e2d:	89 f2                	mov    edx,esi
c0002e2f:	01 ca                	add    edx,ecx
c0002e31:	0f 92 c0             	setb   al
c0002e34:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e38:	77 04                	ja     c0002e3e <create_partition+0x109>
c0002e3a:	85 c0                	test   eax,eax
c0002e3c:	74 08                	je     c0002e46 <create_partition+0x111>
c0002e3e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e42:	29 ce                	sub    esi,ecx
c0002e44:	eb 04                	jmp    c0002e4a <create_partition+0x115>
c0002e46:	85 f6                	test   esi,esi
c0002e48:	74 8a                	je     c0002dd4 <create_partition+0x9f>
c0002e4a:	89 ca                	mov    edx,ecx
c0002e4c:	89 d8                	mov    eax,ebx
c0002e4e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e53:	e8 f0 ee ff ff       	call   c0001d48 <st_dword>
c0002e58:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e5b:	89 f2                	mov    edx,esi
c0002e5d:	83 c3 10             	add    ebx,0x10
c0002e60:	e8 e3 ee ff ff       	call   c0001d48 <st_dword>
c0002e65:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e6a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e6e:	31 d2                	xor    edx,edx
c0002e70:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e73:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e77:	89 c8                	mov    eax,ecx
c0002e79:	01 f1                	add    ecx,esi
c0002e7b:	f7 f5                	div    ebp
c0002e7d:	89 d5                	mov    ebp,edx
c0002e7f:	31 d2                	xor    edx,edx
c0002e81:	45                   	inc    ebp
c0002e82:	f7 f7                	div    edi
c0002e84:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002e87:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002e8a:	89 c2                	mov    edx,eax
c0002e8c:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002e8f:	c1 ea 02             	shr    edx,0x2
c0002e92:	83 e2 c0             	and    edx,0xffffffc0
c0002e95:	09 ea                	or     edx,ebp
c0002e97:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e9c:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	f7 f5                	div    ebp
c0002ea3:	89 d6                	mov    esi,edx
c0002ea5:	31 d2                	xor    edx,edx
c0002ea7:	46                   	inc    esi
c0002ea8:	f7 f7                	div    edi
c0002eaa:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002ead:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002eb0:	89 c7                	mov    edi,eax
c0002eb2:	c1 ef 02             	shr    edi,0x2
c0002eb5:	83 e7 c0             	and    edi,0xffffffc0
c0002eb8:	09 fe                	or     esi,edi
c0002eba:	89 f2                	mov    edx,esi
c0002ebc:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002ebf:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002ec4:	0f 85 06 ff ff ff    	jne    c0002dd0 <create_partition+0x9b>
c0002eca:	e9 05 ff ff ff       	jmp    c0002dd4 <create_partition+0x9f>
c0002ecf:	b8 01 00 00 00       	mov    eax,0x1
c0002ed4:	83 c4 3c             	add    esp,0x3c
c0002ed7:	5b                   	pop    ebx
c0002ed8:	5e                   	pop    esi
c0002ed9:	5f                   	pop    edi
c0002eda:	5d                   	pop    ebp
c0002edb:	c3                   	ret    

c0002edc <get_fileinfo>:
c0002edc:	55                   	push   ebp
c0002edd:	57                   	push   edi
c0002ede:	56                   	push   esi
c0002edf:	53                   	push   ebx
c0002ee0:	83 ec 1c             	sub    esp,0x1c
c0002ee3:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ee5:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002ee9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002eed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002ef1:	0f 84 c1 01 00 00    	je     c00030b8 <get_fileinfo+0x1dc>
c0002ef7:	89 d3                	mov    ebx,edx
c0002ef9:	89 c6                	mov    esi,eax
c0002efb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002eff:	74 6a                	je     c0002f6b <get_fileinfo+0x8f>
c0002f01:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002f09:	31 ed                	xor    ebp,ebp
c0002f0b:	31 ff                	xor    edi,edi
c0002f0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f11:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f15:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f18:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f1c:	66 85 d2             	test   dx,dx
c0002f1f:	74 3e                	je     c0002f5f <get_fileinfo+0x83>
c0002f21:	66 85 ed             	test   bp,bp
c0002f24:	75 0c                	jne    c0002f32 <get_fileinfo+0x56>
c0002f26:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f2c:	66 3d ff 07          	cmp    ax,0x7ff
c0002f30:	76 22                	jbe    c0002f54 <get_fileinfo+0x78>
c0002f32:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f37:	89 e8                	mov    eax,ebp
c0002f39:	29 f9                	sub    ecx,edi
c0002f3b:	c1 e0 10             	shl    eax,0x10
c0002f3e:	09 d0                	or     eax,edx
c0002f40:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f44:	e8 23 ef ff ff       	call   c0001e6c <put_utf>
c0002f49:	84 c0                	test   al,al
c0002f4b:	74 10                	je     c0002f5d <get_fileinfo+0x81>
c0002f4d:	0f b6 c0             	movzx  eax,al
c0002f50:	31 d2                	xor    edx,edx
c0002f52:	01 c7                	add    edi,eax
c0002f54:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f59:	89 d5                	mov    ebp,edx
c0002f5b:	eb b0                	jmp    c0002f0d <get_fileinfo+0x31>
c0002f5d:	31 ff                	xor    edi,edi
c0002f5f:	66 85 ed             	test   bp,bp
c0002f62:	74 02                	je     c0002f66 <get_fileinfo+0x8a>
c0002f64:	31 ff                	xor    edi,edi
c0002f66:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f6b:	31 ff                	xor    edi,edi
c0002f6d:	31 c9                	xor    ecx,ecx
c0002f6f:	83 f9 0a             	cmp    ecx,0xa
c0002f72:	0f 87 ad 00 00 00    	ja     c0003025 <get_fileinfo+0x149>
c0002f78:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f7b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f7e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002f82:	66 83 fa 20          	cmp    dx,0x20
c0002f86:	0f 84 92 00 00 00    	je     c000301e <get_fileinfo+0x142>
c0002f8c:	66 83 fa 05          	cmp    dx,0x5
c0002f90:	75 05                	jne    c0002f97 <get_fileinfo+0xbb>
c0002f92:	ba e5 00 00 00       	mov    edx,0xe5
c0002f97:	83 ff 0b             	cmp    edi,0xb
c0002f9a:	77 0b                	ja     c0002fa7 <get_fileinfo+0xcb>
c0002f9c:	83 fd 09             	cmp    ebp,0x9
c0002f9f:	75 06                	jne    c0002fa7 <get_fileinfo+0xcb>
c0002fa1:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002fa6:	47                   	inc    edi
c0002fa7:	0f b7 c2             	movzx  eax,dx
c0002faa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002fae:	e8 ed ed ff ff       	call   c0001da0 <dbc_1st>
c0002fb3:	85 c0                	test   eax,eax
c0002fb5:	74 2f                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fb7:	83 fd 08             	cmp    ebp,0x8
c0002fba:	74 2a                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fbc:	83 fd 0b             	cmp    ebp,0xb
c0002fbf:	74 25                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fc1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fc4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fc8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fcc:	e8 d2 ed ff ff       	call   c0001da3 <dbc_2nd>
c0002fd1:	85 c0                	test   eax,eax
c0002fd3:	74 11                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002fd9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002fde:	c1 e2 08             	shl    edx,0x8
c0002fe1:	8d 69 02             	lea    ebp,[ecx+0x2]
c0002fe4:	09 c2                	or     edx,eax
c0002fe6:	0f b7 d2             	movzx  edx,dx
c0002fe9:	50                   	push   eax
c0002fea:	50                   	push   eax
c0002feb:	68 b5 01 00 00       	push   0x1b5
c0002ff0:	52                   	push   edx
c0002ff1:	e8 46 2b 00 00       	call   c0005b3c <ff_oem2uni>
c0002ff6:	83 c4 10             	add    esp,0x10
c0002ff9:	66 85 c0             	test   ax,ax
c0002ffc:	75 04                	jne    c0003002 <get_fileinfo+0x126>
c0002ffe:	31 ff                	xor    edi,edi
c0003000:	eb 23                	jmp    c0003025 <get_fileinfo+0x149>
c0003002:	b9 0c 00 00 00       	mov    ecx,0xc
c0003007:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000300b:	29 f9                	sub    ecx,edi
c000300d:	0f b7 c0             	movzx  eax,ax
c0003010:	e8 57 ee ff ff       	call   c0001e6c <put_utf>
c0003015:	84 c0                	test   al,al
c0003017:	74 e5                	je     c0002ffe <get_fileinfo+0x122>
c0003019:	0f b6 c0             	movzx  eax,al
c000301c:	01 c7                	add    edi,eax
c000301e:	89 e9                	mov    ecx,ebp
c0003020:	e9 4a ff ff ff       	jmp    c0002f6f <get_fileinfo+0x93>
c0003025:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000302a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000302e:	75 54                	jne    c0003084 <get_fileinfo+0x1a8>
c0003030:	85 ff                	test   edi,edi
c0003032:	75 0b                	jne    c000303f <get_fileinfo+0x163>
c0003034:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003038:	ba 01 00 00 00       	mov    edx,0x1
c000303d:	eb 33                	jmp    c0003072 <get_fileinfo+0x196>
c000303f:	b1 08                	mov    cl,0x8
c0003041:	31 d2                	xor    edx,edx
c0003043:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003049:	84 c0                	test   al,al
c000304b:	74 25                	je     c0003072 <get_fileinfo+0x196>
c000304d:	66 83 f8 2e          	cmp    ax,0x2e
c0003051:	74 16                	je     c0003069 <get_fileinfo+0x18d>
c0003053:	8d 78 bf             	lea    edi,[eax-0x41]
c0003056:	66 83 ff 19          	cmp    di,0x19
c000305a:	77 0f                	ja     c000306b <get_fileinfo+0x18f>
c000305c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000305f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003062:	74 07                	je     c000306b <get_fileinfo+0x18f>
c0003064:	83 c0 20             	add    eax,0x20
c0003067:	eb 02                	jmp    c000306b <get_fileinfo+0x18f>
c0003069:	b1 10                	mov    cl,0x10
c000306b:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000306f:	42                   	inc    edx
c0003070:	eb d1                	jmp    c0003043 <get_fileinfo+0x167>
c0003072:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003077:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000307a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000307e:	75 04                	jne    c0003084 <get_fileinfo+0x1a8>
c0003080:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003084:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003087:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000308a:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c000308d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003090:	83 c0 1c             	add    eax,0x1c
c0003093:	e8 94 ec ff ff       	call   c0001d2c <ld_dword>
c0003098:	89 03                	mov    DWORD PTR [ebx],eax
c000309a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309d:	83 c0 16             	add    eax,0x16
c00030a0:	e8 7a ec ff ff       	call   c0001d1f <ld_word>
c00030a5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00030a9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030ac:	83 c0 18             	add    eax,0x18
c00030af:	e8 6b ec ff ff       	call   c0001d1f <ld_word>
c00030b4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030b8:	83 c4 1c             	add    esp,0x1c
c00030bb:	5b                   	pop    ebx
c00030bc:	5e                   	pop    esi
c00030bd:	5f                   	pop    edi
c00030be:	5d                   	pop    ebp
c00030bf:	c3                   	ret    

c00030c0 <ld_clust.isra.0>:
c00030c0:	56                   	push   esi
c00030c1:	89 c6                	mov    esi,eax
c00030c3:	53                   	push   ebx
c00030c4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030c7:	89 d3                	mov    ebx,edx
c00030c9:	e8 51 ec ff ff       	call   c0001d1f <ld_word>
c00030ce:	0f b7 c8             	movzx  ecx,ax
c00030d1:	89 f0                	mov    eax,esi
c00030d3:	3c 03                	cmp    al,0x3
c00030d5:	75 0d                	jne    c00030e4 <ld_clust.isra.0+0x24>
c00030d7:	8d 43 14             	lea    eax,[ebx+0x14]
c00030da:	e8 40 ec ff ff       	call   c0001d1f <ld_word>
c00030df:	c1 e0 10             	shl    eax,0x10
c00030e2:	09 c1                	or     ecx,eax
c00030e4:	89 c8                	mov    eax,ecx
c00030e6:	5b                   	pop    ebx
c00030e7:	5e                   	pop    esi
c00030e8:	c3                   	ret    

c00030e9 <st_clust.isra.1>:
c00030e9:	56                   	push   esi
c00030ea:	89 c6                	mov    esi,eax
c00030ec:	53                   	push   ebx
c00030ed:	89 d3                	mov    ebx,edx
c00030ef:	0f b7 d1             	movzx  edx,cx
c00030f2:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00030f5:	e8 4a ec ff ff       	call   c0001d44 <st_word>
c00030fa:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00030fd:	75 0f                	jne    c000310e <st_clust.isra.1+0x25>
c00030ff:	c1 e9 10             	shr    ecx,0x10
c0003102:	8d 43 14             	lea    eax,[ebx+0x14]
c0003105:	89 ca                	mov    edx,ecx
c0003107:	5b                   	pop    ebx
c0003108:	5e                   	pop    esi
c0003109:	e9 36 ec ff ff       	jmp    c0001d44 <st_word>
c000310e:	5b                   	pop    ebx
c000310f:	5e                   	pop    esi
c0003110:	c3                   	ret    

c0003111 <get_fat.isra.2>:
c0003111:	b9 01 00 00 00       	mov    ecx,0x1
c0003116:	83 fa 01             	cmp    edx,0x1
c0003119:	0f 86 f1 00 00 00    	jbe    c0003210 <get_fat.isra.2+0xff>
c000311f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003122:	0f 83 e8 00 00 00    	jae    c0003210 <get_fat.isra.2+0xff>
c0003128:	55                   	push   ebp
c0003129:	57                   	push   edi
c000312a:	89 c7                	mov    edi,eax
c000312c:	56                   	push   esi
c000312d:	89 d6                	mov    esi,edx
c000312f:	53                   	push   ebx
c0003130:	83 ec 0c             	sub    esp,0xc
c0003133:	8a 00                	mov    al,BYTE PTR [eax]
c0003135:	3c 02                	cmp    al,0x2
c0003137:	74 78                	je     c00031b1 <get_fat.isra.2+0xa0>
c0003139:	3c 03                	cmp    al,0x3
c000313b:	0f 84 97 00 00 00    	je     c00031d8 <get_fat.isra.2+0xc7>
c0003141:	fe c8                	dec    al
c0003143:	0f 85 bd 00 00 00    	jne    c0003206 <get_fat.isra.2+0xf5>
c0003149:	89 d3                	mov    ebx,edx
c000314b:	89 f8                	mov    eax,edi
c000314d:	d1 eb                	shr    ebx,1
c000314f:	01 d3                	add    ebx,edx
c0003151:	89 da                	mov    edx,ebx
c0003153:	c1 ea 09             	shr    edx,0x9
c0003156:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003159:	e8 e7 f0 ff ff       	call   c0002245 <move_window>
c000315e:	85 c0                	test   eax,eax
c0003160:	74 08                	je     c000316a <get_fat.isra.2+0x59>
c0003162:	83 c9 ff             	or     ecx,0xffffffff
c0003165:	e9 9c 00 00 00       	jmp    c0003206 <get_fat.isra.2+0xf5>
c000316a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000316d:	89 f8                	mov    eax,edi
c000316f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003175:	89 ea                	mov    edx,ebp
c0003177:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000317b:	c1 ea 09             	shr    edx,0x9
c000317e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003181:	e8 bf f0 ff ff       	call   c0002245 <move_window>
c0003186:	85 c0                	test   eax,eax
c0003188:	75 d8                	jne    c0003162 <get_fat.isra.2+0x51>
c000318a:	0f b6 c3             	movzx  eax,bl
c000318d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003193:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003198:	c1 e3 08             	shl    ebx,0x8
c000319b:	09 c3                	or     ebx,eax
c000319d:	89 d9                	mov    ecx,ebx
c000319f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00031a5:	83 e6 01             	and    esi,0x1
c00031a8:	74 5c                	je     c0003206 <get_fat.isra.2+0xf5>
c00031aa:	89 d9                	mov    ecx,ebx
c00031ac:	c1 e9 04             	shr    ecx,0x4
c00031af:	eb 55                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031b1:	c1 ea 08             	shr    edx,0x8
c00031b4:	89 f8                	mov    eax,edi
c00031b6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031b9:	e8 87 f0 ff ff       	call   c0002245 <move_window>
c00031be:	85 c0                	test   eax,eax
c00031c0:	75 a0                	jne    c0003162 <get_fat.isra.2+0x51>
c00031c2:	01 f6                	add    esi,esi
c00031c4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031ca:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ce:	e8 4c eb ff ff       	call   c0001d1f <ld_word>
c00031d3:	0f b7 c8             	movzx  ecx,ax
c00031d6:	eb 2e                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031d8:	c1 ea 07             	shr    edx,0x7
c00031db:	89 f8                	mov    eax,edi
c00031dd:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031e0:	e8 60 f0 ff ff       	call   c0002245 <move_window>
c00031e5:	85 c0                	test   eax,eax
c00031e7:	0f 85 75 ff ff ff    	jne    c0003162 <get_fat.isra.2+0x51>
c00031ed:	c1 e6 02             	shl    esi,0x2
c00031f0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031f6:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031fa:	e8 2d eb ff ff       	call   c0001d2c <ld_dword>
c00031ff:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003204:	89 c1                	mov    ecx,eax
c0003206:	83 c4 0c             	add    esp,0xc
c0003209:	89 c8                	mov    eax,ecx
c000320b:	5b                   	pop    ebx
c000320c:	5e                   	pop    esi
c000320d:	5f                   	pop    edi
c000320e:	5d                   	pop    ebp
c000320f:	c3                   	ret    
c0003210:	89 c8                	mov    eax,ecx
c0003212:	c3                   	ret    

c0003213 <dir_sdi>:
c0003213:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003219:	0f 87 b6 00 00 00    	ja     c00032d5 <dir_sdi+0xc2>
c000321f:	55                   	push   ebp
c0003220:	57                   	push   edi
c0003221:	56                   	push   esi
c0003222:	53                   	push   ebx
c0003223:	89 d3                	mov    ebx,edx
c0003225:	83 ec 1c             	sub    esp,0x1c
c0003228:	f6 c2 1f             	test   dl,0x1f
c000322b:	74 0a                	je     c0003237 <dir_sdi+0x24>
c000322d:	b8 02 00 00 00       	mov    eax,0x2
c0003232:	e9 96 00 00 00       	jmp    c00032cd <dir_sdi+0xba>
c0003237:	89 c6                	mov    esi,eax
c0003239:	8b 38                	mov    edi,DWORD PTR [eax]
c000323b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000323e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003241:	85 c9                	test   ecx,ecx
c0003243:	75 23                	jne    c0003268 <dir_sdi+0x55>
c0003245:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003248:	76 07                	jbe    c0003251 <dir_sdi+0x3e>
c000324a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000324d:	85 c0                	test   eax,eax
c000324f:	75 15                	jne    c0003266 <dir_sdi+0x53>
c0003251:	89 da                	mov    edx,ebx
c0003253:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003257:	c1 ea 05             	shr    edx,0x5
c000325a:	39 c2                	cmp    edx,eax
c000325c:	73 cf                	jae    c000322d <dir_sdi+0x1a>
c000325e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003261:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003264:	eb 3d                	jmp    c00032a3 <dir_sdi+0x90>
c0003266:	89 c1                	mov    ecx,eax
c0003268:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000326c:	c1 e5 09             	shl    ebp,0x9
c000326f:	89 ca                	mov    edx,ecx
c0003271:	39 eb                	cmp    ebx,ebp
c0003273:	72 1c                	jb     c0003291 <dir_sdi+0x7e>
c0003275:	8b 06                	mov    eax,DWORD PTR [esi]
c0003277:	e8 95 fe ff ff       	call   c0003111 <get_fat.isra.2>
c000327c:	89 c1                	mov    ecx,eax
c000327e:	83 f8 ff             	cmp    eax,0xffffffff
c0003281:	74 45                	je     c00032c8 <dir_sdi+0xb5>
c0003283:	83 f8 01             	cmp    eax,0x1
c0003286:	76 a5                	jbe    c000322d <dir_sdi+0x1a>
c0003288:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c000328b:	76 a0                	jbe    c000322d <dir_sdi+0x1a>
c000328d:	29 eb                	sub    ebx,ebp
c000328f:	eb de                	jmp    c000326f <dir_sdi+0x5c>
c0003291:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003295:	89 f8                	mov    eax,edi
c0003297:	e8 c9 ec ff ff       	call   c0001f65 <clst2sect>
c000329c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00032a0:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032a3:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00032a6:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00032a9:	85 d2                	test   edx,edx
c00032ab:	74 80                	je     c000322d <dir_sdi+0x1a>
c00032ad:	89 d8                	mov    eax,ebx
c00032af:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032b5:	c1 e8 09             	shr    eax,0x9
c00032b8:	01 d0                	add    eax,edx
c00032ba:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032bd:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032c4:	31 c0                	xor    eax,eax
c00032c6:	eb 05                	jmp    c00032cd <dir_sdi+0xba>
c00032c8:	b8 01 00 00 00       	mov    eax,0x1
c00032cd:	83 c4 1c             	add    esp,0x1c
c00032d0:	5b                   	pop    ebx
c00032d1:	5e                   	pop    esi
c00032d2:	5f                   	pop    edi
c00032d3:	5d                   	pop    ebp
c00032d4:	c3                   	ret    
c00032d5:	b8 02 00 00 00       	mov    eax,0x2
c00032da:	c3                   	ret    

c00032db <create_chain>:
c00032db:	55                   	push   ebp
c00032dc:	89 c5                	mov    ebp,eax
c00032de:	57                   	push   edi
c00032df:	89 d7                	mov    edi,edx
c00032e1:	56                   	push   esi
c00032e2:	53                   	push   ebx
c00032e3:	83 ec 1c             	sub    esp,0x1c
c00032e6:	85 d2                	test   edx,edx
c00032e8:	8b 30                	mov    esi,DWORD PTR [eax]
c00032ea:	75 0e                	jne    c00032fa <create_chain+0x1f>
c00032ec:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00032ef:	85 c9                	test   ecx,ecx
c00032f1:	74 34                	je     c0003327 <create_chain+0x4c>
c00032f3:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00032f6:	77 34                	ja     c000332c <create_chain+0x51>
c00032f8:	eb 2d                	jmp    c0003327 <create_chain+0x4c>
c00032fa:	89 f0                	mov    eax,esi
c00032fc:	e8 10 fe ff ff       	call   c0003111 <get_fat.isra.2>
c0003301:	89 c3                	mov    ebx,eax
c0003303:	83 f8 01             	cmp    eax,0x1
c0003306:	77 0a                	ja     c0003312 <create_chain+0x37>
c0003308:	bb 01 00 00 00       	mov    ebx,0x1
c000330d:	e9 f9 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003312:	83 f8 ff             	cmp    eax,0xffffffff
c0003315:	0f 84 ed 00 00 00    	je     c0003408 <create_chain+0x12d>
c000331b:	89 f9                	mov    ecx,edi
c000331d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003320:	76 0a                	jbe    c000332c <create_chain+0x51>
c0003322:	e9 e4 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003327:	b9 01 00 00 00       	mov    ecx,0x1
c000332c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003330:	75 07                	jne    c0003339 <create_chain+0x5e>
c0003332:	31 db                	xor    ebx,ebx
c0003334:	e9 d2 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003339:	39 f9                	cmp    ecx,edi
c000333b:	75 46                	jne    c0003383 <create_chain+0xa8>
c000333d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003340:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003343:	77 05                	ja     c000334a <create_chain+0x6f>
c0003345:	bb 02 00 00 00       	mov    ebx,0x2
c000334a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000334e:	89 da                	mov    edx,ebx
c0003350:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003353:	e8 b9 fd ff ff       	call   c0003111 <get_fat.isra.2>
c0003358:	83 f8 01             	cmp    eax,0x1
c000335b:	74 ab                	je     c0003308 <create_chain+0x2d>
c000335d:	83 f8 ff             	cmp    eax,0xffffffff
c0003360:	0f 84 a2 00 00 00    	je     c0003408 <create_chain+0x12d>
c0003366:	85 c0                	test   eax,eax
c0003368:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000336c:	74 11                	je     c000337f <create_chain+0xa4>
c000336e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003371:	83 f8 01             	cmp    eax,0x1
c0003374:	76 0d                	jbe    c0003383 <create_chain+0xa8>
c0003376:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003379:	73 08                	jae    c0003383 <create_chain+0xa8>
c000337b:	89 c1                	mov    ecx,eax
c000337d:	eb 04                	jmp    c0003383 <create_chain+0xa8>
c000337f:	85 db                	test   ebx,ebx
c0003381:	75 3d                	jne    c00033c0 <create_chain+0xe5>
c0003383:	89 cb                	mov    ebx,ecx
c0003385:	43                   	inc    ebx
c0003386:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003389:	77 0a                	ja     c0003395 <create_chain+0xba>
c000338b:	83 f9 01             	cmp    ecx,0x1
c000338e:	76 a2                	jbe    c0003332 <create_chain+0x57>
c0003390:	bb 02 00 00 00       	mov    ebx,0x2
c0003395:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003399:	89 da                	mov    edx,ebx
c000339b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000339e:	e8 6e fd ff ff       	call   c0003111 <get_fat.isra.2>
c00033a3:	85 c0                	test   eax,eax
c00033a5:	74 19                	je     c00033c0 <create_chain+0xe5>
c00033a7:	83 f8 01             	cmp    eax,0x1
c00033aa:	0f 84 58 ff ff ff    	je     c0003308 <create_chain+0x2d>
c00033b0:	40                   	inc    eax
c00033b1:	74 55                	je     c0003408 <create_chain+0x12d>
c00033b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033b7:	39 cb                	cmp    ebx,ecx
c00033b9:	75 ca                	jne    c0003385 <create_chain+0xaa>
c00033bb:	e9 72 ff ff ff       	jmp    c0003332 <create_chain+0x57>
c00033c0:	83 c9 ff             	or     ecx,0xffffffff
c00033c3:	89 da                	mov    edx,ebx
c00033c5:	89 f0                	mov    eax,esi
c00033c7:	e8 cf f2 ff ff       	call   c000269b <put_fat>
c00033cc:	85 c0                	test   eax,eax
c00033ce:	75 31                	jne    c0003401 <create_chain+0x126>
c00033d0:	85 ff                	test   edi,edi
c00033d2:	75 16                	jne    c00033ea <create_chain+0x10f>
c00033d4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033d7:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00033da:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00033dd:	8d 57 fe             	lea    edx,[edi-0x2]
c00033e0:	39 d0                	cmp    eax,edx
c00033e2:	77 17                	ja     c00033fb <create_chain+0x120>
c00033e4:	48                   	dec    eax
c00033e5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00033e8:	eb 11                	jmp    c00033fb <create_chain+0x120>
c00033ea:	89 d9                	mov    ecx,ebx
c00033ec:	89 fa                	mov    edx,edi
c00033ee:	89 f0                	mov    eax,esi
c00033f0:	e8 a6 f2 ff ff       	call   c000269b <put_fat>
c00033f5:	85 c0                	test   eax,eax
c00033f7:	74 db                	je     c00033d4 <create_chain+0xf9>
c00033f9:	eb 06                	jmp    c0003401 <create_chain+0x126>
c00033fb:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c00033ff:	eb 0a                	jmp    c000340b <create_chain+0x130>
c0003401:	48                   	dec    eax
c0003402:	0f 85 00 ff ff ff    	jne    c0003308 <create_chain+0x2d>
c0003408:	83 cb ff             	or     ebx,0xffffffff
c000340b:	83 c4 1c             	add    esp,0x1c
c000340e:	89 d8                	mov    eax,ebx
c0003410:	5b                   	pop    ebx
c0003411:	5e                   	pop    esi
c0003412:	5f                   	pop    edi
c0003413:	5d                   	pop    ebp
c0003414:	c3                   	ret    

c0003415 <remove_chain>:
c0003415:	55                   	push   ebp
c0003416:	57                   	push   edi
c0003417:	56                   	push   esi
c0003418:	89 d6                	mov    esi,edx
c000341a:	53                   	push   ebx
c000341b:	83 ec 0c             	sub    esp,0xc
c000341e:	83 fa 01             	cmp    edx,0x1
c0003421:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003423:	76 65                	jbe    c000348a <remove_chain+0x75>
c0003425:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003428:	76 60                	jbe    c000348a <remove_chain+0x75>
c000342a:	89 c5                	mov    ebp,eax
c000342c:	89 ca                	mov    edx,ecx
c000342e:	85 c9                	test   ecx,ecx
c0003430:	74 0e                	je     c0003440 <remove_chain+0x2b>
c0003432:	83 c9 ff             	or     ecx,0xffffffff
c0003435:	89 d8                	mov    eax,ebx
c0003437:	e8 5f f2 ff ff       	call   c000269b <put_fat>
c000343c:	85 c0                	test   eax,eax
c000343e:	75 56                	jne    c0003496 <remove_chain+0x81>
c0003440:	89 f2                	mov    edx,esi
c0003442:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003445:	e8 c7 fc ff ff       	call   c0003111 <get_fat.isra.2>
c000344a:	89 c7                	mov    edi,eax
c000344c:	85 c0                	test   eax,eax
c000344e:	75 04                	jne    c0003454 <remove_chain+0x3f>
c0003450:	31 c0                	xor    eax,eax
c0003452:	eb 42                	jmp    c0003496 <remove_chain+0x81>
c0003454:	83 f8 01             	cmp    eax,0x1
c0003457:	74 31                	je     c000348a <remove_chain+0x75>
c0003459:	83 f8 ff             	cmp    eax,0xffffffff
c000345c:	74 33                	je     c0003491 <remove_chain+0x7c>
c000345e:	31 c9                	xor    ecx,ecx
c0003460:	89 f2                	mov    edx,esi
c0003462:	89 d8                	mov    eax,ebx
c0003464:	e8 32 f2 ff ff       	call   c000269b <put_fat>
c0003469:	85 c0                	test   eax,eax
c000346b:	75 29                	jne    c0003496 <remove_chain+0x81>
c000346d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003470:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003473:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003476:	39 c8                	cmp    eax,ecx
c0003478:	73 08                	jae    c0003482 <remove_chain+0x6d>
c000347a:	40                   	inc    eax
c000347b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000347f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003482:	89 fe                	mov    esi,edi
c0003484:	39 fa                	cmp    edx,edi
c0003486:	77 b8                	ja     c0003440 <remove_chain+0x2b>
c0003488:	eb c6                	jmp    c0003450 <remove_chain+0x3b>
c000348a:	b8 02 00 00 00       	mov    eax,0x2
c000348f:	eb 05                	jmp    c0003496 <remove_chain+0x81>
c0003491:	b8 01 00 00 00       	mov    eax,0x1
c0003496:	83 c4 0c             	add    esp,0xc
c0003499:	5b                   	pop    ebx
c000349a:	5e                   	pop    esi
c000349b:	5f                   	pop    edi
c000349c:	5d                   	pop    ebp
c000349d:	c3                   	ret    

c000349e <dir_next>:
c000349e:	55                   	push   ebp
c000349f:	57                   	push   edi
c00034a0:	56                   	push   esi
c00034a1:	53                   	push   ebx
c00034a2:	83 ec 1c             	sub    esp,0x1c
c00034a5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00034a8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034aa:	83 c7 20             	add    edi,0x20
c00034ad:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034b3:	76 07                	jbe    c00034bc <dir_next+0x1e>
c00034b5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034bc:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034bf:	b9 04 00 00 00       	mov    ecx,0x4
c00034c4:	85 f6                	test   esi,esi
c00034c6:	0f 84 cd 00 00 00    	je     c0003599 <dir_next+0xfb>
c00034cc:	89 c3                	mov    ebx,eax
c00034ce:	89 d1                	mov    ecx,edx
c00034d0:	89 f8                	mov    eax,edi
c00034d2:	25 ff 01 00 00       	and    eax,0x1ff
c00034d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034db:	0f 85 a8 00 00 00    	jne    c0003589 <dir_next+0xeb>
c00034e1:	46                   	inc    esi
c00034e2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00034e5:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00034e8:	85 d2                	test   edx,edx
c00034ea:	75 22                	jne    c000350e <dir_next+0x70>
c00034ec:	89 fa                	mov    edx,edi
c00034ee:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034f2:	c1 ea 05             	shr    edx,0x5
c00034f5:	39 c2                	cmp    edx,eax
c00034f7:	0f 82 8c 00 00 00    	jb     c0003589 <dir_next+0xeb>
c00034fd:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003504:	b9 04 00 00 00       	mov    ecx,0x4
c0003509:	e9 8b 00 00 00       	jmp    c0003599 <dir_next+0xfb>
c000350e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003512:	89 fe                	mov    esi,edi
c0003514:	48                   	dec    eax
c0003515:	c1 ee 09             	shr    esi,0x9
c0003518:	85 f0                	test   eax,esi
c000351a:	75 6d                	jne    c0003589 <dir_next+0xeb>
c000351c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003520:	89 e8                	mov    eax,ebp
c0003522:	e8 ea fb ff ff       	call   c0003111 <get_fat.isra.2>
c0003527:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000352b:	89 c6                	mov    esi,eax
c000352d:	83 f8 01             	cmp    eax,0x1
c0003530:	77 07                	ja     c0003539 <dir_next+0x9b>
c0003532:	b9 02 00 00 00       	mov    ecx,0x2
c0003537:	eb 60                	jmp    c0003599 <dir_next+0xfb>
c0003539:	83 f8 ff             	cmp    eax,0xffffffff
c000353c:	75 07                	jne    c0003545 <dir_next+0xa7>
c000353e:	b9 01 00 00 00       	mov    ecx,0x1
c0003543:	eb 54                	jmp    c0003599 <dir_next+0xfb>
c0003545:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003548:	77 30                	ja     c000357a <dir_next+0xdc>
c000354a:	85 c9                	test   ecx,ecx
c000354c:	74 af                	je     c00034fd <dir_next+0x5f>
c000354e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003551:	89 d8                	mov    eax,ebx
c0003553:	e8 83 fd ff ff       	call   c00032db <create_chain>
c0003558:	b9 07 00 00 00       	mov    ecx,0x7
c000355d:	89 c6                	mov    esi,eax
c000355f:	85 c0                	test   eax,eax
c0003561:	74 36                	je     c0003599 <dir_next+0xfb>
c0003563:	83 f8 01             	cmp    eax,0x1
c0003566:	74 ca                	je     c0003532 <dir_next+0x94>
c0003568:	83 f8 ff             	cmp    eax,0xffffffff
c000356b:	74 d1                	je     c000353e <dir_next+0xa0>
c000356d:	89 c2                	mov    edx,eax
c000356f:	89 e8                	mov    eax,ebp
c0003571:	e8 75 f2 ff ff       	call   c00027eb <dir_clear>
c0003576:	85 c0                	test   eax,eax
c0003578:	75 c4                	jne    c000353e <dir_next+0xa0>
c000357a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000357d:	89 f2                	mov    edx,esi
c000357f:	89 e8                	mov    eax,ebp
c0003581:	e8 df e9 ff ff       	call   c0001f65 <clst2sect>
c0003586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003589:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000358d:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003590:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003594:	31 c9                	xor    ecx,ecx
c0003596:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003599:	83 c4 1c             	add    esp,0x1c
c000359c:	89 c8                	mov    eax,ecx
c000359e:	5b                   	pop    ebx
c000359f:	5e                   	pop    esi
c00035a0:	5f                   	pop    edi
c00035a1:	5d                   	pop    ebp
c00035a2:	c3                   	ret    

c00035a3 <dir_alloc>:
c00035a3:	55                   	push   ebp
c00035a4:	89 c5                	mov    ebp,eax
c00035a6:	57                   	push   edi
c00035a7:	89 d7                	mov    edi,edx
c00035a9:	56                   	push   esi
c00035aa:	31 d2                	xor    edx,edx
c00035ac:	53                   	push   ebx
c00035ad:	83 ec 0c             	sub    esp,0xc
c00035b0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035b2:	e8 5c fc ff ff       	call   c0003213 <dir_sdi>
c00035b7:	85 c0                	test   eax,eax
c00035b9:	75 37                	jne    c00035f2 <dir_alloc+0x4f>
c00035bb:	31 db                	xor    ebx,ebx
c00035bd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035c0:	89 f0                	mov    eax,esi
c00035c2:	e8 7e ec ff ff       	call   c0002245 <move_window>
c00035c7:	85 c0                	test   eax,eax
c00035c9:	75 27                	jne    c00035f2 <dir_alloc+0x4f>
c00035cb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035ce:	8a 12                	mov    dl,BYTE PTR [edx]
c00035d0:	84 d2                	test   dl,dl
c00035d2:	74 05                	je     c00035d9 <dir_alloc+0x36>
c00035d4:	80 fa e5             	cmp    dl,0xe5
c00035d7:	75 07                	jne    c00035e0 <dir_alloc+0x3d>
c00035d9:	43                   	inc    ebx
c00035da:	39 fb                	cmp    ebx,edi
c00035dc:	75 04                	jne    c00035e2 <dir_alloc+0x3f>
c00035de:	eb 1c                	jmp    c00035fc <dir_alloc+0x59>
c00035e0:	31 db                	xor    ebx,ebx
c00035e2:	ba 01 00 00 00       	mov    edx,0x1
c00035e7:	89 e8                	mov    eax,ebp
c00035e9:	e8 b0 fe ff ff       	call   c000349e <dir_next>
c00035ee:	85 c0                	test   eax,eax
c00035f0:	74 cb                	je     c00035bd <dir_alloc+0x1a>
c00035f2:	83 f8 04             	cmp    eax,0x4
c00035f5:	75 05                	jne    c00035fc <dir_alloc+0x59>
c00035f7:	b8 07 00 00 00       	mov    eax,0x7
c00035fc:	83 c4 0c             	add    esp,0xc
c00035ff:	5b                   	pop    ebx
c0003600:	5e                   	pop    esi
c0003601:	5f                   	pop    edi
c0003602:	5d                   	pop    ebp
c0003603:	c3                   	ret    

c0003604 <dir_read>:
c0003604:	55                   	push   ebp
c0003605:	57                   	push   edi
c0003606:	bf ff ff ff ff       	mov    edi,0xffffffff
c000360b:	56                   	push   esi
c000360c:	be 04 00 00 00       	mov    esi,0x4
c0003611:	53                   	push   ebx
c0003612:	89 c3                	mov    ebx,eax
c0003614:	83 ec 1c             	sub    esp,0x1c
c0003617:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003622:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003625:	85 d2                	test   edx,edx
c0003627:	0f 84 d8 00 00 00    	je     c0003705 <dir_read+0x101>
c000362d:	89 e8                	mov    eax,ebp
c000362f:	e8 11 ec ff ff       	call   c0002245 <move_window>
c0003634:	89 c6                	mov    esi,eax
c0003636:	85 c0                	test   eax,eax
c0003638:	0f 85 d2 00 00 00    	jne    c0003710 <dir_read+0x10c>
c000363e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003641:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003643:	84 c9                	test   cl,cl
c0003645:	0f 84 c0 00 00 00    	je     c000370b <dir_read+0x107>
c000364b:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000364e:	83 e0 3f             	and    eax,0x3f
c0003651:	80 f9 2e             	cmp    cl,0x2e
c0003654:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003658:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000365b:	0f 84 8a 00 00 00    	je     c00036eb <dir_read+0xe7>
c0003661:	80 f9 e5             	cmp    cl,0xe5
c0003664:	0f 84 81 00 00 00    	je     c00036eb <dir_read+0xe7>
c000366a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000366e:	83 e0 1f             	and    eax,0x1f
c0003671:	83 f8 08             	cmp    eax,0x8
c0003674:	0f 94 c0             	sete   al
c0003677:	0f b6 c0             	movzx  eax,al
c000367a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000367e:	75 6b                	jne    c00036eb <dir_read+0xe7>
c0003680:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003685:	75 44                	jne    c00036cb <dir_read+0xc7>
c0003687:	f6 c1 40             	test   cl,0x40
c000368a:	74 12                	je     c000369e <dir_read+0x9a>
c000368c:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000368f:	83 e1 bf             	and    ecx,0xffffffbf
c0003692:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003696:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003699:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000369c:	eb 06                	jmp    c00036a4 <dir_read+0xa0>
c000369e:	89 f8                	mov    eax,edi
c00036a0:	38 c8                	cmp    al,cl
c00036a2:	75 47                	jne    c00036eb <dir_read+0xe7>
c00036a4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00036a8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036ad:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00036b0:	75 3e                	jne    c00036f0 <dir_read+0xec>
c00036b2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036b9:	e8 c4 e8 ff ff       	call   c0001f82 <pick_lfn>
c00036be:	85 c0                	test   eax,eax
c00036c0:	74 2e                	je     c00036f0 <dir_read+0xec>
c00036c2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036c6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036c9:	eb 25                	jmp    c00036f0 <dir_read+0xec>
c00036cb:	89 f8                	mov    eax,edi
c00036cd:	84 c0                	test   al,al
c00036cf:	75 11                	jne    c00036e2 <dir_read+0xde>
c00036d1:	89 d0                	mov    eax,edx
c00036d3:	e8 64 ea ff ff       	call   c000213c <sum_sfn>
c00036d8:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036dc:	75 04                	jne    c00036e2 <dir_read+0xde>
c00036de:	31 f6                	xor    esi,esi
c00036e0:	eb 35                	jmp    c0003717 <dir_read+0x113>
c00036e2:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00036e9:	eb 2c                	jmp    c0003717 <dir_read+0x113>
c00036eb:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036f0:	31 d2                	xor    edx,edx
c00036f2:	89 d8                	mov    eax,ebx
c00036f4:	e8 a5 fd ff ff       	call   c000349e <dir_next>
c00036f9:	89 c6                	mov    esi,eax
c00036fb:	85 c0                	test   eax,eax
c00036fd:	0f 84 1f ff ff ff    	je     c0003622 <dir_read+0x1e>
c0003703:	eb 0b                	jmp    c0003710 <dir_read+0x10c>
c0003705:	85 f6                	test   esi,esi
c0003707:	74 d5                	je     c00036de <dir_read+0xda>
c0003709:	eb 05                	jmp    c0003710 <dir_read+0x10c>
c000370b:	be 04 00 00 00       	mov    esi,0x4
c0003710:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003717:	83 c4 1c             	add    esp,0x1c
c000371a:	89 f0                	mov    eax,esi
c000371c:	5b                   	pop    ebx
c000371d:	5e                   	pop    esi
c000371e:	5f                   	pop    edi
c000371f:	5d                   	pop    ebp
c0003720:	c3                   	ret    

c0003721 <dir_remove>:
c0003721:	57                   	push   edi
c0003722:	56                   	push   esi
c0003723:	53                   	push   ebx
c0003724:	89 c3                	mov    ebx,eax
c0003726:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003729:	8b 30                	mov    esi,DWORD PTR [eax]
c000372b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000372e:	83 fa ff             	cmp    edx,0xffffffff
c0003731:	74 09                	je     c000373c <dir_remove+0x1b>
c0003733:	e8 db fa ff ff       	call   c0003213 <dir_sdi>
c0003738:	85 c0                	test   eax,eax
c000373a:	75 34                	jne    c0003770 <dir_remove+0x4f>
c000373c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000373f:	89 f0                	mov    eax,esi
c0003741:	e8 ff ea ff ff       	call   c0002245 <move_window>
c0003746:	85 c0                	test   eax,eax
c0003748:	75 1c                	jne    c0003766 <dir_remove+0x45>
c000374a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000374d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003750:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003754:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003757:	73 17                	jae    c0003770 <dir_remove+0x4f>
c0003759:	31 d2                	xor    edx,edx
c000375b:	89 d8                	mov    eax,ebx
c000375d:	e8 3c fd ff ff       	call   c000349e <dir_next>
c0003762:	85 c0                	test   eax,eax
c0003764:	74 d6                	je     c000373c <dir_remove+0x1b>
c0003766:	83 f8 04             	cmp    eax,0x4
c0003769:	75 05                	jne    c0003770 <dir_remove+0x4f>
c000376b:	b8 02 00 00 00       	mov    eax,0x2
c0003770:	5b                   	pop    ebx
c0003771:	5e                   	pop    esi
c0003772:	5f                   	pop    edi
c0003773:	c3                   	ret    

c0003774 <dir_find>:
c0003774:	55                   	push   ebp
c0003775:	31 d2                	xor    edx,edx
c0003777:	57                   	push   edi
c0003778:	56                   	push   esi
c0003779:	53                   	push   ebx
c000377a:	89 c3                	mov    ebx,eax
c000377c:	83 ec 1c             	sub    esp,0x1c
c000377f:	8b 00                	mov    eax,DWORD PTR [eax]
c0003781:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003785:	89 d8                	mov    eax,ebx
c0003787:	e8 87 fa ff ff       	call   c0003213 <dir_sdi>
c000378c:	89 c6                	mov    esi,eax
c000378e:	85 c0                	test   eax,eax
c0003790:	0f 85 02 01 00 00    	jne    c0003898 <dir_find+0x124>
c0003796:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c000379d:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00037a2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037a7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037ae:	e8 92 ea ff ff       	call   c0002245 <move_window>
c00037b3:	89 c6                	mov    esi,eax
c00037b5:	85 c0                	test   eax,eax
c00037b7:	0f 85 db 00 00 00    	jne    c0003898 <dir_find+0x124>
c00037bd:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037c0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037c3:	84 c9                	test   cl,cl
c00037c5:	0f 84 c8 00 00 00    	je     c0003893 <dir_find+0x11f>
c00037cb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037ce:	88 d0                	mov    al,dl
c00037d0:	83 e0 3f             	and    eax,0x3f
c00037d3:	80 f9 e5             	cmp    cl,0xe5
c00037d6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037d9:	0f 84 93 00 00 00    	je     c0003872 <dir_find+0xfe>
c00037df:	80 e2 08             	and    dl,0x8
c00037e2:	74 0a                	je     c00037ee <dir_find+0x7a>
c00037e4:	3c 0f                	cmp    al,0xf
c00037e6:	0f 85 86 00 00 00    	jne    c0003872 <dir_find+0xfe>
c00037ec:	eb 04                	jmp    c00037f2 <dir_find+0x7e>
c00037ee:	3c 0f                	cmp    al,0xf
c00037f0:	75 54                	jne    c0003846 <dir_find+0xd2>
c00037f2:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c00037f6:	0f 85 82 00 00 00    	jne    c000387e <dir_find+0x10a>
c00037fc:	f6 c1 40             	test   cl,0x40
c00037ff:	74 12                	je     c0003813 <dir_find+0x9f>
c0003801:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003804:	83 e1 bf             	and    ecx,0xffffffbf
c0003807:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000380b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000380e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003811:	eb 06                	jmp    c0003819 <dir_find+0xa5>
c0003813:	89 f8                	mov    eax,edi
c0003815:	38 c8                	cmp    al,cl
c0003817:	75 60                	jne    c0003879 <dir_find+0x105>
c0003819:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000381d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003822:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003825:	75 57                	jne    c000387e <dir_find+0x10a>
c0003827:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000382b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000382f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003832:	89 ea                	mov    edx,ebp
c0003834:	e8 89 f3 ff ff       	call   c0002bc2 <cmp_lfn>
c0003839:	85 c0                	test   eax,eax
c000383b:	74 41                	je     c000387e <dir_find+0x10a>
c000383d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003841:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003844:	eb 38                	jmp    c000387e <dir_find+0x10a>
c0003846:	89 f8                	mov    eax,edi
c0003848:	84 c0                	test   al,al
c000384a:	75 0d                	jne    c0003859 <dir_find+0xe5>
c000384c:	89 e8                	mov    eax,ebp
c000384e:	e8 e9 e8 ff ff       	call   c000213c <sum_sfn>
c0003853:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003857:	74 3f                	je     c0003898 <dir_find+0x124>
c0003859:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000385d:	75 13                	jne    c0003872 <dir_find+0xfe>
c000385f:	8d 53 20             	lea    edx,[ebx+0x20]
c0003862:	b9 0b 00 00 00       	mov    ecx,0xb
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 fd e4 ff ff       	call   c0001d6b <mem_cmp>
c000386e:	85 c0                	test   eax,eax
c0003870:	74 26                	je     c0003898 <dir_find+0x124>
c0003872:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003879:	bf ff ff ff ff       	mov    edi,0xffffffff
c000387e:	31 d2                	xor    edx,edx
c0003880:	89 d8                	mov    eax,ebx
c0003882:	e8 17 fc ff ff       	call   c000349e <dir_next>
c0003887:	89 c6                	mov    esi,eax
c0003889:	85 c0                	test   eax,eax
c000388b:	0f 84 16 ff ff ff    	je     c00037a7 <dir_find+0x33>
c0003891:	eb 05                	jmp    c0003898 <dir_find+0x124>
c0003893:	be 04 00 00 00       	mov    esi,0x4
c0003898:	83 c4 1c             	add    esp,0x1c
c000389b:	89 f0                	mov    eax,esi
c000389d:	5b                   	pop    ebx
c000389e:	5e                   	pop    esi
c000389f:	5f                   	pop    edi
c00038a0:	5d                   	pop    ebp
c00038a1:	c3                   	ret    

c00038a2 <follow_path>:
c00038a2:	56                   	push   esi
c00038a3:	53                   	push   ebx
c00038a4:	89 c3                	mov    ebx,eax
c00038a6:	83 ec 14             	sub    esp,0x14
c00038a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038ad:	8b 30                	mov    esi,DWORD PTR [eax]
c00038af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038b3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038b5:	80 fa 5c             	cmp    dl,0x5c
c00038b8:	75 07                	jne    c00038c1 <follow_path+0x1f>
c00038ba:	40                   	inc    eax
c00038bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038bf:	eb ee                	jmp    c00038af <follow_path+0xd>
c00038c1:	80 fa 2f             	cmp    dl,0x2f
c00038c4:	74 f4                	je     c00038ba <follow_path+0x18>
c00038c6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038cd:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038d0:	77 3e                	ja     c0003910 <follow_path+0x6e>
c00038d2:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038d6:	31 d2                	xor    edx,edx
c00038d8:	89 d8                	mov    eax,ebx
c00038da:	e8 34 f9 ff ff       	call   c0003213 <dir_sdi>
c00038df:	eb 4f                	jmp    c0003930 <follow_path+0x8e>
c00038e1:	89 d8                	mov    eax,ebx
c00038e3:	e8 8c fe ff ff       	call   c0003774 <dir_find>
c00038e8:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c00038eb:	85 c0                	test   eax,eax
c00038ed:	75 32                	jne    c0003921 <follow_path+0x7f>
c00038ef:	80 e2 04             	and    dl,0x4
c00038f2:	75 3c                	jne    c0003930 <follow_path+0x8e>
c00038f4:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00038f8:	74 31                	je     c000392b <follow_path+0x89>
c00038fa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00038fd:	25 ff 01 00 00       	and    eax,0x1ff
c0003902:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003906:	8a 06                	mov    al,BYTE PTR [esi]
c0003908:	e8 b3 f7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000390d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003910:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003914:	89 d8                	mov    eax,ebx
c0003916:	e8 cb ef ff ff       	call   c00028e6 <create_name>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c2                	je     c00038e1 <follow_path+0x3f>
c000391f:	eb 0f                	jmp    c0003930 <follow_path+0x8e>
c0003921:	83 f8 04             	cmp    eax,0x4
c0003924:	75 0a                	jne    c0003930 <follow_path+0x8e>
c0003926:	80 e2 04             	and    dl,0x4
c0003929:	75 05                	jne    c0003930 <follow_path+0x8e>
c000392b:	b8 05 00 00 00       	mov    eax,0x5
c0003930:	83 c4 14             	add    esp,0x14
c0003933:	5b                   	pop    ebx
c0003934:	5e                   	pop    esi
c0003935:	c3                   	ret    

c0003936 <dir_register>:
c0003936:	55                   	push   ebp
c0003937:	57                   	push   edi
c0003938:	56                   	push   esi
c0003939:	be 06 00 00 00       	mov    esi,0x6
c000393e:	53                   	push   ebx
c000393f:	83 ec 2c             	sub    esp,0x2c
c0003942:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003946:	0f 85 65 01 00 00    	jne    c0003ab1 <dir_register+0x17b>
c000394c:	8b 38                	mov    edi,DWORD PTR [eax]
c000394e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003956:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003959:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000395d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003962:	74 06                	je     c000396a <dir_register+0x34>
c0003964:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003968:	eb ef                	jmp    c0003959 <dir_register+0x23>
c000396a:	89 c3                	mov    ebx,eax
c000396c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003971:	8d 40 20             	lea    eax,[eax+0x20]
c0003974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003978:	89 c2                	mov    edx,eax
c000397a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000397e:	e8 c8 e3 ff ff       	call   c0001d4b <mem_cpy>
c0003983:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003988:	74 48                	je     c00039d2 <dir_register+0x9c>
c000398a:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c000398e:	bd 01 00 00 00       	mov    ebp,0x1
c0003993:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003996:	55                   	push   ebp
c0003997:	8d 54 24 18          	lea    edx,[esp+0x18]
c000399b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000399f:	e8 dc e6 ff ff       	call   c0002080 <gen_numname>
c00039a4:	58                   	pop    eax
c00039a5:	89 d8                	mov    eax,ebx
c00039a7:	e8 c8 fd ff ff       	call   c0003774 <dir_find>
c00039ac:	89 c6                	mov    esi,eax
c00039ae:	85 c0                	test   eax,eax
c00039b0:	75 10                	jne    c00039c2 <dir_register+0x8c>
c00039b2:	45                   	inc    ebp
c00039b3:	83 fd 64             	cmp    ebp,0x64
c00039b6:	75 db                	jne    c0003993 <dir_register+0x5d>
c00039b8:	be 07 00 00 00       	mov    esi,0x7
c00039bd:	e9 ef 00 00 00       	jmp    c0003ab1 <dir_register+0x17b>
c00039c2:	83 f8 04             	cmp    eax,0x4
c00039c5:	0f 85 e6 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c00039cb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039cf:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039d2:	bd 01 00 00 00       	mov    ebp,0x1
c00039d7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039dc:	74 13                	je     c00039f1 <dir_register+0xbb>
c00039de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039e2:	b9 0d 00 00 00       	mov    ecx,0xd
c00039e7:	83 c0 0c             	add    eax,0xc
c00039ea:	31 d2                	xor    edx,edx
c00039ec:	f7 f1                	div    ecx
c00039ee:	8d 68 01             	lea    ebp,[eax+0x1]
c00039f1:	89 ea                	mov    edx,ebp
c00039f3:	89 d8                	mov    eax,ebx
c00039f5:	e8 a9 fb ff ff       	call   c00035a3 <dir_alloc>
c00039fa:	89 c6                	mov    esi,eax
c00039fc:	85 c0                	test   eax,eax
c00039fe:	0f 85 ad 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a04:	4d                   	dec    ebp
c0003a05:	74 6a                	je     c0003a71 <dir_register+0x13b>
c0003a07:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003a0a:	89 e8                	mov    eax,ebp
c0003a0c:	c1 e0 05             	shl    eax,0x5
c0003a0f:	29 c2                	sub    edx,eax
c0003a11:	89 d8                	mov    eax,ebx
c0003a13:	e8 fb f7 ff ff       	call   c0003213 <dir_sdi>
c0003a18:	89 c6                	mov    esi,eax
c0003a1a:	85 c0                	test   eax,eax
c0003a1c:	0f 85 8f 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a26:	e8 11 e7 ff ff       	call   c000213c <sum_sfn>
c0003a2b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a2f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a32:	89 f8                	mov    eax,edi
c0003a34:	e8 0c e8 ff ff       	call   c0002245 <move_window>
c0003a39:	89 c6                	mov    esi,eax
c0003a3b:	85 c0                	test   eax,eax
c0003a3d:	75 72                	jne    c0003ab1 <dir_register+0x17b>
c0003a3f:	83 ec 0c             	sub    esp,0xc
c0003a42:	89 e8                	mov    eax,ebp
c0003a44:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a49:	0f b6 c8             	movzx  ecx,al
c0003a4c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a4f:	52                   	push   edx
c0003a50:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a53:	e8 a4 e5 ff ff       	call   c0001ffc <put_lfn>
c0003a58:	31 d2                	xor    edx,edx
c0003a5a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a5e:	89 d8                	mov    eax,ebx
c0003a60:	e8 39 fa ff ff       	call   c000349e <dir_next>
c0003a65:	83 c4 10             	add    esp,0x10
c0003a68:	89 c6                	mov    esi,eax
c0003a6a:	85 c0                	test   eax,eax
c0003a6c:	75 43                	jne    c0003ab1 <dir_register+0x17b>
c0003a6e:	4d                   	dec    ebp
c0003a6f:	75 be                	jne    c0003a2f <dir_register+0xf9>
c0003a71:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a74:	89 f8                	mov    eax,edi
c0003a76:	e8 ca e7 ff ff       	call   c0002245 <move_window>
c0003a7b:	89 c6                	mov    esi,eax
c0003a7d:	85 c0                	test   eax,eax
c0003a7f:	75 30                	jne    c0003ab1 <dir_register+0x17b>
c0003a81:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a84:	b9 20 00 00 00       	mov    ecx,0x20
c0003a89:	31 d2                	xor    edx,edx
c0003a8b:	e8 d0 e2 ff ff       	call   c0001d60 <mem_set>
c0003a90:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a93:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003a97:	b9 0b 00 00 00       	mov    ecx,0xb
c0003a9c:	e8 aa e2 ff ff       	call   c0001d4b <mem_cpy>
c0003aa1:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003aa4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003aa7:	83 e0 18             	and    eax,0x18
c0003aaa:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003aad:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ab1:	83 c4 2c             	add    esp,0x2c
c0003ab4:	89 f0                	mov    eax,esi
c0003ab6:	5b                   	pop    ebx
c0003ab7:	5e                   	pop    esi
c0003ab8:	5f                   	pop    edi
c0003ab9:	5d                   	pop    ebp
c0003aba:	c3                   	ret    

c0003abb <f_mount>:
c0003abb:	53                   	push   ebx
c0003abc:	83 ec 18             	sub    esp,0x18
c0003abf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ac3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ac7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003acb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003acf:	e8 7a e6 ff ff       	call   c000214e <get_ldnumber>
c0003ad4:	89 c2                	mov    edx,eax
c0003ad6:	b8 0b 00 00 00       	mov    eax,0xb
c0003adb:	85 d2                	test   edx,edx
c0003add:	78 39                	js     c0003b18 <f_mount+0x5d>
c0003adf:	8b 04 95 a0 14 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdeb60]
c0003ae6:	85 c0                	test   eax,eax
c0003ae8:	74 03                	je     c0003aed <f_mount+0x32>
c0003aea:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003aed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003af1:	85 c0                	test   eax,eax
c0003af3:	74 03                	je     c0003af8 <f_mount+0x3d>
c0003af5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003af8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003afc:	89 04 95 a0 14 02 c0 	mov    DWORD PTR [edx*4-0x3ffdeb60],eax
c0003b03:	31 c0                	xor    eax,eax
c0003b05:	84 db                	test   bl,bl
c0003b07:	74 0f                	je     c0003b18 <f_mount+0x5d>
c0003b09:	31 c9                	xor    ecx,ecx
c0003b0b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003b0f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b13:	e8 80 e8 ff ff       	call   c0002398 <mount_volume>
c0003b18:	83 c4 18             	add    esp,0x18
c0003b1b:	5b                   	pop    ebx
c0003b1c:	c3                   	ret    

c0003b1d <f_open>:
c0003b1d:	55                   	push   ebp
c0003b1e:	b8 09 00 00 00       	mov    eax,0x9
c0003b23:	57                   	push   edi
c0003b24:	56                   	push   esi
c0003b25:	53                   	push   ebx
c0003b26:	83 ec 5c             	sub    esp,0x5c
c0003b29:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b2d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b31:	85 db                	test   ebx,ebx
c0003b33:	0f 84 a7 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b39:	89 fe                	mov    esi,edi
c0003b3b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b3f:	83 e6 3f             	and    esi,0x3f
c0003b42:	89 f0                	mov    eax,esi
c0003b44:	0f b6 c8             	movzx  ecx,al
c0003b47:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b4b:	e8 48 e8 ff ff       	call   c0002398 <mount_volume>
c0003b50:	85 c0                	test   eax,eax
c0003b52:	0f 85 82 02 00 00    	jne    c0003dda <f_open+0x2bd>
c0003b58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b5c:	83 ec 0c             	sub    esp,0xc
c0003b5f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b63:	68 00 02 00 00       	push   0x200
c0003b68:	e8 ff 1e 00 00       	call   c0005a6c <ff_memalloc>
c0003b6d:	83 c4 10             	add    esp,0x10
c0003b70:	89 c5                	mov    ebp,eax
c0003b72:	b8 11 00 00 00       	mov    eax,0x11
c0003b77:	85 ed                	test   ebp,ebp
c0003b79:	0f 84 61 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b83:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003b87:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003b8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003b8e:	e8 0f fd ff ff       	call   c00038a2 <follow_path>
c0003b93:	85 c0                	test   eax,eax
c0003b95:	75 0c                	jne    c0003ba3 <f_open+0x86>
c0003b97:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003b9c:	79 05                	jns    c0003ba3 <f_open+0x86>
c0003b9e:	b8 06 00 00 00       	mov    eax,0x6
c0003ba3:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003ba9:	0f 84 de 00 00 00    	je     c0003c8d <f_open+0x170>
c0003baf:	85 c0                	test   eax,eax
c0003bb1:	74 1e                	je     c0003bd1 <f_open+0xb4>
c0003bb3:	83 f8 04             	cmp    eax,0x4
c0003bb6:	0f 85 06 02 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bbc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bc0:	83 ce 08             	or     esi,0x8
c0003bc3:	e8 6e fd ff ff       	call   c0003936 <dir_register>
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	74 2f                	je     c0003bfb <f_open+0xde>
c0003bcc:	e9 f1 01 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003bd1:	b8 07 00 00 00       	mov    eax,0x7
c0003bd6:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bdb:	0f 85 e1 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003be1:	b8 08 00 00 00       	mov    eax,0x8
c0003be6:	f7 c7 04 00 00 00    	test   edi,0x4
c0003bec:	0f 85 d0 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bf2:	83 e7 08             	and    edi,0x8
c0003bf5:	0f 84 bf 00 00 00    	je     c0003cba <f_open+0x19d>
c0003bfb:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003bff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c03:	89 ca                	mov    edx,ecx
c0003c05:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003c09:	8a 00                	mov    al,BYTE PTR [eax]
c0003c0b:	e8 b0 f4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003c10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c14:	89 c7                	mov    edi,eax
c0003c16:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c1b:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c1e:	e8 25 e1 ff ff       	call   c0001d48 <st_dword>
c0003c23:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c27:	31 c9                	xor    ecx,ecx
c0003c29:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c35:	e8 af f4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0003c3a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c3e:	31 d2                	xor    edx,edx
c0003c40:	83 c0 1c             	add    eax,0x1c
c0003c43:	e8 00 e1 ff ff       	call   c0001d48 <st_dword>
c0003c48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c4c:	85 ff                	test   edi,edi
c0003c4e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c52:	74 66                	je     c0003cba <f_open+0x19d>
c0003c54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c58:	31 c9                	xor    ecx,ecx
c0003c5a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c5d:	89 fa                	mov    edx,edi
c0003c5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c63:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c67:	e8 a9 f7 ff ff       	call   c0003415 <remove_chain>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	0f 85 4e 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c78:	4f                   	dec    edi
c0003c79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c7d:	e8 c3 e5 ff ff       	call   c0002245 <move_window>
c0003c82:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003c86:	85 c0                	test   eax,eax
c0003c88:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003c8b:	eb 27                	jmp    c0003cb4 <f_open+0x197>
c0003c8d:	85 c0                	test   eax,eax
c0003c8f:	0f 85 2d 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c95:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003c99:	b8 04 00 00 00       	mov    eax,0x4
c0003c9e:	f6 c2 10             	test   dl,0x10
c0003ca1:	0f 85 1b 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003ca7:	83 e7 02             	and    edi,0x2
c0003caa:	74 0e                	je     c0003cba <f_open+0x19d>
c0003cac:	b8 07 00 00 00       	mov    eax,0x7
c0003cb1:	80 e2 01             	and    dl,0x1
c0003cb4:	0f 85 08 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003cba:	f7 c6 08 00 00 00    	test   esi,0x8
c0003cc0:	74 03                	je     c0003cc5 <f_open+0x1a8>
c0003cc2:	83 ce 40             	or     esi,0x40
c0003cc5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003cc9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ccd:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cd0:	89 fa                	mov    edx,edi
c0003cd2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cd6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003cd9:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003cdc:	8a 01                	mov    al,BYTE PTR [ecx]
c0003cde:	e8 dd f3 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003ce3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003ce6:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003ce9:	e8 3e e0 ff ff       	call   c0001d2c <ld_dword>
c0003cee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cf2:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003cf5:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003cf7:	31 d2                	xor    edx,edx
c0003cf9:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003cfd:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003d01:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003d05:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003d0c:	89 f0                	mov    eax,esi
c0003d0e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d15:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d18:	b9 00 02 00 00       	mov    ecx,0x200
c0003d1d:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d24:	e8 37 e0 ff ff       	call   c0001d60 <mem_set>
c0003d29:	83 e6 20             	and    esi,0x20
c0003d2c:	75 07                	jne    c0003d35 <f_open+0x218>
c0003d2e:	31 c0                	xor    eax,eax
c0003d30:	e9 8d 00 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003d35:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d38:	85 ff                	test   edi,edi
c0003d3a:	74 f2                	je     c0003d2e <f_open+0x211>
c0003d3c:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d43:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d46:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d4a:	c1 e6 09             	shl    esi,0x9
c0003d4d:	39 fe                	cmp    esi,edi
c0003d4f:	73 1c                	jae    c0003d6d <f_open+0x250>
c0003d51:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d53:	29 f7                	sub    edi,esi
c0003d55:	e8 b7 f3 ff ff       	call   c0003111 <get_fat.isra.2>
c0003d5a:	89 c2                	mov    edx,eax
c0003d5c:	83 f8 01             	cmp    eax,0x1
c0003d5f:	76 10                	jbe    c0003d71 <f_open+0x254>
c0003d61:	83 f8 ff             	cmp    eax,0xffffffff
c0003d64:	75 e7                	jne    c0003d4d <f_open+0x230>
c0003d66:	b8 01 00 00 00       	mov    eax,0x1
c0003d6b:	eb 09                	jmp    c0003d76 <f_open+0x259>
c0003d6d:	31 c0                	xor    eax,eax
c0003d6f:	eb 05                	jmp    c0003d76 <f_open+0x259>
c0003d71:	b8 02 00 00 00       	mov    eax,0x2
c0003d76:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d79:	85 c0                	test   eax,eax
c0003d7b:	75 45                	jne    c0003dc2 <f_open+0x2a5>
c0003d7d:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003d83:	74 a9                	je     c0003d2e <f_open+0x211>
c0003d85:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003d89:	89 f0                	mov    eax,esi
c0003d8b:	e8 d5 e1 ff ff       	call   c0001f65 <clst2sect>
c0003d90:	89 c2                	mov    edx,eax
c0003d92:	b8 02 00 00 00       	mov    eax,0x2
c0003d97:	85 d2                	test   edx,edx
c0003d99:	74 27                	je     c0003dc2 <f_open+0x2a5>
c0003d9b:	89 f9                	mov    ecx,edi
c0003d9d:	c1 e9 09             	shr    ecx,0x9
c0003da0:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003da3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003da6:	6a 01                	push   0x1
c0003da8:	50                   	push   eax
c0003da9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003dad:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003db1:	50                   	push   eax
c0003db2:	e8 1d df ff ff       	call   c0001cd4 <disk_read>
c0003db7:	83 c4 10             	add    esp,0x10
c0003dba:	85 c0                	test   eax,eax
c0003dbc:	0f 95 c0             	setne  al
c0003dbf:	0f b6 c0             	movzx  eax,al
c0003dc2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003dc6:	83 ec 0c             	sub    esp,0xc
c0003dc9:	55                   	push   ebp
c0003dca:	e8 b5 1c 00 00       	call   c0005a84 <ff_memfree>
c0003dcf:	83 c4 10             	add    esp,0x10
c0003dd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 06                	je     c0003de0 <f_open+0x2c3>
c0003dda:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003de0:	83 c4 5c             	add    esp,0x5c
c0003de3:	5b                   	pop    ebx
c0003de4:	5e                   	pop    esi
c0003de5:	5f                   	pop    edi
c0003de6:	5d                   	pop    ebp
c0003de7:	c3                   	ret    

c0003de8 <f_read>:
c0003de8:	55                   	push   ebp
c0003de9:	57                   	push   edi
c0003dea:	56                   	push   esi
c0003deb:	53                   	push   ebx
c0003dec:	83 ec 2c             	sub    esp,0x2c
c0003def:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003df3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003df7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003dfd:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003e01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e05:	89 d8                	mov    eax,ebx
c0003e07:	e8 8f e3 ff ff       	call   c000219b <validate>
c0003e0c:	89 c5                	mov    ebp,eax
c0003e0e:	85 c0                	test   eax,eax
c0003e10:	0f 85 c7 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e16:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e1a:	85 ed                	test   ebp,ebp
c0003e1c:	0f 85 bb 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e22:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e26:	0f 84 ac 01 00 00    	je     c0003fd8 <f_read+0x1f0>
c0003e2c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e2f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e32:	89 c7                	mov    edi,eax
c0003e34:	39 f0                	cmp    eax,esi
c0003e36:	0f 86 ad 00 00 00    	jbe    c0003ee9 <f_read+0x101>
c0003e3c:	89 f7                	mov    edi,esi
c0003e3e:	e9 a6 00 00 00       	jmp    c0003ee9 <f_read+0x101>
c0003e43:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e46:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e4c:	0f 85 5b 01 00 00    	jne    c0003fad <f_read+0x1c5>
c0003e52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e56:	89 d1                	mov    ecx,edx
c0003e58:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e5c:	c1 e9 09             	shr    ecx,0x9
c0003e5f:	48                   	dec    eax
c0003e60:	21 c8                	and    eax,ecx
c0003e62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e66:	0f 84 8a 00 00 00    	je     c0003ef6 <f_read+0x10e>
c0003e6c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e73:	89 c8                	mov    eax,ecx
c0003e75:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e79:	e8 e7 e0 ff ff       	call   c0001f65 <clst2sect>
c0003e7e:	85 c0                	test   eax,eax
c0003e80:	0f 84 88 00 00 00    	je     c0003f0e <f_read+0x126>
c0003e86:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003e8a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003e8e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003e92:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003e98:	0f 86 bd 00 00 00    	jbe    c0003f5b <f_read+0x173>
c0003e9e:	89 fe                	mov    esi,edi
c0003ea0:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003ea4:	c1 ee 09             	shr    esi,0x9
c0003ea7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003eab:	01 f2                	add    edx,esi
c0003ead:	39 c2                	cmp    edx,eax
c0003eaf:	76 06                	jbe    c0003eb7 <f_read+0xcf>
c0003eb1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003eb5:	89 c6                	mov    esi,eax
c0003eb7:	56                   	push   esi
c0003eb8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003ebc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ec0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ec4:	50                   	push   eax
c0003ec5:	e8 0a de ff ff       	call   c0001cd4 <disk_read>
c0003eca:	83 c4 10             	add    esp,0x10
c0003ecd:	85 c0                	test   eax,eax
c0003ecf:	75 50                	jne    c0003f21 <f_read+0x139>
c0003ed1:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ed5:	78 60                	js     c0003f37 <f_read+0x14f>
c0003ed7:	c1 e6 09             	shl    esi,0x9
c0003eda:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ede:	29 f7                	sub    edi,esi
c0003ee0:	01 30                	add    DWORD PTR [eax],esi
c0003ee2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003ee6:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003ee9:	85 ff                	test   edi,edi
c0003eeb:	0f 85 52 ff ff ff    	jne    c0003e43 <f_read+0x5b>
c0003ef1:	e9 e7 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003ef6:	85 d2                	test   edx,edx
c0003ef8:	75 05                	jne    c0003eff <f_read+0x117>
c0003efa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003efd:	eb 0a                	jmp    c0003f09 <f_read+0x121>
c0003eff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f02:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f04:	e8 08 f2 ff ff       	call   c0003111 <get_fat.isra.2>
c0003f09:	83 f8 01             	cmp    eax,0x1
c0003f0c:	77 0e                	ja     c0003f1c <f_read+0x134>
c0003f0e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f12:	bd 02 00 00 00       	mov    ebp,0x2
c0003f17:	e9 c1 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f1c:	83 f8 ff             	cmp    eax,0xffffffff
c0003f1f:	75 0e                	jne    c0003f2f <f_read+0x147>
c0003f21:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f25:	bd 01 00 00 00       	mov    ebp,0x1
c0003f2a:	e9 ae 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f2f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f32:	e9 35 ff ff ff       	jmp    c0003e6c <f_read+0x84>
c0003f37:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f3a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f3e:	39 f0                	cmp    eax,esi
c0003f40:	73 95                	jae    c0003ed7 <f_read+0xef>
c0003f42:	c1 e0 09             	shl    eax,0x9
c0003f45:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f48:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f4c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f51:	e8 f5 dd ff ff       	call   c0001d4b <mem_cpy>
c0003f56:	e9 7c ff ff ff       	jmp    c0003ed7 <f_read+0xef>
c0003f5b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f5e:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f62:	74 42                	je     c0003fa6 <f_read+0x1be>
c0003f64:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f67:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f6b:	79 19                	jns    c0003f86 <f_read+0x19e>
c0003f6d:	6a 01                	push   0x1
c0003f6f:	50                   	push   eax
c0003f70:	56                   	push   esi
c0003f71:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f75:	50                   	push   eax
c0003f76:	e8 6f dd ff ff       	call   c0001cea <disk_write>
c0003f7b:	83 c4 10             	add    esp,0x10
c0003f7e:	85 c0                	test   eax,eax
c0003f80:	75 9f                	jne    c0003f21 <f_read+0x139>
c0003f82:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003f86:	6a 01                	push   0x1
c0003f88:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003f8c:	56                   	push   esi
c0003f8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003f91:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003f95:	50                   	push   eax
c0003f96:	e8 39 dd ff ff       	call   c0001cd4 <disk_read>
c0003f9b:	83 c4 10             	add    esp,0x10
c0003f9e:	85 c0                	test   eax,eax
c0003fa0:	0f 85 7b ff ff ff    	jne    c0003f21 <f_read+0x139>
c0003fa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003faa:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003fad:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fb0:	ba 00 02 00 00       	mov    edx,0x200
c0003fb5:	25 ff 01 00 00       	and    eax,0x1ff
c0003fba:	89 fe                	mov    esi,edi
c0003fbc:	29 c2                	sub    edx,eax
c0003fbe:	39 d7                	cmp    edi,edx
c0003fc0:	76 02                	jbe    c0003fc4 <f_read+0x1dc>
c0003fc2:	89 d6                	mov    esi,edx
c0003fc4:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fc8:	89 f1                	mov    ecx,esi
c0003fca:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fce:	e8 78 dd ff ff       	call   c0001d4b <mem_cpy>
c0003fd3:	e9 02 ff ff ff       	jmp    c0003eda <f_read+0xf2>
c0003fd8:	bd 07 00 00 00       	mov    ebp,0x7
c0003fdd:	83 c4 2c             	add    esp,0x2c
c0003fe0:	89 e8                	mov    eax,ebp
c0003fe2:	5b                   	pop    ebx
c0003fe3:	5e                   	pop    esi
c0003fe4:	5f                   	pop    edi
c0003fe5:	5d                   	pop    ebp
c0003fe6:	c3                   	ret    

c0003fe7 <f_write>:
c0003fe7:	55                   	push   ebp
c0003fe8:	57                   	push   edi
c0003fe9:	56                   	push   esi
c0003fea:	53                   	push   ebx
c0003feb:	83 ec 2c             	sub    esp,0x2c
c0003fee:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ff2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003ff6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004000:	89 d8                	mov    eax,ebx
c0004002:	e8 94 e1 ff ff       	call   c000219b <validate>
c0004007:	89 c5                	mov    ebp,eax
c0004009:	85 c0                	test   eax,eax
c000400b:	0f 85 00 02 00 00    	jne    c0004211 <f_write+0x22a>
c0004011:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004015:	85 ed                	test   ebp,ebp
c0004017:	0f 85 f4 01 00 00    	jne    c0004211 <f_write+0x22a>
c000401d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004021:	0f 84 e5 01 00 00    	je     c000420c <f_write+0x225>
c0004027:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000402a:	89 c7                	mov    edi,eax
c000402c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004030:	0f 83 ea 00 00 00    	jae    c0004120 <f_write+0x139>
c0004036:	f7 d0                	not    eax
c0004038:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000403c:	e9 df 00 00 00       	jmp    c0004120 <f_write+0x139>
c0004041:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004044:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000404a:	0f 85 8b 01 00 00    	jne    c00041db <f_write+0x1f4>
c0004050:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004054:	89 d1                	mov    ecx,edx
c0004056:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000405a:	c1 e9 09             	shr    ecx,0x9
c000405d:	48                   	dec    eax
c000405e:	21 c8                	and    eax,ecx
c0004060:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004064:	0f 84 c3 00 00 00    	je     c000412d <f_write+0x146>
c000406a:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000406e:	0f 88 18 01 00 00    	js     c000418c <f_write+0x1a5>
c0004074:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004078:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000407b:	89 c8                	mov    eax,ecx
c000407d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004081:	e8 df de ff ff       	call   c0001f65 <clst2sect>
c0004086:	85 c0                	test   eax,eax
c0004088:	0f 84 c8 00 00 00    	je     c0004156 <f_write+0x16f>
c000408e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0004092:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004096:	01 c7                	add    edi,eax
c0004098:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00040a0:	0f 86 0d 01 00 00    	jbe    c00041b3 <f_write+0x1cc>
c00040a6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00040aa:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00040ae:	c1 ee 09             	shr    esi,0x9
c00040b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040b5:	01 f2                	add    edx,esi
c00040b7:	39 c2                	cmp    edx,eax
c00040b9:	76 06                	jbe    c00040c1 <f_write+0xda>
c00040bb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040bf:	89 c6                	mov    esi,eax
c00040c1:	56                   	push   esi
c00040c2:	57                   	push   edi
c00040c3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040cb:	50                   	push   eax
c00040cc:	e8 19 dc ff ff       	call   c0001cea <disk_write>
c00040d1:	83 c4 10             	add    esp,0x10
c00040d4:	85 c0                	test   eax,eax
c00040d6:	0f 85 8d 00 00 00    	jne    c0004169 <f_write+0x182>
c00040dc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040df:	29 fa                	sub    edx,edi
c00040e1:	39 f2                	cmp    edx,esi
c00040e3:	73 18                	jae    c00040fd <f_write+0x116>
c00040e5:	c1 e2 09             	shl    edx,0x9
c00040e8:	8d 43 28             	lea    eax,[ebx+0x28]
c00040eb:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c00040ef:	b9 00 02 00 00       	mov    ecx,0x200
c00040f4:	e8 52 dc ff ff       	call   c0001d4b <mem_cpy>
c00040f9:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00040fd:	c1 e6 09             	shl    esi,0x9
c0004100:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004104:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004108:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000410c:	01 30                	add    DWORD PTR [eax],esi
c000410e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004111:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004114:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004117:	39 f0                	cmp    eax,esi
c0004119:	73 02                	jae    c000411d <f_write+0x136>
c000411b:	89 f0                	mov    eax,esi
c000411d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004120:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004125:	0f 85 16 ff ff ff    	jne    c0004041 <f_write+0x5a>
c000412b:	eb 1b                	jmp    c0004148 <f_write+0x161>
c000412d:	85 d2                	test   edx,edx
c000412f:	75 09                	jne    c000413a <f_write+0x153>
c0004131:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004134:	85 c0                	test   eax,eax
c0004136:	75 19                	jne    c0004151 <f_write+0x16a>
c0004138:	eb 03                	jmp    c000413d <f_write+0x156>
c000413a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000413d:	89 d8                	mov    eax,ebx
c000413f:	e8 97 f1 ff ff       	call   c00032db <create_chain>
c0004144:	85 c0                	test   eax,eax
c0004146:	75 09                	jne    c0004151 <f_write+0x16a>
c0004148:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000414c:	e9 c0 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004151:	83 f8 01             	cmp    eax,0x1
c0004154:	75 0e                	jne    c0004164 <f_write+0x17d>
c0004156:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000415a:	bd 02 00 00 00       	mov    ebp,0x2
c000415f:	e9 ad 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004164:	83 f8 ff             	cmp    eax,0xffffffff
c0004167:	75 0e                	jne    c0004177 <f_write+0x190>
c0004169:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000416d:	bd 01 00 00 00       	mov    ebp,0x1
c0004172:	e9 9a 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004177:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000417a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000417e:	0f 85 e6 fe ff ff    	jne    c000406a <f_write+0x83>
c0004184:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004187:	e9 de fe ff ff       	jmp    c000406a <f_write+0x83>
c000418c:	6a 01                	push   0x1
c000418e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004191:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004194:	50                   	push   eax
c0004195:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004199:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000419d:	50                   	push   eax
c000419e:	e8 47 db ff ff       	call   c0001cea <disk_write>
c00041a3:	83 c4 10             	add    esp,0x10
c00041a6:	85 c0                	test   eax,eax
c00041a8:	75 bf                	jne    c0004169 <f_write+0x182>
c00041aa:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00041ae:	e9 c1 fe ff ff       	jmp    c0004074 <f_write+0x8d>
c00041b3:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041b6:	74 20                	je     c00041d8 <f_write+0x1f1>
c00041b8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041bb:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041be:	76 18                	jbe    c00041d8 <f_write+0x1f1>
c00041c0:	6a 01                	push   0x1
c00041c2:	8d 43 28             	lea    eax,[ebx+0x28]
c00041c5:	57                   	push   edi
c00041c6:	50                   	push   eax
c00041c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041cb:	50                   	push   eax
c00041cc:	e8 03 db ff ff       	call   c0001cd4 <disk_read>
c00041d1:	83 c4 10             	add    esp,0x10
c00041d4:	85 c0                	test   eax,eax
c00041d6:	75 91                	jne    c0004169 <f_write+0x182>
c00041d8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041db:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041de:	ba 00 02 00 00       	mov    edx,0x200
c00041e3:	25 ff 01 00 00       	and    eax,0x1ff
c00041e8:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041ec:	29 c2                	sub    edx,eax
c00041ee:	39 d6                	cmp    esi,edx
c00041f0:	76 02                	jbe    c00041f4 <f_write+0x20d>
c00041f2:	89 d6                	mov    esi,edx
c00041f4:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c00041f8:	89 f1                	mov    ecx,esi
c00041fa:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00041fe:	e8 48 db ff ff       	call   c0001d4b <mem_cpy>
c0004203:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004207:	e9 f4 fe ff ff       	jmp    c0004100 <f_write+0x119>
c000420c:	bd 07 00 00 00       	mov    ebp,0x7
c0004211:	83 c4 2c             	add    esp,0x2c
c0004214:	89 e8                	mov    eax,ebp
c0004216:	5b                   	pop    ebx
c0004217:	5e                   	pop    esi
c0004218:	5f                   	pop    edi
c0004219:	5d                   	pop    ebp
c000421a:	c3                   	ret    

c000421b <f_sync>:
c000421b:	56                   	push   esi
c000421c:	53                   	push   ebx
c000421d:	83 ec 14             	sub    esp,0x14
c0004220:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004224:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 6c df ff ff       	call   c000219b <validate>
c000422f:	85 c0                	test   eax,eax
c0004231:	0f 85 93 00 00 00    	jne    c00042ca <f_sync+0xaf>
c0004237:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000423a:	f6 c2 40             	test   dl,0x40
c000423d:	0f 84 87 00 00 00    	je     c00042ca <f_sync+0xaf>
c0004243:	84 d2                	test   dl,dl
c0004245:	79 29                	jns    c0004270 <f_sync+0x55>
c0004247:	6a 01                	push   0x1
c0004249:	8d 43 28             	lea    eax,[ebx+0x28]
c000424c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000424f:	50                   	push   eax
c0004250:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004254:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004258:	50                   	push   eax
c0004259:	e8 8c da ff ff       	call   c0001cea <disk_write>
c000425e:	83 c4 10             	add    esp,0x10
c0004261:	89 c2                	mov    edx,eax
c0004263:	b8 01 00 00 00       	mov    eax,0x1
c0004268:	85 d2                	test   edx,edx
c000426a:	75 5e                	jne    c00042ca <f_sync+0xaf>
c000426c:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004270:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004273:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004277:	e8 c9 df ff ff       	call   c0002245 <move_window>
c000427c:	85 c0                	test   eax,eax
c000427e:	75 4a                	jne    c00042ca <f_sync+0xaf>
c0004280:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0004283:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0004287:	89 f2                	mov    edx,esi
c0004289:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000428c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000428e:	e8 56 ee ff ff       	call   c00030e9 <st_clust.isra.1>
c0004293:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004296:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004299:	e8 aa da ff ff       	call   c0001d48 <st_dword>
c000429e:	8d 46 16             	lea    eax,[esi+0x16]
c00042a1:	ba 00 00 21 50       	mov    edx,0x50210000
c00042a6:	e8 9d da ff ff       	call   c0001d48 <st_dword>
c00042ab:	8d 46 12             	lea    eax,[esi+0x12]
c00042ae:	31 d2                	xor    edx,edx
c00042b0:	e8 8f da ff ff       	call   c0001d44 <st_word>
c00042b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042b9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042c1:	e8 bf e9 ff ff       	call   c0002c85 <sync_fs>
c00042c6:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042ca:	83 c4 14             	add    esp,0x14
c00042cd:	5b                   	pop    ebx
c00042ce:	5e                   	pop    esi
c00042cf:	c3                   	ret    

c00042d0 <f_close>:
c00042d0:	53                   	push   ebx
c00042d1:	83 ec 24             	sub    esp,0x24
c00042d4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042d8:	53                   	push   ebx
c00042d9:	e8 3d ff ff ff       	call   c000421b <f_sync>
c00042de:	83 c4 10             	add    esp,0x10
c00042e1:	85 c0                	test   eax,eax
c00042e3:	75 15                	jne    c00042fa <f_close+0x2a>
c00042e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00042e9:	89 d8                	mov    eax,ebx
c00042eb:	e8 ab de ff ff       	call   c000219b <validate>
c00042f0:	85 c0                	test   eax,eax
c00042f2:	75 06                	jne    c00042fa <f_close+0x2a>
c00042f4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00042fa:	83 c4 18             	add    esp,0x18
c00042fd:	5b                   	pop    ebx
c00042fe:	c3                   	ret    

c00042ff <f_lseek>:
c00042ff:	55                   	push   ebp
c0004300:	57                   	push   edi
c0004301:	56                   	push   esi
c0004302:	53                   	push   ebx
c0004303:	83 ec 2c             	sub    esp,0x2c
c0004306:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000430a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000430e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004312:	89 d8                	mov    eax,ebx
c0004314:	e8 82 de ff ff       	call   c000219b <validate>
c0004319:	89 c5                	mov    ebp,eax
c000431b:	85 c0                	test   eax,eax
c000431d:	0f 85 79 01 00 00    	jne    c000449c <f_lseek+0x19d>
c0004323:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004327:	85 ed                	test   ebp,ebp
c0004329:	0f 85 6d 01 00 00    	jne    c000449c <f_lseek+0x19d>
c000432f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004332:	39 f0                	cmp    eax,esi
c0004334:	73 08                	jae    c000433e <f_lseek+0x3f>
c0004336:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433a:	75 02                	jne    c000433e <f_lseek+0x3f>
c000433c:	89 c6                	mov    esi,eax
c000433e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004341:	85 f6                	test   esi,esi
c0004343:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000434a:	75 07                	jne    c0004353 <f_lseek+0x54>
c000434c:	31 f6                	xor    esi,esi
c000434e:	e9 e2 00 00 00       	jmp    c0004435 <f_lseek+0x136>
c0004353:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004357:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000435b:	c1 e7 09             	shl    edi,0x9
c000435e:	85 c9                	test   ecx,ecx
c0004360:	74 28                	je     c000438a <f_lseek+0x8b>
c0004362:	49                   	dec    ecx
c0004363:	31 d2                	xor    edx,edx
c0004365:	8d 46 ff             	lea    eax,[esi-0x1]
c0004368:	f7 f7                	div    edi
c000436a:	31 d2                	xor    edx,edx
c000436c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004370:	89 c8                	mov    eax,ecx
c0004372:	f7 f7                	div    edi
c0004374:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004378:	72 10                	jb     c000438a <f_lseek+0x8b>
c000437a:	89 f8                	mov    eax,edi
c000437c:	f7 d8                	neg    eax
c000437e:	21 c1                	and    ecx,eax
c0004380:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004383:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004386:	29 ce                	sub    esi,ecx
c0004388:	eb 3c                	jmp    c00043c6 <f_lseek+0xc7>
c000438a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000438d:	85 c0                	test   eax,eax
c000438f:	75 32                	jne    c00043c3 <f_lseek+0xc4>
c0004391:	31 d2                	xor    edx,edx
c0004393:	89 d8                	mov    eax,ebx
c0004395:	e8 41 ef ff ff       	call   c00032db <create_chain>
c000439a:	83 f8 01             	cmp    eax,0x1
c000439d:	75 0e                	jne    c00043ad <f_lseek+0xae>
c000439f:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00043a3:	bd 02 00 00 00       	mov    ebp,0x2
c00043a8:	e9 ef 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043ad:	83 f8 ff             	cmp    eax,0xffffffff
c00043b0:	75 0e                	jne    c00043c0 <f_lseek+0xc1>
c00043b2:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043b6:	bd 01 00 00 00       	mov    ebp,0x1
c00043bb:	e9 dc 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043c0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043c6:	85 c0                	test   eax,eax
c00043c8:	74 82                	je     c000434c <f_lseek+0x4d>
c00043ca:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043cd:	39 fe                	cmp    esi,edi
c00043cf:	76 3d                	jbe    c000440e <f_lseek+0x10f>
c00043d1:	01 fa                	add    edx,edi
c00043d3:	29 fe                	sub    esi,edi
c00043d5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043d8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043dc:	89 c2                	mov    edx,eax
c00043de:	74 0d                	je     c00043ed <f_lseek+0xee>
c00043e0:	89 d8                	mov    eax,ebx
c00043e2:	e8 f4 ee ff ff       	call   c00032db <create_chain>
c00043e7:	85 c0                	test   eax,eax
c00043e9:	75 09                	jne    c00043f4 <f_lseek+0xf5>
c00043eb:	eb 1f                	jmp    c000440c <f_lseek+0x10d>
c00043ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043ef:	e8 1d ed ff ff       	call   c0003111 <get_fat.isra.2>
c00043f4:	83 f8 ff             	cmp    eax,0xffffffff
c00043f7:	74 b9                	je     c00043b2 <f_lseek+0xb3>
c00043f9:	83 f8 01             	cmp    eax,0x1
c00043fc:	76 a1                	jbe    c000439f <f_lseek+0xa0>
c00043fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004402:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004405:	76 98                	jbe    c000439f <f_lseek+0xa0>
c0004407:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000440a:	eb be                	jmp    c00043ca <f_lseek+0xcb>
c000440c:	31 f6                	xor    esi,esi
c000440e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004411:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004417:	0f 84 2f ff ff ff    	je     c000434c <f_lseek+0x4d>
c000441d:	89 c2                	mov    edx,eax
c000441f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004423:	e8 3d db ff ff       	call   c0001f65 <clst2sect>
c0004428:	85 c0                	test   eax,eax
c000442a:	0f 84 6f ff ff ff    	je     c000439f <f_lseek+0xa0>
c0004430:	c1 ee 09             	shr    esi,0x9
c0004433:	01 c6                	add    esi,eax
c0004435:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004438:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000443b:	76 07                	jbe    c0004444 <f_lseek+0x145>
c000443d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004440:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004444:	a9 ff 01 00 00       	test   eax,0x1ff
c0004449:	74 51                	je     c000449c <f_lseek+0x19d>
c000444b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000444e:	39 f0                	cmp    eax,esi
c0004450:	74 4a                	je     c000449c <f_lseek+0x19d>
c0004452:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004455:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004459:	79 21                	jns    c000447c <f_lseek+0x17d>
c000445b:	6a 01                	push   0x1
c000445d:	50                   	push   eax
c000445e:	57                   	push   edi
c000445f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004463:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004467:	50                   	push   eax
c0004468:	e8 7d d8 ff ff       	call   c0001cea <disk_write>
c000446d:	83 c4 10             	add    esp,0x10
c0004470:	85 c0                	test   eax,eax
c0004472:	0f 85 3a ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004478:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000447c:	6a 01                	push   0x1
c000447e:	56                   	push   esi
c000447f:	57                   	push   edi
c0004480:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004484:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004488:	50                   	push   eax
c0004489:	e8 46 d8 ff ff       	call   c0001cd4 <disk_read>
c000448e:	83 c4 10             	add    esp,0x10
c0004491:	85 c0                	test   eax,eax
c0004493:	0f 85 19 ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004499:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000449c:	83 c4 2c             	add    esp,0x2c
c000449f:	89 e8                	mov    eax,ebp
c00044a1:	5b                   	pop    ebx
c00044a2:	5e                   	pop    esi
c00044a3:	5f                   	pop    edi
c00044a4:	5d                   	pop    ebp
c00044a5:	c3                   	ret    

c00044a6 <f_opendir>:
c00044a6:	56                   	push   esi
c00044a7:	b8 09 00 00 00       	mov    eax,0x9
c00044ac:	53                   	push   ebx
c00044ad:	83 ec 24             	sub    esp,0x24
c00044b0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044b4:	85 db                	test   ebx,ebx
c00044b6:	0f 84 af 00 00 00    	je     c000456b <f_opendir+0xc5>
c00044bc:	31 c9                	xor    ecx,ecx
c00044be:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044c2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044c6:	e8 cd de ff ff       	call   c0002398 <mount_volume>
c00044cb:	85 c0                	test   eax,eax
c00044cd:	0f 85 92 00 00 00    	jne    c0004565 <f_opendir+0xbf>
c00044d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d7:	83 ec 0c             	sub    esp,0xc
c00044da:	89 03                	mov    DWORD PTR [ebx],eax
c00044dc:	68 00 02 00 00       	push   0x200
c00044e1:	e8 86 15 00 00       	call   c0005a6c <ff_memalloc>
c00044e6:	83 c4 10             	add    esp,0x10
c00044e9:	89 c6                	mov    esi,eax
c00044eb:	b8 11 00 00 00       	mov    eax,0x11
c00044f0:	85 f6                	test   esi,esi
c00044f2:	74 77                	je     c000456b <f_opendir+0xc5>
c00044f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044f8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00044fc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00044ff:	89 d8                	mov    eax,ebx
c0004501:	e8 9c f3 ff ff       	call   c00038a2 <follow_path>
c0004506:	85 c0                	test   eax,eax
c0004508:	75 37                	jne    c0004541 <f_opendir+0x9b>
c000450a:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000450e:	78 1c                	js     c000452c <f_opendir+0x86>
c0004510:	b8 05 00 00 00       	mov    eax,0x5
c0004515:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004519:	74 26                	je     c0004541 <f_opendir+0x9b>
c000451b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000451e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004522:	8a 00                	mov    al,BYTE PTR [eax]
c0004524:	e8 97 eb ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004529:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000452c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004530:	31 d2                	xor    edx,edx
c0004532:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004536:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000453a:	89 d8                	mov    eax,ebx
c000453c:	e8 d2 ec ff ff       	call   c0003213 <dir_sdi>
c0004541:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004545:	83 ec 0c             	sub    esp,0xc
c0004548:	56                   	push   esi
c0004549:	e8 36 15 00 00       	call   c0005a84 <ff_memfree>
c000454e:	83 c4 10             	add    esp,0x10
c0004551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004555:	83 f8 04             	cmp    eax,0x4
c0004558:	74 06                	je     c0004560 <f_opendir+0xba>
c000455a:	85 c0                	test   eax,eax
c000455c:	74 0d                	je     c000456b <f_opendir+0xc5>
c000455e:	eb 05                	jmp    c0004565 <f_opendir+0xbf>
c0004560:	b8 05 00 00 00       	mov    eax,0x5
c0004565:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000456b:	83 c4 24             	add    esp,0x24
c000456e:	5b                   	pop    ebx
c000456f:	5e                   	pop    esi
c0004570:	c3                   	ret    

c0004571 <f_closedir>:
c0004571:	53                   	push   ebx
c0004572:	83 ec 18             	sub    esp,0x18
c0004575:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004579:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000457d:	89 d8                	mov    eax,ebx
c000457f:	e8 17 dc ff ff       	call   c000219b <validate>
c0004584:	85 c0                	test   eax,eax
c0004586:	75 06                	jne    c000458e <f_closedir+0x1d>
c0004588:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000458e:	83 c4 18             	add    esp,0x18
c0004591:	5b                   	pop    ebx
c0004592:	c3                   	ret    

c0004593 <f_readdir>:
c0004593:	57                   	push   edi
c0004594:	56                   	push   esi
c0004595:	53                   	push   ebx
c0004596:	83 ec 20             	sub    esp,0x20
c0004599:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000459d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00045a1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00045a5:	89 d8                	mov    eax,ebx
c00045a7:	e8 ef db ff ff       	call   c000219b <validate>
c00045ac:	85 c0                	test   eax,eax
c00045ae:	75 6e                	jne    c000461e <f_readdir+0x8b>
c00045b0:	85 ff                	test   edi,edi
c00045b2:	75 0b                	jne    c00045bf <f_readdir+0x2c>
c00045b4:	31 d2                	xor    edx,edx
c00045b6:	89 d8                	mov    eax,ebx
c00045b8:	e8 56 ec ff ff       	call   c0003213 <dir_sdi>
c00045bd:	eb 5f                	jmp    c000461e <f_readdir+0x8b>
c00045bf:	83 ec 0c             	sub    esp,0xc
c00045c2:	68 00 02 00 00       	push   0x200
c00045c7:	e8 a0 14 00 00       	call   c0005a6c <ff_memalloc>
c00045cc:	83 c4 10             	add    esp,0x10
c00045cf:	89 c6                	mov    esi,eax
c00045d1:	b8 11 00 00 00       	mov    eax,0x11
c00045d6:	85 f6                	test   esi,esi
c00045d8:	74 44                	je     c000461e <f_readdir+0x8b>
c00045da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045de:	31 d2                	xor    edx,edx
c00045e0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00045e3:	89 d8                	mov    eax,ebx
c00045e5:	e8 1a f0 ff ff       	call   c0003604 <dir_read>
c00045ea:	a9 fb ff ff ff       	test   eax,0xfffffffb
c00045ef:	75 19                	jne    c000460a <f_readdir+0x77>
c00045f1:	89 fa                	mov    edx,edi
c00045f3:	89 d8                	mov    eax,ebx
c00045f5:	e8 e2 e8 ff ff       	call   c0002edc <get_fileinfo>
c00045fa:	31 d2                	xor    edx,edx
c00045fc:	89 d8                	mov    eax,ebx
c00045fe:	e8 9b ee ff ff       	call   c000349e <dir_next>
c0004603:	83 f8 04             	cmp    eax,0x4
c0004606:	75 02                	jne    c000460a <f_readdir+0x77>
c0004608:	31 c0                	xor    eax,eax
c000460a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000460e:	83 ec 0c             	sub    esp,0xc
c0004611:	56                   	push   esi
c0004612:	e8 6d 14 00 00       	call   c0005a84 <ff_memfree>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461e:	83 c4 20             	add    esp,0x20
c0004621:	5b                   	pop    ebx
c0004622:	5e                   	pop    esi
c0004623:	5f                   	pop    edi
c0004624:	c3                   	ret    

c0004625 <f_stat>:
c0004625:	57                   	push   edi
c0004626:	31 c9                	xor    ecx,ecx
c0004628:	56                   	push   esi
c0004629:	53                   	push   ebx
c000462a:	83 ec 30             	sub    esp,0x30
c000462d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004631:	89 e2                	mov    edx,esp
c0004633:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004637:	e8 5c dd ff ff       	call   c0002398 <mount_volume>
c000463c:	89 c3                	mov    ebx,eax
c000463e:	85 c0                	test   eax,eax
c0004640:	75 59                	jne    c000469b <f_stat+0x76>
c0004642:	83 ec 0c             	sub    esp,0xc
c0004645:	bb 11 00 00 00       	mov    ebx,0x11
c000464a:	68 00 02 00 00       	push   0x200
c000464f:	e8 18 14 00 00       	call   c0005a6c <ff_memalloc>
c0004654:	83 c4 10             	add    esp,0x10
c0004657:	89 c6                	mov    esi,eax
c0004659:	85 c0                	test   eax,eax
c000465b:	74 3e                	je     c000469b <f_stat+0x76>
c000465d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004660:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004664:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004667:	89 e0                	mov    eax,esp
c0004669:	e8 34 f2 ff ff       	call   c00038a2 <follow_path>
c000466e:	89 c3                	mov    ebx,eax
c0004670:	85 c0                	test   eax,eax
c0004672:	75 1b                	jne    c000468f <f_stat+0x6a>
c0004674:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004679:	78 0f                	js     c000468a <f_stat+0x65>
c000467b:	85 ff                	test   edi,edi
c000467d:	74 10                	je     c000468f <f_stat+0x6a>
c000467f:	89 fa                	mov    edx,edi
c0004681:	89 e0                	mov    eax,esp
c0004683:	e8 54 e8 ff ff       	call   c0002edc <get_fileinfo>
c0004688:	eb 05                	jmp    c000468f <f_stat+0x6a>
c000468a:	bb 06 00 00 00       	mov    ebx,0x6
c000468f:	83 ec 0c             	sub    esp,0xc
c0004692:	56                   	push   esi
c0004693:	e8 ec 13 00 00       	call   c0005a84 <ff_memfree>
c0004698:	83 c4 10             	add    esp,0x10
c000469b:	83 c4 30             	add    esp,0x30
c000469e:	89 d8                	mov    eax,ebx
c00046a0:	5b                   	pop    ebx
c00046a1:	5e                   	pop    esi
c00046a2:	5f                   	pop    edi
c00046a3:	c3                   	ret    

c00046a4 <f_getfree>:
c00046a4:	55                   	push   ebp
c00046a5:	31 c9                	xor    ecx,ecx
c00046a7:	57                   	push   edi
c00046a8:	56                   	push   esi
c00046a9:	53                   	push   ebx
c00046aa:	83 ec 2c             	sub    esp,0x2c
c00046ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046b1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046b5:	e8 de dc ff ff       	call   c0002398 <mount_volume>
c00046ba:	89 c7                	mov    edi,eax
c00046bc:	85 c0                	test   eax,eax
c00046be:	0f 85 d8 00 00 00    	jne    c000479c <f_getfree+0xf8>
c00046c4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046cc:	89 30                	mov    DWORD PTR [eax],esi
c00046ce:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046d1:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046d4:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046d7:	39 d0                	cmp    eax,edx
c00046d9:	77 0b                	ja     c00046e6 <f_getfree+0x42>
c00046db:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046df:	89 01                	mov    DWORD PTR [ecx],eax
c00046e1:	e9 b6 00 00 00       	jmp    c000479c <f_getfree+0xf8>
c00046e6:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c00046e9:	75 29                	jne    c0004714 <f_getfree+0x70>
c00046eb:	bd 02 00 00 00       	mov    ebp,0x2
c00046f0:	31 db                	xor    ebx,ebx
c00046f2:	89 ea                	mov    edx,ebp
c00046f4:	89 f0                	mov    eax,esi
c00046f6:	e8 16 ea ff ff       	call   c0003111 <get_fat.isra.2>
c00046fb:	83 f8 ff             	cmp    eax,0xffffffff
c00046fe:	74 7b                	je     c000477b <f_getfree+0xd7>
c0004700:	83 f8 01             	cmp    eax,0x1
c0004703:	74 7d                	je     c0004782 <f_getfree+0xde>
c0004705:	83 d3 00             	adc    ebx,0x0
c0004708:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000470c:	45                   	inc    ebp
c000470d:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004710:	77 e0                	ja     c00046f2 <f_getfree+0x4e>
c0004712:	eb 77                	jmp    c000478b <f_getfree+0xe7>
c0004714:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004717:	31 db                	xor    ebx,ebx
c0004719:	31 f6                	xor    esi,esi
c000471b:	85 f6                	test   esi,esi
c000471d:	75 18                	jne    c0004737 <f_getfree+0x93>
c000471f:	8d 42 01             	lea    eax,[edx+0x1]
c0004722:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004726:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000472a:	e8 16 db ff ff       	call   c0002245 <move_window>
c000472f:	85 c0                	test   eax,eax
c0004731:	75 56                	jne    c0004789 <f_getfree+0xe5>
c0004733:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004737:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000473b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000473f:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004743:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004746:	75 11                	jne    c0004759 <f_getfree+0xb5>
c0004748:	e8 d2 d5 ff ff       	call   c0001d1f <ld_word>
c000474d:	66 83 f8 01          	cmp    ax,0x1
c0004751:	83 d3 00             	adc    ebx,0x0
c0004754:	83 c6 02             	add    esi,0x2
c0004757:	eb 13                	jmp    c000476c <f_getfree+0xc8>
c0004759:	e8 ce d5 ff ff       	call   c0001d2c <ld_dword>
c000475e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004763:	83 f8 01             	cmp    eax,0x1
c0004766:	83 d3 00             	adc    ebx,0x0
c0004769:	83 c6 04             	add    esi,0x4
c000476c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004772:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004776:	4d                   	dec    ebp
c0004777:	75 a2                	jne    c000471b <f_getfree+0x77>
c0004779:	eb 10                	jmp    c000478b <f_getfree+0xe7>
c000477b:	bf 01 00 00 00       	mov    edi,0x1
c0004780:	eb 09                	jmp    c000478b <f_getfree+0xe7>
c0004782:	bf 02 00 00 00       	mov    edi,0x2
c0004787:	eb 02                	jmp    c000478b <f_getfree+0xe7>
c0004789:	89 c7                	mov    edi,eax
c000478b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000478f:	89 18                	mov    DWORD PTR [eax],ebx
c0004791:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004795:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004798:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000479c:	83 c4 2c             	add    esp,0x2c
c000479f:	89 f8                	mov    eax,edi
c00047a1:	5b                   	pop    ebx
c00047a2:	5e                   	pop    esi
c00047a3:	5f                   	pop    edi
c00047a4:	5d                   	pop    ebp
c00047a5:	c3                   	ret    

c00047a6 <f_truncate>:
c00047a6:	56                   	push   esi
c00047a7:	53                   	push   ebx
c00047a8:	83 ec 14             	sub    esp,0x14
c00047ab:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00047af:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047b3:	89 d8                	mov    eax,ebx
c00047b5:	e8 e1 d9 ff ff       	call   c000219b <validate>
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	0f 85 be 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047c4:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047c8:	85 f6                	test   esi,esi
c00047ca:	0f 85 b2 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047d0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047d4:	0f 84 a3 00 00 00    	je     c000487d <f_truncate+0xd7>
c00047da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047dd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00047e0:	0f 83 9c 00 00 00    	jae    c0004882 <f_truncate+0xdc>
c00047e6:	85 c0                	test   eax,eax
c00047e8:	75 15                	jne    c00047ff <f_truncate+0x59>
c00047ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00047ed:	31 c9                	xor    ecx,ecx
c00047ef:	89 d8                	mov    eax,ebx
c00047f1:	e8 1f ec ff ff       	call   c0003415 <remove_chain>
c00047f6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00047fd:	eb 35                	jmp    c0004834 <f_truncate+0x8e>
c00047ff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004802:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004804:	e8 08 e9 ff ff       	call   c0003111 <get_fat.isra.2>
c0004809:	89 c2                	mov    edx,eax
c000480b:	b8 01 00 00 00       	mov    eax,0x1
c0004810:	83 fa ff             	cmp    edx,0xffffffff
c0004813:	74 1f                	je     c0004834 <f_truncate+0x8e>
c0004815:	b8 02 00 00 00       	mov    eax,0x2
c000481a:	83 fa 01             	cmp    edx,0x1
c000481d:	74 15                	je     c0004834 <f_truncate+0x8e>
c000481f:	31 c0                	xor    eax,eax
c0004821:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004825:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004828:	76 0a                	jbe    c0004834 <f_truncate+0x8e>
c000482a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000482d:	89 d8                	mov    eax,ebx
c000482f:	e8 e1 eb ff ff       	call   c0003415 <remove_chain>
c0004834:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004837:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000483a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000483d:	83 ca 40             	or     edx,0x40
c0004840:	85 c0                	test   eax,eax
c0004842:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004845:	75 2f                	jne    c0004876 <f_truncate+0xd0>
c0004847:	84 d2                	test   dl,dl
c0004849:	79 37                	jns    c0004882 <f_truncate+0xdc>
c000484b:	6a 01                	push   0x1
c000484d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004850:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004853:	50                   	push   eax
c0004854:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004858:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000485c:	50                   	push   eax
c000485d:	e8 88 d4 ff ff       	call   c0001cea <disk_write>
c0004862:	83 c4 10             	add    esp,0x10
c0004865:	85 c0                	test   eax,eax
c0004867:	75 08                	jne    c0004871 <f_truncate+0xcb>
c0004869:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000486d:	31 f6                	xor    esi,esi
c000486f:	eb 11                	jmp    c0004882 <f_truncate+0xdc>
c0004871:	b8 01 00 00 00       	mov    eax,0x1
c0004876:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004879:	89 c6                	mov    esi,eax
c000487b:	eb 05                	jmp    c0004882 <f_truncate+0xdc>
c000487d:	be 07 00 00 00       	mov    esi,0x7
c0004882:	89 f0                	mov    eax,esi
c0004884:	83 c4 14             	add    esp,0x14
c0004887:	5b                   	pop    ebx
c0004888:	5e                   	pop    esi
c0004889:	c3                   	ret    

c000488a <f_unlink>:
c000488a:	55                   	push   ebp
c000488b:	b9 02 00 00 00       	mov    ecx,0x2
c0004890:	57                   	push   edi
c0004891:	56                   	push   esi
c0004892:	53                   	push   ebx
c0004893:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004899:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000489d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00048a4:	e8 ef da ff ff       	call   c0002398 <mount_volume>
c00048a9:	85 c0                	test   eax,eax
c00048ab:	0f 85 f0 00 00 00    	jne    c00049a1 <f_unlink+0x117>
c00048b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b5:	83 ec 0c             	sub    esp,0xc
c00048b8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048bc:	68 00 02 00 00       	push   0x200
c00048c1:	e8 a6 11 00 00       	call   c0005a6c <ff_memalloc>
c00048c6:	83 c4 10             	add    esp,0x10
c00048c9:	89 c3                	mov    ebx,eax
c00048cb:	b8 11 00 00 00       	mov    eax,0x11
c00048d0:	85 db                	test   ebx,ebx
c00048d2:	0f 84 c9 00 00 00    	je     c00049a1 <f_unlink+0x117>
c00048d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048dc:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c00048e3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00048e6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00048ea:	e8 b3 ef ff ff       	call   c00038a2 <follow_path>
c00048ef:	85 c0                	test   eax,eax
c00048f1:	0f 85 96 00 00 00    	jne    c000498d <f_unlink+0x103>
c00048f7:	b8 06 00 00 00       	mov    eax,0x6
c00048fc:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004901:	0f 88 86 00 00 00    	js     c000498d <f_unlink+0x103>
c0004907:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c000490c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004912:	74 07                	je     c000491b <f_unlink+0x91>
c0004914:	b8 07 00 00 00       	mov    eax,0x7
c0004919:	eb 72                	jmp    c000498d <f_unlink+0x103>
c000491b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000491f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004923:	8a 07                	mov    al,BYTE PTR [edi]
c0004925:	e8 96 e7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000492a:	83 e5 10             	and    ebp,0x10
c000492d:	89 c6                	mov    esi,eax
c000492f:	75 0f                	jne    c0004940 <f_unlink+0xb6>
c0004931:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004935:	e8 e7 ed ff ff       	call   c0003721 <dir_remove>
c000493a:	85 c0                	test   eax,eax
c000493c:	74 2f                	je     c000496d <f_unlink+0xe3>
c000493e:	eb 4d                	jmp    c000498d <f_unlink+0x103>
c0004940:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004944:	31 d2                	xor    edx,edx
c0004946:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000494a:	8d 44 24 50          	lea    eax,[esp+0x50]
c000494e:	e8 c0 e8 ff ff       	call   c0003213 <dir_sdi>
c0004953:	85 c0                	test   eax,eax
c0004955:	75 36                	jne    c000498d <f_unlink+0x103>
c0004957:	31 d2                	xor    edx,edx
c0004959:	8d 44 24 50          	lea    eax,[esp+0x50]
c000495d:	e8 a2 ec ff ff       	call   c0003604 <dir_read>
c0004962:	85 c0                	test   eax,eax
c0004964:	74 ae                	je     c0004914 <f_unlink+0x8a>
c0004966:	83 f8 04             	cmp    eax,0x4
c0004969:	75 22                	jne    c000498d <f_unlink+0x103>
c000496b:	eb c4                	jmp    c0004931 <f_unlink+0xa7>
c000496d:	85 f6                	test   esi,esi
c000496f:	75 0b                	jne    c000497c <f_unlink+0xf2>
c0004971:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004975:	e8 0b e3 ff ff       	call   c0002c85 <sync_fs>
c000497a:	eb 11                	jmp    c000498d <f_unlink+0x103>
c000497c:	31 c9                	xor    ecx,ecx
c000497e:	89 f2                	mov    edx,esi
c0004980:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004984:	e8 8c ea ff ff       	call   c0003415 <remove_chain>
c0004989:	85 c0                	test   eax,eax
c000498b:	74 e4                	je     c0004971 <f_unlink+0xe7>
c000498d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004991:	83 ec 0c             	sub    esp,0xc
c0004994:	53                   	push   ebx
c0004995:	e8 ea 10 00 00       	call   c0005a84 <ff_memfree>
c000499a:	83 c4 10             	add    esp,0x10
c000499d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049a1:	81 c4 8c 00 00 00    	add    esp,0x8c
c00049a7:	5b                   	pop    ebx
c00049a8:	5e                   	pop    esi
c00049a9:	5f                   	pop    edi
c00049aa:	5d                   	pop    ebp
c00049ab:	c3                   	ret    

c00049ac <f_mkdir>:
c00049ac:	57                   	push   edi
c00049ad:	b9 02 00 00 00       	mov    ecx,0x2
c00049b2:	56                   	push   esi
c00049b3:	53                   	push   ebx
c00049b4:	83 ec 50             	sub    esp,0x50
c00049b7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049bb:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049bf:	e8 d4 d9 ff ff       	call   c0002398 <mount_volume>
c00049c4:	89 c3                	mov    ebx,eax
c00049c6:	85 c0                	test   eax,eax
c00049c8:	0f 85 70 01 00 00    	jne    c0004b3e <f_mkdir+0x192>
c00049ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049d2:	bb 11 00 00 00       	mov    ebx,0x11
c00049d7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	68 00 02 00 00       	push   0x200
c00049e3:	e8 84 10 00 00       	call   c0005a6c <ff_memalloc>
c00049e8:	83 c4 10             	add    esp,0x10
c00049eb:	89 c7                	mov    edi,eax
c00049ed:	85 c0                	test   eax,eax
c00049ef:	0f 84 49 01 00 00    	je     c0004b3e <f_mkdir+0x192>
c00049f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049f9:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00049fd:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004a00:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a04:	e8 99 ee ff ff       	call   c00038a2 <follow_path>
c0004a09:	89 c3                	mov    ebx,eax
c0004a0b:	85 c0                	test   eax,eax
c0004a0d:	74 3e                	je     c0004a4d <f_mkdir+0xa1>
c0004a0f:	83 f8 04             	cmp    eax,0x4
c0004a12:	75 3e                	jne    c0004a52 <f_mkdir+0xa6>
c0004a14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a18:	31 d2                	xor    edx,edx
c0004a1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a1e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a22:	e8 b4 e8 ff ff       	call   c00032db <create_chain>
c0004a27:	89 c6                	mov    esi,eax
c0004a29:	85 c0                	test   eax,eax
c0004a2b:	74 0c                	je     c0004a39 <f_mkdir+0x8d>
c0004a2d:	bb 02 00 00 00       	mov    ebx,0x2
c0004a32:	83 f8 01             	cmp    eax,0x1
c0004a35:	74 07                	je     c0004a3e <f_mkdir+0x92>
c0004a37:	eb 2a                	jmp    c0004a63 <f_mkdir+0xb7>
c0004a39:	bb 07 00 00 00       	mov    ebx,0x7
c0004a3e:	31 c9                	xor    ecx,ecx
c0004a40:	89 f2                	mov    edx,esi
c0004a42:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a46:	e8 ca e9 ff ff       	call   c0003415 <remove_chain>
c0004a4b:	eb 05                	jmp    c0004a52 <f_mkdir+0xa6>
c0004a4d:	bb 08 00 00 00       	mov    ebx,0x8
c0004a52:	83 ec 0c             	sub    esp,0xc
c0004a55:	57                   	push   edi
c0004a56:	e8 29 10 00 00       	call   c0005a84 <ff_memfree>
c0004a5b:	83 c4 10             	add    esp,0x10
c0004a5e:	e9 db 00 00 00       	jmp    c0004b3e <f_mkdir+0x192>
c0004a63:	bb 01 00 00 00       	mov    ebx,0x1
c0004a68:	83 f8 ff             	cmp    eax,0xffffffff
c0004a6b:	74 d1                	je     c0004a3e <f_mkdir+0x92>
c0004a6d:	89 f2                	mov    edx,esi
c0004a6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a73:	e8 73 dd ff ff       	call   c00027eb <dir_clear>
c0004a78:	89 c3                	mov    ebx,eax
c0004a7a:	85 c0                	test   eax,eax
c0004a7c:	75 c0                	jne    c0004a3e <f_mkdir+0x92>
c0004a7e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004a83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a87:	ba 20 00 00 00       	mov    edx,0x20
c0004a8c:	83 c0 34             	add    eax,0x34
c0004a8f:	e8 cc d2 ff ff       	call   c0001d60 <mem_set>
c0004a94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a98:	ba 00 00 21 50       	mov    edx,0x50210000
c0004a9d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004aa1:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004aa5:	83 c0 4a             	add    eax,0x4a
c0004aa8:	e8 9b d2 ff ff       	call   c0001d48 <st_dword>
c0004aad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ab1:	89 f1                	mov    ecx,esi
c0004ab3:	8d 50 34             	lea    edx,[eax+0x34]
c0004ab6:	e8 2e e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004abb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004abf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ac4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ac7:	83 c0 54             	add    eax,0x54
c0004aca:	e8 7c d2 ff ff       	call   c0001d4b <mem_cpy>
c0004acf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004ad7:	8d 50 54             	lea    edx,[eax+0x54]
c0004ada:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004ade:	e8 06 e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004ae3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ae7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004aeb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aef:	e8 42 ee ff ff       	call   c0003936 <dir_register>
c0004af4:	89 c3                	mov    ebx,eax
c0004af6:	85 c0                	test   eax,eax
c0004af8:	0f 85 40 ff ff ff    	jne    c0004a3e <f_mkdir+0x92>
c0004afe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b02:	ba 00 00 21 50       	mov    edx,0x50210000
c0004b07:	83 c0 16             	add    eax,0x16
c0004b0a:	e8 39 d2 ff ff       	call   c0001d48 <st_dword>
c0004b0f:	89 f1                	mov    ecx,esi
c0004b11:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b19:	e8 cb e5 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004b1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b22:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b2a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b32:	e8 4e e1 ff ff       	call   c0002c85 <sync_fs>
c0004b37:	89 c3                	mov    ebx,eax
c0004b39:	e9 14 ff ff ff       	jmp    c0004a52 <f_mkdir+0xa6>
c0004b3e:	83 c4 50             	add    esp,0x50
c0004b41:	89 d8                	mov    eax,ebx
c0004b43:	5b                   	pop    ebx
c0004b44:	5e                   	pop    esi
c0004b45:	5f                   	pop    edi
c0004b46:	c3                   	ret    

c0004b47 <f_rename>:
c0004b47:	57                   	push   edi
c0004b48:	56                   	push   esi
c0004b49:	53                   	push   ebx
c0004b4a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b50:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b57:	e8 f2 d5 ff ff       	call   c000214e <get_ldnumber>
c0004b5c:	b9 02 00 00 00       	mov    ecx,0x2
c0004b61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b65:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b6c:	e8 27 d8 ff ff       	call   c0002398 <mount_volume>
c0004b71:	85 c0                	test   eax,eax
c0004b73:	0f 85 7a 01 00 00    	jne    c0004cf3 <f_rename+0x1ac>
c0004b79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b7d:	83 ec 0c             	sub    esp,0xc
c0004b80:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004b84:	68 00 02 00 00       	push   0x200
c0004b89:	e8 de 0e 00 00       	call   c0005a6c <ff_memalloc>
c0004b8e:	83 c4 10             	add    esp,0x10
c0004b91:	89 c6                	mov    esi,eax
c0004b93:	b8 11 00 00 00       	mov    eax,0x11
c0004b98:	85 f6                	test   esi,esi
c0004b9a:	0f 84 53 01 00 00    	je     c0004cf3 <f_rename+0x1ac>
c0004ba0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ba4:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004bab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004bae:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004bb2:	e8 eb ec ff ff       	call   c00038a2 <follow_path>
c0004bb7:	85 c0                	test   eax,eax
c0004bb9:	0f 85 20 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bbf:	b8 06 00 00 00       	mov    eax,0x6
c0004bc4:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004bc9:	0f 85 10 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0004bd4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bd8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bdc:	e8 6a d1 ff ff       	call   c0001d4b <mem_cpy>
c0004be1:	b9 30 00 00 00       	mov    ecx,0x30
c0004be6:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004bea:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bee:	e8 58 d1 ff ff       	call   c0001d4b <mem_cpy>
c0004bf3:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004bfa:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bfe:	e8 9f ec ff ff       	call   c00038a2 <follow_path>
c0004c03:	85 c0                	test   eax,eax
c0004c05:	75 20                	jne    c0004c27 <f_rename+0xe0>
c0004c07:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004c0b:	b8 08 00 00 00       	mov    eax,0x8
c0004c10:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c14:	0f 85 c5 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c1a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c1e:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c25:	eb 03                	jmp    c0004c2a <f_rename+0xe3>
c0004c27:	83 f8 04             	cmp    eax,0x4
c0004c2a:	0f 85 af 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c30:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c34:	e8 fd ec ff ff       	call   c0003936 <dir_register>
c0004c39:	85 c0                	test   eax,eax
c0004c3b:	0f 85 9e 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c41:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c48:	b9 13 00 00 00       	mov    ecx,0x13
c0004c4d:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c50:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c54:	e8 f2 d0 ff ff       	call   c0001d4b <mem_cpy>
c0004c59:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c5d:	a8 10                	test   al,0x10
c0004c5f:	75 03                	jne    c0004c64 <f_rename+0x11d>
c0004c61:	83 c8 20             	or     eax,0x20
c0004c64:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c6b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c6f:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c73:	74 54                	je     c0004cc9 <f_rename+0x182>
c0004c75:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c79:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c7d:	74 4a                	je     c0004cc9 <f_rename+0x182>
c0004c7f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c83:	89 da                	mov    edx,ebx
c0004c85:	8a 07                	mov    al,BYTE PTR [edi]
c0004c87:	e8 34 e4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004c8c:	89 c2                	mov    edx,eax
c0004c8e:	89 f8                	mov    eax,edi
c0004c90:	e8 d0 d2 ff ff       	call   c0001f65 <clst2sect>
c0004c95:	89 c2                	mov    edx,eax
c0004c97:	b8 02 00 00 00       	mov    eax,0x2
c0004c9c:	85 d2                	test   edx,edx
c0004c9e:	74 3f                	je     c0004cdf <f_rename+0x198>
c0004ca0:	89 f8                	mov    eax,edi
c0004ca2:	e8 9e d5 ff ff       	call   c0002245 <move_window>
c0004ca7:	85 c0                	test   eax,eax
c0004ca9:	75 34                	jne    c0004cdf <f_rename+0x198>
c0004cab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004caf:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004cb3:	75 14                	jne    c0004cc9 <f_rename+0x182>
c0004cb5:	8d 50 54             	lea    edx,[eax+0x54]
c0004cb8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004cbc:	e8 28 e4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004cc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cc5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc9:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ccd:	e8 4f ea ff ff       	call   c0003721 <dir_remove>
c0004cd2:	85 c0                	test   eax,eax
c0004cd4:	75 09                	jne    c0004cdf <f_rename+0x198>
c0004cd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cda:	e8 a6 df ff ff       	call   c0002c85 <sync_fs>
c0004cdf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ce3:	83 ec 0c             	sub    esp,0xc
c0004ce6:	56                   	push   esi
c0004ce7:	e8 98 0d 00 00       	call   c0005a84 <ff_memfree>
c0004cec:	83 c4 10             	add    esp,0x10
c0004cef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cf3:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004cf9:	5b                   	pop    ebx
c0004cfa:	5e                   	pop    esi
c0004cfb:	5f                   	pop    edi
c0004cfc:	c3                   	ret    

c0004cfd <f_chmod>:
c0004cfd:	57                   	push   edi
c0004cfe:	b9 02 00 00 00       	mov    ecx,0x2
c0004d03:	56                   	push   esi
c0004d04:	53                   	push   ebx
c0004d05:	83 ec 50             	sub    esp,0x50
c0004d08:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004d0c:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 7b d6 ff ff       	call   c0002398 <mount_volume>
c0004d1d:	85 c0                	test   eax,eax
c0004d1f:	75 7e                	jne    c0004d9f <f_chmod+0xa2>
c0004d21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d25:	83 ec 0c             	sub    esp,0xc
c0004d28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d2c:	68 00 02 00 00       	push   0x200
c0004d31:	e8 36 0d 00 00       	call   c0005a6c <ff_memalloc>
c0004d36:	83 c4 10             	add    esp,0x10
c0004d39:	89 c6                	mov    esi,eax
c0004d3b:	b8 11 00 00 00       	mov    eax,0x11
c0004d40:	85 f6                	test   esi,esi
c0004d42:	74 5b                	je     c0004d9f <f_chmod+0xa2>
c0004d44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d48:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d4c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d4f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d53:	e8 4a eb ff ff       	call   c00038a2 <follow_path>
c0004d58:	85 c0                	test   eax,eax
c0004d5a:	75 2f                	jne    c0004d8b <f_chmod+0x8e>
c0004d5c:	b8 06 00 00 00       	mov    eax,0x6
c0004d61:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d66:	75 23                	jne    c0004d8b <f_chmod+0x8e>
c0004d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d6c:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d6f:	21 fb                	and    ebx,edi
c0004d71:	83 e3 27             	and    ebx,0x27
c0004d74:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d77:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d7e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d86:	e8 fa de ff ff       	call   c0002c85 <sync_fs>
c0004d8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d8f:	83 ec 0c             	sub    esp,0xc
c0004d92:	56                   	push   esi
c0004d93:	e8 ec 0c 00 00       	call   c0005a84 <ff_memfree>
c0004d98:	83 c4 10             	add    esp,0x10
c0004d9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d9f:	83 c4 50             	add    esp,0x50
c0004da2:	5b                   	pop    ebx
c0004da3:	5e                   	pop    esi
c0004da4:	5f                   	pop    edi
c0004da5:	c3                   	ret    

c0004da6 <f_utime>:
c0004da6:	56                   	push   esi
c0004da7:	b9 02 00 00 00       	mov    ecx,0x2
c0004dac:	53                   	push   ebx
c0004dad:	83 ec 54             	sub    esp,0x54
c0004db0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004db4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004db8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004dbc:	e8 d7 d5 ff ff       	call   c0002398 <mount_volume>
c0004dc1:	85 c0                	test   eax,eax
c0004dc3:	0f 85 85 00 00 00    	jne    c0004e4e <f_utime+0xa8>
c0004dc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004dcd:	83 ec 0c             	sub    esp,0xc
c0004dd0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004dd4:	68 00 02 00 00       	push   0x200
c0004dd9:	e8 8e 0c 00 00       	call   c0005a6c <ff_memalloc>
c0004dde:	83 c4 10             	add    esp,0x10
c0004de1:	89 c3                	mov    ebx,eax
c0004de3:	b8 11 00 00 00       	mov    eax,0x11
c0004de8:	85 db                	test   ebx,ebx
c0004dea:	74 62                	je     c0004e4e <f_utime+0xa8>
c0004dec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004df0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004df4:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004df7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004dfb:	e8 a2 ea ff ff       	call   c00038a2 <follow_path>
c0004e00:	85 c0                	test   eax,eax
c0004e02:	75 36                	jne    c0004e3a <f_utime+0x94>
c0004e04:	b8 06 00 00 00       	mov    eax,0x6
c0004e09:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004e0e:	75 2a                	jne    c0004e3a <f_utime+0x94>
c0004e10:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e14:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e18:	c1 e2 10             	shl    edx,0x10
c0004e1b:	09 c2                	or     edx,eax
c0004e1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e21:	83 c0 16             	add    eax,0x16
c0004e24:	e8 1f cf ff ff       	call   c0001d48 <st_dword>
c0004e29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e2d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e35:	e8 4b de ff ff       	call   c0002c85 <sync_fs>
c0004e3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e3e:	83 ec 0c             	sub    esp,0xc
c0004e41:	53                   	push   ebx
c0004e42:	e8 3d 0c 00 00       	call   c0005a84 <ff_memfree>
c0004e47:	83 c4 10             	add    esp,0x10
c0004e4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e4e:	83 c4 54             	add    esp,0x54
c0004e51:	5b                   	pop    ebx
c0004e52:	5e                   	pop    esi
c0004e53:	c3                   	ret    

c0004e54 <f_getlabel>:
c0004e54:	55                   	push   ebp
c0004e55:	31 c9                	xor    ecx,ecx
c0004e57:	57                   	push   edi
c0004e58:	56                   	push   esi
c0004e59:	53                   	push   ebx
c0004e5a:	83 ec 5c             	sub    esp,0x5c
c0004e5d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e65:	e8 2e d5 ff ff       	call   c0002398 <mount_volume>
c0004e6a:	89 c6                	mov    esi,eax
c0004e6c:	85 c0                	test   eax,eax
c0004e6e:	0f 85 27 01 00 00    	jne    c0004f9b <f_getlabel+0x147>
c0004e74:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e79:	0f 84 d1 00 00 00    	je     c0004f50 <f_getlabel+0xfc>
c0004e7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e83:	31 d2                	xor    edx,edx
c0004e85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e89:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004e91:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e95:	e8 79 e3 ff ff       	call   c0003213 <dir_sdi>
c0004e9a:	85 c0                	test   eax,eax
c0004e9c:	0f 85 a2 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004ea2:	ba 01 00 00 00       	mov    edx,0x1
c0004ea7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eab:	e8 54 e7 ff ff       	call   c0003604 <dir_read>
c0004eb0:	85 c0                	test   eax,eax
c0004eb2:	0f 85 8c 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004eb8:	31 db                	xor    ebx,ebx
c0004eba:	31 c9                	xor    ecx,ecx
c0004ebc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ec0:	8d 79 01             	lea    edi,[ecx+0x1]
c0004ec3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004ec8:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004ecd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ed1:	e8 ca ce ff ff       	call   c0001da0 <dbc_1st>
c0004ed6:	85 c0                	test   eax,eax
c0004ed8:	74 16                	je     c0004ef0 <f_getlabel+0x9c>
c0004eda:	83 ff 0b             	cmp    edi,0xb
c0004edd:	74 11                	je     c0004ef0 <f_getlabel+0x9c>
c0004edf:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004ee4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ee8:	8d 79 02             	lea    edi,[ecx+0x2]
c0004eeb:	c1 e0 08             	shl    eax,0x8
c0004eee:	09 c2                	or     edx,eax
c0004ef0:	0f b7 d2             	movzx  edx,dx
c0004ef3:	50                   	push   eax
c0004ef4:	50                   	push   eax
c0004ef5:	68 b5 01 00 00       	push   0x1b5
c0004efa:	52                   	push   edx
c0004efb:	e8 3c 0c 00 00       	call   c0005b3c <ff_oem2uni>
c0004f00:	83 c4 10             	add    esp,0x10
c0004f03:	66 85 c0             	test   ax,ax
c0004f06:	74 25                	je     c0004f2d <f_getlabel+0xd9>
c0004f08:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004f0c:	0f b7 c0             	movzx  eax,ax
c0004f0f:	01 da                	add    edx,ebx
c0004f11:	b9 04 00 00 00       	mov    ecx,0x4
c0004f16:	e8 51 cf ff ff       	call   c0001e6c <put_utf>
c0004f1b:	84 c0                	test   al,al
c0004f1d:	74 0e                	je     c0004f2d <f_getlabel+0xd9>
c0004f1f:	0f b6 c0             	movzx  eax,al
c0004f22:	01 c3                	add    ebx,eax
c0004f24:	83 ff 0b             	cmp    edi,0xb
c0004f27:	74 06                	je     c0004f2f <f_getlabel+0xdb>
c0004f29:	89 f9                	mov    ecx,edi
c0004f2b:	eb 8f                	jmp    c0004ebc <f_getlabel+0x68>
c0004f2d:	31 db                	xor    ebx,ebx
c0004f2f:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004f33:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004f36:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004f3a:	74 14                	je     c0004f50 <f_getlabel+0xfc>
c0004f3c:	4b                   	dec    ebx
c0004f3d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004f40:	74 f1                	je     c0004f33 <f_getlabel+0xdf>
c0004f42:	eb 0c                	jmp    c0004f50 <f_getlabel+0xfc>
c0004f44:	83 f8 04             	cmp    eax,0x4
c0004f47:	75 50                	jne    c0004f99 <f_getlabel+0x145>
c0004f49:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f4d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f50:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f55:	74 44                	je     c0004f9b <f_getlabel+0x147>
c0004f57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f5b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f5e:	e8 e2 d2 ff ff       	call   c0002245 <move_window>
c0004f63:	89 c6                	mov    esi,eax
c0004f65:	85 c0                	test   eax,eax
c0004f67:	75 32                	jne    c0004f9b <f_getlabel+0x147>
c0004f69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f6d:	b8 43 00 00 00       	mov    eax,0x43
c0004f72:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f74:	80 f9 03             	cmp    cl,0x3
c0004f77:	74 0f                	je     c0004f88 <f_getlabel+0x134>
c0004f79:	31 c0                	xor    eax,eax
c0004f7b:	80 f9 04             	cmp    cl,0x4
c0004f7e:	0f 94 c0             	sete   al
c0004f81:	48                   	dec    eax
c0004f82:	83 e0 c3             	and    eax,0xffffffc3
c0004f85:	83 c0 64             	add    eax,0x64
c0004f88:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004f8c:	e8 9b cd ff ff       	call   c0001d2c <ld_dword>
c0004f91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004f95:	89 07                	mov    DWORD PTR [edi],eax
c0004f97:	eb 02                	jmp    c0004f9b <f_getlabel+0x147>
c0004f99:	89 c6                	mov    esi,eax
c0004f9b:	83 c4 5c             	add    esp,0x5c
c0004f9e:	89 f0                	mov    eax,esi
c0004fa0:	5b                   	pop    ebx
c0004fa1:	5e                   	pop    esi
c0004fa2:	5f                   	pop    edi
c0004fa3:	5d                   	pop    ebp
c0004fa4:	c3                   	ret    

c0004fa5 <f_setlabel>:
c0004fa5:	56                   	push   esi
c0004fa6:	b9 02 00 00 00       	mov    ecx,0x2
c0004fab:	53                   	push   ebx
c0004fac:	83 ec 54             	sub    esp,0x54
c0004faf:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fb3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fb7:	e8 dc d3 ff ff       	call   c0002398 <mount_volume>
c0004fbc:	89 c6                	mov    esi,eax
c0004fbe:	85 c0                	test   eax,eax
c0004fc0:	0f 85 67 01 00 00    	jne    c000512d <f_setlabel+0x188>
c0004fc6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004fcb:	ba 20 00 00 00       	mov    edx,0x20
c0004fd0:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004fd4:	31 db                	xor    ebx,ebx
c0004fd6:	e8 85 cd ff ff       	call   c0001d60 <mem_set>
c0004fdb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fdf:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004fe2:	76 5b                	jbe    c000503f <f_setlabel+0x9a>
c0004fe4:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fe8:	e8 b9 cd ff ff       	call   c0001da6 <tchar2uni>
c0004fed:	3d ff ff 00 00       	cmp    eax,0xffff
c0004ff2:	76 0a                	jbe    c0004ffe <f_setlabel+0x59>
c0004ff4:	be 06 00 00 00       	mov    esi,0x6
c0004ff9:	e9 2f 01 00 00       	jmp    c000512d <f_setlabel+0x188>
c0004ffe:	83 ec 0c             	sub    esp,0xc
c0005001:	50                   	push   eax
c0005002:	e8 ad 0b 00 00       	call   c0005bb4 <ff_wtoupper>
c0005007:	5a                   	pop    edx
c0005008:	59                   	pop    ecx
c0005009:	68 b5 01 00 00       	push   0x1b5
c000500e:	50                   	push   eax
c000500f:	e8 88 0a 00 00       	call   c0005a9c <ff_uni2oem>
c0005014:	83 c4 10             	add    esp,0x10
c0005017:	89 c6                	mov    esi,eax
c0005019:	66 85 c0             	test   ax,ax
c000501c:	74 d6                	je     c0004ff4 <f_setlabel+0x4f>
c000501e:	0f b7 d0             	movzx  edx,ax
c0005021:	b8 d0 cf 01 c0       	mov    eax,0xc001cfd0
c0005026:	e8 63 cd ff ff       	call   c0001d8e <chk_chr>
c000502b:	85 c0                	test   eax,eax
c000502d:	75 c5                	jne    c0004ff4 <f_setlabel+0x4f>
c000502f:	66 81 fe ff 00       	cmp    si,0xff
c0005034:	0f 87 c9 00 00 00    	ja     c0005103 <f_setlabel+0x15e>
c000503a:	e9 e4 00 00 00       	jmp    c0005123 <f_setlabel+0x17e>
c000503f:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005044:	74 ae                	je     c0004ff4 <f_setlabel+0x4f>
c0005046:	85 db                	test   ebx,ebx
c0005048:	74 0e                	je     c0005058 <f_setlabel+0xb3>
c000504a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000504d:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005052:	75 04                	jne    c0005058 <f_setlabel+0xb3>
c0005054:	89 c3                	mov    ebx,eax
c0005056:	eb ee                	jmp    c0005046 <f_setlabel+0xa1>
c0005058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000505c:	31 d2                	xor    edx,edx
c000505e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005062:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000506a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000506e:	e8 a0 e1 ff ff       	call   c0003213 <dir_sdi>
c0005073:	89 c6                	mov    esi,eax
c0005075:	85 c0                	test   eax,eax
c0005077:	0f 85 b0 00 00 00    	jne    c000512d <f_setlabel+0x188>
c000507d:	ba 01 00 00 00       	mov    edx,0x1
c0005082:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005086:	e8 79 e5 ff ff       	call   c0003604 <dir_read>
c000508b:	85 c0                	test   eax,eax
c000508d:	75 18                	jne    c00050a7 <f_setlabel+0x102>
c000508f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005093:	85 db                	test   ebx,ebx
c0005095:	74 0b                	je     c00050a2 <f_setlabel+0xfd>
c0005097:	b9 0b 00 00 00       	mov    ecx,0xb
c000509c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050a0:	eb 47                	jmp    c00050e9 <f_setlabel+0x144>
c00050a2:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00050a5:	eb 47                	jmp    c00050ee <f_setlabel+0x149>
c00050a7:	83 f8 04             	cmp    eax,0x4
c00050aa:	75 53                	jne    c00050ff <f_setlabel+0x15a>
c00050ac:	85 db                	test   ebx,ebx
c00050ae:	74 7d                	je     c000512d <f_setlabel+0x188>
c00050b0:	ba 01 00 00 00       	mov    edx,0x1
c00050b5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b9:	e8 e5 e4 ff ff       	call   c00035a3 <dir_alloc>
c00050be:	89 c6                	mov    esi,eax
c00050c0:	85 c0                	test   eax,eax
c00050c2:	75 69                	jne    c000512d <f_setlabel+0x188>
c00050c4:	b9 20 00 00 00       	mov    ecx,0x20
c00050c9:	31 d2                	xor    edx,edx
c00050cb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cf:	e8 8c cc ff ff       	call   c0001d60 <mem_set>
c00050d4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050d8:	b9 0b 00 00 00       	mov    ecx,0xb
c00050dd:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00050e1:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	e8 5d cc ff ff       	call   c0001d4b <mem_cpy>
c00050ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050f2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050fa:	e8 86 db ff ff       	call   c0002c85 <sync_fs>
c00050ff:	89 c6                	mov    esi,eax
c0005101:	eb 2a                	jmp    c000512d <f_setlabel+0x188>
c0005103:	83 fb 09             	cmp    ebx,0x9
c0005106:	0f 87 e8 fe ff ff    	ja     c0004ff4 <f_setlabel+0x4f>
c000510c:	89 f0                	mov    eax,esi
c000510e:	66 c1 e8 08          	shr    ax,0x8
c0005112:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005116:	43                   	inc    ebx
c0005117:	89 f0                	mov    eax,esi
c0005119:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000511d:	43                   	inc    ebx
c000511e:	e9 b8 fe ff ff       	jmp    c0004fdb <f_setlabel+0x36>
c0005123:	83 fb 0a             	cmp    ebx,0xa
c0005126:	76 ef                	jbe    c0005117 <f_setlabel+0x172>
c0005128:	e9 c7 fe ff ff       	jmp    c0004ff4 <f_setlabel+0x4f>
c000512d:	89 f0                	mov    eax,esi
c000512f:	83 c4 54             	add    esp,0x54
c0005132:	5b                   	pop    ebx
c0005133:	5e                   	pop    esi
c0005134:	c3                   	ret    

c0005135 <f_expand>:
c0005135:	55                   	push   ebp
c0005136:	57                   	push   edi
c0005137:	56                   	push   esi
c0005138:	53                   	push   ebx
c0005139:	83 ec 2c             	sub    esp,0x2c
c000513c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005140:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005144:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005148:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000514c:	89 d8                	mov    eax,ebx
c000514e:	e8 48 d0 ff ff       	call   c000219b <validate>
c0005153:	89 c6                	mov    esi,eax
c0005155:	85 c0                	test   eax,eax
c0005157:	0f 85 2e 01 00 00    	jne    c000528b <f_expand+0x156>
c000515d:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005161:	85 f6                	test   esi,esi
c0005163:	0f 85 22 01 00 00    	jne    c000528b <f_expand+0x156>
c0005169:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000516e:	75 0a                	jne    c000517a <f_expand+0x45>
c0005170:	be 07 00 00 00       	mov    esi,0x7
c0005175:	e9 11 01 00 00       	jmp    c000528b <f_expand+0x156>
c000517a:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000517e:	75 f0                	jne    c0005170 <f_expand+0x3b>
c0005180:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005184:	74 ea                	je     c0005170 <f_expand+0x3b>
c0005186:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c000518a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000518e:	c1 e1 09             	shl    ecx,0x9
c0005191:	8d 41 ff             	lea    eax,[ecx-0x1]
c0005194:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005198:	0f 95 c0             	setne  al
c000519b:	31 d2                	xor    edx,edx
c000519d:	0f b6 c0             	movzx  eax,al
c00051a0:	89 c7                	mov    edi,eax
c00051a2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00051a6:	f7 f1                	div    ecx
c00051a8:	01 f8                	add    eax,edi
c00051aa:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00051ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051b1:	83 ff 01             	cmp    edi,0x1
c00051b4:	76 05                	jbe    c00051bb <f_expand+0x86>
c00051b6:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051b9:	77 05                	ja     c00051c0 <f_expand+0x8b>
c00051bb:	bf 02 00 00 00       	mov    edi,0x2
c00051c0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051c3:	89 fd                	mov    ebp,edi
c00051c5:	31 c9                	xor    ecx,ecx
c00051c7:	89 ea                	mov    edx,ebp
c00051c9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051cf:	45                   	inc    ebp
c00051d0:	e8 3c df ff ff       	call   c0003111 <get_fat.isra.2>
c00051d5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051dd:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c00051e0:	77 05                	ja     c00051e7 <f_expand+0xb2>
c00051e2:	bd 02 00 00 00       	mov    ebp,0x2
c00051e7:	83 f8 01             	cmp    eax,0x1
c00051ea:	74 20                	je     c000520c <f_expand+0xd7>
c00051ec:	83 f8 ff             	cmp    eax,0xffffffff
c00051ef:	74 22                	je     c0005213 <f_expand+0xde>
c00051f1:	85 c0                	test   eax,eax
c00051f3:	75 09                	jne    c00051fe <f_expand+0xc9>
c00051f5:	41                   	inc    ecx
c00051f6:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00051fa:	75 07                	jne    c0005203 <f_expand+0xce>
c00051fc:	eb 1c                	jmp    c000521a <f_expand+0xe5>
c00051fe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005201:	31 c9                	xor    ecx,ecx
c0005203:	39 fd                	cmp    ebp,edi
c0005205:	75 c0                	jne    c00051c7 <f_expand+0x92>
c0005207:	e9 64 ff ff ff       	jmp    c0005170 <f_expand+0x3b>
c000520c:	be 02 00 00 00       	mov    esi,0x2
c0005211:	eb 78                	jmp    c000528b <f_expand+0x156>
c0005213:	be 01 00 00 00       	mov    esi,0x1
c0005218:	eb 71                	jmp    c000528b <f_expand+0x156>
c000521a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000521f:	74 2b                	je     c000524c <f_expand+0x117>
c0005221:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005224:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005228:	85 ed                	test   ebp,ebp
c000522a:	74 24                	je     c0005250 <f_expand+0x11b>
c000522c:	83 c9 ff             	or     ecx,0xffffffff
c000522f:	83 fd 01             	cmp    ebp,0x1
c0005232:	74 03                	je     c0005237 <f_expand+0x102>
c0005234:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005237:	89 fa                	mov    edx,edi
c0005239:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000523d:	e8 59 d4 ff ff       	call   c000269b <put_fat>
c0005242:	85 c0                	test   eax,eax
c0005244:	75 43                	jne    c0005289 <f_expand+0x154>
c0005246:	89 f8                	mov    eax,edi
c0005248:	4d                   	dec    ebp
c0005249:	47                   	inc    edi
c000524a:	eb dc                	jmp    c0005228 <f_expand+0xf3>
c000524c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000524f:	48                   	dec    eax
c0005250:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005254:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005259:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000525c:	74 2d                	je     c000528b <f_expand+0x156>
c000525e:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005262:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005265:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005268:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000526c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000526f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005272:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005275:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005278:	39 c8                	cmp    eax,ecx
c000527a:	77 0f                	ja     c000528b <f_expand+0x156>
c000527c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005280:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c0005284:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005287:	eb 02                	jmp    c000528b <f_expand+0x156>
c0005289:	89 c6                	mov    esi,eax
c000528b:	83 c4 2c             	add    esp,0x2c
c000528e:	89 f0                	mov    eax,esi
c0005290:	5b                   	pop    ebx
c0005291:	5e                   	pop    esi
c0005292:	5f                   	pop    edi
c0005293:	5d                   	pop    ebp
c0005294:	c3                   	ret    

c0005295 <f_mkfs>:
c0005295:	55                   	push   ebp
c0005296:	57                   	push   edi
c0005297:	bf 0b 00 00 00       	mov    edi,0xb
c000529c:	56                   	push   esi
c000529d:	53                   	push   ebx
c000529e:	83 ec 4c             	sub    esp,0x4c
c00052a1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00052a5:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00052a9:	8d 44 24 60          	lea    eax,[esp+0x60]
c00052ad:	e8 9c ce ff ff       	call   c000214e <get_ldnumber>
c00052b2:	85 c0                	test   eax,eax
c00052b4:	0f 88 a6 07 00 00    	js     c0005a60 <f_mkfs+0x7cb>
c00052ba:	8b 14 85 a0 14 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdeb60]
c00052c1:	85 d2                	test   edx,edx
c00052c3:	74 03                	je     c00052c8 <f_mkfs+0x33>
c00052c5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052c8:	85 db                	test   ebx,ebx
c00052ca:	75 05                	jne    c00052d1 <f_mkfs+0x3c>
c00052cc:	bb c0 cf 01 c0       	mov    ebx,0xc001cfc0
c00052d1:	83 ec 0c             	sub    esp,0xc
c00052d4:	0f b6 c0             	movzx  eax,al
c00052d7:	bf 03 00 00 00       	mov    edi,0x3
c00052dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00052e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00052e4:	e8 e8 c9 ff ff       	call   c0001cd1 <disk_initialize>
c00052e9:	83 c4 10             	add    esp,0x10
c00052ec:	a8 01                	test   al,0x1
c00052ee:	0f 85 6c 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c00052f4:	bf 0a 00 00 00       	mov    edi,0xa
c00052f9:	a8 04                	test   al,0x4
c00052fb:	0f 85 5f 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c0005301:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005304:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005308:	85 c0                	test   eax,eax
c000530a:	75 20                	jne    c000532c <f_mkfs+0x97>
c000530c:	51                   	push   ecx
c000530d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005311:	50                   	push   eax
c0005312:	6a 03                	push   0x3
c0005314:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005318:	e8 e3 c9 ff ff       	call   c0001d00 <disk_ioctl>
c000531d:	83 c4 10             	add    esp,0x10
c0005320:	85 c0                	test   eax,eax
c0005322:	74 08                	je     c000532c <f_mkfs+0x97>
c0005324:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000532c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005330:	8d 42 ff             	lea    eax,[edx-0x1]
c0005333:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005338:	77 04                	ja     c000533e <f_mkfs+0xa9>
c000533a:	85 c2                	test   edx,eax
c000533c:	74 08                	je     c0005346 <f_mkfs+0xb1>
c000533e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005346:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005349:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000534d:	48                   	dec    eax
c000534e:	3c 01                	cmp    al,0x1
c0005350:	76 05                	jbe    c0005357 <f_mkfs+0xc2>
c0005352:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005357:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000535a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000535e:	48                   	dec    eax
c000535f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005364:	77 07                	ja     c000536d <f_mkfs+0xd8>
c0005366:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000536b:	74 08                	je     c0005375 <f_mkfs+0xe0>
c000536d:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005375:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005378:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000537e:	77 07                	ja     c0005387 <f_mkfs+0xf2>
c0005380:	8d 47 ff             	lea    eax,[edi-0x1]
c0005383:	85 f8                	test   eax,edi
c0005385:	74 02                	je     c0005389 <f_mkfs+0xf4>
c0005387:	31 ff                	xor    edi,edi
c0005389:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c0005391:	77 0a                	ja     c000539d <f_mkfs+0x108>
c0005393:	bf 11 00 00 00       	mov    edi,0x11
c0005398:	e9 c3 06 00 00       	jmp    c0005a60 <f_mkfs+0x7cb>
c000539d:	8a 1b                	mov    bl,BYTE PTR [ebx]
c000539f:	89 ee                	mov    esi,ebp
c00053a1:	85 ed                	test   ebp,ebp
c00053a3:	75 1b                	jne    c00053c0 <f_mkfs+0x12b>
c00053a5:	83 ec 0c             	sub    esp,0xc
c00053a8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00053ac:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053b1:	50                   	push   eax
c00053b2:	e8 b5 06 00 00       	call   c0005a6c <ff_memalloc>
c00053b7:	83 c4 10             	add    esp,0x10
c00053ba:	89 c6                	mov    esi,eax
c00053bc:	85 c0                	test   eax,eax
c00053be:	74 d3                	je     c0005393 <f_mkfs+0xfe>
c00053c0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053c8:	52                   	push   edx
c00053c9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053cd:	50                   	push   eax
c00053ce:	6a 01                	push   0x1
c00053d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053d4:	e8 27 c9 ff ff       	call   c0001d00 <disk_ioctl>
c00053d9:	83 c4 10             	add    esp,0x10
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 25 06 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00053e4:	88 d8                	mov    al,bl
c00053e6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00053ee:	24 08                	and    al,0x8
c00053f0:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c00053f4:	75 18                	jne    c000540e <f_mkfs+0x179>
c00053f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00053fa:	83 f8 3f             	cmp    eax,0x3f
c00053fd:	76 0f                	jbe    c000540e <f_mkfs+0x179>
c00053ff:	83 e8 3f             	sub    eax,0x3f
c0005402:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c000540a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000540e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005412:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005416:	83 f8 7f             	cmp    eax,0x7f
c0005419:	0f 86 52 02 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000541f:	b9 80 00 00 00       	mov    ecx,0x80
c0005424:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000542a:	77 05                	ja     c0005431 <f_mkfs+0x19c>
c000542c:	89 f9                	mov    ecx,edi
c000542e:	c1 e9 09             	shr    ecx,0x9
c0005431:	88 d8                	mov    al,bl
c0005433:	83 e0 01             	and    eax,0x1
c0005436:	80 e3 02             	and    bl,0x2
c0005439:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000543d:	74 0a                	je     c0005449 <f_mkfs+0x1b4>
c000543f:	84 c0                	test   al,al
c0005441:	0f 84 4c 01 00 00    	je     c0005593 <f_mkfs+0x2fe>
c0005447:	eb 38                	jmp    c0005481 <f_mkfs+0x1ec>
c0005449:	bf 13 00 00 00       	mov    edi,0x13
c000544e:	84 c0                	test   al,al
c0005450:	75 2f                	jne    c0005481 <f_mkfs+0x1ec>
c0005452:	e9 c9 05 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c0005457:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000545c:	0f 85 08 02 00 00    	jne    c000566a <f_mkfs+0x3d5>
c0005462:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005467:	0f 86 e1 01 00 00    	jbe    c000564e <f_mkfs+0x3b9>
c000546d:	85 c9                	test   ecx,ecx
c000546f:	0f 85 bd 05 00 00    	jne    c0005a32 <f_mkfs+0x79d>
c0005475:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005478:	83 f9 40             	cmp    ecx,0x40
c000547b:	0f 87 c1 05 00 00    	ja     c0005a42 <f_mkfs+0x7ad>
c0005481:	89 cf                	mov    edi,ecx
c0005483:	85 c9                	test   ecx,ecx
c0005485:	75 1d                	jne    c00054a4 <f_mkfs+0x20f>
c0005487:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000548b:	ba a0 cf 01 c0       	mov    edx,0xc001cfa0
c0005490:	c1 eb 0c             	shr    ebx,0xc
c0005493:	bf 01 00 00 00       	mov    edi,0x1
c0005498:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000549b:	66 85 c0             	test   ax,ax
c000549e:	0f 85 5f 01 00 00    	jne    c0005603 <f_mkfs+0x36e>
c00054a4:	31 d2                	xor    edx,edx
c00054a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00054aa:	f7 f7                	div    edi
c00054ac:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054b1:	0f 86 5e 01 00 00    	jbe    c0005615 <f_mkfs+0x380>
c00054b7:	83 c0 02             	add    eax,0x2
c00054ba:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054bf:	01 c0                	add    eax,eax
c00054c1:	05 ff 01 00 00       	add    eax,0x1ff
c00054c6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054ce:	c1 e8 09             	shr    eax,0x9
c00054d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054d9:	c1 e0 05             	shl    eax,0x5
c00054dc:	c1 e8 09             	shr    eax,0x9
c00054df:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00054e3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00054e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00054ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00054f0:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c00054f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00054f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00054fc:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005501:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005505:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005509:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000550d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005511:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005515:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005519:	f7 d8                	neg    eax
c000551b:	21 c3                	and    ebx,eax
c000551d:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005521:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005526:	0f 85 fc 00 00 00    	jne    c0005628 <f_mkfs+0x393>
c000552c:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005530:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005534:	89 f8                	mov    eax,edi
c0005536:	c1 e0 04             	shl    eax,0x4
c0005539:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000553d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005541:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005545:	0f 82 26 01 00 00    	jb     c0005671 <f_mkfs+0x3dc>
c000554b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000554f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005553:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005557:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000555c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005560:	29 d0                	sub    eax,edx
c0005562:	31 d2                	xor    edx,edx
c0005564:	f7 f7                	div    edi
c0005566:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000556b:	89 c3                	mov    ebx,eax
c000556d:	0f 85 e4 fe ff ff    	jne    c0005457 <f_mkfs+0x1c2>
c0005573:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005578:	0f 87 02 01 00 00    	ja     c0005680 <f_mkfs+0x3eb>
c000557e:	85 c9                	test   ecx,ecx
c0005580:	0f 85 eb 00 00 00    	jne    c0005671 <f_mkfs+0x3dc>
c0005586:	83 ff 01             	cmp    edi,0x1
c0005589:	0f 86 e2 00 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000558f:	89 f9                	mov    ecx,edi
c0005591:	d1 e9                	shr    ecx,1
c0005593:	89 cb                	mov    ebx,ecx
c0005595:	85 c9                	test   ecx,ecx
c0005597:	75 26                	jne    c00055bf <f_mkfs+0x32a>
c0005599:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000559d:	ba b0 cf 01 c0       	mov    edx,0xc001cfb0
c00055a2:	c1 eb 11             	shr    ebx,0x11
c00055a5:	b9 01 00 00 00       	mov    ecx,0x1
c00055aa:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00055ad:	66 85 c0             	test   ax,ax
c00055b0:	74 0b                	je     c00055bd <f_mkfs+0x328>
c00055b2:	83 c2 02             	add    edx,0x2
c00055b5:	39 d8                	cmp    eax,ebx
c00055b7:	77 04                	ja     c00055bd <f_mkfs+0x328>
c00055b9:	01 c9                	add    ecx,ecx
c00055bb:	eb ed                	jmp    c00055aa <f_mkfs+0x315>
c00055bd:	31 db                	xor    ebx,ebx
c00055bf:	31 d2                	xor    edx,edx
c00055c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055c5:	f7 f1                	div    ecx
c00055c7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055ce:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055d3:	c1 ea 09             	shr    edx,0x9
c00055d6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055db:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055df:	0f 87 8c 00 00 00    	ja     c0005671 <f_mkfs+0x3dc>
c00055e5:	89 cf                	mov    edi,ecx
c00055e7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00055ef:	89 d9                	mov    ecx,ebx
c00055f1:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c00055f9:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c00055fe:	e9 e0 fe ff ff       	jmp    c00054e3 <f_mkfs+0x24e>
c0005603:	83 c2 02             	add    edx,0x2
c0005606:	39 d8                	cmp    eax,ebx
c0005608:	0f 87 96 fe ff ff    	ja     c00054a4 <f_mkfs+0x20f>
c000560e:	01 ff                	add    edi,edi
c0005610:	e9 83 fe ff ff       	jmp    c0005498 <f_mkfs+0x203>
c0005615:	8d 04 40             	lea    eax,[eax+eax*2]
c0005618:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000561d:	40                   	inc    eax
c000561e:	d1 e8                	shr    eax,1
c0005620:	83 c0 03             	add    eax,0x3
c0005623:	e9 99 fe ff ff       	jmp    c00054c1 <f_mkfs+0x22c>
c0005628:	31 d2                	xor    edx,edx
c000562a:	89 d8                	mov    eax,ebx
c000562c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005630:	85 d2                	test   edx,edx
c0005632:	74 09                	je     c000563d <f_mkfs+0x3a8>
c0005634:	4b                   	dec    ebx
c0005635:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005639:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000563d:	89 d8                	mov    eax,ebx
c000563f:	31 d2                	xor    edx,edx
c0005641:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005645:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005649:	e9 e6 fe ff ff       	jmp    c0005534 <f_mkfs+0x29f>
c000564e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005653:	77 2b                	ja     c0005680 <f_mkfs+0x3eb>
c0005655:	85 c9                	test   ecx,ecx
c0005657:	75 18                	jne    c0005671 <f_mkfs+0x3dc>
c0005659:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000565c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005662:	0f 86 19 fe ff ff    	jbe    c0005481 <f_mkfs+0x1ec>
c0005668:	eb 07                	jmp    c0005671 <f_mkfs+0x3dc>
c000566a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000566f:	76 0a                	jbe    c000567b <f_mkfs+0x3e6>
c0005671:	bf 0e 00 00 00       	mov    edi,0xe
c0005676:	e9 a5 03 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c000567b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005680:	31 d2                	xor    edx,edx
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	89 f0                	mov    eax,esi
c0005689:	e8 d2 c6 ff ff       	call   c0001d60 <mem_set>
c000568e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005693:	ba 52 cf 01 c0       	mov    edx,0xc001cf52
c0005698:	89 f0                	mov    eax,esi
c000569a:	e8 ac c6 ff ff       	call   c0001d4b <mem_cpy>
c000569f:	8d 46 0b             	lea    eax,[esi+0xb]
c00056a2:	ba 00 02 00 00       	mov    edx,0x200
c00056a7:	e8 98 c6 ff ff       	call   c0001d44 <st_word>
c00056ac:	89 f8                	mov    eax,edi
c00056ae:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056b3:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056b6:	8d 46 0e             	lea    eax,[esi+0xe]
c00056b9:	e8 86 c6 ff ff       	call   c0001d44 <st_word>
c00056be:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056c2:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056c7:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056ca:	75 08                	jne    c00056d4 <f_mkfs+0x43f>
c00056cc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056d8:	8d 46 11             	lea    eax,[esi+0x11]
c00056db:	e8 64 c6 ff ff       	call   c0001d44 <st_word>
c00056e0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e4:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00056ea:	77 0a                	ja     c00056f6 <f_mkfs+0x461>
c00056ec:	8d 46 13             	lea    eax,[esi+0x13]
c00056ef:	e8 50 c6 ff ff       	call   c0001d44 <st_word>
c00056f4:	eb 08                	jmp    c00056fe <f_mkfs+0x469>
c00056f6:	8d 46 20             	lea    eax,[esi+0x20]
c00056f9:	e8 4a c6 ff ff       	call   c0001d48 <st_dword>
c00056fe:	8d 46 18             	lea    eax,[esi+0x18]
c0005701:	ba 3f 00 00 00       	mov    edx,0x3f
c0005706:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c000570a:	e8 35 c6 ff ff       	call   c0001d44 <st_word>
c000570f:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005712:	ba ff 00 00 00       	mov    edx,0xff
c0005717:	e8 28 c6 ff ff       	call   c0001d44 <st_word>
c000571c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000571f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005723:	e8 20 c6 ff ff       	call   c0001d48 <st_dword>
c0005728:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000572d:	75 57                	jne    c0005786 <f_mkfs+0x4f1>
c000572f:	8d 46 43             	lea    eax,[esi+0x43]
c0005732:	ba 00 00 21 50       	mov    edx,0x50210000
c0005737:	e8 0c c6 ff ff       	call   c0001d48 <st_dword>
c000573c:	8d 46 24             	lea    eax,[esi+0x24]
c000573f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005743:	e8 00 c6 ff ff       	call   c0001d48 <st_dword>
c0005748:	8d 46 2c             	lea    eax,[esi+0x2c]
c000574b:	ba 02 00 00 00       	mov    edx,0x2
c0005750:	e8 f3 c5 ff ff       	call   c0001d48 <st_dword>
c0005755:	8d 46 30             	lea    eax,[esi+0x30]
c0005758:	ba 01 00 00 00       	mov    edx,0x1
c000575d:	e8 e2 c5 ff ff       	call   c0001d44 <st_word>
c0005762:	8d 46 32             	lea    eax,[esi+0x32]
c0005765:	ba 06 00 00 00       	mov    edx,0x6
c000576a:	e8 d5 c5 ff ff       	call   c0001d44 <st_word>
c000576f:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005773:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005777:	8d 46 47             	lea    eax,[esi+0x47]
c000577a:	b9 13 00 00 00       	mov    ecx,0x13
c000577f:	ba 5e cf 01 c0       	mov    edx,0xc001cf5e
c0005784:	eb 2f                	jmp    c00057b5 <f_mkfs+0x520>
c0005786:	8d 46 27             	lea    eax,[esi+0x27]
c0005789:	ba 00 00 21 50       	mov    edx,0x50210000
c000578e:	e8 b5 c5 ff ff       	call   c0001d48 <st_dword>
c0005793:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c0005798:	8d 46 16             	lea    eax,[esi+0x16]
c000579b:	e8 a4 c5 ff ff       	call   c0001d44 <st_word>
c00057a0:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00057a4:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00057a8:	8d 46 2b             	lea    eax,[esi+0x2b]
c00057ab:	b9 13 00 00 00       	mov    ecx,0x13
c00057b0:	ba 72 cf 01 c0       	mov    edx,0xc001cf72
c00057b5:	e8 91 c5 ff ff       	call   c0001d4b <mem_cpy>
c00057ba:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057c0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057c9:	e8 76 c5 ff ff       	call   c0001d44 <st_word>
c00057ce:	6a 01                	push   0x1
c00057d0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057d4:	56                   	push   esi
c00057d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057d9:	e8 0c c5 ff ff       	call   c0001cea <disk_write>
c00057de:	83 c4 10             	add    esp,0x10
c00057e1:	85 c0                	test   eax,eax
c00057e3:	0f 85 20 02 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00057e9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00057ee:	0f 85 98 00 00 00    	jne    c000588c <f_mkfs+0x5f7>
c00057f4:	6a 01                	push   0x1
c00057f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057fa:	83 c0 06             	add    eax,0x6
c00057fd:	50                   	push   eax
c00057fe:	56                   	push   esi
c00057ff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005803:	e8 e2 c4 ff ff       	call   c0001cea <disk_write>
c0005808:	b9 00 02 00 00       	mov    ecx,0x200
c000580d:	31 d2                	xor    edx,edx
c000580f:	89 f0                	mov    eax,esi
c0005811:	e8 4a c5 ff ff       	call   c0001d60 <mem_set>
c0005816:	ba 52 52 61 41       	mov    edx,0x41615252
c000581b:	89 f0                	mov    eax,esi
c000581d:	e8 26 c5 ff ff       	call   c0001d48 <st_dword>
c0005822:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005828:	ba 72 72 41 61       	mov    edx,0x61417272
c000582d:	e8 16 c5 ff ff       	call   c0001d48 <st_dword>
c0005832:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005835:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000583b:	e8 08 c5 ff ff       	call   c0001d48 <st_dword>
c0005840:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005846:	ba 02 00 00 00       	mov    edx,0x2
c000584b:	e8 f8 c4 ff ff       	call   c0001d48 <st_dword>
c0005850:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005855:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000585b:	e8 e4 c4 ff ff       	call   c0001d44 <st_word>
c0005860:	6a 01                	push   0x1
c0005862:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005866:	83 c0 07             	add    eax,0x7
c0005869:	50                   	push   eax
c000586a:	56                   	push   esi
c000586b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000586f:	e8 76 c4 ff ff       	call   c0001cea <disk_write>
c0005874:	83 c4 20             	add    esp,0x20
c0005877:	6a 01                	push   0x1
c0005879:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000587d:	40                   	inc    eax
c000587e:	50                   	push   eax
c000587f:	56                   	push   esi
c0005880:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005884:	e8 61 c4 ff ff       	call   c0001cea <disk_write>
c0005889:	83 c4 10             	add    esp,0x10
c000588c:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005890:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0005894:	c1 e8 09             	shr    eax,0x9
c0005897:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000589d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058a1:	31 d2                	xor    edx,edx
c00058a3:	31 db                	xor    ebx,ebx
c00058a5:	89 f0                	mov    eax,esi
c00058a7:	e8 b4 c4 ff ff       	call   c0001d60 <mem_set>
c00058ac:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058b1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058b9:	0f 94 c3             	sete   bl
c00058bc:	4b                   	dec    ebx
c00058bd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058c3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058c9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058ce:	75 21                	jne    c00058f1 <f_mkfs+0x65c>
c00058d0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058d5:	89 f0                	mov    eax,esi
c00058d7:	e8 6c c4 ff ff       	call   c0001d48 <st_dword>
c00058dc:	8d 46 04             	lea    eax,[esi+0x4]
c00058df:	83 ca ff             	or     edx,0xffffffff
c00058e2:	e8 61 c4 ff ff       	call   c0001d48 <st_dword>
c00058e7:	8d 46 08             	lea    eax,[esi+0x8]
c00058ea:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00058ef:	eb 04                	jmp    c00058f5 <f_mkfs+0x660>
c00058f1:	89 da                	mov    edx,ebx
c00058f3:	89 f0                	mov    eax,esi
c00058f5:	e8 4e c4 ff ff       	call   c0001d48 <st_dword>
c00058fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005902:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005906:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000590a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000590e:	76 08                	jbe    c0005918 <f_mkfs+0x683>
c0005910:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005914:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005918:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000591c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005920:	56                   	push   esi
c0005921:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005925:	e8 c0 c3 ff ff       	call   c0001cea <disk_write>
c000592a:	83 c4 10             	add    esp,0x10
c000592d:	85 c0                	test   eax,eax
c000592f:	0f 85 d4 00 00 00    	jne    c0005a09 <f_mkfs+0x774>
c0005935:	b9 00 02 00 00       	mov    ecx,0x200
c000593a:	31 d2                	xor    edx,edx
c000593c:	89 f0                	mov    eax,esi
c000593e:	e8 1d c4 ff ff       	call   c0001d60 <mem_set>
c0005943:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005947:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000594b:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000594f:	75 b1                	jne    c0005902 <f_mkfs+0x66d>
c0005951:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005955:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000595d:	40                   	inc    eax
c000595e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005962:	0f 87 61 ff ff ff    	ja     c00058c9 <f_mkfs+0x634>
c0005968:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000596d:	74 04                	je     c0005973 <f_mkfs+0x6de>
c000596f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005973:	89 fb                	mov    ebx,edi
c0005975:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005979:	76 04                	jbe    c000597f <f_mkfs+0x6ea>
c000597b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000597f:	53                   	push   ebx
c0005980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005984:	56                   	push   esi
c0005985:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005989:	e8 5c c3 ff ff       	call   c0001cea <disk_write>
c000598e:	83 c4 10             	add    esp,0x10
c0005991:	85 c0                	test   eax,eax
c0005993:	75 74                	jne    c0005a09 <f_mkfs+0x774>
c0005995:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005999:	29 df                	sub    edi,ebx
c000599b:	75 d6                	jne    c0005973 <f_mkfs+0x6de>
c000599d:	b1 0c                	mov    cl,0xc
c000599f:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00059a4:	74 18                	je     c00059be <f_mkfs+0x729>
c00059a6:	b1 06                	mov    cl,0x6
c00059a8:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059b0:	77 0c                	ja     c00059be <f_mkfs+0x729>
c00059b2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059b7:	0f 94 c1             	sete   cl
c00059ba:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059be:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059c3:	75 2d                	jne    c00059f2 <f_mkfs+0x75d>
c00059c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059c9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059d1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059d5:	0f b6 c9             	movzx  ecx,cl
c00059d8:	83 ec 0c             	sub    esp,0xc
c00059db:	56                   	push   esi
c00059dc:	8d 54 24 48          	lea    edx,[esp+0x48]
c00059e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059e4:	e8 4c d3 ff ff       	call   c0002d35 <create_partition>
c00059e9:	83 c4 10             	add    esp,0x10
c00059ec:	89 c7                	mov    edi,eax
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 2e                	jne    c0005a20 <f_mkfs+0x78b>
c00059f2:	31 ff                	xor    edi,edi
c00059f4:	50                   	push   eax
c00059f5:	6a 00                	push   0x0
c00059f7:	6a 00                	push   0x0
c00059f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059fd:	e8 fe c2 ff ff       	call   c0001d00 <disk_ioctl>
c0005a02:	83 c4 10             	add    esp,0x10
c0005a05:	85 c0                	test   eax,eax
c0005a07:	74 17                	je     c0005a20 <f_mkfs+0x78b>
c0005a09:	85 ed                	test   ebp,ebp
c0005a0b:	75 0c                	jne    c0005a19 <f_mkfs+0x784>
c0005a0d:	83 ec 0c             	sub    esp,0xc
c0005a10:	56                   	push   esi
c0005a11:	e8 6e 00 00 00       	call   c0005a84 <ff_memfree>
c0005a16:	83 c4 10             	add    esp,0x10
c0005a19:	bf 01 00 00 00       	mov    edi,0x1
c0005a1e:	eb 40                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a20:	85 ed                	test   ebp,ebp
c0005a22:	75 3c                	jne    c0005a60 <f_mkfs+0x7cb>
c0005a24:	83 ec 0c             	sub    esp,0xc
c0005a27:	56                   	push   esi
c0005a28:	e8 57 00 00 00       	call   c0005a84 <ff_memfree>
c0005a2d:	83 c4 10             	add    esp,0x10
c0005a30:	eb 2e                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a32:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a37:	0f 85 56 fb ff ff    	jne    c0005593 <f_mkfs+0x2fe>
c0005a3d:	e9 2f fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a42:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a47:	0f 85 4c fb ff ff    	jne    c0005599 <f_mkfs+0x304>
c0005a4d:	89 cf                	mov    edi,ecx
c0005a4f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a55:	0f 86 49 fa ff ff    	jbe    c00054a4 <f_mkfs+0x20f>
c0005a5b:	e9 11 fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a60:	83 c4 4c             	add    esp,0x4c
c0005a63:	89 f8                	mov    eax,edi
c0005a65:	5b                   	pop    ebx
c0005a66:	5e                   	pop    esi
c0005a67:	5f                   	pop    edi
c0005a68:	5d                   	pop    ebp
c0005a69:	c3                   	ret    
c0005a6a:	66 90                	xchg   ax,ax

c0005a6c <ff_memalloc>:
c0005a6c:	83 ec 0c             	sub    esp,0xc
c0005a6f:	83 ec 0c             	sub    esp,0xc
c0005a72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a76:	e8 3e 1d 00 00       	call   c00077b9 <malloc>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	83 c4 0c             	add    esp,0xc
c0005a81:	c3                   	ret    
c0005a82:	66 90                	xchg   ax,ax

c0005a84 <ff_memfree>:
c0005a84:	83 ec 0c             	sub    esp,0xc
c0005a87:	83 ec 0c             	sub    esp,0xc
c0005a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a8e:	e8 36 1d 00 00       	call   c00077c9 <free>
c0005a93:	83 c4 10             	add    esp,0x10
c0005a96:	90                   	nop
c0005a97:	83 c4 0c             	add    esp,0xc
c0005a9a:	c3                   	ret    
c0005a9b:	90                   	nop

c0005a9c <ff_uni2oem>:
c0005a9c:	83 ec 14             	sub    esp,0x14
c0005a9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005aa3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005aa7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005aae:	c7 44 24 0c a0 d3 01 c0 	mov    DWORD PTR [esp+0xc],0xc001d3a0
c0005ab6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005abb:	77 0b                	ja     c0005ac8 <ff_uni2oem+0x2c>
c0005abd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ac1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ac6:	eb 68                	jmp    c0005b30 <ff_uni2oem+0x94>
c0005ac8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005ad0:	77 5e                	ja     c0005b30 <ff_uni2oem+0x94>
c0005ad2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005ad8:	75 56                	jne    c0005b30 <ff_uni2oem+0x94>
c0005ada:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ae1:	eb 0d                	jmp    c0005af0 <ff_uni2oem+0x54>
c0005ae3:	90                   	nop
c0005ae4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ae9:	40                   	inc    eax
c0005aea:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005aef:	90                   	nop
c0005af0:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005af6:	77 24                	ja     c0005b1c <ff_uni2oem+0x80>
c0005af8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005afd:	25 ff ff 00 00       	and    eax,0xffff
c0005b02:	01 c0                	add    eax,eax
c0005b04:	89 c2                	mov    edx,eax
c0005b06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b0a:	01 d0                	add    eax,edx
c0005b0c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b0f:	25 ff ff 00 00       	and    eax,0xffff
c0005b14:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b18:	75 ca                	jne    c0005ae4 <ff_uni2oem+0x48>
c0005b1a:	66 90                	xchg   ax,ax
c0005b1c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b21:	83 e8 80             	sub    eax,0xffffff80
c0005b24:	25 ff 00 00 00       	and    eax,0xff
c0005b29:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b2e:	66 90                	xchg   ax,ax
c0005b30:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b35:	83 c4 14             	add    esp,0x14
c0005b38:	c3                   	ret    
c0005b39:	8d 76 00             	lea    esi,[esi+0x0]

c0005b3c <ff_oem2uni>:
c0005b3c:	83 ec 18             	sub    esp,0x18
c0005b3f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b47:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b4c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b50:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b57:	c7 44 24 10 a0 d3 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d3a0
c0005b5f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b65:	77 0d                	ja     c0005b74 <ff_oem2uni+0x38>
c0005b67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b6b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b70:	eb 36                	jmp    c0005ba8 <ff_oem2uni+0x6c>
c0005b72:	66 90                	xchg   ax,ax
c0005b74:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b7a:	75 2c                	jne    c0005ba8 <ff_oem2uni+0x6c>
c0005b7c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005b83:	77 23                	ja     c0005ba8 <ff_oem2uni+0x6c>
c0005b85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b89:	25 ff ff 00 00       	and    eax,0xffff
c0005b8e:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005b93:	01 c0                	add    eax,eax
c0005b95:	89 c2                	mov    edx,eax
c0005b97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005b9b:	01 d0                	add    eax,edx
c0005b9d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ba0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ba8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005bad:	83 c4 18             	add    esp,0x18
c0005bb0:	c3                   	ret    
c0005bb1:	8d 76 00             	lea    esi,[esi+0x0]

c0005bb4 <ff_wtoupper>:
c0005bb4:	83 ec 10             	sub    esp,0x10
c0005bb7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005bbf:	0f 87 77 01 00 00    	ja     c0005d3c <ff_wtoupper+0x188>
c0005bc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005bc9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bce:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bd5:	77 09                	ja     c0005be0 <ff_wtoupper+0x2c>
c0005bd7:	b8 a0 d1 01 c0       	mov    eax,0xc001d1a0
c0005bdc:	eb 0a                	jmp    c0005be8 <ff_wtoupper+0x34>
c0005bde:	66 90                	xchg   ax,ax
c0005be0:	b8 e0 d0 01 c0       	mov    eax,0xc001d0e0
c0005be5:	8d 76 00             	lea    esi,[esi+0x0]
c0005be8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005bec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005bf0:	8d 50 02             	lea    edx,[eax+0x2]
c0005bf3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005bf7:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bfa:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005bff:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005c05:	0f 84 21 01 00 00    	je     c0005d2c <ff_wtoupper+0x178>
c0005c0b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c10:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c15:	0f 82 11 01 00 00    	jb     c0005d2c <ff_wtoupper+0x178>
c0005c1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c1f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c26:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c29:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c2e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c33:	66 c1 e8 08          	shr    ax,0x8
c0005c37:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c3c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c43:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c48:	31 d2                	xor    edx,edx
c0005c4a:	66 89 c2             	mov    dx,ax
c0005c4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c51:	31 c9                	xor    ecx,ecx
c0005c53:	66 89 c1             	mov    cx,ax
c0005c56:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c5b:	25 ff ff 00 00       	and    eax,0xffff
c0005c60:	01 c8                	add    eax,ecx
c0005c62:	39 c2                	cmp    edx,eax
c0005c64:	0f 8d 9a 00 00 00    	jge    c0005d04 <ff_wtoupper+0x150>
c0005c6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c6e:	25 ff ff 00 00       	and    eax,0xffff
c0005c73:	83 f8 08             	cmp    eax,0x8
c0005c76:	0f 87 ac 00 00 00    	ja     c0005d28 <ff_wtoupper+0x174>
c0005c7c:	8b 04 85 a0 d0 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe2f60]
c0005c83:	ff e0                	jmp    eax
c0005c85:	8d 76 00             	lea    esi,[esi+0x0]
c0005c88:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c8d:	31 d2                	xor    edx,edx
c0005c8f:	66 89 c2             	mov    dx,ax
c0005c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c96:	25 ff ff 00 00       	and    eax,0xffff
c0005c9b:	29 c2                	sub    edx,eax
c0005c9d:	89 d0                	mov    eax,edx
c0005c9f:	01 c0                	add    eax,eax
c0005ca1:	89 c2                	mov    edx,eax
c0005ca3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ca7:	01 d0                	add    eax,edx
c0005ca9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cac:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005cb1:	eb 4d                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cb3:	90                   	nop
c0005cb4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cb9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cbd:	83 e0 01             	and    eax,0x1
c0005cc0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005cc5:	eb 39                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cc7:	90                   	nop
c0005cc8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cce:	eb 30                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cd6:	eb 28                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cde:	eb 20                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce0:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005ce6:	eb 18                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce8:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005cee:	eb 10                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf0:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005cf6:	eb 08                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf8:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005cff:	90                   	nop
c0005d00:	eb 26                	jmp    c0005d28 <ff_wtoupper+0x174>
c0005d02:	66 90                	xchg   ax,ax
c0005d04:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005d0a:	0f 85 dc fe ff ff    	jne    c0005bec <ff_wtoupper+0x38>
c0005d10:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d15:	25 ff ff 00 00       	and    eax,0xffff
c0005d1a:	01 c0                	add    eax,eax
c0005d1c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d20:	e9 c7 fe ff ff       	jmp    c0005bec <ff_wtoupper+0x38>
c0005d25:	8d 76 00             	lea    esi,[esi+0x0]
c0005d28:	90                   	nop
c0005d29:	8d 76 00             	lea    esi,[esi+0x0]
c0005d2c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d31:	25 ff ff 00 00       	and    eax,0xffff
c0005d36:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d3a:	66 90                	xchg   ax,ax
c0005d3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d40:	83 c4 10             	add    esp,0x10
c0005d43:	c3                   	ret    

c0005d44 <utf2ucs>:
c0005d44:	57                   	push   edi
c0005d45:	31 c9                	xor    ecx,ecx
c0005d47:	56                   	push   esi
c0005d48:	89 d7                	mov    edi,edx
c0005d4a:	53                   	push   ebx
c0005d4b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005d4f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005d53:	89 de                	mov    esi,ebx
c0005d55:	c1 fe 08             	sar    esi,0x8
c0005d58:	89 f2                	mov    edx,esi
c0005d5a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005d5d:	41                   	inc    ecx
c0005d5e:	85 db                	test   ebx,ebx
c0005d60:	75 e9                	jne    c0005d4b <utf2ucs+0x7>
c0005d62:	5b                   	pop    ebx
c0005d63:	5e                   	pop    esi
c0005d64:	5f                   	pop    edi
c0005d65:	c3                   	ret    

c0005d66 <ucs2utfn>:
c0005d66:	83 e1 fe             	and    ecx,0xfffffffe
c0005d69:	01 d1                	add    ecx,edx
c0005d6b:	39 d1                	cmp    ecx,edx
c0005d6d:	75 04                	jne    c0005d73 <ucs2utfn+0xd>
c0005d6f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005d72:	c3                   	ret    
c0005d73:	57                   	push   edi
c0005d74:	56                   	push   esi
c0005d75:	53                   	push   ebx
c0005d76:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005d79:	83 c2 02             	add    edx,0x2
c0005d7c:	89 de                	mov    esi,ebx
c0005d7e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005d82:	c1 e6 08             	shl    esi,0x8
c0005d85:	09 f3                	or     ebx,esi
c0005d87:	83 fb 3b             	cmp    ebx,0x3b
c0005d8a:	74 51                	je     c0005ddd <ucs2utfn+0x77>
c0005d8c:	83 fb 7f             	cmp    ebx,0x7f
c0005d8f:	7f 05                	jg     c0005d96 <ucs2utfn+0x30>
c0005d91:	88 18                	mov    BYTE PTR [eax],bl
c0005d93:	40                   	inc    eax
c0005d94:	eb 43                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005d96:	89 de                	mov    esi,ebx
c0005d98:	89 df                	mov    edi,ebx
c0005d9a:	c1 fe 06             	sar    esi,0x6
c0005d9d:	83 e7 3f             	and    edi,0x3f
c0005da0:	83 cf 80             	or     edi,0xffffff80
c0005da3:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005da9:	7f 12                	jg     c0005dbd <ucs2utfn+0x57>
c0005dab:	89 f3                	mov    ebx,esi
c0005dad:	83 c0 02             	add    eax,0x2
c0005db0:	83 cb c0             	or     ebx,0xffffffc0
c0005db3:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005db6:	89 fb                	mov    ebx,edi
c0005db8:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dbb:	eb 1c                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005dbd:	c1 fb 0c             	sar    ebx,0xc
c0005dc0:	83 e6 3f             	and    esi,0x3f
c0005dc3:	83 cb e0             	or     ebx,0xffffffe0
c0005dc6:	83 c0 03             	add    eax,0x3
c0005dc9:	88 58 fd             	mov    BYTE PTR [eax-0x3],bl
c0005dcc:	89 f3                	mov    ebx,esi
c0005dce:	83 cb 80             	or     ebx,0xffffff80
c0005dd1:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005dd4:	89 fb                	mov    ebx,edi
c0005dd6:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dd9:	39 d1                	cmp    ecx,edx
c0005ddb:	75 99                	jne    c0005d76 <ucs2utfn+0x10>
c0005ddd:	5b                   	pop    ebx
c0005dde:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005de1:	5e                   	pop    esi
c0005de2:	5f                   	pop    edi
c0005de3:	c3                   	ret    

c0005de4 <isjoliet>:
c0005de4:	31 d2                	xor    edx,edx
c0005de6:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005de9:	75 22                	jne    c0005e0d <isjoliet+0x29>
c0005deb:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005def:	75 1c                	jne    c0005e0d <isjoliet+0x29>
c0005df1:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005df4:	ba 02 00 00 00       	mov    edx,0x2
c0005df9:	3c 43                	cmp    al,0x43
c0005dfb:	74 10                	je     c0005e0d <isjoliet+0x29>
c0005dfd:	ba 03 00 00 00       	mov    edx,0x3
c0005e02:	3c 45                	cmp    al,0x45
c0005e04:	74 07                	je     c0005e0d <isjoliet+0x29>
c0005e06:	31 d2                	xor    edx,edx
c0005e08:	3c 40                	cmp    al,0x40
c0005e0a:	0f 94 c2             	sete   dl
c0005e0d:	89 d0                	mov    eax,edx
c0005e0f:	c3                   	ret    

c0005e10 <htohl_32>:
c0005e10:	8b 00                	mov    eax,DWORD PTR [eax]
c0005e12:	c3                   	ret    

c0005e13 <iso_733>:
c0005e13:	eb fb                	jmp    c0005e10 <htohl_32>

c0005e15 <bclear_cache>:
c0005e15:	31 c0                	xor    eax,eax
c0005e17:	8b 14 85 20 10 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdefe0]
c0005e1e:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e24:	8b 14 85 80 10 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdef80]
c0005e2b:	40                   	inc    eax
c0005e2c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e32:	83 f8 10             	cmp    eax,0x10
c0005e35:	75 e0                	jne    c0005e17 <bclear_cache+0x2>
c0005e37:	c3                   	ret    

c0005e38 <bgrad_cache>:
c0005e38:	83 fa 0e             	cmp    edx,0xe
c0005e3b:	77 16                	ja     c0005e53 <bgrad_cache+0x1b>
c0005e3d:	53                   	push   ebx
c0005e3e:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0005e41:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0005e45:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0005e48:	42                   	inc    edx
c0005e49:	83 fa 0f             	cmp    edx,0xf
c0005e4c:	75 f3                	jne    c0005e41 <bgrad_cache+0x9>
c0005e4e:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0005e51:	5b                   	pop    ebx
c0005e52:	c3                   	ret    
c0005e53:	c3                   	ret    

c0005e54 <bclear>:
c0005e54:	eb bf                	jmp    c0005e15 <bclear_cache>

c0005e56 <iso_break_all>:
c0005e56:	31 c0                	xor    eax,eax
c0005e58:	c7 80 d0 15 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdea30],0x1
c0005e62:	05 94 00 00 00       	add    eax,0x94
c0005e67:	3d 40 09 00 00       	cmp    eax,0x940
c0005e6c:	75 ea                	jne    c0005e58 <iso_break_all+0x2>
c0005e6e:	c3                   	ret    

c0005e6f <ucscompare>:
c0005e6f:	55                   	push   ebp
c0005e70:	57                   	push   edi
c0005e71:	89 c7                	mov    edi,eax
c0005e73:	56                   	push   esi
c0005e74:	89 d6                	mov    esi,edx
c0005e76:	53                   	push   ebx
c0005e77:	31 d2                	xor    edx,edx
c0005e79:	83 ec 1c             	sub    esp,0x1c
c0005e7c:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0005e80:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0005e85:	c1 e3 08             	shl    ebx,0x8
c0005e88:	09 c3                	or     ebx,eax
c0005e8a:	39 ca                	cmp    edx,ecx
c0005e8c:	7d 42                	jge    c0005ed0 <ucscompare+0x61>
c0005e8e:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0005e92:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0005e97:	c1 e0 08             	shl    eax,0x8
c0005e9a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e9e:	09 e8                	or     eax,ebp
c0005ea0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005ea4:	83 f8 3b             	cmp    eax,0x3b
c0005ea7:	74 27                	je     c0005ed0 <ucscompare+0x61>
c0005ea9:	83 ec 0c             	sub    esp,0xc
c0005eac:	50                   	push   eax
c0005ead:	e8 1e aa ff ff       	call   c00008d0 <tolower>
c0005eb2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0005eb5:	89 c5                	mov    ebp,eax
c0005eb7:	e8 14 aa ff ff       	call   c00008d0 <tolower>
c0005ebc:	83 c4 10             	add    esp,0x10
c0005ebf:	39 c5                	cmp    ebp,eax
c0005ec1:	75 20                	jne    c0005ee3 <ucscompare+0x74>
c0005ec3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005ec7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005ecb:	83 c2 02             	add    edx,0x2
c0005ece:	eb ac                	jmp    c0005e7c <ucscompare+0xd>
c0005ed0:	85 db                	test   ebx,ebx
c0005ed2:	0f 95 c2             	setne  dl
c0005ed5:	31 c0                	xor    eax,eax
c0005ed7:	83 fb 2f             	cmp    ebx,0x2f
c0005eda:	0f 95 c0             	setne  al
c0005edd:	21 d0                	and    eax,edx
c0005edf:	f7 d8                	neg    eax
c0005ee1:	eb 03                	jmp    c0005ee6 <ucscompare+0x77>
c0005ee3:	83 c8 ff             	or     eax,0xffffffff
c0005ee6:	83 c4 1c             	add    esp,0x1c
c0005ee9:	5b                   	pop    ebx
c0005eea:	5e                   	pop    esi
c0005eeb:	5f                   	pop    edi
c0005eec:	5d                   	pop    ebp
c0005eed:	c3                   	ret    

c0005eee <fncompare>:
c0005eee:	55                   	push   ebp
c0005eef:	57                   	push   edi
c0005ef0:	89 c7                	mov    edi,eax
c0005ef2:	56                   	push   esi
c0005ef3:	89 ce                	mov    esi,ecx
c0005ef5:	53                   	push   ebx
c0005ef6:	31 db                	xor    ebx,ebx
c0005ef8:	83 ec 1c             	sub    esp,0x1c
c0005efb:	39 d3                	cmp    ebx,edx
c0005efd:	7d 43                	jge    c0005f42 <fncompare+0x54>
c0005eff:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0005f03:	3c 3b                	cmp    al,0x3b
c0005f05:	74 3b                	je     c0005f42 <fncompare+0x54>
c0005f07:	3c 2e                	cmp    al,0x2e
c0005f09:	75 0e                	jne    c0005f19 <fncompare+0x2b>
c0005f0b:	8d 4a ff             	lea    ecx,[edx-0x1]
c0005f0e:	39 d9                	cmp    ecx,ebx
c0005f10:	74 30                	je     c0005f42 <fncompare+0x54>
c0005f12:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0005f17:	74 29                	je     c0005f42 <fncompare+0x54>
c0005f19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f1d:	83 ec 0c             	sub    esp,0xc
c0005f20:	50                   	push   eax
c0005f21:	e8 aa a9 ff ff       	call   c00008d0 <tolower>
c0005f26:	89 c5                	mov    ebp,eax
c0005f28:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0005f2c:	89 04 24             	mov    DWORD PTR [esp],eax
c0005f2f:	e8 9c a9 ff ff       	call   c00008d0 <tolower>
c0005f34:	83 c4 10             	add    esp,0x10
c0005f37:	39 c5                	cmp    ebp,eax
c0005f39:	75 1d                	jne    c0005f58 <fncompare+0x6a>
c0005f3b:	43                   	inc    ebx
c0005f3c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005f40:	eb b9                	jmp    c0005efb <fncompare+0xd>
c0005f42:	8a 14 1e             	mov    dl,BYTE PTR [esi+ebx*1]
c0005f45:	84 d2                	test   dl,dl
c0005f47:	0f 95 c1             	setne  cl
c0005f4a:	31 c0                	xor    eax,eax
c0005f4c:	80 fa 2f             	cmp    dl,0x2f
c0005f4f:	0f 95 c0             	setne  al
c0005f52:	21 c8                	and    eax,ecx
c0005f54:	f7 d8                	neg    eax
c0005f56:	eb 03                	jmp    c0005f5b <fncompare+0x6d>
c0005f58:	83 c8 ff             	or     eax,0xffffffff
c0005f5b:	83 c4 1c             	add    esp,0x1c
c0005f5e:	5b                   	pop    ebx
c0005f5f:	5e                   	pop    esi
c0005f60:	5f                   	pop    edi
c0005f61:	5d                   	pop    ebp
c0005f62:	c3                   	ret    

c0005f63 <isoReadDiscSector>:
c0005f63:	83 ec 0c             	sub    esp,0xc
c0005f66:	0f be 05 60 10 02 c0 	movsx  eax,BYTE PTR ds:0xc0021060
c0005f6d:	50                   	push   eax
c0005f6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f7a:	e8 cd 18 01 00       	call   c001784c <isoReadDiscSectorHelper>
c0005f7f:	83 c4 1c             	add    esp,0x1c
c0005f82:	c3                   	ret    

c0005f83 <bread_cache>:
c0005f83:	55                   	push   ebp
c0005f84:	57                   	push   edi
c0005f85:	89 d7                	mov    edi,edx
c0005f87:	56                   	push   esi
c0005f88:	ba 0f 00 00 00       	mov    edx,0xf
c0005f8d:	53                   	push   ebx
c0005f8e:	89 c6                	mov    esi,eax
c0005f90:	83 ec 0c             	sub    esp,0xc
c0005f93:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0005f96:	39 38                	cmp    DWORD PTR [eax],edi
c0005f98:	74 3c                	je     c0005fd6 <bread_cache+0x53>
c0005f9a:	4a                   	dec    edx
c0005f9b:	83 fa ff             	cmp    edx,0xffffffff
c0005f9e:	75 f3                	jne    c0005f93 <bread_cache+0x10>
c0005fa0:	31 db                	xor    ebx,ebx
c0005fa2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0005fa5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c0005fa8:	74 08                	je     c0005fb2 <bread_cache+0x2f>
c0005faa:	43                   	inc    ebx
c0005fab:	83 fb 10             	cmp    ebx,0x10
c0005fae:	75 f2                	jne    c0005fa2 <bread_cache+0x1f>
c0005fb0:	31 db                	xor    ebx,ebx
c0005fb2:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c0005fb5:	50                   	push   eax
c0005fb6:	6a 01                	push   0x1
c0005fb8:	57                   	push   edi
c0005fb9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fbc:	83 c0 04             	add    eax,0x4
c0005fbf:	50                   	push   eax
c0005fc0:	e8 9e ff ff ff       	call   c0005f63 <isoReadDiscSector>
c0005fc5:	83 c4 10             	add    esp,0x10
c0005fc8:	83 c9 ff             	or     ecx,0xffffffff
c0005fcb:	85 c0                	test   eax,eax
c0005fcd:	78 13                	js     c0005fe2 <bread_cache+0x5f>
c0005fcf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fd2:	89 da                	mov    edx,ebx
c0005fd4:	89 38                	mov    DWORD PTR [eax],edi
c0005fd6:	89 f0                	mov    eax,esi
c0005fd8:	e8 5b fe ff ff       	call   c0005e38 <bgrad_cache>
c0005fdd:	b9 0f 00 00 00       	mov    ecx,0xf
c0005fe2:	83 c4 0c             	add    esp,0xc
c0005fe5:	89 c8                	mov    eax,ecx
c0005fe7:	5b                   	pop    ebx
c0005fe8:	5e                   	pop    esi
c0005fe9:	5f                   	pop    edi
c0005fea:	5d                   	pop    ebp
c0005feb:	c3                   	ret    

c0005fec <biread>:
c0005fec:	89 c2                	mov    edx,eax
c0005fee:	b8 80 10 02 c0       	mov    eax,0xc0021080
c0005ff3:	eb 8e                	jmp    c0005f83 <bread_cache>

c0005ff5 <bdread>:
c0005ff5:	89 c2                	mov    edx,eax
c0005ff7:	b8 20 10 02 c0       	mov    eax,0xc0021020
c0005ffc:	eb 85                	jmp    c0005f83 <bread_cache>

c0005ffe <strnicmp>:
c0005ffe:	55                   	push   ebp
c0005fff:	57                   	push   edi
c0006000:	56                   	push   esi
c0006001:	31 f6                	xor    esi,esi
c0006003:	53                   	push   ebx
c0006004:	83 ec 0c             	sub    esp,0xc
c0006007:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000600b:	3b 74 24 28          	cmp    esi,DWORD PTR [esp+0x28]
c000600f:	74 42                	je     c0006053 <strnicmp+0x55>
c0006011:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006015:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
c0006019:	84 c0                	test   al,al
c000601b:	74 36                	je     c0006053 <strnicmp+0x55>
c000601d:	8a 14 33             	mov    dl,BYTE PTR [ebx+esi*1]
c0006020:	84 d2                	test   dl,dl
c0006022:	74 2f                	je     c0006053 <strnicmp+0x55>
c0006024:	38 d0                	cmp    al,dl
c0006026:	8d 6e 01             	lea    ebp,[esi+0x1]
c0006029:	75 04                	jne    c000602f <strnicmp+0x31>
c000602b:	89 ee                	mov    esi,ebp
c000602d:	eb dc                	jmp    c000600b <strnicmp+0xd>
c000602f:	83 ec 0c             	sub    esp,0xc
c0006032:	50                   	push   eax
c0006033:	e8 98 a8 ff ff       	call   c00008d0 <tolower>
c0006038:	89 c7                	mov    edi,eax
c000603a:	0f be 04 33          	movsx  eax,BYTE PTR [ebx+esi*1]
c000603e:	89 ee                	mov    esi,ebp
c0006040:	89 04 24             	mov    DWORD PTR [esp],eax
c0006043:	e8 88 a8 ff ff       	call   c00008d0 <tolower>
c0006048:	83 c4 10             	add    esp,0x10
c000604b:	29 c7                	sub    edi,eax
c000604d:	89 f8                	mov    eax,edi
c000604f:	74 ba                	je     c000600b <strnicmp+0xd>
c0006051:	eb 02                	jmp    c0006055 <strnicmp+0x57>
c0006053:	31 c0                	xor    eax,eax
c0006055:	83 c4 0c             	add    esp,0xc
c0006058:	5b                   	pop    ebx
c0006059:	5e                   	pop    esi
c000605a:	5f                   	pop    edi
c000605b:	5d                   	pop    ebp
c000605c:	c3                   	ret    

c000605d <find_object>:
c000605d:	55                   	push   ebp
c000605e:	89 c5                	mov    ebp,eax
c0006060:	57                   	push   edi
c0006061:	56                   	push   esi
c0006062:	53                   	push   ebx
c0006063:	89 d3                	mov    ebx,edx
c0006065:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000606b:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006072:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006076:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000607a:	83 3d b4 1e 02 c0 00 	cmp    DWORD PTR ds:0xc0021eb4,0x0
c0006081:	74 0b                	je     c000608e <find_object+0x31>
c0006083:	89 ea                	mov    edx,ebp
c0006085:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006089:	e8 b6 fc ff ff       	call   c0005d44 <utf2ucs>
c000608e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006091:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006095:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000609a:	7e 11                	jle    c00060ad <find_object+0x50>
c000609c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060a0:	e8 47 ff ff ff       	call   c0005fec <biread>
c00060a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060a9:	85 c0                	test   eax,eax
c00060ab:	79 07                	jns    c00060b4 <find_object+0x57>
c00060ad:	31 db                	xor    ebx,ebx
c00060af:	e9 5b 01 00 00       	jmp    c000620f <find_object+0x1b2>
c00060b4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00060bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060c0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00060c4:	8b 04 85 80 10 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdef80]
c00060cb:	8d 5c 38 04          	lea    ebx,[eax+edi*1+0x4]
c00060cf:	8a 03                	mov    al,BYTE PTR [ebx]
c00060d1:	84 c0                	test   al,al
c00060d3:	75 0e                	jne    c00060e3 <find_object+0x86>
c00060d5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00060d9:	81 6c 24 10 00 08 00 00 	sub    DWORD PTR [esp+0x10],0x800
c00060e1:	eb b2                	jmp    c0006095 <find_object+0x38>
c00060e3:	8b 35 b4 1e 02 c0    	mov    esi,DWORD PTR ds:0xc0021eb4
c00060e9:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00060ed:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00060f1:	89 ca                	mov    edx,ecx
c00060f3:	85 f6                	test   esi,esi
c00060f5:	74 2b                	je     c0006122 <find_object+0xc5>
c00060f7:	8d 43 21             	lea    eax,[ebx+0x21]
c00060fa:	8d 54 24 20          	lea    edx,[esp+0x20]
c00060fe:	e8 6c fd ff ff       	call   c0005e6f <ucscompare>
c0006103:	85 c0                	test   eax,eax
c0006105:	0f 84 c1 00 00 00    	je     c00061cc <find_object+0x16f>
c000610b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000610e:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006112:	81 7c 24 0c ff 07 00 00 	cmp    DWORD PTR [esp+0xc],0x7ff
c000611a:	0f 8e dc 00 00 00    	jle    c00061fc <find_object+0x19f>
c0006120:	eb b3                	jmp    c00060d5 <find_object+0x78>
c0006122:	0f b6 f0             	movzx  esi,al
c0006125:	8d 7c 0b 21          	lea    edi,[ebx+ecx*1+0x21]
c0006129:	29 ce                	sub    esi,ecx
c000612b:	80 e2 01             	and    dl,0x1
c000612e:	74 05                	je     c0006135 <find_object+0xd8>
c0006130:	83 ee 21             	sub    esi,0x21
c0006133:	eb 55                	jmp    c000618a <find_object+0x12d>
c0006135:	47                   	inc    edi
c0006136:	83 ee 22             	sub    esi,0x22
c0006139:	eb 4f                	jmp    c000618a <find_object+0x12d>
c000613b:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c000613e:	48                   	dec    eax
c000613f:	3c 01                	cmp    al,0x1
c0006141:	77 4c                	ja     c000618f <find_object+0x132>
c0006143:	50                   	push   eax
c0006144:	6a 02                	push   0x2
c0006146:	68 a0 d4 01 c0       	push   0xc001d4a0
c000614b:	57                   	push   edi
c000614c:	e8 0f a6 ff ff       	call   c0000760 <strncmp>
c0006151:	83 c4 10             	add    esp,0x10
c0006154:	85 c0                	test   eax,eax
c0006156:	75 2a                	jne    c0006182 <find_object+0x125>
c0006158:	0f be 57 02          	movsx  edx,BYTE PTR [edi+0x2]
c000615c:	8d 42 fb             	lea    eax,[edx-0x5]
c000615f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006163:	50                   	push   eax
c0006164:	8d 47 05             	lea    eax,[edi+0x5]
c0006167:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000616b:	50                   	push   eax
c000616c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006170:	50                   	push   eax
c0006171:	e8 ba a4 ff ff       	call   c0000630 <strncpy>
c0006176:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000617a:	c6 44 04 30 00       	mov    BYTE PTR [esp+eax*1+0x30],0x0
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006186:	29 c6                	sub    esi,eax
c0006188:	01 c7                	add    edi,eax
c000618a:	83 fe 03             	cmp    esi,0x3
c000618d:	7f ac                	jg     c000613b <find_object+0xde>
c000618f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0006194:	7e 40                	jle    c00061d6 <find_object+0x179>
c0006196:	51                   	push   ecx
c0006197:	51                   	push   ecx
c0006198:	6a 2f                	push   0x2f
c000619a:	55                   	push   ebp
c000619b:	e8 90 a5 ff ff       	call   c0000730 <strchr>
c00061a0:	83 c4 10             	add    esp,0x10
c00061a3:	85 c0                	test   eax,eax
c00061a5:	74 04                	je     c00061ab <find_object+0x14e>
c00061a7:	29 e8                	sub    eax,ebp
c00061a9:	eb 0c                	jmp    c00061b7 <find_object+0x15a>
c00061ab:	83 ec 0c             	sub    esp,0xc
c00061ae:	55                   	push   ebp
c00061af:	e8 8c a3 ff ff       	call   c0000540 <strlen>
c00061b4:	83 c4 10             	add    esp,0x10
c00061b7:	52                   	push   edx
c00061b8:	50                   	push   eax
c00061b9:	55                   	push   ebp
c00061ba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00061be:	50                   	push   eax
c00061bf:	e8 3a fe ff ff       	call   c0005ffe <strnicmp>
c00061c4:	83 c4 10             	add    esp,0x10
c00061c7:	e9 37 ff ff ff       	jmp    c0006103 <find_object+0xa6>
c00061cc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061d0:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c00061d4:	eb 1e                	jmp    c00061f4 <find_object+0x197>
c00061d6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00061da:	8d 43 21             	lea    eax,[ebx+0x21]
c00061dd:	89 e9                	mov    ecx,ebp
c00061df:	e8 0a fd ff ff       	call   c0005eee <fncompare>
c00061e4:	85 c0                	test   eax,eax
c00061e6:	0f 85 1f ff ff ff    	jne    c000610b <find_object+0xae>
c00061ec:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061f0:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00061f4:	0f 85 11 ff ff ff    	jne    c000610b <find_object+0xae>
c00061fa:	eb 13                	jmp    c000620f <find_object+0x1b2>
c00061fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006200:	39 4c 24 10          	cmp    DWORD PTR [esp+0x10],ecx
c0006204:	0f 8f b2 fe ff ff    	jg     c00060bc <find_object+0x5f>
c000620a:	e9 c6 fe ff ff       	jmp    c00060d5 <find_object+0x78>
c000620f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006215:	89 d8                	mov    eax,ebx
c0006217:	5b                   	pop    ebx
c0006218:	5e                   	pop    esi
c0006219:	5f                   	pop    edi
c000621a:	5d                   	pop    ebp
c000621b:	c3                   	ret    

c000621c <find_object_path>:
c000621c:	55                   	push   ebp
c000621d:	57                   	push   edi
c000621e:	89 d7                	mov    edi,edx
c0006220:	56                   	push   esi
c0006221:	89 c6                	mov    esi,eax
c0006223:	53                   	push   ebx
c0006224:	89 cb                	mov    ebx,ecx
c0006226:	83 ec 0c             	sub    esp,0xc
c0006229:	50                   	push   eax
c000622a:	50                   	push   eax
c000622b:	6a 2f                	push   0x2f
c000622d:	56                   	push   esi
c000622e:	e8 fd a4 ff ff       	call   c0000730 <strchr>
c0006233:	83 c4 10             	add    esp,0x10
c0006236:	89 c5                	mov    ebp,eax
c0006238:	85 c0                	test   eax,eax
c000623a:	74 3a                	je     c0006276 <find_object_path+0x5a>
c000623c:	39 ee                	cmp    esi,ebp
c000623e:	74 31                	je     c0006271 <find_object_path+0x55>
c0006240:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006243:	e8 cb fb ff ff       	call   c0005e13 <iso_733>
c0006248:	89 c2                	mov    edx,eax
c000624a:	8d 43 02             	lea    eax,[ebx+0x2]
c000624d:	e8 c1 fb ff ff       	call   c0005e13 <iso_733>
c0006252:	83 ec 0c             	sub    esp,0xc
c0006255:	89 c1                	mov    ecx,eax
c0006257:	52                   	push   edx
c0006258:	89 f0                	mov    eax,esi
c000625a:	ba 01 00 00 00       	mov    edx,0x1
c000625f:	e8 f9 fd ff ff       	call   c000605d <find_object>
c0006264:	83 c4 10             	add    esp,0x10
c0006267:	89 c3                	mov    ebx,eax
c0006269:	85 c0                	test   eax,eax
c000626b:	75 04                	jne    c0006271 <find_object_path+0x55>
c000626d:	31 db                	xor    ebx,ebx
c000626f:	eb 36                	jmp    c00062a7 <find_object_path+0x8b>
c0006271:	8d 75 01             	lea    esi,[ebp+0x1]
c0006274:	eb b3                	jmp    c0006229 <find_object_path+0xd>
c0006276:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006279:	74 28                	je     c00062a3 <find_object_path+0x87>
c000627b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000627e:	e8 90 fb ff ff       	call   c0005e13 <iso_733>
c0006283:	89 c2                	mov    edx,eax
c0006285:	8d 43 02             	lea    eax,[ebx+0x2]
c0006288:	e8 86 fb ff ff       	call   c0005e13 <iso_733>
c000628d:	83 ec 0c             	sub    esp,0xc
c0006290:	89 c1                	mov    ecx,eax
c0006292:	52                   	push   edx
c0006293:	89 f0                	mov    eax,esi
c0006295:	89 fa                	mov    edx,edi
c0006297:	e8 c1 fd ff ff       	call   c000605d <find_object>
c000629c:	83 c4 10             	add    esp,0x10
c000629f:	89 c3                	mov    ebx,eax
c00062a1:	eb 04                	jmp    c00062a7 <find_object_path+0x8b>
c00062a3:	85 ff                	test   edi,edi
c00062a5:	74 c6                	je     c000626d <find_object_path+0x51>
c00062a7:	83 c4 0c             	add    esp,0xc
c00062aa:	89 d8                	mov    eax,ebx
c00062ac:	5b                   	pop    ebx
c00062ad:	5e                   	pop    esi
c00062ae:	5f                   	pop    edi
c00062af:	5d                   	pop    ebp
c00062b0:	c3                   	ret    

c00062b1 <stricmp>:
c00062b1:	57                   	push   edi
c00062b2:	56                   	push   esi
c00062b3:	31 f6                	xor    esi,esi
c00062b5:	53                   	push   ebx
c00062b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062ba:	83 ec 0c             	sub    esp,0xc
c00062bd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00062c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062c5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00062c9:	50                   	push   eax
c00062ca:	e8 e1 a5 ff ff       	call   c00008b0 <toupper>
c00062cf:	89 04 24             	mov    DWORD PTR [esp],eax
c00062d2:	e8 f9 a5 ff ff       	call   c00008d0 <tolower>
c00062d7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00062da:	89 c3                	mov    ebx,eax
c00062dc:	e8 cf a5 ff ff       	call   c00008b0 <toupper>
c00062e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00062e4:	e8 e7 a5 ff ff       	call   c00008d0 <tolower>
c00062e9:	83 c4 10             	add    esp,0x10
c00062ec:	39 c3                	cmp    ebx,eax
c00062ee:	75 05                	jne    c00062f5 <stricmp+0x44>
c00062f0:	46                   	inc    esi
c00062f1:	85 db                	test   ebx,ebx
c00062f3:	75 c1                	jne    c00062b6 <stricmp+0x5>
c00062f5:	29 c3                	sub    ebx,eax
c00062f7:	89 d8                	mov    eax,ebx
c00062f9:	5b                   	pop    ebx
c00062fa:	5e                   	pop    esi
c00062fb:	5f                   	pop    edi
c00062fc:	c3                   	ret    

c00062fd <iso_open>:
c00062fd:	57                   	push   edi
c00062fe:	31 c0                	xor    eax,eax
c0006300:	56                   	push   esi
c0006301:	b9 80 1e 02 c0       	mov    ecx,0xc0021e80
c0006306:	53                   	push   ebx
c0006307:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000630c:	0f 95 c0             	setne  al
c000630f:	89 c2                	mov    edx,eax
c0006311:	89 c6                	mov    esi,eax
c0006313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006317:	e8 00 ff ff ff       	call   c000621c <find_object_path>
c000631c:	83 ca ff             	or     edx,0xffffffff
c000631f:	85 c0                	test   eax,eax
c0006321:	74 5e                	je     c0006381 <iso_open+0x84>
c0006323:	89 c1                	mov    ecx,eax
c0006325:	31 d2                	xor    edx,edx
c0006327:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000632d:	83 bf 40 15 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdeac0],0x0
c0006334:	75 42                	jne    c0006378 <iso_open+0x7b>
c0006336:	8d 41 02             	lea    eax,[ecx+0x2]
c0006339:	c7 87 40 15 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdeac0],0xffffffff
c0006343:	e8 cb fa ff ff       	call   c0005e13 <iso_733>
c0006348:	89 b7 44 15 02 c0    	mov    DWORD PTR [edi-0x3ffdeabc],esi
c000634e:	89 87 40 15 02 c0    	mov    DWORD PTR [edi-0x3ffdeac0],eax
c0006354:	c7 87 48 15 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdeab8],0x0
c000635e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006361:	e8 ad fa ff ff       	call   c0005e13 <iso_733>
c0006366:	c7 87 d0 15 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdea30],0x0
c0006370:	89 87 4c 15 02 c0    	mov    DWORD PTR [edi-0x3ffdeab4],eax
c0006376:	eb 09                	jmp    c0006381 <iso_open+0x84>
c0006378:	42                   	inc    edx
c0006379:	83 fa 10             	cmp    edx,0x10
c000637c:	75 a9                	jne    c0006327 <iso_open+0x2a>
c000637e:	83 ca ff             	or     edx,0xffffffff
c0006381:	5b                   	pop    ebx
c0006382:	89 d0                	mov    eax,edx
c0006384:	5e                   	pop    esi
c0006385:	5f                   	pop    edi
c0006386:	c3                   	ret    

c0006387 <iso_close>:
c0006387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000638b:	83 f8 0f             	cmp    eax,0xf
c000638e:	7f 10                	jg     c00063a0 <iso_close+0x19>
c0006390:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c0006396:	c7 80 40 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdeac0],0x0
c00063a0:	e9 70 fa ff ff       	jmp    c0005e15 <bclear_cache>

c00063a5 <iso_read>:
c00063a5:	55                   	push   ebp
c00063a6:	57                   	push   edi
c00063a7:	56                   	push   esi
c00063a8:	53                   	push   ebx
c00063a9:	83 ec 1c             	sub    esp,0x1c
c00063ac:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00063b0:	83 fd 0f             	cmp    ebp,0xf
c00063b3:	7e 0a                	jle    c00063bf <iso_read+0x1a>
c00063b5:	83 c8 ff             	or     eax,0xffffffff
c00063b8:	89 c2                	mov    edx,eax
c00063ba:	e9 f4 00 00 00       	jmp    c00064b3 <iso_read+0x10e>
c00063bf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00063c5:	83 bd 40 15 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdeac0],0x0
c00063cc:	74 e7                	je     c00063b5 <iso_read+0x10>
c00063ce:	8b 95 d0 15 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdea30]
c00063d4:	85 d2                	test   edx,edx
c00063d6:	75 dd                	jne    c00063b5 <iso_read+0x10>
c00063d8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00063dd:	0f 84 cd 00 00 00    	je     c00064b0 <iso_read+0x10b>
c00063e3:	8b 85 48 15 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdeab8]
c00063e9:	8b 8d 4c 15 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffdeab4]
c00063ef:	29 c1                	sub    ecx,eax
c00063f1:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00063f5:	76 04                	jbe    c00063fb <iso_read+0x56>
c00063f7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00063fb:	85 c9                	test   ecx,ecx
c00063fd:	0f 84 ad 00 00 00    	je     c00064b0 <iso_read+0x10b>
c0006403:	89 c6                	mov    esi,eax
c0006405:	bb 00 08 00 00       	mov    ebx,0x800
c000640a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006410:	c1 e8 0b             	shr    eax,0xb
c0006413:	29 f3                	sub    ebx,esi
c0006415:	03 85 40 15 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdeac0]
c000641b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006421:	7e 3f                	jle    c0006462 <iso_read+0xbd>
c0006423:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006429:	75 37                	jne    c0006462 <iso_read+0xbd>
c000642b:	be 20 00 00 00       	mov    esi,0x20
c0006430:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006436:	7f 05                	jg     c000643d <iso_read+0x98>
c0006438:	89 ce                	mov    esi,ecx
c000643a:	c1 fe 0b             	sar    esi,0xb
c000643d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006441:	89 f3                	mov    ebx,esi
c0006443:	c1 e3 0b             	shl    ebx,0xb
c0006446:	52                   	push   edx
c0006447:	56                   	push   esi
c0006448:	50                   	push   eax
c0006449:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000644d:	e8 11 fb ff ff       	call   c0005f63 <isoReadDiscSector>
c0006452:	83 c4 10             	add    esp,0x10
c0006455:	85 c0                	test   eax,eax
c0006457:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000645b:	7f 3e                	jg     c000649b <iso_read+0xf6>
c000645d:	e9 53 ff ff ff       	jmp    c00063b5 <iso_read+0x10>
c0006462:	39 cb                	cmp    ebx,ecx
c0006464:	7e 02                	jle    c0006468 <iso_read+0xc3>
c0006466:	89 cb                	mov    ebx,ecx
c0006468:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000646c:	e8 84 fb ff ff       	call   c0005ff5 <bdread>
c0006471:	85 c0                	test   eax,eax
c0006473:	0f 88 3c ff ff ff    	js     c00063b5 <iso_read+0x10>
c0006479:	8b 0c 85 20 10 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdefe0]
c0006480:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006484:	8b 85 48 15 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdeab8]
c000648a:	25 ff 07 00 00       	and    eax,0x7ff
c000648f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c0006493:	89 d9                	mov    ecx,ebx
c0006495:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006497:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000649b:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c000649f:	01 9d 48 15 02 c0    	add    DWORD PTR [ebp-0x3ffdeab8],ebx
c00064a5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00064a9:	01 da                	add    edx,ebx
c00064ab:	e9 28 ff ff ff       	jmp    c00063d8 <iso_read+0x33>
c00064b0:	89 d0                	mov    eax,edx
c00064b2:	99                   	cdq    
c00064b3:	83 c4 1c             	add    esp,0x1c
c00064b6:	5b                   	pop    ebx
c00064b7:	5e                   	pop    esi
c00064b8:	5f                   	pop    edi
c00064b9:	5d                   	pop    ebp
c00064ba:	c3                   	ret    

c00064bb <iso_seek>:
c00064bb:	55                   	push   ebp
c00064bc:	83 c8 ff             	or     eax,0xffffffff
c00064bf:	57                   	push   edi
c00064c0:	89 c2                	mov    edx,eax
c00064c2:	56                   	push   esi
c00064c3:	53                   	push   ebx
c00064c4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00064c8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00064cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00064d0:	83 fe 0f             	cmp    esi,0xf
c00064d3:	7f 65                	jg     c000653a <iso_seek+0x7f>
c00064d5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00064db:	8d 8d 40 15 02 c0    	lea    ecx,[ebp-0x3ffdeac0]
c00064e1:	83 bd 40 15 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdeac0],0x0
c00064e8:	74 50                	je     c000653a <iso_seek+0x7f>
c00064ea:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00064f1:	75 47                	jne    c000653a <iso_seek+0x7f>
c00064f3:	83 fb 01             	cmp    ebx,0x1
c00064f6:	74 0e                	je     c0006506 <iso_seek+0x4b>
c00064f8:	83 fb 02             	cmp    ebx,0x2
c00064fb:	74 0e                	je     c000650b <iso_seek+0x50>
c00064fd:	85 db                	test   ebx,ebx
c00064ff:	75 39                	jne    c000653a <iso_seek+0x7f>
c0006501:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006504:	eb 0d                	jmp    c0006513 <iso_seek+0x58>
c0006506:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006509:	eb 08                	jmp    c0006513 <iso_seek+0x58>
c000650b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000650e:	01 f8                	add    eax,edi
c0006510:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006513:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006519:	8b 88 4c 15 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdeab4]
c000651f:	05 40 15 02 c0       	add    eax,0xc0021540
c0006524:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006527:	76 03                	jbe    c000652c <iso_seek+0x71>
c0006529:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000652c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006532:	8b 82 48 15 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdeab8]
c0006538:	31 d2                	xor    edx,edx
c000653a:	5b                   	pop    ebx
c000653b:	5e                   	pop    esi
c000653c:	5f                   	pop    edi
c000653d:	5d                   	pop    ebp
c000653e:	c3                   	ret    

c000653f <iso_tell>:
c000653f:	83 c8 ff             	or     eax,0xffffffff
c0006542:	53                   	push   ebx
c0006543:	89 c2                	mov    edx,eax
c0006545:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006549:	83 f9 0f             	cmp    ecx,0xf
c000654c:	7f 20                	jg     c000656e <iso_tell+0x2f>
c000654e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006554:	83 bb 40 15 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdeac0],0x0
c000655b:	74 11                	je     c000656e <iso_tell+0x2f>
c000655d:	83 bb d0 15 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdea30],0x0
c0006564:	75 08                	jne    c000656e <iso_tell+0x2f>
c0006566:	8b 83 48 15 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdeab8]
c000656c:	31 d2                	xor    edx,edx
c000656e:	5b                   	pop    ebx
c000656f:	c3                   	ret    

c0006570 <iso_total>:
c0006570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006574:	83 c8 ff             	or     eax,0xffffffff
c0006577:	83 fa 0f             	cmp    edx,0xf
c000657a:	7f 1e                	jg     c000659a <iso_total+0x2a>
c000657c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006582:	83 ba 40 15 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdeac0],0x0
c0006589:	74 0f                	je     c000659a <iso_total+0x2a>
c000658b:	83 ba d0 15 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdea30],0x0
c0006592:	75 06                	jne    c000659a <iso_total+0x2a>
c0006594:	8b 82 4c 15 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdeab4]
c000659a:	c3                   	ret    

c000659b <fn_postprocess>:
c000659b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000659f:	89 d0                	mov    eax,edx
c00065a1:	8a 08                	mov    cl,BYTE PTR [eax]
c00065a3:	80 f9 3b             	cmp    cl,0x3b
c00065a6:	74 07                	je     c00065af <fn_postprocess+0x14>
c00065a8:	84 c9                	test   cl,cl
c00065aa:	74 03                	je     c00065af <fn_postprocess+0x14>
c00065ac:	40                   	inc    eax
c00065ad:	eb f2                	jmp    c00065a1 <fn_postprocess+0x6>
c00065af:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00065b2:	39 d0                	cmp    eax,edx
c00065b4:	76 0a                	jbe    c00065c0 <fn_postprocess+0x25>
c00065b6:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00065ba:	75 04                	jne    c00065c0 <fn_postprocess+0x25>
c00065bc:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00065c0:	c3                   	ret    

c00065c1 <iso_readdir>:
c00065c1:	55                   	push   ebp
c00065c2:	57                   	push   edi
c00065c3:	56                   	push   esi
c00065c4:	53                   	push   ebx
c00065c5:	83 ec 1c             	sub    esp,0x1c
c00065c8:	83 7c 24 30 0f       	cmp    DWORD PTR [esp+0x30],0xf
c00065cd:	7e 07                	jle    c00065d6 <iso_readdir+0x15>
c00065cf:	31 c0                	xor    eax,eax
c00065d1:	e9 d4 01 00 00       	jmp    c00067aa <iso_readdir+0x1e9>
c00065d6:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00065de:	8d b0 40 15 02 c0    	lea    esi,[eax-0x3ffdeac0]
c00065e4:	83 b8 40 15 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdeac0],0x0
c00065eb:	74 e2                	je     c00065cf <iso_readdir+0xe>
c00065ed:	83 7e 04 00          	cmp    DWORD PTR [esi+0x4],0x0
c00065f1:	74 dc                	je     c00065cf <iso_readdir+0xe>
c00065f3:	83 be 90 00 00 00 00 	cmp    DWORD PTR [esi+0x90],0x0
c00065fa:	75 d3                	jne    c00065cf <iso_readdir+0xe>
c00065fc:	31 db                	xor    ebx,ebx
c00065fe:	83 c8 ff             	or     eax,0xffffffff
c0006601:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0006604:	3b 56 0c             	cmp    edx,DWORD PTR [esi+0xc]
c0006607:	73 3c                	jae    c0006645 <iso_readdir+0x84>
c0006609:	c1 ea 0b             	shr    edx,0xb
c000660c:	8b 06                	mov    eax,DWORD PTR [esi]
c000660e:	01 d0                	add    eax,edx
c0006610:	e8 d7 f9 ff ff       	call   c0005fec <biread>
c0006615:	85 c0                	test   eax,eax
c0006617:	78 b6                	js     c00065cf <iso_readdir+0xe>
c0006619:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000661c:	8b 1c 85 80 10 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffdef80]
c0006623:	89 d1                	mov    ecx,edx
c0006625:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c000662b:	8d 5c 0b 04          	lea    ebx,[ebx+ecx*1+0x4]
c000662f:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c0006632:	75 11                	jne    c0006645 <iso_readdir+0x84>
c0006634:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c000663a:	81 c2 00 08 00 00    	add    edx,0x800
c0006640:	89 56 08             	mov    DWORD PTR [esi+0x8],edx
c0006643:	eb bc                	jmp    c0006601 <iso_readdir+0x40>
c0006645:	69 54 24 30 94 00 00 00 	imul   edx,DWORD PTR [esp+0x30],0x94
c000664d:	8b b2 48 15 02 c0    	mov    esi,DWORD PTR [edx-0x3ffdeab8]
c0006653:	81 c2 40 15 02 c0    	add    edx,0xc0021540
c0006659:	3b 72 0c             	cmp    esi,DWORD PTR [edx+0xc]
c000665c:	0f 83 6d ff ff ff    	jae    c00065cf <iso_readdir+0xe>
c0006662:	80 7b 21 00          	cmp    BYTE PTR [ebx+0x21],0x0
c0006666:	75 38                	jne    c00066a0 <iso_readdir+0xdf>
c0006668:	80 7b 20 01          	cmp    BYTE PTR [ebx+0x20],0x1
c000666c:	75 32                	jne    c00066a0 <iso_readdir+0xdf>
c000666e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0006671:	8b 1c 85 80 10 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffdef80]
c0006678:	01 f1                	add    ecx,esi
c000667a:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c000667d:	89 c8                	mov    eax,ecx
c000667f:	25 ff 07 00 00       	and    eax,0x7ff
c0006684:	0f b6 44 03 04       	movzx  eax,BYTE PTR [ebx+eax*1+0x4]
c0006689:	01 c8                	add    eax,ecx
c000668b:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000668e:	25 ff 07 00 00       	and    eax,0x7ff
c0006693:	8d 5c 03 04          	lea    ebx,[ebx+eax*1+0x4]
c0006697:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c000669a:	0f 84 2f ff ff ff    	je     c00065cf <iso_readdir+0xe>
c00066a0:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00066a8:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00066ac:	8d 53 21             	lea    edx,[ebx+0x21]
c00066af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00066b3:	8d a8 58 15 02 c0    	lea    ebp,[eax-0x3ffdeaa8]
c00066b9:	83 3d b4 1e 02 c0 00 	cmp    DWORD PTR ds:0xc0021eb4,0x0
c00066c0:	74 0c                	je     c00066ce <iso_readdir+0x10d>
c00066c2:	89 e8                	mov    eax,ebp
c00066c4:	e8 9d f6 ff ff       	call   c0005d66 <ucs2utfn>
c00066c9:	e9 9e 00 00 00       	jmp    c000676c <iso_readdir+0x1ab>
c00066ce:	56                   	push   esi
c00066cf:	51                   	push   ecx
c00066d0:	52                   	push   edx
c00066d1:	55                   	push   ebp
c00066d2:	e8 59 9f ff ff       	call   c0000630 <strncpy>
c00066d7:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066db:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066df:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00066e2:	c6 84 07 58 15 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffdeaa8],0x0
c00066ea:	e8 ac fe ff ff       	call   c000659b <fn_postprocess>
c00066ef:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066f3:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00066f6:	83 c4 10             	add    esp,0x10
c00066f9:	29 c6                	sub    esi,eax
c00066fb:	8d 7c 03 21          	lea    edi,[ebx+eax*1+0x21]
c00066ff:	f6 43 20 01          	test   BYTE PTR [ebx+0x20],0x1
c0006703:	74 05                	je     c000670a <iso_readdir+0x149>
c0006705:	83 ee 21             	sub    esi,0x21
c0006708:	eb 04                	jmp    c000670e <iso_readdir+0x14d>
c000670a:	47                   	inc    edi
c000670b:	83 ee 22             	sub    esi,0x22
c000670e:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c0006716:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000671a:	83 fe 03             	cmp    esi,0x3
c000671d:	7e 4d                	jle    c000676c <iso_readdir+0x1ab>
c000671f:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006722:	48                   	dec    eax
c0006723:	3c 01                	cmp    al,0x1
c0006725:	77 45                	ja     c000676c <iso_readdir+0x1ab>
c0006727:	52                   	push   edx
c0006728:	6a 02                	push   0x2
c000672a:	68 a0 d4 01 c0       	push   0xc001d4a0
c000672f:	57                   	push   edi
c0006730:	e8 2b a0 ff ff       	call   c0000760 <strncmp>
c0006735:	83 c4 10             	add    esp,0x10
c0006738:	85 c0                	test   eax,eax
c000673a:	75 26                	jne    c0006762 <iso_readdir+0x1a1>
c000673c:	50                   	push   eax
c000673d:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006741:	83 e8 05             	sub    eax,0x5
c0006744:	50                   	push   eax
c0006745:	8d 47 05             	lea    eax,[edi+0x5]
c0006748:	50                   	push   eax
c0006749:	55                   	push   ebp
c000674a:	e8 e1 9e ff ff       	call   c0000630 <strncpy>
c000674f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006753:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006757:	83 c4 10             	add    esp,0x10
c000675a:	c6 84 08 53 15 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdeaad],0x0
c0006762:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006766:	29 c6                	sub    esi,eax
c0006768:	01 c7                	add    edi,eax
c000676a:	eb ae                	jmp    c000671a <iso_readdir+0x159>
c000676c:	83 c8 ff             	or     eax,0xffffffff
c000676f:	f6 43 19 02          	test   BYTE PTR [ebx+0x19],0x2
c0006773:	89 c2                	mov    edx,eax
c0006775:	75 0a                	jne    c0006781 <iso_readdir+0x1c0>
c0006777:	8d 43 0a             	lea    eax,[ebx+0xa]
c000677a:	e8 94 f6 ff ff       	call   c0005e13 <iso_733>
c000677f:	31 d2                	xor    edx,edx
c0006781:	69 4c 24 30 94 00 00 00 	imul   ecx,DWORD PTR [esp+0x30],0x94
c0006789:	89 81 50 15 02 c0    	mov    DWORD PTR [ecx-0x3ffdeab0],eax
c000678f:	89 91 54 15 02 c0    	mov    DWORD PTR [ecx-0x3ffdeaac],edx
c0006795:	81 c1 40 15 02 c0    	add    ecx,0xc0021540
c000679b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000679e:	01 41 08             	add    DWORD PTR [ecx+0x8],eax
c00067a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a5:	05 50 15 02 c0       	add    eax,0xc0021550
c00067aa:	83 c4 1c             	add    esp,0x1c
c00067ad:	5b                   	pop    ebx
c00067ae:	5e                   	pop    esi
c00067af:	5f                   	pop    edi
c00067b0:	5d                   	pop    ebp
c00067b1:	c3                   	ret    

c00067b2 <iso_reset>:
c00067b2:	e8 9f f6 ff ff       	call   c0005e56 <iso_break_all>
c00067b7:	e8 98 f6 ff ff       	call   c0005e54 <bclear>
c00067bc:	31 c0                	xor    eax,eax
c00067be:	c3                   	ret    

c00067bf <init_percd>:
c00067bf:	57                   	push   edi
c00067c0:	56                   	push   esi
c00067c1:	53                   	push   ebx
c00067c2:	bb 01 00 00 00       	mov    ebx,0x1
c00067c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00067cb:	a2 60 10 02 c0       	mov    ds:0xc0021060,al
c00067d0:	e8 dd ff ff ff       	call   c00067b2 <iso_reset>
c00067d5:	c7 05 b4 1e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021eb4,0x0
c00067df:	a1 ac 1e 02 c0       	mov    eax,ds:0xc0021eac
c00067e4:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c00067e8:	e8 ff f7 ff ff       	call   c0005fec <biread>
c00067ed:	89 c6                	mov    esi,eax
c00067ef:	85 c0                	test   eax,eax
c00067f1:	0f 88 ba 00 00 00    	js     c00068b1 <init_percd+0xf2>
c00067f7:	8b 04 85 80 10 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdef80]
c00067fe:	83 c0 04             	add    eax,0x4
c0006801:	52                   	push   edx
c0006802:	6a 06                	push   0x6
c0006804:	68 a3 d4 01 c0       	push   0xc001d4a3
c0006809:	50                   	push   eax
c000680a:	e8 81 9b ff ff       	call   c0000390 <memcmp>
c000680f:	83 c4 10             	add    esp,0x10
c0006812:	85 c0                	test   eax,eax
c0006814:	74 08                	je     c000681e <init_percd+0x5f>
c0006816:	43                   	inc    ebx
c0006817:	83 fb 04             	cmp    ebx,0x4
c000681a:	75 c3                	jne    c00067df <init_percd+0x20>
c000681c:	eb 1a                	jmp    c0006838 <init_percd+0x79>
c000681e:	8b 04 b5 80 10 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdef80]
c0006825:	83 c0 5c             	add    eax,0x5c
c0006828:	e8 b7 f5 ff ff       	call   c0005de4 <isjoliet>
c000682d:	a3 b4 1e 02 c0       	mov    ds:0xc0021eb4,eax
c0006832:	85 c0                	test   eax,eax
c0006834:	74 e0                	je     c0006816 <init_percd+0x57>
c0006836:	eb 3e                	jmp    c0006876 <init_percd+0xb7>
c0006838:	83 3d b4 1e 02 c0 00 	cmp    DWORD PTR ds:0xc0021eb4,0x0
c000683f:	75 35                	jne    c0006876 <init_percd+0xb7>
c0006841:	a1 ac 1e 02 c0       	mov    eax,ds:0xc0021eac
c0006846:	83 c0 10             	add    eax,0x10
c0006849:	e8 9e f7 ff ff       	call   c0005fec <biread>
c000684e:	89 c6                	mov    esi,eax
c0006850:	85 c0                	test   eax,eax
c0006852:	78 5f                	js     c00068b3 <init_percd+0xf4>
c0006854:	83 cb ff             	or     ebx,0xffffffff
c0006857:	50                   	push   eax
c0006858:	8b 04 b5 80 10 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdef80]
c000685f:	6a 06                	push   0x6
c0006861:	83 c0 04             	add    eax,0x4
c0006864:	68 aa d4 01 c0       	push   0xc001d4aa
c0006869:	50                   	push   eax
c000686a:	e8 21 9b ff ff       	call   c0000390 <memcmp>
c000686f:	83 c4 10             	add    esp,0x10
c0006872:	85 c0                	test   eax,eax
c0006874:	75 3d                	jne    c00068b3 <init_percd+0xf4>
c0006876:	8b 34 b5 80 10 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdef80]
c000687d:	bf 80 1e 02 c0       	mov    edi,0xc0021e80
c0006882:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006888:	b9 22 00 00 00       	mov    ecx,0x22
c000688d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000688f:	b8 82 1e 02 c0       	mov    eax,0xc0021e82
c0006894:	31 db                	xor    ebx,ebx
c0006896:	e8 78 f5 ff ff       	call   c0005e13 <iso_733>
c000689b:	a3 a8 1e 02 c0       	mov    ds:0xc0021ea8,eax
c00068a0:	b8 8a 1e 02 c0       	mov    eax,0xc0021e8a
c00068a5:	e8 69 f5 ff ff       	call   c0005e13 <iso_733>
c00068aa:	a3 a4 1e 02 c0       	mov    ds:0xc0021ea4,eax
c00068af:	eb 02                	jmp    c00068b3 <init_percd+0xf4>
c00068b1:	89 c3                	mov    ebx,eax
c00068b3:	89 d8                	mov    eax,ebx
c00068b5:	5b                   	pop    ebx
c00068b6:	5e                   	pop    esi
c00068b7:	5f                   	pop    edi
c00068b8:	c3                   	ret    

c00068b9 <iso_ioctl>:
c00068b9:	e8 f4 fe ff ff       	call   c00067b2 <iso_reset>
c00068be:	31 c0                	xor    eax,eax
c00068c0:	c3                   	ret    

c00068c1 <fs_iso9660_init>:
c00068c1:	53                   	push   ebx
c00068c2:	31 db                	xor    ebx,ebx
c00068c4:	83 ec 0c             	sub    esp,0xc
c00068c7:	68 40 09 00 00       	push   0x940
c00068cc:	6a 00                	push   0x0
c00068ce:	68 40 15 02 c0       	push   0xc0021540
c00068d3:	e8 f8 9b ff ff       	call   c00004d0 <memset>
c00068d8:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00068df:	c7 05 40 15 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0021540,0xffffffff
c00068e9:	e8 cb 0e 00 00       	call   c00077b9 <malloc>
c00068ee:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00068f5:	a3 b0 1e 02 c0       	mov    ds:0xc0021eb0,eax
c00068fa:	e8 ba 0e 00 00       	call   c00077b9 <malloc>
c00068ff:	83 c4 10             	add    esp,0x10
c0006902:	a3 20 15 02 c0       	mov    ds:0xc0021520,eax
c0006907:	83 ec 0c             	sub    esp,0xc
c000690a:	68 04 08 00 00       	push   0x804
c000690f:	e8 a5 0e 00 00       	call   c00077b9 <malloc>
c0006914:	89 04 9d 80 10 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdef80],eax
c000691b:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006921:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006928:	e8 8c 0e 00 00       	call   c00077b9 <malloc>
c000692d:	83 c4 10             	add    esp,0x10
c0006930:	89 04 9d 20 10 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdefe0],eax
c0006937:	43                   	inc    ebx
c0006938:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c000693e:	83 fb 10             	cmp    ebx,0x10
c0006941:	75 c4                	jne    c0006907 <fs_iso9660_init+0x46>
c0006943:	31 c0                	xor    eax,eax
c0006945:	83 c4 08             	add    esp,0x8
c0006948:	5b                   	pop    ebx
c0006949:	c3                   	ret    

c000694a <fs_iso9660_shutdown>:
c000694a:	53                   	push   ebx
c000694b:	31 db                	xor    ebx,ebx
c000694d:	83 ec 08             	sub    esp,0x8
c0006950:	83 ec 0c             	sub    esp,0xc
c0006953:	ff 34 9d 80 10 02 c0 	push   DWORD PTR [ebx*4-0x3ffdef80]
c000695a:	e8 6a 0e 00 00       	call   c00077c9 <free>
c000695f:	58                   	pop    eax
c0006960:	ff 34 9d 20 10 02 c0 	push   DWORD PTR [ebx*4-0x3ffdefe0]
c0006967:	43                   	inc    ebx
c0006968:	e8 5c 0e 00 00       	call   c00077c9 <free>
c000696d:	83 c4 10             	add    esp,0x10
c0006970:	83 fb 10             	cmp    ebx,0x10
c0006973:	75 db                	jne    c0006950 <fs_iso9660_shutdown+0x6>
c0006975:	a1 b0 1e 02 c0       	mov    eax,ds:0xc0021eb0
c000697a:	85 c0                	test   eax,eax
c000697c:	74 0c                	je     c000698a <fs_iso9660_shutdown+0x40>
c000697e:	83 ec 0c             	sub    esp,0xc
c0006981:	50                   	push   eax
c0006982:	e8 42 0e 00 00       	call   c00077c9 <free>
c0006987:	83 c4 10             	add    esp,0x10
c000698a:	a1 20 15 02 c0       	mov    eax,ds:0xc0021520
c000698f:	85 c0                	test   eax,eax
c0006991:	74 0c                	je     c000699f <fs_iso9660_shutdown+0x55>
c0006993:	83 ec 0c             	sub    esp,0xc
c0006996:	50                   	push   eax
c0006997:	e8 2d 0e 00 00       	call   c00077c9 <free>
c000699c:	83 c4 10             	add    esp,0x10
c000699f:	c7 05 20 15 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021520,0x0
c00069a9:	c7 05 b0 1e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021eb0,0x0
c00069b3:	31 c0                	xor    eax,eax
c00069b5:	83 c4 08             	add    esp,0x8
c00069b8:	5b                   	pop    ebx
c00069b9:	c3                   	ret    

c00069ba <Computer::close(int, int, void*)>:
c00069ba:	57                   	push   edi
c00069bb:	56                   	push   esi
c00069bc:	53                   	push   ebx
c00069bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00069c1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00069c5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00069c9:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00069cf:	83 ec 0c             	sub    esp,0xc
c00069d2:	50                   	push   eax
c00069d3:	e8 06 51 00 00       	call   c000bade <Device::closeAll()>
c00069d8:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00069de:	83 c4 10             	add    esp,0x10
c00069e1:	8b 10                	mov    edx,DWORD PTR [eax]
c00069e3:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c00069e7:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c00069ef:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00069f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00069f7:	5b                   	pop    ebx
c00069f8:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00069fb:	5e                   	pop    esi
c00069fc:	5f                   	pop    edi
c00069fd:	ff e0                	jmp    eax

c00069ff <Krnl::firstTask()>:
c00069ff:	53                   	push   ebx
c0006a00:	83 ec 14             	sub    esp,0x14
c0006a03:	fb                   	sti    
c0006a04:	68 b1 d4 01 c0       	push   0xc001d4b1
c0006a09:	e8 7d 91 00 00       	call   c000fb8b <KeSetBootMessage(char const*)>
c0006a0e:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006a15:	e8 9f 0d 00 00       	call   c00077b9 <malloc>
c0006a1a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006a21:	89 c3                	mov    ebx,eax
c0006a23:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0006a28:	50                   	push   eax
c0006a29:	68 ca d4 01 c0       	push   0xc001d4ca
c0006a2e:	6a 01                	push   0x1
c0006a30:	53                   	push   ebx
c0006a31:	e8 7a c9 00 00       	call   c00133b0 <Process::Process(bool, char const*, Process*, char**)>
c0006a36:	83 c4 20             	add    esp,0x20
c0006a39:	68 ff 00 00 00       	push   0xff
c0006a3e:	6a 00                	push   0x0
c0006a40:	68 0f 72 00 c0       	push   0xc000720f
c0006a45:	53                   	push   ebx
c0006a46:	e8 8d cb 00 00       	call   c00135d8 <Process::createThread(void (*)(void*), void*, int)>
c0006a4b:	8b 15 90 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025190
c0006a51:	6a 7a                	push   0x7a
c0006a53:	6a 00                	push   0x0
c0006a55:	68 2c 40 01 c0       	push   0xc001402c
c0006a5a:	52                   	push   edx
c0006a5b:	e8 78 cb 00 00       	call   c00135d8 <Process::createThread(void (*)(void*), void*, int)>
c0006a60:	83 c4 14             	add    esp,0x14
c0006a63:	a3 48 51 02 c0       	mov    ds:0xc0025148,eax
c0006a68:	68 c8 d5 01 c0       	push   0xc001d5c8
c0006a6d:	c6 05 bd 1e 02 c0 01 	mov    BYTE PTR ds:0xc0021ebd,0x1
c0006a74:	e8 12 91 00 00       	call   c000fb8b <KeSetBootMessage(char const*)>
c0006a79:	e8 8d d9 00 00       	call   c001440b <Vm::initialise8086()>
c0006a7e:	e8 9f 3e 00 00       	call   c000a922 <Fs::initVFS()>
c0006a83:	c7 04 24 d7 d4 01 c0 	mov    DWORD PTR [esp],0xc001d4d7
c0006a8a:	e8 fc 90 00 00       	call   c000fb8b <KeSetBootMessage(char const*)>
c0006a8f:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0006a94:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006a9a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006a9c:	6a 00                	push   0x0
c0006a9e:	6a 00                	push   0x0
c0006aa0:	6a 00                	push   0x0
c0006aa2:	50                   	push   eax
c0006aa3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006aa6:	83 c4 14             	add    esp,0x14
c0006aa9:	68 c8 d5 01 c0       	push   0xc001d5c8
c0006aae:	e8 d8 90 00 00       	call   c000fb8b <KeSetBootMessage(char const*)>
c0006ab3:	e8 ae 95 00 00       	call   c0010066 <Krnl::loadSystemEnv()>
c0006ab8:	e8 0b 98 00 00       	call   c00102c8 <Krnl::setupPowerManager()>
c0006abd:	83 c4 0c             	add    esp,0xc
c0006ac0:	6a 3a                	push   0x3a
c0006ac2:	68 f1 d4 01 c0       	push   0xc001d4f1
c0006ac7:	68 fa d4 01 c0       	push   0xc001d4fa
c0006acc:	e8 75 ae 00 00       	call   c0011946 <Reg::readIntWithDefault(char*, char*, int)>
c0006ad1:	89 04 24             	mov    DWORD PTR [esp],eax
c0006ad4:	e8 57 49 00 00       	call   c000b430 <User::loadClockSettings(int)>
c0006ad9:	c7 04 24 ec d5 01 c0 	mov    DWORD PTR [esp],0xc001d5ec
c0006ae0:	e8 a6 90 00 00       	call   c000fb8b <KeSetBootMessage(char const*)>
c0006ae5:	59                   	pop    ecx
c0006ae6:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0006aeb:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006af1:	53                   	push   ebx
c0006af2:	e8 e5 4f 00 00       	call   c000badc <Device::loadDriversForAll()>
c0006af7:	c7 04 24 02 d5 01 c0 	mov    DWORD PTR [esp],0xc001d502
c0006afe:	e8 88 90 00 00       	call   c000fb8b <KeSetBootMessage(char const*)>
c0006b03:	58                   	pop    eax
c0006b04:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c0006b0a:	5a                   	pop    edx
c0006b0b:	6a 01                	push   0x1
c0006b0d:	68 13 d5 01 c0       	push   0xc001d513
c0006b12:	e8 b6 c2 00 00       	call   c0012dcd <Thr::loadDLL(char const*, bool)>
c0006b17:	59                   	pop    ecx
c0006b18:	5a                   	pop    edx
c0006b19:	53                   	push   ebx
c0006b1a:	50                   	push   eax
c0006b1b:	e8 de c4 00 00       	call   c0012ffe <Thr::executeDLL(unsigned long, void*)>
c0006b20:	83 c4 10             	add    esp,0x10
c0006b23:	83 ec 0c             	sub    esp,0xc
c0006b26:	6a 02                	push   0x2
c0006b28:	e8 c7 ce 00 00       	call   c00139f4 <blockTask(TaskState)>
c0006b2d:	83 c4 10             	add    esp,0x10
c0006b30:	eb f1                	jmp    c0006b23 <Krnl::firstTask()+0x124>

c0006b32 <Computer::Computer()>:
c0006b32:	83 ec 0c             	sub    esp,0xc
c0006b35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b39:	83 ec 08             	sub    esp,0x8
c0006b3c:	68 2f d5 01 c0       	push   0xc001d52f
c0006b41:	50                   	push   eax
c0006b42:	e8 11 50 00 00       	call   c000bb58 <Device::Device(char const*)>
c0006b47:	83 c4 10             	add    esp,0x10
c0006b4a:	ba 38 d6 01 c0       	mov    edx,0xc001d638
c0006b4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b53:	89 10                	mov    DWORD PTR [eax],edx
c0006b55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b59:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006b63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b67:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006b71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b75:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006b7b:	83 ca 04             	or     edx,0x4
c0006b7e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b88:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006b8e:	31 d2                	xor    edx,edx
c0006b90:	88 c2                	mov    dl,al
c0006b92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b96:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006b9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006ba7:	31 d2                	xor    edx,edx
c0006ba9:	88 c2                	mov    dl,al
c0006bab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006baf:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006bb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006bbe:	8d 50 01             	lea    edx,[eax+0x1]
c0006bc1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0006bc5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0006bcb:	31 d2                	xor    edx,edx
c0006bcd:	88 c2                	mov    dl,al
c0006bcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bd3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006bd7:	83 e1 3f             	and    ecx,0x3f
c0006bda:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006bde:	90                   	nop
c0006bdf:	83 c4 0c             	add    esp,0xc
c0006be2:	c3                   	ret    
c0006be3:	90                   	nop

c0006be4 <Computer::setBootMessage(char const*)>:
c0006be4:	c3                   	ret    
c0006be5:	90                   	nop

c0006be6 <Computer::detectFeatures()>:
c0006be6:	55                   	push   ebp
c0006be7:	57                   	push   edi
c0006be8:	56                   	push   esi
c0006be9:	53                   	push   ebx
c0006bea:	83 ec 1c             	sub    esp,0x1c
c0006bed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006bf1:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c0006bfb:	e8 f9 95 ff ff       	call   c00001f9 <detectCPUID>
c0006c00:	85 c0                	test   eax,eax
c0006c02:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c08:	0f 95 c2             	setne  dl
c0006c0b:	83 e0 fd             	and    eax,0xfffffffd
c0006c0e:	01 d2                	add    edx,edx
c0006c10:	09 d0                	or     eax,edx
c0006c12:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c18:	a8 02                	test   al,0x2
c0006c1a:	75 46                	jne    c0006c62 <Computer::detectFeatures()+0x7c>
c0006c1c:	f6 05 d1 1e 02 c0 04 	test   BYTE PTR ds:0xc0021ed1,0x4
c0006c23:	74 07                	je     c0006c2c <Computer::detectFeatures()+0x46>
c0006c25:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0006c2c:	e8 e5 51 01 00       	call   c001be16 <x87Detect>
c0006c31:	83 e0 01             	and    eax,0x1
c0006c34:	c1 e0 04             	shl    eax,0x4
c0006c37:	88 c2                	mov    dl,al
c0006c39:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c3f:	83 e0 ef             	and    eax,0xffffffef
c0006c42:	09 d0                	or     eax,edx
c0006c44:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c4a:	a8 10                	test   al,0x10
c0006c4c:	0f 85 2a 01 00 00    	jne    c0006d7c <Computer::detectFeatures()+0x196>
c0006c52:	84 c0                	test   al,al
c0006c54:	0f 88 45 01 00 00    	js     c0006d9f <Computer::detectFeatures()+0x1b9>
c0006c5a:	83 c4 1c             	add    esp,0x1c
c0006c5d:	5b                   	pop    ebx
c0006c5e:	5e                   	pop    esi
c0006c5f:	5f                   	pop    edi
c0006c60:	5d                   	pop    ebp
c0006c61:	c3                   	ret    
c0006c62:	83 ec 0c             	sub    esp,0xc
c0006c65:	6a 20                	push   0x20
c0006c67:	e8 4c 84 00 00       	call   c000f0b8 <CPU::cpuidCheckEDX(unsigned int)>
c0006c6c:	83 e0 01             	and    eax,0x1
c0006c6f:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006c76:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c7c:	83 e0 f7             	and    eax,0xfffffff7
c0006c7f:	09 d0                	or     eax,edx
c0006c81:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c87:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006c8e:	e8 25 84 00 00       	call   c000f0b8 <CPU::cpuidCheckEDX(unsigned int)>
c0006c93:	83 e0 01             	and    eax,0x1
c0006c96:	88 c2                	mov    dl,al
c0006c98:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006c9e:	83 e0 fe             	and    eax,0xfffffffe
c0006ca1:	09 d0                	or     eax,edx
c0006ca3:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ca9:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006cb0:	e8 03 84 00 00       	call   c000f0b8 <CPU::cpuidCheckEDX(unsigned int)>
c0006cb5:	c1 e0 07             	shl    eax,0x7
c0006cb8:	88 c2                	mov    dl,al
c0006cba:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006cc0:	83 e0 7f             	and    eax,0x7f
c0006cc3:	09 d0                	or     eax,edx
c0006cc5:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ccb:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006cd2:	e8 e1 83 00 00       	call   c000f0b8 <CPU::cpuidCheckEDX(unsigned int)>
c0006cd7:	83 c4 10             	add    esp,0x10
c0006cda:	83 e0 01             	and    eax,0x1
c0006cdd:	c1 e0 05             	shl    eax,0x5
c0006ce0:	88 c2                	mov    dl,al
c0006ce2:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ce8:	83 e0 df             	and    eax,0xffffffdf
c0006ceb:	09 d0                	or     eax,edx
c0006ced:	f7 05 d0 1e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0021ed0,0x401
c0006cf7:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006cfd:	0f 84 c2 00 00 00    	je     c0006dc5 <Computer::detectFeatures()+0x1df>
c0006d03:	83 e0 fe             	and    eax,0xfffffffe
c0006d06:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d0c:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d12:	88 c2                	mov    dl,al
c0006d14:	83 e2 09             	and    edx,0x9
c0006d17:	fe ca                	dec    dl
c0006d19:	75 09                	jne    c0006d24 <Computer::detectFeatures()+0x13e>
c0006d1b:	83 e0 fe             	and    eax,0xfffffffe
c0006d1e:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d24:	83 ec 0c             	sub    esp,0xc
c0006d27:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006d2b:	50                   	push   eax
c0006d2c:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006d30:	55                   	push   ebp
c0006d31:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006d35:	57                   	push   edi
c0006d36:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006d3a:	56                   	push   esi
c0006d3b:	68 00 00 00 80       	push   0x80000000
c0006d40:	e8 ef 82 00 00       	call   c000f034 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d45:	83 c4 20             	add    esp,0x20
c0006d48:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0006d4f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006d53:	0f 86 c3 fe ff ff    	jbe    c0006c1c <Computer::detectFeatures()+0x36>
c0006d59:	83 ec 0c             	sub    esp,0xc
c0006d5c:	50                   	push   eax
c0006d5d:	55                   	push   ebp
c0006d5e:	57                   	push   edi
c0006d5f:	56                   	push   esi
c0006d60:	68 01 00 00 80       	push   0x80000001
c0006d65:	e8 ca 82 00 00       	call   c000f034 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d6a:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c0006d74:	83 c4 20             	add    esp,0x20
c0006d77:	e9 a0 fe ff ff       	jmp    c0006c1c <Computer::detectFeatures()+0x36>
c0006d7c:	e8 4f 50 01 00       	call   c001bdd0 <absolutelyNoChanceInHell>
c0006d81:	88 c2                	mov    dl,al
c0006d83:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d89:	c1 e2 07             	shl    edx,0x7
c0006d8c:	83 e0 7f             	and    eax,0x7f
c0006d8f:	09 d0                	or     eax,edx
c0006d91:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d97:	84 c0                	test   al,al
c0006d99:	0f 89 bb fe ff ff    	jns    c0006c5a <Computer::detectFeatures()+0x74>
c0006d9f:	e8 4c 4d 01 00       	call   c001baf0 <avxDetect>
c0006da4:	83 e0 01             	and    eax,0x1
c0006da7:	c1 e0 05             	shl    eax,0x5
c0006daa:	88 c2                	mov    dl,al
c0006dac:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006db2:	83 e0 df             	and    eax,0xffffffdf
c0006db5:	09 d0                	or     eax,edx
c0006db7:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006dbd:	83 c4 1c             	add    esp,0x1c
c0006dc0:	5b                   	pop    ebx
c0006dc1:	5e                   	pop    esi
c0006dc2:	5f                   	pop    edi
c0006dc3:	5d                   	pop    ebp
c0006dc4:	c3                   	ret    
c0006dc5:	83 ec 0c             	sub    esp,0xc
c0006dc8:	68 00 02 00 00       	push   0x200
c0006dcd:	e8 e6 82 00 00       	call   c000f0b8 <CPU::cpuidCheckEDX(unsigned int)>
c0006dd2:	83 c4 10             	add    esp,0x10
c0006dd5:	83 e0 01             	and    eax,0x1
c0006dd8:	88 c2                	mov    dl,al
c0006dda:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006de0:	83 e0 fe             	and    eax,0xfffffffe
c0006de3:	09 d0                	or     eax,edx
c0006de5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006deb:	e9 1c ff ff ff       	jmp    c0006d0c <Computer::detectFeatures()+0x126>

c0006df0 <Computer::displayFeatures()>:
c0006df0:	c3                   	ret    
c0006df1:	90                   	nop

c0006df2 <Computer::rdmsr(unsigned int)>:
c0006df2:	83 ec 0c             	sub    esp,0xc
c0006df5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006df9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e00:	74 0a                	je     c0006e0c <Computer::rdmsr(unsigned int)+0x1a>
c0006e02:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e06:	0f 32                	rdmsr  
c0006e08:	83 c4 0c             	add    esp,0xc
c0006e0b:	c3                   	ret    
c0006e0c:	83 ec 0c             	sub    esp,0xc
c0006e0f:	68 38 d5 01 c0       	push   0xc001d538
c0006e14:	e8 ea 93 00 00       	call   c0010203 <KePanic(char const*)>
c0006e19:	83 c4 10             	add    esp,0x10
c0006e1c:	eb e4                	jmp    c0006e02 <Computer::rdmsr(unsigned int)+0x10>

c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>:
c0006e1e:	57                   	push   edi
c0006e1f:	56                   	push   esi
c0006e20:	52                   	push   edx
c0006e21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e25:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0006e29:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006e2d:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e34:	74 0e                	je     c0006e44 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0006e36:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e3a:	89 f0                	mov    eax,esi
c0006e3c:	89 fa                	mov    edx,edi
c0006e3e:	0f 30                	wrmsr  
c0006e40:	58                   	pop    eax
c0006e41:	5e                   	pop    esi
c0006e42:	5f                   	pop    edi
c0006e43:	c3                   	ret    
c0006e44:	83 ec 0c             	sub    esp,0xc
c0006e47:	68 3e d5 01 c0       	push   0xc001d53e
c0006e4c:	e8 b2 93 00 00       	call   c0010203 <KePanic(char const*)>
c0006e51:	83 c4 10             	add    esp,0x10
c0006e54:	eb e0                	jmp    c0006e36 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0006e56 <Computer::shutdown()>:
c0006e56:	83 ec 0c             	sub    esp,0xc
c0006e59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e5d:	8b 10                	mov    edx,DWORD PTR [eax]
c0006e5f:	6a 00                	push   0x0
c0006e61:	6a 00                	push   0x0
c0006e63:	6a 00                	push   0x0
c0006e65:	50                   	push   eax
c0006e66:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006e69:	83 c4 1c             	add    esp,0x1c
c0006e6c:	c3                   	ret    
c0006e6d:	90                   	nop

c0006e6e <Computer::restart()>:
c0006e6e:	83 ec 0c             	sub    esp,0xc
c0006e71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e75:	8b 10                	mov    edx,DWORD PTR [eax]
c0006e77:	6a 00                	push   0x0
c0006e79:	6a 00                	push   0x0
c0006e7b:	6a 01                	push   0x1
c0006e7d:	50                   	push   eax
c0006e7e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006e81:	83 c4 1c             	add    esp,0x1c
c0006e84:	c3                   	ret    
c0006e85:	90                   	nop

c0006e86 <Computer::sleep()>:
c0006e86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e8a:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006e90:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006e94:	e9 97 7c 00 00       	jmp    c000eb30 <ACPI::sleep()>
c0006e99:	90                   	nop

c0006e9a <Computer::nmiEnabled()>:
c0006e9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e9e:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0006ea4:	c3                   	ret    
c0006ea5:	90                   	nop

c0006ea6 <Computer::readCMOS(unsigned char)>:
c0006ea6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006eaa:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006eb1:	19 c0                	sbb    eax,eax
c0006eb3:	83 e0 80             	and    eax,0xffffff80
c0006eb6:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006eba:	e6 70                	out    0x70,al
c0006ebc:	e4 71                	in     al,0x71
c0006ebe:	c3                   	ret    
c0006ebf:	90                   	nop

c0006ec0 <Computer::enableNMI(bool)>:
c0006ec0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006ec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006ec8:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0006ece:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0006ed6:	eb ce                	jmp    c0006ea6 <Computer::readCMOS(unsigned char)>

c0006ed8 <Computer::open(int, int, void*)>:
c0006ed8:	56                   	push   esi
c0006ed9:	53                   	push   ebx
c0006eda:	83 ec 10             	sub    esp,0x10
c0006edd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006ee1:	f6 05 d0 1e 02 c0 04 	test   BYTE PTR ds:0xc0021ed0,0x4
c0006ee8:	68 44 d5 01 c0       	push   0xc001d544
c0006eed:	0f 94 05 e0 f7 01 c0 	sete   BYTE PTR ds:0xc001f7e0
c0006ef4:	e8 92 8c 00 00       	call   c000fb8b <KeSetBootMessage(char const*)>
c0006ef9:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0006f00:	e8 b4 08 00 00       	call   c00077b9 <malloc>
c0006f05:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f08:	89 c6                	mov    esi,eax
c0006f0a:	e8 b9 77 00 00       	call   c000e6c8 <ACPI::ACPI()>
c0006f0f:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0006f15:	58                   	pop    eax
c0006f16:	5a                   	pop    edx
c0006f17:	56                   	push   esi
c0006f18:	53                   	push   ebx
c0006f19:	e8 a2 4a 00 00       	call   c000b9c0 <Device::addChild(Device*)>
c0006f1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006f21:	e8 c0 fc ff ff       	call   c0006be6 <Computer::detectFeatures()>
c0006f26:	59                   	pop    ecx
c0006f27:	5e                   	pop    esi
c0006f28:	6a 01                	push   0x1
c0006f2a:	53                   	push   ebx
c0006f2b:	e8 90 ff ff ff       	call   c0006ec0 <Computer::enableNMI(bool)>
c0006f30:	c7 04 24 5c d5 01 c0 	mov    DWORD PTR [esp],0xc001d55c
c0006f37:	e8 4f 8c 00 00       	call   c000fb8b <KeSetBootMessage(char const*)>
c0006f3c:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0006f43:	e8 71 08 00 00       	call   c00077b9 <malloc>
c0006f48:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	e8 1e 82 00 00       	call   c000f170 <CPU::CPU()>
c0006f52:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0006f58:	58                   	pop    eax
c0006f59:	5a                   	pop    edx
c0006f5a:	56                   	push   esi
c0006f5b:	53                   	push   ebx
c0006f5c:	e8 5f 4a 00 00       	call   c000b9c0 <Device::addChild(Device*)>
c0006f61:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0006f67:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0006f6b:	8b 10                	mov    edx,DWORD PTR [eax]
c0006f6d:	51                   	push   ecx
c0006f6e:	6a 00                	push   0x0
c0006f70:	6a 00                	push   0x0
c0006f72:	50                   	push   eax
c0006f73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006f76:	83 c4 14             	add    esp,0x14
c0006f79:	68 0c d6 01 c0       	push   0xc001d60c
c0006f7e:	e8 08 8c 00 00       	call   c000fb8b <KeSetBootMessage(char const*)>
c0006f83:	e8 ba e5 00 00       	call   c0015542 <HalInitialiseCoprocessor()>
c0006f88:	c7 04 24 76 d5 01 c0 	mov    DWORD PTR [esp],0xc001d576
c0006f8f:	e8 f7 8b 00 00       	call   c000fb8b <KeSetBootMessage(char const*)>
c0006f94:	c7 04 24 ff 69 00 c0 	mov    DWORD PTR [esp],0xc00069ff
c0006f9b:	e8 50 c7 00 00       	call   c00136f0 <setupMultitasking(void (*)())>
c0006fa0:	83 c4 14             	add    esp,0x14
c0006fa3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006fa8:	5b                   	pop    ebx
c0006fa9:	5e                   	pop    esi
c0006faa:	c3                   	ret    
c0006fab:	90                   	nop

c0006fac <Computer::disableNMI()>:
c0006fac:	6a 00                	push   0x0
c0006fae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006fb2:	50                   	push   eax
c0006fb3:	e8 08 ff ff ff       	call   c0006ec0 <Computer::enableNMI(bool)>
c0006fb8:	5a                   	pop    edx
c0006fb9:	59                   	pop    ecx
c0006fba:	c3                   	ret    
c0006fbb:	90                   	nop

c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>:
c0006fbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006fc0:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006fc7:	19 c0                	sbb    eax,eax
c0006fc9:	83 e0 80             	and    eax,0xffffff80
c0006fcc:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006fd0:	e6 70                	out    0x70,al
c0006fd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006fd6:	e6 71                	out    0x71,al
c0006fd8:	c3                   	ret    
c0006fd9:	90                   	nop

c0006fda <Computer::handleNMI()>:
c0006fda:	56                   	push   esi
c0006fdb:	53                   	push   ebx
c0006fdc:	83 ec 10             	sub    esp,0x10
c0006fdf:	e4 92                	in     al,0x92
c0006fe1:	89 c6                	mov    esi,eax
c0006fe3:	e4 61                	in     al,0x61
c0006fe5:	68 91 d5 01 c0       	push   0xc001d591
c0006fea:	88 c3                	mov    bl,al
c0006fec:	e8 90 35 00 00       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c0006ff1:	83 c4 10             	add    esp,0x10
c0006ff4:	83 e6 10             	and    esi,0x10
c0006ff7:	75 0d                	jne    c0007006 <Computer::handleNMI()+0x2c>
c0006ff9:	f6 c3 40             	test   bl,0x40
c0006ffc:	75 1d                	jne    c000701b <Computer::handleNMI()+0x41>
c0006ffe:	84 db                	test   bl,bl
c0007000:	78 2d                	js     c000702f <Computer::handleNMI()+0x55>
c0007002:	58                   	pop    eax
c0007003:	5b                   	pop    ebx
c0007004:	5e                   	pop    esi
c0007005:	c3                   	ret    
c0007006:	83 ec 0c             	sub    esp,0xc
c0007009:	68 a2 d5 01 c0       	push   0xc001d5a2
c000700e:	e8 f0 91 00 00       	call   c0010203 <KePanic(char const*)>
c0007013:	83 c4 10             	add    esp,0x10
c0007016:	f6 c3 40             	test   bl,0x40
c0007019:	74 e3                	je     c0006ffe <Computer::handleNMI()+0x24>
c000701b:	83 ec 0c             	sub    esp,0xc
c000701e:	68 af d5 01 c0       	push   0xc001d5af
c0007023:	e8 db 91 00 00       	call   c0010203 <KePanic(char const*)>
c0007028:	83 c4 10             	add    esp,0x10
c000702b:	84 db                	test   bl,bl
c000702d:	79 d3                	jns    c0007002 <Computer::handleNMI()+0x28>
c000702f:	c7 44 24 10 b9 d5 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d5b9
c0007037:	5a                   	pop    edx
c0007038:	5b                   	pop    ebx
c0007039:	5e                   	pop    esi
c000703a:	e9 c4 91 00 00       	jmp    c0010203 <KePanic(char const*)>
c000703f:	90                   	nop

c0007040 <GDTEntry::setBase(unsigned int)>:
c0007040:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007044:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007048:	89 c1                	mov    ecx,eax
c000704a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000704e:	c1 e9 10             	shr    ecx,0x10
c0007051:	c1 e8 18             	shr    eax,0x18
c0007054:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007057:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000705a:	c3                   	ret    
c000705b:	90                   	nop

c000705c <GDTEntry::setLimit(unsigned int)>:
c000705c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007060:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007064:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007067:	66 89 01             	mov    WORD PTR [ecx],ax
c000706a:	83 e2 f0             	and    edx,0xfffffff0
c000706d:	c1 e8 10             	shr    eax,0x10
c0007070:	83 e0 0f             	and    eax,0xf
c0007073:	09 d0                	or     eax,edx
c0007075:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007078:	c3                   	ret    
c0007079:	90                   	nop

c000707a <GDT::GDT()>:
c000707a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000707e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007088:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000708e:	90                   	nop
c000708f:	c3                   	ret    

c0007090 <GDT::addEntry(GDTEntry)>:
c0007090:	53                   	push   ebx
c0007091:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007095:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007099:	8b 02                	mov    eax,DWORD PTR [edx]
c000709b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000709f:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00070a3:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00070a7:	8d 48 01             	lea    ecx,[eax+0x1]
c00070aa:	c1 e0 03             	shl    eax,0x3
c00070ad:	89 0a                	mov    DWORD PTR [edx],ecx
c00070af:	5b                   	pop    ebx
c00070b0:	c3                   	ret    
c00070b1:	90                   	nop

c00070b2 <GDT::getNumberOfEntries()>:
c00070b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00070b8:	c3                   	ret    
c00070b9:	90                   	nop

c00070ba <GDT::flush()>:
c00070ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070be:	8b 10                	mov    edx,DWORD PTR [eax]
c00070c0:	83 c0 04             	add    eax,0x4
c00070c3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00070ca:	a3 c2 1e 02 c0       	mov    ds:0xc0021ec2,eax
c00070cf:	66 89 15 c0 1e 02 c0 	mov    WORD PTR ds:0xc0021ec0,dx
c00070d6:	e9 82 92 ff ff       	jmp    c000035d <loadGDT>
c00070db:	90                   	nop

c00070dc <GDT::setup()>:
c00070dc:	57                   	push   edi
c00070dd:	56                   	push   esi
c00070de:	53                   	push   ebx
c00070df:	83 ec 30             	sub    esp,0x30
c00070e2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00070e6:	6a 00                	push   0x0
c00070e8:	8d 74 24 14          	lea    esi,[esp+0x14]
c00070ec:	56                   	push   esi
c00070ed:	e8 4e ff ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c00070f2:	6a 00                	push   0x0
c00070f4:	56                   	push   esi
c00070f5:	e8 62 ff ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c00070fa:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007102:	6a 00                	push   0x0
c0007104:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0007108:	56                   	push   esi
c0007109:	e8 32 ff ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c000710e:	68 ff ff ff 00       	push   0xffffff
c0007113:	56                   	push   esi
c0007114:	e8 43 ff ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c0007119:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000711d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007121:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007125:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007129:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000712e:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007133:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007137:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000713b:	89 f8                	mov    eax,edi
c000713d:	89 fa                	mov    edx,edi
c000713f:	80 e4 f7             	and    ah,0xf7
c0007142:	80 ce 60             	or     dh,0x60
c0007145:	89 c7                	mov    edi,eax
c0007147:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000714b:	80 cc 60             	or     ah,0x60
c000714e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007152:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007156:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000715a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000715e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007162:	83 c4 20             	add    esp,0x20
c0007165:	6a 00                	push   0x0
c0007167:	8d 44 24 24          	lea    eax,[esp+0x24]
c000716b:	50                   	push   eax
c000716c:	e8 cf fe ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c0007171:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007175:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007179:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c000717e:	6a 00                	push   0x0
c0007180:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007184:	50                   	push   eax
c0007185:	e8 b6 fe ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c000718a:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c000718f:	83 c4 0c             	add    esp,0xc
c0007192:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007196:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000719a:	53                   	push   ebx
c000719b:	e8 f0 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071a0:	83 c4 0c             	add    esp,0xc
c00071a3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071ab:	53                   	push   ebx
c00071ac:	e8 df fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071b1:	83 c4 0c             	add    esp,0xc
c00071b4:	57                   	push   edi
c00071b5:	56                   	push   esi
c00071b6:	53                   	push   ebx
c00071b7:	e8 d4 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071bc:	83 c4 0c             	add    esp,0xc
c00071bf:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00071c3:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00071c7:	53                   	push   ebx
c00071c8:	e8 c3 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071cd:	83 c4 0c             	add    esp,0xc
c00071d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00071d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00071d8:	53                   	push   ebx
c00071d9:	e8 b2 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071de:	83 c4 0c             	add    esp,0xc
c00071e1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00071e5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00071e9:	53                   	push   ebx
c00071ea:	e8 a1 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071ef:	83 c4 0c             	add    esp,0xc
c00071f2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00071f6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00071fa:	53                   	push   ebx
c00071fb:	e8 90 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c0007200:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007203:	e8 b2 fe ff ff       	call   c00070ba <GDT::flush()>
c0007208:	83 c4 40             	add    esp,0x40
c000720b:	5b                   	pop    ebx
c000720c:	5e                   	pop    esi
c000720d:	5f                   	pop    edi
c000720e:	c3                   	ret    

c000720f <idleFunction(void*)>:
c000720f:	83 ec 0c             	sub    esp,0xc
c0007212:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0007217:	48                   	dec    eax
c0007218:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000721d:	75 01                	jne    c0007220 <idleFunction(void*)+0x11>
c000721f:	fb                   	sti    
c0007220:	e8 f7 df 00 00       	call   c001521c <HalSystemIdle()>
c0007225:	e8 a8 51 01 00       	call   c001c3d2 <idleCommon()>
c000722a:	eb f4                	jmp    c0007220 <idleFunction(void*)+0x11>

c000722c <IDTEntry::IDTEntry(bool)>:
c000722c:	83 ec 04             	sub    esp,0x4
c000722f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007233:	88 04 24             	mov    BYTE PTR [esp],al
c0007236:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000723a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007240:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007244:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007248:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000724c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000724f:	83 e2 f0             	and    edx,0xfffffff0
c0007252:	83 ca 0e             	or     edx,0xe
c0007255:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007258:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000725c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000725f:	83 e2 ef             	and    edx,0xffffffef
c0007262:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007265:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0007269:	74 05                	je     c0007270 <IDTEntry::IDTEntry(bool)+0x44>
c000726b:	b2 03                	mov    dl,0x3
c000726d:	eb 05                	jmp    c0007274 <IDTEntry::IDTEntry(bool)+0x48>
c000726f:	90                   	nop
c0007270:	b2 00                	mov    dl,0x0
c0007272:	66 90                	xchg   ax,ax
c0007274:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007278:	83 e2 03             	and    edx,0x3
c000727b:	88 d1                	mov    cl,dl
c000727d:	c1 e1 05             	shl    ecx,0x5
c0007280:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007283:	83 e2 9f             	and    edx,0xffffff9f
c0007286:	09 ca                	or     edx,ecx
c0007288:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000728b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000728f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007292:	83 ca 80             	or     edx,0xffffff80
c0007295:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007298:	90                   	nop
c0007299:	83 c4 04             	add    esp,0x4
c000729c:	c3                   	ret    
c000729d:	90                   	nop

c000729e <IDTEntry::setOffset(unsigned int)>:
c000729e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00072a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a6:	66 89 02             	mov    WORD PTR [edx],ax
c00072a9:	c1 e8 10             	shr    eax,0x10
c00072ac:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00072b0:	c3                   	ret    
c00072b1:	90                   	nop
c00072b2:	66 90                	xchg   ax,ax

c00072b4 <IDT::IDT()>:
c00072b4:	90                   	nop
c00072b5:	c3                   	ret    

c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00072b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00072ba:	83 c0 30             	add    eax,0x30
c00072bd:	c3                   	ret    

c00072be <IDT::addEntry(IDTEntry, int)>:
c00072be:	53                   	push   ebx
c00072bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00072c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00072cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00072cf:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00072d2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00072d6:	5b                   	pop    ebx
c00072d7:	c3                   	ret    

c00072d8 <IDT::addEntry(int, void (*)(), bool)>:
c00072d8:	53                   	push   ebx
c00072d9:	83 ec 10             	sub    esp,0x10
c00072dc:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00072e1:	50                   	push   eax
c00072e2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00072e6:	53                   	push   ebx
c00072e7:	e8 40 ff ff ff       	call   c000722c <IDTEntry::IDTEntry(bool)>
c00072ec:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00072f0:	53                   	push   ebx
c00072f1:	e8 a8 ff ff ff       	call   c000729e <IDTEntry::setOffset(unsigned int)>
c00072f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00072fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072fe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007302:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007306:	e8 b3 ff ff ff       	call   c00072be <IDT::addEntry(IDTEntry, int)>
c000730b:	83 c4 30             	add    esp,0x30
c000730e:	5b                   	pop    ebx
c000730f:	c3                   	ret    

c0007310 <IDT::flush()>:
c0007310:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007314:	66 c7 05 c8 1e 02 c0 ff 07 	mov    WORD PTR ds:0xc0021ec8,0x7ff
c000731d:	a3 ca 1e 02 c0       	mov    ds:0xc0021eca,eax
c0007322:	0f 01 1d c8 1e 02 c0 	lidtd  ds:0xc0021ec8
c0007329:	c3                   	ret    

c000732a <IDT::setup()>:
c000732a:	57                   	push   edi
c000732b:	56                   	push   esi
c000732c:	53                   	push   ebx
c000732d:	83 ec 10             	sub    esp,0x10
c0007330:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007334:	6a 00                	push   0x0
c0007336:	68 80 bb 01 c0       	push   0xc001bb80
c000733b:	6a 00                	push   0x0
c000733d:	53                   	push   ebx
c000733e:	e8 95 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007343:	6a 00                	push   0x0
c0007345:	68 90 bb 01 c0       	push   0xc001bb90
c000734a:	6a 01                	push   0x1
c000734c:	53                   	push   ebx
c000734d:	e8 86 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007352:	83 c4 20             	add    esp,0x20
c0007355:	6a 00                	push   0x0
c0007357:	68 9a bb 01 c0       	push   0xc001bb9a
c000735c:	6a 02                	push   0x2
c000735e:	53                   	push   ebx
c000735f:	e8 74 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007364:	6a 00                	push   0x0
c0007366:	68 a4 bb 01 c0       	push   0xc001bba4
c000736b:	6a 03                	push   0x3
c000736d:	53                   	push   ebx
c000736e:	e8 65 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007373:	83 c4 20             	add    esp,0x20
c0007376:	6a 00                	push   0x0
c0007378:	68 ae bb 01 c0       	push   0xc001bbae
c000737d:	6a 04                	push   0x4
c000737f:	53                   	push   ebx
c0007380:	e8 53 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007385:	6a 00                	push   0x0
c0007387:	68 b8 bb 01 c0       	push   0xc001bbb8
c000738c:	6a 05                	push   0x5
c000738e:	53                   	push   ebx
c000738f:	e8 44 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007394:	83 c4 20             	add    esp,0x20
c0007397:	6a 00                	push   0x0
c0007399:	68 c2 bb 01 c0       	push   0xc001bbc2
c000739e:	6a 06                	push   0x6
c00073a0:	53                   	push   ebx
c00073a1:	e8 32 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073a6:	6a 00                	push   0x0
c00073a8:	68 cc bb 01 c0       	push   0xc001bbcc
c00073ad:	6a 07                	push   0x7
c00073af:	53                   	push   ebx
c00073b0:	e8 23 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073b5:	83 c4 20             	add    esp,0x20
c00073b8:	6a 00                	push   0x0
c00073ba:	68 d6 bb 01 c0       	push   0xc001bbd6
c00073bf:	6a 08                	push   0x8
c00073c1:	53                   	push   ebx
c00073c2:	e8 11 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073c7:	6a 00                	push   0x0
c00073c9:	68 de bb 01 c0       	push   0xc001bbde
c00073ce:	6a 09                	push   0x9
c00073d0:	53                   	push   ebx
c00073d1:	e8 02 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073d6:	83 c4 20             	add    esp,0x20
c00073d9:	6a 00                	push   0x0
c00073db:	68 e8 bb 01 c0       	push   0xc001bbe8
c00073e0:	6a 0a                	push   0xa
c00073e2:	53                   	push   ebx
c00073e3:	e8 f0 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073e8:	6a 00                	push   0x0
c00073ea:	68 f0 bb 01 c0       	push   0xc001bbf0
c00073ef:	6a 0b                	push   0xb
c00073f1:	53                   	push   ebx
c00073f2:	e8 e1 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073f7:	83 c4 20             	add    esp,0x20
c00073fa:	6a 00                	push   0x0
c00073fc:	68 f8 bb 01 c0       	push   0xc001bbf8
c0007401:	6a 0c                	push   0xc
c0007403:	53                   	push   ebx
c0007404:	e8 cf fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007409:	6a 00                	push   0x0
c000740b:	68 00 bc 01 c0       	push   0xc001bc00
c0007410:	6a 0d                	push   0xd
c0007412:	53                   	push   ebx
c0007413:	e8 c0 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007418:	83 c4 20             	add    esp,0x20
c000741b:	6a 00                	push   0x0
c000741d:	68 08 bc 01 c0       	push   0xc001bc08
c0007422:	6a 0e                	push   0xe
c0007424:	53                   	push   ebx
c0007425:	e8 ae fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000742a:	6a 00                	push   0x0
c000742c:	68 10 bc 01 c0       	push   0xc001bc10
c0007431:	6a 0f                	push   0xf
c0007433:	53                   	push   ebx
c0007434:	e8 9f fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007439:	83 c4 20             	add    esp,0x20
c000743c:	6a 00                	push   0x0
c000743e:	68 1a bc 01 c0       	push   0xc001bc1a
c0007443:	6a 10                	push   0x10
c0007445:	53                   	push   ebx
c0007446:	e8 8d fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000744b:	6a 00                	push   0x0
c000744d:	68 24 bc 01 c0       	push   0xc001bc24
c0007452:	6a 11                	push   0x11
c0007454:	53                   	push   ebx
c0007455:	e8 7e fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000745a:	83 c4 20             	add    esp,0x20
c000745d:	6a 00                	push   0x0
c000745f:	68 2e bc 01 c0       	push   0xc001bc2e
c0007464:	6a 12                	push   0x12
c0007466:	53                   	push   ebx
c0007467:	e8 6c fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000746c:	6a 01                	push   0x1
c000746e:	68 c8 bc 01 c0       	push   0xc001bcc8
c0007473:	6a 60                	push   0x60
c0007475:	53                   	push   ebx
c0007476:	e8 5d fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000747b:	83 c4 20             	add    esp,0x20
c000747e:	6a 00                	push   0x0
c0007480:	68 cf bc 01 c0       	push   0xc001bccf
c0007485:	6a 20                	push   0x20
c0007487:	53                   	push   ebx
c0007488:	e8 4b fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000748d:	6a 00                	push   0x0
c000748f:	68 ba bc 01 c0       	push   0xc001bcba
c0007494:	6a 21                	push   0x21
c0007496:	53                   	push   ebx
c0007497:	e8 3c fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000749c:	83 c4 20             	add    esp,0x20
c000749f:	6a 00                	push   0x0
c00074a1:	68 c1 bc 01 c0       	push   0xc001bcc1
c00074a6:	6a 22                	push   0x22
c00074a8:	53                   	push   ebx
c00074a9:	e8 2a fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074ae:	6a 00                	push   0x0
c00074b0:	68 38 bc 01 c0       	push   0xc001bc38
c00074b5:	6a 23                	push   0x23
c00074b7:	53                   	push   ebx
c00074b8:	e8 1b fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074bd:	83 c4 20             	add    esp,0x20
c00074c0:	6a 00                	push   0x0
c00074c2:	68 42 bc 01 c0       	push   0xc001bc42
c00074c7:	6a 24                	push   0x24
c00074c9:	53                   	push   ebx
c00074ca:	e8 09 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074cf:	6a 00                	push   0x0
c00074d1:	68 4c bc 01 c0       	push   0xc001bc4c
c00074d6:	6a 25                	push   0x25
c00074d8:	53                   	push   ebx
c00074d9:	e8 fa fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074de:	83 c4 20             	add    esp,0x20
c00074e1:	6a 00                	push   0x0
c00074e3:	68 56 bc 01 c0       	push   0xc001bc56
c00074e8:	6a 26                	push   0x26
c00074ea:	53                   	push   ebx
c00074eb:	e8 e8 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074f0:	6a 00                	push   0x0
c00074f2:	68 60 bc 01 c0       	push   0xc001bc60
c00074f7:	6a 27                	push   0x27
c00074f9:	53                   	push   ebx
c00074fa:	e8 d9 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074ff:	83 c4 20             	add    esp,0x20
c0007502:	6a 00                	push   0x0
c0007504:	68 6a bc 01 c0       	push   0xc001bc6a
c0007509:	6a 28                	push   0x28
c000750b:	53                   	push   ebx
c000750c:	e8 c7 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007511:	6a 00                	push   0x0
c0007513:	68 74 bc 01 c0       	push   0xc001bc74
c0007518:	6a 29                	push   0x29
c000751a:	53                   	push   ebx
c000751b:	e8 b8 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007520:	83 c4 20             	add    esp,0x20
c0007523:	6a 00                	push   0x0
c0007525:	68 7e bc 01 c0       	push   0xc001bc7e
c000752a:	6a 2a                	push   0x2a
c000752c:	53                   	push   ebx
c000752d:	e8 a6 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007532:	6a 00                	push   0x0
c0007534:	68 88 bc 01 c0       	push   0xc001bc88
c0007539:	6a 2b                	push   0x2b
c000753b:	53                   	push   ebx
c000753c:	e8 97 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007541:	83 c4 20             	add    esp,0x20
c0007544:	6a 00                	push   0x0
c0007546:	68 92 bc 01 c0       	push   0xc001bc92
c000754b:	6a 2c                	push   0x2c
c000754d:	53                   	push   ebx
c000754e:	e8 85 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007553:	6a 00                	push   0x0
c0007555:	68 9c bc 01 c0       	push   0xc001bc9c
c000755a:	6a 2d                	push   0x2d
c000755c:	53                   	push   ebx
c000755d:	e8 76 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007562:	83 c4 20             	add    esp,0x20
c0007565:	6a 00                	push   0x0
c0007567:	68 a6 bc 01 c0       	push   0xc001bca6
c000756c:	6a 2e                	push   0x2e
c000756e:	53                   	push   ebx
c000756f:	e8 64 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007574:	6a 00                	push   0x0
c0007576:	68 b0 bc 01 c0       	push   0xc001bcb0
c000757b:	6a 2f                	push   0x2f
c000757d:	53                   	push   ebx
c000757e:	e8 55 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007583:	83 c4 20             	add    esp,0x20
c0007586:	6a 00                	push   0x0
c0007588:	68 61 bd 01 c0       	push   0xc001bd61
c000758d:	6a 30                	push   0x30
c000758f:	53                   	push   ebx
c0007590:	e8 43 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007595:	6a 00                	push   0x0
c0007597:	68 6b bd 01 c0       	push   0xc001bd6b
c000759c:	6a 31                	push   0x31
c000759e:	53                   	push   ebx
c000759f:	e8 34 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075a4:	83 c4 20             	add    esp,0x20
c00075a7:	6a 00                	push   0x0
c00075a9:	68 75 bd 01 c0       	push   0xc001bd75
c00075ae:	6a 32                	push   0x32
c00075b0:	53                   	push   ebx
c00075b1:	e8 22 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075b6:	6a 00                	push   0x0
c00075b8:	68 7f bd 01 c0       	push   0xc001bd7f
c00075bd:	6a 33                	push   0x33
c00075bf:	53                   	push   ebx
c00075c0:	e8 13 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075c5:	83 c4 20             	add    esp,0x20
c00075c8:	6a 00                	push   0x0
c00075ca:	68 89 bd 01 c0       	push   0xc001bd89
c00075cf:	6a 34                	push   0x34
c00075d1:	53                   	push   ebx
c00075d2:	e8 01 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075d7:	6a 00                	push   0x0
c00075d9:	68 93 bd 01 c0       	push   0xc001bd93
c00075de:	6a 35                	push   0x35
c00075e0:	53                   	push   ebx
c00075e1:	e8 f2 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075e6:	83 c4 20             	add    esp,0x20
c00075e9:	6a 00                	push   0x0
c00075eb:	68 9d bd 01 c0       	push   0xc001bd9d
c00075f0:	6a 36                	push   0x36
c00075f2:	53                   	push   ebx
c00075f3:	e8 e0 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075f8:	6a 00                	push   0x0
c00075fa:	68 a7 bd 01 c0       	push   0xc001bda7
c00075ff:	6a 37                	push   0x37
c0007601:	53                   	push   ebx
c0007602:	e8 d1 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007607:	83 c4 1c             	add    esp,0x1c
c000760a:	6a 03                	push   0x3
c000760c:	6a 02                	push   0x2
c000760e:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0007614:	e8 e3 23 00 00       	call   c00099fc <VAS::allocatePages(int, int)>
c0007619:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007620:	89 c6                	mov    esi,eax
c0007622:	e8 92 01 00 00       	call   c00077b9 <malloc>
c0007627:	81 c6 00 20 00 00    	add    esi,0x2000
c000762d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007630:	89 c7                	mov    edi,eax
c0007632:	e8 91 15 00 00       	call   c0008bc8 <TSS::TSS()>
c0007637:	83 c4 0c             	add    esp,0xc
c000763a:	68 d6 bb 01 c0       	push   0xc001bbd6
c000763f:	56                   	push   esi
c0007640:	57                   	push   edi
c0007641:	e8 c6 15 00 00       	call   c0008c0c <TSS::setup(unsigned long, unsigned long)>
c0007646:	89 c6                	mov    esi,eax
c0007648:	58                   	pop    eax
c0007649:	5a                   	pop    edx
c000764a:	6a 00                	push   0x0
c000764c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007650:	50                   	push   eax
c0007651:	e8 d6 fb ff ff       	call   c000722c <IDTEntry::IDTEntry(bool)>
c0007656:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000765a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000765f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007666:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000766c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007670:	80 ce 05             	or     dh,0x5
c0007673:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007676:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000767a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000767e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007681:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007684:	e8 87 fc ff ff       	call   c0007310 <IDT::flush()>
c0007689:	83 c4 20             	add    esp,0x20
c000768c:	5b                   	pop    ebx
c000768d:	5e                   	pop    esi
c000768e:	5f                   	pop    edi
c000768f:	c3                   	ret    

c0007690 <sbrk>:
c0007690:	55                   	push   ebp
c0007691:	57                   	push   edi
c0007692:	56                   	push   esi
c0007693:	53                   	push   ebx
c0007694:	83 ec 1c             	sub    esp,0x1c
c0007697:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000769b:	85 c0                	test   eax,eax
c000769d:	74 5f                	je     c00076fe <sbrk+0x6e>
c000769f:	78 64                	js     c0007705 <sbrk+0x75>
c00076a1:	8b 15 c8 f7 01 c0    	mov    edx,DWORD PTR ds:0xc001f7c8
c00076a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00076ab:	05 ff 0f 00 00       	add    eax,0xfff
c00076b0:	89 c5                	mov    ebp,eax
c00076b2:	78 69                	js     c000771d <sbrk+0x8d>
c00076b4:	c1 fd 0c             	sar    ebp,0xc
c00076b7:	bb 00 00 00 00       	mov    ebx,0x0
c00076bc:	8b 35 b0 1f 02 c0    	mov    esi,DWORD PTR ds:0xc0021fb0
c00076c2:	8b 3d c8 f7 01 c0    	mov    edi,DWORD PTR ds:0xc001f7c8
c00076c8:	e8 c8 03 00 00       	call   c0007a95 <Phys::allocatePage()>
c00076cd:	68 01 04 00 00       	push   0x401
c00076d2:	57                   	push   edi
c00076d3:	50                   	push   eax
c00076d4:	56                   	push   esi
c00076d5:	e8 1e 22 00 00       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c00076da:	81 05 c8 f7 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001f7c8,0x1000
c00076e4:	43                   	inc    ebx
c00076e5:	83 c4 10             	add    esp,0x10
c00076e8:	39 dd                	cmp    ebp,ebx
c00076ea:	75 d0                	jne    c00076bc <sbrk+0x2c>
c00076ec:	0f 20 d8             	mov    eax,cr3
c00076ef:	0f 22 d8             	mov    cr3,eax
c00076f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00076f6:	83 c4 1c             	add    esp,0x1c
c00076f9:	5b                   	pop    ebx
c00076fa:	5e                   	pop    esi
c00076fb:	5f                   	pop    edi
c00076fc:	5d                   	pop    ebp
c00076fd:	c3                   	ret    
c00076fe:	a1 c8 f7 01 c0       	mov    eax,ds:0xc001f7c8
c0007703:	eb f1                	jmp    c00076f6 <sbrk+0x66>
c0007705:	83 ec 08             	sub    esp,0x8
c0007708:	50                   	push   eax
c0007709:	68 5c d6 01 c0       	push   0xc001d65c
c000770e:	e8 6e 2e 00 00       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c0007713:	83 c4 10             	add    esp,0x10
c0007716:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000771b:	eb d9                	jmp    c00076f6 <sbrk+0x66>
c000771d:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007723:	eb 8f                	jmp    c00076b4 <sbrk+0x24>

c0007725 <mmap>:
c0007725:	83 ec 18             	sub    esp,0x18
c0007728:	68 8c d6 01 c0       	push   0xc001d68c
c000772d:	e8 d1 8a 00 00       	call   c0010203 <KePanic(char const*)>
c0007732:	b8 00 00 00 00       	mov    eax,0x0
c0007737:	83 c4 1c             	add    esp,0x1c
c000773a:	c3                   	ret    

c000773b <munmap>:
c000773b:	83 ec 18             	sub    esp,0x18
c000773e:	68 91 d6 01 c0       	push   0xc001d691
c0007743:	e8 bb 8a 00 00       	call   c0010203 <KePanic(char const*)>
c0007748:	b8 00 00 00 00       	mov    eax,0x0
c000774d:	83 c4 1c             	add    esp,0x1c
c0007750:	c3                   	ret    

c0007751 <liballoc_lock()>:
c0007751:	fa                   	cli    
c0007752:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0007758:	b8 00 00 00 00       	mov    eax,0x0
c000775d:	c3                   	ret    

c000775e <liballoc_unlock()>:
c000775e:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0007763:	48                   	dec    eax
c0007764:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0007769:	75 01                	jne    c000776c <liballoc_unlock()+0xe>
c000776b:	fb                   	sti    
c000776c:	b8 00 00 00 00       	mov    eax,0x0
c0007771:	c3                   	ret    

c0007772 <liballoc_alloc(int)>:
c0007772:	83 ec 10             	sub    esp,0x10
c0007775:	6a 01                	push   0x1
c0007777:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000777b:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0007781:	e8 76 22 00 00       	call   c00099fc <VAS::allocatePages(int, int)>
c0007786:	83 c4 1c             	add    esp,0x1c
c0007789:	c3                   	ret    

c000778a <liballoc_free(void*, int)>:
c000778a:	83 ec 14             	sub    esp,0x14
c000778d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007791:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0007797:	e8 02 1f 00 00       	call   c000969e <VAS::freeAllocatedPages(unsigned long)>
c000779c:	b8 00 00 00 00       	mov    eax,0x0
c00077a1:	83 c4 1c             	add    esp,0x1c
c00077a4:	c3                   	ret    

c00077a5 <realloc>:
c00077a5:	83 ec 14             	sub    esp,0x14
c00077a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077b0:	e8 7c 9d ff ff       	call   c0001531 <dlrealloc>
c00077b5:	83 c4 1c             	add    esp,0x1c
c00077b8:	c3                   	ret    

c00077b9 <malloc>:
c00077b9:	83 ec 18             	sub    esp,0x18
c00077bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077c0:	e8 2f 98 ff ff       	call   c0000ff4 <dlmalloc>
c00077c5:	83 c4 1c             	add    esp,0x1c
c00077c8:	c3                   	ret    

c00077c9 <free>:
c00077c9:	83 ec 18             	sub    esp,0x18
c00077cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077d0:	e8 c4 94 ff ff       	call   c0000c99 <dlfree>
c00077d5:	83 c4 1c             	add    esp,0x1c
c00077d8:	c3                   	ret    

c00077d9 <rfree>:
c00077d9:	83 ec 18             	sub    esp,0x18
c00077dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077e0:	e8 b4 94 ff ff       	call   c0000c99 <dlfree>
c00077e5:	83 c4 1c             	add    esp,0x1c
c00077e8:	c3                   	ret    

c00077e9 <calloc>:
c00077e9:	56                   	push   esi
c00077ea:	53                   	push   ebx
c00077eb:	83 ec 10             	sub    esp,0x10
c00077ee:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00077f2:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00077f7:	53                   	push   ebx
c00077f8:	e8 bc ff ff ff       	call   c00077b9 <malloc>
c00077fd:	89 c6                	mov    esi,eax
c00077ff:	83 c4 0c             	add    esp,0xc
c0007802:	53                   	push   ebx
c0007803:	6a 00                	push   0x0
c0007805:	50                   	push   eax
c0007806:	e8 c5 8c ff ff       	call   c00004d0 <memset>
c000780b:	89 f0                	mov    eax,esi
c000780d:	83 c4 14             	add    esp,0x14
c0007810:	5b                   	pop    ebx
c0007811:	5e                   	pop    esi
c0007812:	c3                   	ret    

c0007813 <KeEntryPoint>:
c0007813:	57                   	push   edi
c0007814:	bf f9 03 00 00       	mov    edi,0x3f9
c0007819:	56                   	push   esi
c000781a:	89 fa                	mov    edx,edi
c000781c:	53                   	push   ebx
c000781d:	31 f6                	xor    esi,esi
c000781f:	83 ec 2c             	sub    esp,0x2c
c0007822:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007827:	a3 d0 1e 02 c0       	mov    ds:0xc0021ed0,eax
c000782c:	89 f0                	mov    eax,esi
c000782e:	ee                   	out    dx,al
c000782f:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007834:	b0 80                	mov    al,0x80
c0007836:	89 da                	mov    edx,ebx
c0007838:	ee                   	out    dx,al
c0007839:	b1 03                	mov    cl,0x3
c000783b:	ba f8 03 00 00       	mov    edx,0x3f8
c0007840:	88 c8                	mov    al,cl
c0007842:	ee                   	out    dx,al
c0007843:	89 f0                	mov    eax,esi
c0007845:	89 fa                	mov    edx,edi
c0007847:	ee                   	out    dx,al
c0007848:	88 c8                	mov    al,cl
c000784a:	89 da                	mov    edx,ebx
c000784c:	ee                   	out    dx,al
c000784d:	b0 c7                	mov    al,0xc7
c000784f:	ba fa 03 00 00       	mov    edx,0x3fa
c0007854:	ee                   	out    dx,al
c0007855:	b0 0b                	mov    al,0xb
c0007857:	ba fc 03 00 00       	mov    edx,0x3fc
c000785c:	ee                   	out    dx,al
c000785d:	68 98 d6 01 c0       	push   0xc001d698
c0007862:	e8 1a 2d 00 00       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c0007867:	e8 b1 82 00 00       	call   c000fb1d <KeDisplaySplashScreen()>
c000786c:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007871:	05 ff 0f 00 00       	add    eax,0xfff
c0007876:	25 00 f0 ff ff       	and    eax,0xfffff000
c000787b:	89 04 24             	mov    DWORD PTR [esp],eax
c000787e:	e8 64 03 00 00       	call   c0007be7 <Phys::physicalMemorySetup(unsigned int)>
c0007883:	e8 bc 1b 00 00       	call   c0009444 <Virt::virtualMemorySetup()>
c0007888:	58                   	pop    eax
c0007889:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000788d:	53                   	push   ebx
c000788e:	e8 25 24 00 00       	call   c0009cb8 <VAS::VAS()>
c0007893:	89 1d b0 1f 02 c0    	mov    DWORD PTR ds:0xc0021fb0,ebx
c0007899:	e8 cc 4a 01 00       	call   c001c36a <_init>
c000789e:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c00078a5:	e8 0f ff ff ff       	call   c00077b9 <malloc>
c00078aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00078ad:	89 c6                	mov    esi,eax
c00078af:	e8 7e f2 ff ff       	call   c0006b32 <Computer::Computer()>
c00078b4:	6a 00                	push   0x0
c00078b6:	89 35 b8 1e 02 c0    	mov    DWORD PTR ds:0xc0021eb8,esi
c00078bc:	6a 00                	push   0x0
c00078be:	6a 00                	push   0x0
c00078c0:	56                   	push   esi
c00078c1:	e8 12 f6 ff ff       	call   c0006ed8 <Computer::open(int, int, void*)>
c00078c6:	83 c4 14             	add    esp,0x14
c00078c9:	53                   	push   ebx
c00078ca:	e8 c5 1e 00 00       	call   c0009794 <VAS::~VAS()>
c00078cf:	83 c4 30             	add    esp,0x30
c00078d2:	5b                   	pop    ebx
c00078d3:	5e                   	pop    esi
c00078d4:	5f                   	pop    edi
c00078d5:	c3                   	ret    

c00078d6 <Phys::allocateDMA(unsigned long)>:
c00078d6:	55                   	push   ebp
c00078d7:	31 ed                	xor    ebp,ebp
c00078d9:	57                   	push   edi
c00078da:	56                   	push   esi
c00078db:	53                   	push   ebx
c00078dc:	31 db                	xor    ebx,ebx
c00078de:	83 ec 1c             	sub    esp,0x1c
c00078e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00078e5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00078ed:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c00078f3:	31 c0                	xor    eax,eax
c00078f5:	c1 ef 0c             	shr    edi,0xc
c00078f8:	eb 19                	jmp    c0007913 <Phys::allocateDMA(unsigned long)+0x3d>
c00078fa:	85 c0                	test   eax,eax
c00078fc:	75 06                	jne    c0007904 <Phys::allocateDMA(unsigned long)+0x2e>
c00078fe:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007902:	89 dd                	mov    ebp,ebx
c0007904:	8d 70 01             	lea    esi,[eax+0x1]
c0007907:	39 f7                	cmp    edi,esi
c0007909:	74 33                	je     c000793e <Phys::allocateDMA(unsigned long)+0x68>
c000790b:	89 f0                	mov    eax,esi
c000790d:	43                   	inc    ebx
c000790e:	83 fb 0f             	cmp    ebx,0xf
c0007911:	7f 11                	jg     c0007924 <Phys::allocateDMA(unsigned long)+0x4e>
c0007913:	80 bb ec 1e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffde114],0x0
c000791a:	74 de                	je     c00078fa <Phys::allocateDMA(unsigned long)+0x24>
c000791c:	31 c0                	xor    eax,eax
c000791e:	43                   	inc    ebx
c000791f:	83 fb 0f             	cmp    ebx,0xf
c0007922:	7e ef                	jle    c0007913 <Phys::allocateDMA(unsigned long)+0x3d>
c0007924:	83 ec 0c             	sub    esp,0xc
c0007927:	68 b0 d6 01 c0       	push   0xc001d6b0
c000792c:	e8 d2 88 00 00       	call   c0010203 <KePanic(char const*)>
c0007931:	83 c4 10             	add    esp,0x10
c0007934:	31 c0                	xor    eax,eax
c0007936:	83 c4 1c             	add    esp,0x1c
c0007939:	5b                   	pop    ebx
c000793a:	5e                   	pop    esi
c000793b:	5f                   	pop    edi
c000793c:	5d                   	pop    ebp
c000793d:	c3                   	ret    
c000793e:	89 e9                	mov    ecx,ebp
c0007940:	c1 f9 04             	sar    ecx,0x4
c0007943:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007947:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000794b:	89 ca                	mov    edx,ecx
c000794d:	4a                   	dec    edx
c000794e:	79 03                	jns    c0007953 <Phys::allocateDMA(unsigned long)+0x7d>
c0007950:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007953:	c1 fa 04             	sar    edx,0x4
c0007956:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000795a:	74 08                	je     c0007964 <Phys::allocateDMA(unsigned long)+0x8e>
c000795c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007960:	31 c0                	xor    eax,eax
c0007962:	eb ba                	jmp    c000791e <Phys::allocateDMA(unsigned long)+0x48>
c0007964:	85 f6                	test   esi,esi
c0007966:	74 15                	je     c000797d <Phys::allocateDMA(unsigned long)+0xa7>
c0007968:	8d 95 ec 1e 02 c0    	lea    edx,[ebp-0x3ffde114]
c000796e:	8d 84 05 ed 1e 02 c0 	lea    eax,[ebp+eax*1-0x3ffde113]
c0007975:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007978:	42                   	inc    edx
c0007979:	39 d0                	cmp    eax,edx
c000797b:	75 f8                	jne    c0007975 <Phys::allocateDMA(unsigned long)+0x9f>
c000797d:	01 3d e4 1e 02 c0    	add    DWORD PTR ds:0xc0021ee4,edi
c0007983:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007987:	85 c0                	test   eax,eax
c0007989:	74 17                	je     c00079a2 <Phys::allocateDMA(unsigned long)+0xcc>
c000798b:	83 ec 0c             	sub    esp,0xc
c000798e:	68 b0 d6 01 c0       	push   0xc001d6b0
c0007993:	e8 6b 88 00 00       	call   c0010203 <KePanic(char const*)>
c0007998:	83 c4 10             	add    esp,0x10
c000799b:	89 f0                	mov    eax,esi
c000799d:	e9 6b ff ff ff       	jmp    c000790d <Phys::allocateDMA(unsigned long)+0x37>
c00079a2:	c1 e5 0c             	shl    ebp,0xc
c00079a5:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c00079ab:	eb 89                	jmp    c0007936 <Phys::allocateDMA(unsigned long)+0x60>

c00079ad <Phys::freeDMA(unsigned long, unsigned long)>:
c00079ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079b1:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c00079b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00079bb:	c1 ea 0c             	shr    edx,0xc
c00079be:	05 00 00 ff 3d       	add    eax,0x3dff0000
c00079c3:	29 15 e4 1e 02 c0    	sub    DWORD PTR ds:0xc0021ee4,edx
c00079c9:	c1 e8 0c             	shr    eax,0xc
c00079cc:	85 d2                	test   edx,edx
c00079ce:	74 0f                	je     c00079df <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c00079d0:	05 ec 1e 02 c0       	add    eax,0xc0021eec
c00079d5:	01 c2                	add    edx,eax
c00079d7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00079da:	40                   	inc    eax
c00079db:	39 d0                	cmp    eax,edx
c00079dd:	75 f8                	jne    c00079d7 <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c00079df:	c3                   	ret    

c00079e0 <Phys::setPageState(unsigned long, bool)>:
c00079e0:	56                   	push   esi
c00079e1:	ba 01 00 00 00       	mov    edx,0x1
c00079e6:	53                   	push   ebx
c00079e7:	8b 35 cc f7 01 c0    	mov    esi,DWORD PTR ds:0xc001f7cc
c00079ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00079f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00079f5:	89 c8                	mov    eax,ecx
c00079f7:	83 e1 07             	and    ecx,0x7
c00079fa:	c1 e8 03             	shr    eax,0x3
c00079fd:	d3 e3                	shl    ebx,cl
c00079ff:	01 c6                	add    esi,eax
c0007a01:	d3 e2                	shl    edx,cl
c0007a03:	f7 d2                	not    edx
c0007a05:	20 16                	and    BYTE PTR [esi],dl
c0007a07:	03 05 cc f7 01 c0    	add    eax,DWORD PTR ds:0xc001f7cc
c0007a0d:	08 18                	or     BYTE PTR [eax],bl
c0007a0f:	5b                   	pop    ebx
c0007a10:	5e                   	pop    esi
c0007a11:	c3                   	ret    

c0007a12 <Phys::getPageState(unsigned long)>:
c0007a12:	53                   	push   ebx
c0007a13:	8b 15 cc f7 01 c0    	mov    edx,DWORD PTR ds:0xc001f7cc
c0007a19:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007a1d:	31 db                	xor    ebx,ebx
c0007a1f:	89 c8                	mov    eax,ecx
c0007a21:	83 e1 07             	and    ecx,0x7
c0007a24:	c1 e8 03             	shr    eax,0x3
c0007a27:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c0007a2a:	89 d8                	mov    eax,ebx
c0007a2c:	5b                   	pop    ebx
c0007a2d:	d3 f8                	sar    eax,cl
c0007a2f:	83 e0 01             	and    eax,0x1
c0007a32:	c3                   	ret    

c0007a33 <Phys::freePage(unsigned long)>:
c0007a33:	53                   	push   ebx
c0007a34:	83 ec 08             	sub    esp,0x8
c0007a37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007a3b:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007a41:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007a47:	76 3a                	jbe    c0007a83 <Phys::freePage(unsigned long)+0x50>
c0007a49:	c1 e8 0c             	shr    eax,0xc
c0007a4c:	50                   	push   eax
c0007a4d:	89 c3                	mov    ebx,eax
c0007a4f:	e8 be ff ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007a54:	5a                   	pop    edx
c0007a55:	84 c0                	test   al,al
c0007a57:	74 19                	je     c0007a72 <Phys::freePage(unsigned long)+0x3f>
c0007a59:	83 ec 08             	sub    esp,0x8
c0007a5c:	ff 0d e4 1e 02 c0    	dec    DWORD PTR ds:0xc0021ee4
c0007a62:	6a 00                	push   0x0
c0007a64:	53                   	push   ebx
c0007a65:	e8 76 ff ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007a6a:	83 c4 10             	add    esp,0x10
c0007a6d:	83 c4 08             	add    esp,0x8
c0007a70:	5b                   	pop    ebx
c0007a71:	c3                   	ret    
c0007a72:	c7 44 24 10 55 d7 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d755
c0007a7a:	83 c4 08             	add    esp,0x8
c0007a7d:	5b                   	pop    ebx
c0007a7e:	e9 80 87 00 00       	jmp    c0010203 <KePanic(char const*)>
c0007a83:	68 00 10 00 00       	push   0x1000
c0007a88:	50                   	push   eax
c0007a89:	e8 1f ff ff ff       	call   c00079ad <Phys::freeDMA(unsigned long, unsigned long)>
c0007a8e:	59                   	pop    ecx
c0007a8f:	5b                   	pop    ebx
c0007a90:	83 c4 08             	add    esp,0x8
c0007a93:	5b                   	pop    ebx
c0007a94:	c3                   	ret    

c0007a95 <Phys::allocatePage()>:
c0007a95:	56                   	push   esi
c0007a96:	53                   	push   ebx
c0007a97:	83 ec 14             	sub    esp,0x14
c0007a9a:	8b 35 d8 1e 02 c0    	mov    esi,DWORD PTR ds:0xc0021ed8
c0007aa0:	89 f3                	mov    ebx,esi
c0007aa2:	eb 0a                	jmp    c0007aae <Phys::allocatePage()+0x19>
c0007aa4:	89 1d d8 1e 02 c0    	mov    DWORD PTR ds:0xc0021ed8,ebx
c0007aaa:	39 de                	cmp    esi,ebx
c0007aac:	74 24                	je     c0007ad2 <Phys::allocatePage()+0x3d>
c0007aae:	53                   	push   ebx
c0007aaf:	e8 5e ff ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007ab4:	5a                   	pop    edx
c0007ab5:	84 c0                	test   al,al
c0007ab7:	74 5f                	je     c0007b18 <Phys::allocatePage()+0x83>
c0007ab9:	43                   	inc    ebx
c0007aba:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007ac0:	75 e2                	jne    c0007aa4 <Phys::allocatePage()+0xf>
c0007ac2:	31 db                	xor    ebx,ebx
c0007ac4:	c7 05 d8 1e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021ed8,0x0
c0007ace:	39 de                	cmp    esi,ebx
c0007ad0:	75 dc                	jne    c0007aae <Phys::allocatePage()+0x19>
c0007ad2:	83 ec 0c             	sub    esp,0xc
c0007ad5:	80 35 fc 1e 02 c0 01 	xor    BYTE PTR ds:0xc0021efc,0x1
c0007adc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007ae1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007ae4:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007aea:	50                   	push   eax
c0007aeb:	e8 5e 27 00 00       	call   c000a24e <VAS::scanForEviction()>
c0007af0:	83 c4 10             	add    esp,0x10
c0007af3:	85 c0                	test   eax,eax
c0007af5:	75 3f                	jne    c0007b36 <Phys::allocatePage()+0xa1>
c0007af7:	83 ec 0c             	sub    esp,0xc
c0007afa:	68 d8 d6 01 c0       	push   0xc001d6d8
c0007aff:	e8 ff 86 00 00       	call   c0010203 <KePanic(char const*)>
c0007b04:	83 c4 10             	add    esp,0x10
c0007b07:	8b 1d d8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021ed8
c0007b0d:	53                   	push   ebx
c0007b0e:	e8 ff fe ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007b13:	5a                   	pop    edx
c0007b14:	84 c0                	test   al,al
c0007b16:	75 a1                	jne    c0007ab9 <Phys::allocatePage()+0x24>
c0007b18:	6a 01                	push   0x1
c0007b1a:	53                   	push   ebx
c0007b1b:	e8 c0 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007b20:	a1 d8 1e 02 c0       	mov    eax,ds:0xc0021ed8
c0007b25:	5a                   	pop    edx
c0007b26:	ff 05 e4 1e 02 c0    	inc    DWORD PTR ds:0xc0021ee4
c0007b2c:	c1 e0 0c             	shl    eax,0xc
c0007b2f:	59                   	pop    ecx
c0007b30:	83 c4 14             	add    esp,0x14
c0007b33:	5b                   	pop    ebx
c0007b34:	5e                   	pop    esi
c0007b35:	c3                   	ret    
c0007b36:	83 ec 08             	sub    esp,0x8
c0007b39:	89 c2                	mov    edx,eax
c0007b3b:	6a 01                	push   0x1
c0007b3d:	c1 ea 0c             	shr    edx,0xc
c0007b40:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b44:	52                   	push   edx
c0007b45:	e8 96 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007b4a:	83 c4 10             	add    esp,0x10
c0007b4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b51:	eb dd                	jmp    c0007b30 <Phys::allocatePage()+0x9b>

c0007b53 <Phys::allocateContiguousPages(int)>:
c0007b53:	57                   	push   edi
c0007b54:	56                   	push   esi
c0007b55:	53                   	push   ebx
c0007b56:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b5a:	fa                   	cli    
c0007b5b:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0007b61:	31 db                	xor    ebx,ebx
c0007b63:	85 db                	test   ebx,ebx
c0007b65:	75 11                	jne    c0007b78 <Phys::allocateContiguousPages(int)+0x25>
c0007b67:	e8 29 ff ff ff       	call   c0007a95 <Phys::allocatePage()>
c0007b6c:	83 fe 01             	cmp    esi,0x1
c0007b6f:	89 c7                	mov    edi,eax
c0007b71:	74 21                	je     c0007b94 <Phys::allocateContiguousPages(int)+0x41>
c0007b73:	bb 01 00 00 00       	mov    ebx,0x1
c0007b78:	e8 18 ff ff ff       	call   c0007a95 <Phys::allocatePage()>
c0007b7d:	89 da                	mov    edx,ebx
c0007b7f:	c1 e2 0c             	shl    edx,0xc
c0007b82:	01 fa                	add    edx,edi
c0007b84:	39 c2                	cmp    edx,eax
c0007b86:	74 20                	je     c0007ba8 <Phys::allocateContiguousPages(int)+0x55>
c0007b88:	bb 01 00 00 00       	mov    ebx,0x1
c0007b8d:	89 c7                	mov    edi,eax
c0007b8f:	83 fe 01             	cmp    esi,0x1
c0007b92:	75 e4                	jne    c0007b78 <Phys::allocateContiguousPages(int)+0x25>
c0007b94:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0007b99:	48                   	dec    eax
c0007b9a:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0007b9f:	75 01                	jne    c0007ba2 <Phys::allocateContiguousPages(int)+0x4f>
c0007ba1:	fb                   	sti    
c0007ba2:	89 f8                	mov    eax,edi
c0007ba4:	5b                   	pop    ebx
c0007ba5:	5e                   	pop    esi
c0007ba6:	5f                   	pop    edi
c0007ba7:	c3                   	ret    
c0007ba8:	43                   	inc    ebx
c0007ba9:	39 f3                	cmp    ebx,esi
c0007bab:	75 b6                	jne    c0007b63 <Phys::allocateContiguousPages(int)+0x10>
c0007bad:	eb e5                	jmp    c0007b94 <Phys::allocateContiguousPages(int)+0x41>

c0007baf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007baf:	56                   	push   esi
c0007bb0:	53                   	push   ebx
c0007bb1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007bb5:	39 1d dc 1e 02 c0    	cmp    DWORD PTR ds:0xc0021edc,ebx
c0007bbb:	73 06                	jae    c0007bc3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007bbd:	89 1d dc 1e 02 c0    	mov    DWORD PTR ds:0xc0021edc,ebx
c0007bc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007bc7:	c1 eb 0c             	shr    ebx,0xc
c0007bca:	c1 e8 0c             	shr    eax,0xc
c0007bcd:	39 d8                	cmp    eax,ebx
c0007bcf:	73 13                	jae    c0007be4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007bd1:	6a 00                	push   0x0
c0007bd3:	8d 70 01             	lea    esi,[eax+0x1]
c0007bd6:	50                   	push   eax
c0007bd7:	e8 04 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007bdc:	5a                   	pop    edx
c0007bdd:	89 f0                	mov    eax,esi
c0007bdf:	59                   	pop    ecx
c0007be0:	39 f3                	cmp    ebx,esi
c0007be2:	75 ed                	jne    c0007bd1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007be4:	5b                   	pop    ebx
c0007be5:	5e                   	pop    esi
c0007be6:	c3                   	ret    

c0007be7 <Phys::physicalMemorySetup(unsigned int)>:
c0007be7:	55                   	push   ebp
c0007be8:	57                   	push   edi
c0007be9:	56                   	push   esi
c0007bea:	53                   	push   ebx
c0007beb:	31 db                	xor    ebx,ebx
c0007bed:	83 ec 40             	sub    esp,0x40
c0007bf0:	6a 10                	push   0x10
c0007bf2:	6a 00                	push   0x0
c0007bf4:	68 ec 1e 02 c0       	push   0xc0021eec
c0007bf9:	e8 d2 88 ff ff       	call   c00004d0 <memset>
c0007bfe:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007c02:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007c07:	05 00 10 00 00       	add    eax,0x1000
c0007c0c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007c10:	5a                   	pop    edx
c0007c11:	59                   	pop    ecx
c0007c12:	50                   	push   eax
c0007c13:	68 6b d7 01 c0       	push   0xc001d76b
c0007c18:	e8 64 29 00 00       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c0007c1d:	83 c4 10             	add    esp,0x10
c0007c20:	83 ec 08             	sub    esp,0x8
c0007c23:	6a 01                	push   0x1
c0007c25:	53                   	push   ebx
c0007c26:	43                   	inc    ebx
c0007c27:	e8 b4 fd ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007c2c:	83 c4 10             	add    esp,0x10
c0007c2f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007c35:	75 e9                	jne    c0007c20 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007c37:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c0007c3d:	66 85 c0             	test   ax,ax
c0007c40:	0f 84 97 01 00 00    	je     c0007ddd <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0007c46:	89 c7                	mov    edi,eax
c0007c48:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007c50:	81 e7 ff ff 00 00    	and    edi,0xffff
c0007c56:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007c5b:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007c5f:	eb 15                	jmp    c0007c76 <Phys::physicalMemorySetup(unsigned int)+0x8f>
c0007c61:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0007c65:	83 c3 18             	add    ebx,0x18
c0007c68:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007c6c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007c70:	0f 84 77 01 00 00    	je     c0007ded <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007c76:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007c79:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007c7c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007c7f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007c83:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007c87:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007c89:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007c8c:	01 f0                	add    eax,esi
c0007c8e:	55                   	push   ebp
c0007c8f:	11 fa                	adc    edx,edi
c0007c91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007c95:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007c99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c9d:	50                   	push   eax
c0007c9e:	56                   	push   esi
c0007c9f:	68 08 d7 01 c0       	push   0xc001d708
c0007ca4:	e8 d8 28 00 00       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c0007ca9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007cad:	83 c4 10             	add    esp,0x10
c0007cb0:	09 f8                	or     eax,edi
c0007cb2:	0f 85 35 01 00 00    	jne    c0007ded <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007cb8:	4d                   	dec    ebp
c0007cb9:	75 a6                	jne    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007cbb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0007cbf:	ba 00 00 08 00       	mov    edx,0x80000
c0007cc4:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0007cc8:	39 f2                	cmp    edx,esi
c0007cca:	89 c1                	mov    ecx,eax
c0007ccc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007cd4:	19 f9                	sbb    ecx,edi
c0007cd6:	0f 82 a7 00 00 00    	jb     c0007d83 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007cdc:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007ce0:	89 c1                	mov    ecx,eax
c0007ce2:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0007ce6:	0f 83 97 00 00 00    	jae    c0007d83 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007cec:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007cf1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007cf5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007cf9:	39 fa                	cmp    edx,edi
c0007cfb:	19 e8                	sbb    eax,ebp
c0007cfd:	0f 82 9a 01 00 00    	jb     c0007e9d <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c0007d03:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d07:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007d0b:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0007d11:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007d16:	83 d5 ff             	adc    ebp,0xffffffff
c0007d19:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0007d1d:	31 c0                	xor    eax,eax
c0007d1f:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0007d23:	39 fa                	cmp    edx,edi
c0007d25:	89 c1                	mov    ecx,eax
c0007d27:	19 e9                	sbb    ecx,ebp
c0007d29:	0f 83 32 ff ff ff    	jae    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d2f:	be 00 00 08 00       	mov    esi,0x80000
c0007d34:	51                   	push   ecx
c0007d35:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007d39:	57                   	push   edi
c0007d3a:	56                   	push   esi
c0007d3b:	68 2c d7 01 c0       	push   0xc001d72c
c0007d40:	e8 3c 28 00 00       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c0007d45:	5d                   	pop    ebp
c0007d46:	58                   	pop    eax
c0007d47:	57                   	push   edi
c0007d48:	56                   	push   esi
c0007d49:	e8 61 fe ff ff       	call   c0007baf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0007d4e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007d52:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007d56:	83 c4 0c             	add    esp,0xc
c0007d59:	0f ac d0 0c          	shrd   eax,edx,0xc
c0007d5d:	03 05 e8 1e 02 c0    	add    eax,DWORD PTR ds:0xc0021ee8
c0007d63:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0007d6a:	a3 e8 1e 02 c0       	mov    ds:0xc0021ee8,eax
c0007d6f:	52                   	push   edx
c0007d70:	50                   	push   eax
c0007d71:	68 91 d7 01 c0       	push   0xc001d791
c0007d76:	e8 06 28 00 00       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c0007d7b:	83 c4 10             	add    esp,0x10
c0007d7e:	e9 de fe ff ff       	jmp    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d83:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0007d87:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007d8b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007d8f:	39 ea                	cmp    edx,ebp
c0007d91:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0007d95:	0f 82 c6 fe ff ff    	jb     c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d9b:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007da0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0007da4:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0007da8:	0f 83 b3 fe ff ff    	jae    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007dae:	39 ee                	cmp    esi,ebp
c0007db0:	89 f8                	mov    eax,edi
c0007db2:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0007db6:	0f 83 78 ff ff ff    	jae    c0007d34 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007dbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dc0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007dc4:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0007dc8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0007dcc:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0007dd0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007dd4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007dd8:	e9 57 ff ff ff       	jmp    c0007d34 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007ddd:	83 ec 0c             	sub    esp,0xc
c0007de0:	68 83 d7 01 c0       	push   0xc001d783
c0007de5:	e8 19 84 00 00       	call   c0010203 <KePanic(char const*)>
c0007dea:	83 c4 10             	add    esp,0x10
c0007ded:	83 ec 08             	sub    esp,0x8
c0007df0:	bb 60 00 00 00       	mov    ebx,0x60
c0007df5:	6a 00                	push   0x0
c0007df7:	6a 06                	push   0x6
c0007df9:	e8 e2 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007dfe:	58                   	pop    eax
c0007dff:	5a                   	pop    edx
c0007e00:	6a 00                	push   0x0
c0007e02:	6a 07                	push   0x7
c0007e04:	e8 d7 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e09:	83 05 e8 1e 02 c0 02 	add    DWORD PTR ds:0xc0021ee8,0x2
c0007e10:	83 c4 10             	add    esp,0x10
c0007e13:	83 ec 08             	sub    esp,0x8
c0007e16:	6a 00                	push   0x0
c0007e18:	53                   	push   ebx
c0007e19:	43                   	inc    ebx
c0007e1a:	e8 c1 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e1f:	83 c4 10             	add    esp,0x10
c0007e22:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0007e28:	75 e9                	jne    c0007e13 <Phys::physicalMemorySetup(unsigned int)+0x22c>
c0007e2a:	a1 e8 1e 02 c0       	mov    eax,ds:0xc0021ee8
c0007e2f:	bb 40 01 00 00       	mov    ebx,0x140
c0007e34:	83 c0 20             	add    eax,0x20
c0007e37:	a3 e8 1e 02 c0       	mov    ds:0xc0021ee8,eax
c0007e3c:	eb 22                	jmp    c0007e60 <Phys::physicalMemorySetup(unsigned int)+0x279>
c0007e3e:	83 ec 08             	sub    esp,0x8
c0007e41:	6a 00                	push   0x0
c0007e43:	53                   	push   ebx
c0007e44:	43                   	inc    ebx
c0007e45:	e8 96 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e4a:	a1 e8 1e 02 c0       	mov    eax,ds:0xc0021ee8
c0007e4f:	83 c4 10             	add    esp,0x10
c0007e52:	40                   	inc    eax
c0007e53:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0007e59:	a3 e8 1e 02 c0       	mov    ds:0xc0021ee8,eax
c0007e5e:	74 07                	je     c0007e67 <Phys::physicalMemorySetup(unsigned int)+0x280>
c0007e60:	3d ff 03 00 00       	cmp    eax,0x3ff
c0007e65:	7e d7                	jle    c0007e3e <Phys::physicalMemorySetup(unsigned int)+0x257>
c0007e67:	bb d0 01 00 00       	mov    ebx,0x1d0
c0007e6c:	3d ff 07 00 00       	cmp    eax,0x7ff
c0007e71:	7f 22                	jg     c0007e95 <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0007e73:	83 ec 08             	sub    esp,0x8
c0007e76:	6a 00                	push   0x0
c0007e78:	53                   	push   ebx
c0007e79:	43                   	inc    ebx
c0007e7a:	e8 61 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e7f:	a1 e8 1e 02 c0       	mov    eax,ds:0xc0021ee8
c0007e84:	83 c4 10             	add    esp,0x10
c0007e87:	40                   	inc    eax
c0007e88:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0007e8e:	a3 e8 1e 02 c0       	mov    ds:0xc0021ee8,eax
c0007e93:	75 d7                	jne    c0007e6c <Phys::physicalMemorySetup(unsigned int)+0x285>
c0007e95:	83 c4 3c             	add    esp,0x3c
c0007e98:	5b                   	pop    ebx
c0007e99:	5e                   	pop    esi
c0007e9a:	5f                   	pop    edi
c0007e9b:	5d                   	pop    ebp
c0007e9c:	c3                   	ret    
c0007e9d:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0007ea5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007ead:	e9 51 fe ff ff       	jmp    c0007d03 <Phys::physicalMemorySetup(unsigned int)+0x11c>

c0007eb2 <Pipe::isAtty()>:
c0007eb2:	31 c0                	xor    eax,eax
c0007eb4:	c3                   	ret    
c0007eb5:	90                   	nop

c0007eb6 <Pipe::~Pipe()>:
c0007eb6:	83 ec 0c             	sub    esp,0xc
c0007eb9:	ba f0 d7 01 c0       	mov    edx,0xc001d7f0
c0007ebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec2:	89 10                	mov    DWORD PTR [eax],edx
c0007ec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec8:	83 ec 0c             	sub    esp,0xc
c0007ecb:	50                   	push   eax
c0007ecc:	e8 53 11 00 00       	call   c0009024 <UnixFile::~UnixFile()>
c0007ed1:	83 c4 10             	add    esp,0x10
c0007ed4:	90                   	nop
c0007ed5:	83 c4 0c             	add    esp,0xc
c0007ed8:	c3                   	ret    
c0007ed9:	90                   	nop

c0007eda <Pipe::~Pipe()>:
c0007eda:	83 ec 0c             	sub    esp,0xc
c0007edd:	83 ec 0c             	sub    esp,0xc
c0007ee0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ee4:	e8 cd ff ff ff       	call   c0007eb6 <Pipe::~Pipe()>
c0007ee9:	83 c4 10             	add    esp,0x10
c0007eec:	83 ec 08             	sub    esp,0x8
c0007eef:	6a 20                	push   0x20
c0007ef1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ef5:	e8 91 25 00 00       	call   c000a48b <operator delete(void*, unsigned long)>
c0007efa:	83 c4 10             	add    esp,0x10
c0007efd:	83 c4 0c             	add    esp,0xc
c0007f00:	c3                   	ret    
c0007f01:	90                   	nop

c0007f02 <Pipe::write(unsigned long long, void*, int*)>:
c0007f02:	55                   	push   ebp
c0007f03:	57                   	push   edi
c0007f04:	56                   	push   esi
c0007f05:	53                   	push   ebx
c0007f06:	83 ec 1c             	sub    esp,0x1c
c0007f09:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0007f0d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007f11:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0007f14:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f18:	89 04 24             	mov    DWORD PTR [esp],eax
c0007f1b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007f1f:	89 d8                	mov    eax,ebx
c0007f21:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0007f24:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f28:	89 d6                	mov    esi,edx
c0007f2a:	89 d7                	mov    edi,edx
c0007f2c:	c1 ff 1f             	sar    edi,0x1f
c0007f2f:	03 34 24             	add    esi,DWORD PTR [esp]
c0007f32:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0007f36:	c1 f8 1f             	sar    eax,0x1f
c0007f39:	39 f3                	cmp    ebx,esi
c0007f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007f3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f43:	19 f8                	sbb    eax,edi
c0007f45:	b8 01 00 00 00       	mov    eax,0x1
c0007f4a:	72 6e                	jb     c0007fba <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0007f4c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0007f4f:	01 d0                	add    eax,edx
c0007f51:	99                   	cdq    
c0007f52:	f7 fb                	idiv   ebx
c0007f54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007f58:	29 d3                	sub    ebx,edx
c0007f5a:	89 d7                	mov    edi,edx
c0007f5c:	89 de                	mov    esi,ebx
c0007f5e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007f61:	c1 fb 1f             	sar    ebx,0x1f
c0007f64:	39 f2                	cmp    edx,esi
c0007f66:	19 d8                	sbb    eax,ebx
c0007f68:	b8 00 00 00 00       	mov    eax,0x0
c0007f6d:	72 04                	jb     c0007f73 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0007f6f:	89 d0                	mov    eax,edx
c0007f71:	29 f0                	sub    eax,esi
c0007f73:	89 d3                	mov    ebx,edx
c0007f75:	29 c3                	sub    ebx,eax
c0007f77:	74 0b                	je     c0007f84 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0007f79:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0007f7c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0007f80:	89 d9                	mov    ecx,ebx
c0007f82:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f84:	85 c0                	test   eax,eax
c0007f86:	74 0d                	je     c0007f95 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0007f88:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0007f8c:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0007f8f:	89 de                	mov    esi,ebx
c0007f91:	89 c1                	mov    ecx,eax
c0007f93:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f95:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0007f98:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0007f9d:	75 10                	jne    c0007faf <Pipe::write(unsigned long long, void*, int*)+0xad>
c0007f9f:	83 ec 0c             	sub    esp,0xc
c0007fa2:	68 ad d7 01 c0       	push   0xc001d7ad
c0007fa7:	e8 57 82 00 00       	call   c0010203 <KePanic(char const*)>
c0007fac:	83 c4 10             	add    esp,0x10
c0007faf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007fb3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007fb6:	89 08                	mov    DWORD PTR [eax],ecx
c0007fb8:	31 c0                	xor    eax,eax
c0007fba:	83 c4 1c             	add    esp,0x1c
c0007fbd:	5b                   	pop    ebx
c0007fbe:	5e                   	pop    esi
c0007fbf:	5f                   	pop    edi
c0007fc0:	5d                   	pop    ebp
c0007fc1:	c3                   	ret    

c0007fc2 <Pipe::read(unsigned long long, void*, int*)>:
c0007fc2:	55                   	push   ebp
c0007fc3:	57                   	push   edi
c0007fc4:	56                   	push   esi
c0007fc5:	53                   	push   ebx
c0007fc6:	83 ec 1c             	sub    esp,0x1c
c0007fc9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0007fcd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0007fd1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007fd5:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0007fd8:	89 c8                	mov    eax,ecx
c0007fda:	99                   	cdq    
c0007fdb:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0007fdf:	74 24                	je     c0008005 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007fe1:	39 f9                	cmp    ecx,edi
c0007fe3:	89 d1                	mov    ecx,edx
c0007fe5:	19 f1                	sbb    ecx,esi
c0007fe7:	73 1c                	jae    c0008005 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007fe9:	fa                   	cli    
c0007fea:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0007ff0:	e8 03 b8 00 00       	call   c00137f8 <schedule()>
c0007ff5:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0007ffa:	48                   	dec    eax
c0007ffb:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0008000:	75 d3                	jne    c0007fd5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008002:	fb                   	sti    
c0008003:	eb d0                	jmp    c0007fd5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008005:	39 f8                	cmp    eax,edi
c0008007:	89 d1                	mov    ecx,edx
c0008009:	89 3c 24             	mov    DWORD PTR [esp],edi
c000800c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0008010:	19 f1                	sbb    ecx,esi
c0008012:	73 07                	jae    c000801b <Pipe::read(unsigned long long, void*, int*)+0x59>
c0008014:	89 04 24             	mov    DWORD PTR [esp],eax
c0008017:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000801b:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000801e:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0008021:	29 f7                	sub    edi,esi
c0008023:	89 f8                	mov    eax,edi
c0008025:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008029:	99                   	cdq    
c000802a:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000802d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008031:	19 d0                	sbb    eax,edx
c0008033:	73 07                	jae    c000803c <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0008035:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008038:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000803c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000803f:	89 ea                	mov    edx,ebp
c0008041:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0008045:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000804a:	74 0d                	je     c0008059 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000804c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000804f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0008053:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008057:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008059:	85 d2                	test   edx,edx
c000805b:	74 11                	je     c000806e <Pipe::read(unsigned long long, void*, int*)+0xac>
c000805d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008061:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0008064:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008068:	89 d1                	mov    ecx,edx
c000806a:	89 c7                	mov    edi,eax
c000806c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000806e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008071:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0008074:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0008077:	99                   	cdq    
c0008078:	89 f7                	mov    edi,esi
c000807a:	03 04 24             	add    eax,DWORD PTR [esp]
c000807d:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008081:	c1 ff 1f             	sar    edi,0x1f
c0008084:	57                   	push   edi
c0008085:	56                   	push   esi
c0008086:	52                   	push   edx
c0008087:	50                   	push   eax
c0008088:	e8 c3 41 01 00       	call   c001c250 <__umoddi3>
c000808d:	83 c4 10             	add    esp,0x10
c0008090:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008093:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008098:	75 10                	jne    c00080aa <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000809a:	83 ec 0c             	sub    esp,0xc
c000809d:	68 ca d7 01 c0       	push   0xc001d7ca
c00080a2:	e8 5c 81 00 00       	call   c0010203 <KePanic(char const*)>
c00080a7:	83 c4 10             	add    esp,0x10
c00080aa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00080ae:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00080b1:	89 10                	mov    DWORD PTR [eax],edx
c00080b3:	83 c4 1c             	add    esp,0x1c
c00080b6:	31 c0                	xor    eax,eax
c00080b8:	5b                   	pop    ebx
c00080b9:	5e                   	pop    esi
c00080ba:	5f                   	pop    edi
c00080bb:	5d                   	pop    ebp
c00080bc:	c3                   	ret    
c00080bd:	90                   	nop

c00080be <Pipe::Pipe(int)>:
c00080be:	83 ec 0c             	sub    esp,0xc
c00080c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080c5:	83 ec 08             	sub    esp,0x8
c00080c8:	6a 00                	push   0x0
c00080ca:	50                   	push   eax
c00080cb:	e8 72 0d 00 00       	call   c0008e42 <UnixFile::UnixFile(int)>
c00080d0:	83 c4 10             	add    esp,0x10
c00080d3:	ba f0 d7 01 c0       	mov    edx,0xc001d7f0
c00080d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080dc:	89 10                	mov    DWORD PTR [eax],edx
c00080de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080e2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00080e6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00080e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080ed:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00080f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080f8:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00080ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008103:	83 ec 0c             	sub    esp,0xc
c0008106:	50                   	push   eax
c0008107:	e8 ad f6 ff ff       	call   c00077b9 <malloc>
c000810c:	83 c4 10             	add    esp,0x10
c000810f:	89 c2                	mov    edx,eax
c0008111:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008115:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000811c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0008120:	90                   	nop
c0008121:	83 c4 0c             	add    esp,0xc
c0008124:	c3                   	ret    
c0008125:	90                   	nop

c0008126 <VgaText::isAtty()>:
c0008126:	b0 01                	mov    al,0x1
c0008128:	c3                   	ret    
c0008129:	90                   	nop

c000812a <VgaText::~VgaText()>:
c000812a:	83 ec 0c             	sub    esp,0xc
c000812d:	ba 84 d8 01 c0       	mov    edx,0xc001d884
c0008132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008136:	89 10                	mov    DWORD PTR [eax],edx
c0008138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000813c:	83 ec 0c             	sub    esp,0xc
c000813f:	50                   	push   eax
c0008140:	e8 df 0e 00 00       	call   c0009024 <UnixFile::~UnixFile()>
c0008145:	83 c4 10             	add    esp,0x10
c0008148:	90                   	nop
c0008149:	83 c4 0c             	add    esp,0xc
c000814c:	c3                   	ret    
c000814d:	90                   	nop

c000814e <VgaText::~VgaText()>:
c000814e:	83 ec 0c             	sub    esp,0xc
c0008151:	83 ec 0c             	sub    esp,0xc
c0008154:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008158:	e8 cd ff ff ff       	call   c000812a <VgaText::~VgaText()>
c000815d:	83 c4 10             	add    esp,0x10
c0008160:	83 ec 08             	sub    esp,0x8
c0008163:	68 34 01 00 00       	push   0x134
c0008168:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000816c:	e8 1a 23 00 00       	call   c000a48b <operator delete(void*, unsigned long)>
c0008171:	83 c4 10             	add    esp,0x10
c0008174:	83 c4 0c             	add    esp,0xc
c0008177:	c3                   	ret    

c0008178 <VgaText::read(unsigned long long, void*, int*)>:
c0008178:	83 ec 10             	sub    esp,0x10
c000817b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000817f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008183:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008187:	e8 54 46 00 00       	call   c000c7e0 <readKeyboard(VgaText*, char*, unsigned long)>
c000818c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008190:	89 02                	mov    DWORD PTR [edx],eax
c0008192:	31 c0                	xor    eax,eax
c0008194:	83 c4 1c             	add    esp,0x1c
c0008197:	c3                   	ret    

c0008198 <setTerminalScrollLock(bool)>:
c0008198:	c3                   	ret    

c0008199 <doTerminalCycle()>:
c0008199:	c3                   	ret    

c000819a <addToTerminalCycle(VgaText*)>:
c000819a:	c3                   	ret    

c000819b <scrollTerminalScrollLock(int)>:
c000819b:	c3                   	ret    

c000819c <VgaText::updateTitle()>:
c000819c:	c3                   	ret    
c000819d:	90                   	nop

c000819e <VgaText::load()>:
c000819e:	c3                   	ret    
c000819f:	90                   	nop

c00081a0 <VgaText::updateCursor()>:
c00081a0:	83 ec 14             	sub    esp,0x14
c00081a3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00081a7:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00081aa:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00081ad:	e8 22 e2 00 00       	call   c00163d4 <HalConsoleCursorUpdate(int, int)>
c00081b2:	83 c4 1c             	add    esp,0x1c
c00081b5:	c3                   	ret    

c00081b6 <VgaText::doANSI_SGR(int)>:
c00081b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00081ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00081be:	85 d2                	test   edx,edx
c00081c0:	75 0b                	jne    c00081cd <VgaText::doANSI_SGR(int)+0x17>
c00081c2:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00081c5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00081c8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00081cb:	eb 59                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c00081cd:	83 fa 07             	cmp    edx,0x7
c00081d0:	75 0b                	jne    c00081dd <VgaText::doANSI_SGR(int)+0x27>
c00081d2:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00081d5:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00081d8:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00081db:	eb 49                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c00081dd:	83 fa 1b             	cmp    edx,0x1b
c00081e0:	74 e0                	je     c00081c2 <VgaText::doANSI_SGR(int)+0xc>
c00081e2:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00081e5:	83 f9 07             	cmp    ecx,0x7
c00081e8:	77 09                	ja     c00081f3 <VgaText::doANSI_SGR(int)+0x3d>
c00081ea:	8b 14 8d 00 f8 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0800]
c00081f1:	eb 20                	jmp    c0008213 <VgaText::doANSI_SGR(int)+0x5d>
c00081f3:	8d 4a d8             	lea    ecx,[edx-0x28]
c00081f6:	83 f9 07             	cmp    ecx,0x7
c00081f9:	77 09                	ja     c0008204 <VgaText::doANSI_SGR(int)+0x4e>
c00081fb:	8b 14 8d 00 f8 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0800]
c0008202:	eb 22                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c0008204:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008207:	83 f9 07             	cmp    ecx,0x7
c000820a:	77 0b                	ja     c0008217 <VgaText::doANSI_SGR(int)+0x61>
c000820c:	8b 14 95 b8 f6 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0948]
c0008213:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008216:	c3                   	ret    
c0008217:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000821a:	83 f9 07             	cmp    ecx,0x7
c000821d:	77 0a                	ja     c0008229 <VgaText::doANSI_SGR(int)+0x73>
c000821f:	8b 14 95 90 f6 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0970]
c0008226:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008229:	c3                   	ret    

c000822a <VgaText::setDefaultBgColour(VgaColour)>:
c000822a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000822e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008232:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0008235:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008238:	c3                   	ret    
c0008239:	90                   	nop

c000823a <VgaText::setDefaultFgColour(VgaColour)>:
c000823a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000823e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008242:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0008245:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008248:	c3                   	ret    
c0008249:	90                   	nop

c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000824a:	53                   	push   ebx
c000824b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000824f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008253:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008257:	51                   	push   ecx
c0008258:	e8 cd ff ff ff       	call   c000822a <VgaText::setDefaultBgColour(VgaColour)>
c000825d:	58                   	pop    eax
c000825e:	5a                   	pop    edx
c000825f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0008263:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008267:	5b                   	pop    ebx
c0008268:	eb d0                	jmp    c000823a <VgaText::setDefaultFgColour(VgaColour)>

c000826a <VgaText::setTitleTextColour(VgaColour)>:
c000826a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000826e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008272:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008275:	c3                   	ret    

c0008276 <VgaText::setTitleColour(VgaColour)>:
c0008276:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000827a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000827e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008281:	c3                   	ret    

c0008282 <VgaText::setTitle(char*)>:
c0008282:	c3                   	ret    
c0008283:	90                   	nop

c0008284 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008284:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0008288:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000828d:	83 e0 0f             	and    eax,0xf
c0008290:	c1 e2 04             	shl    edx,0x4
c0008293:	09 d0                	or     eax,edx
c0008295:	c3                   	ret    

c0008296 <VgaText::scrollScreen()>:
c0008296:	55                   	push   ebp
c0008297:	b9 01 00 00 00       	mov    ecx,0x1
c000829c:	57                   	push   edi
c000829d:	56                   	push   esi
c000829e:	53                   	push   ebx
c000829f:	83 ec 0c             	sub    esp,0xc
c00082a2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00082a6:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00082ac:	31 ff                	xor    edi,edi
c00082ae:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00082b1:	83 f9 18             	cmp    ecx,0x18
c00082b4:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c00082b7:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c00082be:	75 27                	jne    c00082e7 <VgaText::scrollScreen()+0x51>
c00082c0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00082c3:	01 f5                	add    ebp,esi
c00082c5:	f7 c7 01 00 00 00    	test   edi,0x1
c00082cb:	74 16                	je     c00082e3 <VgaText::scrollScreen()+0x4d>
c00082cd:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00082d1:	50                   	push   eax
c00082d2:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00082d6:	50                   	push   eax
c00082d7:	e8 a8 ff ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c00082dc:	5a                   	pop    edx
c00082dd:	5a                   	pop    edx
c00082de:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c00082e1:	eb 04                	jmp    c00082e7 <VgaText::scrollScreen()+0x51>
c00082e3:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c00082e7:	47                   	inc    edi
c00082e8:	46                   	inc    esi
c00082e9:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00082ef:	75 bd                	jne    c00082ae <VgaText::scrollScreen()+0x18>
c00082f1:	41                   	inc    ecx
c00082f2:	83 f9 19             	cmp    ecx,0x19
c00082f5:	75 af                	jne    c00082a6 <VgaText::scrollScreen()+0x10>
c00082f7:	39 1d 04 1f 02 c0    	cmp    DWORD PTR ds:0xc0021f04,ebx
c00082fd:	75 1f                	jne    c000831e <VgaText::scrollScreen()+0x88>
c00082ff:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008303:	74 05                	je     c000830a <VgaText::scrollScreen()+0x74>
c0008305:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008308:	eb 14                	jmp    c000831e <VgaText::scrollScreen()+0x88>
c000830a:	50                   	push   eax
c000830b:	50                   	push   eax
c000830c:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008310:	50                   	push   eax
c0008311:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008315:	50                   	push   eax
c0008316:	e8 45 df 00 00       	call   c0016260 <HalConsoleScroll(int, int)>
c000831b:	83 c4 10             	add    esp,0x10
c000831e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008322:	83 c4 0c             	add    esp,0xc
c0008325:	5b                   	pop    ebx
c0008326:	5e                   	pop    esi
c0008327:	5f                   	pop    edi
c0008328:	5d                   	pop    ebp
c0008329:	e9 72 fe ff ff       	jmp    c00081a0 <VgaText::updateCursor()>

c000832e <VgaText::combineCharAndColour(char, unsigned char)>:
c000832e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008333:	c1 e0 08             	shl    eax,0x8
c0008336:	89 c2                	mov    edx,eax
c0008338:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000833d:	09 d0                	or     eax,edx
c000833f:	c3                   	ret    

c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0008340:	55                   	push   ebp
c0008341:	57                   	push   edi
c0008342:	56                   	push   esi
c0008343:	53                   	push   ebx
c0008344:	83 ec 1c             	sub    esp,0x1c
c0008347:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000834b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000834f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0008353:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008357:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000835b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000835f:	0f b6 c3             	movzx  eax,bl
c0008362:	50                   	push   eax
c0008363:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0008368:	50                   	push   eax
c0008369:	e8 16 ff ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c000836e:	5a                   	pop    edx
c000836f:	0f b6 c0             	movzx  eax,al
c0008372:	59                   	pop    ecx
c0008373:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0008378:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000837c:	50                   	push   eax
c000837d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008381:	e8 a8 ff ff ff       	call   c000832e <VgaText::combineCharAndColour(char, unsigned char)>
c0008386:	5a                   	pop    edx
c0008387:	66 6b d7 50          	imul   dx,di,0x50
c000838b:	59                   	pop    ecx
c000838c:	01 f2                	add    edx,esi
c000838e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008391:	0f b7 d2             	movzx  edx,dx
c0008394:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0008398:	39 2d 04 1f 02 c0    	cmp    DWORD PTR ds:0xc0021f04,ebp
c000839e:	75 28                	jne    c00083c8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c00083a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083a4:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00083a8:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c00083ac:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00083b0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00083b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00083b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00083bc:	83 c4 1c             	add    esp,0x1c
c00083bf:	5b                   	pop    ebx
c00083c0:	5e                   	pop    esi
c00083c1:	5f                   	pop    edi
c00083c2:	5d                   	pop    ebp
c00083c3:	e9 a0 df 00 00       	jmp    c0016368 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00083c8:	83 c4 1c             	add    esp,0x1c
c00083cb:	5b                   	pop    ebx
c00083cc:	5e                   	pop    esi
c00083cd:	5f                   	pop    edi
c00083ce:	5d                   	pop    ebp
c00083cf:	c3                   	ret    

c00083d0 <VgaText::getCursorX()>:
c00083d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083d4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00083d7:	c3                   	ret    

c00083d8 <VgaText::getCursorY()>:
c00083d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083dc:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00083df:	c3                   	ret    

c00083e0 <VgaText::setCursor(int, int)>:
c00083e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00083e8:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00083eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083ef:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00083f2:	e9 a9 fd ff ff       	jmp    c00081a0 <VgaText::updateCursor()>

c00083f7 <setActiveTerminal(VgaText*)>:
c00083f7:	53                   	push   ebx
c00083f8:	83 ec 08             	sub    esp,0x8
c00083fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00083ff:	85 db                	test   ebx,ebx
c0008401:	75 11                	jne    c0008414 <setActiveTerminal(VgaText*)+0x1d>
c0008403:	c7 44 24 10 04 d8 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d804
c000840b:	83 c4 08             	add    esp,0x8
c000840e:	5b                   	pop    ebx
c000840f:	e9 ef 7d 00 00       	jmp    c0010203 <KePanic(char const*)>
c0008414:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c0008419:	85 c0                	test   eax,eax
c000841b:	74 0c                	je     c0008429 <setActiveTerminal(VgaText*)+0x32>
c000841d:	83 ec 0c             	sub    esp,0xc
c0008420:	50                   	push   eax
c0008421:	e8 7a fd ff ff       	call   c00081a0 <VgaText::updateCursor()>
c0008426:	83 c4 10             	add    esp,0x10
c0008429:	89 1d 04 1f 02 c0    	mov    DWORD PTR ds:0xc0021f04,ebx
c000842f:	50                   	push   eax
c0008430:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008433:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008436:	53                   	push   ebx
c0008437:	e8 a4 ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c000843c:	83 c4 18             	add    esp,0x18
c000843f:	5b                   	pop    ebx
c0008440:	c3                   	ret    
c0008441:	90                   	nop

c0008442 <VgaText::clearScreen()>:
c0008442:	57                   	push   edi
c0008443:	56                   	push   esi
c0008444:	31 f6                	xor    esi,esi
c0008446:	53                   	push   ebx
c0008447:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000844b:	52                   	push   edx
c000844c:	6a 00                	push   0x0
c000844e:	6a 00                	push   0x0
c0008450:	53                   	push   ebx
c0008451:	e8 8a ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c0008456:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000845d:	83 c4 10             	add    esp,0x10
c0008460:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0008463:	7e 20                	jle    c0008485 <VgaText::clearScreen()+0x43>
c0008465:	31 ff                	xor    edi,edi
c0008467:	50                   	push   eax
c0008468:	50                   	push   eax
c0008469:	56                   	push   esi
c000846a:	57                   	push   edi
c000846b:	47                   	inc    edi
c000846c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000846f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008472:	6a 20                	push   0x20
c0008474:	53                   	push   ebx
c0008475:	e8 c6 fe ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000847a:	83 c4 20             	add    esp,0x20
c000847d:	83 ff 50             	cmp    edi,0x50
c0008480:	75 e5                	jne    c0008467 <VgaText::clearScreen()+0x25>
c0008482:	46                   	inc    esi
c0008483:	eb db                	jmp    c0008460 <VgaText::clearScreen()+0x1e>
c0008485:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000848c:	5b                   	pop    ebx
c000848d:	5e                   	pop    esi
c000848e:	5f                   	pop    edi
c000848f:	c3                   	ret    

c0008490 <VgaText::setCursorX(int)>:
c0008490:	83 ec 10             	sub    esp,0x10
c0008493:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008497:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	50                   	push   eax
c000849f:	e8 3c ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00084a4:	83 c4 1c             	add    esp,0x1c
c00084a7:	c3                   	ret    

c00084a8 <VgaText::setCursorY(int)>:
c00084a8:	83 ec 10             	sub    esp,0x10
c00084ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084b3:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00084b6:	50                   	push   eax
c00084b7:	e8 24 ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00084bc:	83 c4 1c             	add    esp,0x1c
c00084bf:	c3                   	ret    

c00084c0 <VgaText::incrementCursor(bool)>:
c00084c0:	56                   	push   esi
c00084c1:	53                   	push   ebx
c00084c2:	51                   	push   ecx
c00084c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084c7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00084cb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00084ce:	40                   	inc    eax
c00084cf:	83 f8 50             	cmp    eax,0x50
c00084d2:	74 05                	je     c00084d9 <VgaText::incrementCursor(bool)+0x19>
c00084d4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00084d7:	eb 24                	jmp    c00084fd <VgaText::incrementCursor(bool)+0x3d>
c00084d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00084dc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00084e3:	8d 50 01             	lea    edx,[eax+0x1]
c00084e6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00084e9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00084ec:	75 0f                	jne    c00084fd <VgaText::incrementCursor(bool)+0x3d>
c00084ee:	83 ec 0c             	sub    esp,0xc
c00084f1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00084f4:	53                   	push   ebx
c00084f5:	e8 9c fd ff ff       	call   c0008296 <VgaText::scrollScreen()>
c00084fa:	83 c4 10             	add    esp,0x10
c00084fd:	89 f0                	mov    eax,esi
c00084ff:	84 c0                	test   al,al
c0008501:	74 0c                	je     c000850f <VgaText::incrementCursor(bool)+0x4f>
c0008503:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008507:	5a                   	pop    edx
c0008508:	5b                   	pop    ebx
c0008509:	5e                   	pop    esi
c000850a:	e9 91 fc ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c000850f:	58                   	pop    eax
c0008510:	5b                   	pop    ebx
c0008511:	5e                   	pop    esi
c0008512:	c3                   	ret    
c0008513:	90                   	nop

c0008514 <VgaText::decrementCursor(bool)>:
c0008514:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008518:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000851c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000851f:	85 c0                	test   eax,eax
c0008521:	74 04                	je     c0008527 <VgaText::decrementCursor(bool)+0x13>
c0008523:	48                   	dec    eax
c0008524:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008527:	84 c9                	test   cl,cl
c0008529:	74 09                	je     c0008534 <VgaText::decrementCursor(bool)+0x20>
c000852b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000852f:	e9 6c fc ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c0008534:	c3                   	ret    
c0008535:	90                   	nop

c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008536:	53                   	push   ebx
c0008537:	83 ec 08             	sub    esp,0x8
c000853a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000853e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008542:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008546:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000854a:	3c 07                	cmp    al,0x7
c000854c:	75 21                	jne    c000856f <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c000854e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008556:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c000855e:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0008566:	83 c4 08             	add    esp,0x8
c0008569:	5b                   	pop    ebx
c000856a:	e9 68 2e 00 00       	jmp    c000b3d7 <Krnl::beep(int, int, bool)>
c000856f:	3c 0d                	cmp    al,0xd
c0008571:	75 09                	jne    c000857c <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0008573:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000857a:	eb 2c                	jmp    c00085a8 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c000857c:	3c 0a                	cmp    al,0xa
c000857e:	75 31                	jne    c00085b1 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0008580:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008583:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000858a:	8d 50 01             	lea    edx,[eax+0x1]
c000858d:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008590:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008593:	75 0f                	jne    c00085a4 <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c0008595:	83 ec 0c             	sub    esp,0xc
c0008598:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000859b:	53                   	push   ebx
c000859c:	e8 f5 fc ff ff       	call   c0008296 <VgaText::scrollScreen()>
c00085a1:	83 c4 10             	add    esp,0x10
c00085a4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00085a8:	83 c4 08             	add    esp,0x8
c00085ab:	5b                   	pop    ebx
c00085ac:	e9 ef fb ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c00085b1:	3c 08                	cmp    al,0x8
c00085b3:	75 25                	jne    c00085da <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c00085b5:	50                   	push   eax
c00085b6:	50                   	push   eax
c00085b7:	6a 01                	push   0x1
c00085b9:	53                   	push   ebx
c00085ba:	e8 55 ff ff ff       	call   c0008514 <VgaText::decrementCursor(bool)>
c00085bf:	5a                   	pop    edx
c00085c0:	59                   	pop    ecx
c00085c1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00085c4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00085c7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00085ca:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00085cd:	6a 20                	push   0x20
c00085cf:	53                   	push   ebx
c00085d0:	e8 6b fd ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00085d5:	83 c4 28             	add    esp,0x28
c00085d8:	5b                   	pop    ebx
c00085d9:	c3                   	ret    
c00085da:	83 ec 08             	sub    esp,0x8
c00085dd:	0f be c0             	movsx  eax,al
c00085e0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00085e3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00085e6:	51                   	push   ecx
c00085e7:	52                   	push   edx
c00085e8:	50                   	push   eax
c00085e9:	53                   	push   ebx
c00085ea:	e8 51 fd ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00085ef:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00085f3:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00085fb:	83 c4 28             	add    esp,0x28
c00085fe:	5b                   	pop    ebx
c00085ff:	e9 bc fe ff ff       	jmp    c00084c0 <VgaText::incrementCursor(bool)>

c0008604 <VgaText::putchar(char)>:
c0008604:	56                   	push   esi
c0008605:	53                   	push   ebx
c0008606:	83 ec 14             	sub    esp,0x14
c0008609:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000860d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008611:	3c 5b                	cmp    al,0x5b
c0008613:	75 18                	jne    c000862d <VgaText::putchar(char)+0x29>
c0008615:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008619:	74 1f                	je     c000863a <VgaText::putchar(char)+0x36>
c000861b:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008621:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008628:	e9 bd 00 00 00       	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c000862d:	3c 1b                	cmp    al,0x1b
c000862f:	75 09                	jne    c000863a <VgaText::putchar(char)+0x36>
c0008631:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008635:	e9 b0 00 00 00       	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c000863a:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000863d:	84 c9                	test   cl,cl
c000863f:	0f 84 92 00 00 00    	je     c00086d7 <VgaText::putchar(char)+0xd3>
c0008645:	8d 50 c0             	lea    edx,[eax-0x40]
c0008648:	80 fa 3e             	cmp    dl,0x3e
c000864b:	77 76                	ja     c00086c3 <VgaText::putchar(char)+0xbf>
c000864d:	3c 6d                	cmp    al,0x6d
c000864f:	75 47                	jne    c0008698 <VgaText::putchar(char)+0x94>
c0008651:	31 f6                	xor    esi,esi
c0008653:	31 d2                	xor    edx,edx
c0008655:	31 c0                	xor    eax,eax
c0008657:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000865a:	7e 2d                	jle    c0008689 <VgaText::putchar(char)+0x85>
c000865c:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008661:	80 fa 3b             	cmp    dl,0x3b
c0008664:	75 17                	jne    c000867d <VgaText::putchar(char)+0x79>
c0008666:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000866a:	50                   	push   eax
c000866b:	53                   	push   ebx
c000866c:	e8 45 fb ff ff       	call   c00081b6 <VgaText::doANSI_SGR(int)>
c0008671:	59                   	pop    ecx
c0008672:	31 d2                	xor    edx,edx
c0008674:	58                   	pop    eax
c0008675:	31 c0                	xor    eax,eax
c0008677:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000867b:	eb 09                	jmp    c0008686 <VgaText::putchar(char)+0x82>
c000867d:	6b c0 0a             	imul   eax,eax,0xa
c0008680:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008684:	88 ca                	mov    dl,cl
c0008686:	46                   	inc    esi
c0008687:	eb ce                	jmp    c0008657 <VgaText::putchar(char)+0x53>
c0008689:	84 d2                	test   dl,dl
c000868b:	74 2e                	je     c00086bb <VgaText::putchar(char)+0xb7>
c000868d:	50                   	push   eax
c000868e:	53                   	push   ebx
c000868f:	e8 22 fb ff ff       	call   c00081b6 <VgaText::doANSI_SGR(int)>
c0008694:	58                   	pop    eax
c0008695:	5a                   	pop    edx
c0008696:	eb 23                	jmp    c00086bb <VgaText::putchar(char)+0xb7>
c0008698:	3c 4a                	cmp    al,0x4a
c000869a:	75 1f                	jne    c00086bb <VgaText::putchar(char)+0xb7>
c000869c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00086a0:	75 19                	jne    c00086bb <VgaText::putchar(char)+0xb7>
c00086a2:	83 ec 0c             	sub    esp,0xc
c00086a5:	53                   	push   ebx
c00086a6:	e8 97 fd ff ff       	call   c0008442 <VgaText::clearScreen()>
c00086ab:	83 c4 0c             	add    esp,0xc
c00086ae:	6a 00                	push   0x0
c00086b0:	6a 00                	push   0x0
c00086b2:	53                   	push   ebx
c00086b3:	e8 28 fd ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00086b8:	83 c4 10             	add    esp,0x10
c00086bb:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00086c1:	eb 27                	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c00086c3:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c00086c6:	83 fa 0e             	cmp    edx,0xe
c00086c9:	7f 1f                	jg     c00086ea <VgaText::putchar(char)+0xe6>
c00086cb:	8d 4a 01             	lea    ecx,[edx+0x1]
c00086ce:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00086d1:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c00086d5:	eb 13                	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c00086d7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00086da:	0f be c0             	movsx  eax,al
c00086dd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00086e0:	50                   	push   eax
c00086e1:	53                   	push   ebx
c00086e2:	e8 4f fe ff ff       	call   c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>
c00086e7:	83 c4 10             	add    esp,0x10
c00086ea:	83 c4 14             	add    esp,0x14
c00086ed:	5b                   	pop    ebx
c00086ee:	5e                   	pop    esi
c00086ef:	c3                   	ret    

c00086f0 <VgaText::putx(unsigned int)>:
c00086f0:	57                   	push   edi
c00086f1:	b9 11 00 00 00       	mov    ecx,0x11
c00086f6:	56                   	push   esi
c00086f7:	be 12 d8 01 c0       	mov    esi,0xc001d812
c00086fc:	53                   	push   ebx
c00086fd:	83 ec 20             	sub    esp,0x20
c0008700:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008704:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008708:	fc                   	cld    
c0008709:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000870b:	be 08 00 00 00       	mov    esi,0x8
c0008710:	50                   	push   eax
c0008711:	50                   	push   eax
c0008712:	89 d8                	mov    eax,ebx
c0008714:	c1 e3 04             	shl    ebx,0x4
c0008717:	c1 e8 1c             	shr    eax,0x1c
c000871a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000871f:	50                   	push   eax
c0008720:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008724:	e8 db fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008729:	83 c4 10             	add    esp,0x10
c000872c:	4e                   	dec    esi
c000872d:	75 e1                	jne    c0008710 <VgaText::putx(unsigned int)+0x20>
c000872f:	83 c4 20             	add    esp,0x20
c0008732:	5b                   	pop    ebx
c0008733:	5e                   	pop    esi
c0008734:	5f                   	pop    edi
c0008735:	c3                   	ret    

c0008736 <VgaText::puts(char const*)>:
c0008736:	53                   	push   ebx
c0008737:	83 ec 08             	sub    esp,0x8
c000873a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000873e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008741:	84 c0                	test   al,al
c0008743:	74 12                	je     c0008757 <VgaText::puts(char const*)+0x21>
c0008745:	43                   	inc    ebx
c0008746:	51                   	push   ecx
c0008747:	51                   	push   ecx
c0008748:	50                   	push   eax
c0008749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000874d:	e8 b2 fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008752:	83 c4 10             	add    esp,0x10
c0008755:	eb e7                	jmp    c000873e <VgaText::puts(char const*)+0x8>
c0008757:	83 c4 08             	add    esp,0x8
c000875a:	5b                   	pop    ebx
c000875b:	c3                   	ret    

c000875c <VgaText::write(unsigned long long, void*, int*)>:
c000875c:	55                   	push   ebp
c000875d:	57                   	push   edi
c000875e:	56                   	push   esi
c000875f:	53                   	push   ebx
c0008760:	83 ec 0c             	sub    esp,0xc
c0008763:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008767:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000876b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000876f:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008776:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008779:	39 eb                	cmp    ebx,ebp
c000877b:	74 13                	je     c0008790 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000877d:	43                   	inc    ebx
c000877e:	50                   	push   eax
c000877f:	50                   	push   eax
c0008780:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008784:	50                   	push   eax
c0008785:	56                   	push   esi
c0008786:	e8 79 fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c000878b:	83 c4 10             	add    esp,0x10
c000878e:	eb e9                	jmp    c0008779 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008790:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008797:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000879b:	89 38                	mov    DWORD PTR [eax],edi
c000879d:	83 c4 0c             	add    esp,0xc
c00087a0:	31 c0                	xor    eax,eax
c00087a2:	5b                   	pop    ebx
c00087a3:	5e                   	pop    esi
c00087a4:	5f                   	pop    edi
c00087a5:	5d                   	pop    ebp
c00087a6:	c3                   	ret    
c00087a7:	90                   	nop

c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00087a8:	55                   	push   ebp
c00087a9:	57                   	push   edi
c00087aa:	56                   	push   esi
c00087ab:	53                   	push   ebx
c00087ac:	83 ec 0c             	sub    esp,0xc
c00087af:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00087b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00087b8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087bf:	50                   	push   eax
c00087c0:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00087c5:	50                   	push   eax
c00087c6:	e8 b9 fa ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c00087cb:	5a                   	pop    edx
c00087cc:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00087d1:	59                   	pop    ecx
c00087d2:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00087d5:	89 c5                	mov    ebp,eax
c00087d7:	0f b7 f6             	movzx  esi,si
c00087da:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00087de:	01 f6                	add    esi,esi
c00087e0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00087e3:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00087e6:	84 c0                	test   al,al
c00087e8:	0f 84 f4 00 00 00    	je     c00088e2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c00087ee:	3c 0d                	cmp    al,0xd
c00087f0:	75 0c                	jne    c00087fe <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c00087f2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00087f9:	e9 de 00 00 00       	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00087fe:	3c 0a                	cmp    al,0xa
c0008800:	75 45                	jne    c0008847 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0008802:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008805:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000880c:	8d 48 01             	lea    ecx,[eax+0x1]
c000880f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008812:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008815:	75 0f                	jne    c0008826 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0008817:	83 ec 0c             	sub    esp,0xc
c000881a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000881d:	53                   	push   ebx
c000881e:	e8 73 fa ff ff       	call   c0008296 <VgaText::scrollScreen()>
c0008823:	83 c4 10             	add    esp,0x10
c0008826:	83 ec 0c             	sub    esp,0xc
c0008829:	53                   	push   ebx
c000882a:	e8 71 f9 ff ff       	call   c00081a0 <VgaText::updateCursor()>
c000882f:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008834:	83 c4 10             	add    esp,0x10
c0008837:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000883a:	0f b7 f6             	movzx  esi,si
c000883d:	01 f6                	add    esi,esi
c000883f:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008842:	e9 95 00 00 00       	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008847:	3c 08                	cmp    al,0x8
c0008849:	75 35                	jne    c0008880 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c000884b:	51                   	push   ecx
c000884c:	51                   	push   ecx
c000884d:	6a 01                	push   0x1
c000884f:	53                   	push   ebx
c0008850:	e8 bf fc ff ff       	call   c0008514 <VgaText::decrementCursor(bool)>
c0008855:	5e                   	pop    esi
c0008856:	58                   	pop    eax
c0008857:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000885a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000885d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008860:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008863:	6a 20                	push   0x20
c0008865:	53                   	push   ebx
c0008866:	e8 d5 fa ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000886b:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008870:	83 c4 20             	add    esp,0x20
c0008873:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008876:	0f b7 f6             	movzx  esi,si
c0008879:	01 f6                	add    esi,esi
c000887b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000887e:	eb 5c                	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008880:	52                   	push   edx
c0008881:	52                   	push   edx
c0008882:	89 ea                	mov    edx,ebp
c0008884:	0f b6 ca             	movzx  ecx,dl
c0008887:	51                   	push   ecx
c0008888:	50                   	push   eax
c0008889:	e8 a0 fa ff ff       	call   c000832e <VgaText::combineCharAndColour(char, unsigned char)>
c000888e:	83 c4 10             	add    esp,0x10
c0008891:	66 89 06             	mov    WORD PTR [esi],ax
c0008894:	39 1d 04 1f 02 c0    	cmp    DWORD PTR ds:0xc0021f04,ebx
c000889a:	75 1d                	jne    c00088b9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c000889c:	83 ec 0c             	sub    esp,0xc
c000889f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00088a2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00088a5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088a9:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088ad:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00088b0:	50                   	push   eax
c00088b1:	e8 b2 da 00 00       	call   c0016368 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00088b6:	83 c4 20             	add    esp,0x20
c00088b9:	83 c6 02             	add    esi,0x2
c00088bc:	50                   	push   eax
c00088bd:	50                   	push   eax
c00088be:	6a 00                	push   0x0
c00088c0:	53                   	push   ebx
c00088c1:	e8 fa fb ff ff       	call   c00084c0 <VgaText::incrementCursor(bool)>
c00088c6:	83 c4 10             	add    esp,0x10
c00088c9:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c00088cd:	75 0d                	jne    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00088cf:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00088d4:	0f b7 f6             	movzx  esi,si
c00088d7:	01 f6                	add    esi,esi
c00088d9:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00088dc:	47                   	inc    edi
c00088dd:	e9 01 ff ff ff       	jmp    c00087e3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c00088e2:	83 ec 0c             	sub    esp,0xc
c00088e5:	53                   	push   ebx
c00088e6:	e8 b5 f8 ff ff       	call   c00081a0 <VgaText::updateCursor()>
c00088eb:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00088f2:	83 c4 1c             	add    esp,0x1c
c00088f5:	5b                   	pop    ebx
c00088f6:	5e                   	pop    esi
c00088f7:	5f                   	pop    edi
c00088f8:	5d                   	pop    ebp
c00088f9:	c3                   	ret    

c00088fa <VgaText::VgaText(char const*)>:
c00088fa:	56                   	push   esi
c00088fb:	53                   	push   ebx
c00088fc:	83 ec 04             	sub    esp,0x4
c00088ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008903:	83 ec 08             	sub    esp,0x8
c0008906:	6a 00                	push   0x0
c0008908:	50                   	push   eax
c0008909:	e8 34 05 00 00       	call   c0008e42 <UnixFile::UnixFile(int)>
c000890e:	83 c4 10             	add    esp,0x10
c0008911:	ba 84 d8 01 c0       	mov    edx,0xc001d884
c0008916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000891a:	89 10                	mov    DWORD PTR [eax],edx
c000891c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008920:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000892b:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008936:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000893a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000893e:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008946:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000894d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008951:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000895c:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008967:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000896e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008972:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008979:	83 ec 0c             	sub    esp,0xc
c000897c:	6a 01                	push   0x1
c000897e:	e8 02 09 00 00       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0008983:	83 c4 10             	add    esp,0x10
c0008986:	89 c2                	mov    edx,eax
c0008988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000898c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000898f:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c0008995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008999:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000899c:	89 c6                	mov    esi,eax
c000899e:	e8 f2 f0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c00089a3:	68 05 0c 00 00       	push   0xc05
c00089a8:	56                   	push   esi
c00089a9:	50                   	push   eax
c00089aa:	53                   	push   ebx
c00089ab:	e8 48 0f 00 00       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c00089b0:	83 c4 10             	add    esp,0x10
c00089b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089b7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00089ba:	83 ec 04             	sub    esp,0x4
c00089bd:	68 a0 0f 00 00       	push   0xfa0
c00089c2:	6a 00                	push   0x0
c00089c4:	50                   	push   eax
c00089c5:	e8 06 7b ff ff       	call   c00004d0 <memset>
c00089ca:	83 c4 10             	add    esp,0x10
c00089cd:	83 ec 04             	sub    esp,0x4
c00089d0:	6a 00                	push   0x0
c00089d2:	6a 07                	push   0x7
c00089d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089d8:	e8 6d f8 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00089dd:	83 c4 10             	add    esp,0x10
c00089e0:	83 ec 04             	sub    esp,0x4
c00089e3:	6a 00                	push   0x0
c00089e5:	6a 00                	push   0x0
c00089e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089eb:	e8 f0 f9 ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	83 ec 0c             	sub    esp,0xc
c00089f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089fa:	e8 43 fa ff ff       	call   c0008442 <VgaText::clearScreen()>
c00089ff:	83 c4 10             	add    esp,0x10
c0008a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a06:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008a0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a0e:	05 82 00 00 00       	add    eax,0x82
c0008a13:	83 ec 04             	sub    esp,0x4
c0008a16:	6a 30                	push   0x30
c0008a18:	6a 00                	push   0x0
c0008a1a:	50                   	push   eax
c0008a1b:	e8 b0 7a ff ff       	call   c00004d0 <memset>
c0008a20:	83 c4 10             	add    esp,0x10
c0008a23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a27:	05 b2 00 00 00       	add    eax,0xb2
c0008a2c:	83 ec 04             	sub    esp,0x4
c0008a2f:	68 80 00 00 00       	push   0x80
c0008a34:	6a 00                	push   0x0
c0008a36:	50                   	push   eax
c0008a37:	e8 94 7a ff ff       	call   c00004d0 <memset>
c0008a3c:	83 c4 10             	add    esp,0x10
c0008a3f:	90                   	nop
c0008a40:	83 c4 04             	add    esp,0x4
c0008a43:	5b                   	pop    ebx
c0008a44:	5e                   	pop    esi
c0008a45:	c3                   	ret    

c0008a46 <VgaText::receiveKey(unsigned char)>:
c0008a46:	57                   	push   edi
c0008a47:	56                   	push   esi
c0008a48:	53                   	push   ebx
c0008a49:	83 ec 10             	sub    esp,0x10
c0008a4c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008a50:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008a54:	89 f0                	mov    eax,esi
c0008a56:	84 c0                	test   al,al
c0008a58:	0f 84 3b 01 00 00    	je     c0008b99 <VgaText::receiveKey(unsigned char)+0x153>
c0008a5e:	8d bb 82 00 00 00    	lea    edi,[ebx+0x82]
c0008a64:	3c 08                	cmp    al,0x8
c0008a66:	75 68                	jne    c0008ad0 <VgaText::receiveKey(unsigned char)+0x8a>
c0008a68:	83 ec 0c             	sub    esp,0xc
c0008a6b:	57                   	push   edi
c0008a6c:	e8 cf 7a ff ff       	call   c0000540 <strlen>
c0008a71:	83 c4 10             	add    esp,0x10
c0008a74:	85 c0                	test   eax,eax
c0008a76:	0f 84 be 00 00 00    	je     c0008b3a <VgaText::receiveKey(unsigned char)+0xf4>
c0008a7c:	50                   	push   eax
c0008a7d:	50                   	push   eax
c0008a7e:	6a 08                	push   0x8
c0008a80:	53                   	push   ebx
c0008a81:	e8 7e fb ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008a86:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008a89:	e8 b2 7a ff ff       	call   c0000540 <strlen>
c0008a8e:	83 c4 10             	add    esp,0x10
c0008a91:	8a 84 03 81 00 00 00 	mov    al,BYTE PTR [ebx+eax*1+0x81]
c0008a98:	3c 0d                	cmp    al,0xd
c0008a9a:	0f 95 c1             	setne  cl
c0008a9d:	3c 18                	cmp    al,0x18
c0008a9f:	0f 9e c2             	setle  dl
c0008aa2:	84 d1                	test   cl,dl
c0008aa4:	74 17                	je     c0008abd <VgaText::receiveKey(unsigned char)+0x77>
c0008aa6:	83 e8 08             	sub    eax,0x8
c0008aa9:	3c 02                	cmp    al,0x2
c0008aab:	76 10                	jbe    c0008abd <VgaText::receiveKey(unsigned char)+0x77>
c0008aad:	50                   	push   eax
c0008aae:	50                   	push   eax
c0008aaf:	68 23 d8 01 c0       	push   0xc001d823
c0008ab4:	53                   	push   ebx
c0008ab5:	e8 7c fc ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0008aba:	83 c4 10             	add    esp,0x10
c0008abd:	83 ec 0c             	sub    esp,0xc
c0008ac0:	57                   	push   edi
c0008ac1:	e8 7a 7a ff ff       	call   c0000540 <strlen>
c0008ac6:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008ace:	eb 67                	jmp    c0008b37 <VgaText::receiveKey(unsigned char)+0xf1>
c0008ad0:	3c 18                	cmp    al,0x18
c0008ad2:	0f 96 c2             	setbe  dl
c0008ad5:	3c 0d                	cmp    al,0xd
c0008ad7:	0f 95 c0             	setne  al
c0008ada:	84 c2                	test   dl,al
c0008adc:	74 30                	je     c0008b0e <VgaText::receiveKey(unsigned char)+0xc8>
c0008ade:	8d 46 f7             	lea    eax,[esi-0x9]
c0008ae1:	3c 01                	cmp    al,0x1
c0008ae3:	76 29                	jbe    c0008b0e <VgaText::receiveKey(unsigned char)+0xc8>
c0008ae5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ae8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008aeb:	68 29 d8 01 c0       	push   0xc001d829
c0008af0:	53                   	push   ebx
c0008af1:	e8 b2 fc ff ff       	call   c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008af6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008af9:	8d 46 40             	lea    eax,[esi+0x40]
c0008afc:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008aff:	0f b6 c0             	movzx  eax,al
c0008b02:	50                   	push   eax
c0008b03:	53                   	push   ebx
c0008b04:	e8 2d fa ff ff       	call   c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008b09:	83 c4 20             	add    esp,0x20
c0008b0c:	eb 11                	jmp    c0008b1f <VgaText::receiveKey(unsigned char)+0xd9>
c0008b0e:	89 f0                	mov    eax,esi
c0008b10:	51                   	push   ecx
c0008b11:	0f be c0             	movsx  eax,al
c0008b14:	51                   	push   ecx
c0008b15:	50                   	push   eax
c0008b16:	53                   	push   ebx
c0008b17:	e8 e8 fa ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008b1c:	83 c4 10             	add    esp,0x10
c0008b1f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008b24:	89 f0                	mov    eax,esi
c0008b26:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0008b2a:	52                   	push   edx
c0008b2b:	52                   	push   edx
c0008b2c:	8d 44 24 16          	lea    eax,[esp+0x16]
c0008b30:	50                   	push   eax
c0008b31:	57                   	push   edi
c0008b32:	e8 89 7c ff ff       	call   c00007c0 <strcat>
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008b41:	75 06                	jne    c0008b49 <VgaText::receiveKey(unsigned char)+0x103>
c0008b43:	89 f0                	mov    eax,esi
c0008b45:	3c 0a                	cmp    al,0xa
c0008b47:	75 50                	jne    c0008b99 <VgaText::receiveKey(unsigned char)+0x153>
c0008b49:	83 ec 0c             	sub    esp,0xc
c0008b4c:	81 c3 b2 00 00 00    	add    ebx,0xb2
c0008b52:	53                   	push   ebx
c0008b53:	e8 e8 79 ff ff       	call   c0000540 <strlen>
c0008b58:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008b5b:	89 c6                	mov    esi,eax
c0008b5d:	e8 de 79 ff ff       	call   c0000540 <strlen>
c0008b62:	83 c4 10             	add    esp,0x10
c0008b65:	8d 44 06 04          	lea    eax,[esi+eax*1+0x4]
c0008b69:	3d 80 00 00 00       	cmp    eax,0x80
c0008b6e:	76 10                	jbe    c0008b80 <VgaText::receiveKey(unsigned char)+0x13a>
c0008b70:	83 ec 0c             	sub    esp,0xc
c0008b73:	68 2f d8 01 c0       	push   0xc001d82f
c0008b78:	e8 86 76 00 00       	call   c0010203 <KePanic(char const*)>
c0008b7d:	83 c4 10             	add    esp,0x10
c0008b80:	50                   	push   eax
c0008b81:	50                   	push   eax
c0008b82:	57                   	push   edi
c0008b83:	53                   	push   ebx
c0008b84:	e8 37 7c ff ff       	call   c00007c0 <strcat>
c0008b89:	83 c4 0c             	add    esp,0xc
c0008b8c:	6a 30                	push   0x30
c0008b8e:	6a 00                	push   0x0
c0008b90:	57                   	push   edi
c0008b91:	e8 3a 79 ff ff       	call   c00004d0 <memset>
c0008b96:	83 c4 10             	add    esp,0x10
c0008b99:	83 c4 10             	add    esp,0x10
c0008b9c:	5b                   	pop    ebx
c0008b9d:	5e                   	pop    esi
c0008b9e:	5f                   	pop    edi
c0008b9f:	c3                   	ret    

c0008ba0 <VgaText::doUpdate()>:
c0008ba0:	c3                   	ret    

c0008ba1 <newTerminal(char*)>:
c0008ba1:	83 ec 28             	sub    esp,0x28
c0008ba4:	68 34 01 00 00       	push   0x134
c0008ba9:	e8 0b ec ff ff       	call   c00077b9 <malloc>
c0008bae:	5a                   	pop    edx
c0008baf:	59                   	pop    ecx
c0008bb0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008bb4:	50                   	push   eax
c0008bb5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008bb9:	e8 3c fd ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c0008bbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bc2:	83 c4 2c             	add    esp,0x2c
c0008bc5:	c3                   	ret    
c0008bc6:	66 90                	xchg   ax,ax

c0008bc8 <TSS::TSS()>:
c0008bc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008bcc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008bd3:	90                   	nop
c0008bd4:	c3                   	ret    
c0008bd5:	90                   	nop
c0008bd6:	66 90                	xchg   ax,ax

c0008bd8 <TSS::setESP(unsigned long)>:
c0008bd8:	55                   	push   ebp
c0008bd9:	89 e5                	mov    ebp,esp
c0008bdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008be1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008be4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008be7:	90                   	nop
c0008be8:	5d                   	pop    ebp
c0008be9:	c3                   	ret    
c0008bea:	66 90                	xchg   ax,ax

c0008bec <TSS::flush()>:
c0008bec:	55                   	push   ebp
c0008bed:	89 e5                	mov    ebp,esp
c0008bef:	83 ec 10             	sub    esp,0x10
c0008bf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bf5:	8b 00                	mov    eax,DWORD PTR [eax]
c0008bf7:	83 c8 03             	or     eax,0x3
c0008bfa:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008bfe:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008c02:	66 89 d0             	mov    ax,dx
c0008c05:	0f 00 d8             	ltr    ax
c0008c08:	90                   	nop
c0008c09:	c9                   	leave  
c0008c0a:	c3                   	ret    
c0008c0b:	90                   	nop

c0008c0c <TSS::setup(unsigned long, unsigned long)>:
c0008c0c:	55                   	push   ebp
c0008c0d:	89 e5                	mov    ebp,esp
c0008c0f:	83 ec 18             	sub    esp,0x18
c0008c12:	83 ec 0c             	sub    esp,0xc
c0008c15:	6a 68                	push   0x68
c0008c17:	e8 9d eb ff ff       	call   c00077b9 <malloc>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	89 c2                	mov    edx,eax
c0008c21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c24:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c2d:	83 ec 04             	sub    esp,0x4
c0008c30:	6a 68                	push   0x68
c0008c32:	6a 00                	push   0x0
c0008c34:	50                   	push   eax
c0008c35:	e8 96 78 ff ff       	call   c00004d0 <memset>
c0008c3a:	83 c4 10             	add    esp,0x10
c0008c3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c43:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008c49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c4f:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008c55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c58:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c5b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008c5e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c64:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c67:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008c6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c70:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c73:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008c79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c7f:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008c85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c8b:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008c91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c94:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c97:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008c9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ca0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ca3:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0008ca9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008caf:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0008cb2:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0008cb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cb8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cbb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008cbe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008cc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cc4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cc7:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0008cce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cd1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cd4:	0f 20 da             	mov    edx,cr3
c0008cd7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0008cda:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0008cdd:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0008ce0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ce3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ce6:	83 ec 08             	sub    esp,0x8
c0008ce9:	50                   	push   eax
c0008cea:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008ced:	50                   	push   eax
c0008cee:	e8 4d e3 ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c0008cf3:	83 c4 10             	add    esp,0x10
c0008cf6:	83 ec 08             	sub    esp,0x8
c0008cf9:	6a 68                	push   0x68
c0008cfb:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008cfe:	50                   	push   eax
c0008cff:	e8 58 e3 ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c0008d04:	83 c4 10             	add    esp,0x10
c0008d07:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0008d0b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008d0e:	83 e0 0f             	and    eax,0xf
c0008d11:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008d14:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008d17:	83 c8 40             	or     eax,0x40
c0008d1a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008d1d:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0008d22:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008d28:	05 78 01 00 00       	add    eax,0x178
c0008d2d:	83 ec 04             	sub    esp,0x4
c0008d30:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0008d33:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0008d36:	50                   	push   eax
c0008d37:	e8 54 e3 ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c0008d3c:	83 c4 10             	add    esp,0x10
c0008d3f:	89 c2                	mov    edx,eax
c0008d41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d44:	89 10                	mov    DWORD PTR [eax],edx
c0008d46:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0008d4b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008d51:	05 78 01 00 00       	add    eax,0x178
c0008d56:	83 ec 0c             	sub    esp,0xc
c0008d59:	50                   	push   eax
c0008d5a:	e8 5b e3 ff ff       	call   c00070ba <GDT::flush()>
c0008d5f:	83 c4 10             	add    esp,0x10
c0008d62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d65:	8b 00                	mov    eax,DWORD PTR [eax]
c0008d67:	c9                   	leave  
c0008d68:	c3                   	ret    
c0008d69:	90                   	nop

c0008d6a <ReservedFilename::read(unsigned long long, void*, int*)>:
c0008d6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008d6e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008d72:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d75:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008d7a:	75 08                	jne    c0008d84 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0008d7c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008d82:	eb 38                	jmp    c0008dbc <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0008d84:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008d89:	75 17                	jne    c0008da2 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0008d8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008d90:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008d93:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008d99:	8b 10                	mov    edx,DWORD PTR [eax]
c0008d9b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008d9f:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0008da2:	89 c1                	mov    ecx,eax
c0008da4:	83 e1 fd             	and    ecx,0xfffffffd
c0008da7:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0008dad:	74 cd                	je     c0008d7c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008daf:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008db4:	83 e0 ef             	and    eax,0xffffffef
c0008db7:	83 f8 08             	cmp    eax,0x8
c0008dba:	76 c0                	jbe    c0008d7c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008dbc:	31 c0                	xor    eax,eax
c0008dbe:	c3                   	ret    
c0008dbf:	90                   	nop

c0008dc0 <ReservedFilename::isAtty()>:
c0008dc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008dc4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008dc7:	31 c0                	xor    eax,eax
c0008dc9:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0008dcf:	74 09                	je     c0008dda <ReservedFilename::isAtty()+0x1a>
c0008dd1:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0008dd7:	0f 94 c0             	sete   al
c0008dda:	c3                   	ret    
c0008ddb:	90                   	nop

c0008ddc <ReservedFilename::write(unsigned long long, void*, int*)>:
c0008ddc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008de0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008de4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008de7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008deb:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008df0:	75 08                	jne    c0008dfa <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0008df2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008df8:	eb 3d                	jmp    c0008e37 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008dfa:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008dff:	75 17                	jne    c0008e18 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0008e01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008e06:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008e09:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008e0f:	8b 10                	mov    edx,DWORD PTR [eax]
c0008e11:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008e15:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0008e18:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0008e1d:	75 04                	jne    c0008e23 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0008e1f:	89 0a                	mov    DWORD PTR [edx],ecx
c0008e21:	eb 14                	jmp    c0008e37 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008e23:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0008e28:	74 c8                	je     c0008df2 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008e2a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008e2f:	83 e0 ef             	and    eax,0xffffffef
c0008e32:	83 f8 08             	cmp    eax,0x8
c0008e35:	76 bb                	jbe    c0008df2 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008e37:	31 c0                	xor    eax,eax
c0008e39:	c3                   	ret    

c0008e3a <UnixFile::getFileDescriptor()>:
c0008e3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008e41:	c3                   	ret    

c0008e42 <UnixFile::UnixFile(int)>:
c0008e42:	53                   	push   ebx
c0008e43:	83 ec 28             	sub    esp,0x28
c0008e46:	ba 4c d9 01 c0       	mov    edx,0xc001d94c
c0008e4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008e4f:	89 10                	mov    DWORD PTR [eax],edx
c0008e51:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0008e59:	0f 8f 8c 01 00 00    	jg     c0008feb <UnixFile::UnixFile(int)+0x1a9>
c0008e5f:	a1 40 f8 01 c0       	mov    eax,ds:0xc001f840
c0008e64:	8d 50 01             	lea    edx,[eax+0x1]
c0008e67:	89 15 40 f8 01 c0    	mov    DWORD PTR ds:0xc001f840,edx
c0008e6d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008e71:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008e74:	83 ec 08             	sub    esp,0x8
c0008e77:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008e7b:	68 98 1f 02 c0       	push   0xc0021f98
c0008e80:	e8 b3 35 01 00       	call   c001c438 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0008e85:	83 c4 10             	add    esp,0x10
c0008e88:	a0 94 1f 02 c0       	mov    al,ds:0xc0021f94
c0008e8d:	83 f0 01             	xor    eax,0x1
c0008e90:	84 c0                	test   al,al
c0008e92:	0f 84 54 01 00 00    	je     c0008fec <UnixFile::UnixFile(int)+0x1aa>
c0008e98:	c6 05 94 1f 02 c0 01 	mov    BYTE PTR ds:0xc0021f94,0x1
c0008e9f:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0008ea7:	83 ec 0c             	sub    esp,0xc
c0008eaa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008eae:	e8 06 e9 ff ff       	call   c00077b9 <malloc>
c0008eb3:	83 c4 10             	add    esp,0x10
c0008eb6:	89 c3                	mov    ebx,eax
c0008eb8:	83 ec 08             	sub    esp,0x8
c0008ebb:	68 03 ff ff 0f       	push   0xfffff03
c0008ec0:	53                   	push   ebx
c0008ec1:	e8 2c 01 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008ec6:	83 c4 10             	add    esp,0x10
c0008ec9:	89 1d 8c 1f 02 c0    	mov    DWORD PTR ds:0xc0021f8c,ebx
c0008ecf:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0008ed7:	83 ec 0c             	sub    esp,0xc
c0008eda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ede:	e8 d6 e8 ff ff       	call   c00077b9 <malloc>
c0008ee3:	83 c4 10             	add    esp,0x10
c0008ee6:	89 c3                	mov    ebx,eax
c0008ee8:	83 ec 08             	sub    esp,0x8
c0008eeb:	68 01 ff ff 0f       	push   0xfffff01
c0008ef0:	53                   	push   ebx
c0008ef1:	e8 fc 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008ef6:	83 c4 10             	add    esp,0x10
c0008ef9:	89 1d 90 1f 02 c0    	mov    DWORD PTR ds:0xc0021f90,ebx
c0008eff:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0008f07:	83 ec 0c             	sub    esp,0xc
c0008f0a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008f0e:	e8 a6 e8 ff ff       	call   c00077b9 <malloc>
c0008f13:	83 c4 10             	add    esp,0x10
c0008f16:	89 c3                	mov    ebx,eax
c0008f18:	83 ec 08             	sub    esp,0x8
c0008f1b:	68 00 ff ff 0f       	push   0xfffff00
c0008f20:	53                   	push   ebx
c0008f21:	e8 cc 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008f26:	83 c4 10             	add    esp,0x10
c0008f29:	89 1d 84 1f 02 c0    	mov    DWORD PTR ds:0xc0021f84,ebx
c0008f2f:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0008f37:	83 ec 0c             	sub    esp,0xc
c0008f3a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008f3e:	e8 76 e8 ff ff       	call   c00077b9 <malloc>
c0008f43:	83 c4 10             	add    esp,0x10
c0008f46:	89 c3                	mov    ebx,eax
c0008f48:	83 ec 08             	sub    esp,0x8
c0008f4b:	68 02 ff ff 0f       	push   0xfffff02
c0008f50:	53                   	push   ebx
c0008f51:	e8 9c 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008f56:	83 c4 10             	add    esp,0x10
c0008f59:	89 1d 88 1f 02 c0    	mov    DWORD PTR ds:0xc0021f88,ebx
c0008f5f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0008f67:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0008f6c:	7f 7e                	jg     c0008fec <UnixFile::UnixFile(int)+0x1aa>
c0008f6e:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008f7d:	e8 37 e8 ff ff       	call   c00077b9 <malloc>
c0008f82:	83 c4 10             	add    esp,0x10
c0008f85:	89 c3                	mov    ebx,eax
c0008f87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f8b:	05 10 ff ff 0f       	add    eax,0xfffff10
c0008f90:	83 ec 08             	sub    esp,0x8
c0008f93:	50                   	push   eax
c0008f94:	53                   	push   ebx
c0008f95:	e8 58 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008f9a:	83 c4 10             	add    esp,0x10
c0008f9d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fa1:	89 1c 85 60 1f 02 c0 	mov    DWORD PTR [eax*4-0x3ffde0a0],ebx
c0008fa8:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0008fb0:	83 ec 0c             	sub    esp,0xc
c0008fb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb7:	e8 fd e7 ff ff       	call   c00077b9 <malloc>
c0008fbc:	83 c4 10             	add    esp,0x10
c0008fbf:	89 c3                	mov    ebx,eax
c0008fc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fc5:	05 20 ff ff 0f       	add    eax,0xfffff20
c0008fca:	83 ec 08             	sub    esp,0x8
c0008fcd:	50                   	push   eax
c0008fce:	53                   	push   ebx
c0008fcf:	e8 1e 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008fd4:	83 c4 10             	add    esp,0x10
c0008fd7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fdb:	89 1c 85 20 1f 02 c0 	mov    DWORD PTR [eax*4-0x3ffde0e0],ebx
c0008fe2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008fe6:	e9 7c ff ff ff       	jmp    c0008f67 <UnixFile::UnixFile(int)+0x125>
c0008feb:	90                   	nop
c0008fec:	83 c4 28             	add    esp,0x28
c0008fef:	5b                   	pop    ebx
c0008ff0:	c3                   	ret    
c0008ff1:	90                   	nop

c0008ff2 <ReservedFilename::ReservedFilename(int)>:
c0008ff2:	83 ec 0c             	sub    esp,0xc
c0008ff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ff9:	83 ec 08             	sub    esp,0x8
c0008ffc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009000:	50                   	push   eax
c0009001:	e8 3c fe ff ff       	call   c0008e42 <UnixFile::UnixFile(int)>
c0009006:	83 c4 10             	add    esp,0x10
c0009009:	ba 68 d9 01 c0       	mov    edx,0xc001d968
c000900e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009012:	89 10                	mov    DWORD PTR [eax],edx
c0009014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009018:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000901c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000901f:	90                   	nop
c0009020:	83 c4 0c             	add    esp,0xc
c0009023:	c3                   	ret    

c0009024 <UnixFile::~UnixFile()>:
c0009024:	83 ec 1c             	sub    esp,0x1c
c0009027:	ba 4c d9 01 c0       	mov    edx,0xc001d94c
c000902c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009030:	89 10                	mov    DWORD PTR [eax],edx
c0009032:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009036:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009039:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000903e:	7f 73                	jg     c00090b3 <UnixFile::~UnixFile()+0x8f>
c0009040:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009048:	83 ec 0c             	sub    esp,0xc
c000904b:	68 98 1f 02 c0       	push   0xc0021f98
c0009050:	e8 b7 34 01 00       	call   c001c50c <LinkedList<UnixFile>::getFirstElement()>
c0009055:	83 c4 10             	add    esp,0x10
c0009058:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000905c:	83 ec 0c             	sub    esp,0xc
c000905f:	68 98 1f 02 c0       	push   0xc0021f98
c0009064:	e8 ab 34 01 00       	call   c001c514 <LinkedList<UnixFile>::removeFirst()>
c0009069:	83 c4 10             	add    esp,0x10
c000906c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009070:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009074:	74 40                	je     c00090b6 <UnixFile::~UnixFile()+0x92>
c0009076:	83 ec 08             	sub    esp,0x8
c0009079:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000907d:	68 98 1f 02 c0       	push   0xc0021f98
c0009082:	e8 b1 33 01 00       	call   c001c438 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009087:	83 c4 10             	add    esp,0x10
c000908a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000908e:	8d 50 01             	lea    edx,[eax+0x1]
c0009091:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009095:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000909a:	0f 94 c0             	sete   al
c000909d:	84 c0                	test   al,al
c000909f:	74 a7                	je     c0009048 <UnixFile::~UnixFile()+0x24>
c00090a1:	83 ec 0c             	sub    esp,0xc
c00090a4:	68 24 d9 01 c0       	push   0xc001d924
c00090a9:	e8 55 71 00 00       	call   c0010203 <KePanic(char const*)>
c00090ae:	83 c4 10             	add    esp,0x10
c00090b1:	eb 95                	jmp    c0009048 <UnixFile::~UnixFile()+0x24>
c00090b3:	90                   	nop
c00090b4:	eb 01                	jmp    c00090b7 <UnixFile::~UnixFile()+0x93>
c00090b6:	90                   	nop
c00090b7:	90                   	nop
c00090b8:	83 c4 1c             	add    esp,0x1c
c00090bb:	c3                   	ret    

c00090bc <UnixFile::~UnixFile()>:
c00090bc:	83 ec 0c             	sub    esp,0xc
c00090bf:	83 ec 0c             	sub    esp,0xc
c00090c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c6:	e8 59 ff ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c00090cb:	83 c4 10             	add    esp,0x10
c00090ce:	83 ec 08             	sub    esp,0x8
c00090d1:	6a 0c                	push   0xc
c00090d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090d7:	e8 af 13 00 00       	call   c000a48b <operator delete(void*, unsigned long)>
c00090dc:	83 c4 10             	add    esp,0x10
c00090df:	83 c4 0c             	add    esp,0xc
c00090e2:	c3                   	ret    
c00090e3:	90                   	nop

c00090e4 <ReservedFilename::~ReservedFilename()>:
c00090e4:	83 ec 0c             	sub    esp,0xc
c00090e7:	ba 68 d9 01 c0       	mov    edx,0xc001d968
c00090ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f0:	89 10                	mov    DWORD PTR [eax],edx
c00090f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f6:	83 ec 0c             	sub    esp,0xc
c00090f9:	50                   	push   eax
c00090fa:	e8 25 ff ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	90                   	nop
c0009103:	83 c4 0c             	add    esp,0xc
c0009106:	c3                   	ret    
c0009107:	90                   	nop

c0009108 <ReservedFilename::~ReservedFilename()>:
c0009108:	83 ec 0c             	sub    esp,0xc
c000910b:	83 ec 0c             	sub    esp,0xc
c000910e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009112:	e8 cd ff ff ff       	call   c00090e4 <ReservedFilename::~ReservedFilename()>
c0009117:	83 c4 10             	add    esp,0x10
c000911a:	83 ec 08             	sub    esp,0x8
c000911d:	6a 0c                	push   0xc
c000911f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009123:	e8 63 13 00 00       	call   c000a48b <operator delete(void*, unsigned long)>
c0009128:	83 c4 10             	add    esp,0x10
c000912b:	83 c4 0c             	add    esp,0xc
c000912e:	c3                   	ret    

c000912f <getFromFileDescriptor(int)>:
c000912f:	53                   	push   ebx
c0009130:	83 ec 08             	sub    esp,0x8
c0009133:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009137:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000913d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0009143:	7f 2c                	jg     c0009171 <getFromFileDescriptor(int)+0x42>
c0009145:	83 ec 0c             	sub    esp,0xc
c0009148:	68 98 1f 02 c0       	push   0xc0021f98
c000914d:	e8 ba 33 01 00       	call   c001c50c <LinkedList<UnixFile>::getFirstElement()>
c0009152:	83 c4 10             	add    esp,0x10
c0009155:	85 c0                	test   eax,eax
c0009157:	75 04                	jne    c000915d <getFromFileDescriptor(int)+0x2e>
c0009159:	31 c0                	xor    eax,eax
c000915b:	eb 6e                	jmp    c00091cb <getFromFileDescriptor(int)+0x9c>
c000915d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0009160:	74 69                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c0009162:	52                   	push   edx
c0009163:	52                   	push   edx
c0009164:	50                   	push   eax
c0009165:	68 98 1f 02 c0       	push   0xc0021f98
c000916a:	e8 47 34 01 00       	call   c001c5b6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000916f:	eb e1                	jmp    c0009152 <getFromFileDescriptor(int)+0x23>
c0009171:	a1 8c 1f 02 c0       	mov    eax,ds:0xc0021f8c
c0009176:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000917c:	74 4d                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c000917e:	a1 90 1f 02 c0       	mov    eax,ds:0xc0021f90
c0009183:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009189:	74 40                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c000918b:	a1 88 1f 02 c0       	mov    eax,ds:0xc0021f88
c0009190:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0009196:	74 33                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c0009198:	a1 84 1f 02 c0       	mov    eax,ds:0xc0021f84
c000919d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00091a3:	74 26                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c00091a5:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00091ab:	83 f8 08             	cmp    eax,0x8
c00091ae:	77 09                	ja     c00091b9 <getFromFileDescriptor(int)+0x8a>
c00091b0:	8b 04 85 60 1f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde0a0]
c00091b7:	eb 12                	jmp    c00091cb <getFromFileDescriptor(int)+0x9c>
c00091b9:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00091bf:	83 fb 08             	cmp    ebx,0x8
c00091c2:	77 95                	ja     c0009159 <getFromFileDescriptor(int)+0x2a>
c00091c4:	8b 04 9d 20 1f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffde0e0]
c00091cb:	83 c4 08             	add    esp,0x8
c00091ce:	5b                   	pop    ebx
c00091cf:	c3                   	ret    

c00091d0 <__static_initialization_and_destruction_0(int, int)>:
c00091d0:	83 ec 0c             	sub    esp,0xc
c00091d3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00091d8:	75 34                	jne    c000920e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00091da:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00091e2:	75 2a                	jne    c000920e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00091e4:	83 ec 0c             	sub    esp,0xc
c00091e7:	68 98 1f 02 c0       	push   0xc0021f98
c00091ec:	e8 05 32 01 00       	call   c001c3f6 <LinkedList<UnixFile>::LinkedList()>
c00091f1:	83 c4 10             	add    esp,0x10
c00091f4:	83 ec 04             	sub    esp,0x4
c00091f7:	68 c4 f7 01 c0       	push   0xc001f7c4
c00091fc:	68 98 1f 02 c0       	push   0xc0021f98
c0009201:	68 f4 c3 01 c0       	push   0xc001c3f4
c0009206:	e8 30 12 00 00       	call   c000a43b <__cxa_atexit>
c000920b:	83 c4 10             	add    esp,0x10
c000920e:	90                   	nop
c000920f:	83 c4 0c             	add    esp,0xc
c0009212:	c3                   	ret    

c0009213 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009213:	83 ec 0c             	sub    esp,0xc
c0009216:	83 ec 08             	sub    esp,0x8
c0009219:	68 ff ff 00 00       	push   0xffff
c000921e:	6a 01                	push   0x1
c0009220:	e8 ab ff ff ff       	call   c00091d0 <__static_initialization_and_destruction_0(int, int)>
c0009225:	83 c4 10             	add    esp,0x10
c0009228:	83 c4 0c             	add    esp,0xc
c000922b:	c3                   	ret    

c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000922c:	53                   	push   ebx
c000922d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009231:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009235:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000923b:	89 c8                	mov    eax,ecx
c000923d:	d1 e8                	shr    eax,1
c000923f:	03 05 48 f8 01 c0    	add    eax,DWORD PTR ds:0xc001f848
c0009245:	83 e1 01             	and    ecx,0x1
c0009248:	8a 10                	mov    dl,BYTE PTR [eax]
c000924a:	75 09                	jne    c0009255 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000924c:	83 e2 f0             	and    edx,0xfffffff0
c000924f:	09 da                	or     edx,ebx
c0009251:	88 10                	mov    BYTE PTR [eax],dl
c0009253:	5b                   	pop    ebx
c0009254:	c3                   	ret    
c0009255:	c1 e3 04             	shl    ebx,0x4
c0009258:	83 e2 0f             	and    edx,0xf
c000925b:	09 da                	or     edx,ebx
c000925d:	88 10                	mov    BYTE PTR [eax],dl
c000925f:	5b                   	pop    ebx
c0009260:	c3                   	ret    

c0009261 <Virt::getPageState(unsigned long)>:
c0009261:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009265:	8b 0d 48 f8 01 c0    	mov    ecx,DWORD PTR ds:0xc001f848
c000926b:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0009271:	89 d0                	mov    eax,edx
c0009273:	d1 e8                	shr    eax,1
c0009275:	83 e2 01             	and    edx,0x1
c0009278:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000927b:	75 04                	jne    c0009281 <Virt::getPageState(unsigned long)+0x20>
c000927d:	83 e0 0f             	and    eax,0xf
c0009280:	c3                   	ret    
c0009281:	c0 e8 04             	shr    al,0x4
c0009284:	c3                   	ret    

c0009285 <Virt::allocateKernelVirtualPages(int)>:
c0009285:	55                   	push   ebp
c0009286:	31 ed                	xor    ebp,ebp
c0009288:	57                   	push   edi
c0009289:	56                   	push   esi
c000928a:	53                   	push   ebx
c000928b:	31 db                	xor    ebx,ebx
c000928d:	83 ec 1c             	sub    esp,0x1c
c0009290:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009294:	8b 3d 44 f8 01 c0    	mov    edi,DWORD PTR ds:0xc001f844
c000929a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000929f:	57                   	push   edi
c00092a0:	e8 bc ff ff ff       	call   c0009261 <Virt::getPageState(unsigned long)>
c00092a5:	5a                   	pop    edx
c00092a6:	84 c0                	test   al,al
c00092a8:	75 3a                	jne    c00092e4 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00092aa:	85 db                	test   ebx,ebx
c00092ac:	75 02                	jne    c00092b0 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00092ae:	89 fd                	mov    ebp,edi
c00092b0:	43                   	inc    ebx
c00092b1:	39 f3                	cmp    ebx,esi
c00092b3:	74 5a                	je     c000930f <Virt::allocateKernelVirtualPages(int)+0x8a>
c00092b5:	47                   	inc    edi
c00092b6:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00092bc:	76 31                	jbe    c00092ef <Virt::allocateKernelVirtualPages(int)+0x6a>
c00092be:	c7 05 44 f8 01 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc001f844,0xc8000
c00092c8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00092cd:	75 28                	jne    c00092f7 <Virt::allocateKernelVirtualPages(int)+0x72>
c00092cf:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00092d4:	bf 00 80 0c 00       	mov    edi,0xc8000
c00092d9:	57                   	push   edi
c00092da:	e8 82 ff ff ff       	call   c0009261 <Virt::getPageState(unsigned long)>
c00092df:	5a                   	pop    edx
c00092e0:	84 c0                	test   al,al
c00092e2:	74 c6                	je     c00092aa <Virt::allocateKernelVirtualPages(int)+0x25>
c00092e4:	31 db                	xor    ebx,ebx
c00092e6:	47                   	inc    edi
c00092e7:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00092ed:	77 cf                	ja     c00092be <Virt::allocateKernelVirtualPages(int)+0x39>
c00092ef:	89 3d 44 f8 01 c0    	mov    DWORD PTR ds:0xc001f844,edi
c00092f5:	eb a8                	jmp    c000929f <Virt::allocateKernelVirtualPages(int)+0x1a>
c00092f7:	83 ec 0c             	sub    esp,0xc
c00092fa:	68 7c d9 01 c0       	push   0xc001d97c
c00092ff:	e8 ff 6e 00 00       	call   c0010203 <KePanic(char const*)>
c0009304:	8b 3d 44 f8 01 c0    	mov    edi,DWORD PTR ds:0xc001f844
c000930a:	83 c4 10             	add    esp,0x10
c000930d:	eb 90                	jmp    c000929f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000930f:	89 2d 44 f8 01 c0    	mov    DWORD PTR ds:0xc001f844,ebp
c0009315:	4b                   	dec    ebx
c0009316:	74 5f                	je     c0009377 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0009318:	85 f6                	test   esi,esi
c000931a:	74 3d                	je     c0009359 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000931c:	89 e8                	mov    eax,ebp
c000931e:	31 db                	xor    ebx,ebx
c0009320:	8d 7e ff             	lea    edi,[esi-0x1]
c0009323:	eb 14                	jmp    c0009339 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0009325:	6a 01                	push   0x1
c0009327:	43                   	inc    ebx
c0009328:	50                   	push   eax
c0009329:	e8 fe fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000932e:	58                   	pop    eax
c000932f:	39 f3                	cmp    ebx,esi
c0009331:	5a                   	pop    edx
c0009332:	74 25                	je     c0009359 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009334:	a1 44 f8 01 c0       	mov    eax,ds:0xc001f844
c0009339:	8d 50 01             	lea    edx,[eax+0x1]
c000933c:	85 db                	test   ebx,ebx
c000933e:	89 15 44 f8 01 c0    	mov    DWORD PTR ds:0xc001f844,edx
c0009344:	74 20                	je     c0009366 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0009346:	39 df                	cmp    edi,ebx
c0009348:	75 db                	jne    c0009325 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000934a:	6a 03                	push   0x3
c000934c:	43                   	inc    ebx
c000934d:	50                   	push   eax
c000934e:	e8 d9 fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009353:	59                   	pop    ecx
c0009354:	39 f3                	cmp    ebx,esi
c0009356:	58                   	pop    eax
c0009357:	75 db                	jne    c0009334 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009359:	83 c4 1c             	add    esp,0x1c
c000935c:	89 e8                	mov    eax,ebp
c000935e:	5b                   	pop    ebx
c000935f:	c1 e0 0c             	shl    eax,0xc
c0009362:	5e                   	pop    esi
c0009363:	5f                   	pop    edi
c0009364:	5d                   	pop    ebp
c0009365:	c3                   	ret    
c0009366:	6a 02                	push   0x2
c0009368:	bb 01 00 00 00       	mov    ebx,0x1
c000936d:	50                   	push   eax
c000936e:	e8 b9 fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009373:	58                   	pop    eax
c0009374:	5a                   	pop    edx
c0009375:	eb bd                	jmp    c0009334 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009377:	6a 04                	push   0x4
c0009379:	8d 45 01             	lea    eax,[ebp+0x1]
c000937c:	55                   	push   ebp
c000937d:	a3 44 f8 01 c0       	mov    ds:0xc001f844,eax
c0009382:	e8 a5 fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009387:	59                   	pop    ecx
c0009388:	89 e8                	mov    eax,ebp
c000938a:	5b                   	pop    ebx
c000938b:	c1 e0 0c             	shl    eax,0xc
c000938e:	83 c4 1c             	add    esp,0x1c
c0009391:	5b                   	pop    ebx
c0009392:	5e                   	pop    esi
c0009393:	5f                   	pop    edi
c0009394:	5d                   	pop    ebp
c0009395:	c3                   	ret    

c0009396 <Virt::freeSwapfilePage(unsigned long)>:
c0009396:	53                   	push   ebx
c0009397:	8b 15 ac 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021fac
c000939d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00093a1:	b8 01 00 00 00       	mov    eax,0x1
c00093a6:	89 cb                	mov    ebx,ecx
c00093a8:	d3 e0                	shl    eax,cl
c00093aa:	c1 eb 05             	shr    ebx,0x5
c00093ad:	f7 d0                	not    eax
c00093af:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c00093b2:	5b                   	pop    ebx
c00093b3:	c3                   	ret    

c00093b4 <Virt::swapIDToSector(unsigned long)>:
c00093b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00093b8:	0f af 05 4c f8 01 c0 	imul   eax,DWORD PTR ds:0xc001f84c
c00093bf:	03 05 54 f8 01 c0    	add    eax,DWORD PTR ds:0xc001f854
c00093c5:	c3                   	ret    

c00093c6 <Virt::allocateSwapfilePage()>:
c00093c6:	55                   	push   ebp
c00093c7:	31 d2                	xor    edx,edx
c00093c9:	57                   	push   edi
c00093ca:	56                   	push   esi
c00093cb:	53                   	push   ebx
c00093cc:	83 ec 0c             	sub    esp,0xc
c00093cf:	8b 0d 4c f8 01 c0    	mov    ecx,DWORD PTR ds:0xc001f84c
c00093d5:	a1 50 f8 01 c0       	mov    eax,ds:0xc001f850
c00093da:	f7 f1                	div    ecx
c00093dc:	39 0d 50 f8 01 c0    	cmp    DWORD PTR ds:0xc001f850,ecx
c00093e2:	72 2d                	jb     c0009411 <Virt::allocateSwapfilePage()+0x4b>
c00093e4:	8b 35 ac 1f 02 c0    	mov    esi,DWORD PTR ds:0xc0021fac
c00093ea:	8b 16                	mov    edx,DWORD PTR [esi]
c00093ec:	f6 c2 01             	test   dl,0x1
c00093ef:	74 3c                	je     c000942d <Virt::allocateSwapfilePage()+0x67>
c00093f1:	31 c9                	xor    ecx,ecx
c00093f3:	bf 01 00 00 00       	mov    edi,0x1
c00093f8:	eb 12                	jmp    c000940c <Virt::allocateSwapfilePage()+0x46>
c00093fa:	89 fd                	mov    ebp,edi
c00093fc:	89 ca                	mov    edx,ecx
c00093fe:	d3 e5                	shl    ebp,cl
c0009400:	c1 ea 05             	shr    edx,0x5
c0009403:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009406:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009408:	85 ea                	test   edx,ebp
c000940a:	74 2a                	je     c0009436 <Virt::allocateSwapfilePage()+0x70>
c000940c:	41                   	inc    ecx
c000940d:	39 c8                	cmp    eax,ecx
c000940f:	77 e9                	ja     c00093fa <Virt::allocateSwapfilePage()+0x34>
c0009411:	83 ec 0c             	sub    esp,0xc
c0009414:	68 0d db 01 c0       	push   0xc001db0d
c0009419:	e8 e5 6d 00 00       	call   c0010203 <KePanic(char const*)>
c000941e:	83 c4 10             	add    esp,0x10
c0009421:	31 c9                	xor    ecx,ecx
c0009423:	83 c4 0c             	add    esp,0xc
c0009426:	89 c8                	mov    eax,ecx
c0009428:	5b                   	pop    ebx
c0009429:	5e                   	pop    esi
c000942a:	5f                   	pop    edi
c000942b:	5d                   	pop    ebp
c000942c:	c3                   	ret    
c000942d:	89 f3                	mov    ebx,esi
c000942f:	bd 01 00 00 00       	mov    ebp,0x1
c0009434:	31 c9                	xor    ecx,ecx
c0009436:	09 ea                	or     edx,ebp
c0009438:	89 c8                	mov    eax,ecx
c000943a:	89 13                	mov    DWORD PTR [ebx],edx
c000943c:	83 c4 0c             	add    esp,0xc
c000943f:	5b                   	pop    ebx
c0009440:	5e                   	pop    esi
c0009441:	5f                   	pop    edi
c0009442:	5d                   	pop    ebp
c0009443:	c3                   	ret    

c0009444 <Virt::virtualMemorySetup()>:
c0009444:	53                   	push   ebx
c0009445:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000944a:	6a 0f                	push   0xf
c000944c:	53                   	push   ebx
c000944d:	43                   	inc    ebx
c000944e:	e8 d9 fd ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009453:	58                   	pop    eax
c0009454:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000945a:	5a                   	pop    edx
c000945b:	75 ed                	jne    c000944a <Virt::virtualMemorySetup()+0x6>
c000945d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009462:	6a 00                	push   0x0
c0009464:	53                   	push   ebx
c0009465:	43                   	inc    ebx
c0009466:	e8 c1 fd ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000946b:	59                   	pop    ecx
c000946c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009472:	58                   	pop    eax
c0009473:	75 ed                	jne    c0009462 <Virt::virtualMemorySetup()+0x1e>
c0009475:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000947a:	6a 0f                	push   0xf
c000947c:	53                   	push   ebx
c000947d:	43                   	inc    ebx
c000947e:	e8 a9 fd ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009483:	58                   	pop    eax
c0009484:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000948a:	5a                   	pop    edx
c000948b:	75 ed                	jne    c000947a <Virt::virtualMemorySetup()+0x36>
c000948d:	5b                   	pop    ebx
c000948e:	c3                   	ret    

c000948f <Virt::setupPageSwapping(int)>:
c000948f:	53                   	push   ebx
c0009490:	83 ec 0c             	sub    esp,0xc
c0009493:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009497:	a1 28 44 02 c0       	mov    eax,ds:0xc0024428
c000949c:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00094a2:	8b 10                	mov    edx,DWORD PTR [eax]
c00094a4:	53                   	push   ebx
c00094a5:	c1 e3 0b             	shl    ebx,0xb
c00094a8:	68 24 db 01 c0       	push   0xc001db24
c00094ad:	50                   	push   eax
c00094ae:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c00094b1:	89 1d 50 f8 01 c0    	mov    DWORD PTR ds:0xc001f850,ebx
c00094b7:	c6 05 58 f8 01 c0 43 	mov    BYTE PTR ds:0xc001f858,0x43
c00094be:	c1 eb 08             	shr    ebx,0x8
c00094c1:	a3 54 f8 01 c0       	mov    ds:0xc001f854,eax
c00094c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00094c9:	c7 05 4c f8 01 c0 08 00 00 00 	mov    DWORD PTR ds:0xc001f84c,0x8
c00094d3:	e8 e1 e2 ff ff       	call   c00077b9 <malloc>
c00094d8:	83 c4 0c             	add    esp,0xc
c00094db:	89 c1                	mov    ecx,eax
c00094dd:	a3 ac 1f 02 c0       	mov    ds:0xc0021fac,eax
c00094e2:	31 d2                	xor    edx,edx
c00094e4:	a1 50 f8 01 c0       	mov    eax,ds:0xc001f850
c00094e9:	f7 35 4c f8 01 c0    	div    DWORD PTR ds:0xc001f84c
c00094ef:	c1 e8 05             	shr    eax,0x5
c00094f2:	50                   	push   eax
c00094f3:	6a 00                	push   0x0
c00094f5:	51                   	push   ecx
c00094f6:	e8 d5 6f ff ff       	call   c00004d0 <memset>
c00094fb:	83 c4 18             	add    esp,0x18
c00094fe:	5b                   	pop    ebx
c00094ff:	c3                   	ret    

c0009500 <VAS::VAS(VAS*)>:
c0009500:	83 ec 0c             	sub    esp,0xc
c0009503:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009507:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000950e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009512:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009519:	83 ec 0c             	sub    esp,0xc
c000951c:	68 9c d9 01 c0       	push   0xc001d99c
c0009521:	e8 dd 6c 00 00       	call   c0010203 <KePanic(char const*)>
c0009526:	83 c4 10             	add    esp,0x10
c0009529:	90                   	nop
c000952a:	83 c4 0c             	add    esp,0xc
c000952d:	c3                   	ret    

c000952e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000952e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009532:	89 c2                	mov    edx,eax
c0009534:	c1 e8 0a             	shr    eax,0xa
c0009537:	c1 ea 16             	shr    edx,0x16
c000953a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000953f:	19 c9                	sbb    ecx,ecx
c0009541:	c1 e2 0c             	shl    edx,0xc
c0009544:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000954a:	25 fc 0f 00 00       	and    eax,0xffc
c000954f:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009556:	01 d0                	add    eax,edx
c0009558:	c3                   	ret    
c0009559:	90                   	nop

c000955a <VAS::getPageTableEntry(unsigned long)>:
c000955a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000955e:	89 ca                	mov    edx,ecx
c0009560:	c1 e9 0a             	shr    ecx,0xa
c0009563:	c1 ea 16             	shr    edx,0x16
c0009566:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000956c:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009572:	c1 e0 0c             	shl    eax,0xc
c0009575:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009578:	c3                   	ret    

c0009579 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009579:	57                   	push   edi
c000957a:	56                   	push   esi
c000957b:	be 01 00 00 00       	mov    esi,0x1
c0009580:	53                   	push   ebx
c0009581:	83 ec 10             	sub    esp,0x10
c0009584:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009588:	c1 eb 0c             	shr    ebx,0xc
c000958b:	eb 3f                	jmp    c00095cc <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000958d:	83 ec 08             	sub    esp,0x8
c0009590:	a1 b0 1f 02 c0       	mov    eax,ds:0xc0021fb0
c0009595:	57                   	push   edi
c0009596:	50                   	push   eax
c0009597:	e8 be ff ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c000959c:	83 c4 10             	add    esp,0x10
c000959f:	8b 00                	mov    eax,DWORD PTR [eax]
c00095a1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00095a5:	f6 c4 04             	test   ah,0x4
c00095a8:	75 60                	jne    c000960a <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c00095aa:	80 fa 04             	cmp    dl,0x4
c00095ad:	74 79                	je     c0009628 <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c00095af:	80 fa 02             	cmp    dl,0x2
c00095b2:	0f 84 89 00 00 00    	je     c0009641 <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c00095b8:	80 fa 03             	cmp    dl,0x3
c00095bb:	0f 84 ae 00 00 00    	je     c000966f <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c00095c1:	fe ca                	dec    dl
c00095c3:	0f 84 93 00 00 00    	je     c000965c <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c00095c9:	43                   	inc    ebx
c00095ca:	31 f6                	xor    esi,esi
c00095cc:	53                   	push   ebx
c00095cd:	89 df                	mov    edi,ebx
c00095cf:	e8 8d fc ff ff       	call   c0009261 <Virt::getPageState(unsigned long)>
c00095d4:	c1 e7 0c             	shl    edi,0xc
c00095d7:	5a                   	pop    edx
c00095d8:	84 c0                	test   al,al
c00095da:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00095de:	75 ad                	jne    c000958d <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c00095e0:	83 ec 0c             	sub    esp,0xc
c00095e3:	68 3b db 01 c0       	push   0xc001db3b
c00095e8:	e8 16 6c 00 00       	call   c0010203 <KePanic(char const*)>
c00095ed:	5a                   	pop    edx
c00095ee:	59                   	pop    ecx
c00095ef:	57                   	push   edi
c00095f0:	8b 3d b0 1f 02 c0    	mov    edi,DWORD PTR ds:0xc0021fb0
c00095f6:	57                   	push   edi
c00095f7:	e8 5e ff ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c00095fc:	83 c4 10             	add    esp,0x10
c00095ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0009601:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009605:	f6 c4 04             	test   ah,0x4
c0009608:	74 bf                	je     c00095c9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000960a:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000960e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009613:	83 ec 0c             	sub    esp,0xc
c0009616:	50                   	push   eax
c0009617:	e8 17 e4 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c000961c:	83 c4 10             	add    esp,0x10
c000961f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009623:	80 fa 04             	cmp    dl,0x4
c0009626:	75 87                	jne    c00095af <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0009628:	89 f0                	mov    eax,esi
c000962a:	84 c0                	test   al,al
c000962c:	75 47                	jne    c0009675 <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c000962e:	c7 44 24 20 c0 d9 01 c0 	mov    DWORD PTR [esp+0x20],0xc001d9c0
c0009636:	83 c4 10             	add    esp,0x10
c0009639:	5b                   	pop    ebx
c000963a:	5e                   	pop    esi
c000963b:	5f                   	pop    edi
c000963c:	e9 c2 6b 00 00       	jmp    c0010203 <KePanic(char const*)>
c0009641:	89 f0                	mov    eax,esi
c0009643:	84 c0                	test   al,al
c0009645:	75 15                	jne    c000965c <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009647:	83 ec 0c             	sub    esp,0xc
c000964a:	68 57 db 01 c0       	push   0xc001db57
c000964f:	e8 af 6b 00 00       	call   c0010203 <KePanic(char const*)>
c0009654:	83 c4 10             	add    esp,0x10
c0009657:	e9 6d ff ff ff       	jmp    c00095c9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000965c:	83 ec 08             	sub    esp,0x8
c000965f:	6a 00                	push   0x0
c0009661:	53                   	push   ebx
c0009662:	e8 c5 fb ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009667:	83 c4 10             	add    esp,0x10
c000966a:	e9 5a ff ff ff       	jmp    c00095c9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000966f:	89 f0                	mov    eax,esi
c0009671:	84 c0                	test   al,al
c0009673:	75 15                	jne    c000968a <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c0009675:	83 ec 08             	sub    esp,0x8
c0009678:	6a 00                	push   0x0
c000967a:	53                   	push   ebx
c000967b:	e8 ac fb ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009680:	83 c4 10             	add    esp,0x10
c0009683:	83 c4 10             	add    esp,0x10
c0009686:	5b                   	pop    ebx
c0009687:	5e                   	pop    esi
c0009688:	5f                   	pop    edi
c0009689:	c3                   	ret    
c000968a:	c7 44 24 20 73 db 01 c0 	mov    DWORD PTR [esp+0x20],0xc001db73
c0009692:	83 c4 10             	add    esp,0x10
c0009695:	5b                   	pop    ebx
c0009696:	5e                   	pop    esi
c0009697:	5f                   	pop    edi
c0009698:	e9 66 6b 00 00       	jmp    c0010203 <KePanic(char const*)>
c000969d:	90                   	nop

c000969e <VAS::freeAllocatedPages(unsigned long)>:
c000969e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00096a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00096a6:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00096aa:	74 09                	je     c00096b5 <VAS::freeAllocatedPages(unsigned long)+0x17>
c00096ac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00096b0:	e9 c4 fe ff ff       	jmp    c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c00096b5:	c7 44 24 04 e4 d9 01 c0 	mov    DWORD PTR [esp+0x4],0xc001d9e4
c00096bd:	e9 bf 0e 00 00       	jmp    c000a581 <Dbg::kprintf(char const*, ...)>

c00096c2 <VAS::virtualToPhysical(unsigned long)>:
c00096c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00096c6:	50                   	push   eax
c00096c7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00096cb:	52                   	push   edx
c00096cc:	e8 89 fe ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c00096d1:	59                   	pop    ecx
c00096d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00096d4:	5a                   	pop    edx
c00096d5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00096da:	c3                   	ret    
c00096db:	90                   	nop

c00096dc <VAS::reflagRange(unsigned long, int, int, int)>:
c00096dc:	55                   	push   ebp
c00096dd:	57                   	push   edi
c00096de:	56                   	push   esi
c00096df:	53                   	push   ebx
c00096e0:	83 ec 0c             	sub    esp,0xc
c00096e3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00096e7:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00096eb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00096ef:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00096f3:	85 ff                	test   edi,edi
c00096f5:	7e 33                	jle    c000972a <VAS::reflagRange(unsigned long, int, int, int)+0x4e>
c00096f7:	c1 e7 0c             	shl    edi,0xc
c00096fa:	01 ef                	add    edi,ebp
c00096fc:	55                   	push   ebp
c00096fd:	81 c5 00 10 00 00    	add    ebp,0x1000
c0009703:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009707:	50                   	push   eax
c0009708:	e8 4d fe ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c000970d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000970f:	21 d9                	and    ecx,ebx
c0009711:	09 f1                	or     ecx,esi
c0009713:	89 08                	mov    DWORD PTR [eax],ecx
c0009715:	89 34 24             	mov    DWORD PTR [esp],esi
c0009718:	53                   	push   ebx
c0009719:	68 8d db 01 c0       	push   0xc001db8d
c000971e:	e8 5e 0e 00 00       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c0009723:	83 c4 10             	add    esp,0x10
c0009726:	39 ef                	cmp    edi,ebp
c0009728:	75 d2                	jne    c00096fc <VAS::reflagRange(unsigned long, int, int, int)+0x20>
c000972a:	83 c4 0c             	add    esp,0xc
c000972d:	5b                   	pop    ebx
c000972e:	5e                   	pop    esi
c000972f:	5f                   	pop    edi
c0009730:	5d                   	pop    ebp
c0009731:	c3                   	ret    

c0009732 <VAS::setToWriteCombining(unsigned long, int)>:
c0009732:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009737:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000973d:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009744:	75 01                	jne    c0009747 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009746:	c3                   	ret    
c0009747:	83 ec 18             	sub    esp,0x18
c000974a:	68 80 00 00 00       	push   0x80
c000974f:	6a ff                	push   0xffffffff
c0009751:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009755:	50                   	push   eax
c0009756:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000975a:	52                   	push   edx
c000975b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000975f:	51                   	push   ecx
c0009760:	e8 77 ff ff ff       	call   c00096dc <VAS::reflagRange(unsigned long, int, int, int)>
c0009765:	83 c4 2c             	add    esp,0x2c
c0009768:	c3                   	ret    
c0009769:	90                   	nop

c000976a <VAS::mapOtherVASIn(bool, VAS*)>:
c000976a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000976f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009773:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009776:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000977a:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000977d:	19 c0                	sbb    eax,eax
c000977f:	83 ca 03             	or     edx,0x3
c0009782:	83 e0 fc             	and    eax,0xfffffffc
c0009785:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000978c:	0f 20 d8             	mov    eax,cr3
c000978f:	0f 22 d8             	mov    cr3,eax
c0009792:	c3                   	ret    
c0009793:	90                   	nop

c0009794 <VAS::~VAS()>:
c0009794:	83 ec 2c             	sub    esp,0x2c
c0009797:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000979f:	fa                   	cli    
c00097a0:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00097a5:	40                   	inc    eax
c00097a6:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00097ab:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00097b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00097b2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00097b5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00097bb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00097bf:	6a 01                	push   0x1
c00097c1:	50                   	push   eax
c00097c2:	e8 a3 ff ff ff       	call   c000976a <VAS::mapOtherVASIn(bool, VAS*)>
c00097c7:	83 c4 0c             	add    esp,0xc
c00097ca:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00097d2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00097da:	0f 8f d4 00 00 00    	jg     c00098b4 <VAS::~VAS()+0x120>
c00097e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00097e4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00097e7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097eb:	c1 e2 02             	shl    edx,0x2
c00097ee:	01 d0                	add    eax,edx
c00097f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00097f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00097f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097fa:	83 e0 01             	and    eax,0x1
c00097fd:	0f 84 a8 00 00 00    	je     c00098ab <VAS::~VAS()+0x117>
c0009803:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000980b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009813:	7f 72                	jg     c0009887 <VAS::~VAS()+0xf3>
c0009815:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009819:	c1 e0 0a             	shl    eax,0xa
c000981c:	89 c2                	mov    edx,eax
c000981e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009822:	01 d0                	add    eax,edx
c0009824:	c1 e0 0c             	shl    eax,0xc
c0009827:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000982b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009830:	8b 00                	mov    eax,DWORD PTR [eax]
c0009832:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009835:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000983b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000983f:	6a 01                	push   0x1
c0009841:	50                   	push   eax
c0009842:	e8 e7 fc ff ff       	call   c000952e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009847:	83 c4 0c             	add    esp,0xc
c000984a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000984e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009852:	8b 00                	mov    eax,DWORD PTR [eax]
c0009854:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009858:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000985c:	25 01 04 00 00       	and    eax,0x401
c0009861:	3d 01 04 00 00       	cmp    eax,0x401
c0009866:	75 19                	jne    c0009881 <VAS::~VAS()+0xed>
c0009868:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000986c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009871:	83 ec 0c             	sub    esp,0xc
c0009874:	50                   	push   eax
c0009875:	e8 b9 e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c000987a:	83 c4 10             	add    esp,0x10
c000987d:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009881:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0009885:	eb 84                	jmp    c000980b <VAS::~VAS()+0x77>
c0009887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000988b:	25 00 04 00 00       	and    eax,0x400
c0009890:	74 19                	je     c00098ab <VAS::~VAS()+0x117>
c0009892:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009896:	25 00 f0 ff ff       	and    eax,0xfffff000
c000989b:	83 ec 0c             	sub    esp,0xc
c000989e:	50                   	push   eax
c000989f:	e8 8f e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c00098a4:	83 c4 10             	add    esp,0x10
c00098a7:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00098ab:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00098af:	e9 1e ff ff ff       	jmp    c00097d2 <VAS::~VAS()+0x3e>
c00098b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00098b8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00098bb:	83 ec 0c             	sub    esp,0xc
c00098be:	50                   	push   eax
c00098bf:	e8 b5 fc ff ff       	call   c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c00098c4:	83 c4 10             	add    esp,0x10
c00098c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00098cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00098ce:	83 ec 0c             	sub    esp,0xc
c00098d1:	50                   	push   eax
c00098d2:	e8 5c e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c00098d7:	83 c4 10             	add    esp,0x10
c00098da:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00098de:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00098e3:	48                   	dec    eax
c00098e4:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00098e9:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00098ee:	85 c0                	test   eax,eax
c00098f0:	75 01                	jne    c00098f3 <VAS::~VAS()+0x15f>
c00098f2:	fb                   	sti    
c00098f3:	90                   	nop
c00098f4:	83 c4 2c             	add    esp,0x2c
c00098f7:	c3                   	ret    

c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>:
c00098f8:	55                   	push   ebp
c00098f9:	57                   	push   edi
c00098fa:	56                   	push   esi
c00098fb:	53                   	push   ebx
c00098fc:	83 ec 1c             	sub    esp,0x1c
c00098ff:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009903:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009907:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000990d:	77 0b                	ja     c000991a <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c000990f:	0f 20 d8             	mov    eax,cr3
c0009912:	0f 20 d8             	mov    eax,cr3
c0009915:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009918:	75 47                	jne    c0009961 <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c000991a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000991e:	09 d8                	or     eax,ebx
c0009920:	a9 ff 0f 00 00       	test   eax,0xfff
c0009925:	75 57                	jne    c000997e <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c0009927:	89 de                	mov    esi,ebx
c0009929:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000992c:	c1 ee 16             	shr    esi,0x16
c000992f:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009936:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000993a:	74 54                	je     c0009990 <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c000993c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009940:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009946:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000994a:	c1 e6 0c             	shl    esi,0xc
c000994d:	c1 eb 0a             	shr    ebx,0xa
c0009950:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009956:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009959:	83 c4 1c             	add    esp,0x1c
c000995c:	5b                   	pop    ebx
c000995d:	5e                   	pop    esi
c000995e:	5f                   	pop    edi
c000995f:	5d                   	pop    ebp
c0009960:	c3                   	ret    
c0009961:	83 ec 0c             	sub    esp,0xc
c0009964:	68 08 da 01 c0       	push   0xc001da08
c0009969:	e8 13 0c 00 00       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c000996e:	83 c4 10             	add    esp,0x10
c0009971:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009975:	09 d8                	or     eax,ebx
c0009977:	a9 ff 0f 00 00       	test   eax,0xfff
c000997c:	74 a9                	je     c0009927 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000997e:	83 ec 0c             	sub    esp,0xc
c0009981:	68 70 da 01 c0       	push   0xc001da70
c0009986:	e8 78 68 00 00       	call   c0010203 <KePanic(char const*)>
c000998b:	83 c4 10             	add    esp,0x10
c000998e:	eb 97                	jmp    c0009927 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009990:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009994:	e8 fc e0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009999:	83 ec 0c             	sub    esp,0xc
c000999c:	89 c5                	mov    ebp,eax
c000999e:	8b 0d b0 1f 02 c0    	mov    ecx,DWORD PTR ds:0xc0021fb0
c00099a4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00099a8:	6a 01                	push   0x1
c00099aa:	e8 d6 f8 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c00099af:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00099b6:	6a 01                	push   0x1
c00099b8:	50                   	push   eax
c00099b9:	55                   	push   ebp
c00099ba:	81 cd 07 04 00 00    	or     ebp,0x407
c00099c0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00099c4:	51                   	push   ecx
c00099c5:	e8 28 02 00 00       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00099ca:	83 c4 1c             	add    esp,0x1c
c00099cd:	68 00 10 00 00       	push   0x1000
c00099d2:	6a 00                	push   0x0
c00099d4:	50                   	push   eax
c00099d5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00099d9:	e8 f2 6a ff ff       	call   c00004d0 <memset>
c00099de:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00099e2:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099e5:	e8 8f fb ff ff       	call   c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c00099ea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00099ee:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00099f1:	83 c4 10             	add    esp,0x10
c00099f4:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c00099f7:	e9 40 ff ff ff       	jmp    c000993c <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c00099fc <VAS::allocatePages(int, int)>:
c00099fc:	55                   	push   ebp
c00099fd:	57                   	push   edi
c00099fe:	56                   	push   esi
c00099ff:	53                   	push   ebx
c0009a00:	83 ec 1c             	sub    esp,0x1c
c0009a03:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009a07:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009a0c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009a12:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009a18:	83 e0 01             	and    eax,0x1
c0009a1b:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0009a1f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009a23:	0f 85 cc 00 00 00    	jne    c0009af5 <VAS::allocatePages(int, int)+0xf9>
c0009a29:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009a2c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a30:	85 c0                	test   eax,eax
c0009a32:	0f 84 a1 00 00 00    	je     c0009ad9 <VAS::allocatePages(int, int)+0xdd>
c0009a38:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009a3c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a40:	c1 e6 0c             	shl    esi,0xc
c0009a43:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0009a47:	85 c0                	test   eax,eax
c0009a49:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0009a4c:	7e 33                	jle    c0009a81 <VAS::allocatePages(int, int)+0x85>
c0009a4e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0009a52:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009a56:	81 cd 00 04 00 00    	or     ebp,0x400
c0009a5c:	e8 34 e0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009a61:	55                   	push   ebp
c0009a62:	53                   	push   ebx
c0009a63:	50                   	push   eax
c0009a64:	57                   	push   edi
c0009a65:	e8 8e fe ff ff       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009a6a:	83 c4 10             	add    esp,0x10
c0009a6d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009a72:	74 03                	je     c0009a77 <VAS::allocatePages(int, int)+0x7b>
c0009a74:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009a77:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009a7d:	39 de                	cmp    esi,ebx
c0009a7f:	75 db                	jne    c0009a5c <VAS::allocatePages(int, int)+0x60>
c0009a81:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009a86:	75 12                	jne    c0009a9a <VAS::allocatePages(int, int)+0x9e>
c0009a88:	0f 20 d8             	mov    eax,cr3
c0009a8b:	0f 22 d8             	mov    cr3,eax
c0009a8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a92:	83 c4 1c             	add    esp,0x1c
c0009a95:	5b                   	pop    ebx
c0009a96:	5e                   	pop    esi
c0009a97:	5f                   	pop    edi
c0009a98:	5d                   	pop    ebp
c0009a99:	c3                   	ret    
c0009a9a:	c1 ee 0a             	shr    esi,0xa
c0009a9d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009aa1:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009aa7:	c1 eb 0a             	shr    ebx,0xa
c0009aaa:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009ab0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009ab6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009abc:	39 c3                	cmp    ebx,eax
c0009abe:	77 ce                	ja     c0009a8e <VAS::allocatePages(int, int)+0x92>
c0009ac0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009ac3:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ac9:	39 d8                	cmp    eax,ebx
c0009acb:	73 f3                	jae    c0009ac0 <VAS::allocatePages(int, int)+0xc4>
c0009acd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ad1:	83 c4 1c             	add    esp,0x1c
c0009ad4:	5b                   	pop    ebx
c0009ad5:	5e                   	pop    esi
c0009ad6:	5f                   	pop    edi
c0009ad7:	5d                   	pop    ebp
c0009ad8:	c3                   	ret    
c0009ad9:	83 ec 0c             	sub    esp,0xc
c0009adc:	68 94 da 01 c0       	push   0xc001da94
c0009ae1:	e8 1d 67 00 00       	call   c0010203 <KePanic(char const*)>
c0009ae6:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009ae9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009aed:	83 c4 10             	add    esp,0x10
c0009af0:	e9 43 ff ff ff       	jmp    c0009a38 <VAS::allocatePages(int, int)+0x3c>
c0009af5:	83 ec 0c             	sub    esp,0xc
c0009af8:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0009afc:	51                   	push   ecx
c0009afd:	e8 83 f7 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0009b02:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009b06:	83 c4 10             	add    esp,0x10
c0009b09:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009b0e:	0f 87 9b 00 00 00    	ja     c0009baf <VAS::allocatePages(int, int)+0x1b3>
c0009b14:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009b18:	85 d2                	test   edx,edx
c0009b1a:	7e 3c                	jle    c0009b58 <VAS::allocatePages(int, int)+0x15c>
c0009b1c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009b20:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009b24:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009b28:	c1 e5 0c             	shl    ebp,0xc
c0009b2b:	81 ce 00 04 00 00    	or     esi,0x400
c0009b31:	01 dd                	add    ebp,ebx
c0009b33:	e8 5d df ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009b38:	56                   	push   esi
c0009b39:	53                   	push   ebx
c0009b3a:	50                   	push   eax
c0009b3b:	57                   	push   edi
c0009b3c:	e8 b7 fd ff ff       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009b41:	83 c4 10             	add    esp,0x10
c0009b44:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b49:	74 03                	je     c0009b4e <VAS::allocatePages(int, int)+0x152>
c0009b4b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009b4e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009b54:	39 dd                	cmp    ebp,ebx
c0009b56:	75 db                	jne    c0009b33 <VAS::allocatePages(int, int)+0x137>
c0009b58:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b5d:	0f 84 25 ff ff ff    	je     c0009a88 <VAS::allocatePages(int, int)+0x8c>
c0009b63:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b67:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009b6b:	89 d3                	mov    ebx,edx
c0009b6d:	c1 e0 0c             	shl    eax,0xc
c0009b70:	c1 eb 0a             	shr    ebx,0xa
c0009b73:	01 d0                	add    eax,edx
c0009b75:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009b7b:	c1 e8 0a             	shr    eax,0xa
c0009b7e:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009b84:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009b89:	2d 00 00 40 00       	sub    eax,0x400000
c0009b8e:	39 c3                	cmp    ebx,eax
c0009b90:	0f 87 f8 fe ff ff    	ja     c0009a8e <VAS::allocatePages(int, int)+0x92>
c0009b96:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009b99:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009b9f:	39 d8                	cmp    eax,ebx
c0009ba1:	73 f3                	jae    c0009b96 <VAS::allocatePages(int, int)+0x19a>
c0009ba3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ba7:	83 c4 1c             	add    esp,0x1c
c0009baa:	5b                   	pop    ebx
c0009bab:	5e                   	pop    esi
c0009bac:	5f                   	pop    edi
c0009bad:	5d                   	pop    ebp
c0009bae:	c3                   	ret    
c0009baf:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009bb4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009bba:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009bc1:	0f 84 4d ff ff ff    	je     c0009b14 <VAS::allocatePages(int, int)+0x118>
c0009bc7:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0009bcf:	e9 40 ff ff ff       	jmp    c0009b14 <VAS::allocatePages(int, int)+0x118>

c0009bd4 <VAS::setCPUSpecific(unsigned long)>:
c0009bd4:	83 ec 0c             	sub    esp,0xc
c0009bd7:	6a 05                	push   0x5
c0009bd9:	68 00 00 40 c2       	push   0xc2400000
c0009bde:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009be2:	50                   	push   eax
c0009be3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009be7:	52                   	push   edx
c0009be8:	e8 0b fd ff ff       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009bed:	83 c4 1c             	add    esp,0x1c
c0009bf0:	c3                   	ret    
c0009bf1:	90                   	nop

c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009bf2:	55                   	push   ebp
c0009bf3:	57                   	push   edi
c0009bf4:	56                   	push   esi
c0009bf5:	53                   	push   ebx
c0009bf6:	83 ec 1c             	sub    esp,0x1c
c0009bf9:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009bfe:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009c02:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009c08:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009c0c:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009c12:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009c16:	83 e0 01             	and    eax,0x1
c0009c19:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009c1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c21:	85 c0                	test   eax,eax
c0009c23:	7e 39                	jle    c0009c5e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0009c25:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c29:	89 f3                	mov    ebx,esi
c0009c2b:	c1 e0 0c             	shl    eax,0xc
c0009c2e:	01 f0                	add    eax,esi
c0009c30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c34:	55                   	push   ebp
c0009c35:	53                   	push   ebx
c0009c36:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c3a:	29 f0                	sub    eax,esi
c0009c3c:	01 d8                	add    eax,ebx
c0009c3e:	50                   	push   eax
c0009c3f:	57                   	push   edi
c0009c40:	e8 b3 fc ff ff       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c45:	83 c4 10             	add    esp,0x10
c0009c48:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c4d:	74 03                	je     c0009c52 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0009c4f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009c52:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009c58:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0009c5c:	75 d6                	jne    c0009c34 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0009c5e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c63:	75 10                	jne    c0009c75 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0009c65:	0f 20 d8             	mov    eax,cr3
c0009c68:	0f 22 d8             	mov    cr3,eax
c0009c6b:	83 c4 1c             	add    esp,0x1c
c0009c6e:	89 f0                	mov    eax,esi
c0009c70:	5b                   	pop    ebx
c0009c71:	5e                   	pop    esi
c0009c72:	5f                   	pop    edi
c0009c73:	5d                   	pop    ebp
c0009c74:	c3                   	ret    
c0009c75:	89 f3                	mov    ebx,esi
c0009c77:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c7b:	c1 eb 0a             	shr    ebx,0xa
c0009c7e:	c1 e0 0c             	shl    eax,0xc
c0009c81:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009c87:	01 f0                	add    eax,esi
c0009c89:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009c8f:	c1 e8 0a             	shr    eax,0xa
c0009c92:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c97:	2d 00 00 40 00       	sub    eax,0x400000
c0009c9c:	39 c3                	cmp    ebx,eax
c0009c9e:	77 cb                	ja     c0009c6b <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0009ca0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009ca3:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ca9:	39 d8                	cmp    eax,ebx
c0009cab:	73 f3                	jae    c0009ca0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0009cad:	83 c4 1c             	add    esp,0x1c
c0009cb0:	89 f0                	mov    eax,esi
c0009cb2:	5b                   	pop    ebx
c0009cb3:	5e                   	pop    esi
c0009cb4:	5f                   	pop    edi
c0009cb5:	5d                   	pop    ebp
c0009cb6:	c3                   	ret    
c0009cb7:	90                   	nop

c0009cb8 <VAS::VAS()>:
c0009cb8:	83 ec 0c             	sub    esp,0xc
c0009cbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cbf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009cc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cca:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cd5:	a3 b0 1f 02 c0       	mov    ds:0xc0021fb0,eax
c0009cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cde:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009ce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ce6:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009ce9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ced:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009cf4:	ba 7d 00 02 c0       	mov    edx,0xc002007d
c0009cf9:	b8 00 00 02 c0       	mov    eax,0xc0020000
c0009cfe:	29 c2                	sub    edx,eax
c0009d00:	89 d0                	mov    eax,edx
c0009d02:	05 ff 0f 00 00       	add    eax,0xfff
c0009d07:	c1 e8 0c             	shr    eax,0xc
c0009d0a:	89 c1                	mov    ecx,eax
c0009d0c:	ba 00 00 02 c0       	mov    edx,0xc0020000
c0009d11:	b8 00 00 02 c0       	mov    eax,0xc0020000
c0009d16:	83 ec 0c             	sub    esp,0xc
c0009d19:	6a 07                	push   0x7
c0009d1b:	51                   	push   ecx
c0009d1c:	52                   	push   edx
c0009d1d:	50                   	push   eax
c0009d1e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d22:	e8 cb fe ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009d27:	83 c4 20             	add    esp,0x20
c0009d2a:	90                   	nop
c0009d2b:	83 c4 0c             	add    esp,0xc
c0009d2e:	c3                   	ret    
c0009d2f:	90                   	nop

c0009d30 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009d30:	55                   	push   ebp
c0009d31:	57                   	push   edi
c0009d32:	56                   	push   esi
c0009d33:	53                   	push   ebx
c0009d34:	83 ec 1c             	sub    esp,0x1c
c0009d37:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009d3b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d3f:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0009d43:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009d47:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d4c:	75 4a                	jne    c0009d98 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0009d4e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009d52:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d55:	c1 eb 16             	shr    ebx,0x16
c0009d58:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0009d5f:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0009d63:	74 4d                	je     c0009db2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0009d65:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009d69:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009d6d:	c1 e8 0a             	shr    eax,0xa
c0009d70:	80 fa 01             	cmp    dl,0x1
c0009d73:	19 d2                	sbb    edx,edx
c0009d75:	c1 e3 0c             	shl    ebx,0xc
c0009d78:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0009d7c:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009d82:	25 fc 0f 00 00       	and    eax,0xffc
c0009d87:	01 d8                	add    eax,ebx
c0009d89:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009d90:	83 c4 1c             	add    esp,0x1c
c0009d93:	5b                   	pop    ebx
c0009d94:	5e                   	pop    esi
c0009d95:	5f                   	pop    edi
c0009d96:	5d                   	pop    ebp
c0009d97:	c3                   	ret    
c0009d98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d9c:	83 ec 0c             	sub    esp,0xc
c0009d9f:	68 c0 da 01 c0       	push   0xc001dac0
c0009da4:	e8 5a 64 00 00       	call   c0010203 <KePanic(char const*)>
c0009da9:	83 c4 10             	add    esp,0x10
c0009dac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009db0:	eb 9c                	jmp    c0009d4e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0009db2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009db6:	e8 da dc ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009dbb:	83 ec 0c             	sub    esp,0xc
c0009dbe:	89 c5                	mov    ebp,eax
c0009dc0:	8b 0d b0 1f 02 c0    	mov    ecx,DWORD PTR ds:0xc0021fb0
c0009dc6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009dca:	6a 01                	push   0x1
c0009dcc:	e8 b4 f4 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0009dd1:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009dd8:	6a 01                	push   0x1
c0009dda:	50                   	push   eax
c0009ddb:	55                   	push   ebp
c0009ddc:	81 cd 07 04 00 00    	or     ebp,0x407
c0009de2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009de6:	51                   	push   ecx
c0009de7:	e8 06 fe ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009dec:	83 c4 1c             	add    esp,0x1c
c0009def:	68 00 10 00 00       	push   0x1000
c0009df4:	6a 00                	push   0x0
c0009df6:	50                   	push   eax
c0009df7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dfb:	e8 d0 66 ff ff       	call   c00004d0 <memset>
c0009e00:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009e04:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e07:	e8 6d f7 ff ff       	call   c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c0009e0c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009e0f:	83 c4 10             	add    esp,0x10
c0009e12:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0009e15:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009e19:	e9 47 ff ff ff       	jmp    c0009d65 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0009e1e <VAS::VAS(bool)>:
c0009e1e:	53                   	push   ebx
c0009e1f:	83 ec 28             	sub    esp,0x28
c0009e22:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009e26:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009e2a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e2e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009e35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e39:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009e40:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e44:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009e48:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0009e4b:	e8 45 dc ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009e50:	89 c2                	mov    edx,eax
c0009e52:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e56:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0009e59:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c0009e5f:	83 ec 0c             	sub    esp,0xc
c0009e62:	6a 01                	push   0x1
c0009e64:	e8 1c f4 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0009e69:	83 c4 10             	add    esp,0x10
c0009e6c:	89 c2                	mov    edx,eax
c0009e6e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e72:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009e75:	83 ec 0c             	sub    esp,0xc
c0009e78:	6a 03                	push   0x3
c0009e7a:	6a 01                	push   0x1
c0009e7c:	52                   	push   edx
c0009e7d:	50                   	push   eax
c0009e7e:	53                   	push   ebx
c0009e7f:	e8 6e fd ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009e84:	83 c4 20             	add    esp,0x20
c0009e87:	89 c2                	mov    edx,eax
c0009e89:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e8d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009e90:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009e98:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0009ea0:	7f 1c                	jg     c0009ebe <VAS::VAS(bool)+0xa0>
c0009ea2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ea6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009ea9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009ead:	c1 e2 02             	shl    edx,0x2
c0009eb0:	01 d0                	add    eax,edx
c0009eb2:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009eb8:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009ebc:	eb da                	jmp    c0009e98 <VAS::VAS(bool)+0x7a>
c0009ebe:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0009ec6:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0009ece:	7f 7a                	jg     c0009f4a <VAS::VAS(bool)+0x12c>
c0009ed0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009ed4:	2d 00 02 00 00       	sub    eax,0x200
c0009ed9:	c1 e0 0c             	shl    eax,0xc
c0009edc:	83 c8 03             	or     eax,0x3
c0009edf:	89 c2                	mov    edx,eax
c0009ee1:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009ee6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009eec:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009ef2:	83 e0 10             	and    eax,0x10
c0009ef5:	84 c0                	test   al,al
c0009ef7:	74 07                	je     c0009f00 <VAS::VAS(bool)+0xe2>
c0009ef9:	b8 00 01 00 00       	mov    eax,0x100
c0009efe:	eb 05                	jmp    c0009f05 <VAS::VAS(bool)+0xe7>
c0009f00:	b8 00 00 00 00       	mov    eax,0x0
c0009f05:	09 d0                	or     eax,edx
c0009f07:	89 c1                	mov    ecx,eax
c0009f09:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f0d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f10:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009f14:	c1 e2 02             	shl    edx,0x2
c0009f17:	01 d0                	add    eax,edx
c0009f19:	89 ca                	mov    edx,ecx
c0009f1b:	89 10                	mov    DWORD PTR [eax],edx
c0009f1d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009f21:	2d 40 03 00 00       	sub    eax,0x340
c0009f26:	83 f8 7f             	cmp    eax,0x7f
c0009f29:	77 16                	ja     c0009f41 <VAS::VAS(bool)+0x123>
c0009f2b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f2f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f32:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009f36:	c1 e2 02             	shl    edx,0x2
c0009f39:	01 d0                	add    eax,edx
c0009f3b:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009f41:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009f45:	e9 7c ff ff ff       	jmp    c0009ec6 <VAS::VAS(bool)+0xa8>
c0009f4a:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009f4f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f55:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009f5b:	83 e0 10             	and    eax,0x10
c0009f5e:	84 c0                	test   al,al
c0009f60:	74 07                	je     c0009f69 <VAS::VAS(bool)+0x14b>
c0009f62:	b8 03 41 00 00       	mov    eax,0x4103
c0009f67:	eb 05                	jmp    c0009f6e <VAS::VAS(bool)+0x150>
c0009f69:	b8 03 40 00 00       	mov    eax,0x4003
c0009f6e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009f72:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0009f75:	81 c2 20 0c 00 00    	add    edx,0xc20
c0009f7b:	89 02                	mov    DWORD PTR [edx],eax
c0009f7d:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009f82:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f88:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0009f8e:	83 ec 08             	sub    esp,0x8
c0009f91:	50                   	push   eax
c0009f92:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f96:	e8 39 fc ff ff       	call   c0009bd4 <VAS::setCPUSpecific(unsigned long)>
c0009f9b:	83 c4 10             	add    esp,0x10
c0009f9e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fa2:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009fa5:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009faa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fb0:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009fb6:	83 e0 10             	and    eax,0x10
c0009fb9:	84 c0                	test   al,al
c0009fbb:	74 07                	je     c0009fc4 <VAS::VAS(bool)+0x1a6>
c0009fbd:	b8 00 01 00 00       	mov    eax,0x100
c0009fc2:	eb 05                	jmp    c0009fc9 <VAS::VAS(bool)+0x1ab>
c0009fc4:	b8 00 00 00 00       	mov    eax,0x0
c0009fc9:	09 c2                	or     edx,eax
c0009fcb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fcf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009fd2:	05 fc 0f 00 00       	add    eax,0xffc
c0009fd7:	83 ca 03             	or     edx,0x3
c0009fda:	89 10                	mov    DWORD PTR [eax],edx
c0009fdc:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009fe1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fe7:	83 ec 0c             	sub    esp,0xc
c0009fea:	50                   	push   eax
c0009feb:	e8 64 1c 00 00       	call   c000bc54 <Device::getName()>
c0009ff0:	83 c4 10             	add    esp,0x10
c0009ff3:	83 ec 08             	sub    esp,0x8
c0009ff6:	68 a7 db 01 c0       	push   0xc001dba7
c0009ffb:	50                   	push   eax
c0009ffc:	e8 df 66 ff ff       	call   c00006e0 <strcmp>
c000a001:	83 c4 10             	add    esp,0x10
c000a004:	85 c0                	test   eax,eax
c000a006:	0f 94 c0             	sete   al
c000a009:	84 c0                	test   al,al
c000a00b:	0f 84 87 00 00 00    	je     c000a098 <VAS::VAS(bool)+0x27a>
c000a011:	fa                   	cli    
c000a012:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a017:	40                   	inc    eax
c000a018:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000a01d:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000a022:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a028:	05 7c 09 00 00       	add    eax,0x97c
c000a02d:	83 ec 0c             	sub    esp,0xc
c000a030:	50                   	push   eax
c000a031:	e8 80 d2 ff ff       	call   c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a036:	83 c4 10             	add    esp,0x10
c000a039:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a03e:	89 c3                	mov    ebx,eax
c000a040:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000a045:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a04b:	05 7c 09 00 00       	add    eax,0x97c
c000a050:	83 ec 0c             	sub    esp,0xc
c000a053:	50                   	push   eax
c000a054:	e8 5d d2 ff ff       	call   c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a059:	83 c4 10             	add    esp,0x10
c000a05c:	83 ec 08             	sub    esp,0x8
c000a05f:	50                   	push   eax
c000a060:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a064:	e8 f1 f4 ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c000a069:	83 c4 10             	add    esp,0x10
c000a06c:	8b 00                	mov    eax,DWORD PTR [eax]
c000a06e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a073:	6a 11                	push   0x11
c000a075:	53                   	push   ebx
c000a076:	50                   	push   eax
c000a077:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a07b:	e8 78 f8 ff ff       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a080:	83 c4 10             	add    esp,0x10
c000a083:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a088:	48                   	dec    eax
c000a089:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000a08e:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a093:	85 c0                	test   eax,eax
c000a095:	75 01                	jne    c000a098 <VAS::VAS(bool)+0x27a>
c000a097:	fb                   	sti    
c000a098:	90                   	nop
c000a099:	83 c4 28             	add    esp,0x28
c000a09c:	5b                   	pop    ebx
c000a09d:	c3                   	ret    

c000a09e <VAS::evict(unsigned long)>:
c000a09e:	55                   	push   ebp
c000a09f:	57                   	push   edi
c000a0a0:	56                   	push   esi
c000a0a1:	53                   	push   ebx
c000a0a2:	83 ec 1c             	sub    esp,0x1c
c000a0a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a0ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a0b1:	e8 10 f3 ff ff       	call   c00093c6 <Virt::allocateSwapfilePage()>
c000a0b6:	8b 0d 4c f8 01 c0    	mov    ecx,DWORD PTR ds:0xc001f84c
c000a0bc:	89 c7                	mov    edi,eax
c000a0be:	85 c9                	test   ecx,ecx
c000a0c0:	7e 3e                	jle    c000a100 <VAS::evict(unsigned long)+0x62>
c000a0c2:	89 ee                	mov    esi,ebp
c000a0c4:	31 db                	xor    ebx,ebx
c000a0c6:	83 ec 0c             	sub    esp,0xc
c000a0c9:	57                   	push   edi
c000a0ca:	e8 e5 f2 ff ff       	call   c00093b4 <Virt::swapIDToSector(unsigned long)>
c000a0cf:	89 34 24             	mov    DWORD PTR [esp],esi
c000a0d2:	01 d8                	add    eax,ebx
c000a0d4:	6a 01                	push   0x1
c000a0d6:	31 d2                	xor    edx,edx
c000a0d8:	43                   	inc    ebx
c000a0d9:	52                   	push   edx
c000a0da:	81 c6 00 02 00 00    	add    esi,0x200
c000a0e0:	50                   	push   eax
c000a0e1:	0f be 05 58 f8 01 c0 	movsx  eax,BYTE PTR ds:0xc001f858
c000a0e8:	8b 14 85 1c 43 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbce4]
c000a0ef:	52                   	push   edx
c000a0f0:	e8 1f 2c 00 00       	call   c000cd14 <LogicalDisk::write(unsigned long long, int, void*)>
c000a0f5:	83 c4 20             	add    esp,0x20
c000a0f8:	39 1d 4c f8 01 c0    	cmp    DWORD PTR ds:0xc001f84c,ebx
c000a0fe:	7f c6                	jg     c000a0c6 <VAS::evict(unsigned long)+0x28>
c000a100:	83 ec 08             	sub    esp,0x8
c000a103:	c1 e7 0b             	shl    edi,0xb
c000a106:	55                   	push   ebp
c000a107:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a10b:	50                   	push   eax
c000a10c:	e8 49 f4 ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c000a111:	8b 10                	mov    edx,DWORD PTR [eax]
c000a113:	89 d1                	mov    ecx,edx
c000a115:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a11b:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a121:	09 cf                	or     edi,ecx
c000a123:	89 38                	mov    DWORD PTR [eax],edi
c000a125:	89 14 24             	mov    DWORD PTR [esp],edx
c000a128:	ff 05 a8 1f 02 c0    	inc    DWORD PTR ds:0xc0021fa8
c000a12e:	e8 00 d9 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c000a133:	0f 20 d8             	mov    eax,cr3
c000a136:	0f 22 d8             	mov    cr3,eax
c000a139:	a1 a4 1f 02 c0       	mov    eax,ds:0xc0021fa4
c000a13e:	c7 44 24 40 b5 db 01 c0 	mov    DWORD PTR [esp+0x40],0xc001dbb5
c000a146:	8d 50 01             	lea    edx,[eax+0x1]
c000a149:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a14d:	89 15 a4 1f 02 c0    	mov    DWORD PTR ds:0xc0021fa4,edx
c000a153:	83 c4 2c             	add    esp,0x2c
c000a156:	5b                   	pop    ebx
c000a157:	5e                   	pop    esi
c000a158:	5f                   	pop    edi
c000a159:	5d                   	pop    ebp
c000a15a:	e9 22 04 00 00       	jmp    c000a581 <Dbg::kprintf(char const*, ...)>
c000a15f:	90                   	nop

c000a160 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a160:	55                   	push   ebp
c000a161:	57                   	push   edi
c000a162:	56                   	push   esi
c000a163:	53                   	push   ebx
c000a164:	83 ec 14             	sub    esp,0x14
c000a167:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a16b:	53                   	push   ebx
c000a16c:	68 c6 db 01 c0       	push   0xc001dbc6
c000a171:	e8 0b 04 00 00       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c000a176:	83 c4 10             	add    esp,0x10
c000a179:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a17f:	74 21                	je     c000a1a2 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a181:	83 ec 08             	sub    esp,0x8
c000a184:	53                   	push   ebx
c000a185:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000a189:	57                   	push   edi
c000a18a:	e8 cb f3 ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c000a18f:	83 c4 10             	add    esp,0x10
c000a192:	89 c6                	mov    esi,eax
c000a194:	85 c0                	test   eax,eax
c000a196:	74 0a                	je     c000a1a2 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a198:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a19a:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a1a0:	74 0a                	je     c000a1ac <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a1a2:	31 c0                	xor    eax,eax
c000a1a4:	83 c4 0c             	add    esp,0xc
c000a1a7:	5b                   	pop    ebx
c000a1a8:	5e                   	pop    esi
c000a1a9:	5f                   	pop    edi
c000a1aa:	5d                   	pop    ebp
c000a1ab:	c3                   	ret    
c000a1ac:	e8 e4 d8 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a1b1:	c1 ed 0b             	shr    ebp,0xb
c000a1b4:	8b 16                	mov    edx,DWORD PTR [esi]
c000a1b6:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a1bc:	09 c2                	or     edx,eax
c000a1be:	81 ca 01 08 00 00    	or     edx,0x801
c000a1c4:	89 16                	mov    DWORD PTR [esi],edx
c000a1c6:	8b 35 4c f8 01 c0    	mov    esi,DWORD PTR ds:0xc001f84c
c000a1cc:	85 f6                	test   esi,esi
c000a1ce:	7e 3e                	jle    c000a20e <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000a1d0:	89 df                	mov    edi,ebx
c000a1d2:	31 f6                	xor    esi,esi
c000a1d4:	83 ec 0c             	sub    esp,0xc
c000a1d7:	55                   	push   ebp
c000a1d8:	e8 d7 f1 ff ff       	call   c00093b4 <Virt::swapIDToSector(unsigned long)>
c000a1dd:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a1e0:	01 f0                	add    eax,esi
c000a1e2:	6a 01                	push   0x1
c000a1e4:	31 d2                	xor    edx,edx
c000a1e6:	46                   	inc    esi
c000a1e7:	52                   	push   edx
c000a1e8:	81 c7 00 02 00 00    	add    edi,0x200
c000a1ee:	50                   	push   eax
c000a1ef:	0f be 05 58 f8 01 c0 	movsx  eax,BYTE PTR ds:0xc001f858
c000a1f6:	8b 0c 85 1c 43 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbce4]
c000a1fd:	51                   	push   ecx
c000a1fe:	e8 a5 2a 00 00       	call   c000cca8 <LogicalDisk::read(unsigned long long, int, void*)>
c000a203:	83 c4 20             	add    esp,0x20
c000a206:	39 35 4c f8 01 c0    	cmp    DWORD PTR ds:0xc001f84c,esi
c000a20c:	7f c6                	jg     c000a1d4 <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a20e:	a1 a8 1f 02 c0       	mov    eax,ds:0xc0021fa8
c000a213:	48                   	dec    eax
c000a214:	52                   	push   edx
c000a215:	a3 a8 1f 02 c0       	mov    ds:0xc0021fa8,eax
c000a21a:	50                   	push   eax
c000a21b:	53                   	push   ebx
c000a21c:	68 d9 db 01 c0       	push   0xc001dbd9
c000a221:	e8 5b 03 00 00       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c000a226:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a229:	e8 68 f1 ff ff       	call   c0009396 <Virt::freeSwapfilePage(unsigned long)>
c000a22e:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a233:	83 c4 10             	add    esp,0x10
c000a236:	48                   	dec    eax
c000a237:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000a23c:	85 c0                	test   eax,eax
c000a23e:	75 01                	jne    c000a241 <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000a240:	fb                   	sti    
c000a241:	0f 20 d8             	mov    eax,cr3
c000a244:	0f 22 d8             	mov    cr3,eax
c000a247:	b0 01                	mov    al,0x1
c000a249:	e9 56 ff ff ff       	jmp    c000a1a4 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a24e <VAS::scanForEviction()>:
c000a24e:	57                   	push   edi
c000a24f:	31 ff                	xor    edi,edi
c000a251:	56                   	push   esi
c000a252:	53                   	push   ebx
c000a253:	83 ec 10             	sub    esp,0x10
c000a256:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a25a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a25d:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a263:	75 0e                	jne    c000a273 <VAS::scanForEviction()+0x25>
c000a265:	89 da                	mov    edx,ebx
c000a267:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a26a:	c1 ea 16             	shr    edx,0x16
c000a26d:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a271:	74 4e                	je     c000a2c1 <VAS::scanForEviction()+0x73>
c000a273:	53                   	push   ebx
c000a274:	56                   	push   esi
c000a275:	e8 e0 f2 ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c000a27a:	5a                   	pop    edx
c000a27b:	8b 10                	mov    edx,DWORD PTR [eax]
c000a27d:	59                   	pop    ecx
c000a27e:	89 d1                	mov    ecx,edx
c000a280:	81 e1 01 08 00 00    	and    ecx,0x801
c000a286:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a28c:	74 3e                	je     c000a2cc <VAS::scanForEviction()+0x7e>
c000a28e:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a294:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a29a:	76 2b                	jbe    c000a2c7 <VAS::scanForEviction()+0x79>
c000a29c:	47                   	inc    edi
c000a29d:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a2a4:	83 ff 03             	cmp    edi,0x3
c000a2a7:	74 32                	je     c000a2db <VAS::scanForEviction()+0x8d>
c000a2a9:	31 db                	xor    ebx,ebx
c000a2ab:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a2b1:	75 c0                	jne    c000a273 <VAS::scanForEviction()+0x25>
c000a2b3:	89 da                	mov    edx,ebx
c000a2b5:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a2b8:	c1 ea 16             	shr    edx,0x16
c000a2bb:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a2bf:	75 b2                	jne    c000a273 <VAS::scanForEviction()+0x25>
c000a2c1:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a2c7:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a2ca:	eb 91                	jmp    c000a25d <VAS::scanForEviction()+0xf>
c000a2cc:	f6 c2 20             	test   dl,0x20
c000a2cf:	74 13                	je     c000a2e4 <VAS::scanForEviction()+0x96>
c000a2d1:	83 e2 df             	and    edx,0xffffffdf
c000a2d4:	89 10                	mov    DWORD PTR [eax],edx
c000a2d6:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a2d9:	eb b3                	jmp    c000a28e <VAS::scanForEviction()+0x40>
c000a2db:	83 c4 10             	add    esp,0x10
c000a2de:	31 c0                	xor    eax,eax
c000a2e0:	5b                   	pop    ebx
c000a2e1:	5e                   	pop    esi
c000a2e2:	5f                   	pop    edi
c000a2e3:	c3                   	ret    
c000a2e4:	83 ec 08             	sub    esp,0x8
c000a2e7:	89 d0                	mov    eax,edx
c000a2e9:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a2ee:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a2f2:	53                   	push   ebx
c000a2f3:	68 ee db 01 c0       	push   0xc001dbee
c000a2f8:	e8 84 02 00 00       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c000a2fd:	58                   	pop    eax
c000a2fe:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a301:	5a                   	pop    edx
c000a302:	51                   	push   ecx
c000a303:	56                   	push   esi
c000a304:	e8 95 fd ff ff       	call   c000a09e <VAS::evict(unsigned long)>
c000a309:	5b                   	pop    ebx
c000a30a:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a30d:	5f                   	pop    edi
c000a30e:	50                   	push   eax
c000a30f:	68 02 dc 01 c0       	push   0xc001dc02
c000a314:	e8 68 02 00 00       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c000a319:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a320:	83 c4 10             	add    esp,0x10
c000a323:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a327:	83 c4 10             	add    esp,0x10
c000a32a:	5b                   	pop    ebx
c000a32b:	5e                   	pop    esi
c000a32c:	5f                   	pop    edi
c000a32d:	c3                   	ret    

c000a32e <mapVASFirstTime>:
c000a32e:	55                   	push   ebp
c000a32f:	57                   	push   edi
c000a330:	56                   	push   esi
c000a331:	53                   	push   ebx
c000a332:	83 ec 0c             	sub    esp,0xc
c000a335:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a33a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a33d:	4a                   	dec    edx
c000a33e:	0f 84 df 00 00 00    	je     c000a423 <mapVASFirstTime+0xf5>
c000a344:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a347:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a34a:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a34f:	c1 e5 15             	shl    ebp,0x15
c000a352:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a357:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a35d:	29 eb                	sub    ebx,ebp
c000a35f:	29 ef                	sub    edi,ebp
c000a361:	e8 2f d7 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a366:	83 ec 0c             	sub    esp,0xc
c000a369:	68 03 04 00 00       	push   0x403
c000a36e:	6a 01                	push   0x1
c000a370:	53                   	push   ebx
c000a371:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a377:	50                   	push   eax
c000a378:	56                   	push   esi
c000a379:	e8 74 f8 ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a37e:	83 c4 20             	add    esp,0x20
c000a381:	39 fb                	cmp    ebx,edi
c000a383:	75 dc                	jne    c000a361 <mapVASFirstTime+0x33>
c000a385:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a38a:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a38f:	29 eb                	sub    ebx,ebp
c000a391:	29 ef                	sub    edi,ebp
c000a393:	e8 fd d6 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a398:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000a39c:	19 d2                	sbb    edx,edx
c000a39e:	83 ec 0c             	sub    esp,0xc
c000a3a1:	83 e2 04             	and    edx,0x4
c000a3a4:	81 c2 03 04 00 00    	add    edx,0x403
c000a3aa:	52                   	push   edx
c000a3ab:	6a 01                	push   0x1
c000a3ad:	53                   	push   ebx
c000a3ae:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a3b4:	50                   	push   eax
c000a3b5:	56                   	push   esi
c000a3b6:	e8 37 f8 ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a3bb:	83 c4 20             	add    esp,0x20
c000a3be:	39 df                	cmp    edi,ebx
c000a3c0:	75 d1                	jne    c000a393 <mapVASFirstTime+0x65>
c000a3c2:	bb 7c 10 02 c0       	mov    ebx,0xc002107c
c000a3c7:	81 eb 00 00 02 c0    	sub    ebx,0xc0020000
c000a3cd:	c1 eb 0c             	shr    ebx,0xc
c000a3d0:	53                   	push   ebx
c000a3d1:	68 7d 00 02 c0       	push   0xc002007d
c000a3d6:	68 00 00 02 c0       	push   0xc0020000
c000a3db:	68 e4 da 01 c0       	push   0xc001dae4
c000a3e0:	e8 9c 01 00 00       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c000a3e5:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000a3ec:	6a ff                	push   0xffffffff
c000a3ee:	53                   	push   ebx
c000a3ef:	68 00 00 02 c0       	push   0xc0020000
c000a3f4:	56                   	push   esi
c000a3f5:	e8 e2 f2 ff ff       	call   c00096dc <VAS::reflagRange(unsigned long, int, int, int)>
c000a3fa:	83 c4 14             	add    esp,0x14
c000a3fd:	a1 b0 1f 02 c0       	mov    eax,ds:0xc0021fb0
c000a402:	6a 04                	push   0x4
c000a404:	6a ff                	push   0xffffffff
c000a406:	53                   	push   ebx
c000a407:	68 00 00 02 c0       	push   0xc0020000
c000a40c:	50                   	push   eax
c000a40d:	e8 ca f2 ff ff       	call   c00096dc <VAS::reflagRange(unsigned long, int, int, int)>
c000a412:	0f 20 d8             	mov    eax,cr3
c000a415:	0f 22 d8             	mov    cr3,eax
c000a418:	83 c4 20             	add    esp,0x20
c000a41b:	83 c4 0c             	add    esp,0xc
c000a41e:	5b                   	pop    ebx
c000a41f:	5e                   	pop    esi
c000a420:	5f                   	pop    edi
c000a421:	5d                   	pop    ebp
c000a422:	c3                   	ret    
c000a423:	83 ec 0c             	sub    esp,0xc
c000a426:	68 15 dc 01 c0       	push   0xc001dc15
c000a42b:	e8 51 01 00 00       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c000a430:	83 c4 10             	add    esp,0x10
c000a433:	83 c4 0c             	add    esp,0xc
c000a436:	5b                   	pop    ebx
c000a437:	5e                   	pop    esi
c000a438:	5f                   	pop    edi
c000a439:	5d                   	pop    ebp
c000a43a:	c3                   	ret    

c000a43b <__cxa_atexit>:
c000a43b:	31 c0                	xor    eax,eax
c000a43d:	c3                   	ret    

c000a43e <__cxa_finalize>:
c000a43e:	c3                   	ret    

c000a43f <__stack_chk_fail>:
c000a43f:	55                   	push   ebp
c000a440:	89 e5                	mov    ebp,esp
c000a442:	83 ec 10             	sub    esp,0x10
c000a445:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a448:	68 2e dc 01 c0       	push   0xc001dc2e
c000a44d:	e8 2f 01 00 00       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c000a452:	58                   	pop    eax
c000a453:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a456:	5a                   	pop    edx
c000a457:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a45a:	68 2e dc 01 c0       	push   0xc001dc2e
c000a45f:	e8 1d 01 00 00       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c000a464:	c7 04 24 36 dc 01 c0 	mov    DWORD PTR [esp],0xc001dc36
c000a46b:	e8 93 5d 00 00       	call   c0010203 <KePanic(char const*)>
c000a470:	83 c4 10             	add    esp,0x10
c000a473:	c9                   	leave  
c000a474:	c3                   	ret    

c000a475 <__cxa_pure_virtual>:
c000a475:	83 ec 18             	sub    esp,0x18
c000a478:	68 4e dc 01 c0       	push   0xc001dc4e
c000a47d:	e8 81 5d 00 00       	call   c0010203 <KePanic(char const*)>
c000a482:	83 c4 1c             	add    esp,0x1c
c000a485:	c3                   	ret    

c000a486 <operator new[](unsigned long)>:
c000a486:	e9 2e d3 ff ff       	jmp    c00077b9 <malloc>

c000a48b <operator delete(void*, unsigned long)>:
c000a48b:	e9 49 d3 ff ff       	jmp    c00077d9 <rfree>

c000a490 <operator delete[](void*)>:
c000a490:	e9 44 d3 ff ff       	jmp    c00077d9 <rfree>

c000a495 <operator delete[](void*, unsigned long)>:
c000a495:	e9 3f d3 ff ff       	jmp    c00077d9 <rfree>

c000a49a <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a49a:	55                   	push   ebp
c000a49b:	b9 04 00 00 00       	mov    ecx,0x4
c000a4a0:	57                   	push   edi
c000a4a1:	56                   	push   esi
c000a4a2:	be 13 d8 01 c0       	mov    esi,0xc001d813
c000a4a7:	53                   	push   ebx
c000a4a8:	83 ec 20             	sub    esp,0x20
c000a4ab:	a1 12 d8 01 c0       	mov    eax,ds:0xc001d812
c000a4b0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a4b4:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000a4b8:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a4bc:	a1 1f d8 01 c0       	mov    eax,ds:0xc001d81f
c000a4c1:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a4c5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a4c9:	fc                   	cld    
c000a4ca:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a4cc:	89 ee                	mov    esi,ebp
c000a4ce:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a4d2:	eb 02                	jmp    c000a4d6 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000a4d4:	89 c6                	mov    esi,eax
c000a4d6:	31 d2                	xor    edx,edx
c000a4d8:	41                   	inc    ecx
c000a4d9:	89 f0                	mov    eax,esi
c000a4db:	f7 f3                	div    ebx
c000a4dd:	39 de                	cmp    esi,ebx
c000a4df:	73 f3                	jae    c000a4d4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000a4e1:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a4e4:	eb 02                	jmp    c000a4e8 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000a4e6:	89 c5                	mov    ebp,eax
c000a4e8:	31 d2                	xor    edx,edx
c000a4ea:	49                   	dec    ecx
c000a4eb:	89 e8                	mov    eax,ebp
c000a4ed:	f7 f3                	div    ebx
c000a4ef:	39 dd                	cmp    ebp,ebx
c000a4f1:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a4f5:	88 11                	mov    BYTE PTR [ecx],dl
c000a4f7:	73 ed                	jae    c000a4e6 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000a4f9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a4fd:	83 c4 20             	add    esp,0x20
c000a500:	5b                   	pop    ebx
c000a501:	5e                   	pop    esi
c000a502:	5f                   	pop    edi
c000a503:	5d                   	pop    ebp
c000a504:	c3                   	ret    

c000a505 <Dbg::logc(char)>:
c000a505:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a509:	f6 05 d0 1e 02 c0 10 	test   BYTE PTR ds:0xc0021ed0,0x10
c000a510:	75 12                	jne    c000a524 <Dbg::logc(char)+0x1f>
c000a512:	ba fd 03 00 00       	mov    edx,0x3fd
c000a517:	ec                   	in     al,dx
c000a518:	a8 20                	test   al,0x20
c000a51a:	74 fb                	je     c000a517 <Dbg::logc(char)+0x12>
c000a51c:	ba f8 03 00 00       	mov    edx,0x3f8
c000a521:	88 c8                	mov    al,cl
c000a523:	ee                   	out    dx,al
c000a524:	c3                   	ret    

c000a525 <Dbg::logs(char*)>:
c000a525:	53                   	push   ebx
c000a526:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a52a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a52d:	84 c0                	test   al,al
c000a52f:	74 0f                	je     c000a540 <Dbg::logs(char*)+0x1b>
c000a531:	50                   	push   eax
c000a532:	43                   	inc    ebx
c000a533:	e8 cd ff ff ff       	call   c000a505 <Dbg::logc(char)>
c000a538:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a53b:	5a                   	pop    edx
c000a53c:	84 c0                	test   al,al
c000a53e:	75 f1                	jne    c000a531 <Dbg::logs(char*)+0xc>
c000a540:	5b                   	pop    ebx
c000a541:	c3                   	ret    

c000a542 <Dbg::logWriteInt(unsigned int)>:
c000a542:	83 ec 10             	sub    esp,0x10
c000a545:	6a 0a                	push   0xa
c000a547:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a54b:	50                   	push   eax
c000a54c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a550:	50                   	push   eax
c000a551:	e8 44 ff ff ff       	call   c000a49a <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a556:	50                   	push   eax
c000a557:	e8 c9 ff ff ff       	call   c000a525 <Dbg::logs(char*)>
c000a55c:	83 c4 20             	add    esp,0x20
c000a55f:	c3                   	ret    

c000a560 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a560:	83 ec 10             	sub    esp,0x10
c000a563:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a567:	50                   	push   eax
c000a568:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a56c:	50                   	push   eax
c000a56d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a571:	52                   	push   edx
c000a572:	e8 23 ff ff ff       	call   c000a49a <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a577:	50                   	push   eax
c000a578:	e8 a8 ff ff ff       	call   c000a525 <Dbg::logs(char*)>
c000a57d:	83 c4 20             	add    esp,0x20
c000a580:	c3                   	ret    

c000a581 <Dbg::kprintf(char const*, ...)>:
c000a581:	55                   	push   ebp
c000a582:	57                   	push   edi
c000a583:	56                   	push   esi
c000a584:	53                   	push   ebx
c000a585:	83 ec 0c             	sub    esp,0xc
c000a588:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a58c:	f6 05 d0 1e 02 c0 10 	test   BYTE PTR ds:0xc0021ed0,0x10
c000a593:	74 08                	je     c000a59d <Dbg::kprintf(char const*, ...)+0x1c>
c000a595:	83 c4 0c             	add    esp,0xc
c000a598:	5b                   	pop    ebx
c000a599:	5e                   	pop    esi
c000a59a:	5f                   	pop    edi
c000a59b:	5d                   	pop    ebp
c000a59c:	c3                   	ret    
c000a59d:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a5a1:	31 ff                	xor    edi,edi
c000a5a3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a5a7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a5aa:	84 c0                	test   al,al
c000a5ac:	74 e7                	je     c000a595 <Dbg::kprintf(char const*, ...)+0x14>
c000a5ae:	8d 77 01             	lea    esi,[edi+0x1]
c000a5b1:	3c 25                	cmp    al,0x25
c000a5b3:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a5b6:	75 47                	jne    c000a5ff <Dbg::kprintf(char const*, ...)+0x7e>
c000a5b8:	83 c7 02             	add    edi,0x2
c000a5bb:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a5be:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a5c1:	83 e8 25             	sub    eax,0x25
c000a5c4:	3c 53                	cmp    al,0x53
c000a5c6:	0f 87 d2 00 00 00    	ja     c000a69e <Dbg::kprintf(char const*, ...)+0x11d>
c000a5cc:	25 ff 00 00 00       	and    eax,0xff
c000a5d1:	ff 24 85 64 dc 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe239c]
c000a5d8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a5dc:	89 c8                	mov    eax,ecx
c000a5de:	83 c1 04             	add    ecx,0x4
c000a5e1:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a5e5:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a5e7:	55                   	push   ebp
c000a5e8:	e8 55 ff ff ff       	call   c000a542 <Dbg::logWriteInt(unsigned int)>
c000a5ed:	58                   	pop    eax
c000a5ee:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a5f1:	84 c0                	test   al,al
c000a5f3:	74 a0                	je     c000a595 <Dbg::kprintf(char const*, ...)+0x14>
c000a5f5:	8d 77 01             	lea    esi,[edi+0x1]
c000a5f8:	3c 25                	cmp    al,0x25
c000a5fa:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a5fd:	74 b9                	je     c000a5b8 <Dbg::kprintf(char const*, ...)+0x37>
c000a5ff:	50                   	push   eax
c000a600:	89 f7                	mov    edi,esi
c000a602:	e8 fe fe ff ff       	call   c000a505 <Dbg::logc(char)>
c000a607:	89 ee                	mov    esi,ebp
c000a609:	58                   	pop    eax
c000a60a:	eb e2                	jmp    c000a5ee <Dbg::kprintf(char const*, ...)+0x6d>
c000a60c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a610:	89 c8                	mov    eax,ecx
c000a612:	83 c1 04             	add    ecx,0x4
c000a615:	8b 00                	mov    eax,DWORD PTR [eax]
c000a617:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a61b:	50                   	push   eax
c000a61c:	e8 04 ff ff ff       	call   c000a525 <Dbg::logs(char*)>
c000a621:	58                   	pop    eax
c000a622:	eb ca                	jmp    c000a5ee <Dbg::kprintf(char const*, ...)+0x6d>
c000a624:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a628:	89 d0                	mov    eax,edx
c000a62a:	83 c2 04             	add    edx,0x4
c000a62d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a631:	8b 00                	mov    eax,DWORD PTR [eax]
c000a633:	50                   	push   eax
c000a634:	e8 09 ff ff ff       	call   c000a542 <Dbg::logWriteInt(unsigned int)>
c000a639:	58                   	pop    eax
c000a63a:	eb b2                	jmp    c000a5ee <Dbg::kprintf(char const*, ...)+0x6d>
c000a63c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a640:	89 d0                	mov    eax,edx
c000a642:	83 c2 04             	add    edx,0x4
c000a645:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a648:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a64c:	50                   	push   eax
c000a64d:	e8 b3 fe ff ff       	call   c000a505 <Dbg::logc(char)>
c000a652:	58                   	pop    eax
c000a653:	eb 99                	jmp    c000a5ee <Dbg::kprintf(char const*, ...)+0x6d>
c000a655:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a659:	89 c8                	mov    eax,ecx
c000a65b:	83 c1 04             	add    ecx,0x4
c000a65e:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a662:	6a 10                	push   0x10
c000a664:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a666:	51                   	push   ecx
c000a667:	e8 f4 fe ff ff       	call   c000a560 <Dbg::logWriteIntBase(unsigned int, int)>
c000a66c:	5d                   	pop    ebp
c000a66d:	58                   	pop    eax
c000a66e:	e9 7b ff ff ff       	jmp    c000a5ee <Dbg::kprintf(char const*, ...)+0x6d>
c000a673:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a677:	89 d0                	mov    eax,edx
c000a679:	83 c2 08             	add    edx,0x8
c000a67c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a680:	6a 10                	push   0x10
c000a682:	8b 00                	mov    eax,DWORD PTR [eax]
c000a684:	50                   	push   eax
c000a685:	e8 d6 fe ff ff       	call   c000a560 <Dbg::logWriteIntBase(unsigned int, int)>
c000a68a:	58                   	pop    eax
c000a68b:	5a                   	pop    edx
c000a68c:	e9 5d ff ff ff       	jmp    c000a5ee <Dbg::kprintf(char const*, ...)+0x6d>
c000a691:	6a 25                	push   0x25
c000a693:	e8 6d fe ff ff       	call   c000a505 <Dbg::logc(char)>
c000a698:	5a                   	pop    edx
c000a699:	e9 50 ff ff ff       	jmp    c000a5ee <Dbg::kprintf(char const*, ...)+0x6d>
c000a69e:	6a 25                	push   0x25
c000a6a0:	e8 60 fe ff ff       	call   c000a505 <Dbg::logc(char)>
c000a6a5:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000a6a9:	50                   	push   eax
c000a6aa:	e8 56 fe ff ff       	call   c000a505 <Dbg::logc(char)>
c000a6af:	5a                   	pop    edx
c000a6b0:	59                   	pop    ecx
c000a6b1:	e9 38 ff ff ff       	jmp    c000a5ee <Dbg::kprintf(char const*, ...)+0x6d>

c000a6b6 <File::read(unsigned long long, void*, int*)>:
c000a6b6:	53                   	push   ebx
c000a6b7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a6bb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a6bf:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a6c6:	3c 19                	cmp    al,0x19
c000a6c8:	77 35                	ja     c000a6ff <File::read(unsigned long long, void*, int*)+0x49>
c000a6ca:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000a6d1:	85 c0                	test   eax,eax
c000a6d3:	74 2a                	je     c000a6ff <File::read(unsigned long long, void*, int*)+0x49>
c000a6d5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a6db:	85 c0                	test   eax,eax
c000a6dd:	74 20                	je     c000a6ff <File::read(unsigned long long, void*, int*)+0x49>
c000a6df:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a6e3:	74 21                	je     c000a706 <File::read(unsigned long long, void*, int*)+0x50>
c000a6e5:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a6e7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a6eb:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a6f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a6f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a6f9:	5b                   	pop    ebx
c000a6fa:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000a6fd:	ff e0                	jmp    eax
c000a6ff:	b8 0b 00 00 00       	mov    eax,0xb
c000a704:	eb 05                	jmp    c000a70b <File::read(unsigned long long, void*, int*)+0x55>
c000a706:	b8 05 00 00 00       	mov    eax,0x5
c000a70b:	5b                   	pop    ebx
c000a70c:	c3                   	ret    
c000a70d:	90                   	nop

c000a70e <File::write(unsigned long long, void*, int*)>:
c000a70e:	53                   	push   ebx
c000a70f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a713:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a717:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a71e:	3c 19                	cmp    al,0x19
c000a720:	77 35                	ja     c000a757 <File::write(unsigned long long, void*, int*)+0x49>
c000a722:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000a729:	85 c0                	test   eax,eax
c000a72b:	74 2a                	je     c000a757 <File::write(unsigned long long, void*, int*)+0x49>
c000a72d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a733:	85 c0                	test   eax,eax
c000a735:	74 20                	je     c000a757 <File::write(unsigned long long, void*, int*)+0x49>
c000a737:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a73b:	74 21                	je     c000a75e <File::write(unsigned long long, void*, int*)+0x50>
c000a73d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a73f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a743:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a749:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a74d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a751:	5b                   	pop    ebx
c000a752:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000a755:	ff e0                	jmp    eax
c000a757:	b8 0b 00 00 00       	mov    eax,0xb
c000a75c:	eb 05                	jmp    c000a763 <File::write(unsigned long long, void*, int*)+0x55>
c000a75e:	b8 05 00 00 00       	mov    eax,0x5
c000a763:	5b                   	pop    ebx
c000a764:	c3                   	ret    
c000a765:	90                   	nop

c000a766 <Directory::read(unsigned long long, void*, int*)>:
c000a766:	53                   	push   ebx
c000a767:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a76b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a76f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a776:	3c 19                	cmp    al,0x19
c000a778:	77 35                	ja     c000a7af <Directory::read(unsigned long long, void*, int*)+0x49>
c000a77a:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000a781:	85 c0                	test   eax,eax
c000a783:	74 2a                	je     c000a7af <Directory::read(unsigned long long, void*, int*)+0x49>
c000a785:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a78b:	85 c0                	test   eax,eax
c000a78d:	74 20                	je     c000a7af <Directory::read(unsigned long long, void*, int*)+0x49>
c000a78f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a793:	74 21                	je     c000a7b6 <Directory::read(unsigned long long, void*, int*)+0x50>
c000a795:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a797:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a79b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a7a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a7a5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a7a9:	5b                   	pop    ebx
c000a7aa:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000a7ad:	ff e0                	jmp    eax
c000a7af:	b8 0b 00 00 00       	mov    eax,0xb
c000a7b4:	eb 05                	jmp    c000a7bb <Directory::read(unsigned long long, void*, int*)+0x55>
c000a7b6:	b8 05 00 00 00       	mov    eax,0x5
c000a7bb:	5b                   	pop    ebx
c000a7bc:	c3                   	ret    
c000a7bd:	90                   	nop

c000a7be <Directory::write(unsigned long long, void*, int*)>:
c000a7be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a7c2:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000a7c9:	b8 0b 00 00 00       	mov    eax,0xb
c000a7ce:	80 fa 19             	cmp    dl,0x19
c000a7d1:	77 18                	ja     c000a7eb <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a7d3:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000a7da:	85 d2                	test   edx,edx
c000a7dc:	74 0d                	je     c000a7eb <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a7de:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000a7e5:	19 c0                	sbb    eax,eax
c000a7e7:	83 e0 0a             	and    eax,0xa
c000a7ea:	40                   	inc    eax
c000a7eb:	c3                   	ret    

c000a7ec <File::isAtty()>:
c000a7ec:	31 c0                	xor    eax,eax
c000a7ee:	c3                   	ret    
c000a7ef:	90                   	nop

c000a7f0 <Directory::isAtty()>:
c000a7f0:	31 c0                	xor    eax,eax
c000a7f2:	c3                   	ret    
c000a7f3:	90                   	nop

c000a7f4 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000a7f4:	b8 0a 00 00 00       	mov    eax,0xa
c000a7f9:	c3                   	ret    

c000a7fa <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000a7fa:	b8 0a 00 00 00       	mov    eax,0xa
c000a7ff:	c3                   	ret    

c000a800 <Filesystem::allocateSwapfile(char const*, int)>:
c000a800:	31 c0                	xor    eax,eax
c000a802:	31 d2                	xor    edx,edx
c000a804:	c3                   	ret    
c000a805:	90                   	nop

c000a806 <File::~File()>:
c000a806:	83 ec 0c             	sub    esp,0xc
c000a809:	ba 24 de 01 c0       	mov    edx,0xc001de24
c000a80e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a812:	89 10                	mov    DWORD PTR [eax],edx
c000a814:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a818:	83 ec 0c             	sub    esp,0xc
c000a81b:	50                   	push   eax
c000a81c:	e8 03 e8 ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	90                   	nop
c000a825:	83 c4 0c             	add    esp,0xc
c000a828:	c3                   	ret    
c000a829:	90                   	nop

c000a82a <File::~File()>:
c000a82a:	83 ec 0c             	sub    esp,0xc
c000a82d:	83 ec 0c             	sub    esp,0xc
c000a830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a834:	e8 cd ff ff ff       	call   c000a806 <File::~File()>
c000a839:	83 c4 10             	add    esp,0x10
c000a83c:	83 ec 08             	sub    esp,0x8
c000a83f:	68 14 01 00 00       	push   0x114
c000a844:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a848:	e8 3e fc ff ff       	call   c000a48b <operator delete(void*, unsigned long)>
c000a84d:	83 c4 10             	add    esp,0x10
c000a850:	83 c4 0c             	add    esp,0xc
c000a853:	c3                   	ret    

c000a854 <Directory::~Directory()>:
c000a854:	83 ec 0c             	sub    esp,0xc
c000a857:	ba 40 de 01 c0       	mov    edx,0xc001de40
c000a85c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a860:	89 10                	mov    DWORD PTR [eax],edx
c000a862:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a866:	83 ec 0c             	sub    esp,0xc
c000a869:	50                   	push   eax
c000a86a:	e8 b5 e7 ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c000a86f:	83 c4 10             	add    esp,0x10
c000a872:	90                   	nop
c000a873:	83 c4 0c             	add    esp,0xc
c000a876:	c3                   	ret    
c000a877:	90                   	nop

c000a878 <Directory::~Directory()>:
c000a878:	83 ec 0c             	sub    esp,0xc
c000a87b:	83 ec 0c             	sub    esp,0xc
c000a87e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a882:	e8 cd ff ff ff       	call   c000a854 <Directory::~Directory()>
c000a887:	83 c4 10             	add    esp,0x10
c000a88a:	83 ec 08             	sub    esp,0x8
c000a88d:	68 14 01 00 00       	push   0x114
c000a892:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a896:	e8 f0 fb ff ff       	call   c000a48b <operator delete(void*, unsigned long)>
c000a89b:	83 c4 10             	add    esp,0x10
c000a89e:	83 c4 0c             	add    esp,0xc
c000a8a1:	c3                   	ret    

c000a8a2 <Filesystem::Filesystem()>:
c000a8a2:	ba bc dd 01 c0       	mov    edx,0xc001ddbc
c000a8a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a8ab:	89 10                	mov    DWORD PTR [eax],edx
c000a8ad:	8b 15 b4 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021fb4
c000a8b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a8b7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000a8ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a8be:	a3 b4 1f 02 c0       	mov    ds:0xc0021fb4,eax
c000a8c3:	90                   	nop
c000a8c4:	c3                   	ret    
c000a8c5:	90                   	nop

c000a8c6 <Filesystem::~Filesystem()>:
c000a8c6:	ba bc dd 01 c0       	mov    edx,0xc001ddbc
c000a8cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a8cf:	89 10                	mov    DWORD PTR [eax],edx
c000a8d1:	90                   	nop
c000a8d2:	c3                   	ret    
c000a8d3:	90                   	nop

c000a8d4 <Filesystem::~Filesystem()>:
c000a8d4:	83 ec 0c             	sub    esp,0xc
c000a8d7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a8db:	e8 e6 ff ff ff       	call   c000a8c6 <Filesystem::~Filesystem()>
c000a8e0:	83 c4 04             	add    esp,0x4
c000a8e3:	83 ec 08             	sub    esp,0x8
c000a8e6:	6a 08                	push   0x8
c000a8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ec:	e8 9a fb ff ff       	call   c000a48b <operator delete(void*, unsigned long)>
c000a8f1:	83 c4 10             	add    esp,0x10
c000a8f4:	83 c4 0c             	add    esp,0xc
c000a8f7:	c3                   	ret    

c000a8f8 <Fs::getcwd(Process*, char*, int)>:
c000a8f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a8fc:	31 c0                	xor    eax,eax
c000a8fe:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000a901:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000a905:	7d 15                	jge    c000a91c <Fs::getcwd(Process*, char*, int)+0x24>
c000a907:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a90b:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000a912:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a915:	84 c9                	test   cl,cl
c000a917:	74 06                	je     c000a91f <Fs::getcwd(Process*, char*, int)+0x27>
c000a919:	40                   	inc    eax
c000a91a:	eb e2                	jmp    c000a8fe <Fs::getcwd(Process*, char*, int)+0x6>
c000a91c:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a91f:	31 c0                	xor    eax,eax
c000a921:	c3                   	ret    

c000a922 <Fs::initVFS()>:
c000a922:	83 ec 18             	sub    esp,0x18
c000a925:	6a 08                	push   0x8
c000a927:	e8 8d ce ff ff       	call   c00077b9 <malloc>
c000a92c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a92f:	e8 e0 c7 00 00       	call   c0017114 <FAT::FAT()>
c000a934:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000a93b:	e8 79 ce ff ff       	call   c00077b9 <malloc>
c000a940:	89 04 24             	mov    DWORD PTR [esp],eax
c000a943:	e8 28 d5 00 00       	call   c0017e70 <ISO9660::ISO9660()>
c000a948:	83 c4 1c             	add    esp,0x1c
c000a94b:	c3                   	ret    

c000a94c <Fs::standardiseFiles(char*, char const*, char const*)>:
c000a94c:	55                   	push   ebp
c000a94d:	57                   	push   edi
c000a94e:	56                   	push   esi
c000a94f:	53                   	push   ebx
c000a950:	81 ec 10 04 00 00    	sub    esp,0x410
c000a956:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000a95d:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000a964:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000a96b:	68 00 04 00 00       	push   0x400
c000a970:	6a 00                	push   0x0
c000a972:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000a976:	56                   	push   esi
c000a977:	e8 54 5b ff ff       	call   c00004d0 <memset>
c000a97c:	83 c4 10             	add    esp,0x10
c000a97f:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000a983:	75 0b                	jne    c000a990 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000a985:	50                   	push   eax
c000a986:	50                   	push   eax
c000a987:	57                   	push   edi
c000a988:	56                   	push   esi
c000a989:	e8 72 5c ff ff       	call   c0000600 <strcpy>
c000a98e:	eb 41                	jmp    c000a9d1 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000a990:	8a 07                	mov    al,BYTE PTR [edi]
c000a992:	3c 5c                	cmp    al,0x5c
c000a994:	74 04                	je     c000a99a <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000a996:	3c 2f                	cmp    al,0x2f
c000a998:	75 18                	jne    c000a9b2 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000a99a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a99d:	3c 60                	cmp    al,0x60
c000a99f:	7e 03                	jle    c000a9a4 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000a9a1:	83 e8 20             	sub    eax,0x20
c000a9a4:	88 04 24             	mov    BYTE PTR [esp],al
c000a9a7:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000a9ae:	50                   	push   eax
c000a9af:	50                   	push   eax
c000a9b0:	eb 18                	jmp    c000a9ca <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000a9b2:	50                   	push   eax
c000a9b3:	50                   	push   eax
c000a9b4:	55                   	push   ebp
c000a9b5:	56                   	push   esi
c000a9b6:	e8 45 5c ff ff       	call   c0000600 <strcpy>
c000a9bb:	5a                   	pop    edx
c000a9bc:	59                   	pop    ecx
c000a9bd:	68 da eb 01 c0       	push   0xc001ebda
c000a9c2:	56                   	push   esi
c000a9c3:	e8 f8 5d ff ff       	call   c00007c0 <strcat>
c000a9c8:	5d                   	pop    ebp
c000a9c9:	58                   	pop    eax
c000a9ca:	57                   	push   edi
c000a9cb:	56                   	push   esi
c000a9cc:	e8 ef 5d ff ff       	call   c00007c0 <strcat>
c000a9d1:	83 c4 10             	add    esp,0x10
c000a9d4:	8a 04 24             	mov    al,BYTE PTR [esp]
c000a9d7:	3c 60                	cmp    al,0x60
c000a9d9:	7e 03                	jle    c000a9de <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000a9db:	83 e8 20             	sub    eax,0x20
c000a9de:	88 04 24             	mov    BYTE PTR [esp],al
c000a9e1:	88 03                	mov    BYTE PTR [ebx],al
c000a9e3:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000a9ea:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000a9f0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000a9f4:	bf 03 00 00 00       	mov    edi,0x3
c000a9f9:	b8 03 00 00 00       	mov    eax,0x3
c000a9fe:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000aa01:	84 d2                	test   dl,dl
c000aa03:	0f 84 91 00 00 00    	je     c000aa9a <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000aa09:	8d 4f 01             	lea    ecx,[edi+0x1]
c000aa0c:	80 fa 5c             	cmp    dl,0x5c
c000aa0f:	74 05                	je     c000aa16 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000aa11:	80 fa 2f             	cmp    dl,0x2f
c000aa14:	75 12                	jne    c000aa28 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000aa16:	89 c5                	mov    ebp,eax
c000aa18:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000aa1d:	74 09                	je     c000aa28 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000aa1f:	40                   	inc    eax
c000aa20:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000aa24:	89 cf                	mov    edi,ecx
c000aa26:	eb d6                	jmp    c000a9fe <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000aa28:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000aa2d:	75 5b                	jne    c000aa8a <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000aa2f:	80 fa 2e             	cmp    dl,0x2e
c000aa32:	75 56                	jne    c000aa8a <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000aa34:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000aa38:	74 19                	je     c000aa53 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000aa3a:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000aa3f:	74 53                	je     c000aa94 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000aa41:	89 f9                	mov    ecx,edi
c000aa43:	41                   	inc    ecx
c000aa44:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000aa47:	80 fa 2f             	cmp    dl,0x2f
c000aa4a:	74 f7                	je     c000aa43 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000aa4c:	80 fa 5c             	cmp    dl,0x5c
c000aa4f:	74 f2                	je     c000aa43 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000aa51:	eb d1                	jmp    c000aa24 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa53:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000aa58:	74 3a                	je     c000aa94 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000aa5a:	83 f8 03             	cmp    eax,0x3
c000aa5d:	74 c5                	je     c000aa24 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa5f:	41                   	inc    ecx
c000aa60:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000aa63:	80 fa 2f             	cmp    dl,0x2f
c000aa66:	74 f7                	je     c000aa5f <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000aa68:	80 fa 5c             	cmp    dl,0x5c
c000aa6b:	74 f2                	je     c000aa5f <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000aa6d:	48                   	dec    eax
c000aa6e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000aa72:	75 06                	jne    c000aa7a <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000aa74:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aa78:	eb f3                	jmp    c000aa6d <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000aa7a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000aa7e:	74 07                	je     c000aa87 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000aa80:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aa84:	48                   	dec    eax
c000aa85:	eb f3                	jmp    c000aa7a <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000aa87:	40                   	inc    eax
c000aa88:	eb 9a                	jmp    c000aa24 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa8a:	80 fa 2f             	cmp    dl,0x2f
c000aa8d:	74 95                	je     c000aa24 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa8f:	80 fa 5c             	cmp    dl,0x5c
c000aa92:	74 90                	je     c000aa24 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa94:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000aa97:	40                   	inc    eax
c000aa98:	eb 8a                	jmp    c000aa24 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa9a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aa9e:	83 ec 0c             	sub    esp,0xc
c000aaa1:	53                   	push   ebx
c000aaa2:	e8 99 5a ff ff       	call   c0000540 <strlen>
c000aaa7:	83 c4 10             	add    esp,0x10
c000aaaa:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000aaaf:	75 26                	jne    c000aad7 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000aab1:	83 ec 0c             	sub    esp,0xc
c000aab4:	53                   	push   ebx
c000aab5:	e8 86 5a ff ff       	call   c0000540 <strlen>
c000aaba:	83 c4 10             	add    esp,0x10
c000aabd:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000aac2:	74 26                	je     c000aaea <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000aac4:	83 ec 0c             	sub    esp,0xc
c000aac7:	53                   	push   ebx
c000aac8:	e8 73 5a ff ff       	call   c0000540 <strlen>
c000aacd:	83 c4 10             	add    esp,0x10
c000aad0:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000aad5:	eb c7                	jmp    c000aa9e <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000aad7:	83 ec 0c             	sub    esp,0xc
c000aada:	53                   	push   ebx
c000aadb:	e8 60 5a ff ff       	call   c0000540 <strlen>
c000aae0:	83 c4 10             	add    esp,0x10
c000aae3:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000aae8:	74 c7                	je     c000aab1 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000aaea:	81 c4 0c 04 00 00    	add    esp,0x40c
c000aaf0:	5b                   	pop    ebx
c000aaf1:	5e                   	pop    esi
c000aaf2:	5f                   	pop    edi
c000aaf3:	5d                   	pop    ebp
c000aaf4:	c3                   	ret    
c000aaf5:	90                   	nop

c000aaf6 <File::File(char const*, Process*)>:
c000aaf6:	83 ec 0c             	sub    esp,0xc
c000aaf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aafd:	83 ec 08             	sub    esp,0x8
c000ab00:	6a 00                	push   0x0
c000ab02:	50                   	push   eax
c000ab03:	e8 3a e3 ff ff       	call   c0008e42 <UnixFile::UnixFile(int)>
c000ab08:	83 c4 10             	add    esp,0x10
c000ab0b:	ba 24 de 01 c0       	mov    edx,0xc001de24
c000ab10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab14:	89 10                	mov    DWORD PTR [eax],edx
c000ab16:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ab1a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000ab20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab24:	83 c0 0d             	add    eax,0xd
c000ab27:	83 ec 04             	sub    esp,0x4
c000ab2a:	52                   	push   edx
c000ab2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab2f:	50                   	push   eax
c000ab30:	e8 17 fe ff ff       	call   c000a94c <Fs::standardiseFiles(char*, char const*, char const*)>
c000ab35:	83 c4 10             	add    esp,0x10
c000ab38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab3c:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000ab3f:	8d 50 bf             	lea    edx,[eax-0x41]
c000ab42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab46:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000ab4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab50:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000ab54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab58:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ab5e:	25 ff 00 00 00       	and    eax,0xff
c000ab63:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000ab6a:	85 c0                	test   eax,eax
c000ab6c:	74 42                	je     c000abb0 <File::File(char const*, Process*)+0xba>
c000ab6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab72:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ab78:	25 ff 00 00 00       	and    eax,0xff
c000ab7d:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000ab84:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ab8a:	85 c0                	test   eax,eax
c000ab8c:	75 22                	jne    c000abb0 <File::File(char const*, Process*)+0xba>
c000ab8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab92:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ab98:	25 ff 00 00 00       	and    eax,0xff
c000ab9d:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000aba4:	83 ec 0c             	sub    esp,0xc
c000aba7:	50                   	push   eax
c000aba8:	e8 39 20 00 00       	call   c000cbe6 <LogicalDisk::mount()>
c000abad:	83 c4 10             	add    esp,0x10
c000abb0:	90                   	nop
c000abb1:	83 c4 0c             	add    esp,0xc
c000abb4:	c3                   	ret    
c000abb5:	90                   	nop

c000abb6 <File::open(FileOpenMode)>:
c000abb6:	53                   	push   ebx
c000abb7:	b8 0b 00 00 00       	mov    eax,0xb
c000abbc:	83 ec 08             	sub    esp,0x8
c000abbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000abc3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000abca:	80 fa 19             	cmp    dl,0x19
c000abcd:	77 40                	ja     c000ac0f <File::open(FileOpenMode)+0x59>
c000abcf:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000abd6:	85 d2                	test   edx,edx
c000abd8:	74 35                	je     c000ac0f <File::open(FileOpenMode)+0x59>
c000abda:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000abe0:	85 d2                	test   edx,edx
c000abe2:	74 2b                	je     c000ac0f <File::open(FileOpenMode)+0x59>
c000abe4:	b8 06 00 00 00       	mov    eax,0x6
c000abe9:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000abed:	75 20                	jne    c000ac0f <File::open(FileOpenMode)+0x59>
c000abef:	8b 02                	mov    eax,DWORD PTR [edx]
c000abf1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000abf7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000abfb:	51                   	push   ecx
c000abfc:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000abff:	51                   	push   ecx
c000ac00:	52                   	push   edx
c000ac01:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ac04:	83 c4 10             	add    esp,0x10
c000ac07:	85 c0                	test   eax,eax
c000ac09:	75 04                	jne    c000ac0f <File::open(FileOpenMode)+0x59>
c000ac0b:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000ac0f:	83 c4 08             	add    esp,0x8
c000ac12:	5b                   	pop    ebx
c000ac13:	c3                   	ret    

c000ac14 <File::close()>:
c000ac14:	53                   	push   ebx
c000ac15:	b8 0b 00 00 00       	mov    eax,0xb
c000ac1a:	83 ec 08             	sub    esp,0x8
c000ac1d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ac21:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ac28:	80 fa 19             	cmp    dl,0x19
c000ac2b:	77 41                	ja     c000ac6e <File::close()+0x5a>
c000ac2d:	8b 1c 95 20 44 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdbbe0]
c000ac34:	85 db                	test   ebx,ebx
c000ac36:	74 36                	je     c000ac6e <File::close()+0x5a>
c000ac38:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000ac3f:	74 2d                	je     c000ac6e <File::close()+0x5a>
c000ac41:	b8 05 00 00 00       	mov    eax,0x5
c000ac46:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ac4a:	74 22                	je     c000ac6e <File::close()+0x5a>
c000ac4c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000ac50:	8b 04 95 20 44 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbbe0]
c000ac57:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ac5d:	53                   	push   ebx
c000ac5e:	53                   	push   ebx
c000ac5f:	8b 10                	mov    edx,DWORD PTR [eax]
c000ac61:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ac67:	50                   	push   eax
c000ac68:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000ac6b:	83 c4 10             	add    esp,0x10
c000ac6e:	83 c4 08             	add    esp,0x8
c000ac71:	5b                   	pop    ebx
c000ac72:	c3                   	ret    
c000ac73:	90                   	nop

c000ac74 <File::seek(unsigned long long)>:
c000ac74:	56                   	push   esi
c000ac75:	53                   	push   ebx
c000ac76:	b8 0b 00 00 00       	mov    eax,0xb
c000ac7b:	51                   	push   ecx
c000ac7c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ac80:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ac84:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000ac8b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ac8f:	80 fa 19             	cmp    dl,0x19
c000ac92:	77 31                	ja     c000acc5 <File::seek(unsigned long long)+0x51>
c000ac94:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000ac9b:	85 d2                	test   edx,edx
c000ac9d:	74 26                	je     c000acc5 <File::seek(unsigned long long)+0x51>
c000ac9f:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000aca5:	85 d2                	test   edx,edx
c000aca7:	74 1c                	je     c000acc5 <File::seek(unsigned long long)+0x51>
c000aca9:	b8 05 00 00 00       	mov    eax,0x5
c000acae:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000acb2:	74 11                	je     c000acc5 <File::seek(unsigned long long)+0x51>
c000acb4:	8b 02                	mov    eax,DWORD PTR [edx]
c000acb6:	53                   	push   ebx
c000acb7:	51                   	push   ecx
c000acb8:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000acbe:	52                   	push   edx
c000acbf:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000acc2:	83 c4 10             	add    esp,0x10
c000acc5:	5a                   	pop    edx
c000acc6:	5b                   	pop    ebx
c000acc7:	5e                   	pop    esi
c000acc8:	c3                   	ret    
c000acc9:	90                   	nop

c000acca <File::tell(unsigned long long*)>:
c000acca:	83 ec 0c             	sub    esp,0xc
c000accd:	b8 0b 00 00 00       	mov    eax,0xb
c000acd2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000acd6:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000acdd:	80 fa 19             	cmp    dl,0x19
c000ace0:	77 34                	ja     c000ad16 <File::tell(unsigned long long*)+0x4c>
c000ace2:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000ace9:	85 d2                	test   edx,edx
c000aceb:	74 29                	je     c000ad16 <File::tell(unsigned long long*)+0x4c>
c000aced:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000acf3:	85 d2                	test   edx,edx
c000acf5:	74 1f                	je     c000ad16 <File::tell(unsigned long long*)+0x4c>
c000acf7:	b8 05 00 00 00       	mov    eax,0x5
c000acfc:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ad00:	74 14                	je     c000ad16 <File::tell(unsigned long long*)+0x4c>
c000ad02:	50                   	push   eax
c000ad03:	8b 02                	mov    eax,DWORD PTR [edx]
c000ad05:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad09:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ad0f:	52                   	push   edx
c000ad10:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ad13:	83 c4 10             	add    esp,0x10
c000ad16:	83 c4 0c             	add    esp,0xc
c000ad19:	c3                   	ret    

c000ad1a <File::rewind()>:
c000ad1a:	83 ec 10             	sub    esp,0x10
c000ad1d:	6a 00                	push   0x0
c000ad1f:	6a 00                	push   0x0
c000ad21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ad25:	e8 4a ff ff ff       	call   c000ac74 <File::seek(unsigned long long)>
c000ad2a:	83 c4 1c             	add    esp,0x1c
c000ad2d:	c3                   	ret    

c000ad2e <File::unlink()>:
c000ad2e:	83 ec 0c             	sub    esp,0xc
c000ad31:	b8 0b 00 00 00       	mov    eax,0xb
c000ad36:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad3a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ad41:	80 f9 19             	cmp    cl,0x19
c000ad44:	77 2f                	ja     c000ad75 <File::unlink()+0x47>
c000ad46:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000ad4d:	85 c9                	test   ecx,ecx
c000ad4f:	74 24                	je     c000ad75 <File::unlink()+0x47>
c000ad51:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ad57:	85 c9                	test   ecx,ecx
c000ad59:	74 1a                	je     c000ad75 <File::unlink()+0x47>
c000ad5b:	b8 06 00 00 00       	mov    eax,0x6
c000ad60:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad64:	75 0f                	jne    c000ad75 <File::unlink()+0x47>
c000ad66:	83 c2 0d             	add    edx,0xd
c000ad69:	50                   	push   eax
c000ad6a:	50                   	push   eax
c000ad6b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ad6d:	52                   	push   edx
c000ad6e:	51                   	push   ecx
c000ad6f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000ad72:	83 c4 10             	add    esp,0x10
c000ad75:	83 c4 0c             	add    esp,0xc
c000ad78:	c3                   	ret    
c000ad79:	90                   	nop

c000ad7a <File::rename(char const*)>:
c000ad7a:	83 ec 0c             	sub    esp,0xc
c000ad7d:	b8 0b 00 00 00       	mov    eax,0xb
c000ad82:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad86:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ad8d:	80 f9 19             	cmp    cl,0x19
c000ad90:	77 32                	ja     c000adc4 <File::rename(char const*)+0x4a>
c000ad92:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000ad99:	85 c9                	test   ecx,ecx
c000ad9b:	74 27                	je     c000adc4 <File::rename(char const*)+0x4a>
c000ad9d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ada3:	85 c9                	test   ecx,ecx
c000ada5:	74 1d                	je     c000adc4 <File::rename(char const*)+0x4a>
c000ada7:	b8 06 00 00 00       	mov    eax,0x6
c000adac:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000adb0:	75 12                	jne    c000adc4 <File::rename(char const*)+0x4a>
c000adb2:	83 c2 0d             	add    edx,0xd
c000adb5:	50                   	push   eax
c000adb6:	8b 01                	mov    eax,DWORD PTR [ecx]
c000adb8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000adbc:	52                   	push   edx
c000adbd:	51                   	push   ecx
c000adbe:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000adc1:	83 c4 10             	add    esp,0x10
c000adc4:	83 c4 0c             	add    esp,0xc
c000adc7:	c3                   	ret    

c000adc8 <File::chfatattr(unsigned char, unsigned char)>:
c000adc8:	57                   	push   edi
c000adc9:	b8 0b 00 00 00       	mov    eax,0xb
c000adce:	56                   	push   esi
c000adcf:	53                   	push   ebx
c000add0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000add4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000add8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000addf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ade3:	80 f9 19             	cmp    cl,0x19
c000ade6:	77 37                	ja     c000ae1f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ade8:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000adef:	85 c9                	test   ecx,ecx
c000adf1:	74 2c                	je     c000ae1f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000adf3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000adf9:	85 c9                	test   ecx,ecx
c000adfb:	74 22                	je     c000ae1f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000adfd:	b8 06 00 00 00       	mov    eax,0x6
c000ae02:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae06:	75 17                	jne    c000ae1f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae08:	8b 39                	mov    edi,DWORD PTR [ecx]
c000ae0a:	89 f0                	mov    eax,esi
c000ae0c:	83 c2 0d             	add    edx,0xd
c000ae0f:	0f b6 f0             	movzx  esi,al
c000ae12:	0f b6 db             	movzx  ebx,bl
c000ae15:	56                   	push   esi
c000ae16:	53                   	push   ebx
c000ae17:	52                   	push   edx
c000ae18:	51                   	push   ecx
c000ae19:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000ae1c:	83 c4 10             	add    esp,0x10
c000ae1f:	5b                   	pop    ebx
c000ae20:	5e                   	pop    esi
c000ae21:	5f                   	pop    edi
c000ae22:	c3                   	ret    
c000ae23:	90                   	nop

c000ae24 <File::exists()>:
c000ae24:	83 ec 0c             	sub    esp,0xc
c000ae27:	31 c0                	xor    eax,eax
c000ae29:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ae2d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ae34:	80 f9 19             	cmp    cl,0x19
c000ae37:	77 24                	ja     c000ae5d <File::exists()+0x39>
c000ae39:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000ae40:	85 c9                	test   ecx,ecx
c000ae42:	74 19                	je     c000ae5d <File::exists()+0x39>
c000ae44:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ae4a:	85 c9                	test   ecx,ecx
c000ae4c:	74 0f                	je     c000ae5d <File::exists()+0x39>
c000ae4e:	83 c2 0d             	add    edx,0xd
c000ae51:	50                   	push   eax
c000ae52:	50                   	push   eax
c000ae53:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ae55:	52                   	push   edx
c000ae56:	51                   	push   ecx
c000ae57:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000ae5a:	83 c4 10             	add    esp,0x10
c000ae5d:	83 c4 0c             	add    esp,0xc
c000ae60:	c3                   	ret    
c000ae61:	90                   	nop

c000ae62 <File::stat(unsigned long long*, bool*)>:
c000ae62:	56                   	push   esi
c000ae63:	53                   	push   ebx
c000ae64:	50                   	push   eax
c000ae65:	b8 0b 00 00 00       	mov    eax,0xb
c000ae6a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ae6e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ae72:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ae79:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ae7d:	80 f9 19             	cmp    cl,0x19
c000ae80:	77 3d                	ja     c000aebf <File::stat(unsigned long long*, bool*)+0x5d>
c000ae82:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000ae89:	85 c9                	test   ecx,ecx
c000ae8b:	74 32                	je     c000aebf <File::stat(unsigned long long*, bool*)+0x5d>
c000ae8d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ae93:	85 c9                	test   ecx,ecx
c000ae95:	74 28                	je     c000aebf <File::stat(unsigned long long*, bool*)+0x5d>
c000ae97:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ae99:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae9d:	74 13                	je     c000aeb2 <File::stat(unsigned long long*, bool*)+0x50>
c000ae9f:	83 ec 04             	sub    esp,0x4
c000aea2:	56                   	push   esi
c000aea3:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000aea9:	51                   	push   ecx
c000aeaa:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000aead:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000aeb0:	eb 0a                	jmp    c000aebc <File::stat(unsigned long long*, bool*)+0x5a>
c000aeb2:	53                   	push   ebx
c000aeb3:	83 c2 0d             	add    edx,0xd
c000aeb6:	56                   	push   esi
c000aeb7:	52                   	push   edx
c000aeb8:	51                   	push   ecx
c000aeb9:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000aebc:	83 c4 10             	add    esp,0x10
c000aebf:	5a                   	pop    edx
c000aec0:	5b                   	pop    ebx
c000aec1:	5e                   	pop    esi
c000aec2:	c3                   	ret    

c000aec3 <Fs::setcwd(Process*, char*)>:
c000aec3:	55                   	push   ebp
c000aec4:	57                   	push   edi
c000aec5:	56                   	push   esi
c000aec6:	53                   	push   ebx
c000aec7:	81 ec 20 02 00 00    	sub    esp,0x220
c000aecd:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000aed4:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000aeda:	57                   	push   edi
c000aedb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000aee2:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000aee6:	56                   	push   esi
c000aee7:	e8 60 fa ff ff       	call   c000a94c <Fs::standardiseFiles(char*, char const*, char const*)>
c000aeec:	89 34 24             	mov    DWORD PTR [esp],esi
c000aeef:	e8 4c 56 ff ff       	call   c0000540 <strlen>
c000aef4:	83 c4 10             	add    esp,0x10
c000aef7:	83 f8 02             	cmp    eax,0x2
c000aefa:	77 15                	ja     c000af11 <Fs::setcwd(Process*, char*)+0x4e>
c000aefc:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000af01:	83 eb 41             	sub    ebx,0x41
c000af04:	8b 04 9d 20 44 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdbbe0]
c000af0b:	85 c0                	test   eax,eax
c000af0d:	75 1c                	jne    c000af2b <Fs::setcwd(Process*, char*)+0x68>
c000af0f:	eb 2f                	jmp    c000af40 <Fs::setcwd(Process*, char*)+0x7d>
c000af11:	83 ec 0c             	sub    esp,0xc
c000af14:	56                   	push   esi
c000af15:	e8 26 56 ff ff       	call   c0000540 <strlen>
c000af1a:	83 c4 10             	add    esp,0x10
c000af1d:	83 f8 03             	cmp    eax,0x3
c000af20:	75 57                	jne    c000af79 <Fs::setcwd(Process*, char*)+0xb6>
c000af22:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000af27:	75 50                	jne    c000af79 <Fs::setcwd(Process*, char*)+0xb6>
c000af29:	eb d1                	jmp    c000aefc <Fs::setcwd(Process*, char*)+0x39>
c000af2b:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000af32:	75 0c                	jne    c000af40 <Fs::setcwd(Process*, char*)+0x7d>
c000af34:	83 ec 0c             	sub    esp,0xc
c000af37:	50                   	push   eax
c000af38:	e8 a9 1c 00 00       	call   c000cbe6 <LogicalDisk::mount()>
c000af3d:	83 c4 10             	add    esp,0x10
c000af40:	b8 03 00 00 00       	mov    eax,0x3
c000af45:	83 fb 19             	cmp    ebx,0x19
c000af48:	0f 87 c6 00 00 00    	ja     c000b014 <Fs::setcwd(Process*, char*)+0x151>
c000af4e:	8b 14 9d 20 44 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffdbbe0]
c000af55:	b8 05 00 00 00       	mov    eax,0x5
c000af5a:	85 d2                	test   edx,edx
c000af5c:	0f 84 b2 00 00 00    	je     c000b014 <Fs::setcwd(Process*, char*)+0x151>
c000af62:	b8 06 00 00 00       	mov    eax,0x6
c000af67:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000af6e:	0f 85 92 00 00 00    	jne    c000b006 <Fs::setcwd(Process*, char*)+0x143>
c000af74:	e9 9b 00 00 00       	jmp    c000b014 <Fs::setcwd(Process*, char*)+0x151>
c000af79:	83 ec 0c             	sub    esp,0xc
c000af7c:	68 14 01 00 00       	push   0x114
c000af81:	e8 33 c8 ff ff       	call   c00077b9 <malloc>
c000af86:	83 c4 0c             	add    esp,0xc
c000af89:	89 c3                	mov    ebx,eax
c000af8b:	55                   	push   ebp
c000af8c:	56                   	push   esi
c000af8d:	50                   	push   eax
c000af8e:	e8 63 fb ff ff       	call   c000aaf6 <File::File(char const*, Process*)>
c000af93:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000af98:	83 c4 0c             	add    esp,0xc
c000af9b:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000af9f:	50                   	push   eax
c000afa0:	8d 44 24 10          	lea    eax,[esp+0x10]
c000afa4:	50                   	push   eax
c000afa5:	53                   	push   ebx
c000afa6:	e8 b7 fe ff ff       	call   c000ae62 <File::stat(unsigned long long*, bool*)>
c000afab:	83 c4 10             	add    esp,0x10
c000afae:	83 f8 02             	cmp    eax,0x2
c000afb1:	74 04                	je     c000afb7 <Fs::setcwd(Process*, char*)+0xf4>
c000afb3:	85 c0                	test   eax,eax
c000afb5:	74 1c                	je     c000afd3 <Fs::setcwd(Process*, char*)+0x110>
c000afb7:	b8 01 00 00 00       	mov    eax,0x1
c000afbc:	85 db                	test   ebx,ebx
c000afbe:	74 54                	je     c000b014 <Fs::setcwd(Process*, char*)+0x151>
c000afc0:	83 ec 0c             	sub    esp,0xc
c000afc3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000afc5:	53                   	push   ebx
c000afc6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000afc9:	83 c4 10             	add    esp,0x10
c000afcc:	b8 01 00 00 00       	mov    eax,0x1
c000afd1:	eb 41                	jmp    c000b014 <Fs::setcwd(Process*, char*)+0x151>
c000afd3:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000afd8:	75 1c                	jne    c000aff6 <Fs::setcwd(Process*, char*)+0x133>
c000afda:	b8 02 00 00 00       	mov    eax,0x2
c000afdf:	85 db                	test   ebx,ebx
c000afe1:	74 31                	je     c000b014 <Fs::setcwd(Process*, char*)+0x151>
c000afe3:	83 ec 0c             	sub    esp,0xc
c000afe6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000afe8:	53                   	push   ebx
c000afe9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000afec:	83 c4 10             	add    esp,0x10
c000afef:	b8 02 00 00 00       	mov    eax,0x2
c000aff4:	eb 1e                	jmp    c000b014 <Fs::setcwd(Process*, char*)+0x151>
c000aff6:	85 db                	test   ebx,ebx
c000aff8:	74 0c                	je     c000b006 <Fs::setcwd(Process*, char*)+0x143>
c000affa:	83 ec 0c             	sub    esp,0xc
c000affd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000afff:	53                   	push   ebx
c000b000:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b003:	83 c4 10             	add    esp,0x10
c000b006:	50                   	push   eax
c000b007:	50                   	push   eax
c000b008:	56                   	push   esi
c000b009:	57                   	push   edi
c000b00a:	e8 f1 55 ff ff       	call   c0000600 <strcpy>
c000b00f:	83 c4 10             	add    esp,0x10
c000b012:	31 c0                	xor    eax,eax
c000b014:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b01a:	5b                   	pop    ebx
c000b01b:	5e                   	pop    esi
c000b01c:	5f                   	pop    edi
c000b01d:	5d                   	pop    ebp
c000b01e:	c3                   	ret    
c000b01f:	90                   	nop

c000b020 <Directory::Directory(char const*, Process*)>:
c000b020:	83 ec 0c             	sub    esp,0xc
c000b023:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b027:	83 ec 08             	sub    esp,0x8
c000b02a:	6a 00                	push   0x0
c000b02c:	50                   	push   eax
c000b02d:	e8 10 de ff ff       	call   c0008e42 <UnixFile::UnixFile(int)>
c000b032:	83 c4 10             	add    esp,0x10
c000b035:	ba 40 de 01 c0       	mov    edx,0xc001de40
c000b03a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b03e:	89 10                	mov    DWORD PTR [eax],edx
c000b040:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b044:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b04a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b04e:	83 c0 0d             	add    eax,0xd
c000b051:	83 ec 04             	sub    esp,0x4
c000b054:	52                   	push   edx
c000b055:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b059:	50                   	push   eax
c000b05a:	e8 ed f8 ff ff       	call   c000a94c <Fs::standardiseFiles(char*, char const*, char const*)>
c000b05f:	83 c4 10             	add    esp,0x10
c000b062:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b066:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b069:	8d 50 bf             	lea    edx,[eax-0x41]
c000b06c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b070:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b076:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b07a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b07e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b082:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b088:	25 ff 00 00 00       	and    eax,0xff
c000b08d:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000b094:	85 c0                	test   eax,eax
c000b096:	74 42                	je     c000b0da <Directory::Directory(char const*, Process*)+0xba>
c000b098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b09c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b0a2:	25 ff 00 00 00       	and    eax,0xff
c000b0a7:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000b0ae:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b0b4:	85 c0                	test   eax,eax
c000b0b6:	75 22                	jne    c000b0da <Directory::Directory(char const*, Process*)+0xba>
c000b0b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0bc:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b0c2:	25 ff 00 00 00       	and    eax,0xff
c000b0c7:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000b0ce:	83 ec 0c             	sub    esp,0xc
c000b0d1:	50                   	push   eax
c000b0d2:	e8 0f 1b 00 00       	call   c000cbe6 <LogicalDisk::mount()>
c000b0d7:	83 c4 10             	add    esp,0x10
c000b0da:	90                   	nop
c000b0db:	83 c4 0c             	add    esp,0xc
c000b0de:	c3                   	ret    
c000b0df:	90                   	nop

c000b0e0 <Directory::open()>:
c000b0e0:	53                   	push   ebx
c000b0e1:	b8 0b 00 00 00       	mov    eax,0xb
c000b0e6:	83 ec 08             	sub    esp,0x8
c000b0e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b0ed:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b0f4:	80 fa 19             	cmp    dl,0x19
c000b0f7:	77 3d                	ja     c000b136 <Directory::open()+0x56>
c000b0f9:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000b100:	85 d2                	test   edx,edx
c000b102:	74 32                	je     c000b136 <Directory::open()+0x56>
c000b104:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b10a:	85 d2                	test   edx,edx
c000b10c:	74 28                	je     c000b136 <Directory::open()+0x56>
c000b10e:	b8 06 00 00 00       	mov    eax,0x6
c000b113:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b117:	75 1d                	jne    c000b136 <Directory::open()+0x56>
c000b119:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b11f:	50                   	push   eax
c000b120:	8b 02                	mov    eax,DWORD PTR [edx]
c000b122:	51                   	push   ecx
c000b123:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b126:	51                   	push   ecx
c000b127:	52                   	push   edx
c000b128:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	85 c0                	test   eax,eax
c000b130:	75 04                	jne    c000b136 <Directory::open()+0x56>
c000b132:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b136:	83 c4 08             	add    esp,0x8
c000b139:	5b                   	pop    ebx
c000b13a:	c3                   	ret    
c000b13b:	90                   	nop

c000b13c <Directory::close()>:
c000b13c:	53                   	push   ebx
c000b13d:	b8 0b 00 00 00       	mov    eax,0xb
c000b142:	83 ec 08             	sub    esp,0x8
c000b145:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b149:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b150:	80 fa 19             	cmp    dl,0x19
c000b153:	77 41                	ja     c000b196 <Directory::close()+0x5a>
c000b155:	8b 1c 95 20 44 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdbbe0]
c000b15c:	85 db                	test   ebx,ebx
c000b15e:	74 36                	je     c000b196 <Directory::close()+0x5a>
c000b160:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b167:	74 2d                	je     c000b196 <Directory::close()+0x5a>
c000b169:	b8 05 00 00 00       	mov    eax,0x5
c000b16e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b172:	74 22                	je     c000b196 <Directory::close()+0x5a>
c000b174:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b178:	8b 04 95 20 44 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbbe0]
c000b17f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b185:	53                   	push   ebx
c000b186:	53                   	push   ebx
c000b187:	8b 10                	mov    edx,DWORD PTR [eax]
c000b189:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b18f:	50                   	push   eax
c000b190:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b193:	83 c4 10             	add    esp,0x10
c000b196:	83 c4 08             	add    esp,0x8
c000b199:	5b                   	pop    ebx
c000b19a:	c3                   	ret    
c000b19b:	90                   	nop

c000b19c <Directory::unlink()>:
c000b19c:	83 ec 0c             	sub    esp,0xc
c000b19f:	b8 0b 00 00 00       	mov    eax,0xb
c000b1a4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b1a8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b1af:	80 f9 19             	cmp    cl,0x19
c000b1b2:	77 2f                	ja     c000b1e3 <Directory::unlink()+0x47>
c000b1b4:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000b1bb:	85 c9                	test   ecx,ecx
c000b1bd:	74 24                	je     c000b1e3 <Directory::unlink()+0x47>
c000b1bf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b1c5:	85 c9                	test   ecx,ecx
c000b1c7:	74 1a                	je     c000b1e3 <Directory::unlink()+0x47>
c000b1c9:	b8 06 00 00 00       	mov    eax,0x6
c000b1ce:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b1d2:	75 0f                	jne    c000b1e3 <Directory::unlink()+0x47>
c000b1d4:	83 c2 0d             	add    edx,0xd
c000b1d7:	50                   	push   eax
c000b1d8:	50                   	push   eax
c000b1d9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b1db:	52                   	push   edx
c000b1dc:	51                   	push   ecx
c000b1dd:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b1e0:	83 c4 10             	add    esp,0x10
c000b1e3:	83 c4 0c             	add    esp,0xc
c000b1e6:	c3                   	ret    
c000b1e7:	90                   	nop

c000b1e8 <Directory::rename(char const*)>:
c000b1e8:	83 ec 0c             	sub    esp,0xc
c000b1eb:	b8 0b 00 00 00       	mov    eax,0xb
c000b1f0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b1f4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b1fb:	80 f9 19             	cmp    cl,0x19
c000b1fe:	77 32                	ja     c000b232 <Directory::rename(char const*)+0x4a>
c000b200:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000b207:	85 c9                	test   ecx,ecx
c000b209:	74 27                	je     c000b232 <Directory::rename(char const*)+0x4a>
c000b20b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b211:	85 c9                	test   ecx,ecx
c000b213:	74 1d                	je     c000b232 <Directory::rename(char const*)+0x4a>
c000b215:	b8 06 00 00 00       	mov    eax,0x6
c000b21a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b21e:	75 12                	jne    c000b232 <Directory::rename(char const*)+0x4a>
c000b220:	83 c2 0d             	add    edx,0xd
c000b223:	50                   	push   eax
c000b224:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b226:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b22a:	52                   	push   edx
c000b22b:	51                   	push   ecx
c000b22c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b22f:	83 c4 10             	add    esp,0x10
c000b232:	83 c4 0c             	add    esp,0xc
c000b235:	c3                   	ret    

c000b236 <Directory::exists()>:
c000b236:	83 ec 0c             	sub    esp,0xc
c000b239:	31 c0                	xor    eax,eax
c000b23b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b23f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b246:	80 f9 19             	cmp    cl,0x19
c000b249:	77 24                	ja     c000b26f <Directory::exists()+0x39>
c000b24b:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000b252:	85 c9                	test   ecx,ecx
c000b254:	74 19                	je     c000b26f <Directory::exists()+0x39>
c000b256:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b25c:	85 c9                	test   ecx,ecx
c000b25e:	74 0f                	je     c000b26f <Directory::exists()+0x39>
c000b260:	83 c2 0d             	add    edx,0xd
c000b263:	50                   	push   eax
c000b264:	50                   	push   eax
c000b265:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b267:	52                   	push   edx
c000b268:	51                   	push   ecx
c000b269:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b26c:	83 c4 10             	add    esp,0x10
c000b26f:	83 c4 0c             	add    esp,0xc
c000b272:	c3                   	ret    
c000b273:	90                   	nop

c000b274 <Directory::read(dirent*)>:
c000b274:	83 ec 1c             	sub    esp,0x1c
c000b277:	b8 0b 00 00 00       	mov    eax,0xb
c000b27c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b280:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b287:	80 fa 19             	cmp    dl,0x19
c000b28a:	77 30                	ja     c000b2bc <Directory::read(dirent*)+0x48>
c000b28c:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000b293:	85 d2                	test   edx,edx
c000b295:	74 25                	je     c000b2bc <Directory::read(dirent*)+0x48>
c000b297:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b29e:	74 1c                	je     c000b2bc <Directory::read(dirent*)+0x48>
c000b2a0:	83 ec 0c             	sub    esp,0xc
c000b2a3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2a5:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b2a9:	52                   	push   edx
c000b2aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2ae:	6a 00                	push   0x0
c000b2b0:	68 10 01 00 00       	push   0x110
c000b2b5:	51                   	push   ecx
c000b2b6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b2b9:	83 c4 20             	add    esp,0x20
c000b2bc:	83 c4 1c             	add    esp,0x1c
c000b2bf:	c3                   	ret    

c000b2c0 <Directory::create()>:
c000b2c0:	83 ec 0c             	sub    esp,0xc
c000b2c3:	b8 0b 00 00 00       	mov    eax,0xb
c000b2c8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b2cc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b2d3:	80 f9 19             	cmp    cl,0x19
c000b2d6:	77 2f                	ja     c000b307 <Directory::create()+0x47>
c000b2d8:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000b2df:	85 c9                	test   ecx,ecx
c000b2e1:	74 24                	je     c000b307 <Directory::create()+0x47>
c000b2e3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b2e9:	85 c9                	test   ecx,ecx
c000b2eb:	74 1a                	je     c000b307 <Directory::create()+0x47>
c000b2ed:	b8 06 00 00 00       	mov    eax,0x6
c000b2f2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b2f6:	75 0f                	jne    c000b307 <Directory::create()+0x47>
c000b2f8:	83 c2 0d             	add    edx,0xd
c000b2fb:	50                   	push   eax
c000b2fc:	50                   	push   eax
c000b2fd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2ff:	52                   	push   edx
c000b300:	51                   	push   ecx
c000b301:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b304:	83 c4 10             	add    esp,0x10
c000b307:	83 c4 0c             	add    esp,0xc
c000b30a:	c3                   	ret    
c000b30b:	90                   	nop

c000b30c <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b30c:	b8 0a 00 00 00       	mov    eax,0xa
c000b311:	c3                   	ret    
c000b312:	66 90                	xchg   ax,ax

c000b314 <Bus::Bus(char const*)>:
c000b314:	83 ec 0c             	sub    esp,0xc
c000b317:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b31b:	83 ec 08             	sub    esp,0x8
c000b31e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b322:	50                   	push   eax
c000b323:	e8 30 08 00 00       	call   c000bb58 <Device::Device(char const*)>
c000b328:	83 c4 10             	add    esp,0x10
c000b32b:	ba 5c de 01 c0       	mov    edx,0xc001de5c
c000b330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b334:	89 10                	mov    DWORD PTR [eax],edx
c000b336:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b33a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b344:	90                   	nop
c000b345:	83 c4 0c             	add    esp,0xc
c000b348:	c3                   	ret    
c000b349:	90                   	nop
c000b34a:	66 90                	xchg   ax,ax

c000b34c <Bus::~Bus()>:
c000b34c:	83 ec 0c             	sub    esp,0xc
c000b34f:	ba 5c de 01 c0       	mov    edx,0xc001de5c
c000b354:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b358:	89 10                	mov    DWORD PTR [eax],edx
c000b35a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b35e:	83 ec 0c             	sub    esp,0xc
c000b361:	50                   	push   eax
c000b362:	e8 5b 05 00 00       	call   c000b8c2 <Device::~Device()>
c000b367:	83 c4 10             	add    esp,0x10
c000b36a:	90                   	nop
c000b36b:	83 c4 0c             	add    esp,0xc
c000b36e:	c3                   	ret    
c000b36f:	90                   	nop

c000b370 <Bus::~Bus()>:
c000b370:	83 ec 0c             	sub    esp,0xc
c000b373:	83 ec 0c             	sub    esp,0xc
c000b376:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b37a:	e8 cd ff ff ff       	call   c000b34c <Bus::~Bus()>
c000b37f:	83 c4 10             	add    esp,0x10
c000b382:	83 ec 08             	sub    esp,0x8
c000b385:	68 58 01 00 00       	push   0x158
c000b38a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b38e:	e8 f8 f0 ff ff       	call   c000a48b <operator delete(void*, unsigned long)>
c000b393:	83 c4 10             	add    esp,0x10
c000b396:	83 c4 0c             	add    esp,0xc
c000b399:	c3                   	ret    

c000b39a <beepThread(void*)>:
c000b39a:	83 ec 0c             	sub    esp,0xc
c000b39d:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000b3a2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b3a6:	48                   	dec    eax
c000b3a7:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000b3ac:	75 01                	jne    c000b3af <beepThread(void*)+0x15>
c000b3ae:	fb                   	sti    
c000b3af:	83 ec 0c             	sub    esp,0xc
c000b3b2:	6b c2 0a             	imul   eax,edx,0xa
c000b3b5:	50                   	push   eax
c000b3b6:	e8 3d 87 00 00       	call   c0013af8 <milliTenthSleep(unsigned int)>
c000b3bb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b3c2:	e8 e3 a4 00 00       	call   c00158aa <HalMakeBeep(int)>
c000b3c7:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b3cf:	83 c4 1c             	add    esp,0x1c
c000b3d2:	e9 1d 86 00 00       	jmp    c00139f4 <blockTask(TaskState)>

c000b3d7 <Krnl::beep(int, int, bool)>:
c000b3d7:	56                   	push   esi
c000b3d8:	53                   	push   ebx
c000b3d9:	83 ec 10             	sub    esp,0x10
c000b3dc:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b3e0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b3e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3e8:	e8 bd a4 00 00       	call   c00158aa <HalMakeBeep(int)>
c000b3ed:	83 c4 10             	add    esp,0x10
c000b3f0:	89 f0                	mov    eax,esi
c000b3f2:	84 c0                	test   al,al
c000b3f4:	74 1e                	je     c000b414 <Krnl::beep(int, int, bool)+0x3d>
c000b3f6:	83 ec 0c             	sub    esp,0xc
c000b3f9:	6b db 0a             	imul   ebx,ebx,0xa
c000b3fc:	53                   	push   ebx
c000b3fd:	e8 f6 86 00 00       	call   c0013af8 <milliTenthSleep(unsigned int)>
c000b402:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b40a:	83 c4 14             	add    esp,0x14
c000b40d:	5b                   	pop    ebx
c000b40e:	5e                   	pop    esi
c000b40f:	e9 96 a4 00 00       	jmp    c00158aa <HalMakeBeep(int)>
c000b414:	68 e6 00 00 00       	push   0xe6
c000b419:	53                   	push   ebx
c000b41a:	68 9a b3 00 c0       	push   0xc000b39a
c000b41f:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c000b425:	e8 ae 81 00 00       	call   c00135d8 <Process::createThread(void (*)(void*), void*, int)>
c000b42a:	83 c4 14             	add    esp,0x14
c000b42d:	5b                   	pop    ebx
c000b42e:	5e                   	pop    esi
c000b42f:	c3                   	ret    

c000b430 <User::loadClockSettings(int)>:
c000b430:	53                   	push   ebx
c000b431:	83 ec 14             	sub    esp,0x14
c000b434:	68 14 01 00 00       	push   0x114
c000b439:	e8 7b c3 ff ff       	call   c00077b9 <malloc>
c000b43e:	83 c4 0c             	add    esp,0xc
c000b441:	89 c3                	mov    ebx,eax
c000b443:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c000b449:	68 80 de 01 c0       	push   0xc001de80
c000b44e:	50                   	push   eax
c000b44f:	e8 a2 f6 ff ff       	call   c000aaf6 <File::File(char const*, Process*)>
c000b454:	58                   	pop    eax
c000b455:	5a                   	pop    edx
c000b456:	6a 01                	push   0x1
c000b458:	53                   	push   ebx
c000b459:	e8 58 f7 ff ff       	call   c000abb6 <File::open(FileOpenMode)>
c000b45e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b461:	e8 ae f7 ff ff       	call   c000ac14 <File::close()>
c000b466:	83 c4 10             	add    esp,0x10
c000b469:	85 db                	test   ebx,ebx
c000b46b:	74 0f                	je     c000b47c <User::loadClockSettings(int)+0x4c>
c000b46d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b46f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b473:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b476:	83 c4 08             	add    esp,0x8
c000b479:	5b                   	pop    ebx
c000b47a:	ff e0                	jmp    eax
c000b47c:	83 c4 08             	add    esp,0x8
c000b47f:	5b                   	pop    ebx
c000b480:	c3                   	ret    
c000b481:	90                   	nop

c000b482 <Clock::Clock(char const*)>:
c000b482:	83 ec 0c             	sub    esp,0xc
c000b485:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b489:	83 ec 08             	sub    esp,0x8
c000b48c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b490:	50                   	push   eax
c000b491:	e8 c2 06 00 00       	call   c000bb58 <Device::Device(char const*)>
c000b496:	83 c4 10             	add    esp,0x10
c000b499:	ba a8 de 01 c0       	mov    edx,0xc001dea8
c000b49e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4a2:	89 10                	mov    DWORD PTR [eax],edx
c000b4a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4a8:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b4b2:	90                   	nop
c000b4b3:	83 c4 0c             	add    esp,0xc
c000b4b6:	c3                   	ret    
c000b4b7:	90                   	nop

c000b4b8 <Clock::~Clock()>:
c000b4b8:	83 ec 0c             	sub    esp,0xc
c000b4bb:	ba a8 de 01 c0       	mov    edx,0xc001dea8
c000b4c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4c4:	89 10                	mov    DWORD PTR [eax],edx
c000b4c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4ca:	83 ec 0c             	sub    esp,0xc
c000b4cd:	50                   	push   eax
c000b4ce:	e8 ef 03 00 00       	call   c000b8c2 <Device::~Device()>
c000b4d3:	83 c4 10             	add    esp,0x10
c000b4d6:	90                   	nop
c000b4d7:	83 c4 0c             	add    esp,0xc
c000b4da:	c3                   	ret    
c000b4db:	90                   	nop

c000b4dc <Clock::~Clock()>:
c000b4dc:	83 ec 0c             	sub    esp,0xc
c000b4df:	83 ec 0c             	sub    esp,0xc
c000b4e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4e6:	e8 cd ff ff ff       	call   c000b4b8 <Clock::~Clock()>
c000b4eb:	83 c4 10             	add    esp,0x10
c000b4ee:	83 ec 08             	sub    esp,0x8
c000b4f1:	68 58 01 00 00       	push   0x158
c000b4f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4fa:	e8 8c ef ff ff       	call   c000a48b <operator delete(void*, unsigned long)>
c000b4ff:	83 c4 10             	add    esp,0x10
c000b502:	83 c4 0c             	add    esp,0xc
c000b505:	c3                   	ret    

c000b506 <Clock::timeInSecondsLocal()>:
c000b506:	53                   	push   ebx
c000b507:	83 ec 14             	sub    esp,0x14
c000b50a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b50e:	8b 10                	mov    edx,DWORD PTR [eax]
c000b510:	50                   	push   eax
c000b511:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b514:	0f b6 0d b8 1f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0021fb8
c000b51b:	03 0d bc 1f 02 c0    	add    ecx,DWORD PTR ds:0xc0021fbc
c000b521:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b527:	89 cb                	mov    ebx,ecx
c000b529:	c1 fb 1f             	sar    ebx,0x1f
c000b52c:	01 c8                	add    eax,ecx
c000b52e:	11 da                	adc    edx,ebx
c000b530:	83 c4 10             	add    esp,0x10
c000b533:	31 c9                	xor    ecx,ecx
c000b535:	80 3d b9 1f 02 c0 00 	cmp    BYTE PTR ds:0xc0021fb9,0x0
c000b53c:	74 05                	je     c000b543 <Clock::timeInSecondsLocal()+0x3d>
c000b53e:	b9 08 07 00 00       	mov    ecx,0x708
c000b543:	31 db                	xor    ebx,ebx
c000b545:	01 c8                	add    eax,ecx
c000b547:	11 da                	adc    edx,ebx
c000b549:	83 c4 08             	add    esp,0x8
c000b54c:	5b                   	pop    ebx
c000b54d:	c3                   	ret    

c000b54e <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b54e:	57                   	push   edi
c000b54f:	56                   	push   esi
c000b550:	53                   	push   ebx
c000b551:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b555:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b559:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b55b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b55f:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b562:	0f b6 05 b8 1f 02 c0 	movzx  eax,BYTE PTR ds:0xc0021fb8
c000b569:	03 05 bc 1f 02 c0    	add    eax,DWORD PTR ds:0xc0021fbc
c000b56f:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b575:	99                   	cdq    
c000b576:	29 c6                	sub    esi,eax
c000b578:	19 d7                	sbb    edi,edx
c000b57a:	89 f0                	mov    eax,esi
c000b57c:	89 fa                	mov    edx,edi
c000b57e:	31 f6                	xor    esi,esi
c000b580:	80 3d b9 1f 02 c0 00 	cmp    BYTE PTR ds:0xc0021fb9,0x0
c000b587:	74 05                	je     c000b58e <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b589:	be 08 07 00 00       	mov    esi,0x708
c000b58e:	31 ff                	xor    edi,edi
c000b590:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b594:	29 f0                	sub    eax,esi
c000b596:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b59a:	19 fa                	sbb    edx,edi
c000b59c:	89 d8                	mov    eax,ebx
c000b59e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b5a2:	5b                   	pop    ebx
c000b5a3:	5e                   	pop    esi
c000b5a4:	5f                   	pop    edi
c000b5a5:	ff e0                	jmp    eax

c000b5a7 <datetimeToSeconds(datetime_t)>:
c000b5a7:	55                   	push   ebp
c000b5a8:	57                   	push   edi
c000b5a9:	56                   	push   esi
c000b5aa:	53                   	push   ebx
c000b5ab:	83 ec 14             	sub    esp,0x14
c000b5ae:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b5b2:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b5b6:	89 d3                	mov    ebx,edx
c000b5b8:	0f b6 c6             	movzx  eax,dh
c000b5bb:	c1 eb 10             	shr    ebx,0x10
c000b5be:	48                   	dec    eax
c000b5bf:	66 81 eb 6c 07       	sub    bx,0x76c
c000b5c4:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000b5c8:	0f b6 f5             	movzx  esi,ch
c000b5cb:	89 cf                	mov    edi,ecx
c000b5cd:	6b f6 3c             	imul   esi,esi,0x3c
c000b5d0:	c1 ef 10             	shr    edi,0x10
c000b5d3:	0f b6 c9             	movzx  ecx,cl
c000b5d6:	89 f8                	mov    eax,edi
c000b5d8:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b5de:	0f b6 f8             	movzx  edi,al
c000b5e1:	0f b6 d2             	movzx  edx,dl
c000b5e4:	01 fe                	add    esi,edi
c000b5e6:	01 f1                	add    ecx,esi
c000b5e8:	0f b7 f3             	movzx  esi,bx
c000b5eb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000b5ef:	c1 f9 1f             	sar    ecx,0x1f
c000b5f2:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000b5f7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b5fb:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000b600:	8b 0c 8d e0 de 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe2120]
c000b607:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000b60b:	76 29                	jbe    c000b636 <datetimeToSeconds(datetime_t)+0x8f>
c000b60d:	f6 c3 03             	test   bl,0x3
c000b610:	75 24                	jne    c000b636 <datetimeToSeconds(datetime_t)+0x8f>
c000b612:	31 d2                	xor    edx,edx
c000b614:	bf 64 00 00 00       	mov    edi,0x64
c000b619:	89 d8                	mov    eax,ebx
c000b61b:	66 f7 f7             	div    di
c000b61e:	66 85 d2             	test   dx,dx
c000b621:	75 12                	jne    c000b635 <datetimeToSeconds(datetime_t)+0x8e>
c000b623:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000b629:	bf 90 01 00 00       	mov    edi,0x190
c000b62e:	99                   	cdq    
c000b62f:	f7 ff                	idiv   edi
c000b631:	85 d2                	test   edx,edx
c000b633:	75 01                	jne    c000b636 <datetimeToSeconds(datetime_t)+0x8f>
c000b635:	41                   	inc    ecx
c000b636:	66 83 fb 46          	cmp    bx,0x46
c000b63a:	76 45                	jbe    c000b681 <datetimeToSeconds(datetime_t)+0xda>
c000b63c:	bb 46 00 00 00       	mov    ebx,0x46
c000b641:	bf 64 00 00 00       	mov    edi,0x64
c000b646:	bd 90 01 00 00       	mov    ebp,0x190
c000b64b:	b8 6d 01 00 00       	mov    eax,0x16d
c000b650:	f6 c3 03             	test   bl,0x3
c000b653:	75 23                	jne    c000b678 <datetimeToSeconds(datetime_t)+0xd1>
c000b655:	89 d8                	mov    eax,ebx
c000b657:	99                   	cdq    
c000b658:	f7 ff                	idiv   edi
c000b65a:	b8 6e 01 00 00       	mov    eax,0x16e
c000b65f:	85 d2                	test   edx,edx
c000b661:	75 15                	jne    c000b678 <datetimeToSeconds(datetime_t)+0xd1>
c000b663:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000b669:	99                   	cdq    
c000b66a:	f7 fd                	idiv   ebp
c000b66c:	31 c0                	xor    eax,eax
c000b66e:	85 d2                	test   edx,edx
c000b670:	0f 94 c0             	sete   al
c000b673:	05 6d 01 00 00       	add    eax,0x16d
c000b678:	01 c1                	add    ecx,eax
c000b67a:	43                   	inc    ebx
c000b67b:	39 f3                	cmp    ebx,esi
c000b67d:	7c cc                	jl     c000b64b <datetimeToSeconds(datetime_t)+0xa4>
c000b67f:	eb 3b                	jmp    c000b6bc <datetimeToSeconds(datetime_t)+0x115>
c000b681:	74 39                	je     c000b6bc <datetimeToSeconds(datetime_t)+0x115>
c000b683:	b8 45 00 00 00       	mov    eax,0x45
c000b688:	89 c2                	mov    edx,eax
c000b68a:	83 e2 03             	and    edx,0x3
c000b68d:	39 f0                	cmp    eax,esi
c000b68f:	7e 13                	jle    c000b6a4 <datetimeToSeconds(datetime_t)+0xfd>
c000b691:	85 d2                	test   edx,edx
c000b693:	0f 94 c2             	sete   dl
c000b696:	48                   	dec    eax
c000b697:	0f b6 d2             	movzx  edx,dl
c000b69a:	81 c2 6d 01 00 00    	add    edx,0x16d
c000b6a0:	29 d1                	sub    ecx,edx
c000b6a2:	eb e4                	jmp    c000b688 <datetimeToSeconds(datetime_t)+0xe1>
c000b6a4:	b8 6d 01 00 00       	mov    eax,0x16d
c000b6a9:	85 d2                	test   edx,edx
c000b6ab:	75 0d                	jne    c000b6ba <datetimeToSeconds(datetime_t)+0x113>
c000b6ad:	31 c0                	xor    eax,eax
c000b6af:	66 85 db             	test   bx,bx
c000b6b2:	0f 95 c0             	setne  al
c000b6b5:	05 6d 01 00 00       	add    eax,0x16d
c000b6ba:	29 c1                	sub    ecx,eax
c000b6bc:	b8 80 51 01 00       	mov    eax,0x15180
c000b6c1:	f7 e9                	imul   ecx
c000b6c3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b6c7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000b6cb:	83 c4 14             	add    esp,0x14
c000b6ce:	5b                   	pop    ebx
c000b6cf:	5e                   	pop    esi
c000b6d0:	5f                   	pop    edi
c000b6d1:	5d                   	pop    ebp
c000b6d2:	c3                   	ret    
c000b6d3:	90                   	nop

c000b6d4 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000b6d4:	57                   	push   edi
c000b6d5:	56                   	push   esi
c000b6d6:	53                   	push   ebx
c000b6d7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b6db:	8b 06                	mov    eax,DWORD PTR [esi]
c000b6dd:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000b6e0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b6e4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b6e8:	e8 ba fe ff ff       	call   c000b5a7 <datetimeToSeconds(datetime_t)>
c000b6ed:	59                   	pop    ecx
c000b6ee:	0f b6 0d b8 1f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0021fb8
c000b6f5:	5b                   	pop    ebx
c000b6f6:	03 0d bc 1f 02 c0    	add    ecx,DWORD PTR ds:0xc0021fbc
c000b6fc:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b702:	89 cb                	mov    ebx,ecx
c000b704:	c1 fb 1f             	sar    ebx,0x1f
c000b707:	29 c8                	sub    eax,ecx
c000b709:	19 da                	sbb    edx,ebx
c000b70b:	31 c9                	xor    ecx,ecx
c000b70d:	80 3d b9 1f 02 c0 00 	cmp    BYTE PTR ds:0xc0021fb9,0x0
c000b714:	74 05                	je     c000b71b <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000b716:	b9 08 07 00 00       	mov    ecx,0x708
c000b71b:	31 db                	xor    ebx,ebx
c000b71d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000b721:	29 c8                	sub    eax,ecx
c000b723:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b727:	19 da                	sbb    edx,ebx
c000b729:	89 f8                	mov    eax,edi
c000b72b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b72f:	5b                   	pop    ebx
c000b730:	5e                   	pop    esi
c000b731:	5f                   	pop    edi
c000b732:	ff e0                	jmp    eax

c000b734 <secondsToDatetime(unsigned long long)>:
c000b734:	55                   	push   ebp
c000b735:	57                   	push   edi
c000b736:	56                   	push   esi
c000b737:	53                   	push   ebx
c000b738:	83 ec 1c             	sub    esp,0x1c
c000b73b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b73f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b743:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000b747:	6a 00                	push   0x0
c000b749:	68 80 51 01 00       	push   0x15180
c000b74e:	55                   	push   ebp
c000b74f:	57                   	push   edi
c000b750:	e8 fb 09 01 00       	call   c001c150 <__udivdi3>
c000b755:	83 c4 10             	add    esp,0x10
c000b758:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000b75e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b762:	6a 00                	push   0x0
c000b764:	68 80 51 01 00       	push   0x15180
c000b769:	55                   	push   ebp
c000b76a:	57                   	push   edi
c000b76b:	bf 10 0e 00 00       	mov    edi,0xe10
c000b770:	e8 db 0a 01 00       	call   c001c250 <__umoddi3>
c000b775:	83 c4 10             	add    esp,0x10
c000b778:	99                   	cdq    
c000b779:	f7 ff                	idiv   edi
c000b77b:	bf 3c 00 00 00       	mov    edi,0x3c
c000b780:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000b783:	89 d0                	mov    eax,edx
c000b785:	99                   	cdq    
c000b786:	f7 ff                	idiv   edi
c000b788:	85 db                	test   ebx,ebx
c000b78a:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000b78d:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000b790:	79 11                	jns    c000b7a3 <secondsToDatetime(unsigned long long)+0x6f>
c000b792:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b796:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000b79c:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b7a1:	eb 07                	jmp    c000b7aa <secondsToDatetime(unsigned long long)+0x76>
c000b7a3:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b7a8:	89 d8                	mov    eax,ebx
c000b7aa:	bf b4 05 00 00       	mov    edi,0x5b4
c000b7af:	99                   	cdq    
c000b7b0:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000b7b5:	f7 f9                	idiv   ecx
c000b7b7:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000b7bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7c0:	31 d2                	xor    edx,edx
c000b7c2:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000b7ca:	01 c3                	add    ebx,eax
c000b7cc:	89 d8                	mov    eax,ebx
c000b7ce:	f7 f1                	div    ecx
c000b7d0:	31 d2                	xor    edx,edx
c000b7d2:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000b7d5:	89 d8                	mov    eax,ebx
c000b7d7:	f7 f7                	div    edi
c000b7d9:	31 d2                	xor    edx,edx
c000b7db:	29 c1                	sub    ecx,eax
c000b7dd:	89 d8                	mov    eax,ebx
c000b7df:	f7 f5                	div    ebp
c000b7e1:	bd 6d 01 00 00       	mov    ebp,0x16d
c000b7e6:	29 c1                	sub    ecx,eax
c000b7e8:	31 d2                	xor    edx,edx
c000b7ea:	89 c8                	mov    eax,ecx
c000b7ec:	f7 f5                	div    ebp
c000b7ee:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000b7f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b7f7:	31 d2                	xor    edx,edx
c000b7f9:	89 c8                	mov    eax,ecx
c000b7fb:	f7 f5                	div    ebp
c000b7fd:	31 d2                	xor    edx,edx
c000b7ff:	01 c3                	add    ebx,eax
c000b801:	89 c8                	mov    eax,ecx
c000b803:	f7 f7                	div    edi
c000b805:	bf 99 00 00 00       	mov    edi,0x99
c000b80a:	29 c3                	sub    ebx,eax
c000b80c:	31 d2                	xor    edx,edx
c000b80e:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000b816:	29 c3                	sub    ebx,eax
c000b818:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000b81b:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000b81e:	bb 05 00 00 00       	mov    ebx,0x5
c000b823:	83 c1 02             	add    ecx,0x2
c000b826:	89 c8                	mov    eax,ecx
c000b828:	f7 f7                	div    edi
c000b82a:	31 d2                	xor    edx,edx
c000b82c:	89 c7                	mov    edi,eax
c000b82e:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000b834:	83 c0 02             	add    eax,0x2
c000b837:	f7 f3                	div    ebx
c000b839:	89 eb                	mov    ebx,ebp
c000b83b:	29 c3                	sub    ebx,eax
c000b83d:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000b843:	88 1e                	mov    BYTE PTR [esi],bl
c000b845:	19 c0                	sbb    eax,eax
c000b847:	31 d2                	xor    edx,edx
c000b849:	83 e0 0c             	and    eax,0xc
c000b84c:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000b850:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000b858:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b85c:	83 f9 01             	cmp    ecx,0x1
c000b85f:	0f 96 c2             	setbe  dl
c000b862:	41                   	inc    ecx
c000b863:	01 d0                	add    eax,edx
c000b865:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000b868:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000b86c:	83 c4 1c             	add    esp,0x1c
c000b86f:	89 f0                	mov    eax,esi
c000b871:	5b                   	pop    ebx
c000b872:	5e                   	pop    esi
c000b873:	5f                   	pop    edi
c000b874:	5d                   	pop    ebp
c000b875:	c2 04 00             	ret    0x4

c000b878 <Clock::timeInDatetimeLocal()>:
c000b878:	53                   	push   ebx
c000b879:	83 ec 14             	sub    esp,0x14
c000b87c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b880:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b884:	e8 7d fc ff ff       	call   c000b506 <Clock::timeInSecondsLocal()>
c000b889:	83 c4 0c             	add    esp,0xc
c000b88c:	52                   	push   edx
c000b88d:	50                   	push   eax
c000b88e:	53                   	push   ebx
c000b88f:	e8 a0 fe ff ff       	call   c000b734 <secondsToDatetime(unsigned long long)>
c000b894:	89 d8                	mov    eax,ebx
c000b896:	83 c4 14             	add    esp,0x14
c000b899:	5b                   	pop    ebx
c000b89a:	c2 04 00             	ret    0x4
c000b89d:	90                   	nop

c000b89e <Device::hibernate()>:
c000b89e:	c3                   	ret    
c000b89f:	90                   	nop

c000b8a0 <Device::wake()>:
c000b8a0:	c3                   	ret    
c000b8a1:	90                   	nop

c000b8a2 <Device::detect()>:
c000b8a2:	c3                   	ret    
c000b8a3:	90                   	nop

c000b8a4 <Device::disableLegacy()>:
c000b8a4:	c3                   	ret    
c000b8a5:	90                   	nop

c000b8a6 <Device::powerSaving(PowerSavingLevel)>:
c000b8a6:	c3                   	ret    
c000b8a7:	90                   	nop

c000b8a8 <DriverlessDevice::close(int, int, void*)>:
c000b8a8:	31 c0                	xor    eax,eax
c000b8aa:	c3                   	ret    
c000b8ab:	90                   	nop

c000b8ac <DriverlessDevice::detect()>:
c000b8ac:	c3                   	ret    
c000b8ad:	90                   	nop

c000b8ae <DriverlessDevice::open(int, int, void*)>:
c000b8ae:	83 ec 18             	sub    esp,0x18
c000b8b1:	68 10 df 01 c0       	push   0xc001df10
c000b8b6:	e8 48 49 00 00       	call   c0010203 <KePanic(char const*)>
c000b8bb:	83 c8 ff             	or     eax,0xffffffff
c000b8be:	83 c4 1c             	add    esp,0x1c
c000b8c1:	c3                   	ret    

c000b8c2 <Device::~Device()>:
c000b8c2:	ba 70 df 01 c0       	mov    edx,0xc001df70
c000b8c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8cb:	89 10                	mov    DWORD PTR [eax],edx
c000b8cd:	90                   	nop
c000b8ce:	c3                   	ret    
c000b8cf:	90                   	nop

c000b8d0 <Device::~Device()>:
c000b8d0:	83 ec 0c             	sub    esp,0xc
c000b8d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b8d7:	e8 e6 ff ff ff       	call   c000b8c2 <Device::~Device()>
c000b8dc:	83 c4 04             	add    esp,0x4
c000b8df:	83 ec 08             	sub    esp,0x8
c000b8e2:	68 58 01 00 00       	push   0x158
c000b8e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8eb:	e8 9b eb ff ff       	call   c000a48b <operator delete(void*, unsigned long)>
c000b8f0:	83 c4 10             	add    esp,0x10
c000b8f3:	83 c4 0c             	add    esp,0xc
c000b8f6:	c3                   	ret    
c000b8f7:	90                   	nop

c000b8f8 <Device::findAndLoadDriver()>:
c000b8f8:	c7 44 24 04 2e df 01 c0 	mov    DWORD PTR [esp+0x4],0xc001df2e
c000b900:	e9 7c ec ff ff       	jmp    c000a581 <Dbg::kprintf(char const*, ...)>
c000b905:	90                   	nop

c000b906 <Device::preOpenPCI(PCIDeviceInfo)>:
c000b906:	57                   	push   edi
c000b907:	b9 09 00 00 00       	mov    ecx,0x9
c000b90c:	56                   	push   esi
c000b90d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b911:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b915:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000b91f:	81 c7 18 01 00 00    	add    edi,0x118
c000b925:	fc                   	cld    
c000b926:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b928:	5e                   	pop    esi
c000b929:	5f                   	pop    edi
c000b92a:	c3                   	ret    
c000b92b:	90                   	nop

c000b92c <Device::preOpenACPI(void*, char*, char*)>:
c000b92c:	57                   	push   edi
c000b92d:	b9 1e 00 00 00       	mov    ecx,0x1e
c000b932:	56                   	push   esi
c000b933:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b937:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b93b:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000b945:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000b94b:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000b951:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b955:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b957:	b9 0e 00 00 00       	mov    ecx,0xe
c000b95c:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000b962:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b966:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b968:	5e                   	pop    esi
c000b969:	5f                   	pop    edi
c000b96a:	c3                   	ret    
c000b96b:	90                   	nop

c000b96c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000b96c:	53                   	push   ebx
c000b96d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b971:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b975:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b979:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b97d:	0f b6 c0             	movzx  eax,al
c000b980:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000b984:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b988:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b98c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b990:	5b                   	pop    ebx
c000b991:	e9 a6 05 00 00       	jmp    c000bf3c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000b996 <Device::getParent()>:
c000b996:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b99a:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000b9a0:	c3                   	ret    
c000b9a1:	90                   	nop

c000b9a2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000b9a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9a6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9aa:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000b9af:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b9b3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b9b7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b9bb:	e9 e8 06 00 00       	jmp    c000c0a8 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000b9c0 <Device::addChild(Device*)>:
c000b9c0:	53                   	push   ebx
c000b9c1:	83 ec 08             	sub    esp,0x8
c000b9c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b9c8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b9cc:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000b9d2:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000b9d8:	8b 13                	mov    edx,DWORD PTR [ebx]
c000b9da:	85 d2                	test   edx,edx
c000b9dc:	74 04                	je     c000b9e2 <Device::addChild(Device*)+0x22>
c000b9de:	89 d3                	mov    ebx,edx
c000b9e0:	eb f6                	jmp    c000b9d8 <Device::addChild(Device*)+0x18>
c000b9e2:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000b9e5:	83 ec 0c             	sub    esp,0xc
c000b9e8:	6a 08                	push   0x8
c000b9ea:	e8 ca bd ff ff       	call   c00077b9 <malloc>
c000b9ef:	89 03                	mov    DWORD PTR [ebx],eax
c000b9f1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b9f7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b9fe:	83 c4 18             	add    esp,0x18
c000ba01:	5b                   	pop    ebx
c000ba02:	c3                   	ret    
c000ba03:	90                   	nop

c000ba04 <Device::removeAllChildren()>:
c000ba04:	56                   	push   esi
c000ba05:	53                   	push   ebx
c000ba06:	52                   	push   edx
c000ba07:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ba0b:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000ba11:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba14:	74 17                	je     c000ba2d <Device::removeAllChildren()+0x29>
c000ba16:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ba19:	85 c0                	test   eax,eax
c000ba1b:	74 0c                	je     c000ba29 <Device::removeAllChildren()+0x25>
c000ba1d:	83 ec 0c             	sub    esp,0xc
c000ba20:	8b 10                	mov    edx,DWORD PTR [eax]
c000ba22:	50                   	push   eax
c000ba23:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba2b:	eb e4                	jmp    c000ba11 <Device::removeAllChildren()+0xd>
c000ba2d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ba33:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ba39:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ba3f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ba46:	58                   	pop    eax
c000ba47:	5b                   	pop    ebx
c000ba48:	5e                   	pop    esi
c000ba49:	c3                   	ret    

c000ba4a <Device::hibernateAll()>:
c000ba4a:	53                   	push   ebx
c000ba4b:	83 ec 14             	sub    esp,0x14
c000ba4e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ba52:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba54:	53                   	push   ebx
c000ba55:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ba58:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba5e:	83 c4 10             	add    esp,0x10
c000ba61:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba64:	74 0f                	je     c000ba75 <Device::hibernateAll()+0x2b>
c000ba66:	83 ec 0c             	sub    esp,0xc
c000ba69:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba6c:	e8 d9 ff ff ff       	call   c000ba4a <Device::hibernateAll()>
c000ba71:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba73:	eb e9                	jmp    c000ba5e <Device::hibernateAll()+0x14>
c000ba75:	83 c4 08             	add    esp,0x8
c000ba78:	5b                   	pop    ebx
c000ba79:	c3                   	ret    

c000ba7a <Device::wakeAll()>:
c000ba7a:	53                   	push   ebx
c000ba7b:	83 ec 14             	sub    esp,0x14
c000ba7e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ba82:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba84:	53                   	push   ebx
c000ba85:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000ba88:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba8e:	83 c4 10             	add    esp,0x10
c000ba91:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba94:	74 0f                	je     c000baa5 <Device::wakeAll()+0x2b>
c000ba96:	83 ec 0c             	sub    esp,0xc
c000ba99:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba9c:	e8 d9 ff ff ff       	call   c000ba7a <Device::wakeAll()>
c000baa1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000baa3:	eb e9                	jmp    c000ba8e <Device::wakeAll()+0x14>
c000baa5:	83 c4 08             	add    esp,0x8
c000baa8:	5b                   	pop    ebx
c000baa9:	c3                   	ret    

c000baaa <Device::detectAll()>:
c000baaa:	53                   	push   ebx
c000baab:	83 ec 14             	sub    esp,0x14
c000baae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bab2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bab4:	53                   	push   ebx
c000bab5:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000bab8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000babe:	83 c4 10             	add    esp,0x10
c000bac1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bac4:	74 0f                	je     c000bad5 <Device::detectAll()+0x2b>
c000bac6:	83 ec 0c             	sub    esp,0xc
c000bac9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bacc:	e8 d9 ff ff ff       	call   c000baaa <Device::detectAll()>
c000bad1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bad3:	eb e9                	jmp    c000babe <Device::detectAll()+0x14>
c000bad5:	83 c4 08             	add    esp,0x8
c000bad8:	5b                   	pop    ebx
c000bad9:	c3                   	ret    

c000bada <Device::disableLegacyAll()>:
c000bada:	c3                   	ret    
c000badb:	90                   	nop

c000badc <Device::loadDriversForAll()>:
c000badc:	c3                   	ret    
c000badd:	90                   	nop

c000bade <Device::closeAll()>:
c000bade:	53                   	push   ebx
c000badf:	83 ec 08             	sub    esp,0x8
c000bae2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bae6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bae8:	6a 00                	push   0x0
c000baea:	6a 00                	push   0x0
c000baec:	6a 00                	push   0x0
c000baee:	53                   	push   ebx
c000baef:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000baf2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000baf8:	83 c4 10             	add    esp,0x10
c000bafb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bafe:	74 0f                	je     c000bb0f <Device::closeAll()+0x31>
c000bb00:	83 ec 0c             	sub    esp,0xc
c000bb03:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb06:	e8 d3 ff ff ff       	call   c000bade <Device::closeAll()>
c000bb0b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb0d:	eb e9                	jmp    c000baf8 <Device::closeAll()+0x1a>
c000bb0f:	83 c4 08             	add    esp,0x8
c000bb12:	5b                   	pop    ebx
c000bb13:	c3                   	ret    

c000bb14 <Device::powerSavingAll(PowerSavingLevel)>:
c000bb14:	56                   	push   esi
c000bb15:	53                   	push   ebx
c000bb16:	83 ec 0c             	sub    esp,0xc
c000bb19:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bb1d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000bb21:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb23:	56                   	push   esi
c000bb24:	53                   	push   ebx
c000bb25:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000bb28:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb2e:	83 c4 10             	add    esp,0x10
c000bb31:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb34:	74 0f                	je     c000bb45 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000bb36:	52                   	push   edx
c000bb37:	52                   	push   edx
c000bb38:	56                   	push   esi
c000bb39:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb3c:	e8 d3 ff ff ff       	call   c000bb14 <Device::powerSavingAll(PowerSavingLevel)>
c000bb41:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb43:	eb e9                	jmp    c000bb2e <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000bb45:	58                   	pop    eax
c000bb46:	5b                   	pop    ebx
c000bb47:	5e                   	pop    esi
c000bb48:	c3                   	ret    
c000bb49:	90                   	nop

c000bb4a <Device::setName(char const*)>:
c000bb4a:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000bb52:	e9 a9 4a ff ff       	jmp    c0000600 <strcpy>
c000bb57:	90                   	nop

c000bb58 <Device::Device(char const*)>:
c000bb58:	83 ec 1c             	sub    esp,0x1c
c000bb5b:	ba 70 df 01 c0       	mov    edx,0xc001df70
c000bb60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb64:	89 10                	mov    DWORD PTR [eax],edx
c000bb66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb6a:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000bb74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb78:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bb82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb86:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bb90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb94:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bb9e:	83 ec 08             	sub    esp,0x8
c000bba1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bba5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bba9:	e8 9c ff ff ff       	call   c000bb4a <Device::setName(char const*)>
c000bbae:	83 c4 10             	add    esp,0x10
c000bbb1:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000bbb9:	83 ec 0c             	sub    esp,0xc
c000bbbc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bbc0:	e8 f4 bb ff ff       	call   c00077b9 <malloc>
c000bbc5:	83 c4 10             	add    esp,0x10
c000bbc8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bbce:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bbd5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bbd9:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000bbdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbe3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bbe9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bbef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbf3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bbf9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bc00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc04:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000bc0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc0f:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000bc16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc1a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bc24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc28:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bc32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc36:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bc40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc44:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000bc4e:	90                   	nop
c000bc4f:	83 c4 1c             	add    esp,0x1c
c000bc52:	c3                   	ret    
c000bc53:	90                   	nop

c000bc54 <Device::getName()>:
c000bc54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc58:	05 d0 00 00 00       	add    eax,0xd0
c000bc5d:	c3                   	ret    

c000bc5e <DriverlessDevice::DriverlessDevice(char const*)>:
c000bc5e:	83 ec 0c             	sub    esp,0xc
c000bc61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc65:	83 ec 08             	sub    esp,0x8
c000bc68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc6c:	50                   	push   eax
c000bc6d:	e8 e6 fe ff ff       	call   c000bb58 <Device::Device(char const*)>
c000bc72:	83 c4 10             	add    esp,0x10
c000bc75:	ba 9c df 01 c0       	mov    edx,0xc001df9c
c000bc7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc7e:	89 10                	mov    DWORD PTR [eax],edx
c000bc80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc84:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000bc8e:	90                   	nop
c000bc8f:	83 c4 0c             	add    esp,0xc
c000bc92:	c3                   	ret    
c000bc93:	90                   	nop

c000bc94 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000bc94:	57                   	push   edi
c000bc95:	56                   	push   esi
c000bc96:	53                   	push   ebx
c000bc97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bc9b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bc9f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bca3:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000bca9:	75 0c                	jne    c000bcb7 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000bcab:	52                   	push   edx
c000bcac:	52                   	push   edx
c000bcad:	53                   	push   ebx
c000bcae:	56                   	push   esi
c000bcaf:	e8 4e 09 01 00       	call   c001c602 <LinkedList<Device>::addElement(Device*)>
c000bcb4:	83 c4 10             	add    esp,0x10
c000bcb7:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bcbd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bcc0:	74 12                	je     c000bcd4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000bcc2:	50                   	push   eax
c000bcc3:	57                   	push   edi
c000bcc4:	56                   	push   esi
c000bcc5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bcc8:	e8 c7 ff ff ff       	call   c000bc94 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bccd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bccf:	83 c4 10             	add    esp,0x10
c000bcd2:	eb e9                	jmp    c000bcbd <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000bcd4:	5b                   	pop    ebx
c000bcd5:	5e                   	pop    esi
c000bcd6:	5f                   	pop    edi
c000bcd7:	c3                   	ret    

c000bcd8 <getDevicesOfType(DeviceType)>:
c000bcd8:	53                   	push   ebx
c000bcd9:	83 ec 14             	sub    esp,0x14
c000bcdc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bce0:	53                   	push   ebx
c000bce1:	e8 f8 09 01 00       	call   c001c6de <LinkedList<Device>::LinkedList()>
c000bce6:	83 c4 0c             	add    esp,0xc
c000bce9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bced:	53                   	push   ebx
c000bcee:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c000bcf4:	e8 9b ff ff ff       	call   c000bc94 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bcf9:	89 d8                	mov    eax,ebx
c000bcfb:	83 c4 18             	add    esp,0x18
c000bcfe:	5b                   	pop    ebx
c000bcff:	c2 04 00             	ret    0x4
c000bd02:	66 90                	xchg   ax,ax

c000bd04 <HardDiskController::HardDiskController(char const*)>:
c000bd04:	83 ec 0c             	sub    esp,0xc
c000bd07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd0b:	83 ec 08             	sub    esp,0x8
c000bd0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd12:	50                   	push   eax
c000bd13:	e8 40 fe ff ff       	call   c000bb58 <Device::Device(char const*)>
c000bd18:	83 c4 10             	add    esp,0x10
c000bd1b:	ba c8 df 01 c0       	mov    edx,0xc001dfc8
c000bd20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd24:	89 10                	mov    DWORD PTR [eax],edx
c000bd26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd2a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000bd34:	90                   	nop
c000bd35:	83 c4 0c             	add    esp,0xc
c000bd38:	c3                   	ret    
c000bd39:	90                   	nop
c000bd3a:	66 90                	xchg   ax,ax

c000bd3c <HardDiskController::~HardDiskController()>:
c000bd3c:	83 ec 0c             	sub    esp,0xc
c000bd3f:	ba c8 df 01 c0       	mov    edx,0xc001dfc8
c000bd44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd48:	89 10                	mov    DWORD PTR [eax],edx
c000bd4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd4e:	83 ec 0c             	sub    esp,0xc
c000bd51:	50                   	push   eax
c000bd52:	e8 6b fb ff ff       	call   c000b8c2 <Device::~Device()>
c000bd57:	83 c4 10             	add    esp,0x10
c000bd5a:	90                   	nop
c000bd5b:	83 c4 0c             	add    esp,0xc
c000bd5e:	c3                   	ret    
c000bd5f:	90                   	nop

c000bd60 <HardDiskController::~HardDiskController()>:
c000bd60:	83 ec 0c             	sub    esp,0xc
c000bd63:	83 ec 0c             	sub    esp,0xc
c000bd66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd6a:	e8 cd ff ff ff       	call   c000bd3c <HardDiskController::~HardDiskController()>
c000bd6f:	83 c4 10             	add    esp,0x10
c000bd72:	83 ec 08             	sub    esp,0x8
c000bd75:	68 58 01 00 00       	push   0x158
c000bd7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd7e:	e8 08 e7 ff ff       	call   c000a48b <operator delete(void*, unsigned long)>
c000bd83:	83 c4 10             	add    esp,0x10
c000bd86:	83 c4 0c             	add    esp,0xc
c000bd89:	c3                   	ret    

c000bd8a <PhysicalDisk::eject()>:
c000bd8a:	83 c8 ff             	or     eax,0xffffffff
c000bd8d:	c3                   	ret    

c000bd8e <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000bd8e:	83 ec 0c             	sub    esp,0xc
c000bd91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd95:	83 ec 08             	sub    esp,0x8
c000bd98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd9c:	50                   	push   eax
c000bd9d:	e8 b6 fd ff ff       	call   c000bb58 <Device::Device(char const*)>
c000bda2:	83 c4 10             	add    esp,0x10
c000bda5:	ba f4 df 01 c0       	mov    edx,0xc001dff4
c000bdaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdae:	89 10                	mov    DWORD PTR [eax],edx
c000bdb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdb4:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000bdbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdbf:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000bdc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdca:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000bdd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdd8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bddc:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000bde2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bde6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000bdf0:	90                   	nop
c000bdf1:	83 c4 0c             	add    esp,0xc
c000bdf4:	c3                   	ret    
c000bdf5:	90                   	nop

c000bdf6 <PhysicalDisk::startCache()>:
c000bdf6:	56                   	push   esi
c000bdf7:	53                   	push   ebx
c000bdf8:	83 ec 10             	sub    esp,0x10
c000bdfb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bdff:	6a 44                	push   0x44
c000be01:	e8 b3 b9 ff ff       	call   c00077b9 <malloc>
c000be06:	89 c6                	mov    esi,eax
c000be08:	58                   	pop    eax
c000be09:	5a                   	pop    edx
c000be0a:	53                   	push   ebx
c000be0b:	56                   	push   esi
c000be0c:	e8 eb 15 00 00       	call   c000d3fc <VCache::VCache(PhysicalDisk*)>
c000be11:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000be17:	83 c4 14             	add    esp,0x14
c000be1a:	5b                   	pop    ebx
c000be1b:	5e                   	pop    esi
c000be1c:	c3                   	ret    
c000be1d:	90                   	nop

c000be1e <PhysicalDisk::~PhysicalDisk()>:
c000be1e:	83 ec 0c             	sub    esp,0xc
c000be21:	ba f4 df 01 c0       	mov    edx,0xc001dff4
c000be26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be2a:	89 10                	mov    DWORD PTR [eax],edx
c000be2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be30:	83 ec 0c             	sub    esp,0xc
c000be33:	50                   	push   eax
c000be34:	e8 89 fa ff ff       	call   c000b8c2 <Device::~Device()>
c000be39:	83 c4 10             	add    esp,0x10
c000be3c:	90                   	nop
c000be3d:	83 c4 0c             	add    esp,0xc
c000be40:	c3                   	ret    
c000be41:	90                   	nop

c000be42 <PhysicalDisk::~PhysicalDisk()>:
c000be42:	83 ec 0c             	sub    esp,0xc
c000be45:	83 ec 0c             	sub    esp,0xc
c000be48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be4c:	e8 cd ff ff ff       	call   c000be1e <PhysicalDisk::~PhysicalDisk()>
c000be51:	83 c4 10             	add    esp,0x10
c000be54:	83 ec 08             	sub    esp,0x8
c000be57:	68 6c 01 00 00       	push   0x16c
c000be5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be60:	e8 26 e6 ff ff       	call   c000a48b <operator delete(void*, unsigned long)>
c000be65:	83 c4 10             	add    esp,0x10
c000be68:	83 c4 0c             	add    esp,0xc
c000be6b:	c3                   	ret    

c000be6c <int_handler>:
c000be6c:	55                   	push   ebp
c000be6d:	57                   	push   edi
c000be6e:	56                   	push   esi
c000be6f:	53                   	push   ebx
c000be70:	83 ec 0c             	sub    esp,0xc
c000be73:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000be77:	80 3d 38 49 02 c0 00 	cmp    BYTE PTR ds:0xc0024938,0x0
c000be7e:	74 0b                	je     c000be8b <int_handler+0x1f>
c000be80:	fa                   	cli    
c000be81:	f4                   	hlt    
c000be82:	80 3d 38 49 02 c0 00 	cmp    BYTE PTR ds:0xc0024938,0x0
c000be89:	75 f5                	jne    c000be80 <int_handler+0x14>
c000be8b:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000be8e:	8d 46 e0             	lea    eax,[esi-0x20]
c000be91:	83 f8 17             	cmp    eax,0x17
c000be94:	76 3e                	jbe    c000bed4 <int_handler+0x68>
c000be96:	c1 e6 04             	shl    esi,0x4
c000be99:	31 db                	xor    ebx,ebx
c000be9b:	8d ae c0 2f 02 c0    	lea    ebp,[esi-0x3ffdd040]
c000bea1:	81 c6 c0 1f 02 c0    	add    esi,0xc0021fc0
c000bea7:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000beab:	85 c0                	test   eax,eax
c000bead:	74 13                	je     c000bec2 <int_handler+0x56>
c000beaf:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000beb2:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000beb6:	74 2a                	je     c000bee2 <int_handler+0x76>
c000beb8:	83 ec 08             	sub    esp,0x8
c000bebb:	52                   	push   edx
c000bebc:	57                   	push   edi
c000bebd:	ff d0                	call   eax
c000bebf:	83 c4 10             	add    esp,0x10
c000bec2:	43                   	inc    ebx
c000bec3:	83 fb 04             	cmp    ebx,0x4
c000bec6:	75 df                	jne    c000bea7 <int_handler+0x3b>
c000bec8:	83 c4 0c             	add    esp,0xc
c000becb:	31 c0                	xor    eax,eax
c000becd:	5b                   	pop    ebx
c000bece:	31 d2                	xor    edx,edx
c000bed0:	5e                   	pop    esi
c000bed1:	5f                   	pop    edi
c000bed2:	5d                   	pop    ebp
c000bed3:	c3                   	ret    
c000bed4:	83 ec 0c             	sub    esp,0xc
c000bed7:	50                   	push   eax
c000bed8:	e8 0a 9a 00 00       	call   c00158e7 <HalEndOfInterrupt(int)>
c000bedd:	83 c4 10             	add    esp,0x10
c000bee0:	eb b4                	jmp    c000be96 <int_handler+0x2a>
c000bee2:	83 ec 08             	sub    esp,0x8
c000bee5:	52                   	push   edx
c000bee6:	57                   	push   edi
c000bee7:	ff d0                	call   eax
c000bee9:	83 c4 10             	add    esp,0x10
c000beec:	83 c4 0c             	add    esp,0xc
c000beef:	5b                   	pop    ebx
c000bef0:	5e                   	pop    esi
c000bef1:	5f                   	pop    edi
c000bef2:	5d                   	pop    ebp
c000bef3:	c3                   	ret    

c000bef4 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000bef4:	56                   	push   esi
c000bef5:	31 c0                	xor    eax,eax
c000bef7:	53                   	push   ebx
c000bef8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000befc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bf00:	89 ca                	mov    edx,ecx
c000bf02:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bf06:	c1 e2 04             	shl    edx,0x4
c000bf09:	83 bc 82 c0 2f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffdd040],0x0
c000bf11:	74 15                	je     c000bf28 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000bf13:	40                   	inc    eax
c000bf14:	83 f8 04             	cmp    eax,0x4
c000bf17:	75 f0                	jne    c000bf09 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000bf19:	c7 44 24 0c 24 e0 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e024
c000bf21:	5b                   	pop    ebx
c000bf22:	5e                   	pop    esi
c000bf23:	e9 db 42 00 00       	jmp    c0010203 <KePanic(char const*)>
c000bf28:	8d 04 88             	lea    eax,[eax+ecx*4]
c000bf2b:	89 1c 85 c0 2f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd040],ebx
c000bf32:	89 34 85 c0 1f 02 c0 	mov    DWORD PTR [eax*4-0x3ffde040],esi
c000bf39:	5b                   	pop    ebx
c000bf3a:	5e                   	pop    esi
c000bf3b:	c3                   	ret    

c000bf3c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bf3c:	57                   	push   edi
c000bf3d:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c000bf43:	56                   	push   esi
c000bf44:	53                   	push   ebx
c000bf45:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bf49:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf4d:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000bf54:	74 5b                	je     c000bfb1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000bf56:	89 c7                	mov    edi,eax
c000bf58:	84 c0                	test   al,al
c000bf5a:	74 24                	je     c000bf80 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000bf5c:	83 fe 0f             	cmp    esi,0xf
c000bf5f:	0f 8f d9 00 00 00    	jg     c000c03e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000bf65:	8a 86 60 f8 01 c0    	mov    al,BYTE PTR [esi-0x3ffe07a0]
c000bf6b:	25 ff 00 00 00       	and    eax,0xff
c000bf70:	66 8b bc 00 60 47 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffdb8a0]
c000bf78:	89 c6                	mov    esi,eax
c000bf7a:	66 d1 ef             	shr    di,1
c000bf7d:	83 e7 01             	and    edi,0x1
c000bf80:	83 ec 08             	sub    esp,0x8
c000bf83:	a1 60 5b 02 c0       	mov    eax,ds:0xc0025b60
c000bf88:	31 db                	xor    ebx,ebx
c000bf8a:	50                   	push   eax
c000bf8b:	68 31 e0 01 c0       	push   0xc001e031
c000bf90:	e8 ec e5 ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c000bf95:	83 c4 10             	add    esp,0x10
c000bf98:	a1 60 5b 02 c0       	mov    eax,ds:0xc0025b60
c000bf9d:	85 c0                	test   eax,eax
c000bf9f:	7f 51                	jg     c000bff2 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000bfa1:	83 ec 0c             	sub    esp,0xc
c000bfa4:	68 48 e0 01 c0       	push   0xc001e048
c000bfa9:	e8 55 42 00 00       	call   c0010203 <KePanic(char const*)>
c000bfae:	83 c4 10             	add    esp,0x10
c000bfb1:	8d 4e 20             	lea    ecx,[esi+0x20]
c000bfb4:	31 d2                	xor    edx,edx
c000bfb6:	89 c8                	mov    eax,ecx
c000bfb8:	c1 e0 04             	shl    eax,0x4
c000bfbb:	8b 9c 90 c0 2f 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffdd040]
c000bfc2:	85 db                	test   ebx,ebx
c000bfc4:	0f 84 8b 00 00 00    	je     c000c055 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000bfca:	42                   	inc    edx
c000bfcb:	83 fa 04             	cmp    edx,0x4
c000bfce:	75 eb                	jne    c000bfbb <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000bfd0:	83 ec 0c             	sub    esp,0xc
c000bfd3:	68 9c e0 01 c0       	push   0xc001e09c
c000bfd8:	e8 26 42 00 00       	call   c0010203 <KePanic(char const*)>
c000bfdd:	83 c4 10             	add    esp,0x10
c000bfe0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bfe5:	5b                   	pop    ebx
c000bfe6:	5e                   	pop    esi
c000bfe7:	5f                   	pop    edi
c000bfe8:	c3                   	ret    
c000bfe9:	43                   	inc    ebx
c000bfea:	39 1d 60 5b 02 c0    	cmp    DWORD PTR ds:0xc0025b60,ebx
c000bff0:	7e af                	jle    c000bfa1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000bff2:	83 ec 08             	sub    esp,0x8
c000bff5:	8b 04 9d 80 5b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda480]
c000bffc:	56                   	push   esi
c000bffd:	50                   	push   eax
c000bffe:	e8 d1 f5 00 00       	call   c001b5d4 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c003:	83 c4 10             	add    esp,0x10
c000c006:	84 c0                	test   al,al
c000c008:	74 df                	je     c000bfe9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000c00a:	81 e7 ff 00 00 00    	and    edi,0xff
c000c010:	50                   	push   eax
c000c011:	8d 46 20             	lea    eax,[esi+0x20]
c000c014:	57                   	push   edi
c000c015:	25 ff 00 00 00       	and    eax,0xff
c000c01a:	6a 00                	push   0x0
c000c01c:	50                   	push   eax
c000c01d:	89 f0                	mov    eax,esi
c000c01f:	6a 00                	push   0x0
c000c021:	25 ff 00 00 00       	and    eax,0xff
c000c026:	6a 00                	push   0x0
c000c028:	50                   	push   eax
c000c029:	8b 04 9d 80 5b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda480]
c000c030:	50                   	push   eax
c000c031:	e8 18 f7 00 00       	call   c001b74e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c036:	83 c4 20             	add    esp,0x20
c000c039:	e9 73 ff ff ff       	jmp    c000bfb1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000c03e:	83 ec 0c             	sub    esp,0xc
c000c041:	31 ff                	xor    edi,edi
c000c043:	68 64 e0 01 c0       	push   0xc001e064
c000c048:	e8 b6 41 00 00       	call   c0010203 <KePanic(char const*)>
c000c04d:	83 c4 10             	add    esp,0x10
c000c050:	e9 2b ff ff ff       	jmp    c000bf80 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c055:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000c058:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c05c:	89 14 85 c0 2f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd040],edx
c000c063:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c067:	5b                   	pop    ebx
c000c068:	89 14 85 c0 1f 02 c0 	mov    DWORD PTR [eax*4-0x3ffde040],edx
c000c06f:	89 f0                	mov    eax,esi
c000c071:	5e                   	pop    esi
c000c072:	5f                   	pop    edi
c000c073:	c3                   	ret    

c000c074 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c074:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c078:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c07c:	c1 e0 04             	shl    eax,0x4
c000c07f:	8d 50 10             	lea    edx,[eax+0x10]
c000c082:	39 88 c0 2f 02 c0    	cmp    DWORD PTR [eax-0x3ffdd040],ecx
c000c088:	74 08                	je     c000c092 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c08a:	83 c0 04             	add    eax,0x4
c000c08d:	39 d0                	cmp    eax,edx
c000c08f:	75 f1                	jne    c000c082 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c091:	c3                   	ret    
c000c092:	c7 80 c0 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd040],0x0
c000c09c:	c7 80 c0 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde040],0x0
c000c0a6:	eb e2                	jmp    c000c08a <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c0a8 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c0a8:	53                   	push   ebx
c000c0a9:	83 ec 08             	sub    esp,0x8
c000c0ac:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c0b0:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c0b5:	74 0e                	je     c000c0c5 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c0b7:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000c0bc:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c0c3:	75 37                	jne    c000c0fc <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c0c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0c9:	83 c0 20             	add    eax,0x20
c000c0cc:	c1 e0 04             	shl    eax,0x4
c000c0cf:	8d 50 10             	lea    edx,[eax+0x10]
c000c0d2:	39 98 c0 2f 02 c0    	cmp    DWORD PTR [eax-0x3ffdd040],ebx
c000c0d8:	74 0c                	je     c000c0e6 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c0da:	83 c0 04             	add    eax,0x4
c000c0dd:	39 d0                	cmp    eax,edx
c000c0df:	75 f1                	jne    c000c0d2 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c0e1:	83 c4 08             	add    esp,0x8
c000c0e4:	5b                   	pop    ebx
c000c0e5:	c3                   	ret    
c000c0e6:	c7 80 c0 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd040],0x0
c000c0f0:	c7 80 c0 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde040],0x0
c000c0fa:	eb de                	jmp    c000c0da <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c0fc:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c101:	7f 12                	jg     c000c115 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000c103:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c107:	31 c0                	xor    eax,eax
c000c109:	8a 81 60 f8 01 c0    	mov    al,BYTE PTR [ecx-0x3ffe07a0]
c000c10f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c113:	eb b0                	jmp    c000c0c5 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c115:	83 ec 0c             	sub    esp,0xc
c000c118:	68 55 e0 01 c0       	push   0xc001e055
c000c11d:	e8 e1 40 00 00       	call   c0010203 <KePanic(char const*)>
c000c122:	83 c4 10             	add    esp,0x10
c000c125:	eb 9e                	jmp    c000c0c5 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c127 <setupINTS()>:
c000c127:	31 c0                	xor    eax,eax
c000c129:	c7 80 c0 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd040],0x0
c000c133:	c7 80 c0 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde040],0x0
c000c13d:	c7 80 c4 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd03c],0x0
c000c147:	c7 80 c4 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde03c],0x0
c000c151:	c7 80 c8 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd038],0x0
c000c15b:	c7 80 c8 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde038],0x0
c000c165:	c7 80 cc 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd034],0x0
c000c16f:	c7 80 cc 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde034],0x0
c000c179:	83 c0 10             	add    eax,0x10
c000c17c:	3d 00 10 00 00       	cmp    eax,0x1000
c000c181:	75 a6                	jne    c000c129 <setupINTS()+0x2>
c000c183:	c3                   	ret    

c000c184 <convertLegacyIRQNumber(int)>:
c000c184:	83 ec 0c             	sub    esp,0xc
c000c187:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c000c18d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c191:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c198:	74 0f                	je     c000c1a9 <convertLegacyIRQNumber(int)+0x25>
c000c19a:	83 f8 0f             	cmp    eax,0xf
c000c19d:	7f 0e                	jg     c000c1ad <convertLegacyIRQNumber(int)+0x29>
c000c19f:	31 c9                	xor    ecx,ecx
c000c1a1:	8a 88 60 f8 01 c0    	mov    cl,BYTE PTR [eax-0x3ffe07a0]
c000c1a7:	89 c8                	mov    eax,ecx
c000c1a9:	83 c4 0c             	add    esp,0xc
c000c1ac:	c3                   	ret    
c000c1ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c1b1:	83 ec 0c             	sub    esp,0xc
c000c1b4:	68 64 e0 01 c0       	push   0xc001e064
c000c1b9:	e8 45 40 00 00       	call   c0010203 <KePanic(char const*)>
c000c1be:	83 c4 10             	add    esp,0x10
c000c1c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1c5:	83 c4 0c             	add    esp,0xc
c000c1c8:	c3                   	ret    
c000c1c9:	90                   	nop

c000c1ca <startGUI(void*)>:
c000c1ca:	55                   	push   ebp
c000c1cb:	89 e5                	mov    ebp,esp
c000c1cd:	53                   	push   ebx
c000c1ce:	83 ec 04             	sub    esp,0x4
c000c1d1:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c1d6:	48                   	dec    eax
c000c1d7:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c1dc:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c1e1:	85 c0                	test   eax,eax
c000c1e3:	75 01                	jne    c000c1e6 <startGUI(void*)+0x1c>
c000c1e5:	fb                   	sti    
c000c1e6:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000c1ec:	83 ec 08             	sub    esp,0x8
c000c1ef:	6a 01                	push   0x1
c000c1f1:	68 c1 e0 01 c0       	push   0xc001e0c1
c000c1f6:	e8 d2 6b 00 00       	call   c0012dcd <Thr::loadDLL(char const*, bool)>
c000c1fb:	83 c4 10             	add    esp,0x10
c000c1fe:	83 ec 08             	sub    esp,0x8
c000c201:	53                   	push   ebx
c000c202:	50                   	push   eax
c000c203:	e8 f6 6d 00 00       	call   c0012ffe <Thr::executeDLL(unsigned long, void*)>
c000c208:	83 c4 10             	add    esp,0x10
c000c20b:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000c211:	83 ec 08             	sub    esp,0x8
c000c214:	6a 01                	push   0x1
c000c216:	68 db e0 01 c0       	push   0xc001e0db
c000c21b:	e8 ad 6b 00 00       	call   c0012dcd <Thr::loadDLL(char const*, bool)>
c000c220:	83 c4 10             	add    esp,0x10
c000c223:	83 ec 08             	sub    esp,0x8
c000c226:	53                   	push   ebx
c000c227:	50                   	push   eax
c000c228:	e8 d1 6d 00 00       	call   c0012ffe <Thr::executeDLL(unsigned long, void*)>
c000c22d:	83 c4 10             	add    esp,0x10
c000c230:	90                   	nop
c000c231:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c234:	c9                   	leave  
c000c235:	c3                   	ret    

c000c236 <startGUIVESA(void*)>:
c000c236:	55                   	push   ebp
c000c237:	89 e5                	mov    ebp,esp
c000c239:	53                   	push   ebx
c000c23a:	83 ec 04             	sub    esp,0x4
c000c23d:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c242:	48                   	dec    eax
c000c243:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c248:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c24d:	85 c0                	test   eax,eax
c000c24f:	75 01                	jne    c000c252 <startGUIVESA(void*)+0x1c>
c000c251:	fb                   	sti    
c000c252:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000c258:	83 ec 08             	sub    esp,0x8
c000c25b:	6a 01                	push   0x1
c000c25d:	68 f9 e0 01 c0       	push   0xc001e0f9
c000c262:	e8 66 6b 00 00       	call   c0012dcd <Thr::loadDLL(char const*, bool)>
c000c267:	83 c4 10             	add    esp,0x10
c000c26a:	83 ec 08             	sub    esp,0x8
c000c26d:	53                   	push   ebx
c000c26e:	50                   	push   eax
c000c26f:	e8 8a 6d 00 00       	call   c0012ffe <Thr::executeDLL(unsigned long, void*)>
c000c274:	83 c4 10             	add    esp,0x10
c000c277:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000c27d:	83 ec 08             	sub    esp,0x8
c000c280:	6a 01                	push   0x1
c000c282:	68 db e0 01 c0       	push   0xc001e0db
c000c287:	e8 41 6b 00 00       	call   c0012dcd <Thr::loadDLL(char const*, bool)>
c000c28c:	83 c4 10             	add    esp,0x10
c000c28f:	83 ec 08             	sub    esp,0x8
c000c292:	53                   	push   ebx
c000c293:	50                   	push   eax
c000c294:	e8 65 6d 00 00       	call   c0012ffe <Thr::executeDLL(unsigned long, void*)>
c000c299:	83 c4 10             	add    esp,0x10
c000c29c:	90                   	nop
c000c29d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c2a0:	c9                   	leave  
c000c2a1:	c3                   	ret    

c000c2a2 <sendKeyToTerminal(unsigned char)>:
c000c2a2:	55                   	push   ebp
c000c2a3:	89 e5                	mov    ebp,esp
c000c2a5:	83 ec 28             	sub    esp,0x28
c000c2a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2ab:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c2ae:	8b 15 04 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021f04
c000c2b4:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c2b7:	25 ff 00 00 00       	and    eax,0xff
c000c2bc:	83 ec 08             	sub    esp,0x8
c000c2bf:	50                   	push   eax
c000c2c0:	52                   	push   edx
c000c2c1:	e8 80 c7 ff ff       	call   c0008a46 <VgaText::receiveKey(unsigned char)>
c000c2c6:	83 c4 10             	add    esp,0x10
c000c2c9:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c2cd:	74 0a                	je     c000c2d9 <sendKeyToTerminal(unsigned char)+0x37>
c000c2cf:	80 7d e4 03          	cmp    BYTE PTR [ebp-0x1c],0x3
c000c2d3:	0f 85 8f 00 00 00    	jne    c000c368 <sendKeyToTerminal(unsigned char)+0xc6>
c000c2d9:	fa                   	cli    
c000c2da:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c2df:	40                   	inc    eax
c000c2e0:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c2e5:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c000c2ea:	40                   	inc    eax
c000c2eb:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c000c2f0:	a1 c0 3f 02 c0       	mov    eax,ds:0xc0023fc0
c000c2f5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c2f8:	c7 05 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023fc0,0x0
c000c302:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c306:	74 1f                	je     c000c327 <sendKeyToTerminal(unsigned char)+0x85>
c000c308:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c30b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c30e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c311:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c314:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c317:	83 ec 0c             	sub    esp,0xc
c000c31a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c31d:	e8 9a 79 00 00       	call   c0013cbc <unblockTask(ThreadControlBlock*)>
c000c322:	83 c4 10             	add    esp,0x10
c000c325:	eb db                	jmp    c000c302 <sendKeyToTerminal(unsigned char)+0x60>
c000c327:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c000c32c:	48                   	dec    eax
c000c32d:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c000c332:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c000c337:	85 c0                	test   eax,eax
c000c339:	75 18                	jne    c000c353 <sendKeyToTerminal(unsigned char)+0xb1>
c000c33b:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c000c340:	85 c0                	test   eax,eax
c000c342:	74 0f                	je     c000c353 <sendKeyToTerminal(unsigned char)+0xb1>
c000c344:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c000c34e:	e8 a5 74 00 00       	call   c00137f8 <schedule()>
c000c353:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c358:	48                   	dec    eax
c000c359:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c35e:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c363:	85 c0                	test   eax,eax
c000c365:	75 01                	jne    c000c368 <sendKeyToTerminal(unsigned char)+0xc6>
c000c367:	fb                   	sti    
c000c368:	90                   	nop
c000c369:	c9                   	leave  
c000c36a:	c3                   	ret    

c000c36b <sendKeyboardToken(KeyboardToken)>:
c000c36b:	55                   	push   ebp
c000c36c:	89 e5                	mov    ebp,esp
c000c36e:	83 ec 18             	sub    esp,0x18
c000c371:	e8 dd 3e 00 00       	call   c0010253 <Krnl::userIOReceived()>
c000c376:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c379:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c37c:	25 ff ff 00 00       	and    eax,0xffff
c000c381:	83 f2 01             	xor    edx,0x1
c000c384:	88 90 e0 3f 02 c0    	mov    BYTE PTR [eax-0x3ffdc020],dl
c000c38a:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c000c38f:	85 c0                	test   eax,eax
c000c391:	74 24                	je     c000c3b7 <sendKeyboardToken(KeyboardToken)+0x4c>
c000c393:	8b 0d c8 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023fc8
c000c399:	83 ec 04             	sub    esp,0x4
c000c39c:	68 e0 3f 02 c0       	push   0xc0023fe0
c000c3a1:	83 ec 08             	sub    esp,0x8
c000c3a4:	89 e2                	mov    edx,esp
c000c3a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3a9:	89 02                	mov    DWORD PTR [edx],eax
c000c3ab:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c3ae:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c3b2:	ff d1                	call   ecx
c000c3b4:	83 c4 10             	add    esp,0x10
c000c3b7:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c3bb:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c3be:	a0 e8 43 02 c0       	mov    al,ds:0xc00243e8
c000c3c3:	38 c2                	cmp    dl,al
c000c3c5:	74 1e                	je     c000c3e5 <sendKeyboardToken(KeyboardToken)+0x7a>
c000c3c7:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c3ca:	a2 e8 43 02 c0       	mov    ds:0xc00243e8,al
c000c3cf:	a0 e8 43 02 c0       	mov    al,ds:0xc00243e8
c000c3d4:	25 ff 00 00 00       	and    eax,0xff
c000c3d9:	83 ec 0c             	sub    esp,0xc
c000c3dc:	50                   	push   eax
c000c3dd:	e8 b6 bd ff ff       	call   c0008198 <setTerminalScrollLock(bool)>
c000c3e2:	83 c4 10             	add    esp,0x10
c000c3e5:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c3e8:	84 c0                	test   al,al
c000c3ea:	0f 84 ae 00 00 00    	je     c000c49e <sendKeyboardToken(KeyboardToken)+0x133>
c000c3f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3f3:	66 3d 10 03          	cmp    ax,0x310
c000c3f7:	75 06                	jne    c000c3ff <sendKeyboardToken(KeyboardToken)+0x94>
c000c3f9:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c3ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c402:	66 3d 11 03          	cmp    ax,0x311
c000c406:	75 06                	jne    c000c40e <sendKeyboardToken(KeyboardToken)+0xa3>
c000c408:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c40e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c411:	66 3d 12 03          	cmp    ax,0x312
c000c415:	75 06                	jne    c000c41d <sendKeyboardToken(KeyboardToken)+0xb2>
c000c417:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c41d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c420:	66 3d 13 03          	cmp    ax,0x313
c000c424:	75 06                	jne    c000c42c <sendKeyboardToken(KeyboardToken)+0xc1>
c000c426:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c42c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c42f:	66 3d 14 03          	cmp    ax,0x314
c000c433:	75 06                	jne    c000c43b <sendKeyboardToken(KeyboardToken)+0xd0>
c000c435:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c43b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c43e:	66 3d 15 03          	cmp    ax,0x315
c000c442:	75 06                	jne    c000c44a <sendKeyboardToken(KeyboardToken)+0xdf>
c000c444:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c44a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c44d:	66 3d 16 03          	cmp    ax,0x316
c000c451:	75 06                	jne    c000c459 <sendKeyboardToken(KeyboardToken)+0xee>
c000c453:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c459:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c45c:	66 3d 17 03          	cmp    ax,0x317
c000c460:	75 06                	jne    c000c468 <sendKeyboardToken(KeyboardToken)+0xfd>
c000c462:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c468:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c46b:	66 3d 18 03          	cmp    ax,0x318
c000c46f:	75 06                	jne    c000c477 <sendKeyboardToken(KeyboardToken)+0x10c>
c000c471:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c477:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c47a:	66 3d 19 03          	cmp    ax,0x319
c000c47e:	75 06                	jne    c000c486 <sendKeyboardToken(KeyboardToken)+0x11b>
c000c480:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c486:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c489:	66 3d 1a 03          	cmp    ax,0x31a
c000c48d:	0f 85 c9 00 00 00    	jne    c000c55c <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c493:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c499:	e9 be 00 00 00       	jmp    c000c55c <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c49e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4a1:	66 3d 10 03          	cmp    ax,0x310
c000c4a5:	75 0a                	jne    c000c4b1 <sendKeyboardToken(KeyboardToken)+0x146>
c000c4a7:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c4ad:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4b4:	66 3d 11 03          	cmp    ax,0x311
c000c4b8:	75 0a                	jne    c000c4c4 <sendKeyboardToken(KeyboardToken)+0x159>
c000c4ba:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c4c0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4c7:	66 3d 12 03          	cmp    ax,0x312
c000c4cb:	75 0a                	jne    c000c4d7 <sendKeyboardToken(KeyboardToken)+0x16c>
c000c4cd:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c4d3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4da:	66 3d 13 03          	cmp    ax,0x313
c000c4de:	75 0a                	jne    c000c4ea <sendKeyboardToken(KeyboardToken)+0x17f>
c000c4e0:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c4e6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4ed:	66 3d 14 03          	cmp    ax,0x314
c000c4f1:	75 0a                	jne    c000c4fd <sendKeyboardToken(KeyboardToken)+0x192>
c000c4f3:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c4f9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c500:	66 3d 15 03          	cmp    ax,0x315
c000c504:	75 0a                	jne    c000c510 <sendKeyboardToken(KeyboardToken)+0x1a5>
c000c506:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c50c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c510:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c513:	66 3d 16 03          	cmp    ax,0x316
c000c517:	75 0a                	jne    c000c523 <sendKeyboardToken(KeyboardToken)+0x1b8>
c000c519:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c51f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c523:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c526:	66 3d 17 03          	cmp    ax,0x317
c000c52a:	75 0a                	jne    c000c536 <sendKeyboardToken(KeyboardToken)+0x1cb>
c000c52c:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c532:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c536:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c539:	66 3d 18 03          	cmp    ax,0x318
c000c53d:	75 0a                	jne    c000c549 <sendKeyboardToken(KeyboardToken)+0x1de>
c000c53f:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c545:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c549:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c54c:	66 3d 19 03          	cmp    ax,0x319
c000c550:	75 0a                	jne    c000c55c <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c552:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c558:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c55c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c55f:	66 3d 00 02          	cmp    ax,0x200
c000c563:	75 2c                	jne    c000c591 <sendKeyboardToken(KeyboardToken)+0x226>
c000c565:	a0 e0 43 02 c0       	mov    al,ds:0xc00243e0
c000c56a:	83 f0 01             	xor    eax,0x1
c000c56d:	84 c0                	test   al,al
c000c56f:	74 20                	je     c000c591 <sendKeyboardToken(KeyboardToken)+0x226>
c000c571:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000c576:	6a 01                	push   0x1
c000c578:	6a 00                	push   0x0
c000c57a:	68 ca c1 00 c0       	push   0xc000c1ca
c000c57f:	50                   	push   eax
c000c580:	e8 53 70 00 00       	call   c00135d8 <Process::createThread(void (*)(void*), void*, int)>
c000c585:	83 c4 10             	add    esp,0x10
c000c588:	c6 05 e0 43 02 c0 01 	mov    BYTE PTR ds:0xc00243e0,0x1
c000c58f:	eb 33                	jmp    c000c5c4 <sendKeyboardToken(KeyboardToken)+0x259>
c000c591:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c594:	66 3d 01 02          	cmp    ax,0x201
c000c598:	75 2a                	jne    c000c5c4 <sendKeyboardToken(KeyboardToken)+0x259>
c000c59a:	a0 e0 43 02 c0       	mov    al,ds:0xc00243e0
c000c59f:	83 f0 01             	xor    eax,0x1
c000c5a2:	84 c0                	test   al,al
c000c5a4:	74 1e                	je     c000c5c4 <sendKeyboardToken(KeyboardToken)+0x259>
c000c5a6:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000c5ab:	6a 01                	push   0x1
c000c5ad:	6a 00                	push   0x0
c000c5af:	68 36 c2 00 c0       	push   0xc000c236
c000c5b4:	50                   	push   eax
c000c5b5:	e8 1e 70 00 00       	call   c00135d8 <Process::createThread(void (*)(void*), void*, int)>
c000c5ba:	83 c4 10             	add    esp,0x10
c000c5bd:	c6 05 e0 43 02 c0 01 	mov    BYTE PTR ds:0xc00243e0,0x1
c000c5c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5c7:	66 3d 1d 03          	cmp    ax,0x31d
c000c5cb:	75 06                	jne    c000c5d3 <sendKeyboardToken(KeyboardToken)+0x268>
c000c5cd:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000c5d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5d6:	66 3d 1c 03          	cmp    ax,0x31c
c000c5da:	75 06                	jne    c000c5e2 <sendKeyboardToken(KeyboardToken)+0x277>
c000c5dc:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000c5e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5e5:	66 3d 1b 03          	cmp    ax,0x31b
c000c5e9:	75 06                	jne    c000c5f1 <sendKeyboardToken(KeyboardToken)+0x286>
c000c5eb:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000c5f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5f4:	66 3d 1e 03          	cmp    ax,0x31e
c000c5f8:	75 06                	jne    c000c600 <sendKeyboardToken(KeyboardToken)+0x295>
c000c5fa:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000c600:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c603:	66 3d 1f 03          	cmp    ax,0x31f
c000c607:	75 06                	jne    c000c60f <sendKeyboardToken(KeyboardToken)+0x2a4>
c000c609:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000c60f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c612:	66 3d 1a 03          	cmp    ax,0x31a
c000c616:	75 06                	jne    c000c61e <sendKeyboardToken(KeyboardToken)+0x2b3>
c000c618:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000c61e:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000c622:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c625:	83 f0 01             	xor    eax,0x1
c000c628:	84 c0                	test   al,al
c000c62a:	74 7b                	je     c000c6a7 <sendKeyboardToken(KeyboardToken)+0x33c>
c000c62c:	a0 e1 40 02 c0       	mov    al,ds:0xc00240e1
c000c631:	84 c0                	test   al,al
c000c633:	74 43                	je     c000c678 <sendKeyboardToken(KeyboardToken)+0x30d>
c000c635:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c639:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000c63d:	74 2d                	je     c000c66c <sendKeyboardToken(KeyboardToken)+0x301>
c000c63f:	8b 15 e4 43 02 c0    	mov    edx,DWORD PTR ds:0xc00243e4
c000c645:	89 d0                	mov    eax,edx
c000c647:	c1 e0 02             	shl    eax,0x2
c000c64a:	01 d0                	add    eax,edx
c000c64c:	01 c0                	add    eax,eax
c000c64e:	a3 e4 43 02 c0       	mov    ds:0xc00243e4,eax
c000c653:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c656:	25 ff ff 00 00       	and    eax,0xffff
c000c65b:	8d 50 d0             	lea    edx,[eax-0x30]
c000c65e:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c663:	01 d0                	add    eax,edx
c000c665:	a3 e4 43 02 c0       	mov    ds:0xc00243e4,eax
c000c66a:	eb 71                	jmp    c000c6dd <sendKeyboardToken(KeyboardToken)+0x372>
c000c66c:	c7 05 e4 43 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00243e4,0x0
c000c676:	eb 65                	jmp    c000c6dd <sendKeyboardToken(KeyboardToken)+0x372>
c000c678:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c67d:	85 c0                	test   eax,eax
c000c67f:	74 1a                	je     c000c69b <sendKeyboardToken(KeyboardToken)+0x330>
c000c681:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c686:	25 ff 00 00 00       	and    eax,0xff
c000c68b:	83 ec 0c             	sub    esp,0xc
c000c68e:	50                   	push   eax
c000c68f:	e8 0e fc ff ff       	call   c000c2a2 <sendKeyToTerminal(unsigned char)>
c000c694:	83 c4 10             	add    esp,0x10
c000c697:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c69b:	c7 05 e4 43 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00243e4,0x0
c000c6a5:	eb 36                	jmp    c000c6dd <sendKeyboardToken(KeyboardToken)+0x372>
c000c6a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6aa:	66 3d 01 01          	cmp    ax,0x101
c000c6ae:	75 2d                	jne    c000c6dd <sendKeyboardToken(KeyboardToken)+0x372>
c000c6b0:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c6b5:	85 c0                	test   eax,eax
c000c6b7:	74 1a                	je     c000c6d3 <sendKeyboardToken(KeyboardToken)+0x368>
c000c6b9:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c6be:	25 ff 00 00 00       	and    eax,0xff
c000c6c3:	83 ec 0c             	sub    esp,0xc
c000c6c6:	50                   	push   eax
c000c6c7:	e8 d6 fb ff ff       	call   c000c2a2 <sendKeyToTerminal(unsigned char)>
c000c6cc:	83 c4 10             	add    esp,0x10
c000c6cf:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c6d3:	c7 05 e4 43 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00243e4,0x0
c000c6dd:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c6e0:	83 f0 01             	xor    eax,0x1
c000c6e3:	84 c0                	test   al,al
c000c6e5:	74 4e                	je     c000c735 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c6e7:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c6ea:	83 f0 01             	xor    eax,0x1
c000c6ed:	84 c0                	test   al,al
c000c6ef:	74 44                	je     c000c735 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c6f1:	a0 e0 40 02 c0       	mov    al,ds:0xc00240e0
c000c6f6:	83 f0 01             	xor    eax,0x1
c000c6f9:	84 c0                	test   al,al
c000c6fb:	74 38                	je     c000c735 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c6fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c700:	66 83 f8 1f          	cmp    ax,0x1f
c000c704:	76 09                	jbe    c000c70f <sendKeyboardToken(KeyboardToken)+0x3a4>
c000c706:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c709:	66 83 f8 7e          	cmp    ax,0x7e
c000c70d:	76 12                	jbe    c000c721 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c70f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c712:	66 83 f8 0a          	cmp    ax,0xa
c000c716:	74 09                	je     c000c721 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c718:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c71b:	66 83 f8 08          	cmp    ax,0x8
c000c71f:	75 14                	jne    c000c735 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c721:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c724:	25 ff 00 00 00       	and    eax,0xff
c000c729:	83 ec 0c             	sub    esp,0xc
c000c72c:	50                   	push   eax
c000c72d:	e8 70 fb ff ff       	call   c000c2a2 <sendKeyToTerminal(unsigned char)>
c000c732:	83 c4 10             	add    esp,0x10
c000c735:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c738:	83 f0 01             	xor    eax,0x1
c000c73b:	84 c0                	test   al,al
c000c73d:	74 51                	je     c000c790 <sendKeyboardToken(KeyboardToken)+0x425>
c000c73f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c742:	83 f0 01             	xor    eax,0x1
c000c745:	84 c0                	test   al,al
c000c747:	74 47                	je     c000c790 <sendKeyboardToken(KeyboardToken)+0x425>
c000c749:	a0 e0 40 02 c0       	mov    al,ds:0xc00240e0
c000c74e:	84 c0                	test   al,al
c000c750:	74 3e                	je     c000c790 <sendKeyboardToken(KeyboardToken)+0x425>
c000c752:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c755:	66 83 f8 3f          	cmp    ax,0x3f
c000c759:	76 35                	jbe    c000c790 <sendKeyboardToken(KeyboardToken)+0x425>
c000c75b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c75e:	66 83 f8 7f          	cmp    ax,0x7f
c000c762:	77 2c                	ja     c000c790 <sendKeyboardToken(KeyboardToken)+0x425>
c000c764:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c767:	88 c2                	mov    dl,al
c000c769:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c76c:	66 83 f8 5f          	cmp    ax,0x5f
c000c770:	76 04                	jbe    c000c776 <sendKeyboardToken(KeyboardToken)+0x40b>
c000c772:	b0 20                	mov    al,0x20
c000c774:	eb 02                	jmp    c000c778 <sendKeyboardToken(KeyboardToken)+0x40d>
c000c776:	b0 00                	mov    al,0x0
c000c778:	29 c2                	sub    edx,eax
c000c77a:	88 d0                	mov    al,dl
c000c77c:	83 e8 40             	sub    eax,0x40
c000c77f:	25 ff 00 00 00       	and    eax,0xff
c000c784:	83 ec 0c             	sub    esp,0xc
c000c787:	50                   	push   eax
c000c788:	e8 15 fb ff ff       	call   c000c2a2 <sendKeyToTerminal(unsigned char)>
c000c78d:	83 c4 10             	add    esp,0x10
c000c790:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c793:	66 3d 00 03          	cmp    ax,0x300
c000c797:	75 0f                	jne    c000c7a8 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c799:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c79c:	83 f0 01             	xor    eax,0x1
c000c79f:	84 c0                	test   al,al
c000c7a1:	74 05                	je     c000c7a8 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c7a3:	e8 f1 b9 ff ff       	call   c0008199 <doTerminalCycle()>
c000c7a8:	90                   	nop
c000c7a9:	c9                   	leave  
c000c7aa:	c3                   	ret    

c000c7ab <clearInternalKeybuffer(VgaText*)>:
c000c7ab:	55                   	push   ebp
c000c7ac:	89 e5                	mov    ebp,esp
c000c7ae:	83 ec 08             	sub    esp,0x8
c000c7b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7b4:	05 b2 00 00 00       	add    eax,0xb2
c000c7b9:	83 ec 0c             	sub    esp,0xc
c000c7bc:	50                   	push   eax
c000c7bd:	e8 7e 3d ff ff       	call   c0000540 <strlen>
c000c7c2:	83 c4 10             	add    esp,0x10
c000c7c5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c7c8:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c7ce:	83 ec 04             	sub    esp,0x4
c000c7d1:	50                   	push   eax
c000c7d2:	6a 00                	push   0x0
c000c7d4:	52                   	push   edx
c000c7d5:	e8 f6 3c ff ff       	call   c00004d0 <memset>
c000c7da:	83 c4 10             	add    esp,0x10
c000c7dd:	90                   	nop
c000c7de:	c9                   	leave  
c000c7df:	c3                   	ret    

c000c7e0 <readKeyboard(VgaText*, char*, unsigned long)>:
c000c7e0:	55                   	push   ebp
c000c7e1:	89 e5                	mov    ebp,esp
c000c7e3:	83 ec 18             	sub    esp,0x18
c000c7e6:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c000c7eb:	85 c0                	test   eax,eax
c000c7ed:	74 2a                	je     c000c819 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000c7ef:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000c7f5:	8b 0d c8 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023fc8
c000c7fb:	83 ec 04             	sub    esp,0x4
c000c7fe:	68 e0 3f 02 c0       	push   0xc0023fe0
c000c803:	83 ec 08             	sub    esp,0x8
c000c806:	89 e2                	mov    edx,esp
c000c808:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000c80b:	89 02                	mov    DWORD PTR [edx],eax
c000c80d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c810:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c814:	ff d1                	call   ecx
c000c816:	83 c4 10             	add    esp,0x10
c000c819:	fb                   	sti    
c000c81a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000c821:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000c825:	0f 84 db 00 00 00    	je     c000c906 <readKeyboard(VgaText*, char*, unsigned long)+0x126>
c000c82b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c82e:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c834:	84 c0                	test   al,al
c000c836:	75 28                	jne    c000c860 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000c838:	fa                   	cli    
c000c839:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c83e:	40                   	inc    eax
c000c83f:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c844:	e8 af 6f 00 00       	call   c00137f8 <schedule()>
c000c849:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c84e:	48                   	dec    eax
c000c84f:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c854:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c859:	85 c0                	test   eax,eax
c000c85b:	75 ce                	jne    c000c82b <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c85d:	fb                   	sti    
c000c85e:	eb cb                	jmp    c000c82b <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c860:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c863:	8d 50 01             	lea    edx,[eax+0x1]
c000c866:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c869:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c86c:	8a 92 b2 00 00 00    	mov    dl,BYTE PTR [edx+0xb2]
c000c872:	88 10                	mov    BYTE PTR [eax],dl
c000c874:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c877:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c87d:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000c880:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c884:	75 2e                	jne    c000c8b4 <readKeyboard(VgaText*, char*, unsigned long)+0xd4>
c000c886:	83 ec 0c             	sub    esp,0xc
c000c889:	68 14 e1 01 c0       	push   0xc001e114
c000c88e:	e8 ee dc ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c000c893:	83 c4 10             	add    esp,0x10
c000c896:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c89b:	8b 00                	mov    eax,DWORD PTR [eax]
c000c89d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c8a0:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000c8a6:	83 ec 08             	sub    esp,0x8
c000c8a9:	6a 02                	push   0x2
c000c8ab:	50                   	push   eax
c000c8ac:	e8 3e 3d 00 00       	call   c00105ef <KeRaiseSignal(SigHandlerBlock*, int)>
c000c8b1:	83 c4 10             	add    esp,0x10
c000c8b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8b7:	05 b2 00 00 00       	add    eax,0xb2
c000c8bc:	83 ec 0c             	sub    esp,0xc
c000c8bf:	50                   	push   eax
c000c8c0:	e8 7b 3c ff ff       	call   c0000540 <strlen>
c000c8c5:	83 c4 10             	add    esp,0x10
c000c8c8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c8cb:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c8d1:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c8d4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c8d7:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c8dd:	83 ec 04             	sub    esp,0x4
c000c8e0:	50                   	push   eax
c000c8e1:	51                   	push   ecx
c000c8e2:	52                   	push   edx
c000c8e3:	e8 f8 3a ff ff       	call   c00003e0 <memmove>
c000c8e8:	83 c4 10             	add    esp,0x10
c000c8eb:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000c8ee:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000c8f1:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000c8f5:	74 0a                	je     c000c901 <readKeyboard(VgaText*, char*, unsigned long)+0x121>
c000c8f7:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c8fb:	0f 85 20 ff ff ff    	jne    c000c821 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000c901:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c904:	eb 03                	jmp    c000c909 <readKeyboard(VgaText*, char*, unsigned long)+0x129>
c000c906:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c909:	c9                   	leave  
c000c90a:	c3                   	ret    
c000c90b:	90                   	nop

c000c90c <Keyboard::Keyboard(char const*)>:
c000c90c:	83 ec 0c             	sub    esp,0xc
c000c90f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c913:	83 ec 08             	sub    esp,0x8
c000c916:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c91a:	50                   	push   eax
c000c91b:	e8 38 f2 ff ff       	call   c000bb58 <Device::Device(char const*)>
c000c920:	83 c4 10             	add    esp,0x10
c000c923:	ba 2c e1 01 c0       	mov    edx,0xc001e12c
c000c928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c92c:	89 10                	mov    DWORD PTR [eax],edx
c000c92e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c932:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000c93c:	c6 05 c4 3f 02 c0 01 	mov    BYTE PTR ds:0xc0023fc4,0x1
c000c943:	90                   	nop
c000c944:	83 c4 0c             	add    esp,0xc
c000c947:	c3                   	ret    

c000c948 <Keyboard::~Keyboard()>:
c000c948:	83 ec 0c             	sub    esp,0xc
c000c94b:	ba 2c e1 01 c0       	mov    edx,0xc001e12c
c000c950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c954:	89 10                	mov    DWORD PTR [eax],edx
c000c956:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c95a:	83 ec 0c             	sub    esp,0xc
c000c95d:	50                   	push   eax
c000c95e:	e8 5f ef ff ff       	call   c000b8c2 <Device::~Device()>
c000c963:	83 c4 10             	add    esp,0x10
c000c966:	90                   	nop
c000c967:	83 c4 0c             	add    esp,0xc
c000c96a:	c3                   	ret    
c000c96b:	90                   	nop

c000c96c <Keyboard::~Keyboard()>:
c000c96c:	83 ec 0c             	sub    esp,0xc
c000c96f:	83 ec 0c             	sub    esp,0xc
c000c972:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c976:	e8 cd ff ff ff       	call   c000c948 <Keyboard::~Keyboard()>
c000c97b:	83 c4 10             	add    esp,0x10
c000c97e:	83 ec 08             	sub    esp,0x8
c000c981:	68 5c 01 00 00       	push   0x15c
c000c986:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c98a:	e8 fc da ff ff       	call   c000a48b <operator delete(void*, unsigned long)>
c000c98f:	83 c4 10             	add    esp,0x10
c000c992:	83 c4 0c             	add    esp,0xc
c000c995:	c3                   	ret    

c000c996 <LogicalDisk::close(int, int, void*)>:
c000c996:	83 c8 ff             	or     eax,0xffffffff
c000c999:	c3                   	ret    

c000c99a <LogicalDisk::~LogicalDisk()>:
c000c99a:	83 ec 0c             	sub    esp,0xc
c000c99d:	ba a4 e1 01 c0       	mov    edx,0xc001e1a4
c000c9a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9a6:	89 10                	mov    DWORD PTR [eax],edx
c000c9a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9ac:	83 ec 0c             	sub    esp,0xc
c000c9af:	50                   	push   eax
c000c9b0:	e8 0d ef ff ff       	call   c000b8c2 <Device::~Device()>
c000c9b5:	83 c4 10             	add    esp,0x10
c000c9b8:	90                   	nop
c000c9b9:	83 c4 0c             	add    esp,0xc
c000c9bc:	c3                   	ret    
c000c9bd:	90                   	nop

c000c9be <LogicalDisk::~LogicalDisk()>:
c000c9be:	83 ec 0c             	sub    esp,0xc
c000c9c1:	83 ec 0c             	sub    esp,0xc
c000c9c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9c8:	e8 cd ff ff ff       	call   c000c99a <LogicalDisk::~LogicalDisk()>
c000c9cd:	83 c4 10             	add    esp,0x10
c000c9d0:	83 ec 08             	sub    esp,0x8
c000c9d3:	68 74 01 00 00       	push   0x174
c000c9d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9dc:	e8 aa da ff ff       	call   c000a48b <operator delete(void*, unsigned long)>
c000c9e1:	83 c4 10             	add    esp,0x10
c000c9e4:	83 c4 0c             	add    esp,0xc
c000c9e7:	c3                   	ret    

c000c9e8 <LogicalDisk::open(int, int, void*)>:
c000c9e8:	83 ec 18             	sub    esp,0x18
c000c9eb:	68 58 e1 01 c0       	push   0xc001e158
c000c9f0:	e8 0e 38 00 00       	call   c0010203 <KePanic(char const*)>
c000c9f5:	83 c8 ff             	or     eax,0xffffffff
c000c9f8:	83 c4 1c             	add    esp,0x1c
c000c9fb:	c3                   	ret    

c000c9fc <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000c9fc:	53                   	push   ebx
c000c9fd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ca01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ca05:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ca09:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000ca0f:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000ca15:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000ca1b:	77 10                	ja     c000ca2d <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000ca1d:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000ca23:	89 d3                	mov    ebx,edx
c000ca25:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000ca2b:	72 05                	jb     c000ca32 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000ca2d:	83 c8 ff             	or     eax,0xffffffff
c000ca30:	89 c2                	mov    edx,eax
c000ca32:	5b                   	pop    ebx
c000ca33:	c3                   	ret    

c000ca34 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000ca34:	56                   	push   esi
c000ca35:	83 c8 ff             	or     eax,0xffffffff
c000ca38:	53                   	push   ebx
c000ca39:	89 c2                	mov    edx,eax
c000ca3b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ca3f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000ca43:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ca47:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ca4d:	77 27                	ja     c000ca76 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000ca4f:	89 d8                	mov    eax,ebx
c000ca51:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000ca57:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000ca5d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ca62:	89 c2                	mov    edx,eax
c000ca64:	73 10                	jae    c000ca76 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000ca66:	89 c8                	mov    eax,ecx
c000ca68:	89 da                	mov    edx,ebx
c000ca6a:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000ca70:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000ca76:	5b                   	pop    ebx
c000ca77:	5e                   	pop    esi
c000ca78:	c3                   	ret    
c000ca79:	90                   	nop

c000ca7a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ca7a:	83 ec 1c             	sub    esp,0x1c
c000ca7d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca81:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca85:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca89:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ca8d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ca91:	89 04 24             	mov    DWORD PTR [esp],eax
c000ca94:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ca98:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ca9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000caa0:	83 ec 08             	sub    esp,0x8
c000caa3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000caa7:	50                   	push   eax
c000caa8:	e8 ab f0 ff ff       	call   c000bb58 <Device::Device(char const*)>
c000caad:	83 c4 10             	add    esp,0x10
c000cab0:	ba a4 e1 01 c0       	mov    edx,0xc001e1a4
c000cab5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cab9:	89 10                	mov    DWORD PTR [eax],edx
c000cabb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cabf:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cac6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000caca:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cad1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cad5:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000cadf:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cae3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cae7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000caeb:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000caf1:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000caf7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cafb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000cafe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cb02:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000cb08:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000cb0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb12:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cb16:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000cb1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb20:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000cb2a:	90                   	nop
c000cb2b:	83 c4 1c             	add    esp,0x1c
c000cb2e:	c3                   	ret    
c000cb2f:	90                   	nop

c000cb30 <LogicalDisk::assignDriveLetter()>:
c000cb30:	55                   	push   ebp
c000cb31:	57                   	push   edi
c000cb32:	56                   	push   esi
c000cb33:	53                   	push   ebx
c000cb34:	83 ec 14             	sub    esp,0x14
c000cb37:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cb3b:	8b 3d 00 44 02 c0    	mov    edi,DWORD PTR ds:0xc0024400
c000cb41:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000cb47:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000cb4b:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000cb51:	8b 3d 04 44 02 c0    	mov    edi,DWORD PTR ds:0xc0024404
c000cb57:	3c 01                	cmp    al,0x1
c000cb59:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000cb5d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000cb61:	19 c0                	sbb    eax,eax
c000cb63:	83 e0 02             	and    eax,0x2
c000cb66:	83 c0 41             	add    eax,0x41
c000cb69:	0f be e8             	movsx  ebp,al
c000cb6c:	3c 43                	cmp    al,0x43
c000cb6e:	75 10                	jne    c000cb80 <LogicalDisk::assignDriveLetter()+0x50>
c000cb70:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000cb77:	75 5d                	jne    c000cbd6 <LogicalDisk::assignDriveLetter()+0xa6>
c000cb79:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000cb7e:	75 56                	jne    c000cbd6 <LogicalDisk::assignDriveLetter()+0xa6>
c000cb80:	8d 75 bf             	lea    esi,[ebp-0x41]
c000cb83:	ba 01 00 00 00       	mov    edx,0x1
c000cb88:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000cb8c:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000cb90:	d3 e2                	shl    edx,cl
c000cb92:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cb96:	89 d7                	mov    edi,edx
c000cb98:	89 d6                	mov    esi,edx
c000cb9a:	c1 ff 1f             	sar    edi,0x1f
c000cb9d:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000cba1:	21 f9                	and    ecx,edi
c000cba3:	09 d1                	or     ecx,edx
c000cba5:	75 2f                	jne    c000cbd6 <LogicalDisk::assignDriveLetter()+0xa6>
c000cba7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000cbab:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cbaf:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000cbb5:	09 f2                	or     edx,esi
c000cbb7:	89 15 00 44 02 c0    	mov    DWORD PTR ds:0xc0024400,edx
c000cbbd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cbc1:	09 fa                	or     edx,edi
c000cbc3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000cbc7:	89 15 04 44 02 c0    	mov    DWORD PTR ds:0xc0024404,edx
c000cbcd:	89 1c bd 20 44 02 c0 	mov    DWORD PTR [edi*4-0x3ffdbbe0],ebx
c000cbd4:	eb 08                	jmp    c000cbde <LogicalDisk::assignDriveLetter()+0xae>
c000cbd6:	45                   	inc    ebp
c000cbd7:	40                   	inc    eax
c000cbd8:	3c 5b                	cmp    al,0x5b
c000cbda:	75 90                	jne    c000cb6c <LogicalDisk::assignDriveLetter()+0x3c>
c000cbdc:	31 c0                	xor    eax,eax
c000cbde:	83 c4 14             	add    esp,0x14
c000cbe1:	5b                   	pop    ebx
c000cbe2:	5e                   	pop    esi
c000cbe3:	5f                   	pop    edi
c000cbe4:	5d                   	pop    ebp
c000cbe5:	c3                   	ret    

c000cbe6 <LogicalDisk::mount()>:
c000cbe6:	56                   	push   esi
c000cbe7:	53                   	push   ebx
c000cbe8:	53                   	push   ebx
c000cbe9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cbed:	8b 1d b4 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb4
c000cbf3:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000cbfd:	85 db                	test   ebx,ebx
c000cbff:	74 27                	je     c000cc28 <LogicalDisk::mount()+0x42>
c000cc01:	51                   	push   ecx
c000cc02:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000cc09:	8b 13                	mov    edx,DWORD PTR [ebx]
c000cc0b:	83 e8 41             	sub    eax,0x41
c000cc0e:	50                   	push   eax
c000cc0f:	56                   	push   esi
c000cc10:	53                   	push   ebx
c000cc11:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000cc14:	83 c4 10             	add    esp,0x10
c000cc17:	84 c0                	test   al,al
c000cc19:	74 08                	je     c000cc23 <LogicalDisk::mount()+0x3d>
c000cc1b:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000cc21:	eb 07                	jmp    c000cc2a <LogicalDisk::mount()+0x44>
c000cc23:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000cc26:	eb d5                	jmp    c000cbfd <LogicalDisk::mount()+0x17>
c000cc28:	31 c0                	xor    eax,eax
c000cc2a:	5a                   	pop    edx
c000cc2b:	5b                   	pop    ebx
c000cc2c:	5e                   	pop    esi
c000cc2d:	c3                   	ret    

c000cc2e <LogicalDisk::unmount()>:
c000cc2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc32:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000cc3c:	c3                   	ret    
c000cc3d:	90                   	nop

c000cc3e <LogicalDisk::eject()>:
c000cc3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc42:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000cc48:	8b 10                	mov    edx,DWORD PTR [eax]
c000cc4a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cc4e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000cc51:	90                   	nop

c000cc52 <LogicalDisk::unassignDriveLetter()>:
c000cc52:	57                   	push   edi
c000cc53:	56                   	push   esi
c000cc54:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cc58:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000cc5f:	84 c9                	test   cl,cl
c000cc61:	75 0f                	jne    c000cc72 <LogicalDisk::unassignDriveLetter()+0x20>
c000cc63:	c7 44 24 0c 7c e1 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e17c
c000cc6b:	5e                   	pop    esi
c000cc6c:	5f                   	pop    edi
c000cc6d:	e9 91 35 00 00       	jmp    c0010203 <KePanic(char const*)>
c000cc72:	83 e9 41             	sub    ecx,0x41
c000cc75:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000cc7c:	b8 01 00 00 00       	mov    eax,0x1
c000cc81:	c7 04 8d 20 44 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdbbe0],0x0
c000cc8c:	d3 e0                	shl    eax,cl
c000cc8e:	89 c7                	mov    edi,eax
c000cc90:	f7 d0                	not    eax
c000cc92:	c1 ff 1f             	sar    edi,0x1f
c000cc95:	21 05 00 44 02 c0    	and    DWORD PTR ds:0xc0024400,eax
c000cc9b:	89 fe                	mov    esi,edi
c000cc9d:	f7 d6                	not    esi
c000cc9f:	21 35 04 44 02 c0    	and    DWORD PTR ds:0xc0024404,esi
c000cca5:	5e                   	pop    esi
c000cca6:	5f                   	pop    edi
c000cca7:	c3                   	ret    

c000cca8 <LogicalDisk::read(unsigned long long, int, void*)>:
c000cca8:	57                   	push   edi
c000cca9:	56                   	push   esi
c000ccaa:	53                   	push   ebx
c000ccab:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ccaf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ccb3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ccbb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ccc1:	77 41                	ja     c000cd04 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000ccc3:	99                   	cdq    
c000ccc4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000ccca:	01 c8                	add    eax,ecx
c000cccc:	11 da                	adc    edx,ebx
c000ccce:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000ccd4:	19 d7                	sbb    edi,edx
c000ccd6:	72 33                	jb     c000cd0b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000ccd8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000ccde:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cce4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cce8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000ccec:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ccf2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ccf8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccfc:	5b                   	pop    ebx
c000ccfd:	5e                   	pop    esi
c000ccfe:	5f                   	pop    edi
c000ccff:	e9 4e 0a 00 00       	jmp    c000d752 <VCache::read(unsigned long long, int, void*)>
c000cd04:	b8 05 00 00 00       	mov    eax,0x5
c000cd09:	eb 05                	jmp    c000cd10 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000cd0b:	b8 07 00 00 00       	mov    eax,0x7
c000cd10:	5b                   	pop    ebx
c000cd11:	5e                   	pop    esi
c000cd12:	5f                   	pop    edi
c000cd13:	c3                   	ret    

c000cd14 <LogicalDisk::write(unsigned long long, int, void*)>:
c000cd14:	57                   	push   edi
c000cd15:	56                   	push   esi
c000cd16:	53                   	push   ebx
c000cd17:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cd1b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cd1f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cd23:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cd27:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cd2d:	77 41                	ja     c000cd70 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000cd2f:	99                   	cdq    
c000cd30:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cd36:	01 c8                	add    eax,ecx
c000cd38:	11 da                	adc    edx,ebx
c000cd3a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cd40:	19 d7                	sbb    edi,edx
c000cd42:	72 33                	jb     c000cd77 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000cd44:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cd4a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cd50:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cd54:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cd58:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cd5e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cd64:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cd68:	5b                   	pop    ebx
c000cd69:	5e                   	pop    esi
c000cd6a:	5f                   	pop    edi
c000cd6b:	e9 cc 08 00 00       	jmp    c000d63c <VCache::write(unsigned long long, int, void*)>
c000cd70:	b8 05 00 00 00       	mov    eax,0x5
c000cd75:	eb 05                	jmp    c000cd7c <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000cd77:	b8 07 00 00 00       	mov    eax,0x7
c000cd7c:	5b                   	pop    ebx
c000cd7d:	5e                   	pop    esi
c000cd7e:	5f                   	pop    edi
c000cd7f:	c3                   	ret    

c000cd80 <Mouse::Mouse(char const*)>:
c000cd80:	83 ec 0c             	sub    esp,0xc
c000cd83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd87:	83 ec 08             	sub    esp,0x8
c000cd8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd8e:	50                   	push   eax
c000cd8f:	e8 c4 ed ff ff       	call   c000bb58 <Device::Device(char const*)>
c000cd94:	83 c4 10             	add    esp,0x10
c000cd97:	ba d0 e1 01 c0       	mov    edx,0xc001e1d0
c000cd9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cda0:	89 10                	mov    DWORD PTR [eax],edx
c000cda2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cda6:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000cdb0:	90                   	nop
c000cdb1:	83 c4 0c             	add    esp,0xc
c000cdb4:	c3                   	ret    
c000cdb5:	90                   	nop
c000cdb6:	66 90                	xchg   ax,ax

c000cdb8 <Mouse::~Mouse()>:
c000cdb8:	83 ec 0c             	sub    esp,0xc
c000cdbb:	ba d0 e1 01 c0       	mov    edx,0xc001e1d0
c000cdc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdc4:	89 10                	mov    DWORD PTR [eax],edx
c000cdc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdca:	83 ec 0c             	sub    esp,0xc
c000cdcd:	50                   	push   eax
c000cdce:	e8 ef ea ff ff       	call   c000b8c2 <Device::~Device()>
c000cdd3:	83 c4 10             	add    esp,0x10
c000cdd6:	90                   	nop
c000cdd7:	83 c4 0c             	add    esp,0xc
c000cdda:	c3                   	ret    
c000cddb:	90                   	nop

c000cddc <Mouse::~Mouse()>:
c000cddc:	83 ec 0c             	sub    esp,0xc
c000cddf:	83 ec 0c             	sub    esp,0xc
c000cde2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cde6:	e8 cd ff ff ff       	call   c000cdb8 <Mouse::~Mouse()>
c000cdeb:	83 c4 10             	add    esp,0x10
c000cdee:	83 ec 08             	sub    esp,0x8
c000cdf1:	68 58 01 00 00       	push   0x158
c000cdf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdfa:	e8 8c d6 ff ff       	call   c000a48b <operator delete(void*, unsigned long)>
c000cdff:	83 c4 10             	add    esp,0x10
c000ce02:	83 c4 0c             	add    esp,0xc
c000ce05:	c3                   	ret    

c000ce06 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ce06:	55                   	push   ebp
c000ce07:	57                   	push   edi
c000ce08:	56                   	push   esi
c000ce09:	53                   	push   ebx
c000ce0a:	81 ec 28 01 00 00    	sub    esp,0x128
c000ce10:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000ce17:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000ce1e:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000ce25:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000ce2c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ce30:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ce34:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ce3b:	e8 14 ee ff ff       	call   c000bc54 <Device::getName()>
c000ce40:	5a                   	pop    edx
c000ce41:	59                   	pop    ecx
c000ce42:	50                   	push   eax
c000ce43:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000ce47:	55                   	push   ebp
c000ce48:	e8 b3 37 ff ff       	call   c0000600 <strcpy>
c000ce4d:	5b                   	pop    ebx
c000ce4e:	58                   	pop    eax
c000ce4f:	68 f4 e1 01 c0       	push   0xc001e1f4
c000ce54:	55                   	push   ebp
c000ce55:	e8 66 39 ff ff       	call   c00007c0 <strcat>
c000ce5a:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000ce61:	e8 53 a9 ff ff       	call   c00077b9 <malloc>
c000ce66:	83 c4 0c             	add    esp,0xc
c000ce69:	89 c3                	mov    ebx,eax
c000ce6b:	57                   	push   edi
c000ce6c:	56                   	push   esi
c000ce6d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ce71:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ce75:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000ce7c:	55                   	push   ebp
c000ce7d:	50                   	push   eax
c000ce7e:	e8 f7 fb ff ff       	call   c000ca7a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000ce83:	83 c4 14             	add    esp,0x14
c000ce86:	53                   	push   ebx
c000ce87:	e8 a4 fc ff ff       	call   c000cb30 <LogicalDisk::assignDriveLetter()>
c000ce8c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ce8f:	e8 52 fd ff ff       	call   c000cbe6 <LogicalDisk::mount()>
c000ce94:	58                   	pop    eax
c000ce95:	5a                   	pop    edx
c000ce96:	53                   	push   ebx
c000ce97:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ce9e:	e8 1d eb ff ff       	call   c000b9c0 <Device::addChild(Device*)>
c000cea3:	81 c4 2c 01 00 00    	add    esp,0x12c
c000cea9:	5b                   	pop    ebx
c000ceaa:	5e                   	pop    esi
c000ceab:	5f                   	pop    edi
c000ceac:	5d                   	pop    ebp
c000cead:	c3                   	ret    

c000ceae <createPartitionsForDisk(PhysicalDisk*)>:
c000ceae:	55                   	push   ebp
c000ceaf:	57                   	push   edi
c000ceb0:	56                   	push   esi
c000ceb1:	53                   	push   ebx
c000ceb2:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000ceb8:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000cebf:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000cec5:	3d 00 02 00 00       	cmp    eax,0x200
c000ceca:	74 27                	je     c000cef3 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000cecc:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000ced2:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000ced8:	83 ec 10             	sub    esp,0x10
c000cedb:	0f a4 f7 0a          	shld   edi,esi,0xa
c000cedf:	99                   	cdq    
c000cee0:	c1 e6 0a             	shl    esi,0xa
c000cee3:	52                   	push   edx
c000cee4:	89 fd                	mov    ebp,edi
c000cee6:	50                   	push   eax
c000cee7:	55                   	push   ebp
c000cee8:	56                   	push   esi
c000cee9:	e8 62 f2 00 00       	call   c001c150 <__udivdi3>
c000ceee:	e9 b1 00 00 00       	jmp    c000cfa4 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000cef3:	83 ec 0c             	sub    esp,0xc
c000cef6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cef8:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000cefc:	56                   	push   esi
c000cefd:	6a 01                	push   0x1
c000ceff:	6a 00                	push   0x0
c000cf01:	6a 00                	push   0x0
c000cf03:	53                   	push   ebx
c000cf04:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000cf07:	83 c4 20             	add    esp,0x20
c000cf0a:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000cf12:	75 0a                	jne    c000cf1e <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000cf14:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000cf1c:	74 2c                	je     c000cf4a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000cf1e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000cf24:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000cf2a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000cf30:	83 ec 10             	sub    esp,0x10
c000cf33:	0f a4 c2 0a          	shld   edx,eax,0xa
c000cf37:	89 f7                	mov    edi,esi
c000cf39:	c1 e0 0a             	shl    eax,0xa
c000cf3c:	c1 ff 1f             	sar    edi,0x1f
c000cf3f:	57                   	push   edi
c000cf40:	56                   	push   esi
c000cf41:	52                   	push   edx
c000cf42:	50                   	push   eax
c000cf43:	e8 08 f2 00 00       	call   c001c150 <__udivdi3>
c000cf48:	eb 5a                	jmp    c000cfa4 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000cf4a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000cf51:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000cf58:	83 e1 7f             	and    ecx,0x7f
c000cf5b:	83 e0 7f             	and    eax,0x7f
c000cf5e:	01 c1                	add    ecx,eax
c000cf60:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000cf67:	83 e0 7f             	and    eax,0x7f
c000cf6a:	01 c1                	add    ecx,eax
c000cf6c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000cf73:	83 e0 7f             	and    eax,0x7f
c000cf76:	00 c1                	add    cl,al
c000cf78:	74 41                	je     c000cfbb <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000cf7a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000cf80:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000cf86:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000cf8c:	83 ec 10             	sub    esp,0x10
c000cf8f:	0f a4 c2 0a          	shld   edx,eax,0xa
c000cf93:	89 f7                	mov    edi,esi
c000cf95:	c1 e0 0a             	shl    eax,0xa
c000cf98:	c1 ff 1f             	sar    edi,0x1f
c000cf9b:	57                   	push   edi
c000cf9c:	56                   	push   esi
c000cf9d:	52                   	push   edx
c000cf9e:	50                   	push   eax
c000cf9f:	e8 ac f1 00 00       	call   c001c150 <__udivdi3>
c000cfa4:	83 c4 14             	add    esp,0x14
c000cfa7:	52                   	push   edx
c000cfa8:	50                   	push   eax
c000cfa9:	6a 00                	push   0x0
c000cfab:	6a 00                	push   0x0
c000cfad:	53                   	push   ebx
c000cfae:	e8 53 fe ff ff       	call   c000ce06 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000cfb3:	83 c4 20             	add    esp,0x20
c000cfb6:	e9 79 01 00 00       	jmp    c000d134 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000cfbb:	89 f0                	mov    eax,esi
c000cfbd:	31 f6                	xor    esi,esi
c000cfbf:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000cfc6:	75 02                	jne    c000cfca <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000cfc8:	89 f1                	mov    ecx,esi
c000cfca:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000cfd1:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000cfd8:	c1 e2 08             	shl    edx,0x8
c000cfdb:	c1 e7 10             	shl    edi,0x10
c000cfde:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000cfe6:	09 fa                	or     edx,edi
c000cfe8:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000cff0:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000cff7:	83 c0 10             	add    eax,0x10
c000cffa:	09 fa                	or     edx,edi
c000cffc:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000d003:	c1 e7 18             	shl    edi,0x18
c000d006:	09 fa                	or     edx,edi
c000d008:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000d00f:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000d013:	c1 e7 10             	shl    edi,0x10
c000d016:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d01d:	c1 e2 08             	shl    edx,0x8
c000d020:	09 fa                	or     edx,edi
c000d022:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000d029:	09 fa                	or     edx,edi
c000d02b:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000d032:	c1 e7 18             	shl    edi,0x18
c000d035:	09 fa                	or     edx,edi
c000d037:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000d03b:	46                   	inc    esi
c000d03c:	83 fe 04             	cmp    esi,0x4
c000d03f:	0f 85 7a ff ff ff    	jne    c000cfbf <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000d045:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d049:	83 f0 01             	xor    eax,0x1
c000d04c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d050:	75 57                	jne    c000d0a9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d052:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d056:	83 f0 01             	xor    eax,0x1
c000d059:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d05d:	75 4a                	jne    c000d0a9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d05f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d063:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d06b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d073:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d079:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d07f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d085:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d089:	89 f7                	mov    edi,esi
c000d08b:	c1 e0 0a             	shl    eax,0xa
c000d08e:	c1 ff 1f             	sar    edi,0x1f
c000d091:	57                   	push   edi
c000d092:	56                   	push   esi
c000d093:	52                   	push   edx
c000d094:	50                   	push   eax
c000d095:	e8 b6 f0 00 00       	call   c001c150 <__udivdi3>
c000d09a:	83 c4 10             	add    esp,0x10
c000d09d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0a1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d0a5:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d0a9:	84 c9                	test   cl,cl
c000d0ab:	74 53                	je     c000d100 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000d0ad:	0f b6 c9             	movzx  ecx,cl
c000d0b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0b4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d0b8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d0bc:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d0c0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0c4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0c8:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000d0cc:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000d0d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d0d4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d0d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d0dc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d0e0:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000d0e4:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000d0e8:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000d0ec:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000d0f0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0f4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d0f8:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000d0fc:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000d100:	31 ed                	xor    ebp,ebp
c000d102:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d106:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d10a:	89 f8                	mov    eax,edi
c000d10c:	09 f0                	or     eax,esi
c000d10e:	74 1e                	je     c000d12e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d110:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d114:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d118:	89 d1                	mov    ecx,edx
c000d11a:	09 c1                	or     ecx,eax
c000d11c:	74 10                	je     c000d12e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d11e:	83 ec 0c             	sub    esp,0xc
c000d121:	57                   	push   edi
c000d122:	56                   	push   esi
c000d123:	52                   	push   edx
c000d124:	50                   	push   eax
c000d125:	53                   	push   ebx
c000d126:	e8 db fc ff ff       	call   c000ce06 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d12b:	83 c4 20             	add    esp,0x20
c000d12e:	45                   	inc    ebp
c000d12f:	83 fd 04             	cmp    ebp,0x4
c000d132:	75 ce                	jne    c000d102 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d134:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d13a:	5b                   	pop    ebx
c000d13b:	5e                   	pop    esi
c000d13c:	5f                   	pop    edi
c000d13d:	5d                   	pop    ebp
c000d13e:	c3                   	ret    
c000d13f:	90                   	nop

c000d140 <Serial::Serial(char const*)>:
c000d140:	83 ec 0c             	sub    esp,0xc
c000d143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d147:	83 ec 08             	sub    esp,0x8
c000d14a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d14e:	50                   	push   eax
c000d14f:	e8 04 ea ff ff       	call   c000bb58 <Device::Device(char const*)>
c000d154:	83 c4 10             	add    esp,0x10
c000d157:	ba 08 e2 01 c0       	mov    edx,0xc001e208
c000d15c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d160:	89 10                	mov    DWORD PTR [eax],edx
c000d162:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d166:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d170:	90                   	nop
c000d171:	83 c4 0c             	add    esp,0xc
c000d174:	c3                   	ret    
c000d175:	90                   	nop
c000d176:	66 90                	xchg   ax,ax

c000d178 <Serial::~Serial()>:
c000d178:	83 ec 0c             	sub    esp,0xc
c000d17b:	ba 08 e2 01 c0       	mov    edx,0xc001e208
c000d180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d184:	89 10                	mov    DWORD PTR [eax],edx
c000d186:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d18a:	83 ec 0c             	sub    esp,0xc
c000d18d:	50                   	push   eax
c000d18e:	e8 2f e7 ff ff       	call   c000b8c2 <Device::~Device()>
c000d193:	83 c4 10             	add    esp,0x10
c000d196:	90                   	nop
c000d197:	83 c4 0c             	add    esp,0xc
c000d19a:	c3                   	ret    
c000d19b:	90                   	nop

c000d19c <Serial::~Serial()>:
c000d19c:	83 ec 0c             	sub    esp,0xc
c000d19f:	83 ec 0c             	sub    esp,0xc
c000d1a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1a6:	e8 cd ff ff ff       	call   c000d178 <Serial::~Serial()>
c000d1ab:	83 c4 10             	add    esp,0x10
c000d1ae:	83 ec 08             	sub    esp,0x8
c000d1b1:	68 58 01 00 00       	push   0x158
c000d1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1ba:	e8 cc d2 ff ff       	call   c000a48b <operator delete(void*, unsigned long)>
c000d1bf:	83 c4 10             	add    esp,0x10
c000d1c2:	83 c4 0c             	add    esp,0xc
c000d1c5:	c3                   	ret    
c000d1c6:	66 90                	xchg   ax,ax

c000d1c8 <Timer::Timer(char const*)>:
c000d1c8:	83 ec 0c             	sub    esp,0xc
c000d1cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1cf:	83 ec 08             	sub    esp,0x8
c000d1d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1d6:	50                   	push   eax
c000d1d7:	e8 7c e9 ff ff       	call   c000bb58 <Device::Device(char const*)>
c000d1dc:	83 c4 10             	add    esp,0x10
c000d1df:	ba 4c e2 01 c0       	mov    edx,0xc001e24c
c000d1e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e8:	89 10                	mov    DWORD PTR [eax],edx
c000d1ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1ee:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000d1f8:	90                   	nop
c000d1f9:	83 c4 0c             	add    esp,0xc
c000d1fc:	c3                   	ret    
c000d1fd:	90                   	nop
c000d1fe:	66 90                	xchg   ax,ax

c000d200 <Timer::~Timer()>:
c000d200:	83 ec 0c             	sub    esp,0xc
c000d203:	ba 4c e2 01 c0       	mov    edx,0xc001e24c
c000d208:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d20c:	89 10                	mov    DWORD PTR [eax],edx
c000d20e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d212:	83 ec 0c             	sub    esp,0xc
c000d215:	50                   	push   eax
c000d216:	e8 a7 e6 ff ff       	call   c000b8c2 <Device::~Device()>
c000d21b:	83 c4 10             	add    esp,0x10
c000d21e:	90                   	nop
c000d21f:	83 c4 0c             	add    esp,0xc
c000d222:	c3                   	ret    
c000d223:	90                   	nop

c000d224 <Timer::~Timer()>:
c000d224:	83 ec 0c             	sub    esp,0xc
c000d227:	83 ec 0c             	sub    esp,0xc
c000d22a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d22e:	e8 cd ff ff ff       	call   c000d200 <Timer::~Timer()>
c000d233:	83 c4 10             	add    esp,0x10
c000d236:	83 ec 08             	sub    esp,0x8
c000d239:	68 5c 01 00 00       	push   0x15c
c000d23e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d242:	e8 44 d2 ff ff       	call   c000a48b <operator delete(void*, unsigned long)>
c000d247:	83 c4 10             	add    esp,0x10
c000d24a:	83 c4 0c             	add    esp,0xc
c000d24d:	c3                   	ret    

c000d24e <Timer::read()>:
c000d24e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d252:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d258:	c3                   	ret    

c000d259 <setupTimer(int)>:
c000d259:	53                   	push   ebx
c000d25a:	83 ec 14             	sub    esp,0x14
c000d25d:	68 5c 01 00 00       	push   0x15c
c000d262:	e8 52 a5 ff ff       	call   c00077b9 <malloc>
c000d267:	89 04 24             	mov    DWORD PTR [esp],eax
c000d26a:	89 c3                	mov    ebx,eax
c000d26c:	e8 fb e7 00 00       	call   c001ba6c <PIT::PIT()>
c000d271:	58                   	pop    eax
c000d272:	5a                   	pop    edx
c000d273:	53                   	push   ebx
c000d274:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c000d27a:	e8 41 e7 ff ff       	call   c000b9c0 <Device::addChild(Device*)>
c000d27f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d281:	6a 00                	push   0x0
c000d283:	6a 00                	push   0x0
c000d285:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d289:	53                   	push   ebx
c000d28a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d28d:	89 d8                	mov    eax,ebx
c000d28f:	83 c4 28             	add    esp,0x28
c000d292:	5b                   	pop    ebx
c000d293:	c3                   	ret    

c000d294 <timerHandler(unsigned int)>:
c000d294:	56                   	push   esi
c000d295:	53                   	push   ebx
c000d296:	51                   	push   ecx
c000d297:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d29b:	01 05 8c 44 02 c0    	add    DWORD PTR ds:0xc002448c,eax
c000d2a1:	80 3d bd 1e 02 c0 00 	cmp    BYTE PTR ds:0xc0021ebd,0x0
c000d2a8:	0f 84 4a 01 00 00    	je     c000d3f8 <timerHandler(unsigned int)+0x164>
c000d2ae:	fa                   	cli    
c000d2af:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c000d2b5:	83 ec 0c             	sub    esp,0xc
c000d2b8:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c000d2be:	68 78 51 02 c0       	push   0xc0025178
c000d2c3:	e8 58 f4 00 00       	call   c001c720 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d2c8:	83 c4 10             	add    esp,0x10
c000d2cb:	84 c0                	test   al,al
c000d2cd:	0f 85 a1 00 00 00    	jne    c000d374 <timerHandler(unsigned int)+0xe0>
c000d2d3:	83 ec 0c             	sub    esp,0xc
c000d2d6:	68 78 51 02 c0       	push   0xc0025178
c000d2db:	e8 5c f4 00 00       	call   c001c73c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d2e0:	83 c4 10             	add    esp,0x10
c000d2e3:	89 c6                	mov    esi,eax
c000d2e5:	8d 76 00             	lea    esi,[esi+0x0]
c000d2e8:	83 ec 0c             	sub    esp,0xc
c000d2eb:	68 78 51 02 c0       	push   0xc0025178
c000d2f0:	e8 47 f4 00 00       	call   c001c73c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d2f5:	c7 04 24 78 51 02 c0 	mov    DWORD PTR [esp],0xc0025178
c000d2fc:	89 c3                	mov    ebx,eax
c000d2fe:	e8 41 f4 00 00       	call   c001c744 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d303:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d306:	83 c4 10             	add    esp,0x10
c000d309:	3b 05 8c 44 02 c0    	cmp    eax,DWORD PTR ds:0xc002448c
c000d30f:	77 23                	ja     c000d334 <timerHandler(unsigned int)+0xa0>
c000d311:	83 ec 0c             	sub    esp,0xc
c000d314:	53                   	push   ebx
c000d315:	e8 a2 69 00 00       	call   c0013cbc <unblockTask(ThreadControlBlock*)>
c000d31a:	83 c4 10             	add    esp,0x10
c000d31d:	39 de                	cmp    esi,ebx
c000d31f:	75 27                	jne    c000d348 <timerHandler(unsigned int)+0xb4>
c000d321:	83 ec 0c             	sub    esp,0xc
c000d324:	68 78 51 02 c0       	push   0xc0025178
c000d329:	e8 0e f4 00 00       	call   c001c73c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d32e:	89 c6                	mov    esi,eax
c000d330:	eb 12                	jmp    c000d344 <timerHandler(unsigned int)+0xb0>
c000d332:	66 90                	xchg   ax,ax
c000d334:	52                   	push   edx
c000d335:	52                   	push   edx
c000d336:	53                   	push   ebx
c000d337:	68 78 51 02 c0       	push   0xc0025178
c000d33c:	e8 bb f4 00 00       	call   c001c7fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d341:	8d 76 00             	lea    esi,[esi+0x0]
c000d344:	83 c4 10             	add    esp,0x10
c000d347:	90                   	nop
c000d348:	83 ec 0c             	sub    esp,0xc
c000d34b:	68 78 51 02 c0       	push   0xc0025178
c000d350:	e8 cb f3 00 00       	call   c001c720 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d355:	83 c4 10             	add    esp,0x10
c000d358:	84 c0                	test   al,al
c000d35a:	75 18                	jne    c000d374 <timerHandler(unsigned int)+0xe0>
c000d35c:	83 ec 0c             	sub    esp,0xc
c000d35f:	68 78 51 02 c0       	push   0xc0025178
c000d364:	e8 d3 f3 00 00       	call   c001c73c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d369:	83 c4 10             	add    esp,0x10
c000d36c:	39 f0                	cmp    eax,esi
c000d36e:	0f 85 74 ff ff ff    	jne    c000d2e8 <timerHandler(unsigned int)+0x54>
c000d374:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d379:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d37d:	74 41                	je     c000d3c0 <timerHandler(unsigned int)+0x12c>
c000d37f:	80 3d bc 1e 02 c0 00 	cmp    BYTE PTR ds:0xc0021ebc,0x0
c000d386:	74 38                	je     c000d3c0 <timerHandler(unsigned int)+0x12c>
c000d388:	fa                   	cli    
c000d389:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c000d38f:	a1 8c 44 02 c0       	mov    eax,ds:0xc002448c
c000d394:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d39a:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d39d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d3a3:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d3a6:	72 08                	jb     c000d3b0 <timerHandler(unsigned int)+0x11c>
c000d3a8:	e8 4b 64 00 00       	call   c00137f8 <schedule()>
c000d3ad:	8d 76 00             	lea    esi,[esi+0x0]
c000d3b0:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000d3b5:	48                   	dec    eax
c000d3b6:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000d3bb:	75 03                	jne    c000d3c0 <timerHandler(unsigned int)+0x12c>
c000d3bd:	fb                   	sti    
c000d3be:	66 90                	xchg   ax,ax
c000d3c0:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c000d3c5:	48                   	dec    eax
c000d3c6:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c000d3cb:	75 1b                	jne    c000d3e8 <timerHandler(unsigned int)+0x154>
c000d3cd:	83 3d 60 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025160,0x0
c000d3d4:	74 12                	je     c000d3e8 <timerHandler(unsigned int)+0x154>
c000d3d6:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c000d3e0:	e8 13 64 00 00       	call   c00137f8 <schedule()>
c000d3e5:	8d 76 00             	lea    esi,[esi+0x0]
c000d3e8:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000d3ed:	48                   	dec    eax
c000d3ee:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000d3f3:	75 03                	jne    c000d3f8 <timerHandler(unsigned int)+0x164>
c000d3f5:	fb                   	sti    
c000d3f6:	66 90                	xchg   ax,ax
c000d3f8:	58                   	pop    eax
c000d3f9:	5b                   	pop    ebx
c000d3fa:	5e                   	pop    esi
c000d3fb:	c3                   	ret    

c000d3fc <VCache::VCache(PhysicalDisk*)>:
c000d3fc:	53                   	push   ebx
c000d3fd:	83 ec 18             	sub    esp,0x18
c000d400:	ba 7c e2 01 c0       	mov    edx,0xc001e27c
c000d405:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d409:	89 10                	mov    DWORD PTR [eax],edx
c000d40b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d40f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d416:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d41a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d421:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d425:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d42c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d433:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d437:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d43e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d445:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d449:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d450:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d454:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d458:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d45c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d463:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d46a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d46e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d472:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d476:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d47a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d47e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d482:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d486:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d48d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000d495:	83 ec 0c             	sub    esp,0xc
c000d498:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d49c:	e8 18 a3 ff ff       	call   c00077b9 <malloc>
c000d4a1:	83 c4 10             	add    esp,0x10
c000d4a4:	89 c3                	mov    ebx,eax
c000d4a6:	83 ec 0c             	sub    esp,0xc
c000d4a9:	53                   	push   ebx
c000d4aa:	e8 15 61 00 00       	call   c00135c4 <Mutex::Mutex()>
c000d4af:	83 c4 10             	add    esp,0x10
c000d4b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4b6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000d4b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4bd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d4c1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000d4c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4c8:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000d4cf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d4d3:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d4d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4dd:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d4e0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d4e4:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000d4ea:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000d4f0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d4f4:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000d4f7:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000d4fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4fe:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d502:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d506:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d50c:	05 00 01 00 00       	add    eax,0x100
c000d511:	c1 e0 04             	shl    eax,0x4
c000d514:	83 ec 0c             	sub    esp,0xc
c000d517:	50                   	push   eax
c000d518:	e8 9c a2 ff ff       	call   c00077b9 <malloc>
c000d51d:	83 c4 10             	add    esp,0x10
c000d520:	89 c2                	mov    edx,eax
c000d522:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d526:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d529:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d52d:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d534:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d538:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d53c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d540:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d546:	c1 e0 06             	shl    eax,0x6
c000d549:	83 ec 0c             	sub    esp,0xc
c000d54c:	50                   	push   eax
c000d54d:	e8 67 a2 ff ff       	call   c00077b9 <malloc>
c000d552:	83 c4 10             	add    esp,0x10
c000d555:	89 c2                	mov    edx,eax
c000d557:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d55b:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d55e:	90                   	nop
c000d55f:	83 c4 18             	add    esp,0x18
c000d562:	5b                   	pop    ebx
c000d563:	c3                   	ret    

c000d564 <VCache::invalidateReadBuffer()>:
c000d564:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d568:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000d56e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d572:	c3                   	ret    
c000d573:	90                   	nop

c000d574 <VCache::writeWriteBuffer()>:
c000d574:	53                   	push   ebx
c000d575:	83 ec 08             	sub    esp,0x8
c000d578:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d57c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d580:	74 1e                	je     c000d5a0 <VCache::writeWriteBuffer()+0x2c>
c000d582:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d585:	83 ec 0c             	sub    esp,0xc
c000d588:	8b 10                	mov    edx,DWORD PTR [eax]
c000d58a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000d58d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000d590:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000d593:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d596:	50                   	push   eax
c000d597:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000d59a:	83 c4 20             	add    esp,0x20
c000d59d:	8d 76 00             	lea    esi,[esi+0x0]
c000d5a0:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d5a7:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000d5ae:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000d5b2:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000d5b9:	83 c4 08             	add    esp,0x8
c000d5bc:	5b                   	pop    ebx
c000d5bd:	c3                   	ret    
c000d5be:	66 90                	xchg   ax,ax

c000d5c0 <VCache::~VCache()>:
c000d5c0:	83 ec 0c             	sub    esp,0xc
c000d5c3:	ba 7c e2 01 c0       	mov    edx,0xc001e27c
c000d5c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5cc:	89 10                	mov    DWORD PTR [eax],edx
c000d5ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5d2:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000d5d5:	84 c0                	test   al,al
c000d5d7:	74 0f                	je     c000d5e8 <VCache::~VCache()+0x28>
c000d5d9:	83 ec 0c             	sub    esp,0xc
c000d5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e0:	e8 8f ff ff ff       	call   c000d574 <VCache::writeWriteBuffer()>
c000d5e5:	83 c4 10             	add    esp,0x10
c000d5e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5ec:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d5ef:	83 ec 0c             	sub    esp,0xc
c000d5f2:	50                   	push   eax
c000d5f3:	e8 d1 a1 ff ff       	call   c00077c9 <free>
c000d5f8:	83 c4 10             	add    esp,0x10
c000d5fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5ff:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000d602:	83 ec 0c             	sub    esp,0xc
c000d605:	50                   	push   eax
c000d606:	e8 be a1 ff ff       	call   c00077c9 <free>
c000d60b:	83 c4 10             	add    esp,0x10
c000d60e:	90                   	nop
c000d60f:	83 c4 0c             	add    esp,0xc
c000d612:	c3                   	ret    
c000d613:	90                   	nop

c000d614 <VCache::~VCache()>:
c000d614:	83 ec 0c             	sub    esp,0xc
c000d617:	83 ec 0c             	sub    esp,0xc
c000d61a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d61e:	e8 9d ff ff ff       	call   c000d5c0 <VCache::~VCache()>
c000d623:	83 c4 10             	add    esp,0x10
c000d626:	83 ec 08             	sub    esp,0x8
c000d629:	6a 44                	push   0x44
c000d62b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d62f:	e8 57 ce ff ff       	call   c000a48b <operator delete(void*, unsigned long)>
c000d634:	83 c4 10             	add    esp,0x10
c000d637:	83 c4 0c             	add    esp,0xc
c000d63a:	c3                   	ret    
c000d63b:	90                   	nop

c000d63c <VCache::write(unsigned long long, int, void*)>:
c000d63c:	55                   	push   ebp
c000d63d:	57                   	push   edi
c000d63e:	56                   	push   esi
c000d63f:	53                   	push   ebx
c000d640:	83 ec 1c             	sub    esp,0x1c
c000d643:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d647:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d64b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d64f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d653:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d657:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d65b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d65f:	31 c0                	xor    eax,eax
c000d661:	8d 76 00             	lea    esi,[esi+0x0]
c000d664:	39 e8                	cmp    eax,ebp
c000d666:	7d 18                	jge    c000d680 <VCache::write(unsigned long long, int, void*)+0x44>
c000d668:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000d66b:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000d671:	0f af c8             	imul   ecx,eax
c000d674:	89 ca                	mov    edx,ecx
c000d676:	01 f2                	add    edx,esi
c000d678:	8b 3a                	mov    edi,DWORD PTR [edx]
c000d67a:	40                   	inc    eax
c000d67b:	eb e7                	jmp    c000d664 <VCache::write(unsigned long long, int, void*)+0x28>
c000d67d:	8d 76 00             	lea    esi,[esi+0x0]
c000d680:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000d684:	74 0a                	je     c000d690 <VCache::write(unsigned long long, int, void*)+0x54>
c000d686:	53                   	push   ebx
c000d687:	e8 d8 fe ff ff       	call   c000d564 <VCache::invalidateReadBuffer()>
c000d68c:	58                   	pop    eax
c000d68d:	8d 76 00             	lea    esi,[esi+0x0]
c000d690:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d694:	74 5a                	je     c000d6f0 <VCache::write(unsigned long long, int, void*)+0xb4>
c000d696:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c000d699:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d69d:	89 f8                	mov    eax,edi
c000d69f:	99                   	cdq    
c000d6a0:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000d6a3:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000d6a6:	31 c1                	xor    ecx,eax
c000d6a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d6ac:	31 d0                	xor    eax,edx
c000d6ae:	09 c1                	or     ecx,eax
c000d6b0:	75 32                	jne    c000d6e4 <VCache::write(unsigned long long, int, void*)+0xa8>
c000d6b2:	83 fd 01             	cmp    ebp,0x1
c000d6b5:	75 2d                	jne    c000d6e4 <VCache::write(unsigned long long, int, void*)+0xa8>
c000d6b7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d6ba:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d6c0:	0f af f9             	imul   edi,ecx
c000d6c3:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000d6c6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d6c8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000d6cb:	40                   	inc    eax
c000d6cc:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000d6cf:	83 f8 40             	cmp    eax,0x40
c000d6d2:	75 74                	jne    c000d748 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d6d4:	83 ec 0c             	sub    esp,0xc
c000d6d7:	53                   	push   ebx
c000d6d8:	e8 97 fe ff ff       	call   c000d574 <VCache::writeWriteBuffer()>
c000d6dd:	83 c4 10             	add    esp,0x10
c000d6e0:	eb 66                	jmp    c000d748 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d6e2:	66 90                	xchg   ax,ax
c000d6e4:	83 ec 0c             	sub    esp,0xc
c000d6e7:	53                   	push   ebx
c000d6e8:	e8 87 fe ff ff       	call   c000d574 <VCache::writeWriteBuffer()>
c000d6ed:	83 c4 10             	add    esp,0x10
c000d6f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d6f3:	83 fd 3f             	cmp    ebp,0x3f
c000d6f6:	7f 24                	jg     c000d71c <VCache::write(unsigned long long, int, void*)+0xe0>
c000d6f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d6fc:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c000d6ff:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000d702:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000d706:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d70a:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000d70d:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000d710:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d716:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d718:	eb 2e                	jmp    c000d748 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d71a:	66 90                	xchg   ax,ax
c000d71c:	8b 10                	mov    edx,DWORD PTR [eax]
c000d71e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000d722:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d726:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000d72a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d72e:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d732:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d736:	89 74 24 38          	mov    DWORD PTR [esp+0x38],esi
c000d73a:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000d73d:	83 c4 1c             	add    esp,0x1c
c000d740:	5b                   	pop    ebx
c000d741:	5e                   	pop    esi
c000d742:	5f                   	pop    edi
c000d743:	5d                   	pop    ebp
c000d744:	ff e0                	jmp    eax
c000d746:	66 90                	xchg   ax,ax
c000d748:	83 c4 1c             	add    esp,0x1c
c000d74b:	31 c0                	xor    eax,eax
c000d74d:	5b                   	pop    ebx
c000d74e:	5e                   	pop    esi
c000d74f:	5f                   	pop    edi
c000d750:	5d                   	pop    ebp
c000d751:	c3                   	ret    

c000d752 <VCache::read(unsigned long long, int, void*)>:
c000d752:	55                   	push   ebp
c000d753:	57                   	push   edi
c000d754:	56                   	push   esi
c000d755:	53                   	push   ebx
c000d756:	83 ec 1c             	sub    esp,0x1c
c000d759:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d75d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d761:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000d765:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000d769:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d76d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000d771:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000d775:	74 0d                	je     c000d784 <VCache::read(unsigned long long, int, void*)+0x32>
c000d777:	83 ec 0c             	sub    esp,0xc
c000d77a:	55                   	push   ebp
c000d77b:	e8 f4 fd ff ff       	call   c000d574 <VCache::writeWriteBuffer()>
c000d780:	83 c4 10             	add    esp,0x10
c000d783:	90                   	nop
c000d784:	83 ec 0c             	sub    esp,0xc
c000d787:	55                   	push   ebp
c000d788:	e8 d7 fd ff ff       	call   c000d564 <VCache::invalidateReadBuffer()>
c000d78d:	83 c4 0c             	add    esp,0xc
c000d790:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d793:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c000d799:	6a 00                	push   0x0
c000d79b:	53                   	push   ebx
c000d79c:	e8 2f 2d ff ff       	call   c00004d0 <memset>
c000d7a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7a4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000d7a8:	8b 10                	mov    edx,DWORD PTR [eax]
c000d7aa:	89 5c 24 50          	mov    DWORD PTR [esp+0x50],ebx
c000d7ae:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c000d7b2:	89 7c 24 48          	mov    DWORD PTR [esp+0x48],edi
c000d7b6:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
c000d7ba:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d7be:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000d7c1:	83 c4 2c             	add    esp,0x2c
c000d7c4:	5b                   	pop    ebx
c000d7c5:	5e                   	pop    esi
c000d7c6:	5f                   	pop    edi
c000d7c7:	5d                   	pop    ebp
c000d7c8:	ff e0                	jmp    eax

c000d7ca <Video::putrect(int, int, int, int, unsigned int)>:
c000d7ca:	55                   	push   ebp
c000d7cb:	57                   	push   edi
c000d7cc:	56                   	push   esi
c000d7cd:	53                   	push   ebx
c000d7ce:	83 ec 1c             	sub    esp,0x1c
c000d7d1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000d7d5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d7d9:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000d7dd:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000d7e1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d7e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d7e9:	01 df                	add    edi,ebx
c000d7eb:	39 fb                	cmp    ebx,edi
c000d7ed:	7d 1f                	jge    c000d80e <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000d7ef:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d7f3:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000d7f7:	7d 12                	jge    c000d80b <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000d7f9:	8b 16                	mov    edx,DWORD PTR [esi]
c000d7fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d7ff:	53                   	push   ebx
c000d800:	55                   	push   ebp
c000d801:	45                   	inc    ebp
c000d802:	56                   	push   esi
c000d803:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d806:	83 c4 10             	add    esp,0x10
c000d809:	eb e8                	jmp    c000d7f3 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000d80b:	43                   	inc    ebx
c000d80c:	eb dd                	jmp    c000d7eb <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000d80e:	83 c4 1c             	add    esp,0x1c
c000d811:	5b                   	pop    ebx
c000d812:	5e                   	pop    esi
c000d813:	5f                   	pop    edi
c000d814:	5d                   	pop    ebp
c000d815:	c3                   	ret    

c000d816 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000d816:	55                   	push   ebp
c000d817:	57                   	push   edi
c000d818:	31 ff                	xor    edi,edi
c000d81a:	56                   	push   esi
c000d81b:	53                   	push   ebx
c000d81c:	83 ec 1c             	sub    esp,0x1c
c000d81f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000d823:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d827:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000d82e:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000d833:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d837:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000d83b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d83f:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000d842:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d846:	01 f9                	add    ecx,edi
c000d848:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000d84c:	7d 2f                	jge    c000d87d <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000d84e:	31 f6                	xor    esi,esi
c000d850:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d854:	01 f2                	add    edx,esi
c000d856:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000d85a:	7d 1a                	jge    c000d876 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000d85c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d85f:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000d862:	46                   	inc    esi
c000d863:	51                   	push   ecx
c000d864:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d868:	52                   	push   edx
c000d869:	55                   	push   ebp
c000d86a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d86d:	83 c4 10             	add    esp,0x10
c000d870:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d874:	eb da                	jmp    c000d850 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000d876:	47                   	inc    edi
c000d877:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000d87b:	eb c5                	jmp    c000d842 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000d87d:	83 c4 1c             	add    esp,0x1c
c000d880:	5b                   	pop    ebx
c000d881:	5e                   	pop    esi
c000d882:	5f                   	pop    edi
c000d883:	5d                   	pop    ebp
c000d884:	c3                   	ret    
c000d885:	90                   	nop

c000d886 <Video::blit(unsigned int*, int, int, int, int)>:
c000d886:	55                   	push   ebp
c000d887:	57                   	push   edi
c000d888:	56                   	push   esi
c000d889:	53                   	push   ebx
c000d88a:	83 ec 1c             	sub    esp,0x1c
c000d88d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d891:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d895:	85 c0                	test   eax,eax
c000d897:	79 02                	jns    c000d89b <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000d899:	31 c0                	xor    eax,eax
c000d89b:	c1 e0 02             	shl    eax,0x2
c000d89e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000d8a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d8a6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d8aa:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000d8ae:	39 d8                	cmp    eax,ebx
c000d8b0:	7e 49                	jle    c000d8fb <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d8b2:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d8b8:	7c 41                	jl     c000d8fb <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d8ba:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000d8be:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d8c2:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d8c6:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000d8ca:	39 f9                	cmp    ecx,edi
c000d8cc:	7e 22                	jle    c000d8f0 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000d8ce:	83 c5 04             	add    ebp,0x4
c000d8d1:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d8d7:	7c 14                	jl     c000d8ed <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000d8d9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d8db:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000d8de:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d8e2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d8e6:	56                   	push   esi
c000d8e7:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000d8ea:	83 c4 10             	add    esp,0x10
c000d8ed:	47                   	inc    edi
c000d8ee:	eb d2                	jmp    c000d8c2 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000d8f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d8f4:	43                   	inc    ebx
c000d8f5:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000d8f9:	eb ab                	jmp    c000d8a6 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000d8fb:	83 c4 1c             	add    esp,0x1c
c000d8fe:	5b                   	pop    ebx
c000d8ff:	5e                   	pop    esi
c000d900:	5f                   	pop    edi
c000d901:	5d                   	pop    ebp
c000d902:	c3                   	ret    
c000d903:	90                   	nop

c000d904 <Video::clearScreen(unsigned int)>:
c000d904:	57                   	push   edi
c000d905:	56                   	push   esi
c000d906:	53                   	push   ebx
c000d907:	31 db                	xor    ebx,ebx
c000d909:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d90d:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d913:	7e 1f                	jle    c000d934 <Video::clearScreen(unsigned int)+0x30>
c000d915:	31 ff                	xor    edi,edi
c000d917:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d91d:	7e 12                	jle    c000d931 <Video::clearScreen(unsigned int)+0x2d>
c000d91f:	8b 06                	mov    eax,DWORD PTR [esi]
c000d921:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d925:	53                   	push   ebx
c000d926:	57                   	push   edi
c000d927:	47                   	inc    edi
c000d928:	56                   	push   esi
c000d929:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d92c:	83 c4 10             	add    esp,0x10
c000d92f:	eb e6                	jmp    c000d917 <Video::clearScreen(unsigned int)+0x13>
c000d931:	43                   	inc    ebx
c000d932:	eb d9                	jmp    c000d90d <Video::clearScreen(unsigned int)+0x9>
c000d934:	5b                   	pop    ebx
c000d935:	5e                   	pop    esi
c000d936:	5f                   	pop    edi
c000d937:	c3                   	ret    

c000d938 <Video::putpixel(int, int, unsigned int)>:
c000d938:	c7 44 24 04 84 e2 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e284
c000d940:	e9 be 28 00 00       	jmp    c0010203 <KePanic(char const*)>
c000d945:	90                   	nop

c000d946 <Video::Video(char const*)>:
c000d946:	83 ec 0c             	sub    esp,0xc
c000d949:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d94d:	83 ec 08             	sub    esp,0x8
c000d950:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d954:	50                   	push   eax
c000d955:	e8 fe e1 ff ff       	call   c000bb58 <Device::Device(char const*)>
c000d95a:	83 c4 10             	add    esp,0x10
c000d95d:	ba f4 e2 01 c0       	mov    edx,0xc001e2f4
c000d962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d966:	89 10                	mov    DWORD PTR [eax],edx
c000d968:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d96c:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000d976:	90                   	nop
c000d977:	83 c4 0c             	add    esp,0xc
c000d97a:	c3                   	ret    
c000d97b:	90                   	nop

c000d97c <Video::~Video()>:
c000d97c:	83 ec 0c             	sub    esp,0xc
c000d97f:	ba f4 e2 01 c0       	mov    edx,0xc001e2f4
c000d984:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d988:	89 10                	mov    DWORD PTR [eax],edx
c000d98a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d98e:	83 ec 0c             	sub    esp,0xc
c000d991:	50                   	push   eax
c000d992:	e8 2b df ff ff       	call   c000b8c2 <Device::~Device()>
c000d997:	83 c4 10             	add    esp,0x10
c000d99a:	90                   	nop
c000d99b:	83 c4 0c             	add    esp,0xc
c000d99e:	c3                   	ret    
c000d99f:	90                   	nop

c000d9a0 <Video::~Video()>:
c000d9a0:	83 ec 0c             	sub    esp,0xc
c000d9a3:	83 ec 0c             	sub    esp,0xc
c000d9a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9aa:	e8 cd ff ff ff       	call   c000d97c <Video::~Video()>
c000d9af:	83 c4 10             	add    esp,0x10
c000d9b2:	83 ec 08             	sub    esp,0x8
c000d9b5:	68 64 01 00 00       	push   0x164
c000d9ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9be:	e8 c8 ca ff ff       	call   c000a48b <operator delete(void*, unsigned long)>
c000d9c3:	83 c4 10             	add    esp,0x10
c000d9c6:	83 c4 0c             	add    esp,0xc
c000d9c9:	c3                   	ret    

c000d9ca <Video::isMonochrome()>:
c000d9ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d9ce:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000d9d4:	c3                   	ret    
c000d9d5:	90                   	nop

c000d9d6 <Video::getWidth()>:
c000d9d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d9da:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d9e0:	c3                   	ret    
c000d9e1:	90                   	nop

c000d9e2 <Video::getHeight()>:
c000d9e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d9e6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d9ec:	c3                   	ret    
c000d9ed:	90                   	nop

c000d9ee <Video::drawCursor(int, int, unsigned char*, int)>:
c000d9ee:	55                   	push   ebp
c000d9ef:	57                   	push   edi
c000d9f0:	56                   	push   esi
c000d9f1:	53                   	push   ebx
c000d9f2:	83 ec 2c             	sub    esp,0x2c
c000d9f5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d9f9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d9fd:	83 f8 01             	cmp    eax,0x1
c000da00:	19 c9                	sbb    ecx,ecx
c000da02:	31 db                	xor    ebx,ebx
c000da04:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000da08:	89 cd                	mov    ebp,ecx
c000da0a:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000da12:	f7 d5                	not    ebp
c000da14:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000da1a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000da1e:	01 d8                	add    eax,ebx
c000da20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000da24:	56                   	push   esi
c000da25:	e8 b8 ff ff ff       	call   c000d9e2 <Video::getHeight()>
c000da2a:	59                   	pop    ecx
c000da2b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000da2f:	7e 70                	jle    c000daa1 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000da31:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000da35:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000da39:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000da3c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000da40:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000da44:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000da4b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da4f:	89 f8                	mov    eax,edi
c000da51:	83 c0 20             	add    eax,0x20
c000da54:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000da58:	56                   	push   esi
c000da59:	e8 78 ff ff ff       	call   c000d9d6 <Video::getWidth()>
c000da5e:	5a                   	pop    edx
c000da5f:	39 c7                	cmp    edi,eax
c000da61:	7d 34                	jge    c000da97 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000da63:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000da68:	74 05                	je     c000da6f <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000da6a:	8b 06                	mov    eax,DWORD PTR [esi]
c000da6c:	55                   	push   ebp
c000da6d:	eb 0d                	jmp    c000da7c <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000da6f:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000da74:	74 12                	je     c000da88 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000da76:	8b 06                	mov    eax,DWORD PTR [esi]
c000da78:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000da7c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000da80:	57                   	push   edi
c000da81:	56                   	push   esi
c000da82:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000da85:	83 c4 10             	add    esp,0x10
c000da88:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000da8c:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000da90:	47                   	inc    edi
c000da91:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000da95:	75 c1                	jne    c000da58 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000da97:	43                   	inc    ebx
c000da98:	83 fb 20             	cmp    ebx,0x20
c000da9b:	0f 85 79 ff ff ff    	jne    c000da1a <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000daa1:	83 c4 2c             	add    esp,0x2c
c000daa4:	5b                   	pop    ebx
c000daa5:	5e                   	pop    esi
c000daa6:	5f                   	pop    edi
c000daa7:	5d                   	pop    ebp
c000daa8:	c3                   	ret    
c000daa9:	90                   	nop

c000daaa <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000daaa:	55                   	push   ebp
c000daab:	57                   	push   edi
c000daac:	56                   	push   esi
c000daad:	53                   	push   ebx
c000daae:	83 ec 28             	sub    esp,0x28
c000dab1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000dab5:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000dab9:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000dabd:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000dac1:	c1 e6 08             	shl    esi,0x8
c000dac4:	01 c6                	add    esi,eax
c000dac6:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000daca:	c1 e0 08             	shl    eax,0x8
c000dacd:	01 d0                	add    eax,edx
c000dacf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dad3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dad7:	0f af c6             	imul   eax,esi
c000dada:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000dae1:	50                   	push   eax
c000dae2:	e8 d2 9c ff ff       	call   c00077b9 <malloc>
c000dae7:	83 c4 10             	add    esp,0x10
c000daea:	89 c7                	mov    edi,eax
c000daec:	85 c0                	test   eax,eax
c000daee:	75 10                	jne    c000db00 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000daf0:	83 ec 0c             	sub    esp,0xc
c000daf3:	68 a5 e2 01 c0       	push   0xc001e2a5
c000daf8:	e8 06 27 00 00       	call   c0010203 <KePanic(char const*)>
c000dafd:	83 c4 10             	add    esp,0x10
c000db00:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000db03:	ba 12 00 00 00       	mov    edx,0x12
c000db08:	84 c0                	test   al,al
c000db0a:	74 11                	je     c000db1d <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000db0c:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000db10:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000db14:	c1 fa 03             	sar    edx,0x3
c000db17:	0f af d1             	imul   edx,ecx
c000db1a:	83 c2 12             	add    edx,0x12
c000db1d:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000db21:	74 04                	je     c000db27 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000db23:	85 f6                	test   esi,esi
c000db25:	75 12                	jne    c000db39 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000db27:	83 ec 0c             	sub    esp,0xc
c000db2a:	68 b5 e2 01 c0       	push   0xc001e2b5
c000db2f:	e8 4d ca ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c000db34:	e9 b8 00 00 00       	jmp    c000dbf1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000db39:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000db3d:	80 f9 02             	cmp    cl,0x2
c000db40:	0f 85 96 00 00 00    	jne    c000dbdc <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000db46:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000db4b:	75 0e                	jne    c000db5b <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000db4d:	84 c0                	test   al,al
c000db4f:	75 0a                	jne    c000db5b <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000db51:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000db54:	83 e8 18             	sub    eax,0x18
c000db57:	a8 f7                	test   al,0xf7
c000db59:	74 0a                	je     c000db65 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000db5b:	83 ec 0c             	sub    esp,0xc
c000db5e:	68 ca e2 01 c0       	push   0xc001e2ca
c000db63:	eb 7f                	jmp    c000dbe4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000db65:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000db6d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000db75:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000db79:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000db81:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000db85:	75 0c                	jne    c000db93 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000db87:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000db8c:	c1 e0 18             	shl    eax,0x18
c000db8f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db93:	45                   	inc    ebp
c000db94:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000db99:	c1 e1 10             	shl    ecx,0x10
c000db9c:	89 c8                	mov    eax,ecx
c000db9e:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000dba3:	c1 e1 08             	shl    ecx,0x8
c000dba6:	09 c1                	or     ecx,eax
c000dba8:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000dbac:	09 c1                	or     ecx,eax
c000dbae:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000dbb2:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000dbb6:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000dbba:	c1 f8 03             	sar    eax,0x3
c000dbbd:	01 c2                	add    edx,eax
c000dbbf:	89 e8                	mov    eax,ebp
c000dbc1:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000dbc5:	39 c6                	cmp    esi,eax
c000dbc7:	7f b0                	jg     c000db79 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000dbc9:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000dbcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dbd1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000dbd4:	7e 22                	jle    c000dbf8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000dbd6:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000dbda:	eb 99                	jmp    c000db75 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000dbdc:	50                   	push   eax
c000dbdd:	50                   	push   eax
c000dbde:	51                   	push   ecx
c000dbdf:	68 d8 e2 01 c0       	push   0xc001e2d8
c000dbe4:	e8 98 c9 ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c000dbe9:	89 3c 24             	mov    DWORD PTR [esp],edi
c000dbec:	e8 d8 9b ff ff       	call   c00077c9 <free>
c000dbf1:	83 c4 10             	add    esp,0x10
c000dbf4:	31 ff                	xor    edi,edi
c000dbf6:	eb 0f                	jmp    c000dc07 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000dbf8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000dbfc:	89 30                	mov    DWORD PTR [eax],esi
c000dbfe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dc02:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dc05:	89 30                	mov    DWORD PTR [eax],esi
c000dc07:	83 c4 1c             	add    esp,0x1c
c000dc0a:	89 f8                	mov    eax,edi
c000dc0c:	5b                   	pop    ebx
c000dc0d:	5e                   	pop    esi
c000dc0e:	5f                   	pop    edi
c000dc0f:	5d                   	pop    ebp
c000dc10:	c3                   	ret    
c000dc11:	90                   	nop

c000dc12 <Video::putTGA(int, int, unsigned char*, int)>:
c000dc12:	55                   	push   ebp
c000dc13:	57                   	push   edi
c000dc14:	56                   	push   esi
c000dc15:	53                   	push   ebx
c000dc16:	83 ec 28             	sub    esp,0x28
c000dc19:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000dc1d:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dc21:	50                   	push   eax
c000dc22:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dc26:	50                   	push   eax
c000dc27:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dc2b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dc2f:	56                   	push   esi
c000dc30:	e8 75 fe ff ff       	call   c000daaa <Video::tgaParse(unsigned char*, int, int*, int*)>
c000dc35:	83 c4 20             	add    esp,0x20
c000dc38:	85 c0                	test   eax,eax
c000dc3a:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000dc3e:	74 35                	je     c000dc75 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000dc40:	89 c7                	mov    edi,eax
c000dc42:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dc46:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000dc4a:	39 d8                	cmp    eax,ebx
c000dc4c:	7e 27                	jle    c000dc75 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000dc4e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000dc52:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dc56:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000dc5a:	39 e8                	cmp    eax,ebp
c000dc5c:	7e 14                	jle    c000dc72 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000dc5e:	8b 06                	mov    eax,DWORD PTR [esi]
c000dc60:	83 c7 04             	add    edi,0x4
c000dc63:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000dc66:	53                   	push   ebx
c000dc67:	55                   	push   ebp
c000dc68:	45                   	inc    ebp
c000dc69:	56                   	push   esi
c000dc6a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dc6d:	83 c4 10             	add    esp,0x10
c000dc70:	eb e0                	jmp    c000dc52 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000dc72:	43                   	inc    ebx
c000dc73:	eb cd                	jmp    c000dc42 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000dc75:	83 c4 1c             	add    esp,0x1c
c000dc78:	5b                   	pop    ebx
c000dc79:	5e                   	pop    esi
c000dc7a:	5f                   	pop    edi
c000dc7b:	5d                   	pop    ebp
c000dc7c:	c3                   	ret    
c000dc7d:	66 90                	xchg   ax,ax
c000dc7f:	90                   	nop

c000dc80 <ACPI::close(int, int, void*)>:
c000dc80:	83 ec 1c             	sub    esp,0x1c
c000dc83:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000dc8b:	74 0b                	je     c000dc98 <ACPI::close(int, int, void*)+0x18>
c000dc8d:	b8 00 00 00 00       	mov    eax,0x0
c000dc92:	e9 9d 00 00 00       	jmp    c000dd34 <ACPI::close(int, int, void*)+0xb4>
c000dc97:	90                   	nop
c000dc98:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000dc9d:	75 29                	jne    c000dcc8 <ACPI::close(int, int, void*)+0x48>
c000dc9f:	a1 a8 44 02 c0       	mov    eax,ds:0xc00244a8
c000dca4:	85 c0                	test   eax,eax
c000dca6:	74 08                	je     c000dcb0 <ACPI::close(int, int, void*)+0x30>
c000dca8:	a1 a8 44 02 c0       	mov    eax,ds:0xc00244a8
c000dcad:	ff d0                	call   eax
c000dcaf:	90                   	nop
c000dcb0:	83 ec 0c             	sub    esp,0xc
c000dcb3:	68 34 e3 01 c0       	push   0xc001e334
c000dcb8:	e8 46 25 00 00       	call   c0010203 <KePanic(char const*)>
c000dcbd:	83 c4 10             	add    esp,0x10
c000dcc0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dcc5:	eb 6d                	jmp    c000dd34 <ACPI::close(int, int, void*)+0xb4>
c000dcc7:	90                   	nop
c000dcc8:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000dccd:	75 5d                	jne    c000dd2c <ACPI::close(int, int, void*)+0xac>
c000dccf:	a1 a4 44 02 c0       	mov    eax,ds:0xc00244a4
c000dcd4:	85 c0                	test   eax,eax
c000dcd6:	74 08                	je     c000dce0 <ACPI::close(int, int, void*)+0x60>
c000dcd8:	a1 a4 44 02 c0       	mov    eax,ds:0xc00244a4
c000dcdd:	ff d0                	call   eax
c000dcdf:	90                   	nop
c000dce0:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000dce5:	8d 76 00             	lea    esi,[esi+0x0]
c000dce8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000dcec:	25 ff 00 00 00       	and    eax,0xff
c000dcf1:	83 e0 02             	and    eax,0x2
c000dcf4:	74 1e                	je     c000dd14 <ACPI::close(int, int, void*)+0x94>
c000dcf6:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000dcfd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dd01:	89 c2                	mov    edx,eax
c000dd03:	ec                   	in     al,dx
c000dd04:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000dd08:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000dd0c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000dd10:	eb d6                	jmp    c000dce8 <ACPI::close(int, int, void*)+0x68>
c000dd12:	66 90                	xchg   ax,ax
c000dd14:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000dd1b:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000dd20:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000dd24:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dd28:	ee                   	out    dx,al
c000dd29:	8d 76 00             	lea    esi,[esi+0x0]
c000dd2c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dd31:	8d 76 00             	lea    esi,[esi+0x0]
c000dd34:	83 c4 1c             	add    esp,0x1c
c000dd37:	c3                   	ret    

c000dd38 <findRSDP()>:
c000dd38:	83 ec 1c             	sub    esp,0x1c
c000dd3b:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000dd40:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dd46:	83 e0 04             	and    eax,0x4
c000dd49:	84 c0                	test   al,al
c000dd4b:	75 07                	jne    c000dd54 <findRSDP()+0x1c>
c000dd4d:	b8 00 00 00 00       	mov    eax,0x0
c000dd52:	eb 70                	jmp    c000ddc4 <findRSDP()+0x8c>
c000dd54:	a1 e8 1e 02 c0       	mov    eax,ds:0xc0021ee8
c000dd59:	3d ff 07 00 00       	cmp    eax,0x7ff
c000dd5e:	7f 1c                	jg     c000dd7c <findRSDP()+0x44>
c000dd60:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000dd65:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000dd6b:	83 e2 fb             	and    edx,0xfffffffb
c000dd6e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000dd74:	b8 00 00 00 00       	mov    eax,0x0
c000dd79:	eb 49                	jmp    c000ddc4 <findRSDP()+0x8c>
c000dd7b:	90                   	nop
c000dd7c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000dd84:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000dd8c:	77 2e                	ja     c000ddbc <findRSDP()+0x84>
c000dd8e:	83 ec 04             	sub    esp,0x4
c000dd91:	6a 08                	push   0x8
c000dd93:	68 cf e3 01 c0       	push   0xc001e3cf
c000dd98:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dd9c:	e8 ef 25 ff ff       	call   c0000390 <memcmp>
c000dda1:	83 c4 10             	add    esp,0x10
c000dda4:	85 c0                	test   eax,eax
c000dda6:	0f 94 c0             	sete   al
c000dda9:	84 c0                	test   al,al
c000ddab:	74 07                	je     c000ddb4 <findRSDP()+0x7c>
c000ddad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ddb1:	eb 11                	jmp    c000ddc4 <findRSDP()+0x8c>
c000ddb3:	90                   	nop
c000ddb4:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000ddb9:	eb c9                	jmp    c000dd84 <findRSDP()+0x4c>
c000ddbb:	90                   	nop
c000ddbc:	b8 00 00 00 00       	mov    eax,0x0
c000ddc1:	8d 76 00             	lea    esi,[esi+0x0]
c000ddc4:	83 c4 1c             	add    esp,0x1c
c000ddc7:	c3                   	ret    

c000ddc8 <loadACPITables(unsigned char*)>:
c000ddc8:	57                   	push   edi
c000ddc9:	56                   	push   esi
c000ddca:	53                   	push   ebx
c000ddcb:	83 ec 60             	sub    esp,0x60
c000ddce:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000ddd3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ddd9:	83 e0 04             	and    eax,0x4
c000dddc:	84 c0                	test   al,al
c000ddde:	0f 84 3c 02 00 00    	je     c000e020 <loadACPITables(unsigned char*)+0x258>
c000dde4:	a0 c0 46 02 c0       	mov    al,ds:0xc00246c0
c000dde9:	84 c0                	test   al,al
c000ddeb:	74 77                	je     c000de64 <loadACPITables(unsigned char*)+0x9c>
c000dded:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ddf1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ddf5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ddf9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ddfc:	83 e8 24             	sub    eax,0x24
c000ddff:	c1 e8 03             	shr    eax,0x3
c000de02:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000de06:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000de0e:	66 90                	xchg   ax,ax
c000de10:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000de14:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000de18:	0f 8d b6 00 00 00    	jge    c000ded4 <loadACPITables(unsigned char*)+0x10c>
c000de1e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000de22:	83 c0 24             	add    eax,0x24
c000de25:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000de29:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000de2d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000de31:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000de35:	c1 e0 03             	shl    eax,0x3
c000de38:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000de3c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000de40:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000de43:	8b 00                	mov    eax,DWORD PTR [eax]
c000de45:	89 c1                	mov    ecx,eax
c000de47:	a1 ac 44 02 c0       	mov    eax,ds:0xc00244ac
c000de4c:	8d 50 01             	lea    edx,[eax+0x1]
c000de4f:	89 15 ac 44 02 c0    	mov    DWORD PTR ds:0xc00244ac,edx
c000de55:	89 ca                	mov    edx,ecx
c000de57:	89 14 c5 c4 44 02 c0 	mov    DWORD PTR [eax*8-0x3ffdbb3c],edx
c000de5e:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000de62:	eb ac                	jmp    c000de10 <loadACPITables(unsigned char*)+0x48>
c000de64:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000de68:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000de6c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000de70:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000de73:	83 e8 24             	sub    eax,0x24
c000de76:	c1 e8 02             	shr    eax,0x2
c000de79:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000de7d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000de85:	8d 76 00             	lea    esi,[esi+0x0]
c000de88:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000de8c:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000de90:	7d 42                	jge    c000ded4 <loadACPITables(unsigned char*)+0x10c>
c000de92:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000de96:	83 c0 24             	add    eax,0x24
c000de99:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000de9d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dea1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000dea5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000dea9:	c1 e0 02             	shl    eax,0x2
c000deac:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000deb0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000deb4:	8b 08                	mov    ecx,DWORD PTR [eax]
c000deb6:	a1 ac 44 02 c0       	mov    eax,ds:0xc00244ac
c000debb:	8d 50 01             	lea    edx,[eax+0x1]
c000debe:	89 15 ac 44 02 c0    	mov    DWORD PTR ds:0xc00244ac,edx
c000dec4:	89 ca                	mov    edx,ecx
c000dec6:	89 14 c5 c4 44 02 c0 	mov    DWORD PTR [eax*8-0x3ffdbb3c],edx
c000decd:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000ded1:	eb b5                	jmp    c000de88 <loadACPITables(unsigned char*)+0xc0>
c000ded3:	90                   	nop
c000ded4:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000dedc:	a1 ac 44 02 c0       	mov    eax,ds:0xc00244ac
c000dee1:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000dee5:	0f 8d 39 01 00 00    	jge    c000e024 <loadACPITables(unsigned char*)+0x25c>
c000deeb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000deef:	8b 04 c5 c4 44 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdbb3c]
c000def6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000defa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000defe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000df02:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df06:	25 ff 0f 00 00       	and    eax,0xfff
c000df0b:	89 c6                	mov    esi,eax
c000df0d:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c000df13:	83 ec 0c             	sub    esp,0xc
c000df16:	6a 01                	push   0x1
c000df18:	e8 68 b3 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000df1d:	83 c4 10             	add    esp,0x10
c000df20:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000df24:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000df2a:	83 ec 0c             	sub    esp,0xc
c000df2d:	6a 01                	push   0x1
c000df2f:	6a 01                	push   0x1
c000df31:	50                   	push   eax
c000df32:	52                   	push   edx
c000df33:	53                   	push   ebx
c000df34:	e8 b9 bc ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000df39:	83 c4 20             	add    esp,0x20
c000df3c:	09 f0                	or     eax,esi
c000df3e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000df42:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000df46:	c1 e0 03             	shl    eax,0x3
c000df49:	05 c0 44 02 c0       	add    eax,0xc00244c0
c000df4e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000df52:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df5a:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000df62:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000df66:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df6a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000df6e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000df72:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000df76:	89 c6                	mov    esi,eax
c000df78:	89 d7                	mov    edi,edx
c000df7a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000df7c:	89 c8                	mov    eax,ecx
c000df7e:	89 fa                	mov    edx,edi
c000df80:	89 f3                	mov    ebx,esi
c000df82:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000df86:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000df8a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000df8e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df92:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000df95:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000df99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000df9d:	05 00 10 00 00       	add    eax,0x1000
c000dfa2:	c1 e8 0c             	shr    eax,0xc
c000dfa5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000dfa9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dfad:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000dfb1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dfb5:	25 ff 0f 00 00       	and    eax,0xfff
c000dfba:	89 c6                	mov    esi,eax
c000dfbc:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c000dfc2:	83 ec 0c             	sub    esp,0xc
c000dfc5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000dfc9:	e8 b7 b2 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000dfce:	83 c4 10             	add    esp,0x10
c000dfd1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000dfd5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000dfdb:	83 ec 0c             	sub    esp,0xc
c000dfde:	6a 01                	push   0x1
c000dfe0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dfe4:	50                   	push   eax
c000dfe5:	52                   	push   edx
c000dfe6:	53                   	push   ebx
c000dfe7:	e8 06 bc ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000dfec:	83 c4 20             	add    esp,0x20
c000dfef:	09 f0                	or     eax,esi
c000dff1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dff5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dff9:	83 ec 0c             	sub    esp,0xc
c000dffc:	50                   	push   eax
c000dffd:	e8 77 b5 ff ff       	call   c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c000e002:	83 c4 10             	add    esp,0x10
c000e005:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e009:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e00d:	89 14 c5 c4 44 02 c0 	mov    DWORD PTR [eax*8-0x3ffdbb3c],edx
c000e014:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000e018:	e9 bf fe ff ff       	jmp    c000dedc <loadACPITables(unsigned char*)+0x114>
c000e01d:	8d 76 00             	lea    esi,[esi+0x0]
c000e020:	90                   	nop
c000e021:	8d 76 00             	lea    esi,[esi+0x0]
c000e024:	83 c4 60             	add    esp,0x60
c000e027:	5b                   	pop    ebx
c000e028:	5e                   	pop    esi
c000e029:	5f                   	pop    edi
c000e02a:	c3                   	ret    
c000e02b:	90                   	nop

c000e02c <findRSDT(unsigned char*)>:
c000e02c:	57                   	push   edi
c000e02d:	56                   	push   esi
c000e02e:	53                   	push   ebx
c000e02f:	83 ec 50             	sub    esp,0x50
c000e032:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e037:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e03d:	83 e0 04             	and    eax,0x4
c000e040:	84 c0                	test   al,al
c000e042:	75 0c                	jne    c000e050 <findRSDT(unsigned char*)+0x24>
c000e044:	b8 00 00 00 00       	mov    eax,0x0
c000e049:	e9 26 01 00 00       	jmp    c000e174 <findRSDT(unsigned char*)+0x148>
c000e04e:	66 90                	xchg   ax,ax
c000e050:	89 e0                	mov    eax,esp
c000e052:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e056:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e05a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e05e:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e066:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e06a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e06e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e072:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e076:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e07a:	89 c6                	mov    esi,eax
c000e07c:	89 d7                	mov    edi,edx
c000e07e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e080:	89 c8                	mov    eax,ecx
c000e082:	89 fa                	mov    edx,edi
c000e084:	89 f3                	mov    ebx,esi
c000e086:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e08a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e08e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e092:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e096:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e09a:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e0a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e0a6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e0aa:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e0ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0b2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e0b6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e0ba:	25 ff 0f 00 00       	and    eax,0xfff
c000e0bf:	89 c6                	mov    esi,eax
c000e0c1:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c000e0c7:	83 ec 0c             	sub    esp,0xc
c000e0ca:	6a 02                	push   0x2
c000e0cc:	e8 b4 b1 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000e0d1:	83 c4 10             	add    esp,0x10
c000e0d4:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e0d8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e0de:	83 ec 0c             	sub    esp,0xc
c000e0e1:	6a 01                	push   0x1
c000e0e3:	6a 02                	push   0x2
c000e0e5:	50                   	push   eax
c000e0e6:	52                   	push   edx
c000e0e7:	53                   	push   ebx
c000e0e8:	e8 05 bb ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e0ed:	83 c4 20             	add    esp,0x20
c000e0f0:	09 f0                	or     eax,esi
c000e0f2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e0f6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e0fa:	25 ff 0f 00 00       	and    eax,0xfff
c000e0ff:	89 c6                	mov    esi,eax
c000e101:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c000e107:	83 ec 0c             	sub    esp,0xc
c000e10a:	6a 02                	push   0x2
c000e10c:	e8 74 b1 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000e111:	83 c4 10             	add    esp,0x10
c000e114:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e118:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e11e:	83 ec 0c             	sub    esp,0xc
c000e121:	6a 01                	push   0x1
c000e123:	6a 02                	push   0x2
c000e125:	50                   	push   eax
c000e126:	52                   	push   edx
c000e127:	53                   	push   ebx
c000e128:	e8 c5 ba ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e12d:	83 c4 20             	add    esp,0x20
c000e130:	09 f0                	or     eax,esi
c000e132:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e136:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e13b:	75 13                	jne    c000e150 <findRSDT(unsigned char*)+0x124>
c000e13d:	c6 05 c0 46 02 c0 00 	mov    BYTE PTR ds:0xc00246c0,0x0
c000e144:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e148:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e14c:	eb 22                	jmp    c000e170 <findRSDT(unsigned char*)+0x144>
c000e14e:	66 90                	xchg   ax,ax
c000e150:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e155:	75 11                	jne    c000e168 <findRSDT(unsigned char*)+0x13c>
c000e157:	c6 05 c0 46 02 c0 01 	mov    BYTE PTR ds:0xc00246c0,0x1
c000e15e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e162:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e166:	eb 08                	jmp    c000e170 <findRSDT(unsigned char*)+0x144>
c000e168:	b8 00 00 00 00       	mov    eax,0x0
c000e16d:	eb 05                	jmp    c000e174 <findRSDT(unsigned char*)+0x148>
c000e16f:	90                   	nop
c000e170:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e174:	83 c4 50             	add    esp,0x50
c000e177:	5b                   	pop    ebx
c000e178:	5e                   	pop    esi
c000e179:	5f                   	pop    edi
c000e17a:	c3                   	ret    
c000e17b:	90                   	nop

c000e17c <findDataTable(unsigned char*, char*)>:
c000e17c:	83 ec 1c             	sub    esp,0x1c
c000e17f:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e184:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e18a:	83 e0 04             	and    eax,0x4
c000e18d:	84 c0                	test   al,al
c000e18f:	75 07                	jne    c000e198 <findDataTable(unsigned char*, char*)+0x1c>
c000e191:	b8 00 00 00 00       	mov    eax,0x0
c000e196:	eb 58                	jmp    c000e1f0 <findDataTable(unsigned char*, char*)+0x74>
c000e198:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e1a0:	a1 ac 44 02 c0       	mov    eax,ds:0xc00244ac
c000e1a5:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e1a9:	7d 3d                	jge    c000e1e8 <findDataTable(unsigned char*, char*)+0x6c>
c000e1ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e1af:	c1 e0 03             	shl    eax,0x3
c000e1b2:	05 c0 44 02 c0       	add    eax,0xc00244c0
c000e1b7:	83 ec 04             	sub    esp,0x4
c000e1ba:	6a 04                	push   0x4
c000e1bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e1c0:	50                   	push   eax
c000e1c1:	e8 ca 21 ff ff       	call   c0000390 <memcmp>
c000e1c6:	83 c4 10             	add    esp,0x10
c000e1c9:	85 c0                	test   eax,eax
c000e1cb:	0f 94 c0             	sete   al
c000e1ce:	84 c0                	test   al,al
c000e1d0:	74 0e                	je     c000e1e0 <findDataTable(unsigned char*, char*)+0x64>
c000e1d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e1d6:	8b 04 c5 c4 44 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdbb3c]
c000e1dd:	eb 11                	jmp    c000e1f0 <findDataTable(unsigned char*, char*)+0x74>
c000e1df:	90                   	nop
c000e1e0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e1e4:	eb ba                	jmp    c000e1a0 <findDataTable(unsigned char*, char*)+0x24>
c000e1e6:	66 90                	xchg   ax,ax
c000e1e8:	b8 00 00 00 00       	mov    eax,0x0
c000e1ed:	8d 76 00             	lea    esi,[esi+0x0]
c000e1f0:	83 c4 1c             	add    esp,0x1c
c000e1f3:	c3                   	ret    

c000e1f4 <scanMADT()>:
c000e1f4:	53                   	push   ebx
c000e1f5:	83 ec 38             	sub    esp,0x38
c000e1f8:	a1 d0 1e 02 c0       	mov    eax,ds:0xc0021ed0
c000e1fd:	25 00 04 00 00       	and    eax,0x400
c000e202:	74 14                	je     c000e218 <scanMADT()+0x24>
c000e204:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e209:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e20f:	83 e2 fb             	and    edx,0xfffffffb
c000e212:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e218:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e21d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e223:	83 e0 04             	and    eax,0x4
c000e226:	84 c0                	test   al,al
c000e228:	0f 84 8a 04 00 00    	je     c000e6b8 <scanMADT()+0x4c4>
c000e22e:	e8 05 fb ff ff       	call   c000dd38 <findRSDP()>
c000e233:	a3 cc 46 02 c0       	mov    ds:0xc00246cc,eax
c000e238:	a1 cc 46 02 c0       	mov    eax,ds:0xc00246cc
c000e23d:	85 c0                	test   eax,eax
c000e23f:	75 1b                	jne    c000e25c <scanMADT()+0x68>
c000e241:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e246:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e24c:	83 e2 fb             	and    edx,0xfffffffb
c000e24f:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e255:	e9 66 04 00 00       	jmp    c000e6c0 <scanMADT()+0x4cc>
c000e25a:	66 90                	xchg   ax,ax
c000e25c:	a1 cc 46 02 c0       	mov    eax,ds:0xc00246cc
c000e261:	83 ec 0c             	sub    esp,0xc
c000e264:	50                   	push   eax
c000e265:	e8 c2 fd ff ff       	call   c000e02c <findRSDT(unsigned char*)>
c000e26a:	83 c4 10             	add    esp,0x10
c000e26d:	a3 c8 46 02 c0       	mov    ds:0xc00246c8,eax
c000e272:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000e277:	85 c0                	test   eax,eax
c000e279:	75 19                	jne    c000e294 <scanMADT()+0xa0>
c000e27b:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e280:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e286:	83 e2 fb             	and    edx,0xfffffffb
c000e289:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e28f:	e9 2c 04 00 00       	jmp    c000e6c0 <scanMADT()+0x4cc>
c000e294:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000e299:	83 ec 0c             	sub    esp,0xc
c000e29c:	50                   	push   eax
c000e29d:	e8 26 fb ff ff       	call   c000ddc8 <loadACPITables(unsigned char*)>
c000e2a2:	83 c4 10             	add    esp,0x10
c000e2a5:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000e2aa:	83 ec 08             	sub    esp,0x8
c000e2ad:	68 d8 e3 01 c0       	push   0xc001e3d8
c000e2b2:	50                   	push   eax
c000e2b3:	e8 c4 fe ff ff       	call   c000e17c <findDataTable(unsigned char*, char*)>
c000e2b8:	83 c4 10             	add    esp,0x10
c000e2bb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e2bf:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e2c4:	75 1a                	jne    c000e2e0 <scanMADT()+0xec>
c000e2c6:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e2cb:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e2d1:	83 e2 fe             	and    edx,0xfffffffe
c000e2d4:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e2da:	e9 e1 03 00 00       	jmp    c000e6c0 <scanMADT()+0x4cc>
c000e2df:	90                   	nop
c000e2e0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e2e8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e2ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e2ef:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e2f3:	0f 87 c7 03 00 00    	ja     c000e6c0 <scanMADT()+0x4cc>
c000e2f9:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e301:	0f 87 b9 03 00 00    	ja     c000e6c0 <scanMADT()+0x4cc>
c000e307:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e30b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e30f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e313:	8d 50 01             	lea    edx,[eax+0x1]
c000e316:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e31a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e31e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e322:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e326:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e32a:	8d 50 01             	lea    edx,[eax+0x1]
c000e32d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e331:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e335:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e339:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e33d:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e342:	0f 86 74 03 00 00    	jbe    c000e6bc <scanMADT()+0x4c8>
c000e348:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e34d:	75 5d                	jne    c000e3ac <scanMADT()+0x1b8>
c000e34f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e353:	8d 50 01             	lea    edx,[eax+0x1]
c000e356:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e35a:	8a 15 c0 48 02 c0    	mov    dl,BYTE PTR ds:0xc00248c0
c000e360:	81 e2 ff 00 00 00    	and    edx,0xff
c000e366:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e36a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e36e:	88 82 00 49 02 c0    	mov    BYTE PTR [edx-0x3ffdb700],al
c000e374:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e378:	8d 42 01             	lea    eax,[edx+0x1]
c000e37b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e37f:	a0 c0 48 02 c0       	mov    al,ds:0xc00248c0
c000e384:	8d 48 01             	lea    ecx,[eax+0x1]
c000e387:	88 0d c0 48 02 c0    	mov    BYTE PTR ds:0xc00248c0,cl
c000e38d:	25 ff 00 00 00       	and    eax,0xff
c000e392:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e396:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e39a:	88 90 e0 48 02 c0    	mov    BYTE PTR [eax-0x3ffdb720],dl
c000e3a0:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e3a5:	e9 f6 02 00 00       	jmp    c000e6a0 <scanMADT()+0x4ac>
c000e3aa:	66 90                	xchg   ax,ax
c000e3ac:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000e3b1:	0f 85 29 01 00 00    	jne    c000e4e0 <scanMADT()+0x2ec>
c000e3b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3bb:	8d 50 01             	lea    edx,[eax+0x1]
c000e3be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e3c2:	8a 15 80 47 02 c0    	mov    dl,BYTE PTR ds:0xc0024780
c000e3c8:	81 e2 ff 00 00 00    	and    edx,0xff
c000e3ce:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e3d2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e3d6:	88 82 a0 47 02 c0    	mov    BYTE PTR [edx-0x3ffdb860],al
c000e3dc:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000e3e0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e3e4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3e8:	01 d0                	add    eax,edx
c000e3ea:	83 c0 2c             	add    eax,0x2c
c000e3ed:	8a 00                	mov    al,BYTE PTR [eax]
c000e3ef:	31 d2                	xor    edx,edx
c000e3f1:	88 c2                	mov    dl,al
c000e3f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3f7:	8d 48 01             	lea    ecx,[eax+0x1]
c000e3fa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e3fe:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e402:	25 ff 00 00 00       	and    eax,0xff
c000e407:	c1 e0 08             	shl    eax,0x8
c000e40a:	89 d1                	mov    ecx,edx
c000e40c:	09 c1                	or     ecx,eax
c000e40e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e412:	8d 50 02             	lea    edx,[eax+0x2]
c000e415:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e419:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e41d:	25 ff 00 00 00       	and    eax,0xff
c000e422:	c1 e0 10             	shl    eax,0x10
c000e425:	09 c1                	or     ecx,eax
c000e427:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e42b:	8d 50 03             	lea    edx,[eax+0x3]
c000e42e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e432:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e436:	25 ff 00 00 00       	and    eax,0xff
c000e43b:	c1 e0 18             	shl    eax,0x18
c000e43e:	09 c1                	or     ecx,eax
c000e440:	89 ca                	mov    edx,ecx
c000e442:	a0 80 47 02 c0       	mov    al,ds:0xc0024780
c000e447:	25 ff 00 00 00       	and    eax,0xff
c000e44c:	89 14 85 c0 47 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb840],edx
c000e453:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e458:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e45c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e460:	01 d0                	add    eax,edx
c000e462:	83 c0 2c             	add    eax,0x2c
c000e465:	8a 00                	mov    al,BYTE PTR [eax]
c000e467:	31 d2                	xor    edx,edx
c000e469:	88 c2                	mov    dl,al
c000e46b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e46f:	8d 48 01             	lea    ecx,[eax+0x1]
c000e472:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e476:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e47a:	25 ff 00 00 00       	and    eax,0xff
c000e47f:	c1 e0 08             	shl    eax,0x8
c000e482:	89 d1                	mov    ecx,edx
c000e484:	09 c1                	or     ecx,eax
c000e486:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e48a:	8d 50 02             	lea    edx,[eax+0x2]
c000e48d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e491:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e495:	25 ff 00 00 00       	and    eax,0xff
c000e49a:	c1 e0 10             	shl    eax,0x10
c000e49d:	09 c1                	or     ecx,eax
c000e49f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4a3:	8d 50 03             	lea    edx,[eax+0x3]
c000e4a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4aa:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e4ae:	25 ff 00 00 00       	and    eax,0xff
c000e4b3:	c1 e0 18             	shl    eax,0x18
c000e4b6:	09 c1                	or     ecx,eax
c000e4b8:	89 ca                	mov    edx,ecx
c000e4ba:	a0 80 47 02 c0       	mov    al,ds:0xc0024780
c000e4bf:	25 ff 00 00 00       	and    eax,0xff
c000e4c4:	89 14 85 40 48 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb7c0],edx
c000e4cb:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e4d0:	a0 80 47 02 c0       	mov    al,ds:0xc0024780
c000e4d5:	40                   	inc    eax
c000e4d6:	a2 80 47 02 c0       	mov    ds:0xc0024780,al
c000e4db:	e9 c0 01 00 00       	jmp    c000e6a0 <scanMADT()+0x4ac>
c000e4e0:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000e4e5:	0f 85 fd 00 00 00    	jne    c000e5e8 <scanMADT()+0x3f4>
c000e4eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4ef:	8d 50 01             	lea    edx,[eax+0x1]
c000e4f2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e4f6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4fa:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e4fe:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000e502:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e506:	8d 50 01             	lea    edx,[eax+0x1]
c000e509:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e50d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e511:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e515:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000e519:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e51d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e521:	01 d0                	add    eax,edx
c000e523:	83 c0 2c             	add    eax,0x2c
c000e526:	8a 00                	mov    al,BYTE PTR [eax]
c000e528:	31 d2                	xor    edx,edx
c000e52a:	88 c2                	mov    dl,al
c000e52c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e530:	8d 48 01             	lea    ecx,[eax+0x1]
c000e533:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e537:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e53b:	25 ff 00 00 00       	and    eax,0xff
c000e540:	c1 e0 08             	shl    eax,0x8
c000e543:	89 d1                	mov    ecx,edx
c000e545:	09 c1                	or     ecx,eax
c000e547:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e54b:	8d 50 02             	lea    edx,[eax+0x2]
c000e54e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e552:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e556:	25 ff 00 00 00       	and    eax,0xff
c000e55b:	c1 e0 10             	shl    eax,0x10
c000e55e:	09 c1                	or     ecx,eax
c000e560:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e564:	8d 50 03             	lea    edx,[eax+0x3]
c000e567:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e56b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e56f:	25 ff 00 00 00       	and    eax,0xff
c000e574:	c1 e0 18             	shl    eax,0x18
c000e577:	09 c8                	or     eax,ecx
c000e579:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e57d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e582:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e586:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e58a:	01 d0                	add    eax,edx
c000e58c:	83 c0 2c             	add    eax,0x2c
c000e58f:	8a 00                	mov    al,BYTE PTR [eax]
c000e591:	25 ff 00 00 00       	and    eax,0xff
c000e596:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e59a:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e59d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e5a1:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000e5a5:	81 e2 ff 00 00 00    	and    edx,0xff
c000e5ab:	c1 e2 08             	shl    edx,0x8
c000e5ae:	09 d0                	or     eax,edx
c000e5b0:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000e5b5:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e5ba:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e5be:	25 ff 00 00 00       	and    eax,0xff
c000e5c3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e5c7:	88 90 60 f8 01 c0    	mov    BYTE PTR [eax-0x3ffe07a0],dl
c000e5cd:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e5d1:	31 d2                	xor    edx,edx
c000e5d3:	88 c2                	mov    dl,al
c000e5d5:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000e5da:	66 89 84 12 60 47 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffdb8a0],ax
c000e5e2:	e9 b9 00 00 00       	jmp    c000e6a0 <scanMADT()+0x4ac>
c000e5e7:	90                   	nop
c000e5e8:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000e5ed:	0f 85 a1 00 00 00    	jne    c000e694 <scanMADT()+0x4a0>
c000e5f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5f7:	8d 50 01             	lea    edx,[eax+0x1]
c000e5fa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e5fe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e602:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e606:	25 ff 00 00 00       	and    eax,0xff
c000e60b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e60f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e613:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e617:	01 d0                	add    eax,edx
c000e619:	83 c0 2c             	add    eax,0x2c
c000e61c:	8a 00                	mov    al,BYTE PTR [eax]
c000e61e:	31 d2                	xor    edx,edx
c000e620:	88 c2                	mov    dl,al
c000e622:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e626:	8d 48 01             	lea    ecx,[eax+0x1]
c000e629:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e62d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e631:	25 ff 00 00 00       	and    eax,0xff
c000e636:	c1 e0 08             	shl    eax,0x8
c000e639:	09 d0                	or     eax,edx
c000e63b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e63f:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e644:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e648:	8d 50 01             	lea    edx,[eax+0x1]
c000e64b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e64f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e653:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e657:	25 ff 00 00 00       	and    eax,0xff
c000e65c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e664:	c1 e0 08             	shl    eax,0x8
c000e667:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e66b:	89 c1                	mov    ecx,eax
c000e66d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e671:	c1 e0 18             	shl    eax,0x18
c000e674:	89 c3                	mov    ebx,eax
c000e676:	a1 d0 46 02 c0       	mov    eax,ds:0xc00246d0
c000e67b:	8d 50 01             	lea    edx,[eax+0x1]
c000e67e:	89 15 d0 46 02 c0    	mov    DWORD PTR ds:0xc00246d0,edx
c000e684:	09 d9                	or     ecx,ebx
c000e686:	89 ca                	mov    edx,ecx
c000e688:	89 14 85 e0 46 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb920],edx
c000e68f:	eb 0f                	jmp    c000e6a0 <scanMADT()+0x4ac>
c000e691:	8d 76 00             	lea    esi,[esi+0x0]
c000e694:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000e699:	75 05                	jne    c000e6a0 <scanMADT()+0x4ac>
c000e69b:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000e6a0:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000e6a4:	31 d2                	xor    edx,edx
c000e6a6:	88 c2                	mov    dl,al
c000e6a8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e6ac:	01 d0                	add    eax,edx
c000e6ae:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e6b2:	e9 31 fc ff ff       	jmp    c000e2e8 <scanMADT()+0xf4>
c000e6b7:	90                   	nop
c000e6b8:	90                   	nop
c000e6b9:	eb 05                	jmp    c000e6c0 <scanMADT()+0x4cc>
c000e6bb:	90                   	nop
c000e6bc:	90                   	nop
c000e6bd:	8d 76 00             	lea    esi,[esi+0x0]
c000e6c0:	83 c4 38             	add    esp,0x38
c000e6c3:	5b                   	pop    ebx
c000e6c4:	c3                   	ret    
c000e6c5:	90                   	nop
c000e6c6:	66 90                	xchg   ax,ax

c000e6c8 <ACPI::ACPI()>:
c000e6c8:	83 ec 0c             	sub    esp,0xc
c000e6cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6cf:	83 ec 08             	sub    esp,0x8
c000e6d2:	68 dd e3 01 c0       	push   0xc001e3dd
c000e6d7:	50                   	push   eax
c000e6d8:	e8 7b d4 ff ff       	call   c000bb58 <Device::Device(char const*)>
c000e6dd:	83 c4 10             	add    esp,0x10
c000e6e0:	ba 14 e5 01 c0       	mov    edx,0xc001e514
c000e6e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6e9:	89 10                	mov    DWORD PTR [eax],edx
c000e6eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6ef:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000e6f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6fa:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e704:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e708:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000e712:	e8 dd fa ff ff       	call   c000e1f4 <scanMADT()>
c000e717:	90                   	nop
c000e718:	83 c4 0c             	add    esp,0xc
c000e71b:	c3                   	ret    

c000e71c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000e71c:	83 ec 2c             	sub    esp,0x2c
c000e71f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e723:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e727:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e72b:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000e72f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000e734:	88 d0                	mov    al,dl
c000e736:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e73a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e73f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e747:	90                   	nop
c000e748:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e74c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e752:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000e756:	0f 8d 9c 00 00 00    	jge    c000e7f8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000e75c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e760:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e764:	83 c2 2a             	add    edx,0x2a
c000e767:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000e76b:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000e770:	75 7a                	jne    c000e7ec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e772:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e776:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e77a:	83 c2 2a             	add    edx,0x2a
c000e77d:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000e781:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000e785:	75 65                	jne    c000e7ec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e787:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e78c:	74 3a                	je     c000e7c8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000e78e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e792:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e796:	83 c2 2a             	add    edx,0x2a
c000e799:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000e79d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7a1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e7a4:	39 c2                	cmp    edx,eax
c000e7a6:	74 10                	je     c000e7b8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000e7a8:	83 ec 0c             	sub    esp,0xc
c000e7ab:	68 58 e3 01 c0       	push   0xc001e358
c000e7b0:	e8 4e 1a 00 00       	call   c0010203 <KePanic(char const*)>
c000e7b5:	83 c4 10             	add    esp,0x10
c000e7b8:	83 ec 0c             	sub    esp,0xc
c000e7bb:	68 e2 e3 01 c0       	push   0xc001e3e2
c000e7c0:	e8 3e 1a 00 00       	call   c0010203 <KePanic(char const*)>
c000e7c5:	83 c4 10             	add    esp,0x10
c000e7c8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000e7cc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e7d0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e7d4:	83 c2 2a             	add    edx,0x2a
c000e7d7:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000e7db:	8b 02                	mov    eax,DWORD PTR [edx]
c000e7dd:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e7e0:	89 01                	mov    DWORD PTR [ecx],eax
c000e7e2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000e7e5:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e7ea:	66 90                	xchg   ax,ax
c000e7ec:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e7f0:	e9 53 ff ff ff       	jmp    c000e748 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000e7f5:	8d 76 00             	lea    esi,[esi+0x0]
c000e7f8:	90                   	nop
c000e7f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7fd:	83 c4 2c             	add    esp,0x2c
c000e800:	c2 04 00             	ret    0x4
c000e803:	90                   	nop

c000e804 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000e804:	83 ec 1c             	sub    esp,0x1c
c000e807:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e80b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e80f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e813:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000e818:	88 c8                	mov    al,cl
c000e81a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000e81e:	88 d0                	mov    al,dl
c000e820:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e824:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e828:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e82e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e832:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e835:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000e839:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000e83d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e841:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e847:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e84b:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000e84e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e852:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000e857:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e85b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e861:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000e865:	8d 48 01             	lea    ecx,[eax+0x1]
c000e868:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e86c:	83 c2 2a             	add    edx,0x2a
c000e86f:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000e873:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e877:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e87d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e881:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e884:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e888:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000e88c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e890:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e896:	8d 50 01             	lea    edx,[eax+0x1]
c000e899:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e89d:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000e8a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8a7:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e8ad:	3d 00 02 00 00       	cmp    eax,0x200
c000e8b2:	75 10                	jne    c000e8c4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000e8b4:	83 ec 0c             	sub    esp,0xc
c000e8b7:	68 f1 e3 01 c0       	push   0xc001e3f1
c000e8bc:	e8 42 19 00 00       	call   c0010203 <KePanic(char const*)>
c000e8c1:	83 c4 10             	add    esp,0x10
c000e8c4:	90                   	nop
c000e8c5:	83 c4 1c             	add    esp,0x1c
c000e8c8:	c3                   	ret    
c000e8c9:	90                   	nop
c000e8ca:	66 90                	xchg   ax,ax

c000e8cc <ACPI::setScreenBrightnessLevel(void*, int)>:
c000e8cc:	b8 00 00 00 00       	mov    eax,0x0
c000e8d1:	c3                   	ret    
c000e8d2:	66 90                	xchg   ax,ax

c000e8d4 <ACPI::detectPCI()>:
c000e8d4:	53                   	push   ebx
c000e8d5:	83 ec 28             	sub    esp,0x28
c000e8d8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e8dd:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000e8e2:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e8e7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e8ed:	83 e0 04             	and    eax,0x4
c000e8f0:	84 c0                	test   al,al
c000e8f2:	74 2c                	je     c000e920 <ACPI::detectPCI()+0x4c>
c000e8f4:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000e8f9:	83 ec 08             	sub    esp,0x8
c000e8fc:	68 0e e4 01 c0       	push   0xc001e40e
c000e901:	50                   	push   eax
c000e902:	e8 75 f8 ff ff       	call   c000e17c <findDataTable(unsigned char*, char*)>
c000e907:	83 c4 10             	add    esp,0x10
c000e90a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e90e:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000e913:	74 0b                	je     c000e920 <ACPI::detectPCI()+0x4c>
c000e915:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e91a:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e91f:	90                   	nop
c000e920:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000e928:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e92c:	8a 00                	mov    al,BYTE PTR [eax]
c000e92e:	3c 01                	cmp    al,0x1
c000e930:	75 0e                	jne    c000e940 <ACPI::detectPCI()+0x6c>
c000e932:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e937:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e93c:	eb 2a                	jmp    c000e968 <ACPI::detectPCI()+0x94>
c000e93e:	66 90                	xchg   ax,ax
c000e940:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e944:	8a 00                	mov    al,BYTE PTR [eax]
c000e946:	3c 02                	cmp    al,0x2
c000e948:	75 1e                	jne    c000e968 <ACPI::detectPCI()+0x94>
c000e94a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e94f:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e954:	74 12                	je     c000e968 <ACPI::detectPCI()+0x94>
c000e956:	83 ec 0c             	sub    esp,0xc
c000e959:	68 88 e3 01 c0       	push   0xc001e388
c000e95e:	e8 a0 18 00 00       	call   c0010203 <KePanic(char const*)>
c000e963:	83 c4 10             	add    esp,0x10
c000e966:	66 90                	xchg   ax,ax
c000e968:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000e96c:	83 f0 01             	xor    eax,0x1
c000e96f:	84 c0                	test   al,al
c000e971:	74 41                	je     c000e9b4 <ACPI::detectPCI()+0xe0>
c000e973:	e8 b8 17 ff ff       	call   c0000130 <manualPCIProbe>
c000e978:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e97c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e981:	75 0d                	jne    c000e990 <ACPI::detectPCI()+0xbc>
c000e983:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e988:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e98d:	eb 25                	jmp    c000e9b4 <ACPI::detectPCI()+0xe0>
c000e98f:	90                   	nop
c000e990:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000e995:	75 1d                	jne    c000e9b4 <ACPI::detectPCI()+0xe0>
c000e997:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e99c:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e9a1:	74 11                	je     c000e9b4 <ACPI::detectPCI()+0xe0>
c000e9a3:	83 ec 0c             	sub    esp,0xc
c000e9a6:	68 88 e3 01 c0       	push   0xc001e388
c000e9ab:	e8 53 18 00 00       	call   c0010203 <KePanic(char const*)>
c000e9b0:	83 c4 10             	add    esp,0x10
c000e9b3:	90                   	nop
c000e9b4:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e9b9:	0f 84 85 00 00 00    	je     c000ea44 <ACPI::detectPCI()+0x170>
c000e9bf:	83 ec 0c             	sub    esp,0xc
c000e9c2:	68 13 e4 01 c0       	push   0xc001e413
c000e9c7:	e8 bf 11 00 00       	call   c000fb8b <KeSetBootMessage(char const*)>
c000e9cc:	83 c4 10             	add    esp,0x10
c000e9cf:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000e9d7:	83 ec 0c             	sub    esp,0xc
c000e9da:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e9de:	e8 d6 8d ff ff       	call   c00077b9 <malloc>
c000e9e3:	83 c4 10             	add    esp,0x10
c000e9e6:	89 c3                	mov    ebx,eax
c000e9e8:	83 ec 0c             	sub    esp,0xc
c000e9eb:	53                   	push   ebx
c000e9ec:	e8 ad 9a 00 00       	call   c001849e <PCI::PCI()>
c000e9f1:	83 c4 10             	add    esp,0x10
c000e9f4:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e9f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e9fc:	83 ec 08             	sub    esp,0x8
c000e9ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ea03:	50                   	push   eax
c000ea04:	e8 b7 cf ff ff       	call   c000b9c0 <Device::addChild(Device*)>
c000ea09:	83 c4 10             	add    esp,0x10
c000ea0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea10:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea12:	83 c0 08             	add    eax,0x8
c000ea15:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea17:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000ea1c:	74 0a                	je     c000ea28 <ACPI::detectPCI()+0x154>
c000ea1e:	ba 01 00 00 00       	mov    edx,0x1
c000ea23:	eb 0b                	jmp    c000ea30 <ACPI::detectPCI()+0x15c>
c000ea25:	8d 76 00             	lea    esi,[esi+0x0]
c000ea28:	ba 02 00 00 00       	mov    edx,0x2
c000ea2d:	8d 76 00             	lea    esi,[esi+0x0]
c000ea30:	6a 00                	push   0x0
c000ea32:	6a 00                	push   0x0
c000ea34:	52                   	push   edx
c000ea35:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ea39:	ff d0                	call   eax
c000ea3b:	83 c4 10             	add    esp,0x10
c000ea3e:	e9 91 00 00 00       	jmp    c000ead4 <ACPI::detectPCI()+0x200>
c000ea43:	90                   	nop
c000ea44:	83 ec 0c             	sub    esp,0xc
c000ea47:	68 2b e4 01 c0       	push   0xc001e42b
c000ea4c:	e8 3a 11 00 00       	call   c000fb8b <KeSetBootMessage(char const*)>
c000ea51:	83 c4 10             	add    esp,0x10
c000ea54:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000ea5b:	83 ec 0c             	sub    esp,0xc
c000ea5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ea62:	e8 52 8d ff ff       	call   c00077b9 <malloc>
c000ea67:	83 c4 10             	add    esp,0x10
c000ea6a:	89 c3                	mov    ebx,eax
c000ea6c:	83 ec 0c             	sub    esp,0xc
c000ea6f:	53                   	push   ebx
c000ea70:	e8 55 a5 00 00       	call   c0018fca <IDE::IDE()>
c000ea75:	83 c4 10             	add    esp,0x10
c000ea78:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000ea7c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea80:	83 ec 08             	sub    esp,0x8
c000ea83:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ea87:	50                   	push   eax
c000ea88:	e8 33 cf ff ff       	call   c000b9c0 <Device::addChild(Device*)>
c000ea8d:	83 c4 10             	add    esp,0x10
c000ea90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ea94:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000ea9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eaa2:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000eaab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eaaf:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000eab8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eabc:	8b 00                	mov    eax,DWORD PTR [eax]
c000eabe:	83 c0 08             	add    eax,0x8
c000eac1:	8b 00                	mov    eax,DWORD PTR [eax]
c000eac3:	6a 00                	push   0x0
c000eac5:	6a 00                	push   0x0
c000eac7:	6a 00                	push   0x0
c000eac9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000eacd:	ff d0                	call   eax
c000eacf:	83 c4 10             	add    esp,0x10
c000ead2:	66 90                	xchg   ax,ax
c000ead4:	90                   	nop
c000ead5:	83 c4 28             	add    esp,0x28
c000ead8:	5b                   	pop    ebx
c000ead9:	c3                   	ret    
c000eada:	66 90                	xchg   ax,ax

c000eadc <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000eadc:	83 ec 1c             	sub    esp,0x1c
c000eadf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000eae3:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000eae6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000eaea:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c000eaf0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000eaf4:	25 ff 00 00 00       	and    eax,0xff
c000eaf9:	83 ec 08             	sub    esp,0x8
c000eafc:	50                   	push   eax
c000eafd:	52                   	push   edx
c000eafe:	e8 a3 83 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c000eb03:	83 c4 10             	add    esp,0x10
c000eb06:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000eb0a:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c000eb10:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000eb14:	25 ff 00 00 00       	and    eax,0xff
c000eb19:	83 ec 04             	sub    esp,0x4
c000eb1c:	6a 01                	push   0x1
c000eb1e:	50                   	push   eax
c000eb1f:	52                   	push   edx
c000eb20:	e8 97 84 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c000eb25:	83 c4 10             	add    esp,0x10
c000eb28:	90                   	nop
c000eb29:	83 c4 1c             	add    esp,0x1c
c000eb2c:	c3                   	ret    
c000eb2d:	90                   	nop
c000eb2e:	66 90                	xchg   ax,ax

c000eb30 <ACPI::sleep()>:
c000eb30:	83 ec 0c             	sub    esp,0xc
c000eb33:	a1 a0 44 02 c0       	mov    eax,ds:0xc00244a0
c000eb38:	85 c0                	test   eax,eax
c000eb3a:	74 08                	je     c000eb44 <ACPI::sleep()+0x14>
c000eb3c:	a1 a0 44 02 c0       	mov    eax,ds:0xc00244a0
c000eb41:	ff d0                	call   eax
c000eb43:	90                   	nop
c000eb44:	90                   	nop
c000eb45:	83 c4 0c             	add    esp,0xc
c000eb48:	c3                   	ret    
c000eb49:	90                   	nop
c000eb4a:	66 90                	xchg   ax,ax

c000eb4c <ACPI::open(int, int, void*)>:
c000eb4c:	57                   	push   edi
c000eb4d:	56                   	push   esi
c000eb4e:	53                   	push   ebx
c000eb4f:	81 ec 70 01 00 00    	sub    esp,0x170
c000eb55:	83 ec 0c             	sub    esp,0xc
c000eb58:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000eb5f:	e8 70 fd ff ff       	call   c000e8d4 <ACPI::detectPCI()>
c000eb64:	83 c4 10             	add    esp,0x10
c000eb67:	83 ec 0c             	sub    esp,0xc
c000eb6a:	68 b0 e3 01 c0       	push   0xc001e3b0
c000eb6f:	e8 17 10 00 00       	call   c000fb8b <KeSetBootMessage(char const*)>
c000eb74:	83 c4 10             	add    esp,0x10
c000eb77:	83 ec 0c             	sub    esp,0xc
c000eb7a:	68 40 e4 01 c0       	push   0xc001e440
c000eb7f:	e8 d2 37 00 00       	call   c0012356 <Thr::loadKernelSymbolTable(char const*)>
c000eb84:	83 c4 10             	add    esp,0x10
c000eb87:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000eb8f:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000eb9a:	83 ec 0c             	sub    esp,0xc
c000eb9d:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000eba4:	e8 10 8c ff ff       	call   c00077b9 <malloc>
c000eba9:	83 c4 10             	add    esp,0x10
c000ebac:	89 c3                	mov    ebx,eax
c000ebae:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000ebb3:	83 ec 04             	sub    esp,0x4
c000ebb6:	50                   	push   eax
c000ebb7:	68 5e e4 01 c0       	push   0xc001e45e
c000ebbc:	53                   	push   ebx
c000ebbd:	e8 34 bf ff ff       	call   c000aaf6 <File::File(char const*, Process*)>
c000ebc2:	83 c4 10             	add    esp,0x10
c000ebc5:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000ebcc:	83 ec 08             	sub    esp,0x8
c000ebcf:	6a 01                	push   0x1
c000ebd1:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ebd8:	e8 d9 bf ff ff       	call   c000abb6 <File::open(FileOpenMode)>
c000ebdd:	83 c4 10             	add    esp,0x10
c000ebe0:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000ebe7:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000ebef:	75 17                	jne    c000ec08 <ACPI::open(int, int, void*)+0xbc>
c000ebf1:	83 ec 0c             	sub    esp,0xc
c000ebf4:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ebfb:	e8 14 c0 ff ff       	call   c000ac14 <File::close()>
c000ec00:	83 c4 10             	add    esp,0x10
c000ec03:	eb 0b                	jmp    c000ec10 <ACPI::open(int, int, void*)+0xc4>
c000ec05:	8d 76 00             	lea    esi,[esi+0x0]
c000ec08:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000ec10:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000ec18:	74 1e                	je     c000ec38 <ACPI::open(int, int, void*)+0xec>
c000ec1a:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000ec21:	8b 00                	mov    eax,DWORD PTR [eax]
c000ec23:	83 c0 08             	add    eax,0x8
c000ec26:	8b 00                	mov    eax,DWORD PTR [eax]
c000ec28:	83 ec 0c             	sub    esp,0xc
c000ec2b:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ec32:	ff d0                	call   eax
c000ec34:	83 c4 10             	add    esp,0x10
c000ec37:	90                   	nop
c000ec38:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000ec3f:	83 f0 01             	xor    eax,0x1
c000ec42:	84 c0                	test   al,al
c000ec44:	74 42                	je     c000ec88 <ACPI::open(int, int, void*)+0x13c>
c000ec46:	83 ec 0c             	sub    esp,0xc
c000ec49:	68 7c e4 01 c0       	push   0xc001e47c
c000ec4e:	e8 38 0f 00 00       	call   c000fb8b <KeSetBootMessage(char const*)>
c000ec53:	83 c4 10             	add    esp,0x10
c000ec56:	83 ec 04             	sub    esp,0x4
c000ec59:	6a 0c                	push   0xc
c000ec5b:	68 97 e4 01 c0       	push   0xc001e497
c000ec60:	68 a8 e4 01 c0       	push   0xc001e4a8
c000ec65:	e8 dc 2c 00 00       	call   c0011946 <Reg::readIntWithDefault(char*, char*, int)>
c000ec6a:	83 c4 10             	add    esp,0x10
c000ec6d:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000ec74:	83 ec 0c             	sub    esp,0xc
c000ec77:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000ec7e:	e8 0c a8 ff ff       	call   c000948f <Virt::setupPageSwapping(int)>
c000ec83:	83 c4 10             	add    esp,0x10
c000ec86:	66 90                	xchg   ax,ax
c000ec88:	83 ec 0c             	sub    esp,0xc
c000ec8b:	68 d7 d4 01 c0       	push   0xc001d4d7
c000ec90:	e8 f6 0e 00 00       	call   c000fb8b <KeSetBootMessage(char const*)>
c000ec95:	83 c4 10             	add    esp,0x10
c000ec98:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000ec9f:	83 ec 08             	sub    esp,0x8
c000eca2:	6a 12                	push   0x12
c000eca4:	50                   	push   eax
c000eca5:	e8 2e d0 ff ff       	call   c000bcd8 <getDevicesOfType(DeviceType)>
c000ecaa:	83 c4 0c             	add    esp,0xc
c000ecad:	8d 76 00             	lea    esi,[esi+0x0]
c000ecb0:	83 ec 0c             	sub    esp,0xc
c000ecb3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ecba:	50                   	push   eax
c000ecbb:	e8 6c dc 00 00       	call   c001c92c <LinkedList<Device>::isEmpty()>
c000ecc0:	83 c4 10             	add    esp,0x10
c000ecc3:	83 f0 01             	xor    eax,0x1
c000ecc6:	84 c0                	test   al,al
c000ecc8:	0f 84 46 01 00 00    	je     c000ee14 <ACPI::open(int, int, void*)+0x2c8>
c000ecce:	83 ec 0c             	sub    esp,0xc
c000ecd1:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ecd8:	50                   	push   eax
c000ecd9:	e8 6a dc 00 00       	call   c001c948 <LinkedList<Device>::getFirstElement()>
c000ecde:	83 c4 10             	add    esp,0x10
c000ece1:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000ece8:	83 ec 0c             	sub    esp,0xc
c000eceb:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ecf2:	50                   	push   eax
c000ecf3:	e8 58 dc 00 00       	call   c001c950 <LinkedList<Device>::removeFirst()>
c000ecf8:	83 c4 10             	add    esp,0x10
c000ecfb:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000ed02:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000ed09:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000ed10:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ed14:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000ed1a:	ba 09 00 00 00       	mov    edx,0x9
c000ed1f:	fc                   	cld    
c000ed20:	89 c7                	mov    edi,eax
c000ed22:	89 de                	mov    esi,ebx
c000ed24:	89 d1                	mov    ecx,edx
c000ed26:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ed28:	83 ec 08             	sub    esp,0x8
c000ed2b:	8d 44 24 38          	lea    eax,[esp+0x38]
c000ed2f:	50                   	push   eax
c000ed30:	83 ec 24             	sub    esp,0x24
c000ed33:	89 e0                	mov    eax,esp
c000ed35:	89 c3                	mov    ebx,eax
c000ed37:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000ed3b:	ba 09 00 00 00       	mov    edx,0x9
c000ed40:	89 df                	mov    edi,ebx
c000ed42:	89 c6                	mov    esi,eax
c000ed44:	89 d1                	mov    ecx,edx
c000ed46:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ed48:	e8 33 9c 00 00       	call   c0018980 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ed4d:	83 c4 30             	add    esp,0x30
c000ed50:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000ed57:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000ed5f:	0f 84 4b ff ff ff    	je     c000ecb0 <ACPI::open(int, int, void*)+0x164>
c000ed65:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000ed70:	83 ec 0c             	sub    esp,0xc
c000ed73:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ed7a:	e8 3a 8a ff ff       	call   c00077b9 <malloc>
c000ed7f:	83 c4 10             	add    esp,0x10
c000ed82:	89 c3                	mov    ebx,eax
c000ed84:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000ed89:	83 ec 04             	sub    esp,0x4
c000ed8c:	50                   	push   eax
c000ed8d:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ed94:	53                   	push   ebx
c000ed95:	e8 5c bd ff ff       	call   c000aaf6 <File::File(char const*, Process*)>
c000ed9a:	83 c4 10             	add    esp,0x10
c000ed9d:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000eda4:	83 ec 0c             	sub    esp,0xc
c000eda7:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000edae:	e8 71 c0 ff ff       	call   c000ae24 <File::exists()>
c000edb3:	83 c4 10             	add    esp,0x10
c000edb6:	84 c0                	test   al,al
c000edb8:	74 2a                	je     c000ede4 <ACPI::open(int, int, void*)+0x298>
c000edba:	83 ec 08             	sub    esp,0x8
c000edbd:	6a 01                	push   0x1
c000edbf:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000edc6:	e8 02 40 00 00       	call   c0012dcd <Thr::loadDLL(char const*, bool)>
c000edcb:	83 c4 10             	add    esp,0x10
c000edce:	83 ec 08             	sub    esp,0x8
c000edd1:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000edd8:	50                   	push   eax
c000edd9:	e8 20 42 00 00       	call   c0012ffe <Thr::executeDLL(unsigned long, void*)>
c000edde:	83 c4 10             	add    esp,0x10
c000ede1:	8d 76 00             	lea    esi,[esi+0x0]
c000ede4:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000edec:	0f 84 be fe ff ff    	je     c000ecb0 <ACPI::open(int, int, void*)+0x164>
c000edf2:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000edf9:	8b 00                	mov    eax,DWORD PTR [eax]
c000edfb:	83 c0 08             	add    eax,0x8
c000edfe:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee00:	83 ec 0c             	sub    esp,0xc
c000ee03:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ee0a:	ff d0                	call   eax
c000ee0c:	83 c4 10             	add    esp,0x10
c000ee0f:	e9 9c fe ff ff       	jmp    c000ecb0 <ACPI::open(int, int, void*)+0x164>
c000ee14:	83 ec 0c             	sub    esp,0xc
c000ee17:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ee1e:	50                   	push   eax
c000ee1f:	e8 04 db 00 00       	call   c001c928 <LinkedList<Device>::~LinkedList()>
c000ee24:	83 c4 10             	add    esp,0x10
c000ee27:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000ee2d:	83 ec 08             	sub    esp,0x8
c000ee30:	6a 01                	push   0x1
c000ee32:	68 af e4 01 c0       	push   0xc001e4af
c000ee37:	e8 91 3f 00 00       	call   c0012dcd <Thr::loadDLL(char const*, bool)>
c000ee3c:	83 c4 10             	add    esp,0x10
c000ee3f:	83 ec 08             	sub    esp,0x8
c000ee42:	53                   	push   ebx
c000ee43:	50                   	push   eax
c000ee44:	e8 b5 41 00 00       	call   c0012ffe <Thr::executeDLL(unsigned long, void*)>
c000ee49:	83 c4 10             	add    esp,0x10
c000ee4c:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000ee51:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ee57:	83 e0 04             	and    eax,0x4
c000ee5a:	84 c0                	test   al,al
c000ee5c:	0f 84 16 01 00 00    	je     c000ef78 <ACPI::open(int, int, void*)+0x42c>
c000ee62:	83 ec 0c             	sub    esp,0xc
c000ee65:	68 cc e4 01 c0       	push   0xc001e4cc
c000ee6a:	e8 1c 0d 00 00       	call   c000fb8b <KeSetBootMessage(char const*)>
c000ee6f:	83 c4 10             	add    esp,0x10
c000ee72:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000ee7d:	83 ec 0c             	sub    esp,0xc
c000ee80:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000ee87:	e8 2d 89 ff ff       	call   c00077b9 <malloc>
c000ee8c:	83 c4 10             	add    esp,0x10
c000ee8f:	89 c3                	mov    ebx,eax
c000ee91:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000ee96:	83 ec 04             	sub    esp,0x4
c000ee99:	50                   	push   eax
c000ee9a:	68 e9 e4 01 c0       	push   0xc001e4e9
c000ee9f:	53                   	push   ebx
c000eea0:	e8 51 bc ff ff       	call   c000aaf6 <File::File(char const*, Process*)>
c000eea5:	83 c4 10             	add    esp,0x10
c000eea8:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000eeaf:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000eeb7:	74 1b                	je     c000eed4 <ACPI::open(int, int, void*)+0x388>
c000eeb9:	83 ec 0c             	sub    esp,0xc
c000eebc:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000eec3:	e8 5c bf ff ff       	call   c000ae24 <File::exists()>
c000eec8:	83 c4 10             	add    esp,0x10
c000eecb:	84 c0                	test   al,al
c000eecd:	74 05                	je     c000eed4 <ACPI::open(int, int, void*)+0x388>
c000eecf:	b0 01                	mov    al,0x1
c000eed1:	eb 05                	jmp    c000eed8 <ACPI::open(int, int, void*)+0x38c>
c000eed3:	90                   	nop
c000eed4:	b0 00                	mov    al,0x0
c000eed6:	66 90                	xchg   ax,ax
c000eed8:	84 c0                	test   al,al
c000eeda:	74 28                	je     c000ef04 <ACPI::open(int, int, void*)+0x3b8>
c000eedc:	83 ec 08             	sub    esp,0x8
c000eedf:	6a 01                	push   0x1
c000eee1:	68 e9 e4 01 c0       	push   0xc001e4e9
c000eee6:	e8 e2 3e 00 00       	call   c0012dcd <Thr::loadDLL(char const*, bool)>
c000eeeb:	83 c4 10             	add    esp,0x10
c000eeee:	83 ec 08             	sub    esp,0x8
c000eef1:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000eef8:	50                   	push   eax
c000eef9:	e8 00 41 00 00       	call   c0012ffe <Thr::executeDLL(unsigned long, void*)>
c000eefe:	83 c4 10             	add    esp,0x10
c000ef01:	8d 76 00             	lea    esi,[esi+0x0]
c000ef04:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ef0c:	74 2a                	je     c000ef38 <ACPI::open(int, int, void*)+0x3ec>
c000ef0e:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ef16:	74 20                	je     c000ef38 <ACPI::open(int, int, void*)+0x3ec>
c000ef18:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000ef1f:	8b 00                	mov    eax,DWORD PTR [eax]
c000ef21:	83 c0 08             	add    eax,0x8
c000ef24:	8b 00                	mov    eax,DWORD PTR [eax]
c000ef26:	83 ec 0c             	sub    esp,0xc
c000ef29:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000ef30:	ff d0                	call   eax
c000ef32:	83 c4 10             	add    esp,0x10
c000ef35:	8d 76 00             	lea    esi,[esi+0x0]
c000ef38:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000ef3d:	83 ec 08             	sub    esp,0x8
c000ef40:	68 06 e5 01 c0       	push   0xc001e506
c000ef45:	50                   	push   eax
c000ef46:	e8 31 f2 ff ff       	call   c000e17c <findDataTable(unsigned char*, char*)>
c000ef4b:	83 c4 10             	add    esp,0x10
c000ef4e:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000ef55:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000ef5d:	74 19                	je     c000ef78 <ACPI::open(int, int, void*)+0x42c>
c000ef5f:	83 ec 08             	sub    esp,0x8
c000ef62:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000ef69:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ef70:	e8 67 fb ff ff       	call   c000eadc <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000ef75:	83 c4 10             	add    esp,0x10
c000ef78:	b8 00 00 00 00       	mov    eax,0x0
c000ef7d:	81 c4 70 01 00 00    	add    esp,0x170
c000ef83:	5b                   	pop    ebx
c000ef84:	5e                   	pop    esi
c000ef85:	5f                   	pop    edi
c000ef86:	c3                   	ret    
c000ef87:	90                   	nop

c000ef88 <CPU::close(int, int, void*)>:
c000ef88:	31 c0                	xor    eax,eax
c000ef8a:	c3                   	ret    
c000ef8b:	90                   	nop

c000ef8c <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000ef8c:	60                   	pusha  
c000ef8d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ef91:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef95:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ef99:	9c                   	pushf  
c000ef9a:	fa                   	cli    
c000ef9b:	0f 09                	wbinvd 
c000ef9d:	0f 30                	wrmsr  
c000ef9f:	9d                   	popf   
c000efa0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000efa4:	89 02                	mov    DWORD PTR [edx],eax
c000efa6:	61                   	popa   
c000efa7:	c3                   	ret    

c000efa8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000efa8:	60                   	pusha  
c000efa9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000efad:	9c                   	pushf  
c000efae:	fa                   	cli    
c000efaf:	0f 09                	wbinvd 
c000efb1:	31 c0                	xor    eax,eax
c000efb3:	31 d2                	xor    edx,edx
c000efb5:	0f 32                	rdmsr  
c000efb7:	9d                   	popf   
c000efb8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000efbc:	89 02                	mov    DWORD PTR [edx],eax
c000efbe:	61                   	popa   
c000efbf:	c3                   	ret    

c000efc0 <CPU::AMD_K6_writeback(int, int, int)>:
c000efc0:	56                   	push   esi
c000efc1:	53                   	push   ebx
c000efc2:	83 ec 10             	sub    esp,0x10
c000efc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000efc9:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000efce:	75 5d                	jne    c000f02d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000efd0:	83 f8 08             	cmp    eax,0x8
c000efd3:	75 09                	jne    c000efde <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000efd5:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000efda:	7e 13                	jle    c000efef <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000efdc:	eb 30                	jmp    c000f00e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000efde:	83 f8 06             	cmp    eax,0x6
c000efe1:	7c 4a                	jl     c000f02d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000efe3:	83 f8 07             	cmp    eax,0x7
c000efe6:	7e 07                	jle    c000efef <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000efe8:	83 f8 09             	cmp    eax,0x9
c000efeb:	74 21                	je     c000f00e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000efed:	eb 3e                	jmp    c000f02d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000efef:	89 e6                	mov    esi,esp
c000eff1:	8b 1d dc 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021edc
c000eff7:	56                   	push   esi
c000eff8:	c1 eb 15             	shr    ebx,0x15
c000effb:	68 82 00 00 c0       	push   0xc0000082
c000f000:	83 e3 7e             	and    ebx,0x7e
c000f003:	e8 a0 ff ff ff       	call   c000efa8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f008:	56                   	push   esi
c000f009:	6a 00                	push   0x0
c000f00b:	53                   	push   ebx
c000f00c:	eb 12                	jmp    c000f020 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f00e:	89 e3                	mov    ebx,esp
c000f010:	53                   	push   ebx
c000f011:	68 82 00 00 c0       	push   0xc0000082
c000f016:	e8 8d ff ff ff       	call   c000efa8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f01b:	53                   	push   ebx
c000f01c:	6a 00                	push   0x0
c000f01e:	6a 00                	push   0x0
c000f020:	68 82 00 00 c0       	push   0xc0000082
c000f025:	e8 62 ff ff ff       	call   c000ef8c <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f02a:	83 c4 18             	add    esp,0x18
c000f02d:	83 c4 10             	add    esp,0x10
c000f030:	5b                   	pop    ebx
c000f031:	5e                   	pop    esi
c000f032:	c3                   	ret    
c000f033:	90                   	nop

c000f034 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f034:	55                   	push   ebp
c000f035:	57                   	push   edi
c000f036:	56                   	push   esi
c000f037:	53                   	push   ebx
c000f038:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f03c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f040:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f044:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f048:	39 05 70 f8 01 c0    	cmp    DWORD PTR ds:0xc001f870,eax
c000f04e:	75 23                	jne    c000f073 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f050:	a1 2c 49 02 c0       	mov    eax,ds:0xc002492c
c000f055:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f059:	89 06                	mov    DWORD PTR [esi],eax
c000f05b:	a1 28 49 02 c0       	mov    eax,ds:0xc0024928
c000f060:	89 07                	mov    DWORD PTR [edi],eax
c000f062:	a1 24 49 02 c0       	mov    eax,ds:0xc0024924
c000f067:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f06a:	a1 20 49 02 c0       	mov    eax,ds:0xc0024920
c000f06f:	89 02                	mov    DWORD PTR [edx],eax
c000f071:	eb 3f                	jmp    c000f0b2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f073:	31 c9                	xor    ecx,ecx
c000f075:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f079:	0f a2                	cpuid  
c000f07b:	89 06                	mov    DWORD PTR [esi],eax
c000f07d:	89 1f                	mov    DWORD PTR [edi],ebx
c000f07f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f083:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f086:	89 10                	mov    DWORD PTR [eax],edx
c000f088:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f08c:	a3 70 f8 01 c0       	mov    ds:0xc001f870,eax
c000f091:	8b 06                	mov    eax,DWORD PTR [esi]
c000f093:	a3 2c 49 02 c0       	mov    ds:0xc002492c,eax
c000f098:	8b 07                	mov    eax,DWORD PTR [edi]
c000f09a:	a3 28 49 02 c0       	mov    ds:0xc0024928,eax
c000f09f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f0a2:	a3 24 49 02 c0       	mov    ds:0xc0024924,eax
c000f0a7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f0ab:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0ad:	a3 20 49 02 c0       	mov    ds:0xc0024920,eax
c000f0b2:	5b                   	pop    ebx
c000f0b3:	5e                   	pop    esi
c000f0b4:	5f                   	pop    edi
c000f0b5:	5d                   	pop    ebp
c000f0b6:	c3                   	ret    
c000f0b7:	90                   	nop

c000f0b8 <CPU::cpuidCheckEDX(unsigned int)>:
c000f0b8:	83 ec 10             	sub    esp,0x10
c000f0bb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0bf:	50                   	push   eax
c000f0c0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0c4:	50                   	push   eax
c000f0c5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0c9:	50                   	push   eax
c000f0ca:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0ce:	50                   	push   eax
c000f0cf:	6a 01                	push   0x1
c000f0d1:	e8 5e ff ff ff       	call   c000f034 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f0d6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f0da:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f0de:	0f 95 c0             	setne  al
c000f0e1:	83 c4 24             	add    esp,0x24
c000f0e4:	c3                   	ret    
c000f0e5:	90                   	nop

c000f0e6 <CPU::cpuidCheckECX(unsigned int)>:
c000f0e6:	83 ec 10             	sub    esp,0x10
c000f0e9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0ed:	50                   	push   eax
c000f0ee:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0f2:	50                   	push   eax
c000f0f3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0f7:	50                   	push   eax
c000f0f8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0fc:	50                   	push   eax
c000f0fd:	6a 01                	push   0x1
c000f0ff:	e8 30 ff ff ff       	call   c000f034 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f104:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f108:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f10c:	0f 95 c0             	setne  al
c000f10f:	83 c4 24             	add    esp,0x24
c000f112:	c3                   	ret    
c000f113:	90                   	nop

c000f114 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f114:	83 ec 10             	sub    esp,0x10
c000f117:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f11b:	50                   	push   eax
c000f11c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f120:	50                   	push   eax
c000f121:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f125:	50                   	push   eax
c000f126:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f12a:	50                   	push   eax
c000f12b:	6a 07                	push   0x7
c000f12d:	e8 02 ff ff ff       	call   c000f034 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f132:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f136:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f13a:	0f 95 c0             	setne  al
c000f13d:	83 c4 24             	add    esp,0x24
c000f140:	c3                   	ret    
c000f141:	90                   	nop

c000f142 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f142:	83 ec 10             	sub    esp,0x10
c000f145:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f149:	50                   	push   eax
c000f14a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f14e:	50                   	push   eax
c000f14f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f153:	50                   	push   eax
c000f154:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f158:	50                   	push   eax
c000f159:	6a 07                	push   0x7
c000f15b:	e8 d4 fe ff ff       	call   c000f034 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f160:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f164:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f168:	0f 95 c0             	setne  al
c000f16b:	83 c4 24             	add    esp,0x24
c000f16e:	c3                   	ret    
c000f16f:	90                   	nop

c000f170 <CPU::CPU()>:
c000f170:	83 ec 0c             	sub    esp,0xc
c000f173:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f177:	83 ec 08             	sub    esp,0x8
c000f17a:	68 29 e6 01 c0       	push   0xc001e629
c000f17f:	50                   	push   eax
c000f180:	e8 d3 c9 ff ff       	call   c000bb58 <Device::Device(char const*)>
c000f185:	83 c4 10             	add    esp,0x10
c000f188:	ba b0 e6 01 c0       	mov    edx,0xc001e6b0
c000f18d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f191:	89 10                	mov    DWORD PTR [eax],edx
c000f193:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f197:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f1a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f1a5:	05 78 01 00 00       	add    eax,0x178
c000f1aa:	83 ec 0c             	sub    esp,0xc
c000f1ad:	50                   	push   eax
c000f1ae:	e8 c7 7e ff ff       	call   c000707a <GDT::GDT()>
c000f1b3:	83 c4 10             	add    esp,0x10
c000f1b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f1ba:	05 7c 09 00 00       	add    eax,0x97c
c000f1bf:	83 ec 0c             	sub    esp,0xc
c000f1c2:	50                   	push   eax
c000f1c3:	e8 ec 80 ff ff       	call   c00072b4 <IDT::IDT()>
c000f1c8:	83 c4 10             	add    esp,0x10
c000f1cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f1cf:	05 7c 11 00 00       	add    eax,0x117c
c000f1d4:	83 ec 0c             	sub    esp,0xc
c000f1d7:	50                   	push   eax
c000f1d8:	e8 eb 99 ff ff       	call   c0008bc8 <TSS::TSS()>
c000f1dd:	83 c4 10             	add    esp,0x10
c000f1e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f1e4:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f1eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f1ef:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000f1f9:	90                   	nop
c000f1fa:	83 c4 0c             	add    esp,0xc
c000f1fd:	c3                   	ret    

c000f1fe <CPU::displayFeatures()>:
c000f1fe:	c3                   	ret    
c000f1ff:	90                   	nop

c000f200 <CPU::detectFeatures()>:
c000f200:	55                   	push   ebp
c000f201:	57                   	push   edi
c000f202:	56                   	push   esi
c000f203:	53                   	push   ebx
c000f204:	83 ec 30             	sub    esp,0x30
c000f207:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f20b:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f215:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f21c:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f222:	6a 0d                	push   0xd
c000f224:	6a 00                	push   0x0
c000f226:	55                   	push   ebp
c000f227:	e8 a4 12 ff ff       	call   c00004d0 <memset>
c000f22c:	83 c4 10             	add    esp,0x10
c000f22f:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000f234:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f23b:	0f 84 d5 05 00 00    	je     c000f816 <CPU::detectFeatures()+0x616>
c000f241:	83 ec 0c             	sub    esp,0xc
c000f244:	89 ef                	mov    edi,ebp
c000f246:	6a 10                	push   0x10
c000f248:	e8 6b fe ff ff       	call   c000f0b8 <CPU::cpuidCheckEDX(unsigned int)>
c000f24d:	83 e0 01             	and    eax,0x1
c000f250:	8d 14 00             	lea    edx,[eax+eax*1]
c000f253:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f259:	83 e0 fd             	and    eax,0xfffffffd
c000f25c:	09 d0                	or     eax,edx
c000f25e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f264:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f26b:	e8 48 fe ff ff       	call   c000f0b8 <CPU::cpuidCheckEDX(unsigned int)>
c000f270:	83 e0 01             	and    eax,0x1
c000f273:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f27a:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f280:	83 e0 fb             	and    eax,0xfffffffb
c000f283:	09 d0                	or     eax,edx
c000f285:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f28b:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f292:	e8 21 fe ff ff       	call   c000f0b8 <CPU::cpuidCheckEDX(unsigned int)>
c000f297:	83 e0 01             	and    eax,0x1
c000f29a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f2a1:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f2a7:	83 e0 f7             	and    eax,0xfffffff7
c000f2aa:	09 d0                	or     eax,edx
c000f2ac:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f2b2:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f2b9:	e8 fa fd ff ff       	call   c000f0b8 <CPU::cpuidCheckEDX(unsigned int)>
c000f2be:	83 e0 01             	and    eax,0x1
c000f2c1:	c1 e0 04             	shl    eax,0x4
c000f2c4:	88 c2                	mov    dl,al
c000f2c6:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f2cc:	83 e0 ef             	and    eax,0xffffffef
c000f2cf:	09 d0                	or     eax,edx
c000f2d1:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f2d7:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f2de:	e8 d5 fd ff ff       	call   c000f0b8 <CPU::cpuidCheckEDX(unsigned int)>
c000f2e3:	83 e0 01             	and    eax,0x1
c000f2e6:	c1 e0 05             	shl    eax,0x5
c000f2e9:	88 c2                	mov    dl,al
c000f2eb:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f2f1:	83 e0 df             	and    eax,0xffffffdf
c000f2f4:	09 d0                	or     eax,edx
c000f2f6:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f2fc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f303:	e8 b0 fd ff ff       	call   c000f0b8 <CPU::cpuidCheckEDX(unsigned int)>
c000f308:	83 e0 01             	and    eax,0x1
c000f30b:	8d 14 00             	lea    edx,[eax+eax*1]
c000f30e:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f314:	83 e0 fd             	and    eax,0xfffffffd
c000f317:	09 d0                	or     eax,edx
c000f319:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f31f:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f326:	e8 8d fd ff ff       	call   c000f0b8 <CPU::cpuidCheckEDX(unsigned int)>
c000f32b:	83 e0 01             	and    eax,0x1
c000f32e:	c1 e0 06             	shl    eax,0x6
c000f331:	88 c2                	mov    dl,al
c000f333:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f339:	83 e0 bf             	and    eax,0xffffffbf
c000f33c:	09 d0                	or     eax,edx
c000f33e:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f344:	58                   	pop    eax
c000f345:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f349:	50                   	push   eax
c000f34a:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f34e:	50                   	push   eax
c000f34f:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f353:	56                   	push   esi
c000f354:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f358:	50                   	push   eax
c000f359:	6a 00                	push   0x0
c000f35b:	e8 d4 fc ff ff       	call   c000f034 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f360:	b8 04 00 00 00       	mov    eax,0x4
c000f365:	89 c1                	mov    ecx,eax
c000f367:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f369:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f36f:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f373:	89 c1                	mov    ecx,eax
c000f375:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f377:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f37d:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f381:	89 c1                	mov    ecx,eax
c000f383:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f385:	83 c4 18             	add    esp,0x18
c000f388:	68 38 e5 01 c0       	push   0xc001e538
c000f38d:	55                   	push   ebp
c000f38e:	e8 4d 13 ff ff       	call   c00006e0 <strcmp>
c000f393:	83 c4 10             	add    esp,0x10
c000f396:	85 c0                	test   eax,eax
c000f398:	75 0f                	jne    c000f3a9 <CPU::detectFeatures()+0x1a9>
c000f39a:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f3a4:	e9 22 02 00 00       	jmp    c000f5cb <CPU::detectFeatures()+0x3cb>
c000f3a9:	50                   	push   eax
c000f3aa:	50                   	push   eax
c000f3ab:	68 45 e5 01 c0       	push   0xc001e545
c000f3b0:	55                   	push   ebp
c000f3b1:	e8 2a 13 ff ff       	call   c00006e0 <strcmp>
c000f3b6:	83 c4 10             	add    esp,0x10
c000f3b9:	85 c0                	test   eax,eax
c000f3bb:	74 dd                	je     c000f39a <CPU::detectFeatures()+0x19a>
c000f3bd:	50                   	push   eax
c000f3be:	50                   	push   eax
c000f3bf:	68 52 e5 01 c0       	push   0xc001e552
c000f3c4:	55                   	push   ebp
c000f3c5:	e8 16 13 ff ff       	call   c00006e0 <strcmp>
c000f3ca:	83 c4 10             	add    esp,0x10
c000f3cd:	85 c0                	test   eax,eax
c000f3cf:	74 2a                	je     c000f3fb <CPU::detectFeatures()+0x1fb>
c000f3d1:	50                   	push   eax
c000f3d2:	50                   	push   eax
c000f3d3:	68 5f e5 01 c0       	push   0xc001e55f
c000f3d8:	55                   	push   ebp
c000f3d9:	e8 02 13 ff ff       	call   c00006e0 <strcmp>
c000f3de:	83 c4 10             	add    esp,0x10
c000f3e1:	85 c0                	test   eax,eax
c000f3e3:	74 16                	je     c000f3fb <CPU::detectFeatures()+0x1fb>
c000f3e5:	50                   	push   eax
c000f3e6:	50                   	push   eax
c000f3e7:	68 6c e5 01 c0       	push   0xc001e56c
c000f3ec:	55                   	push   ebp
c000f3ed:	e8 ee 12 ff ff       	call   c00006e0 <strcmp>
c000f3f2:	83 c4 10             	add    esp,0x10
c000f3f5:	85 c0                	test   eax,eax
c000f3f7:	74 48                	je     c000f441 <CPU::detectFeatures()+0x241>
c000f3f9:	eb 0f                	jmp    c000f40a <CPU::detectFeatures()+0x20a>
c000f3fb:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000f405:	e9 c1 01 00 00       	jmp    c000f5cb <CPU::detectFeatures()+0x3cb>
c000f40a:	50                   	push   eax
c000f40b:	50                   	push   eax
c000f40c:	68 79 e5 01 c0       	push   0xc001e579
c000f411:	55                   	push   ebp
c000f412:	e8 c9 12 ff ff       	call   c00006e0 <strcmp>
c000f417:	83 c4 10             	add    esp,0x10
c000f41a:	85 c0                	test   eax,eax
c000f41c:	74 23                	je     c000f441 <CPU::detectFeatures()+0x241>
c000f41e:	57                   	push   edi
c000f41f:	57                   	push   edi
c000f420:	68 86 e5 01 c0       	push   0xc001e586
c000f425:	55                   	push   ebp
c000f426:	e8 b5 12 ff ff       	call   c00006e0 <strcmp>
c000f42b:	83 c4 10             	add    esp,0x10
c000f42e:	85 c0                	test   eax,eax
c000f430:	75 1e                	jne    c000f450 <CPU::detectFeatures()+0x250>
c000f432:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f43c:	e9 8a 01 00 00       	jmp    c000f5cb <CPU::detectFeatures()+0x3cb>
c000f441:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000f44b:	e9 7b 01 00 00       	jmp    c000f5cb <CPU::detectFeatures()+0x3cb>
c000f450:	56                   	push   esi
c000f451:	56                   	push   esi
c000f452:	68 93 e5 01 c0       	push   0xc001e593
c000f457:	55                   	push   ebp
c000f458:	e8 83 12 ff ff       	call   c00006e0 <strcmp>
c000f45d:	83 c4 10             	add    esp,0x10
c000f460:	85 c0                	test   eax,eax
c000f462:	75 0f                	jne    c000f473 <CPU::detectFeatures()+0x273>
c000f464:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000f46e:	e9 58 01 00 00       	jmp    c000f5cb <CPU::detectFeatures()+0x3cb>
c000f473:	51                   	push   ecx
c000f474:	51                   	push   ecx
c000f475:	68 52 e5 01 c0       	push   0xc001e552
c000f47a:	55                   	push   ebp
c000f47b:	e8 60 12 ff ff       	call   c00006e0 <strcmp>
c000f480:	83 c4 10             	add    esp,0x10
c000f483:	85 c0                	test   eax,eax
c000f485:	75 0f                	jne    c000f496 <CPU::detectFeatures()+0x296>
c000f487:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000f491:	e9 35 01 00 00       	jmp    c000f5cb <CPU::detectFeatures()+0x3cb>
c000f496:	52                   	push   edx
c000f497:	52                   	push   edx
c000f498:	68 a0 e5 01 c0       	push   0xc001e5a0
c000f49d:	55                   	push   ebp
c000f49e:	e8 3d 12 ff ff       	call   c00006e0 <strcmp>
c000f4a3:	83 c4 10             	add    esp,0x10
c000f4a6:	85 c0                	test   eax,eax
c000f4a8:	75 0f                	jne    c000f4b9 <CPU::detectFeatures()+0x2b9>
c000f4aa:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000f4b4:	e9 12 01 00 00       	jmp    c000f5cb <CPU::detectFeatures()+0x3cb>
c000f4b9:	50                   	push   eax
c000f4ba:	50                   	push   eax
c000f4bb:	68 ad e5 01 c0       	push   0xc001e5ad
c000f4c0:	55                   	push   ebp
c000f4c1:	e8 1a 12 ff ff       	call   c00006e0 <strcmp>
c000f4c6:	83 c4 10             	add    esp,0x10
c000f4c9:	85 c0                	test   eax,eax
c000f4cb:	75 0f                	jne    c000f4dc <CPU::detectFeatures()+0x2dc>
c000f4cd:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000f4d7:	e9 ef 00 00 00       	jmp    c000f5cb <CPU::detectFeatures()+0x3cb>
c000f4dc:	50                   	push   eax
c000f4dd:	50                   	push   eax
c000f4de:	68 ba e5 01 c0       	push   0xc001e5ba
c000f4e3:	55                   	push   ebp
c000f4e4:	e8 f7 11 ff ff       	call   c00006e0 <strcmp>
c000f4e9:	83 c4 10             	add    esp,0x10
c000f4ec:	85 c0                	test   eax,eax
c000f4ee:	75 0f                	jne    c000f4ff <CPU::detectFeatures()+0x2ff>
c000f4f0:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000f4fa:	e9 cc 00 00 00       	jmp    c000f5cb <CPU::detectFeatures()+0x3cb>
c000f4ff:	50                   	push   eax
c000f500:	50                   	push   eax
c000f501:	68 c7 e5 01 c0       	push   0xc001e5c7
c000f506:	55                   	push   ebp
c000f507:	e8 d4 11 ff ff       	call   c00006e0 <strcmp>
c000f50c:	83 c4 10             	add    esp,0x10
c000f50f:	85 c0                	test   eax,eax
c000f511:	75 0f                	jne    c000f522 <CPU::detectFeatures()+0x322>
c000f513:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000f51d:	e9 a9 00 00 00       	jmp    c000f5cb <CPU::detectFeatures()+0x3cb>
c000f522:	50                   	push   eax
c000f523:	50                   	push   eax
c000f524:	68 d4 e5 01 c0       	push   0xc001e5d4
c000f529:	55                   	push   ebp
c000f52a:	e8 b1 11 ff ff       	call   c00006e0 <strcmp>
c000f52f:	83 c4 10             	add    esp,0x10
c000f532:	85 c0                	test   eax,eax
c000f534:	75 0f                	jne    c000f545 <CPU::detectFeatures()+0x345>
c000f536:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000f540:	e9 86 00 00 00       	jmp    c000f5cb <CPU::detectFeatures()+0x3cb>
c000f545:	50                   	push   eax
c000f546:	50                   	push   eax
c000f547:	68 e1 e5 01 c0       	push   0xc001e5e1
c000f54c:	55                   	push   ebp
c000f54d:	e8 8e 11 ff ff       	call   c00006e0 <strcmp>
c000f552:	83 c4 10             	add    esp,0x10
c000f555:	85 c0                	test   eax,eax
c000f557:	75 0c                	jne    c000f565 <CPU::detectFeatures()+0x365>
c000f559:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000f563:	eb 66                	jmp    c000f5cb <CPU::detectFeatures()+0x3cb>
c000f565:	50                   	push   eax
c000f566:	50                   	push   eax
c000f567:	68 ee e5 01 c0       	push   0xc001e5ee
c000f56c:	55                   	push   ebp
c000f56d:	e8 6e 11 ff ff       	call   c00006e0 <strcmp>
c000f572:	83 c4 10             	add    esp,0x10
c000f575:	85 c0                	test   eax,eax
c000f577:	75 0c                	jne    c000f585 <CPU::detectFeatures()+0x385>
c000f579:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000f583:	eb 46                	jmp    c000f5cb <CPU::detectFeatures()+0x3cb>
c000f585:	57                   	push   edi
c000f586:	57                   	push   edi
c000f587:	68 fb e5 01 c0       	push   0xc001e5fb
c000f58c:	55                   	push   ebp
c000f58d:	e8 4e 11 ff ff       	call   c00006e0 <strcmp>
c000f592:	83 c4 10             	add    esp,0x10
c000f595:	85 c0                	test   eax,eax
c000f597:	74 e0                	je     c000f579 <CPU::detectFeatures()+0x379>
c000f599:	56                   	push   esi
c000f59a:	56                   	push   esi
c000f59b:	68 08 e6 01 c0       	push   0xc001e608
c000f5a0:	55                   	push   ebp
c000f5a1:	e8 3a 11 ff ff       	call   c00006e0 <strcmp>
c000f5a6:	83 c4 10             	add    esp,0x10
c000f5a9:	85 c0                	test   eax,eax
c000f5ab:	74 cc                	je     c000f579 <CPU::detectFeatures()+0x379>
c000f5ad:	51                   	push   ecx
c000f5ae:	51                   	push   ecx
c000f5af:	68 15 e6 01 c0       	push   0xc001e615
c000f5b4:	55                   	push   ebp
c000f5b5:	e8 26 11 ff ff       	call   c00006e0 <strcmp>
c000f5ba:	83 c4 10             	add    esp,0x10
c000f5bd:	85 c0                	test   eax,eax
c000f5bf:	74 b8                	je     c000f579 <CPU::detectFeatures()+0x379>
c000f5c1:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000f5cb:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000f5d0:	0f 86 be 00 00 00    	jbe    c000f694 <CPU::detectFeatures()+0x494>
c000f5d6:	83 ec 0c             	sub    esp,0xc
c000f5d9:	68 80 00 00 00       	push   0x80
c000f5de:	e8 31 fb ff ff       	call   c000f114 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f5e3:	83 e0 01             	and    eax,0x1
c000f5e6:	c1 e0 06             	shl    eax,0x6
c000f5e9:	88 c2                	mov    dl,al
c000f5eb:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f5f1:	83 e0 bf             	and    eax,0xffffffbf
c000f5f4:	09 d0                	or     eax,edx
c000f5f6:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f5fc:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000f603:	e8 0c fb ff ff       	call   c000f114 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f608:	83 e0 01             	and    eax,0x1
c000f60b:	c1 e0 04             	shl    eax,0x4
c000f60e:	88 c2                	mov    dl,al
c000f610:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f616:	83 e0 ef             	and    eax,0xffffffef
c000f619:	09 d0                	or     eax,edx
c000f61b:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f621:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000f628:	e8 e7 fa ff ff       	call   c000f114 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f62d:	c1 e0 07             	shl    eax,0x7
c000f630:	88 c2                	mov    dl,al
c000f632:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f638:	83 e0 7f             	and    eax,0x7f
c000f63b:	09 d0                	or     eax,edx
c000f63d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f643:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000f64a:	e8 f3 fa ff ff       	call   c000f142 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f64f:	83 e0 01             	and    eax,0x1
c000f652:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f659:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f65f:	83 e0 f7             	and    eax,0xfffffff7
c000f662:	09 d0                	or     eax,edx
c000f664:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f66a:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000f671:	e8 cc fa ff ff       	call   c000f142 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f676:	83 c4 10             	add    esp,0x10
c000f679:	83 e0 01             	and    eax,0x1
c000f67c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f683:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f689:	83 e0 fb             	and    eax,0xfffffffb
c000f68c:	09 d0                	or     eax,edx
c000f68e:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f694:	83 ec 0c             	sub    esp,0xc
c000f697:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f69b:	50                   	push   eax
c000f69c:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f6a0:	50                   	push   eax
c000f6a1:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f6a5:	56                   	push   esi
c000f6a6:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f6aa:	50                   	push   eax
c000f6ab:	6a 01                	push   0x1
c000f6ad:	e8 82 f9 ff ff       	call   c000f034 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f6b2:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f6b6:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000f6bc:	88 ca                	mov    dl,cl
c000f6be:	83 e0 f0             	and    eax,0xfffffff0
c000f6c1:	83 e2 0f             	and    edx,0xf
c000f6c4:	09 d0                	or     eax,edx
c000f6c6:	88 ca                	mov    dl,cl
c000f6c8:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000f6ce:	c0 ea 04             	shr    dl,0x4
c000f6d1:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000f6d5:	0f b6 c2             	movzx  eax,dl
c000f6d8:	83 c4 20             	add    esp,0x20
c000f6db:	c1 e0 06             	shl    eax,0x6
c000f6de:	89 c7                	mov    edi,eax
c000f6e0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000f6e6:	66 25 3f c0          	and    ax,0xc03f
c000f6ea:	09 f8                	or     eax,edi
c000f6ec:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000f6f3:	89 c8                	mov    eax,ecx
c000f6f5:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000f6fc:	c1 e8 08             	shr    eax,0x8
c000f6ff:	83 e5 3f             	and    ebp,0x3f
c000f702:	83 e0 0f             	and    eax,0xf
c000f705:	89 c7                	mov    edi,eax
c000f707:	c1 e7 06             	shl    edi,0x6
c000f70a:	09 ef                	or     edi,ebp
c000f70c:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000f713:	89 fa                	mov    edx,edi
c000f715:	83 e5 c0             	and    ebp,0xffffffc0
c000f718:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000f71e:	88 c2                	mov    dl,al
c000f720:	c0 ea 02             	shr    dl,0x2
c000f723:	89 d7                	mov    edi,edx
c000f725:	09 ef                	or     edi,ebp
c000f727:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000f72d:	89 fa                	mov    edx,edi
c000f72f:	83 e5 cf             	and    ebp,0xffffffcf
c000f732:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000f738:	89 cf                	mov    edi,ecx
c000f73a:	c1 ef 0c             	shr    edi,0xc
c000f73d:	83 e7 03             	and    edi,0x3
c000f740:	c1 e7 04             	shl    edi,0x4
c000f743:	09 ef                	or     edi,ebp
c000f745:	3c 06                	cmp    al,0x6
c000f747:	89 fa                	mov    edx,edi
c000f749:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000f74f:	74 04                	je     c000f755 <CPU::detectFeatures()+0x555>
c000f751:	3c 0f                	cmp    al,0xf
c000f753:	75 5c                	jne    c000f7b1 <CPU::detectFeatures()+0x5b1>
c000f755:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000f759:	89 cf                	mov    edi,ecx
c000f75b:	c1 ef 10             	shr    edi,0x10
c000f75e:	c1 e7 04             	shl    edi,0x4
c000f761:	09 fa                	or     edx,edi
c000f763:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000f769:	0f b6 d2             	movzx  edx,dl
c000f76c:	66 81 e7 3f c0       	and    di,0xc03f
c000f771:	c1 e2 06             	shl    edx,0x6
c000f774:	09 fa                	or     edx,edi
c000f776:	3c 0f                	cmp    al,0xf
c000f778:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000f77f:	75 30                	jne    c000f7b1 <CPU::detectFeatures()+0x5b1>
c000f781:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000f787:	c1 e9 14             	shr    ecx,0x14
c000f78a:	83 e0 3f             	and    eax,0x3f
c000f78d:	83 c1 0f             	add    ecx,0xf
c000f790:	88 ca                	mov    dl,cl
c000f792:	c0 e9 02             	shr    cl,0x2
c000f795:	c1 e2 06             	shl    edx,0x6
c000f798:	09 d0                	or     eax,edx
c000f79a:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000f7a0:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000f7a6:	83 e0 c0             	and    eax,0xffffffc0
c000f7a9:	09 c1                	or     ecx,eax
c000f7ab:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000f7b1:	83 ec 0c             	sub    esp,0xc
c000f7b4:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000f7bb:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f7bf:	50                   	push   eax
c000f7c0:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000f7c4:	55                   	push   ebp
c000f7c5:	56                   	push   esi
c000f7c6:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000f7ca:	57                   	push   edi
c000f7cb:	68 00 00 00 80       	push   0x80000000
c000f7d0:	e8 5f f8 ff ff       	call   c000f034 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f7d5:	83 c4 20             	add    esp,0x20
c000f7d8:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000f7e0:	76 22                	jbe    c000f804 <CPU::detectFeatures()+0x604>
c000f7e2:	83 ec 0c             	sub    esp,0xc
c000f7e5:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f7e9:	50                   	push   eax
c000f7ea:	55                   	push   ebp
c000f7eb:	56                   	push   esi
c000f7ec:	57                   	push   edi
c000f7ed:	68 01 00 00 80       	push   0x80000001
c000f7f2:	e8 3d f8 ff ff       	call   c000f034 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f7f7:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000f801:	83 c4 20             	add    esp,0x20
c000f804:	52                   	push   edx
c000f805:	52                   	push   edx
c000f806:	68 21 e6 01 c0       	push   0xc001e621
c000f80b:	53                   	push   ebx
c000f80c:	e8 39 c3 ff ff       	call   c000bb4a <Device::setName(char const*)>
c000f811:	83 c4 10             	add    esp,0x10
c000f814:	eb 67                	jmp    c000f87d <CPU::detectFeatures()+0x67d>
c000f816:	50                   	push   eax
c000f817:	50                   	push   eax
c000f818:	68 86 e5 01 c0       	push   0xc001e586
c000f81d:	55                   	push   ebp
c000f81e:	e8 dd 0d ff ff       	call   c0000600 <strcpy>
c000f823:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f82d:	e8 91 09 ff ff       	call   c00001c3 <is486>
c000f832:	83 c4 10             	add    esp,0x10
c000f835:	85 c0                	test   eax,eax
c000f837:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f83d:	74 1d                	je     c000f85c <CPU::detectFeatures()+0x65c>
c000f83f:	83 c8 07             	or     eax,0x7
c000f842:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f848:	0f 20 c0             	mov    eax,cr0
c000f84b:	83 e0 14             	and    eax,0x14
c000f84e:	83 f8 04             	cmp    eax,0x4
c000f851:	75 0e                	jne    c000f861 <CPU::detectFeatures()+0x661>
c000f853:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000f85a:	eb 21                	jmp    c000f87d <CPU::detectFeatures()+0x67d>
c000f85c:	83 e0 f8             	and    eax,0xfffffff8
c000f85f:	eb e1                	jmp    c000f842 <CPU::detectFeatures()+0x642>
c000f861:	e8 38 09 ff ff       	call   c000019e <hasLegacyFPU>
c000f866:	83 e0 01             	and    eax,0x1
c000f869:	8d 14 00             	lea    edx,[eax+eax*1]
c000f86c:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f872:	83 e0 fd             	and    eax,0xfffffffd
c000f875:	09 d0                	or     eax,edx
c000f877:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f87d:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000f884:	74 0e                	je     c000f894 <CPU::detectFeatures()+0x694>
c000f886:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000f88b:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000f892:	eb 20                	jmp    c000f8b4 <CPU::detectFeatures()+0x6b4>
c000f894:	e8 05 09 ff ff       	call   c000019e <hasLegacyFPU>
c000f899:	83 e0 01             	and    eax,0x1
c000f89c:	8d 14 00             	lea    edx,[eax+eax*1]
c000f89f:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f8a5:	83 e0 fd             	and    eax,0xfffffffd
c000f8a8:	09 d0                	or     eax,edx
c000f8aa:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f8b0:	a8 02                	test   al,0x2
c000f8b2:	75 d2                	jne    c000f886 <CPU::detectFeatures()+0x686>
c000f8b4:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000f8bb:	83 c4 2c             	add    esp,0x2c
c000f8be:	5b                   	pop    ebx
c000f8bf:	5e                   	pop    esi
c000f8c0:	5f                   	pop    edi
c000f8c1:	5d                   	pop    ebp
c000f8c2:	c3                   	ret    
c000f8c3:	90                   	nop

c000f8c4 <CPU::setupSMEP()>:
c000f8c4:	0f 20 e0             	mov    eax,cr4
c000f8c7:	0d 00 00 10 00       	or     eax,0x100000
c000f8cc:	0f 22 e0             	mov    cr4,eax
c000f8cf:	c3                   	ret    

c000f8d0 <CPU::setupUMIP()>:
c000f8d0:	0f 20 e0             	mov    eax,cr4
c000f8d3:	80 cc 08             	or     ah,0x8
c000f8d6:	0f 22 e0             	mov    cr4,eax
c000f8d9:	c3                   	ret    

c000f8da <CPU::setupTSC()>:
c000f8da:	0f 20 e0             	mov    eax,cr4
c000f8dd:	83 c8 04             	or     eax,0x4
c000f8e0:	0f 22 e0             	mov    cr4,eax
c000f8e3:	c3                   	ret    

c000f8e4 <CPU::setupLargePages()>:
c000f8e4:	0f 20 e0             	mov    eax,cr4
c000f8e7:	83 c8 10             	or     eax,0x10
c000f8ea:	0f 22 e0             	mov    cr4,eax
c000f8ed:	c3                   	ret    

c000f8ee <CPU::setupPAT()>:
c000f8ee:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000f8f3:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000f8fa:	74 2c                	je     c000f928 <CPU::setupPAT()+0x3a>
c000f8fc:	53                   	push   ebx
c000f8fd:	83 ec 10             	sub    esp,0x10
c000f900:	68 77 02 00 00       	push   0x277
c000f905:	50                   	push   eax
c000f906:	e8 e7 74 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c000f90b:	83 e2 f8             	and    edx,0xfffffff8
c000f90e:	83 ca 01             	or     edx,0x1
c000f911:	52                   	push   edx
c000f912:	50                   	push   eax
c000f913:	68 77 02 00 00       	push   0x277
c000f918:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c000f91e:	e8 fb 74 ff ff       	call   c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>
c000f923:	83 c4 28             	add    esp,0x28
c000f926:	5b                   	pop    ebx
c000f927:	c3                   	ret    
c000f928:	c3                   	ret    
c000f929:	90                   	nop

c000f92a <CPU::setupMTRR()>:
c000f92a:	c3                   	ret    
c000f92b:	90                   	nop

c000f92c <CPU::setupGlobalPages()>:
c000f92c:	0f 20 e0             	mov    eax,cr4
c000f92f:	0c 80                	or     al,0x80
c000f931:	0f 22 e0             	mov    cr4,eax
c000f934:	c3                   	ret    
c000f935:	90                   	nop

c000f936 <CPU::allowUsermodeDataAccess()>:
c000f936:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f93a:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f941:	74 03                	je     c000f946 <CPU::allowUsermodeDataAccess()+0x10>
c000f943:	0f 01 cb             	stac   
c000f946:	c3                   	ret    
c000f947:	90                   	nop

c000f948 <CPU::prohibitUsermodeDataAccess()>:
c000f948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f94c:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f953:	74 03                	je     c000f958 <CPU::prohibitUsermodeDataAccess()+0x10>
c000f955:	0f 01 ca             	clac   
c000f958:	c3                   	ret    
c000f959:	90                   	nop

c000f95a <CPU::setupSMAP()>:
c000f95a:	0f 20 e0             	mov    eax,cr4
c000f95d:	0d 00 00 20 00       	or     eax,0x200000
c000f962:	0f 22 e0             	mov    cr4,eax
c000f965:	eb e1                	jmp    c000f948 <CPU::prohibitUsermodeDataAccess()>
c000f967:	90                   	nop

c000f968 <CPU::setupFeatures()>:
c000f968:	53                   	push   ebx
c000f969:	83 ec 08             	sub    esp,0x8
c000f96c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f970:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000f977:	74 18                	je     c000f991 <CPU::setupFeatures()+0x29>
c000f979:	83 ec 0c             	sub    esp,0xc
c000f97c:	68 2d e6 01 c0       	push   0xc001e62d
c000f981:	e8 fb ab ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c000f986:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f989:	e8 42 ff ff ff       	call   c000f8d0 <CPU::setupUMIP()>
c000f98e:	83 c4 10             	add    esp,0x10
c000f991:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000f998:	74 18                	je     c000f9b2 <CPU::setupFeatures()+0x4a>
c000f99a:	83 ec 0c             	sub    esp,0xc
c000f99d:	68 37 e6 01 c0       	push   0xc001e637
c000f9a2:	e8 da ab ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c000f9a7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f9aa:	e8 2b ff ff ff       	call   c000f8da <CPU::setupTSC()>
c000f9af:	83 c4 10             	add    esp,0x10
c000f9b2:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000f9b9:	74 18                	je     c000f9d3 <CPU::setupFeatures()+0x6b>
c000f9bb:	83 ec 0c             	sub    esp,0xc
c000f9be:	68 40 e6 01 c0       	push   0xc001e640
c000f9c3:	e8 b9 ab ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c000f9c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f9cb:	e8 14 ff ff ff       	call   c000f8e4 <CPU::setupLargePages()>
c000f9d0:	83 c4 10             	add    esp,0x10
c000f9d3:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000f9da:	74 18                	je     c000f9f4 <CPU::setupFeatures()+0x8c>
c000f9dc:	83 ec 0c             	sub    esp,0xc
c000f9df:	68 49 e6 01 c0       	push   0xc001e649
c000f9e4:	e8 98 ab ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c000f9e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f9ec:	e8 3b ff ff ff       	call   c000f92c <CPU::setupGlobalPages()>
c000f9f1:	83 c4 10             	add    esp,0x10
c000f9f4:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000f9fb:	74 18                	je     c000fa15 <CPU::setupFeatures()+0xad>
c000f9fd:	83 ec 0c             	sub    esp,0xc
c000fa00:	68 5b e6 01 c0       	push   0xc001e65b
c000fa05:	e8 77 ab ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c000fa0a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa0d:	e8 dc fe ff ff       	call   c000f8ee <CPU::setupPAT()>
c000fa12:	83 c4 10             	add    esp,0x10
c000fa15:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000fa1c:	74 11                	je     c000fa2f <CPU::setupFeatures()+0xc7>
c000fa1e:	c7 44 24 10 64 e6 01 c0 	mov    DWORD PTR [esp+0x10],0xc001e664
c000fa26:	83 c4 08             	add    esp,0x8
c000fa29:	5b                   	pop    ebx
c000fa2a:	e9 52 ab ff ff       	jmp    c000a581 <Dbg::kprintf(char const*, ...)>
c000fa2f:	83 c4 08             	add    esp,0x8
c000fa32:	5b                   	pop    ebx
c000fa33:	c3                   	ret    

c000fa34 <CPU::open(int, int, void*)>:
c000fa34:	57                   	push   edi
c000fa35:	56                   	push   esi
c000fa36:	53                   	push   ebx
c000fa37:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fa3b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fa3f:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000fa45:	83 ec 0c             	sub    esp,0xc
c000fa48:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000fa4e:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000fa54:	50                   	push   eax
c000fa55:	e8 82 76 ff ff       	call   c00070dc <GDT::setup()>
c000fa5a:	83 c4 0c             	add    esp,0xc
c000fa5d:	6a 00                	push   0x0
c000fa5f:	68 ef be ad de       	push   0xdeadbeef
c000fa64:	57                   	push   edi
c000fa65:	e8 a2 91 ff ff       	call   c0008c0c <TSS::setup(unsigned long, unsigned long)>
c000fa6a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fa6d:	e8 7a 91 ff ff       	call   c0008bec <TSS::flush()>
c000fa72:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000fa78:	89 04 24             	mov    DWORD PTR [esp],eax
c000fa7b:	e8 aa 78 ff ff       	call   c000732a <IDT::setup()>
c000fa80:	b8 00 04 00 00       	mov    eax,0x400
c000fa85:	0f 23 f8             	mov    db7,eax
c000fa88:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000fa92:	e8 fe 7f ff ff       	call   c0007a95 <Phys::allocatePage()>
c000fa97:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000fa9d:	89 30                	mov    DWORD PTR [eax],esi
c000fa9f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000faa5:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000faa8:	58                   	pop    eax
c000faa9:	5a                   	pop    edx
c000faaa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000fab0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fab4:	e8 1b a1 ff ff       	call   c0009bd4 <VAS::setCPUSpecific(unsigned long)>
c000fab9:	c7 04 24 6e e6 01 c0 	mov    DWORD PTR [esp],0xc001e66e
c000fac0:	e8 c6 00 00 00       	call   c000fb8b <KeSetBootMessage(char const*)>
c000fac5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fac8:	e8 33 f7 ff ff       	call   c000f200 <CPU::detectFeatures()>
c000facd:	c7 04 24 91 e6 01 c0 	mov    DWORD PTR [esp],0xc001e691
c000fad4:	e8 b2 00 00 00       	call   c000fb8b <KeSetBootMessage(char const*)>
c000fad9:	e8 26 5c 00 00       	call   c0015704 <HalInitialise()>
c000fade:	a1 d0 1e 02 c0       	mov    eax,ds:0xc0021ed0
c000fae3:	83 e0 10             	and    eax,0x10
c000fae6:	83 f8 01             	cmp    eax,0x1
c000fae9:	19 c0                	sbb    eax,eax
c000faeb:	83 e0 46             	and    eax,0x46
c000faee:	83 c0 1e             	add    eax,0x1e
c000faf1:	89 04 24             	mov    DWORD PTR [esp],eax
c000faf4:	e8 60 d7 ff ff       	call   c000d259 <setupTimer(int)>
c000faf9:	83 c4 10             	add    esp,0x10
c000fafc:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000fb02:	f6 05 d0 1e 02 c0 20 	test   BYTE PTR ds:0xc0021ed0,0x20
c000fb09:	74 0c                	je     c000fb17 <CPU::open(int, int, void*)+0xe3>
c000fb0b:	83 ec 0c             	sub    esp,0xc
c000fb0e:	53                   	push   ebx
c000fb0f:	e8 54 fe ff ff       	call   c000f968 <CPU::setupFeatures()>
c000fb14:	83 c4 10             	add    esp,0x10
c000fb17:	5b                   	pop    ebx
c000fb18:	31 c0                	xor    eax,eax
c000fb1a:	5e                   	pop    esi
c000fb1b:	5f                   	pop    edi
c000fb1c:	c3                   	ret    

c000fb1d <KeDisplaySplashScreen()>:
c000fb1d:	55                   	push   ebp
c000fb1e:	bd 05 00 00 00       	mov    ebp,0x5
c000fb23:	57                   	push   edi
c000fb24:	bf 80 f8 01 c0       	mov    edi,0xc001f880
c000fb29:	56                   	push   esi
c000fb2a:	be 0a 00 00 00       	mov    esi,0xa
c000fb2f:	53                   	push   ebx
c000fb30:	31 db                	xor    ebx,ebx
c000fb32:	83 ec 0c             	sub    esp,0xc
c000fb35:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000fb38:	84 c0                	test   al,al
c000fb3a:	74 47                	je     c000fb83 <KeDisplaySplashScreen()+0x66>
c000fb3c:	80 bb b6 f8 01 c0 db 	cmp    BYTE PTR [ebx-0x3ffe074a],0xdb
c000fb43:	75 13                	jne    c000fb58 <KeDisplaySplashScreen()+0x3b>
c000fb45:	0f b6 93 b5 f8 01 c0 	movzx  edx,BYTE PTR [ebx-0x3ffe074b]
c000fb4c:	83 e2 fe             	and    edx,0xfffffffe
c000fb4f:	81 fa ba 00 00 00    	cmp    edx,0xba
c000fb55:	75 01                	jne    c000fb58 <KeDisplaySplashScreen()+0x3b>
c000fb57:	46                   	inc    esi
c000fb58:	3c 0d                	cmp    al,0xd
c000fb5a:	74 24                	je     c000fb80 <KeDisplaySplashScreen()+0x63>
c000fb5c:	3c 0a                	cmp    al,0xa
c000fb5e:	75 0a                	jne    c000fb6a <KeDisplaySplashScreen()+0x4d>
c000fb60:	45                   	inc    ebp
c000fb61:	be 0a 00 00 00       	mov    esi,0xa
c000fb66:	31 db                	xor    ebx,ebx
c000fb68:	eb 16                	jmp    c000fb80 <KeDisplaySplashScreen()+0x63>
c000fb6a:	83 ec 0c             	sub    esp,0xc
c000fb6d:	8d 14 33             	lea    edx,[ebx+esi*1]
c000fb70:	55                   	push   ebp
c000fb71:	43                   	inc    ebx
c000fb72:	52                   	push   edx
c000fb73:	6a 00                	push   0x0
c000fb75:	6a 0e                	push   0xe
c000fb77:	50                   	push   eax
c000fb78:	e8 eb 67 00 00       	call   c0016368 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000fb7d:	83 c4 20             	add    esp,0x20
c000fb80:	47                   	inc    edi
c000fb81:	eb b2                	jmp    c000fb35 <KeDisplaySplashScreen()+0x18>
c000fb83:	83 c4 0c             	add    esp,0xc
c000fb86:	5b                   	pop    ebx
c000fb87:	5e                   	pop    esi
c000fb88:	5f                   	pop    edi
c000fb89:	5d                   	pop    ebp
c000fb8a:	c3                   	ret    

c000fb8b <KeSetBootMessage(char const*)>:
c000fb8b:	57                   	push   edi
c000fb8c:	56                   	push   esi
c000fb8d:	53                   	push   ebx
c000fb8e:	81 ec a4 00 00 00    	sub    esp,0xa4
c000fb94:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000fb9b:	68 9e 00 00 00       	push   0x9e
c000fba0:	6a 00                	push   0x0
c000fba2:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000fba6:	56                   	push   esi
c000fba7:	e8 24 09 ff ff       	call   c00004d0 <memset>
c000fbac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbaf:	e8 8c 09 ff ff       	call   c0000540 <strlen>
c000fbb4:	ba 50 00 00 00       	mov    edx,0x50
c000fbb9:	83 c4 10             	add    esp,0x10
c000fbbc:	29 c2                	sub    edx,eax
c000fbbe:	31 c9                	xor    ecx,ecx
c000fbc0:	83 e2 fe             	and    edx,0xfffffffe
c000fbc3:	01 f2                	add    edx,esi
c000fbc5:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000fbca:	84 c0                	test   al,al
c000fbcc:	74 0a                	je     c000fbd8 <KeSetBootMessage(char const*)+0x4d>
c000fbce:	80 cc 0f             	or     ah,0xf
c000fbd1:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000fbd5:	41                   	inc    ecx
c000fbd6:	eb ed                	jmp    c000fbc5 <KeSetBootMessage(char const*)+0x3a>
c000fbd8:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000fbdd:	b9 9e 00 00 00       	mov    ecx,0x9e
c000fbe2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fbe4:	81 c4 a0 00 00 00    	add    esp,0xa0
c000fbea:	5b                   	pop    ebx
c000fbeb:	5e                   	pop    esi
c000fbec:	5f                   	pop    edi
c000fbed:	c3                   	ret    

c000fbee <EnvVarContainer::getEnv(char const*)>:
c000fbee:	57                   	push   edi
c000fbef:	56                   	push   esi
c000fbf0:	53                   	push   ebx
c000fbf1:	31 db                	xor    ebx,ebx
c000fbf3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fbf7:	39 1e                	cmp    DWORD PTR [esi],ebx
c000fbf9:	7e 2b                	jle    c000fc26 <EnvVarContainer::getEnv(char const*)+0x38>
c000fbfb:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000fc02:	50                   	push   eax
c000fc03:	50                   	push   eax
c000fc04:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fc07:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000fc0a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fc0e:	e8 cd 0a ff ff       	call   c00006e0 <strcmp>
c000fc13:	83 c4 10             	add    esp,0x10
c000fc16:	85 c0                	test   eax,eax
c000fc18:	75 09                	jne    c000fc23 <EnvVarContainer::getEnv(char const*)+0x35>
c000fc1a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fc1d:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000fc21:	eb 05                	jmp    c000fc28 <EnvVarContainer::getEnv(char const*)+0x3a>
c000fc23:	43                   	inc    ebx
c000fc24:	eb d1                	jmp    c000fbf7 <EnvVarContainer::getEnv(char const*)+0x9>
c000fc26:	31 c0                	xor    eax,eax
c000fc28:	5b                   	pop    ebx
c000fc29:	5e                   	pop    esi
c000fc2a:	5f                   	pop    edi
c000fc2b:	c3                   	ret    

c000fc2c <EnvVarContainer::setEnv(char const*, char const*)>:
c000fc2c:	55                   	push   ebp
c000fc2d:	57                   	push   edi
c000fc2e:	56                   	push   esi
c000fc2f:	53                   	push   ebx
c000fc30:	83 ec 28             	sub    esp,0x28
c000fc33:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000fc37:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000fc3b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000fc3f:	56                   	push   esi
c000fc40:	e8 fb 08 ff ff       	call   c0000540 <strlen>
c000fc45:	40                   	inc    eax
c000fc46:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc49:	e8 6b 7b ff ff       	call   c00077b9 <malloc>
c000fc4e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc51:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fc55:	e8 e6 08 ff ff       	call   c0000540 <strlen>
c000fc5a:	40                   	inc    eax
c000fc5b:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc5e:	e8 56 7b ff ff       	call   c00077b9 <malloc>
c000fc63:	89 34 24             	mov    DWORD PTR [esp],esi
c000fc66:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fc6a:	e8 d1 08 ff ff       	call   c0000540 <strlen>
c000fc6f:	83 c4 0c             	add    esp,0xc
c000fc72:	40                   	inc    eax
c000fc73:	50                   	push   eax
c000fc74:	6a 00                	push   0x0
c000fc76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fc7a:	e8 51 08 ff ff       	call   c00004d0 <memset>
c000fc7f:	89 34 24             	mov    DWORD PTR [esp],esi
c000fc82:	e8 b9 08 ff ff       	call   c0000540 <strlen>
c000fc87:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fc8b:	8d 48 01             	lea    ecx,[eax+0x1]
c000fc8e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc90:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc93:	89 de                	mov    esi,ebx
c000fc95:	e8 a6 08 ff ff       	call   c0000540 <strlen>
c000fc9a:	83 c4 0c             	add    esp,0xc
c000fc9d:	40                   	inc    eax
c000fc9e:	50                   	push   eax
c000fc9f:	6a 00                	push   0x0
c000fca1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fca5:	e8 26 08 ff ff       	call   c00004d0 <memset>
c000fcaa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fcad:	e8 8e 08 ff ff       	call   c0000540 <strlen>
c000fcb2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fcb6:	8d 48 01             	lea    ecx,[eax+0x1]
c000fcb9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fcbb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fcbe:	40                   	inc    eax
c000fcbf:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fcc2:	c1 e0 03             	shl    eax,0x3
c000fcc5:	5a                   	pop    edx
c000fcc6:	59                   	pop    ecx
c000fcc7:	50                   	push   eax
c000fcc8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000fccb:	e8 d5 7a ff ff       	call   c00077a5 <realloc>
c000fcd0:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fcd4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fcd7:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fcda:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fcde:	b9 08 00 00 00       	mov    ecx,0x8
c000fce3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fce5:	83 c4 2c             	add    esp,0x2c
c000fce8:	5b                   	pop    ebx
c000fce9:	5e                   	pop    esi
c000fcea:	5f                   	pop    edi
c000fceb:	5d                   	pop    ebp
c000fcec:	c3                   	ret    
c000fced:	90                   	nop

c000fcee <EnvVarContainer::deleteEnv(char const*)>:
c000fcee:	c3                   	ret    
c000fcef:	90                   	nop

c000fcf0 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000fcf0:	55                   	push   ebp
c000fcf1:	57                   	push   edi
c000fcf2:	56                   	push   esi
c000fcf3:	53                   	push   ebx
c000fcf4:	81 ec 38 01 00 00    	sub    esp,0x138
c000fcfa:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000fd01:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000fd08:	68 14 01 00 00       	push   0x114
c000fd0d:	e8 a7 7a ff ff       	call   c00077b9 <malloc>
c000fd12:	83 c4 0c             	add    esp,0xc
c000fd15:	89 c3                	mov    ebx,eax
c000fd17:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fd1a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000fd21:	50                   	push   eax
c000fd22:	e8 cf ad ff ff       	call   c000aaf6 <File::File(char const*, Process*)>
c000fd27:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fd2a:	e8 f5 b0 ff ff       	call   c000ae24 <File::exists()>
c000fd2f:	83 c4 10             	add    esp,0x10
c000fd32:	84 c0                	test   al,al
c000fd34:	75 31                	jne    c000fd67 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000fd36:	50                   	push   eax
c000fd37:	50                   	push   eax
c000fd38:	6a 12                	push   0x12
c000fd3a:	53                   	push   ebx
c000fd3b:	e8 76 ae ff ff       	call   c000abb6 <File::open(FileOpenMode)>
c000fd40:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fd42:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000fd45:	89 34 24             	mov    DWORD PTR [esp],esi
c000fd48:	e8 f3 07 ff ff       	call   c0000540 <strlen>
c000fd4d:	5a                   	pop    edx
c000fd4e:	31 d2                	xor    edx,edx
c000fd50:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fd54:	51                   	push   ecx
c000fd55:	56                   	push   esi
c000fd56:	52                   	push   edx
c000fd57:	50                   	push   eax
c000fd58:	53                   	push   ebx
c000fd59:	ff d7                	call   edi
c000fd5b:	83 c4 14             	add    esp,0x14
c000fd5e:	53                   	push   ebx
c000fd5f:	e8 b0 ae ff ff       	call   c000ac14 <File::close()>
c000fd64:	83 c4 10             	add    esp,0x10
c000fd67:	56                   	push   esi
c000fd68:	31 f6                	xor    esi,esi
c000fd6a:	68 00 01 00 00       	push   0x100
c000fd6f:	6a 00                	push   0x0
c000fd71:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fd75:	50                   	push   eax
c000fd76:	e8 55 07 ff ff       	call   c00004d0 <memset>
c000fd7b:	5f                   	pop    edi
c000fd7c:	58                   	pop    eax
c000fd7d:	6a 01                	push   0x1
c000fd7f:	53                   	push   ebx
c000fd80:	e8 31 ae ff ff       	call   c000abb6 <File::open(FileOpenMode)>
c000fd85:	83 c4 10             	add    esp,0x10
c000fd88:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fd90:	83 ec 0c             	sub    esp,0xc
c000fd93:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fd95:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fd99:	51                   	push   ecx
c000fd9a:	8d 54 24 23          	lea    edx,[esp+0x23]
c000fd9e:	52                   	push   edx
c000fd9f:	6a 00                	push   0x0
c000fda1:	6a 01                	push   0x1
c000fda3:	53                   	push   ebx
c000fda4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fda7:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c000fdab:	83 c4 20             	add    esp,0x20
c000fdae:	3c 0d                	cmp    al,0xd
c000fdb0:	0f 84 09 01 00 00    	je     c000febf <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fdb6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fdbb:	0f 84 ef 00 00 00    	je     c000feb0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fdc1:	3c 0a                	cmp    al,0xa
c000fdc3:	74 13                	je     c000fdd8 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fdc5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fdca:	74 0c                	je     c000fdd8 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fdcc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000fdd2:	0f 8e d8 00 00 00    	jle    c000feb0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fdd8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fddc:	83 ec 0c             	sub    esp,0xc
c000fddf:	8d 78 01             	lea    edi,[eax+0x1]
c000fde2:	57                   	push   edi
c000fde3:	e8 d1 79 ff ff       	call   c00077b9 <malloc>
c000fde8:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000fdec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fdf0:	8d 56 04             	lea    edx,[esi+0x4]
c000fdf3:	89 14 24             	mov    DWORD PTR [esp],edx
c000fdf6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fdfa:	e8 ba 79 ff ff       	call   c00077b9 <malloc>
c000fdff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000fe03:	83 c4 0c             	add    esp,0xc
c000fe06:	57                   	push   edi
c000fe07:	6a 00                	push   0x0
c000fe09:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fe0d:	e8 be 06 ff ff       	call   c00004d0 <memset>
c000fe12:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fe16:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000fe1a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000fe1e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe20:	83 c4 0c             	add    esp,0xc
c000fe23:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fe27:	52                   	push   edx
c000fe28:	6a 00                	push   0x0
c000fe2a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fe2e:	e8 9d 06 ff ff       	call   c00004d0 <memset>
c000fe33:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fe37:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000fe3b:	89 34 24             	mov    DWORD PTR [esp],esi
c000fe3e:	e8 fd 06 ff ff       	call   c0000540 <strlen>
c000fe43:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000fe47:	89 c1                	mov    ecx,eax
c000fe49:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe4b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fe4e:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000fe51:	40                   	inc    eax
c000fe52:	83 c4 10             	add    esp,0x10
c000fe55:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fe58:	85 d2                	test   edx,edx
c000fe5a:	75 0c                	jne    c000fe68 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c000fe5c:	83 ec 0c             	sub    esp,0xc
c000fe5f:	6a 08                	push   0x8
c000fe61:	e8 53 79 ff ff       	call   c00077b9 <malloc>
c000fe66:	eb 0c                	jmp    c000fe74 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c000fe68:	c1 e0 03             	shl    eax,0x3
c000fe6b:	51                   	push   ecx
c000fe6c:	51                   	push   ecx
c000fe6d:	50                   	push   eax
c000fe6e:	52                   	push   edx
c000fe6f:	e8 31 79 ff ff       	call   c00077a5 <realloc>
c000fe74:	83 c4 10             	add    esp,0x10
c000fe77:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fe7a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fe7d:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000fe80:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fe84:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fe88:	b9 08 00 00 00       	mov    ecx,0x8
c000fe8d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe8f:	31 f6                	xor    esi,esi
c000fe91:	50                   	push   eax
c000fe92:	68 00 01 00 00       	push   0x100
c000fe97:	6a 00                	push   0x0
c000fe99:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fe9d:	50                   	push   eax
c000fe9e:	e8 2d 06 ff ff       	call   c00004d0 <memset>
c000fea3:	83 c4 10             	add    esp,0x10
c000fea6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000feae:	eb 0f                	jmp    c000febf <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000feb0:	3c 3d                	cmp    al,0x3d
c000feb2:	74 07                	je     c000febb <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c000feb4:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c000feb8:	46                   	inc    esi
c000feb9:	eb 04                	jmp    c000febf <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000febb:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000febf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fec4:	0f 85 c6 fe ff ff    	jne    c000fd90 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000feca:	81 c4 2c 01 00 00    	add    esp,0x12c
c000fed0:	5b                   	pop    ebx
c000fed1:	5e                   	pop    esi
c000fed2:	5f                   	pop    edi
c000fed3:	5d                   	pop    ebp
c000fed4:	c3                   	ret    
c000fed5:	90                   	nop

c000fed6 <EnvVarContainer::__loadSystem()>:
c000fed6:	83 ec 10             	sub    esp,0x10
c000fed9:	68 e0 f9 01 c0       	push   0xc001f9e0
c000fede:	68 d4 e6 01 c0       	push   0xc001e6d4
c000fee3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fee7:	e8 04 fe ff ff       	call   c000fcf0 <EnvVarContainer::loadFrom(char const*, char const*)>
c000feec:	83 c4 1c             	add    esp,0x1c
c000feef:	c3                   	ret    

c000fef0 <EnvVarContainer::__loadUser()>:
c000fef0:	c3                   	ret    
c000fef1:	90                   	nop

c000fef2 <EnvVarContainer::EnvVarContainer(Process*)>:
c000fef2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fef6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000fefc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff00:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ff04:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ff07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff0b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ff12:	90                   	nop
c000ff13:	c3                   	ret    

c000ff14 <EnvVarContainer::~EnvVarContainer()>:
c000ff14:	83 ec 0c             	sub    esp,0xc
c000ff17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff1b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff1e:	85 c0                	test   eax,eax
c000ff20:	74 1d                	je     c000ff3f <EnvVarContainer::~EnvVarContainer()+0x2b>
c000ff22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff26:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff28:	85 c0                	test   eax,eax
c000ff2a:	74 13                	je     c000ff3f <EnvVarContainer::~EnvVarContainer()+0x2b>
c000ff2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff30:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff33:	83 ec 0c             	sub    esp,0xc
c000ff36:	50                   	push   eax
c000ff37:	e8 8d 78 ff ff       	call   c00077c9 <free>
c000ff3c:	83 c4 10             	add    esp,0x10
c000ff3f:	90                   	nop
c000ff40:	83 c4 0c             	add    esp,0xc
c000ff43:	c3                   	ret    

c000ff44 <Krnl::getEnv(Process*, char const*)>:
c000ff44:	53                   	push   ebx
c000ff45:	83 ec 08             	sub    esp,0x8
c000ff48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff4c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ff50:	39 05 90 51 02 c0    	cmp    DWORD PTR ds:0xc0025190,eax
c000ff56:	74 04                	je     c000ff5c <Krnl::getEnv(Process*, char const*)+0x18>
c000ff58:	85 c0                	test   eax,eax
c000ff5a:	75 0b                	jne    c000ff67 <Krnl::getEnv(Process*, char const*)+0x23>
c000ff5c:	a1 30 49 02 c0       	mov    eax,ds:0xc0024930
c000ff61:	85 c0                	test   eax,eax
c000ff63:	75 19                	jne    c000ff7e <Krnl::getEnv(Process*, char const*)+0x3a>
c000ff65:	eb 27                	jmp    c000ff8e <Krnl::getEnv(Process*, char const*)+0x4a>
c000ff67:	52                   	push   edx
c000ff68:	52                   	push   edx
c000ff69:	53                   	push   ebx
c000ff6a:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000ff70:	e8 79 fc ff ff       	call   c000fbee <EnvVarContainer::getEnv(char const*)>
c000ff75:	83 c4 10             	add    esp,0x10
c000ff78:	85 c0                	test   eax,eax
c000ff7a:	75 28                	jne    c000ffa4 <Krnl::getEnv(Process*, char const*)+0x60>
c000ff7c:	eb de                	jmp    c000ff5c <Krnl::getEnv(Process*, char const*)+0x18>
c000ff7e:	52                   	push   edx
c000ff7f:	52                   	push   edx
c000ff80:	53                   	push   ebx
c000ff81:	50                   	push   eax
c000ff82:	e8 67 fc ff ff       	call   c000fbee <EnvVarContainer::getEnv(char const*)>
c000ff87:	83 c4 10             	add    esp,0x10
c000ff8a:	85 c0                	test   eax,eax
c000ff8c:	75 16                	jne    c000ffa4 <Krnl::getEnv(Process*, char const*)+0x60>
c000ff8e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ff92:	a1 34 49 02 c0       	mov    eax,ds:0xc0024934
c000ff97:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ff9b:	83 c4 08             	add    esp,0x8
c000ff9e:	5b                   	pop    ebx
c000ff9f:	e9 4a fc ff ff       	jmp    c000fbee <EnvVarContainer::getEnv(char const*)>
c000ffa4:	83 c4 08             	add    esp,0x8
c000ffa7:	5b                   	pop    ebx
c000ffa8:	c3                   	ret    

c000ffa9 <Krnl::setEnvSystem(char const*, char const*)>:
c000ffa9:	83 ec 10             	sub    esp,0x10
c000ffac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ffb0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ffb4:	ff 35 34 49 02 c0    	push   DWORD PTR ds:0xc0024934
c000ffba:	e8 6d fc ff ff       	call   c000fc2c <EnvVarContainer::setEnv(char const*, char const*)>
c000ffbf:	83 c4 1c             	add    esp,0x1c
c000ffc2:	c3                   	ret    

c000ffc3 <Krnl::setEnvUser(char const*, char const*)>:
c000ffc3:	a1 30 49 02 c0       	mov    eax,ds:0xc0024930
c000ffc8:	85 c0                	test   eax,eax
c000ffca:	74 15                	je     c000ffe1 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c000ffcc:	83 ec 10             	sub    esp,0x10
c000ffcf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ffd3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ffd7:	50                   	push   eax
c000ffd8:	e8 4f fc ff ff       	call   c000fc2c <EnvVarContainer::setEnv(char const*, char const*)>
c000ffdd:	83 c4 1c             	add    esp,0x1c
c000ffe0:	c3                   	ret    
c000ffe1:	c3                   	ret    

c000ffe2 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c000ffe2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffe6:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c000ffec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000fff0:	e9 37 fc ff ff       	jmp    c000fc2c <EnvVarContainer::setEnv(char const*, char const*)>

c000fff5 <Krnl::deleteEnvSystem(char const*)>:
c000fff5:	c3                   	ret    

c000fff6 <Krnl::deleteEnvUser(char const*)>:
c000fff6:	c3                   	ret    

c000fff7 <Krnl::deleteEnvProcess(Process*, char const*)>:
c000fff7:	c3                   	ret    

c000fff8 <Krnl::newProcessEnv(Process*)>:
c000fff8:	83 ec 28             	sub    esp,0x28
c000fffb:	6a 0c                	push   0xc
c000fffd:	e8 b7 77 ff ff       	call   c00077b9 <malloc>
c0010002:	5a                   	pop    edx
c0010003:	59                   	pop    ecx
c0010004:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010008:	50                   	push   eax
c0010009:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001000d:	e8 e0 fe ff ff       	call   c000fef2 <EnvVarContainer::EnvVarContainer(Process*)>
c0010012:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010016:	83 c4 2c             	add    esp,0x2c
c0010019:	c3                   	ret    

c001001a <Krnl::copyProcessEnv(Process*, Process*)>:
c001001a:	57                   	push   edi
c001001b:	56                   	push   esi
c001001c:	53                   	push   ebx
c001001d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010021:	83 ec 0c             	sub    esp,0xc
c0010024:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c001002a:	6a 0c                	push   0xc
c001002c:	e8 88 77 ff ff       	call   c00077b9 <malloc>
c0010031:	89 c3                	mov    ebx,eax
c0010033:	58                   	pop    eax
c0010034:	5a                   	pop    edx
c0010035:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010039:	53                   	push   ebx
c001003a:	e8 b3 fe ff ff       	call   c000fef2 <EnvVarContainer::EnvVarContainer(Process*)>
c001003f:	8b 07                	mov    eax,DWORD PTR [edi]
c0010041:	89 03                	mov    DWORD PTR [ebx],eax
c0010043:	c1 e0 03             	shl    eax,0x3
c0010046:	89 04 24             	mov    DWORD PTR [esp],eax
c0010049:	e8 6b 77 ff ff       	call   c00077b9 <malloc>
c001004e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010051:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0010053:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0010056:	c1 e1 03             	shl    ecx,0x3
c0010059:	89 c7                	mov    edi,eax
c001005b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001005d:	83 c4 10             	add    esp,0x10
c0010060:	89 d8                	mov    eax,ebx
c0010062:	5b                   	pop    ebx
c0010063:	5e                   	pop    esi
c0010064:	5f                   	pop    edi
c0010065:	c3                   	ret    

c0010066 <Krnl::loadSystemEnv()>:
c0010066:	53                   	push   ebx
c0010067:	83 ec 14             	sub    esp,0x14
c001006a:	6a 0c                	push   0xc
c001006c:	e8 48 77 ff ff       	call   c00077b9 <malloc>
c0010071:	89 c3                	mov    ebx,eax
c0010073:	58                   	pop    eax
c0010074:	5a                   	pop    edx
c0010075:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c001007b:	53                   	push   ebx
c001007c:	e8 71 fe ff ff       	call   c000fef2 <EnvVarContainer::EnvVarContainer(Process*)>
c0010081:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010084:	89 1d 34 49 02 c0    	mov    DWORD PTR ds:0xc0024934,ebx
c001008a:	e8 47 fe ff ff       	call   c000fed6 <EnvVarContainer::__loadSystem()>
c001008f:	83 c4 18             	add    esp,0x18
c0010092:	5b                   	pop    ebx
c0010093:	c3                   	ret    

c0010094 <Krnl::loadUserEnv()>:
c0010094:	53                   	push   ebx
c0010095:	83 ec 14             	sub    esp,0x14
c0010098:	6a 0c                	push   0xc
c001009a:	e8 1a 77 ff ff       	call   c00077b9 <malloc>
c001009f:	89 c3                	mov    ebx,eax
c00100a1:	58                   	pop    eax
c00100a2:	5a                   	pop    edx
c00100a3:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c00100a9:	53                   	push   ebx
c00100aa:	e8 43 fe ff ff       	call   c000fef2 <EnvVarContainer::EnvVarContainer(Process*)>
c00100af:	89 1d 30 49 02 c0    	mov    DWORD PTR ds:0xc0024930,ebx
c00100b5:	83 c4 18             	add    esp,0x18
c00100b8:	5b                   	pop    ebx
c00100b9:	c3                   	ret    

c00100ba <Krnl::flushEnv()>:
c00100ba:	c3                   	ret    

c00100bb <Krnl::getProcessTotalEnvCount(Process*)>:
c00100bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100bf:	8b 15 30 49 02 c0    	mov    edx,DWORD PTR ds:0xc0024930
c00100c5:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00100cb:	a1 34 49 02 c0       	mov    eax,ds:0xc0024934
c00100d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00100d2:	03 01                	add    eax,DWORD PTR [ecx]
c00100d4:	85 d2                	test   edx,edx
c00100d6:	74 02                	je     c00100da <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c00100d8:	03 02                	add    eax,DWORD PTR [edx]
c00100da:	c3                   	ret    

c00100db <Krnl::getProcessEnvPair(Process*, int)>:
c00100db:	57                   	push   edi
c00100dc:	56                   	push   esi
c00100dd:	8b 35 30 49 02 c0    	mov    esi,DWORD PTR ds:0xc0024930
c00100e3:	53                   	push   ebx
c00100e4:	85 f6                	test   esi,esi
c00100e6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100ea:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00100ee:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00100f4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00100f8:	8b 01                	mov    eax,DWORD PTR [ecx]
c00100fa:	75 16                	jne    c0010112 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c00100fc:	39 c2                	cmp    edx,eax
c00100fe:	7c 16                	jl     c0010116 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010100:	8b 0d 34 49 02 c0    	mov    ecx,DWORD PTR ds:0xc0024934
c0010106:	8b 31                	mov    esi,DWORD PTR [ecx]
c0010108:	01 c6                	add    esi,eax
c001010a:	39 d6                	cmp    esi,edx
c001010c:	7e 3c                	jle    c001014a <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001010e:	29 c2                	sub    edx,eax
c0010110:	eb 04                	jmp    c0010116 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010112:	39 c2                	cmp    edx,eax
c0010114:	7d 05                	jge    c001011b <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0010116:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0010119:	eb 20                	jmp    c001013b <Krnl::getProcessEnvPair(Process*, int)+0x60>
c001011b:	8b 3e                	mov    edi,DWORD PTR [esi]
c001011d:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0010120:	39 d1                	cmp    ecx,edx
c0010122:	7e 04                	jle    c0010128 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0010124:	29 c2                	sub    edx,eax
c0010126:	eb 10                	jmp    c0010138 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0010128:	8b 35 34 49 02 c0    	mov    esi,DWORD PTR ds:0xc0024934
c001012e:	03 0e                	add    ecx,DWORD PTR [esi]
c0010130:	39 d1                	cmp    ecx,edx
c0010132:	7e 16                	jle    c001014a <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010134:	29 c2                	sub    edx,eax
c0010136:	29 fa                	sub    edx,edi
c0010138:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001013b:	8d 14 d0             	lea    edx,[eax+edx*8]
c001013e:	8b 02                	mov    eax,DWORD PTR [edx]
c0010140:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0010143:	89 03                	mov    DWORD PTR [ebx],eax
c0010145:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0010148:	eb 1d                	jmp    c0010167 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c001014a:	83 ec 0c             	sub    esp,0xc
c001014d:	68 f6 e6 01 c0       	push   0xc001e6f6
c0010152:	e8 ac 00 00 00       	call   c0010203 <KePanic(char const*)>
c0010157:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001015d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010164:	83 c4 10             	add    esp,0x10
c0010167:	89 d8                	mov    eax,ebx
c0010169:	5b                   	pop    ebx
c001016a:	5e                   	pop    esi
c001016b:	5f                   	pop    edi
c001016c:	c2 04 00             	ret    0x4

c001016f <CPU::current()>:
c001016f:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0010174:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001017a:	c3                   	ret    

c001017b <operator new(unsigned long)>:
c001017b:	e9 39 76 ff ff       	jmp    c00077b9 <malloc>

c0010180 <operator delete(void*)>:
c0010180:	e9 54 76 ff ff       	jmp    c00077d9 <rfree>

c0010185 <disableIRQs()>:
c0010185:	fa                   	cli    
c0010186:	c3                   	ret    

c0010187 <enableIRQs()>:
c0010187:	fb                   	sti    
c0010188:	c3                   	ret    

c0010189 <lockScheduler()>:
c0010189:	fa                   	cli    
c001018a:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0010190:	c3                   	ret    

c0010191 <unlockScheduler()>:
c0010191:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0010196:	48                   	dec    eax
c0010197:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001019c:	75 01                	jne    c001019f <unlockScheduler()+0xe>
c001019e:	fb                   	sti    
c001019f:	c3                   	ret    

c00101a0 <lockStuff()>:
c00101a0:	fa                   	cli    
c00101a1:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00101a7:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c00101ad:	c3                   	ret    

c00101ae <unlockStuff()>:
c00101ae:	83 ec 0c             	sub    esp,0xc
c00101b1:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c00101b6:	48                   	dec    eax
c00101b7:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c00101bc:	75 18                	jne    c00101d6 <unlockStuff()+0x28>
c00101be:	83 3d 60 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025160,0x0
c00101c5:	74 0f                	je     c00101d6 <unlockStuff()+0x28>
c00101c7:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c00101d1:	e8 22 36 00 00       	call   c00137f8 <schedule()>
c00101d6:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00101db:	48                   	dec    eax
c00101dc:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00101e1:	75 01                	jne    c00101e4 <unlockStuff()+0x36>
c00101e3:	fb                   	sti    
c00101e4:	83 c4 0c             	add    esp,0xc
c00101e7:	c3                   	ret    

c00101e8 <Virt::getAKernelVAS()>:
c00101e8:	a1 b0 1f 02 c0       	mov    eax,ds:0xc0021fb0
c00101ed:	c3                   	ret    

c00101ee <__not_memcpy>:
c00101ee:	57                   	push   edi
c00101ef:	56                   	push   esi
c00101f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00101f4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00101f8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00101fc:	89 c7                	mov    edi,eax
c00101fe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010200:	5e                   	pop    esi
c0010201:	5f                   	pop    edi
c0010202:	c3                   	ret    

c0010203 <KePanic(char const*)>:
c0010203:	c6 05 38 49 02 c0 01 	mov    BYTE PTR ds:0xc0024938,0x1
c001020a:	e9 e1 53 00 00       	jmp    c00155f0 <HalPanic(char const*)>

c001020f <Krnl::powerThread(void*)>:
c001020f:	83 ec 0c             	sub    esp,0xc
c0010212:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0010217:	48                   	dec    eax
c0010218:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001021d:	75 01                	jne    c0010220 <Krnl::powerThread(void*)+0x11>
c001021f:	fb                   	sti    
c0010220:	83 ec 0c             	sub    esp,0xc
c0010223:	c6 05 40 49 02 c0 00 	mov    BYTE PTR ds:0xc0024940,0x0
c001022a:	6a 0a                	push   0xa
c001022c:	e8 d7 38 00 00       	call   c0013b08 <sleep(unsigned int)>
c0010231:	83 05 84 49 02 c0 0a 	add    DWORD PTR ds:0xc0024984,0xa
c0010238:	83 c4 10             	add    esp,0x10
c001023b:	eb e3                	jmp    c0010220 <Krnl::powerThread(void*)+0x11>

c001023d <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c001023d:	57                   	push   edi
c001023e:	b9 09 00 00 00       	mov    ecx,0x9
c0010243:	56                   	push   esi
c0010244:	bf 60 49 02 c0       	mov    edi,0xc0024960
c0010249:	fc                   	cld    
c001024a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001024e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010250:	5e                   	pop    esi
c0010251:	5f                   	pop    edi
c0010252:	c3                   	ret    

c0010253 <Krnl::userIOReceived()>:
c0010253:	c7 05 84 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024984,0x0
c001025d:	c3                   	ret    

c001025e <Krnl::handlePowerButton()>:
c001025e:	83 ec 0c             	sub    esp,0xc
c0010261:	a1 60 49 02 c0       	mov    eax,ds:0xc0024960
c0010266:	83 f8 02             	cmp    eax,0x2
c0010269:	75 10                	jne    c001027b <Krnl::handlePowerButton()+0x1d>
c001026b:	83 ec 0c             	sub    esp,0xc
c001026e:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0010274:	e8 dd 6b ff ff       	call   c0006e56 <Computer::shutdown()>
c0010279:	eb 11                	jmp    c001028c <Krnl::handlePowerButton()+0x2e>
c001027b:	48                   	dec    eax
c001027c:	75 11                	jne    c001028f <Krnl::handlePowerButton()+0x31>
c001027e:	83 ec 0c             	sub    esp,0xc
c0010281:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0010287:	e8 fa 6b ff ff       	call   c0006e86 <Computer::sleep()>
c001028c:	83 c4 10             	add    esp,0x10
c001028f:	83 c4 0c             	add    esp,0xc
c0010292:	c3                   	ret    

c0010293 <Krnl::handleSleepButton()>:
c0010293:	83 ec 0c             	sub    esp,0xc
c0010296:	a1 64 49 02 c0       	mov    eax,ds:0xc0024964
c001029b:	83 f8 02             	cmp    eax,0x2
c001029e:	75 10                	jne    c00102b0 <Krnl::handleSleepButton()+0x1d>
c00102a0:	83 ec 0c             	sub    esp,0xc
c00102a3:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00102a9:	e8 a8 6b ff ff       	call   c0006e56 <Computer::shutdown()>
c00102ae:	eb 11                	jmp    c00102c1 <Krnl::handleSleepButton()+0x2e>
c00102b0:	48                   	dec    eax
c00102b1:	75 11                	jne    c00102c4 <Krnl::handleSleepButton()+0x31>
c00102b3:	83 ec 0c             	sub    esp,0xc
c00102b6:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00102bc:	e8 c5 6b ff ff       	call   c0006e86 <Computer::sleep()>
c00102c1:	83 c4 10             	add    esp,0x10
c00102c4:	83 c4 0c             	add    esp,0xc
c00102c7:	c3                   	ret    

c00102c8 <Krnl::setupPowerManager()>:
c00102c8:	83 ec 0c             	sub    esp,0xc
c00102cb:	c7 05 84 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024984,0x0
c00102d5:	68 f0 00 00 00       	push   0xf0
c00102da:	c6 05 40 49 02 c0 00 	mov    BYTE PTR ds:0xc0024940,0x0
c00102e1:	6a 00                	push   0x0
c00102e3:	68 0f 02 01 c0       	push   0xc001020f
c00102e8:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c00102ee:	e8 e5 32 00 00       	call   c00135d8 <Process::createThread(void (*)(void*), void*, int)>
c00102f3:	c7 05 60 49 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0024960,0x2
c00102fd:	c7 05 64 49 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0024964,0x1
c0010307:	c7 05 68 49 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0024968,0x3
c0010311:	c7 05 6c 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002496c,0x0
c001031b:	c7 05 78 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024978,0x0
c0010325:	c7 05 70 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024970,0x0
c001032f:	c7 05 7c 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002497c,0x0
c0010339:	c7 05 74 49 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0024974,0x3c
c0010343:	c7 05 80 49 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0024980,0x3c
c001034d:	83 c4 1c             	add    esp,0x1c
c0010350:	c3                   	ret    
c0010351:	66 90                	xchg   ax,ax
c0010353:	90                   	nop

c0010354 <KeResolveCompatibilitySymbol(char*)>:
c0010354:	83 ec 0c             	sub    esp,0xc
c0010357:	83 ec 08             	sub    esp,0x8
c001035a:	68 10 e7 01 c0       	push   0xc001e710
c001035f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010363:	e8 78 03 ff ff       	call   c00006e0 <strcmp>
c0010368:	83 c4 10             	add    esp,0x10
c001036b:	85 c0                	test   eax,eax
c001036d:	0f 94 c0             	sete   al
c0010370:	84 c0                	test   al,al
c0010372:	74 0c                	je     c0010380 <KeResolveCompatibilitySymbol(char*)+0x2c>
c0010374:	b8 b8 1e 02 c0       	mov    eax,0xc0021eb8
c0010379:	e9 62 01 00 00       	jmp    c00104e0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001037e:	66 90                	xchg   ax,ax
c0010380:	83 ec 08             	sub    esp,0x8
c0010383:	68 19 e7 01 c0       	push   0xc001e719
c0010388:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001038c:	e8 4f 03 ff ff       	call   c00006e0 <strcmp>
c0010391:	83 c4 10             	add    esp,0x10
c0010394:	85 c0                	test   eax,eax
c0010396:	0f 94 c0             	sete   al
c0010399:	84 c0                	test   al,al
c001039b:	74 0b                	je     c00103a8 <KeResolveCompatibilitySymbol(char*)+0x54>
c001039d:	b8 50 c1 01 c0       	mov    eax,0xc001c150
c00103a2:	e9 39 01 00 00       	jmp    c00104e0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103a7:	90                   	nop
c00103a8:	83 ec 08             	sub    esp,0x8
c00103ab:	68 23 e7 01 c0       	push   0xc001e723
c00103b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103b4:	e8 27 03 ff ff       	call   c00006e0 <strcmp>
c00103b9:	83 c4 10             	add    esp,0x10
c00103bc:	85 c0                	test   eax,eax
c00103be:	0f 94 c0             	sete   al
c00103c1:	84 c0                	test   al,al
c00103c3:	74 0b                	je     c00103d0 <KeResolveCompatibilitySymbol(char*)+0x7c>
c00103c5:	b8 84 be 01 c0       	mov    eax,0xc001be84
c00103ca:	e9 11 01 00 00       	jmp    c00104e0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103cf:	90                   	nop
c00103d0:	83 ec 08             	sub    esp,0x8
c00103d3:	68 2c e7 01 c0       	push   0xc001e72c
c00103d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103dc:	e8 ff 02 ff ff       	call   c00006e0 <strcmp>
c00103e1:	83 c4 10             	add    esp,0x10
c00103e4:	85 c0                	test   eax,eax
c00103e6:	0f 94 c0             	sete   al
c00103e9:	84 c0                	test   al,al
c00103eb:	74 0b                	je     c00103f8 <KeResolveCompatibilitySymbol(char*)+0xa4>
c00103ed:	b8 03 02 01 c0       	mov    eax,0xc0010203
c00103f2:	e9 e9 00 00 00       	jmp    c00104e0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103f7:	90                   	nop
c00103f8:	83 ec 08             	sub    esp,0x8
c00103fb:	68 3f e7 01 c0       	push   0xc001e73f
c0010400:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010404:	e8 d7 02 ff ff       	call   c00006e0 <strcmp>
c0010409:	83 c4 10             	add    esp,0x10
c001040c:	85 c0                	test   eax,eax
c001040e:	0f 94 c0             	sete   al
c0010411:	84 c0                	test   al,al
c0010413:	74 0b                	je     c0010420 <KeResolveCompatibilitySymbol(char*)+0xcc>
c0010415:	b8 8b fb 00 c0       	mov    eax,0xc000fb8b
c001041a:	e9 c1 00 00 00       	jmp    c00104e0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001041f:	90                   	nop
c0010420:	83 ec 08             	sub    esp,0x8
c0010423:	68 5c e7 01 c0       	push   0xc001e75c
c0010428:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001042c:	e8 af 02 ff ff       	call   c00006e0 <strcmp>
c0010431:	83 c4 10             	add    esp,0x10
c0010434:	85 c0                	test   eax,eax
c0010436:	0f 94 c0             	sete   al
c0010439:	84 c0                	test   al,al
c001043b:	74 0b                	je     c0010448 <KeResolveCompatibilitySymbol(char*)+0xf4>
c001043d:	b8 50 c2 01 c0       	mov    eax,0xc001c250
c0010442:	e9 99 00 00 00       	jmp    c00104e0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010447:	90                   	nop
c0010448:	83 ec 08             	sub    esp,0x8
c001044b:	68 66 e7 01 c0       	push   0xc001e766
c0010450:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010454:	e8 87 02 ff ff       	call   c00006e0 <strcmp>
c0010459:	83 c4 10             	add    esp,0x10
c001045c:	85 c0                	test   eax,eax
c001045e:	0f 94 c0             	sete   al
c0010461:	84 c0                	test   al,al
c0010463:	74 07                	je     c001046c <KeResolveCompatibilitySymbol(char*)+0x118>
c0010465:	b8 d0 bf 01 c0       	mov    eax,0xc001bfd0
c001046a:	eb 74                	jmp    c00104e0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001046c:	83 ec 08             	sub    esp,0x8
c001046f:	68 6f e7 01 c0       	push   0xc001e76f
c0010474:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010478:	e8 63 02 ff ff       	call   c00006e0 <strcmp>
c001047d:	83 c4 10             	add    esp,0x10
c0010480:	85 c0                	test   eax,eax
c0010482:	0f 94 c0             	sete   al
c0010485:	84 c0                	test   al,al
c0010487:	74 07                	je     c0010490 <KeResolveCompatibilitySymbol(char*)+0x13c>
c0010489:	b8 bc 1e 02 c0       	mov    eax,0xc0021ebc
c001048e:	eb 50                	jmp    c00104e0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010490:	83 ec 08             	sub    esp,0x8
c0010493:	68 87 e7 01 c0       	push   0xc001e787
c0010498:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001049c:	e8 3f 02 ff ff       	call   c00006e0 <strcmp>
c00104a1:	83 c4 10             	add    esp,0x10
c00104a4:	85 c0                	test   eax,eax
c00104a6:	0f 94 c0             	sete   al
c00104a9:	84 c0                	test   al,al
c00104ab:	74 07                	je     c00104b4 <KeResolveCompatibilitySymbol(char*)+0x160>
c00104ad:	b8 bc 1e 02 c0       	mov    eax,0xc0021ebc
c00104b2:	eb 2c                	jmp    c00104e0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00104b4:	83 ec 08             	sub    esp,0x8
c00104b7:	68 94 e7 01 c0       	push   0xc001e794
c00104bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104c0:	e8 1b 02 ff ff       	call   c00006e0 <strcmp>
c00104c5:	83 c4 10             	add    esp,0x10
c00104c8:	85 c0                	test   eax,eax
c00104ca:	0f 94 c0             	sete   al
c00104cd:	84 c0                	test   al,al
c00104cf:	74 07                	je     c00104d8 <KeResolveCompatibilitySymbol(char*)+0x184>
c00104d1:	b8 bd 1e 02 c0       	mov    eax,0xc0021ebd
c00104d6:	eb 08                	jmp    c00104e0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00104d8:	b8 00 00 00 00       	mov    eax,0x0
c00104dd:	8d 76 00             	lea    esi,[esi+0x0]
c00104e0:	83 c4 0c             	add    esp,0xc
c00104e3:	c3                   	ret    

c00104e4 <KiSigKill(int)>:
c00104e4:	57                   	push   edi
c00104e5:	b9 0a 00 00 00       	mov    ecx,0xa
c00104ea:	56                   	push   esi
c00104eb:	be dd e7 01 c0       	mov    esi,0xc001e7dd
c00104f0:	83 ec 14             	sub    esp,0x14
c00104f3:	8d 7c 24 06          	lea    edi,[esp+0x6]
c00104f7:	fc                   	cld    
c00104f8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00104fa:	8d 44 24 06          	lea    eax,[esp+0x6]
c00104fe:	50                   	push   eax
c00104ff:	6a 00                	push   0x0
c0010501:	6a 00                	push   0x0
c0010503:	6a 27                	push   0x27
c0010505:	e8 48 fb 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001050a:	83 c4 24             	add    esp,0x24
c001050d:	5e                   	pop    esi
c001050e:	5f                   	pop    edi
c001050f:	c3                   	ret    

c0010510 <KiDefaultSignalHandlerIgnore(int)>:
c0010510:	c3                   	ret    

c0010511 <KiDefaultSignalHandlerPause(int)>:
c0010511:	57                   	push   edi
c0010512:	b9 07 00 00 00       	mov    ecx,0x7
c0010517:	56                   	push   esi
c0010518:	be e7 e7 01 c0       	mov    esi,0xc001e7e7
c001051d:	83 ec 24             	sub    esp,0x24
c0010520:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010524:	fc                   	cld    
c0010525:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010527:	8d 44 24 04          	lea    eax,[esp+0x4]
c001052b:	50                   	push   eax
c001052c:	6a 00                	push   0x0
c001052e:	6a 00                	push   0x0
c0010530:	6a 27                	push   0x27
c0010532:	e8 1b fb 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010537:	83 c4 34             	add    esp,0x34
c001053a:	5e                   	pop    esi
c001053b:	5f                   	pop    edi
c001053c:	c3                   	ret    

c001053d <KiDefaultSignalHandlerResume(int)>:
c001053d:	57                   	push   edi
c001053e:	b9 1d 00 00 00       	mov    ecx,0x1d
c0010543:	56                   	push   esi
c0010544:	be 03 e8 01 c0       	mov    esi,0xc001e803
c0010549:	83 ec 24             	sub    esp,0x24
c001054c:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0010550:	fc                   	cld    
c0010551:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010553:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010557:	50                   	push   eax
c0010558:	6a 00                	push   0x0
c001055a:	6a 00                	push   0x0
c001055c:	6a 27                	push   0x27
c001055e:	e8 ef fa 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010563:	83 c4 34             	add    esp,0x34
c0010566:	5e                   	pop    esi
c0010567:	5f                   	pop    edi
c0010568:	c3                   	ret    

c0010569 <KeDeinitSignals(SigHandlerBlock*)>:
c0010569:	e9 5b 72 ff ff       	jmp    c00077c9 <free>

c001056e <KeInitSignals()>:
c001056e:	53                   	push   ebx
c001056f:	83 ec 14             	sub    esp,0x14
c0010572:	68 c8 00 00 00       	push   0xc8
c0010577:	e8 3d 72 ff ff       	call   c00077b9 <malloc>
c001057c:	83 c4 0c             	add    esp,0xc
c001057f:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0010589:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0010593:	89 c3                	mov    ebx,eax
c0010595:	6a 20                	push   0x20
c0010597:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c001059d:	6a 00                	push   0x0
c001059f:	50                   	push   eax
c00105a0:	e8 2b ff fe ff       	call   c00004d0 <memset>
c00105a5:	83 c4 0c             	add    esp,0xc
c00105a8:	6a 44                	push   0x44
c00105aa:	6a 00                	push   0x0
c00105ac:	53                   	push   ebx
c00105ad:	e8 1e ff fe ff       	call   c00004d0 <memset>
c00105b2:	89 d8                	mov    eax,ebx
c00105b4:	83 c4 18             	add    esp,0x18
c00105b7:	5b                   	pop    ebx
c00105b8:	c3                   	ret    

c00105b9 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c00105b9:	53                   	push   ebx
c00105ba:	b8 01 00 00 00       	mov    eax,0x1
c00105bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00105c3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00105c7:	83 f9 10             	cmp    ecx,0x10
c00105ca:	7f 21                	jg     c00105ed <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c00105cc:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c00105cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105d3:	89 03                	mov    DWORD PTR [ebx],eax
c00105d5:	b8 01 00 00 00       	mov    eax,0x1
c00105da:	d3 e0                	shl    eax,cl
c00105dc:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00105e0:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00105e3:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c00105eb:	31 c0                	xor    eax,eax
c00105ed:	5b                   	pop    ebx
c00105ee:	c3                   	ret    

c00105ef <KeRaiseSignal(SigHandlerBlock*, int)>:
c00105ef:	55                   	push   ebp
c00105f0:	57                   	push   edi
c00105f1:	bf 08 00 00 00       	mov    edi,0x8
c00105f6:	56                   	push   esi
c00105f7:	53                   	push   ebx
c00105f8:	83 ec 18             	sub    esp,0x18
c00105fb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00105ff:	68 20 e8 01 c0       	push   0xc001e820
c0010604:	e8 78 9f ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c0010609:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010610:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0010616:	83 c4 10             	add    esp,0x10
c0010619:	31 c9                	xor    ecx,ecx
c001061b:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001061f:	99                   	cdq    
c0010620:	f7 ff                	idiv   edi
c0010622:	8d 42 24             	lea    eax,[edx+0x24]
c0010625:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0010629:	85 f6                	test   esi,esi
c001062b:	75 1a                	jne    c0010647 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c001062d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0010631:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0010635:	50                   	push   eax
c0010636:	50                   	push   eax
c0010637:	52                   	push   edx
c0010638:	68 31 e8 01 c0       	push   0xc001e831
c001063d:	e8 3f 9f ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c0010642:	83 c4 10             	add    esp,0x10
c0010645:	eb 1b                	jmp    c0010662 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0010647:	41                   	inc    ecx
c0010648:	83 f9 08             	cmp    ecx,0x8
c001064b:	75 ce                	jne    c001061b <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c001064d:	83 ec 0c             	sub    esp,0xc
c0010650:	be 01 00 00 00       	mov    esi,0x1
c0010655:	68 52 e8 01 c0       	push   0xc001e852
c001065a:	e8 22 9f ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c001065f:	83 c4 10             	add    esp,0x10
c0010662:	83 c4 0c             	add    esp,0xc
c0010665:	89 f0                	mov    eax,esi
c0010667:	5b                   	pop    ebx
c0010668:	5e                   	pop    esi
c0010669:	5f                   	pop    edi
c001066a:	5d                   	pop    ebp
c001066b:	c3                   	ret    

c001066c <KeCheckSignal(SigHandlerBlock*)>:
c001066c:	55                   	push   ebp
c001066d:	57                   	push   edi
c001066e:	56                   	push   esi
c001066f:	53                   	push   ebx
c0010670:	51                   	push   ecx
c0010671:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010675:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c001067c:	75 07                	jne    c0010685 <KeCheckSignal(SigHandlerBlock*)+0x19>
c001067e:	31 c0                	xor    eax,eax
c0010680:	e9 cc 00 00 00       	jmp    c0010751 <KeCheckSignal(SigHandlerBlock*)+0xe5>
c0010685:	31 c9                	xor    ecx,ecx
c0010687:	bf 08 00 00 00       	mov    edi,0x8
c001068c:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0010692:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0010695:	99                   	cdq    
c0010696:	f7 ff                	idiv   edi
c0010698:	8b 94 93 9c 00 00 00 	mov    edx,DWORD PTR [ebx+edx*4+0x9c]
c001069f:	85 d2                	test   edx,edx
c00106a1:	0f 84 94 00 00 00    	je     c001073b <KeCheckSignal(SigHandlerBlock*)+0xcf>
c00106a7:	88 d1                	mov    cl,dl
c00106a9:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c00106af:	bf 01 00 00 00       	mov    edi,0x1
c00106b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00106b7:	d3 e7                	shl    edi,cl
c00106b9:	bd 01 00 00 00       	mov    ebp,0x1
c00106be:	31 c9                	xor    ecx,ecx
c00106c0:	89 e8                	mov    eax,ebp
c00106c2:	d3 e0                	shl    eax,cl
c00106c4:	85 04 24             	test   DWORD PTR [esp],eax
c00106c7:	74 06                	je     c00106cf <KeCheckSignal(SigHandlerBlock*)+0x63>
c00106c9:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c00106cd:	75 af                	jne    c001067e <KeCheckSignal(SigHandlerBlock*)+0x12>
c00106cf:	41                   	inc    ecx
c00106d0:	83 f9 11             	cmp    ecx,0x11
c00106d3:	75 eb                	jne    c00106c0 <KeCheckSignal(SigHandlerBlock*)+0x54>
c00106d5:	8d 4e 01             	lea    ecx,[esi+0x1]
c00106d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00106db:	89 8b bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],ecx
c00106e1:	09 f8                	or     eax,edi
c00106e3:	c7 84 b3 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+esi*4+0x9c],0x0
c00106ee:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c00106f4:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c00106fb:	31 c0                	xor    eax,eax
c00106fd:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0010705:	74 09                	je     c0010710 <KeCheckSignal(SigHandlerBlock*)+0xa4>
c0010707:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c001070e:	eb 06                	jmp    c0010716 <KeCheckSignal(SigHandlerBlock*)+0xaa>
c0010710:	40                   	inc    eax
c0010711:	83 f8 08             	cmp    eax,0x8
c0010714:	75 e7                	jne    c00106fd <KeCheckSignal(SigHandlerBlock*)+0x91>
c0010716:	8b 04 93             	mov    eax,DWORD PTR [ebx+edx*4]
c0010719:	83 fa 09             	cmp    edx,0x9
c001071c:	75 07                	jne    c0010725 <KeCheckSignal(SigHandlerBlock*)+0xb9>
c001071e:	b8 e4 04 01 c0       	mov    eax,0xc00104e4
c0010723:	eb 2c                	jmp    c0010751 <KeCheckSignal(SigHandlerBlock*)+0xe5>
c0010725:	83 f8 01             	cmp    eax,0x1
c0010728:	0f 84 50 ff ff ff    	je     c001067e <KeCheckSignal(SigHandlerBlock*)+0x12>
c001072e:	85 c0                	test   eax,eax
c0010730:	75 1f                	jne    c0010751 <KeCheckSignal(SigHandlerBlock*)+0xe5>
c0010732:	8b 04 95 40 fa 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe05c0]
c0010739:	eb 16                	jmp    c0010751 <KeCheckSignal(SigHandlerBlock*)+0xe5>
c001073b:	46                   	inc    esi
c001073c:	41                   	inc    ecx
c001073d:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010743:	83 f9 08             	cmp    ecx,0x8
c0010746:	0f 85 40 ff ff ff    	jne    c001068c <KeCheckSignal(SigHandlerBlock*)+0x20>
c001074c:	e9 2d ff ff ff       	jmp    c001067e <KeCheckSignal(SigHandlerBlock*)+0x12>
c0010751:	5a                   	pop    edx
c0010752:	5b                   	pop    ebx
c0010753:	5e                   	pop    esi
c0010754:	5f                   	pop    edi
c0010755:	5d                   	pop    ebp
c0010756:	c3                   	ret    

c0010757 <KiCheckSignalZ>:
c0010757:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001075c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001075f:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010765:	e8 02 ff ff ff       	call   c001066c <KeCheckSignal(SigHandlerBlock*)>
c001076a:	5a                   	pop    edx
c001076b:	c3                   	ret    

c001076c <KeCompleteSignal(SigHandlerBlock*, int)>:
c001076c:	56                   	push   esi
c001076d:	53                   	push   ebx
c001076e:	bb 01 00 00 00       	mov    ebx,0x1
c0010773:	52                   	push   edx
c0010774:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010778:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001077c:	d3 e3                	shl    ebx,cl
c001077e:	83 f9 10             	cmp    ecx,0x10
c0010781:	7f 08                	jg     c001078b <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0010783:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0010789:	75 10                	jne    c001079b <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c001078b:	83 ec 0c             	sub    esp,0xc
c001078e:	68 63 e8 01 c0       	push   0xc001e863
c0010793:	e8 6b fa ff ff       	call   c0010203 <KePanic(char const*)>
c0010798:	83 c4 10             	add    esp,0x10
c001079b:	f7 d3                	not    ebx
c001079d:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c00107a3:	58                   	pop    eax
c00107a4:	5b                   	pop    ebx
c00107a5:	5e                   	pop    esi
c00107a6:	c3                   	ret    

c00107a7 <SysSeekDir(regs*)>:
c00107a7:	31 c0                	xor    eax,eax
c00107a9:	31 d2                	xor    edx,edx
c00107ab:	c3                   	ret    

c00107ac <SysTellDir(regs*)>:
c00107ac:	31 c0                	xor    eax,eax
c00107ae:	31 d2                	xor    edx,edx
c00107b0:	c3                   	ret    

c00107b1 <SysVerify(regs*)>:
c00107b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107b5:	31 d2                	xor    edx,edx
c00107b7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00107ba:	c3                   	ret    

c00107bb <SysGetArgc(regs*)>:
c00107bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00107c0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00107c3:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c00107c9:	99                   	cdq    
c00107ca:	c3                   	ret    

c00107cb <SysTTYName(regs*)>:
c00107cb:	b8 01 00 00 00       	mov    eax,0x1
c00107d0:	31 d2                	xor    edx,edx
c00107d2:	c3                   	ret    

c00107d3 <SysFormatDisk(regs*)>:
c00107d3:	56                   	push   esi
c00107d4:	53                   	push   ebx
c00107d5:	50                   	push   eax
c00107d6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00107da:	8b 1d b4 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb4
c00107e0:	eb 28                	jmp    c001080a <SysFormatDisk(regs*)+0x37>
c00107e2:	83 ec 0c             	sub    esp,0xc
c00107e5:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00107e8:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c00107eb:	8b 13                	mov    edx,DWORD PTR [ebx]
c00107ed:	51                   	push   ecx
c00107ee:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c00107f1:	51                   	push   ecx
c00107f2:	50                   	push   eax
c00107f3:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c00107fa:	50                   	push   eax
c00107fb:	53                   	push   ebx
c00107fc:	ff 52 48             	call   DWORD PTR [edx+0x48]
c00107ff:	83 c4 20             	add    esp,0x20
c0010802:	83 f8 08             	cmp    eax,0x8
c0010805:	75 12                	jne    c0010819 <SysFormatDisk(regs*)+0x46>
c0010807:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001080a:	85 db                	test   ebx,ebx
c001080c:	75 d4                	jne    c00107e2 <SysFormatDisk(regs*)+0xf>
c001080e:	59                   	pop    ecx
c001080f:	b8 03 00 00 00       	mov    eax,0x3
c0010814:	31 d2                	xor    edx,edx
c0010816:	5b                   	pop    ebx
c0010817:	5e                   	pop    esi
c0010818:	c3                   	ret    
c0010819:	85 c0                	test   eax,eax
c001081b:	74 1b                	je     c0010838 <SysFormatDisk(regs*)+0x65>
c001081d:	83 f8 09             	cmp    eax,0x9
c0010820:	74 0b                	je     c001082d <SysFormatDisk(regs*)+0x5a>
c0010822:	59                   	pop    ecx
c0010823:	b8 02 00 00 00       	mov    eax,0x2
c0010828:	31 d2                	xor    edx,edx
c001082a:	5b                   	pop    ebx
c001082b:	5e                   	pop    esi
c001082c:	c3                   	ret    
c001082d:	59                   	pop    ecx
c001082e:	b8 01 00 00 00       	mov    eax,0x1
c0010833:	31 d2                	xor    edx,edx
c0010835:	5b                   	pop    ebx
c0010836:	5e                   	pop    esi
c0010837:	c3                   	ret    
c0010838:	59                   	pop    ecx
c0010839:	31 c0                	xor    eax,eax
c001083b:	31 d2                	xor    edx,edx
c001083d:	5b                   	pop    ebx
c001083e:	5e                   	pop    esi
c001083f:	c3                   	ret    

c0010840 <SysSetDiskVolumeLabel(regs*)>:
c0010840:	56                   	push   esi
c0010841:	53                   	push   ebx
c0010842:	53                   	push   ebx
c0010843:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010847:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001084a:	83 f8 19             	cmp    eax,0x19
c001084d:	77 2d                	ja     c001087c <SysSetDiskVolumeLabel(regs*)+0x3c>
c001084f:	8b 0c 85 20 44 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbbe0]
c0010856:	85 c9                	test   ecx,ecx
c0010858:	74 22                	je     c001087c <SysSetDiskVolumeLabel(regs*)+0x3c>
c001085a:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c001085d:	85 db                	test   ebx,ebx
c001085f:	74 1b                	je     c001087c <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010861:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c0010867:	85 d2                	test   edx,edx
c0010869:	74 11                	je     c001087c <SysSetDiskVolumeLabel(regs*)+0x3c>
c001086b:	8b 32                	mov    esi,DWORD PTR [edx]
c001086d:	53                   	push   ebx
c001086e:	50                   	push   eax
c001086f:	51                   	push   ecx
c0010870:	52                   	push   edx
c0010871:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0010874:	83 c4 10             	add    esp,0x10
c0010877:	99                   	cdq    
c0010878:	59                   	pop    ecx
c0010879:	5b                   	pop    ebx
c001087a:	5e                   	pop    esi
c001087b:	c3                   	ret    
c001087c:	59                   	pop    ecx
c001087d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010882:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010887:	5b                   	pop    ebx
c0010888:	5e                   	pop    esi
c0010889:	c3                   	ret    

c001088a <SysGetDiskVolumeLabel(regs*)>:
c001088a:	57                   	push   edi
c001088b:	56                   	push   esi
c001088c:	53                   	push   ebx
c001088d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010891:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010894:	83 fa 19             	cmp    edx,0x19
c0010897:	77 38                	ja     c00108d1 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010899:	8b 0c 95 20 44 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdbbe0]
c00108a0:	85 c9                	test   ecx,ecx
c00108a2:	74 2d                	je     c00108d1 <SysGetDiskVolumeLabel(regs*)+0x47>
c00108a4:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00108a7:	85 db                	test   ebx,ebx
c00108a9:	74 26                	je     c00108d1 <SysGetDiskVolumeLabel(regs*)+0x47>
c00108ab:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00108ae:	85 f6                	test   esi,esi
c00108b0:	74 1f                	je     c00108d1 <SysGetDiskVolumeLabel(regs*)+0x47>
c00108b2:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c00108b8:	85 c0                	test   eax,eax
c00108ba:	74 15                	je     c00108d1 <SysGetDiskVolumeLabel(regs*)+0x47>
c00108bc:	83 ec 0c             	sub    esp,0xc
c00108bf:	8b 38                	mov    edi,DWORD PTR [eax]
c00108c1:	56                   	push   esi
c00108c2:	53                   	push   ebx
c00108c3:	52                   	push   edx
c00108c4:	51                   	push   ecx
c00108c5:	50                   	push   eax
c00108c6:	ff 57 54             	call   DWORD PTR [edi+0x54]
c00108c9:	83 c4 20             	add    esp,0x20
c00108cc:	99                   	cdq    
c00108cd:	5b                   	pop    ebx
c00108ce:	5e                   	pop    esi
c00108cf:	5f                   	pop    edi
c00108d0:	c3                   	ret    
c00108d1:	5b                   	pop    ebx
c00108d2:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00108d7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00108dc:	5e                   	pop    esi
c00108dd:	5f                   	pop    edi
c00108de:	c3                   	ret    

c00108df <SysShutdown(regs*)>:
c00108df:	83 ec 0c             	sub    esp,0xc
c00108e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108e6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00108e9:	85 c0                	test   eax,eax
c00108eb:	74 18                	je     c0010905 <SysShutdown(regs*)+0x26>
c00108ed:	83 f8 01             	cmp    eax,0x1
c00108f0:	74 38                	je     c001092a <SysShutdown(regs*)+0x4b>
c00108f2:	83 f8 02             	cmp    eax,0x2
c00108f5:	74 24                	je     c001091b <SysShutdown(regs*)+0x3c>
c00108f7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00108fc:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010901:	83 c4 0c             	add    esp,0xc
c0010904:	c3                   	ret    
c0010905:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001090a:	8b 10                	mov    edx,DWORD PTR [eax]
c001090c:	6a 00                	push   0x0
c001090e:	6a 00                	push   0x0
c0010910:	6a 00                	push   0x0
c0010912:	50                   	push   eax
c0010913:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010916:	83 c4 10             	add    esp,0x10
c0010919:	eb dc                	jmp    c00108f7 <SysShutdown(regs*)+0x18>
c001091b:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0010920:	8b 10                	mov    edx,DWORD PTR [eax]
c0010922:	6a 00                	push   0x0
c0010924:	6a 00                	push   0x0
c0010926:	6a 01                	push   0x1
c0010928:	eb e8                	jmp    c0010912 <SysShutdown(regs*)+0x33>
c001092a:	a1 a0 44 02 c0       	mov    eax,ds:0xc00244a0
c001092f:	85 c0                	test   eax,eax
c0010931:	74 02                	je     c0010935 <SysShutdown(regs*)+0x56>
c0010933:	ff d0                	call   eax
c0010935:	31 c0                	xor    eax,eax
c0010937:	31 d2                	xor    edx,edx
c0010939:	83 c4 0c             	add    esp,0xc
c001093c:	c3                   	ret    

c001093d <SysRealpath(regs*)>:
c001093d:	83 ec 0c             	sub    esp,0xc
c0010940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010944:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010947:	85 d2                	test   edx,edx
c0010949:	74 07                	je     c0010952 <SysRealpath(regs*)+0x15>
c001094b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001094e:	85 c0                	test   eax,eax
c0010950:	75 0b                	jne    c001095d <SysRealpath(regs*)+0x20>
c0010952:	b8 01 00 00 00       	mov    eax,0x1
c0010957:	31 d2                	xor    edx,edx
c0010959:	83 c4 0c             	add    esp,0xc
c001095c:	c3                   	ret    
c001095d:	51                   	push   ecx
c001095e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010964:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010967:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001096d:	51                   	push   ecx
c001096e:	52                   	push   edx
c001096f:	50                   	push   eax
c0010970:	e8 d7 9f ff ff       	call   c000a94c <Fs::standardiseFiles(char*, char const*, char const*)>
c0010975:	83 c4 10             	add    esp,0x10
c0010978:	31 c0                	xor    eax,eax
c001097a:	31 d2                	xor    edx,edx
c001097c:	83 c4 0c             	add    esp,0xc
c001097f:	c3                   	ret    

c0010980 <SysReadDir(regs*)>:
c0010980:	53                   	push   ebx
c0010981:	83 ec 18             	sub    esp,0x18
c0010984:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010988:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001098b:	83 f8 02             	cmp    eax,0x2
c001098e:	76 61                	jbe    c00109f1 <SysReadDir(regs*)+0x71>
c0010990:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0010997:	77 49                	ja     c00109e2 <SysReadDir(regs*)+0x62>
c0010999:	83 ec 0c             	sub    esp,0xc
c001099c:	50                   	push   eax
c001099d:	e8 8d 87 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c00109a2:	83 c4 10             	add    esp,0x10
c00109a5:	85 c0                	test   eax,eax
c00109a7:	74 39                	je     c00109e2 <SysReadDir(regs*)+0x62>
c00109a9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00109b1:	83 ec 0c             	sub    esp,0xc
c00109b4:	8b 10                	mov    edx,DWORD PTR [eax]
c00109b6:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00109ba:	51                   	push   ecx
c00109bb:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00109be:	51                   	push   ecx
c00109bf:	6a 00                	push   0x0
c00109c1:	68 10 01 00 00       	push   0x110
c00109c6:	50                   	push   eax
c00109c7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00109ca:	83 c4 20             	add    esp,0x20
c00109cd:	85 c0                	test   eax,eax
c00109cf:	74 29                	je     c00109fa <SysReadDir(regs*)+0x7a>
c00109d1:	83 f8 07             	cmp    eax,0x7
c00109d4:	74 1b                	je     c00109f1 <SysReadDir(regs*)+0x71>
c00109d6:	b8 02 00 00 00       	mov    eax,0x2
c00109db:	31 d2                	xor    edx,edx
c00109dd:	83 c4 18             	add    esp,0x18
c00109e0:	5b                   	pop    ebx
c00109e1:	c3                   	ret    
c00109e2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00109e7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00109ec:	83 c4 18             	add    esp,0x18
c00109ef:	5b                   	pop    ebx
c00109f0:	c3                   	ret    
c00109f1:	b8 01 00 00 00       	mov    eax,0x1
c00109f6:	31 d2                	xor    edx,edx
c00109f8:	eb e3                	jmp    c00109dd <SysReadDir(regs*)+0x5d>
c00109fa:	31 c0                	xor    eax,eax
c00109fc:	31 d2                	xor    edx,edx
c00109fe:	eb dd                	jmp    c00109dd <SysReadDir(regs*)+0x5d>

c0010a00 <SysIsATTY(regs*)>:
c0010a00:	83 ec 0c             	sub    esp,0xc
c0010a03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a07:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010a0a:	83 f8 02             	cmp    eax,0x2
c0010a0d:	76 07                	jbe    c0010a16 <SysIsATTY(regs*)+0x16>
c0010a0f:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010a14:	75 28                	jne    c0010a3e <SysIsATTY(regs*)+0x3e>
c0010a16:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010a1b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010a1e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0010a24:	85 c0                	test   eax,eax
c0010a26:	74 26                	je     c0010a4e <SysIsATTY(regs*)+0x4e>
c0010a28:	83 ec 0c             	sub    esp,0xc
c0010a2b:	8b 10                	mov    edx,DWORD PTR [eax]
c0010a2d:	50                   	push   eax
c0010a2e:	ff 12                	call   DWORD PTR [edx]
c0010a30:	31 d2                	xor    edx,edx
c0010a32:	25 ff 00 00 00       	and    eax,0xff
c0010a37:	83 c4 10             	add    esp,0x10
c0010a3a:	83 c4 0c             	add    esp,0xc
c0010a3d:	c3                   	ret    
c0010a3e:	83 ec 0c             	sub    esp,0xc
c0010a41:	50                   	push   eax
c0010a42:	e8 e8 86 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010a47:	83 c4 10             	add    esp,0x10
c0010a4a:	85 c0                	test   eax,eax
c0010a4c:	75 da                	jne    c0010a28 <SysIsATTY(regs*)+0x28>
c0010a4e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a53:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a58:	83 c4 0c             	add    esp,0xc
c0010a5b:	c3                   	ret    

c0010a5c <SysSeek(regs*)>:
c0010a5c:	53                   	push   ebx
c0010a5d:	83 ec 08             	sub    esp,0x8
c0010a60:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010a64:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010a67:	8d 50 fd             	lea    edx,[eax-0x3]
c0010a6a:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010a70:	77 34                	ja     c0010aa6 <SysSeek(regs*)+0x4a>
c0010a72:	83 ec 0c             	sub    esp,0xc
c0010a75:	50                   	push   eax
c0010a76:	e8 b4 86 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010a7b:	83 c4 0c             	add    esp,0xc
c0010a7e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010a81:	31 db                	xor    ebx,ebx
c0010a83:	53                   	push   ebx
c0010a84:	51                   	push   ecx
c0010a85:	50                   	push   eax
c0010a86:	e8 e9 a1 ff ff       	call   c000ac74 <File::seek(unsigned long long)>
c0010a8b:	83 c4 10             	add    esp,0x10
c0010a8e:	85 c0                	test   eax,eax
c0010a90:	0f 95 c0             	setne  al
c0010a93:	31 d2                	xor    edx,edx
c0010a95:	25 ff 00 00 00       	and    eax,0xff
c0010a9a:	f7 d8                	neg    eax
c0010a9c:	83 d2 00             	adc    edx,0x0
c0010a9f:	83 c4 08             	add    esp,0x8
c0010aa2:	f7 da                	neg    edx
c0010aa4:	5b                   	pop    ebx
c0010aa5:	c3                   	ret    
c0010aa6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010aab:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010ab0:	83 c4 08             	add    esp,0x8
c0010ab3:	5b                   	pop    ebx
c0010ab4:	c3                   	ret    

c0010ab5 <SysTell(regs*)>:
c0010ab5:	53                   	push   ebx
c0010ab6:	83 ec 08             	sub    esp,0x8
c0010ab9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010abd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010ac0:	83 f8 02             	cmp    eax,0x2
c0010ac3:	76 50                	jbe    c0010b15 <SysTell(regs*)+0x60>
c0010ac5:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010aca:	76 19                	jbe    c0010ae5 <SysTell(regs*)+0x30>
c0010acc:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010acf:	31 d2                	xor    edx,edx
c0010ad1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010ad7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010ade:	31 c0                	xor    eax,eax
c0010ae0:	83 c4 08             	add    esp,0x8
c0010ae3:	5b                   	pop    ebx
c0010ae4:	c3                   	ret    
c0010ae5:	83 ec 0c             	sub    esp,0xc
c0010ae8:	50                   	push   eax
c0010ae9:	e8 41 86 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010aee:	5a                   	pop    edx
c0010aef:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010af2:	59                   	pop    ecx
c0010af3:	53                   	push   ebx
c0010af4:	50                   	push   eax
c0010af5:	e8 d0 a1 ff ff       	call   c000acca <File::tell(unsigned long long*)>
c0010afa:	83 c4 10             	add    esp,0x10
c0010afd:	85 c0                	test   eax,eax
c0010aff:	0f 95 c0             	setne  al
c0010b02:	31 d2                	xor    edx,edx
c0010b04:	25 ff 00 00 00       	and    eax,0xff
c0010b09:	f7 d8                	neg    eax
c0010b0b:	83 d2 00             	adc    edx,0x0
c0010b0e:	83 c4 08             	add    esp,0x8
c0010b11:	f7 da                	neg    edx
c0010b13:	5b                   	pop    ebx
c0010b14:	c3                   	ret    
c0010b15:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b1a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b1f:	83 c4 08             	add    esp,0x8
c0010b22:	5b                   	pop    ebx
c0010b23:	c3                   	ret    

c0010b24 <SysSize(regs*)>:
c0010b24:	53                   	push   ebx
c0010b25:	83 ec 18             	sub    esp,0x18
c0010b28:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010b2c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010b2f:	83 f8 02             	cmp    eax,0x2
c0010b32:	76 56                	jbe    c0010b8a <SysSize(regs*)+0x66>
c0010b34:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010b39:	76 19                	jbe    c0010b54 <SysSize(regs*)+0x30>
c0010b3b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010b3e:	31 d2                	xor    edx,edx
c0010b40:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010b46:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010b4d:	31 c0                	xor    eax,eax
c0010b4f:	83 c4 18             	add    esp,0x18
c0010b52:	5b                   	pop    ebx
c0010b53:	c3                   	ret    
c0010b54:	83 ec 0c             	sub    esp,0xc
c0010b57:	50                   	push   eax
c0010b58:	e8 d2 85 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010b5d:	83 c4 0c             	add    esp,0xc
c0010b60:	8d 54 24 13          	lea    edx,[esp+0x13]
c0010b64:	52                   	push   edx
c0010b65:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010b68:	52                   	push   edx
c0010b69:	50                   	push   eax
c0010b6a:	e8 f3 a2 ff ff       	call   c000ae62 <File::stat(unsigned long long*, bool*)>
c0010b6f:	83 c4 10             	add    esp,0x10
c0010b72:	85 c0                	test   eax,eax
c0010b74:	0f 95 c0             	setne  al
c0010b77:	31 d2                	xor    edx,edx
c0010b79:	25 ff 00 00 00       	and    eax,0xff
c0010b7e:	f7 d8                	neg    eax
c0010b80:	83 d2 00             	adc    edx,0x0
c0010b83:	83 c4 18             	add    esp,0x18
c0010b86:	f7 da                	neg    edx
c0010b88:	5b                   	pop    ebx
c0010b89:	c3                   	ret    
c0010b8a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b8f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b94:	83 c4 18             	add    esp,0x18
c0010b97:	5b                   	pop    ebx
c0010b98:	c3                   	ret    

c0010b99 <SysSizeFromFilename(regs*)>:
c0010b99:	57                   	push   edi
c0010b9a:	56                   	push   esi
c0010b9b:	53                   	push   ebx
c0010b9c:	83 ec 20             	sub    esp,0x20
c0010b9f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010ba3:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0010ba6:	83 fb 02             	cmp    ebx,0x2
c0010ba9:	0f 86 8c 00 00 00    	jbe    c0010c3b <SysSizeFromFilename(regs*)+0xa2>
c0010baf:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0010bb5:	76 1b                	jbe    c0010bd2 <SysSizeFromFilename(regs*)+0x39>
c0010bb7:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010bba:	31 d2                	xor    edx,edx
c0010bbc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010bc2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010bc9:	83 c4 20             	add    esp,0x20
c0010bcc:	31 c0                	xor    eax,eax
c0010bce:	5b                   	pop    ebx
c0010bcf:	5e                   	pop    esi
c0010bd0:	5f                   	pop    edi
c0010bd1:	c3                   	ret    
c0010bd2:	83 ec 0c             	sub    esp,0xc
c0010bd5:	68 14 01 00 00       	push   0x114
c0010bda:	e8 da 6b ff ff       	call   c00077b9 <malloc>
c0010bdf:	83 c4 0c             	add    esp,0xc
c0010be2:	89 c7                	mov    edi,eax
c0010be4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010be9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010bec:	50                   	push   eax
c0010bed:	53                   	push   ebx
c0010bee:	57                   	push   edi
c0010bef:	e8 02 9f ff ff       	call   c000aaf6 <File::File(char const*, Process*)>
c0010bf4:	83 c4 0c             	add    esp,0xc
c0010bf7:	8d 44 24 23          	lea    eax,[esp+0x23]
c0010bfb:	50                   	push   eax
c0010bfc:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0010bff:	52                   	push   edx
c0010c00:	57                   	push   edi
c0010c01:	e8 5c a2 ff ff       	call   c000ae62 <File::stat(unsigned long long*, bool*)>
c0010c06:	83 c4 10             	add    esp,0x10
c0010c09:	85 ff                	test   edi,edi
c0010c0b:	74 14                	je     c0010c21 <SysSizeFromFilename(regs*)+0x88>
c0010c0d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010c11:	8b 17                	mov    edx,DWORD PTR [edi]
c0010c13:	83 ec 0c             	sub    esp,0xc
c0010c16:	57                   	push   edi
c0010c17:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010c1a:	83 c4 10             	add    esp,0x10
c0010c1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c21:	85 c0                	test   eax,eax
c0010c23:	0f 95 c0             	setne  al
c0010c26:	31 d2                	xor    edx,edx
c0010c28:	25 ff 00 00 00       	and    eax,0xff
c0010c2d:	f7 d8                	neg    eax
c0010c2f:	83 d2 00             	adc    edx,0x0
c0010c32:	83 c4 20             	add    esp,0x20
c0010c35:	f7 da                	neg    edx
c0010c37:	5b                   	pop    ebx
c0010c38:	5e                   	pop    esi
c0010c39:	5f                   	pop    edi
c0010c3a:	c3                   	ret    
c0010c3b:	83 c4 20             	add    esp,0x20
c0010c3e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c43:	5b                   	pop    ebx
c0010c44:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010c49:	5e                   	pop    esi
c0010c4a:	5f                   	pop    edi
c0010c4b:	c3                   	ret    

c0010c4c <SysClose(regs*)>:
c0010c4c:	53                   	push   ebx
c0010c4d:	83 ec 08             	sub    esp,0x8
c0010c50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c54:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010c57:	83 f8 02             	cmp    eax,0x2
c0010c5a:	76 41                	jbe    c0010c9d <SysClose(regs*)+0x51>
c0010c5c:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0010c62:	83 fa 01             	cmp    edx,0x1
c0010c65:	76 2d                	jbe    c0010c94 <SysClose(regs*)+0x48>
c0010c67:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010c6c:	77 2f                	ja     c0010c9d <SysClose(regs*)+0x51>
c0010c6e:	83 ec 0c             	sub    esp,0xc
c0010c71:	50                   	push   eax
c0010c72:	e8 b8 84 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010c77:	89 c3                	mov    ebx,eax
c0010c79:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c7c:	e8 93 9f ff ff       	call   c000ac14 <File::close()>
c0010c81:	83 c4 10             	add    esp,0x10
c0010c84:	85 db                	test   ebx,ebx
c0010c86:	74 0c                	je     c0010c94 <SysClose(regs*)+0x48>
c0010c88:	83 ec 0c             	sub    esp,0xc
c0010c8b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010c8d:	53                   	push   ebx
c0010c8e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010c91:	83 c4 10             	add    esp,0x10
c0010c94:	31 c0                	xor    eax,eax
c0010c96:	31 d2                	xor    edx,edx
c0010c98:	83 c4 08             	add    esp,0x8
c0010c9b:	5b                   	pop    ebx
c0010c9c:	c3                   	ret    
c0010c9d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010ca2:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010ca7:	83 c4 08             	add    esp,0x8
c0010caa:	5b                   	pop    ebx
c0010cab:	c3                   	ret    

c0010cac <SysOpenDir(regs*)>:
c0010cac:	57                   	push   edi
c0010cad:	56                   	push   esi
c0010cae:	53                   	push   ebx
c0010caf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010cb3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010cb6:	85 c0                	test   eax,eax
c0010cb8:	0f 84 e7 00 00 00    	je     c0010da5 <SysOpenDir(regs*)+0xf9>
c0010cbe:	83 ec 0c             	sub    esp,0xc
c0010cc1:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010cc4:	56                   	push   esi
c0010cc5:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0010cc8:	57                   	push   edi
c0010cc9:	50                   	push   eax
c0010cca:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010ccd:	50                   	push   eax
c0010cce:	68 74 e8 01 c0       	push   0xc001e874
c0010cd3:	e8 a9 98 ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c0010cd8:	83 c4 18             	add    esp,0x18
c0010cdb:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010cde:	50                   	push   eax
c0010cdf:	68 9a e8 01 c0       	push   0xc001e89a
c0010ce4:	e8 98 98 ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c0010ce9:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0010cf0:	e8 c4 6a ff ff       	call   c00077b9 <malloc>
c0010cf5:	83 c4 0c             	add    esp,0xc
c0010cf8:	89 c6                	mov    esi,eax
c0010cfa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010cff:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010d02:	50                   	push   eax
c0010d03:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010d06:	50                   	push   eax
c0010d07:	56                   	push   esi
c0010d08:	e8 13 a3 ff ff       	call   c000b020 <Directory::Directory(char const*, Process*)>
c0010d0d:	c7 04 24 8e f6 01 c0 	mov    DWORD PTR [esp],0xc001f68e
c0010d14:	e8 68 98 ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c0010d19:	83 c4 10             	add    esp,0x10
c0010d1c:	85 f6                	test   esi,esi
c0010d1e:	0f 84 8f 00 00 00    	je     c0010db3 <SysOpenDir(regs*)+0x107>
c0010d24:	83 ec 0c             	sub    esp,0xc
c0010d27:	68 af e8 01 c0       	push   0xc001e8af
c0010d2c:	e8 50 98 ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c0010d31:	58                   	pop    eax
c0010d32:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010d35:	5a                   	pop    edx
c0010d36:	51                   	push   ecx
c0010d37:	68 b3 e8 01 c0       	push   0xc001e8b3
c0010d3c:	e8 40 98 ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c0010d41:	89 34 24             	mov    DWORD PTR [esp],esi
c0010d44:	e8 97 a3 ff ff       	call   c000b0e0 <Directory::open()>
c0010d49:	c7 04 24 ab d6 01 c0 	mov    DWORD PTR [esp],0xc001d6ab
c0010d50:	89 c7                	mov    edi,eax
c0010d52:	e8 2a 98 ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c0010d57:	83 c4 10             	add    esp,0x10
c0010d5a:	85 ff                	test   edi,edi
c0010d5c:	75 37                	jne    c0010d95 <SysOpenDir(regs*)+0xe9>
c0010d5e:	83 ec 0c             	sub    esp,0xc
c0010d61:	68 c4 e8 01 c0       	push   0xc001e8c4
c0010d66:	e8 16 98 ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c0010d6b:	89 34 24             	mov    DWORD PTR [esp],esi
c0010d6e:	e8 c7 80 ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c0010d73:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010d76:	89 02                	mov    DWORD PTR [edx],eax
c0010d78:	c1 f8 1f             	sar    eax,0x1f
c0010d7b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010d7e:	c7 04 24 c8 e8 01 c0 	mov    DWORD PTR [esp],0xc001e8c8
c0010d85:	e8 f7 97 ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c0010d8a:	83 c4 10             	add    esp,0x10
c0010d8d:	31 c0                	xor    eax,eax
c0010d8f:	5b                   	pop    ebx
c0010d90:	31 d2                	xor    edx,edx
c0010d92:	5e                   	pop    esi
c0010d93:	5f                   	pop    edi
c0010d94:	c3                   	ret    
c0010d95:	83 ec 0c             	sub    esp,0xc
c0010d98:	68 c0 e8 01 c0       	push   0xc001e8c0
c0010d9d:	e8 df 97 ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c0010da2:	83 c4 10             	add    esp,0x10
c0010da5:	5b                   	pop    ebx
c0010da6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010dab:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010db0:	5e                   	pop    esi
c0010db1:	5f                   	pop    edi
c0010db2:	c3                   	ret    
c0010db3:	83 ec 0c             	sub    esp,0xc
c0010db6:	68 ab e8 01 c0       	push   0xc001e8ab
c0010dbb:	eb e0                	jmp    c0010d9d <SysOpenDir(regs*)+0xf1>

c0010dbd <SysCloseDir(regs*)>:
c0010dbd:	53                   	push   ebx
c0010dbe:	83 ec 08             	sub    esp,0x8
c0010dc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dc5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010dc8:	8d 50 fd             	lea    edx,[eax-0x3]
c0010dcb:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010dd1:	77 2f                	ja     c0010e02 <SysCloseDir(regs*)+0x45>
c0010dd3:	83 ec 0c             	sub    esp,0xc
c0010dd6:	50                   	push   eax
c0010dd7:	e8 53 83 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010ddc:	89 c3                	mov    ebx,eax
c0010dde:	89 04 24             	mov    DWORD PTR [esp],eax
c0010de1:	e8 56 a3 ff ff       	call   c000b13c <Directory::close()>
c0010de6:	83 c4 10             	add    esp,0x10
c0010de9:	85 db                	test   ebx,ebx
c0010deb:	74 0c                	je     c0010df9 <SysCloseDir(regs*)+0x3c>
c0010ded:	83 ec 0c             	sub    esp,0xc
c0010df0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010df2:	53                   	push   ebx
c0010df3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010df6:	83 c4 10             	add    esp,0x10
c0010df9:	31 c0                	xor    eax,eax
c0010dfb:	31 d2                	xor    edx,edx
c0010dfd:	83 c4 08             	add    esp,0x8
c0010e00:	5b                   	pop    ebx
c0010e01:	c3                   	ret    
c0010e02:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e07:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e0c:	83 c4 08             	add    esp,0x8
c0010e0f:	5b                   	pop    ebx
c0010e10:	c3                   	ret    

c0010e11 <SysMakeDir(regs*)>:
c0010e11:	56                   	push   esi
c0010e12:	53                   	push   ebx
c0010e13:	83 ec 10             	sub    esp,0x10
c0010e16:	68 14 01 00 00       	push   0x114
c0010e1b:	e8 99 69 ff ff       	call   c00077b9 <malloc>
c0010e20:	83 c4 0c             	add    esp,0xc
c0010e23:	89 c3                	mov    ebx,eax
c0010e25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e2a:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c0010e2d:	56                   	push   esi
c0010e2e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010e32:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010e35:	50                   	push   eax
c0010e36:	53                   	push   ebx
c0010e37:	e8 e4 a1 ff ff       	call   c000b020 <Directory::Directory(char const*, Process*)>
c0010e3c:	83 c4 10             	add    esp,0x10
c0010e3f:	85 db                	test   ebx,ebx
c0010e41:	74 32                	je     c0010e75 <SysMakeDir(regs*)+0x64>
c0010e43:	83 ec 0c             	sub    esp,0xc
c0010e46:	53                   	push   ebx
c0010e47:	e8 74 a4 ff ff       	call   c000b2c0 <Directory::create()>
c0010e4c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e4f:	89 c6                	mov    esi,eax
c0010e51:	e8 e6 a2 ff ff       	call   c000b13c <Directory::close()>
c0010e56:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010e58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e5b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010e5e:	83 c4 10             	add    esp,0x10
c0010e61:	31 c0                	xor    eax,eax
c0010e63:	59                   	pop    ecx
c0010e64:	85 f6                	test   esi,esi
c0010e66:	5b                   	pop    ebx
c0010e67:	0f 95 c0             	setne  al
c0010e6a:	5e                   	pop    esi
c0010e6b:	31 d2                	xor    edx,edx
c0010e6d:	f7 d8                	neg    eax
c0010e6f:	83 d2 00             	adc    edx,0x0
c0010e72:	f7 da                	neg    edx
c0010e74:	c3                   	ret    
c0010e75:	59                   	pop    ecx
c0010e76:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e7b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e80:	5b                   	pop    ebx
c0010e81:	5e                   	pop    esi
c0010e82:	c3                   	ret    

c0010e83 <SysWait(regs*)>:
c0010e83:	83 ec 10             	sub    esp,0x10
c0010e86:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010e8a:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010e8d:	52                   	push   edx
c0010e8e:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0010e91:	51                   	push   ecx
c0010e92:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010e95:	50                   	push   eax
c0010e96:	e8 89 2b 00 00       	call   c0013a24 <waitTask(int, int*, int)>
c0010e9b:	83 c4 1c             	add    esp,0x1c
c0010e9e:	99                   	cdq    
c0010e9f:	c3                   	ret    

c0010ea0 <SysNotImpl(regs*)>:
c0010ea0:	83 ec 18             	sub    esp,0x18
c0010ea3:	68 cc e8 01 c0       	push   0xc001e8cc
c0010ea8:	e8 56 f3 ff ff       	call   c0010203 <KePanic(char const*)>
c0010ead:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010eb2:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010eb7:	83 c4 1c             	add    esp,0x1c
c0010eba:	c3                   	ret    

c0010ebb <SysPanic(regs*)>:
c0010ebb:	83 ec 18             	sub    esp,0x18
c0010ebe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ec2:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010ec5:	50                   	push   eax
c0010ec6:	e8 38 f3 ff ff       	call   c0010203 <KePanic(char const*)>
c0010ecb:	b8 01 00 00 00       	mov    eax,0x1
c0010ed0:	31 d2                	xor    edx,edx
c0010ed2:	83 c4 1c             	add    esp,0x1c
c0010ed5:	c3                   	ret    

c0010ed6 <SysRmdir(regs*)>:
c0010ed6:	56                   	push   esi
c0010ed7:	53                   	push   ebx
c0010ed8:	83 ec 20             	sub    esp,0x20
c0010edb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010edf:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010ee2:	68 14 01 00 00       	push   0x114
c0010ee7:	e8 cd 68 ff ff       	call   c00077b9 <malloc>
c0010eec:	83 c4 0c             	add    esp,0xc
c0010eef:	89 c3                	mov    ebx,eax
c0010ef1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ef6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010ef9:	50                   	push   eax
c0010efa:	56                   	push   esi
c0010efb:	53                   	push   ebx
c0010efc:	e8 f5 9b ff ff       	call   c000aaf6 <File::File(char const*, Process*)>
c0010f01:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f04:	e8 25 9e ff ff       	call   c000ad2e <File::unlink()>
c0010f09:	83 c4 10             	add    esp,0x10
c0010f0c:	85 db                	test   ebx,ebx
c0010f0e:	74 14                	je     c0010f24 <SysRmdir(regs*)+0x4e>
c0010f10:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f14:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010f16:	83 ec 0c             	sub    esp,0xc
c0010f19:	53                   	push   ebx
c0010f1a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010f1d:	83 c4 10             	add    esp,0x10
c0010f20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f24:	85 c0                	test   eax,eax
c0010f26:	0f 95 c0             	setne  al
c0010f29:	31 d2                	xor    edx,edx
c0010f2b:	25 ff 00 00 00       	and    eax,0xff
c0010f30:	f7 d8                	neg    eax
c0010f32:	83 d2 00             	adc    edx,0x0
c0010f35:	83 c4 14             	add    esp,0x14
c0010f38:	f7 da                	neg    edx
c0010f3a:	5b                   	pop    ebx
c0010f3b:	5e                   	pop    esi
c0010f3c:	c3                   	ret    

c0010f3d <SysUnlink(regs*)>:
c0010f3d:	56                   	push   esi
c0010f3e:	53                   	push   ebx
c0010f3f:	83 ec 20             	sub    esp,0x20
c0010f42:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010f46:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010f49:	68 14 01 00 00       	push   0x114
c0010f4e:	e8 66 68 ff ff       	call   c00077b9 <malloc>
c0010f53:	83 c4 0c             	add    esp,0xc
c0010f56:	89 c3                	mov    ebx,eax
c0010f58:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f5d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f60:	50                   	push   eax
c0010f61:	56                   	push   esi
c0010f62:	53                   	push   ebx
c0010f63:	e8 8e 9b ff ff       	call   c000aaf6 <File::File(char const*, Process*)>
c0010f68:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f6b:	e8 be 9d ff ff       	call   c000ad2e <File::unlink()>
c0010f70:	83 c4 10             	add    esp,0x10
c0010f73:	85 db                	test   ebx,ebx
c0010f75:	74 14                	je     c0010f8b <SysUnlink(regs*)+0x4e>
c0010f77:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f7b:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010f7d:	83 ec 0c             	sub    esp,0xc
c0010f80:	53                   	push   ebx
c0010f81:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010f84:	83 c4 10             	add    esp,0x10
c0010f87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f8b:	85 c0                	test   eax,eax
c0010f8d:	0f 95 c0             	setne  al
c0010f90:	31 d2                	xor    edx,edx
c0010f92:	25 ff 00 00 00       	and    eax,0xff
c0010f97:	f7 d8                	neg    eax
c0010f99:	83 d2 00             	adc    edx,0x0
c0010f9c:	83 c4 14             	add    esp,0x14
c0010f9f:	f7 da                	neg    edx
c0010fa1:	5b                   	pop    ebx
c0010fa2:	5e                   	pop    esi
c0010fa3:	c3                   	ret    

c0010fa4 <SysGetArgv(regs*)>:
c0010fa4:	83 ec 0c             	sub    esp,0xc
c0010fa7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010fab:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010fae:	85 c0                	test   eax,eax
c0010fb0:	78 2c                	js     c0010fde <SysGetArgv(regs*)+0x3a>
c0010fb2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010fb8:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010fbb:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0010fc1:	7d 1b                	jge    c0010fde <SysGetArgv(regs*)+0x3a>
c0010fc3:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0010fca:	85 c0                	test   eax,eax
c0010fcc:	74 18                	je     c0010fe6 <SysGetArgv(regs*)+0x42>
c0010fce:	83 ec 08             	sub    esp,0x8
c0010fd1:	50                   	push   eax
c0010fd2:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0010fd5:	50                   	push   eax
c0010fd6:	e8 25 f6 fe ff       	call   c0000600 <strcpy>
c0010fdb:	83 c4 10             	add    esp,0x10
c0010fde:	31 c0                	xor    eax,eax
c0010fe0:	31 d2                	xor    edx,edx
c0010fe2:	83 c4 0c             	add    esp,0xc
c0010fe5:	c3                   	ret    
c0010fe6:	b8 01 00 00 00       	mov    eax,0x1
c0010feb:	31 d2                	xor    edx,edx
c0010fed:	83 c4 0c             	add    esp,0xc
c0010ff0:	c3                   	ret    

c0010ff1 <SysUSleep(regs*)>:
c0010ff1:	83 ec 1c             	sub    esp,0x1c
c0010ff4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010ff8:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0010ffb:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0010ffe:	6a 00                	push   0x0
c0011000:	6a 64                	push   0x64
c0011002:	52                   	push   edx
c0011003:	50                   	push   eax
c0011004:	e8 47 b1 00 00       	call   c001c150 <__udivdi3>
c0011009:	83 c4 14             	add    esp,0x14
c001100c:	50                   	push   eax
c001100d:	e8 e6 2a 00 00       	call   c0013af8 <milliTenthSleep(unsigned int)>
c0011012:	31 c0                	xor    eax,eax
c0011014:	31 d2                	xor    edx,edx
c0011016:	83 c4 1c             	add    esp,0x1c
c0011019:	c3                   	ret    

c001101a <SysSpawn(regs*)>:
c001101a:	56                   	push   esi
c001101b:	53                   	push   ebx
c001101c:	50                   	push   eax
c001101d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011021:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011024:	85 c0                	test   eax,eax
c0011026:	75 08                	jne    c0011030 <SysSpawn(regs*)+0x16>
c0011028:	59                   	pop    ecx
c0011029:	31 c0                	xor    eax,eax
c001102b:	31 d2                	xor    edx,edx
c001102d:	5b                   	pop    ebx
c001102e:	5e                   	pop    esi
c001102f:	c3                   	ret    
c0011030:	83 ec 0c             	sub    esp,0xc
c0011033:	68 24 07 00 00       	push   0x724
c0011038:	e8 7c 67 ff ff       	call   c00077b9 <malloc>
c001103d:	83 c4 10             	add    esp,0x10
c0011040:	89 c6                	mov    esi,eax
c0011042:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011045:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011048:	85 c0                	test   eax,eax
c001104a:	75 33                	jne    c001107f <SysSpawn(regs*)+0x65>
c001104c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011051:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011054:	52                   	push   edx
c0011055:	50                   	push   eax
c0011056:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0011059:	53                   	push   ebx
c001105a:	56                   	push   esi
c001105b:	e8 44 21 00 00       	call   c00131a4 <Process::Process(char const*, Process*, char**)>
c0011060:	83 c4 10             	add    esp,0x10
c0011063:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c001106a:	75 bc                	jne    c0011028 <SysSpawn(regs*)+0xe>
c001106c:	83 ec 0c             	sub    esp,0xc
c001106f:	56                   	push   esi
c0011070:	e8 5b 26 00 00       	call   c00136d0 <Process::createUserThread()>
c0011075:	8b 06                	mov    eax,DWORD PTR [esi]
c0011077:	83 c4 10             	add    esp,0x10
c001107a:	99                   	cdq    
c001107b:	59                   	pop    ecx
c001107c:	5b                   	pop    ebx
c001107d:	5e                   	pop    esi
c001107e:	c3                   	ret    
c001107f:	31 c0                	xor    eax,eax
c0011081:	eb d1                	jmp    c0011054 <SysSpawn(regs*)+0x3a>

c0011083 <SysGetEnv(regs*)>:
c0011083:	57                   	push   edi
c0011084:	56                   	push   esi
c0011085:	53                   	push   ebx
c0011086:	83 ec 1c             	sub    esp,0x1c
c0011089:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001108d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011092:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011095:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011098:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001109b:	50                   	push   eax
c001109c:	e8 1a f0 ff ff       	call   c00100bb <Krnl::getProcessTotalEnvCount(Process*)>
c00110a1:	83 c4 10             	add    esp,0x10
c00110a4:	39 c7                	cmp    edi,eax
c00110a6:	7c 14                	jl     c00110bc <SysGetEnv(regs*)+0x39>
c00110a8:	85 f6                	test   esi,esi
c00110aa:	75 0b                	jne    c00110b7 <SysGetEnv(regs*)+0x34>
c00110ac:	83 c4 10             	add    esp,0x10
c00110af:	31 c0                	xor    eax,eax
c00110b1:	5b                   	pop    ebx
c00110b2:	31 d2                	xor    edx,edx
c00110b4:	5e                   	pop    esi
c00110b5:	5f                   	pop    edi
c00110b6:	c3                   	ret    
c00110b7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00110ba:	eb f0                	jmp    c00110ac <SysGetEnv(regs*)+0x29>
c00110bc:	8d 44 24 08          	lea    eax,[esp+0x8]
c00110c0:	52                   	push   edx
c00110c1:	57                   	push   edi
c00110c2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00110c8:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c00110cb:	51                   	push   ecx
c00110cc:	50                   	push   eax
c00110cd:	e8 09 f0 ff ff       	call   c00100db <Krnl::getProcessEnvPair(Process*, int)>
c00110d2:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00110d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00110d9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00110dd:	83 c4 0c             	add    esp,0xc
c00110e0:	85 db                	test   ebx,ebx
c00110e2:	75 23                	jne    c0011107 <SysGetEnv(regs*)+0x84>
c00110e4:	83 ec 0c             	sub    esp,0xc
c00110e7:	50                   	push   eax
c00110e8:	e8 53 f4 fe ff       	call   c0000540 <strlen>
c00110ed:	89 3c 24             	mov    DWORD PTR [esp],edi
c00110f0:	89 c3                	mov    ebx,eax
c00110f2:	e8 49 f4 fe ff       	call   c0000540 <strlen>
c00110f7:	31 d2                	xor    edx,edx
c00110f9:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00110fd:	83 c4 10             	add    esp,0x10
c0011100:	83 c4 10             	add    esp,0x10
c0011103:	5b                   	pop    ebx
c0011104:	5e                   	pop    esi
c0011105:	5f                   	pop    edi
c0011106:	c3                   	ret    
c0011107:	83 ec 08             	sub    esp,0x8
c001110a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001110d:	50                   	push   eax
c001110e:	56                   	push   esi
c001110f:	e8 ec f4 fe ff       	call   c0000600 <strcpy>
c0011114:	58                   	pop    eax
c0011115:	5a                   	pop    edx
c0011116:	68 e6 e8 01 c0       	push   0xc001e8e6
c001111b:	56                   	push   esi
c001111c:	e8 9f f6 fe ff       	call   c00007c0 <strcat>
c0011121:	59                   	pop    ecx
c0011122:	5b                   	pop    ebx
c0011123:	57                   	push   edi
c0011124:	56                   	push   esi
c0011125:	e8 96 f6 fe ff       	call   c00007c0 <strcat>
c001112a:	83 c4 10             	add    esp,0x10
c001112d:	e9 7a ff ff ff       	jmp    c00110ac <SysGetEnv(regs*)+0x29>

c0011132 <SysSetFatAttrib(regs*)>:
c0011132:	57                   	push   edi
c0011133:	56                   	push   esi
c0011134:	53                   	push   ebx
c0011135:	83 ec 1c             	sub    esp,0x1c
c0011138:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001113c:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001113f:	68 14 01 00 00       	push   0x114
c0011144:	e8 70 66 ff ff       	call   c00077b9 <malloc>
c0011149:	83 c4 0c             	add    esp,0xc
c001114c:	89 c3                	mov    ebx,eax
c001114e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011153:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011156:	50                   	push   eax
c0011157:	57                   	push   edi
c0011158:	53                   	push   ebx
c0011159:	e8 98 99 ff ff       	call   c000aaf6 <File::File(char const*, Process*)>
c001115e:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011161:	83 c4 0c             	add    esp,0xc
c0011164:	0f b6 d4             	movzx  edx,ah
c0011167:	25 ff 00 00 00       	and    eax,0xff
c001116c:	52                   	push   edx
c001116d:	50                   	push   eax
c001116e:	53                   	push   ebx
c001116f:	e8 54 9c ff ff       	call   c000adc8 <File::chfatattr(unsigned char, unsigned char)>
c0011174:	83 c4 10             	add    esp,0x10
c0011177:	85 db                	test   ebx,ebx
c0011179:	74 14                	je     c001118f <SysSetFatAttrib(regs*)+0x5d>
c001117b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001117f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011181:	83 ec 0c             	sub    esp,0xc
c0011184:	53                   	push   ebx
c0011185:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011188:	83 c4 10             	add    esp,0x10
c001118b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001118f:	85 c0                	test   eax,eax
c0011191:	0f 95 c0             	setne  al
c0011194:	31 d2                	xor    edx,edx
c0011196:	25 ff 00 00 00       	and    eax,0xff
c001119b:	f7 d8                	neg    eax
c001119d:	83 d2 00             	adc    edx,0x0
c00111a0:	83 c4 10             	add    esp,0x10
c00111a3:	f7 da                	neg    edx
c00111a5:	5b                   	pop    ebx
c00111a6:	5e                   	pop    esi
c00111a7:	5f                   	pop    edi
c00111a8:	c3                   	ret    

c00111a9 <SysPipe(regs*)>:
c00111a9:	57                   	push   edi
c00111aa:	56                   	push   esi
c00111ab:	53                   	push   ebx
c00111ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111b0:	83 ec 0c             	sub    esp,0xc
c00111b3:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00111b6:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00111b9:	6a 20                	push   0x20
c00111bb:	e8 f9 65 ff ff       	call   c00077b9 <malloc>
c00111c0:	89 c3                	mov    ebx,eax
c00111c2:	58                   	pop    eax
c00111c3:	5a                   	pop    edx
c00111c4:	68 00 50 00 00       	push   0x5000
c00111c9:	53                   	push   ebx
c00111ca:	e8 ef 6e ff ff       	call   c00080be <Pipe::Pipe(int)>
c00111cf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00111d2:	e8 63 7c ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c00111d7:	89 07                	mov    DWORD PTR [edi],eax
c00111d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00111dc:	e8 59 7c ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c00111e1:	83 c4 10             	add    esp,0x10
c00111e4:	89 06                	mov    DWORD PTR [esi],eax
c00111e6:	31 d2                	xor    edx,edx
c00111e8:	5b                   	pop    ebx
c00111e9:	31 c0                	xor    eax,eax
c00111eb:	5e                   	pop    esi
c00111ec:	5f                   	pop    edi
c00111ed:	c3                   	ret    

c00111ee <SysGetUnixTime(regs*)>:
c00111ee:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00111f3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00111f9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00111fd:	e9 04 a3 ff ff       	jmp    c000b506 <Clock::timeInSecondsLocal()>

c0011202 <string_ends_with(char const*, char const*)>:
c0011202:	57                   	push   edi
c0011203:	56                   	push   esi
c0011204:	53                   	push   ebx
c0011205:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011209:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001120d:	83 ec 0c             	sub    esp,0xc
c0011210:	53                   	push   ebx
c0011211:	e8 2a f3 fe ff       	call   c0000540 <strlen>
c0011216:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011219:	89 c6                	mov    esi,eax
c001121b:	e8 20 f3 fe ff       	call   c0000540 <strlen>
c0011220:	83 c4 10             	add    esp,0x10
c0011223:	39 c6                	cmp    esi,eax
c0011225:	7d 06                	jge    c001122d <string_ends_with(char const*, char const*)+0x2b>
c0011227:	5b                   	pop    ebx
c0011228:	31 c0                	xor    eax,eax
c001122a:	5e                   	pop    esi
c001122b:	5f                   	pop    edi
c001122c:	c3                   	ret    
c001122d:	83 ec 08             	sub    esp,0x8
c0011230:	29 c6                	sub    esi,eax
c0011232:	57                   	push   edi
c0011233:	01 f3                	add    ebx,esi
c0011235:	53                   	push   ebx
c0011236:	e8 a5 f4 fe ff       	call   c00006e0 <strcmp>
c001123b:	83 c4 10             	add    esp,0x10
c001123e:	85 c0                	test   eax,eax
c0011240:	5b                   	pop    ebx
c0011241:	0f 94 c0             	sete   al
c0011244:	5e                   	pop    esi
c0011245:	25 ff 00 00 00       	and    eax,0xff
c001124a:	5f                   	pop    edi
c001124b:	c3                   	ret    

c001124c <SysOpen(regs*)>:
c001124c:	56                   	push   esi
c001124d:	53                   	push   ebx
c001124e:	81 ec 04 01 00 00    	sub    esp,0x104
c0011254:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001125b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001125e:	85 d2                	test   edx,edx
c0011260:	0f 84 cc 01 00 00    	je     c0011432 <SysOpen(regs*)+0x1e6>
c0011266:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011269:	85 c0                	test   eax,eax
c001126b:	0f 84 c1 01 00 00    	je     c0011432 <SysOpen(regs*)+0x1e6>
c0011271:	83 ec 08             	sub    esp,0x8
c0011274:	50                   	push   eax
c0011275:	68 e8 e8 01 c0       	push   0xc001e8e8
c001127a:	e8 02 93 ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c001127f:	83 c4 0c             	add    esp,0xc
c0011282:	68 f5 e8 01 c0       	push   0xc001e8f5
c0011287:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001128a:	50                   	push   eax
c001128b:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001128f:	56                   	push   esi
c0011290:	e8 b7 96 ff ff       	call   c000a94c <Fs::standardiseFiles(char*, char const*, char const*)>
c0011295:	89 34 24             	mov    DWORD PTR [esp],esi
c0011298:	e8 a3 f2 fe ff       	call   c0000540 <strlen>
c001129d:	83 c4 10             	add    esp,0x10
c00112a0:	48                   	dec    eax
c00112a1:	74 1d                	je     c00112c0 <SysOpen(regs*)+0x74>
c00112a3:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c00112a6:	eb 0f                	jmp    c00112b7 <SysOpen(regs*)+0x6b>
c00112a8:	80 fa 3a             	cmp    dl,0x3a
c00112ab:	74 0f                	je     c00112bc <SysOpen(regs*)+0x70>
c00112ad:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00112b1:	48                   	dec    eax
c00112b2:	74 0c                	je     c00112c0 <SysOpen(regs*)+0x74>
c00112b4:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00112b7:	80 fa 2e             	cmp    dl,0x2e
c00112ba:	75 ec                	jne    c00112a8 <SysOpen(regs*)+0x5c>
c00112bc:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00112c0:	83 ec 08             	sub    esp,0x8
c00112c3:	68 f9 e8 01 c0       	push   0xc001e8f9
c00112c8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00112cb:	50                   	push   eax
c00112cc:	e8 31 ff ff ff       	call   c0011202 <string_ends_with(char const*, char const*)>
c00112d1:	83 c4 10             	add    esp,0x10
c00112d4:	85 c0                	test   eax,eax
c00112d6:	74 1d                	je     c00112f5 <SysOpen(regs*)+0xa9>
c00112d8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00112db:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00112e1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00112e8:	81 c4 04 01 00 00    	add    esp,0x104
c00112ee:	31 c0                	xor    eax,eax
c00112f0:	31 d2                	xor    edx,edx
c00112f2:	5b                   	pop    ebx
c00112f3:	5e                   	pop    esi
c00112f4:	c3                   	ret    
c00112f5:	83 ec 08             	sub    esp,0x8
c00112f8:	68 fe e8 01 c0       	push   0xc001e8fe
c00112fd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011300:	50                   	push   eax
c0011301:	e8 fc fe ff ff       	call   c0011202 <string_ends_with(char const*, char const*)>
c0011306:	83 c4 10             	add    esp,0x10
c0011309:	85 c0                	test   eax,eax
c001130b:	75 cb                	jne    c00112d8 <SysOpen(regs*)+0x8c>
c001130d:	83 ec 08             	sub    esp,0x8
c0011310:	68 fa e8 01 c0       	push   0xc001e8fa
c0011315:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011318:	50                   	push   eax
c0011319:	e8 c2 f3 fe ff       	call   c00006e0 <strcmp>
c001131e:	83 c4 10             	add    esp,0x10
c0011321:	85 c0                	test   eax,eax
c0011323:	74 b3                	je     c00112d8 <SysOpen(regs*)+0x8c>
c0011325:	83 ec 08             	sub    esp,0x8
c0011328:	68 f9 e8 01 c0       	push   0xc001e8f9
c001132d:	56                   	push   esi
c001132e:	e8 cf fe ff ff       	call   c0011202 <string_ends_with(char const*, char const*)>
c0011333:	83 c4 10             	add    esp,0x10
c0011336:	85 c0                	test   eax,eax
c0011338:	75 9e                	jne    c00112d8 <SysOpen(regs*)+0x8c>
c001133a:	83 ec 08             	sub    esp,0x8
c001133d:	68 03 e9 01 c0       	push   0xc001e903
c0011342:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011345:	50                   	push   eax
c0011346:	e8 b7 fe ff ff       	call   c0011202 <string_ends_with(char const*, char const*)>
c001134b:	83 c4 10             	add    esp,0x10
c001134e:	85 c0                	test   eax,eax
c0011350:	0f 85 ef 00 00 00    	jne    c0011445 <SysOpen(regs*)+0x1f9>
c0011356:	83 ec 08             	sub    esp,0x8
c0011359:	68 08 e9 01 c0       	push   0xc001e908
c001135e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011361:	50                   	push   eax
c0011362:	e8 9b fe ff ff       	call   c0011202 <string_ends_with(char const*, char const*)>
c0011367:	83 c4 10             	add    esp,0x10
c001136a:	85 c0                	test   eax,eax
c001136c:	0f 85 d3 00 00 00    	jne    c0011445 <SysOpen(regs*)+0x1f9>
c0011372:	83 ec 08             	sub    esp,0x8
c0011375:	68 04 e9 01 c0       	push   0xc001e904
c001137a:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001137d:	51                   	push   ecx
c001137e:	e8 5d f3 fe ff       	call   c00006e0 <strcmp>
c0011383:	83 c4 10             	add    esp,0x10
c0011386:	85 c0                	test   eax,eax
c0011388:	0f 84 b7 00 00 00    	je     c0011445 <SysOpen(regs*)+0x1f9>
c001138e:	83 ec 08             	sub    esp,0x8
c0011391:	68 03 e9 01 c0       	push   0xc001e903
c0011396:	56                   	push   esi
c0011397:	e8 66 fe ff ff       	call   c0011202 <string_ends_with(char const*, char const*)>
c001139c:	83 c4 10             	add    esp,0x10
c001139f:	85 c0                	test   eax,eax
c00113a1:	0f 85 9e 00 00 00    	jne    c0011445 <SysOpen(regs*)+0x1f9>
c00113a7:	83 ec 0c             	sub    esp,0xc
c00113aa:	68 14 01 00 00       	push   0x114
c00113af:	e8 05 64 ff ff       	call   c00077b9 <malloc>
c00113b4:	83 c4 0c             	add    esp,0xc
c00113b7:	89 c6                	mov    esi,eax
c00113b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00113be:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00113c1:	50                   	push   eax
c00113c2:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00113c5:	52                   	push   edx
c00113c6:	56                   	push   esi
c00113c7:	e8 2a 97 ff ff       	call   c000aaf6 <File::File(char const*, Process*)>
c00113cc:	83 c4 10             	add    esp,0x10
c00113cf:	85 f6                	test   esi,esi
c00113d1:	74 5f                	je     c0011432 <SysOpen(regs*)+0x1e6>
c00113d3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00113d6:	89 d0                	mov    eax,edx
c00113d8:	25 ff 00 00 00       	and    eax,0xff
c00113dd:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00113e0:	89 d0                	mov    eax,edx
c00113e2:	83 e0 01             	and    eax,0x1
c00113e5:	f6 c2 02             	test   dl,0x2
c00113e8:	74 03                	je     c00113ed <SysOpen(regs*)+0x1a1>
c00113ea:	83 c8 02             	or     eax,0x2
c00113ed:	f6 c2 04             	test   dl,0x4
c00113f0:	74 03                	je     c00113f5 <SysOpen(regs*)+0x1a9>
c00113f2:	83 c8 04             	or     eax,0x4
c00113f5:	f6 c2 08             	test   dl,0x8
c00113f8:	74 03                	je     c00113fd <SysOpen(regs*)+0x1b1>
c00113fa:	83 c8 0a             	or     eax,0xa
c00113fd:	83 e2 10             	and    edx,0x10
c0011400:	74 03                	je     c0011405 <SysOpen(regs*)+0x1b9>
c0011402:	83 c8 12             	or     eax,0x12
c0011405:	83 ec 08             	sub    esp,0x8
c0011408:	50                   	push   eax
c0011409:	56                   	push   esi
c001140a:	e8 a7 97 ff ff       	call   c000abb6 <File::open(FileOpenMode)>
c001140f:	83 c4 10             	add    esp,0x10
c0011412:	85 c0                	test   eax,eax
c0011414:	75 1c                	jne    c0011432 <SysOpen(regs*)+0x1e6>
c0011416:	83 ec 0c             	sub    esp,0xc
c0011419:	56                   	push   esi
c001141a:	e8 1b 7a ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c001141f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011422:	83 c4 10             	add    esp,0x10
c0011425:	89 02                	mov    DWORD PTR [edx],eax
c0011427:	c1 f8 1f             	sar    eax,0x1f
c001142a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001142d:	e9 b6 fe ff ff       	jmp    c00112e8 <SysOpen(regs*)+0x9c>
c0011432:	81 c4 04 01 00 00    	add    esp,0x104
c0011438:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001143d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011442:	5b                   	pop    ebx
c0011443:	5e                   	pop    esi
c0011444:	c3                   	ret    
c0011445:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011448:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001144e:	e9 8e fe ff ff       	jmp    c00112e1 <SysOpen(regs*)+0x95>

c0011453 <KeSystemCall(regs*, void*)>:
c0011453:	53                   	push   ebx
c0011454:	83 ec 10             	sub    esp,0x10
c0011457:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001145b:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001145e:	68 0d e9 01 c0       	push   0xc001e90d
c0011463:	e8 19 91 ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c0011468:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001146b:	83 c4 10             	add    esp,0x10
c001146e:	83 f8 32             	cmp    eax,0x32
c0011471:	77 16                	ja     c0011489 <KeSystemCall(regs*, void*)+0x36>
c0011473:	8b 14 85 a0 fa 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0560]
c001147a:	85 d2                	test   edx,edx
c001147c:	74 0b                	je     c0011489 <KeSystemCall(regs*, void*)+0x36>
c001147e:	83 ec 0c             	sub    esp,0xc
c0011481:	53                   	push   ebx
c0011482:	ff d2                	call   edx
c0011484:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011487:	eb 0d                	jmp    c0011496 <KeSystemCall(regs*, void*)+0x43>
c0011489:	52                   	push   edx
c001148a:	52                   	push   edx
c001148b:	50                   	push   eax
c001148c:	68 1d e9 01 c0       	push   0xc001e91d
c0011491:	e8 eb 90 ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c0011496:	83 c4 10             	add    esp,0x10
c0011499:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001149e:	31 d2                	xor    edx,edx
c00114a0:	83 c4 08             	add    esp,0x8
c00114a3:	5b                   	pop    ebx
c00114a4:	c3                   	ret    

c00114a5 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00114a5:	55                   	push   ebp
c00114a6:	57                   	push   edi
c00114a7:	56                   	push   esi
c00114a8:	53                   	push   ebx
c00114a9:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00114af:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00114b6:	8a 1e                	mov    bl,BYTE PTR [esi]
c00114b8:	8d 6e 01             	lea    ebp,[esi+0x1]
c00114bb:	80 fb 40             	cmp    bl,0x40
c00114be:	75 1b                	jne    c00114db <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c00114c0:	8a 16                	mov    dl,BYTE PTR [esi]
c00114c2:	84 d2                	test   dl,dl
c00114c4:	0f 84 f1 00 00 00    	je     c00115bb <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00114ca:	8d 46 01             	lea    eax,[esi+0x1]
c00114cd:	80 fa 3a             	cmp    dl,0x3a
c00114d0:	74 04                	je     c00114d6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c00114d2:	89 c6                	mov    esi,eax
c00114d4:	eb ea                	jmp    c00114c0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c00114d6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00114d9:	89 c6                	mov    esi,eax
c00114db:	50                   	push   eax
c00114dc:	6a 40                	push   0x40
c00114de:	6a 00                	push   0x0
c00114e0:	8d 44 24 24          	lea    eax,[esp+0x24]
c00114e4:	50                   	push   eax
c00114e5:	e8 e6 ef fe ff       	call   c00004d0 <memset>
c00114ea:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00114f1:	31 c0                	xor    eax,eax
c00114f3:	83 c4 10             	add    esp,0x10
c00114f6:	8a 0f                	mov    cl,BYTE PTR [edi]
c00114f8:	84 c9                	test   cl,cl
c00114fa:	0f 84 bb 00 00 00    	je     c00115bb <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011500:	3d c7 00 00 00       	cmp    eax,0xc7
c0011505:	0f 8f b0 00 00 00    	jg     c00115bb <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001150b:	80 f9 0a             	cmp    cl,0xa
c001150e:	0f 85 98 00 00 00    	jne    c00115ac <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0011514:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0011519:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001151d:	a8 df                	test   al,0xdf
c001151f:	0f 94 c1             	sete   cl
c0011522:	3c 23                	cmp    al,0x23
c0011524:	0f 94 c2             	sete   dl
c0011527:	08 d1                	or     cl,dl
c0011529:	75 4a                	jne    c0011575 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001152b:	8d 50 f7             	lea    edx,[eax-0x9]
c001152e:	80 fa 01             	cmp    dl,0x1
c0011531:	76 42                	jbe    c0011575 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011533:	3c 5b                	cmp    al,0x5b
c0011535:	75 42                	jne    c0011579 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0011537:	80 fb 40             	cmp    bl,0x40
c001153a:	75 39                	jne    c0011575 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001153c:	83 ec 0c             	sub    esp,0xc
c001153f:	8d 54 24 65          	lea    edx,[esp+0x65]
c0011543:	52                   	push   edx
c0011544:	e8 f7 ef fe ff       	call   c0000540 <strlen>
c0011549:	83 c4 10             	add    esp,0x10
c001154c:	83 f8 3f             	cmp    eax,0x3f
c001154f:	77 6a                	ja     c00115bb <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011551:	50                   	push   eax
c0011552:	50                   	push   eax
c0011553:	8d 54 24 61          	lea    edx,[esp+0x61]
c0011557:	52                   	push   edx
c0011558:	8d 54 24 24          	lea    edx,[esp+0x24]
c001155c:	52                   	push   edx
c001155d:	e8 9e f0 fe ff       	call   c0000600 <strcpy>
c0011562:	58                   	pop    eax
c0011563:	8d 54 24 24          	lea    edx,[esp+0x24]
c0011567:	52                   	push   edx
c0011568:	e8 d3 ef fe ff       	call   c0000540 <strlen>
c001156d:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0011572:	83 c4 10             	add    esp,0x10
c0011575:	31 d2                	xor    edx,edx
c0011577:	eb 3a                	jmp    c00115b3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0011579:	80 fb 40             	cmp    bl,0x40
c001157c:	74 06                	je     c0011584 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001157e:	8d 44 24 58          	lea    eax,[esp+0x58]
c0011582:	eb 20                	jmp    c00115a4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0011584:	50                   	push   eax
c0011585:	50                   	push   eax
c0011586:	55                   	push   ebp
c0011587:	8d 44 24 24          	lea    eax,[esp+0x24]
c001158b:	50                   	push   eax
c001158c:	e8 4f f1 fe ff       	call   c00006e0 <strcmp>
c0011591:	83 c4 10             	add    esp,0x10
c0011594:	85 c0                	test   eax,eax
c0011596:	75 dd                	jne    c0011575 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011598:	eb e4                	jmp    c001157e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001159a:	8d 50 01             	lea    edx,[eax+0x1]
c001159d:	80 f9 3d             	cmp    cl,0x3d
c00115a0:	74 1d                	je     c00115bf <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c00115a2:	89 d0                	mov    eax,edx
c00115a4:	8a 08                	mov    cl,BYTE PTR [eax]
c00115a6:	84 c9                	test   cl,cl
c00115a8:	75 f0                	jne    c001159a <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c00115aa:	eb 0f                	jmp    c00115bb <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00115ac:	8d 50 01             	lea    edx,[eax+0x1]
c00115af:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c00115b3:	47                   	inc    edi
c00115b4:	89 d0                	mov    eax,edx
c00115b6:	e9 3b ff ff ff       	jmp    c00114f6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c00115bb:	31 c0                	xor    eax,eax
c00115bd:	eb 33                	jmp    c00115f2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c00115bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00115c3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00115c6:	50                   	push   eax
c00115c7:	50                   	push   eax
c00115c8:	8d 44 24 60          	lea    eax,[esp+0x60]
c00115cc:	50                   	push   eax
c00115cd:	56                   	push   esi
c00115ce:	e8 0d f1 fe ff       	call   c00006e0 <strcmp>
c00115d3:	83 c4 10             	add    esp,0x10
c00115d6:	85 c0                	test   eax,eax
c00115d8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00115dc:	75 97                	jne    c0011575 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00115de:	51                   	push   ecx
c00115df:	51                   	push   ecx
c00115e0:	52                   	push   edx
c00115e1:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00115e8:	e8 13 f0 fe ff       	call   c0000600 <strcpy>
c00115ed:	83 c4 10             	add    esp,0x10
c00115f0:	b0 01                	mov    al,0x1
c00115f2:	81 c4 2c 01 00 00    	add    esp,0x12c
c00115f8:	5b                   	pop    ebx
c00115f9:	5e                   	pop    esi
c00115fa:	5f                   	pop    edi
c00115fb:	5d                   	pop    ebp
c00115fc:	c3                   	ret    

c00115fd <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c00115fd:	57                   	push   edi
c00115fe:	56                   	push   esi
c00115ff:	53                   	push   ebx
c0011600:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0011606:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001160d:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0011614:	53                   	push   ebx
c0011615:	e8 26 ef fe ff       	call   c0000540 <strlen>
c001161a:	89 34 24             	mov    DWORD PTR [esp],esi
c001161d:	89 c7                	mov    edi,eax
c001161f:	e8 1c ef fe ff       	call   c0000540 <strlen>
c0011624:	83 c4 10             	add    esp,0x10
c0011627:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001162b:	3d ff 00 00 00       	cmp    eax,0xff
c0011630:	0f 87 d3 00 00 00    	ja     c0011709 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0011636:	57                   	push   edi
c0011637:	57                   	push   edi
c0011638:	56                   	push   esi
c0011639:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001163d:	56                   	push   esi
c001163e:	e8 bd ef fe ff       	call   c0000600 <strcpy>
c0011643:	58                   	pop    eax
c0011644:	5a                   	pop    edx
c0011645:	68 da eb 01 c0       	push   0xc001ebda
c001164a:	56                   	push   esi
c001164b:	e8 70 f1 fe ff       	call   c00007c0 <strcat>
c0011650:	59                   	pop    ecx
c0011651:	5f                   	pop    edi
c0011652:	53                   	push   ebx
c0011653:	56                   	push   esi
c0011654:	e8 67 f1 fe ff       	call   c00007c0 <strcat>
c0011659:	58                   	pop    eax
c001165a:	5a                   	pop    edx
c001165b:	68 31 e9 01 c0       	push   0xc001e931
c0011660:	56                   	push   esi
c0011661:	e8 5a f1 fe ff       	call   c00007c0 <strcat>
c0011666:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001166d:	e8 47 61 ff ff       	call   c00077b9 <malloc>
c0011672:	83 c4 0c             	add    esp,0xc
c0011675:	89 c3                	mov    ebx,eax
c0011677:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c001167d:	56                   	push   esi
c001167e:	50                   	push   eax
c001167f:	e8 72 94 ff ff       	call   c000aaf6 <File::File(char const*, Process*)>
c0011684:	83 c4 10             	add    esp,0x10
c0011687:	85 db                	test   ebx,ebx
c0011689:	74 7e                	je     c0011709 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001168b:	51                   	push   ecx
c001168c:	51                   	push   ecx
c001168d:	6a 01                	push   0x1
c001168f:	53                   	push   ebx
c0011690:	e8 21 95 ff ff       	call   c000abb6 <File::open(FileOpenMode)>
c0011695:	83 c4 10             	add    esp,0x10
c0011698:	85 c0                	test   eax,eax
c001169a:	74 08                	je     c00116a4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001169c:	83 ec 0c             	sub    esp,0xc
c001169f:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116a1:	53                   	push   ebx
c00116a2:	eb 5f                	jmp    c0011703 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c00116a4:	52                   	push   edx
c00116a5:	8d 44 24 17          	lea    eax,[esp+0x17]
c00116a9:	50                   	push   eax
c00116aa:	8d 44 24 20          	lea    eax,[esp+0x20]
c00116ae:	50                   	push   eax
c00116af:	53                   	push   ebx
c00116b0:	e8 ad 97 ff ff       	call   c000ae62 <File::stat(unsigned long long*, bool*)>
c00116b5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00116b9:	83 c4 10             	add    esp,0x10
c00116bc:	89 c1                	mov    ecx,eax
c00116be:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c00116c2:	74 31                	je     c00116f5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00116c4:	83 ec 0c             	sub    esp,0xc
c00116c7:	50                   	push   eax
c00116c8:	e8 ec 60 ff ff       	call   c00077b9 <malloc>
c00116cd:	89 c6                	mov    esi,eax
c00116cf:	58                   	pop    eax
c00116d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116d2:	8d 54 24 20          	lea    edx,[esp+0x20]
c00116d6:	52                   	push   edx
c00116d7:	56                   	push   esi
c00116d8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00116dc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00116e0:	53                   	push   ebx
c00116e1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00116e4:	83 c4 20             	add    esp,0x20
c00116e7:	85 c0                	test   eax,eax
c00116e9:	75 0a                	jne    c00116f5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00116eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00116ef:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00116f3:	74 18                	je     c001170d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c00116f5:	83 ec 0c             	sub    esp,0xc
c00116f8:	53                   	push   ebx
c00116f9:	e8 16 95 ff ff       	call   c000ac14 <File::close()>
c00116fe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011700:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011703:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011706:	83 c4 10             	add    esp,0x10
c0011709:	31 c0                	xor    eax,eax
c001170b:	eb 3b                	jmp    c0011748 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001170d:	83 ec 0c             	sub    esp,0xc
c0011710:	53                   	push   ebx
c0011711:	e8 fe 94 ff ff       	call   c000ac14 <File::close()>
c0011716:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011718:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001171b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001171e:	83 c4 0c             	add    esp,0xc
c0011721:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0011728:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001172f:	56                   	push   esi
c0011730:	e8 70 fd ff ff       	call   c00114a5 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0011735:	89 34 24             	mov    DWORD PTR [esp],esi
c0011738:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001173c:	e8 88 60 ff ff       	call   c00077c9 <free>
c0011741:	83 c4 10             	add    esp,0x10
c0011744:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011748:	81 c4 20 01 00 00    	add    esp,0x120
c001174e:	5b                   	pop    ebx
c001174f:	5e                   	pop    esi
c0011750:	5f                   	pop    edi
c0011751:	c3                   	ret    

c0011752 <Reg::getLine(char*, char*, char*)>:
c0011752:	57                   	push   edi
c0011753:	56                   	push   esi
c0011754:	53                   	push   ebx
c0011755:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011759:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001175d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011761:	57                   	push   edi
c0011762:	56                   	push   esi
c0011763:	53                   	push   ebx
c0011764:	68 36 e9 01 c0       	push   0xc001e936
c0011769:	e8 8f fe ff ff       	call   c00115fd <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001176e:	83 c4 10             	add    esp,0x10
c0011771:	84 c0                	test   al,al
c0011773:	75 10                	jne    c0011785 <Reg::getLine(char*, char*, char*)+0x33>
c0011775:	57                   	push   edi
c0011776:	56                   	push   esi
c0011777:	53                   	push   ebx
c0011778:	68 5b e9 01 c0       	push   0xc001e95b
c001177d:	e8 7b fe ff ff       	call   c00115fd <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0011782:	83 c4 10             	add    esp,0x10
c0011785:	5b                   	pop    ebx
c0011786:	5e                   	pop    esi
c0011787:	5f                   	pop    edi
c0011788:	c3                   	ret    

c0011789 <Reg::readInt(char*, char*, int*)>:
c0011789:	55                   	push   ebp
c001178a:	57                   	push   edi
c001178b:	56                   	push   esi
c001178c:	53                   	push   ebx
c001178d:	81 ec f0 00 00 00    	sub    esp,0xf0
c0011793:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0011797:	57                   	push   edi
c0011798:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001179f:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00117a6:	e8 a7 ff ff ff       	call   c0011752 <Reg::getLine(char*, char*, char*)>
c00117ab:	83 c4 10             	add    esp,0x10
c00117ae:	84 c0                	test   al,al
c00117b0:	0f 84 b3 00 00 00    	je     c0011869 <Reg::readInt(char*, char*, int*)+0xe0>
c00117b6:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c00117ba:	80 fa 2b             	cmp    dl,0x2b
c00117bd:	74 0c                	je     c00117cb <Reg::readInt(char*, char*, int*)+0x42>
c00117bf:	80 fa 2d             	cmp    dl,0x2d
c00117c2:	75 0e                	jne    c00117d2 <Reg::readInt(char*, char*, int*)+0x49>
c00117c4:	ba 01 00 00 00       	mov    edx,0x1
c00117c9:	eb 0b                	jmp    c00117d6 <Reg::readInt(char*, char*, int*)+0x4d>
c00117cb:	ba 01 00 00 00       	mov    edx,0x1
c00117d0:	eb 02                	jmp    c00117d4 <Reg::readInt(char*, char*, int*)+0x4b>
c00117d2:	31 d2                	xor    edx,edx
c00117d4:	31 c0                	xor    eax,eax
c00117d6:	be 0a 00 00 00       	mov    esi,0xa
c00117db:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00117e0:	75 20                	jne    c0011802 <Reg::readInt(char*, char*, int*)+0x79>
c00117e2:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c00117e6:	80 f9 78             	cmp    cl,0x78
c00117e9:	75 0a                	jne    c00117f5 <Reg::readInt(char*, char*, int*)+0x6c>
c00117eb:	83 c2 02             	add    edx,0x2
c00117ee:	be 10 00 00 00       	mov    esi,0x10
c00117f3:	eb 0d                	jmp    c0011802 <Reg::readInt(char*, char*, int*)+0x79>
c00117f5:	80 f9 62             	cmp    cl,0x62
c00117f8:	75 08                	jne    c0011802 <Reg::readInt(char*, char*, int*)+0x79>
c00117fa:	83 c2 02             	add    edx,0x2
c00117fd:	be 02 00 00 00       	mov    esi,0x2
c0011802:	01 d7                	add    edi,edx
c0011804:	31 d2                	xor    edx,edx
c0011806:	8a 1f                	mov    bl,BYTE PTR [edi]
c0011808:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001180c:	80 fb 0d             	cmp    bl,0xd
c001180f:	0f 94 c3             	sete   bl
c0011812:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011817:	0f 94 c1             	sete   cl
c001181a:	08 cb                	or     bl,cl
c001181c:	75 3a                	jne    c0011858 <Reg::readInt(char*, char*, int*)+0xcf>
c001181e:	0f af d6             	imul   edx,esi
c0011821:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0011826:	83 fe 10             	cmp    esi,0x10
c0011829:	75 26                	jne    c0011851 <Reg::readInt(char*, char*, int*)+0xc8>
c001182b:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001182f:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0011832:	89 e9                	mov    ecx,ebp
c0011834:	80 f9 05             	cmp    cl,0x5
c0011837:	77 06                	ja     c001183f <Reg::readInt(char*, char*, int*)+0xb6>
c0011839:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001183d:	eb 16                	jmp    c0011855 <Reg::readInt(char*, char*, int*)+0xcc>
c001183f:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0011843:	83 e9 61             	sub    ecx,0x61
c0011846:	80 f9 05             	cmp    cl,0x5
c0011849:	77 06                	ja     c0011851 <Reg::readInt(char*, char*, int*)+0xc8>
c001184b:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001184f:	eb 04                	jmp    c0011855 <Reg::readInt(char*, char*, int*)+0xcc>
c0011851:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0011855:	47                   	inc    edi
c0011856:	eb ae                	jmp    c0011806 <Reg::readInt(char*, char*, int*)+0x7d>
c0011858:	84 c0                	test   al,al
c001185a:	74 02                	je     c001185e <Reg::readInt(char*, char*, int*)+0xd5>
c001185c:	f7 da                	neg    edx
c001185e:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0011865:	89 10                	mov    DWORD PTR [eax],edx
c0011867:	88 d8                	mov    al,bl
c0011869:	81 c4 ec 00 00 00    	add    esp,0xec
c001186f:	5b                   	pop    ebx
c0011870:	5e                   	pop    esi
c0011871:	5f                   	pop    edi
c0011872:	5d                   	pop    ebp
c0011873:	c3                   	ret    

c0011874 <Reg::readString(char*, char*, char*, int)>:
c0011874:	57                   	push   edi
c0011875:	56                   	push   esi
c0011876:	53                   	push   ebx
c0011877:	81 ec d4 00 00 00    	sub    esp,0xd4
c001187d:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0011884:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0011888:	57                   	push   edi
c0011889:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0011890:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0011897:	e8 b6 fe ff ff       	call   c0011752 <Reg::getLine(char*, char*, char*)>
c001189c:	83 c4 10             	add    esp,0x10
c001189f:	89 c6                	mov    esi,eax
c00118a1:	84 c0                	test   al,al
c00118a3:	74 44                	je     c00118e9 <Reg::readString(char*, char*, char*, int)+0x75>
c00118a5:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00118ac:	31 c0                	xor    eax,eax
c00118ae:	4a                   	dec    edx
c00118af:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00118b2:	84 c9                	test   cl,cl
c00118b4:	74 0f                	je     c00118c5 <Reg::readString(char*, char*, char*, int)+0x51>
c00118b6:	39 c2                	cmp    edx,eax
c00118b8:	7e 0b                	jle    c00118c5 <Reg::readString(char*, char*, char*, int)+0x51>
c00118ba:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00118bd:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00118c2:	40                   	inc    eax
c00118c3:	eb ea                	jmp    c00118af <Reg::readString(char*, char*, char*, int)+0x3b>
c00118c5:	83 ec 0c             	sub    esp,0xc
c00118c8:	53                   	push   ebx
c00118c9:	e8 72 ec fe ff       	call   c0000540 <strlen>
c00118ce:	83 c4 10             	add    esp,0x10
c00118d1:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00118d6:	75 11                	jne    c00118e9 <Reg::readString(char*, char*, char*, int)+0x75>
c00118d8:	83 ec 0c             	sub    esp,0xc
c00118db:	53                   	push   ebx
c00118dc:	e8 5f ec fe ff       	call   c0000540 <strlen>
c00118e1:	83 c4 10             	add    esp,0x10
c00118e4:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00118e9:	81 c4 d0 00 00 00    	add    esp,0xd0
c00118ef:	89 f0                	mov    eax,esi
c00118f1:	5b                   	pop    ebx
c00118f2:	5e                   	pop    esi
c00118f3:	5f                   	pop    edi
c00118f4:	c3                   	ret    

c00118f5 <Reg::readBool(char*, char*, bool*)>:
c00118f5:	83 ec 20             	sub    esp,0x20
c00118f8:	8d 44 24 10          	lea    eax,[esp+0x10]
c00118fc:	50                   	push   eax
c00118fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011901:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011905:	e8 7f fe ff ff       	call   c0011789 <Reg::readInt(char*, char*, int*)>
c001190a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001190f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0011913:	0f 95 02             	setne  BYTE PTR [edx]
c0011916:	83 c4 2c             	add    esp,0x2c
c0011919:	c3                   	ret    

c001191a <Reg::readBoolWithDefault(char*, char*, bool)>:
c001191a:	53                   	push   ebx
c001191b:	83 ec 1c             	sub    esp,0x1c
c001191e:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0011922:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011926:	50                   	push   eax
c0011927:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001192b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001192f:	e8 c1 ff ff ff       	call   c00118f5 <Reg::readBool(char*, char*, bool*)>
c0011934:	83 c4 10             	add    esp,0x10
c0011937:	84 c0                	test   al,al
c0011939:	74 04                	je     c001193f <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001193b:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001193f:	88 d8                	mov    al,bl
c0011941:	83 c4 18             	add    esp,0x18
c0011944:	5b                   	pop    ebx
c0011945:	c3                   	ret    

c0011946 <Reg::readIntWithDefault(char*, char*, int)>:
c0011946:	53                   	push   ebx
c0011947:	83 ec 1c             	sub    esp,0x1c
c001194a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001194e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011952:	50                   	push   eax
c0011953:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011957:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001195b:	e8 29 fe ff ff       	call   c0011789 <Reg::readInt(char*, char*, int*)>
c0011960:	83 c4 10             	add    esp,0x10
c0011963:	84 c0                	test   al,al
c0011965:	74 04                	je     c001196b <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0011967:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001196b:	89 d8                	mov    eax,ebx
c001196d:	83 c4 18             	add    esp,0x18
c0011970:	5b                   	pop    ebx
c0011971:	c3                   	ret    

c0011972 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0011972:	57                   	push   edi
c0011973:	56                   	push   esi
c0011974:	56                   	push   esi
c0011975:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011979:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001197d:	56                   	push   esi
c001197e:	57                   	push   edi
c001197f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011983:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011987:	e8 e8 fe ff ff       	call   c0011874 <Reg::readString(char*, char*, char*, int)>
c001198c:	83 c4 10             	add    esp,0x10
c001198f:	84 c0                	test   al,al
c0011991:	75 1a                	jne    c00119ad <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0011993:	51                   	push   ecx
c0011994:	56                   	push   esi
c0011995:	6a 00                	push   0x0
c0011997:	57                   	push   edi
c0011998:	e8 33 eb fe ff       	call   c00004d0 <memset>
c001199d:	8d 4e ff             	lea    ecx,[esi-0x1]
c00119a0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00119a4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00119a6:	83 c4 10             	add    esp,0x10
c00119a9:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00119ad:	89 f8                	mov    eax,edi
c00119af:	5a                   	pop    edx
c00119b0:	5e                   	pop    esi
c00119b1:	5f                   	pop    edi
c00119b2:	c3                   	ret    

c00119b3 <SysEject(regs*)>:
c00119b3:	83 ec 0c             	sub    esp,0xc
c00119b6:	83 ca ff             	or     edx,0xffffffff
c00119b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119bd:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00119c0:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00119c5:	83 e9 41             	sub    ecx,0x41
c00119c8:	83 f9 19             	cmp    ecx,0x19
c00119cb:	77 18                	ja     c00119e5 <SysEject(regs*)+0x32>
c00119cd:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c00119d4:	85 c9                	test   ecx,ecx
c00119d6:	74 0d                	je     c00119e5 <SysEject(regs*)+0x32>
c00119d8:	83 ec 0c             	sub    esp,0xc
c00119db:	51                   	push   ecx
c00119dc:	e8 5d b2 ff ff       	call   c000cc3e <LogicalDisk::eject()>
c00119e1:	83 c4 10             	add    esp,0x10
c00119e4:	99                   	cdq    
c00119e5:	83 c4 0c             	add    esp,0xc
c00119e8:	c3                   	ret    

c00119e9 <SysExit(regs*)>:
c00119e9:	83 ec 18             	sub    esp,0x18
c00119ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00119f0:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00119f3:	e8 24 27 00 00       	call   c001411c <terminateTask(int)>
c00119f8:	83 c8 ff             	or     eax,0xffffffff
c00119fb:	83 c4 1c             	add    esp,0x1c
c00119fe:	89 c2                	mov    edx,eax
c0011a00:	c3                   	ret    

c0011a01 <SysGetCwd(regs*)>:
c0011a01:	83 ec 10             	sub    esp,0x10
c0011a04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011a08:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0011a0b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011a0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a13:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011a16:	e8 dd 8e ff ff       	call   c000a8f8 <Fs::getcwd(Process*, char*, int)>
c0011a1b:	83 c4 1c             	add    esp,0x1c
c0011a1e:	99                   	cdq    
c0011a1f:	c3                   	ret    

c0011a20 <SysGetPID(regs*)>:
c0011a20:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a25:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a28:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a2a:	99                   	cdq    
c0011a2b:	c3                   	ret    

c0011a2c <SysGetRAMData(regs*)>:
c0011a2c:	8b 0d e8 1e 02 c0    	mov    ecx,DWORD PTR ds:0xc0021ee8
c0011a32:	69 05 e4 1e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0021ee4,0xc8
c0011a3c:	99                   	cdq    
c0011a3d:	f7 f9                	idiv   ecx
c0011a3f:	c1 e0 18             	shl    eax,0x18
c0011a42:	09 c8                	or     eax,ecx
c0011a44:	99                   	cdq    
c0011a45:	c3                   	ret    

c0011a46 <SysGetVGAPtr(regs*)>:
c0011a46:	55                   	push   ebp
c0011a47:	57                   	push   edi
c0011a48:	56                   	push   esi
c0011a49:	53                   	push   ebx
c0011a4a:	83 ec 18             	sub    esp,0x18
c0011a4d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011a51:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0011a54:	e8 c3 21 00 00       	call   c0013c1c <Thr::processFromPID(int)>
c0011a59:	83 c4 10             	add    esp,0x10
c0011a5c:	89 c1                	mov    ecx,eax
c0011a5e:	b8 01 00 00 00       	mov    eax,0x1
c0011a63:	85 c9                	test   ecx,ecx
c0011a65:	74 57                	je     c0011abe <SysGetVGAPtr(regs*)+0x78>
c0011a67:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0011a6d:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0011a71:	74 0c                	je     c0011a7f <SysGetVGAPtr(regs*)+0x39>
c0011a73:	83 ec 0c             	sub    esp,0xc
c0011a76:	55                   	push   ebp
c0011a77:	e8 7b 69 ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c0011a7c:	83 c4 10             	add    esp,0x10
c0011a7f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0011a82:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011a85:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0011a8a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011a8c:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0011a8f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a92:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0011a98:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a9b:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0011a9e:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0011aa4:	50                   	push   eax
c0011aa5:	50                   	push   eax
c0011aa6:	68 76 e9 01 c0       	push   0xc001e976
c0011aab:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011aae:	05 a8 0f 00 00       	add    eax,0xfa8
c0011ab3:	50                   	push   eax
c0011ab4:	e8 47 eb fe ff       	call   c0000600 <strcpy>
c0011ab9:	83 c4 10             	add    esp,0x10
c0011abc:	31 c0                	xor    eax,eax
c0011abe:	83 c4 0c             	add    esp,0xc
c0011ac1:	31 d2                	xor    edx,edx
c0011ac3:	5b                   	pop    ebx
c0011ac4:	5e                   	pop    esi
c0011ac5:	5f                   	pop    edi
c0011ac6:	5d                   	pop    ebp
c0011ac7:	c3                   	ret    

c0011ac8 <SysLoadDLL(regs*)>:
c0011ac8:	56                   	push   esi
c0011ac9:	53                   	push   ebx
c0011aca:	31 d2                	xor    edx,edx
c0011acc:	51                   	push   ecx
c0011acd:	b8 01 00 00 00       	mov    eax,0x1
c0011ad2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011ad6:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0011ada:	0f 84 8c 00 00 00    	je     c0011b6c <SysLoadDLL(regs*)+0xa4>
c0011ae0:	83 ec 0c             	sub    esp,0xc
c0011ae3:	68 14 01 00 00       	push   0x114
c0011ae8:	e8 cc 5c ff ff       	call   c00077b9 <malloc>
c0011aed:	83 c4 0c             	add    esp,0xc
c0011af0:	89 c3                	mov    ebx,eax
c0011af2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011af7:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011afa:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011afd:	53                   	push   ebx
c0011afe:	e8 f3 8f ff ff       	call   c000aaf6 <File::File(char const*, Process*)>
c0011b03:	83 c4 10             	add    esp,0x10
c0011b06:	31 d2                	xor    edx,edx
c0011b08:	b8 02 00 00 00       	mov    eax,0x2
c0011b0d:	85 db                	test   ebx,ebx
c0011b0f:	74 5b                	je     c0011b6c <SysLoadDLL(regs*)+0xa4>
c0011b11:	83 ec 0c             	sub    esp,0xc
c0011b14:	53                   	push   ebx
c0011b15:	e8 0a 93 ff ff       	call   c000ae24 <File::exists()>
c0011b1a:	83 c4 10             	add    esp,0x10
c0011b1d:	84 c0                	test   al,al
c0011b1f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011b21:	75 11                	jne    c0011b34 <SysLoadDLL(regs*)+0x6c>
c0011b23:	83 ec 0c             	sub    esp,0xc
c0011b26:	53                   	push   ebx
c0011b27:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011b2a:	83 c4 10             	add    esp,0x10
c0011b2d:	b8 03 00 00 00       	mov    eax,0x3
c0011b32:	eb 36                	jmp    c0011b6a <SysLoadDLL(regs*)+0xa2>
c0011b34:	83 ec 0c             	sub    esp,0xc
c0011b37:	53                   	push   ebx
c0011b38:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011b3b:	58                   	pop    eax
c0011b3c:	5a                   	pop    edx
c0011b3d:	6a 00                	push   0x0
c0011b3f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011b42:	e8 86 12 00 00       	call   c0012dcd <Thr::loadDLL(char const*, bool)>
c0011b47:	83 c4 10             	add    esp,0x10
c0011b4a:	89 c1                	mov    ecx,eax
c0011b4c:	31 d2                	xor    edx,edx
c0011b4e:	b8 04 00 00 00       	mov    eax,0x4
c0011b53:	85 c9                	test   ecx,ecx
c0011b55:	74 15                	je     c0011b6c <SysLoadDLL(regs*)+0xa4>
c0011b57:	53                   	push   ebx
c0011b58:	53                   	push   ebx
c0011b59:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0011b5f:	51                   	push   ecx
c0011b60:	e8 99 14 00 00       	call   c0012ffe <Thr::executeDLL(unsigned long, void*)>
c0011b65:	83 c4 10             	add    esp,0x10
c0011b68:	31 c0                	xor    eax,eax
c0011b6a:	31 d2                	xor    edx,edx
c0011b6c:	59                   	pop    ecx
c0011b6d:	5b                   	pop    ebx
c0011b6e:	5e                   	pop    esi
c0011b6f:	c3                   	ret    

c0011b70 <SysRead(regs*)>:
c0011b70:	57                   	push   edi
c0011b71:	56                   	push   esi
c0011b72:	53                   	push   ebx
c0011b73:	83 ec 10             	sub    esp,0x10
c0011b76:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011b7a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011b7d:	83 f8 02             	cmp    eax,0x2
c0011b80:	77 10                	ja     c0011b92 <SysRead(regs*)+0x22>
c0011b82:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b87:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b8a:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011b90:	eb 0e                	jmp    c0011ba0 <SysRead(regs*)+0x30>
c0011b92:	83 ec 0c             	sub    esp,0xc
c0011b95:	50                   	push   eax
c0011b96:	e8 94 75 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0011b9b:	83 c4 10             	add    esp,0x10
c0011b9e:	89 c1                	mov    ecx,eax
c0011ba0:	83 c8 ff             	or     eax,0xffffffff
c0011ba3:	85 c9                	test   ecx,ecx
c0011ba5:	89 c2                	mov    edx,eax
c0011ba7:	74 28                	je     c0011bd1 <SysRead(regs*)+0x61>
c0011ba9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011bb1:	31 ff                	xor    edi,edi
c0011bb3:	83 ec 0c             	sub    esp,0xc
c0011bb6:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011bb8:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011bbc:	52                   	push   edx
c0011bbd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011bc0:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011bc3:	57                   	push   edi
c0011bc4:	56                   	push   esi
c0011bc5:	51                   	push   ecx
c0011bc6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011bc9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011bcd:	83 c4 20             	add    esp,0x20
c0011bd0:	99                   	cdq    
c0011bd1:	83 c4 10             	add    esp,0x10
c0011bd4:	5b                   	pop    ebx
c0011bd5:	5e                   	pop    esi
c0011bd6:	5f                   	pop    edi
c0011bd7:	c3                   	ret    

c0011bd8 <SysRegisterSignal(regs*)>:
c0011bd8:	83 ec 18             	sub    esp,0x18
c0011bdb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011bdf:	6a 00                	push   0x0
c0011be1:	6a 00                	push   0x0
c0011be3:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0011be6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011be9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bee:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011bf1:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011bf7:	e8 bd e9 ff ff       	call   c00105b9 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0011bfc:	83 c4 2c             	add    esp,0x2c
c0011bff:	99                   	cdq    
c0011c00:	c3                   	ret    

c0011c01 <SysSbrk(regs*)>:
c0011c01:	56                   	push   esi
c0011c02:	53                   	push   ebx
c0011c03:	83 ec 0c             	sub    esp,0xc
c0011c06:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011c0a:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011c0d:	68 80 e9 01 c0       	push   0xc001e980
c0011c12:	e8 6a 89 ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c0011c17:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c1c:	8b 5b 20             	mov    ebx,DWORD PTR [ebx+0x20]
c0011c1f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c22:	83 c4 10             	add    esp,0x10
c0011c25:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0011c2b:	85 db                	test   ebx,ebx
c0011c2d:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0011c30:	74 02                	je     c0011c34 <SysSbrk(regs*)+0x33>
c0011c32:	79 06                	jns    c0011c3a <SysSbrk(regs*)+0x39>
c0011c34:	89 f0                	mov    eax,esi
c0011c36:	31 d2                	xor    edx,edx
c0011c38:	eb 2a                	jmp    c0011c64 <SysSbrk(regs*)+0x63>
c0011c3a:	83 c8 ff             	or     eax,0xffffffff
c0011c3d:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0011c43:	89 c2                	mov    edx,eax
c0011c45:	77 1d                	ja     c0011c64 <SysSbrk(regs*)+0x63>
c0011c47:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0011c4d:	50                   	push   eax
c0011c4e:	c1 ea 0c             	shr    edx,0xc
c0011c51:	68 07 0c 00 00       	push   0xc07
c0011c56:	52                   	push   edx
c0011c57:	51                   	push   ecx
c0011c58:	e8 9f 7d ff ff       	call   c00099fc <VAS::allocatePages(int, int)>
c0011c5d:	89 f0                	mov    eax,esi
c0011c5f:	31 d2                	xor    edx,edx
c0011c61:	83 c4 10             	add    esp,0x10
c0011c64:	59                   	pop    ecx
c0011c65:	5b                   	pop    ebx
c0011c66:	5e                   	pop    esi
c0011c67:	c3                   	ret    

c0011c68 <SysSetCwd(regs*)>:
c0011c68:	83 ec 14             	sub    esp,0x14
c0011c6b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011c6f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011c72:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c77:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011c7a:	e8 44 92 ff ff       	call   c000aec3 <Fs::setcwd(Process*, char*)>
c0011c7f:	83 c4 1c             	add    esp,0x1c
c0011c82:	99                   	cdq    
c0011c83:	c3                   	ret    

c0011c84 <SysSetTime(regs*)>:
c0011c84:	55                   	push   ebp
c0011c85:	31 c9                	xor    ecx,ecx
c0011c87:	57                   	push   edi
c0011c88:	bd 0c 00 00 00       	mov    ebp,0xc
c0011c8d:	56                   	push   esi
c0011c8e:	53                   	push   ebx
c0011c8f:	31 db                	xor    ebx,ebx
c0011c91:	83 ec 10             	sub    esp,0x10
c0011c94:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011c98:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0011c9b:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0011c9e:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0011ca1:	89 c2                	mov    edx,eax
c0011ca3:	66 81 ef 6c 07       	sub    di,0x76c
c0011ca8:	83 e2 1f             	and    edx,0x1f
c0011cab:	c1 e7 10             	shl    edi,0x10
c0011cae:	42                   	inc    edx
c0011caf:	c1 e8 05             	shr    eax,0x5
c0011cb2:	88 d1                	mov    cl,dl
c0011cb4:	31 d2                	xor    edx,edx
c0011cb6:	f7 f5                	div    ebp
c0011cb8:	89 dd                	mov    ebp,ebx
c0011cba:	88 d5                	mov    ch,dl
c0011cbc:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0011cc2:	0f b7 c1             	movzx  eax,cx
c0011cc5:	31 d2                	xor    edx,edx
c0011cc7:	09 f8                	or     eax,edi
c0011cc9:	bf 3c 00 00 00       	mov    edi,0x3c
c0011cce:	89 c1                	mov    ecx,eax
c0011cd0:	89 f0                	mov    eax,esi
c0011cd2:	f7 f7                	div    edi
c0011cd4:	c1 e2 10             	shl    edx,0x10
c0011cd7:	09 d5                	or     ebp,edx
c0011cd9:	31 d2                	xor    edx,edx
c0011cdb:	89 eb                	mov    ebx,ebp
c0011cdd:	f7 f7                	div    edi
c0011cdf:	bf 10 0e 00 00       	mov    edi,0xe10
c0011ce4:	88 d7                	mov    bh,dl
c0011ce6:	89 f0                	mov    eax,esi
c0011ce8:	31 d2                	xor    edx,edx
c0011cea:	f7 f7                	div    edi
c0011cec:	bf 18 00 00 00       	mov    edi,0x18
c0011cf1:	31 d2                	xor    edx,edx
c0011cf3:	f7 f7                	div    edi
c0011cf5:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0011cfa:	88 d3                	mov    bl,dl
c0011cfc:	53                   	push   ebx
c0011cfd:	51                   	push   ecx
c0011cfe:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0011d04:	e8 cb 99 ff ff       	call   c000b6d4 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0011d09:	83 c4 1c             	add    esp,0x1c
c0011d0c:	83 f0 01             	xor    eax,0x1
c0011d0f:	5b                   	pop    ebx
c0011d10:	0f b6 c0             	movzx  eax,al
c0011d13:	5e                   	pop    esi
c0011d14:	31 d2                	xor    edx,edx
c0011d16:	5f                   	pop    edi
c0011d17:	5d                   	pop    ebp
c0011d18:	c3                   	ret    

c0011d19 <SysTimezone(regs*)>:
c0011d19:	53                   	push   ebx
c0011d1a:	83 ec 08             	sub    esp,0x8
c0011d1d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011d21:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0011d25:	75 17                	jne    c0011d3e <SysTimezone(regs*)+0x25>
c0011d27:	83 ec 0c             	sub    esp,0xc
c0011d2a:	68 8c e9 01 c0       	push   0xc001e98c
c0011d2f:	e8 4d 88 ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c0011d34:	83 c8 ff             	or     eax,0xffffffff
c0011d37:	83 c4 10             	add    esp,0x10
c0011d3a:	89 c2                	mov    edx,eax
c0011d3c:	eb 20                	jmp    c0011d5e <SysTimezone(regs*)+0x45>
c0011d3e:	83 ec 0c             	sub    esp,0xc
c0011d41:	68 a1 e9 01 c0       	push   0xc001e9a1
c0011d46:	e8 36 88 ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c0011d4b:	58                   	pop    eax
c0011d4c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011d4f:	e8 dc 96 ff ff       	call   c000b430 <User::loadClockSettings(int)>
c0011d54:	83 c4 10             	add    esp,0x10
c0011d57:	b8 01 00 00 00       	mov    eax,0x1
c0011d5c:	31 d2                	xor    edx,edx
c0011d5e:	83 c4 08             	add    esp,0x8
c0011d61:	5b                   	pop    ebx
c0011d62:	c3                   	ret    

c0011d63 <SysWrite(regs*)>:
c0011d63:	57                   	push   edi
c0011d64:	56                   	push   esi
c0011d65:	53                   	push   ebx
c0011d66:	83 ec 10             	sub    esp,0x10
c0011d69:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011d6d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d70:	83 f8 02             	cmp    eax,0x2
c0011d73:	77 10                	ja     c0011d85 <SysWrite(regs*)+0x22>
c0011d75:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d7a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d7d:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011d83:	eb 0e                	jmp    c0011d93 <SysWrite(regs*)+0x30>
c0011d85:	83 ec 0c             	sub    esp,0xc
c0011d88:	50                   	push   eax
c0011d89:	e8 a1 73 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0011d8e:	83 c4 10             	add    esp,0x10
c0011d91:	89 c1                	mov    ecx,eax
c0011d93:	83 c8 ff             	or     eax,0xffffffff
c0011d96:	85 c9                	test   ecx,ecx
c0011d98:	89 c2                	mov    edx,eax
c0011d9a:	74 28                	je     c0011dc4 <SysWrite(regs*)+0x61>
c0011d9c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011da4:	31 ff                	xor    edi,edi
c0011da6:	83 ec 0c             	sub    esp,0xc
c0011da9:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011dab:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011daf:	52                   	push   edx
c0011db0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011db3:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011db6:	57                   	push   edi
c0011db7:	56                   	push   esi
c0011db8:	51                   	push   ecx
c0011db9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011dbc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011dc0:	83 c4 20             	add    esp,0x20
c0011dc3:	99                   	cdq    
c0011dc4:	83 c4 10             	add    esp,0x10
c0011dc7:	5b                   	pop    ebx
c0011dc8:	5e                   	pop    esi
c0011dc9:	5f                   	pop    edi
c0011dca:	c3                   	ret    

c0011dcb <SysWsbe(regs*)>:
c0011dcb:	57                   	push   edi
c0011dcc:	b9 0b 00 00 00       	mov    ecx,0xb
c0011dd1:	56                   	push   esi
c0011dd2:	be e0 e9 01 c0       	mov    esi,0xc001e9e0
c0011dd7:	53                   	push   ebx
c0011dd8:	83 ec 30             	sub    esp,0x30
c0011ddb:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011ddf:	fc                   	cld    
c0011de0:	83 ec 0c             	sub    esp,0xc
c0011de3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011de5:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0011de9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011dee:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011df1:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0011df7:	8b 06                	mov    eax,DWORD PTR [esi]
c0011df9:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0011dfc:	57                   	push   edi
c0011dfd:	e8 3e e7 fe ff       	call   c0000540 <strlen>
c0011e02:	5a                   	pop    edx
c0011e03:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0011e07:	52                   	push   edx
c0011e08:	31 d2                	xor    edx,edx
c0011e0a:	57                   	push   edi
c0011e0b:	52                   	push   edx
c0011e0c:	50                   	push   eax
c0011e0d:	56                   	push   esi
c0011e0e:	ff d3                	call   ebx
c0011e10:	83 c4 14             	add    esp,0x14
c0011e13:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011e17:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0011e1a:	e8 fd 22 00 00       	call   c001411c <terminateTask(int)>
c0011e1f:	83 c4 40             	add    esp,0x40
c0011e22:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011e27:	5b                   	pop    ebx
c0011e28:	31 d2                	xor    edx,edx
c0011e2a:	5e                   	pop    esi
c0011e2b:	5f                   	pop    edi
c0011e2c:	c3                   	ret    

c0011e2d <SysYield(regs*)>:
c0011e2d:	83 ec 0c             	sub    esp,0xc
c0011e30:	fa                   	cli    
c0011e31:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0011e37:	e8 bc 19 00 00       	call   c00137f8 <schedule()>
c0011e3c:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0011e41:	48                   	dec    eax
c0011e42:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0011e47:	75 01                	jne    c0011e4a <SysYield(regs*)+0x1d>
c0011e49:	fb                   	sti    
c0011e4a:	31 c0                	xor    eax,eax
c0011e4c:	31 d2                	xor    edx,edx
c0011e4e:	83 c4 0c             	add    esp,0xc
c0011e51:	c3                   	ret    

c0011e52 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0011e52:	55                   	push   ebp
c0011e53:	57                   	push   edi
c0011e54:	56                   	push   esi
c0011e55:	53                   	push   ebx
c0011e56:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0011e5c:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0011e64:	0f 95 c2             	setne  dl
c0011e67:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0011e6f:	0f 94 c0             	sete   al
c0011e72:	84 c2                	test   dl,al
c0011e74:	74 34                	je     c0011eaa <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011e76:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0011e81:	74 27                	je     c0011eaa <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011e83:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0011e8a:	05 00 10 00 00       	add    eax,0x1000
c0011e8f:	89 c1                	mov    ecx,eax
c0011e91:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011e96:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0011e9c:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0011ea3:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0011eaa:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0011eb1:	83 ec 0c             	sub    esp,0xc
c0011eb4:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011eba:	6a 01                	push   0x1
c0011ebc:	e8 c4 73 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0011ec1:	83 c4 10             	add    esp,0x10
c0011ec4:	89 c3                	mov    ebx,eax
c0011ec6:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011ecc:	0f 86 25 01 00 00    	jbe    c0011ff7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c0011ed2:	c1 ee 0c             	shr    esi,0xc
c0011ed5:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011edc:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0011ee0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011ee8:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0011eef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011ef3:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0011efa:	29 ef                	sub    edi,ebp
c0011efc:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0011f00:	0f 83 f8 00 00 00    	jae    c0011ffe <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c0011f06:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0011f0c:	76 05                	jbe    c0011f13 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c0011f0e:	bf 00 10 00 00       	mov    edi,0x1000
c0011f13:	83 ec 0c             	sub    esp,0xc
c0011f16:	31 d2                	xor    edx,edx
c0011f18:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011f1f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011f21:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011f25:	50                   	push   eax
c0011f26:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011f2a:	56                   	push   esi
c0011f2b:	52                   	push   edx
c0011f2c:	57                   	push   edi
c0011f2d:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0011f34:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011f37:	83 c4 20             	add    esp,0x20
c0011f3a:	85 c0                	test   eax,eax
c0011f3c:	75 06                	jne    c0011f44 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c0011f3e:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0011f42:	74 13                	je     c0011f57 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c0011f44:	83 ec 0c             	sub    esp,0xc
c0011f47:	53                   	push   ebx
c0011f48:	e8 2c 76 ff ff       	call   c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c0011f4d:	83 c4 10             	add    esp,0x10
c0011f50:	31 c0                	xor    eax,eax
c0011f52:	e9 7c 01 00 00       	jmp    c00120d3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c0011f57:	fa                   	cli    
c0011f58:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0011f5e:	e8 32 5b ff ff       	call   c0007a95 <Phys::allocatePage()>
c0011f63:	6a 07                	push   0x7
c0011f65:	89 c7                	mov    edi,eax
c0011f67:	53                   	push   ebx
c0011f68:	50                   	push   eax
c0011f69:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f6e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f71:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f77:	e8 7c 79 ff ff       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011f7c:	83 c4 0c             	add    esp,0xc
c0011f7f:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011f86:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f8c:	6a 00                	push   0x0
c0011f8e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f93:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f96:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f9c:	e8 c9 77 ff ff       	call   c000976a <VAS::mapOtherVASIn(bool, VAS*)>
c0011fa1:	58                   	pop    eax
c0011fa2:	5a                   	pop    edx
c0011fa3:	68 07 0c 00 00       	push   0xc07
c0011fa8:	55                   	push   ebp
c0011fa9:	57                   	push   edi
c0011faa:	89 df                	mov    edi,ebx
c0011fac:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0011fb3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011fb9:	6a 00                	push   0x0
c0011fbb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011fc0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011fc3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011fc9:	e8 62 7d ff ff       	call   c0009d30 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0011fce:	b9 00 10 00 00       	mov    ecx,0x1000
c0011fd3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011fd5:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0011fda:	83 c4 20             	add    esp,0x20
c0011fdd:	48                   	dec    eax
c0011fde:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0011fe3:	85 c0                	test   eax,eax
c0011fe5:	75 01                	jne    c0011fe8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c0011fe7:	fb                   	sti    
c0011fe8:	81 c5 00 10 00 00    	add    ebp,0x1000
c0011fee:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0011ff2:	e9 f1 fe ff ff       	jmp    c0011ee8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c0011ff7:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011ffe:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0012005:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001200b:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0012011:	0f 86 ae 00 00 00    	jbe    c00120c5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0012017:	fa                   	cli    
c0012018:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001201e:	c1 ee 0c             	shr    esi,0xc
c0012021:	51                   	push   ecx
c0012022:	31 ff                	xor    edi,edi
c0012024:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001202b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012031:	6a 00                	push   0x0
c0012033:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012038:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001203b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012041:	e8 24 77 ff ff       	call   c000976a <VAS::mapOtherVASIn(bool, VAS*)>
c0012046:	83 c4 10             	add    esp,0x10
c0012049:	e8 47 5a ff ff       	call   c0007a95 <Phys::allocatePage()>
c001204e:	47                   	inc    edi
c001204f:	6a 07                	push   0x7
c0012051:	53                   	push   ebx
c0012052:	50                   	push   eax
c0012053:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012057:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001205d:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0012060:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0012066:	e8 8d 78 ff ff       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c001206b:	58                   	pop    eax
c001206c:	5a                   	pop    edx
c001206d:	68 07 0c 00 00       	push   0xc07
c0012072:	55                   	push   ebp
c0012073:	81 c5 00 10 00 00    	add    ebp,0x1000
c0012079:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001207d:	50                   	push   eax
c001207e:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0012085:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001208b:	6a 00                	push   0x0
c001208d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012092:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012095:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001209b:	e8 90 7c ff ff       	call   c0009d30 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00120a0:	83 c4 1c             	add    esp,0x1c
c00120a3:	68 00 10 00 00       	push   0x1000
c00120a8:	6a 00                	push   0x0
c00120aa:	53                   	push   ebx
c00120ab:	e8 20 e4 fe ff       	call   c00004d0 <memset>
c00120b0:	83 c4 10             	add    esp,0x10
c00120b3:	39 fe                	cmp    esi,edi
c00120b5:	77 92                	ja     c0012049 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c00120b7:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00120bc:	48                   	dec    eax
c00120bd:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00120c2:	75 01                	jne    c00120c5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c00120c4:	fb                   	sti    
c00120c5:	83 ec 0c             	sub    esp,0xc
c00120c8:	53                   	push   ebx
c00120c9:	e8 ab 74 ff ff       	call   c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c00120ce:	83 c4 10             	add    esp,0x10
c00120d1:	b0 01                	mov    al,0x1
c00120d3:	81 c4 2c 10 00 00    	add    esp,0x102c
c00120d9:	5b                   	pop    ebx
c00120da:	5e                   	pop    esi
c00120db:	5f                   	pop    edi
c00120dc:	5d                   	pop    ebp
c00120dd:	c3                   	ret    

c00120de <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00120de:	55                   	push   ebp
c00120df:	57                   	push   edi
c00120e0:	56                   	push   esi
c00120e1:	53                   	push   ebx
c00120e2:	83 ec 48             	sub    esp,0x48
c00120e5:	68 14 01 00 00       	push   0x114
c00120ea:	e8 ca 56 ff ff       	call   c00077b9 <malloc>
c00120ef:	83 c4 0c             	add    esp,0xc
c00120f2:	89 c6                	mov    esi,eax
c00120f4:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00120f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00120fc:	50                   	push   eax
c00120fd:	e8 f4 89 ff ff       	call   c000aaf6 <File::File(char const*, Process*)>
c0012102:	58                   	pop    eax
c0012103:	5a                   	pop    edx
c0012104:	6a 01                	push   0x1
c0012106:	56                   	push   esi
c0012107:	e8 aa 8a ff ff       	call   c000abb6 <File::open(FileOpenMode)>
c001210c:	83 c4 10             	add    esp,0x10
c001210f:	85 c0                	test   eax,eax
c0012111:	0f 85 47 01 00 00    	jne    c001225e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012117:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001211f:	83 ec 0c             	sub    esp,0xc
c0012122:	6a 34                	push   0x34
c0012124:	e8 90 56 ff ff       	call   c00077b9 <malloc>
c0012129:	89 c3                	mov    ebx,eax
c001212b:	58                   	pop    eax
c001212c:	8b 06                	mov    eax,DWORD PTR [esi]
c001212e:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0012132:	57                   	push   edi
c0012133:	53                   	push   ebx
c0012134:	6a 00                	push   0x0
c0012136:	6a 34                	push   0x34
c0012138:	56                   	push   esi
c0012139:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001213c:	83 c4 20             	add    esp,0x20
c001213f:	85 c0                	test   eax,eax
c0012141:	0f 85 17 01 00 00    	jne    c001225e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012147:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001214d:	0f 85 0b 01 00 00    	jne    c001225e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012153:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012156:	85 c0                	test   eax,eax
c0012158:	0f 84 00 01 00 00    	je     c001225e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001215e:	31 d2                	xor    edx,edx
c0012160:	55                   	push   ebp
c0012161:	52                   	push   edx
c0012162:	50                   	push   eax
c0012163:	56                   	push   esi
c0012164:	e8 0b 8b ff ff       	call   c000ac74 <File::seek(unsigned long long)>
c0012169:	83 c4 10             	add    esp,0x10
c001216c:	85 c0                	test   eax,eax
c001216e:	0f 85 ea 00 00 00    	jne    c001225e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012174:	83 ec 0c             	sub    esp,0xc
c0012177:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001217a:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001217e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012182:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0012186:	0f af c2             	imul   eax,edx
c0012189:	50                   	push   eax
c001218a:	e8 2a 56 ff ff       	call   c00077b9 <malloc>
c001218f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0012191:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012195:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012198:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001219c:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00121a0:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00121a4:	0f af c2             	imul   eax,edx
c00121a7:	99                   	cdq    
c00121a8:	52                   	push   edx
c00121a9:	50                   	push   eax
c00121aa:	56                   	push   esi
c00121ab:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00121ae:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00121b1:	83 c4 20             	add    esp,0x20
c00121b4:	85 c0                	test   eax,eax
c00121b6:	0f 84 a2 00 00 00    	je     c001225e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00121bc:	31 d2                	xor    edx,edx
c00121be:	51                   	push   ecx
c00121bf:	52                   	push   edx
c00121c0:	50                   	push   eax
c00121c1:	56                   	push   esi
c00121c2:	e8 ad 8a ff ff       	call   c000ac74 <File::seek(unsigned long long)>
c00121c7:	83 c4 10             	add    esp,0x10
c00121ca:	85 c0                	test   eax,eax
c00121cc:	0f 85 8c 00 00 00    	jne    c001225e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00121d2:	83 ec 0c             	sub    esp,0xc
c00121d5:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00121d9:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00121dd:	31 ed                	xor    ebp,ebp
c00121df:	0f af c2             	imul   eax,edx
c00121e2:	50                   	push   eax
c00121e3:	e8 d1 55 ff ff       	call   c00077b9 <malloc>
c00121e8:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00121ea:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00121ee:	89 3c 24             	mov    DWORD PTR [esp],edi
c00121f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00121f5:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00121f9:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00121fd:	0f af c2             	imul   eax,edx
c0012200:	99                   	cdq    
c0012201:	52                   	push   edx
c0012202:	50                   	push   eax
c0012203:	56                   	push   esi
c0012204:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012207:	83 c4 20             	add    esp,0x20
c001220a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012212:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0012216:	0f 86 80 00 00 00    	jbe    c001229c <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001221c:	0f b7 fd             	movzx  edi,bp
c001221f:	c1 e7 05             	shl    edi,0x5
c0012222:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0012226:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0012229:	75 6b                	jne    c0012296 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001222b:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001222e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012232:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0012235:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012239:	52                   	push   edx
c001223a:	31 d2                	xor    edx,edx
c001223c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001223f:	52                   	push   edx
c0012240:	50                   	push   eax
c0012241:	56                   	push   esi
c0012242:	e8 2d 8a ff ff       	call   c000ac74 <File::seek(unsigned long long)>
c0012247:	83 c4 10             	add    esp,0x10
c001224a:	85 c0                	test   eax,eax
c001224c:	74 17                	je     c0012265 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001224e:	83 ec 0c             	sub    esp,0xc
c0012251:	68 0c ea 01 c0       	push   0xc001ea0c
c0012256:	e8 26 83 ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c001225b:	83 c4 10             	add    esp,0x10
c001225e:	31 c0                	xor    eax,eax
c0012260:	e9 87 00 00 00       	jmp    c00122ec <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0012265:	83 ec 0c             	sub    esp,0xc
c0012268:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001226b:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001226e:	50                   	push   eax
c001226f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012273:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012277:	56                   	push   esi
c0012278:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001227c:	e8 d1 fb ff ff       	call   c0011e52 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0012281:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012285:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0012289:	83 c4 20             	add    esp,0x20
c001228c:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0012290:	73 04                	jae    c0012296 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0012292:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012296:	45                   	inc    ebp
c0012297:	e9 76 ff ff ff       	jmp    c0012212 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001229c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00122a0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00122a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00122a8:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c00122ae:	83 ec 0c             	sub    esp,0xc
c00122b1:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c00122b7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122bc:	05 00 10 00 00       	add    eax,0x1000
c00122c1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00122c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00122c8:	e8 fc 54 ff ff       	call   c00077c9 <free>
c00122cd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00122d0:	e8 f4 54 ff ff       	call   c00077c9 <free>
c00122d5:	58                   	pop    eax
c00122d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00122da:	e8 ea 54 ff ff       	call   c00077c9 <free>
c00122df:	89 34 24             	mov    DWORD PTR [esp],esi
c00122e2:	e8 2d 89 ff ff       	call   c000ac14 <File::close()>
c00122e7:	83 c4 10             	add    esp,0x10
c00122ea:	b0 01                	mov    al,0x1
c00122ec:	83 c4 3c             	add    esp,0x3c
c00122ef:	5b                   	pop    ebx
c00122f0:	5e                   	pop    esi
c00122f1:	5f                   	pop    edi
c00122f2:	5d                   	pop    ebp
c00122f3:	c3                   	ret    

c00122f4 <Thr::runtimeReferenceHelper()>:
c00122f4:	83 ec 18             	sub    esp,0x18
c00122f7:	68 14 ea 01 c0       	push   0xc001ea14
c00122fc:	e8 80 82 ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c0012301:	fa                   	cli    
c0012302:	83 c4 10             	add    esp,0x10
c0012305:	eb fe                	jmp    c0012305 <Thr::runtimeReferenceHelper()+0x11>

c0012307 <Thr::getAddressOfKernelSymbol(char const*)>:
c0012307:	57                   	push   edi
c0012308:	56                   	push   esi
c0012309:	53                   	push   ebx
c001230a:	31 db                	xor    ebx,ebx
c001230c:	39 1d 40 51 02 c0    	cmp    DWORD PTR ds:0xc0025140,ebx
c0012312:	7e 3c                	jle    c0012350 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0012314:	8b 34 9d c0 50 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdaf40]
c001231b:	31 ff                	xor    edi,edi
c001231d:	39 3c 9d c0 4f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdb040],edi
c0012324:	7e 27                	jle    c001234d <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0012326:	50                   	push   eax
c0012327:	50                   	push   eax
c0012328:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001232c:	8b 06                	mov    eax,DWORD PTR [esi]
c001232e:	03 04 9d 40 50 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdafc0]
c0012335:	50                   	push   eax
c0012336:	e8 a5 e3 fe ff       	call   c00006e0 <strcmp>
c001233b:	83 c4 10             	add    esp,0x10
c001233e:	85 c0                	test   eax,eax
c0012340:	75 05                	jne    c0012347 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0012342:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0012345:	eb 0b                	jmp    c0012352 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0012347:	83 c6 10             	add    esi,0x10
c001234a:	47                   	inc    edi
c001234b:	eb d0                	jmp    c001231d <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001234d:	43                   	inc    ebx
c001234e:	eb bc                	jmp    c001230c <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0012350:	31 c0                	xor    eax,eax
c0012352:	5b                   	pop    ebx
c0012353:	5e                   	pop    esi
c0012354:	5f                   	pop    edi
c0012355:	c3                   	ret    

c0012356 <Thr::loadKernelSymbolTable(char const*)>:
c0012356:	55                   	push   ebp
c0012357:	57                   	push   edi
c0012358:	56                   	push   esi
c0012359:	53                   	push   ebx
c001235a:	83 ec 68             	sub    esp,0x68
c001235d:	8b 35 90 51 02 c0    	mov    esi,DWORD PTR ds:0xc0025190
c0012363:	68 14 01 00 00       	push   0x114
c0012368:	e8 4c 54 ff ff       	call   c00077b9 <malloc>
c001236d:	83 c4 0c             	add    esp,0xc
c0012370:	89 c3                	mov    ebx,eax
c0012372:	56                   	push   esi
c0012373:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0012377:	50                   	push   eax
c0012378:	e8 79 87 ff ff       	call   c000aaf6 <File::File(char const*, Process*)>
c001237d:	5e                   	pop    esi
c001237e:	5f                   	pop    edi
c001237f:	6a 01                	push   0x1
c0012381:	53                   	push   ebx
c0012382:	e8 2f 88 ff ff       	call   c000abb6 <File::open(FileOpenMode)>
c0012387:	83 c4 10             	add    esp,0x10
c001238a:	85 c0                	test   eax,eax
c001238c:	74 0a                	je     c0012398 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001238e:	83 ec 0c             	sub    esp,0xc
c0012391:	68 36 ea 01 c0       	push   0xc001ea36
c0012396:	eb 34                	jmp    c00123cc <Thr::loadKernelSymbolTable(char const*)+0x76>
c0012398:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00123a0:	83 ec 0c             	sub    esp,0xc
c00123a3:	6a 34                	push   0x34
c00123a5:	e8 0f 54 ff ff       	call   c00077b9 <malloc>
c00123aa:	59                   	pop    ecx
c00123ab:	89 c7                	mov    edi,eax
c00123ad:	8d 74 24 34          	lea    esi,[esp+0x34]
c00123b1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00123b3:	56                   	push   esi
c00123b4:	57                   	push   edi
c00123b5:	6a 00                	push   0x0
c00123b7:	6a 34                	push   0x34
c00123b9:	53                   	push   ebx
c00123ba:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00123bd:	83 c4 20             	add    esp,0x20
c00123c0:	85 c0                	test   eax,eax
c00123c2:	74 17                	je     c00123db <Thr::loadKernelSymbolTable(char const*)+0x85>
c00123c4:	83 ec 0c             	sub    esp,0xc
c00123c7:	68 4d ea 01 c0       	push   0xc001ea4d
c00123cc:	e8 32 de ff ff       	call   c0010203 <KePanic(char const*)>
c00123d1:	83 c4 10             	add    esp,0x10
c00123d4:	31 c0                	xor    eax,eax
c00123d6:	e9 31 02 00 00       	jmp    c001260c <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c00123db:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00123e1:	75 e1                	jne    c00123c4 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00123e3:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00123e6:	85 c0                	test   eax,eax
c00123e8:	74 da                	je     c00123c4 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00123ea:	52                   	push   edx
c00123eb:	31 d2                	xor    edx,edx
c00123ed:	52                   	push   edx
c00123ee:	50                   	push   eax
c00123ef:	53                   	push   ebx
c00123f0:	e8 7f 88 ff ff       	call   c000ac74 <File::seek(unsigned long long)>
c00123f5:	83 c4 10             	add    esp,0x10
c00123f8:	85 c0                	test   eax,eax
c00123fa:	75 c8                	jne    c00123c4 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00123fc:	83 ec 0c             	sub    esp,0xc
c00123ff:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012403:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012407:	31 ed                	xor    ebp,ebp
c0012409:	0f af c2             	imul   eax,edx
c001240c:	50                   	push   eax
c001240d:	e8 a7 53 ff ff       	call   c00077b9 <malloc>
c0012412:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012414:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012418:	89 34 24             	mov    DWORD PTR [esp],esi
c001241b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001241f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012423:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012427:	0f af c2             	imul   eax,edx
c001242a:	99                   	cdq    
c001242b:	52                   	push   edx
c001242c:	50                   	push   eax
c001242d:	53                   	push   ebx
c001242e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012431:	83 c4 20             	add    esp,0x20
c0012434:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001243c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012444:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001244c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012454:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0012458:	0f 86 aa 00 00 00    	jbe    c0012508 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001245e:	0f b7 f5             	movzx  esi,bp
c0012461:	6b f6 28             	imul   esi,esi,0x28
c0012464:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0012468:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001246b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001246f:	50                   	push   eax
c0012470:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012474:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0012478:	8b 16                	mov    edx,DWORD PTR [esi]
c001247a:	6b c0 28             	imul   eax,eax,0x28
c001247d:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0012481:	89 d0                	mov    eax,edx
c0012483:	31 d2                	xor    edx,edx
c0012485:	52                   	push   edx
c0012486:	50                   	push   eax
c0012487:	53                   	push   ebx
c0012488:	e8 e7 87 ff ff       	call   c000ac74 <File::seek(unsigned long long)>
c001248d:	83 c4 0c             	add    esp,0xc
c0012490:	6a 20                	push   0x20
c0012492:	6a 00                	push   0x0
c0012494:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0012498:	52                   	push   edx
c0012499:	e8 32 e0 fe ff       	call   c00004d0 <memset>
c001249e:	58                   	pop    eax
c001249f:	8b 03                	mov    eax,DWORD PTR [ebx]
c00124a1:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00124a5:	51                   	push   ecx
c00124a6:	8d 54 24 40          	lea    edx,[esp+0x40]
c00124aa:	52                   	push   edx
c00124ab:	6a 00                	push   0x0
c00124ad:	6a 1f                	push   0x1f
c00124af:	53                   	push   ebx
c00124b0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00124b3:	83 c4 18             	add    esp,0x18
c00124b6:	68 64 ea 01 c0       	push   0xc001ea64
c00124bb:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00124bf:	52                   	push   edx
c00124c0:	e8 1b e2 fe ff       	call   c00006e0 <strcmp>
c00124c5:	83 c4 10             	add    esp,0x10
c00124c8:	85 c0                	test   eax,eax
c00124ca:	75 0f                	jne    c00124db <Thr::loadKernelSymbolTable(char const*)+0x185>
c00124cc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00124cf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00124d3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00124d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00124db:	50                   	push   eax
c00124dc:	50                   	push   eax
c00124dd:	68 6c ea 01 c0       	push   0xc001ea6c
c00124e2:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00124e6:	50                   	push   eax
c00124e7:	e8 f4 e1 fe ff       	call   c00006e0 <strcmp>
c00124ec:	83 c4 10             	add    esp,0x10
c00124ef:	85 c0                	test   eax,eax
c00124f1:	75 0f                	jne    c0012502 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00124f3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00124f6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00124fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00124fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012502:	45                   	inc    ebp
c0012503:	e9 4c ff ff ff       	jmp    c0012454 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0012508:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001250d:	75 10                	jne    c001251f <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001250f:	83 ec 0c             	sub    esp,0xc
c0012512:	68 74 ea 01 c0       	push   0xc001ea74
c0012517:	e8 e7 dc ff ff       	call   c0010203 <KePanic(char const*)>
c001251c:	83 c4 10             	add    esp,0x10
c001251f:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0012524:	75 10                	jne    c0012536 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0012526:	83 ec 0c             	sub    esp,0xc
c0012529:	68 74 ea 01 c0       	push   0xc001ea74
c001252e:	e8 d0 dc ff ff       	call   c0010203 <KePanic(char const*)>
c0012533:	83 c4 10             	add    esp,0x10
c0012536:	31 d2                	xor    edx,edx
c0012538:	50                   	push   eax
c0012539:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001253d:	52                   	push   edx
c001253e:	50                   	push   eax
c001253f:	53                   	push   ebx
c0012540:	e8 2f 87 ff ff       	call   c000ac74 <File::seek(unsigned long long)>
c0012545:	5a                   	pop    edx
c0012546:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001254a:	e8 6a 52 ff ff       	call   c00077b9 <malloc>
c001254f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012553:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012557:	31 c9                	xor    ecx,ecx
c0012559:	5e                   	pop    esi
c001255a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001255c:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0012560:	55                   	push   ebp
c0012561:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012565:	51                   	push   ecx
c0012566:	52                   	push   edx
c0012567:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001256b:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001256f:	53                   	push   ebx
c0012570:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012573:	83 c4 14             	add    esp,0x14
c0012576:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001257a:	e8 3a 52 ff ff       	call   c00077b9 <malloc>
c001257f:	89 c6                	mov    esi,eax
c0012581:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012583:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012586:	56                   	push   esi
c0012587:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001258b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001258f:	51                   	push   ecx
c0012590:	52                   	push   edx
c0012591:	53                   	push   ebx
c0012592:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012595:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012599:	8b 15 40 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025140
c001259f:	83 c4 1c             	add    esp,0x1c
c00125a2:	c1 e8 04             	shr    eax,0x4
c00125a5:	89 04 95 c0 4f 02 c0 	mov    DWORD PTR [edx*4-0x3ffdb040],eax
c00125ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00125b0:	31 d2                	xor    edx,edx
c00125b2:	52                   	push   edx
c00125b3:	50                   	push   eax
c00125b4:	53                   	push   ebx
c00125b5:	e8 ba 86 ff ff       	call   c000ac74 <File::seek(unsigned long long)>
c00125ba:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00125bc:	31 d2                	xor    edx,edx
c00125be:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00125c1:	56                   	push   esi
c00125c2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00125c6:	52                   	push   edx
c00125c7:	50                   	push   eax
c00125c8:	53                   	push   ebx
c00125c9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00125cc:	83 c4 14             	add    esp,0x14
c00125cf:	53                   	push   ebx
c00125d0:	e8 3f 86 ff ff       	call   c000ac14 <File::close()>
c00125d5:	5d                   	pop    ebp
c00125d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00125da:	e8 ea 51 ff ff       	call   c00077c9 <free>
c00125df:	89 3c 24             	mov    DWORD PTR [esp],edi
c00125e2:	e8 e2 51 ff ff       	call   c00077c9 <free>
c00125e7:	a1 40 51 02 c0       	mov    eax,ds:0xc0025140
c00125ec:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00125f0:	8d 50 01             	lea    edx,[eax+0x1]
c00125f3:	89 0c 85 c0 50 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaf40],ecx
c00125fa:	89 34 85 40 50 02 c0 	mov    DWORD PTR [eax*4-0x3ffdafc0],esi
c0012601:	89 15 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,edx
c0012607:	83 c4 10             	add    esp,0x10
c001260a:	b0 01                	mov    al,0x1
c001260c:	83 c4 5c             	add    esp,0x5c
c001260f:	5b                   	pop    ebx
c0012610:	5e                   	pop    esi
c0012611:	5f                   	pop    edi
c0012612:	5d                   	pop    ebp
c0012613:	c3                   	ret    

c0012614 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0012614:	55                   	push   ebp
c0012615:	57                   	push   edi
c0012616:	56                   	push   esi
c0012617:	53                   	push   ebx
c0012618:	81 ec 68 03 00 00    	sub    esp,0x368
c001261e:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0012625:	8b 1d 90 51 02 c0    	mov    ebx,DWORD PTR ds:0xc0025190
c001262b:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001262f:	68 14 01 00 00       	push   0x114
c0012634:	e8 80 51 ff ff       	call   c00077b9 <malloc>
c0012639:	83 c4 0c             	add    esp,0xc
c001263c:	89 c5                	mov    ebp,eax
c001263e:	53                   	push   ebx
c001263f:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0012646:	50                   	push   eax
c0012647:	e8 aa 84 ff ff       	call   c000aaf6 <File::File(char const*, Process*)>
c001264c:	5e                   	pop    esi
c001264d:	5f                   	pop    edi
c001264e:	6a 01                	push   0x1
c0012650:	55                   	push   ebp
c0012651:	e8 60 85 ff ff       	call   c000abb6 <File::open(FileOpenMode)>
c0012656:	83 c4 10             	add    esp,0x10
c0012659:	85 c0                	test   eax,eax
c001265b:	0f 85 a7 06 00 00    	jne    c0012d08 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012661:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0012669:	83 ec 0c             	sub    esp,0xc
c001266c:	6a 34                	push   0x34
c001266e:	e8 46 51 ff ff       	call   c00077b9 <malloc>
c0012673:	5b                   	pop    ebx
c0012674:	89 c7                	mov    edi,eax
c0012676:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001267a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001267d:	53                   	push   ebx
c001267e:	57                   	push   edi
c001267f:	6a 00                	push   0x0
c0012681:	6a 34                	push   0x34
c0012683:	55                   	push   ebp
c0012684:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012687:	83 c4 20             	add    esp,0x20
c001268a:	85 c0                	test   eax,eax
c001268c:	0f 85 76 06 00 00    	jne    c0012d08 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012692:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0012698:	0f 85 6a 06 00 00    	jne    c0012d08 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001269e:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00126a1:	85 c0                	test   eax,eax
c00126a3:	0f 84 5f 06 00 00    	je     c0012d08 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00126a9:	31 d2                	xor    edx,edx
c00126ab:	51                   	push   ecx
c00126ac:	52                   	push   edx
c00126ad:	50                   	push   eax
c00126ae:	55                   	push   ebp
c00126af:	e8 c0 85 ff ff       	call   c000ac74 <File::seek(unsigned long long)>
c00126b4:	83 c4 10             	add    esp,0x10
c00126b7:	85 c0                	test   eax,eax
c00126b9:	0f 85 49 06 00 00    	jne    c0012d08 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00126bf:	83 ec 0c             	sub    esp,0xc
c00126c2:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c00126c5:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00126c9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00126cd:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00126d1:	0f af c2             	imul   eax,edx
c00126d4:	50                   	push   eax
c00126d5:	e8 df 50 ff ff       	call   c00077b9 <malloc>
c00126da:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00126dd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00126e1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00126e4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00126e8:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00126ec:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00126f0:	0f af c2             	imul   eax,edx
c00126f3:	99                   	cdq    
c00126f4:	52                   	push   edx
c00126f5:	50                   	push   eax
c00126f6:	55                   	push   ebp
c00126f7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00126fa:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c00126fd:	83 c4 20             	add    esp,0x20
c0012700:	85 c0                	test   eax,eax
c0012702:	0f 84 00 06 00 00    	je     c0012d08 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012708:	52                   	push   edx
c0012709:	31 d2                	xor    edx,edx
c001270b:	52                   	push   edx
c001270c:	50                   	push   eax
c001270d:	55                   	push   ebp
c001270e:	e8 61 85 ff ff       	call   c000ac74 <File::seek(unsigned long long)>
c0012713:	83 c4 10             	add    esp,0x10
c0012716:	85 c0                	test   eax,eax
c0012718:	0f 85 ea 05 00 00    	jne    c0012d08 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001271e:	83 ec 0c             	sub    esp,0xc
c0012721:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0012725:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0012729:	31 f6                	xor    esi,esi
c001272b:	0f af c2             	imul   eax,edx
c001272e:	50                   	push   eax
c001272f:	e8 85 50 ff ff       	call   c00077b9 <malloc>
c0012734:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012737:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001273b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001273e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012742:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0012746:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001274a:	0f af c2             	imul   eax,edx
c001274d:	99                   	cdq    
c001274e:	52                   	push   edx
c001274f:	50                   	push   eax
c0012750:	55                   	push   ebp
c0012751:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012754:	83 c4 20             	add    esp,0x20
c0012757:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001275b:	0f 86 8a 00 00 00    	jbe    c00127eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0012761:	0f b7 de             	movzx  ebx,si
c0012764:	c1 e3 05             	shl    ebx,0x5
c0012767:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001276b:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001276e:	75 75                	jne    c00127e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0012770:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012773:	31 d2                	xor    edx,edx
c0012775:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012779:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001277c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012780:	50                   	push   eax
c0012781:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0012784:	52                   	push   edx
c0012785:	50                   	push   eax
c0012786:	55                   	push   ebp
c0012787:	e8 e8 84 ff ff       	call   c000ac74 <File::seek(unsigned long long)>
c001278c:	83 c4 10             	add    esp,0x10
c001278f:	85 c0                	test   eax,eax
c0012791:	0f 85 71 05 00 00    	jne    c0012d08 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012797:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001279e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00127a1:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00127a5:	31 d2                	xor    edx,edx
c00127a7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00127ab:	83 ec 0c             	sub    esp,0xc
c00127ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00127b2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00127b9:	50                   	push   eax
c00127ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00127be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00127c2:	52                   	push   edx
c00127c3:	50                   	push   eax
c00127c4:	55                   	push   ebp
c00127c5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00127c8:	83 c4 1c             	add    esp,0x1c
c00127cb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00127ce:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c00127d1:	50                   	push   eax
c00127d2:	6a 00                	push   0x0
c00127d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127d8:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00127dc:	50                   	push   eax
c00127dd:	e8 ee dc fe ff       	call   c00004d0 <memset>
c00127e2:	83 c4 10             	add    esp,0x10
c00127e5:	46                   	inc    esi
c00127e6:	e9 6c ff ff ff       	jmp    c0012757 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c00127eb:	53                   	push   ebx
c00127ec:	31 db                	xor    ebx,ebx
c00127ee:	68 00 01 00 00       	push   0x100
c00127f3:	6a 00                	push   0x0
c00127f5:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00127f9:	50                   	push   eax
c00127fa:	e8 d1 dc fe ff       	call   c00004d0 <memset>
c00127ff:	83 c4 0c             	add    esp,0xc
c0012802:	68 00 01 00 00       	push   0x100
c0012807:	6a 00                	push   0x0
c0012809:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0012810:	50                   	push   eax
c0012811:	e8 ba dc fe ff       	call   c00004d0 <memset>
c0012816:	83 c4 10             	add    esp,0x10
c0012819:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0012821:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012829:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0012831:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012839:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012841:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0012845:	0f 86 30 01 00 00    	jbe    c001297b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001284b:	0f b7 f3             	movzx  esi,bx
c001284e:	6b f6 28             	imul   esi,esi,0x28
c0012851:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0012855:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0012858:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001285c:	52                   	push   edx
c001285d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012861:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0012865:	8b 06                	mov    eax,DWORD PTR [esi]
c0012867:	6b d2 28             	imul   edx,edx,0x28
c001286a:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001286e:	31 d2                	xor    edx,edx
c0012870:	52                   	push   edx
c0012871:	50                   	push   eax
c0012872:	55                   	push   ebp
c0012873:	e8 fc 83 ff ff       	call   c000ac74 <File::seek(unsigned long long)>
c0012878:	83 c4 0c             	add    esp,0xc
c001287b:	6a 20                	push   0x20
c001287d:	6a 00                	push   0x0
c001287f:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0012886:	51                   	push   ecx
c0012887:	e8 44 dc fe ff       	call   c00004d0 <memset>
c001288c:	59                   	pop    ecx
c001288d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012890:	8d 54 24 58          	lea    edx,[esp+0x58]
c0012894:	52                   	push   edx
c0012895:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001289c:	51                   	push   ecx
c001289d:	6a 00                	push   0x0
c001289f:	6a 1f                	push   0x1f
c00128a1:	55                   	push   ebp
c00128a2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00128a5:	83 c4 1c             	add    esp,0x1c
c00128a8:	6a 09                	push   0x9
c00128aa:	68 8e ea 01 c0       	push   0xc001ea8e
c00128af:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00128b6:	51                   	push   ecx
c00128b7:	e8 d4 da fe ff       	call   c0000390 <memcmp>
c00128bc:	83 c4 10             	add    esp,0x10
c00128bf:	85 c0                	test   eax,eax
c00128c1:	75 21                	jne    c00128e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c00128c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00128cb:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00128cf:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00128d3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00128d6:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00128dd:	89 d0                	mov    eax,edx
c00128df:	40                   	inc    eax
c00128e0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00128e4:	50                   	push   eax
c00128e5:	6a 09                	push   0x9
c00128e7:	68 98 ea 01 c0       	push   0xc001ea98
c00128ec:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00128f3:	50                   	push   eax
c00128f4:	e8 97 da fe ff       	call   c0000390 <memcmp>
c00128f9:	83 c4 10             	add    esp,0x10
c00128fc:	85 c0                	test   eax,eax
c00128fe:	75 21                	jne    c0012921 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0012900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012904:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012908:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001290c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012910:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012913:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001291a:	89 d0                	mov    eax,edx
c001291c:	40                   	inc    eax
c001291d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012921:	50                   	push   eax
c0012922:	50                   	push   eax
c0012923:	68 64 ea 01 c0       	push   0xc001ea64
c0012928:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001292f:	50                   	push   eax
c0012930:	e8 ab dd fe ff       	call   c00006e0 <strcmp>
c0012935:	83 c4 10             	add    esp,0x10
c0012938:	85 c0                	test   eax,eax
c001293a:	75 0f                	jne    c001294b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001293c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001293f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012943:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012947:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001294b:	50                   	push   eax
c001294c:	50                   	push   eax
c001294d:	68 6c ea 01 c0       	push   0xc001ea6c
c0012952:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012959:	50                   	push   eax
c001295a:	e8 81 dd fe ff       	call   c00006e0 <strcmp>
c001295f:	83 c4 10             	add    esp,0x10
c0012962:	85 c0                	test   eax,eax
c0012964:	75 0f                	jne    c0012975 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0012966:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012969:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001296d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012971:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0012975:	43                   	inc    ebx
c0012976:	e9 c6 fe ff ff       	jmp    c0012841 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001297b:	31 d2                	xor    edx,edx
c001297d:	50                   	push   eax
c001297e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012982:	52                   	push   edx
c0012983:	50                   	push   eax
c0012984:	55                   	push   ebp
c0012985:	e8 ea 82 ff ff       	call   c000ac74 <File::seek(unsigned long long)>
c001298a:	58                   	pop    eax
c001298b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001298f:	e8 25 4e ff ff       	call   c00077b9 <malloc>
c0012994:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012997:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001299b:	31 d2                	xor    edx,edx
c001299d:	58                   	pop    eax
c001299e:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00129a2:	53                   	push   ebx
c00129a3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00129a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00129ab:	52                   	push   edx
c00129ac:	50                   	push   eax
c00129ad:	55                   	push   ebp
c00129ae:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00129b1:	83 c4 14             	add    esp,0x14
c00129b4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00129b8:	e8 fc 4d ff ff       	call   c00077b9 <malloc>
c00129bd:	31 d2                	xor    edx,edx
c00129bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00129c3:	83 c4 0c             	add    esp,0xc
c00129c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00129ca:	52                   	push   edx
c00129cb:	50                   	push   eax
c00129cc:	55                   	push   ebp
c00129cd:	e8 a2 82 ff ff       	call   c000ac74 <File::seek(unsigned long long)>
c00129d2:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00129d5:	31 d2                	xor    edx,edx
c00129d7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00129da:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00129de:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00129e2:	52                   	push   edx
c00129e3:	50                   	push   eax
c00129e4:	55                   	push   ebp
c00129e5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00129e8:	83 c4 20             	add    esp,0x20
c00129eb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00129f3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00129f7:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c00129fb:	0f 84 0b 03 00 00    	je     c0012d0c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0012a01:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0012a08:	31 d2                	xor    edx,edx
c0012a0a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012a0e:	c1 e8 03             	shr    eax,0x3
c0012a11:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0012a15:	51                   	push   ecx
c0012a16:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012a1a:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0012a1e:	52                   	push   edx
c0012a1f:	50                   	push   eax
c0012a20:	55                   	push   ebp
c0012a21:	e8 4e 82 ff ff       	call   c000ac74 <File::seek(unsigned long long)>
c0012a26:	5b                   	pop    ebx
c0012a27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012a2b:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0012a32:	e8 82 4d ff ff       	call   c00077b9 <malloc>
c0012a37:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012a3a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012a3e:	31 d2                	xor    edx,edx
c0012a40:	5e                   	pop    esi
c0012a41:	8d 44 24 58          	lea    eax,[esp+0x58]
c0012a45:	50                   	push   eax
c0012a46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a4a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012a4e:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0012a55:	52                   	push   edx
c0012a56:	50                   	push   eax
c0012a57:	55                   	push   ebp
c0012a58:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012a5b:	83 c4 20             	add    esp,0x20
c0012a5e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012a66:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012a6a:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0012a6e:	0f 8d 7c 02 00 00    	jge    c0012cf0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0012a74:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012a78:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012a7c:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0012a81:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0012a84:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012a88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012a8c:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0012a90:	89 d8                	mov    eax,ebx
c0012a92:	c1 e8 08             	shr    eax,0x8
c0012a95:	89 c6                	mov    esi,eax
c0012a97:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012a9b:	c1 e6 04             	shl    esi,0x4
c0012a9e:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0012aa2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0012aa5:	85 d2                	test   edx,edx
c0012aa7:	0f 85 bf 00 00 00    	jne    c0012b6c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012aad:	83 ec 0c             	sub    esp,0xc
c0012ab0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012ab4:	03 06                	add    eax,DWORD PTR [esi]
c0012ab6:	50                   	push   eax
c0012ab7:	e8 4b f8 ff ff       	call   c0012307 <Thr::getAddressOfKernelSymbol(char const*)>
c0012abc:	83 c4 10             	add    esp,0x10
c0012abf:	89 c2                	mov    edx,eax
c0012ac1:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0012ac6:	85 c0                	test   eax,eax
c0012ac8:	0f 85 9e 00 00 00    	jne    c0012b6c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012ace:	83 ec 0c             	sub    esp,0xc
c0012ad1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012ad5:	03 06                	add    eax,DWORD PTR [esi]
c0012ad7:	50                   	push   eax
c0012ad8:	e8 77 d8 ff ff       	call   c0010354 <KeResolveCompatibilitySymbol(char*)>
c0012add:	83 c4 10             	add    esp,0x10
c0012ae0:	89 c2                	mov    edx,eax
c0012ae2:	85 c0                	test   eax,eax
c0012ae4:	0f 85 82 00 00 00    	jne    c0012b6c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012aea:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0012aee:	50                   	push   eax
c0012aef:	50                   	push   eax
c0012af0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012af4:	03 06                	add    eax,DWORD PTR [esi]
c0012af6:	50                   	push   eax
c0012af7:	68 a2 ea 01 c0       	push   0xc001eaa2
c0012afc:	e8 80 7a ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c0012b01:	58                   	pop    eax
c0012b02:	5a                   	pop    edx
c0012b03:	68 bc ea 01 c0       	push   0xc001eabc
c0012b08:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012b0f:	50                   	push   eax
c0012b10:	e8 eb da fe ff       	call   c0000600 <strcpy>
c0012b15:	59                   	pop    ecx
c0012b16:	58                   	pop    eax
c0012b17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012b1b:	03 06                	add    eax,DWORD PTR [esi]
c0012b1d:	50                   	push   eax
c0012b1e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012b25:	50                   	push   eax
c0012b26:	e8 95 dc fe ff       	call   c00007c0 <strcat>
c0012b2b:	58                   	pop    eax
c0012b2c:	5a                   	pop    edx
c0012b2d:	68 52 eb 01 c0       	push   0xc001eb52
c0012b32:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012b39:	50                   	push   eax
c0012b3a:	e8 81 dc fe ff       	call   c00007c0 <strcat>
c0012b3f:	83 c4 10             	add    esp,0x10
c0012b42:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012b47:	0f 84 5d 01 00 00    	je     c0012caa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012b4d:	83 ec 0c             	sub    esp,0xc
c0012b50:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012b57:	50                   	push   eax
c0012b58:	e8 a6 d6 ff ff       	call   c0010203 <KePanic(char const*)>
c0012b5d:	83 c4 10             	add    esp,0x10
c0012b60:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012b64:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012b68:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0012b6c:	80 fb 01             	cmp    bl,0x1
c0012b6f:	0f 85 88 00 00 00    	jne    c0012bfd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0012b75:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0012b7c:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0012b80:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0012b84:	01 ce                	add    esi,ecx
c0012b86:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012b8c:	0f 94 c0             	sete   al
c0012b8f:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012b95:	0f 94 c3             	sete   bl
c0012b98:	09 c3                	or     ebx,eax
c0012b9a:	8b 06                	mov    eax,DWORD PTR [esi]
c0012b9c:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012ba1:	74 41                	je     c0012be4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0012ba3:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012ba6:	84 db                	test   bl,bl
c0012ba8:	75 15                	jne    c0012bbf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0012baa:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012bae:	66 83 f8 0c          	cmp    ax,0xc
c0012bb2:	76 05                	jbe    c0012bb9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0012bb4:	b8 0c 00 00 00       	mov    eax,0xc
c0012bb9:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012bbd:	76 37                	jbe    c0012bf6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012bbf:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0012bc3:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012bc8:	0f 84 dc 00 00 00    	je     c0012caa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012bce:	83 ec 0c             	sub    esp,0xc
c0012bd1:	68 d3 ea 01 c0       	push   0xc001ead3
c0012bd6:	e8 28 d6 ff ff       	call   c0010203 <KePanic(char const*)>
c0012bdb:	83 c4 10             	add    esp,0x10
c0012bde:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012be2:	eb 12                	jmp    c0012bf6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012be4:	01 c1                	add    ecx,eax
c0012be6:	84 db                	test   bl,bl
c0012be8:	75 0c                	jne    c0012bf6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012bea:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012bee:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012bf2:	77 02                	ja     c0012bf6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012bf4:	01 d1                	add    ecx,edx
c0012bf6:	89 0e                	mov    DWORD PTR [esi],ecx
c0012bf8:	e9 ea 00 00 00       	jmp    c0012ce7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012bfd:	80 fb 02             	cmp    bl,0x2
c0012c00:	75 7c                	jne    c0012c7e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0012c02:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0012c09:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0012c0d:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0012c11:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012c17:	74 20                	je     c0012c39 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012c19:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012c1f:	74 18                	je     c0012c39 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012c21:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012c25:	b9 0a 00 00 00       	mov    ecx,0xa
c0012c2a:	66 83 f8 0e          	cmp    ax,0xe
c0012c2e:	77 03                	ja     c0012c33 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0012c30:	8d 48 fc             	lea    ecx,[eax-0x4]
c0012c33:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0012c37:	76 1f                	jbe    c0012c58 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0012c39:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0012c3d:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012c42:	74 66                	je     c0012caa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012c44:	83 ec 0c             	sub    esp,0xc
c0012c47:	68 ef ea 01 c0       	push   0xc001eaef
c0012c4c:	e8 b2 d5 ff ff       	call   c0010203 <KePanic(char const*)>
c0012c51:	83 c4 10             	add    esp,0x10
c0012c54:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012c58:	8b 06                	mov    eax,DWORD PTR [esi]
c0012c5a:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012c5f:	74 13                	je     c0012c74 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0012c61:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012c65:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0012c6c:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0012c70:	01 c8                	add    eax,ecx
c0012c72:	eb 04                	jmp    c0012c78 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0012c74:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0012c78:	01 c2                	add    edx,eax
c0012c7a:	89 16                	mov    DWORD PTR [esi],edx
c0012c7c:	eb 69                	jmp    c0012ce7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012c7e:	0f b6 db             	movzx  ebx,bl
c0012c81:	50                   	push   eax
c0012c82:	50                   	push   eax
c0012c83:	53                   	push   ebx
c0012c84:	68 0b eb 01 c0       	push   0xc001eb0b
c0012c89:	e8 f3 78 ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c0012c8e:	83 c4 10             	add    esp,0x10
c0012c91:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012c96:	74 12                	je     c0012caa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012c98:	83 ec 0c             	sub    esp,0xc
c0012c9b:	68 16 eb 01 c0       	push   0xc001eb16
c0012ca0:	e8 5e d5 ff ff       	call   c0010203 <KePanic(char const*)>
c0012ca5:	83 c4 10             	add    esp,0x10
c0012ca8:	eb 3d                	jmp    c0012ce7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012caa:	83 ec 0c             	sub    esp,0xc
c0012cad:	55                   	push   ebp
c0012cae:	e8 61 7f ff ff       	call   c000ac14 <File::close()>
c0012cb3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012cb6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012cb9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012cbc:	59                   	pop    ecx
c0012cbd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012cc1:	e8 03 4b ff ff       	call   c00077c9 <free>
c0012cc6:	5b                   	pop    ebx
c0012cc7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012ccb:	e8 f9 4a ff ff       	call   c00077c9 <free>
c0012cd0:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012cd3:	e8 f1 4a ff ff       	call   c00077c9 <free>
c0012cd8:	5e                   	pop    esi
c0012cd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cdd:	e8 e7 4a ff ff       	call   c00077c9 <free>
c0012ce2:	83 c4 10             	add    esp,0x10
c0012ce5:	eb 21                	jmp    c0012d08 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012ce7:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0012ceb:	e9 76 fd ff ff       	jmp    c0012a66 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0012cf0:	83 ec 0c             	sub    esp,0xc
c0012cf3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012cf7:	e8 cd 4a ff ff       	call   c00077c9 <free>
c0012cfc:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0012d00:	83 c4 10             	add    esp,0x10
c0012d03:	e9 eb fc ff ff       	jmp    c00129f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0012d08:	31 c0                	xor    eax,eax
c0012d0a:	eb 33                	jmp    c0012d3f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0012d0c:	83 ec 0c             	sub    esp,0xc
c0012d0f:	55                   	push   ebp
c0012d10:	e8 ff 7e ff ff       	call   c000ac14 <File::close()>
c0012d15:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d18:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012d1b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012d1e:	58                   	pop    eax
c0012d1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012d23:	e8 a1 4a ff ff       	call   c00077c9 <free>
c0012d28:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012d2b:	e8 99 4a ff ff       	call   c00077c9 <free>
c0012d30:	5a                   	pop    edx
c0012d31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d35:	e8 8f 4a ff ff       	call   c00077c9 <free>
c0012d3a:	83 c4 10             	add    esp,0x10
c0012d3d:	b0 01                	mov    al,0x1
c0012d3f:	81 c4 5c 03 00 00    	add    esp,0x35c
c0012d45:	5b                   	pop    ebx
c0012d46:	5e                   	pop    esi
c0012d47:	5f                   	pop    edi
c0012d48:	5d                   	pop    ebp
c0012d49:	c3                   	ret    

c0012d4a <Thr::getDriverBaseFromAddress(unsigned long)>:
c0012d4a:	56                   	push   esi
c0012d4b:	31 d2                	xor    edx,edx
c0012d4d:	53                   	push   ebx
c0012d4e:	8b 1d a0 49 02 c0    	mov    ebx,DWORD PTR ds:0xc00249a0
c0012d54:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012d58:	39 d3                	cmp    ebx,edx
c0012d5a:	7e 1b                	jle    c0012d77 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0012d5c:	8b 04 95 c0 4b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb440]
c0012d63:	39 c8                	cmp    eax,ecx
c0012d65:	77 0d                	ja     c0012d74 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0012d67:	8b 34 95 c0 49 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdb640]
c0012d6e:	01 c6                	add    esi,eax
c0012d70:	39 ce                	cmp    esi,ecx
c0012d72:	77 05                	ja     c0012d79 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0012d74:	42                   	inc    edx
c0012d75:	eb e1                	jmp    c0012d58 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0012d77:	31 c0                	xor    eax,eax
c0012d79:	5b                   	pop    ebx
c0012d7a:	5e                   	pop    esi
c0012d7b:	c3                   	ret    

c0012d7c <Thr::getDriverNameFromAddress(unsigned long)>:
c0012d7c:	53                   	push   ebx
c0012d7d:	31 c0                	xor    eax,eax
c0012d7f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012d83:	8b 1d a0 49 02 c0    	mov    ebx,DWORD PTR ds:0xc00249a0
c0012d89:	39 c3                	cmp    ebx,eax
c0012d8b:	7e 22                	jle    c0012daf <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0012d8d:	8b 14 85 c0 4b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb440]
c0012d94:	39 ca                	cmp    edx,ecx
c0012d96:	77 14                	ja     c0012dac <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012d98:	03 14 85 c0 49 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdb640]
c0012d9f:	39 ca                	cmp    edx,ecx
c0012da1:	76 09                	jbe    c0012dac <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012da3:	8b 04 85 c0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb240]
c0012daa:	eb 05                	jmp    c0012db1 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0012dac:	40                   	inc    eax
c0012dad:	eb da                	jmp    c0012d89 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0012daf:	31 c0                	xor    eax,eax
c0012db1:	5b                   	pop    ebx
c0012db2:	c3                   	ret    

c0012db3 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0012db3:	53                   	push   ebx
c0012db4:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012db8:	53                   	push   ebx
c0012db9:	e8 8c ff ff ff       	call   c0012d4a <Thr::getDriverBaseFromAddress(unsigned long)>
c0012dbe:	5a                   	pop    edx
c0012dbf:	31 d2                	xor    edx,edx
c0012dc1:	85 c0                	test   eax,eax
c0012dc3:	74 04                	je     c0012dc9 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0012dc5:	89 da                	mov    edx,ebx
c0012dc7:	29 c2                	sub    edx,eax
c0012dc9:	89 d0                	mov    eax,edx
c0012dcb:	5b                   	pop    ebx
c0012dcc:	c3                   	ret    

c0012dcd <Thr::loadDLL(char const*, bool)>:
c0012dcd:	55                   	push   ebp
c0012dce:	57                   	push   edi
c0012dcf:	56                   	push   esi
c0012dd0:	53                   	push   ebx
c0012dd1:	81 ec 34 01 00 00    	sub    esp,0x134
c0012dd7:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0012dde:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0012de5:	56                   	push   esi
c0012de6:	68 2e eb 01 c0       	push   0xc001eb2e
c0012deb:	e8 91 77 ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c0012df0:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012df7:	e8 bd 49 ff ff       	call   c00077b9 <malloc>
c0012dfc:	83 c4 0c             	add    esp,0xc
c0012dff:	89 c3                	mov    ebx,eax
c0012e01:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c0012e07:	56                   	push   esi
c0012e08:	50                   	push   eax
c0012e09:	e8 e8 7c ff ff       	call   c000aaf6 <File::File(char const*, Process*)>
c0012e0e:	83 c4 10             	add    esp,0x10
c0012e11:	85 db                	test   ebx,ebx
c0012e13:	75 3c                	jne    c0012e51 <Thr::loadDLL(char const*, bool)+0x84>
c0012e15:	89 f8                	mov    eax,edi
c0012e17:	84 c0                	test   al,al
c0012e19:	0f 84 d2 01 00 00    	je     c0012ff1 <Thr::loadDLL(char const*, bool)+0x224>
c0012e1f:	55                   	push   ebp
c0012e20:	55                   	push   ebp
c0012e21:	68 3f eb 01 c0       	push   0xc001eb3f
c0012e26:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0012e2a:	55                   	push   ebp
c0012e2b:	e8 d0 d7 fe ff       	call   c0000600 <strcpy>
c0012e30:	58                   	pop    eax
c0012e31:	5a                   	pop    edx
c0012e32:	56                   	push   esi
c0012e33:	55                   	push   ebp
c0012e34:	e8 87 d9 fe ff       	call   c00007c0 <strcat>
c0012e39:	59                   	pop    ecx
c0012e3a:	58                   	pop    eax
c0012e3b:	68 52 eb 01 c0       	push   0xc001eb52
c0012e40:	55                   	push   ebp
c0012e41:	e8 7a d9 fe ff       	call   c00007c0 <strcat>
c0012e46:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012e49:	e8 b5 d3 ff ff       	call   c0010203 <KePanic(char const*)>
c0012e4e:	83 c4 10             	add    esp,0x10
c0012e51:	51                   	push   ecx
c0012e52:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0012e56:	50                   	push   eax
c0012e57:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012e5b:	50                   	push   eax
c0012e5c:	53                   	push   ebx
c0012e5d:	e8 00 80 ff ff       	call   c000ae62 <File::stat(unsigned long long*, bool*)>
c0012e62:	83 c4 10             	add    esp,0x10
c0012e65:	85 db                	test   ebx,ebx
c0012e67:	74 0c                	je     c0012e75 <Thr::loadDLL(char const*, bool)+0xa8>
c0012e69:	83 ec 0c             	sub    esp,0xc
c0012e6c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012e6e:	53                   	push   ebx
c0012e6f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012e72:	83 c4 10             	add    esp,0x10
c0012e75:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0012e7a:	75 0a                	jne    c0012e86 <Thr::loadDLL(char const*, bool)+0xb9>
c0012e7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012e80:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0012e84:	75 3c                	jne    c0012ec2 <Thr::loadDLL(char const*, bool)+0xf5>
c0012e86:	89 f8                	mov    eax,edi
c0012e88:	84 c0                	test   al,al
c0012e8a:	0f 84 49 01 00 00    	je     c0012fd9 <Thr::loadDLL(char const*, bool)+0x20c>
c0012e90:	51                   	push   ecx
c0012e91:	51                   	push   ecx
c0012e92:	68 3f eb 01 c0       	push   0xc001eb3f
c0012e97:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0012e9b:	53                   	push   ebx
c0012e9c:	e8 5f d7 fe ff       	call   c0000600 <strcpy>
c0012ea1:	5d                   	pop    ebp
c0012ea2:	58                   	pop    eax
c0012ea3:	56                   	push   esi
c0012ea4:	53                   	push   ebx
c0012ea5:	e8 16 d9 fe ff       	call   c00007c0 <strcat>
c0012eaa:	58                   	pop    eax
c0012eab:	5a                   	pop    edx
c0012eac:	68 52 eb 01 c0       	push   0xc001eb52
c0012eb1:	53                   	push   ebx
c0012eb2:	e8 09 d9 fe ff       	call   c00007c0 <strcat>
c0012eb7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012eba:	e8 44 d3 ff ff       	call   c0010203 <KePanic(char const*)>
c0012ebf:	83 c4 10             	add    esp,0x10
c0012ec2:	52                   	push   edx
c0012ec3:	6a 03                	push   0x3
c0012ec5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ec9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012ecd:	05 ff 0f 00 00       	add    eax,0xfff
c0012ed2:	83 d2 00             	adc    edx,0x0
c0012ed5:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012ed9:	50                   	push   eax
c0012eda:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0012ee0:	e8 17 6b ff ff       	call   c00099fc <VAS::allocatePages(int, int)>
c0012ee5:	59                   	pop    ecx
c0012ee6:	89 c3                	mov    ebx,eax
c0012ee8:	5d                   	pop    ebp
c0012ee9:	50                   	push   eax
c0012eea:	68 76 d7 01 c0       	push   0xc001d776
c0012eef:	e8 8d 76 ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c0012ef4:	89 34 24             	mov    DWORD PTR [esp],esi
c0012ef7:	e8 44 d6 fe ff       	call   c0000540 <strlen>
c0012efc:	8b 2d a0 49 02 c0    	mov    ebp,DWORD PTR ds:0xc00249a0
c0012f02:	40                   	inc    eax
c0012f03:	89 04 24             	mov    DWORD PTR [esp],eax
c0012f06:	e8 ae 48 ff ff       	call   c00077b9 <malloc>
c0012f0b:	89 04 ad c0 4d 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdb240],eax
c0012f12:	58                   	pop    eax
c0012f13:	a1 a0 49 02 c0       	mov    eax,ds:0xc00249a0
c0012f18:	5a                   	pop    edx
c0012f19:	56                   	push   esi
c0012f1a:	ff 34 85 c0 4d 02 c0 	push   DWORD PTR [eax*4-0x3ffdb240]
c0012f21:	e8 da d6 fe ff       	call   c0000600 <strcpy>
c0012f26:	a1 a0 49 02 c0       	mov    eax,ds:0xc00249a0
c0012f2b:	8d 50 01             	lea    edx,[eax+0x1]
c0012f2e:	89 1c 85 c0 4b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb440],ebx
c0012f35:	89 15 a0 49 02 c0    	mov    DWORD PTR ds:0xc00249a0,edx
c0012f3b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012f3f:	83 c4 0c             	add    esp,0xc
c0012f42:	89 14 85 c0 49 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb640],edx
c0012f49:	6a 01                	push   0x1
c0012f4b:	53                   	push   ebx
c0012f4c:	56                   	push   esi
c0012f4d:	e8 c2 f6 ff ff       	call   c0012614 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0012f52:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012f56:	83 c4 10             	add    esp,0x10
c0012f59:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012f5e:	0f 85 89 00 00 00    	jne    c0012fed <Thr::loadDLL(char const*, bool)+0x220>
c0012f64:	89 f8                	mov    eax,edi
c0012f66:	84 c0                	test   al,al
c0012f68:	74 73                	je     c0012fdd <Thr::loadDLL(char const*, bool)+0x210>
c0012f6a:	83 ec 0c             	sub    esp,0xc
c0012f6d:	68 54 eb 01 c0       	push   0xc001eb54
c0012f72:	e8 8c d2 ff ff       	call   c0010203 <KePanic(char const*)>
c0012f77:	83 c4 10             	add    esp,0x10
c0012f7a:	eb 61                	jmp    c0012fdd <Thr::loadDLL(char const*, bool)+0x210>
c0012f7c:	50                   	push   eax
c0012f7d:	50                   	push   eax
c0012f7e:	89 e8                	mov    eax,ebp
c0012f80:	c1 e0 0c             	shl    eax,0xc
c0012f83:	01 d8                	add    eax,ebx
c0012f85:	50                   	push   eax
c0012f86:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0012f8c:	e8 c9 65 ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c0012f91:	83 c4 10             	add    esp,0x10
c0012f94:	8b 00                	mov    eax,DWORD PTR [eax]
c0012f96:	a8 60                	test   al,0x60
c0012f98:	75 11                	jne    c0012fab <Thr::loadDLL(char const*, bool)+0x1de>
c0012f9a:	83 ec 0c             	sub    esp,0xc
c0012f9d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012fa2:	50                   	push   eax
c0012fa3:	e8 8b 4a ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0012fa8:	83 c4 10             	add    esp,0x10
c0012fab:	45                   	inc    ebp
c0012fac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012fb0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012fb4:	05 ff 0f 00 00       	add    eax,0xfff
c0012fb9:	bf 00 00 00 00       	mov    edi,0x0
c0012fbe:	83 d2 00             	adc    edx,0x0
c0012fc1:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012fc5:	c1 ea 0c             	shr    edx,0xc
c0012fc8:	39 c5                	cmp    ebp,eax
c0012fca:	89 d1                	mov    ecx,edx
c0012fcc:	89 f8                	mov    eax,edi
c0012fce:	19 c8                	sbb    eax,ecx
c0012fd0:	72 aa                	jb     c0012f7c <Thr::loadDLL(char const*, bool)+0x1af>
c0012fd2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012fd7:	75 18                	jne    c0012ff1 <Thr::loadDLL(char const*, bool)+0x224>
c0012fd9:	31 db                	xor    ebx,ebx
c0012fdb:	eb 14                	jmp    c0012ff1 <Thr::loadDLL(char const*, bool)+0x224>
c0012fdd:	83 ec 0c             	sub    esp,0xc
c0012fe0:	68 73 eb 01 c0       	push   0xc001eb73
c0012fe5:	e8 19 d2 ff ff       	call   c0010203 <KePanic(char const*)>
c0012fea:	83 c4 10             	add    esp,0x10
c0012fed:	31 ed                	xor    ebp,ebp
c0012fef:	eb bb                	jmp    c0012fac <Thr::loadDLL(char const*, bool)+0x1df>
c0012ff1:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012ff7:	89 d8                	mov    eax,ebx
c0012ff9:	5b                   	pop    ebx
c0012ffa:	5e                   	pop    esi
c0012ffb:	5f                   	pop    edi
c0012ffc:	5d                   	pop    ebp
c0012ffd:	c3                   	ret    

c0012ffe <Thr::executeDLL(unsigned long, void*)>:
c0012ffe:	56                   	push   esi
c0012fff:	53                   	push   ebx
c0013000:	52                   	push   edx
c0013001:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013005:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013009:	85 db                	test   ebx,ebx
c001300b:	75 10                	jne    c001301d <Thr::executeDLL(unsigned long, void*)+0x1f>
c001300d:	83 ec 0c             	sub    esp,0xc
c0013010:	68 8f eb 01 c0       	push   0xc001eb8f
c0013015:	e8 e9 d1 ff ff       	call   c0010203 <KePanic(char const*)>
c001301a:	83 c4 10             	add    esp,0x10
c001301d:	50                   	push   eax
c001301e:	50                   	push   eax
c001301f:	53                   	push   ebx
c0013020:	68 b9 eb 01 c0       	push   0xc001ebb9
c0013025:	e8 57 75 ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c001302a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001302e:	89 d8                	mov    eax,ebx
c0013030:	83 c4 14             	add    esp,0x14
c0013033:	5b                   	pop    ebx
c0013034:	5e                   	pop    esi
c0013035:	ff e0                	jmp    eax
c0013037:	90                   	nop

c0013038 <userModeEntryPoint(void*)>:
c0013038:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001303d:	48                   	dec    eax
c001303e:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013043:	75 03                	jne    c0013048 <userModeEntryPoint(void*)+0x10>
c0013045:	fb                   	sti    
c0013046:	66 90                	xchg   ax,ax
c0013048:	fb                   	sti    
c0013049:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001304e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013051:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0013057:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001305b:	e9 df d1 fe ff       	jmp    c000023f <goToUsermode>

c0013060 <changeTSS>:
c0013060:	83 ec 14             	sub    esp,0x14
c0013063:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013068:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001306b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0013070:	c1 e2 15             	shl    edx,0x15
c0013073:	29 d0                	sub    eax,edx
c0013075:	50                   	push   eax
c0013076:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001307b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013081:	05 7c 11 00 00       	add    eax,0x117c
c0013086:	50                   	push   eax
c0013087:	e8 4c 5b ff ff       	call   c0008bd8 <TSS::setESP(unsigned long)>
c001308c:	83 c4 1c             	add    esp,0x1c
c001308f:	c3                   	ret    

c0013090 <switchToThread(ThreadControlBlock*)>:
c0013090:	57                   	push   edi
c0013091:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013096:	56                   	push   esi
c0013097:	85 c0                	test   eax,eax
c0013099:	53                   	push   ebx
c001309a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001309e:	0f 85 90 00 00 00    	jne    c0013134 <switchToThread(ThreadControlBlock*)+0xa4>
c00130a4:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c00130a7:	80 fa ff             	cmp    dl,0xff
c00130aa:	0f 84 80 00 00 00    	je     c0013130 <switchToThread(ThreadControlBlock*)+0xa0>
c00130b0:	81 e2 ff 00 00 00    	and    edx,0xff
c00130b6:	b8 00 04 00 00       	mov    eax,0x400
c00130bb:	29 d0                	sub    eax,edx
c00130bd:	d1 f8                	sar    eax,1
c00130bf:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c00130c2:	66 90                	xchg   ax,ax
c00130c4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00130c7:	e8 1d 26 00 00       	call   c00156e9 <HalQueryPerformanceCounter()>
c00130cc:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c00130d1:	89 15 ac 51 02 c0    	mov    DWORD PTR ds:0xc00251ac,edx
c00130d7:	89 c6                	mov    esi,eax
c00130d9:	89 d7                	mov    edi,edx
c00130db:	2b 35 98 51 02 c0    	sub    esi,DWORD PTR ds:0xc0025198
c00130e1:	a3 98 51 02 c0       	mov    ds:0xc0025198,eax
c00130e6:	1b 3d 9c 51 02 c0    	sbb    edi,DWORD PTR ds:0xc002519c
c00130ec:	89 35 a0 51 02 c0    	mov    DWORD PTR ds:0xc00251a0,esi
c00130f2:	89 3d a4 51 02 c0    	mov    DWORD PTR ds:0xc00251a4,edi
c00130f8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00130fe:	89 15 9c 51 02 c0    	mov    DWORD PTR ds:0xc002519c,edx
c0013104:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0013107:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c001310a:	01 c6                	add    esi,eax
c001310c:	11 d7                	adc    edi,edx
c001310e:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0013111:	83 ec 0c             	sub    esp,0xc
c0013114:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0013117:	53                   	push   ebx
c0013118:	e8 5a d1 fe ff       	call   c0000277 <switchToThreadASM>
c001311d:	0f 20 c0             	mov    eax,cr0
c0013120:	83 c8 08             	or     eax,0x8
c0013123:	0f 22 c0             	mov    cr0,eax
c0013126:	83 c4 10             	add    esp,0x10
c0013129:	5b                   	pop    ebx
c001312a:	5e                   	pop    esi
c001312b:	5f                   	pop    edi
c001312c:	c3                   	ret    
c001312d:	8d 76 00             	lea    esi,[esi+0x0]
c0013130:	31 c0                	xor    eax,eax
c0013132:	eb 90                	jmp    c00130c4 <switchToThread(ThreadControlBlock*)+0x34>
c0013134:	5b                   	pop    ebx
c0013135:	c7 05 60 51 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x1
c001313f:	5e                   	pop    esi
c0013140:	5f                   	pop    edi
c0013141:	c3                   	ret    
c0013142:	66 90                	xchg   ax,ax

c0013144 <Process::addArgs(char**)>:
c0013144:	57                   	push   edi
c0013145:	56                   	push   esi
c0013146:	53                   	push   ebx
c0013147:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001314b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001314f:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0013159:	85 ff                	test   edi,edi
c001315b:	74 43                	je     c00131a0 <Process::addArgs(char**)+0x5c>
c001315d:	8b 07                	mov    eax,DWORD PTR [edi]
c001315f:	85 c0                	test   eax,eax
c0013161:	74 3d                	je     c00131a0 <Process::addArgs(char**)+0x5c>
c0013163:	31 db                	xor    ebx,ebx
c0013165:	8d 76 00             	lea    esi,[esi+0x0]
c0013168:	83 ec 0c             	sub    esp,0xc
c001316b:	50                   	push   eax
c001316c:	e8 cf d3 fe ff       	call   c0000540 <strlen>
c0013171:	40                   	inc    eax
c0013172:	89 04 24             	mov    DWORD PTR [esp],eax
c0013175:	e8 3f 46 ff ff       	call   c00077b9 <malloc>
c001317a:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0013181:	5a                   	pop    edx
c0013182:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0013185:	59                   	pop    ecx
c0013186:	43                   	inc    ebx
c0013187:	52                   	push   edx
c0013188:	50                   	push   eax
c0013189:	e8 72 d4 fe ff       	call   c0000600 <strcpy>
c001318e:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0013194:	83 c4 10             	add    esp,0x10
c0013197:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001319a:	85 c0                	test   eax,eax
c001319c:	75 ca                	jne    c0013168 <Process::addArgs(char**)+0x24>
c001319e:	66 90                	xchg   ax,ax
c00131a0:	5b                   	pop    ebx
c00131a1:	5e                   	pop    esi
c00131a2:	5f                   	pop    edi
c00131a3:	c3                   	ret    

c00131a4 <Process::Process(char const*, Process*, char**)>:
c00131a4:	56                   	push   esi
c00131a5:	53                   	push   ebx
c00131a6:	83 ec 14             	sub    esp,0x14
c00131a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00131ad:	05 0c 02 00 00       	add    eax,0x20c
c00131b2:	bb 07 00 00 00       	mov    ebx,0x7
c00131b7:	89 c6                	mov    esi,eax
c00131b9:	8d 76 00             	lea    esi,[esi+0x0]
c00131bc:	85 db                	test   ebx,ebx
c00131be:	78 14                	js     c00131d4 <Process::Process(char const*, Process*, char**)+0x30>
c00131c0:	83 ec 0c             	sub    esp,0xc
c00131c3:	56                   	push   esi
c00131c4:	e8 93 98 00 00       	call   c001ca5c <ThreadControlBlock::ThreadControlBlock()>
c00131c9:	83 c4 10             	add    esp,0x10
c00131cc:	83 c6 5f             	add    esi,0x5f
c00131cf:	4b                   	dec    ebx
c00131d0:	eb ea                	jmp    c00131bc <Process::Process(char const*, Process*, char**)+0x18>
c00131d2:	66 90                	xchg   ax,ax
c00131d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00131d8:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00131df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00131e3:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00131ea:	83 ec 0c             	sub    esp,0xc
c00131ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00131f1:	e8 02 ce ff ff       	call   c000fff8 <Krnl::newProcessEnv(Process*)>
c00131f6:	83 c4 10             	add    esp,0x10
c00131f9:	89 c2                	mov    edx,eax
c00131fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00131ff:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0013205:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013209:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0013212:	a1 6c fb 01 c0       	mov    eax,ds:0xc001fb6c
c0013217:	8d 50 01             	lea    edx,[eax+0x1]
c001321a:	89 15 6c fb 01 c0    	mov    DWORD PTR ds:0xc001fb6c,edx
c0013220:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013224:	89 02                	mov    DWORD PTR [edx],eax
c0013226:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001322e:	83 ec 0c             	sub    esp,0xc
c0013231:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013235:	e8 7f 45 ff ff       	call   c00077b9 <malloc>
c001323a:	83 c4 10             	add    esp,0x10
c001323d:	89 c3                	mov    ebx,eax
c001323f:	83 ec 08             	sub    esp,0x8
c0013242:	6a 00                	push   0x0
c0013244:	53                   	push   ebx
c0013245:	e8 d4 6b ff ff       	call   c0009e1e <VAS::VAS(bool)>
c001324a:	83 c4 10             	add    esp,0x10
c001324d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013251:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0013257:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001325b:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013265:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013269:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001326d:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0013273:	e8 f6 d2 ff ff       	call   c001056e <KeInitSignals()>
c0013278:	89 c2                	mov    edx,eax
c001327a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001327e:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0013284:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013288:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001328e:	85 c0                	test   eax,eax
c0013290:	74 42                	je     c00132d4 <Process::Process(char const*, Process*, char**)+0x130>
c0013292:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013296:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001329c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00132a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132a6:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00132ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132b0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00132b6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00132bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132c0:	05 0c 01 00 00       	add    eax,0x10c
c00132c5:	83 ec 08             	sub    esp,0x8
c00132c8:	52                   	push   edx
c00132c9:	50                   	push   eax
c00132ca:	e8 31 d3 fe ff       	call   c0000600 <strcpy>
c00132cf:	83 c4 10             	add    esp,0x10
c00132d2:	eb 64                	jmp    c0013338 <Process::Process(char const*, Process*, char**)+0x194>
c00132d4:	c7 44 24 04 34 01 00 00 	mov    DWORD PTR [esp+0x4],0x134
c00132dc:	83 ec 0c             	sub    esp,0xc
c00132df:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00132e3:	e8 d1 44 ff ff       	call   c00077b9 <malloc>
c00132e8:	83 c4 10             	add    esp,0x10
c00132eb:	89 c3                	mov    ebx,eax
c00132ed:	83 ec 08             	sub    esp,0x8
c00132f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00132f4:	53                   	push   ebx
c00132f5:	e8 00 56 ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c00132fa:	83 c4 10             	add    esp,0x10
c00132fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013301:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0013307:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001330b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013311:	83 ec 0c             	sub    esp,0xc
c0013314:	50                   	push   eax
c0013315:	e8 80 4e ff ff       	call   c000819a <addToTerminalCycle(VgaText*)>
c001331a:	83 c4 10             	add    esp,0x10
c001331d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013321:	05 0c 01 00 00       	add    eax,0x10c
c0013326:	83 ec 08             	sub    esp,0x8
c0013329:	68 d8 eb 01 c0       	push   0xc001ebd8
c001332e:	50                   	push   eax
c001332f:	e8 cc d2 fe ff       	call   c0000600 <strcpy>
c0013334:	83 c4 10             	add    esp,0x10
c0013337:	90                   	nop
c0013338:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001333c:	83 c0 0c             	add    eax,0xc
c001333f:	83 ec 08             	sub    esp,0x8
c0013342:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013346:	50                   	push   eax
c0013347:	e8 b4 d2 fe ff       	call   c0000600 <strcpy>
c001334c:	83 c4 10             	add    esp,0x10
c001334f:	83 ec 08             	sub    esp,0x8
c0013352:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013356:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001335a:	e8 e5 fd ff ff       	call   c0013144 <Process::addArgs(char**)>
c001335f:	83 c4 10             	add    esp,0x10
c0013362:	83 ec 08             	sub    esp,0x8
c0013365:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013369:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001336d:	e8 6c ed ff ff       	call   c00120de <Thr::loadProgramIntoMemory(Process*, char const*)>
c0013372:	83 c4 10             	add    esp,0x10
c0013375:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0013379:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001337d:	83 f0 01             	xor    eax,0x1
c0013380:	88 c2                	mov    dl,al
c0013382:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013386:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c001338c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013390:	25 ff 00 00 00       	and    eax,0xff
c0013395:	83 ec 08             	sub    esp,0x8
c0013398:	50                   	push   eax
c0013399:	68 30 ec 01 c0       	push   0xc001ec30
c001339e:	e8 de 71 ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c00133a3:	83 c4 10             	add    esp,0x10
c00133a6:	90                   	nop
c00133a7:	83 c4 14             	add    esp,0x14
c00133aa:	5b                   	pop    ebx
c00133ab:	5e                   	pop    esi
c00133ac:	c3                   	ret    
c00133ad:	90                   	nop
c00133ae:	66 90                	xchg   ax,ax

c00133b0 <Process::Process(bool, char const*, Process*, char**)>:
c00133b0:	56                   	push   esi
c00133b1:	53                   	push   ebx
c00133b2:	83 ec 24             	sub    esp,0x24
c00133b5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00133b9:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00133bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00133c1:	05 0c 02 00 00       	add    eax,0x20c
c00133c6:	bb 07 00 00 00       	mov    ebx,0x7
c00133cb:	89 c6                	mov    esi,eax
c00133cd:	8d 76 00             	lea    esi,[esi+0x0]
c00133d0:	85 db                	test   ebx,ebx
c00133d2:	78 14                	js     c00133e8 <Process::Process(bool, char const*, Process*, char**)+0x38>
c00133d4:	83 ec 0c             	sub    esp,0xc
c00133d7:	56                   	push   esi
c00133d8:	e8 7f 96 00 00       	call   c001ca5c <ThreadControlBlock::ThreadControlBlock()>
c00133dd:	83 c4 10             	add    esp,0x10
c00133e0:	83 c6 5f             	add    esi,0x5f
c00133e3:	4b                   	dec    ebx
c00133e4:	eb ea                	jmp    c00133d0 <Process::Process(bool, char const*, Process*, char**)+0x20>
c00133e6:	66 90                	xchg   ax,ax
c00133e8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00133ec:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00133f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00133f7:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00133fe:	83 ec 0c             	sub    esp,0xc
c0013401:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013405:	e8 ee cb ff ff       	call   c000fff8 <Krnl::newProcessEnv(Process*)>
c001340a:	83 c4 10             	add    esp,0x10
c001340d:	89 c2                	mov    edx,eax
c001340f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013413:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0013419:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001341d:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0013426:	a1 6c fb 01 c0       	mov    eax,ds:0xc001fb6c
c001342b:	8d 50 01             	lea    edx,[eax+0x1]
c001342e:	89 15 6c fb 01 c0    	mov    DWORD PTR ds:0xc001fb6c,edx
c0013434:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013438:	89 02                	mov    DWORD PTR [edx],eax
c001343a:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0013442:	83 ec 0c             	sub    esp,0xc
c0013445:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0013449:	e8 6b 43 ff ff       	call   c00077b9 <malloc>
c001344e:	83 c4 10             	add    esp,0x10
c0013451:	89 c3                	mov    ebx,eax
c0013453:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0013457:	25 ff 00 00 00       	and    eax,0xff
c001345c:	83 ec 08             	sub    esp,0x8
c001345f:	50                   	push   eax
c0013460:	53                   	push   ebx
c0013461:	e8 b8 69 ff ff       	call   c0009e1e <VAS::VAS(bool)>
c0013466:	83 c4 10             	add    esp,0x10
c0013469:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001346d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0013473:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013477:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013481:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013485:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013489:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001348f:	e8 da d0 ff ff       	call   c001056e <KeInitSignals()>
c0013494:	89 c2                	mov    edx,eax
c0013496:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001349a:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00134a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134a4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00134aa:	85 c0                	test   eax,eax
c00134ac:	74 42                	je     c00134f0 <Process::Process(bool, char const*, Process*, char**)+0x140>
c00134ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134b2:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00134b8:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00134be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134c2:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00134c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134cc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00134d2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00134d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134dc:	05 0c 01 00 00       	add    eax,0x10c
c00134e1:	83 ec 08             	sub    esp,0x8
c00134e4:	52                   	push   edx
c00134e5:	50                   	push   eax
c00134e6:	e8 15 d1 fe ff       	call   c0000600 <strcpy>
c00134eb:	83 c4 10             	add    esp,0x10
c00134ee:	eb 64                	jmp    c0013554 <Process::Process(bool, char const*, Process*, char**)+0x1a4>
c00134f0:	c7 44 24 18 34 01 00 00 	mov    DWORD PTR [esp+0x18],0x134
c00134f8:	83 ec 0c             	sub    esp,0xc
c00134fb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00134ff:	e8 b5 42 ff ff       	call   c00077b9 <malloc>
c0013504:	83 c4 10             	add    esp,0x10
c0013507:	89 c3                	mov    ebx,eax
c0013509:	83 ec 08             	sub    esp,0x8
c001350c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0013510:	53                   	push   ebx
c0013511:	e8 e4 53 ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c0013516:	83 c4 10             	add    esp,0x10
c0013519:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001351d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0013523:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013527:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001352d:	83 ec 0c             	sub    esp,0xc
c0013530:	50                   	push   eax
c0013531:	e8 64 4c ff ff       	call   c000819a <addToTerminalCycle(VgaText*)>
c0013536:	83 c4 10             	add    esp,0x10
c0013539:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001353d:	05 0c 01 00 00       	add    eax,0x10c
c0013542:	83 ec 08             	sub    esp,0x8
c0013545:	68 d8 eb 01 c0       	push   0xc001ebd8
c001354a:	50                   	push   eax
c001354b:	e8 b0 d0 fe ff       	call   c0000600 <strcpy>
c0013550:	83 c4 10             	add    esp,0x10
c0013553:	90                   	nop
c0013554:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013558:	83 c0 0c             	add    eax,0xc
c001355b:	83 ec 08             	sub    esp,0x8
c001355e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0013562:	50                   	push   eax
c0013563:	e8 98 d0 fe ff       	call   c0000600 <strcpy>
c0013568:	83 c4 10             	add    esp,0x10
c001356b:	83 ec 08             	sub    esp,0x8
c001356e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0013572:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013576:	e8 c9 fb ff ff       	call   c0013144 <Process::addArgs(char**)>
c001357b:	83 c4 10             	add    esp,0x10
c001357e:	90                   	nop
c001357f:	83 c4 24             	add    esp,0x24
c0013582:	5b                   	pop    ebx
c0013583:	5e                   	pop    esi
c0013584:	c3                   	ret    
c0013585:	8d 76 00             	lea    esi,[esi+0x0]

c0013588 <taskStartupFunction>:
c0013588:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001358d:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0013590:	c3                   	ret    
c0013591:	90                   	nop
c0013592:	66 90                	xchg   ax,ax

c0013594 <Semaphore::Semaphore(int)>:
c0013594:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013598:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001359c:	89 10                	mov    DWORD PTR [eax],edx
c001359e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135a2:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00135a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135ad:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00135b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135b8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00135bf:	90                   	nop
c00135c0:	c3                   	ret    
c00135c1:	90                   	nop
c00135c2:	66 90                	xchg   ax,ax

c00135c4 <Mutex::Mutex()>:
c00135c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135c8:	6a 01                	push   0x1
c00135ca:	50                   	push   eax
c00135cb:	e8 c4 ff ff ff       	call   c0013594 <Semaphore::Semaphore(int)>
c00135d0:	83 c4 08             	add    esp,0x8
c00135d3:	90                   	nop
c00135d4:	c3                   	ret    
c00135d5:	90                   	nop
c00135d6:	66 90                	xchg   ax,ax

c00135d8 <Process::createThread(void (*)(void*), void*, int)>:
c00135d8:	57                   	push   edi
c00135d9:	31 c9                	xor    ecx,ecx
c00135db:	56                   	push   esi
c00135dc:	53                   	push   ebx
c00135dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00135e1:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c00135e8:	89 f2                	mov    edx,esi
c00135ea:	66 90                	xchg   ax,ax
c00135ec:	31 c0                	xor    eax,eax
c00135ee:	66 89 d0             	mov    ax,dx
c00135f1:	83 e2 01             	and    edx,0x1
c00135f4:	74 12                	je     c0013608 <Process::createThread(void (*)(void*), void*, int)+0x30>
c00135f6:	d1 f8                	sar    eax,1
c00135f8:	41                   	inc    ecx
c00135f9:	89 c2                	mov    edx,eax
c00135fb:	83 f9 10             	cmp    ecx,0x10
c00135fe:	75 ec                	jne    c00135ec <Process::createThread(void (*)(void*), void*, int)+0x14>
c0013600:	31 db                	xor    ebx,ebx
c0013602:	89 d8                	mov    eax,ebx
c0013604:	5b                   	pop    ebx
c0013605:	5e                   	pop    esi
c0013606:	5f                   	pop    edi
c0013607:	c3                   	ret    
c0013608:	b8 01 00 00 00       	mov    eax,0x1
c001360d:	d3 e0                	shl    eax,cl
c001360f:	09 c6                	or     esi,eax
c0013611:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0013614:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c001361b:	01 c0                	add    eax,eax
c001361d:	01 c8                	add    eax,ecx
c001361f:	8d 04 80             	lea    eax,[eax+eax*4]
c0013622:	01 d8                	add    eax,ebx
c0013624:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c001362b:	75 0b                	jne    c0013638 <Process::createThread(void (*)(void*), void*, int)+0x60>
c001362d:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0013637:	90                   	nop
c0013638:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001363e:	83 ec 08             	sub    esp,0x8
c0013641:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013644:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0013647:	01 c0                	add    eax,eax
c0013649:	01 c8                	add    eax,ecx
c001364b:	8d 3c 80             	lea    edi,[eax+eax*4]
c001364e:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0013651:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0013657:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c001365d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013661:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0013667:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c001366d:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0013674:	89 ca                	mov    edx,ecx
c0013676:	f7 da                	neg    edx
c0013678:	c1 e2 15             	shl    edx,0x15
c001367b:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0013681:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0013687:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001368b:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0013695:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c001369b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001369f:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00136a5:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00136af:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00136b9:	53                   	push   ebx
c00136ba:	68 84 51 02 c0       	push   0xc0025184
c00136bf:	e8 38 91 00 00       	call   c001c7fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00136c4:	83 c4 10             	add    esp,0x10
c00136c7:	89 d8                	mov    eax,ebx
c00136c9:	5b                   	pop    ebx
c00136ca:	5e                   	pop    esi
c00136cb:	5f                   	pop    edi
c00136cc:	c3                   	ret    
c00136cd:	90                   	nop
c00136ce:	66 90                	xchg   ax,ax

c00136d0 <Process::createUserThread()>:
c00136d0:	83 ec 0c             	sub    esp,0xc
c00136d3:	68 80 00 00 00       	push   0x80
c00136d8:	6a 00                	push   0x0
c00136da:	68 38 30 01 c0       	push   0xc0013038
c00136df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00136e3:	50                   	push   eax
c00136e4:	e8 ef fe ff ff       	call   c00135d8 <Process::createThread(void (*)(void*), void*, int)>
c00136e9:	83 c4 1c             	add    esp,0x1c
c00136ec:	c3                   	ret    
c00136ed:	8d 76 00             	lea    esi,[esi+0x0]

c00136f0 <setupMultitasking(void (*)())>:
c00136f0:	56                   	push   esi
c00136f1:	53                   	push   ebx
c00136f2:	53                   	push   ebx
c00136f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00136f7:	eb 13                	jmp    c001370c <setupMultitasking(void (*)())+0x1c>
c00136f9:	8d 76 00             	lea    esi,[esi+0x0]
c00136fc:	83 ec 0c             	sub    esp,0xc
c00136ff:	68 84 51 02 c0       	push   0xc0025184
c0013704:	e8 3b 90 00 00       	call   c001c744 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013709:	83 c4 10             	add    esp,0x10
c001370c:	83 ec 0c             	sub    esp,0xc
c001370f:	68 84 51 02 c0       	push   0xc0025184
c0013714:	e8 07 90 00 00       	call   c001c720 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013719:	83 c4 10             	add    esp,0x10
c001371c:	84 c0                	test   al,al
c001371e:	74 dc                	je     c00136fc <setupMultitasking(void (*)())+0xc>
c0013720:	83 ec 0c             	sub    esp,0xc
c0013723:	68 24 07 00 00       	push   0x724
c0013728:	e8 8c 40 ff ff       	call   c00077b9 <malloc>
c001372d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0013734:	89 c3                	mov    ebx,eax
c0013736:	6a 00                	push   0x0
c0013738:	68 dc eb 01 c0       	push   0xc001ebdc
c001373d:	6a 01                	push   0x1
c001373f:	50                   	push   eax
c0013740:	e8 6b fc ff ff       	call   c00133b0 <Process::Process(bool, char const*, Process*, char**)>
c0013745:	83 c4 14             	add    esp,0x14
c0013748:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c001374e:	89 1d 90 51 02 c0    	mov    DWORD PTR ds:0xc0025190,ebx
c0013754:	50                   	push   eax
c0013755:	e8 9d 4c ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c001375a:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0013762:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c001376c:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0013772:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013775:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c001377f:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0013785:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c001378b:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0013795:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c001379f:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00137a9:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00137af:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00137b5:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00137bf:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00137c5:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00137cf:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00137d5:	5a                   	pop    edx
c00137d6:	59                   	pop    ecx
c00137d7:	68 d8 eb 01 c0       	push   0xc001ebd8
c00137dc:	50                   	push   eax
c00137dd:	e8 1e ce fe ff       	call   c0000600 <strcpy>
c00137e2:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00137e9:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00137ed:	83 c4 14             	add    esp,0x14
c00137f0:	5b                   	pop    ebx
c00137f1:	5e                   	pop    esi
c00137f2:	e9 72 ca fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c00137f7:	90                   	nop

c00137f8 <schedule()>:
c00137f8:	8b 15 64 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025164
c00137fe:	85 d2                	test   edx,edx
c0013800:	74 0e                	je     c0013810 <schedule()+0x18>
c0013802:	c7 05 60 51 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x1
c001380c:	c3                   	ret    
c001380d:	8d 76 00             	lea    esi,[esi+0x0]
c0013810:	53                   	push   ebx
c0013811:	83 ec 14             	sub    esp,0x14
c0013814:	68 84 51 02 c0       	push   0xc0025184
c0013819:	e8 02 8f 00 00       	call   c001c720 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001381e:	83 c4 10             	add    esp,0x10
c0013821:	84 c0                	test   al,al
c0013823:	75 3b                	jne    c0013860 <schedule()+0x68>
c0013825:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001382a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001382d:	4a                   	dec    edx
c001382e:	74 38                	je     c0013868 <schedule()+0x70>
c0013830:	83 ec 0c             	sub    esp,0xc
c0013833:	68 84 51 02 c0       	push   0xc0025184
c0013838:	e8 ff 8e 00 00       	call   c001c73c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001383d:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c0013844:	89 c3                	mov    ebx,eax
c0013846:	e8 f9 8e 00 00       	call   c001c744 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001384b:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0013852:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013855:	e8 36 f8 ff ff       	call   c0013090 <switchToThread(ThreadControlBlock*)>
c001385a:	83 c4 10             	add    esp,0x10
c001385d:	8d 76 00             	lea    esi,[esi+0x0]
c0013860:	83 c4 08             	add    esp,0x8
c0013863:	5b                   	pop    ebx
c0013864:	c3                   	ret    
c0013865:	8d 76 00             	lea    esi,[esi+0x0]
c0013868:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001386f:	83 ec 08             	sub    esp,0x8
c0013872:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013877:	50                   	push   eax
c0013878:	68 84 51 02 c0       	push   0xc0025184
c001387d:	e8 7a 8f 00 00       	call   c001c7fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013882:	83 c4 10             	add    esp,0x10
c0013885:	eb a9                	jmp    c0013830 <schedule()+0x38>
c0013887:	90                   	nop

c0013888 <Semaphore::tryAcquire()>:
c0013888:	53                   	push   ebx
c0013889:	83 ec 08             	sub    esp,0x8
c001388c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013890:	fa                   	cli    
c0013891:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013896:	8d 50 01             	lea    edx,[eax+0x1]
c0013899:	89 15 68 51 02 c0    	mov    DWORD PTR ds:0xc0025168,edx
c001389f:	8b 15 64 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025164
c00138a5:	8d 5a 01             	lea    ebx,[edx+0x1]
c00138a8:	89 1d 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,ebx
c00138ae:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c00138b1:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c00138b3:	7c 33                	jl     c00138e8 <Semaphore::tryAcquire()+0x60>
c00138b5:	89 15 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,edx
c00138bb:	85 d2                	test   edx,edx
c00138bd:	75 0d                	jne    c00138cc <Semaphore::tryAcquire()+0x44>
c00138bf:	8b 15 60 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025160
c00138c5:	85 d2                	test   edx,edx
c00138c7:	75 6b                	jne    c0013934 <Semaphore::tryAcquire()+0xac>
c00138c9:	8d 76 00             	lea    esi,[esi+0x0]
c00138cc:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00138d1:	85 c0                	test   eax,eax
c00138d3:	74 0b                	je     c00138e0 <Semaphore::tryAcquire()+0x58>
c00138d5:	8d 76 00             	lea    esi,[esi+0x0]
c00138d8:	31 c0                	xor    eax,eax
c00138da:	83 c4 08             	add    esp,0x8
c00138dd:	5b                   	pop    ebx
c00138de:	c3                   	ret    
c00138df:	90                   	nop
c00138e0:	fb                   	sti    
c00138e1:	83 c4 08             	add    esp,0x8
c00138e4:	5b                   	pop    ebx
c00138e5:	c3                   	ret    
c00138e6:	66 90                	xchg   ax,ax
c00138e8:	43                   	inc    ebx
c00138e9:	89 15 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,edx
c00138ef:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c00138f2:	85 d2                	test   edx,edx
c00138f4:	75 22                	jne    c0013918 <Semaphore::tryAcquire()+0x90>
c00138f6:	8b 0d 60 51 02 c0    	mov    ecx,DWORD PTR ds:0xc0025160
c00138fc:	85 c9                	test   ecx,ecx
c00138fe:	74 18                	je     c0013918 <Semaphore::tryAcquire()+0x90>
c0013900:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c001390a:	e8 e9 fe ff ff       	call   c00137f8 <schedule()>
c001390f:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013914:	48                   	dec    eax
c0013915:	8d 76 00             	lea    esi,[esi+0x0]
c0013918:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001391d:	85 c0                	test   eax,eax
c001391f:	75 0b                	jne    c001392c <Semaphore::tryAcquire()+0xa4>
c0013921:	fb                   	sti    
c0013922:	b0 01                	mov    al,0x1
c0013924:	83 c4 08             	add    esp,0x8
c0013927:	5b                   	pop    ebx
c0013928:	c3                   	ret    
c0013929:	8d 76 00             	lea    esi,[esi+0x0]
c001392c:	b0 01                	mov    al,0x1
c001392e:	83 c4 08             	add    esp,0x8
c0013931:	5b                   	pop    ebx
c0013932:	c3                   	ret    
c0013933:	90                   	nop
c0013934:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c001393e:	e8 b5 fe ff ff       	call   c00137f8 <schedule()>
c0013943:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013948:	48                   	dec    eax
c0013949:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001394e:	85 c0                	test   eax,eax
c0013950:	75 86                	jne    c00138d8 <Semaphore::tryAcquire()+0x50>
c0013952:	eb 8c                	jmp    c00138e0 <Semaphore::tryAcquire()+0x58>

c0013954 <Semaphore::assertLocked(char const*)>:
c0013954:	83 ec 0c             	sub    esp,0xc
c0013957:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001395b:	fa                   	cli    
c001395c:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013962:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013967:	8d 48 01             	lea    ecx,[eax+0x1]
c001396a:	89 0d 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,ecx
c0013970:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013972:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0013975:	7c 29                	jl     c00139a0 <Semaphore::assertLocked(char const*)+0x4c>
c0013977:	90                   	nop
c0013978:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c001397d:	85 c0                	test   eax,eax
c001397f:	75 0b                	jne    c001398c <Semaphore::assertLocked(char const*)+0x38>
c0013981:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c0013986:	85 c0                	test   eax,eax
c0013988:	75 2e                	jne    c00139b8 <Semaphore::assertLocked(char const*)+0x64>
c001398a:	66 90                	xchg   ax,ax
c001398c:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013991:	48                   	dec    eax
c0013992:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013997:	75 03                	jne    c001399c <Semaphore::assertLocked(char const*)+0x48>
c0013999:	fb                   	sti    
c001399a:	66 90                	xchg   ax,ax
c001399c:	83 c4 0c             	add    esp,0xc
c001399f:	c3                   	ret    
c00139a0:	83 ec 0c             	sub    esp,0xc
c00139a3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00139a7:	52                   	push   edx
c00139a8:	e8 56 c8 ff ff       	call   c0010203 <KePanic(char const*)>
c00139ad:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c00139b2:	83 c4 10             	add    esp,0x10
c00139b5:	48                   	dec    eax
c00139b6:	eb c0                	jmp    c0013978 <Semaphore::assertLocked(char const*)+0x24>
c00139b8:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c00139c2:	e8 31 fe ff ff       	call   c00137f8 <schedule()>
c00139c7:	eb c3                	jmp    c001398c <Semaphore::assertLocked(char const*)+0x38>
c00139c9:	8d 76 00             	lea    esi,[esi+0x0]

c00139cc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00139cc:	83 ec 0c             	sub    esp,0xc
c00139cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00139d8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00139db:	e8 18 fe ff ff       	call   c00137f8 <schedule()>
c00139e0:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00139e5:	48                   	dec    eax
c00139e6:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00139eb:	75 03                	jne    c00139f0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00139ed:	fb                   	sti    
c00139ee:	66 90                	xchg   ax,ax
c00139f0:	83 c4 0c             	add    esp,0xc
c00139f3:	c3                   	ret    

c00139f4 <blockTask(TaskState)>:
c00139f4:	83 ec 0c             	sub    esp,0xc
c00139f7:	fa                   	cli    
c00139f8:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00139fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a02:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a07:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013a0a:	e8 e9 fd ff ff       	call   c00137f8 <schedule()>
c0013a0f:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013a14:	48                   	dec    eax
c0013a15:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013a1a:	75 04                	jne    c0013a20 <blockTask(TaskState)+0x2c>
c0013a1c:	fb                   	sti    
c0013a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0013a20:	83 c4 0c             	add    esp,0xc
c0013a23:	c3                   	ret    

c0013a24 <waitTask(int, int*, int)>:
c0013a24:	83 ec 18             	sub    esp,0x18
c0013a27:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a2c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013a30:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0013a33:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013a37:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a3c:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0013a3f:	6a 07                	push   0x7
c0013a41:	e8 ae ff ff ff       	call   c00139f4 <blockTask(TaskState)>
c0013a46:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a4b:	83 c4 10             	add    esp,0x10
c0013a4e:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0013a51:	85 d2                	test   edx,edx
c0013a53:	74 0b                	je     c0013a60 <waitTask(int, int*, int)+0x3c>
c0013a55:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0013a58:	89 02                	mov    DWORD PTR [edx],eax
c0013a5a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a5f:	90                   	nop
c0013a60:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0013a63:	83 c4 0c             	add    esp,0xc
c0013a66:	c3                   	ret    
c0013a67:	90                   	nop

c0013a68 <milliTenthSleepUntil(unsigned int)>:
c0013a68:	83 ec 0c             	sub    esp,0xc
c0013a6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a6f:	39 05 8c 44 02 c0    	cmp    DWORD PTR ds:0xc002448c,eax
c0013a75:	76 05                	jbe    c0013a7c <milliTenthSleepUntil(unsigned int)+0x14>
c0013a77:	90                   	nop
c0013a78:	83 c4 0c             	add    esp,0xc
c0013a7b:	c3                   	ret    
c0013a7c:	fa                   	cli    
c0013a7d:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013a83:	83 ec 08             	sub    esp,0x8
c0013a86:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c0013a8c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013a92:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0013a95:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013a9b:	52                   	push   edx
c0013a9c:	68 78 51 02 c0       	push   0xc0025178
c0013aa1:	e8 56 8d 00 00       	call   c001c7fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013aa6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013aad:	e8 42 ff ff ff       	call   c00139f4 <blockTask(TaskState)>
c0013ab2:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013ab7:	83 c4 10             	add    esp,0x10
c0013aba:	48                   	dec    eax
c0013abb:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c0013ac0:	85 c0                	test   eax,eax
c0013ac2:	75 0c                	jne    c0013ad0 <milliTenthSleepUntil(unsigned int)+0x68>
c0013ac4:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c0013ac9:	85 c0                	test   eax,eax
c0013acb:	75 17                	jne    c0013ae4 <milliTenthSleepUntil(unsigned int)+0x7c>
c0013acd:	8d 76 00             	lea    esi,[esi+0x0]
c0013ad0:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013ad5:	48                   	dec    eax
c0013ad6:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013adb:	75 9b                	jne    c0013a78 <milliTenthSleepUntil(unsigned int)+0x10>
c0013add:	fb                   	sti    
c0013ade:	83 c4 0c             	add    esp,0xc
c0013ae1:	c3                   	ret    
c0013ae2:	66 90                	xchg   ax,ax
c0013ae4:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c0013aee:	e8 05 fd ff ff       	call   c00137f8 <schedule()>
c0013af3:	eb db                	jmp    c0013ad0 <milliTenthSleepUntil(unsigned int)+0x68>
c0013af5:	8d 76 00             	lea    esi,[esi+0x0]

c0013af8 <milliTenthSleep(unsigned int)>:
c0013af8:	a1 8c 44 02 c0       	mov    eax,ds:0xc002448c
c0013afd:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0013b01:	e9 62 ff ff ff       	jmp    c0013a68 <milliTenthSleepUntil(unsigned int)>
c0013b06:	66 90                	xchg   ax,ax

c0013b08 <sleep(unsigned int)>:
c0013b08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b0c:	8d 04 80             	lea    eax,[eax+eax*4]
c0013b0f:	8d 04 80             	lea    eax,[eax+eax*4]
c0013b12:	8d 04 80             	lea    eax,[eax+eax*4]
c0013b15:	8d 04 80             	lea    eax,[eax+eax*4]
c0013b18:	c1 e0 04             	shl    eax,0x4
c0013b1b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013b1f:	eb d7                	jmp    c0013af8 <milliTenthSleep(unsigned int)>
c0013b21:	90                   	nop
c0013b22:	66 90                	xchg   ax,ax

c0013b24 <Semaphore::acquire()>:
c0013b24:	83 ec 0c             	sub    esp,0xc
c0013b27:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b2b:	fa                   	cli    
c0013b2c:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013b31:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013b37:	8d 48 01             	lea    ecx,[eax+0x1]
c0013b3a:	89 0d 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,ecx
c0013b40:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0013b43:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0013b45:	7d 2d                	jge    c0013b74 <Semaphore::acquire()+0x50>
c0013b47:	41                   	inc    ecx
c0013b48:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0013b4b:	90                   	nop
c0013b4c:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c0013b51:	85 c0                	test   eax,eax
c0013b53:	75 0b                	jne    c0013b60 <Semaphore::acquire()+0x3c>
c0013b55:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c0013b5a:	85 c0                	test   eax,eax
c0013b5c:	75 62                	jne    c0013bc0 <Semaphore::acquire()+0x9c>
c0013b5e:	66 90                	xchg   ax,ax
c0013b60:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013b65:	48                   	dec    eax
c0013b66:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013b6b:	75 03                	jne    c0013b70 <Semaphore::acquire()+0x4c>
c0013b6d:	fb                   	sti    
c0013b6e:	66 90                	xchg   ax,ax
c0013b70:	83 c4 0c             	add    esp,0xc
c0013b73:	c3                   	ret    
c0013b74:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b79:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0013b80:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0013b83:	85 c9                	test   ecx,ecx
c0013b85:	74 4d                	je     c0013bd4 <Semaphore::acquire()+0xb0>
c0013b87:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0013b8a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013b90:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0013b93:	90                   	nop
c0013b94:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b99:	83 ec 0c             	sub    esp,0xc
c0013b9c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0013b9f:	68 58 ec 01 c0       	push   0xc001ec58
c0013ba4:	e8 d8 69 ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c0013ba9:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0013bb0:	e8 3f fe ff ff       	call   c00139f4 <blockTask(TaskState)>
c0013bb5:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013bba:	83 c4 10             	add    esp,0x10
c0013bbd:	48                   	dec    eax
c0013bbe:	eb 8c                	jmp    c0013b4c <Semaphore::acquire()+0x28>
c0013bc0:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c0013bca:	e8 29 fc ff ff       	call   c00137f8 <schedule()>
c0013bcf:	eb 8f                	jmp    c0013b60 <Semaphore::acquire()+0x3c>
c0013bd1:	8d 76 00             	lea    esi,[esi+0x0]
c0013bd4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013bd9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013bdc:	eb b6                	jmp    c0013b94 <Semaphore::acquire()+0x70>
c0013bde:	66 90                	xchg   ax,ax

c0013be0 <taskReturned>:
c0013be0:	83 ec 18             	sub    esp,0x18
c0013be3:	68 78 ec 01 c0       	push   0xc001ec78
c0013be8:	e8 16 c6 ff ff       	call   c0010203 <KePanic(char const*)>
c0013bed:	83 c4 10             	add    esp,0x10
c0013bf0:	83 ec 0c             	sub    esp,0xc
c0013bf3:	6a 02                	push   0x2
c0013bf5:	e8 fa fd ff ff       	call   c00139f4 <blockTask(TaskState)>
c0013bfa:	fa                   	cli    
c0013bfb:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013c01:	e8 f2 fb ff ff       	call   c00137f8 <schedule()>
c0013c06:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013c0b:	83 c4 10             	add    esp,0x10
c0013c0e:	48                   	dec    eax
c0013c0f:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013c14:	85 c0                	test   eax,eax
c0013c16:	75 d8                	jne    c0013bf0 <taskReturned+0x10>
c0013c18:	fb                   	sti    
c0013c19:	eb d5                	jmp    c0013bf0 <taskReturned+0x10>
c0013c1b:	90                   	nop

c0013c1c <Thr::processFromPID(int)>:
c0013c1c:	57                   	push   edi
c0013c1d:	56                   	push   esi
c0013c1e:	53                   	push   ebx
c0013c1f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013c23:	fa                   	cli    
c0013c24:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013c2a:	83 ec 0c             	sub    esp,0xc
c0013c2d:	68 84 51 02 c0       	push   0xc0025184
c0013c32:	e8 05 8b 00 00       	call   c001c73c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013c37:	83 c4 10             	add    esp,0x10
c0013c3a:	89 c7                	mov    edi,eax
c0013c3c:	eb 16                	jmp    c0013c54 <Thr::processFromPID(int)+0x38>
c0013c3e:	66 90                	xchg   ax,ax
c0013c40:	83 ec 0c             	sub    esp,0xc
c0013c43:	68 84 51 02 c0       	push   0xc0025184
c0013c48:	e8 ef 8a 00 00       	call   c001c73c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013c4d:	83 c4 10             	add    esp,0x10
c0013c50:	39 f8                	cmp    eax,edi
c0013c52:	74 4c                	je     c0013ca0 <Thr::processFromPID(int)+0x84>
c0013c54:	83 ec 0c             	sub    esp,0xc
c0013c57:	68 84 51 02 c0       	push   0xc0025184
c0013c5c:	e8 db 8a 00 00       	call   c001c73c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013c61:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c0013c68:	89 c3                	mov    ebx,eax
c0013c6a:	e8 d5 8a 00 00       	call   c001c744 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013c6f:	58                   	pop    eax
c0013c70:	5a                   	pop    edx
c0013c71:	53                   	push   ebx
c0013c72:	68 84 51 02 c0       	push   0xc0025184
c0013c77:	e8 80 8b 00 00       	call   c001c7fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013c7c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013c7f:	83 c4 10             	add    esp,0x10
c0013c82:	39 30                	cmp    DWORD PTR [eax],esi
c0013c84:	75 ba                	jne    c0013c40 <Thr::processFromPID(int)+0x24>
c0013c86:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013c8b:	48                   	dec    eax
c0013c8c:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013c91:	74 09                	je     c0013c9c <Thr::processFromPID(int)+0x80>
c0013c93:	90                   	nop
c0013c94:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013c97:	5b                   	pop    ebx
c0013c98:	5e                   	pop    esi
c0013c99:	5f                   	pop    edi
c0013c9a:	c3                   	ret    
c0013c9b:	90                   	nop
c0013c9c:	fb                   	sti    
c0013c9d:	eb f5                	jmp    c0013c94 <Thr::processFromPID(int)+0x78>
c0013c9f:	90                   	nop
c0013ca0:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013ca5:	48                   	dec    eax
c0013ca6:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013cab:	75 07                	jne    c0013cb4 <Thr::processFromPID(int)+0x98>
c0013cad:	fb                   	sti    
c0013cae:	5b                   	pop    ebx
c0013caf:	5e                   	pop    esi
c0013cb0:	5f                   	pop    edi
c0013cb1:	c3                   	ret    
c0013cb2:	66 90                	xchg   ax,ax
c0013cb4:	5b                   	pop    ebx
c0013cb5:	31 c0                	xor    eax,eax
c0013cb7:	5e                   	pop    esi
c0013cb8:	5f                   	pop    edi
c0013cb9:	c3                   	ret    
c0013cba:	66 90                	xchg   ax,ax

c0013cbc <unblockTask(ThreadControlBlock*)>:
c0013cbc:	53                   	push   ebx
c0013cbd:	83 ec 08             	sub    esp,0x8
c0013cc0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013cc4:	fa                   	cli    
c0013cc5:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013ccb:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013cce:	85 c0                	test   eax,eax
c0013cd0:	74 66                	je     c0013d38 <unblockTask(ThreadControlBlock*)+0x7c>
c0013cd2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013cd5:	48                   	dec    eax
c0013cd6:	74 38                	je     c0013d10 <unblockTask(ThreadControlBlock*)+0x54>
c0013cd8:	83 ec 0c             	sub    esp,0xc
c0013cdb:	68 84 51 02 c0       	push   0xc0025184
c0013ce0:	e8 57 8a 00 00       	call   c001c73c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013ce5:	83 c4 10             	add    esp,0x10
c0013ce8:	85 c0                	test   eax,eax
c0013cea:	75 1c                	jne    c0013d08 <unblockTask(ThreadControlBlock*)+0x4c>
c0013cec:	eb 5e                	jmp    c0013d4c <unblockTask(ThreadControlBlock*)+0x90>
c0013cee:	66 90                	xchg   ax,ax
c0013cf0:	83 ec 08             	sub    esp,0x8
c0013cf3:	50                   	push   eax
c0013cf4:	68 84 51 02 c0       	push   0xc0025184
c0013cf9:	e8 ee 8d 00 00       	call   c001caec <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013cfe:	83 c4 10             	add    esp,0x10
c0013d01:	85 c0                	test   eax,eax
c0013d03:	74 47                	je     c0013d4c <unblockTask(ThreadControlBlock*)+0x90>
c0013d05:	8d 76 00             	lea    esi,[esi+0x0]
c0013d08:	39 c3                	cmp    ebx,eax
c0013d0a:	75 e4                	jne    c0013cf0 <unblockTask(ThreadControlBlock*)+0x34>
c0013d0c:	eb 12                	jmp    c0013d20 <unblockTask(ThreadControlBlock*)+0x64>
c0013d0e:	66 90                	xchg   ax,ax
c0013d10:	83 ec 0c             	sub    esp,0xc
c0013d13:	68 fa eb 01 c0       	push   0xc001ebfa
c0013d18:	e8 64 68 ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c0013d1d:	83 c4 10             	add    esp,0x10
c0013d20:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013d25:	48                   	dec    eax
c0013d26:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013d2b:	75 03                	jne    c0013d30 <unblockTask(ThreadControlBlock*)+0x74>
c0013d2d:	fb                   	sti    
c0013d2e:	66 90                	xchg   ax,ax
c0013d30:	83 c4 08             	add    esp,0x8
c0013d33:	5b                   	pop    ebx
c0013d34:	c3                   	ret    
c0013d35:	8d 76 00             	lea    esi,[esi+0x0]
c0013d38:	83 ec 0c             	sub    esp,0xc
c0013d3b:	68 e3 eb 01 c0       	push   0xc001ebe3
c0013d40:	e8 3c 68 ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c0013d45:	83 c4 10             	add    esp,0x10
c0013d48:	eb d6                	jmp    c0013d20 <unblockTask(ThreadControlBlock*)+0x64>
c0013d4a:	66 90                	xchg   ax,ax
c0013d4c:	83 ec 08             	sub    esp,0x8
c0013d4f:	53                   	push   ebx
c0013d50:	68 84 51 02 c0       	push   0xc0025184
c0013d55:	e8 a2 8a 00 00       	call   c001c7fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013d5a:	83 c4 10             	add    esp,0x10
c0013d5d:	eb c1                	jmp    c0013d20 <unblockTask(ThreadControlBlock*)+0x64>
c0013d5f:	90                   	nop

c0013d60 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0013d60:	55                   	push   ebp
c0013d61:	57                   	push   edi
c0013d62:	56                   	push   esi
c0013d63:	53                   	push   ebx
c0013d64:	83 ec 1c             	sub    esp,0x1c
c0013d67:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0013d6b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013d6e:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0013d74:	85 ed                	test   ebp,ebp
c0013d76:	7e 24                	jle    c0013d9c <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0013d78:	31 f6                	xor    esi,esi
c0013d7a:	66 90                	xchg   ax,ax
c0013d7c:	83 ec 0c             	sub    esp,0xc
c0013d7f:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0013d86:	46                   	inc    esi
c0013d87:	57                   	push   edi
c0013d88:	e8 3c 3a ff ff       	call   c00077c9 <free>
c0013d8d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013d90:	83 c4 10             	add    esp,0x10
c0013d93:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0013d99:	7f e1                	jg     c0013d7c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0013d9b:	90                   	nop
c0013d9c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013da6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013dab:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0013dae:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0013db1:	d3 c0                	rol    eax,cl
c0013db3:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0013dba:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013dbd:	89 f7                	mov    edi,esi
c0013dbf:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0013dc7:	0f 85 77 01 00 00    	jne    c0013f44 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013dcd:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0013dd3:	85 ed                	test   ebp,ebp
c0013dd5:	74 1d                	je     c0013df4 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0013dd7:	83 ec 0c             	sub    esp,0xc
c0013dda:	55                   	push   ebp
c0013ddb:	e8 34 c1 ff ff       	call   c000ff14 <EnvVarContainer::~EnvVarContainer()>
c0013de0:	59                   	pop    ecx
c0013de1:	5e                   	pop    esi
c0013de2:	6a 0c                	push   0xc
c0013de4:	55                   	push   ebp
c0013de5:	e8 a1 66 ff ff       	call   c000a48b <operator delete(void*, unsigned long)>
c0013dea:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013ded:	83 c4 10             	add    esp,0x10
c0013df0:	89 f7                	mov    edi,esi
c0013df2:	66 90                	xchg   ax,ax
c0013df4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013dfa:	85 c0                	test   eax,eax
c0013dfc:	0f 84 b6 00 00 00    	je     c0013eb8 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013e02:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0013e05:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013e09:	31 c9                	xor    ecx,ecx
c0013e0b:	eb 17                	jmp    c0013e24 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0013e0d:	8d 76 00             	lea    esi,[esi+0x0]
c0013e10:	41                   	inc    ecx
c0013e11:	83 f9 10             	cmp    ecx,0x10
c0013e14:	0f 84 9e 00 00 00    	je     c0013eb8 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013e1a:	66 90                	xchg   ax,ax
c0013e1c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013e22:	66 90                	xchg   ax,ax
c0013e24:	31 d2                	xor    edx,edx
c0013e26:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c0013e2d:	d3 fa                	sar    edx,cl
c0013e2f:	83 e2 01             	and    edx,0x1
c0013e32:	74 dc                	je     c0013e10 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013e34:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0013e37:	01 d2                	add    edx,edx
c0013e39:	01 ca                	add    edx,ecx
c0013e3b:	8d 14 92             	lea    edx,[edx+edx*4]
c0013e3e:	01 d0                	add    eax,edx
c0013e40:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0013e46:	83 fd 07             	cmp    ebp,0x7
c0013e49:	75 c5                	jne    c0013e10 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013e4b:	05 40 02 00 00       	add    eax,0x240
c0013e50:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0013e53:	83 fd ff             	cmp    ebp,0xffffffff
c0013e56:	0f 8c f0 00 00 00    	jl     c0013f4c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0013e5c:	0f 84 ae 01 00 00    	je     c0014010 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c0013e62:	85 ed                	test   ebp,ebp
c0013e64:	0f 84 92 01 00 00    	je     c0013ffc <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c0013e6a:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0013e6c:	75 a2                	jne    c0013e10 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013e6e:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013e74:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013e78:	01 d0                	add    eax,edx
c0013e7a:	66 90                	xchg   ax,ax
c0013e7c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0013e80:	83 ec 0c             	sub    esp,0xc
c0013e83:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0013e89:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013e8c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013e92:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0013e99:	50                   	push   eax
c0013e9a:	e8 1d fe ff ff       	call   c0013cbc <unblockTask(ThreadControlBlock*)>
c0013e9f:	83 c4 10             	add    esp,0x10
c0013ea2:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013ea5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013ea9:	89 f7                	mov    edi,esi
c0013eab:	41                   	inc    ecx
c0013eac:	83 f9 10             	cmp    ecx,0x10
c0013eaf:	0f 85 67 ff ff ff    	jne    c0013e1c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0013eb5:	8d 76 00             	lea    esi,[esi+0x0]
c0013eb8:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0013ebe:	85 c0                	test   eax,eax
c0013ec0:	74 62                	je     c0013f24 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013ec2:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0013ec8:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0013ece:	74 54                	je     c0013f24 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013ed0:	83 ec 0c             	sub    esp,0xc
c0013ed3:	68 84 51 02 c0       	push   0xc0025184
c0013ed8:	e8 5f 88 00 00       	call   c001c73c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013edd:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c0013ee4:	89 c7                	mov    edi,eax
c0013ee6:	e8 35 88 00 00       	call   c001c720 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013eeb:	83 c4 10             	add    esp,0x10
c0013eee:	84 c0                	test   al,al
c0013ef0:	0f 84 ce 00 00 00    	je     c0013fc4 <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c0013ef6:	66 90                	xchg   ax,ax
c0013ef8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013efb:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013f01:	85 d2                	test   edx,edx
c0013f03:	74 0f                	je     c0013f14 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c0013f05:	83 ec 0c             	sub    esp,0xc
c0013f08:	8b 02                	mov    eax,DWORD PTR [edx]
c0013f0a:	52                   	push   edx
c0013f0b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013f0e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013f11:	83 c4 10             	add    esp,0x10
c0013f14:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0013f1e:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0013f21:	8d 76 00             	lea    esi,[esi+0x0]
c0013f24:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0013f2a:	85 db                	test   ebx,ebx
c0013f2c:	74 16                	je     c0013f44 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013f2e:	83 ec 0c             	sub    esp,0xc
c0013f31:	53                   	push   ebx
c0013f32:	e8 5d 58 ff ff       	call   c0009794 <VAS::~VAS()>
c0013f37:	58                   	pop    eax
c0013f38:	5a                   	pop    edx
c0013f39:	6a 14                	push   0x14
c0013f3b:	53                   	push   ebx
c0013f3c:	e8 4a 65 ff ff       	call   c000a48b <operator delete(void*, unsigned long)>
c0013f41:	83 c4 10             	add    esp,0x10
c0013f44:	83 c4 1c             	add    esp,0x1c
c0013f47:	5b                   	pop    ebx
c0013f48:	5e                   	pop    esi
c0013f49:	5f                   	pop    edi
c0013f4a:	5d                   	pop    ebp
c0013f4b:	c3                   	ret    
c0013f4c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013f50:	83 ec 0c             	sub    esp,0xc
c0013f53:	68 ac ec 01 c0       	push   0xc001ecac
c0013f58:	e8 a6 c2 ff ff       	call   c0010203 <KePanic(char const*)>
c0013f5d:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013f60:	83 c4 10             	add    esp,0x10
c0013f63:	89 f7                	mov    edi,esi
c0013f65:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013f69:	e9 a2 fe ff ff       	jmp    c0013e10 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013f6e:	66 90                	xchg   ax,ax
c0013f70:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013f76:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0013f7c:	75 1e                	jne    c0013f9c <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013f7e:	83 ec 0c             	sub    esp,0xc
c0013f81:	68 14 ed 01 c0       	push   0xc001ed14
c0013f86:	e8 f6 65 ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c0013f8b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013f92:	e8 5d fa ff ff       	call   c00139f4 <blockTask(TaskState)>
c0013f97:	83 c4 10             	add    esp,0x10
c0013f9a:	66 90                	xchg   ax,ax
c0013f9c:	83 ec 08             	sub    esp,0x8
c0013f9f:	56                   	push   esi
c0013fa0:	68 84 51 02 c0       	push   0xc0025184
c0013fa5:	e8 52 88 00 00       	call   c001c7fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013faa:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c0013fb1:	e8 86 87 00 00       	call   c001c73c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013fb6:	83 c4 10             	add    esp,0x10
c0013fb9:	39 f8                	cmp    eax,edi
c0013fbb:	0f 84 37 ff ff ff    	je     c0013ef8 <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c0013fc1:	8d 76 00             	lea    esi,[esi+0x0]
c0013fc4:	83 ec 0c             	sub    esp,0xc
c0013fc7:	68 84 51 02 c0       	push   0xc0025184
c0013fcc:	e8 6b 87 00 00       	call   c001c73c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013fd1:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c0013fd8:	89 c6                	mov    esi,eax
c0013fda:	e8 65 87 00 00       	call   c001c744 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013fdf:	83 c4 10             	add    esp,0x10
c0013fe2:	39 f3                	cmp    ebx,esi
c0013fe4:	74 b6                	je     c0013f9c <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013fe6:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0013fe9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013fec:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0013ff2:	75 a8                	jne    c0013f9c <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013ff4:	e9 77 ff ff ff       	jmp    c0013f70 <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c0013ff9:	8d 76 00             	lea    esi,[esi+0x0]
c0013ffc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014000:	83 ec 0c             	sub    esp,0xc
c0014003:	68 e0 ec 01 c0       	push   0xc001ece0
c0014008:	e9 4b ff ff ff       	jmp    c0013f58 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c001400d:	8d 76 00             	lea    esi,[esi+0x0]
c0014010:	8b 36                	mov    esi,DWORD PTR [esi]
c0014012:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014016:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0014019:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001401c:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0014022:	01 d7                	add    edi,edx
c0014024:	89 f8                	mov    eax,edi
c0014026:	e9 51 fe ff ff       	jmp    c0013e7c <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c001402b:	90                   	nop

c001402c <cleanerTaskFunction(void*)>:
c001402c:	53                   	push   ebx
c001402d:	83 ec 08             	sub    esp,0x8
c0014030:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014035:	48                   	dec    eax
c0014036:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001403b:	75 03                	jne    c0014040 <cleanerTaskFunction(void*)+0x14>
c001403d:	fb                   	sti    
c001403e:	66 90                	xchg   ax,ax
c0014040:	fa                   	cli    
c0014041:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014046:	80 3d 4c 51 02 c0 00 	cmp    BYTE PTR ds:0xc002514c,0x0
c001404d:	8d 50 01             	lea    edx,[eax+0x1]
c0014050:	89 15 68 51 02 c0    	mov    DWORD PTR ds:0xc0025168,edx
c0014056:	0f 84 ac 00 00 00    	je     c0014108 <cleanerTaskFunction(void*)+0xdc>
c001405c:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014061:	85 c0                	test   eax,eax
c0014063:	75 03                	jne    c0014068 <cleanerTaskFunction(void*)+0x3c>
c0014065:	fb                   	sti    
c0014066:	66 90                	xchg   ax,ax
c0014068:	c6 05 4c 51 02 c0 00 	mov    BYTE PTR ds:0xc002514c,0x0
c001406f:	fa                   	cli    
c0014070:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0014076:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c001407c:	fa                   	cli    
c001407d:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0014083:	eb 2b                	jmp    c00140b0 <cleanerTaskFunction(void*)+0x84>
c0014085:	8d 76 00             	lea    esi,[esi+0x0]
c0014088:	83 ec 0c             	sub    esp,0xc
c001408b:	68 6c 51 02 c0       	push   0xc002516c
c0014090:	e8 a7 86 00 00       	call   c001c73c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014095:	c7 04 24 6c 51 02 c0 	mov    DWORD PTR [esp],0xc002516c
c001409c:	89 c3                	mov    ebx,eax
c001409e:	e8 a1 86 00 00       	call   c001c744 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00140a3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00140a6:	e8 b5 fc ff ff       	call   c0013d60 <cleanupTerminatedTask(ThreadControlBlock*)>
c00140ab:	83 c4 10             	add    esp,0x10
c00140ae:	66 90                	xchg   ax,ax
c00140b0:	83 ec 0c             	sub    esp,0xc
c00140b3:	68 6c 51 02 c0       	push   0xc002516c
c00140b8:	e8 63 86 00 00       	call   c001c720 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00140bd:	83 c4 10             	add    esp,0x10
c00140c0:	84 c0                	test   al,al
c00140c2:	74 c4                	je     c0014088 <cleanerTaskFunction(void*)+0x5c>
c00140c4:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00140c9:	48                   	dec    eax
c00140ca:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00140cf:	75 03                	jne    c00140d4 <cleanerTaskFunction(void*)+0xa8>
c00140d1:	fb                   	sti    
c00140d2:	66 90                	xchg   ax,ax
c00140d4:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c00140d9:	48                   	dec    eax
c00140da:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c00140df:	0f 85 4b ff ff ff    	jne    c0014030 <cleanerTaskFunction(void*)+0x4>
c00140e5:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c00140ea:	85 c0                	test   eax,eax
c00140ec:	0f 84 3e ff ff ff    	je     c0014030 <cleanerTaskFunction(void*)+0x4>
c00140f2:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c00140fc:	e8 f7 f6 ff ff       	call   c00137f8 <schedule()>
c0014101:	e9 2a ff ff ff       	jmp    c0014030 <cleanerTaskFunction(void*)+0x4>
c0014106:	66 90                	xchg   ax,ax
c0014108:	83 ec 0c             	sub    esp,0xc
c001410b:	6a 02                	push   0x2
c001410d:	e8 ba f8 ff ff       	call   c00139cc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0014112:	83 c4 10             	add    esp,0x10
c0014115:	e9 4e ff ff ff       	jmp    c0014068 <cleanerTaskFunction(void*)+0x3c>
c001411a:	66 90                	xchg   ax,ax

c001411c <terminateTask(int)>:
c001411c:	83 ec 14             	sub    esp,0x14
c001411f:	fa                   	cli    
c0014120:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0014126:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c001412c:	fa                   	cli    
c001412d:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0014133:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014137:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001413c:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c001413f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014144:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0014147:	50                   	push   eax
c0014148:	68 6c 51 02 c0       	push   0xc002516c
c001414d:	e8 aa 86 00 00       	call   c001c7fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014152:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014157:	83 c4 10             	add    esp,0x10
c001415a:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0014161:	a1 48 51 02 c0       	mov    eax,ds:0xc0025148
c0014166:	85 c0                	test   eax,eax
c0014168:	74 5e                	je     c00141c8 <terminateTask(int)+0xac>
c001416a:	83 ec 0c             	sub    esp,0xc
c001416d:	c6 05 4c 51 02 c0 01 	mov    BYTE PTR ds:0xc002514c,0x1
c0014174:	50                   	push   eax
c0014175:	e8 42 fb ff ff       	call   c0013cbc <unblockTask(ThreadControlBlock*)>
c001417a:	83 c4 10             	add    esp,0x10
c001417d:	8d 76 00             	lea    esi,[esi+0x0]
c0014180:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014185:	48                   	dec    eax
c0014186:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001418b:	75 03                	jne    c0014190 <terminateTask(int)+0x74>
c001418d:	fb                   	sti    
c001418e:	66 90                	xchg   ax,ax
c0014190:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0014195:	48                   	dec    eax
c0014196:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c001419b:	75 0b                	jne    c00141a8 <terminateTask(int)+0x8c>
c001419d:	83 3d 60 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025160,0x0
c00141a4:	75 36                	jne    c00141dc <terminateTask(int)+0xc0>
c00141a6:	66 90                	xchg   ax,ax
c00141a8:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00141ad:	48                   	dec    eax
c00141ae:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00141b3:	75 03                	jne    c00141b8 <terminateTask(int)+0x9c>
c00141b5:	fb                   	sti    
c00141b6:	66 90                	xchg   ax,ax
c00141b8:	fa                   	cli    
c00141b9:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00141bf:	90                   	nop
c00141c0:	e8 33 f6 ff ff       	call   c00137f8 <schedule()>
c00141c5:	eb e1                	jmp    c00141a8 <terminateTask(int)+0x8c>
c00141c7:	90                   	nop
c00141c8:	83 ec 0c             	sub    esp,0xc
c00141cb:	68 11 ec 01 c0       	push   0xc001ec11
c00141d0:	e8 ac 63 ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c00141d5:	83 c4 10             	add    esp,0x10
c00141d8:	eb a6                	jmp    c0014180 <terminateTask(int)+0x64>
c00141da:	66 90                	xchg   ax,ax
c00141dc:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c00141e6:	eb d8                	jmp    c00141c0 <terminateTask(int)+0xa4>

c00141e8 <Thr::terminateFromIRQ(int)>:
c00141e8:	83 ec 18             	sub    esp,0x18
c00141eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00141ef:	50                   	push   eax
c00141f0:	e8 27 ff ff ff       	call   c001411c <terminateTask(int)>
c00141f5:	90                   	nop
c00141f6:	66 90                	xchg   ax,ax

c00141f8 <Semaphore::release()>:
c00141f8:	83 ec 0c             	sub    esp,0xc
c00141fb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00141ff:	fa                   	cli    
c0014200:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0014205:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001420b:	8d 48 01             	lea    ecx,[eax+0x1]
c001420e:	89 0d 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,ecx
c0014214:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0014217:	85 c9                	test   ecx,ecx
c0014219:	74 41                	je     c001425c <Semaphore::release()+0x64>
c001421b:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001421e:	83 ec 0c             	sub    esp,0xc
c0014221:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014224:	51                   	push   ecx
c0014225:	e8 92 fa ff ff       	call   c0013cbc <unblockTask(ThreadControlBlock*)>
c001422a:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c001422f:	83 c4 10             	add    esp,0x10
c0014232:	48                   	dec    eax
c0014233:	90                   	nop
c0014234:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c0014239:	85 c0                	test   eax,eax
c001423b:	75 0b                	jne    c0014248 <Semaphore::release()+0x50>
c001423d:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c0014242:	85 c0                	test   eax,eax
c0014244:	75 1e                	jne    c0014264 <Semaphore::release()+0x6c>
c0014246:	66 90                	xchg   ax,ax
c0014248:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001424d:	48                   	dec    eax
c001424e:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014253:	75 03                	jne    c0014258 <Semaphore::release()+0x60>
c0014255:	fb                   	sti    
c0014256:	66 90                	xchg   ax,ax
c0014258:	83 c4 0c             	add    esp,0xc
c001425b:	c3                   	ret    
c001425c:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001425f:	eb d3                	jmp    c0014234 <Semaphore::release()+0x3c>
c0014261:	8d 76 00             	lea    esi,[esi+0x0]
c0014264:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c001426e:	e8 85 f5 ff ff       	call   c00137f8 <schedule()>
c0014273:	eb d3                	jmp    c0014248 <Semaphore::release()+0x50>
c0014275:	8d 76 00             	lea    esi,[esi+0x0]

c0014278 <__static_initialization_and_destruction_0(int, int)>:
c0014278:	83 ec 0c             	sub    esp,0xc
c001427b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0014280:	0f 85 8e 00 00 00    	jne    c0014314 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0014286:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001428e:	0f 85 80 00 00 00    	jne    c0014314 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0014294:	83 ec 0c             	sub    esp,0xc
c0014297:	68 84 51 02 c0       	push   0xc0025184
c001429c:	e8 07 88 00 00       	call   c001caa8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00142a1:	83 c4 10             	add    esp,0x10
c00142a4:	83 ec 04             	sub    esp,0x4
c00142a7:	68 c4 f7 01 c0       	push   0xc001f7c4
c00142ac:	68 84 51 02 c0       	push   0xc0025184
c00142b1:	68 58 ca 01 c0       	push   0xc001ca58
c00142b6:	e8 80 61 ff ff       	call   c000a43b <__cxa_atexit>
c00142bb:	83 c4 10             	add    esp,0x10
c00142be:	83 ec 0c             	sub    esp,0xc
c00142c1:	68 78 51 02 c0       	push   0xc0025178
c00142c6:	e8 dd 87 00 00       	call   c001caa8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00142cb:	83 c4 10             	add    esp,0x10
c00142ce:	83 ec 04             	sub    esp,0x4
c00142d1:	68 c4 f7 01 c0       	push   0xc001f7c4
c00142d6:	68 78 51 02 c0       	push   0xc0025178
c00142db:	68 58 ca 01 c0       	push   0xc001ca58
c00142e0:	e8 56 61 ff ff       	call   c000a43b <__cxa_atexit>
c00142e5:	83 c4 10             	add    esp,0x10
c00142e8:	83 ec 0c             	sub    esp,0xc
c00142eb:	68 6c 51 02 c0       	push   0xc002516c
c00142f0:	e8 b3 87 00 00       	call   c001caa8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00142f5:	83 c4 10             	add    esp,0x10
c00142f8:	83 ec 04             	sub    esp,0x4
c00142fb:	68 c4 f7 01 c0       	push   0xc001f7c4
c0014300:	68 6c 51 02 c0       	push   0xc002516c
c0014305:	68 58 ca 01 c0       	push   0xc001ca58
c001430a:	e8 2c 61 ff ff       	call   c000a43b <__cxa_atexit>
c001430f:	83 c4 10             	add    esp,0x10
c0014312:	66 90                	xchg   ax,ax
c0014314:	90                   	nop
c0014315:	83 c4 0c             	add    esp,0xc
c0014318:	c3                   	ret    
c0014319:	8d 76 00             	lea    esi,[esi+0x0]

c001431c <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001431c:	83 ec 0c             	sub    esp,0xc
c001431f:	83 ec 08             	sub    esp,0x8
c0014322:	68 ff ff 00 00       	push   0xffff
c0014327:	6a 01                	push   0x1
c0014329:	e8 4a ff ff ff       	call   c0014278 <__static_initialization_and_destruction_0(int, int)>
c001432e:	83 c4 10             	add    esp,0x10
c0014331:	83 c4 0c             	add    esp,0xc
c0014334:	c3                   	ret    

c0014335 <Vm::inbv(unsigned short)>:
c0014335:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014339:	66 81 fa fe fe       	cmp    dx,0xfefe
c001433e:	75 06                	jne    c0014346 <Vm::inbv(unsigned short)+0x11>
c0014340:	a0 cc 51 02 c0       	mov    al,ds:0xc00251cc
c0014345:	c3                   	ret    
c0014346:	ec                   	in     al,dx
c0014347:	c3                   	ret    

c0014348 <Vm::outbv(unsigned short, unsigned char)>:
c0014348:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001434c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014350:	66 81 fa fe fe       	cmp    dx,0xfefe
c0014355:	75 25                	jne    c001437c <Vm::outbv(unsigned short, unsigned char)+0x34>
c0014357:	8b 0d cc 51 02 c0    	mov    ecx,DWORD PTR ds:0xc00251cc
c001435d:	8d 51 01             	lea    edx,[ecx+0x1]
c0014360:	88 81 e0 51 02 c0    	mov    BYTE PTR [ecx-0x3ffdae20],al
c0014366:	89 15 cc 51 02 c0    	mov    DWORD PTR ds:0xc00251cc,edx
c001436c:	83 fa 20             	cmp    edx,0x20
c001436f:	75 0c                	jne    c001437d <Vm::outbv(unsigned short, unsigned char)+0x35>
c0014371:	c7 05 cc 51 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00251cc,0x1f
c001437b:	c3                   	ret    
c001437c:	ee                   	out    dx,al
c001437d:	c3                   	ret    

c001437e <Vm::realToLinear(unsigned short, unsigned short)>:
c001437e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014383:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014388:	c1 e0 04             	shl    eax,0x4
c001438b:	01 d0                	add    eax,edx
c001438d:	c3                   	ret    

c001438e <Vm::getSegment(unsigned int)>:
c001438e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014392:	c1 e8 10             	shr    eax,0x10
c0014395:	c3                   	ret    

c0014396 <Vm::getOffset(unsigned int)>:
c0014396:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001439a:	c3                   	ret    

c001439b <Vm::mainloop2()>:
c001439b:	83 ec 18             	sub    esp,0x18
c001439e:	fa                   	cli    
c001439f:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00143a5:	6a 02                	push   0x2
c00143a7:	c6 05 c5 51 02 c0 01 	mov    BYTE PTR ds:0xc00251c5,0x1
c00143ae:	e8 19 f6 ff ff       	call   c00139cc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00143b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143b8:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00143bc:	52                   	push   edx
c00143bd:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c00143c1:	52                   	push   edx
c00143c2:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c00143c6:	52                   	push   edx
c00143c7:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c00143cb:	50                   	push   eax
c00143cc:	e8 3e be fe ff       	call   c000020f <goToVM86>
c00143d1:	83 c4 2c             	add    esp,0x2c
c00143d4:	c3                   	ret    

c00143d5 <Vm::mainVm8086Loop(void*)>:
c00143d5:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00143da:	48                   	dec    eax
c00143db:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00143e0:	75 01                	jne    c00143e3 <Vm::mainVm8086Loop(void*)+0xe>
c00143e2:	fb                   	sti    
c00143e3:	eb b6                	jmp    c001439b <Vm::mainloop2()>

c00143e5 <Vm::mainloop3(unsigned long)>:
c00143e5:	83 ec 18             	sub    esp,0x18
c00143e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00143ec:	fa                   	cli    
c00143ed:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00143f3:	6a 02                	push   0x2
c00143f5:	c6 05 c4 51 02 c0 01 	mov    BYTE PTR ds:0xc00251c4,0x1
c00143fc:	a3 c0 51 02 c0       	mov    ds:0xc00251c0,eax
c0014401:	e8 c6 f5 ff ff       	call   c00139cc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0014406:	83 c4 1c             	add    esp,0x1c
c0014409:	eb 90                	jmp    c001439b <Vm::mainloop2()>

c001440b <Vm::initialise8086()>:
c001440b:	83 ec 0c             	sub    esp,0xc
c001440e:	68 80 00 00 00       	push   0x80
c0014413:	6a 00                	push   0x0
c0014415:	68 d5 43 01 c0       	push   0xc00143d5
c001441a:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c0014420:	e8 b3 f1 ff ff       	call   c00135d8 <Process::createThread(void (*)(void*), void*, int)>
c0014425:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001442c:	a3 c8 51 02 c0       	mov    ds:0xc00251c8,eax
c0014431:	68 00 01 00 00       	push   0x100
c0014436:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c001443b:	6a 00                	push   0x0
c001443d:	6a 00                	push   0x0
c001443f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014445:	e8 a8 57 ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001444a:	83 c4 2c             	add    esp,0x2c
c001444d:	c3                   	ret    

c001444e <Vm::finish8086()>:
c001444e:	53                   	push   ebx
c001444f:	83 ec 08             	sub    esp,0x8
c0014452:	fa                   	cli    
c0014453:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0014459:	80 3d c4 51 02 c0 00 	cmp    BYTE PTR ds:0xc00251c4,0x0
c0014460:	75 15                	jne    c0014477 <Vm::finish8086()+0x29>
c0014462:	e8 91 f3 ff ff       	call   c00137f8 <schedule()>
c0014467:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001446c:	48                   	dec    eax
c001446d:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014472:	75 de                	jne    c0014452 <Vm::finish8086()+0x4>
c0014474:	fb                   	sti    
c0014475:	eb db                	jmp    c0014452 <Vm::finish8086()+0x4>
c0014477:	83 ec 0c             	sub    esp,0xc
c001447a:	8b 1d c0 51 02 c0    	mov    ebx,DWORD PTR ds:0xc00251c0
c0014480:	ff 35 c8 51 02 c0    	push   DWORD PTR ds:0xc00251c8
c0014486:	c6 05 c4 51 02 c0 00 	mov    BYTE PTR ds:0xc00251c4,0x0
c001448d:	e8 2a f8 ff ff       	call   c0013cbc <unblockTask(ThreadControlBlock*)>
c0014492:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014497:	83 c4 10             	add    esp,0x10
c001449a:	8d 50 ff             	lea    edx,[eax-0x1]
c001449d:	89 15 68 51 02 c0    	mov    DWORD PTR ds:0xc0025168,edx
c00144a3:	85 d2                	test   edx,edx
c00144a5:	75 01                	jne    c00144a8 <Vm::finish8086()+0x5a>
c00144a7:	fb                   	sti    
c00144a8:	89 d8                	mov    eax,ebx
c00144aa:	83 c4 08             	add    esp,0x8
c00144ad:	5b                   	pop    ebx
c00144ae:	c3                   	ret    

c00144af <Vm::getOutput8086(unsigned char*)>:
c00144af:	57                   	push   edi
c00144b0:	8b 0d cc 51 02 c0    	mov    ecx,DWORD PTR ds:0xc00251cc
c00144b6:	56                   	push   esi
c00144b7:	be e0 51 02 c0       	mov    esi,0xc00251e0
c00144bc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00144c0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00144c2:	a1 cc 51 02 c0       	mov    eax,ds:0xc00251cc
c00144c7:	5e                   	pop    esi
c00144c8:	c7 05 cc 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00251cc,0x0
c00144d2:	5f                   	pop    edi
c00144d3:	c3                   	ret    

c00144d4 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00144d4:	55                   	push   ebp
c00144d5:	57                   	push   edi
c00144d6:	56                   	push   esi
c00144d7:	53                   	push   ebx
c00144d8:	83 ec 0c             	sub    esp,0xc
c00144db:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00144df:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00144e3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00144e7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00144eb:	fa                   	cli    
c00144ec:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00144f2:	80 3d c5 51 02 c0 00 	cmp    BYTE PTR ds:0xc00251c5,0x0
c00144f9:	75 15                	jne    c0014510 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c00144fb:	e8 f8 f2 ff ff       	call   c00137f8 <schedule()>
c0014500:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014505:	48                   	dec    eax
c0014506:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001450b:	75 de                	jne    c00144eb <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001450d:	fb                   	sti    
c001450e:	eb db                	jmp    c00144eb <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014510:	a1 c8 51 02 c0       	mov    eax,ds:0xc00251c8
c0014515:	c7 05 cc 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00251cc,0x0
c001451f:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0014523:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0014527:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001452b:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001452f:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0014533:	0f b7 ff             	movzx  edi,di
c0014536:	0f b7 f6             	movzx  esi,si
c0014539:	50                   	push   eax
c001453a:	6a 20                	push   0x20
c001453c:	6a 00                	push   0x0
c001453e:	68 e0 51 02 c0       	push   0xc00251e0
c0014543:	e8 88 bf fe ff       	call   c00004d0 <memset>
c0014548:	5a                   	pop    edx
c0014549:	59                   	pop    ecx
c001454a:	57                   	push   edi
c001454b:	56                   	push   esi
c001454c:	e8 2d fe ff ff       	call   c001437e <Vm::realToLinear(unsigned short, unsigned short)>
c0014551:	83 c4 10             	add    esp,0x10
c0014554:	89 c7                	mov    edi,eax
c0014556:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001455a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001455e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014560:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014565:	c6 05 c5 51 02 c0 00 	mov    BYTE PTR ds:0xc00251c5,0x0
c001456c:	48                   	dec    eax
c001456d:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014572:	75 01                	jne    c0014575 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0014574:	fb                   	sti    
c0014575:	83 ec 0c             	sub    esp,0xc
c0014578:	ff 35 c8 51 02 c0    	push   DWORD PTR ds:0xc00251c8
c001457e:	e8 39 f7 ff ff       	call   c0013cbc <unblockTask(ThreadControlBlock*)>
c0014583:	83 c4 1c             	add    esp,0x1c
c0014586:	b0 01                	mov    al,0x1
c0014588:	5b                   	pop    ebx
c0014589:	5e                   	pop    esi
c001458a:	5f                   	pop    edi
c001458b:	5d                   	pop    ebp
c001458c:	c3                   	ret    

c001458d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001458d:	55                   	push   ebp
c001458e:	57                   	push   edi
c001458f:	56                   	push   esi
c0014590:	53                   	push   ebx
c0014591:	83 ec 2c             	sub    esp,0x2c
c0014594:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0014598:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001459c:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00145a0:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00145a4:	fa                   	cli    
c00145a5:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00145ab:	0f b6 35 c5 51 02 c0 	movzx  esi,BYTE PTR ds:0xc00251c5
c00145b2:	89 f0                	mov    eax,esi
c00145b4:	84 c0                	test   al,al
c00145b6:	75 1d                	jne    c00145d5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c00145b8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00145bc:	e8 37 f2 ff ff       	call   c00137f8 <schedule()>
c00145c1:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00145c6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00145ca:	48                   	dec    eax
c00145cb:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00145d0:	75 d2                	jne    c00145a4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00145d2:	fb                   	sti    
c00145d3:	eb cf                	jmp    c00145a4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00145d5:	a1 c8 51 02 c0       	mov    eax,ds:0xc00251c8
c00145da:	c7 05 cc 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00251cc,0x0
c00145e4:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c00145e8:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00145ec:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c00145f0:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c00145f4:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00145f8:	50                   	push   eax
c00145f9:	6a 20                	push   0x20
c00145fb:	6a 00                	push   0x0
c00145fd:	68 e0 51 02 c0       	push   0xc00251e0
c0014602:	e8 c9 be fe ff       	call   c00004d0 <memset>
c0014607:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001460e:	e8 a6 31 ff ff       	call   c00077b9 <malloc>
c0014613:	83 c4 0c             	add    esp,0xc
c0014616:	89 c3                	mov    ebx,eax
c0014618:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c001461e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0014622:	50                   	push   eax
c0014623:	e8 ce 64 ff ff       	call   c000aaf6 <File::File(char const*, Process*)>
c0014628:	83 c4 10             	add    esp,0x10
c001462b:	85 db                	test   ebx,ebx
c001462d:	75 0a                	jne    c0014639 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001462f:	83 ec 0c             	sub    esp,0xc
c0014632:	68 3c ed 01 c0       	push   0xc001ed3c
c0014637:	eb 3e                	jmp    c0014677 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0014639:	50                   	push   eax
c001463a:	8d 44 24 17          	lea    eax,[esp+0x17]
c001463e:	50                   	push   eax
c001463f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014643:	50                   	push   eax
c0014644:	53                   	push   ebx
c0014645:	e8 18 68 ff ff       	call   c000ae62 <File::stat(unsigned long long*, bool*)>
c001464a:	83 c4 10             	add    esp,0x10
c001464d:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0014652:	74 0a                	je     c001465e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0014654:	83 ec 0c             	sub    esp,0xc
c0014657:	68 50 ed 01 c0       	push   0xc001ed50
c001465c:	eb 19                	jmp    c0014677 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001465e:	51                   	push   ecx
c001465f:	51                   	push   ecx
c0014660:	6a 01                	push   0x1
c0014662:	53                   	push   ebx
c0014663:	e8 4e 65 ff ff       	call   c000abb6 <File::open(FileOpenMode)>
c0014668:	83 c4 10             	add    esp,0x10
c001466b:	85 c0                	test   eax,eax
c001466d:	74 24                	je     c0014693 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001466f:	83 ec 0c             	sub    esp,0xc
c0014672:	68 69 ed 01 c0       	push   0xc001ed69
c0014677:	e8 87 bb ff ff       	call   c0010203 <KePanic(char const*)>
c001467c:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014681:	83 c4 10             	add    esp,0x10
c0014684:	48                   	dec    eax
c0014685:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001468a:	85 c0                	test   eax,eax
c001468c:	75 01                	jne    c001468f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001468e:	fb                   	sti    
c001468f:	31 f6                	xor    esi,esi
c0014691:	eb 58                	jmp    c00146eb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0014693:	0f b7 ed             	movzx  ebp,bp
c0014696:	50                   	push   eax
c0014697:	0f b7 ff             	movzx  edi,di
c001469a:	50                   	push   eax
c001469b:	55                   	push   ebp
c001469c:	57                   	push   edi
c001469d:	e8 dc fc ff ff       	call   c001437e <Vm::realToLinear(unsigned short, unsigned short)>
c00146a2:	5a                   	pop    edx
c00146a3:	8b 13                	mov    edx,DWORD PTR [ebx]
c00146a5:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00146a9:	51                   	push   ecx
c00146aa:	50                   	push   eax
c00146ab:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00146af:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00146b3:	53                   	push   ebx
c00146b4:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00146b7:	83 c4 14             	add    esp,0x14
c00146ba:	53                   	push   ebx
c00146bb:	e8 54 65 ff ff       	call   c000ac14 <File::close()>
c00146c0:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00146c5:	83 c4 10             	add    esp,0x10
c00146c8:	48                   	dec    eax
c00146c9:	c6 05 c5 51 02 c0 00 	mov    BYTE PTR ds:0xc00251c5,0x0
c00146d0:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00146d5:	85 c0                	test   eax,eax
c00146d7:	75 01                	jne    c00146da <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c00146d9:	fb                   	sti    
c00146da:	83 ec 0c             	sub    esp,0xc
c00146dd:	ff 35 c8 51 02 c0    	push   DWORD PTR ds:0xc00251c8
c00146e3:	e8 d4 f5 ff ff       	call   c0013cbc <unblockTask(ThreadControlBlock*)>
c00146e8:	83 c4 10             	add    esp,0x10
c00146eb:	83 c4 2c             	add    esp,0x2c
c00146ee:	89 f0                	mov    eax,esi
c00146f0:	5b                   	pop    ebx
c00146f1:	5e                   	pop    esi
c00146f2:	5f                   	pop    edi
c00146f3:	5d                   	pop    ebp
c00146f4:	c3                   	ret    

c00146f5 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00146f5:	57                   	push   edi
c00146f6:	56                   	push   esi
c00146f7:	53                   	push   ebx
c00146f8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00146fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014700:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014704:	83 e8 06             	sub    eax,0x6
c0014707:	0f b7 c0             	movzx  eax,ax
c001470a:	50                   	push   eax
c001470b:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0014710:	50                   	push   eax
c0014711:	e8 68 fc ff ff       	call   c001437e <Vm::realToLinear(unsigned short, unsigned short)>
c0014716:	5a                   	pop    edx
c0014717:	5e                   	pop    esi
c0014718:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001471b:	8d 56 fa             	lea    edx,[esi-0x6]
c001471e:	81 e2 ff ff 00 00    	and    edx,0xffff
c0014724:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0014727:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001472a:	83 c2 02             	add    edx,0x2
c001472d:	66 89 10             	mov    WORD PTR [eax],dx
c0014730:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0014733:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0014737:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001473a:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001473e:	89 d6                	mov    esi,edx
c0014740:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0014746:	66 81 e6 ff fd       	and    si,0xfdff
c001474b:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c001474f:	74 07                	je     c0014758 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0014751:	89 d6                	mov    esi,edx
c0014753:	66 81 ce 00 02       	or     si,0x200
c0014758:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001475c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014761:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014765:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001476d:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0014770:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0014778:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001477b:	5b                   	pop    ebx
c001477c:	5e                   	pop    esi
c001477d:	5f                   	pop    edi
c001477e:	c3                   	ret    

c001477f <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001477f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014784:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014789:	c1 e0 04             	shl    eax,0x4
c001478c:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001478f:	c3                   	ret    

c0014790 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0014790:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014795:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001479a:	c1 e0 04             	shl    eax,0x4
c001479d:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00147a1:	c3                   	ret    

c00147a2 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00147a2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00147a7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00147ac:	c1 e0 04             	shl    eax,0x4
c00147af:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00147b2:	c3                   	ret    

c00147b3 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00147b3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00147b8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00147bd:	c1 e0 04             	shl    eax,0x4
c00147c0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00147c4:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00147c7:	c3                   	ret    

c00147c8 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00147c8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00147cd:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00147d2:	c1 e0 04             	shl    eax,0x4
c00147d5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00147d9:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00147dd:	c3                   	ret    

c00147de <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00147de:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00147e3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00147e8:	c1 e0 04             	shl    eax,0x4
c00147eb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00147ef:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00147f2:	c3                   	ret    

c00147f3 <Vm::faultHandler(regs*)>:
c00147f3:	55                   	push   ebp
c00147f4:	57                   	push   edi
c00147f5:	56                   	push   esi
c00147f6:	53                   	push   ebx
c00147f7:	83 ec 1c             	sub    esp,0x1c
c00147fa:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00147fe:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014801:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0014805:	0f b7 f8             	movzx  edi,ax
c0014808:	52                   	push   edx
c0014809:	0f b7 c0             	movzx  eax,ax
c001480c:	50                   	push   eax
c001480d:	e8 6c fb ff ff       	call   c001437e <Vm::realToLinear(unsigned short, unsigned short)>
c0014812:	5a                   	pop    edx
c0014813:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0014816:	59                   	pop    ecx
c0014817:	89 c1                	mov    ecx,eax
c0014819:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001481c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014820:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014825:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014829:	0f b7 c5             	movzx  eax,bp
c001482c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014830:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0014834:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014838:	e8 41 fb ff ff       	call   c001437e <Vm::realToLinear(unsigned short, unsigned short)>
c001483d:	5e                   	pop    esi
c001483e:	be 06 00 00 00       	mov    esi,0x6
c0014843:	5a                   	pop    edx
c0014844:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0014849:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001484e:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0014851:	80 fa 9d             	cmp    dl,0x9d
c0014854:	0f 84 2c 02 00 00    	je     c0014a86 <Vm::faultHandler(regs*)+0x293>
c001485a:	0f 87 91 00 00 00    	ja     c00148f1 <Vm::faultHandler(regs*)+0xfe>
c0014860:	80 fa 66             	cmp    dl,0x66
c0014863:	0f 84 98 01 00 00    	je     c0014a01 <Vm::faultHandler(regs*)+0x20e>
c0014869:	77 47                	ja     c00148b2 <Vm::faultHandler(regs*)+0xbf>
c001486b:	80 fa 36             	cmp    dl,0x36
c001486e:	0f 84 80 01 00 00    	je     c00149f4 <Vm::faultHandler(regs*)+0x201>
c0014874:	77 1a                	ja     c0014890 <Vm::faultHandler(regs*)+0x9d>
c0014876:	80 fa 26             	cmp    dl,0x26
c0014879:	0f 84 4e 01 00 00    	je     c00149cd <Vm::faultHandler(regs*)+0x1da>
c001487f:	80 fa 2e             	cmp    dl,0x2e
c0014882:	0f 85 e2 05 00 00    	jne    c0014e6a <Vm::faultHandler(regs*)+0x677>
c0014888:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001488b:	31 f6                	xor    esi,esi
c001488d:	41                   	inc    ecx
c001488e:	eb be                	jmp    c001484e <Vm::faultHandler(regs*)+0x5b>
c0014890:	80 fa 64             	cmp    dl,0x64
c0014893:	0f 84 41 01 00 00    	je     c00149da <Vm::faultHandler(regs*)+0x1e7>
c0014899:	0f 87 48 01 00 00    	ja     c00149e7 <Vm::faultHandler(regs*)+0x1f4>
c001489f:	80 fa 3e             	cmp    dl,0x3e
c00148a2:	0f 85 c2 05 00 00    	jne    c0014e6a <Vm::faultHandler(regs*)+0x677>
c00148a8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00148ab:	be 01 00 00 00       	mov    esi,0x1
c00148b0:	eb db                	jmp    c001488d <Vm::faultHandler(regs*)+0x9a>
c00148b2:	80 fa 6d             	cmp    dl,0x6d
c00148b5:	0f 84 ec 02 00 00    	je     c0014ba7 <Vm::faultHandler(regs*)+0x3b4>
c00148bb:	77 17                	ja     c00148d4 <Vm::faultHandler(regs*)+0xe1>
c00148bd:	80 fa 67             	cmp    dl,0x67
c00148c0:	0f 84 48 01 00 00    	je     c0014a0e <Vm::faultHandler(regs*)+0x21b>
c00148c6:	80 fa 6c             	cmp    dl,0x6c
c00148c9:	0f 84 69 02 00 00    	je     c0014b38 <Vm::faultHandler(regs*)+0x345>
c00148cf:	e9 96 05 00 00       	jmp    c0014e6a <Vm::faultHandler(regs*)+0x677>
c00148d4:	80 fa 6f             	cmp    dl,0x6f
c00148d7:	0f 84 f4 03 00 00    	je     c0014cd1 <Vm::faultHandler(regs*)+0x4de>
c00148dd:	0f 82 59 03 00 00    	jb     c0014c3c <Vm::faultHandler(regs*)+0x449>
c00148e3:	80 fa 9c             	cmp    dl,0x9c
c00148e6:	0f 84 2f 01 00 00    	je     c0014a1b <Vm::faultHandler(regs*)+0x228>
c00148ec:	e9 79 05 00 00       	jmp    c0014e6a <Vm::faultHandler(regs*)+0x677>
c00148f1:	80 fa ec             	cmp    dl,0xec
c00148f4:	0f 84 14 05 00 00    	je     c0014e0e <Vm::faultHandler(regs*)+0x61b>
c00148fa:	77 7b                	ja     c0014977 <Vm::faultHandler(regs*)+0x184>
c00148fc:	80 fa e4             	cmp    dl,0xe4
c00148ff:	0f 84 93 04 00 00    	je     c0014d98 <Vm::faultHandler(regs*)+0x5a5>
c0014905:	77 53                	ja     c001495a <Vm::faultHandler(regs*)+0x167>
c0014907:	80 fa cd             	cmp    dl,0xcd
c001490a:	0f 84 d9 01 00 00    	je     c0014ae9 <Vm::faultHandler(regs*)+0x2f6>
c0014910:	80 fa cf             	cmp    dl,0xcf
c0014913:	0f 85 51 05 00 00    	jne    c0014e6a <Vm::faultHandler(regs*)+0x677>
c0014919:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001491c:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001491f:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0014923:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0014926:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001492a:	81 ca 00 02 02 00    	or     edx,0x20200
c0014930:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014933:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014937:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001493d:	66 c1 e8 09          	shr    ax,0x9
c0014941:	83 e0 01             	and    eax,0x1
c0014944:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014947:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001494a:	83 c0 06             	add    eax,0x6
c001494d:	25 ff ff 00 00       	and    eax,0xffff
c0014952:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014955:	e9 0c 05 00 00       	jmp    c0014e66 <Vm::faultHandler(regs*)+0x673>
c001495a:	80 fa e6             	cmp    dl,0xe6
c001495d:	0f 84 7f 04 00 00    	je     c0014de2 <Vm::faultHandler(regs*)+0x5ef>
c0014963:	0f 82 4b 04 00 00    	jb     c0014db4 <Vm::faultHandler(regs*)+0x5c1>
c0014969:	80 fa e7             	cmp    dl,0xe7
c001496c:	0f 84 87 04 00 00    	je     c0014df9 <Vm::faultHandler(regs*)+0x606>
c0014972:	e9 f3 04 00 00       	jmp    c0014e6a <Vm::faultHandler(regs*)+0x677>
c0014977:	80 fa ef             	cmp    dl,0xef
c001497a:	0f 84 d1 04 00 00    	je     c0014e51 <Vm::faultHandler(regs*)+0x65e>
c0014980:	77 28                	ja     c00149aa <Vm::faultHandler(regs*)+0x1b7>
c0014982:	80 fa ed             	cmp    dl,0xed
c0014985:	0f 84 9f 04 00 00    	je     c0014e2a <Vm::faultHandler(regs*)+0x637>
c001498b:	80 fa ee             	cmp    dl,0xee
c001498e:	0f 85 d6 04 00 00    	jne    c0014e6a <Vm::faultHandler(regs*)+0x677>
c0014994:	50                   	push   eax
c0014995:	50                   	push   eax
c0014996:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001499a:	50                   	push   eax
c001499b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001499f:	50                   	push   eax
c00149a0:	e8 a3 f9 ff ff       	call   c0014348 <Vm::outbv(unsigned short, unsigned char)>
c00149a5:	e9 9f 04 00 00       	jmp    c0014e49 <Vm::faultHandler(regs*)+0x656>
c00149aa:	80 fa fa             	cmp    dl,0xfa
c00149ad:	0f 84 69 01 00 00    	je     c0014b1c <Vm::faultHandler(regs*)+0x329>
c00149b3:	80 fa fb             	cmp    dl,0xfb
c00149b6:	0f 84 6e 01 00 00    	je     c0014b2a <Vm::faultHandler(regs*)+0x337>
c00149bc:	80 fa f3             	cmp    dl,0xf3
c00149bf:	0f 85 a5 04 00 00    	jne    c0014e6a <Vm::faultHandler(regs*)+0x677>
c00149c5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149c8:	e9 c0 fe ff ff       	jmp    c001488d <Vm::faultHandler(regs*)+0x9a>
c00149cd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149d0:	be 02 00 00 00       	mov    esi,0x2
c00149d5:	e9 b3 fe ff ff       	jmp    c001488d <Vm::faultHandler(regs*)+0x9a>
c00149da:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149dd:	be 03 00 00 00       	mov    esi,0x3
c00149e2:	e9 a6 fe ff ff       	jmp    c001488d <Vm::faultHandler(regs*)+0x9a>
c00149e7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149ea:	be 04 00 00 00       	mov    esi,0x4
c00149ef:	e9 99 fe ff ff       	jmp    c001488d <Vm::faultHandler(regs*)+0x9a>
c00149f4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149f7:	be 05 00 00 00       	mov    esi,0x5
c00149fc:	e9 8c fe ff ff       	jmp    c001488d <Vm::faultHandler(regs*)+0x9a>
c0014a01:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014a04:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0014a09:	e9 7f fe ff ff       	jmp    c001488d <Vm::faultHandler(regs*)+0x9a>
c0014a0e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014a11:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0014a16:	e9 72 fe ff ff       	jmp    c001488d <Vm::faultHandler(regs*)+0x9a>
c0014a1b:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0014a1e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0014a22:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014a27:	74 30                	je     c0014a59 <Vm::faultHandler(regs*)+0x266>
c0014a29:	83 e9 04             	sub    ecx,0x4
c0014a2c:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014a32:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014a38:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014a3b:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014a3e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014a44:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014a48:	0f 84 15 04 00 00    	je     c0014e63 <Vm::faultHandler(regs*)+0x670>
c0014a4e:	80 ce 02             	or     dh,0x2
c0014a51:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014a54:	e9 0a 04 00 00       	jmp    c0014e63 <Vm::faultHandler(regs*)+0x670>
c0014a59:	83 e9 02             	sub    ecx,0x2
c0014a5c:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014a62:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014a65:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014a69:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014a6f:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014a73:	74 05                	je     c0014a7a <Vm::faultHandler(regs*)+0x287>
c0014a75:	80 ce 02             	or     dh,0x2
c0014a78:	eb 03                	jmp    c0014a7d <Vm::faultHandler(regs*)+0x28a>
c0014a7a:	80 e6 fd             	and    dh,0xfd
c0014a7d:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014a81:	e9 dd 03 00 00       	jmp    c0014e63 <Vm::faultHandler(regs*)+0x670>
c0014a86:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014a8b:	74 2a                	je     c0014ab7 <Vm::faultHandler(regs*)+0x2c4>
c0014a8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0014a8f:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014a95:	81 ca 00 02 02 00    	or     edx,0x20200
c0014a9b:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014a9e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014aa0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014aa6:	c1 e8 09             	shr    eax,0x9
c0014aa9:	83 e0 01             	and    eax,0x1
c0014aac:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014aaf:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014ab2:	83 c0 04             	add    eax,0x4
c0014ab5:	eb 25                	jmp    c0014adc <Vm::faultHandler(regs*)+0x2e9>
c0014ab7:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014aba:	81 ca 00 02 02 00    	or     edx,0x20200
c0014ac0:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014ac3:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014ac6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014acc:	66 c1 e8 09          	shr    ax,0x9
c0014ad0:	83 e0 01             	and    eax,0x1
c0014ad3:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014ad6:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014ad9:	83 c0 02             	add    eax,0x2
c0014adc:	25 ff ff 00 00       	and    eax,0xffff
c0014ae1:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014ae4:	e9 7a 03 00 00       	jmp    c0014e63 <Vm::faultHandler(regs*)+0x670>
c0014ae9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014aed:	3c ee                	cmp    al,0xee
c0014aef:	75 10                	jne    c0014b01 <Vm::faultHandler(regs*)+0x30e>
c0014af1:	83 ec 0c             	sub    esp,0xc
c0014af4:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014af7:	e8 e9 f8 ff ff       	call   c00143e5 <Vm::mainloop3(unsigned long)>
c0014afc:	e9 4b 03 00 00       	jmp    c0014e4c <Vm::faultHandler(regs*)+0x659>
c0014b01:	83 ec 0c             	sub    esp,0xc
c0014b04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014b08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014b0c:	51                   	push   ecx
c0014b0d:	50                   	push   eax
c0014b0e:	53                   	push   ebx
c0014b0f:	e8 e1 fb ff ff       	call   c00146f5 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0014b14:	83 c4 20             	add    esp,0x20
c0014b17:	e9 4a 03 00 00       	jmp    c0014e66 <Vm::faultHandler(regs*)+0x673>
c0014b1c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b21:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014b25:	e9 39 03 00 00       	jmp    c0014e63 <Vm::faultHandler(regs*)+0x670>
c0014b2a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b2f:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0014b33:	e9 2b 03 00 00       	jmp    c0014e63 <Vm::faultHandler(regs*)+0x670>
c0014b38:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014b3b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014b40:	74 2b                	je     c0014b6d <Vm::faultHandler(regs*)+0x37a>
c0014b42:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0014b49:	76 22                	jbe    c0014b6d <Vm::faultHandler(regs*)+0x37a>
c0014b4b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014b4f:	50                   	push   eax
c0014b50:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014b54:	50                   	push   eax
c0014b55:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014b59:	50                   	push   eax
c0014b5a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014b5e:	50                   	push   eax
c0014b5f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014b63:	50                   	push   eax
c0014b64:	6a 6c                	push   0x6c
c0014b66:	6a 6c                	push   0x6c
c0014b68:	e9 b9 01 00 00       	jmp    c0014d26 <Vm::faultHandler(regs*)+0x533>
c0014b6d:	83 ec 0c             	sub    esp,0xc
c0014b70:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014b74:	0f b7 f6             	movzx  esi,si
c0014b77:	50                   	push   eax
c0014b78:	e8 b8 f7 ff ff       	call   c0014335 <Vm::inbv(unsigned short)>
c0014b7d:	83 c4 0c             	add    esp,0xc
c0014b80:	0f b6 c0             	movzx  eax,al
c0014b83:	50                   	push   eax
c0014b84:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0014b88:	50                   	push   eax
c0014b89:	56                   	push   esi
c0014b8a:	e8 24 fc ff ff       	call   c00147b3 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0014b8f:	83 c4 10             	add    esp,0x10
c0014b92:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014b95:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014b99:	74 03                	je     c0014b9e <Vm::faultHandler(regs*)+0x3ab>
c0014b9b:	48                   	dec    eax
c0014b9c:	eb 01                	jmp    c0014b9f <Vm::faultHandler(regs*)+0x3ac>
c0014b9e:	40                   	inc    eax
c0014b9f:	0f b7 c0             	movzx  eax,ax
c0014ba2:	e9 8d 00 00 00       	jmp    c0014c34 <Vm::faultHandler(regs*)+0x441>
c0014ba7:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014baa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014bad:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014bb2:	74 29                	je     c0014bdd <Vm::faultHandler(regs*)+0x3ea>
c0014bb4:	3d ff ff 00 00       	cmp    eax,0xffff
c0014bb9:	76 22                	jbe    c0014bdd <Vm::faultHandler(regs*)+0x3ea>
c0014bbb:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014bbf:	50                   	push   eax
c0014bc0:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014bc4:	50                   	push   eax
c0014bc5:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014bc9:	50                   	push   eax
c0014bca:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014bce:	50                   	push   eax
c0014bcf:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014bd3:	50                   	push   eax
c0014bd4:	6a 6d                	push   0x6d
c0014bd6:	6a 6d                	push   0x6d
c0014bd8:	e9 49 01 00 00       	jmp    c0014d26 <Vm::faultHandler(regs*)+0x533>
c0014bdd:	0f b7 c8             	movzx  ecx,ax
c0014be0:	0f b7 f6             	movzx  esi,si
c0014be3:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014be6:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014beb:	74 20                	je     c0014c0d <Vm::faultHandler(regs*)+0x41a>
c0014bed:	ed                   	in     eax,dx
c0014bee:	55                   	push   ebp
c0014bef:	50                   	push   eax
c0014bf0:	51                   	push   ecx
c0014bf1:	56                   	push   esi
c0014bf2:	e8 e7 fb ff ff       	call   c00147de <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0014bf7:	83 c4 10             	add    esp,0x10
c0014bfa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014bfd:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014c01:	74 05                	je     c0014c08 <Vm::faultHandler(regs*)+0x415>
c0014c03:	83 e8 04             	sub    eax,0x4
c0014c06:	eb 27                	jmp    c0014c2f <Vm::faultHandler(regs*)+0x43c>
c0014c08:	83 c0 04             	add    eax,0x4
c0014c0b:	eb 22                	jmp    c0014c2f <Vm::faultHandler(regs*)+0x43c>
c0014c0d:	66 ed                	in     ax,dx
c0014c0f:	0f b7 c0             	movzx  eax,ax
c0014c12:	57                   	push   edi
c0014c13:	50                   	push   eax
c0014c14:	51                   	push   ecx
c0014c15:	56                   	push   esi
c0014c16:	e8 ad fb ff ff       	call   c00147c8 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0014c1b:	83 c4 10             	add    esp,0x10
c0014c1e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014c21:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014c25:	74 05                	je     c0014c2c <Vm::faultHandler(regs*)+0x439>
c0014c27:	83 e8 02             	sub    eax,0x2
c0014c2a:	eb 03                	jmp    c0014c2f <Vm::faultHandler(regs*)+0x43c>
c0014c2c:	83 c0 02             	add    eax,0x2
c0014c2f:	25 ff ff 00 00       	and    eax,0xffff
c0014c34:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0014c37:	e9 27 02 00 00       	jmp    c0014e63 <Vm::faultHandler(regs*)+0x670>
c0014c3c:	8d 46 ff             	lea    eax,[esi-0x1]
c0014c3f:	3c 05                	cmp    al,0x5
c0014c41:	77 24                	ja     c0014c67 <Vm::faultHandler(regs*)+0x474>
c0014c43:	0f b6 c0             	movzx  eax,al
c0014c46:	ff 24 85 dc ed 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1224]
c0014c4d:	0f b7 fd             	movzx  edi,bp
c0014c50:	eb 15                	jmp    c0014c67 <Vm::faultHandler(regs*)+0x474>
c0014c52:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0014c56:	eb 0f                	jmp    c0014c67 <Vm::faultHandler(regs*)+0x474>
c0014c58:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0014c5c:	eb 09                	jmp    c0014c67 <Vm::faultHandler(regs*)+0x474>
c0014c5e:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0014c62:	eb 03                	jmp    c0014c67 <Vm::faultHandler(regs*)+0x474>
c0014c64:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0014c67:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014c6a:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014c6f:	74 29                	je     c0014c9a <Vm::faultHandler(regs*)+0x4a7>
c0014c71:	3d ff ff 00 00       	cmp    eax,0xffff
c0014c76:	76 22                	jbe    c0014c9a <Vm::faultHandler(regs*)+0x4a7>
c0014c78:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014c7c:	50                   	push   eax
c0014c7d:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014c81:	50                   	push   eax
c0014c82:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014c86:	50                   	push   eax
c0014c87:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014c8b:	50                   	push   eax
c0014c8c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014c90:	50                   	push   eax
c0014c91:	6a 6e                	push   0x6e
c0014c93:	6a 6e                	push   0x6e
c0014c95:	e9 8c 00 00 00       	jmp    c0014d26 <Vm::faultHandler(regs*)+0x533>
c0014c9a:	0f b7 c0             	movzx  eax,ax
c0014c9d:	52                   	push   edx
c0014c9e:	52                   	push   edx
c0014c9f:	50                   	push   eax
c0014ca0:	57                   	push   edi
c0014ca1:	e8 d9 fa ff ff       	call   c001477f <Vm::readByteFromReal(unsigned short, unsigned short)>
c0014ca6:	59                   	pop    ecx
c0014ca7:	0f b6 c0             	movzx  eax,al
c0014caa:	5e                   	pop    esi
c0014cab:	50                   	push   eax
c0014cac:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014cb0:	50                   	push   eax
c0014cb1:	e8 92 f6 ff ff       	call   c0014348 <Vm::outbv(unsigned short, unsigned char)>
c0014cb6:	83 c4 10             	add    esp,0x10
c0014cb9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014cbc:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014cc0:	74 03                	je     c0014cc5 <Vm::faultHandler(regs*)+0x4d2>
c0014cc2:	48                   	dec    eax
c0014cc3:	eb 01                	jmp    c0014cc6 <Vm::faultHandler(regs*)+0x4d3>
c0014cc5:	40                   	inc    eax
c0014cc6:	0f b7 c0             	movzx  eax,ax
c0014cc9:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0014ccc:	e9 92 01 00 00       	jmp    c0014e63 <Vm::faultHandler(regs*)+0x670>
c0014cd1:	8d 46 ff             	lea    eax,[esi-0x1]
c0014cd4:	3c 05                	cmp    al,0x5
c0014cd6:	77 1f                	ja     c0014cf7 <Vm::faultHandler(regs*)+0x504>
c0014cd8:	0f b6 c0             	movzx  eax,al
c0014cdb:	ff 24 85 f4 ed 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe120c]
c0014ce2:	89 ef                	mov    edi,ebp
c0014ce4:	eb 11                	jmp    c0014cf7 <Vm::faultHandler(regs*)+0x504>
c0014ce6:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0014ce9:	eb 0c                	jmp    c0014cf7 <Vm::faultHandler(regs*)+0x504>
c0014ceb:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0014cee:	eb 07                	jmp    c0014cf7 <Vm::faultHandler(regs*)+0x504>
c0014cf0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0014cf3:	eb 02                	jmp    c0014cf7 <Vm::faultHandler(regs*)+0x504>
c0014cf5:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0014cf7:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0014cfa:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014cff:	74 37                	je     c0014d38 <Vm::faultHandler(regs*)+0x545>
c0014d01:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0014d07:	76 2f                	jbe    c0014d38 <Vm::faultHandler(regs*)+0x545>
c0014d09:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014d0d:	50                   	push   eax
c0014d0e:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014d12:	50                   	push   eax
c0014d13:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014d17:	50                   	push   eax
c0014d18:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014d1c:	50                   	push   eax
c0014d1d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014d21:	50                   	push   eax
c0014d22:	6a 6f                	push   0x6f
c0014d24:	6a 6f                	push   0x6f
c0014d26:	68 82 ed 01 c0       	push   0xc001ed82
c0014d2b:	e8 51 58 ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c0014d30:	83 c4 20             	add    esp,0x20
c0014d33:	e9 86 01 00 00       	jmp    c0014ebe <Vm::faultHandler(regs*)+0x6cb>
c0014d38:	0f b7 d7             	movzx  edx,di
c0014d3b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0014d3e:	0f b7 c6             	movzx  eax,si
c0014d41:	81 e1 00 04 00 00    	and    ecx,0x400
c0014d47:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0014d4a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014d4f:	74 1d                	je     c0014d6e <Vm::faultHandler(regs*)+0x57b>
c0014d51:	55                   	push   ebp
c0014d52:	55                   	push   ebp
c0014d53:	50                   	push   eax
c0014d54:	52                   	push   edx
c0014d55:	e8 48 fa ff ff       	call   c00147a2 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0014d5a:	83 c4 10             	add    esp,0x10
c0014d5d:	89 fa                	mov    edx,edi
c0014d5f:	ef                   	out    dx,eax
c0014d60:	85 c9                	test   ecx,ecx
c0014d62:	74 05                	je     c0014d69 <Vm::faultHandler(regs*)+0x576>
c0014d64:	83 ee 04             	sub    esi,0x4
c0014d67:	eb 21                	jmp    c0014d8a <Vm::faultHandler(regs*)+0x597>
c0014d69:	83 c6 04             	add    esi,0x4
c0014d6c:	eb 1c                	jmp    c0014d8a <Vm::faultHandler(regs*)+0x597>
c0014d6e:	55                   	push   ebp
c0014d6f:	55                   	push   ebp
c0014d70:	50                   	push   eax
c0014d71:	52                   	push   edx
c0014d72:	e8 19 fa ff ff       	call   c0014790 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0014d77:	83 c4 10             	add    esp,0x10
c0014d7a:	89 fa                	mov    edx,edi
c0014d7c:	66 ef                	out    dx,ax
c0014d7e:	85 c9                	test   ecx,ecx
c0014d80:	74 05                	je     c0014d87 <Vm::faultHandler(regs*)+0x594>
c0014d82:	83 ee 02             	sub    esi,0x2
c0014d85:	eb 03                	jmp    c0014d8a <Vm::faultHandler(regs*)+0x597>
c0014d87:	83 c6 02             	add    esi,0x2
c0014d8a:	81 e6 ff ff 00 00    	and    esi,0xffff
c0014d90:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0014d93:	e9 cb 00 00 00       	jmp    c0014e63 <Vm::faultHandler(regs*)+0x670>
c0014d98:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014d9f:	83 ec 0c             	sub    esp,0xc
c0014da2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014da6:	50                   	push   eax
c0014da7:	e8 89 f5 ff ff       	call   c0014335 <Vm::inbv(unsigned short)>
c0014dac:	0f b6 c0             	movzx  eax,al
c0014daf:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014db2:	eb 3f                	jmp    c0014df3 <Vm::faultHandler(regs*)+0x600>
c0014db4:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014db9:	74 07                	je     c0014dc2 <Vm::faultHandler(regs*)+0x5cf>
c0014dbb:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014dbf:	ed                   	in     eax,dx
c0014dc0:	eb 14                	jmp    c0014dd6 <Vm::faultHandler(regs*)+0x5e3>
c0014dc2:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0014dc5:	66 31 f6             	xor    si,si
c0014dc8:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0014dcb:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014dcf:	66 ed                	in     ax,dx
c0014dd1:	0f b7 c0             	movzx  eax,ax
c0014dd4:	09 f0                	or     eax,esi
c0014dd6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014dd9:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014ddd:	e9 84 00 00 00       	jmp    c0014e66 <Vm::faultHandler(regs*)+0x673>
c0014de2:	52                   	push   edx
c0014de3:	52                   	push   edx
c0014de4:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014de8:	50                   	push   eax
c0014de9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014ded:	50                   	push   eax
c0014dee:	e8 55 f5 ff ff       	call   c0014348 <Vm::outbv(unsigned short, unsigned char)>
c0014df3:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014df7:	eb 53                	jmp    c0014e4c <Vm::faultHandler(regs*)+0x659>
c0014df9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014dfc:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014e00:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014e05:	74 03                	je     c0014e0a <Vm::faultHandler(regs*)+0x617>
c0014e07:	ef                   	out    dx,eax
c0014e08:	eb cf                	jmp    c0014dd9 <Vm::faultHandler(regs*)+0x5e6>
c0014e0a:	66 ef                	out    dx,ax
c0014e0c:	eb cb                	jmp    c0014dd9 <Vm::faultHandler(regs*)+0x5e6>
c0014e0e:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014e15:	83 ec 0c             	sub    esp,0xc
c0014e18:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014e1c:	50                   	push   eax
c0014e1d:	e8 13 f5 ff ff       	call   c0014335 <Vm::inbv(unsigned short)>
c0014e22:	0f b6 c0             	movzx  eax,al
c0014e25:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014e28:	eb 1f                	jmp    c0014e49 <Vm::faultHandler(regs*)+0x656>
c0014e2a:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014e2d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014e32:	74 03                	je     c0014e37 <Vm::faultHandler(regs*)+0x644>
c0014e34:	ed                   	in     eax,dx
c0014e35:	eb 0d                	jmp    c0014e44 <Vm::faultHandler(regs*)+0x651>
c0014e37:	66 ed                	in     ax,dx
c0014e39:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0014e3c:	0f b7 c0             	movzx  eax,ax
c0014e3f:	66 31 d2             	xor    dx,dx
c0014e42:	09 d0                	or     eax,edx
c0014e44:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014e47:	eb 1a                	jmp    c0014e63 <Vm::faultHandler(regs*)+0x670>
c0014e49:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014e4c:	83 c4 10             	add    esp,0x10
c0014e4f:	eb 15                	jmp    c0014e66 <Vm::faultHandler(regs*)+0x673>
c0014e51:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014e54:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014e57:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014e5c:	74 03                	je     c0014e61 <Vm::faultHandler(regs*)+0x66e>
c0014e5e:	ef                   	out    dx,eax
c0014e5f:	eb 02                	jmp    c0014e63 <Vm::faultHandler(regs*)+0x670>
c0014e61:	66 ef                	out    dx,ax
c0014e63:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014e66:	b0 01                	mov    al,0x1
c0014e68:	eb 56                	jmp    c0014ec0 <Vm::faultHandler(regs*)+0x6cd>
c0014e6a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014e6e:	50                   	push   eax
c0014e6f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014e73:	50                   	push   eax
c0014e74:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014e78:	50                   	push   eax
c0014e79:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014e7d:	50                   	push   eax
c0014e7e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014e82:	50                   	push   eax
c0014e83:	52                   	push   edx
c0014e84:	52                   	push   edx
c0014e85:	68 af ed 01 c0       	push   0xc001edaf
c0014e8a:	e8 f2 56 ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c0014e8f:	83 c4 20             	add    esp,0x20
c0014e92:	83 ec 0c             	sub    esp,0xc
c0014e95:	6a 60                	push   0x60
c0014e97:	e8 99 f4 ff ff       	call   c0014335 <Vm::inbv(unsigned short)>
c0014e9c:	83 c4 10             	add    esp,0x10
c0014e9f:	3c 1c                	cmp    al,0x1c
c0014ea1:	74 04                	je     c0014ea7 <Vm::faultHandler(regs*)+0x6b4>
c0014ea3:	3c 5a                	cmp    al,0x5a
c0014ea5:	75 eb                	jne    c0014e92 <Vm::faultHandler(regs*)+0x69f>
c0014ea7:	3c 5a                	cmp    al,0x5a
c0014ea9:	74 04                	je     c0014eaf <Vm::faultHandler(regs*)+0x6bc>
c0014eab:	3c 1c                	cmp    al,0x1c
c0014ead:	75 0f                	jne    c0014ebe <Vm::faultHandler(regs*)+0x6cb>
c0014eaf:	83 ec 0c             	sub    esp,0xc
c0014eb2:	6a 60                	push   0x60
c0014eb4:	e8 7c f4 ff ff       	call   c0014335 <Vm::inbv(unsigned short)>
c0014eb9:	83 c4 10             	add    esp,0x10
c0014ebc:	eb e9                	jmp    c0014ea7 <Vm::faultHandler(regs*)+0x6b4>
c0014ebe:	31 c0                	xor    eax,eax
c0014ec0:	83 c4 1c             	add    esp,0x1c
c0014ec3:	5b                   	pop    ebx
c0014ec4:	5e                   	pop    esi
c0014ec5:	5f                   	pop    edi
c0014ec6:	5d                   	pop    ebp
c0014ec7:	c3                   	ret    

c0014ec8 <noCopro(unsigned long)>:
c0014ec8:	c3                   	ret    

c0014ec9 <nmiHandler(regs*, void*)>:
c0014ec9:	83 ec 0c             	sub    esp,0xc
c0014ecc:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0014ed1:	83 ec 0c             	sub    esp,0xc
c0014ed4:	50                   	push   eax
c0014ed5:	e8 00 21 ff ff       	call   c0006fda <Computer::handleNMI()>
c0014eda:	83 c4 10             	add    esp,0x10
c0014edd:	90                   	nop
c0014ede:	83 c4 0c             	add    esp,0xc
c0014ee1:	c3                   	ret    

c0014ee2 <doubleFault(regs*, void*)>:
c0014ee2:	55                   	push   ebp
c0014ee3:	89 e5                	mov    ebp,esp
c0014ee5:	83 ec 08             	sub    esp,0x8
c0014ee8:	83 ec 0c             	sub    esp,0xc
c0014eeb:	68 0c ee 01 c0       	push   0xc001ee0c
c0014ef0:	e8 0e b3 ff ff       	call   c0010203 <KePanic(char const*)>
c0014ef5:	83 c4 10             	add    esp,0x10
c0014ef8:	90                   	nop
c0014ef9:	c9                   	leave  
c0014efa:	c3                   	ret    

c0014efb <displayDebugInfo(regs*)>:
c0014efb:	83 ec 1c             	sub    esp,0x1c
c0014efe:	0f 20 c0             	mov    eax,cr0
c0014f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014f05:	0f 20 d0             	mov    eax,cr2
c0014f08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014f0c:	0f 20 d8             	mov    eax,cr3
c0014f0f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014f13:	0f 20 e0             	mov    eax,cr4
c0014f16:	89 04 24             	mov    DWORD PTR [esp],eax
c0014f19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f1d:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014f20:	83 ec 08             	sub    esp,0x8
c0014f23:	50                   	push   eax
c0014f24:	68 28 ee 01 c0       	push   0xc001ee28
c0014f29:	e8 53 56 ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c0014f2e:	83 c4 10             	add    esp,0x10
c0014f31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f35:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014f38:	83 ec 08             	sub    esp,0x8
c0014f3b:	50                   	push   eax
c0014f3c:	68 19 ee 01 c0       	push   0xc001ee19
c0014f41:	e8 3b 56 ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c0014f46:	83 c4 10             	add    esp,0x10
c0014f49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f4d:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014f50:	83 ec 08             	sub    esp,0x8
c0014f53:	50                   	push   eax
c0014f54:	68 24 ee 01 c0       	push   0xc001ee24
c0014f59:	e8 23 56 ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c0014f5e:	83 c4 10             	add    esp,0x10
c0014f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f65:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f68:	83 ec 08             	sub    esp,0x8
c0014f6b:	50                   	push   eax
c0014f6c:	68 33 ee 01 c0       	push   0xc001ee33
c0014f71:	e8 0b 56 ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c0014f76:	83 c4 10             	add    esp,0x10
c0014f79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f7d:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0014f80:	83 ec 08             	sub    esp,0x8
c0014f83:	50                   	push   eax
c0014f84:	68 3e ee 01 c0       	push   0xc001ee3e
c0014f89:	e8 f3 55 ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c0014f8e:	83 c4 10             	add    esp,0x10
c0014f91:	83 ec 08             	sub    esp,0x8
c0014f94:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014f98:	68 49 ee 01 c0       	push   0xc001ee49
c0014f9d:	e8 df 55 ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c0014fa2:	83 c4 10             	add    esp,0x10
c0014fa5:	83 ec 08             	sub    esp,0x8
c0014fa8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014fac:	68 54 ee 01 c0       	push   0xc001ee54
c0014fb1:	e8 cb 55 ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c0014fb6:	83 c4 10             	add    esp,0x10
c0014fb9:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0014fbe:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014fc4:	83 ec 0c             	sub    esp,0xc
c0014fc7:	50                   	push   eax
c0014fc8:	e8 2a 34 ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c0014fcd:	83 c4 10             	add    esp,0x10
c0014fd0:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0014fd5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014fdb:	83 ec 08             	sub    esp,0x8
c0014fde:	68 5f ee 01 c0       	push   0xc001ee5f
c0014fe3:	50                   	push   eax
c0014fe4:	e8 4d 37 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014fe9:	83 c4 10             	add    esp,0x10
c0014fec:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0014ff1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014ff7:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0014ffc:	8b 12                	mov    edx,DWORD PTR [edx]
c0014ffe:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0015001:	83 c2 0c             	add    edx,0xc
c0015004:	83 ec 08             	sub    esp,0x8
c0015007:	52                   	push   edx
c0015008:	50                   	push   eax
c0015009:	e8 28 37 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001500e:	83 c4 10             	add    esp,0x10
c0015011:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015016:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001501c:	83 ec 08             	sub    esp,0x8
c001501f:	68 68 ee 01 c0       	push   0xc001ee68
c0015024:	50                   	push   eax
c0015025:	e8 0c 37 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001502a:	83 c4 10             	add    esp,0x10
c001502d:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015032:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015038:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001503c:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c001503f:	83 ec 08             	sub    esp,0x8
c0015042:	52                   	push   edx
c0015043:	50                   	push   eax
c0015044:	e8 a7 36 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015049:	83 c4 10             	add    esp,0x10
c001504c:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015051:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015057:	83 ec 08             	sub    esp,0x8
c001505a:	68 70 ee 01 c0       	push   0xc001ee70
c001505f:	50                   	push   eax
c0015060:	e8 d1 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015065:	83 c4 10             	add    esp,0x10
c0015068:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c001506d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015073:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015077:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c001507a:	83 ec 08             	sub    esp,0x8
c001507d:	52                   	push   edx
c001507e:	50                   	push   eax
c001507f:	e8 6c 36 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015084:	83 c4 10             	add    esp,0x10
c0015087:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c001508c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015092:	83 ec 08             	sub    esp,0x8
c0015095:	68 78 ee 01 c0       	push   0xc001ee78
c001509a:	50                   	push   eax
c001509b:	e8 96 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00150a0:	83 c4 10             	add    esp,0x10
c00150a3:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00150a8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150ae:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00150b2:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c00150b5:	83 ec 08             	sub    esp,0x8
c00150b8:	52                   	push   edx
c00150b9:	50                   	push   eax
c00150ba:	e8 31 36 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00150bf:	83 c4 10             	add    esp,0x10
c00150c2:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00150c7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150cd:	83 ec 08             	sub    esp,0x8
c00150d0:	68 80 ee 01 c0       	push   0xc001ee80
c00150d5:	50                   	push   eax
c00150d6:	e8 5b 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00150db:	83 c4 10             	add    esp,0x10
c00150de:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00150e3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150e9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00150ed:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00150f0:	83 ec 08             	sub    esp,0x8
c00150f3:	52                   	push   edx
c00150f4:	50                   	push   eax
c00150f5:	e8 f6 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00150fa:	83 c4 10             	add    esp,0x10
c00150fd:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015102:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015108:	83 ec 08             	sub    esp,0x8
c001510b:	68 88 ee 01 c0       	push   0xc001ee88
c0015110:	50                   	push   eax
c0015111:	e8 20 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015116:	83 c4 10             	add    esp,0x10
c0015119:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c001511e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015124:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015128:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001512b:	83 ec 08             	sub    esp,0x8
c001512e:	52                   	push   edx
c001512f:	50                   	push   eax
c0015130:	e8 bb 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015135:	83 c4 10             	add    esp,0x10
c0015138:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c001513d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015143:	83 ec 08             	sub    esp,0x8
c0015146:	68 90 ee 01 c0       	push   0xc001ee90
c001514b:	50                   	push   eax
c001514c:	e8 e5 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015151:	83 c4 10             	add    esp,0x10
c0015154:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015159:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001515f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015163:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0015166:	83 ec 08             	sub    esp,0x8
c0015169:	52                   	push   edx
c001516a:	50                   	push   eax
c001516b:	e8 80 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015170:	83 c4 10             	add    esp,0x10
c0015173:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015178:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001517e:	83 ec 08             	sub    esp,0x8
c0015181:	68 98 ee 01 c0       	push   0xc001ee98
c0015186:	50                   	push   eax
c0015187:	e8 aa 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001518c:	83 c4 10             	add    esp,0x10
c001518f:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015194:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001519a:	83 ec 08             	sub    esp,0x8
c001519d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00151a1:	50                   	push   eax
c00151a2:	e8 49 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00151a7:	83 c4 10             	add    esp,0x10
c00151aa:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00151af:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151b5:	83 ec 08             	sub    esp,0x8
c00151b8:	68 a1 ee 01 c0       	push   0xc001eea1
c00151bd:	50                   	push   eax
c00151be:	e8 73 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00151c3:	83 c4 10             	add    esp,0x10
c00151c6:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00151cb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151d1:	83 ec 08             	sub    esp,0x8
c00151d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00151d8:	50                   	push   eax
c00151d9:	e8 12 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00151de:	83 c4 10             	add    esp,0x10
c00151e1:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00151e6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151ec:	83 ec 08             	sub    esp,0x8
c00151ef:	68 a9 ee 01 c0       	push   0xc001eea9
c00151f4:	50                   	push   eax
c00151f5:	e8 3c 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00151fa:	83 c4 10             	add    esp,0x10
c00151fd:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015202:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015208:	83 ec 08             	sub    esp,0x8
c001520b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001520f:	50                   	push   eax
c0015210:	e8 db 34 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015215:	83 c4 10             	add    esp,0x10
c0015218:	fa                   	cli    
c0015219:	f4                   	hlt    
c001521a:	eb fe                	jmp    c001521a <displayDebugInfo(regs*)+0x31f>

c001521c <HalSystemIdle()>:
c001521c:	56                   	push   esi
c001521d:	53                   	push   ebx
c001521e:	83 ec 14             	sub    esp,0x14
c0015221:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0015226:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001522c:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0015232:	83 e0 04             	and    eax,0x4
c0015235:	84 c0                	test   al,al
c0015237:	0f 95 c0             	setne  al
c001523a:	84 c0                	test   al,al
c001523c:	74 4c                	je     c001528a <HalSystemIdle()+0x6e>
c001523e:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0015243:	83 ec 08             	sub    esp,0x8
c0015246:	68 e1 00 00 00       	push   0xe1
c001524b:	50                   	push   eax
c001524c:	e8 a1 1b ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c0015251:	83 c4 10             	add    esp,0x10
c0015254:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015258:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001525c:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0015261:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015265:	83 e2 02             	and    edx,0x2
c0015268:	89 d3                	mov    ebx,edx
c001526a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001526e:	83 e2 00             	and    edx,0x0
c0015271:	89 d6                	mov    esi,edx
c0015273:	56                   	push   esi
c0015274:	53                   	push   ebx
c0015275:	68 e1 00 00 00       	push   0xe1
c001527a:	50                   	push   eax
c001527b:	e8 9e 1b ff ff       	call   c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>
c0015280:	83 c4 10             	add    esp,0x10
c0015283:	e8 0c af fe ff       	call   c0000194 <doTPAUSE>
c0015288:	eb 01                	jmp    c001528b <HalSystemIdle()+0x6f>
c001528a:	f4                   	hlt    
c001528b:	90                   	nop
c001528c:	83 c4 14             	add    esp,0x14
c001528f:	5b                   	pop    ebx
c0015290:	5e                   	pop    esi
c0015291:	c3                   	ret    

c0015292 <displayProgramFault(char const*)>:
c0015292:	83 ec 0c             	sub    esp,0xc
c0015295:	83 ec 0c             	sub    esp,0xc
c0015298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001529c:	e8 e0 52 ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c00152a1:	83 c4 10             	add    esp,0x10
c00152a4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00152a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00152ab:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00152ae:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152b4:	85 c0                	test   eax,eax
c00152b6:	74 21                	je     c00152d9 <displayProgramFault(char const*)+0x47>
c00152b8:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00152bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00152bf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00152c2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152c8:	6a 04                	push   0x4
c00152ca:	6a 0f                	push   0xf
c00152cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00152d0:	50                   	push   eax
c00152d1:	e8 d2 34 ff ff       	call   c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00152d6:	83 c4 10             	add    esp,0x10
c00152d9:	90                   	nop
c00152da:	83 c4 0c             	add    esp,0xc
c00152dd:	c3                   	ret    

c00152de <gpFault(regs*, void*)>:
c00152de:	83 ec 1c             	sub    esp,0x1c
c00152e1:	c7 05 10 52 02 c0 f3 47 01 c0 	mov    DWORD PTR ds:0xc0025210,0xc00147f3
c00152eb:	a1 10 52 02 c0       	mov    eax,ds:0xc0025210
c00152f0:	85 c0                	test   eax,eax
c00152f2:	74 1c                	je     c0015310 <gpFault(regs*, void*)+0x32>
c00152f4:	a1 10 52 02 c0       	mov    eax,ds:0xc0025210
c00152f9:	83 ec 0c             	sub    esp,0xc
c00152fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015300:	ff d0                	call   eax
c0015302:	83 c4 10             	add    esp,0x10
c0015305:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015309:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001530e:	75 2e                	jne    c001533e <gpFault(regs*, void*)+0x60>
c0015310:	83 ec 0c             	sub    esp,0xc
c0015313:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015317:	e8 df fb ff ff       	call   c0014efb <displayDebugInfo(regs*)>
c001531c:	83 c4 10             	add    esp,0x10
c001531f:	83 ec 0c             	sub    esp,0xc
c0015322:	68 b1 ee 01 c0       	push   0xc001eeb1
c0015327:	e8 66 ff ff ff       	call   c0015292 <displayProgramFault(char const*)>
c001532c:	83 c4 10             	add    esp,0x10
c001532f:	83 ec 0c             	sub    esp,0xc
c0015332:	6a 00                	push   0x0
c0015334:	e8 af ee ff ff       	call   c00141e8 <Thr::terminateFromIRQ(int)>
c0015339:	83 c4 10             	add    esp,0x10
c001533c:	eb 01                	jmp    c001533f <gpFault(regs*, void*)+0x61>
c001533e:	90                   	nop
c001533f:	83 c4 1c             	add    esp,0x1c
c0015342:	c3                   	ret    

c0015343 <pgFault(regs*, void*)>:
c0015343:	83 ec 1c             	sub    esp,0x1c
c0015346:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001534a:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001534d:	0f 20 d0             	mov    eax,cr2
c0015350:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015354:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015358:	83 ec 04             	sub    esp,0x4
c001535b:	52                   	push   edx
c001535c:	50                   	push   eax
c001535d:	68 90 ef 01 c0       	push   0xc001ef90
c0015362:	e8 1a 52 ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c0015367:	83 c4 10             	add    esp,0x10
c001536a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001536f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015371:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015374:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c001537a:	0f 20 d2             	mov    edx,cr2
c001537d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015381:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015385:	83 ec 08             	sub    esp,0x8
c0015388:	52                   	push   edx
c0015389:	50                   	push   eax
c001538a:	e8 d1 4d ff ff       	call   c000a160 <VAS::tryLoadBackOffDisk(unsigned long)>
c001538f:	83 c4 10             	add    esp,0x10
c0015392:	84 c0                	test   al,al
c0015394:	75 2e                	jne    c00153c4 <pgFault(regs*, void*)+0x81>
c0015396:	83 ec 0c             	sub    esp,0xc
c0015399:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001539d:	e8 59 fb ff ff       	call   c0014efb <displayDebugInfo(regs*)>
c00153a2:	83 c4 10             	add    esp,0x10
c00153a5:	83 ec 0c             	sub    esp,0xc
c00153a8:	68 ca ee 01 c0       	push   0xc001eeca
c00153ad:	e8 e0 fe ff ff       	call   c0015292 <displayProgramFault(char const*)>
c00153b2:	83 c4 10             	add    esp,0x10
c00153b5:	83 ec 0c             	sub    esp,0xc
c00153b8:	6a 00                	push   0x0
c00153ba:	e8 29 ee ff ff       	call   c00141e8 <Thr::terminateFromIRQ(int)>
c00153bf:	83 c4 10             	add    esp,0x10
c00153c2:	eb 01                	jmp    c00153c5 <pgFault(regs*, void*)+0x82>
c00153c4:	90                   	nop
c00153c5:	83 c4 1c             	add    esp,0x1c
c00153c8:	c3                   	ret    

c00153c9 <otherISRHandler(regs*, void*)>:
c00153c9:	83 ec 0c             	sub    esp,0xc
c00153cc:	83 ec 0c             	sub    esp,0xc
c00153cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00153d3:	e8 23 fb ff ff       	call   c0014efb <displayDebugInfo(regs*)>
c00153d8:	83 c4 10             	add    esp,0x10
c00153db:	83 ec 0c             	sub    esp,0xc
c00153de:	68 b8 ef 01 c0       	push   0xc001efb8
c00153e3:	e8 aa fe ff ff       	call   c0015292 <displayProgramFault(char const*)>
c00153e8:	83 c4 10             	add    esp,0x10
c00153eb:	83 ec 0c             	sub    esp,0xc
c00153ee:	6a 00                	push   0x0
c00153f0:	e8 f3 ed ff ff       	call   c00141e8 <Thr::terminateFromIRQ(int)>
c00153f5:	83 c4 10             	add    esp,0x10
c00153f8:	90                   	nop
c00153f9:	83 c4 0c             	add    esp,0xc
c00153fc:	c3                   	ret    

c00153fd <opcodeFault(regs*, void*)>:
c00153fd:	55                   	push   ebp
c00153fe:	89 e5                	mov    ebp,esp
c0015400:	83 ec 08             	sub    esp,0x8
c0015403:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015406:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015409:	83 ec 08             	sub    esp,0x8
c001540c:	50                   	push   eax
c001540d:	68 d5 ee 01 c0       	push   0xc001eed5
c0015412:	e8 6a 51 ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c0015417:	83 c4 10             	add    esp,0x10
c001541a:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001541f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015425:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001542b:	84 c0                	test   al,al
c001542d:	74 21                	je     c0015450 <opcodeFault(regs*, void*)+0x53>
c001542f:	83 ec 0c             	sub    esp,0xc
c0015432:	68 e0 ef 01 c0       	push   0xc001efe0
c0015437:	e8 45 51 ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c001543c:	83 c4 10             	add    esp,0x10
c001543f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015442:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015445:	8d 50 19             	lea    edx,[eax+0x19]
c0015448:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001544b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001544e:	eb 2b                	jmp    c001547b <opcodeFault(regs*, void*)+0x7e>
c0015450:	83 ec 0c             	sub    esp,0xc
c0015453:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015456:	e8 a0 fa ff ff       	call   c0014efb <displayDebugInfo(regs*)>
c001545b:	83 c4 10             	add    esp,0x10
c001545e:	83 ec 0c             	sub    esp,0xc
c0015461:	68 e3 ee 01 c0       	push   0xc001eee3
c0015466:	e8 27 fe ff ff       	call   c0015292 <displayProgramFault(char const*)>
c001546b:	83 c4 10             	add    esp,0x10
c001546e:	83 ec 0c             	sub    esp,0xc
c0015471:	6a 00                	push   0x0
c0015473:	e8 70 ed ff ff       	call   c00141e8 <Thr::terminateFromIRQ(int)>
c0015478:	83 c4 10             	add    esp,0x10
c001547b:	c9                   	leave  
c001547c:	c3                   	ret    

c001547d <i386SaveCoprocessor(void*)>:
c001547d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015481:	83 c0 3f             	add    eax,0x3f
c0015484:	83 e0 c0             	and    eax,0xffffffc0
c0015487:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001548b:	ff 25 0c 52 02 c0    	jmp    DWORD PTR ds:0xc002520c

c0015491 <i386LoadCoprocessor(void*)>:
c0015491:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015495:	83 c0 3f             	add    eax,0x3f
c0015498:	83 e0 c0             	and    eax,0xffffffc0
c001549b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001549f:	ff 25 08 52 02 c0    	jmp    DWORD PTR ds:0xc0025208

c00154a5 <x87EmulHandler(regs*, void*)>:
c00154a5:	53                   	push   ebx
c00154a6:	83 ec 08             	sub    esp,0x8
c00154a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154ae:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00154b2:	74 10                	je     c00154c4 <x87EmulHandler(regs*, void*)+0x1f>
c00154b4:	83 ec 0c             	sub    esp,0xc
c00154b7:	68 f0 ee 01 c0       	push   0xc001eef0
c00154bc:	e8 42 ad ff ff       	call   c0010203 <KePanic(char const*)>
c00154c1:	83 c4 10             	add    esp,0x10
c00154c4:	0f 20 c0             	mov    eax,cr0
c00154c7:	a8 08                	test   al,0x8
c00154c9:	74 59                	je     c0015524 <x87EmulHandler(regs*, void*)+0x7f>
c00154cb:	0f 06                	clts   
c00154cd:	a1 04 52 02 c0       	mov    eax,ds:0xc0025204
c00154d2:	85 c0                	test   eax,eax
c00154d4:	74 0e                	je     c00154e4 <x87EmulHandler(regs*, void*)+0x3f>
c00154d6:	83 ec 0c             	sub    esp,0xc
c00154d9:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00154dc:	e8 9c ff ff ff       	call   c001547d <i386SaveCoprocessor(void*)>
c00154e1:	83 c4 10             	add    esp,0x10
c00154e4:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00154ea:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c00154ee:	75 12                	jne    c0015502 <x87EmulHandler(regs*, void*)+0x5d>
c00154f0:	83 ec 0c             	sub    esp,0xc
c00154f3:	68 40 02 00 00       	push   0x240
c00154f8:	e8 bc 22 ff ff       	call   c00077b9 <malloc>
c00154fd:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0015500:	eb 10                	jmp    c0015512 <x87EmulHandler(regs*, void*)+0x6d>
c0015502:	83 ec 0c             	sub    esp,0xc
c0015505:	a1 04 52 02 c0       	mov    eax,ds:0xc0025204
c001550a:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001550d:	e8 7f ff ff ff       	call   c0015491 <i386LoadCoprocessor(void*)>
c0015512:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015517:	83 c4 10             	add    esp,0x10
c001551a:	a3 04 52 02 c0       	mov    ds:0xc0025204,eax
c001551f:	83 c4 08             	add    esp,0x8
c0015522:	5b                   	pop    ebx
c0015523:	c3                   	ret    
c0015524:	83 ec 0c             	sub    esp,0xc
c0015527:	68 04 ef 01 c0       	push   0xc001ef04
c001552c:	e8 50 50 ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c0015531:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0015539:	83 c4 18             	add    esp,0x18
c001553c:	5b                   	pop    ebx
c001553d:	e9 a6 ec ff ff       	jmp    c00141e8 <Thr::terminateFromIRQ(int)>

c0015542 <HalInitialiseCoprocessor()>:
c0015542:	83 ec 10             	sub    esp,0x10
c0015545:	c7 05 04 52 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025204,0x0
c001554f:	6a 00                	push   0x0
c0015551:	68 a5 54 01 c0       	push   0xc00154a5
c0015556:	6a 07                	push   0x7
c0015558:	e8 97 69 ff ff       	call   c000bef4 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001555d:	e8 8e 65 00 00       	call   c001baf0 <avxDetect>
c0015562:	83 c4 10             	add    esp,0x10
c0015565:	85 c0                	test   eax,eax
c0015567:	74 1c                	je     c0015585 <HalInitialiseCoprocessor()+0x43>
c0015569:	c7 05 0c 52 02 c0 1a bb 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc001bb1a
c0015573:	c7 05 08 52 02 c0 2b bb 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc001bb2b
c001557d:	83 c4 0c             	add    esp,0xc
c0015580:	e9 b7 65 00 00       	jmp    c001bb3c <avxInit>
c0015585:	e8 46 68 00 00       	call   c001bdd0 <absolutelyNoChanceInHell>
c001558a:	85 c0                	test   eax,eax
c001558c:	74 1c                	je     c00155aa <HalInitialiseCoprocessor()+0x68>
c001558e:	c7 05 0c 52 02 c0 e8 bd 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc001bde8
c0015598:	c7 05 08 52 02 c0 f0 bd 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc001bdf0
c00155a2:	83 c4 0c             	add    esp,0xc
c00155a5:	e9 4e 68 00 00       	jmp    c001bdf8 <sseInit>
c00155aa:	e8 67 68 00 00       	call   c001be16 <x87Detect>
c00155af:	85 c0                	test   eax,eax
c00155b1:	74 1c                	je     c00155cf <HalInitialiseCoprocessor()+0x8d>
c00155b3:	c7 05 0c 52 02 c0 31 be 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc001be31
c00155bd:	c7 05 08 52 02 c0 38 be 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc001be38
c00155c7:	83 c4 0c             	add    esp,0xc
c00155ca:	e9 70 68 00 00       	jmp    c001be3f <x87Init>
c00155cf:	c7 05 0c 52 02 c0 c8 4e 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc0014ec8
c00155d9:	c7 05 08 52 02 c0 c8 4e 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc0014ec8
c00155e3:	0f 20 c0             	mov    eax,cr0
c00155e6:	83 c8 04             	or     eax,0x4
c00155e9:	0f 22 c0             	mov    cr0,eax
c00155ec:	83 c4 0c             	add    esp,0xc
c00155ef:	c3                   	ret    

c00155f0 <HalPanic(char const*)>:
c00155f0:	53                   	push   ebx
c00155f1:	83 ec 10             	sub    esp,0x10
c00155f4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00155f8:	fa                   	cli    
c00155f9:	53                   	push   ebx
c00155fa:	68 1a ef 01 c0       	push   0xc001ef1a
c00155ff:	e8 7d 4f ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c0015604:	83 c4 0c             	add    esp,0xc
c0015607:	6a 01                	push   0x1
c0015609:	6a 0f                	push   0xf
c001560b:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015611:	e8 34 2c ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015616:	58                   	pop    eax
c0015617:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c001561d:	e8 20 2e ff ff       	call   c0008442 <VgaText::clearScreen()>
c0015622:	5a                   	pop    edx
c0015623:	59                   	pop    ecx
c0015624:	68 28 d8 01 c0       	push   0xc001d828
c0015629:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c001562f:	e8 4e 2c ff ff       	call   c0008282 <VgaText::setTitle(char*)>
c0015634:	83 c4 0c             	add    esp,0xc
c0015637:	6a 01                	push   0x1
c0015639:	6a 0f                	push   0xf
c001563b:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015641:	e8 04 2c ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015646:	58                   	pop    eax
c0015647:	5a                   	pop    edx
c0015648:	68 33 ef 01 c0       	push   0xc001ef33
c001564d:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015653:	e8 de 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015658:	83 c4 0c             	add    esp,0xc
c001565b:	6a 0f                	push   0xf
c001565d:	6a 01                	push   0x1
c001565f:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015665:	e8 e0 2b ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001566a:	59                   	pop    ecx
c001566b:	58                   	pop    eax
c001566c:	68 3c ef 01 c0       	push   0xc001ef3c
c0015671:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015677:	e8 ba 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001567c:	83 c4 0c             	add    esp,0xc
c001567f:	6a 01                	push   0x1
c0015681:	6a 0f                	push   0xf
c0015683:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015689:	e8 bc 2b ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001568e:	58                   	pop    eax
c001568f:	5a                   	pop    edx
c0015690:	68 80 ef 01 c0       	push   0xc001ef80
c0015695:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c001569b:	e8 96 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00156a0:	59                   	pop    ecx
c00156a1:	58                   	pop    eax
c00156a2:	68 49 ef 01 c0       	push   0xc001ef49
c00156a7:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00156ad:	e8 84 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00156b2:	58                   	pop    eax
c00156b3:	5a                   	pop    edx
c00156b4:	68 83 ef 01 c0       	push   0xc001ef83
c00156b9:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00156bf:	e8 72 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00156c4:	59                   	pop    ecx
c00156c5:	58                   	pop    eax
c00156c6:	53                   	push   ebx
c00156c7:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00156cd:	e8 64 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00156d2:	58                   	pop    eax
c00156d3:	5a                   	pop    edx
c00156d4:	68 80 ef 01 c0       	push   0xc001ef80
c00156d9:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00156df:	e8 52 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00156e4:	83 c4 10             	add    esp,0x10
c00156e7:	eb fe                	jmp    c00156e7 <HalPanic(char const*)+0xf7>

c00156e9 <HalQueryPerformanceCounter()>:
c00156e9:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00156ee:	31 d2                	xor    edx,edx
c00156f0:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00156f6:	31 c0                	xor    eax,eax
c00156f8:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c00156ff:	74 02                	je     c0015703 <HalQueryPerformanceCounter()+0x1a>
c0015701:	0f 31                	rdtsc  
c0015703:	c3                   	ret    

c0015704 <HalInitialise()>:
c0015704:	53                   	push   ebx
c0015705:	83 ec 08             	sub    esp,0x8
c0015708:	e8 1a 6a ff ff       	call   c000c127 <setupINTS()>
c001570d:	80 3d 80 47 02 c0 00 	cmp    BYTE PTR ds:0xc0024780,0x0
c0015714:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0015719:	75 07                	jne    c0015722 <HalInitialise()+0x1e>
c001571b:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c0015722:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c0015728:	83 e0 01             	and    eax,0x1
c001572b:	a2 00 52 02 c0       	mov    ds:0xc0025200,al
c0015730:	e8 a7 02 00 00       	call   c00159dc <picOpen()>
c0015735:	80 3d 00 52 02 c0 00 	cmp    BYTE PTR ds:0xc0025200,0x0
c001573c:	74 0a                	je     c0015748 <HalInitialise()+0x44>
c001573e:	e8 e1 01 00 00       	call   c0015924 <picDisable()>
c0015743:	e8 26 5d 00 00       	call   c001b46e <apicOpen()>
c0015748:	bb 0f 00 00 00       	mov    ebx,0xf
c001574d:	50                   	push   eax
c001574e:	6a 00                	push   0x0
c0015750:	68 c9 53 01 c0       	push   0xc00153c9
c0015755:	6a 00                	push   0x0
c0015757:	e8 98 67 ff ff       	call   c000bef4 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001575c:	83 c4 0c             	add    esp,0xc
c001575f:	6a 00                	push   0x0
c0015761:	68 c9 53 01 c0       	push   0xc00153c9
c0015766:	6a 01                	push   0x1
c0015768:	e8 87 67 ff ff       	call   c000bef4 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001576d:	83 c4 0c             	add    esp,0xc
c0015770:	6a 00                	push   0x0
c0015772:	68 c9 4e 01 c0       	push   0xc0014ec9
c0015777:	6a 02                	push   0x2
c0015779:	e8 76 67 ff ff       	call   c000bef4 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001577e:	83 c4 0c             	add    esp,0xc
c0015781:	6a 00                	push   0x0
c0015783:	68 c9 53 01 c0       	push   0xc00153c9
c0015788:	6a 03                	push   0x3
c001578a:	e8 65 67 ff ff       	call   c000bef4 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001578f:	83 c4 0c             	add    esp,0xc
c0015792:	6a 00                	push   0x0
c0015794:	68 c9 53 01 c0       	push   0xc00153c9
c0015799:	6a 04                	push   0x4
c001579b:	e8 54 67 ff ff       	call   c000bef4 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157a0:	83 c4 0c             	add    esp,0xc
c00157a3:	6a 00                	push   0x0
c00157a5:	68 c9 53 01 c0       	push   0xc00153c9
c00157aa:	6a 05                	push   0x5
c00157ac:	e8 43 67 ff ff       	call   c000bef4 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157b1:	83 c4 0c             	add    esp,0xc
c00157b4:	6a 00                	push   0x0
c00157b6:	68 fd 53 01 c0       	push   0xc00153fd
c00157bb:	6a 06                	push   0x6
c00157bd:	e8 32 67 ff ff       	call   c000bef4 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157c2:	83 c4 0c             	add    esp,0xc
c00157c5:	6a 00                	push   0x0
c00157c7:	68 e2 4e 01 c0       	push   0xc0014ee2
c00157cc:	6a 08                	push   0x8
c00157ce:	e8 21 67 ff ff       	call   c000bef4 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157d3:	83 c4 0c             	add    esp,0xc
c00157d6:	6a 00                	push   0x0
c00157d8:	68 c9 53 01 c0       	push   0xc00153c9
c00157dd:	6a 09                	push   0x9
c00157df:	e8 10 67 ff ff       	call   c000bef4 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157e4:	83 c4 0c             	add    esp,0xc
c00157e7:	6a 00                	push   0x0
c00157e9:	68 c9 53 01 c0       	push   0xc00153c9
c00157ee:	6a 0a                	push   0xa
c00157f0:	e8 ff 66 ff ff       	call   c000bef4 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157f5:	83 c4 0c             	add    esp,0xc
c00157f8:	6a 00                	push   0x0
c00157fa:	68 c9 53 01 c0       	push   0xc00153c9
c00157ff:	6a 0b                	push   0xb
c0015801:	e8 ee 66 ff ff       	call   c000bef4 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015806:	83 c4 0c             	add    esp,0xc
c0015809:	6a 00                	push   0x0
c001580b:	68 de 52 01 c0       	push   0xc00152de
c0015810:	6a 0d                	push   0xd
c0015812:	e8 dd 66 ff ff       	call   c000bef4 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015817:	83 c4 0c             	add    esp,0xc
c001581a:	6a 00                	push   0x0
c001581c:	68 43 53 01 c0       	push   0xc0015343
c0015821:	6a 0e                	push   0xe
c0015823:	e8 cc 66 ff ff       	call   c000bef4 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015828:	83 c4 10             	add    esp,0x10
c001582b:	50                   	push   eax
c001582c:	6a 00                	push   0x0
c001582e:	68 c9 53 01 c0       	push   0xc00153c9
c0015833:	53                   	push   ebx
c0015834:	43                   	inc    ebx
c0015835:	e8 ba 66 ff ff       	call   c000bef4 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001583a:	83 c4 10             	add    esp,0x10
c001583d:	83 fb 1e             	cmp    ebx,0x1e
c0015840:	75 e9                	jne    c001582b <HalInitialise()+0x127>
c0015842:	50                   	push   eax
c0015843:	6a 00                	push   0x0
c0015845:	68 53 14 01 c0       	push   0xc0011453
c001584a:	6a 60                	push   0x60
c001584c:	e8 a3 66 ff ff       	call   c000bef4 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015851:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0015856:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0015860:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0015867:	e8 4d 1f ff ff       	call   c00077b9 <malloc>
c001586c:	89 04 24             	mov    DWORD PTR [esp],eax
c001586f:	89 c3                	mov    ebx,eax
c0015871:	e8 2e 09 00 00       	call   c00161a4 <RTC::RTC()>
c0015876:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0015880:	5a                   	pop    edx
c0015881:	59                   	pop    ecx
c0015882:	53                   	push   ebx
c0015883:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015889:	e8 32 61 ff ff       	call   c000b9c0 <Device::addChild(Device*)>
c001588e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015890:	6a 00                	push   0x0
c0015892:	6a 00                	push   0x0
c0015894:	6a 00                	push   0x0
c0015896:	53                   	push   ebx
c0015897:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001589a:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001589f:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c00158a5:	83 c4 28             	add    esp,0x28
c00158a8:	5b                   	pop    ebx
c00158a9:	c3                   	ret    

c00158aa <HalMakeBeep(int)>:
c00158aa:	53                   	push   ebx
c00158ab:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00158af:	85 db                	test   ebx,ebx
c00158b1:	75 07                	jne    c00158ba <HalMakeBeep(int)+0x10>
c00158b3:	e4 61                	in     al,0x61
c00158b5:	83 e0 fc             	and    eax,0xfffffffc
c00158b8:	eb 26                	jmp    c00158e0 <HalMakeBeep(int)+0x36>
c00158ba:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00158bf:	99                   	cdq    
c00158c0:	f7 fb                	idiv   ebx
c00158c2:	89 c1                	mov    ecx,eax
c00158c4:	b0 b6                	mov    al,0xb6
c00158c6:	e6 43                	out    0x43,al
c00158c8:	88 c8                	mov    al,cl
c00158ca:	e6 42                	out    0x42,al
c00158cc:	89 c8                	mov    eax,ecx
c00158ce:	c1 e8 08             	shr    eax,0x8
c00158d1:	e6 42                	out    0x42,al
c00158d3:	e4 61                	in     al,0x61
c00158d5:	88 c2                	mov    dl,al
c00158d7:	83 ca 03             	or     edx,0x3
c00158da:	38 c2                	cmp    dl,al
c00158dc:	74 04                	je     c00158e2 <HalMakeBeep(int)+0x38>
c00158de:	88 d0                	mov    al,dl
c00158e0:	e6 61                	out    0x61,al
c00158e2:	5b                   	pop    ebx
c00158e3:	c3                   	ret    

c00158e4 <HalGetRand()>:
c00158e4:	31 c0                	xor    eax,eax
c00158e6:	c3                   	ret    

c00158e7 <HalEndOfInterrupt(int)>:
c00158e7:	80 3d 00 52 02 c0 00 	cmp    BYTE PTR ds:0xc0025200,0x0
c00158ee:	74 23                	je     c0015913 <HalEndOfInterrupt(int)+0x2c>
c00158f0:	83 ec 14             	sub    esp,0x14
c00158f3:	6a 1b                	push   0x1b
c00158f5:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00158fb:	e8 f2 14 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c0015900:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015905:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001590f:	83 c4 1c             	add    esp,0x1c
c0015912:	c3                   	ret    
c0015913:	e9 54 02 00 00       	jmp    c0015b6c <picEOI(int)>

c0015918 <HalRestart()>:
c0015918:	c3                   	ret    

c0015919 <HalShutdown()>:
c0015919:	c3                   	ret    

c001591a <HalSleep()>:
c001591a:	c3                   	ret    
c001591b:	90                   	nop

c001591c <picIoWait()>:
c001591c:	eb 00                	jmp    c001591e <picIoWait()+0x2>
c001591e:	eb 00                	jmp    c0015920 <picIoWait()+0x4>
c0015920:	90                   	nop
c0015921:	c3                   	ret    
c0015922:	66 90                	xchg   ax,ax

c0015924 <picDisable()>:
c0015924:	83 ec 10             	sub    esp,0x10
c0015927:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001592e:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0015933:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015937:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001593c:	ee                   	out    dx,al
c001593d:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0015944:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0015949:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001594d:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0015952:	ee                   	out    dx,al
c0015953:	90                   	nop
c0015954:	83 c4 10             	add    esp,0x10
c0015957:	c3                   	ret    

c0015958 <picGetIRQReg(int)>:
c0015958:	83 ec 10             	sub    esp,0x10
c001595b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001595f:	25 ff 00 00 00       	and    eax,0xff
c0015964:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001596b:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001596f:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015973:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015978:	ee                   	out    dx,al
c0015979:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001597d:	25 ff 00 00 00       	and    eax,0xff
c0015982:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015989:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001598d:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015991:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015996:	ee                   	out    dx,al
c0015997:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001599e:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00159a3:	89 c2                	mov    edx,eax
c00159a5:	ec                   	in     al,dx
c00159a6:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00159aa:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00159ae:	25 ff 00 00 00       	and    eax,0xff
c00159b3:	c1 e0 08             	shl    eax,0x8
c00159b6:	89 c1                	mov    ecx,eax
c00159b8:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c00159bf:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00159c4:	89 c2                	mov    edx,eax
c00159c6:	ec                   	in     al,dx
c00159c7:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00159cb:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00159cf:	25 ff 00 00 00       	and    eax,0xff
c00159d4:	09 c8                	or     eax,ecx
c00159d6:	83 c4 10             	add    esp,0x10
c00159d9:	c3                   	ret    
c00159da:	66 90                	xchg   ax,ax

c00159dc <picOpen()>:
c00159dc:	83 ec 50             	sub    esp,0x50
c00159df:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c00159e6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00159eb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00159ef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00159f3:	ee                   	out    dx,al
c00159f4:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00159fb:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0015a00:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0015a04:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015a08:	ee                   	out    dx,al
c0015a09:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0015a11:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0015a19:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0015a20:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015a24:	89 c2                	mov    edx,eax
c0015a26:	ec                   	in     al,dx
c0015a27:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0015a2b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0015a2f:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0015a33:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0015a3a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015a3e:	89 c2                	mov    edx,eax
c0015a40:	ec                   	in     al,dx
c0015a41:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015a45:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0015a49:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0015a4d:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0015a54:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0015a59:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0015a5d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015a61:	ee                   	out    dx,al
c0015a62:	e8 b5 fe ff ff       	call   c001591c <picIoWait()>
c0015a67:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0015a6e:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0015a73:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015a77:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015a7b:	ee                   	out    dx,al
c0015a7c:	e8 9b fe ff ff       	call   c001591c <picIoWait()>
c0015a81:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015a85:	25 ff 00 00 00       	and    eax,0xff
c0015a8a:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0015a91:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0015a95:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0015a99:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015a9d:	ee                   	out    dx,al
c0015a9e:	e8 79 fe ff ff       	call   c001591c <picIoWait()>
c0015aa3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015aa7:	25 ff 00 00 00       	and    eax,0xff
c0015aac:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0015ab3:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015ab7:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0015abb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015abf:	ee                   	out    dx,al
c0015ac0:	e8 57 fe ff ff       	call   c001591c <picIoWait()>
c0015ac5:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0015acc:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0015ad1:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0015ad5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015ad9:	ee                   	out    dx,al
c0015ada:	e8 3d fe ff ff       	call   c001591c <picIoWait()>
c0015adf:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0015ae6:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0015aeb:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0015aef:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015af3:	ee                   	out    dx,al
c0015af4:	e8 23 fe ff ff       	call   c001591c <picIoWait()>
c0015af9:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0015b00:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0015b05:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015b09:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015b0d:	ee                   	out    dx,al
c0015b0e:	e8 09 fe ff ff       	call   c001591c <picIoWait()>
c0015b13:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0015b1a:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0015b1f:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0015b23:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015b27:	ee                   	out    dx,al
c0015b28:	e8 ef fd ff ff       	call   c001591c <picIoWait()>
c0015b2d:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0015b31:	25 ff 00 00 00       	and    eax,0xff
c0015b36:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0015b3d:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0015b41:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0015b45:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015b49:	ee                   	out    dx,al
c0015b4a:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c0015b4e:	25 ff 00 00 00       	and    eax,0xff
c0015b53:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0015b5a:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0015b5e:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0015b62:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0015b66:	ee                   	out    dx,al
c0015b67:	90                   	nop
c0015b68:	83 c4 50             	add    esp,0x50
c0015b6b:	c3                   	ret    

c0015b6c <picEOI(int)>:
c0015b6c:	83 ec 10             	sub    esp,0x10
c0015b6f:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015b74:	75 22                	jne    c0015b98 <picEOI(int)+0x2c>
c0015b76:	6a 0b                	push   0xb
c0015b78:	e8 db fd ff ff       	call   c0015958 <picGetIRQReg(int)>
c0015b7d:	83 c4 04             	add    esp,0x4
c0015b80:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0015b85:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015b8a:	25 ff ff 00 00       	and    eax,0xffff
c0015b8f:	25 80 00 00 00       	and    eax,0x80
c0015b94:	74 72                	je     c0015c08 <picEOI(int)+0x9c>
c0015b96:	66 90                	xchg   ax,ax
c0015b98:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0015b9d:	75 31                	jne    c0015bd0 <picEOI(int)+0x64>
c0015b9f:	6a 0b                	push   0xb
c0015ba1:	e8 b2 fd ff ff       	call   c0015958 <picGetIRQReg(int)>
c0015ba6:	83 c4 04             	add    esp,0x4
c0015ba9:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0015bae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015bb2:	66 85 c0             	test   ax,ax
c0015bb5:	78 19                	js     c0015bd0 <picEOI(int)+0x64>
c0015bb7:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0015bbe:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0015bc3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015bc7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015bcc:	ee                   	out    dx,al
c0015bcd:	eb 3d                	jmp    c0015c0c <picEOI(int)+0xa0>
c0015bcf:	90                   	nop
c0015bd0:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015bd5:	7e 19                	jle    c0015bf0 <picEOI(int)+0x84>
c0015bd7:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015bde:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0015be3:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015be7:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015bec:	ee                   	out    dx,al
c0015bed:	8d 76 00             	lea    esi,[esi+0x0]
c0015bf0:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015bf7:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0015bfc:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015c00:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015c05:	ee                   	out    dx,al
c0015c06:	eb 04                	jmp    c0015c0c <picEOI(int)+0xa0>
c0015c08:	90                   	nop
c0015c09:	8d 76 00             	lea    esi,[esi+0x0]
c0015c0c:	83 c4 10             	add    esp,0x10
c0015c0f:	c3                   	ret    

c0015c10 <RTC::open(int, int, void*)>:
c0015c10:	31 c0                	xor    eax,eax
c0015c12:	c3                   	ret    
c0015c13:	90                   	nop

c0015c14 <RTC::close(int, int, void*)>:
c0015c14:	31 c0                	xor    eax,eax
c0015c16:	c3                   	ret    
c0015c17:	90                   	nop

c0015c18 <RTC::timeInSecondsUTC()>:
c0015c18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c1c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0015c22:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015c28:	c3                   	ret    
c0015c29:	90                   	nop

c0015c2a <RTC::timeInDatetimeUTC()>:
c0015c2a:	53                   	push   ebx
c0015c2b:	83 ec 14             	sub    esp,0x14
c0015c2e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015c32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c36:	8b 10                	mov    edx,DWORD PTR [eax]
c0015c38:	50                   	push   eax
c0015c39:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015c3c:	83 c4 0c             	add    esp,0xc
c0015c3f:	52                   	push   edx
c0015c40:	50                   	push   eax
c0015c41:	53                   	push   ebx
c0015c42:	e8 ed 5a ff ff       	call   c000b734 <secondsToDatetime(unsigned long long)>
c0015c47:	89 d8                	mov    eax,ebx
c0015c49:	83 c4 14             	add    esp,0x14
c0015c4c:	5b                   	pop    ebx
c0015c4d:	c2 04 00             	ret    0x4

c0015c50 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0015c50:	56                   	push   esi
c0015c51:	53                   	push   ebx
c0015c52:	83 ec 14             	sub    esp,0x14
c0015c55:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015c59:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015c5b:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0015c5e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015c62:	52                   	push   edx
c0015c63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c6b:	50                   	push   eax
c0015c6c:	e8 c3 5a ff ff       	call   c000b734 <secondsToDatetime(unsigned long long)>
c0015c71:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015c75:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015c79:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015c7d:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0015c81:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015c85:	89 f0                	mov    eax,esi
c0015c87:	83 c4 20             	add    esp,0x20
c0015c8a:	5b                   	pop    ebx
c0015c8b:	5e                   	pop    esi
c0015c8c:	ff e0                	jmp    eax

c0015c8e <RTC::~RTC()>:
c0015c8e:	83 ec 0c             	sub    esp,0xc
c0015c91:	ba 20 f0 01 c0       	mov    edx,0xc001f020
c0015c96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c9a:	89 10                	mov    DWORD PTR [eax],edx
c0015c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ca0:	83 ec 0c             	sub    esp,0xc
c0015ca3:	50                   	push   eax
c0015ca4:	e8 0f 58 ff ff       	call   c000b4b8 <Clock::~Clock()>
c0015ca9:	83 c4 10             	add    esp,0x10
c0015cac:	90                   	nop
c0015cad:	83 c4 0c             	add    esp,0xc
c0015cb0:	c3                   	ret    
c0015cb1:	90                   	nop

c0015cb2 <RTC::~RTC()>:
c0015cb2:	83 ec 0c             	sub    esp,0xc
c0015cb5:	83 ec 0c             	sub    esp,0xc
c0015cb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015cbc:	e8 cd ff ff ff       	call   c0015c8e <RTC::~RTC()>
c0015cc1:	83 c4 10             	add    esp,0x10
c0015cc4:	83 ec 08             	sub    esp,0x8
c0015cc7:	68 60 01 00 00       	push   0x160
c0015ccc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015cd0:	e8 b6 47 ff ff       	call   c000a48b <operator delete(void*, unsigned long)>
c0015cd5:	83 c4 10             	add    esp,0x10
c0015cd8:	83 c4 0c             	add    esp,0xc
c0015cdb:	c3                   	ret    

c0015cdc <RTC::get_update_in_progress_flag()>:
c0015cdc:	83 ec 14             	sub    esp,0x14
c0015cdf:	6a 0a                	push   0xa
c0015ce1:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015ce7:	e8 ba 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015cec:	83 c4 1c             	add    esp,0x1c
c0015cef:	c0 e8 07             	shr    al,0x7
c0015cf2:	c3                   	ret    
c0015cf3:	90                   	nop

c0015cf4 <RTC::completeRTCRefresh()>:
c0015cf4:	55                   	push   ebp
c0015cf5:	57                   	push   edi
c0015cf6:	56                   	push   esi
c0015cf7:	53                   	push   ebx
c0015cf8:	83 ec 2c             	sub    esp,0x2c
c0015cfb:	8b 1d 8c 44 02 c0    	mov    ebx,DWORD PTR ds:0xc002448c
c0015d01:	83 ec 0c             	sub    esp,0xc
c0015d04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015d08:	e8 cf ff ff ff       	call   c0015cdc <RTC::get_update_in_progress_flag()>
c0015d0d:	83 c4 10             	add    esp,0x10
c0015d10:	84 c0                	test   al,al
c0015d12:	74 0e                	je     c0015d22 <RTC::completeRTCRefresh()+0x2e>
c0015d14:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015d1a:	3b 05 8c 44 02 c0    	cmp    eax,DWORD PTR ds:0xc002448c
c0015d20:	73 df                	jae    c0015d01 <RTC::completeRTCRefresh()+0xd>
c0015d22:	55                   	push   ebp
c0015d23:	55                   	push   ebp
c0015d24:	6a 00                	push   0x0
c0015d26:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015d2c:	e8 75 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d31:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015d35:	58                   	pop    eax
c0015d36:	5a                   	pop    edx
c0015d37:	6a 02                	push   0x2
c0015d39:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015d3f:	e8 62 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d44:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0015d48:	59                   	pop    ecx
c0015d49:	5b                   	pop    ebx
c0015d4a:	6a 04                	push   0x4
c0015d4c:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015d52:	e8 4f 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d57:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0015d5b:	5e                   	pop    esi
c0015d5c:	5f                   	pop    edi
c0015d5d:	6a 07                	push   0x7
c0015d5f:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015d65:	e8 3c 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d6a:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015d6e:	5d                   	pop    ebp
c0015d6f:	58                   	pop    eax
c0015d70:	6a 08                	push   0x8
c0015d72:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015d78:	e8 29 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d7d:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0015d81:	58                   	pop    eax
c0015d82:	5a                   	pop    edx
c0015d83:	6a 09                	push   0x9
c0015d85:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015d8b:	e8 16 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d90:	83 c4 10             	add    esp,0x10
c0015d93:	0f b6 e8             	movzx  ebp,al
c0015d96:	8b 1d 8c 44 02 c0    	mov    ebx,DWORD PTR ds:0xc002448c
c0015d9c:	83 ec 0c             	sub    esp,0xc
c0015d9f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015da3:	e8 34 ff ff ff       	call   c0015cdc <RTC::get_update_in_progress_flag()>
c0015da8:	83 c4 10             	add    esp,0x10
c0015dab:	84 c0                	test   al,al
c0015dad:	74 0e                	je     c0015dbd <RTC::completeRTCRefresh()+0xc9>
c0015daf:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015db5:	3b 05 8c 44 02 c0    	cmp    eax,DWORD PTR ds:0xc002448c
c0015dbb:	73 df                	jae    c0015d9c <RTC::completeRTCRefresh()+0xa8>
c0015dbd:	50                   	push   eax
c0015dbe:	50                   	push   eax
c0015dbf:	6a 00                	push   0x0
c0015dc1:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015dc7:	e8 da 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015dcc:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0015dd0:	58                   	pop    eax
c0015dd1:	5a                   	pop    edx
c0015dd2:	6a 02                	push   0x2
c0015dd4:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015dda:	e8 c7 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015ddf:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015de3:	59                   	pop    ecx
c0015de4:	5b                   	pop    ebx
c0015de5:	6a 04                	push   0x4
c0015de7:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015ded:	e8 b4 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015df2:	5e                   	pop    esi
c0015df3:	88 c3                	mov    bl,al
c0015df5:	5f                   	pop    edi
c0015df6:	6a 07                	push   0x7
c0015df8:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015dfe:	e8 a3 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e03:	89 c6                	mov    esi,eax
c0015e05:	58                   	pop    eax
c0015e06:	5a                   	pop    edx
c0015e07:	6a 08                	push   0x8
c0015e09:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015e0f:	e8 92 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e14:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0015e18:	59                   	pop    ecx
c0015e19:	5f                   	pop    edi
c0015e1a:	6a 09                	push   0x9
c0015e1c:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015e22:	e8 7f 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e27:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0015e2b:	0f b6 f8             	movzx  edi,al
c0015e2e:	83 c4 10             	add    esp,0x10
c0015e31:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0015e35:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015e39:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0015e3d:	89 f1                	mov    ecx,esi
c0015e3f:	0f 94 c0             	sete   al
c0015e42:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0015e46:	0f 94 c2             	sete   dl
c0015e49:	21 d0                	and    eax,edx
c0015e4b:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0015e4f:	0f 94 c2             	sete   dl
c0015e52:	21 c2                	and    edx,eax
c0015e54:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0015e58:	0f 94 c0             	sete   al
c0015e5b:	21 d0                	and    eax,edx
c0015e5d:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015e61:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0015e65:	0f 94 c1             	sete   cl
c0015e68:	84 c8                	test   al,cl
c0015e6a:	75 29                	jne    c0015e95 <RTC::completeRTCRefresh()+0x1a1>
c0015e6c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015e70:	89 fd                	mov    ebp,edi
c0015e72:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015e76:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0015e7a:	89 f0                	mov    eax,esi
c0015e7c:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0015e80:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015e84:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015e88:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015e8c:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015e90:	e9 01 ff ff ff       	jmp    c0015d96 <RTC::completeRTCRefresh()+0xa2>
c0015e95:	39 fd                	cmp    ebp,edi
c0015e97:	75 d3                	jne    c0015e6c <RTC::completeRTCRefresh()+0x178>
c0015e99:	55                   	push   ebp
c0015e9a:	55                   	push   ebp
c0015e9b:	6a 0b                	push   0xb
c0015e9d:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015ea3:	e8 fe 0f ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015ea8:	83 c4 10             	add    esp,0x10
c0015eab:	89 c5                	mov    ebp,eax
c0015ead:	a8 04                	test   al,0x4
c0015eaf:	75 78                	jne    c0015f29 <RTC::completeRTCRefresh()+0x235>
c0015eb1:	b1 0a                	mov    cl,0xa
c0015eb3:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0015eb7:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015ebb:	83 e2 0f             	and    edx,0xf
c0015ebe:	c0 e8 04             	shr    al,0x4
c0015ec1:	c1 ef 04             	shr    edi,0x4
c0015ec4:	f6 e1                	mul    cl
c0015ec6:	6b ff 0a             	imul   edi,edi,0xa
c0015ec9:	01 d0                	add    eax,edx
c0015ecb:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015ecf:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0015ed3:	83 e2 0f             	and    edx,0xf
c0015ed6:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015eda:	c0 e8 04             	shr    al,0x4
c0015edd:	f6 e1                	mul    cl
c0015edf:	01 d0                	add    eax,edx
c0015ee1:	88 da                	mov    dl,bl
c0015ee3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015ee7:	83 e2 0f             	and    edx,0xf
c0015eea:	88 d8                	mov    al,bl
c0015eec:	83 e3 80             	and    ebx,0xffffff80
c0015eef:	c0 e8 04             	shr    al,0x4
c0015ef2:	83 e0 07             	and    eax,0x7
c0015ef5:	f6 e1                	mul    cl
c0015ef7:	01 d0                	add    eax,edx
c0015ef9:	89 f2                	mov    edx,esi
c0015efb:	09 c3                	or     ebx,eax
c0015efd:	83 e2 0f             	and    edx,0xf
c0015f00:	89 f0                	mov    eax,esi
c0015f02:	c0 e8 04             	shr    al,0x4
c0015f05:	f6 e1                	mul    cl
c0015f07:	8d 34 02             	lea    esi,[edx+eax*1]
c0015f0a:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015f0e:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015f12:	83 e2 0f             	and    edx,0xf
c0015f15:	c0 e8 04             	shr    al,0x4
c0015f18:	f6 e1                	mul    cl
c0015f1a:	01 d0                	add    eax,edx
c0015f1c:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0015f20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015f24:	83 e0 0f             	and    eax,0xf
c0015f27:	01 c7                	add    edi,eax
c0015f29:	83 e5 02             	and    ebp,0x2
c0015f2c:	75 14                	jne    c0015f42 <RTC::completeRTCRefresh()+0x24e>
c0015f2e:	84 db                	test   bl,bl
c0015f30:	79 10                	jns    c0015f42 <RTC::completeRTCRefresh()+0x24e>
c0015f32:	83 e3 7f             	and    ebx,0x7f
c0015f35:	b9 18 00 00 00       	mov    ecx,0x18
c0015f3a:	8d 43 0c             	lea    eax,[ebx+0xc]
c0015f3d:	99                   	cdq    
c0015f3e:	f7 f9                	idiv   ecx
c0015f40:	88 d3                	mov    bl,dl
c0015f42:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0015f48:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0015f4e:	77 06                	ja     c0015f56 <RTC::completeRTCRefresh()+0x262>
c0015f50:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0015f56:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c0015f5b:	31 d2                	xor    edx,edx
c0015f5d:	c1 e1 10             	shl    ecx,0x10
c0015f60:	89 d7                	mov    edi,edx
c0015f62:	c1 e5 10             	shl    ebp,0x10
c0015f65:	31 c0                	xor    eax,eax
c0015f67:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0015f6d:	09 cf                	or     edi,ecx
c0015f6f:	89 fa                	mov    edx,edi
c0015f71:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0015f75:	88 da                	mov    dl,bl
c0015f77:	89 f3                	mov    ebx,esi
c0015f79:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c0015f7d:	88 d8                	mov    al,bl
c0015f7f:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c0015f83:	0f b7 c8             	movzx  ecx,ax
c0015f86:	09 e9                	or     ecx,ebp
c0015f88:	89 c8                	mov    eax,ecx
c0015f8a:	51                   	push   ecx
c0015f8b:	51                   	push   ecx
c0015f8c:	52                   	push   edx
c0015f8d:	50                   	push   eax
c0015f8e:	e8 14 56 ff ff       	call   c000b5a7 <datetimeToSeconds(datetime_t)>
c0015f93:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0015f97:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0015f9d:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0015fa3:	83 c4 3c             	add    esp,0x3c
c0015fa6:	5b                   	pop    ebx
c0015fa7:	5e                   	pop    esi
c0015fa8:	5f                   	pop    edi
c0015fa9:	5d                   	pop    ebp
c0015faa:	c3                   	ret    
c0015fab:	90                   	nop

c0015fac <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0015fac:	55                   	push   ebp
c0015fad:	57                   	push   edi
c0015fae:	56                   	push   esi
c0015faf:	53                   	push   ebx
c0015fb0:	83 ec 30             	sub    esp,0x30
c0015fb3:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0015fb7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0015fbb:	6a 00                	push   0x0
c0015fbd:	6a 00                	push   0x0
c0015fbf:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015fc5:	e8 f2 0f ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015fca:	83 c4 0c             	add    esp,0xc
c0015fcd:	6a 00                	push   0x0
c0015fcf:	6a 02                	push   0x2
c0015fd1:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015fd7:	e8 e0 0f ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015fdc:	31 d2                	xor    edx,edx
c0015fde:	89 f9                	mov    ecx,edi
c0015fe0:	89 f8                	mov    eax,edi
c0015fe2:	c1 e9 10             	shr    ecx,0x10
c0015fe5:	0f b6 c4             	movzx  eax,ah
c0015fe8:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c0015fec:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0015ff0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015ff4:	b9 64 00 00 00       	mov    ecx,0x64
c0015ff9:	89 f0                	mov    eax,esi
c0015ffb:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0015fff:	89 f0                	mov    eax,esi
c0016001:	0f b6 c4             	movzx  eax,ah
c0016004:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016008:	89 f0                	mov    eax,esi
c001600a:	c1 e8 10             	shr    eax,0x10
c001600d:	66 f7 f1             	div    cx
c0016010:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0016015:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c001601a:	59                   	pop    ecx
c001601b:	5b                   	pop    ebx
c001601c:	89 fb                	mov    ebx,edi
c001601e:	6a 0b                	push   0xb
c0016020:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0016026:	e8 7b 0e ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c001602b:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c001602f:	83 c4 10             	add    esp,0x10
c0016032:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c0016037:	75 74                	jne    c00160ad <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c0016039:	b2 0a                	mov    dl,0xa
c001603b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001603f:	0f b6 c1             	movzx  eax,cl
c0016042:	f6 f2                	div    dl
c0016044:	88 c3                	mov    bl,al
c0016046:	88 e0                	mov    al,ah
c0016048:	c1 e3 04             	shl    ebx,0x4
c001604b:	09 c3                	or     ebx,eax
c001604d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0016052:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c0016056:	f6 f2                	div    dl
c0016058:	88 c1                	mov    cl,al
c001605a:	88 e0                	mov    al,ah
c001605c:	c1 e1 04             	shl    ecx,0x4
c001605f:	09 c1                	or     ecx,eax
c0016061:	89 f8                	mov    eax,edi
c0016063:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0016067:	0f b6 c0             	movzx  eax,al
c001606a:	f6 f2                	div    dl
c001606c:	88 c3                	mov    bl,al
c001606e:	88 e0                	mov    al,ah
c0016070:	c1 e3 04             	shl    ebx,0x4
c0016073:	09 c3                	or     ebx,eax
c0016075:	89 f0                	mov    eax,esi
c0016077:	0f b6 c0             	movzx  eax,al
c001607a:	f6 f2                	div    dl
c001607c:	88 c1                	mov    cl,al
c001607e:	88 e0                	mov    al,ah
c0016080:	c1 e1 04             	shl    ecx,0x4
c0016083:	09 c1                	or     ecx,eax
c0016085:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001608a:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c001608e:	f6 f2                	div    dl
c0016090:	88 c1                	mov    cl,al
c0016092:	88 e0                	mov    al,ah
c0016094:	c1 e1 04             	shl    ecx,0x4
c0016097:	09 c1                	or     ecx,eax
c0016099:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c001609e:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00160a2:	f6 f2                	div    dl
c00160a4:	89 c5                	mov    ebp,eax
c00160a6:	88 e0                	mov    al,ah
c00160a8:	c1 e5 04             	shl    ebp,0x4
c00160ab:	09 c5                	or     ebp,eax
c00160ad:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c00160b2:	75 17                	jne    c00160cb <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00160b4:	80 fb 0b             	cmp    bl,0xb
c00160b7:	76 0c                	jbe    c00160c5 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c00160b9:	80 eb 0c             	sub    bl,0xc
c00160bc:	75 02                	jne    c00160c0 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c00160be:	b3 0c                	mov    bl,0xc
c00160c0:	83 cb 80             	or     ebx,0xffffff80
c00160c3:	eb 06                	jmp    c00160cb <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00160c5:	84 db                	test   bl,bl
c00160c7:	75 02                	jne    c00160cb <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00160c9:	b3 0c                	mov    bl,0xc
c00160cb:	0f b6 db             	movzx  ebx,bl
c00160ce:	50                   	push   eax
c00160cf:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00160d4:	50                   	push   eax
c00160d5:	6a 00                	push   0x0
c00160d7:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00160dd:	e8 da 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00160e2:	83 c4 0c             	add    esp,0xc
c00160e5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00160ea:	50                   	push   eax
c00160eb:	6a 02                	push   0x2
c00160ed:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00160f3:	e8 c4 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00160f8:	83 c4 0c             	add    esp,0xc
c00160fb:	53                   	push   ebx
c00160fc:	6a 04                	push   0x4
c00160fe:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0016104:	e8 b3 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0016109:	83 c4 0c             	add    esp,0xc
c001610c:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0016111:	50                   	push   eax
c0016112:	6a 07                	push   0x7
c0016114:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c001611a:	e8 9d 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c001611f:	83 c4 0c             	add    esp,0xc
c0016122:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0016127:	50                   	push   eax
c0016128:	6a 08                	push   0x8
c001612a:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0016130:	e8 87 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0016135:	83 c4 0c             	add    esp,0xc
c0016138:	89 e8                	mov    eax,ebp
c001613a:	0f b6 e8             	movzx  ebp,al
c001613d:	55                   	push   ebp
c001613e:	6a 09                	push   0x9
c0016140:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0016146:	e8 71 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c001614b:	5a                   	pop    edx
c001614c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016150:	e8 9f fb ff ff       	call   c0015cf4 <RTC::completeRTCRefresh()>
c0016155:	83 c4 3c             	add    esp,0x3c
c0016158:	b0 01                	mov    al,0x1
c001615a:	5b                   	pop    ebx
c001615b:	5e                   	pop    esi
c001615c:	5f                   	pop    edi
c001615d:	5d                   	pop    ebp
c001615e:	c3                   	ret    

c001615f <rtcIRQHandler(regs*, void*)>:
c001615f:	53                   	push   ebx
c0016160:	83 ec 10             	sub    esp,0x10
c0016163:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016167:	6a 0c                	push   0xc
c0016169:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c001616f:	e8 32 0d ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0016174:	83 c4 10             	add    esp,0x10
c0016177:	84 c0                	test   al,al
c0016179:	79 24                	jns    c001619f <rtcIRQHandler(regs*, void*)+0x40>
c001617b:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0016182:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0016189:	66 ff 05 14 52 02 c0 	inc    WORD PTR ds:0xc0025214
c0016190:	75 0d                	jne    c001619f <rtcIRQHandler(regs*, void*)+0x40>
c0016192:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0016196:	83 c4 08             	add    esp,0x8
c0016199:	5b                   	pop    ebx
c001619a:	e9 55 fb ff ff       	jmp    c0015cf4 <RTC::completeRTCRefresh()>
c001619f:	83 c4 08             	add    esp,0x8
c00161a2:	5b                   	pop    ebx
c00161a3:	c3                   	ret    

c00161a4 <RTC::RTC()>:
c00161a4:	83 ec 1c             	sub    esp,0x1c
c00161a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161ab:	83 ec 08             	sub    esp,0x8
c00161ae:	68 03 f0 01 c0       	push   0xc001f003
c00161b3:	50                   	push   eax
c00161b4:	e8 c9 52 ff ff       	call   c000b482 <Clock::Clock(char const*)>
c00161b9:	83 c4 10             	add    esp,0x10
c00161bc:	ba 20 f0 01 c0       	mov    edx,0xc001f020
c00161c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161c5:	89 10                	mov    DWORD PTR [eax],edx
c00161c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161cb:	83 ec 0c             	sub    esp,0xc
c00161ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00161d2:	6a 01                	push   0x1
c00161d4:	68 5f 61 01 c0       	push   0xc001615f
c00161d9:	6a 08                	push   0x8
c00161db:	50                   	push   eax
c00161dc:	e8 8b 57 ff ff       	call   c000b96c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00161e1:	83 c4 20             	add    esp,0x20
c00161e4:	89 c2                	mov    edx,eax
c00161e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161ea:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00161f0:	fa                   	cli    
c00161f1:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00161f6:	40                   	inc    eax
c00161f7:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00161fc:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0016201:	83 ec 08             	sub    esp,0x8
c0016204:	6a 0b                	push   0xb
c0016206:	50                   	push   eax
c0016207:	e8 9a 0c ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c001620c:	83 c4 10             	add    esp,0x10
c001620f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016213:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0016218:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001621c:	83 ca 10             	or     edx,0x10
c001621f:	81 e2 ff 00 00 00    	and    edx,0xff
c0016225:	83 ec 04             	sub    esp,0x4
c0016228:	52                   	push   edx
c0016229:	6a 0b                	push   0xb
c001622b:	50                   	push   eax
c001622c:	e8 8b 0d ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0016231:	83 c4 10             	add    esp,0x10
c0016234:	83 ec 0c             	sub    esp,0xc
c0016237:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001623b:	e8 b4 fa ff ff       	call   c0015cf4 <RTC::completeRTCRefresh()>
c0016240:	83 c4 10             	add    esp,0x10
c0016243:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0016248:	48                   	dec    eax
c0016249:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001624e:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0016253:	85 c0                	test   eax,eax
c0016255:	75 01                	jne    c0016258 <RTC::RTC()+0xb4>
c0016257:	fb                   	sti    
c0016258:	90                   	nop
c0016259:	83 c4 1c             	add    esp,0x1c
c001625c:	c3                   	ret    
c001625d:	66 90                	xchg   ax,ax
c001625f:	90                   	nop

c0016260 <HalConsoleScroll(int, int)>:
c0016260:	83 ec 10             	sub    esp,0x10
c0016263:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001626b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0016273:	90                   	nop
c0016274:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0016279:	0f 8f e1 00 00 00    	jg     c0016360 <HalConsoleScroll(int, int)+0x100>
c001627f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016287:	90                   	nop
c0016288:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0016290:	0f 8f be 00 00 00    	jg     c0016354 <HalConsoleScroll(int, int)+0xf4>
c0016296:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001629a:	89 d0                	mov    eax,edx
c001629c:	c1 e0 02             	shl    eax,0x2
c001629f:	01 d0                	add    eax,edx
c00162a1:	c1 e0 05             	shl    eax,0x5
c00162a4:	89 c2                	mov    edx,eax
c00162a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00162aa:	01 d0                	add    eax,edx
c00162ac:	89 c2                	mov    edx,eax
c00162ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00162b2:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00162b5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00162b9:	89 d0                	mov    eax,edx
c00162bb:	c1 e0 02             	shl    eax,0x2
c00162be:	01 d0                	add    eax,edx
c00162c0:	c1 e0 05             	shl    eax,0x5
c00162c3:	89 c2                	mov    edx,eax
c00162c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00162c9:	01 d0                	add    eax,edx
c00162cb:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c00162d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00162d5:	01 c2                	add    edx,eax
c00162d7:	8a 01                	mov    al,BYTE PTR [ecx]
c00162d9:	88 02                	mov    BYTE PTR [edx],al
c00162db:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00162e0:	75 66                	jne    c0016348 <HalConsoleScroll(int, int)+0xe8>
c00162e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00162e6:	83 e0 01             	and    eax,0x1
c00162e9:	74 39                	je     c0016324 <HalConsoleScroll(int, int)+0xc4>
c00162eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00162ef:	83 e0 0f             	and    eax,0xf
c00162f2:	88 c2                	mov    dl,al
c00162f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00162f8:	c1 e0 04             	shl    eax,0x4
c00162fb:	88 d1                	mov    cl,dl
c00162fd:	09 c1                	or     ecx,eax
c00162ff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016303:	89 d0                	mov    eax,edx
c0016305:	c1 e0 02             	shl    eax,0x2
c0016308:	01 d0                	add    eax,edx
c001630a:	c1 e0 05             	shl    eax,0x5
c001630d:	89 c2                	mov    edx,eax
c001630f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016313:	01 d0                	add    eax,edx
c0016315:	89 c2                	mov    edx,eax
c0016317:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001631b:	01 d0                	add    eax,edx
c001631d:	88 ca                	mov    dl,cl
c001631f:	88 10                	mov    BYTE PTR [eax],dl
c0016321:	eb 25                	jmp    c0016348 <HalConsoleScroll(int, int)+0xe8>
c0016323:	90                   	nop
c0016324:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016328:	89 d0                	mov    eax,edx
c001632a:	c1 e0 02             	shl    eax,0x2
c001632d:	01 d0                	add    eax,edx
c001632f:	c1 e0 05             	shl    eax,0x5
c0016332:	89 c2                	mov    edx,eax
c0016334:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016338:	01 d0                	add    eax,edx
c001633a:	89 c2                	mov    edx,eax
c001633c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016340:	01 d0                	add    eax,edx
c0016342:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0016345:	8d 76 00             	lea    esi,[esi+0x0]
c0016348:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001634c:	e9 37 ff ff ff       	jmp    c0016288 <HalConsoleScroll(int, int)+0x28>
c0016351:	8d 76 00             	lea    esi,[esi+0x0]
c0016354:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016358:	e9 17 ff ff ff       	jmp    c0016274 <HalConsoleScroll(int, int)+0x14>
c001635d:	8d 76 00             	lea    esi,[esi+0x0]
c0016360:	90                   	nop
c0016361:	83 c4 10             	add    esp,0x10
c0016364:	c3                   	ret    
c0016365:	8d 76 00             	lea    esi,[esi+0x0]

c0016368 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0016368:	83 ec 14             	sub    esp,0x14
c001636b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001636f:	88 04 24             	mov    BYTE PTR [esp],al
c0016372:	8a 04 24             	mov    al,BYTE PTR [esp]
c0016375:	25 ff 00 00 00       	and    eax,0xff
c001637a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001637e:	89 d1                	mov    ecx,edx
c0016380:	83 e1 0f             	and    ecx,0xf
c0016383:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016387:	c1 e2 04             	shl    edx,0x4
c001638a:	81 e2 ff 00 00 00    	and    edx,0xff
c0016390:	09 ca                	or     edx,ecx
c0016392:	c1 e2 08             	shl    edx,0x8
c0016395:	09 d0                	or     eax,edx
c0016397:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001639c:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c00163a4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00163a8:	89 d0                	mov    eax,edx
c00163aa:	c1 e0 02             	shl    eax,0x2
c00163ad:	01 d0                	add    eax,edx
c00163af:	c1 e0 04             	shl    eax,0x4
c00163b2:	89 c2                	mov    edx,eax
c00163b4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00163b8:	01 d0                	add    eax,edx
c00163ba:	01 c0                	add    eax,eax
c00163bc:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00163c0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00163c4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00163c9:	66 89 02             	mov    WORD PTR [edx],ax
c00163cc:	90                   	nop
c00163cd:	83 c4 14             	add    esp,0x14
c00163d0:	c3                   	ret    
c00163d1:	8d 76 00             	lea    esi,[esi+0x0]

c00163d4 <HalConsoleCursorUpdate(int, int)>:
c00163d4:	83 ec 20             	sub    esp,0x20
c00163d7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00163db:	89 c2                	mov    edx,eax
c00163dd:	89 d0                	mov    eax,edx
c00163df:	c1 e0 02             	shl    eax,0x2
c00163e2:	01 d0                	add    eax,edx
c00163e4:	c1 e0 04             	shl    eax,0x4
c00163e7:	89 c2                	mov    edx,eax
c00163e9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00163ed:	01 d0                	add    eax,edx
c00163ef:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00163f4:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c00163fb:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0016400:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016404:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016408:	ee                   	out    dx,al
c0016409:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001640e:	25 ff 00 00 00       	and    eax,0xff
c0016413:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001641a:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001641e:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0016422:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016426:	ee                   	out    dx,al
c0016427:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001642e:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0016433:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0016437:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001643b:	ee                   	out    dx,al
c001643c:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0016441:	66 c1 e8 08          	shr    ax,0x8
c0016445:	25 ff 00 00 00       	and    eax,0xff
c001644a:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0016451:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0016455:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0016459:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001645d:	ee                   	out    dx,al
c001645e:	90                   	nop
c001645f:	83 c4 20             	add    esp,0x20
c0016462:	c3                   	ret    
c0016463:	90                   	nop

c0016464 <FAT::getName()>:
c0016464:	b8 54 f0 01 c0       	mov    eax,0xc001f054
c0016469:	c3                   	ret    
c001646a:	66 90                	xchg   ax,ax

c001646c <FAT::tell(void*, unsigned long long*)>:
c001646c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016471:	75 09                	jne    c001647c <FAT::tell(void*, unsigned long long*)+0x10>
c0016473:	b8 04 00 00 00       	mov    eax,0x4
c0016478:	c3                   	ret    
c0016479:	8d 76 00             	lea    esi,[esi+0x0]
c001647c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016481:	75 09                	jne    c001648c <FAT::tell(void*, unsigned long long*)+0x20>
c0016483:	b8 04 00 00 00       	mov    eax,0x4
c0016488:	c3                   	ret    
c0016489:	8d 76 00             	lea    esi,[esi+0x0]
c001648c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016490:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0016493:	ba 00 00 00 00       	mov    edx,0x0
c0016498:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001649c:	89 01                	mov    DWORD PTR [ecx],eax
c001649e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00164a1:	b8 00 00 00 00       	mov    eax,0x0
c00164a6:	c3                   	ret    
c00164a7:	90                   	nop

c00164a8 <FAT::stat(void*, unsigned long long*)>:
c00164a8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00164ad:	75 09                	jne    c00164b8 <FAT::stat(void*, unsigned long long*)+0x10>
c00164af:	b8 04 00 00 00       	mov    eax,0x4
c00164b4:	c3                   	ret    
c00164b5:	8d 76 00             	lea    esi,[esi+0x0]
c00164b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00164bd:	75 09                	jne    c00164c8 <FAT::stat(void*, unsigned long long*)+0x20>
c00164bf:	b8 04 00 00 00       	mov    eax,0x4
c00164c4:	c3                   	ret    
c00164c5:	8d 76 00             	lea    esi,[esi+0x0]
c00164c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00164cc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00164cf:	ba 00 00 00 00       	mov    edx,0x0
c00164d4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00164d8:	89 01                	mov    DWORD PTR [ecx],eax
c00164da:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00164dd:	b8 00 00 00 00       	mov    eax,0x0
c00164e2:	c3                   	ret    
c00164e3:	90                   	nop

c00164e4 <FAT::~FAT()>:
c00164e4:	83 ec 0c             	sub    esp,0xc
c00164e7:	ba a0 f0 01 c0       	mov    edx,0xc001f0a0
c00164ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164f0:	89 10                	mov    DWORD PTR [eax],edx
c00164f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164f6:	83 ec 0c             	sub    esp,0xc
c00164f9:	50                   	push   eax
c00164fa:	e8 c7 43 ff ff       	call   c000a8c6 <Filesystem::~Filesystem()>
c00164ff:	83 c4 10             	add    esp,0x10
c0016502:	90                   	nop
c0016503:	83 c4 0c             	add    esp,0xc
c0016506:	c3                   	ret    
c0016507:	90                   	nop

c0016508 <FAT::~FAT()>:
c0016508:	83 ec 0c             	sub    esp,0xc
c001650b:	83 ec 0c             	sub    esp,0xc
c001650e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016512:	e8 cd ff ff ff       	call   c00164e4 <FAT::~FAT()>
c0016517:	83 c4 10             	add    esp,0x10
c001651a:	83 ec 08             	sub    esp,0x8
c001651d:	6a 08                	push   0x8
c001651f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016523:	e8 63 3f ff ff       	call   c000a48b <operator delete(void*, unsigned long)>
c0016528:	83 c4 10             	add    esp,0x10
c001652b:	83 c4 0c             	add    esp,0xc
c001652e:	c3                   	ret    
c001652f:	90                   	nop

c0016530 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0016530:	83 ec 1c             	sub    esp,0x1c
c0016533:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001653a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001653f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016543:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c001654a:	83 f8 ff             	cmp    eax,0xffffffff
c001654d:	75 35                	jne    c0016584 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001654f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016553:	88 c2                	mov    dl,al
c0016555:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c001655a:	01 d0                	add    eax,edx
c001655c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0016560:	8b 15 20 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025220
c0016566:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001656a:	89 14 85 40 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdadc0],edx
c0016571:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c0016576:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001657a:	89 14 85 c0 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad40],edx
c0016581:	eb 19                	jmp    c001659c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0016583:	90                   	nop
c0016584:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016588:	88 c2                	mov    dl,al
c001658a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001658e:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c0016595:	01 d0                	add    eax,edx
c0016597:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001659b:	90                   	nop
c001659c:	83 ec 04             	sub    esp,0x4
c001659f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00165a3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00165a7:	8d 44 24 15          	lea    eax,[esp+0x15]
c00165ab:	50                   	push   eax
c00165ac:	e8 a3 e8 fe ff       	call   c0004e54 <f_getlabel>
c00165b1:	83 c4 10             	add    esp,0x10
c00165b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00165b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00165bd:	75 09                	jne    c00165c8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c00165bf:	b8 00 00 00 00       	mov    eax,0x0
c00165c4:	eb 0a                	jmp    c00165d0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c00165c6:	66 90                	xchg   ax,ax
c00165c8:	b8 01 00 00 00       	mov    eax,0x1
c00165cd:	8d 76 00             	lea    esi,[esi+0x0]
c00165d0:	83 c4 1c             	add    esp,0x1c
c00165d3:	c3                   	ret    

c00165d4 <FAT::setlabel(LogicalDisk*, int, char*)>:
c00165d4:	57                   	push   edi
c00165d5:	83 ec 58             	sub    esp,0x58
c00165d8:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00165e0:	8d 54 24 10          	lea    edx,[esp+0x10]
c00165e4:	b8 00 00 00 00       	mov    eax,0x0
c00165e9:	b9 0f 00 00 00       	mov    ecx,0xf
c00165ee:	fc                   	cld    
c00165ef:	89 d7                	mov    edi,edx
c00165f1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00165f3:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00165f7:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c00165fe:	83 f8 ff             	cmp    eax,0xffffffff
c0016601:	75 35                	jne    c0016638 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0016603:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016607:	88 c2                	mov    dl,al
c0016609:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c001660e:	01 d0                	add    eax,edx
c0016610:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016614:	8b 15 20 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025220
c001661a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001661e:	89 14 85 40 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdadc0],edx
c0016625:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c001662a:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001662e:	89 14 85 c0 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad40],edx
c0016635:	eb 19                	jmp    c0016650 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0016637:	90                   	nop
c0016638:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001663c:	88 c2                	mov    dl,al
c001663e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0016642:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c0016649:	01 d0                	add    eax,edx
c001664b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001664f:	90                   	nop
c0016650:	83 ec 08             	sub    esp,0x8
c0016653:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0016657:	8d 44 24 18          	lea    eax,[esp+0x18]
c001665b:	50                   	push   eax
c001665c:	e8 5f a1 fe ff       	call   c00007c0 <strcat>
c0016661:	83 c4 10             	add    esp,0x10
c0016664:	83 ec 0c             	sub    esp,0xc
c0016667:	8d 44 24 18          	lea    eax,[esp+0x18]
c001666b:	50                   	push   eax
c001666c:	e8 34 e9 fe ff       	call   c0004fa5 <f_setlabel>
c0016671:	83 c4 10             	add    esp,0x10
c0016674:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0016678:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001667d:	75 09                	jne    c0016688 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001667f:	b8 00 00 00 00       	mov    eax,0x0
c0016684:	eb 0a                	jmp    c0016690 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0016686:	66 90                	xchg   ax,ax
c0016688:	b8 01 00 00 00       	mov    eax,0x1
c001668d:	8d 76 00             	lea    esi,[esi+0x0]
c0016690:	83 c4 58             	add    esp,0x58
c0016693:	5f                   	pop    edi
c0016694:	c3                   	ret    
c0016695:	90                   	nop
c0016696:	66 90                	xchg   ax,ax

c0016698 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0016698:	83 ec 2c             	sub    esp,0x2c
c001669b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00166a3:	83 ec 08             	sub    esp,0x8
c00166a6:	68 78 f0 01 c0       	push   0xc001f078
c00166ab:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00166af:	e8 2c a0 fe ff       	call   c00006e0 <strcmp>
c00166b4:	83 c4 10             	add    esp,0x10
c00166b7:	85 c0                	test   eax,eax
c00166b9:	0f 94 c0             	sete   al
c00166bc:	84 c0                	test   al,al
c00166be:	74 10                	je     c00166d0 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c00166c0:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00166c8:	e9 b3 00 00 00       	jmp    c0016780 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00166cd:	8d 76 00             	lea    esi,[esi+0x0]
c00166d0:	83 ec 08             	sub    esp,0x8
c00166d3:	68 6a f0 01 c0       	push   0xc001f06a
c00166d8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00166dc:	e8 ff 9f fe ff       	call   c00006e0 <strcmp>
c00166e1:	83 c4 10             	add    esp,0x10
c00166e4:	85 c0                	test   eax,eax
c00166e6:	0f 94 c0             	sete   al
c00166e9:	84 c0                	test   al,al
c00166eb:	74 0f                	je     c00166fc <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c00166ed:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00166f5:	e9 86 00 00 00       	jmp    c0016780 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00166fa:	66 90                	xchg   ax,ax
c00166fc:	83 ec 08             	sub    esp,0x8
c00166ff:	68 70 f0 01 c0       	push   0xc001f070
c0016704:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016708:	e8 d3 9f fe ff       	call   c00006e0 <strcmp>
c001670d:	83 c4 10             	add    esp,0x10
c0016710:	85 c0                	test   eax,eax
c0016712:	0f 94 c0             	sete   al
c0016715:	84 c0                	test   al,al
c0016717:	74 0b                	je     c0016724 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c0016719:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016721:	eb 5d                	jmp    c0016780 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016723:	90                   	nop
c0016724:	83 ec 08             	sub    esp,0x8
c0016727:	68 3c cf 01 c0       	push   0xc001cf3c
c001672c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016730:	e8 ab 9f fe ff       	call   c00006e0 <strcmp>
c0016735:	83 c4 10             	add    esp,0x10
c0016738:	85 c0                	test   eax,eax
c001673a:	0f 94 c0             	sete   al
c001673d:	84 c0                	test   al,al
c001673f:	74 0b                	je     c001674c <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c0016741:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0016749:	eb 35                	jmp    c0016780 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001674b:	90                   	nop
c001674c:	83 ec 08             	sub    esp,0x8
c001674f:	68 76 f0 01 c0       	push   0xc001f076
c0016754:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016758:	e8 83 9f fe ff       	call   c00006e0 <strcmp>
c001675d:	83 c4 10             	add    esp,0x10
c0016760:	85 c0                	test   eax,eax
c0016762:	0f 94 c0             	sete   al
c0016765:	84 c0                	test   al,al
c0016767:	74 0b                	je     c0016774 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c0016769:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0016771:	eb 0d                	jmp    c0016780 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016773:	90                   	nop
c0016774:	b8 08 00 00 00       	mov    eax,0x8
c0016779:	e9 ea 00 00 00       	jmp    c0016868 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001677e:	66 90                	xchg   ax,ax
c0016780:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0016787:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001678c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016790:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c0016797:	83 f8 ff             	cmp    eax,0xffffffff
c001679a:	75 34                	jne    c00167d0 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c001679c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00167a0:	88 c2                	mov    dl,al
c00167a2:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c00167a7:	01 d0                	add    eax,edx
c00167a9:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00167ad:	8b 15 20 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025220
c00167b3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00167b7:	89 14 85 40 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdadc0],edx
c00167be:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c00167c3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00167c7:	89 14 85 c0 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad40],edx
c00167ce:	eb 18                	jmp    c00167e8 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c00167d0:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00167d4:	88 c2                	mov    dl,al
c00167d6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00167da:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c00167e1:	01 d0                	add    eax,edx
c00167e3:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00167e7:	90                   	nop
c00167e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00167ec:	88 04 24             	mov    BYTE PTR [esp],al
c00167ef:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00167f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00167f7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00167ff:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0016804:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001680c:	83 ec 0c             	sub    esp,0xc
c001680f:	68 00 20 00 00       	push   0x2000
c0016814:	e8 a0 0f ff ff       	call   c00077b9 <malloc>
c0016819:	83 c4 10             	add    esp,0x10
c001681c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016820:	68 00 20 00 00       	push   0x2000
c0016825:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016829:	8d 44 24 08          	lea    eax,[esp+0x8]
c001682d:	50                   	push   eax
c001682e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0016832:	50                   	push   eax
c0016833:	e8 5d ea fe ff       	call   c0005295 <f_mkfs>
c0016838:	83 c4 10             	add    esp,0x10
c001683b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001683f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0016844:	75 0a                	jne    c0016850 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c0016846:	b8 00 00 00 00       	mov    eax,0x0
c001684b:	eb 1b                	jmp    c0016868 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001684d:	8d 76 00             	lea    esi,[esi+0x0]
c0016850:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0016855:	75 09                	jne    c0016860 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0016857:	b8 09 00 00 00       	mov    eax,0x9
c001685c:	eb 0a                	jmp    c0016868 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001685e:	66 90                	xchg   ax,ax
c0016860:	b8 01 00 00 00       	mov    eax,0x1
c0016865:	8d 76 00             	lea    esi,[esi+0x0]
c0016868:	83 c4 2c             	add    esp,0x2c
c001686b:	c3                   	ret    

c001686c <FAT::tryMount(LogicalDisk*, int)>:
c001686c:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0016872:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c0016877:	83 f8 14             	cmp    eax,0x14
c001687a:	75 18                	jne    c0016894 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001687c:	83 ec 0c             	sub    esp,0xc
c001687f:	68 7c f0 01 c0       	push   0xc001f07c
c0016884:	e8 7a 99 ff ff       	call   c0010203 <KePanic(char const*)>
c0016889:	83 c4 10             	add    esp,0x10
c001688c:	b0 00                	mov    al,0x0
c001688e:	e9 e9 01 00 00       	jmp    c0016a7c <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016893:	90                   	nop
c0016894:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001689b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00168a1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00168a7:	3d 00 02 00 00       	cmp    eax,0x200
c00168ac:	74 0a                	je     c00168b8 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c00168ae:	b0 00                	mov    al,0x0
c00168b0:	e9 c7 01 00 00       	jmp    c0016a7c <FAT::tryMount(LogicalDisk*, int)+0x210>
c00168b5:	8d 76 00             	lea    esi,[esi+0x0]
c00168b8:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c00168c0:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00168c7:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c00168ce:	83 f8 ff             	cmp    eax,0xffffffff
c00168d1:	74 09                	je     c00168dc <FAT::tryMount(LogicalDisk*, int)+0x70>
c00168d3:	b0 01                	mov    al,0x1
c00168d5:	e9 a2 01 00 00       	jmp    c0016a7c <FAT::tryMount(LogicalDisk*, int)+0x210>
c00168da:	66 90                	xchg   ax,ax
c00168dc:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c00168e6:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c00168ee:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c00168f5:	88 c2                	mov    dl,al
c00168f7:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c00168fc:	01 d0                	add    eax,edx
c00168fe:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0016905:	8b 15 20 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025220
c001690b:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0016912:	89 14 85 40 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdadc0],edx
c0016919:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c001691e:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0016925:	89 14 85 c0 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad40],edx
c001692c:	83 ec 0c             	sub    esp,0xc
c001692f:	68 34 02 00 00       	push   0x234
c0016934:	e8 80 0e ff ff       	call   c00077b9 <malloc>
c0016939:	83 c4 10             	add    esp,0x10
c001693c:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0016943:	83 ec 04             	sub    esp,0x4
c0016946:	6a 00                	push   0x0
c0016948:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001694f:	50                   	push   eax
c0016950:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016957:	e8 5f d1 fe ff       	call   c0003abb <f_mount>
c001695c:	83 c4 10             	add    esp,0x10
c001695f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016966:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001696e:	74 1c                	je     c001698c <FAT::tryMount(LogicalDisk*, int)+0x120>
c0016970:	83 ec 0c             	sub    esp,0xc
c0016973:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001697a:	e8 5a 0e ff ff       	call   c00077d9 <rfree>
c001697f:	83 c4 10             	add    esp,0x10
c0016982:	b0 00                	mov    al,0x0
c0016984:	e9 f3 00 00 00       	jmp    c0016a7c <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016989:	8d 76 00             	lea    esi,[esi+0x0]
c001698c:	83 ec 04             	sub    esp,0x4
c001698f:	68 00 01 00 00       	push   0x100
c0016994:	6a 00                	push   0x0
c0016996:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001699d:	50                   	push   eax
c001699e:	e8 2d 9b fe ff       	call   c00004d0 <memset>
c00169a3:	83 c4 10             	add    esp,0x10
c00169a6:	83 ec 08             	sub    esp,0x8
c00169a9:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00169b0:	50                   	push   eax
c00169b1:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00169b8:	50                   	push   eax
c00169b9:	e8 02 9e fe ff       	call   c00007c0 <strcat>
c00169be:	83 c4 10             	add    esp,0x10
c00169c1:	83 ec 08             	sub    esp,0x8
c00169c4:	68 8a f0 01 c0       	push   0xc001f08a
c00169c9:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00169d0:	50                   	push   eax
c00169d1:	e8 ea 9d fe ff       	call   c00007c0 <strcat>
c00169d6:	83 c4 10             	add    esp,0x10
c00169d9:	83 ec 04             	sub    esp,0x4
c00169dc:	6a 01                	push   0x1
c00169de:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c00169e5:	50                   	push   eax
c00169e6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00169ea:	50                   	push   eax
c00169eb:	e8 2d d1 fe ff       	call   c0003b1d <f_open>
c00169f0:	83 c4 10             	add    esp,0x10
c00169f3:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00169fa:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0016a01:	85 c0                	test   eax,eax
c0016a03:	74 0b                	je     c0016a10 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0016a05:	78 31                	js     c0016a38 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016a07:	83 e8 04             	sub    eax,0x4
c0016a0a:	83 f8 01             	cmp    eax,0x1
c0016a0d:	77 29                	ja     c0016a38 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016a0f:	90                   	nop
c0016a10:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0016a18:	83 ec 0c             	sub    esp,0xc
c0016a1b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016a1f:	50                   	push   eax
c0016a20:	e8 ab d8 fe ff       	call   c00042d0 <f_close>
c0016a25:	83 c4 10             	add    esp,0x10
c0016a28:	90                   	nop
c0016a29:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c0016a31:	74 41                	je     c0016a74 <FAT::tryMount(LogicalDisk*, int)+0x208>
c0016a33:	eb 33                	jmp    c0016a68 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0016a35:	8d 76 00             	lea    esi,[esi+0x0]
c0016a38:	83 ec 0c             	sub    esp,0xc
c0016a3b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016a42:	e8 92 0d ff ff       	call   c00077d9 <rfree>
c0016a47:	83 c4 10             	add    esp,0x10
c0016a4a:	83 ec 04             	sub    esp,0x4
c0016a4d:	6a 00                	push   0x0
c0016a4f:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016a56:	50                   	push   eax
c0016a57:	6a 00                	push   0x0
c0016a59:	e8 5d d0 fe ff       	call   c0003abb <f_mount>
c0016a5e:	83 c4 10             	add    esp,0x10
c0016a61:	b0 00                	mov    al,0x0
c0016a63:	eb 17                	jmp    c0016a7c <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016a65:	8d 76 00             	lea    esi,[esi+0x0]
c0016a68:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c0016a6d:	40                   	inc    eax
c0016a6e:	a3 20 52 02 c0       	mov    ds:0xc0025220,eax
c0016a73:	90                   	nop
c0016a74:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0016a7b:	90                   	nop
c0016a7c:	81 c4 4c 03 00 00    	add    esp,0x34c
c0016a82:	c3                   	ret    
c0016a83:	90                   	nop

c0016a84 <FAT::allocateSwapfile(char const*, int)>:
c0016a84:	55                   	push   ebp
c0016a85:	57                   	push   edi
c0016a86:	56                   	push   esi
c0016a87:	53                   	push   ebx
c0016a88:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0016a8e:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0016a99:	83 ec 0c             	sub    esp,0xc
c0016a9c:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0016aa3:	e8 11 0d ff ff       	call   c00077b9 <malloc>
c0016aa8:	83 c4 10             	add    esp,0x10
c0016aab:	89 c7                	mov    edi,eax
c0016aad:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0016ab2:	83 ec 04             	sub    esp,0x4
c0016ab5:	50                   	push   eax
c0016ab6:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0016abd:	57                   	push   edi
c0016abe:	e8 33 40 ff ff       	call   c000aaf6 <File::File(char const*, Process*)>
c0016ac3:	83 c4 10             	add    esp,0x10
c0016ac6:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0016acd:	83 ec 04             	sub    esp,0x4
c0016ad0:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016ad4:	50                   	push   eax
c0016ad5:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016ad9:	50                   	push   eax
c0016ada:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016ae1:	e8 7c 43 ff ff       	call   c000ae62 <File::stat(unsigned long long*, bool*)>
c0016ae6:	83 c4 10             	add    esp,0x10
c0016ae9:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016af0:	c1 e0 14             	shl    eax,0x14
c0016af3:	89 c7                	mov    edi,eax
c0016af5:	89 c5                	mov    ebp,eax
c0016af7:	c1 fd 1f             	sar    ebp,0x1f
c0016afa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016afe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016b02:	89 f9                	mov    ecx,edi
c0016b04:	31 c1                	xor    ecx,eax
c0016b06:	89 cb                	mov    ebx,ecx
c0016b08:	89 e9                	mov    ecx,ebp
c0016b0a:	31 d1                	xor    ecx,edx
c0016b0c:	89 ce                	mov    esi,ecx
c0016b0e:	89 f0                	mov    eax,esi
c0016b10:	09 d8                	or     eax,ebx
c0016b12:	0f 84 9c 00 00 00    	je     c0016bb4 <FAT::allocateSwapfile(char const*, int)+0x130>
c0016b18:	83 ec 0c             	sub    esp,0xc
c0016b1b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016b22:	e8 07 42 ff ff       	call   c000ad2e <File::unlink()>
c0016b27:	83 c4 10             	add    esp,0x10
c0016b2a:	83 ec 08             	sub    esp,0x8
c0016b2d:	6a 12                	push   0x12
c0016b2f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016b36:	e8 7b 40 ff ff       	call   c000abb6 <File::open(FileOpenMode)>
c0016b3b:	83 c4 10             	add    esp,0x10
c0016b3e:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016b45:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016b4b:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016b52:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016b59:	c1 e0 14             	shl    eax,0x14
c0016b5c:	83 ec 04             	sub    esp,0x4
c0016b5f:	6a 01                	push   0x1
c0016b61:	50                   	push   eax
c0016b62:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0016b69:	e8 c7 e5 fe ff       	call   c0005135 <f_expand>
c0016b6e:	83 c4 10             	add    esp,0x10
c0016b71:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016b78:	8b 00                	mov    eax,DWORD PTR [eax]
c0016b7a:	83 c0 10             	add    eax,0x10
c0016b7d:	8b 00                	mov    eax,DWORD PTR [eax]
c0016b7f:	83 ec 0c             	sub    esp,0xc
c0016b82:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016b86:	52                   	push   edx
c0016b87:	8d 54 24 30          	lea    edx,[esp+0x30]
c0016b8b:	52                   	push   edx
c0016b8c:	6a 00                	push   0x0
c0016b8e:	68 00 04 00 00       	push   0x400
c0016b93:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016b9a:	ff d0                	call   eax
c0016b9c:	83 c4 20             	add    esp,0x20
c0016b9f:	83 ec 0c             	sub    esp,0xc
c0016ba2:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016ba9:	e8 66 40 ff ff       	call   c000ac14 <File::close()>
c0016bae:	83 c4 10             	add    esp,0x10
c0016bb1:	8d 76 00             	lea    esi,[esi+0x0]
c0016bb4:	83 ec 08             	sub    esp,0x8
c0016bb7:	6a 01                	push   0x1
c0016bb9:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016bc0:	e8 f1 3f ff ff       	call   c000abb6 <File::open(FileOpenMode)>
c0016bc5:	83 c4 10             	add    esp,0x10
c0016bc8:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016bcf:	8b 00                	mov    eax,DWORD PTR [eax]
c0016bd1:	83 c0 0c             	add    eax,0xc
c0016bd4:	8b 00                	mov    eax,DWORD PTR [eax]
c0016bd6:	83 ec 0c             	sub    esp,0xc
c0016bd9:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016bdd:	52                   	push   edx
c0016bde:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0016be2:	52                   	push   edx
c0016be3:	6a 00                	push   0x0
c0016be5:	6a 04                	push   0x4
c0016be7:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016bee:	ff d0                	call   eax
c0016bf0:	83 c4 20             	add    esp,0x20
c0016bf3:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016bfa:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016c00:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016c07:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0016c0e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016c11:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0016c18:	83 ec 0c             	sub    esp,0xc
c0016c1b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c22:	e8 ed 3f ff ff       	call   c000ac14 <File::close()>
c0016c27:	83 c4 10             	add    esp,0x10
c0016c2a:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0016c31:	ba 00 00 00 00       	mov    edx,0x0
c0016c36:	81 c4 3c 04 00 00    	add    esp,0x43c
c0016c3c:	5b                   	pop    ebx
c0016c3d:	5e                   	pop    esi
c0016c3e:	5f                   	pop    edi
c0016c3f:	5d                   	pop    ebp
c0016c40:	c3                   	ret    
c0016c41:	90                   	nop
c0016c42:	66 90                	xchg   ax,ax

c0016c44 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0016c44:	57                   	push   edi
c0016c45:	56                   	push   esi
c0016c46:	53                   	push   ebx
c0016c47:	81 ec 50 02 00 00    	sub    esp,0x250
c0016c4d:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0016c55:	74 0d                	je     c0016c64 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0016c57:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0016c5f:	75 0f                	jne    c0016c70 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0016c61:	8d 76 00             	lea    esi,[esi+0x0]
c0016c64:	b8 04 00 00 00       	mov    eax,0x4
c0016c69:	e9 36 01 00 00       	jmp    c0016da4 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016c6e:	66 90                	xchg   ax,ax
c0016c70:	83 ec 08             	sub    esp,0x8
c0016c73:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016c7a:	50                   	push   eax
c0016c7b:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0016c82:	e8 0c d9 fe ff       	call   c0004593 <f_readdir>
c0016c87:	83 c4 10             	add    esp,0x10
c0016c8a:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0016c91:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0016c98:	83 ec 0c             	sub    esp,0xc
c0016c9b:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0016ca2:	83 c0 16             	add    eax,0x16
c0016ca5:	50                   	push   eax
c0016ca6:	e8 95 98 fe ff       	call   c0000540 <strlen>
c0016cab:	83 c4 10             	add    esp,0x10
c0016cae:	ba 00 00 00 00       	mov    edx,0x0
c0016cb3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016cb7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016cbb:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0016cc2:	25 ff 00 00 00       	and    eax,0xff
c0016cc7:	83 e0 10             	and    eax,0x10
c0016cca:	74 08                	je     c0016cd4 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0016ccc:	b8 02 00 00 00       	mov    eax,0x2
c0016cd1:	eb 09                	jmp    c0016cdc <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0016cd3:	90                   	nop
c0016cd4:	b8 01 00 00 00       	mov    eax,0x1
c0016cd9:	8d 76 00             	lea    esi,[esi+0x0]
c0016cdc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016ce0:	83 ec 08             	sub    esp,0x8
c0016ce3:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016cea:	83 c0 16             	add    eax,0x16
c0016ced:	50                   	push   eax
c0016cee:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016cf2:	83 c0 10             	add    eax,0x10
c0016cf5:	50                   	push   eax
c0016cf6:	e8 05 99 fe ff       	call   c0000600 <strcpy>
c0016cfb:	83 c4 10             	add    esp,0x10
c0016cfe:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0016d05:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0016d0c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016d10:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0016d17:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0016d1e:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0016d25:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0016d2c:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0016d33:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0016d3a:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0016d41:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0016d48:	89 c6                	mov    esi,eax
c0016d4a:	89 d7                	mov    edi,edx
c0016d4c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016d4e:	89 c8                	mov    eax,ecx
c0016d50:	89 fa                	mov    edx,edi
c0016d52:	89 f3                	mov    ebx,esi
c0016d54:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0016d5b:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0016d62:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0016d69:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0016d70:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0016d76:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0016d7d:	84 c0                	test   al,al
c0016d7f:	75 07                	jne    c0016d88 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0016d81:	b8 07 00 00 00       	mov    eax,0x7
c0016d86:	eb 1c                	jmp    c0016da4 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016d88:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0016d8f:	85 c0                	test   eax,eax
c0016d91:	75 09                	jne    c0016d9c <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0016d93:	b8 00 00 00 00       	mov    eax,0x0
c0016d98:	eb 0a                	jmp    c0016da4 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016d9a:	66 90                	xchg   ax,ax
c0016d9c:	b8 01 00 00 00       	mov    eax,0x1
c0016da1:	8d 76 00             	lea    esi,[esi+0x0]
c0016da4:	81 c4 50 02 00 00    	add    esp,0x250
c0016daa:	5b                   	pop    ebx
c0016dab:	5e                   	pop    esi
c0016dac:	5f                   	pop    edi
c0016dad:	c3                   	ret    
c0016dae:	66 90                	xchg   ax,ax

c0016db0 <FAT::read(void*, unsigned long, void*, int*)>:
c0016db0:	83 ec 1c             	sub    esp,0x1c
c0016db3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016db8:	74 0a                	je     c0016dc4 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0016dba:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016dbf:	75 0b                	jne    c0016dcc <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0016dc1:	8d 76 00             	lea    esi,[esi+0x0]
c0016dc4:	b8 04 00 00 00       	mov    eax,0x4
c0016dc9:	eb 41                	jmp    c0016e0c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016dcb:	90                   	nop
c0016dcc:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016dd0:	50                   	push   eax
c0016dd1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016dd5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016dd9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016ddd:	e8 06 d0 fe ff       	call   c0003de8 <f_read>
c0016de2:	83 c4 10             	add    esp,0x10
c0016de5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016de9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016ded:	89 c2                	mov    edx,eax
c0016def:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016df3:	89 10                	mov    DWORD PTR [eax],edx
c0016df5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016df9:	85 c0                	test   eax,eax
c0016dfb:	75 07                	jne    c0016e04 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0016dfd:	b8 00 00 00 00       	mov    eax,0x0
c0016e02:	eb 08                	jmp    c0016e0c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016e04:	b8 01 00 00 00       	mov    eax,0x1
c0016e09:	8d 76 00             	lea    esi,[esi+0x0]
c0016e0c:	83 c4 1c             	add    esp,0x1c
c0016e0f:	c3                   	ret    

c0016e10 <FAT::write(void*, unsigned long, void*, int*)>:
c0016e10:	83 ec 1c             	sub    esp,0x1c
c0016e13:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016e18:	74 0a                	je     c0016e24 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0016e1a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016e1f:	75 0b                	jne    c0016e2c <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0016e21:	8d 76 00             	lea    esi,[esi+0x0]
c0016e24:	b8 04 00 00 00       	mov    eax,0x4
c0016e29:	eb 41                	jmp    c0016e6c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016e2b:	90                   	nop
c0016e2c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016e30:	50                   	push   eax
c0016e31:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016e35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016e39:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e3d:	e8 a5 d1 fe ff       	call   c0003fe7 <f_write>
c0016e42:	83 c4 10             	add    esp,0x10
c0016e45:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e49:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016e4d:	89 c2                	mov    edx,eax
c0016e4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016e53:	89 10                	mov    DWORD PTR [eax],edx
c0016e55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e59:	85 c0                	test   eax,eax
c0016e5b:	75 07                	jne    c0016e64 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0016e5d:	b8 00 00 00 00       	mov    eax,0x0
c0016e62:	eb 08                	jmp    c0016e6c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016e64:	b8 01 00 00 00       	mov    eax,0x1
c0016e69:	8d 76 00             	lea    esi,[esi+0x0]
c0016e6c:	83 c4 1c             	add    esp,0x1c
c0016e6f:	c3                   	ret    

c0016e70 <FAT::close(void*)>:
c0016e70:	83 ec 1c             	sub    esp,0x1c
c0016e73:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016e78:	75 0a                	jne    c0016e84 <FAT::close(void*)+0x14>
c0016e7a:	b8 04 00 00 00       	mov    eax,0x4
c0016e7f:	eb 3f                	jmp    c0016ec0 <FAT::close(void*)+0x50>
c0016e81:	8d 76 00             	lea    esi,[esi+0x0]
c0016e84:	83 ec 0c             	sub    esp,0xc
c0016e87:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e8b:	e8 40 d4 fe ff       	call   c00042d0 <f_close>
c0016e90:	83 c4 10             	add    esp,0x10
c0016e93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e97:	83 ec 0c             	sub    esp,0xc
c0016e9a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e9e:	e8 26 09 ff ff       	call   c00077c9 <free>
c0016ea3:	83 c4 10             	add    esp,0x10
c0016ea6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016eaa:	85 c0                	test   eax,eax
c0016eac:	75 0a                	jne    c0016eb8 <FAT::close(void*)+0x48>
c0016eae:	b8 00 00 00 00       	mov    eax,0x0
c0016eb3:	eb 0b                	jmp    c0016ec0 <FAT::close(void*)+0x50>
c0016eb5:	8d 76 00             	lea    esi,[esi+0x0]
c0016eb8:	b8 01 00 00 00       	mov    eax,0x1
c0016ebd:	8d 76 00             	lea    esi,[esi+0x0]
c0016ec0:	83 c4 1c             	add    esp,0x1c
c0016ec3:	c3                   	ret    

c0016ec4 <FAT::closeDir(void*)>:
c0016ec4:	83 ec 1c             	sub    esp,0x1c
c0016ec7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016ecc:	75 0a                	jne    c0016ed8 <FAT::closeDir(void*)+0x14>
c0016ece:	b8 04 00 00 00       	mov    eax,0x4
c0016ed3:	eb 3f                	jmp    c0016f14 <FAT::closeDir(void*)+0x50>
c0016ed5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ed8:	83 ec 0c             	sub    esp,0xc
c0016edb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016edf:	e8 8d d6 fe ff       	call   c0004571 <f_closedir>
c0016ee4:	83 c4 10             	add    esp,0x10
c0016ee7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016eeb:	83 ec 0c             	sub    esp,0xc
c0016eee:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016ef2:	e8 d2 08 ff ff       	call   c00077c9 <free>
c0016ef7:	83 c4 10             	add    esp,0x10
c0016efa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016efe:	85 c0                	test   eax,eax
c0016f00:	75 0a                	jne    c0016f0c <FAT::closeDir(void*)+0x48>
c0016f02:	b8 00 00 00 00       	mov    eax,0x0
c0016f07:	eb 0b                	jmp    c0016f14 <FAT::closeDir(void*)+0x50>
c0016f09:	8d 76 00             	lea    esi,[esi+0x0]
c0016f0c:	b8 01 00 00 00       	mov    eax,0x1
c0016f11:	8d 76 00             	lea    esi,[esi+0x0]
c0016f14:	83 c4 1c             	add    esp,0x1c
c0016f17:	c3                   	ret    

c0016f18 <FAT::seek(void*, unsigned long long)>:
c0016f18:	83 ec 2c             	sub    esp,0x2c
c0016f1b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016f1f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016f23:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016f27:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f2b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0016f30:	75 0a                	jne    c0016f3c <FAT::seek(void*, unsigned long long)+0x24>
c0016f32:	b8 04 00 00 00       	mov    eax,0x4
c0016f37:	eb 33                	jmp    c0016f6c <FAT::seek(void*, unsigned long long)+0x54>
c0016f39:	8d 76 00             	lea    esi,[esi+0x0]
c0016f3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016f40:	83 ec 08             	sub    esp,0x8
c0016f43:	50                   	push   eax
c0016f44:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016f48:	e8 b2 d3 fe ff       	call   c00042ff <f_lseek>
c0016f4d:	83 c4 10             	add    esp,0x10
c0016f50:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016f54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016f58:	85 c0                	test   eax,eax
c0016f5a:	75 08                	jne    c0016f64 <FAT::seek(void*, unsigned long long)+0x4c>
c0016f5c:	b8 00 00 00 00       	mov    eax,0x0
c0016f61:	eb 09                	jmp    c0016f6c <FAT::seek(void*, unsigned long long)+0x54>
c0016f63:	90                   	nop
c0016f64:	b8 01 00 00 00       	mov    eax,0x1
c0016f69:	8d 76 00             	lea    esi,[esi+0x0]
c0016f6c:	83 c4 2c             	add    esp,0x2c
c0016f6f:	c3                   	ret    

c0016f70 <fatWrapperReadDisk>:
c0016f70:	53                   	push   ebx
c0016f71:	83 ec 18             	sub    esp,0x18
c0016f74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f78:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016f7c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016f80:	25 ff 00 00 00       	and    eax,0xff
c0016f85:	8b 0c 85 20 44 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbbe0]
c0016f8c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016f90:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016f94:	ba 00 00 00 00       	mov    edx,0x0
c0016f99:	83 ec 0c             	sub    esp,0xc
c0016f9c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016fa0:	53                   	push   ebx
c0016fa1:	52                   	push   edx
c0016fa2:	50                   	push   eax
c0016fa3:	51                   	push   ecx
c0016fa4:	e8 ff 5c ff ff       	call   c000cca8 <LogicalDisk::read(unsigned long long, int, void*)>
c0016fa9:	83 c4 20             	add    esp,0x20
c0016fac:	83 c4 18             	add    esp,0x18
c0016faf:	5b                   	pop    ebx
c0016fb0:	c3                   	ret    
c0016fb1:	8d 76 00             	lea    esi,[esi+0x0]

c0016fb4 <fatWrapperWriteDisk>:
c0016fb4:	53                   	push   ebx
c0016fb5:	83 ec 18             	sub    esp,0x18
c0016fb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fbc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016fc0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016fc4:	25 ff 00 00 00       	and    eax,0xff
c0016fc9:	8b 0c 85 20 44 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbbe0]
c0016fd0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016fd4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016fd8:	ba 00 00 00 00       	mov    edx,0x0
c0016fdd:	83 ec 0c             	sub    esp,0xc
c0016fe0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016fe4:	53                   	push   ebx
c0016fe5:	52                   	push   edx
c0016fe6:	50                   	push   eax
c0016fe7:	51                   	push   ecx
c0016fe8:	e8 27 5d ff ff       	call   c000cd14 <LogicalDisk::write(unsigned long long, int, void*)>
c0016fed:	83 c4 20             	add    esp,0x20
c0016ff0:	83 c4 18             	add    esp,0x18
c0016ff3:	5b                   	pop    ebx
c0016ff4:	c3                   	ret    
c0016ff5:	8d 76 00             	lea    esi,[esi+0x0]

c0016ff8 <fatWrapperIoctl>:
c0016ff8:	53                   	push   ebx
c0016ff9:	83 ec 28             	sub    esp,0x28
c0016ffc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017000:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017004:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0017008:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001700c:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0017011:	75 35                	jne    c0017048 <fatWrapperIoctl+0x50>
c0017013:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017017:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001701b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001701f:	25 ff 00 00 00       	and    eax,0xff
c0017024:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c001702b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0017031:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017037:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001703b:	66 89 02             	mov    WORD PTR [edx],ax
c001703e:	b8 00 00 00 00       	mov    eax,0x0
c0017043:	e9 c4 00 00 00       	jmp    c001710c <fatWrapperIoctl+0x114>
c0017048:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001704d:	75 75                	jne    c00170c4 <fatWrapperIoctl+0xcc>
c001704f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017053:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017057:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001705b:	25 ff 00 00 00       	and    eax,0xff
c0017060:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c0017067:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001706d:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0017073:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0017079:	89 c8                	mov    eax,ecx
c001707b:	89 da                	mov    edx,ebx
c001707d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0017081:	c1 e0 0a             	shl    eax,0xa
c0017084:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0017088:	81 e1 ff 00 00 00    	and    ecx,0xff
c001708e:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c0017095:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001709b:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00170a1:	89 cb                	mov    ebx,ecx
c00170a3:	c1 fb 1f             	sar    ebx,0x1f
c00170a6:	53                   	push   ebx
c00170a7:	51                   	push   ecx
c00170a8:	52                   	push   edx
c00170a9:	50                   	push   eax
c00170aa:	e8 a1 50 00 00       	call   c001c150 <__udivdi3>
c00170af:	83 c4 10             	add    esp,0x10
c00170b2:	89 c2                	mov    edx,eax
c00170b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00170b8:	89 10                	mov    DWORD PTR [eax],edx
c00170ba:	b8 00 00 00 00       	mov    eax,0x0
c00170bf:	eb 4b                	jmp    c001710c <fatWrapperIoctl+0x114>
c00170c1:	8d 76 00             	lea    esi,[esi+0x0]
c00170c4:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00170c9:	75 09                	jne    c00170d4 <fatWrapperIoctl+0xdc>
c00170cb:	b8 00 00 00 00       	mov    eax,0x0
c00170d0:	eb 3a                	jmp    c001710c <fatWrapperIoctl+0x114>
c00170d2:	66 90                	xchg   ax,ax
c00170d4:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00170d9:	75 19                	jne    c00170f4 <fatWrapperIoctl+0xfc>
c00170db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00170df:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00170e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00170e7:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00170ed:	b8 00 00 00 00       	mov    eax,0x0
c00170f2:	eb 18                	jmp    c001710c <fatWrapperIoctl+0x114>
c00170f4:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c00170f9:	75 09                	jne    c0017104 <fatWrapperIoctl+0x10c>
c00170fb:	b8 00 00 00 00       	mov    eax,0x0
c0017100:	eb 0a                	jmp    c001710c <fatWrapperIoctl+0x114>
c0017102:	66 90                	xchg   ax,ax
c0017104:	b8 04 00 00 00       	mov    eax,0x4
c0017109:	8d 76 00             	lea    esi,[esi+0x0]
c001710c:	83 c4 28             	add    esp,0x28
c001710f:	5b                   	pop    ebx
c0017110:	c3                   	ret    
c0017111:	90                   	nop
c0017112:	66 90                	xchg   ax,ax

c0017114 <FAT::FAT()>:
c0017114:	83 ec 1c             	sub    esp,0x1c
c0017117:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001711b:	83 ec 0c             	sub    esp,0xc
c001711e:	50                   	push   eax
c001711f:	e8 7e 37 ff ff       	call   c000a8a2 <Filesystem::Filesystem()>
c0017124:	83 c4 10             	add    esp,0x10
c0017127:	ba a0 f0 01 c0       	mov    edx,0xc001f0a0
c001712c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017130:	89 10                	mov    DWORD PTR [eax],edx
c0017132:	c7 05 20 52 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025220,0x0
c001713c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017144:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0017149:	7f 15                	jg     c0017160 <FAT::FAT()+0x4c>
c001714b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001714f:	c7 04 85 40 52 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdadc0],0xffffffff
c001715a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001715e:	eb e4                	jmp    c0017144 <FAT::FAT()+0x30>
c0017160:	90                   	nop
c0017161:	83 c4 1c             	add    esp,0x1c
c0017164:	c3                   	ret    
c0017165:	90                   	nop
c0017166:	66 90                	xchg   ax,ax

c0017168 <FAT::fixFilepath(char*)>:
c0017168:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001716c:	8a 00                	mov    al,BYTE PTR [eax]
c001716e:	3c 40                	cmp    al,0x40
c0017170:	7e 2e                	jle    c00171a0 <FAT::fixFilepath(char*)+0x38>
c0017172:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017176:	8a 00                	mov    al,BYTE PTR [eax]
c0017178:	83 e8 41             	sub    eax,0x41
c001717b:	88 c2                	mov    dl,al
c001717d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017181:	88 10                	mov    BYTE PTR [eax],dl
c0017183:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017187:	8a 00                	mov    al,BYTE PTR [eax]
c0017189:	0f be c0             	movsx  eax,al
c001718c:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c0017193:	83 c0 30             	add    eax,0x30
c0017196:	88 c2                	mov    dl,al
c0017198:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001719c:	88 10                	mov    BYTE PTR [eax],dl
c001719e:	66 90                	xchg   ax,ax
c00171a0:	90                   	nop
c00171a1:	c3                   	ret    
c00171a2:	66 90                	xchg   ax,ax

c00171a4 <FAT::open(char const*, void**, FileOpenMode)>:
c00171a4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00171aa:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00171b2:	74 0c                	je     c00171c0 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c00171b4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00171bc:	75 0e                	jne    c00171cc <FAT::open(char const*, void**, FileOpenMode)+0x28>
c00171be:	66 90                	xchg   ax,ax
c00171c0:	b8 04 00 00 00       	mov    eax,0x4
c00171c5:	e9 0a 01 00 00       	jmp    c00172d4 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c00171ca:	66 90                	xchg   ax,ax
c00171cc:	83 ec 08             	sub    esp,0x8
c00171cf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00171d6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00171da:	50                   	push   eax
c00171db:	e8 20 94 fe ff       	call   c0000600 <strcpy>
c00171e0:	83 c4 10             	add    esp,0x10
c00171e3:	83 ec 08             	sub    esp,0x8
c00171e6:	8d 44 24 10          	lea    eax,[esp+0x10]
c00171ea:	50                   	push   eax
c00171eb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00171f2:	e8 71 ff ff ff       	call   c0017168 <FAT::fixFilepath(char*)>
c00171f7:	83 c4 10             	add    esp,0x10
c00171fa:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0017202:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017209:	83 e0 01             	and    eax,0x1
c001720c:	74 0a                	je     c0017218 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001720e:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0017216:	66 90                	xchg   ax,ax
c0017218:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001721f:	83 e0 04             	and    eax,0x4
c0017222:	74 10                	je     c0017234 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c0017224:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001722c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0017234:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001723b:	83 e0 02             	and    eax,0x2
c001723e:	74 08                	je     c0017248 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c0017240:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0017248:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001724f:	83 e0 08             	and    eax,0x8
c0017252:	74 08                	je     c001725c <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c0017254:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001725c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017263:	83 e0 10             	and    eax,0x10
c0017266:	74 08                	je     c0017270 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0017268:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0017270:	83 ec 0c             	sub    esp,0xc
c0017273:	68 28 02 00 00       	push   0x228
c0017278:	e8 3c 05 ff ff       	call   c00077b9 <malloc>
c001727d:	83 c4 10             	add    esp,0x10
c0017280:	89 c2                	mov    edx,eax
c0017282:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017289:	89 10                	mov    DWORD PTR [eax],edx
c001728b:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0017292:	31 d2                	xor    edx,edx
c0017294:	88 c2                	mov    dl,al
c0017296:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001729d:	8b 00                	mov    eax,DWORD PTR [eax]
c001729f:	83 ec 04             	sub    esp,0x4
c00172a2:	52                   	push   edx
c00172a3:	8d 54 24 10          	lea    edx,[esp+0x10]
c00172a7:	52                   	push   edx
c00172a8:	50                   	push   eax
c00172a9:	e8 6f c8 fe ff       	call   c0003b1d <f_open>
c00172ae:	83 c4 10             	add    esp,0x10
c00172b1:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00172b8:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00172c0:	74 0a                	je     c00172cc <FAT::open(char const*, void**, FileOpenMode)+0x128>
c00172c2:	b8 01 00 00 00       	mov    eax,0x1
c00172c7:	eb 0b                	jmp    c00172d4 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c00172c9:	8d 76 00             	lea    esi,[esi+0x0]
c00172cc:	b8 00 00 00 00       	mov    eax,0x0
c00172d1:	8d 76 00             	lea    esi,[esi+0x0]
c00172d4:	81 c4 1c 01 00 00    	add    esp,0x11c
c00172da:	c3                   	ret    
c00172db:	90                   	nop

c00172dc <FAT::openDir(char const*, void**)>:
c00172dc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00172e2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00172ea:	74 0c                	je     c00172f8 <FAT::openDir(char const*, void**)+0x1c>
c00172ec:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00172f4:	75 0e                	jne    c0017304 <FAT::openDir(char const*, void**)+0x28>
c00172f6:	66 90                	xchg   ax,ax
c00172f8:	b8 04 00 00 00       	mov    eax,0x4
c00172fd:	e9 82 00 00 00       	jmp    c0017384 <FAT::openDir(char const*, void**)+0xa8>
c0017302:	66 90                	xchg   ax,ax
c0017304:	83 ec 08             	sub    esp,0x8
c0017307:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001730e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017312:	50                   	push   eax
c0017313:	e8 e8 92 fe ff       	call   c0000600 <strcpy>
c0017318:	83 c4 10             	add    esp,0x10
c001731b:	83 ec 08             	sub    esp,0x8
c001731e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017322:	50                   	push   eax
c0017323:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001732a:	e8 39 fe ff ff       	call   c0017168 <FAT::fixFilepath(char*)>
c001732f:	83 c4 10             	add    esp,0x10
c0017332:	83 ec 0c             	sub    esp,0xc
c0017335:	6a 30                	push   0x30
c0017337:	e8 7d 04 ff ff       	call   c00077b9 <malloc>
c001733c:	83 c4 10             	add    esp,0x10
c001733f:	89 c2                	mov    edx,eax
c0017341:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017348:	89 10                	mov    DWORD PTR [eax],edx
c001734a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017351:	8b 00                	mov    eax,DWORD PTR [eax]
c0017353:	83 ec 08             	sub    esp,0x8
c0017356:	8d 54 24 14          	lea    edx,[esp+0x14]
c001735a:	52                   	push   edx
c001735b:	50                   	push   eax
c001735c:	e8 45 d1 fe ff       	call   c00044a6 <f_opendir>
c0017361:	83 c4 10             	add    esp,0x10
c0017364:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001736b:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0017373:	74 07                	je     c001737c <FAT::openDir(char const*, void**)+0xa0>
c0017375:	b8 01 00 00 00       	mov    eax,0x1
c001737a:	eb 08                	jmp    c0017384 <FAT::openDir(char const*, void**)+0xa8>
c001737c:	b8 00 00 00 00       	mov    eax,0x0
c0017381:	8d 76 00             	lea    esi,[esi+0x0]
c0017384:	81 c4 1c 01 00 00    	add    esp,0x11c
c001738a:	c3                   	ret    
c001738b:	90                   	nop

c001738c <FAT::stat(char const*, unsigned long long*, bool*)>:
c001738c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0017392:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001739a:	75 0c                	jne    c00173a8 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001739c:	b8 04 00 00 00       	mov    eax,0x4
c00173a1:	e9 d6 00 00 00       	jmp    c001747c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00173a6:	66 90                	xchg   ax,ax
c00173a8:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00173b0:	75 0a                	jne    c00173bc <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c00173b2:	b8 04 00 00 00       	mov    eax,0x4
c00173b7:	e9 c0 00 00 00       	jmp    c001747c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00173bc:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00173c4:	75 0a                	jne    c00173d0 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c00173c6:	b8 04 00 00 00       	mov    eax,0x4
c00173cb:	e9 ac 00 00 00       	jmp    c001747c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00173d0:	83 ec 08             	sub    esp,0x8
c00173d3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00173da:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00173e1:	50                   	push   eax
c00173e2:	e8 19 92 fe ff       	call   c0000600 <strcpy>
c00173e7:	83 c4 10             	add    esp,0x10
c00173ea:	83 ec 08             	sub    esp,0x8
c00173ed:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00173f4:	50                   	push   eax
c00173f5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00173fc:	e8 67 fd ff ff       	call   c0017168 <FAT::fixFilepath(char*)>
c0017401:	83 c4 10             	add    esp,0x10
c0017404:	83 ec 08             	sub    esp,0x8
c0017407:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001740b:	50                   	push   eax
c001740c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0017413:	50                   	push   eax
c0017414:	e8 0c d2 fe ff       	call   c0004625 <f_stat>
c0017419:	83 c4 10             	add    esp,0x10
c001741c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0017423:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001742a:	85 c0                	test   eax,eax
c001742c:	74 0a                	je     c0017438 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001742e:	83 f8 04             	cmp    eax,0x4
c0017431:	74 39                	je     c001746c <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0017433:	eb 3f                	jmp    c0017474 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0017435:	8d 76 00             	lea    esi,[esi+0x0]
c0017438:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001743c:	25 ff 00 00 00       	and    eax,0xff
c0017441:	83 e0 10             	and    eax,0x10
c0017444:	0f 95 c2             	setne  dl
c0017447:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001744e:	88 10                	mov    BYTE PTR [eax],dl
c0017450:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017454:	ba 00 00 00 00       	mov    edx,0x0
c0017459:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0017460:	89 01                	mov    DWORD PTR [ecx],eax
c0017462:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017465:	b8 00 00 00 00       	mov    eax,0x0
c001746a:	eb 10                	jmp    c001747c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001746c:	b8 02 00 00 00       	mov    eax,0x2
c0017471:	eb 09                	jmp    c001747c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017473:	90                   	nop
c0017474:	b8 01 00 00 00       	mov    eax,0x1
c0017479:	8d 76 00             	lea    esi,[esi+0x0]
c001747c:	81 c4 2c 02 00 00    	add    esp,0x22c
c0017482:	c3                   	ret    
c0017483:	90                   	nop

c0017484 <FAT::unlink(char const*)>:
c0017484:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001748a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0017492:	75 08                	jne    c001749c <FAT::unlink(char const*)+0x18>
c0017494:	b8 04 00 00 00       	mov    eax,0x4
c0017499:	eb 61                	jmp    c00174fc <FAT::unlink(char const*)+0x78>
c001749b:	90                   	nop
c001749c:	83 ec 08             	sub    esp,0x8
c001749f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00174a6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00174aa:	50                   	push   eax
c00174ab:	e8 50 91 fe ff       	call   c0000600 <strcpy>
c00174b0:	83 c4 10             	add    esp,0x10
c00174b3:	83 ec 08             	sub    esp,0x8
c00174b6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00174ba:	50                   	push   eax
c00174bb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00174c2:	e8 a1 fc ff ff       	call   c0017168 <FAT::fixFilepath(char*)>
c00174c7:	83 c4 10             	add    esp,0x10
c00174ca:	83 ec 0c             	sub    esp,0xc
c00174cd:	8d 44 24 18          	lea    eax,[esp+0x18]
c00174d1:	50                   	push   eax
c00174d2:	e8 b3 d3 fe ff       	call   c000488a <f_unlink>
c00174d7:	83 c4 10             	add    esp,0x10
c00174da:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00174e1:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00174e8:	85 c0                	test   eax,eax
c00174ea:	75 08                	jne    c00174f4 <FAT::unlink(char const*)+0x70>
c00174ec:	b8 00 00 00 00       	mov    eax,0x0
c00174f1:	eb 09                	jmp    c00174fc <FAT::unlink(char const*)+0x78>
c00174f3:	90                   	nop
c00174f4:	b8 01 00 00 00       	mov    eax,0x1
c00174f9:	8d 76 00             	lea    esi,[esi+0x0]
c00174fc:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017502:	c3                   	ret    
c0017503:	90                   	nop

c0017504 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0017504:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001750a:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0017511:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0017518:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001751c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017520:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0017528:	75 0a                	jne    c0017534 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001752a:	b8 04 00 00 00       	mov    eax,0x4
c001752f:	e9 54 01 00 00       	jmp    c0017688 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0017534:	83 ec 08             	sub    esp,0x8
c0017537:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001753e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017542:	50                   	push   eax
c0017543:	e8 b8 90 fe ff       	call   c0000600 <strcpy>
c0017548:	83 c4 10             	add    esp,0x10
c001754b:	83 ec 08             	sub    esp,0x8
c001754e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017552:	50                   	push   eax
c0017553:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001755a:	e8 09 fc ff ff       	call   c0017168 <FAT::fixFilepath(char*)>
c001755f:	83 c4 10             	add    esp,0x10
c0017562:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001756a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0017572:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017576:	25 ff 00 00 00       	and    eax,0xff
c001757b:	83 e0 01             	and    eax,0x1
c001757e:	74 08                	je     c0017588 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c0017580:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0017588:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001758c:	25 ff 00 00 00       	and    eax,0xff
c0017591:	83 e0 02             	and    eax,0x2
c0017594:	74 0a                	je     c00175a0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c0017596:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001759e:	66 90                	xchg   ax,ax
c00175a0:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00175a4:	25 ff 00 00 00       	and    eax,0xff
c00175a9:	83 e0 04             	and    eax,0x4
c00175ac:	74 0a                	je     c00175b8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c00175ae:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00175b6:	66 90                	xchg   ax,ax
c00175b8:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00175bc:	25 ff 00 00 00       	and    eax,0xff
c00175c1:	83 e0 08             	and    eax,0x8
c00175c4:	74 0a                	je     c00175d0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c00175c6:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00175ce:	66 90                	xchg   ax,ax
c00175d0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00175d4:	25 ff 00 00 00       	and    eax,0xff
c00175d9:	83 e0 01             	and    eax,0x1
c00175dc:	74 0a                	je     c00175e8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c00175de:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00175e6:	66 90                	xchg   ax,ax
c00175e8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00175ec:	25 ff 00 00 00       	and    eax,0xff
c00175f1:	83 e0 02             	and    eax,0x2
c00175f4:	74 0a                	je     c0017600 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c00175f6:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00175fe:	66 90                	xchg   ax,ax
c0017600:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017604:	25 ff 00 00 00       	and    eax,0xff
c0017609:	83 e0 04             	and    eax,0x4
c001760c:	74 0a                	je     c0017618 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c001760e:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0017616:	66 90                	xchg   ax,ax
c0017618:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001761c:	25 ff 00 00 00       	and    eax,0xff
c0017621:	83 e0 08             	and    eax,0x8
c0017624:	74 0a                	je     c0017630 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c0017626:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001762e:	66 90                	xchg   ax,ax
c0017630:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0017637:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001763e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0017645:	31 d2                	xor    edx,edx
c0017647:	88 c2                	mov    dl,al
c0017649:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0017650:	25 ff 00 00 00       	and    eax,0xff
c0017655:	83 ec 04             	sub    esp,0x4
c0017658:	52                   	push   edx
c0017659:	50                   	push   eax
c001765a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001765e:	50                   	push   eax
c001765f:	e8 99 d6 fe ff       	call   c0004cfd <f_chmod>
c0017664:	83 c4 10             	add    esp,0x10
c0017667:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001766e:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0017675:	85 c0                	test   eax,eax
c0017677:	75 07                	jne    c0017680 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c0017679:	b8 00 00 00 00       	mov    eax,0x0
c001767e:	eb 08                	jmp    c0017688 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0017680:	b8 01 00 00 00       	mov    eax,0x1
c0017685:	8d 76 00             	lea    esi,[esi+0x0]
c0017688:	81 c4 2c 01 00 00    	add    esp,0x12c
c001768e:	c3                   	ret    
c001768f:	90                   	nop

c0017690 <FAT::rename(char const*, char const*)>:
c0017690:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0017696:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001769e:	74 0c                	je     c00176ac <FAT::rename(char const*, char const*)+0x1c>
c00176a0:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00176a8:	75 0e                	jne    c00176b8 <FAT::rename(char const*, char const*)+0x28>
c00176aa:	66 90                	xchg   ax,ax
c00176ac:	b8 04 00 00 00       	mov    eax,0x4
c00176b1:	e9 9e 00 00 00       	jmp    c0017754 <FAT::rename(char const*, char const*)+0xc4>
c00176b6:	66 90                	xchg   ax,ax
c00176b8:	83 ec 08             	sub    esp,0x8
c00176bb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00176c2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00176c9:	50                   	push   eax
c00176ca:	e8 31 8f fe ff       	call   c0000600 <strcpy>
c00176cf:	83 c4 10             	add    esp,0x10
c00176d2:	83 ec 08             	sub    esp,0x8
c00176d5:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00176dc:	50                   	push   eax
c00176dd:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00176e4:	e8 7f fa ff ff       	call   c0017168 <FAT::fixFilepath(char*)>
c00176e9:	83 c4 10             	add    esp,0x10
c00176ec:	83 ec 08             	sub    esp,0x8
c00176ef:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00176f6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00176fa:	50                   	push   eax
c00176fb:	e8 00 8f fe ff       	call   c0000600 <strcpy>
c0017700:	83 c4 10             	add    esp,0x10
c0017703:	83 ec 08             	sub    esp,0x8
c0017706:	8d 44 24 14          	lea    eax,[esp+0x14]
c001770a:	50                   	push   eax
c001770b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017712:	e8 51 fa ff ff       	call   c0017168 <FAT::fixFilepath(char*)>
c0017717:	83 c4 10             	add    esp,0x10
c001771a:	83 ec 08             	sub    esp,0x8
c001771d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017721:	50                   	push   eax
c0017722:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0017729:	50                   	push   eax
c001772a:	e8 18 d4 fe ff       	call   c0004b47 <f_rename>
c001772f:	83 c4 10             	add    esp,0x10
c0017732:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0017739:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0017740:	85 c0                	test   eax,eax
c0017742:	75 08                	jne    c001774c <FAT::rename(char const*, char const*)+0xbc>
c0017744:	b8 00 00 00 00       	mov    eax,0x0
c0017749:	eb 09                	jmp    c0017754 <FAT::rename(char const*, char const*)+0xc4>
c001774b:	90                   	nop
c001774c:	b8 01 00 00 00       	mov    eax,0x1
c0017751:	8d 76 00             	lea    esi,[esi+0x0]
c0017754:	81 c4 1c 02 00 00    	add    esp,0x21c
c001775a:	c3                   	ret    
c001775b:	90                   	nop

c001775c <FAT::mkdir(char const*)>:
c001775c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017762:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001776a:	75 08                	jne    c0017774 <FAT::mkdir(char const*)+0x18>
c001776c:	b8 04 00 00 00       	mov    eax,0x4
c0017771:	eb 61                	jmp    c00177d4 <FAT::mkdir(char const*)+0x78>
c0017773:	90                   	nop
c0017774:	83 ec 08             	sub    esp,0x8
c0017777:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001777e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017782:	50                   	push   eax
c0017783:	e8 78 8e fe ff       	call   c0000600 <strcpy>
c0017788:	83 c4 10             	add    esp,0x10
c001778b:	83 ec 08             	sub    esp,0x8
c001778e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017792:	50                   	push   eax
c0017793:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001779a:	e8 c9 f9 ff ff       	call   c0017168 <FAT::fixFilepath(char*)>
c001779f:	83 c4 10             	add    esp,0x10
c00177a2:	83 ec 0c             	sub    esp,0xc
c00177a5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00177a9:	50                   	push   eax
c00177aa:	e8 fd d1 fe ff       	call   c00049ac <f_mkdir>
c00177af:	83 c4 10             	add    esp,0x10
c00177b2:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00177b9:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00177c0:	85 c0                	test   eax,eax
c00177c2:	75 08                	jne    c00177cc <FAT::mkdir(char const*)+0x70>
c00177c4:	b8 00 00 00 00       	mov    eax,0x0
c00177c9:	eb 09                	jmp    c00177d4 <FAT::mkdir(char const*)+0x78>
c00177cb:	90                   	nop
c00177cc:	b8 01 00 00 00       	mov    eax,0x1
c00177d1:	8d 76 00             	lea    esi,[esi+0x0]
c00177d4:	81 c4 1c 01 00 00    	add    esp,0x11c
c00177da:	c3                   	ret    
c00177db:	90                   	nop

c00177dc <FAT::exists(char const*)>:
c00177dc:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00177e2:	83 ec 08             	sub    esp,0x8
c00177e5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00177ec:	8d 44 24 10          	lea    eax,[esp+0x10]
c00177f0:	50                   	push   eax
c00177f1:	e8 0a 8e fe ff       	call   c0000600 <strcpy>
c00177f6:	83 c4 10             	add    esp,0x10
c00177f9:	83 ec 08             	sub    esp,0x8
c00177fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017800:	50                   	push   eax
c0017801:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017808:	e8 5b f9 ff ff       	call   c0017168 <FAT::fixFilepath(char*)>
c001780d:	83 c4 10             	add    esp,0x10
c0017810:	83 ec 08             	sub    esp,0x8
c0017813:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001781a:	50                   	push   eax
c001781b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001781f:	50                   	push   eax
c0017820:	e8 00 ce fe ff       	call   c0004625 <f_stat>
c0017825:	83 c4 10             	add    esp,0x10
c0017828:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001782f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0017836:	85 c0                	test   eax,eax
c0017838:	75 06                	jne    c0017840 <FAT::exists(char const*)+0x64>
c001783a:	b0 01                	mov    al,0x1
c001783c:	eb 06                	jmp    c0017844 <FAT::exists(char const*)+0x68>
c001783e:	66 90                	xchg   ax,ax
c0017840:	b0 00                	mov    al,0x0
c0017842:	66 90                	xchg   ax,ax
c0017844:	81 c4 2c 02 00 00    	add    esp,0x22c
c001784a:	c3                   	ret    
c001784b:	90                   	nop

c001784c <isoReadDiscSectorHelper>:
c001784c:	83 ec 2c             	sub    esp,0x2c
c001784f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017853:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017857:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001785c:	83 e8 41             	sub    eax,0x41
c001785f:	8b 0c 85 20 44 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbbe0]
c0017866:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001786a:	ba 00 00 00 00       	mov    edx,0x0
c001786f:	83 ec 0c             	sub    esp,0xc
c0017872:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017876:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001787a:	52                   	push   edx
c001787b:	50                   	push   eax
c001787c:	51                   	push   ecx
c001787d:	e8 26 54 ff ff       	call   c000cca8 <LogicalDisk::read(unsigned long long, int, void*)>
c0017882:	83 c4 20             	add    esp,0x20
c0017885:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017889:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001788e:	74 0c                	je     c001789c <isoReadDiscSectorHelper+0x50>
c0017890:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017894:	c1 e0 0b             	shl    eax,0xb
c0017897:	eb 0b                	jmp    c00178a4 <isoReadDiscSectorHelper+0x58>
c0017899:	8d 76 00             	lea    esi,[esi+0x0]
c001789c:	b8 00 00 00 00       	mov    eax,0x0
c00178a1:	8d 76 00             	lea    esi,[esi+0x0]
c00178a4:	83 c4 2c             	add    esp,0x2c
c00178a7:	c3                   	ret    

c00178a8 <iso_kprintf>:
c00178a8:	83 ec 0c             	sub    esp,0xc
c00178ab:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c00178b0:	83 ec 08             	sub    esp,0x8
c00178b3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00178b7:	50                   	push   eax
c00178b8:	e8 79 0e ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00178bd:	83 c4 10             	add    esp,0x10
c00178c0:	90                   	nop
c00178c1:	83 c4 0c             	add    esp,0xc
c00178c4:	c3                   	ret    
c00178c5:	8d 76 00             	lea    esi,[esi+0x0]

c00178c8 <iso_kprintfd>:
c00178c8:	83 ec 0c             	sub    esp,0xc
c00178cb:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c00178d0:	83 ec 08             	sub    esp,0x8
c00178d3:	68 00 f1 01 c0       	push   0xc001f100
c00178d8:	50                   	push   eax
c00178d9:	e8 58 0e ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00178de:	83 c4 10             	add    esp,0x10
c00178e1:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c00178e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00178ea:	83 ec 08             	sub    esp,0x8
c00178ed:	52                   	push   edx
c00178ee:	50                   	push   eax
c00178ef:	e8 fc 0d ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00178f4:	83 c4 10             	add    esp,0x10
c00178f7:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c00178fc:	83 ec 08             	sub    esp,0x8
c00178ff:	68 81 ef 01 c0       	push   0xc001ef81
c0017904:	50                   	push   eax
c0017905:	e8 2c 0e ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001790a:	83 c4 10             	add    esp,0x10
c001790d:	90                   	nop
c001790e:	83 c4 0c             	add    esp,0xc
c0017911:	c3                   	ret    

c0017912 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0017912:	b8 08 00 00 00       	mov    eax,0x8
c0017917:	c3                   	ret    

c0017918 <ISO9660::getName()>:
c0017918:	b8 03 f1 01 c0       	mov    eax,0xc001f103
c001791d:	c3                   	ret    

c001791e <ISO9660::closeDir(void*)>:
c001791e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017922:	8b 00                	mov    eax,DWORD PTR [eax]
c0017924:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0017927:	90                   	nop

c0017928 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0017928:	b8 01 00 00 00       	mov    eax,0x1
c001792d:	c3                   	ret    

c001792e <ISO9660::unlink(char const*)>:
c001792e:	b8 01 00 00 00       	mov    eax,0x1
c0017933:	c3                   	ret    

c0017934 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0017934:	b8 03 00 00 00       	mov    eax,0x3
c0017939:	c3                   	ret    

c001793a <ISO9660::rename(char const*, char const*)>:
c001793a:	b8 01 00 00 00       	mov    eax,0x1
c001793f:	c3                   	ret    

c0017940 <ISO9660::mkdir(char const*)>:
c0017940:	b8 01 00 00 00       	mov    eax,0x1
c0017945:	c3                   	ret    

c0017946 <ISO9660::~ISO9660()>:
c0017946:	83 ec 0c             	sub    esp,0xc
c0017949:	ba 54 f1 01 c0       	mov    edx,0xc001f154
c001794e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017952:	89 10                	mov    DWORD PTR [eax],edx
c0017954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017958:	83 ec 0c             	sub    esp,0xc
c001795b:	50                   	push   eax
c001795c:	e8 65 2f ff ff       	call   c000a8c6 <Filesystem::~Filesystem()>
c0017961:	83 c4 10             	add    esp,0x10
c0017964:	90                   	nop
c0017965:	83 c4 0c             	add    esp,0xc
c0017968:	c3                   	ret    
c0017969:	90                   	nop

c001796a <ISO9660::~ISO9660()>:
c001796a:	83 ec 0c             	sub    esp,0xc
c001796d:	83 ec 0c             	sub    esp,0xc
c0017970:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017974:	e8 cd ff ff ff       	call   c0017946 <ISO9660::~ISO9660()>
c0017979:	83 c4 10             	add    esp,0x10
c001797c:	83 ec 08             	sub    esp,0x8
c001797f:	6a 08                	push   0x8
c0017981:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017985:	e8 01 2b ff ff       	call   c000a48b <operator delete(void*, unsigned long)>
c001798a:	83 c4 10             	add    esp,0x10
c001798d:	83 c4 0c             	add    esp,0xc
c0017990:	c3                   	ret    
c0017991:	90                   	nop

c0017992 <ISO9660::exists(char const*)>:
c0017992:	83 ec 18             	sub    esp,0x18
c0017995:	68 1e f1 01 c0       	push   0xc001f11e
c001799a:	e8 64 88 ff ff       	call   c0010203 <KePanic(char const*)>
c001799f:	31 c0                	xor    eax,eax
c00179a1:	83 c4 1c             	add    esp,0x1c
c00179a4:	c3                   	ret    
c00179a5:	90                   	nop

c00179a6 <ISO9660::open(char const*, void**, FileOpenMode)>:
c00179a6:	56                   	push   esi
c00179a7:	53                   	push   ebx
c00179a8:	50                   	push   eax
c00179a9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00179ad:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00179b1:	85 db                	test   ebx,ebx
c00179b3:	0f 84 82 00 00 00    	je     c0017a3b <ISO9660::open(char const*, void**, FileOpenMode)+0x95>
c00179b9:	85 f6                	test   esi,esi
c00179bb:	74 7e                	je     c0017a3b <ISO9660::open(char const*, void**, FileOpenMode)+0x95>
c00179bd:	ba 03 00 00 00       	mov    edx,0x3
c00179c2:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c00179c7:	75 77                	jne    c0017a40 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c00179c9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00179cc:	3a 05 20 53 02 c0    	cmp    al,BYTE PTR ds:0xc0025320
c00179d2:	74 34                	je     c0017a08 <ISO9660::open(char const*, void**, FileOpenMode)+0x62>
c00179d4:	83 ec 0c             	sub    esp,0xc
c00179d7:	50                   	push   eax
c00179d8:	e8 e2 ed fe ff       	call   c00067bf <init_percd>
c00179dd:	83 c4 10             	add    esp,0x10
c00179e0:	ba 0b 00 00 00       	mov    edx,0xb
c00179e5:	40                   	inc    eax
c00179e6:	74 58                	je     c0017a40 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c00179e8:	80 3d 20 53 02 c0 00 	cmp    BYTE PTR ds:0xc0025320,0x0
c00179ef:	74 10                	je     c0017a01 <ISO9660::open(char const*, void**, FileOpenMode)+0x5b>
c00179f1:	83 ec 0c             	sub    esp,0xc
c00179f4:	68 3c f1 01 c0       	push   0xc001f13c
c00179f9:	e8 05 88 ff ff       	call   c0010203 <KePanic(char const*)>
c00179fe:	83 c4 10             	add    esp,0x10
c0017a01:	8a 03                	mov    al,BYTE PTR [ebx]
c0017a03:	a2 20 53 02 c0       	mov    ds:0xc0025320,al
c0017a08:	83 ec 0c             	sub    esp,0xc
c0017a0b:	0f be 05 20 53 02 c0 	movsx  eax,BYTE PTR ds:0xc0025320
c0017a12:	83 c3 03             	add    ebx,0x3
c0017a15:	50                   	push   eax
c0017a16:	e8 a4 ed fe ff       	call   c00067bf <init_percd>
c0017a1b:	59                   	pop    ecx
c0017a1c:	58                   	pop    eax
c0017a1d:	6a 00                	push   0x0
c0017a1f:	53                   	push   ebx
c0017a20:	e8 d8 e8 fe ff       	call   c00062fd <iso_open>
c0017a25:	83 c4 10             	add    esp,0x10
c0017a28:	ba 01 00 00 00       	mov    edx,0x1
c0017a2d:	83 f8 ff             	cmp    eax,0xffffffff
c0017a30:	74 0e                	je     c0017a40 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017a32:	83 c0 64             	add    eax,0x64
c0017a35:	31 d2                	xor    edx,edx
c0017a37:	89 06                	mov    DWORD PTR [esi],eax
c0017a39:	eb 05                	jmp    c0017a40 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017a3b:	ba 04 00 00 00       	mov    edx,0x4
c0017a40:	89 d0                	mov    eax,edx
c0017a42:	5a                   	pop    edx
c0017a43:	5b                   	pop    ebx
c0017a44:	5e                   	pop    esi
c0017a45:	c3                   	ret    

c0017a46 <ISO9660::openDir(char const*, void**)>:
c0017a46:	56                   	push   esi
c0017a47:	53                   	push   ebx
c0017a48:	50                   	push   eax
c0017a49:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017a4d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017a51:	85 db                	test   ebx,ebx
c0017a53:	74 76                	je     c0017acb <ISO9660::openDir(char const*, void**)+0x85>
c0017a55:	85 f6                	test   esi,esi
c0017a57:	74 72                	je     c0017acb <ISO9660::openDir(char const*, void**)+0x85>
c0017a59:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017a5c:	3a 05 20 53 02 c0    	cmp    al,BYTE PTR ds:0xc0025320
c0017a62:	74 34                	je     c0017a98 <ISO9660::openDir(char const*, void**)+0x52>
c0017a64:	83 ec 0c             	sub    esp,0xc
c0017a67:	50                   	push   eax
c0017a68:	e8 52 ed fe ff       	call   c00067bf <init_percd>
c0017a6d:	83 c4 10             	add    esp,0x10
c0017a70:	ba 0b 00 00 00       	mov    edx,0xb
c0017a75:	40                   	inc    eax
c0017a76:	74 58                	je     c0017ad0 <ISO9660::openDir(char const*, void**)+0x8a>
c0017a78:	80 3d 20 53 02 c0 00 	cmp    BYTE PTR ds:0xc0025320,0x0
c0017a7f:	74 10                	je     c0017a91 <ISO9660::openDir(char const*, void**)+0x4b>
c0017a81:	83 ec 0c             	sub    esp,0xc
c0017a84:	68 3c f1 01 c0       	push   0xc001f13c
c0017a89:	e8 75 87 ff ff       	call   c0010203 <KePanic(char const*)>
c0017a8e:	83 c4 10             	add    esp,0x10
c0017a91:	8a 03                	mov    al,BYTE PTR [ebx]
c0017a93:	a2 20 53 02 c0       	mov    ds:0xc0025320,al
c0017a98:	83 ec 0c             	sub    esp,0xc
c0017a9b:	0f be 05 20 53 02 c0 	movsx  eax,BYTE PTR ds:0xc0025320
c0017aa2:	83 c3 03             	add    ebx,0x3
c0017aa5:	50                   	push   eax
c0017aa6:	e8 14 ed fe ff       	call   c00067bf <init_percd>
c0017aab:	59                   	pop    ecx
c0017aac:	58                   	pop    eax
c0017aad:	6a 01                	push   0x1
c0017aaf:	53                   	push   ebx
c0017ab0:	e8 48 e8 fe ff       	call   c00062fd <iso_open>
c0017ab5:	83 c4 10             	add    esp,0x10
c0017ab8:	ba 01 00 00 00       	mov    edx,0x1
c0017abd:	83 f8 ff             	cmp    eax,0xffffffff
c0017ac0:	74 0e                	je     c0017ad0 <ISO9660::openDir(char const*, void**)+0x8a>
c0017ac2:	83 c0 64             	add    eax,0x64
c0017ac5:	31 d2                	xor    edx,edx
c0017ac7:	89 06                	mov    DWORD PTR [esi],eax
c0017ac9:	eb 05                	jmp    c0017ad0 <ISO9660::openDir(char const*, void**)+0x8a>
c0017acb:	ba 04 00 00 00       	mov    edx,0x4
c0017ad0:	89 d0                	mov    eax,edx
c0017ad2:	5a                   	pop    edx
c0017ad3:	5b                   	pop    ebx
c0017ad4:	5e                   	pop    esi
c0017ad5:	c3                   	ret    

c0017ad6 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0017ad6:	53                   	push   ebx
c0017ad7:	83 ec 08             	sub    esp,0x8
c0017ada:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017ade:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017ae2:	85 c0                	test   eax,eax
c0017ae4:	74 25                	je     c0017b0b <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017ae6:	85 db                	test   ebx,ebx
c0017ae8:	74 21                	je     c0017b0b <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017aea:	83 e8 64             	sub    eax,0x64
c0017aed:	52                   	push   edx
c0017aee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017af2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017af6:	50                   	push   eax
c0017af7:	e8 a9 e8 fe ff       	call   c00063a5 <iso_read>
c0017afc:	83 c4 10             	add    esp,0x10
c0017aff:	89 03                	mov    DWORD PTR [ebx],eax
c0017b01:	09 d0                	or     eax,edx
c0017b03:	0f 94 c0             	sete   al
c0017b06:	0f b6 c0             	movzx  eax,al
c0017b09:	eb 05                	jmp    c0017b10 <ISO9660::read(void*, unsigned long, void*, int*)+0x3a>
c0017b0b:	b8 04 00 00 00       	mov    eax,0x4
c0017b10:	83 c4 08             	add    esp,0x8
c0017b13:	5b                   	pop    ebx
c0017b14:	c3                   	ret    
c0017b15:	90                   	nop

c0017b16 <ISO9660::seek(void*, unsigned long long)>:
c0017b16:	57                   	push   edi
c0017b17:	56                   	push   esi
c0017b18:	b8 04 00 00 00       	mov    eax,0x4
c0017b1d:	51                   	push   ecx
c0017b1e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017b22:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017b26:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017b2a:	85 d2                	test   edx,edx
c0017b2c:	74 1c                	je     c0017b4a <ISO9660::seek(void*, unsigned long long)+0x34>
c0017b2e:	6a 00                	push   0x0
c0017b30:	83 ea 64             	sub    edx,0x64
c0017b33:	57                   	push   edi
c0017b34:	56                   	push   esi
c0017b35:	52                   	push   edx
c0017b36:	e8 80 e9 fe ff       	call   c00064bb <iso_seek>
c0017b3b:	83 c4 10             	add    esp,0x10
c0017b3e:	31 f0                	xor    eax,esi
c0017b40:	31 fa                	xor    edx,edi
c0017b42:	09 d0                	or     eax,edx
c0017b44:	0f 95 c0             	setne  al
c0017b47:	0f b6 c0             	movzx  eax,al
c0017b4a:	5a                   	pop    edx
c0017b4b:	5e                   	pop    esi
c0017b4c:	5f                   	pop    edi
c0017b4d:	c3                   	ret    

c0017b4e <ISO9660::tell(void*, unsigned long long*)>:
c0017b4e:	53                   	push   ebx
c0017b4f:	83 ec 08             	sub    esp,0x8
c0017b52:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b56:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017b5a:	85 c0                	test   eax,eax
c0017b5c:	74 1c                	je     c0017b7a <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017b5e:	85 db                	test   ebx,ebx
c0017b60:	74 18                	je     c0017b7a <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017b62:	83 ec 0c             	sub    esp,0xc
c0017b65:	83 e8 64             	sub    eax,0x64
c0017b68:	50                   	push   eax
c0017b69:	e8 d1 e9 fe ff       	call   c000653f <iso_tell>
c0017b6e:	83 c4 10             	add    esp,0x10
c0017b71:	89 03                	mov    DWORD PTR [ebx],eax
c0017b73:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0017b76:	31 c0                	xor    eax,eax
c0017b78:	eb 05                	jmp    c0017b7f <ISO9660::tell(void*, unsigned long long*)+0x31>
c0017b7a:	b8 04 00 00 00       	mov    eax,0x4
c0017b7f:	83 c4 08             	add    esp,0x8
c0017b82:	5b                   	pop    ebx
c0017b83:	c3                   	ret    

c0017b84 <ISO9660::stat(void*, unsigned long long*)>:
c0017b84:	53                   	push   ebx
c0017b85:	83 ec 08             	sub    esp,0x8
c0017b88:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b8c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017b90:	85 c0                	test   eax,eax
c0017b92:	74 20                	je     c0017bb4 <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017b94:	85 db                	test   ebx,ebx
c0017b96:	74 1c                	je     c0017bb4 <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017b98:	83 ec 0c             	sub    esp,0xc
c0017b9b:	83 e8 64             	sub    eax,0x64
c0017b9e:	50                   	push   eax
c0017b9f:	e8 cc e9 fe ff       	call   c0006570 <iso_total>
c0017ba4:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0017bab:	89 03                	mov    DWORD PTR [ebx],eax
c0017bad:	83 c4 10             	add    esp,0x10
c0017bb0:	31 c0                	xor    eax,eax
c0017bb2:	eb 05                	jmp    c0017bb9 <ISO9660::stat(void*, unsigned long long*)+0x35>
c0017bb4:	b8 04 00 00 00       	mov    eax,0x4
c0017bb9:	83 c4 08             	add    esp,0x8
c0017bbc:	5b                   	pop    ebx
c0017bbd:	c3                   	ret    

c0017bbe <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0017bbe:	55                   	push   ebp
c0017bbf:	57                   	push   edi
c0017bc0:	56                   	push   esi
c0017bc1:	53                   	push   ebx
c0017bc2:	83 ec 0c             	sub    esp,0xc
c0017bc5:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017bc9:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0017bcd:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017bd1:	85 ff                	test   edi,edi
c0017bd3:	0f 94 c2             	sete   dl
c0017bd6:	85 f6                	test   esi,esi
c0017bd8:	0f 94 c0             	sete   al
c0017bdb:	08 c2                	or     dl,al
c0017bdd:	0f 85 9e 00 00 00    	jne    c0017c81 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c0017be3:	85 db                	test   ebx,ebx
c0017be5:	0f 84 96 00 00 00    	je     c0017c81 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c0017beb:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0017bee:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0017bf4:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017bfb:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017bfe:	3a 05 20 53 02 c0    	cmp    al,BYTE PTR ds:0xc0025320
c0017c04:	74 34                	je     c0017c3a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x7c>
c0017c06:	83 ec 0c             	sub    esp,0xc
c0017c09:	50                   	push   eax
c0017c0a:	e8 b0 eb fe ff       	call   c00067bf <init_percd>
c0017c0f:	83 c4 10             	add    esp,0x10
c0017c12:	ba 0b 00 00 00       	mov    edx,0xb
c0017c17:	40                   	inc    eax
c0017c18:	74 6c                	je     c0017c86 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc8>
c0017c1a:	80 3d 20 53 02 c0 00 	cmp    BYTE PTR ds:0xc0025320,0x0
c0017c21:	74 10                	je     c0017c33 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x75>
c0017c23:	83 ec 0c             	sub    esp,0xc
c0017c26:	68 3c f1 01 c0       	push   0xc001f13c
c0017c2b:	e8 d3 85 ff ff       	call   c0010203 <KePanic(char const*)>
c0017c30:	83 c4 10             	add    esp,0x10
c0017c33:	8a 03                	mov    al,BYTE PTR [ebx]
c0017c35:	a2 20 53 02 c0       	mov    ds:0xc0025320,al
c0017c3a:	83 c3 03             	add    ebx,0x3
c0017c3d:	52                   	push   edx
c0017c3e:	52                   	push   edx
c0017c3f:	6a 00                	push   0x0
c0017c41:	53                   	push   ebx
c0017c42:	e8 b6 e6 fe ff       	call   c00062fd <iso_open>
c0017c47:	83 c4 10             	add    esp,0x10
c0017c4a:	89 c5                	mov    ebp,eax
c0017c4c:	83 f8 ff             	cmp    eax,0xffffffff
c0017c4f:	75 0f                	jne    c0017c60 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xa2>
c0017c51:	50                   	push   eax
c0017c52:	50                   	push   eax
c0017c53:	6a 01                	push   0x1
c0017c55:	53                   	push   ebx
c0017c56:	e8 a2 e6 fe ff       	call   c00062fd <iso_open>
c0017c5b:	c6 07 01             	mov    BYTE PTR [edi],0x1
c0017c5e:	eb 1a                	jmp    c0017c7a <ISO9660::stat(char const*, unsigned long long*, bool*)+0xbc>
c0017c60:	83 ec 0c             	sub    esp,0xc
c0017c63:	50                   	push   eax
c0017c64:	e8 07 e9 fe ff       	call   c0006570 <iso_total>
c0017c69:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017c70:	89 06                	mov    DWORD PTR [esi],eax
c0017c72:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017c75:	e8 0d e7 fe ff       	call   c0006387 <iso_close>
c0017c7a:	83 c4 10             	add    esp,0x10
c0017c7d:	31 d2                	xor    edx,edx
c0017c7f:	eb 05                	jmp    c0017c86 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc8>
c0017c81:	ba 04 00 00 00       	mov    edx,0x4
c0017c86:	83 c4 0c             	add    esp,0xc
c0017c89:	89 d0                	mov    eax,edx
c0017c8b:	5b                   	pop    ebx
c0017c8c:	5e                   	pop    esi
c0017c8d:	5f                   	pop    edi
c0017c8e:	5d                   	pop    ebp
c0017c8f:	c3                   	ret    

c0017c90 <ISO9660::close(void*)>:
c0017c90:	83 ec 0c             	sub    esp,0xc
c0017c93:	b8 04 00 00 00       	mov    eax,0x4
c0017c98:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017c9c:	85 d2                	test   edx,edx
c0017c9e:	74 11                	je     c0017cb1 <ISO9660::close(void*)+0x21>
c0017ca0:	83 ec 0c             	sub    esp,0xc
c0017ca3:	83 ea 64             	sub    edx,0x64
c0017ca6:	52                   	push   edx
c0017ca7:	e8 db e6 fe ff       	call   c0006387 <iso_close>
c0017cac:	83 c4 10             	add    esp,0x10
c0017caf:	31 c0                	xor    eax,eax
c0017cb1:	83 c4 0c             	add    esp,0xc
c0017cb4:	c3                   	ret    
c0017cb5:	90                   	nop

c0017cb6 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0017cb6:	55                   	push   ebp
c0017cb7:	57                   	push   edi
c0017cb8:	56                   	push   esi
c0017cb9:	53                   	push   ebx
c0017cba:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017cc0:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c0017cc7:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0017cce:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0017cd5:	85 c0                	test   eax,eax
c0017cd7:	0f 84 96 00 00 00    	je     c0017d73 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017cdd:	85 db                	test   ebx,ebx
c0017cdf:	0f 84 8e 00 00 00    	je     c0017d73 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017ce5:	83 ec 0c             	sub    esp,0xc
c0017ce8:	83 e8 64             	sub    eax,0x64
c0017ceb:	50                   	push   eax
c0017cec:	e8 d0 e8 fe ff       	call   c00065c1 <iso_readdir>
c0017cf1:	83 c4 10             	add    esp,0x10
c0017cf4:	89 c6                	mov    esi,eax
c0017cf6:	85 c0                	test   eax,eax
c0017cf8:	75 18                	jne    c0017d12 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x5c>
c0017cfa:	52                   	push   edx
c0017cfb:	68 10 01 00 00       	push   0x110
c0017d00:	6a 00                	push   0x0
c0017d02:	57                   	push   edi
c0017d03:	e8 c8 87 fe ff       	call   c00004d0 <memset>
c0017d08:	83 c4 10             	add    esp,0x10
c0017d0b:	b8 01 00 00 00       	mov    eax,0x1
c0017d10:	eb 66                	jmp    c0017d78 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017d12:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0017d18:	8d 68 08             	lea    ebp,[eax+0x8]
c0017d1b:	83 ec 0c             	sub    esp,0xc
c0017d1e:	55                   	push   ebp
c0017d1f:	e8 1c 88 fe ff       	call   c0000540 <strlen>
c0017d24:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017d2c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017d30:	83 c4 10             	add    esp,0x10
c0017d33:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0017d37:	75 0a                	jne    c0017d43 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x8d>
c0017d39:	b8 02 00 00 00       	mov    eax,0x2
c0017d3e:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0017d41:	74 05                	je     c0017d48 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c0017d43:	b8 01 00 00 00       	mov    eax,0x1
c0017d48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017d4c:	50                   	push   eax
c0017d4d:	50                   	push   eax
c0017d4e:	55                   	push   ebp
c0017d4f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017d53:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0017d57:	50                   	push   eax
c0017d58:	e8 a3 88 fe ff       	call   c0000600 <strcpy>
c0017d5d:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0017d64:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017d66:	31 c0                	xor    eax,eax
c0017d68:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0017d6e:	83 c4 10             	add    esp,0x10
c0017d71:	eb 05                	jmp    c0017d78 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017d73:	b8 04 00 00 00       	mov    eax,0x4
c0017d78:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017d7e:	5b                   	pop    ebx
c0017d7f:	5e                   	pop    esi
c0017d80:	5f                   	pop    edi
c0017d81:	5d                   	pop    ebp
c0017d82:	c3                   	ret    

c0017d83 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0017d83:	57                   	push   edi
c0017d84:	56                   	push   esi
c0017d85:	53                   	push   ebx
c0017d86:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017d8a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017d8e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017d92:	39 35 24 53 02 c0    	cmp    DWORD PTR ds:0xc0025324,esi
c0017d98:	75 08                	jne    c0017da2 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0017d9a:	38 1d 70 fb 01 c0    	cmp    BYTE PTR ds:0xc001fb70,bl
c0017da0:	74 4a                	je     c0017dec <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017da2:	83 ec 0c             	sub    esp,0xc
c0017da5:	31 d2                	xor    edx,edx
c0017da7:	68 40 53 02 c0       	push   0xc0025340
c0017dac:	0f be c3             	movsx  eax,bl
c0017daf:	6a 01                	push   0x1
c0017db1:	52                   	push   edx
c0017db2:	56                   	push   esi
c0017db3:	ff 34 85 1c 43 02 c0 	push   DWORD PTR [eax*4-0x3ffdbce4]
c0017dba:	e8 e9 4e ff ff       	call   c000cca8 <LogicalDisk::read(unsigned long long, int, void*)>
c0017dbf:	83 c4 20             	add    esp,0x20
c0017dc2:	85 c0                	test   eax,eax
c0017dc4:	75 0e                	jne    c0017dd4 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0017dc6:	89 35 24 53 02 c0    	mov    DWORD PTR ds:0xc0025324,esi
c0017dcc:	88 1d 70 fb 01 c0    	mov    BYTE PTR ds:0xc001fb70,bl
c0017dd2:	eb 18                	jmp    c0017dec <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017dd4:	50                   	push   eax
c0017dd5:	68 00 08 00 00       	push   0x800
c0017dda:	6a 00                	push   0x0
c0017ddc:	57                   	push   edi
c0017ddd:	e8 ee 86 fe ff       	call   c00004d0 <memset>
c0017de2:	83 c4 10             	add    esp,0x10
c0017de5:	b8 01 00 00 00       	mov    eax,0x1
c0017dea:	eb 0e                	jmp    c0017dfa <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c0017dec:	be 40 53 02 c0       	mov    esi,0xc0025340
c0017df1:	b9 00 08 00 00       	mov    ecx,0x800
c0017df6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017df8:	31 c0                	xor    eax,eax
c0017dfa:	5b                   	pop    ebx
c0017dfb:	5e                   	pop    esi
c0017dfc:	5f                   	pop    edi
c0017dfd:	c3                   	ret    

c0017dfe <ISO9660::tryMount(LogicalDisk*, int)>:
c0017dfe:	53                   	push   ebx
c0017dff:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0017e05:	c7 05 24 53 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0025324,0xdeadbeef
c0017e0f:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0017e16:	8d 58 41             	lea    ebx,[eax+0x41]
c0017e19:	0f be db             	movsx  ebx,bl
c0017e1c:	53                   	push   ebx
c0017e1d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017e21:	50                   	push   eax
c0017e22:	6a 10                	push   0x10
c0017e24:	e8 5a ff ff ff       	call   c0017d83 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017e29:	83 c4 10             	add    esp,0x10
c0017e2c:	31 d2                	xor    edx,edx
c0017e2e:	85 c0                	test   eax,eax
c0017e30:	75 33                	jne    c0017e65 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017e32:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0017e37:	75 2c                	jne    c0017e65 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017e39:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0017e3e:	75 25                	jne    c0017e65 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017e40:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0017e45:	75 1e                	jne    c0017e65 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017e47:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0017e4c:	75 17                	jne    c0017e65 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017e4e:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0017e53:	75 10                	jne    c0017e65 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017e55:	83 ec 0c             	sub    esp,0xc
c0017e58:	53                   	push   ebx
c0017e59:	e8 61 e9 fe ff       	call   c00067bf <init_percd>
c0017e5e:	83 c4 10             	add    esp,0x10
c0017e61:	40                   	inc    eax
c0017e62:	0f 95 c2             	setne  dl
c0017e65:	88 d0                	mov    al,dl
c0017e67:	81 c4 08 08 00 00    	add    esp,0x808
c0017e6d:	5b                   	pop    ebx
c0017e6e:	c3                   	ret    
c0017e6f:	90                   	nop

c0017e70 <ISO9660::ISO9660()>:
c0017e70:	83 ec 0c             	sub    esp,0xc
c0017e73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e77:	83 ec 0c             	sub    esp,0xc
c0017e7a:	50                   	push   eax
c0017e7b:	e8 22 2a ff ff       	call   c000a8a2 <Filesystem::Filesystem()>
c0017e80:	83 c4 10             	add    esp,0x10
c0017e83:	ba 54 f1 01 c0       	mov    edx,0xc001f154
c0017e88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e8c:	89 10                	mov    DWORD PTR [eax],edx
c0017e8e:	e8 2e ea fe ff       	call   c00068c1 <fs_iso9660_init>
c0017e93:	90                   	nop
c0017e94:	83 c4 0c             	add    esp,0xc
c0017e97:	c3                   	ret    

c0017e98 <SoundCard::beginPlayback()>:
c0017e98:	c7 44 24 04 b4 f1 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f1b4
c0017ea0:	e9 5e 83 ff ff       	jmp    c0010203 <KePanic(char const*)>
c0017ea5:	90                   	nop

c0017ea6 <SoundCard::stopPlayback()>:
c0017ea6:	c7 44 24 04 b4 f1 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f1b4
c0017eae:	e9 50 83 ff ff       	jmp    c0010203 <KePanic(char const*)>
c0017eb3:	90                   	nop

c0017eb4 <SoundCard::SoundCard(char const*)>:
c0017eb4:	83 ec 1c             	sub    esp,0x1c
c0017eb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ebb:	83 ec 08             	sub    esp,0x8
c0017ebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017ec2:	50                   	push   eax
c0017ec3:	e8 90 3c ff ff       	call   c000bb58 <Device::Device(char const*)>
c0017ec8:	83 c4 10             	add    esp,0x10
c0017ecb:	ba 00 f2 01 c0       	mov    edx,0xc001f200
c0017ed0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ed4:	89 10                	mov    DWORD PTR [eax],edx
c0017ed6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017eda:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017ee1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ee5:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0017eef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ef3:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0017efd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f01:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0017f0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f0f:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0017f19:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017f21:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0017f26:	7f 19                	jg     c0017f41 <SoundCard::SoundCard(char const*)+0x8d>
c0017f28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f2c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017f30:	83 c2 54             	add    edx,0x54
c0017f33:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0017f3b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017f3f:	eb e0                	jmp    c0017f21 <SoundCard::SoundCard(char const*)+0x6d>
c0017f41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f45:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017f4c:	90                   	nop
c0017f4d:	83 c4 1c             	add    esp,0x1c
c0017f50:	c3                   	ret    
c0017f51:	90                   	nop

c0017f52 <SoundCard::~SoundCard()>:
c0017f52:	83 ec 0c             	sub    esp,0xc
c0017f55:	ba 00 f2 01 c0       	mov    edx,0xc001f200
c0017f5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f5e:	89 10                	mov    DWORD PTR [eax],edx
c0017f60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f64:	83 ec 0c             	sub    esp,0xc
c0017f67:	50                   	push   eax
c0017f68:	e8 55 39 ff ff       	call   c000b8c2 <Device::~Device()>
c0017f6d:	83 c4 10             	add    esp,0x10
c0017f70:	90                   	nop
c0017f71:	83 c4 0c             	add    esp,0xc
c0017f74:	c3                   	ret    
c0017f75:	90                   	nop

c0017f76 <SoundCard::~SoundCard()>:
c0017f76:	83 ec 0c             	sub    esp,0xc
c0017f79:	83 ec 0c             	sub    esp,0xc
c0017f7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f80:	e8 cd ff ff ff       	call   c0017f52 <SoundCard::~SoundCard()>
c0017f85:	83 c4 10             	add    esp,0x10
c0017f88:	83 ec 08             	sub    esp,0x8
c0017f8b:	68 e8 01 00 00       	push   0x1e8
c0017f90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f94:	e8 f2 24 ff ff       	call   c000a48b <operator delete(void*, unsigned long)>
c0017f99:	83 c4 10             	add    esp,0x10
c0017f9c:	83 c4 0c             	add    esp,0xc
c0017f9f:	c3                   	ret    

c0017fa0 <SoundCard::configureRates(int, int, int)>:
c0017fa0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017fa4:	31 c0                	xor    eax,eax
c0017fa6:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0017fad:	75 20                	jne    c0017fcf <SoundCard::configureRates(int, int, int)+0x2f>
c0017faf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017fb3:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0017fb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017fbd:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0017fc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fc7:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0017fcd:	b0 01                	mov    al,0x1
c0017fcf:	c3                   	ret    

c0017fd0 <SoundCard::getSamples16(int, short*)>:
c0017fd0:	55                   	push   ebp
c0017fd1:	57                   	push   edi
c0017fd2:	31 ff                	xor    edi,edi
c0017fd4:	56                   	push   esi
c0017fd5:	53                   	push   ebx
c0017fd6:	31 db                	xor    ebx,ebx
c0017fd8:	83 ec 10             	sub    esp,0x10
c0017fdb:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017fdf:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0017fe3:	8d 04 36             	lea    eax,[esi+esi*1]
c0017fe6:	50                   	push   eax
c0017fe7:	6a 00                	push   0x0
c0017fe9:	55                   	push   ebp
c0017fea:	e8 e1 84 fe ff       	call   c00004d0 <memset>
c0017fef:	83 c4 10             	add    esp,0x10
c0017ff2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ff6:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0017ffd:	85 c0                	test   eax,eax
c0017fff:	74 1b                	je     c001801c <SoundCard::getSamples16(int, short*)+0x4c>
c0018001:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0018005:	75 15                	jne    c001801c <SoundCard::getSamples16(int, short*)+0x4c>
c0018007:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001800b:	55                   	push   ebp
c001800c:	56                   	push   esi
c001800d:	50                   	push   eax
c001800e:	e8 ed 02 00 00       	call   c0018300 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0018013:	83 c4 10             	add    esp,0x10
c0018016:	39 c7                	cmp    edi,eax
c0018018:	7d 02                	jge    c001801c <SoundCard::getSamples16(int, short*)+0x4c>
c001801a:	89 c7                	mov    edi,eax
c001801c:	43                   	inc    ebx
c001801d:	83 fb 20             	cmp    ebx,0x20
c0018020:	75 d0                	jne    c0017ff2 <SoundCard::getSamples16(int, short*)+0x22>
c0018022:	83 c4 0c             	add    esp,0xc
c0018025:	89 f8                	mov    eax,edi
c0018027:	5b                   	pop    ebx
c0018028:	5e                   	pop    esi
c0018029:	5f                   	pop    edi
c001802a:	5d                   	pop    ebp
c001802b:	c3                   	ret    

c001802c <SoundCard::getSamples32(int, int*)>:
c001802c:	55                   	push   ebp
c001802d:	57                   	push   edi
c001802e:	31 ff                	xor    edi,edi
c0018030:	56                   	push   esi
c0018031:	31 f6                	xor    esi,esi
c0018033:	53                   	push   ebx
c0018034:	83 ec 10             	sub    esp,0x10
c0018037:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001803b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001803f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0018043:	c1 e0 02             	shl    eax,0x2
c0018046:	50                   	push   eax
c0018047:	6a 00                	push   0x0
c0018049:	55                   	push   ebp
c001804a:	e8 81 84 fe ff       	call   c00004d0 <memset>
c001804f:	83 c4 10             	add    esp,0x10
c0018052:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0018059:	85 c0                	test   eax,eax
c001805b:	74 1b                	je     c0018078 <SoundCard::getSamples32(int, int*)+0x4c>
c001805d:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0018061:	75 15                	jne    c0018078 <SoundCard::getSamples32(int, int*)+0x4c>
c0018063:	53                   	push   ebx
c0018064:	55                   	push   ebp
c0018065:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018069:	50                   	push   eax
c001806a:	e8 55 03 00 00       	call   c00183c4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001806f:	83 c4 10             	add    esp,0x10
c0018072:	39 c6                	cmp    esi,eax
c0018074:	7d 02                	jge    c0018078 <SoundCard::getSamples32(int, int*)+0x4c>
c0018076:	89 c6                	mov    esi,eax
c0018078:	47                   	inc    edi
c0018079:	83 ff 20             	cmp    edi,0x20
c001807c:	75 d4                	jne    c0018052 <SoundCard::getSamples32(int, int*)+0x26>
c001807e:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c0018084:	85 f6                	test   esi,esi
c0018086:	75 0f                	jne    c0018097 <SoundCard::getSamples32(int, int*)+0x6b>
c0018088:	84 c0                	test   al,al
c001808a:	74 1b                	je     c00180a7 <SoundCard::getSamples32(int, int*)+0x7b>
c001808c:	83 ec 0c             	sub    esp,0xc
c001808f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018091:	53                   	push   ebx
c0018092:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0018095:	eb 0d                	jmp    c00180a4 <SoundCard::getSamples32(int, int*)+0x78>
c0018097:	84 c0                	test   al,al
c0018099:	75 0c                	jne    c00180a7 <SoundCard::getSamples32(int, int*)+0x7b>
c001809b:	83 ec 0c             	sub    esp,0xc
c001809e:	8b 03                	mov    eax,DWORD PTR [ebx]
c00180a0:	53                   	push   ebx
c00180a1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00180a4:	83 c4 10             	add    esp,0x10
c00180a7:	83 c4 0c             	add    esp,0xc
c00180aa:	89 f0                	mov    eax,esi
c00180ac:	5b                   	pop    ebx
c00180ad:	5e                   	pop    esi
c00180ae:	5f                   	pop    edi
c00180af:	5d                   	pop    ebp
c00180b0:	c3                   	ret    
c00180b1:	90                   	nop

c00180b2 <SoundCard::addChannel(SoundPort*)>:
c00180b2:	83 ec 0c             	sub    esp,0xc
c00180b5:	31 c0                	xor    eax,eax
c00180b7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00180bb:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00180c3:	74 1b                	je     c00180e0 <SoundCard::addChannel(SoundPort*)+0x2e>
c00180c5:	40                   	inc    eax
c00180c6:	83 f8 20             	cmp    eax,0x20
c00180c9:	75 f0                	jne    c00180bb <SoundCard::addChannel(SoundPort*)+0x9>
c00180cb:	83 ec 0c             	sub    esp,0xc
c00180ce:	68 d9 f1 01 c0       	push   0xc001f1d9
c00180d3:	e8 2b 81 ff ff       	call   c0010203 <KePanic(char const*)>
c00180d8:	83 c4 10             	add    esp,0x10
c00180db:	83 c8 ff             	or     eax,0xffffffff
c00180de:	eb 0b                	jmp    c00180eb <SoundCard::addChannel(SoundPort*)+0x39>
c00180e0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00180e4:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c00180eb:	83 c4 0c             	add    esp,0xc
c00180ee:	c3                   	ret    
c00180ef:	90                   	nop

c00180f0 <SoundCard::removeChannel(int)>:
c00180f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00180f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00180f8:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0018103:	c3                   	ret    

c0018104 <SoundPort::SoundPort(int, int, int, int)>:
c0018104:	83 ec 0c             	sub    esp,0xc
c0018107:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001810b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018116:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001811a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001811e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018122:	89 10                	mov    DWORD PTR [eax],edx
c0018124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018128:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001812c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001812f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018133:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018137:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001813a:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001813f:	75 13                	jne    c0018154 <SoundPort::SoundPort(int, int, int, int)+0x50>
c0018141:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018145:	8b 00                	mov    eax,DWORD PTR [eax]
c0018147:	05 a0 0f 00 00       	add    eax,0xfa0
c001814c:	01 c0                	add    eax,eax
c001814e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018152:	66 90                	xchg   ax,ax
c0018154:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018158:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001815c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001815f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018163:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001816a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001816e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018171:	c1 e0 02             	shl    eax,0x2
c0018174:	83 ec 0c             	sub    esp,0xc
c0018177:	50                   	push   eax
c0018178:	e8 3c f6 fe ff       	call   c00077b9 <malloc>
c001817d:	83 c4 10             	add    esp,0x10
c0018180:	89 c2                	mov    edx,eax
c0018182:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018186:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0018189:	90                   	nop
c001818a:	83 c4 0c             	add    esp,0xc
c001818d:	c3                   	ret    
c001818e:	66 90                	xchg   ax,ax

c0018190 <SoundPort::~SoundPort()>:
c0018190:	83 ec 0c             	sub    esp,0xc
c0018193:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018197:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001819a:	85 c0                	test   eax,eax
c001819c:	74 1e                	je     c00181bc <SoundPort::~SoundPort()+0x2c>
c001819e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181a2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00181a5:	83 ec 0c             	sub    esp,0xc
c00181a8:	50                   	push   eax
c00181a9:	e8 1b f6 fe ff       	call   c00077c9 <free>
c00181ae:	83 c4 10             	add    esp,0x10
c00181b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181b5:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00181bc:	90                   	nop
c00181bd:	83 c4 0c             	add    esp,0xc
c00181c0:	c3                   	ret    
c00181c1:	90                   	nop
c00181c2:	66 90                	xchg   ax,ax

c00181c4 <SoundPort::unpause()>:
c00181c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00181c8:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c00181cc:	c3                   	ret    
c00181cd:	90                   	nop
c00181ce:	66 90                	xchg   ax,ax

c00181d0 <SoundPort::pause()>:
c00181d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00181d4:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c00181d8:	c3                   	ret    
c00181d9:	90                   	nop
c00181da:	66 90                	xchg   ax,ax

c00181dc <SoundPort::getBufferUsed()>:
c00181dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00181e0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00181e3:	c3                   	ret    

c00181e4 <SoundPort::getBufferSize()>:
c00181e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00181e8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00181eb:	c3                   	ret    

c00181ec <SoundPort::buffer16(short*, int)>:
c00181ec:	55                   	push   ebp
c00181ed:	57                   	push   edi
c00181ee:	56                   	push   esi
c00181ef:	53                   	push   ebx
c00181f0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00181f4:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00181f8:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00181fb:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c00181fe:	74 68                	je     c0018268 <SoundPort::buffer16(short*, int)+0x7c>
c0018200:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018204:	85 c9                	test   ecx,ecx
c0018206:	7e 60                	jle    c0018268 <SoundPort::buffer16(short*, int)+0x7c>
c0018208:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001820c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001820f:	c1 e1 0f             	shl    ecx,0xf
c0018212:	8d 70 01             	lea    esi,[eax+0x1]
c0018215:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0018218:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001821b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001821e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018221:	74 4d                	je     c0018270 <SoundPort::buffer16(short*, int)+0x84>
c0018223:	31 f6                	xor    esi,esi
c0018225:	eb 21                	jmp    c0018248 <SoundPort::buffer16(short*, int)+0x5c>
c0018227:	90                   	nop
c0018228:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001822d:	8d 79 01             	lea    edi,[ecx+0x1]
c0018230:	c1 e3 0f             	shl    ebx,0xf
c0018233:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0018236:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0018239:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001823c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001823f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018242:	74 1c                	je     c0018260 <SoundPort::buffer16(short*, int)+0x74>
c0018244:	89 c6                	mov    esi,eax
c0018246:	66 90                	xchg   ax,ax
c0018248:	8d 46 01             	lea    eax,[esi+0x1]
c001824b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001824f:	75 d7                	jne    c0018228 <SoundPort::buffer16(short*, int)+0x3c>
c0018251:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018255:	8d 76 00             	lea    esi,[esi+0x0]
c0018258:	5b                   	pop    ebx
c0018259:	5e                   	pop    esi
c001825a:	5f                   	pop    edi
c001825b:	5d                   	pop    ebp
c001825c:	c3                   	ret    
c001825d:	8d 76 00             	lea    esi,[esi+0x0]
c0018260:	5b                   	pop    ebx
c0018261:	8d 46 02             	lea    eax,[esi+0x2]
c0018264:	5e                   	pop    esi
c0018265:	5f                   	pop    edi
c0018266:	5d                   	pop    ebp
c0018267:	c3                   	ret    
c0018268:	5b                   	pop    ebx
c0018269:	31 c0                	xor    eax,eax
c001826b:	5e                   	pop    esi
c001826c:	5f                   	pop    edi
c001826d:	5d                   	pop    ebp
c001826e:	c3                   	ret    
c001826f:	90                   	nop
c0018270:	b8 01 00 00 00       	mov    eax,0x1
c0018275:	eb e1                	jmp    c0018258 <SoundPort::buffer16(short*, int)+0x6c>
c0018277:	90                   	nop

c0018278 <SoundPort::buffer32(int*, int)>:
c0018278:	55                   	push   ebp
c0018279:	57                   	push   edi
c001827a:	56                   	push   esi
c001827b:	53                   	push   ebx
c001827c:	51                   	push   ecx
c001827d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018281:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018285:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018288:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001828c:	89 04 24             	mov    DWORD PTR [esp],eax
c001828f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018292:	74 5c                	je     c00182f0 <SoundPort::buffer32(int*, int)+0x78>
c0018294:	85 c0                	test   eax,eax
c0018296:	7e 58                	jle    c00182f0 <SoundPort::buffer32(int*, int)+0x78>
c0018298:	8d 71 01             	lea    esi,[ecx+0x1]
c001829b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001829e:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c00182a1:	8b 37                	mov    esi,DWORD PTR [edi]
c00182a3:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c00182a6:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00182a9:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00182ac:	74 4a                	je     c00182f8 <SoundPort::buffer32(int*, int)+0x80>
c00182ae:	31 f6                	xor    esi,esi
c00182b0:	eb 1e                	jmp    c00182d0 <SoundPort::buffer32(int*, int)+0x58>
c00182b2:	66 90                	xchg   ax,ax
c00182b4:	8d 69 01             	lea    ebp,[ecx+0x1]
c00182b7:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c00182ba:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00182bd:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00182c0:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c00182c4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00182c7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00182ca:	74 18                	je     c00182e4 <SoundPort::buffer32(int*, int)+0x6c>
c00182cc:	89 de                	mov    esi,ebx
c00182ce:	66 90                	xchg   ax,ax
c00182d0:	8d 5e 01             	lea    ebx,[esi+0x1]
c00182d3:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c00182d6:	75 dc                	jne    c00182b4 <SoundPort::buffer32(int*, int)+0x3c>
c00182d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00182db:	90                   	nop
c00182dc:	5a                   	pop    edx
c00182dd:	5b                   	pop    ebx
c00182de:	5e                   	pop    esi
c00182df:	5f                   	pop    edi
c00182e0:	5d                   	pop    ebp
c00182e1:	c3                   	ret    
c00182e2:	66 90                	xchg   ax,ax
c00182e4:	5a                   	pop    edx
c00182e5:	8d 46 02             	lea    eax,[esi+0x2]
c00182e8:	5b                   	pop    ebx
c00182e9:	5e                   	pop    esi
c00182ea:	5f                   	pop    edi
c00182eb:	5d                   	pop    ebp
c00182ec:	c3                   	ret    
c00182ed:	8d 76 00             	lea    esi,[esi+0x0]
c00182f0:	5a                   	pop    edx
c00182f1:	31 c0                	xor    eax,eax
c00182f3:	5b                   	pop    ebx
c00182f4:	5e                   	pop    esi
c00182f5:	5f                   	pop    edi
c00182f6:	5d                   	pop    ebp
c00182f7:	c3                   	ret    
c00182f8:	b8 01 00 00 00       	mov    eax,0x1
c00182fd:	eb dd                	jmp    c00182dc <SoundPort::buffer32(int*, int)+0x64>
c00182ff:	90                   	nop

c0018300 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0018300:	57                   	push   edi
c0018301:	56                   	push   esi
c0018302:	53                   	push   ebx
c0018303:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018307:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001830b:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c0018311:	39 03                	cmp    DWORD PTR [ebx],eax
c0018313:	74 13                	je     c0018328 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c0018315:	83 ec 0c             	sub    esp,0xc
c0018318:	68 2c f2 01 c0       	push   0xc001f22c
c001831d:	e8 e1 7e ff ff       	call   c0010203 <KePanic(char const*)>
c0018322:	83 c4 10             	add    esp,0x10
c0018325:	8d 76 00             	lea    esi,[esi+0x0]
c0018328:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001832e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0018331:	74 11                	je     c0018344 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c0018333:	83 ec 0c             	sub    esp,0xc
c0018336:	68 6b f2 01 c0       	push   0xc001f26b
c001833b:	e8 c3 7e ff ff       	call   c0010203 <KePanic(char const*)>
c0018340:	83 c4 10             	add    esp,0x10
c0018343:	90                   	nop
c0018344:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001834a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001834d:	74 11                	je     c0018360 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001834f:	83 ec 0c             	sub    esp,0xc
c0018352:	68 6b f2 01 c0       	push   0xc001f26b
c0018357:	e8 a7 7e ff ff       	call   c0010203 <KePanic(char const*)>
c001835c:	83 c4 10             	add    esp,0x10
c001835f:	90                   	nop
c0018360:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0018363:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c0018367:	7e 07                	jle    c0018370 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0018369:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001836d:	8d 76 00             	lea    esi,[esi+0x0]
c0018370:	85 f6                	test   esi,esi
c0018372:	7e 2c                	jle    c00183a0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c0018374:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018378:	8d 3c 36             	lea    edi,[esi+esi*1]
c001837b:	31 c9                	xor    ecx,ecx
c001837d:	01 d7                	add    edi,edx
c001837f:	90                   	nop
c0018380:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0018383:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c0018386:	85 c0                	test   eax,eax
c0018388:	79 06                	jns    c0018390 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001838a:	05 ff 7f 00 00       	add    eax,0x7fff
c001838f:	90                   	nop
c0018390:	c1 f8 0f             	sar    eax,0xf
c0018393:	83 c1 04             	add    ecx,0x4
c0018396:	66 01 02             	add    WORD PTR [edx],ax
c0018399:	83 c2 02             	add    edx,0x2
c001839c:	39 d7                	cmp    edi,edx
c001839e:	75 e0                	jne    c0018380 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c00183a0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00183a3:	50                   	push   eax
c00183a4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00183a7:	29 f0                	sub    eax,esi
c00183a9:	c1 e0 02             	shl    eax,0x2
c00183ac:	50                   	push   eax
c00183ad:	8d 04 b2             	lea    eax,[edx+esi*4]
c00183b0:	50                   	push   eax
c00183b1:	52                   	push   edx
c00183b2:	e8 29 80 fe ff       	call   c00003e0 <memmove>
c00183b7:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c00183ba:	83 c4 10             	add    esp,0x10
c00183bd:	89 f0                	mov    eax,esi
c00183bf:	5b                   	pop    ebx
c00183c0:	5e                   	pop    esi
c00183c1:	5f                   	pop    edi
c00183c2:	c3                   	ret    
c00183c3:	90                   	nop

c00183c4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c00183c4:	57                   	push   edi
c00183c5:	56                   	push   esi
c00183c6:	53                   	push   ebx
c00183c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00183cb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00183cf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00183d3:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c00183d9:	39 06                	cmp    DWORD PTR [esi],eax
c00183db:	74 13                	je     c00183f0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c00183dd:	83 ec 0c             	sub    esp,0xc
c00183e0:	68 4c f2 01 c0       	push   0xc001f24c
c00183e5:	e8 19 7e ff ff       	call   c0010203 <KePanic(char const*)>
c00183ea:	83 c4 10             	add    esp,0x10
c00183ed:	8d 76 00             	lea    esi,[esi+0x0]
c00183f0:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c00183f6:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c00183f9:	74 11                	je     c001840c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c00183fb:	83 ec 0c             	sub    esp,0xc
c00183fe:	68 87 f2 01 c0       	push   0xc001f287
c0018403:	e8 fb 7d ff ff       	call   c0010203 <KePanic(char const*)>
c0018408:	83 c4 10             	add    esp,0x10
c001840b:	90                   	nop
c001840c:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c0018412:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c0018415:	74 11                	je     c0018428 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c0018417:	83 ec 0c             	sub    esp,0xc
c001841a:	68 87 f2 01 c0       	push   0xc001f287
c001841f:	e8 df 7d ff ff       	call   c0010203 <KePanic(char const*)>
c0018424:	83 c4 10             	add    esp,0x10
c0018427:	90                   	nop
c0018428:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001842b:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001842f:	7e 07                	jle    c0018438 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c0018431:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0018435:	8d 76 00             	lea    esi,[esi+0x0]
c0018438:	85 ff                	test   edi,edi
c001843a:	7e 1c                	jle    c0018458 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001843c:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0018443:	31 c0                	xor    eax,eax
c0018445:	8d 76 00             	lea    esi,[esi+0x0]
c0018448:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001844b:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001844e:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c0018451:	83 c0 04             	add    eax,0x4
c0018454:	39 c1                	cmp    ecx,eax
c0018456:	75 f0                	jne    c0018448 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c0018458:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001845b:	50                   	push   eax
c001845c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001845f:	29 f8                	sub    eax,edi
c0018461:	c1 e0 02             	shl    eax,0x2
c0018464:	50                   	push   eax
c0018465:	8d 04 ba             	lea    eax,[edx+edi*4]
c0018468:	50                   	push   eax
c0018469:	52                   	push   edx
c001846a:	e8 71 7f fe ff       	call   c00003e0 <memmove>
c001846f:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c0018472:	83 c4 10             	add    esp,0x10
c0018475:	89 f8                	mov    eax,edi
c0018477:	5b                   	pop    ebx
c0018478:	5e                   	pop    esi
c0018479:	5f                   	pop    edi
c001847a:	c3                   	ret    
c001847b:	90                   	nop

c001847c <PCI::open(int, int, void*)>:
c001847c:	83 ec 18             	sub    esp,0x18
c001847f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018483:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018487:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001848d:	8b 10                	mov    edx,DWORD PTR [eax]
c001848f:	50                   	push   eax
c0018490:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0018493:	31 c0                	xor    eax,eax
c0018495:	83 c4 1c             	add    esp,0x1c
c0018498:	c3                   	ret    
c0018499:	90                   	nop

c001849a <PCI::close(int, int, void*)>:
c001849a:	31 c0                	xor    eax,eax
c001849c:	c3                   	ret    
c001849d:	90                   	nop

c001849e <PCI::PCI()>:
c001849e:	83 ec 0c             	sub    esp,0xc
c00184a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184a5:	83 ec 08             	sub    esp,0x8
c00184a8:	68 a3 f2 01 c0       	push   0xc001f2a3
c00184ad:	50                   	push   eax
c00184ae:	e8 61 2e ff ff       	call   c000b314 <Bus::Bus(char const*)>
c00184b3:	83 c4 10             	add    esp,0x10
c00184b6:	ba 4c f3 01 c0       	mov    edx,0xc001f34c
c00184bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184bf:	89 10                	mov    DWORD PTR [eax],edx
c00184c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184c5:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c00184cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184d3:	a3 40 5b 02 c0       	mov    ds:0xc0025b40,eax
c00184d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184dc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00184e2:	31 d2                	xor    edx,edx
c00184e4:	88 c2                	mov    dl,al
c00184e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184ea:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00184f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184f5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00184fb:	31 d2                	xor    edx,edx
c00184fd:	88 c2                	mov    dl,al
c00184ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018503:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0018508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001850c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0018512:	8d 50 01             	lea    edx,[eax+0x1]
c0018515:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018519:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001851f:	31 d2                	xor    edx,edx
c0018521:	88 c2                	mov    dl,al
c0018523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018527:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001852b:	83 c9 c0             	or     ecx,0xffffffc0
c001852e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0018532:	90                   	nop
c0018533:	83 c4 0c             	add    esp,0xc
c0018536:	c3                   	ret    
c0018537:	90                   	nop

c0018538 <PCI::readBAR8(unsigned int, int)>:
c0018538:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001853c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018540:	f6 c2 01             	test   dl,0x1
c0018543:	74 07                	je     c001854c <PCI::readBAR8(unsigned int, int)+0x14>
c0018545:	83 e2 fc             	and    edx,0xfffffffc
c0018548:	01 c2                	add    edx,eax
c001854a:	ec                   	in     al,dx
c001854b:	c3                   	ret    
c001854c:	83 e2 f0             	and    edx,0xfffffff0
c001854f:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0018552:	c3                   	ret    
c0018553:	90                   	nop

c0018554 <PCI::readBAR16(unsigned int, int)>:
c0018554:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018558:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001855c:	f6 c2 01             	test   dl,0x1
c001855f:	74 08                	je     c0018569 <PCI::readBAR16(unsigned int, int)+0x15>
c0018561:	83 e2 fc             	and    edx,0xfffffffc
c0018564:	01 c2                	add    edx,eax
c0018566:	66 ed                	in     ax,dx
c0018568:	c3                   	ret    
c0018569:	83 e2 f0             	and    edx,0xfffffff0
c001856c:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0018570:	c3                   	ret    
c0018571:	90                   	nop

c0018572 <PCI::readBAR32(unsigned int, int)>:
c0018572:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018576:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001857a:	f6 c2 01             	test   dl,0x1
c001857d:	74 07                	je     c0018586 <PCI::readBAR32(unsigned int, int)+0x14>
c001857f:	83 e2 fc             	and    edx,0xfffffffc
c0018582:	01 c2                	add    edx,eax
c0018584:	ed                   	in     eax,dx
c0018585:	c3                   	ret    
c0018586:	83 e2 f0             	and    edx,0xfffffff0
c0018589:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001858c:	c3                   	ret    
c001858d:	90                   	nop

c001858e <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001858e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018592:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018596:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001859a:	f6 c2 01             	test   dl,0x1
c001859d:	74 07                	je     c00185a6 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001859f:	83 e2 fc             	and    edx,0xfffffffc
c00185a2:	01 ca                	add    edx,ecx
c00185a4:	ee                   	out    dx,al
c00185a5:	c3                   	ret    
c00185a6:	83 e2 f0             	and    edx,0xfffffff0
c00185a9:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c00185ac:	c3                   	ret    
c00185ad:	90                   	nop

c00185ae <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c00185ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00185b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00185b6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00185ba:	f6 c2 01             	test   dl,0x1
c00185bd:	74 08                	je     c00185c7 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c00185bf:	83 e2 fc             	and    edx,0xfffffffc
c00185c2:	01 ca                	add    edx,ecx
c00185c4:	66 ef                	out    dx,ax
c00185c6:	c3                   	ret    
c00185c7:	83 e2 f0             	and    edx,0xfffffff0
c00185ca:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c00185ce:	c3                   	ret    
c00185cf:	90                   	nop

c00185d0 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c00185d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00185d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00185d8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00185dc:	f6 c2 01             	test   dl,0x1
c00185df:	74 07                	je     c00185e8 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c00185e1:	83 e2 fc             	and    edx,0xfffffffc
c00185e4:	01 ca                	add    edx,ecx
c00185e6:	ef                   	out    dx,eax
c00185e7:	c3                   	ret    
c00185e8:	83 e2 f0             	and    edx,0xfffffff0
c00185eb:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c00185ee:	c3                   	ret    
c00185ef:	90                   	nop

c00185f0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00185f0:	55                   	push   ebp
c00185f1:	57                   	push   edi
c00185f2:	56                   	push   esi
c00185f3:	53                   	push   ebx
c00185f4:	83 ec 0c             	sub    esp,0xc
c00185f7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00185fb:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00185ff:	89 f0                	mov    eax,esi
c0018601:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0018605:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018609:	3c 07                	cmp    al,0x7
c001860b:	76 10                	jbe    c001861d <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001860d:	83 ec 0c             	sub    esp,0xc
c0018610:	68 ab f2 01 c0       	push   0xc001f2ab
c0018615:	e8 e9 7b ff ff       	call   c0010203 <KePanic(char const*)>
c001861a:	83 c4 10             	add    esp,0x10
c001861d:	80 fb 0f             	cmp    bl,0xf
c0018620:	76 10                	jbe    c0018632 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0018622:	83 ec 0c             	sub    esp,0xc
c0018625:	68 db f2 01 c0       	push   0xc001f2db
c001862a:	e8 d4 7b ff ff       	call   c0010203 <KePanic(char const*)>
c001862f:	83 c4 10             	add    esp,0x10
c0018632:	8d 04 36             	lea    eax,[esi+esi*1]
c0018635:	ba f8 0c 00 00       	mov    edx,0xcf8
c001863a:	83 c8 f0             	or     eax,0xfffffff0
c001863d:	ee                   	out    dx,al
c001863e:	ba fa 0c 00 00       	mov    edx,0xcfa
c0018643:	89 e8                	mov    eax,ebp
c0018645:	ee                   	out    dx,al
c0018646:	83 c4 0c             	add    esp,0xc
c0018649:	89 d8                	mov    eax,ebx
c001864b:	66 81 e7 fc 00       	and    di,0xfc
c0018650:	5b                   	pop    ebx
c0018651:	c1 e0 08             	shl    eax,0x8
c0018654:	5e                   	pop    esi
c0018655:	09 f8                	or     eax,edi
c0018657:	5f                   	pop    edi
c0018658:	66 0d 00 c0          	or     ax,0xc000
c001865c:	5d                   	pop    ebp
c001865d:	c3                   	ret    

c001865e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001865e:	57                   	push   edi
c001865f:	56                   	push   esi
c0018660:	53                   	push   ebx
c0018661:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018665:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018669:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001866f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018673:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018677:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001867b:	83 ff 01             	cmp    edi,0x1
c001867e:	75 3e                	jne    c00186be <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0018680:	89 de                	mov    esi,ebx
c0018682:	0f b6 c0             	movzx  eax,al
c0018685:	81 e6 fc 00 00 00    	and    esi,0xfc
c001868b:	c1 e0 10             	shl    eax,0x10
c001868e:	0f b6 c9             	movzx  ecx,cl
c0018691:	09 f0                	or     eax,esi
c0018693:	c1 e1 08             	shl    ecx,0x8
c0018696:	0f b6 d2             	movzx  edx,dl
c0018699:	09 c8                	or     eax,ecx
c001869b:	c1 e2 0b             	shl    edx,0xb
c001869e:	09 d0                	or     eax,edx
c00186a0:	ba f8 0c 00 00       	mov    edx,0xcf8
c00186a5:	0d 00 00 00 80       	or     eax,0x80000000
c00186aa:	ef                   	out    dx,eax
c00186ab:	ba fc 0c 00 00       	mov    edx,0xcfc
c00186b0:	ed                   	in     eax,dx
c00186b1:	83 e3 02             	and    ebx,0x2
c00186b4:	0f b6 cb             	movzx  ecx,bl
c00186b7:	c1 e1 03             	shl    ecx,0x3
c00186ba:	d3 e8                	shr    eax,cl
c00186bc:	eb 43                	jmp    c0018701 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00186be:	83 ff 02             	cmp    edi,0x2
c00186c1:	75 2c                	jne    c00186ef <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c00186c3:	83 ec 0c             	sub    esp,0xc
c00186c6:	0f b6 c9             	movzx  ecx,cl
c00186c9:	0f b6 d2             	movzx  edx,dl
c00186cc:	0f b6 fb             	movzx  edi,bl
c00186cf:	0f b6 c0             	movzx  eax,al
c00186d2:	57                   	push   edi
c00186d3:	51                   	push   ecx
c00186d4:	52                   	push   edx
c00186d5:	50                   	push   eax
c00186d6:	56                   	push   esi
c00186d7:	e8 14 ff ff ff       	call   c00185f0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00186dc:	89 c2                	mov    edx,eax
c00186de:	ed                   	in     eax,dx
c00186df:	83 e3 02             	and    ebx,0x2
c00186e2:	83 c4 20             	add    esp,0x20
c00186e5:	0f b6 cb             	movzx  ecx,bl
c00186e8:	c1 e1 03             	shl    ecx,0x3
c00186eb:	d3 e8                	shr    eax,cl
c00186ed:	eb 12                	jmp    c0018701 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00186ef:	83 ec 0c             	sub    esp,0xc
c00186f2:	68 0b f3 01 c0       	push   0xc001f30b
c00186f7:	e8 07 7b ff ff       	call   c0010203 <KePanic(char const*)>
c00186fc:	83 c4 10             	add    esp,0x10
c00186ff:	31 c0                	xor    eax,eax
c0018701:	5b                   	pop    ebx
c0018702:	5e                   	pop    esi
c0018703:	5f                   	pop    edi
c0018704:	c3                   	ret    
c0018705:	90                   	nop

c0018706 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0018706:	83 ec 18             	sub    esp,0x18
c0018709:	6a 00                	push   0x0
c001870b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018710:	50                   	push   eax
c0018711:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018716:	50                   	push   eax
c0018717:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001871c:	50                   	push   eax
c001871d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018721:	e8 38 ff ff ff       	call   c001865e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018726:	83 c4 2c             	add    esp,0x2c
c0018729:	c3                   	ret    

c001872a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001872a:	83 ec 18             	sub    esp,0x18
c001872d:	6a 0e                	push   0xe
c001872f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018734:	50                   	push   eax
c0018735:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001873a:	50                   	push   eax
c001873b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018740:	50                   	push   eax
c0018741:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018745:	e8 14 ff ff ff       	call   c001865e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001874a:	83 c4 2c             	add    esp,0x2c
c001874d:	0f b6 c0             	movzx  eax,al
c0018750:	c3                   	ret    
c0018751:	90                   	nop

c0018752 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0018752:	55                   	push   ebp
c0018753:	57                   	push   edi
c0018754:	56                   	push   esi
c0018755:	53                   	push   ebx
c0018756:	83 ec 18             	sub    esp,0x18
c0018759:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001875e:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0018763:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0018768:	6a 0a                	push   0xa
c001876a:	56                   	push   esi
c001876b:	55                   	push   ebp
c001876c:	57                   	push   edi
c001876d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018771:	e8 e8 fe ff ff       	call   c001865e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018776:	83 c4 14             	add    esp,0x14
c0018779:	89 c3                	mov    ebx,eax
c001877b:	6a 0a                	push   0xa
c001877d:	0f b6 db             	movzx  ebx,bl
c0018780:	56                   	push   esi
c0018781:	55                   	push   ebp
c0018782:	57                   	push   edi
c0018783:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018787:	e8 d2 fe ff ff       	call   c001865e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001878c:	83 c4 2c             	add    esp,0x2c
c001878f:	25 00 ff 00 00       	and    eax,0xff00
c0018794:	09 d8                	or     eax,ebx
c0018796:	5b                   	pop    ebx
c0018797:	5e                   	pop    esi
c0018798:	5f                   	pop    edi
c0018799:	5d                   	pop    ebp
c001879a:	c3                   	ret    
c001879b:	90                   	nop

c001879c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001879c:	83 ec 18             	sub    esp,0x18
c001879f:	6a 08                	push   0x8
c00187a1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187a6:	50                   	push   eax
c00187a7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187ac:	50                   	push   eax
c00187ad:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187b2:	50                   	push   eax
c00187b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187b7:	e8 a2 fe ff ff       	call   c001865e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187bc:	83 c4 2c             	add    esp,0x2c
c00187bf:	0f b6 c4             	movzx  eax,ah
c00187c2:	c3                   	ret    
c00187c3:	90                   	nop

c00187c4 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c00187c4:	83 ec 18             	sub    esp,0x18
c00187c7:	6a 08                	push   0x8
c00187c9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187ce:	50                   	push   eax
c00187cf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187d4:	50                   	push   eax
c00187d5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187da:	50                   	push   eax
c00187db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187df:	e8 7a fe ff ff       	call   c001865e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187e4:	83 c4 2c             	add    esp,0x2c
c00187e7:	c3                   	ret    

c00187e8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00187e8:	83 ec 18             	sub    esp,0x18
c00187eb:	6a 3c                	push   0x3c
c00187ed:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187f2:	50                   	push   eax
c00187f3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187f8:	50                   	push   eax
c00187f9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187fe:	50                   	push   eax
c00187ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018803:	e8 56 fe ff ff       	call   c001865e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018808:	83 c4 2c             	add    esp,0x2c
c001880b:	c3                   	ret    

c001880c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001880c:	83 ec 18             	sub    esp,0x18
c001880f:	6a 18                	push   0x18
c0018811:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018816:	50                   	push   eax
c0018817:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001881c:	50                   	push   eax
c001881d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018822:	50                   	push   eax
c0018823:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018827:	e8 32 fe ff ff       	call   c001865e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001882c:	83 c4 2c             	add    esp,0x2c
c001882f:	0f b6 c4             	movzx  eax,ah
c0018832:	c3                   	ret    
c0018833:	90                   	nop

c0018834 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018834:	55                   	push   ebp
c0018835:	57                   	push   edi
c0018836:	56                   	push   esi
c0018837:	53                   	push   ebx
c0018838:	83 ec 28             	sub    esp,0x28
c001883b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001883f:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0018844:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0018849:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001884e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0018855:	8d 43 12             	lea    eax,[ebx+0x12]
c0018858:	83 c3 10             	add    ebx,0x10
c001885b:	0f b6 c0             	movzx  eax,al
c001885e:	0f b6 db             	movzx  ebx,bl
c0018861:	50                   	push   eax
c0018862:	51                   	push   ecx
c0018863:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0018867:	57                   	push   edi
c0018868:	55                   	push   ebp
c0018869:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001886d:	e8 ec fd ff ff       	call   c001865e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018872:	83 c4 14             	add    esp,0x14
c0018875:	89 c6                	mov    esi,eax
c0018877:	53                   	push   ebx
c0018878:	c1 e6 10             	shl    esi,0x10
c001887b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001887f:	51                   	push   ecx
c0018880:	57                   	push   edi
c0018881:	55                   	push   ebp
c0018882:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018886:	e8 d3 fd ff ff       	call   c001865e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001888b:	83 c4 3c             	add    esp,0x3c
c001888e:	0f b7 c0             	movzx  eax,ax
c0018891:	5b                   	pop    ebx
c0018892:	09 f0                	or     eax,esi
c0018894:	5e                   	pop    esi
c0018895:	5f                   	pop    edi
c0018896:	5d                   	pop    ebp
c0018897:	c3                   	ret    

c0018898 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0018898:	55                   	push   ebp
c0018899:	57                   	push   edi
c001889a:	56                   	push   esi
c001889b:	53                   	push   ebx
c001889c:	83 ec 0c             	sub    esp,0xc
c001889f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00188a3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00188a7:	89 f5                	mov    ebp,esi
c00188a9:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c00188af:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00188b3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00188b7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00188bb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00188bf:	83 f9 01             	cmp    ecx,0x1
c00188c2:	75 5d                	jne    c0018921 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c00188c4:	0f b6 c8             	movzx  ecx,al
c00188c7:	0f b6 d2             	movzx  edx,dl
c00188ca:	c1 e1 10             	shl    ecx,0x10
c00188cd:	c1 e2 0b             	shl    edx,0xb
c00188d0:	89 f0                	mov    eax,esi
c00188d2:	25 fc 00 00 00       	and    eax,0xfc
c00188d7:	09 c1                	or     ecx,eax
c00188d9:	89 e8                	mov    eax,ebp
c00188db:	0f b6 c0             	movzx  eax,al
c00188de:	c1 e0 08             	shl    eax,0x8
c00188e1:	09 c1                	or     ecx,eax
c00188e3:	09 d1                	or     ecx,edx
c00188e5:	ba f8 0c 00 00       	mov    edx,0xcf8
c00188ea:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00188f0:	89 c8                	mov    eax,ecx
c00188f2:	ef                   	out    dx,eax
c00188f3:	ba fc 0c 00 00       	mov    edx,0xcfc
c00188f8:	ed                   	in     eax,dx
c00188f9:	0f b7 db             	movzx  ebx,bx
c00188fc:	83 e6 02             	and    esi,0x2
c00188ff:	74 0a                	je     c001890b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0018901:	0f b7 d0             	movzx  edx,ax
c0018904:	c1 e3 10             	shl    ebx,0x10
c0018907:	09 d3                	or     ebx,edx
c0018909:	eb 05                	jmp    c0018910 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001890b:	66 31 c0             	xor    ax,ax
c001890e:	09 c3                	or     ebx,eax
c0018910:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018915:	89 c8                	mov    eax,ecx
c0018917:	ef                   	out    dx,eax
c0018918:	ba fc 0c 00 00       	mov    edx,0xcfc
c001891d:	89 d8                	mov    eax,ebx
c001891f:	eb 41                	jmp    c0018962 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0018921:	83 f9 02             	cmp    ecx,0x2
c0018924:	75 45                	jne    c001896b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0018926:	83 ec 0c             	sub    esp,0xc
c0018929:	0f b6 d2             	movzx  edx,dl
c001892c:	89 f1                	mov    ecx,esi
c001892e:	0f b6 c0             	movzx  eax,al
c0018931:	0f b6 f1             	movzx  esi,cl
c0018934:	89 e9                	mov    ecx,ebp
c0018936:	56                   	push   esi
c0018937:	0f b6 c9             	movzx  ecx,cl
c001893a:	51                   	push   ecx
c001893b:	52                   	push   edx
c001893c:	50                   	push   eax
c001893d:	57                   	push   edi
c001893e:	e8 ad fc ff ff       	call   c00185f0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018943:	89 c2                	mov    edx,eax
c0018945:	ed                   	in     eax,dx
c0018946:	83 c4 20             	add    esp,0x20
c0018949:	0f b7 db             	movzx  ebx,bx
c001894c:	f6 c2 02             	test   dl,0x2
c001894f:	74 0c                	je     c001895d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0018951:	0f b7 c8             	movzx  ecx,ax
c0018954:	89 d8                	mov    eax,ebx
c0018956:	c1 e0 10             	shl    eax,0x10
c0018959:	09 c8                	or     eax,ecx
c001895b:	eb 05                	jmp    c0018962 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001895d:	66 31 c0             	xor    ax,ax
c0018960:	09 d8                	or     eax,ebx
c0018962:	ef                   	out    dx,eax
c0018963:	83 c4 0c             	add    esp,0xc
c0018966:	5b                   	pop    ebx
c0018967:	5e                   	pop    esi
c0018968:	5f                   	pop    edi
c0018969:	5d                   	pop    ebp
c001896a:	c3                   	ret    
c001896b:	c7 44 24 20 0b f3 01 c0 	mov    DWORD PTR [esp+0x20],0xc001f30b
c0018973:	83 c4 0c             	add    esp,0xc
c0018976:	5b                   	pop    ebx
c0018977:	5e                   	pop    esi
c0018978:	5f                   	pop    edi
c0018979:	5d                   	pop    ebp
c001897a:	e9 84 78 ff ff       	jmp    c0010203 <KePanic(char const*)>
c001897f:	90                   	nop

c0018980 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0018980:	55                   	push   ebp
c0018981:	57                   	push   edi
c0018982:	56                   	push   esi
c0018983:	53                   	push   ebx
c0018984:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001898a:	80 3d 4c 5b 02 c0 00 	cmp    BYTE PTR ds:0xc0025b4c,0x0
c0018991:	0f 85 84 00 00 00    	jne    c0018a1b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0018997:	83 ec 0c             	sub    esp,0xc
c001899a:	68 14 01 00 00       	push   0x114
c001899f:	e8 15 ee fe ff       	call   c00077b9 <malloc>
c00189a4:	83 c4 0c             	add    esp,0xc
c00189a7:	89 c3                	mov    ebx,eax
c00189a9:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c00189af:	68 11 f3 01 c0       	push   0xc001f311
c00189b4:	50                   	push   eax
c00189b5:	e8 3c 21 ff ff       	call   c000aaf6 <File::File(char const*, Process*)>
c00189ba:	5a                   	pop    edx
c00189bb:	59                   	pop    ecx
c00189bc:	6a 01                	push   0x1
c00189be:	53                   	push   ebx
c00189bf:	e8 f2 21 ff ff       	call   c000abb6 <File::open(FileOpenMode)>
c00189c4:	83 c4 0c             	add    esp,0xc
c00189c7:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c00189cb:	50                   	push   eax
c00189cc:	8d 44 24 28          	lea    eax,[esp+0x28]
c00189d0:	50                   	push   eax
c00189d1:	53                   	push   ebx
c00189d2:	e8 8b 24 ff ff       	call   c000ae62 <File::stat(unsigned long long*, bool*)>
c00189d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189db:	40                   	inc    eax
c00189dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00189df:	e8 d5 ed fe ff       	call   c00077b9 <malloc>
c00189e4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00189e8:	a3 48 5b 02 c0       	mov    ds:0xc0025b48,eax
c00189ed:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c00189f1:	5e                   	pop    esi
c00189f2:	8b 13                	mov    edx,DWORD PTR [ebx]
c00189f4:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c00189f8:	51                   	push   ecx
c00189f9:	50                   	push   eax
c00189fa:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00189fe:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018a02:	53                   	push   ebx
c0018a03:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018a06:	83 c4 14             	add    esp,0x14
c0018a09:	53                   	push   ebx
c0018a0a:	e8 05 22 ff ff       	call   c000ac14 <File::close()>
c0018a0f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a13:	83 c4 10             	add    esp,0x10
c0018a16:	a3 44 5b 02 c0       	mov    ds:0xc0025b44,eax
c0018a1b:	a1 44 5b 02 c0       	mov    eax,ds:0xc0025b44
c0018a20:	8b 15 48 5b 02 c0    	mov    edx,DWORD PTR ds:0xc0025b48
c0018a26:	89 04 24             	mov    DWORD PTR [esp],eax
c0018a29:	31 ff                	xor    edi,edi
c0018a2b:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0018a33:	31 f6                	xor    esi,esi
c0018a35:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0018a3a:	31 db                	xor    ebx,ebx
c0018a3c:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0018a44:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018a49:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0018a50:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0018a54:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0018a5b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0018a5f:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018a62:	0f 8e 6b 01 00 00    	jle    c0018bd3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0018a68:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018a6b:	d4 40                	aam    0x40
c0018a6d:	d5 39                	aad    0x39
c0018a6f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018a73:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0018a77:	d4 40                	aam    0x40
c0018a79:	d5 39                	aad    0x39
c0018a7b:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018a7f:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0018a83:	d4 40                	aam    0x40
c0018a85:	d5 39                	aad    0x39
c0018a87:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018a8b:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0018a8f:	d4 40                	aam    0x40
c0018a91:	d5 39                	aad    0x39
c0018a93:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018a97:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0018a9b:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018a9f:	3c 56                	cmp    al,0x56
c0018aa1:	74 45                	je     c0018ae8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0018aa3:	d4 40                	aam    0x40
c0018aa5:	d5 39                	aad    0x39
c0018aa7:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018aaa:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0018aae:	0f b6 c9             	movzx  ecx,cl
c0018ab1:	c1 e1 04             	shl    ecx,0x4
c0018ab4:	d4 40                	aam    0x40
c0018ab6:	d5 39                	aad    0x39
c0018ab8:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018abb:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0018abf:	0f b6 db             	movzx  ebx,bl
c0018ac2:	09 cb                	or     ebx,ecx
c0018ac4:	c1 e3 04             	shl    ebx,0x4
c0018ac7:	d4 40                	aam    0x40
c0018ac9:	d5 39                	aad    0x39
c0018acb:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018ace:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0018ad2:	0f b6 c9             	movzx  ecx,cl
c0018ad5:	09 cb                	or     ebx,ecx
c0018ad7:	c1 e3 04             	shl    ebx,0x4
c0018ada:	89 d9                	mov    ecx,ebx
c0018adc:	d4 40                	aam    0x40
c0018ade:	d5 39                	aad    0x39
c0018ae0:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018ae3:	0f b6 db             	movzx  ebx,bl
c0018ae6:	09 cb                	or     ebx,ecx
c0018ae8:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0018aec:	80 f9 44             	cmp    cl,0x44
c0018aef:	74 47                	je     c0018b38 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0018af1:	88 c8                	mov    al,cl
c0018af3:	d4 40                	aam    0x40
c0018af5:	d5 39                	aad    0x39
c0018af7:	83 e8 30             	sub    eax,0x30
c0018afa:	0f b6 e8             	movzx  ebp,al
c0018afd:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0018b01:	c1 e5 04             	shl    ebp,0x4
c0018b04:	d4 40                	aam    0x40
c0018b06:	d5 39                	aad    0x39
c0018b08:	83 e8 30             	sub    eax,0x30
c0018b0b:	0f b6 f0             	movzx  esi,al
c0018b0e:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0018b12:	09 ee                	or     esi,ebp
c0018b14:	c1 e6 04             	shl    esi,0x4
c0018b17:	d4 40                	aam    0x40
c0018b19:	d5 39                	aad    0x39
c0018b1b:	83 e8 30             	sub    eax,0x30
c0018b1e:	0f b6 e8             	movzx  ebp,al
c0018b21:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0018b25:	09 ee                	or     esi,ebp
c0018b27:	c1 e6 04             	shl    esi,0x4
c0018b2a:	89 f5                	mov    ebp,esi
c0018b2c:	d4 40                	aam    0x40
c0018b2e:	d5 39                	aad    0x39
c0018b30:	83 e8 30             	sub    eax,0x30
c0018b33:	0f b6 f0             	movzx  esi,al
c0018b36:	09 ee                	or     esi,ebp
c0018b38:	83 c7 10             	add    edi,0x10
c0018b3b:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0018b3f:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018b42:	3c 0a                	cmp    al,0xa
c0018b44:	74 09                	je     c0018b4f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0018b46:	45                   	inc    ebp
c0018b47:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018b4a:	75 16                	jne    c0018b62 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0018b4c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0018b4f:	3c 0a                	cmp    al,0xa
c0018b51:	0f 94 c0             	sete   al
c0018b54:	0f b6 c0             	movzx  eax,al
c0018b57:	01 c7                	add    edi,eax
c0018b59:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0018b5e:	75 0c                	jne    c0018b6c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0018b60:	eb 15                	jmp    c0018b77 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0018b62:	47                   	inc    edi
c0018b63:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0018b66:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0018b6a:	eb d3                	jmp    c0018b3f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0018b6c:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0018b71:	0f 85 e8 fe ff ff    	jne    c0018a5f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018b77:	80 f9 44             	cmp    cl,0x44
c0018b7a:	74 0b                	je     c0018b87 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0018b7c:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0018b81:	0f 85 d8 fe ff ff    	jne    c0018a5f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018b87:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018b8b:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018b8f:	c1 e1 04             	shl    ecx,0x4
c0018b92:	83 e8 30             	sub    eax,0x30
c0018b95:	09 c8                	or     eax,ecx
c0018b97:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0018b9b:	0f 85 be fe ff ff    	jne    c0018a5f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018ba1:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0018ba5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018ba9:	c1 e1 04             	shl    ecx,0x4
c0018bac:	83 e8 30             	sub    eax,0x30
c0018baf:	09 c8                	or     eax,ecx
c0018bb1:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0018bb5:	0f 85 a4 fe ff ff    	jne    c0018a5f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018bbb:	50                   	push   eax
c0018bbc:	50                   	push   eax
c0018bbd:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018bc1:	50                   	push   eax
c0018bc2:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0018bc9:	e8 32 7a fe ff       	call   c0000600 <strcpy>
c0018bce:	83 c4 10             	add    esp,0x10
c0018bd1:	eb 15                	jmp    c0018be8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0018bd3:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018bda:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0018be5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0018be8:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018bef:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018bf5:	5b                   	pop    ebx
c0018bf6:	5e                   	pop    esi
c0018bf7:	5f                   	pop    edi
c0018bf8:	5d                   	pop    ebp
c0018bf9:	c3                   	ret    

c0018bfa <PCI::checkBus(unsigned char)>:
c0018bfa:	56                   	push   esi
c0018bfb:	53                   	push   ebx
c0018bfc:	31 f6                	xor    esi,esi
c0018bfe:	51                   	push   ecx
c0018bff:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c0018c03:	0f b6 c3             	movzx  eax,bl
c0018c06:	52                   	push   edx
c0018c07:	56                   	push   esi
c0018c08:	46                   	inc    esi
c0018c09:	50                   	push   eax
c0018c0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018c0e:	e8 f3 02 00 00       	call   c0018f06 <PCI::checkDevice(unsigned char, unsigned char)>
c0018c13:	83 c4 10             	add    esp,0x10
c0018c16:	83 fe 20             	cmp    esi,0x20
c0018c19:	75 e8                	jne    c0018c03 <PCI::checkBus(unsigned char)+0x9>
c0018c1b:	58                   	pop    eax
c0018c1c:	5b                   	pop    ebx
c0018c1d:	5e                   	pop    esi
c0018c1e:	c3                   	ret    
c0018c1f:	90                   	nop

c0018c20 <PCI::foundDevice(PCIDeviceInfo)>:
c0018c20:	55                   	push   ebp
c0018c21:	57                   	push   edi
c0018c22:	56                   	push   esi
c0018c23:	53                   	push   ebx
c0018c24:	83 ec 1c             	sub    esp,0x1c
c0018c27:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018c2b:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0018c31:	0f 84 52 01 00 00    	je     c0018d89 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018c37:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0018c3b:	66 81 f9 06 04       	cmp    cx,0x406
c0018c40:	75 2c                	jne    c0018c6e <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0018c42:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0018c47:	50                   	push   eax
c0018c48:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0018c4d:	50                   	push   eax
c0018c4e:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0018c53:	50                   	push   eax
c0018c54:	56                   	push   esi
c0018c55:	e8 b2 fb ff ff       	call   c001880c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0018c5a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0018c5e:	0f b6 c0             	movzx  eax,al
c0018c61:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018c65:	83 c4 2c             	add    esp,0x2c
c0018c68:	5b                   	pop    ebx
c0018c69:	5e                   	pop    esi
c0018c6a:	5f                   	pop    edi
c0018c6b:	5d                   	pop    ebp
c0018c6c:	eb 8c                	jmp    c0018bfa <PCI::checkBus(unsigned char)>
c0018c6e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018c72:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0018c78:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018c7c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018c80:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0018c84:	88 d3                	mov    bl,dl
c0018c86:	85 c0                	test   eax,eax
c0018c88:	74 33                	je     c0018cbd <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0018c8a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018c8d:	85 d2                	test   edx,edx
c0018c8f:	74 28                	je     c0018cb9 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018c91:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0018c97:	31 ef                	xor    edi,ebp
c0018c99:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0018c9f:	75 18                	jne    c0018cb9 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018ca1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018ca5:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0018cab:	75 0c                	jne    c0018cb9 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018cad:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0018cb3:	0f 84 d0 00 00 00    	je     c0018d89 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018cb9:	8b 00                	mov    eax,DWORD PTR [eax]
c0018cbb:	eb c9                	jmp    c0018c86 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0018cbd:	66 81 f9 01 06       	cmp    cx,0x601
c0018cc2:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0018cc6:	75 19                	jne    c0018ce1 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0018cc8:	83 ec 0c             	sub    esp,0xc
c0018ccb:	68 64 01 00 00       	push   0x164
c0018cd0:	e8 e4 ea fe ff       	call   c00077b9 <malloc>
c0018cd5:	89 c5                	mov    ebp,eax
c0018cd7:	89 04 24             	mov    DWORD PTR [esp],eax
c0018cda:	e8 47 0e 00 00       	call   c0019b26 <SATABus::SATABus()>
c0018cdf:	eb 1e                	jmp    c0018cff <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0018ce1:	66 81 f9 01 01       	cmp    cx,0x101
c0018ce6:	75 60                	jne    c0018d48 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0018ce8:	83 ec 0c             	sub    esp,0xc
c0018ceb:	68 70 02 00 00       	push   0x270
c0018cf0:	e8 c4 ea fe ff       	call   c00077b9 <malloc>
c0018cf5:	89 c5                	mov    ebp,eax
c0018cf7:	89 04 24             	mov    DWORD PTR [esp],eax
c0018cfa:	e8 cb 02 00 00       	call   c0018fca <IDE::IDE()>
c0018cff:	58                   	pop    eax
c0018d00:	5a                   	pop    edx
c0018d01:	55                   	push   ebp
c0018d02:	56                   	push   esi
c0018d03:	e8 b8 2c ff ff       	call   c000b9c0 <Device::addChild(Device*)>
c0018d08:	83 ec 1c             	sub    esp,0x1c
c0018d0b:	b9 09 00 00 00       	mov    ecx,0x9
c0018d10:	fc                   	cld    
c0018d11:	89 e7                	mov    edi,esp
c0018d13:	89 de                	mov    esi,ebx
c0018d15:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018d17:	55                   	push   ebp
c0018d18:	e8 e9 2b ff ff       	call   c000b906 <Device::preOpenPCI(PCIDeviceInfo)>
c0018d1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018d20:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0018d24:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0018d2c:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0018d34:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0018d3c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018d3f:	83 c4 4c             	add    esp,0x4c
c0018d42:	5b                   	pop    ebx
c0018d43:	5e                   	pop    esi
c0018d44:	5f                   	pop    edi
c0018d45:	5d                   	pop    ebp
c0018d46:	ff e0                	jmp    eax
c0018d48:	83 ec 0c             	sub    esp,0xc
c0018d4b:	68 58 01 00 00       	push   0x158
c0018d50:	e8 64 ea fe ff       	call   c00077b9 <malloc>
c0018d55:	89 c5                	mov    ebp,eax
c0018d57:	58                   	pop    eax
c0018d58:	5a                   	pop    edx
c0018d59:	68 2a f3 01 c0       	push   0xc001f32a
c0018d5e:	55                   	push   ebp
c0018d5f:	e8 fa 2e ff ff       	call   c000bc5e <DriverlessDevice::DriverlessDevice(char const*)>
c0018d64:	59                   	pop    ecx
c0018d65:	5f                   	pop    edi
c0018d66:	55                   	push   ebp
c0018d67:	56                   	push   esi
c0018d68:	e8 53 2c ff ff       	call   c000b9c0 <Device::addChild(Device*)>
c0018d6d:	b9 09 00 00 00       	mov    ecx,0x9
c0018d72:	fc                   	cld    
c0018d73:	89 df                	mov    edi,ebx
c0018d75:	89 de                	mov    esi,ebx
c0018d77:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018d79:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0018d7d:	83 c4 2c             	add    esp,0x2c
c0018d80:	5b                   	pop    ebx
c0018d81:	5e                   	pop    esi
c0018d82:	5f                   	pop    edi
c0018d83:	5d                   	pop    ebp
c0018d84:	e9 7d 2b ff ff       	jmp    c000b906 <Device::preOpenPCI(PCIDeviceInfo)>
c0018d89:	83 c4 1c             	add    esp,0x1c
c0018d8c:	5b                   	pop    ebx
c0018d8d:	5e                   	pop    esi
c0018d8e:	5f                   	pop    edi
c0018d8f:	5d                   	pop    ebp
c0018d90:	c3                   	ret    
c0018d91:	90                   	nop

c0018d92 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0018d92:	55                   	push   ebp
c0018d93:	57                   	push   edi
c0018d94:	56                   	push   esi
c0018d95:	53                   	push   ebx
c0018d96:	83 ec 68             	sub    esp,0x68
c0018d99:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0018d9d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0018da4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018da8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0018daf:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c0018db4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018db8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0018dbf:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c0018dc4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018dc8:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018dcd:	6a 0c                	push   0xc
c0018dcf:	57                   	push   edi
c0018dd0:	53                   	push   ebx
c0018dd1:	56                   	push   esi
c0018dd2:	55                   	push   ebp
c0018dd3:	e8 86 f8 ff ff       	call   c001865e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018dd8:	83 c4 20             	add    esp,0x20
c0018ddb:	57                   	push   edi
c0018ddc:	53                   	push   ebx
c0018ddd:	56                   	push   esi
c0018dde:	55                   	push   ebp
c0018ddf:	e8 6e f9 ff ff       	call   c0018752 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0018de4:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0018de9:	57                   	push   edi
c0018dea:	53                   	push   ebx
c0018deb:	56                   	push   esi
c0018dec:	55                   	push   ebp
c0018ded:	e8 f6 f9 ff ff       	call   c00187e8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0018df2:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0018df6:	83 c4 14             	add    esp,0x14
c0018df9:	6a 3c                	push   0x3c
c0018dfb:	57                   	push   edi
c0018dfc:	53                   	push   ebx
c0018dfd:	56                   	push   esi
c0018dfe:	55                   	push   ebp
c0018dff:	e8 5a f8 ff ff       	call   c001865e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018e04:	0f b6 c4             	movzx  eax,ah
c0018e07:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018e0b:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0018e0f:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0018e13:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0018e18:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c0018e1e:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c0018e24:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018e28:	83 c4 20             	add    esp,0x20
c0018e2b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018e30:	74 30                	je     c0018e62 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018e32:	31 c0                	xor    eax,eax
c0018e34:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0018e38:	7e 28                	jle    c0018e62 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018e3a:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c0018e42:	39 cb                	cmp    ebx,ecx
c0018e44:	75 19                	jne    c0018e5f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018e46:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c0018e4e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0018e52:	75 0b                	jne    c0018e5f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018e54:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c0018e5b:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c0018e5f:	40                   	inc    eax
c0018e60:	eb d2                	jmp    c0018e34 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c0018e62:	31 d2                	xor    edx,edx
c0018e64:	83 ec 0c             	sub    esp,0xc
c0018e67:	57                   	push   edi
c0018e68:	53                   	push   ebx
c0018e69:	56                   	push   esi
c0018e6a:	52                   	push   edx
c0018e6b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0018e6f:	55                   	push   ebp
c0018e70:	e8 bf f9 ff ff       	call   c0018834 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018e75:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018e79:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0018e7d:	42                   	inc    edx
c0018e7e:	83 c4 20             	add    esp,0x20
c0018e81:	83 fa 06             	cmp    edx,0x6
c0018e84:	75 de                	jne    c0018e64 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c0018e86:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018e8b:	83 ec 0c             	sub    esp,0xc
c0018e8e:	86 e0                	xchg   al,ah
c0018e90:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0018e95:	6a 02                	push   0x2
c0018e97:	57                   	push   edi
c0018e98:	53                   	push   ebx
c0018e99:	56                   	push   esi
c0018e9a:	55                   	push   ebp
c0018e9b:	e8 be f7 ff ff       	call   c001865e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018ea0:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0018ea5:	83 c4 20             	add    esp,0x20
c0018ea8:	57                   	push   edi
c0018ea9:	53                   	push   ebx
c0018eaa:	56                   	push   esi
c0018eab:	55                   	push   ebp
c0018eac:	e8 eb f8 ff ff       	call   c001879c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0018eb1:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018eb5:	57                   	push   edi
c0018eb6:	53                   	push   ebx
c0018eb7:	56                   	push   esi
c0018eb8:	55                   	push   ebp
c0018eb9:	e8 48 f8 ff ff       	call   c0018706 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018ebe:	b9 09 00 00 00       	mov    ecx,0x9
c0018ec3:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0018ec8:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c0018ecc:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0018ed0:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0018ed4:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0018ed8:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0018edc:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0018ee0:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c0018ee4:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0018ee8:	83 ec 0c             	sub    esp,0xc
c0018eeb:	fc                   	cld    
c0018eec:	89 e7                	mov    edi,esp
c0018eee:	8d 74 24 58          	lea    esi,[esp+0x58]
c0018ef2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018ef4:	55                   	push   ebp
c0018ef5:	e8 26 fd ff ff       	call   c0018c20 <PCI::foundDevice(PCIDeviceInfo)>
c0018efa:	81 c4 8c 00 00 00    	add    esp,0x8c
c0018f00:	5b                   	pop    ebx
c0018f01:	5e                   	pop    esi
c0018f02:	5f                   	pop    edi
c0018f03:	5d                   	pop    ebp
c0018f04:	c3                   	ret    
c0018f05:	90                   	nop

c0018f06 <PCI::checkDevice(unsigned char, unsigned char)>:
c0018f06:	55                   	push   ebp
c0018f07:	57                   	push   edi
c0018f08:	56                   	push   esi
c0018f09:	53                   	push   ebx
c0018f0a:	83 ec 0c             	sub    esp,0xc
c0018f0d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018f11:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0018f16:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018f1b:	6a 00                	push   0x0
c0018f1d:	56                   	push   esi
c0018f1e:	57                   	push   edi
c0018f1f:	55                   	push   ebp
c0018f20:	e8 e1 f7 ff ff       	call   c0018706 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018f25:	6a 00                	push   0x0
c0018f27:	56                   	push   esi
c0018f28:	57                   	push   edi
c0018f29:	55                   	push   ebp
c0018f2a:	e8 63 fe ff ff       	call   c0018d92 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018f2f:	83 c4 20             	add    esp,0x20
c0018f32:	6a 00                	push   0x0
c0018f34:	56                   	push   esi
c0018f35:	57                   	push   edi
c0018f36:	55                   	push   ebp
c0018f37:	e8 ee f7 ff ff       	call   c001872a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018f3c:	83 c4 10             	add    esp,0x10
c0018f3f:	84 c0                	test   al,al
c0018f41:	79 27                	jns    c0018f6a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0018f43:	bb 01 00 00 00       	mov    ebx,0x1
c0018f48:	53                   	push   ebx
c0018f49:	56                   	push   esi
c0018f4a:	57                   	push   edi
c0018f4b:	55                   	push   ebp
c0018f4c:	e8 b5 f7 ff ff       	call   c0018706 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018f51:	83 c4 10             	add    esp,0x10
c0018f54:	66 40                	inc    ax
c0018f56:	74 0c                	je     c0018f64 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0018f58:	53                   	push   ebx
c0018f59:	56                   	push   esi
c0018f5a:	57                   	push   edi
c0018f5b:	55                   	push   ebp
c0018f5c:	e8 31 fe ff ff       	call   c0018d92 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018f61:	83 c4 10             	add    esp,0x10
c0018f64:	43                   	inc    ebx
c0018f65:	83 fb 08             	cmp    ebx,0x8
c0018f68:	75 de                	jne    c0018f48 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0018f6a:	83 c4 0c             	add    esp,0xc
c0018f6d:	5b                   	pop    ebx
c0018f6e:	5e                   	pop    esi
c0018f6f:	5f                   	pop    edi
c0018f70:	5d                   	pop    ebp
c0018f71:	c3                   	ret    

c0018f72 <PCI::detect()>:
c0018f72:	56                   	push   esi
c0018f73:	53                   	push   ebx
c0018f74:	53                   	push   ebx
c0018f75:	31 db                	xor    ebx,ebx
c0018f77:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018f7b:	6a 00                	push   0x0
c0018f7d:	6a 00                	push   0x0
c0018f7f:	6a 00                	push   0x0
c0018f81:	56                   	push   esi
c0018f82:	e8 a3 f7 ff ff       	call   c001872a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018f87:	83 c4 10             	add    esp,0x10
c0018f8a:	a8 80                	test   al,0x80
c0018f8c:	75 21                	jne    c0018faf <PCI::detect()+0x3d>
c0018f8e:	51                   	push   ecx
c0018f8f:	51                   	push   ecx
c0018f90:	6a 00                	push   0x0
c0018f92:	56                   	push   esi
c0018f93:	e8 62 fc ff ff       	call   c0018bfa <PCI::checkBus(unsigned char)>
c0018f98:	83 c4 10             	add    esp,0x10
c0018f9b:	eb 24                	jmp    c0018fc1 <PCI::detect()+0x4f>
c0018f9d:	52                   	push   edx
c0018f9e:	52                   	push   edx
c0018f9f:	53                   	push   ebx
c0018fa0:	43                   	inc    ebx
c0018fa1:	56                   	push   esi
c0018fa2:	e8 53 fc ff ff       	call   c0018bfa <PCI::checkBus(unsigned char)>
c0018fa7:	83 c4 10             	add    esp,0x10
c0018faa:	83 fb 08             	cmp    ebx,0x8
c0018fad:	74 12                	je     c0018fc1 <PCI::detect()+0x4f>
c0018faf:	53                   	push   ebx
c0018fb0:	6a 00                	push   0x0
c0018fb2:	6a 00                	push   0x0
c0018fb4:	56                   	push   esi
c0018fb5:	e8 4c f7 ff ff       	call   c0018706 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018fba:	83 c4 10             	add    esp,0x10
c0018fbd:	66 40                	inc    ax
c0018fbf:	74 dc                	je     c0018f9d <PCI::detect()+0x2b>
c0018fc1:	58                   	pop    eax
c0018fc2:	5b                   	pop    ebx
c0018fc3:	5e                   	pop    esi
c0018fc4:	c3                   	ret    
c0018fc5:	90                   	nop

c0018fc6 <IDE::close(int, int, void*)>:
c0018fc6:	83 c8 ff             	or     eax,0xffffffff
c0018fc9:	c3                   	ret    

c0018fca <IDE::IDE()>:
c0018fca:	83 ec 0c             	sub    esp,0xc
c0018fcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018fd1:	83 ec 08             	sub    esp,0x8
c0018fd4:	68 70 f3 01 c0       	push   0xc001f370
c0018fd9:	50                   	push   eax
c0018fda:	e8 25 2d ff ff       	call   c000bd04 <HardDiskController::HardDiskController(char const*)>
c0018fdf:	83 c4 10             	add    esp,0x10
c0018fe2:	ba 00 f4 01 c0       	mov    edx,0xc001f400
c0018fe7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018feb:	89 10                	mov    DWORD PTR [eax],edx
c0018fed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ff1:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018ff8:	90                   	nop
c0018ff9:	83 c4 0c             	add    esp,0xc
c0018ffc:	c3                   	ret    
c0018ffd:	90                   	nop

c0018ffe <IDE::prepareInterrupt(unsigned char)>:
c0018ffe:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019003:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019007:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001900f:	c3                   	ret    

c0019010 <selectDrive(unsigned char, unsigned char)>:
c0019010:	c3                   	ret    
c0019011:	90                   	nop

c0019012 <IDE::getBase(unsigned char)>:
c0019012:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0019017:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001901b:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0019023:	c3                   	ret    

c0019024 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0019024:	55                   	push   ebp
c0019025:	57                   	push   edi
c0019026:	56                   	push   esi
c0019027:	53                   	push   ebx
c0019028:	83 ec 1c             	sub    esp,0x1c
c001902b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001902f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019033:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0019036:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001903a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001903e:	80 f9 03             	cmp    cl,0x3
c0019041:	77 51                	ja     c0019094 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0019043:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019047:	0f b6 f2             	movzx  esi,dl
c001904a:	0f b6 db             	movzx  ebx,bl
c001904d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0019050:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0019054:	83 ca 80             	or     edx,0xffffff80
c0019057:	0f b6 d2             	movzx  edx,dl
c001905a:	52                   	push   edx
c001905b:	6a 0c                	push   0xc
c001905d:	56                   	push   esi
c001905e:	57                   	push   edi
c001905f:	e8 c0 ff ff ff       	call   c0019024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019064:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0019069:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001906d:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0019071:	ee                   	out    dx,al
c0019072:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0019077:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001907b:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001907f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019083:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001908b:	83 c4 2c             	add    esp,0x2c
c001908e:	5b                   	pop    ebx
c001908f:	5e                   	pop    esi
c0019090:	5f                   	pop    edi
c0019091:	5d                   	pop    ebp
c0019092:	eb 90                	jmp    c0019024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019094:	80 fb 07             	cmp    bl,0x7
c0019097:	77 12                	ja     c00190ab <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0019099:	0f b6 d2             	movzx  edx,dl
c001909c:	0f b6 db             	movzx  ebx,bl
c001909f:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c00190a7:	89 da                	mov    edx,ebx
c00190a9:	eb 2f                	jmp    c00190da <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00190ab:	80 fb 0d             	cmp    bl,0xd
c00190ae:	77 13                	ja     c00190c3 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c00190b0:	0f b6 d2             	movzx  edx,dl
c00190b3:	0f b6 db             	movzx  ebx,bl
c00190b6:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c00190bd:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c00190c1:	eb 17                	jmp    c00190da <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00190c3:	80 fb 15             	cmp    bl,0x15
c00190c6:	77 13                	ja     c00190db <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c00190c8:	0f b6 d2             	movzx  edx,dl
c00190cb:	0f b6 db             	movzx  ebx,bl
c00190ce:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c00190d6:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c00190da:	ee                   	out    dx,al
c00190db:	83 c4 1c             	add    esp,0x1c
c00190de:	5b                   	pop    ebx
c00190df:	5e                   	pop    esi
c00190e0:	5f                   	pop    edi
c00190e1:	5d                   	pop    ebp
c00190e2:	c3                   	ret    
c00190e3:	90                   	nop

c00190e4 <IDE::read(unsigned char, unsigned char)>:
c00190e4:	55                   	push   ebp
c00190e5:	57                   	push   edi
c00190e6:	56                   	push   esi
c00190e7:	53                   	push   ebx
c00190e8:	83 ec 1c             	sub    esp,0x1c
c00190eb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00190ef:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00190f3:	8d 43 f8             	lea    eax,[ebx-0x8]
c00190f6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00190fa:	3c 03                	cmp    al,0x3
c00190fc:	77 43                	ja     c0019141 <IDE::read(unsigned char, unsigned char)+0x5d>
c00190fe:	0f b6 f2             	movzx  esi,dl
c0019101:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0019104:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0019108:	83 c8 80             	or     eax,0xffffff80
c001910b:	0f b6 c0             	movzx  eax,al
c001910e:	50                   	push   eax
c001910f:	6a 0c                	push   0xc
c0019111:	56                   	push   esi
c0019112:	57                   	push   edi
c0019113:	e8 0c ff ff ff       	call   c0019024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019118:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001911d:	0f b6 c3             	movzx  eax,bl
c0019120:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0019124:	ec                   	in     al,dx
c0019125:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0019129:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001912e:	52                   	push   edx
c001912f:	6a 0c                	push   0xc
c0019131:	56                   	push   esi
c0019132:	57                   	push   edi
c0019133:	e8 ec fe ff ff       	call   c0019024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019138:	83 c4 20             	add    esp,0x20
c001913b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001913f:	eb 49                	jmp    c001918a <IDE::read(unsigned char, unsigned char)+0xa6>
c0019141:	80 fb 07             	cmp    bl,0x7
c0019144:	77 12                	ja     c0019158 <IDE::read(unsigned char, unsigned char)+0x74>
c0019146:	0f b6 d2             	movzx  edx,dl
c0019149:	0f b6 c3             	movzx  eax,bl
c001914c:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0019154:	89 c2                	mov    edx,eax
c0019156:	eb 31                	jmp    c0019189 <IDE::read(unsigned char, unsigned char)+0xa5>
c0019158:	80 fb 0d             	cmp    bl,0xd
c001915b:	77 13                	ja     c0019170 <IDE::read(unsigned char, unsigned char)+0x8c>
c001915d:	0f b6 d2             	movzx  edx,dl
c0019160:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0019167:	0f b6 d3             	movzx  edx,bl
c001916a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001916e:	eb 19                	jmp    c0019189 <IDE::read(unsigned char, unsigned char)+0xa5>
c0019170:	31 c0                	xor    eax,eax
c0019172:	80 fb 15             	cmp    bl,0x15
c0019175:	77 13                	ja     c001918a <IDE::read(unsigned char, unsigned char)+0xa6>
c0019177:	0f b6 d2             	movzx  edx,dl
c001917a:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0019182:	0f b6 d3             	movzx  edx,bl
c0019185:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0019189:	ec                   	in     al,dx
c001918a:	83 c4 1c             	add    esp,0x1c
c001918d:	5b                   	pop    ebx
c001918e:	5e                   	pop    esi
c001918f:	5f                   	pop    edi
c0019190:	5d                   	pop    ebp
c0019191:	c3                   	ret    

c0019192 <IDE::waitInterrupt(unsigned char)>:
c0019192:	57                   	push   edi
c0019193:	56                   	push   esi
c0019194:	31 f6                	xor    esi,esi
c0019196:	53                   	push   ebx
c0019197:	83 ec 10             	sub    esp,0x10
c001919a:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001919e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00191a2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00191a6:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00191ab:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c00191b2:	84 db                	test   bl,bl
c00191b4:	75 33                	jne    c00191e9 <IDE::waitInterrupt(unsigned char)+0x57>
c00191b6:	52                   	push   edx
c00191b7:	6a 0c                	push   0xc
c00191b9:	50                   	push   eax
c00191ba:	57                   	push   edi
c00191bb:	e8 24 ff ff ff       	call   c00190e4 <IDE::read(unsigned char, unsigned char)>
c00191c0:	83 c4 10             	add    esp,0x10
c00191c3:	a8 01                	test   al,0x1
c00191c5:	75 2a                	jne    c00191f1 <IDE::waitInterrupt(unsigned char)+0x5f>
c00191c7:	f7 c6 04 00 00 00    	test   esi,0x4
c00191cd:	75 12                	jne    c00191e1 <IDE::waitInterrupt(unsigned char)+0x4f>
c00191cf:	83 fe 32             	cmp    esi,0x32
c00191d2:	7e 0d                	jle    c00191e1 <IDE::waitInterrupt(unsigned char)+0x4f>
c00191d4:	83 ec 0c             	sub    esp,0xc
c00191d7:	6a 64                	push   0x64
c00191d9:	e8 1a a9 ff ff       	call   c0013af8 <milliTenthSleep(unsigned int)>
c00191de:	83 c4 10             	add    esp,0x10
c00191e1:	83 fe 3c             	cmp    esi,0x3c
c00191e4:	74 0b                	je     c00191f1 <IDE::waitInterrupt(unsigned char)+0x5f>
c00191e6:	46                   	inc    esi
c00191e7:	eb bd                	jmp    c00191a6 <IDE::waitInterrupt(unsigned char)+0x14>
c00191e9:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c00191f1:	83 c4 10             	add    esp,0x10
c00191f4:	88 d8                	mov    al,bl
c00191f6:	5b                   	pop    ebx
c00191f7:	5e                   	pop    esi
c00191f8:	5f                   	pop    edi
c00191f9:	c3                   	ret    

c00191fa <ideChannel0IRQHandler(regs*, void*)>:
c00191fa:	83 ec 10             	sub    esp,0x10
c00191fd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019201:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0019208:	6a 07                	push   0x7
c001920a:	6a 00                	push   0x0
c001920c:	50                   	push   eax
c001920d:	e8 d2 fe ff ff       	call   c00190e4 <IDE::read(unsigned char, unsigned char)>
c0019212:	83 c4 1c             	add    esp,0x1c
c0019215:	c3                   	ret    

c0019216 <ideChannel1IRQHandler(regs*, void*)>:
c0019216:	83 ec 10             	sub    esp,0x10
c0019219:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001921d:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0019224:	6a 07                	push   0x7
c0019226:	6a 01                	push   0x1
c0019228:	50                   	push   eax
c0019229:	e8 b6 fe ff ff       	call   c00190e4 <IDE::read(unsigned char, unsigned char)>
c001922e:	83 c4 1c             	add    esp,0x1c
c0019231:	c3                   	ret    

c0019232 <IDE::enableIRQs(unsigned char, bool)>:
c0019232:	57                   	push   edi
c0019233:	56                   	push   esi
c0019234:	be 04 00 00 00       	mov    esi,0x4
c0019239:	53                   	push   ebx
c001923a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001923f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019243:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0019248:	0f 94 c0             	sete   al
c001924b:	01 c0                	add    eax,eax
c001924d:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0019254:	0f b6 c0             	movzx  eax,al
c0019257:	50                   	push   eax
c0019258:	6a 0c                	push   0xc
c001925a:	57                   	push   edi
c001925b:	53                   	push   ebx
c001925c:	e8 c3 fd ff ff       	call   c0019024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019261:	83 c4 10             	add    esp,0x10
c0019264:	50                   	push   eax
c0019265:	6a 0c                	push   0xc
c0019267:	57                   	push   edi
c0019268:	53                   	push   ebx
c0019269:	e8 76 fe ff ff       	call   c00190e4 <IDE::read(unsigned char, unsigned char)>
c001926e:	83 c4 10             	add    esp,0x10
c0019271:	4e                   	dec    esi
c0019272:	75 f0                	jne    c0019264 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0019274:	5b                   	pop    ebx
c0019275:	5e                   	pop    esi
c0019276:	5f                   	pop    edi
c0019277:	c3                   	ret    

c0019278 <IDE::open(int, int, void*)>:
c0019278:	55                   	push   ebp
c0019279:	57                   	push   edi
c001927a:	56                   	push   esi
c001927b:	53                   	push   ebx
c001927c:	83 ec 1c             	sub    esp,0x1c
c001927f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019283:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001928c:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0019295:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001929c:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00192a3:	0f 85 b0 02 00 00    	jne    c0019559 <IDE::open(int, int, void*)+0x2e1>
c00192a9:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00192af:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00192b3:	83 e0 7f             	and    eax,0x7f
c00192b6:	3c 05                	cmp    al,0x5
c00192b8:	74 04                	je     c00192be <IDE::open(int, int, void*)+0x46>
c00192ba:	3c 0f                	cmp    al,0xf
c00192bc:	75 32                	jne    c00192f0 <IDE::open(int, int, void*)+0x78>
c00192be:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00192c4:	83 e0 fc             	and    eax,0xfffffffc
c00192c7:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00192ce:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c00192d4:	83 e0 fc             	and    eax,0xfffffffc
c00192d7:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00192de:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00192e4:	83 e0 fc             	and    eax,0xfffffffc
c00192e7:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00192ee:	eb 14                	jmp    c0019304 <IDE::open(int, int, void*)+0x8c>
c00192f0:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00192fa:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0019304:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001930b:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0019312:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019316:	89 c6                	mov    esi,eax
c0019318:	bf f8 0c 00 00       	mov    edi,0xcf8
c001931d:	c1 e6 10             	shl    esi,0x10
c0019320:	89 e8                	mov    eax,ebp
c0019322:	89 fa                	mov    edx,edi
c0019324:	c1 e0 0b             	shl    eax,0xb
c0019327:	09 f0                	or     eax,esi
c0019329:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0019330:	c1 e6 08             	shl    esi,0x8
c0019333:	09 c6                	or     esi,eax
c0019335:	89 f0                	mov    eax,esi
c0019337:	0d 08 00 00 80       	or     eax,0x80000008
c001933c:	ef                   	out    dx,eax
c001933d:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0019342:	89 ca                	mov    edx,ecx
c0019344:	ed                   	in     eax,dx
c0019345:	c1 e8 10             	shr    eax,0x10
c0019348:	3d ff ff 00 00       	cmp    eax,0xffff
c001934d:	0f 84 f5 00 00 00    	je     c0019448 <IDE::open(int, int, void*)+0x1d0>
c0019353:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0019359:	89 fa                	mov    edx,edi
c001935b:	89 f0                	mov    eax,esi
c001935d:	ef                   	out    dx,eax
c001935e:	b0 fe                	mov    al,0xfe
c0019360:	89 ca                	mov    edx,ecx
c0019362:	ee                   	out    dx,al
c0019363:	89 f0                	mov    eax,esi
c0019365:	89 fa                	mov    edx,edi
c0019367:	ef                   	out    dx,eax
c0019368:	89 ca                	mov    edx,ecx
c001936a:	ed                   	in     eax,dx
c001936b:	3c fe                	cmp    al,0xfe
c001936d:	0f 85 a9 00 00 00    	jne    c001941c <IDE::open(int, int, void*)+0x1a4>
c0019373:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c0019379:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c0019380:	74 33                	je     c00193b5 <IDE::open(int, int, void*)+0x13d>
c0019382:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0019388:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001938c:	40                   	inc    eax
c001938d:	83 ec 0c             	sub    esp,0xc
c0019390:	0f b6 c0             	movzx  eax,al
c0019393:	50                   	push   eax
c0019394:	55                   	push   ebp
c0019395:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019399:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001939f:	51                   	push   ecx
c00193a0:	e8 77 53 ff ff       	call   c000e71c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00193a5:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00193aa:	83 c4 1c             	add    esp,0x1c
c00193ad:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00193b3:	eb 0a                	jmp    c00193bf <IDE::open(int, int, void*)+0x147>
c00193b5:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00193bf:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00193c6:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00193cd:	c1 e1 10             	shl    ecx,0x10
c00193d0:	c1 e0 08             	shl    eax,0x8
c00193d3:	bf f8 0c 00 00       	mov    edi,0xcf8
c00193d8:	09 c1                	or     ecx,eax
c00193da:	89 fa                	mov    edx,edi
c00193dc:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00193e3:	c1 e0 0b             	shl    eax,0xb
c00193e6:	09 c1                	or     ecx,eax
c00193e8:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00193ee:	89 c8                	mov    eax,ecx
c00193f0:	ef                   	out    dx,eax
c00193f1:	be fc 0c 00 00       	mov    esi,0xcfc
c00193f6:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00193fc:	89 f2                	mov    edx,esi
c00193fe:	ee                   	out    dx,al
c00193ff:	89 c8                	mov    eax,ecx
c0019401:	89 fa                	mov    edx,edi
c0019403:	ef                   	out    dx,eax
c0019404:	89 f2                	mov    edx,esi
c0019406:	ed                   	in     eax,dx
c0019407:	0f b6 c0             	movzx  eax,al
c001940a:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0019410:	74 46                	je     c0019458 <IDE::open(int, int, void*)+0x1e0>
c0019412:	83 ec 0c             	sub    esp,0xc
c0019415:	68 88 f3 01 c0       	push   0xc001f388
c001941a:	eb 34                	jmp    c0019450 <IDE::open(int, int, void*)+0x1d8>
c001941c:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0019425:	75 17                	jne    c001943e <IDE::open(int, int, void*)+0x1c6>
c0019427:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001942c:	74 07                	je     c0019435 <IDE::open(int, int, void*)+0x1bd>
c001942e:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0019433:	75 09                	jne    c001943e <IDE::open(int, int, void*)+0x1c6>
c0019435:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001943c:	eb 1a                	jmp    c0019458 <IDE::open(int, int, void*)+0x1e0>
c001943e:	83 ec 0c             	sub    esp,0xc
c0019441:	68 90 f3 01 c0       	push   0xc001f390
c0019446:	eb 08                	jmp    c0019450 <IDE::open(int, int, void*)+0x1d8>
c0019448:	83 ec 0c             	sub    esp,0xc
c001944b:	68 c1 f3 01 c0       	push   0xc001f3c1
c0019450:	e8 ae 6d ff ff       	call   c0010203 <KePanic(char const*)>
c0019455:	83 c4 10             	add    esp,0x10
c0019458:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001945f:	79 1a                	jns    c001947b <IDE::open(int, int, void*)+0x203>
c0019461:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0019467:	83 e0 fc             	and    eax,0xfffffffc
c001946a:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0019471:	83 c0 08             	add    eax,0x8
c0019474:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001947b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019481:	89 c2                	mov    edx,eax
c0019483:	83 e2 0f             	and    edx,0xf
c0019486:	66 83 fa 08          	cmp    dx,0x8
c001948a:	75 0a                	jne    c0019496 <IDE::open(int, int, void*)+0x21e>
c001948c:	83 e8 02             	sub    eax,0x2
c001948f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019496:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001949c:	89 c2                	mov    edx,eax
c001949e:	83 e2 0f             	and    edx,0xf
c00194a1:	66 83 fa 08          	cmp    dx,0x8
c00194a5:	75 0a                	jne    c00194b1 <IDE::open(int, int, void*)+0x239>
c00194a7:	83 e8 02             	sub    eax,0x2
c00194aa:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00194b1:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00194b8:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00194bf:	89 d0                	mov    eax,edx
c00194c1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00194c4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00194c8:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00194cc:	8d 4a 01             	lea    ecx,[edx+0x1]
c00194cf:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00194d4:	0f b6 c9             	movzx  ecx,cl
c00194d7:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00194de:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00194e1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00194e5:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00194e9:	8d 50 02             	lea    edx,[eax+0x2]
c00194ec:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00194f1:	0f b6 d2             	movzx  edx,dl
c00194f4:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00194fa:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00194fd:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019501:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0019505:	8d 48 03             	lea    ecx,[eax+0x3]
c0019508:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001950d:	0f b6 c9             	movzx  ecx,cl
c0019510:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0019516:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0019519:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001951d:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0019521:	8d 50 04             	lea    edx,[eax+0x4]
c0019524:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001952a:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001952f:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0019536:	66 85 f6             	test   si,si
c0019539:	74 5b                	je     c0019596 <IDE::open(int, int, void*)+0x31e>
c001953b:	0f b6 d2             	movzx  edx,dl
c001953e:	83 c0 05             	add    eax,0x5
c0019541:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019544:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019548:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001954c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019552:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019557:	eb 3d                	jmp    c0019596 <IDE::open(int, int, void*)+0x31e>
c0019559:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001955f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0019566:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001956d:	66 05 06 02          	add    ax,0x206
c0019571:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019578:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001957f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0019586:	66 05 06 02          	add    ax,0x206
c001958a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0019591:	e9 e5 fe ff ff       	jmp    c001947b <IDE::open(int, int, void*)+0x203>
c0019596:	50                   	push   eax
c0019597:	50                   	push   eax
c0019598:	6a 00                	push   0x0
c001959a:	53                   	push   ebx
c001959b:	e8 5e fa ff ff       	call   c0018ffe <IDE::prepareInterrupt(unsigned char)>
c00195a0:	5a                   	pop    edx
c00195a1:	59                   	pop    ecx
c00195a2:	6a 01                	push   0x1
c00195a4:	53                   	push   ebx
c00195a5:	e8 54 fa ff ff       	call   c0018ffe <IDE::prepareInterrupt(unsigned char)>
c00195aa:	83 c4 0c             	add    esp,0xc
c00195ad:	6a 00                	push   0x0
c00195af:	6a 00                	push   0x0
c00195b1:	53                   	push   ebx
c00195b2:	e8 7b fc ff ff       	call   c0019232 <IDE::enableIRQs(unsigned char, bool)>
c00195b7:	83 c4 0c             	add    esp,0xc
c00195ba:	6a 00                	push   0x0
c00195bc:	6a 01                	push   0x1
c00195be:	53                   	push   ebx
c00195bf:	e8 6e fc ff ff       	call   c0019232 <IDE::enableIRQs(unsigned char, bool)>
c00195c4:	83 c4 10             	add    esp,0x10
c00195c7:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00195ce:	74 34                	je     c0019604 <IDE::open(int, int, void*)+0x38c>
c00195d0:	83 ec 0c             	sub    esp,0xc
c00195d3:	53                   	push   ebx
c00195d4:	6a 01                	push   0x1
c00195d6:	68 fa 91 01 c0       	push   0xc00191fa
c00195db:	6a 0e                	push   0xe
c00195dd:	53                   	push   ebx
c00195de:	e8 89 23 ff ff       	call   c000b96c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00195e3:	83 c4 14             	add    esp,0x14
c00195e6:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00195ec:	53                   	push   ebx
c00195ed:	6a 01                	push   0x1
c00195ef:	68 16 92 01 c0       	push   0xc0019216
c00195f4:	6a 0f                	push   0xf
c00195f6:	53                   	push   ebx
c00195f7:	e8 70 23 ff ff       	call   c000b96c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00195fc:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0019602:	eb 38                	jmp    c001963c <IDE::open(int, int, void*)+0x3c4>
c0019604:	83 ec 0c             	sub    esp,0xc
c0019607:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0019611:	53                   	push   ebx
c0019612:	6a 00                	push   0x0
c0019614:	68 fa 91 01 c0       	push   0xc00191fa
c0019619:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001961f:	53                   	push   ebx
c0019620:	e8 47 23 ff ff       	call   c000b96c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019625:	83 c4 14             	add    esp,0x14
c0019628:	53                   	push   ebx
c0019629:	6a 00                	push   0x0
c001962b:	68 16 92 01 c0       	push   0xc0019216
c0019630:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0019636:	53                   	push   ebx
c0019637:	e8 30 23 ff ff       	call   c000b96c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001963c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001963e:	83 c4 20             	add    esp,0x20
c0019641:	83 ec 0c             	sub    esp,0xc
c0019644:	53                   	push   ebx
c0019645:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0019648:	83 c4 0c             	add    esp,0xc
c001964b:	6a 07                	push   0x7
c001964d:	6a 00                	push   0x0
c001964f:	53                   	push   ebx
c0019650:	e8 8f fa ff ff       	call   c00190e4 <IDE::read(unsigned char, unsigned char)>
c0019655:	83 c4 0c             	add    esp,0xc
c0019658:	6a 07                	push   0x7
c001965a:	6a 01                	push   0x1
c001965c:	53                   	push   ebx
c001965d:	e8 82 fa ff ff       	call   c00190e4 <IDE::read(unsigned char, unsigned char)>
c0019662:	83 c4 0c             	add    esp,0xc
c0019665:	6a 01                	push   0x1
c0019667:	6a 00                	push   0x0
c0019669:	53                   	push   ebx
c001966a:	e8 c3 fb ff ff       	call   c0019232 <IDE::enableIRQs(unsigned char, bool)>
c001966f:	83 c4 0c             	add    esp,0xc
c0019672:	6a 01                	push   0x1
c0019674:	6a 01                	push   0x1
c0019676:	53                   	push   ebx
c0019677:	e8 b6 fb ff ff       	call   c0019232 <IDE::enableIRQs(unsigned char, bool)>
c001967c:	83 c4 2c             	add    esp,0x2c
c001967f:	31 c0                	xor    eax,eax
c0019681:	5b                   	pop    ebx
c0019682:	5e                   	pop    esi
c0019683:	5f                   	pop    edi
c0019684:	5d                   	pop    ebp
c0019685:	c3                   	ret    

c0019686 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0019686:	55                   	push   ebp
c0019687:	57                   	push   edi
c0019688:	56                   	push   esi
c0019689:	53                   	push   ebx
c001968a:	83 ec 1c             	sub    esp,0x1c
c001968d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019691:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019695:	8d 50 f8             	lea    edx,[eax-0x8]
c0019698:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001969c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00196a0:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00196a4:	80 fa 03             	cmp    dl,0x3
c00196a7:	77 5d                	ja     c0019706 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00196a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00196ad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00196b1:	0f b6 db             	movzx  ebx,bl
c00196b4:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00196b7:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00196bb:	83 ca 80             	or     edx,0xffffff80
c00196be:	0f b6 d2             	movzx  edx,dl
c00196c1:	52                   	push   edx
c00196c2:	6a 0c                	push   0xc
c00196c4:	53                   	push   ebx
c00196c5:	56                   	push   esi
c00196c6:	e8 59 f9 ff ff       	call   c0019024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00196cb:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00196d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00196d4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00196d8:	0f b6 c0             	movzx  eax,al
c00196db:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00196df:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00196e1:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00196e6:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00196ea:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00196ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00196f2:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00196fa:	83 c4 2c             	add    esp,0x2c
c00196fd:	5b                   	pop    ebx
c00196fe:	5e                   	pop    esi
c00196ff:	5f                   	pop    edi
c0019700:	5d                   	pop    ebp
c0019701:	e9 1e f9 ff ff       	jmp    c0019024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019706:	3c 07                	cmp    al,0x7
c0019708:	77 10                	ja     c001971a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001970a:	0f b6 db             	movzx  ebx,bl
c001970d:	0f b6 d0             	movzx  edx,al
c0019710:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0019718:	eb 2d                	jmp    c0019747 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001971a:	3c 0d                	cmp    al,0xd
c001971c:	77 13                	ja     c0019731 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001971e:	0f b6 db             	movzx  ebx,bl
c0019721:	0f b6 c0             	movzx  eax,al
c0019724:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001972b:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001972f:	eb 16                	jmp    c0019747 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0019731:	3c 15                	cmp    al,0x15
c0019733:	77 14                	ja     c0019749 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0019735:	0f b6 db             	movzx  ebx,bl
c0019738:	0f b6 c0             	movzx  eax,al
c001973b:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0019743:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0019747:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0019749:	83 c4 1c             	add    esp,0x1c
c001974c:	5b                   	pop    ebx
c001974d:	5e                   	pop    esi
c001974e:	5f                   	pop    edi
c001974f:	5d                   	pop    ebp
c0019750:	c3                   	ret    
c0019751:	90                   	nop

c0019752 <IDE::detect()>:
c0019752:	55                   	push   ebp
c0019753:	57                   	push   edi
c0019754:	56                   	push   esi
c0019755:	53                   	push   ebx
c0019756:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001975c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0019763:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001976a:	0f 85 97 02 00 00    	jne    c0019a07 <IDE::detect()+0x2b5>
c0019770:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0019777:	31 f6                	xor    esi,esi
c0019779:	31 ed                	xor    ebp,ebp
c001977b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0019783:	89 e8                	mov    eax,ebp
c0019785:	c1 e0 06             	shl    eax,0x6
c0019788:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0019790:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019794:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019798:	c1 e0 04             	shl    eax,0x4
c001979b:	83 c8 a0             	or     eax,0xffffffa0
c001979e:	0f b6 c0             	movzx  eax,al
c00197a1:	50                   	push   eax
c00197a2:	6a 06                	push   0x6
c00197a4:	56                   	push   esi
c00197a5:	53                   	push   ebx
c00197a6:	e8 79 f8 ff ff       	call   c0019024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00197ab:	83 c4 0c             	add    esp,0xc
c00197ae:	6a 0c                	push   0xc
c00197b0:	56                   	push   esi
c00197b1:	53                   	push   ebx
c00197b2:	e8 2d f9 ff ff       	call   c00190e4 <IDE::read(unsigned char, unsigned char)>
c00197b7:	83 c4 0c             	add    esp,0xc
c00197ba:	6a 0c                	push   0xc
c00197bc:	56                   	push   esi
c00197bd:	53                   	push   ebx
c00197be:	e8 21 f9 ff ff       	call   c00190e4 <IDE::read(unsigned char, unsigned char)>
c00197c3:	83 c4 0c             	add    esp,0xc
c00197c6:	6a 0c                	push   0xc
c00197c8:	56                   	push   esi
c00197c9:	53                   	push   ebx
c00197ca:	e8 15 f9 ff ff       	call   c00190e4 <IDE::read(unsigned char, unsigned char)>
c00197cf:	83 c4 0c             	add    esp,0xc
c00197d2:	6a 0c                	push   0xc
c00197d4:	56                   	push   esi
c00197d5:	53                   	push   ebx
c00197d6:	e8 09 f9 ff ff       	call   c00190e4 <IDE::read(unsigned char, unsigned char)>
c00197db:	68 ec 00 00 00       	push   0xec
c00197e0:	6a 07                	push   0x7
c00197e2:	56                   	push   esi
c00197e3:	53                   	push   ebx
c00197e4:	e8 3b f8 ff ff       	call   c0019024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00197e9:	83 c4 1c             	add    esp,0x1c
c00197ec:	6a 0c                	push   0xc
c00197ee:	56                   	push   esi
c00197ef:	53                   	push   ebx
c00197f0:	e8 ef f8 ff ff       	call   c00190e4 <IDE::read(unsigned char, unsigned char)>
c00197f5:	83 c4 0c             	add    esp,0xc
c00197f8:	6a 0c                	push   0xc
c00197fa:	56                   	push   esi
c00197fb:	53                   	push   ebx
c00197fc:	e8 e3 f8 ff ff       	call   c00190e4 <IDE::read(unsigned char, unsigned char)>
c0019801:	83 c4 0c             	add    esp,0xc
c0019804:	6a 0c                	push   0xc
c0019806:	56                   	push   esi
c0019807:	53                   	push   ebx
c0019808:	e8 d7 f8 ff ff       	call   c00190e4 <IDE::read(unsigned char, unsigned char)>
c001980d:	83 c4 0c             	add    esp,0xc
c0019810:	6a 0c                	push   0xc
c0019812:	56                   	push   esi
c0019813:	53                   	push   ebx
c0019814:	e8 cb f8 ff ff       	call   c00190e4 <IDE::read(unsigned char, unsigned char)>
c0019819:	83 c4 0c             	add    esp,0xc
c001981c:	6a 0c                	push   0xc
c001981e:	56                   	push   esi
c001981f:	53                   	push   ebx
c0019820:	e8 bf f8 ff ff       	call   c00190e4 <IDE::read(unsigned char, unsigned char)>
c0019825:	83 c4 10             	add    esp,0x10
c0019828:	84 c0                	test   al,al
c001982a:	0f 84 5f 01 00 00    	je     c001998f <IDE::detect()+0x23d>
c0019830:	31 ff                	xor    edi,edi
c0019832:	50                   	push   eax
c0019833:	6a 0c                	push   0xc
c0019835:	56                   	push   esi
c0019836:	53                   	push   ebx
c0019837:	e8 a8 f8 ff ff       	call   c00190e4 <IDE::read(unsigned char, unsigned char)>
c001983c:	83 c4 10             	add    esp,0x10
c001983f:	a8 01                	test   al,0x1
c0019841:	0f 85 69 01 00 00    	jne    c00199b0 <IDE::detect()+0x25e>
c0019847:	84 c0                	test   al,al
c0019849:	78 04                	js     c001984f <IDE::detect()+0xfd>
c001984b:	a8 08                	test   al,0x8
c001984d:	75 23                	jne    c0019872 <IDE::detect()+0x120>
c001984f:	47                   	inc    edi
c0019850:	81 ff 17 01 00 00    	cmp    edi,0x117
c0019856:	7e da                	jle    c0019832 <IDE::detect()+0xe0>
c0019858:	83 ec 0c             	sub    esp,0xc
c001985b:	6a 32                	push   0x32
c001985d:	e8 96 a2 ff ff       	call   c0013af8 <milliTenthSleep(unsigned int)>
c0019862:	83 c4 10             	add    esp,0x10
c0019865:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001986b:	75 c5                	jne    c0019832 <IDE::detect()+0xe0>
c001986d:	e9 3e 01 00 00       	jmp    c00199b0 <IDE::detect()+0x25e>
c0019872:	31 c9                	xor    ecx,ecx
c0019874:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0019878:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001987c:	83 ec 0c             	sub    esp,0xc
c001987f:	68 80 00 00 00       	push   0x80
c0019884:	57                   	push   edi
c0019885:	6a 00                	push   0x0
c0019887:	56                   	push   esi
c0019888:	53                   	push   ebx
c0019889:	e8 f8 fd ff ff       	call   c0019686 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001988e:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0019893:	89 e8                	mov    eax,ebp
c0019895:	89 d1                	mov    ecx,edx
c0019897:	c1 e0 06             	shl    eax,0x6
c001989a:	01 d8                	add    eax,ebx
c001989c:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00198a3:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00198aa:	89 f2                	mov    edx,esi
c00198ac:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00198b2:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00198b6:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00198bc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00198c0:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00198c7:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00198cf:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00198d6:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00198de:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00198e4:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00198eb:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00198f1:	8d 54 24 58          	lea    edx,[esp+0x58]
c00198f5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00198f9:	83 c4 20             	add    esp,0x20
c00198fc:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00198ff:	83 c0 02             	add    eax,0x2
c0019902:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0019908:	83 c7 02             	add    edi,0x2
c001990b:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001990e:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0019914:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0019918:	75 e2                	jne    c00198fc <IDE::detect()+0x1aa>
c001991a:	89 e8                	mov    eax,ebp
c001991c:	c1 e0 06             	shl    eax,0x6
c001991f:	01 d8                	add    eax,ebx
c0019921:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0019927:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001992e:	66 c1 ea 09          	shr    dx,0x9
c0019932:	83 e2 01             	and    edx,0x1
c0019935:	84 c9                	test   cl,cl
c0019937:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001993d:	75 22                	jne    c0019961 <IDE::detect()+0x20f>
c001993f:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c0019946:	74 46                	je     c001998e <IDE::detect()+0x23c>
c0019948:	83 ec 0c             	sub    esp,0xc
c001994b:	68 7c 01 00 00       	push   0x17c
c0019950:	e8 64 de fe ff       	call   c00077b9 <malloc>
c0019955:	89 c7                	mov    edi,eax
c0019957:	89 04 24             	mov    DWORD PTR [esp],eax
c001995a:	e8 11 05 00 00       	call   c0019e70 <ATA::ATA()>
c001995f:	eb 17                	jmp    c0019978 <IDE::detect()+0x226>
c0019961:	83 ec 0c             	sub    esp,0xc
c0019964:	68 84 01 00 00       	push   0x184
c0019969:	e8 4b de fe ff       	call   c00077b9 <malloc>
c001996e:	89 c7                	mov    edi,eax
c0019970:	89 04 24             	mov    DWORD PTR [esp],eax
c0019973:	e8 f0 0a 00 00       	call   c001a468 <ATAPI::ATAPI()>
c0019978:	5a                   	pop    edx
c0019979:	59                   	pop    ecx
c001997a:	57                   	push   edi
c001997b:	53                   	push   ebx
c001997c:	e8 3f 20 ff ff       	call   c000b9c0 <Device::addChild(Device*)>
c0019981:	8b 07                	mov    eax,DWORD PTR [edi]
c0019983:	53                   	push   ebx
c0019984:	55                   	push   ebp
c0019985:	6a 00                	push   0x0
c0019987:	57                   	push   edi
c0019988:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001998b:	83 c4 20             	add    esp,0x20
c001998e:	45                   	inc    ebp
c001998f:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0019994:	74 0d                	je     c00199a3 <IDE::detect()+0x251>
c0019996:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001999e:	e9 e0 fd ff ff       	jmp    c0019783 <IDE::detect()+0x31>
c00199a3:	4e                   	dec    esi
c00199a4:	74 61                	je     c0019a07 <IDE::detect()+0x2b5>
c00199a6:	be 01 00 00 00       	mov    esi,0x1
c00199ab:	e9 cb fd ff ff       	jmp    c001977b <IDE::detect()+0x29>
c00199b0:	50                   	push   eax
c00199b1:	6a 04                	push   0x4
c00199b3:	56                   	push   esi
c00199b4:	53                   	push   ebx
c00199b5:	e8 2a f7 ff ff       	call   c00190e4 <IDE::read(unsigned char, unsigned char)>
c00199ba:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00199be:	83 c4 0c             	add    esp,0xc
c00199c1:	6a 05                	push   0x5
c00199c3:	56                   	push   esi
c00199c4:	53                   	push   ebx
c00199c5:	e8 1a f7 ff ff       	call   c00190e4 <IDE::read(unsigned char, unsigned char)>
c00199ca:	83 c4 10             	add    esp,0x10
c00199cd:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00199d1:	80 fa 14             	cmp    dl,0x14
c00199d4:	75 04                	jne    c00199da <IDE::detect()+0x288>
c00199d6:	3c eb                	cmp    al,0xeb
c00199d8:	eb 07                	jmp    c00199e1 <IDE::detect()+0x28f>
c00199da:	3c 96                	cmp    al,0x96
c00199dc:	75 b1                	jne    c001998f <IDE::detect()+0x23d>
c00199de:	80 fa 69             	cmp    dl,0x69
c00199e1:	75 ac                	jne    c001998f <IDE::detect()+0x23d>
c00199e3:	68 a1 00 00 00       	push   0xa1
c00199e8:	6a 07                	push   0x7
c00199ea:	56                   	push   esi
c00199eb:	53                   	push   ebx
c00199ec:	e8 33 f6 ff ff       	call   c0019024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00199f1:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c00199f8:	e8 fb a0 ff ff       	call   c0013af8 <milliTenthSleep(unsigned int)>
c00199fd:	83 c4 10             	add    esp,0x10
c0019a00:	b1 01                	mov    cl,0x1
c0019a02:	e9 6d fe ff ff       	jmp    c0019874 <IDE::detect()+0x122>
c0019a07:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019a0d:	5b                   	pop    ebx
c0019a0e:	5e                   	pop    esi
c0019a0f:	5f                   	pop    edi
c0019a10:	5d                   	pop    ebp
c0019a11:	c3                   	ret    

c0019a12 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0019a12:	55                   	push   ebp
c0019a13:	57                   	push   edi
c0019a14:	56                   	push   esi
c0019a15:	53                   	push   ebx
c0019a16:	83 ec 1c             	sub    esp,0x1c
c0019a19:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019a1d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019a21:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019a25:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0019a29:	88 c3                	mov    bl,al
c0019a2b:	84 c0                	test   al,al
c0019a2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a31:	0f 84 81 00 00 00    	je     c0019ab8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019a37:	83 ec 0c             	sub    esp,0xc
c0019a3a:	68 eb f3 01 c0       	push   0xc001f3eb
c0019a3f:	e8 3d 0b ff ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c0019a44:	83 c4 10             	add    esp,0x10
c0019a47:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a4b:	3c 01                	cmp    al,0x1
c0019a4d:	74 63                	je     c0019ab2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0019a4f:	3c 02                	cmp    al,0x2
c0019a51:	75 53                	jne    c0019aa6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0019a53:	01 f6                	add    esi,esi
c0019a55:	09 ee                	or     esi,ebp
c0019a57:	50                   	push   eax
c0019a58:	89 f0                	mov    eax,esi
c0019a5a:	6a 01                	push   0x1
c0019a5c:	0f b6 f0             	movzx  esi,al
c0019a5f:	c1 e6 06             	shl    esi,0x6
c0019a62:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0019a6a:	50                   	push   eax
c0019a6b:	57                   	push   edi
c0019a6c:	e8 73 f6 ff ff       	call   c00190e4 <IDE::read(unsigned char, unsigned char)>
c0019a71:	83 c4 10             	add    esp,0x10
c0019a74:	a8 01                	test   al,0x1
c0019a76:	74 02                	je     c0019a7a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0019a78:	b3 07                	mov    bl,0x7
c0019a7a:	a8 02                	test   al,0x2
c0019a7c:	74 02                	je     c0019a80 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0019a7e:	b3 03                	mov    bl,0x3
c0019a80:	a8 04                	test   al,0x4
c0019a82:	74 02                	je     c0019a86 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0019a84:	b3 14                	mov    bl,0x14
c0019a86:	a8 08                	test   al,0x8
c0019a88:	74 02                	je     c0019a8c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0019a8a:	b3 03                	mov    bl,0x3
c0019a8c:	a8 10                	test   al,0x10
c0019a8e:	74 02                	je     c0019a92 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0019a90:	b3 15                	mov    bl,0x15
c0019a92:	a8 20                	test   al,0x20
c0019a94:	74 02                	je     c0019a98 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0019a96:	b3 03                	mov    bl,0x3
c0019a98:	a8 40                	test   al,0x40
c0019a9a:	74 02                	je     c0019a9e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0019a9c:	b3 16                	mov    bl,0x16
c0019a9e:	84 c0                	test   al,al
c0019aa0:	79 16                	jns    c0019ab8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019aa2:	b3 0d                	mov    bl,0xd
c0019aa4:	eb 12                	jmp    c0019ab8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019aa6:	3c 03                	cmp    al,0x3
c0019aa8:	74 0c                	je     c0019ab6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0019aaa:	3c 04                	cmp    al,0x4
c0019aac:	75 0a                	jne    c0019ab8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019aae:	b3 08                	mov    bl,0x8
c0019ab0:	eb 06                	jmp    c0019ab8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019ab2:	b3 13                	mov    bl,0x13
c0019ab4:	eb 02                	jmp    c0019ab8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019ab6:	b3 17                	mov    bl,0x17
c0019ab8:	83 c4 1c             	add    esp,0x1c
c0019abb:	88 d8                	mov    al,bl
c0019abd:	5b                   	pop    ebx
c0019abe:	5e                   	pop    esi
c0019abf:	5f                   	pop    edi
c0019ac0:	5d                   	pop    ebp
c0019ac1:	c3                   	ret    

c0019ac2 <IDE::polling(unsigned char, unsigned int)>:
c0019ac2:	55                   	push   ebp
c0019ac3:	bd 04 00 00 00       	mov    ebp,0x4
c0019ac8:	57                   	push   edi
c0019ac9:	56                   	push   esi
c0019aca:	53                   	push   ebx
c0019acb:	83 ec 0c             	sub    esp,0xc
c0019ace:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019ad2:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c0019ad6:	0f b6 f3             	movzx  esi,bl
c0019ad9:	52                   	push   edx
c0019ada:	6a 0c                	push   0xc
c0019adc:	56                   	push   esi
c0019add:	57                   	push   edi
c0019ade:	e8 01 f6 ff ff       	call   c00190e4 <IDE::read(unsigned char, unsigned char)>
c0019ae3:	83 c4 10             	add    esp,0x10
c0019ae6:	4d                   	dec    ebp
c0019ae7:	75 ed                	jne    c0019ad6 <IDE::polling(unsigned char, unsigned int)+0x14>
c0019ae9:	bb a0 86 01 00       	mov    ebx,0x186a0
c0019aee:	50                   	push   eax
c0019aef:	6a 0c                	push   0xc
c0019af1:	56                   	push   esi
c0019af2:	57                   	push   edi
c0019af3:	e8 ec f5 ff ff       	call   c00190e4 <IDE::read(unsigned char, unsigned char)>
c0019af8:	83 c4 10             	add    esp,0x10
c0019afb:	a8 01                	test   al,0x1
c0019afd:	75 17                	jne    c0019b16 <IDE::polling(unsigned char, unsigned int)+0x54>
c0019aff:	a8 20                	test   al,0x20
c0019b01:	75 0f                	jne    c0019b12 <IDE::polling(unsigned char, unsigned int)+0x50>
c0019b03:	4b                   	dec    ebx
c0019b04:	74 10                	je     c0019b16 <IDE::polling(unsigned char, unsigned int)+0x54>
c0019b06:	84 c0                	test   al,al
c0019b08:	78 e4                	js     c0019aee <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019b0a:	a8 08                	test   al,0x8
c0019b0c:	74 e0                	je     c0019aee <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019b0e:	31 c0                	xor    eax,eax
c0019b10:	eb 06                	jmp    c0019b18 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019b12:	b0 01                	mov    al,0x1
c0019b14:	eb 02                	jmp    c0019b18 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019b16:	b0 02                	mov    al,0x2
c0019b18:	83 c4 0c             	add    esp,0xc
c0019b1b:	5b                   	pop    ebx
c0019b1c:	5e                   	pop    esi
c0019b1d:	5f                   	pop    edi
c0019b1e:	5d                   	pop    ebp
c0019b1f:	c3                   	ret    

c0019b20 <SATABus::close(int, int, void*)>:
c0019b20:	31 c0                	xor    eax,eax
c0019b22:	c3                   	ret    
c0019b23:	90                   	nop

c0019b24 <SATABus::detect()>:
c0019b24:	c3                   	ret    
c0019b25:	90                   	nop

c0019b26 <SATABus::SATABus()>:
c0019b26:	83 ec 0c             	sub    esp,0xc
c0019b29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b2d:	83 ec 08             	sub    esp,0x8
c0019b30:	68 24 f4 01 c0       	push   0xc001f424
c0019b35:	50                   	push   eax
c0019b36:	e8 c9 21 ff ff       	call   c000bd04 <HardDiskController::HardDiskController(char const*)>
c0019b3b:	83 c4 10             	add    esp,0x10
c0019b3e:	ba 50 f4 01 c0       	mov    edx,0xc001f450
c0019b43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b47:	89 10                	mov    DWORD PTR [eax],edx
c0019b49:	83 ec 0c             	sub    esp,0xc
c0019b4c:	6a 50                	push   0x50
c0019b4e:	e8 00 e0 fe ff       	call   c0007b53 <Phys::allocateContiguousPages(int)>
c0019b53:	83 c4 10             	add    esp,0x10
c0019b56:	89 c2                	mov    edx,eax
c0019b58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b5c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0019b62:	83 ec 0c             	sub    esp,0xc
c0019b65:	6a 50                	push   0x50
c0019b67:	e8 19 f7 fe ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0019b6c:	83 c4 10             	add    esp,0x10
c0019b6f:	89 c2                	mov    edx,eax
c0019b71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b75:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019b7b:	a1 b0 1f 02 c0       	mov    eax,ds:0xc0021fb0
c0019b80:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019b84:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0019b8a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019b8e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0019b94:	83 ec 0c             	sub    esp,0xc
c0019b97:	6a 03                	push   0x3
c0019b99:	6a 50                	push   0x50
c0019b9b:	51                   	push   ecx
c0019b9c:	52                   	push   edx
c0019b9d:	50                   	push   eax
c0019b9e:	e8 4f 00 ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019ba3:	83 c4 20             	add    esp,0x20
c0019ba6:	90                   	nop
c0019ba7:	83 c4 0c             	add    esp,0xc
c0019baa:	c3                   	ret    
c0019bab:	90                   	nop

c0019bac <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0019bac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019bb0:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0019bb3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019bb6:	09 c2                	or     edx,eax
c0019bb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bbc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0019bc2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019bc4:	31 c0                	xor    eax,eax
c0019bc6:	c1 e9 08             	shr    ecx,0x8
c0019bc9:	83 e1 0f             	and    ecx,0xf
c0019bcc:	39 c8                	cmp    eax,ecx
c0019bce:	74 0a                	je     c0019bda <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c0019bd0:	f6 c2 01             	test   dl,0x1
c0019bd3:	74 08                	je     c0019bdd <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0019bd5:	d1 ea                	shr    edx,1
c0019bd7:	40                   	inc    eax
c0019bd8:	eb f2                	jmp    c0019bcc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c0019bda:	83 c8 ff             	or     eax,0xffffffff
c0019bdd:	c3                   	ret    

c0019bde <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0019bde:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019be2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0019be5:	89 c2                	mov    edx,eax
c0019be7:	c1 ea 08             	shr    edx,0x8
c0019bea:	83 e2 0f             	and    edx,0xf
c0019bed:	fe ca                	dec    dl
c0019bef:	75 31                	jne    c0019c22 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019bf1:	83 e0 0f             	and    eax,0xf
c0019bf4:	3c 03                	cmp    al,0x3
c0019bf6:	75 2a                	jne    c0019c22 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019bf8:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0019bfb:	b8 02 00 00 00       	mov    eax,0x2
c0019c00:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0019c06:	74 1c                	je     c0019c24 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019c08:	b8 04 00 00 00       	mov    eax,0x4
c0019c0d:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0019c13:	74 0f                	je     c0019c24 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019c15:	31 c0                	xor    eax,eax
c0019c17:	83 fa 03             	cmp    edx,0x3
c0019c1a:	0f 94 c0             	sete   al
c0019c1d:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0019c21:	c3                   	ret    
c0019c22:	31 c0                	xor    eax,eax
c0019c24:	c3                   	ret    
c0019c25:	90                   	nop

c0019c26 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0019c26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c2a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019c2d:	0f ba e2 0f          	bt     edx,0xf
c0019c31:	72 f7                	jb     c0019c2a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0019c33:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019c36:	83 ca 10             	or     edx,0x10
c0019c39:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019c3c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019c3f:	83 ca 01             	or     edx,0x1
c0019c42:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019c45:	c3                   	ret    

c0019c46 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0019c46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c4a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019c4d:	83 e2 fe             	and    edx,0xfffffffe
c0019c50:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019c53:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019c56:	83 e2 ef             	and    edx,0xffffffef
c0019c59:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019c5c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019c5f:	0f ba e2 0e          	bt     edx,0xe
c0019c63:	72 f7                	jb     c0019c5c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019c65:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019c68:	0f ba e2 0f          	bt     edx,0xf
c0019c6c:	72 ee                	jb     c0019c5c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019c6e:	c3                   	ret    
c0019c6f:	90                   	nop

c0019c70 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0019c70:	55                   	push   ebp
c0019c71:	57                   	push   edi
c0019c72:	56                   	push   esi
c0019c73:	53                   	push   ebx
c0019c74:	83 ec 1c             	sub    esp,0x1c
c0019c77:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019c7b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019c7f:	53                   	push   ebx
c0019c80:	56                   	push   esi
c0019c81:	e8 c0 ff ff ff       	call   c0019c46 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0019c86:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0019c8a:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019c90:	83 ec 0c             	sub    esp,0xc
c0019c93:	c1 e5 0a             	shl    ebp,0xa
c0019c96:	01 e8                	add    eax,ebp
c0019c98:	89 03                	mov    DWORD PTR [ebx],eax
c0019c9a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c9c:	68 00 04 00 00       	push   0x400
c0019ca1:	6a 00                	push   0x0
c0019ca3:	50                   	push   eax
c0019ca4:	e8 27 68 fe ff       	call   c00004d0 <memset>
c0019ca9:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0019caf:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0019cb3:	01 e8                	add    eax,ebp
c0019cb5:	83 c4 1c             	add    esp,0x1c
c0019cb8:	89 03                	mov    DWORD PTR [ebx],eax
c0019cba:	c1 e2 08             	shl    edx,0x8
c0019cbd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019cc4:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c0019cca:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019cd0:	01 f8                	add    eax,edi
c0019cd2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0019cd5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0019cd8:	68 00 01 00 00       	push   0x100
c0019cdd:	6a 00                	push   0x0
c0019cdf:	50                   	push   eax
c0019ce0:	e8 eb 67 fe ff       	call   c00004d0 <memset>
c0019ce5:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c0019ceb:	01 fa                	add    edx,edi
c0019ced:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019cf1:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0019cf4:	c1 e7 0d             	shl    edi,0xd
c0019cf7:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0019cfe:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0019d04:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0019d0a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019d0e:	31 ff                	xor    edi,edi
c0019d10:	83 c4 10             	add    esp,0x10
c0019d13:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0019d19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019d1d:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0019d23:	83 c5 20             	add    ebp,0x20
c0019d26:	01 f8                	add    eax,edi
c0019d28:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019d2b:	52                   	push   edx
c0019d2c:	68 00 01 00 00       	push   0x100
c0019d31:	6a 00                	push   0x0
c0019d33:	50                   	push   eax
c0019d34:	e8 97 67 fe ff       	call   c00004d0 <memset>
c0019d39:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019d3d:	83 c4 10             	add    esp,0x10
c0019d40:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0019d46:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0019d4d:	01 f8                	add    eax,edi
c0019d4f:	81 c7 00 01 00 00    	add    edi,0x100
c0019d55:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019d58:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0019d5e:	75 b3                	jne    c0019d13 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c0019d60:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019d67:	50                   	push   eax
c0019d68:	50                   	push   eax
c0019d69:	53                   	push   ebx
c0019d6a:	56                   	push   esi
c0019d6b:	e8 b6 fe ff ff       	call   c0019c26 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0019d70:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019d77:	83 c4 2c             	add    esp,0x2c
c0019d7a:	5b                   	pop    ebx
c0019d7b:	5e                   	pop    esi
c0019d7c:	5f                   	pop    edi
c0019d7d:	5d                   	pop    ebp
c0019d7e:	c3                   	ret    
c0019d7f:	90                   	nop

c0019d80 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0019d80:	55                   	push   ebp
c0019d81:	57                   	push   edi
c0019d82:	56                   	push   esi
c0019d83:	53                   	push   ebx
c0019d84:	31 db                	xor    ebx,ebx
c0019d86:	83 ec 0c             	sub    esp,0xc
c0019d89:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019d8d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019d91:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0019d94:	f7 c7 01 00 00 00    	test   edi,0x1
c0019d9a:	74 7a                	je     c0019e16 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019d9c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019da0:	89 d8                	mov    eax,ebx
c0019da2:	c1 e0 07             	shl    eax,0x7
c0019da5:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0019dac:	55                   	push   ebp
c0019dad:	56                   	push   esi
c0019dae:	e8 2b fe ff ff       	call   c0019bde <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0019db3:	5a                   	pop    edx
c0019db4:	83 f8 01             	cmp    eax,0x1
c0019db7:	59                   	pop    ecx
c0019db8:	75 21                	jne    c0019ddb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0019dba:	50                   	push   eax
c0019dbb:	53                   	push   ebx
c0019dbc:	55                   	push   ebp
c0019dbd:	56                   	push   esi
c0019dbe:	e8 ad fe ff ff       	call   c0019c70 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019dc3:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0019dca:	e8 ea d9 fe ff       	call   c00077b9 <malloc>
c0019dcf:	89 c5                	mov    ebp,eax
c0019dd1:	89 04 24             	mov    DWORD PTR [esp],eax
c0019dd4:	e8 43 0d 00 00       	call   c001ab1c <SATA::SATA()>
c0019dd9:	eb 24                	jmp    c0019dff <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0019ddb:	83 f8 04             	cmp    eax,0x4
c0019dde:	75 36                	jne    c0019e16 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019de0:	51                   	push   ecx
c0019de1:	53                   	push   ebx
c0019de2:	55                   	push   ebp
c0019de3:	56                   	push   esi
c0019de4:	e8 87 fe ff ff       	call   c0019c70 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019de9:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c0019df0:	e8 c4 d9 fe ff       	call   c00077b9 <malloc>
c0019df5:	89 c5                	mov    ebp,eax
c0019df7:	89 04 24             	mov    DWORD PTR [esp],eax
c0019dfa:	e8 79 10 00 00       	call   c001ae78 <SATAPI::SATAPI()>
c0019dff:	58                   	pop    eax
c0019e00:	5a                   	pop    edx
c0019e01:	55                   	push   ebp
c0019e02:	56                   	push   esi
c0019e03:	e8 b8 1b ff ff       	call   c000b9c0 <Device::addChild(Device*)>
c0019e08:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019e0b:	56                   	push   esi
c0019e0c:	6a 00                	push   0x0
c0019e0e:	53                   	push   ebx
c0019e0f:	55                   	push   ebp
c0019e10:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0019e13:	83 c4 20             	add    esp,0x20
c0019e16:	d1 ef                	shr    edi,1
c0019e18:	43                   	inc    ebx
c0019e19:	83 fb 20             	cmp    ebx,0x20
c0019e1c:	0f 85 72 ff ff ff    	jne    c0019d94 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0019e22:	83 c4 0c             	add    esp,0xc
c0019e25:	5b                   	pop    ebx
c0019e26:	5e                   	pop    esi
c0019e27:	5f                   	pop    edi
c0019e28:	5d                   	pop    ebp
c0019e29:	c3                   	ret    

c0019e2a <SATABus::open(int, int, void*)>:
c0019e2a:	83 ec 14             	sub    esp,0x14
c0019e2d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019e31:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0019e37:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0019e3d:	52                   	push   edx
c0019e3e:	50                   	push   eax
c0019e3f:	e8 3c ff ff ff       	call   c0019d80 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0019e44:	31 c0                	xor    eax,eax
c0019e46:	83 c4 1c             	add    esp,0x1c
c0019e49:	c3                   	ret    

c0019e4a <ATA::close(int, int, void*)>:
c0019e4a:	83 ec 0c             	sub    esp,0xc
c0019e4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e51:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019e57:	85 c0                	test   eax,eax
c0019e59:	74 0c                	je     c0019e67 <ATA::close(int, int, void*)+0x1d>
c0019e5b:	83 ec 0c             	sub    esp,0xc
c0019e5e:	8b 10                	mov    edx,DWORD PTR [eax]
c0019e60:	50                   	push   eax
c0019e61:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019e64:	83 c4 10             	add    esp,0x10
c0019e67:	31 c0                	xor    eax,eax
c0019e69:	83 c4 0c             	add    esp,0xc
c0019e6c:	c3                   	ret    
c0019e6d:	90                   	nop

c0019e6e <ATA::powerSaving(PowerSavingLevel)>:
c0019e6e:	c3                   	ret    
c0019e6f:	90                   	nop

c0019e70 <ATA::ATA()>:
c0019e70:	83 ec 0c             	sub    esp,0xc
c0019e73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e77:	83 ec 04             	sub    esp,0x4
c0019e7a:	68 00 02 00 00       	push   0x200
c0019e7f:	68 1d f5 01 c0       	push   0xc001f51d
c0019e84:	50                   	push   eax
c0019e85:	e8 04 1f ff ff       	call   c000bd8e <PhysicalDisk::PhysicalDisk(char const*, int)>
c0019e8a:	83 c4 10             	add    esp,0x10
c0019e8d:	ba 90 f4 01 c0       	mov    edx,0xc001f490
c0019e92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e96:	89 10                	mov    DWORD PTR [eax],edx
c0019e98:	90                   	nop
c0019e99:	83 c4 0c             	add    esp,0xc
c0019e9c:	c3                   	ret    
c0019e9d:	90                   	nop

c0019e9e <ATA::flush(bool)>:
c0019e9e:	53                   	push   ebx
c0019e9f:	83 ec 08             	sub    esp,0x8
c0019ea2:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0019ea7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019eab:	19 c0                	sbb    eax,eax
c0019ead:	83 e0 fd             	and    eax,0xfffffffd
c0019eb0:	05 ea 00 00 00       	add    eax,0xea
c0019eb5:	50                   	push   eax
c0019eb6:	6a 07                	push   0x7
c0019eb8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019ebf:	50                   	push   eax
c0019ec0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019ec6:	e8 59 f1 ff ff       	call   c0019024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019ecb:	83 c4 0c             	add    esp,0xc
c0019ece:	6a 00                	push   0x0
c0019ed0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019ed7:	50                   	push   eax
c0019ed8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019ede:	e8 df fb ff ff       	call   c0019ac2 <IDE::polling(unsigned char, unsigned int)>
c0019ee3:	83 c4 18             	add    esp,0x18
c0019ee6:	5b                   	pop    ebx
c0019ee7:	c3                   	ret    

c0019ee8 <ATA::readyForCommand()>:
c0019ee8:	56                   	push   esi
c0019ee9:	53                   	push   ebx
c0019eea:	53                   	push   ebx
c0019eeb:	31 db                	xor    ebx,ebx
c0019eed:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019ef1:	51                   	push   ecx
c0019ef2:	6a 0c                	push   0xc
c0019ef4:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019efb:	50                   	push   eax
c0019efc:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0019f02:	e8 dd f1 ff ff       	call   c00190e4 <IDE::read(unsigned char, unsigned char)>
c0019f07:	83 c4 10             	add    esp,0x10
c0019f0a:	a8 88                	test   al,0x88
c0019f0c:	74 1f                	je     c0019f2d <ATA::readyForCommand()+0x45>
c0019f0e:	43                   	inc    ebx
c0019f0f:	83 fb 63             	cmp    ebx,0x63
c0019f12:	7e dd                	jle    c0019ef1 <ATA::readyForCommand()+0x9>
c0019f14:	83 ec 0c             	sub    esp,0xc
c0019f17:	6a 0a                	push   0xa
c0019f19:	e8 da 9b ff ff       	call   c0013af8 <milliTenthSleep(unsigned int)>
c0019f1e:	83 c4 10             	add    esp,0x10
c0019f21:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0019f27:	75 c8                	jne    c0019ef1 <ATA::readyForCommand()+0x9>
c0019f29:	31 c0                	xor    eax,eax
c0019f2b:	eb 02                	jmp    c0019f2f <ATA::readyForCommand()+0x47>
c0019f2d:	b0 01                	mov    al,0x1
c0019f2f:	5a                   	pop    edx
c0019f30:	5b                   	pop    ebx
c0019f31:	5e                   	pop    esi
c0019f32:	c3                   	ret    
c0019f33:	90                   	nop

c0019f34 <ATA::access(unsigned long long, int, void*, bool)>:
c0019f34:	55                   	push   ebp
c0019f35:	57                   	push   edi
c0019f36:	56                   	push   esi
c0019f37:	53                   	push   ebx
c0019f38:	83 ec 2c             	sub    esp,0x2c
c0019f3b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0019f3f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0019f43:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0019f47:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019f4b:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019f4f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019f53:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019f57:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019f5d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019f61:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0019f67:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019f6b:	c1 e0 06             	shl    eax,0x6
c0019f6e:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0019f76:	74 5d                	je     c0019fd5 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0019f78:	89 fa                	mov    edx,edi
c0019f7a:	89 f0                	mov    eax,esi
c0019f7c:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0019f80:	c1 ea 1c             	shr    edx,0x1c
c0019f83:	89 d1                	mov    ecx,edx
c0019f85:	09 c1                	or     ecx,eax
c0019f87:	74 25                	je     c0019fae <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0019f89:	31 ed                	xor    ebp,ebp
c0019f8b:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0019f92:	89 fa                	mov    edx,edi
c0019f94:	89 f0                	mov    eax,esi
c0019f96:	0f ad d0             	shrd   eax,edx,cl
c0019f99:	d3 ea                	shr    edx,cl
c0019f9b:	f6 c1 20             	test   cl,0x20
c0019f9e:	74 02                	je     c0019fa2 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0019fa0:	89 d0                	mov    eax,edx
c0019fa2:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0019fa6:	45                   	inc    ebp
c0019fa7:	83 fd 06             	cmp    ebp,0x6
c0019faa:	75 df                	jne    c0019f8b <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0019fac:	eb 76                	jmp    c001a024 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0019fae:	89 f0                	mov    eax,esi
c0019fb0:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0019fb5:	89 fa                	mov    edx,edi
c0019fb7:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0019fbe:	0f ac d0 10          	shrd   eax,edx,0x10
c0019fc2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019fc7:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0019fcb:	c1 ee 18             	shr    esi,0x18
c0019fce:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0019fd3:	eb 56                	jmp    c001a02b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0019fd5:	6a 00                	push   0x0
c0019fd7:	6a 3f                	push   0x3f
c0019fd9:	57                   	push   edi
c0019fda:	56                   	push   esi
c0019fdb:	e8 70 22 00 00       	call   c001c250 <__umoddi3>
c0019fe0:	83 c4 10             	add    esp,0x10
c0019fe3:	40                   	inc    eax
c0019fe4:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0019fe8:	6a 00                	push   0x0
c0019fea:	68 f0 03 00 00       	push   0x3f0
c0019fef:	57                   	push   edi
c0019ff0:	56                   	push   esi
c0019ff1:	e8 5a 21 00 00       	call   c001c150 <__udivdi3>
c0019ff6:	83 c4 10             	add    esp,0x10
c0019ff9:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0019ffe:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001a005:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001a00a:	6a 00                	push   0x0
c001a00c:	6a 3f                	push   0x3f
c001a00e:	57                   	push   edi
c001a00f:	56                   	push   esi
c001a010:	e8 3b 21 00 00       	call   c001c150 <__udivdi3>
c001a015:	83 c4 10             	add    esp,0x10
c001a018:	89 c6                	mov    esi,eax
c001a01a:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001a01f:	83 e6 0f             	and    esi,0xf
c001a022:	eb 07                	jmp    c001a02b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a024:	31 f6                	xor    esi,esi
c001a026:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001a02b:	bf 01 00 00 00       	mov    edi,0x1
c001a030:	50                   	push   eax
c001a031:	6a 00                	push   0x0
c001a033:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a03a:	50                   	push   eax
c001a03b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a03f:	e8 ee f1 ff ff       	call   c0019232 <IDE::enableIRQs(unsigned char, bool)>
c001a044:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a047:	e8 9c fe ff ff       	call   c0019ee8 <ATA::readyForCommand()>
c001a04c:	83 c4 10             	add    esp,0x10
c001a04f:	84 c0                	test   al,al
c001a051:	0f 84 4e 02 00 00    	je     c001a2a5 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a057:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001a05d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a063:	c1 e0 04             	shl    eax,0x4
c001a066:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001a06d:	09 c6                	or     esi,eax
c001a06f:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001a074:	75 05                	jne    c001a07b <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001a076:	83 ce a0             	or     esi,0xffffffa0
c001a079:	eb 03                	jmp    c001a07e <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001a07b:	83 ce e0             	or     esi,0xffffffe0
c001a07e:	89 f0                	mov    eax,esi
c001a080:	0f b6 f0             	movzx  esi,al
c001a083:	56                   	push   esi
c001a084:	6a 06                	push   0x6
c001a086:	51                   	push   ecx
c001a087:	52                   	push   edx
c001a088:	e8 97 ef ff ff       	call   c0019024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a08d:	83 c4 10             	add    esp,0x10
c001a090:	6a 00                	push   0x0
c001a092:	6a 01                	push   0x1
c001a094:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a09b:	50                   	push   eax
c001a09c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a0a2:	e8 7d ef ff ff       	call   c0019024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0a7:	83 c4 10             	add    esp,0x10
c001a0aa:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a0af:	75 6e                	jne    c001a11f <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001a0b1:	6a 00                	push   0x0
c001a0b3:	6a 08                	push   0x8
c001a0b5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a0bc:	50                   	push   eax
c001a0bd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a0c3:	e8 5c ef ff ff       	call   c0019024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0c8:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001a0cd:	50                   	push   eax
c001a0ce:	6a 09                	push   0x9
c001a0d0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a0d7:	50                   	push   eax
c001a0d8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a0de:	e8 41 ef ff ff       	call   c0019024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0e3:	83 c4 20             	add    esp,0x20
c001a0e6:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001a0eb:	50                   	push   eax
c001a0ec:	6a 0a                	push   0xa
c001a0ee:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a0f5:	50                   	push   eax
c001a0f6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a0fc:	e8 23 ef ff ff       	call   c0019024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a101:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001a106:	50                   	push   eax
c001a107:	6a 0b                	push   0xb
c001a109:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a110:	50                   	push   eax
c001a111:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a117:	e8 08 ef ff ff       	call   c0019024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a11c:	83 c4 20             	add    esp,0x20
c001a11f:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001a124:	50                   	push   eax
c001a125:	6a 02                	push   0x2
c001a127:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a12e:	50                   	push   eax
c001a12f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a135:	e8 ea ee ff ff       	call   c0019024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a13a:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001a13f:	50                   	push   eax
c001a140:	6a 03                	push   0x3
c001a142:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a149:	50                   	push   eax
c001a14a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a150:	e8 cf ee ff ff       	call   c0019024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a155:	83 c4 20             	add    esp,0x20
c001a158:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001a15d:	50                   	push   eax
c001a15e:	6a 04                	push   0x4
c001a160:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a167:	50                   	push   eax
c001a168:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a16e:	e8 b1 ee ff ff       	call   c0019024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a173:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a178:	50                   	push   eax
c001a179:	6a 05                	push   0x5
c001a17b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a182:	50                   	push   eax
c001a183:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a189:	e8 96 ee ff ff       	call   c0019024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a18e:	83 c4 20             	add    esp,0x20
c001a191:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a196:	0f 94 c0             	sete   al
c001a199:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a19e:	74 09                	je     c001a1a9 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001a1a0:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001a1a7:	eb 07                	jmp    c001a1b0 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001a1a9:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001a1b0:	0f b6 c0             	movzx  eax,al
c001a1b3:	50                   	push   eax
c001a1b4:	6a 07                	push   0x7
c001a1b6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1bd:	50                   	push   eax
c001a1be:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1c4:	e8 5b ee ff ff       	call   c0019024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1c9:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001a1cd:	83 c4 10             	add    esp,0x10
c001a1d0:	85 f6                	test   esi,esi
c001a1d2:	0f 84 ae 00 00 00    	je     c001a286 <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001a1d8:	50                   	push   eax
c001a1d9:	6a 01                	push   0x1
c001a1db:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1e2:	50                   	push   eax
c001a1e3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1e9:	e8 d4 f8 ff ff       	call   c0019ac2 <IDE::polling(unsigned char, unsigned int)>
c001a1ee:	83 c4 10             	add    esp,0x10
c001a1f1:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001a1f7:	84 c0                	test   al,al
c001a1f9:	74 20                	je     c001a21b <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c001a1fb:	0f b6 f8             	movzx  edi,al
c001a1fe:	0f b6 d2             	movzx  edx,dl
c001a201:	57                   	push   edi
c001a202:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001a209:	50                   	push   eax
c001a20a:	52                   	push   edx
c001a20b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a211:	e8 fc f7 ff ff       	call   c0019a12 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a216:	e9 87 00 00 00       	jmp    c001a2a2 <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c001a21b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a220:	74 33                	je     c001a255 <ATA::access(unsigned long long, int, void*, bool)+0x321>
c001a222:	31 ed                	xor    ebp,ebp
c001a224:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a228:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001a22c:	50                   	push   eax
c001a22d:	50                   	push   eax
c001a22e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a235:	50                   	push   eax
c001a236:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a23c:	e8 d1 ed ff ff       	call   c0019012 <IDE::getBase(unsigned char)>
c001a241:	89 c2                	mov    edx,eax
c001a243:	89 f8                	mov    eax,edi
c001a245:	66 ef                	out    dx,ax
c001a247:	45                   	inc    ebp
c001a248:	83 c4 10             	add    esp,0x10
c001a24b:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001a251:	75 d1                	jne    c001a224 <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c001a253:	eb 23                	jmp    c001a278 <ATA::access(unsigned long long, int, void*, bool)+0x344>
c001a255:	0f b6 d2             	movzx  edx,dl
c001a258:	51                   	push   ecx
c001a259:	51                   	push   ecx
c001a25a:	52                   	push   edx
c001a25b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a261:	e8 ac ed ff ff       	call   c0019012 <IDE::getBase(unsigned char)>
c001a266:	b9 00 01 00 00       	mov    ecx,0x100
c001a26b:	89 c2                	mov    edx,eax
c001a26d:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001a271:	fc                   	cld    
c001a272:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001a275:	83 c4 10             	add    esp,0x10
c001a278:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001a280:	4e                   	dec    esi
c001a281:	e9 4a ff ff ff       	jmp    c001a1d0 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c001a286:	31 ff                	xor    edi,edi
c001a288:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a28d:	74 16                	je     c001a2a5 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a28f:	50                   	push   eax
c001a290:	50                   	push   eax
c001a291:	31 c0                	xor    eax,eax
c001a293:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001a298:	0f 94 c0             	sete   al
c001a29b:	50                   	push   eax
c001a29c:	53                   	push   ebx
c001a29d:	e8 fc fb ff ff       	call   c0019e9e <ATA::flush(bool)>
c001a2a2:	83 c4 10             	add    esp,0x10
c001a2a5:	83 c4 2c             	add    esp,0x2c
c001a2a8:	89 f8                	mov    eax,edi
c001a2aa:	5b                   	pop    ebx
c001a2ab:	5e                   	pop    esi
c001a2ac:	5f                   	pop    edi
c001a2ad:	5d                   	pop    ebp
c001a2ae:	c3                   	ret    
c001a2af:	90                   	nop

c001a2b0 <ATA::read(unsigned long long, int, void*)>:
c001a2b0:	57                   	push   edi
c001a2b1:	b8 04 00 00 00       	mov    eax,0x4
c001a2b6:	56                   	push   esi
c001a2b7:	53                   	push   ebx
c001a2b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a2bc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a2c0:	8d 7a ff             	lea    edi,[edx-0x1]
c001a2c3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a2c7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a2cb:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a2d1:	77 25                	ja     c001a2f8 <ATA::read(unsigned long long, int, void*)+0x48>
c001a2d3:	b8 06 00 00 00       	mov    eax,0x6
c001a2d8:	85 f6                	test   esi,esi
c001a2da:	74 1c                	je     c001a2f8 <ATA::read(unsigned long long, int, void*)+0x48>
c001a2dc:	50                   	push   eax
c001a2dd:	50                   	push   eax
c001a2de:	6a 00                	push   0x0
c001a2e0:	56                   	push   esi
c001a2e1:	52                   	push   edx
c001a2e2:	53                   	push   ebx
c001a2e3:	51                   	push   ecx
c001a2e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a2e8:	e8 47 fc ff ff       	call   c0019f34 <ATA::access(unsigned long long, int, void*, bool)>
c001a2ed:	83 c4 20             	add    esp,0x20
c001a2f0:	85 c0                	test   eax,eax
c001a2f2:	0f 95 c0             	setne  al
c001a2f5:	0f b6 c0             	movzx  eax,al
c001a2f8:	5b                   	pop    ebx
c001a2f9:	5e                   	pop    esi
c001a2fa:	5f                   	pop    edi
c001a2fb:	c3                   	ret    

c001a2fc <ATA::write(unsigned long long, int, void*)>:
c001a2fc:	57                   	push   edi
c001a2fd:	b8 04 00 00 00       	mov    eax,0x4
c001a302:	56                   	push   esi
c001a303:	53                   	push   ebx
c001a304:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a308:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a30c:	8d 7a ff             	lea    edi,[edx-0x1]
c001a30f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a313:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a317:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a31d:	77 25                	ja     c001a344 <ATA::write(unsigned long long, int, void*)+0x48>
c001a31f:	b8 06 00 00 00       	mov    eax,0x6
c001a324:	85 f6                	test   esi,esi
c001a326:	74 1c                	je     c001a344 <ATA::write(unsigned long long, int, void*)+0x48>
c001a328:	50                   	push   eax
c001a329:	50                   	push   eax
c001a32a:	6a 01                	push   0x1
c001a32c:	56                   	push   esi
c001a32d:	52                   	push   edx
c001a32e:	53                   	push   ebx
c001a32f:	51                   	push   ecx
c001a330:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a334:	e8 fb fb ff ff       	call   c0019f34 <ATA::access(unsigned long long, int, void*, bool)>
c001a339:	83 c4 20             	add    esp,0x20
c001a33c:	85 c0                	test   eax,eax
c001a33e:	0f 95 c0             	setne  al
c001a341:	0f b6 c0             	movzx  eax,al
c001a344:	5b                   	pop    ebx
c001a345:	5e                   	pop    esi
c001a346:	5f                   	pop    edi
c001a347:	c3                   	ret    

c001a348 <ATA::detectCHS()>:
c001a348:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a34c:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001a352:	c1 e0 06             	shl    eax,0x6
c001a355:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001a35b:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001a365:	c7 44 24 04 74 f4 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f474
c001a36d:	e9 91 5e ff ff       	jmp    c0010203 <KePanic(char const*)>

c001a372 <ATA::open(int, int, void*)>:
c001a372:	53                   	push   ebx
c001a373:	83 ec 08             	sub    esp,0x8
c001a376:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a37a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a37e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a382:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a388:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a38e:	c1 e0 06             	shl    eax,0x6
c001a391:	01 d0                	add    eax,edx
c001a393:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001a39a:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001a3a0:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001a3a7:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001a3b1:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001a3b7:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001a3be:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001a3c5:	75 0c                	jne    c001a3d3 <ATA::open(int, int, void*)+0x61>
c001a3c7:	83 ec 0c             	sub    esp,0xc
c001a3ca:	53                   	push   ebx
c001a3cb:	e8 78 ff ff ff       	call   c001a348 <ATA::detectCHS()>
c001a3d0:	83 c4 10             	add    esp,0x10
c001a3d3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a3d9:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001a3df:	c1 e0 06             	shl    eax,0x6
c001a3e2:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001a3e9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a3f3:	d1 e8                	shr    eax,1
c001a3f5:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001a3fb:	6a 04                	push   0x4
c001a3fd:	6a 0c                	push   0xc
c001a3ff:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a406:	50                   	push   eax
c001a407:	52                   	push   edx
c001a408:	e8 17 ec ff ff       	call   c0019024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a40d:	90                   	nop
c001a40e:	90                   	nop
c001a40f:	6a 00                	push   0x0
c001a411:	6a 0c                	push   0xc
c001a413:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a41a:	50                   	push   eax
c001a41b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a421:	e8 fe eb ff ff       	call   c0019024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a426:	83 c4 14             	add    esp,0x14
c001a429:	53                   	push   ebx
c001a42a:	e8 c7 19 ff ff       	call   c000bdf6 <PhysicalDisk::startCache()>
c001a42f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a432:	e8 77 2a ff ff       	call   c000ceae <createPartitionsForDisk(PhysicalDisk*)>
c001a437:	31 c0                	xor    eax,eax
c001a439:	83 c4 18             	add    esp,0x18
c001a43c:	5b                   	pop    ebx
c001a43d:	c3                   	ret    

c001a43e <ATAPI::write(unsigned long long, int, void*)>:
c001a43e:	b8 03 00 00 00       	mov    eax,0x3
c001a443:	c3                   	ret    

c001a444 <ATAPI::close(int, int, void*)>:
c001a444:	83 ec 0c             	sub    esp,0xc
c001a447:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a44b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a451:	85 c0                	test   eax,eax
c001a453:	74 0c                	je     c001a461 <ATAPI::close(int, int, void*)+0x1d>
c001a455:	83 ec 0c             	sub    esp,0xc
c001a458:	8b 10                	mov    edx,DWORD PTR [eax]
c001a45a:	50                   	push   eax
c001a45b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a45e:	83 c4 10             	add    esp,0x10
c001a461:	31 c0                	xor    eax,eax
c001a463:	83 c4 0c             	add    esp,0xc
c001a466:	c3                   	ret    
c001a467:	90                   	nop

c001a468 <ATAPI::ATAPI()>:
c001a468:	83 ec 0c             	sub    esp,0xc
c001a46b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a46f:	83 ec 04             	sub    esp,0x4
c001a472:	68 00 08 00 00       	push   0x800
c001a477:	68 bd f5 01 c0       	push   0xc001f5bd
c001a47c:	50                   	push   eax
c001a47d:	e8 0c 19 ff ff       	call   c000bd8e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a482:	83 c4 10             	add    esp,0x10
c001a485:	ba d8 f4 01 c0       	mov    edx,0xc001f4d8
c001a48a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a48e:	89 10                	mov    DWORD PTR [eax],edx
c001a490:	90                   	nop
c001a491:	83 c4 0c             	add    esp,0xc
c001a494:	c3                   	ret    
c001a495:	90                   	nop

c001a496 <ATAPI::readyForCommand()>:
c001a496:	56                   	push   esi
c001a497:	53                   	push   ebx
c001a498:	53                   	push   ebx
c001a499:	31 db                	xor    ebx,ebx
c001a49b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a49f:	51                   	push   ecx
c001a4a0:	6a 0c                	push   0xc
c001a4a2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001a4a9:	50                   	push   eax
c001a4aa:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001a4b0:	e8 2f ec ff ff       	call   c00190e4 <IDE::read(unsigned char, unsigned char)>
c001a4b5:	83 c4 10             	add    esp,0x10
c001a4b8:	a8 88                	test   al,0x88
c001a4ba:	74 25                	je     c001a4e1 <ATAPI::readyForCommand()+0x4b>
c001a4bc:	43                   	inc    ebx
c001a4bd:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001a4c3:	7e da                	jle    c001a49f <ATAPI::readyForCommand()+0x9>
c001a4c5:	83 ec 0c             	sub    esp,0xc
c001a4c8:	68 5e 01 00 00       	push   0x15e
c001a4cd:	e8 26 96 ff ff       	call   c0013af8 <milliTenthSleep(unsigned int)>
c001a4d2:	83 c4 10             	add    esp,0x10
c001a4d5:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001a4db:	75 c2                	jne    c001a49f <ATAPI::readyForCommand()+0x9>
c001a4dd:	31 c0                	xor    eax,eax
c001a4df:	eb 02                	jmp    c001a4e3 <ATAPI::readyForCommand()+0x4d>
c001a4e1:	b0 01                	mov    al,0x1
c001a4e3:	5a                   	pop    edx
c001a4e4:	5b                   	pop    ebx
c001a4e5:	5e                   	pop    esi
c001a4e6:	c3                   	ret    
c001a4e7:	90                   	nop

c001a4e8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001a4e8:	55                   	push   ebp
c001a4e9:	57                   	push   edi
c001a4ea:	56                   	push   esi
c001a4eb:	53                   	push   ebx
c001a4ec:	83 ec 20             	sub    esp,0x20
c001a4ef:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a4f3:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001a4f7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a4fb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a4ff:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a503:	6a 01                	push   0x1
c001a505:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a50c:	50                   	push   eax
c001a50d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a513:	e8 1a ed ff ff       	call   c0019232 <IDE::enableIRQs(unsigned char, bool)>
c001a518:	5e                   	pop    esi
c001a519:	58                   	pop    eax
c001a51a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a521:	50                   	push   eax
c001a522:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a528:	e8 d1 ea ff ff       	call   c0018ffe <IDE::prepareInterrupt(unsigned char)>
c001a52d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a530:	e8 61 ff ff ff       	call   c001a496 <ATAPI::readyForCommand()>
c001a535:	83 c4 10             	add    esp,0x10
c001a538:	84 c0                	test   al,al
c001a53a:	75 0a                	jne    c001a546 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001a53c:	bb 01 00 00 00       	mov    ebx,0x1
c001a541:	e9 57 02 00 00       	jmp    c001a79d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a546:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001a54c:	c1 e0 04             	shl    eax,0x4
c001a54f:	0f b6 c0             	movzx  eax,al
c001a552:	50                   	push   eax
c001a553:	6a 06                	push   0x6
c001a555:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a55c:	50                   	push   eax
c001a55d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a563:	e8 bc ea ff ff       	call   c0019024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a568:	6a 00                	push   0x0
c001a56a:	6a 01                	push   0x1
c001a56c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a573:	50                   	push   eax
c001a574:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a57a:	e8 a5 ea ff ff       	call   c0019024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a57f:	83 c4 20             	add    esp,0x20
c001a582:	0f b6 c3             	movzx  eax,bl
c001a585:	0f b6 df             	movzx  ebx,bh
c001a588:	50                   	push   eax
c001a589:	6a 04                	push   0x4
c001a58b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a592:	50                   	push   eax
c001a593:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a599:	e8 86 ea ff ff       	call   c0019024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a59e:	53                   	push   ebx
c001a59f:	6a 05                	push   0x5
c001a5a1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a5a8:	50                   	push   eax
c001a5a9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5af:	e8 70 ea ff ff       	call   c0019024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a5b4:	83 c4 20             	add    esp,0x20
c001a5b7:	68 a0 00 00 00       	push   0xa0
c001a5bc:	6a 07                	push   0x7
c001a5be:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a5c5:	50                   	push   eax
c001a5c6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5cc:	e8 53 ea ff ff       	call   c0019024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a5d1:	83 c4 0c             	add    esp,0xc
c001a5d4:	6a 01                	push   0x1
c001a5d6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a5dd:	50                   	push   eax
c001a5de:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5e4:	e8 d9 f4 ff ff       	call   c0019ac2 <IDE::polling(unsigned char, unsigned int)>
c001a5e9:	83 c4 10             	add    esp,0x10
c001a5ec:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001a5f2:	84 c0                	test   al,al
c001a5f4:	74 23                	je     c001a619 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001a5f6:	0f b6 d8             	movzx  ebx,al
c001a5f9:	0f b6 d2             	movzx  edx,dl
c001a5fc:	53                   	push   ebx
c001a5fd:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001a604:	50                   	push   eax
c001a605:	52                   	push   edx
c001a606:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a60c:	e8 01 f4 ff ff       	call   c0019a12 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a611:	83 c4 10             	add    esp,0x10
c001a614:	e9 84 01 00 00       	jmp    c001a79d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a619:	0f b6 d2             	movzx  edx,dl
c001a61c:	53                   	push   ebx
c001a61d:	53                   	push   ebx
c001a61e:	52                   	push   edx
c001a61f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a625:	e8 e8 e9 ff ff       	call   c0019012 <IDE::getBase(unsigned char)>
c001a62a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a62e:	b9 06 00 00 00       	mov    ecx,0x6
c001a633:	89 c2                	mov    edx,eax
c001a635:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001a638:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001a63c:	83 c4 10             	add    esp,0x10
c001a63f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a645:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a64c:	85 db                	test   ebx,ebx
c001a64e:	0f 84 ec 00 00 00    	je     c001a740 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001a654:	51                   	push   ecx
c001a655:	51                   	push   ecx
c001a656:	52                   	push   edx
c001a657:	50                   	push   eax
c001a658:	e8 35 eb ff ff       	call   c0019192 <IDE::waitInterrupt(unsigned char)>
c001a65d:	83 c4 10             	add    esp,0x10
c001a660:	84 c0                	test   al,al
c001a662:	0f 84 d4 fe ff ff    	je     c001a53c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a668:	56                   	push   esi
c001a669:	56                   	push   esi
c001a66a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a671:	50                   	push   eax
c001a672:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a678:	e8 81 e9 ff ff       	call   c0018ffe <IDE::prepareInterrupt(unsigned char)>
c001a67d:	83 c4 0c             	add    esp,0xc
c001a680:	6a 04                	push   0x4
c001a682:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a689:	50                   	push   eax
c001a68a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a690:	e8 4f ea ff ff       	call   c00190e4 <IDE::read(unsigned char, unsigned char)>
c001a695:	83 c4 0c             	add    esp,0xc
c001a698:	89 c6                	mov    esi,eax
c001a69a:	6a 05                	push   0x5
c001a69c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a6a3:	50                   	push   eax
c001a6a4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6aa:	e8 35 ea ff ff       	call   c00190e4 <IDE::read(unsigned char, unsigned char)>
c001a6af:	89 f1                	mov    ecx,esi
c001a6b1:	0f b6 c0             	movzx  eax,al
c001a6b4:	0f b6 f1             	movzx  esi,cl
c001a6b7:	c1 e0 08             	shl    eax,0x8
c001a6ba:	09 c6                	or     esi,eax
c001a6bc:	d1 fe                	sar    esi,1
c001a6be:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001a6c2:	83 c4 10             	add    esp,0x10
c001a6c5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001a6ca:	74 41                	je     c001a70d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001a6cc:	31 c9                	xor    ecx,ecx
c001a6ce:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a6d4:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a6db:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001a6df:	75 0a                	jne    c001a6eb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001a6e1:	01 c9                	add    ecx,ecx
c001a6e3:	01 cd                	add    ebp,ecx
c001a6e5:	4b                   	dec    ebx
c001a6e6:	e9 54 ff ff ff       	jmp    c001a63f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001a6eb:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001a6f0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001a6f4:	51                   	push   ecx
c001a6f5:	51                   	push   ecx
c001a6f6:	52                   	push   edx
c001a6f7:	50                   	push   eax
c001a6f8:	e8 15 e9 ff ff       	call   c0019012 <IDE::getBase(unsigned char)>
c001a6fd:	89 c2                	mov    edx,eax
c001a6ff:	89 f0                	mov    eax,esi
c001a701:	66 ef                	out    dx,ax
c001a703:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a707:	83 c4 10             	add    esp,0x10
c001a70a:	41                   	inc    ecx
c001a70b:	eb c1                	jmp    c001a6ce <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001a70d:	31 f6                	xor    esi,esi
c001a70f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a715:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a71c:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001a720:	75 06                	jne    c001a728 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001a722:	01 f6                	add    esi,esi
c001a724:	01 f5                	add    ebp,esi
c001a726:	eb bd                	jmp    c001a6e5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001a728:	51                   	push   ecx
c001a729:	51                   	push   ecx
c001a72a:	52                   	push   edx
c001a72b:	50                   	push   eax
c001a72c:	e8 e1 e8 ff ff       	call   c0019012 <IDE::getBase(unsigned char)>
c001a731:	89 c2                	mov    edx,eax
c001a733:	66 ed                	in     ax,dx
c001a735:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001a73a:	83 c4 10             	add    esp,0x10
c001a73d:	46                   	inc    esi
c001a73e:	eb cf                	jmp    c001a70f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001a740:	51                   	push   ecx
c001a741:	51                   	push   ecx
c001a742:	52                   	push   edx
c001a743:	50                   	push   eax
c001a744:	e8 49 ea ff ff       	call   c0019192 <IDE::waitInterrupt(unsigned char)>
c001a749:	83 c4 10             	add    esp,0x10
c001a74c:	84 c0                	test   al,al
c001a74e:	0f 84 e8 fd ff ff    	je     c001a53c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a754:	bb a0 86 01 00       	mov    ebx,0x186a0
c001a759:	52                   	push   edx
c001a75a:	52                   	push   edx
c001a75b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a762:	50                   	push   eax
c001a763:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a769:	e8 90 e8 ff ff       	call   c0018ffe <IDE::prepareInterrupt(unsigned char)>
c001a76e:	83 c4 10             	add    esp,0x10
c001a771:	50                   	push   eax
c001a772:	50                   	push   eax
c001a773:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a77a:	50                   	push   eax
c001a77b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a781:	e8 8c e8 ff ff       	call   c0019012 <IDE::getBase(unsigned char)>
c001a786:	8d 50 07             	lea    edx,[eax+0x7]
c001a789:	ec                   	in     al,dx
c001a78a:	83 c4 10             	add    esp,0x10
c001a78d:	a8 88                	test   al,0x88
c001a78f:	74 0a                	je     c001a79b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001a791:	4b                   	dec    ebx
c001a792:	75 dd                	jne    c001a771 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001a794:	bb 02 00 00 00       	mov    ebx,0x2
c001a799:	eb 02                	jmp    c001a79d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a79b:	31 db                	xor    ebx,ebx
c001a79d:	83 c4 1c             	add    esp,0x1c
c001a7a0:	89 d8                	mov    eax,ebx
c001a7a2:	5b                   	pop    ebx
c001a7a3:	5e                   	pop    esi
c001a7a4:	5f                   	pop    edi
c001a7a5:	5d                   	pop    ebp
c001a7a6:	c3                   	ret    
c001a7a7:	90                   	nop

c001a7a8 <ATAPI::diskRemoved()>:
c001a7a8:	53                   	push   ebx
c001a7a9:	83 ec 14             	sub    esp,0x14
c001a7ac:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a7b0:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a7b7:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001a7bd:	e8 6c 24 ff ff       	call   c000cc2e <LogicalDisk::unmount()>
c001a7c2:	58                   	pop    eax
c001a7c3:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001a7c9:	e8 a6 2d ff ff       	call   c000d574 <VCache::writeWriteBuffer()>
c001a7ce:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001a7d4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a7d8:	83 c4 18             	add    esp,0x18
c001a7db:	5b                   	pop    ebx
c001a7dc:	e9 83 2d ff ff       	jmp    c000d564 <VCache::invalidateReadBuffer()>
c001a7e1:	90                   	nop

c001a7e2 <ATAPI::eject()>:
c001a7e2:	57                   	push   edi
c001a7e3:	b9 03 00 00 00       	mov    ecx,0x3
c001a7e8:	53                   	push   ebx
c001a7e9:	83 ec 14             	sub    esp,0x14
c001a7ec:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a7f0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a7f4:	fc                   	cld    
c001a7f5:	31 c0                	xor    eax,eax
c001a7f7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a7f9:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001a7fe:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001a803:	50                   	push   eax
c001a804:	50                   	push   eax
c001a805:	6a 00                	push   0x0
c001a807:	6a 00                	push   0x0
c001a809:	6a 00                	push   0x0
c001a80b:	6a 02                	push   0x2
c001a80d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a811:	50                   	push   eax
c001a812:	53                   	push   ebx
c001a813:	e8 d0 fc ff ff       	call   c001a4e8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a818:	83 c4 14             	add    esp,0x14
c001a81b:	53                   	push   ebx
c001a81c:	e8 87 ff ff ff       	call   c001a7a8 <ATAPI::diskRemoved()>
c001a821:	83 c4 24             	add    esp,0x24
c001a824:	31 c0                	xor    eax,eax
c001a826:	5b                   	pop    ebx
c001a827:	5f                   	pop    edi
c001a828:	c3                   	ret    
c001a829:	90                   	nop

c001a82a <ATAPI::diskInserted()>:
c001a82a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a82e:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001a835:	c3                   	ret    

c001a836 <ATAPI::detectMedia()>:
c001a836:	56                   	push   esi
c001a837:	53                   	push   ebx
c001a838:	83 ec 28             	sub    esp,0x28
c001a83b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a83f:	6a 0c                	push   0xc
c001a841:	6a 00                	push   0x0
c001a843:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001a847:	56                   	push   esi
c001a848:	e8 83 5c fe ff       	call   c00004d0 <memset>
c001a84d:	58                   	pop    eax
c001a84e:	5a                   	pop    edx
c001a84f:	6a 00                	push   0x0
c001a851:	6a 00                	push   0x0
c001a853:	6a 00                	push   0x0
c001a855:	6a 00                	push   0x0
c001a857:	56                   	push   esi
c001a858:	53                   	push   ebx
c001a859:	e8 8a fc ff ff       	call   c001a4e8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a85e:	83 c4 1c             	add    esp,0x1c
c001a861:	6a 0c                	push   0xc
c001a863:	6a 00                	push   0x0
c001a865:	56                   	push   esi
c001a866:	e8 65 5c fe ff       	call   c00004d0 <memset>
c001a86b:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001a870:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001a875:	59                   	pop    ecx
c001a876:	58                   	pop    eax
c001a877:	6a 01                	push   0x1
c001a879:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a87d:	50                   	push   eax
c001a87e:	6a 00                	push   0x0
c001a880:	6a 12                	push   0x12
c001a882:	56                   	push   esi
c001a883:	53                   	push   ebx
c001a884:	e8 5f fc ff ff       	call   c001a4e8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a889:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001a88d:	83 c4 20             	add    esp,0x20
c001a890:	83 e0 7f             	and    eax,0x7f
c001a893:	3c 70                	cmp    al,0x70
c001a895:	74 15                	je     c001a8ac <ATAPI::detectMedia()+0x76>
c001a897:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a89e:	75 0c                	jne    c001a8ac <ATAPI::detectMedia()+0x76>
c001a8a0:	83 ec 0c             	sub    esp,0xc
c001a8a3:	53                   	push   ebx
c001a8a4:	e8 81 ff ff ff       	call   c001a82a <ATAPI::diskInserted()>
c001a8a9:	83 c4 10             	add    esp,0x10
c001a8ac:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a8b0:	83 e0 0f             	and    eax,0xf
c001a8b3:	3c 02                	cmp    al,0x2
c001a8b5:	75 1b                	jne    c001a8d2 <ATAPI::detectMedia()+0x9c>
c001a8b7:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001a8bc:	75 2d                	jne    c001a8eb <ATAPI::detectMedia()+0xb5>
c001a8be:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a8c5:	74 24                	je     c001a8eb <ATAPI::detectMedia()+0xb5>
c001a8c7:	83 ec 0c             	sub    esp,0xc
c001a8ca:	53                   	push   ebx
c001a8cb:	e8 d8 fe ff ff       	call   c001a7a8 <ATAPI::diskRemoved()>
c001a8d0:	eb 16                	jmp    c001a8e8 <ATAPI::detectMedia()+0xb2>
c001a8d2:	84 c0                	test   al,al
c001a8d4:	75 15                	jne    c001a8eb <ATAPI::detectMedia()+0xb5>
c001a8d6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a8dd:	75 0c                	jne    c001a8eb <ATAPI::detectMedia()+0xb5>
c001a8df:	83 ec 0c             	sub    esp,0xc
c001a8e2:	53                   	push   ebx
c001a8e3:	e8 42 ff ff ff       	call   c001a82a <ATAPI::diskInserted()>
c001a8e8:	83 c4 10             	add    esp,0x10
c001a8eb:	83 c4 24             	add    esp,0x24
c001a8ee:	5b                   	pop    ebx
c001a8ef:	5e                   	pop    esi
c001a8f0:	c3                   	ret    
c001a8f1:	90                   	nop

c001a8f2 <ATAPI::open(int, int, void*)>:
c001a8f2:	56                   	push   esi
c001a8f3:	53                   	push   ebx
c001a8f4:	50                   	push   eax
c001a8f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a8f9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a8fd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a901:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a907:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a90d:	c1 e0 06             	shl    eax,0x6
c001a910:	01 d0                	add    eax,edx
c001a912:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001a919:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001a91f:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001a926:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001a930:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001a936:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001a93d:	6a 04                	push   0x4
c001a93f:	6a 0c                	push   0xc
c001a941:	51                   	push   ecx
c001a942:	52                   	push   edx
c001a943:	e8 dc e6 ff ff       	call   c0019024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a948:	90                   	nop
c001a949:	90                   	nop
c001a94a:	6a 00                	push   0x0
c001a94c:	6a 0c                	push   0xc
c001a94e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a955:	50                   	push   eax
c001a956:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a95c:	e8 c3 e6 ff ff       	call   c0019024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a961:	83 c4 14             	add    esp,0x14
c001a964:	68 74 01 00 00       	push   0x174
c001a969:	e8 4b ce fe ff       	call   c00077b9 <malloc>
c001a96e:	83 c4 0c             	add    esp,0xc
c001a971:	89 c6                	mov    esi,eax
c001a973:	6a 00                	push   0x0
c001a975:	68 ff ff ff 7f       	push   0x7fffffff
c001a97a:	6a 00                	push   0x0
c001a97c:	6a 00                	push   0x0
c001a97e:	53                   	push   ebx
c001a97f:	68 74 f6 01 c0       	push   0xc001f674
c001a984:	50                   	push   eax
c001a985:	e8 f0 20 ff ff       	call   c000ca7a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001a98a:	83 c4 14             	add    esp,0x14
c001a98d:	56                   	push   esi
c001a98e:	e8 9d 21 ff ff       	call   c000cb30 <LogicalDisk::assignDriveLetter()>
c001a993:	5a                   	pop    edx
c001a994:	0f be c0             	movsx  eax,al
c001a997:	59                   	pop    ecx
c001a998:	50                   	push   eax
c001a999:	68 c0 f4 01 c0       	push   0xc001f4c0
c001a99e:	e8 de fb fe ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c001a9a3:	58                   	pop    eax
c001a9a4:	5a                   	pop    edx
c001a9a5:	56                   	push   esi
c001a9a6:	53                   	push   ebx
c001a9a7:	e8 14 10 ff ff       	call   c000b9c0 <Device::addChild(Device*)>
c001a9ac:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001a9b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a9b5:	e8 3c 14 ff ff       	call   c000bdf6 <PhysicalDisk::startCache()>
c001a9ba:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a9c1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a9c4:	e8 6d fe ff ff       	call   c001a836 <ATAPI::detectMedia()>
c001a9c9:	83 c4 14             	add    esp,0x14
c001a9cc:	31 c0                	xor    eax,eax
c001a9ce:	5b                   	pop    ebx
c001a9cf:	5e                   	pop    esi
c001a9d0:	c3                   	ret    
c001a9d1:	90                   	nop

c001a9d2 <ATAPI::read(unsigned long long, int, void*)>:
c001a9d2:	55                   	push   ebp
c001a9d3:	57                   	push   edi
c001a9d4:	56                   	push   esi
c001a9d5:	53                   	push   ebx
c001a9d6:	83 ec 1c             	sub    esp,0x1c
c001a9d9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a9dd:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a9e1:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001a9e5:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a9ec:	74 3c                	je     c001aa2a <ATAPI::read(unsigned long long, int, void*)+0x58>
c001a9ee:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a9f2:	b9 03 00 00 00       	mov    ecx,0x3
c001a9f7:	fc                   	cld    
c001a9f8:	31 c0                	xor    eax,eax
c001a9fa:	0f ce                	bswap  esi
c001a9fc:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a9fe:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001aa03:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001aa07:	89 e8                	mov    eax,ebp
c001aa09:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001aa0d:	50                   	push   eax
c001aa0e:	50                   	push   eax
c001aa0f:	55                   	push   ebp
c001aa10:	c1 e5 0b             	shl    ebp,0xb
c001aa13:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001aa17:	6a 00                	push   0x0
c001aa19:	55                   	push   ebp
c001aa1a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aa1e:	50                   	push   eax
c001aa1f:	53                   	push   ebx
c001aa20:	e8 c3 fa ff ff       	call   c001a4e8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001aa25:	83 c4 20             	add    esp,0x20
c001aa28:	eb 1a                	jmp    c001aa44 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001aa2a:	83 ec 0c             	sub    esp,0xc
c001aa2d:	53                   	push   ebx
c001aa2e:	e8 03 fe ff ff       	call   c001a836 <ATAPI::detectMedia()>
c001aa33:	83 c4 10             	add    esp,0x10
c001aa36:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001aa3d:	75 af                	jne    c001a9ee <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001aa3f:	b8 02 00 00 00       	mov    eax,0x2
c001aa44:	83 c4 1c             	add    esp,0x1c
c001aa47:	5b                   	pop    ebx
c001aa48:	5e                   	pop    esi
c001aa49:	5f                   	pop    edi
c001aa4a:	5d                   	pop    ebp
c001aa4b:	c3                   	ret    

c001aa4c <SATA::close(int, int, void*)>:
c001aa4c:	83 ec 0c             	sub    esp,0xc
c001aa4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa53:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001aa59:	85 c0                	test   eax,eax
c001aa5b:	74 0c                	je     c001aa69 <SATA::close(int, int, void*)+0x1d>
c001aa5d:	83 ec 0c             	sub    esp,0xc
c001aa60:	8b 10                	mov    edx,DWORD PTR [eax]
c001aa62:	50                   	push   eax
c001aa63:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001aa66:	83 c4 10             	add    esp,0x10
c001aa69:	31 c0                	xor    eax,eax
c001aa6b:	83 c4 0c             	add    esp,0xc
c001aa6e:	c3                   	ret    
c001aa6f:	90                   	nop

c001aa70 <SATA::powerSaving(PowerSavingLevel)>:
c001aa70:	c3                   	ret    
c001aa71:	90                   	nop

c001aa72 <SATA::open(int, int, void*)>:
c001aa72:	56                   	push   esi
c001aa73:	53                   	push   ebx
c001aa74:	50                   	push   eax
c001aa75:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aa79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aa7d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001aa87:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001aa8d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001aa97:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aa9b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001aaa5:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001aaab:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001aab2:	e8 de cf fe ff       	call   c0007a95 <Phys::allocatePage()>
c001aab7:	89 c6                	mov    esi,eax
c001aab9:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001aabf:	81 c6 00 10 00 00    	add    esi,0x1000
c001aac5:	e8 cb cf fe ff       	call   c0007a95 <Phys::allocatePage()>
c001aaca:	39 c6                	cmp    esi,eax
c001aacc:	74 10                	je     c001aade <SATA::open(int, int, void*)+0x6c>
c001aace:	83 ec 0c             	sub    esp,0xc
c001aad1:	68 08 f5 01 c0       	push   0xc001f508
c001aad6:	e8 28 57 ff ff       	call   c0010203 <KePanic(char const*)>
c001aadb:	83 c4 10             	add    esp,0x10
c001aade:	83 ec 0c             	sub    esp,0xc
c001aae1:	6a 02                	push   0x2
c001aae3:	e8 9d e7 fe ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c001aae8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001aaee:	6a 03                	push   0x3
c001aaf0:	50                   	push   eax
c001aaf1:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001aaf7:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c001aafd:	e8 f6 ed fe ff       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ab02:	83 c4 14             	add    esp,0x14
c001ab05:	53                   	push   ebx
c001ab06:	e8 eb 12 ff ff       	call   c000bdf6 <PhysicalDisk::startCache()>
c001ab0b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ab0e:	e8 9b 23 ff ff       	call   c000ceae <createPartitionsForDisk(PhysicalDisk*)>
c001ab13:	83 c4 14             	add    esp,0x14
c001ab16:	31 c0                	xor    eax,eax
c001ab18:	5b                   	pop    ebx
c001ab19:	5e                   	pop    esi
c001ab1a:	c3                   	ret    
c001ab1b:	90                   	nop

c001ab1c <SATA::SATA()>:
c001ab1c:	83 ec 0c             	sub    esp,0xc
c001ab1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab23:	83 ec 04             	sub    esp,0x4
c001ab26:	68 00 02 00 00       	push   0x200
c001ab2b:	68 1c f5 01 c0       	push   0xc001f51c
c001ab30:	50                   	push   eax
c001ab31:	e8 58 12 ff ff       	call   c000bd8e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ab36:	83 c4 10             	add    esp,0x10
c001ab39:	ba 8c f5 01 c0       	mov    edx,0xc001f58c
c001ab3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab42:	89 10                	mov    DWORD PTR [eax],edx
c001ab44:	90                   	nop
c001ab45:	83 c4 0c             	add    esp,0xc
c001ab48:	c3                   	ret    
c001ab49:	90                   	nop

c001ab4a <SATA::access(unsigned long long, int, void*, bool)>:
c001ab4a:	55                   	push   ebp
c001ab4b:	57                   	push   edi
c001ab4c:	56                   	push   esi
c001ab4d:	53                   	push   ebx
c001ab4e:	83 ec 2c             	sub    esp,0x2c
c001ab51:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001ab55:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001ab59:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ab5d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ab61:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ab65:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001ab6a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ab6e:	7e 10                	jle    c001ab80 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001ab70:	83 ec 0c             	sub    esp,0xc
c001ab73:	68 2c f5 01 c0       	push   0xc001f52c
c001ab78:	e8 86 56 ff ff       	call   c0010203 <KePanic(char const*)>
c001ab7d:	83 c4 10             	add    esp,0x10
c001ab80:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ab86:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001ab8c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ab92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ab96:	89 d0                	mov    eax,edx
c001ab98:	c1 e0 07             	shl    eax,0x7
c001ab9b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ab9f:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001aba9:	51                   	push   ecx
c001abaa:	8d 42 02             	lea    eax,[edx+0x2]
c001abad:	51                   	push   ecx
c001abae:	c1 e0 07             	shl    eax,0x7
c001abb1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001abb5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001abb9:	50                   	push   eax
c001abba:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001abc0:	e8 e7 ef ff ff       	call   c0019bac <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001abc5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001abc9:	83 c4 10             	add    esp,0x10
c001abcc:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001abd1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001abd5:	0f 84 4f 01 00 00    	je     c001ad2a <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001abdb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001abdf:	c1 e0 09             	shl    eax,0x9
c001abe2:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001abe7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001abeb:	74 0e                	je     c001abfb <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001abed:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001abf3:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001abf7:	89 c1                	mov    ecx,eax
c001abf9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001abfb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001abff:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001ac05:	8d 42 02             	lea    eax,[edx+0x2]
c001ac08:	c1 e0 07             	shl    eax,0x7
c001ac0b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ac0f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac11:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001ac17:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001ac1d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ac21:	c1 e1 05             	shl    ecx,0x5
c001ac24:	01 c8                	add    eax,ecx
c001ac26:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001ac2a:	83 e1 01             	and    ecx,0x1
c001ac2d:	89 ce                	mov    esi,ecx
c001ac2f:	8a 08                	mov    cl,BYTE PTR [eax]
c001ac31:	c1 e6 06             	shl    esi,0x6
c001ac34:	83 e1 bf             	and    ecx,0xffffffbf
c001ac37:	09 f1                	or     ecx,esi
c001ac39:	88 08                	mov    BYTE PTR [eax],cl
c001ac3b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ac3d:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001ac43:	81 c9 05 00 01 00    	or     ecx,0x10005
c001ac49:	89 08                	mov    DWORD PTR [eax],ecx
c001ac4b:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001ac51:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001ac57:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001ac5d:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001ac60:	50                   	push   eax
c001ac61:	68 90 00 00 00       	push   0x90
c001ac66:	6a 00                	push   0x0
c001ac68:	56                   	push   esi
c001ac69:	e8 62 58 fe ff       	call   c00004d0 <memset>
c001ac6e:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ac74:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001ac78:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001ac7e:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001ac82:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ac86:	83 c4 10             	add    esp,0x10
c001ac89:	48                   	dec    eax
c001ac8a:	25 ff ff 3f 00       	and    eax,0x3fffff
c001ac8f:	89 c1                	mov    ecx,eax
c001ac91:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001ac97:	25 00 00 c0 ff       	and    eax,0xffc00000
c001ac9c:	09 c8                	or     eax,ecx
c001ac9e:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001aca4:	66 8b 06             	mov    ax,WORD PTR [esi]
c001aca7:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001acae:	66 25 00 7f          	and    ax,0x7f00
c001acb2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001acb6:	66 0d 27 80          	or     ax,0x8027
c001acba:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001acbf:	66 89 06             	mov    WORD PTR [esi],ax
c001acc2:	19 c0                	sbb    eax,eax
c001acc4:	83 e0 f0             	and    eax,0xfffffff0
c001acc7:	83 c0 35             	add    eax,0x35
c001acca:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001accd:	89 e8                	mov    eax,ebp
c001accf:	c1 e8 10             	shr    eax,0x10
c001acd2:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001acd5:	89 e8                	mov    eax,ebp
c001acd7:	c1 e8 18             	shr    eax,0x18
c001acda:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001acdd:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001ace1:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001ace4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ace8:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001aceb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001acef:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001acf3:	89 d6                	mov    esi,edx
c001acf5:	31 c0                	xor    eax,eax
c001acf7:	c1 e6 07             	shl    esi,0x7
c001acfa:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001acfe:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001ad04:	80 e1 88             	and    cl,0x88
c001ad07:	74 0a                	je     c001ad13 <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001ad09:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ad0e:	74 0a                	je     c001ad1a <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001ad10:	40                   	inc    eax
c001ad11:	eb eb                	jmp    c001acfe <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001ad13:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ad18:	75 17                	jne    c001ad31 <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001ad1a:	83 ec 0c             	sub    esp,0xc
c001ad1d:	68 65 f5 01 c0       	push   0xc001f565
c001ad22:	e8 5a f8 fe ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c001ad27:	83 c4 10             	add    esp,0x10
c001ad2a:	b8 01 00 00 00       	mov    eax,0x1
c001ad2f:	eb 5d                	jmp    c001ad8e <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001ad31:	b8 01 00 00 00       	mov    eax,0x1
c001ad36:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001ad3a:	c1 e2 07             	shl    edx,0x7
c001ad3d:	d3 e0                	shl    eax,cl
c001ad3f:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001ad43:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001ad49:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001ad4f:	85 c8                	test   eax,ecx
c001ad51:	74 16                	je     c001ad69 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001ad53:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001ad59:	0f ba e1 1e          	bt     ecx,0x1e
c001ad5d:	73 ea                	jae    c001ad49 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001ad5f:	83 ec 0c             	sub    esp,0xc
c001ad62:	68 73 f5 01 c0       	push   0xc001f573
c001ad67:	eb b9                	jmp    c001ad22 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001ad69:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001ad6f:	0f ba e0 1e          	bt     eax,0x1e
c001ad73:	72 b5                	jb     c001ad2a <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001ad75:	31 c0                	xor    eax,eax
c001ad77:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ad7c:	75 10                	jne    c001ad8e <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001ad7e:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001ad84:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ad88:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ad8c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ad8e:	83 c4 2c             	add    esp,0x2c
c001ad91:	5b                   	pop    ebx
c001ad92:	5e                   	pop    esi
c001ad93:	5f                   	pop    edi
c001ad94:	5d                   	pop    ebp
c001ad95:	c3                   	ret    

c001ad96 <SATA::read(unsigned long long, int, void*)>:
c001ad96:	57                   	push   edi
c001ad97:	b8 04 00 00 00       	mov    eax,0x4
c001ad9c:	56                   	push   esi
c001ad9d:	53                   	push   ebx
c001ad9e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ada2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ada6:	8d 7a ff             	lea    edi,[edx-0x1]
c001ada9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001adad:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001adb1:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001adb7:	77 25                	ja     c001adde <SATA::read(unsigned long long, int, void*)+0x48>
c001adb9:	b8 06 00 00 00       	mov    eax,0x6
c001adbe:	85 f6                	test   esi,esi
c001adc0:	74 1c                	je     c001adde <SATA::read(unsigned long long, int, void*)+0x48>
c001adc2:	50                   	push   eax
c001adc3:	50                   	push   eax
c001adc4:	6a 00                	push   0x0
c001adc6:	56                   	push   esi
c001adc7:	52                   	push   edx
c001adc8:	53                   	push   ebx
c001adc9:	51                   	push   ecx
c001adca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001adce:	e8 77 fd ff ff       	call   c001ab4a <SATA::access(unsigned long long, int, void*, bool)>
c001add3:	83 c4 20             	add    esp,0x20
c001add6:	85 c0                	test   eax,eax
c001add8:	0f 95 c0             	setne  al
c001addb:	0f b6 c0             	movzx  eax,al
c001adde:	5b                   	pop    ebx
c001addf:	5e                   	pop    esi
c001ade0:	5f                   	pop    edi
c001ade1:	c3                   	ret    

c001ade2 <SATA::write(unsigned long long, int, void*)>:
c001ade2:	55                   	push   ebp
c001ade3:	b8 04 00 00 00       	mov    eax,0x4
c001ade8:	57                   	push   edi
c001ade9:	56                   	push   esi
c001adea:	53                   	push   ebx
c001adeb:	83 ec 0c             	sub    esp,0xc
c001adee:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001adf2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001adf6:	8d 73 ff             	lea    esi,[ebx-0x1]
c001adf9:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001adfd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001ae01:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001ae07:	77 3d                	ja     c001ae46 <SATA::write(unsigned long long, int, void*)+0x64>
c001ae09:	b8 06 00 00 00       	mov    eax,0x6
c001ae0e:	85 ed                	test   ebp,ebp
c001ae10:	74 34                	je     c001ae46 <SATA::write(unsigned long long, int, void*)+0x64>
c001ae12:	c1 e3 09             	shl    ebx,0x9
c001ae15:	01 eb                	add    ebx,ebp
c001ae17:	89 d6                	mov    esi,edx
c001ae19:	89 cf                	mov    edi,ecx
c001ae1b:	83 c6 01             	add    esi,0x1
c001ae1e:	83 d7 00             	adc    edi,0x0
c001ae21:	50                   	push   eax
c001ae22:	50                   	push   eax
c001ae23:	6a 01                	push   0x1
c001ae25:	55                   	push   ebp
c001ae26:	81 c5 00 02 00 00    	add    ebp,0x200
c001ae2c:	6a 01                	push   0x1
c001ae2e:	51                   	push   ecx
c001ae2f:	52                   	push   edx
c001ae30:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ae34:	e8 11 fd ff ff       	call   c001ab4a <SATA::access(unsigned long long, int, void*, bool)>
c001ae39:	83 c4 20             	add    esp,0x20
c001ae3c:	89 f2                	mov    edx,esi
c001ae3e:	89 f9                	mov    ecx,edi
c001ae40:	39 dd                	cmp    ebp,ebx
c001ae42:	75 d3                	jne    c001ae17 <SATA::write(unsigned long long, int, void*)+0x35>
c001ae44:	31 c0                	xor    eax,eax
c001ae46:	83 c4 0c             	add    esp,0xc
c001ae49:	5b                   	pop    ebx
c001ae4a:	5e                   	pop    esi
c001ae4b:	5f                   	pop    edi
c001ae4c:	5d                   	pop    ebp
c001ae4d:	c3                   	ret    

c001ae4e <SATAPI::write(unsigned long long, int, void*)>:
c001ae4e:	b8 03 00 00 00       	mov    eax,0x3
c001ae53:	c3                   	ret    

c001ae54 <SATAPI::close(int, int, void*)>:
c001ae54:	83 ec 0c             	sub    esp,0xc
c001ae57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae5b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ae61:	85 c0                	test   eax,eax
c001ae63:	74 0c                	je     c001ae71 <SATAPI::close(int, int, void*)+0x1d>
c001ae65:	83 ec 0c             	sub    esp,0xc
c001ae68:	8b 10                	mov    edx,DWORD PTR [eax]
c001ae6a:	50                   	push   eax
c001ae6b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ae6e:	83 c4 10             	add    esp,0x10
c001ae71:	31 c0                	xor    eax,eax
c001ae73:	83 c4 0c             	add    esp,0xc
c001ae76:	c3                   	ret    
c001ae77:	90                   	nop

c001ae78 <SATAPI::SATAPI()>:
c001ae78:	83 ec 0c             	sub    esp,0xc
c001ae7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae7f:	83 ec 04             	sub    esp,0x4
c001ae82:	68 00 08 00 00       	push   0x800
c001ae87:	68 bc f5 01 c0       	push   0xc001f5bc
c001ae8c:	50                   	push   eax
c001ae8d:	e8 fc 0e ff ff       	call   c000bd8e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ae92:	83 c4 10             	add    esp,0x10
c001ae95:	ba c4 f6 01 c0       	mov    edx,0xc001f6c4
c001ae9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae9e:	89 10                	mov    DWORD PTR [eax],edx
c001aea0:	90                   	nop
c001aea1:	83 c4 0c             	add    esp,0xc
c001aea4:	c3                   	ret    
c001aea5:	90                   	nop

c001aea6 <SATAPI::diskRemoved()>:
c001aea6:	c3                   	ret    
c001aea7:	90                   	nop

c001aea8 <SATAPI::diskInserted()>:
c001aea8:	83 ec 18             	sub    esp,0x18
c001aeab:	68 c8 f5 01 c0       	push   0xc001f5c8
c001aeb0:	e8 cc f6 fe ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c001aeb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aeb9:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001aec0:	83 c4 1c             	add    esp,0x1c
c001aec3:	c3                   	ret    

c001aec4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001aec4:	55                   	push   ebp
c001aec5:	57                   	push   edi
c001aec6:	56                   	push   esi
c001aec7:	53                   	push   ebx
c001aec8:	83 ec 38             	sub    esp,0x38
c001aecb:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001aecf:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001aed3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001aed7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001aedb:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001aedf:	68 e0 f5 01 c0       	push   0xc001f5e0
c001aee4:	e8 98 f6 fe ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c001aee9:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001aeef:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001aef5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aef9:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001aeff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001af03:	83 c0 02             	add    eax,0x2
c001af06:	c1 e0 07             	shl    eax,0x7
c001af09:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001af0d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001af11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001af15:	c1 e0 07             	shl    eax,0x7
c001af18:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001af1c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001af20:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001af2a:	58                   	pop    eax
c001af2b:	5a                   	pop    edx
c001af2c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001af30:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001af36:	e8 71 ec ff ff       	call   c0019bac <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001af3b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001af3f:	83 c4 10             	add    esp,0x10
c001af42:	b8 01 00 00 00       	mov    eax,0x1
c001af47:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001af4c:	0f 84 49 02 00 00    	je     c001b19b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c001af52:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001af58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af5c:	8b 00                	mov    eax,DWORD PTR [eax]
c001af5e:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001af64:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001af6a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001af6e:	c1 e1 05             	shl    ecx,0x5
c001af71:	01 c8                	add    eax,ecx
c001af73:	8b 08                	mov    ecx,DWORD PTR [eax]
c001af75:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001af7b:	81 c9 25 00 01 00    	or     ecx,0x10025
c001af81:	89 08                	mov    DWORD PTR [eax],ecx
c001af83:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001af89:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001af8f:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001af95:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001af98:	8d 7b 40             	lea    edi,[ebx+0x40]
c001af9b:	50                   	push   eax
c001af9c:	68 90 00 00 00       	push   0x90
c001afa1:	6a 00                	push   0x0
c001afa3:	53                   	push   ebx
c001afa4:	e8 27 55 fe ff       	call   c00004d0 <memset>
c001afa9:	b9 0c 00 00 00       	mov    ecx,0xc
c001afae:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001afb2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001afb4:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001afba:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001afbe:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001afc4:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001afc8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001afcc:	48                   	dec    eax
c001afcd:	25 ff ff 3f 00       	and    eax,0x3fffff
c001afd2:	89 c1                	mov    ecx,eax
c001afd4:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001afda:	25 00 00 c0 ff       	and    eax,0xffc00000
c001afdf:	09 c8                	or     eax,ecx
c001afe1:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001afe7:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001afea:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001aff1:	66 25 00 7f          	and    ax,0x7f00
c001aff5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001aff9:	66 0d 27 80          	or     ax,0x8027
c001affd:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001b001:	66 89 03             	mov    WORD PTR [ebx],ax
c001b004:	89 d0                	mov    eax,edx
c001b006:	c1 ea 18             	shr    edx,0x18
c001b009:	c1 e8 10             	shr    eax,0x10
c001b00c:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001b00f:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001b012:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001b016:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001b019:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b01d:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001b020:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b024:	83 c4 10             	add    esp,0x10
c001b027:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001b02b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b02f:	31 c0                	xor    eax,eax
c001b031:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001b037:	80 e1 88             	and    cl,0x88
c001b03a:	74 0a                	je     c001b046 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x182>
c001b03c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b041:	74 0a                	je     c001b04d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x189>
c001b043:	40                   	inc    eax
c001b044:	eb eb                	jmp    c001b031 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16d>
c001b046:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b04b:	75 43                	jne    c001b090 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cc>
c001b04d:	83 ec 0c             	sub    esp,0xc
c001b050:	68 fa f5 01 c0       	push   0xc001f5fa
c001b055:	e8 27 f5 fe ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c001b05a:	58                   	pop    eax
c001b05b:	5a                   	pop    edx
c001b05c:	68 0f f6 01 c0       	push   0xc001f60f
c001b061:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c001b067:	e8 ca d6 fe ff       	call   c0008736 <VgaText::puts(char const*)>
c001b06c:	59                   	pop    ecx
c001b06d:	5b                   	pop    ebx
c001b06e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001b072:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b078:	e8 c9 eb ff ff       	call   c0019c46 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001b07d:	5e                   	pop    esi
c001b07e:	5f                   	pop    edi
c001b07f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001b083:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b089:	e8 98 eb ff ff       	call   c0019c26 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001b08e:	eb 48                	jmp    c001b0d8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x214>
c001b090:	be 01 00 00 00       	mov    esi,0x1
c001b095:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b099:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b09d:	d3 e6                	shl    esi,cl
c001b09f:	c1 e7 07             	shl    edi,0x7
c001b0a2:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001b0a8:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001b0ad:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001b0b1:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001b0b7:	85 c6                	test   esi,eax
c001b0b9:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001b0bf:	0f 84 a3 00 00 00    	je     c001b168 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a4>
c001b0c5:	0f ba e0 1e          	bt     eax,0x1e
c001b0c9:	73 1a                	jae    c001b0e5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x221>
c001b0cb:	83 ec 0c             	sub    esp,0xc
c001b0ce:	68 21 f6 01 c0       	push   0xc001f621
c001b0d3:	e8 a9 f4 fe ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c001b0d8:	83 c4 10             	add    esp,0x10
c001b0db:	b8 01 00 00 00       	mov    eax,0x1
c001b0e0:	e9 b6 00 00 00       	jmp    c001b19b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c001b0e5:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001b0eb:	83 f8 0d             	cmp    eax,0xd
c001b0ee:	77 0a                	ja     c001b0fa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x236>
c001b0f0:	83 ec 0c             	sub    esp,0xc
c001b0f3:	68 c8 00 00 00       	push   0xc8
c001b0f8:	eb 28                	jmp    c001b122 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25e>
c001b0fa:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001b100:	83 f8 0d             	cmp    eax,0xd
c001b103:	77 0a                	ja     c001b10f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24b>
c001b105:	83 ec 0c             	sub    esp,0xc
c001b108:	68 58 02 00 00       	push   0x258
c001b10d:	eb 13                	jmp    c001b122 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25e>
c001b10f:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001b115:	83 f8 06             	cmp    eax,0x6
c001b118:	77 10                	ja     c001b12a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x266>
c001b11a:	83 ec 0c             	sub    esp,0xc
c001b11d:	68 dc 05 00 00       	push   0x5dc
c001b122:	e8 d1 89 ff ff       	call   c0013af8 <milliTenthSleep(unsigned int)>
c001b127:	83 c4 10             	add    esp,0x10
c001b12a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001b12e:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001b131:	75 06                	jne    c001b139 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x275>
c001b133:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001b137:	74 15                	je     c001b14e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28a>
c001b139:	83 fb 06             	cmp    ebx,0x6
c001b13c:	77 10                	ja     c001b14e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28a>
c001b13e:	83 ec 0c             	sub    esp,0xc
c001b141:	68 c4 09 00 00       	push   0x9c4
c001b146:	e8 ad 89 ff ff       	call   c0013af8 <milliTenthSleep(unsigned int)>
c001b14b:	83 c4 10             	add    esp,0x10
c001b14e:	43                   	inc    ebx
c001b14f:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001b155:	0f 85 56 ff ff ff    	jne    c001b0b1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ed>
c001b15b:	83 ec 0c             	sub    esp,0xc
c001b15e:	68 34 f6 01 c0       	push   0xc001f634
c001b163:	e9 6b ff ff ff       	jmp    c001b0d3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20f>
c001b168:	0f ba e0 1e          	bt     eax,0x1e
c001b16c:	73 0d                	jae    c001b17b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b7>
c001b16e:	83 ec 0c             	sub    esp,0xc
c001b171:	68 48 f6 01 c0       	push   0xc001f648
c001b176:	e9 58 ff ff ff       	jmp    c001b0d3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20f>
c001b17b:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001b180:	74 17                	je     c001b199 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001b182:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001b187:	74 10                	je     c001b199 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001b189:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001b18f:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001b193:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001b197:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b199:	31 c0                	xor    eax,eax
c001b19b:	83 c4 2c             	add    esp,0x2c
c001b19e:	5b                   	pop    ebx
c001b19f:	5e                   	pop    esi
c001b1a0:	5f                   	pop    edi
c001b1a1:	5d                   	pop    ebp
c001b1a2:	c3                   	ret    
c001b1a3:	90                   	nop

c001b1a4 <SATAPI::eject()>:
c001b1a4:	57                   	push   edi
c001b1a5:	b9 03 00 00 00       	mov    ecx,0x3
c001b1aa:	83 ec 18             	sub    esp,0x18
c001b1ad:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b1b1:	fc                   	cld    
c001b1b2:	31 c0                	xor    eax,eax
c001b1b4:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b1b6:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001b1bb:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001b1c0:	50                   	push   eax
c001b1c1:	6a 00                	push   0x0
c001b1c3:	6a 00                	push   0x0
c001b1c5:	6a 00                	push   0x0
c001b1c7:	6a 00                	push   0x0
c001b1c9:	6a 02                	push   0x2
c001b1cb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b1cf:	50                   	push   eax
c001b1d0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b1d4:	e8 eb fc ff ff       	call   c001aec4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b1d9:	31 c0                	xor    eax,eax
c001b1db:	83 c4 38             	add    esp,0x38
c001b1de:	5f                   	pop    edi
c001b1df:	c3                   	ret    

c001b1e0 <SATAPI::detectMedia()>:
c001b1e0:	53                   	push   ebx
c001b1e1:	83 ec 14             	sub    esp,0x14
c001b1e4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b1e8:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001b1ee:	e8 81 23 ff ff       	call   c000d574 <VCache::writeWriteBuffer()>
c001b1f3:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001b1f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b1fd:	83 c4 18             	add    esp,0x18
c001b200:	5b                   	pop    ebx
c001b201:	e9 5e 23 ff ff       	jmp    c000d564 <VCache::invalidateReadBuffer()>

c001b206 <SATAPI::open(int, int, void*)>:
c001b206:	56                   	push   esi
c001b207:	53                   	push   ebx
c001b208:	51                   	push   ecx
c001b209:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b20d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b211:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001b21b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001b221:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001b22b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b22f:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001b239:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001b23f:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001b246:	e8 4a c8 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001b24b:	89 c6                	mov    esi,eax
c001b24d:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001b253:	81 c6 00 10 00 00    	add    esi,0x1000
c001b259:	e8 37 c8 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001b25e:	39 c6                	cmp    esi,eax
c001b260:	74 10                	je     c001b272 <SATAPI::open(int, int, void*)+0x6c>
c001b262:	83 ec 0c             	sub    esp,0xc
c001b265:	68 5d f6 01 c0       	push   0xc001f65d
c001b26a:	e8 94 4f ff ff       	call   c0010203 <KePanic(char const*)>
c001b26f:	83 c4 10             	add    esp,0x10
c001b272:	83 ec 0c             	sub    esp,0xc
c001b275:	6a 02                	push   0x2
c001b277:	e8 09 e0 fe ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c001b27c:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001b282:	6a 03                	push   0x3
c001b284:	50                   	push   eax
c001b285:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001b28b:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c001b291:	e8 62 e6 fe ff       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c001b296:	83 c4 14             	add    esp,0x14
c001b299:	68 74 01 00 00       	push   0x174
c001b29e:	e8 16 c5 fe ff       	call   c00077b9 <malloc>
c001b2a3:	83 c4 0c             	add    esp,0xc
c001b2a6:	89 c6                	mov    esi,eax
c001b2a8:	6a 00                	push   0x0
c001b2aa:	68 ff ff ff 7f       	push   0x7fffffff
c001b2af:	6a 00                	push   0x0
c001b2b1:	6a 00                	push   0x0
c001b2b3:	53                   	push   ebx
c001b2b4:	68 73 f6 01 c0       	push   0xc001f673
c001b2b9:	50                   	push   eax
c001b2ba:	e8 bb 17 ff ff       	call   c000ca7a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001b2bf:	83 c4 14             	add    esp,0x14
c001b2c2:	56                   	push   esi
c001b2c3:	e8 68 18 ff ff       	call   c000cb30 <LogicalDisk::assignDriveLetter()>
c001b2c8:	5a                   	pop    edx
c001b2c9:	0f be c0             	movsx  eax,al
c001b2cc:	59                   	pop    ecx
c001b2cd:	50                   	push   eax
c001b2ce:	68 c0 f4 01 c0       	push   0xc001f4c0
c001b2d3:	e8 a9 f2 fe ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c001b2d8:	58                   	pop    eax
c001b2d9:	5a                   	pop    edx
c001b2da:	56                   	push   esi
c001b2db:	53                   	push   ebx
c001b2dc:	e8 df 06 ff ff       	call   c000b9c0 <Device::addChild(Device*)>
c001b2e1:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001b2e7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b2ea:	e8 07 0b ff ff       	call   c000bdf6 <PhysicalDisk::startCache()>
c001b2ef:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001b2f6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b2f9:	e8 e2 fe ff ff       	call   c001b1e0 <SATAPI::detectMedia()>
c001b2fe:	83 c4 14             	add    esp,0x14
c001b301:	31 c0                	xor    eax,eax
c001b303:	5b                   	pop    ebx
c001b304:	5e                   	pop    esi
c001b305:	c3                   	ret    

c001b306 <SATAPI::read(unsigned long long, int, void*)>:
c001b306:	57                   	push   edi
c001b307:	56                   	push   esi
c001b308:	53                   	push   ebx
c001b309:	83 ec 3c             	sub    esp,0x3c
c001b30c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b310:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001b314:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001b318:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001b31c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b320:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b324:	68 81 f6 01 c0       	push   0xc001f681
c001b329:	e8 53 f2 fe ff       	call   c000a581 <Dbg::kprintf(char const*, ...)>
c001b32e:	83 c4 10             	add    esp,0x10
c001b331:	83 fe 04             	cmp    esi,0x4
c001b334:	7e 10                	jle    c001b346 <SATAPI::read(unsigned long long, int, void*)+0x40>
c001b336:	83 ec 0c             	sub    esp,0xc
c001b339:	68 92 f6 01 c0       	push   0xc001f692
c001b33e:	e8 c0 4e ff ff       	call   c0010203 <KePanic(char const*)>
c001b343:	83 c4 10             	add    esp,0x10
c001b346:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001b34c:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001b352:	51                   	push   ecx
c001b353:	50                   	push   eax
c001b354:	83 c0 02             	add    eax,0x2
c001b357:	c1 e0 07             	shl    eax,0x7
c001b35a:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001b360:	50                   	push   eax
c001b361:	52                   	push   edx
c001b362:	e8 09 e9 ff ff       	call   c0019c70 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b367:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001b36b:	b9 03 00 00 00       	mov    ecx,0x3
c001b370:	fc                   	cld    
c001b371:	31 c0                	xor    eax,eax
c001b373:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b375:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001b37a:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001b37f:	83 c4 0c             	add    esp,0xc
c001b382:	6a 00                	push   0x0
c001b384:	6a 00                	push   0x0
c001b386:	6a 00                	push   0x0
c001b388:	6a 00                	push   0x0
c001b38a:	6a 02                	push   0x2
c001b38c:	8d 44 24 30          	lea    eax,[esp+0x30]
c001b390:	50                   	push   eax
c001b391:	53                   	push   ebx
c001b392:	e8 2d fb ff ff       	call   c001aec4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b397:	83 c4 20             	add    esp,0x20
c001b39a:	85 c0                	test   eax,eax
c001b39c:	75 44                	jne    c001b3e2 <SATAPI::read(unsigned long long, int, void*)+0xdc>
c001b39e:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001b3a2:	b9 03 00 00 00       	mov    ecx,0x3
c001b3a7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b3a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b3ad:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001b3b2:	0f c8                	bswap  eax
c001b3b4:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001b3b8:	89 f0                	mov    eax,esi
c001b3ba:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b3be:	50                   	push   eax
c001b3bf:	56                   	push   esi
c001b3c0:	c1 e6 0b             	shl    esi,0xb
c001b3c3:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b3c7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b3cb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b3cf:	56                   	push   esi
c001b3d0:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001b3d4:	50                   	push   eax
c001b3d5:	53                   	push   ebx
c001b3d6:	e8 e9 fa ff ff       	call   c001aec4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b3db:	83 c4 20             	add    esp,0x20
c001b3de:	85 c0                	test   eax,eax
c001b3e0:	74 14                	je     c001b3f6 <SATAPI::read(unsigned long long, int, void*)+0xf0>
c001b3e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b3e6:	83 ec 0c             	sub    esp,0xc
c001b3e9:	53                   	push   ebx
c001b3ea:	e8 f1 fd ff ff       	call   c001b1e0 <SATAPI::detectMedia()>
c001b3ef:	83 c4 10             	add    esp,0x10
c001b3f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b3f6:	83 c4 30             	add    esp,0x30
c001b3f9:	5b                   	pop    ebx
c001b3fa:	5e                   	pop    esi
c001b3fb:	5f                   	pop    edi
c001b3fc:	c3                   	ret    
c001b3fd:	90                   	nop

c001b3fe <IOAPIC::close(int, int, void*)>:
c001b3fe:	b8 00 00 00 00       	mov    eax,0x0
c001b403:	c3                   	ret    

c001b404 <apicGetBase()>:
c001b404:	55                   	push   ebp
c001b405:	89 e5                	mov    ebp,esp
c001b407:	83 ec 18             	sub    esp,0x18
c001b40a:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001b40f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001b415:	83 e0 08             	and    eax,0x8
c001b418:	84 c0                	test   al,al
c001b41a:	75 07                	jne    c001b423 <apicGetBase()+0x1f>
c001b41c:	b8 00 00 00 00       	mov    eax,0x0
c001b421:	eb 21                	jmp    c001b444 <apicGetBase()+0x40>
c001b423:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001b428:	83 ec 08             	sub    esp,0x8
c001b42b:	6a 1b                	push   0x1b
c001b42d:	50                   	push   eax
c001b42e:	e8 bf b9 fe ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c001b433:	83 c4 10             	add    esp,0x10
c001b436:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b439:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001b43c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b43f:	25 00 00 ff ff       	and    eax,0xffff0000
c001b444:	c9                   	leave  
c001b445:	c3                   	ret    

c001b446 <IOAPIC::IOAPIC()>:
c001b446:	83 ec 0c             	sub    esp,0xc
c001b449:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b44d:	83 ec 08             	sub    esp,0x8
c001b450:	68 f4 f6 01 c0       	push   0xc001f6f4
c001b455:	50                   	push   eax
c001b456:	e8 fd 06 ff ff       	call   c000bb58 <Device::Device(char const*)>
c001b45b:	83 c4 10             	add    esp,0x10
c001b45e:	ba 04 f7 01 c0       	mov    edx,0xc001f704
c001b463:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b467:	89 10                	mov    DWORD PTR [eax],edx
c001b469:	90                   	nop
c001b46a:	83 c4 0c             	add    esp,0xc
c001b46d:	c3                   	ret    

c001b46e <apicOpen()>:
c001b46e:	55                   	push   ebp
c001b46f:	89 e5                	mov    ebp,esp
c001b471:	53                   	push   ebx
c001b472:	83 ec 34             	sub    esp,0x34
c001b475:	a0 a0 5b 02 c0       	mov    al,ds:0xc0025ba0
c001b47a:	83 f0 01             	xor    eax,0x1
c001b47d:	84 c0                	test   al,al
c001b47f:	0f 84 9d 00 00 00    	je     c001b522 <apicOpen()+0xb4>
c001b485:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001b489:	a0 80 47 02 c0       	mov    al,ds:0xc0024780
c001b48e:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001b491:	0f 83 84 00 00 00    	jae    c001b51b <apicOpen()+0xad>
c001b497:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001b49e:	83 ec 0c             	sub    esp,0xc
c001b4a1:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001b4a4:	e8 10 c3 fe ff       	call   c00077b9 <malloc>
c001b4a9:	83 c4 10             	add    esp,0x10
c001b4ac:	89 c3                	mov    ebx,eax
c001b4ae:	83 ec 0c             	sub    esp,0xc
c001b4b1:	53                   	push   ebx
c001b4b2:	e8 8f ff ff ff       	call   c001b446 <IOAPIC::IOAPIC()>
c001b4b7:	83 c4 10             	add    esp,0x10
c001b4ba:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001b4bd:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b4c0:	25 ff 00 00 00       	and    eax,0xff
c001b4c5:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001b4c8:	89 14 85 80 5b 02 c0 	mov    DWORD PTR [eax*4-0x3ffda480],edx
c001b4cf:	a1 60 5b 02 c0       	mov    eax,ds:0xc0025b60
c001b4d4:	40                   	inc    eax
c001b4d5:	a3 60 5b 02 c0       	mov    ds:0xc0025b60,eax
c001b4da:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001b4df:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001b4e5:	83 ec 08             	sub    esp,0x8
c001b4e8:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b4eb:	50                   	push   eax
c001b4ec:	e8 cf 04 ff ff       	call   c000b9c0 <Device::addChild(Device*)>
c001b4f1:	83 c4 10             	add    esp,0x10
c001b4f4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b4f7:	8b 00                	mov    eax,DWORD PTR [eax]
c001b4f9:	83 c0 08             	add    eax,0x8
c001b4fc:	8b 10                	mov    edx,DWORD PTR [eax]
c001b4fe:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b501:	25 ff 00 00 00       	and    eax,0xff
c001b506:	6a 00                	push   0x0
c001b508:	6a 00                	push   0x0
c001b50a:	50                   	push   eax
c001b50b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b50e:	ff d2                	call   edx
c001b510:	83 c4 10             	add    esp,0x10
c001b513:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001b516:	e9 6e ff ff ff       	jmp    c001b489 <apicOpen()+0x1b>
c001b51b:	c6 05 a0 5b 02 c0 01 	mov    BYTE PTR ds:0xc0025ba0,0x1
c001b522:	e8 dd fe ff ff       	call   c001b404 <apicGetBase()>
c001b527:	05 f0 00 00 00       	add    eax,0xf0
c001b52c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b52f:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b532:	8b 00                	mov    eax,DWORD PTR [eax]
c001b534:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001b537:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001b53e:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001b545:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b548:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001b54b:	89 10                	mov    DWORD PTR [eax],edx
c001b54d:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001b554:	a1 d0 46 02 c0       	mov    eax,ds:0xc00246d0
c001b559:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001b55c:	7d 70                	jge    c001b5ce <apicOpen()+0x160>
c001b55e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b561:	8b 04 85 e0 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb920]
c001b568:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001b56b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b56e:	8b 04 85 e0 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb920]
c001b575:	c1 e8 08             	shr    eax,0x8
c001b578:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001b57c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b57f:	8b 04 85 e0 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb920]
c001b586:	c1 e8 18             	shr    eax,0x18
c001b589:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001b58c:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001b590:	75 37                	jne    c001b5c9 <apicOpen()+0x15b>
c001b592:	e8 6d fe ff ff       	call   c001b404 <apicGetBase()>
c001b597:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001b59b:	75 07                	jne    c001b5a4 <apicOpen()+0x136>
c001b59d:	ba 60 03 00 00       	mov    edx,0x360
c001b5a2:	eb 05                	jmp    c001b5a9 <apicOpen()+0x13b>
c001b5a4:	ba 50 03 00 00       	mov    edx,0x350
c001b5a9:	01 d0                	add    eax,edx
c001b5ab:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b5ae:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b5b1:	8b 00                	mov    eax,DWORD PTR [eax]
c001b5b3:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001b5b6:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001b5bd:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001b5c1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b5c4:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001b5c7:	89 10                	mov    DWORD PTR [eax],edx
c001b5c9:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001b5cc:	eb 86                	jmp    c001b554 <apicOpen()+0xe6>
c001b5ce:	90                   	nop
c001b5cf:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b5d2:	c9                   	leave  
c001b5d3:	c3                   	ret    

c001b5d4 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001b5d4:	55                   	push   ebp
c001b5d5:	89 e5                	mov    ebp,esp
c001b5d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b5da:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b5e0:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b5e3:	72 1d                	jb     c001b602 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b5e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b5e8:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001b5ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b5f1:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001b5f7:	01 d0                	add    eax,edx
c001b5f9:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b5fc:	73 04                	jae    c001b602 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b5fe:	b0 01                	mov    al,0x1
c001b600:	eb 02                	jmp    c001b604 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001b602:	b0 00                	mov    al,0x0
c001b604:	5d                   	pop    ebp
c001b605:	c3                   	ret    

c001b606 <IOAPIC::read(int)>:
c001b606:	55                   	push   ebp
c001b607:	89 e5                	mov    ebp,esp
c001b609:	83 ec 10             	sub    esp,0x10
c001b60c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b60f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b615:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b618:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b61b:	31 d2                	xor    edx,edx
c001b61d:	88 c2                	mov    dl,al
c001b61f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b622:	89 10                	mov    DWORD PTR [eax],edx
c001b624:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b627:	83 c0 10             	add    eax,0x10
c001b62a:	8b 00                	mov    eax,DWORD PTR [eax]
c001b62c:	c9                   	leave  
c001b62d:	c3                   	ret    

c001b62e <IOAPIC::open(int, int, void*)>:
c001b62e:	55                   	push   ebp
c001b62f:	89 e5                	mov    ebp,esp
c001b631:	57                   	push   edi
c001b632:	56                   	push   esi
c001b633:	53                   	push   ebx
c001b634:	83 ec 04             	sub    esp,0x4
c001b637:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b63a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001b63d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b643:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b646:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b64c:	8b 14 85 c0 47 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb840]
c001b653:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b656:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b65c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b65f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b665:	8b 14 85 40 48 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb7c0]
c001b66c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b66f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001b675:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b678:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b67e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b681:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b687:	89 c6                	mov    esi,eax
c001b689:	81 e6 ff 00 00 00    	and    esi,0xff
c001b68f:	89 d0                	mov    eax,edx
c001b691:	ba 00 00 00 00       	mov    edx,0x0
c001b696:	89 c7                	mov    edi,eax
c001b698:	83 e7 ff             	and    edi,0xffffffff
c001b69b:	89 f9                	mov    ecx,edi
c001b69d:	89 d0                	mov    eax,edx
c001b69f:	25 ff 00 00 00       	and    eax,0xff
c001b6a4:	89 c3                	mov    ebx,eax
c001b6a6:	89 c8                	mov    eax,ecx
c001b6a8:	89 da                	mov    edx,ebx
c001b6aa:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b6ad:	8d 5e 08             	lea    ebx,[esi+0x8]
c001b6b0:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001b6b4:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001b6b8:	83 e0 00             	and    eax,0x0
c001b6bb:	09 d0                	or     eax,edx
c001b6bd:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001b6c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6c4:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b6ca:	8d 50 01             	lea    edx,[eax+0x1]
c001b6cd:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b6d0:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001b6d6:	31 d2                	xor    edx,edx
c001b6d8:	88 c2                	mov    dl,al
c001b6da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6dd:	83 c2 08             	add    edx,0x8
c001b6e0:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001b6e4:	81 e1 ff 00 00 00    	and    ecx,0xff
c001b6ea:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001b6f0:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001b6f4:	6a 01                	push   0x1
c001b6f6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b6f9:	e8 08 ff ff ff       	call   c001b606 <IOAPIC::read(int)>
c001b6fe:	83 c4 08             	add    esp,0x8
c001b701:	c1 f8 10             	sar    eax,0x10
c001b704:	25 ff 00 00 00       	and    eax,0xff
c001b709:	8d 50 01             	lea    edx,[eax+0x1]
c001b70c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b70f:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001b715:	b8 00 00 00 00       	mov    eax,0x0
c001b71a:	8d 65 f4             	lea    esp,[ebp-0xc]
c001b71d:	5b                   	pop    ebx
c001b71e:	5e                   	pop    esi
c001b71f:	5f                   	pop    edi
c001b720:	5d                   	pop    ebp
c001b721:	c3                   	ret    

c001b722 <IOAPIC::write(int, int)>:
c001b722:	55                   	push   ebp
c001b723:	89 e5                	mov    ebp,esp
c001b725:	83 ec 10             	sub    esp,0x10
c001b728:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b72b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b731:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b734:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b737:	31 d2                	xor    edx,edx
c001b739:	88 c2                	mov    dl,al
c001b73b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b73e:	89 10                	mov    DWORD PTR [eax],edx
c001b740:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b743:	8d 50 10             	lea    edx,[eax+0x10]
c001b746:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b749:	89 02                	mov    DWORD PTR [edx],eax
c001b74b:	90                   	nop
c001b74c:	c9                   	leave  
c001b74d:	c3                   	ret    

c001b74e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001b74e:	55                   	push   ebp
c001b74f:	89 e5                	mov    ebp,esp
c001b751:	53                   	push   ebx
c001b752:	83 ec 2c             	sub    esp,0x2c
c001b755:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b758:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001b75b:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001b75e:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001b761:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001b764:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b767:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b76a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001b76d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001b770:	88 d8                	mov    al,bl
c001b772:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001b775:	88 c8                	mov    al,cl
c001b777:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001b77a:	88 d0                	mov    al,dl
c001b77c:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001b77f:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b782:	25 ff 00 00 00       	and    eax,0xff
c001b787:	83 c0 08             	add    eax,0x8
c001b78a:	01 c0                	add    eax,eax
c001b78c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b78f:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b792:	25 ff 00 00 00       	and    eax,0xff
c001b797:	83 c0 08             	add    eax,0x8
c001b79a:	01 c0                	add    eax,eax
c001b79c:	40                   	inc    eax
c001b79d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001b7a0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b7a3:	50                   	push   eax
c001b7a4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b7a7:	e8 5a fe ff ff       	call   c001b606 <IOAPIC::read(int)>
c001b7ac:	83 c4 08             	add    esp,0x8
c001b7af:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b7b2:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001b7b9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b7bc:	c1 e0 18             	shl    eax,0x18
c001b7bf:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001b7c2:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001b7c5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b7c8:	52                   	push   edx
c001b7c9:	50                   	push   eax
c001b7ca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b7cd:	e8 50 ff ff ff       	call   c001b722 <IOAPIC::write(int, int)>
c001b7d2:	83 c4 0c             	add    esp,0xc
c001b7d5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b7d8:	50                   	push   eax
c001b7d9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b7dc:	e8 25 fe ff ff       	call   c001b606 <IOAPIC::read(int)>
c001b7e1:	83 c4 08             	add    esp,0x8
c001b7e4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001b7e7:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001b7ee:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001b7f5:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001b7fc:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001b800:	74 09                	je     c001b80b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001b802:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001b809:	eb 07                	jmp    c001b812 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001b80b:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001b812:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001b816:	74 09                	je     c001b821 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001b818:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001b81f:	eb 07                	jmp    c001b828 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001b821:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001b828:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001b82f:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001b832:	25 ff 00 00 00       	and    eax,0xff
c001b837:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001b83a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001b83d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b840:	52                   	push   edx
c001b841:	50                   	push   eax
c001b842:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b845:	e8 d8 fe ff ff       	call   c001b722 <IOAPIC::write(int, int)>
c001b84a:	83 c4 0c             	add    esp,0xc
c001b84d:	90                   	nop
c001b84e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b851:	c9                   	leave  
c001b852:	c3                   	ret    
c001b853:	90                   	nop

c001b854 <APICTimer::close(int, int, void*)>:
c001b854:	b8 00 00 00 00       	mov    eax,0x0
c001b859:	c3                   	ret    
c001b85a:	66 90                	xchg   ax,ax

c001b85c <apicTimerHandler(regs*, void*)>:
c001b85c:	83 ec 0c             	sub    esp,0xc
c001b85f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b863:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b865:	b8 10 27 00 00       	mov    eax,0x2710
c001b86a:	ba 00 00 00 00       	mov    edx,0x0
c001b86f:	f7 f1                	div    ecx
c001b871:	83 ec 0c             	sub    esp,0xc
c001b874:	50                   	push   eax
c001b875:	e8 1a 1a ff ff       	call   c000d294 <timerHandler(unsigned int)>
c001b87a:	83 c4 10             	add    esp,0x10
c001b87d:	90                   	nop
c001b87e:	83 c4 0c             	add    esp,0xc
c001b881:	c3                   	ret    
c001b882:	66 90                	xchg   ax,ax

c001b884 <APICTimer::open(int, int, void*)>:
c001b884:	83 ec 0c             	sub    esp,0xc
c001b887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b88b:	8b 00                	mov    eax,DWORD PTR [eax]
c001b88d:	83 c0 24             	add    eax,0x24
c001b890:	8b 00                	mov    eax,DWORD PTR [eax]
c001b892:	83 ec 08             	sub    esp,0x8
c001b895:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b899:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b89d:	ff d0                	call   eax
c001b89f:	83 c4 10             	add    esp,0x10
c001b8a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8a6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b8aa:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b8b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8b4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b8b8:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001b8be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b8c2:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b8c8:	83 ec 0c             	sub    esp,0xc
c001b8cb:	51                   	push   ecx
c001b8cc:	6a 01                	push   0x1
c001b8ce:	68 5c b8 01 c0       	push   0xc001b85c
c001b8d3:	52                   	push   edx
c001b8d4:	50                   	push   eax
c001b8d5:	e8 92 00 ff ff       	call   c000b96c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b8da:	83 c4 20             	add    esp,0x20
c001b8dd:	89 c2                	mov    edx,eax
c001b8df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8e3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b8e9:	b8 00 00 00 00       	mov    eax,0x0
c001b8ee:	83 c4 0c             	add    esp,0xc
c001b8f1:	c3                   	ret    
c001b8f2:	66 90                	xchg   ax,ax

c001b8f4 <APICTimer::write(int)>:
c001b8f4:	83 ec 0c             	sub    esp,0xc
c001b8f7:	83 ec 0c             	sub    esp,0xc
c001b8fa:	68 28 f7 01 c0       	push   0xc001f728
c001b8ff:	e8 ff 48 ff ff       	call   c0010203 <KePanic(char const*)>
c001b904:	83 c4 10             	add    esp,0x10
c001b907:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b90b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b90f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b915:	90                   	nop
c001b916:	83 c4 0c             	add    esp,0xc
c001b919:	c3                   	ret    
c001b91a:	66 90                	xchg   ax,ax

c001b91c <APICTimer::APICTimer()>:
c001b91c:	83 ec 0c             	sub    esp,0xc
c001b91f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b923:	83 ec 08             	sub    esp,0x8
c001b926:	68 38 f7 01 c0       	push   0xc001f738
c001b92b:	50                   	push   eax
c001b92c:	e8 97 18 ff ff       	call   c000d1c8 <Timer::Timer(char const*)>
c001b931:	83 c4 10             	add    esp,0x10
c001b934:	ba 4c f7 01 c0       	mov    edx,0xc001f74c
c001b939:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b93d:	89 10                	mov    DWORD PTR [eax],edx
c001b93f:	90                   	nop
c001b940:	83 c4 0c             	add    esp,0xc
c001b943:	c3                   	ret    

c001b944 <PIT::write(int)>:
c001b944:	83 ec 10             	sub    esp,0x10
c001b947:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b94b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b94f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b955:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b959:	a3 a4 5b 02 c0       	mov    ds:0xc0025ba4,eax
c001b95e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001b963:	99                   	cdq    
c001b964:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001b968:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b96c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001b973:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001b978:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001b97c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001b981:	ee                   	out    dx,al
c001b982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b986:	25 ff 00 00 00       	and    eax,0xff
c001b98b:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001b992:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001b996:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001b99a:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001b99f:	ee                   	out    dx,al
c001b9a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9a4:	c1 f8 08             	sar    eax,0x8
c001b9a7:	25 ff 00 00 00       	and    eax,0xff
c001b9ac:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001b9b3:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b9b7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b9bb:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001b9c0:	ee                   	out    dx,al
c001b9c1:	90                   	nop
c001b9c2:	83 c4 10             	add    esp,0x10
c001b9c5:	c3                   	ret    
c001b9c6:	66 90                	xchg   ax,ax

c001b9c8 <pitHandler(regs*, void*)>:
c001b9c8:	83 ec 0c             	sub    esp,0xc
c001b9cb:	8b 0d a4 5b 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ba4
c001b9d1:	b8 10 27 00 00       	mov    eax,0x2710
c001b9d6:	99                   	cdq    
c001b9d7:	f7 f9                	idiv   ecx
c001b9d9:	83 ec 0c             	sub    esp,0xc
c001b9dc:	50                   	push   eax
c001b9dd:	e8 b2 18 ff ff       	call   c000d294 <timerHandler(unsigned int)>
c001b9e2:	83 c4 10             	add    esp,0x10
c001b9e5:	90                   	nop
c001b9e6:	83 c4 0c             	add    esp,0xc
c001b9e9:	c3                   	ret    
c001b9ea:	66 90                	xchg   ax,ax

c001b9ec <PIT::open(int, int, void*)>:
c001b9ec:	83 ec 0c             	sub    esp,0xc
c001b9ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9f3:	8b 00                	mov    eax,DWORD PTR [eax]
c001b9f5:	83 c0 24             	add    eax,0x24
c001b9f8:	8b 00                	mov    eax,DWORD PTR [eax]
c001b9fa:	83 ec 08             	sub    esp,0x8
c001b9fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba01:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba05:	ff d0                	call   eax
c001ba07:	83 c4 10             	add    esp,0x10
c001ba0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba0e:	83 ec 0c             	sub    esp,0xc
c001ba11:	6a 00                	push   0x0
c001ba13:	6a 01                	push   0x1
c001ba15:	68 c8 b9 01 c0       	push   0xc001b9c8
c001ba1a:	6a 00                	push   0x0
c001ba1c:	50                   	push   eax
c001ba1d:	e8 4a ff fe ff       	call   c000b96c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ba22:	83 c4 20             	add    esp,0x20
c001ba25:	89 c2                	mov    edx,eax
c001ba27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba2b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ba31:	b8 00 00 00 00       	mov    eax,0x0
c001ba36:	83 c4 0c             	add    esp,0xc
c001ba39:	c3                   	ret    
c001ba3a:	66 90                	xchg   ax,ax

c001ba3c <PIT::close(int, int, void*)>:
c001ba3c:	83 ec 0c             	sub    esp,0xc
c001ba3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba43:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001ba4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba51:	6a 01                	push   0x1
c001ba53:	68 c8 b9 01 c0       	push   0xc001b9c8
c001ba58:	6a 00                	push   0x0
c001ba5a:	50                   	push   eax
c001ba5b:	e8 42 ff fe ff       	call   c000b9a2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001ba60:	83 c4 10             	add    esp,0x10
c001ba63:	b8 00 00 00 00       	mov    eax,0x0
c001ba68:	83 c4 0c             	add    esp,0xc
c001ba6b:	c3                   	ret    

c001ba6c <PIT::PIT()>:
c001ba6c:	83 ec 0c             	sub    esp,0xc
c001ba6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba73:	83 ec 08             	sub    esp,0x8
c001ba76:	68 74 f7 01 c0       	push   0xc001f774
c001ba7b:	50                   	push   eax
c001ba7c:	e8 47 17 ff ff       	call   c000d1c8 <Timer::Timer(char const*)>
c001ba81:	83 c4 10             	add    esp,0x10
c001ba84:	ba 9c f7 01 c0       	mov    edx,0xc001f79c
c001ba89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba8d:	89 10                	mov    DWORD PTR [eax],edx
c001ba8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba93:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ba99:	31 d2                	xor    edx,edx
c001ba9b:	88 c2                	mov    dl,al
c001ba9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001baa1:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001baa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001baac:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bab2:	31 d2                	xor    edx,edx
c001bab4:	88 c2                	mov    dl,al
c001bab6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001baba:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001babf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bac3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bac9:	8d 50 01             	lea    edx,[eax+0x1]
c001bacc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bad0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001bad6:	31 d2                	xor    edx,edx
c001bad8:	88 c2                	mov    dl,al
c001bada:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bade:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001bae2:	83 e1 3f             	and    ecx,0x3f
c001bae5:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001bae9:	90                   	nop
c001baea:	83 c4 0c             	add    esp,0xc
c001baed:	c3                   	ret    
c001baee:	66 90                	xchg   ax,ax

c001baf0 <avxDetect>:
c001baf0:	b8 01 00 00 00       	mov    eax,0x1
c001baf5:	0f a2                	cpuid  
c001baf7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001bafd:	74 15                	je     c001bb14 <avxDetect.noAVX>
c001baff:	b8 01 00 00 00       	mov    eax,0x1
c001bb04:	0f a2                	cpuid  
c001bb06:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001bb0c:	74 06                	je     c001bb14 <avxDetect.noAVX>
c001bb0e:	b8 01 00 00 00       	mov    eax,0x1
c001bb13:	c3                   	ret    

c001bb14 <avxDetect.noAVX>:
c001bb14:	b8 00 00 00 00       	mov    eax,0x0
c001bb19:	c3                   	ret    

c001bb1a <avxSave>:
c001bb1a:	53                   	push   ebx
c001bb1b:	52                   	push   edx
c001bb1c:	31 c0                	xor    eax,eax
c001bb1e:	48                   	dec    eax
c001bb1f:	89 c2                	mov    edx,eax
c001bb21:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bb25:	0f ae 23             	xsave  [ebx]
c001bb28:	5a                   	pop    edx
c001bb29:	5b                   	pop    ebx
c001bb2a:	c3                   	ret    

c001bb2b <avxLoad>:
c001bb2b:	53                   	push   ebx
c001bb2c:	52                   	push   edx
c001bb2d:	31 c0                	xor    eax,eax
c001bb2f:	48                   	dec    eax
c001bb30:	89 c2                	mov    edx,eax
c001bb32:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bb36:	0f ae 2b             	xrstor [ebx]
c001bb39:	5a                   	pop    edx
c001bb3a:	5b                   	pop    ebx
c001bb3b:	c3                   	ret    

c001bb3c <avxInit>:
c001bb3c:	e8 b7 02 00 00       	call   c001bdf8 <sseInit>
c001bb41:	50                   	push   eax
c001bb42:	51                   	push   ecx
c001bb43:	0f 20 e0             	mov    eax,cr4
c001bb46:	0d 00 00 04 00       	or     eax,0x40000
c001bb4b:	0f 22 e0             	mov    cr4,eax
c001bb4e:	31 c9                	xor    ecx,ecx
c001bb50:	0f 01 d0             	xgetbv 
c001bb53:	0d 07 00 00 00       	or     eax,0x7
c001bb58:	0f 01 d1             	xsetbv 
c001bb5b:	59                   	pop    ecx
c001bb5c:	58                   	pop    eax
c001bb5d:	c3                   	ret    

c001bb5e <avxClose>:
c001bb5e:	c3                   	ret    

c001bb5f <wouldSheSayYes>:
c001bb5f:	c3                   	ret    
c001bb60:	49                   	dec    ecx
c001bb61:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001bb65:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001bb69:	75 20                	jne    c001bb8b <isr0+0xb>
c001bb6b:	4e                   	dec    esi
c001bb6c:	79 61                	jns    c001bbcf <isr7+0x3>
c001bb6e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001bb73:	66 90                	xchg   ax,ax
c001bb75:	66 90                	xchg   ax,ax
c001bb77:	66 90                	xchg   ax,ax
c001bb79:	66 90                	xchg   ax,ax
c001bb7b:	66 90                	xchg   ax,ax
c001bb7d:	66 90                	xchg   ax,ax
c001bb7f:	90                   	nop

c001bb80 <isr0>:
c001bb80:	fa                   	cli    
c001bb81:	68 00 00 00 00       	push   0x0
c001bb86:	68 00 00 00 00       	push   0x0
c001bb8b:	e9 44 01 00 00       	jmp    c001bcd4 <int_common_stub>

c001bb90 <isr1>:
c001bb90:	fa                   	cli    
c001bb91:	6a 00                	push   0x0
c001bb93:	6a 01                	push   0x1
c001bb95:	e9 3a 01 00 00       	jmp    c001bcd4 <int_common_stub>

c001bb9a <isr2>:
c001bb9a:	fa                   	cli    
c001bb9b:	6a 00                	push   0x0
c001bb9d:	6a 02                	push   0x2
c001bb9f:	e9 30 01 00 00       	jmp    c001bcd4 <int_common_stub>

c001bba4 <isr3>:
c001bba4:	fa                   	cli    
c001bba5:	6a 00                	push   0x0
c001bba7:	6a 03                	push   0x3
c001bba9:	e9 26 01 00 00       	jmp    c001bcd4 <int_common_stub>

c001bbae <isr4>:
c001bbae:	fa                   	cli    
c001bbaf:	6a 00                	push   0x0
c001bbb1:	6a 04                	push   0x4
c001bbb3:	e9 1c 01 00 00       	jmp    c001bcd4 <int_common_stub>

c001bbb8 <isr5>:
c001bbb8:	fa                   	cli    
c001bbb9:	6a 00                	push   0x0
c001bbbb:	6a 05                	push   0x5
c001bbbd:	e9 12 01 00 00       	jmp    c001bcd4 <int_common_stub>

c001bbc2 <isr6>:
c001bbc2:	fa                   	cli    
c001bbc3:	6a 00                	push   0x0
c001bbc5:	6a 06                	push   0x6
c001bbc7:	e9 08 01 00 00       	jmp    c001bcd4 <int_common_stub>

c001bbcc <isr7>:
c001bbcc:	fa                   	cli    
c001bbcd:	6a 00                	push   0x0
c001bbcf:	6a 07                	push   0x7
c001bbd1:	e9 fe 00 00 00       	jmp    c001bcd4 <int_common_stub>

c001bbd6 <isr8>:
c001bbd6:	fa                   	cli    
c001bbd7:	6a 08                	push   0x8
c001bbd9:	e9 f6 00 00 00       	jmp    c001bcd4 <int_common_stub>

c001bbde <isr9>:
c001bbde:	fa                   	cli    
c001bbdf:	6a 00                	push   0x0
c001bbe1:	6a 09                	push   0x9
c001bbe3:	e9 ec 00 00 00       	jmp    c001bcd4 <int_common_stub>

c001bbe8 <isr10>:
c001bbe8:	fa                   	cli    
c001bbe9:	6a 0a                	push   0xa
c001bbeb:	e9 e4 00 00 00       	jmp    c001bcd4 <int_common_stub>

c001bbf0 <isr11>:
c001bbf0:	fa                   	cli    
c001bbf1:	6a 0b                	push   0xb
c001bbf3:	e9 dc 00 00 00       	jmp    c001bcd4 <int_common_stub>

c001bbf8 <isr12>:
c001bbf8:	fa                   	cli    
c001bbf9:	6a 0c                	push   0xc
c001bbfb:	e9 d4 00 00 00       	jmp    c001bcd4 <int_common_stub>

c001bc00 <isr13>:
c001bc00:	fa                   	cli    
c001bc01:	6a 0d                	push   0xd
c001bc03:	e9 cc 00 00 00       	jmp    c001bcd4 <int_common_stub>

c001bc08 <isr14>:
c001bc08:	fa                   	cli    
c001bc09:	6a 0e                	push   0xe
c001bc0b:	e9 c4 00 00 00       	jmp    c001bcd4 <int_common_stub>

c001bc10 <isr15>:
c001bc10:	fa                   	cli    
c001bc11:	6a 00                	push   0x0
c001bc13:	6a 0f                	push   0xf
c001bc15:	e9 ba 00 00 00       	jmp    c001bcd4 <int_common_stub>

c001bc1a <isr16>:
c001bc1a:	fa                   	cli    
c001bc1b:	6a 00                	push   0x0
c001bc1d:	6a 10                	push   0x10
c001bc1f:	e9 b0 00 00 00       	jmp    c001bcd4 <int_common_stub>

c001bc24 <isr17>:
c001bc24:	fa                   	cli    
c001bc25:	6a 00                	push   0x0
c001bc27:	6a 11                	push   0x11
c001bc29:	e9 a6 00 00 00       	jmp    c001bcd4 <int_common_stub>

c001bc2e <isr18>:
c001bc2e:	fa                   	cli    
c001bc2f:	6a 00                	push   0x0
c001bc31:	6a 12                	push   0x12
c001bc33:	e9 9c 00 00 00       	jmp    c001bcd4 <int_common_stub>

c001bc38 <irq3>:
c001bc38:	fa                   	cli    
c001bc39:	6a 00                	push   0x0
c001bc3b:	6a 23                	push   0x23
c001bc3d:	e9 92 00 00 00       	jmp    c001bcd4 <int_common_stub>

c001bc42 <irq4>:
c001bc42:	fa                   	cli    
c001bc43:	6a 00                	push   0x0
c001bc45:	6a 24                	push   0x24
c001bc47:	e9 88 00 00 00       	jmp    c001bcd4 <int_common_stub>

c001bc4c <irq5>:
c001bc4c:	fa                   	cli    
c001bc4d:	6a 00                	push   0x0
c001bc4f:	6a 25                	push   0x25
c001bc51:	e9 7e 00 00 00       	jmp    c001bcd4 <int_common_stub>

c001bc56 <irq6>:
c001bc56:	fa                   	cli    
c001bc57:	6a 00                	push   0x0
c001bc59:	6a 26                	push   0x26
c001bc5b:	e9 74 00 00 00       	jmp    c001bcd4 <int_common_stub>

c001bc60 <irq7>:
c001bc60:	fa                   	cli    
c001bc61:	6a 00                	push   0x0
c001bc63:	6a 27                	push   0x27
c001bc65:	e9 6a 00 00 00       	jmp    c001bcd4 <int_common_stub>

c001bc6a <irq8>:
c001bc6a:	fa                   	cli    
c001bc6b:	6a 00                	push   0x0
c001bc6d:	6a 28                	push   0x28
c001bc6f:	e9 60 00 00 00       	jmp    c001bcd4 <int_common_stub>

c001bc74 <irq9>:
c001bc74:	fa                   	cli    
c001bc75:	6a 00                	push   0x0
c001bc77:	6a 29                	push   0x29
c001bc79:	e9 56 00 00 00       	jmp    c001bcd4 <int_common_stub>

c001bc7e <irq10>:
c001bc7e:	fa                   	cli    
c001bc7f:	6a 00                	push   0x0
c001bc81:	6a 2a                	push   0x2a
c001bc83:	e9 4c 00 00 00       	jmp    c001bcd4 <int_common_stub>

c001bc88 <irq11>:
c001bc88:	fa                   	cli    
c001bc89:	6a 00                	push   0x0
c001bc8b:	6a 2b                	push   0x2b
c001bc8d:	e9 42 00 00 00       	jmp    c001bcd4 <int_common_stub>

c001bc92 <irq12>:
c001bc92:	fa                   	cli    
c001bc93:	6a 00                	push   0x0
c001bc95:	6a 2c                	push   0x2c
c001bc97:	e9 38 00 00 00       	jmp    c001bcd4 <int_common_stub>

c001bc9c <irq13>:
c001bc9c:	fa                   	cli    
c001bc9d:	6a 00                	push   0x0
c001bc9f:	6a 2d                	push   0x2d
c001bca1:	e9 2e 00 00 00       	jmp    c001bcd4 <int_common_stub>

c001bca6 <irq14>:
c001bca6:	fa                   	cli    
c001bca7:	6a 00                	push   0x0
c001bca9:	6a 2e                	push   0x2e
c001bcab:	e9 24 00 00 00       	jmp    c001bcd4 <int_common_stub>

c001bcb0 <irq15>:
c001bcb0:	fa                   	cli    
c001bcb1:	6a 00                	push   0x0
c001bcb3:	6a 2f                	push   0x2f
c001bcb5:	e9 1a 00 00 00       	jmp    c001bcd4 <int_common_stub>

c001bcba <irq1>:
c001bcba:	fa                   	cli    
c001bcbb:	6a 00                	push   0x0
c001bcbd:	6a 21                	push   0x21
c001bcbf:	eb 13                	jmp    c001bcd4 <int_common_stub>

c001bcc1 <irq2>:
c001bcc1:	fa                   	cli    
c001bcc2:	6a 00                	push   0x0
c001bcc4:	6a 22                	push   0x22
c001bcc6:	eb 0c                	jmp    c001bcd4 <int_common_stub>

c001bcc8 <isr96>:
c001bcc8:	6a 00                	push   0x0
c001bcca:	6a 60                	push   0x60
c001bccc:	fb                   	sti    
c001bccd:	eb 37                	jmp    c001bd06 <syscall_common_stub>

c001bccf <irq0>:
c001bccf:	fa                   	cli    
c001bcd0:	6a 00                	push   0x0
c001bcd2:	6a 20                	push   0x20

c001bcd4 <int_common_stub>:
c001bcd4:	60                   	pusha  
c001bcd5:	1e                   	push   ds
c001bcd6:	06                   	push   es
c001bcd7:	0f a0                	push   fs
c001bcd9:	0f a8                	push   gs
c001bcdb:	66 b8 10 00          	mov    ax,0x10
c001bcdf:	66 8e d8             	mov    ds,ax
c001bce2:	66 8e c0             	mov    es,ax
c001bce5:	66 8e e0             	mov    fs,ax
c001bce8:	66 8e e8             	mov    gs,ax
c001bceb:	54                   	push   esp
c001bcec:	fc                   	cld    
c001bced:	e8 7a 01 ff ff       	call   c000be6c <int_handler>
c001bcf2:	81 c4 04 00 00 00    	add    esp,0x4
c001bcf8:	0f a9                	pop    gs
c001bcfa:	0f a1                	pop    fs
c001bcfc:	07                   	pop    es
c001bcfd:	1f                   	pop    ds
c001bcfe:	61                   	popa   
c001bcff:	81 c4 08 00 00 00    	add    esp,0x8
c001bd05:	cf                   	iret   

c001bd06 <syscall_common_stub>:
c001bd06:	60                   	pusha  
c001bd07:	1e                   	push   ds
c001bd08:	06                   	push   es
c001bd09:	0f a0                	push   fs
c001bd0b:	0f a8                	push   gs
c001bd0d:	66 b8 10 00          	mov    ax,0x10
c001bd11:	66 8e d8             	mov    ds,ax
c001bd14:	66 8e c0             	mov    es,ax
c001bd17:	66 8e e0             	mov    fs,ax
c001bd1a:	66 8e e8             	mov    gs,ax
c001bd1d:	54                   	push   esp
c001bd1e:	fc                   	cld    
c001bd1f:	e8 48 01 ff ff       	call   c000be6c <int_handler>
c001bd24:	81 c4 04 00 00 00    	add    esp,0x4
c001bd2a:	0f a9                	pop    gs
c001bd2c:	0f a1                	pop    fs
c001bd2e:	07                   	pop    es
c001bd2f:	1f                   	pop    ds
c001bd30:	e8 22 4a ff ff       	call   c0010757 <KiCheckSignalZ>
c001bd35:	3d 00 00 00 00       	cmp    eax,0x0
c001bd3a:	74 1d                	je     c001bd59 <syscall_common_stub.skipSignals>
c001bd3c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001bd40:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001bd44:	89 e3                	mov    ebx,esp
c001bd46:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001bd49:	51                   	push   ecx
c001bd4a:	68 61 bd 01 c0       	push   0xc001bd61
c001bd4f:	89 dc                	mov    esp,ebx
c001bd51:	61                   	popa   
c001bd52:	81 c4 08 00 00 00    	add    esp,0x8
c001bd58:	cf                   	iret   

c001bd59 <syscall_common_stub.skipSignals>:
c001bd59:	61                   	popa   
c001bd5a:	81 c4 08 00 00 00    	add    esp,0x8
c001bd60:	cf                   	iret   

c001bd61 <irq16>:
c001bd61:	fa                   	cli    
c001bd62:	6a 00                	push   0x0
c001bd64:	6a 30                	push   0x30
c001bd66:	e9 69 ff ff ff       	jmp    c001bcd4 <int_common_stub>

c001bd6b <irq17>:
c001bd6b:	fa                   	cli    
c001bd6c:	6a 00                	push   0x0
c001bd6e:	6a 31                	push   0x31
c001bd70:	e9 5f ff ff ff       	jmp    c001bcd4 <int_common_stub>

c001bd75 <irq18>:
c001bd75:	fa                   	cli    
c001bd76:	6a 00                	push   0x0
c001bd78:	6a 32                	push   0x32
c001bd7a:	e9 55 ff ff ff       	jmp    c001bcd4 <int_common_stub>

c001bd7f <irq19>:
c001bd7f:	fa                   	cli    
c001bd80:	6a 00                	push   0x0
c001bd82:	6a 33                	push   0x33
c001bd84:	e9 4b ff ff ff       	jmp    c001bcd4 <int_common_stub>

c001bd89 <irq20>:
c001bd89:	fa                   	cli    
c001bd8a:	6a 00                	push   0x0
c001bd8c:	6a 34                	push   0x34
c001bd8e:	e9 41 ff ff ff       	jmp    c001bcd4 <int_common_stub>

c001bd93 <irq21>:
c001bd93:	fa                   	cli    
c001bd94:	6a 00                	push   0x0
c001bd96:	6a 35                	push   0x35
c001bd98:	e9 37 ff ff ff       	jmp    c001bcd4 <int_common_stub>

c001bd9d <irq22>:
c001bd9d:	fa                   	cli    
c001bd9e:	6a 00                	push   0x0
c001bda0:	6a 36                	push   0x36
c001bda2:	e9 2d ff ff ff       	jmp    c001bcd4 <int_common_stub>

c001bda7 <irq23>:
c001bda7:	fa                   	cli    
c001bda8:	6a 00                	push   0x0
c001bdaa:	6a 37                	push   0x37
c001bdac:	e9 23 ff ff ff       	jmp    c001bcd4 <int_common_stub>
c001bdb1:	66 90                	xchg   ax,ax
c001bdb3:	66 90                	xchg   ax,ax
c001bdb5:	66 90                	xchg   ax,ax
c001bdb7:	66 90                	xchg   ax,ax
c001bdb9:	66 90                	xchg   ax,ax
c001bdbb:	66 90                	xchg   ax,ax
c001bdbd:	66 90                	xchg   ax,ax
c001bdbf:	90                   	nop

c001bdc0 <i386GetRDRAND>:
c001bdc0:	b9 64 00 00 00       	mov    ecx,0x64

c001bdc5 <retry>:
c001bdc5:	0f c7 f0             	rdrand eax
c001bdc8:	72 05                	jb     c001bdcf <retry.done>
c001bdca:	e2 f9                	loop   c001bdc5 <retry>

c001bdcc <retry.fail>:
c001bdcc:	31 c0                	xor    eax,eax
c001bdce:	c3                   	ret    

c001bdcf <retry.done>:
c001bdcf:	c3                   	ret    

c001bdd0 <absolutelyNoChanceInHell>:
c001bdd0:	b8 01 00 00 00       	mov    eax,0x1
c001bdd5:	0f a2                	cpuid  
c001bdd7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001bddd:	74 06                	je     c001bde5 <sseDetect.noSSE>
c001bddf:	b8 01 00 00 00       	mov    eax,0x1
c001bde4:	c3                   	ret    

c001bde5 <sseDetect.noSSE>:
c001bde5:	31 c0                	xor    eax,eax
c001bde7:	c3                   	ret    

c001bde8 <sseSave>:
c001bde8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bdec:	0f ae 00             	fxsave [eax]
c001bdef:	c3                   	ret    

c001bdf0 <sseLoad>:
c001bdf0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bdf4:	0f ae 08             	fxrstor [eax]
c001bdf7:	c3                   	ret    

c001bdf8 <sseInit>:
c001bdf8:	e8 42 00 00 00       	call   c001be3f <x87Init>
c001bdfd:	0f 20 e0             	mov    eax,cr4
c001be00:	66 0d 00 06          	or     ax,0x600
c001be04:	0f 22 e0             	mov    cr4,eax
c001be07:	c3                   	ret    

c001be08 <sseClose>:
c001be08:	c3                   	ret    
c001be09:	66 90                	xchg   ax,ax
c001be0b:	66 90                	xchg   ax,ax
c001be0d:	66 90                	xchg   ax,ax
c001be0f:	90                   	nop

c001be10 <value_37F>:
c001be10:	7f 03                	jg     c001be15 <value_37A+0x1>

c001be12 <value_37E>:
c001be12:	7e 03                	jle    c001be17 <x87Detect+0x1>

c001be14 <value_37A>:
c001be14:	7a 03                	jp     c001be19 <x87Detect+0x3>

c001be16 <x87Detect>:
c001be16:	b8 01 00 00 00       	mov    eax,0x1
c001be1b:	0f a2                	cpuid  
c001be1d:	f7 c2 01 00 00 00    	test   edx,0x1
c001be23:	74 06                	je     c001be2b <x87Detect.nox87>
c001be25:	b8 01 00 00 00       	mov    eax,0x1
c001be2a:	c3                   	ret    

c001be2b <x87Detect.nox87>:
c001be2b:	b8 00 00 00 00       	mov    eax,0x0
c001be30:	c3                   	ret    

c001be31 <x87Save>:
c001be31:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be35:	dd 30                	fnsave [eax]
c001be37:	c3                   	ret    

c001be38 <x87Load>:
c001be38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be3c:	dd 20                	frstor [eax]
c001be3e:	c3                   	ret    

c001be3f <x87Init>:
c001be3f:	0f 20 c0             	mov    eax,cr0
c001be42:	66 25 fb ff          	and    ax,0xfffb
c001be46:	66 0d 22 00          	or     ax,0x22
c001be4a:	0f 22 c0             	mov    cr0,eax
c001be4d:	db e3                	fninit 
c001be4f:	0f 06                	clts   
c001be51:	d9 2d 14 be 01 c0    	fldcw  WORD PTR ds:0xc001be14
c001be57:	c3                   	ret    

c001be58 <x87Close>:
c001be58:	c3                   	ret    
c001be59:	66 90                	xchg   ax,ax
c001be5b:	90                   	nop

c001be5c <__do_global_ctors_aux>:
c001be5c:	a1 0c ce 01 c0       	mov    eax,ds:0xc001ce0c
c001be61:	83 f8 ff             	cmp    eax,0xffffffff
c001be64:	74 1a                	je     c001be80 <__do_global_ctors_aux+0x24>
c001be66:	55                   	push   ebp
c001be67:	89 e5                	mov    ebp,esp
c001be69:	53                   	push   ebx
c001be6a:	52                   	push   edx
c001be6b:	bb 0c ce 01 c0       	mov    ebx,0xc001ce0c
c001be70:	ff d0                	call   eax
c001be72:	83 eb 04             	sub    ebx,0x4
c001be75:	8b 03                	mov    eax,DWORD PTR [ebx]
c001be77:	83 f8 ff             	cmp    eax,0xffffffff
c001be7a:	75 f4                	jne    c001be70 <__do_global_ctors_aux+0x14>
c001be7c:	58                   	pop    eax
c001be7d:	5b                   	pop    ebx
c001be7e:	5d                   	pop    ebp
c001be7f:	c3                   	ret    
c001be80:	c3                   	ret    
c001be81:	66 90                	xchg   ax,ax
c001be83:	90                   	nop

c001be84 <__divdi3>:
c001be84:	55                   	push   ebp
c001be85:	57                   	push   edi
c001be86:	56                   	push   esi
c001be87:	53                   	push   ebx
c001be88:	83 ec 1c             	sub    esp,0x1c
c001be8b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001be8f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001be93:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001be96:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001be9a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001be9e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001bea2:	85 db                	test   ebx,ebx
c001bea4:	0f 88 8e 00 00 00    	js     c001bf38 <__divdi3+0xb4>
c001beaa:	89 dd                	mov    ebp,ebx
c001beac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001beb4:	89 d3                	mov    ebx,edx
c001beb6:	85 d2                	test   edx,edx
c001beb8:	79 0d                	jns    c001bec7 <__divdi3+0x43>
c001beba:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001bebe:	f7 d8                	neg    eax
c001bec0:	83 d2 00             	adc    edx,0x0
c001bec3:	f7 da                	neg    edx
c001bec5:	89 d3                	mov    ebx,edx
c001bec7:	89 c7                	mov    edi,eax
c001bec9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001becc:	85 db                	test   ebx,ebx
c001bece:	75 48                	jne    c001bf18 <__divdi3+0x94>
c001bed0:	39 ef                	cmp    edi,ebp
c001bed2:	76 24                	jbe    c001bef8 <__divdi3+0x74>
c001bed4:	89 ea                	mov    edx,ebp
c001bed6:	f7 f7                	div    edi
c001bed8:	89 c1                	mov    ecx,eax
c001beda:	31 f6                	xor    esi,esi
c001bedc:	89 c8                	mov    eax,ecx
c001bede:	89 f2                	mov    edx,esi
c001bee0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bee4:	85 c9                	test   ecx,ecx
c001bee6:	74 07                	je     c001beef <__divdi3+0x6b>
c001bee8:	f7 d8                	neg    eax
c001beea:	83 d2 00             	adc    edx,0x0
c001beed:	f7 da                	neg    edx
c001beef:	83 c4 1c             	add    esp,0x1c
c001bef2:	5b                   	pop    ebx
c001bef3:	5e                   	pop    esi
c001bef4:	5f                   	pop    edi
c001bef5:	5d                   	pop    ebp
c001bef6:	c3                   	ret    
c001bef7:	90                   	nop
c001bef8:	85 ff                	test   edi,edi
c001befa:	75 0b                	jne    c001bf07 <__divdi3+0x83>
c001befc:	b8 01 00 00 00       	mov    eax,0x1
c001bf01:	31 d2                	xor    edx,edx
c001bf03:	f7 f3                	div    ebx
c001bf05:	89 c7                	mov    edi,eax
c001bf07:	31 d2                	xor    edx,edx
c001bf09:	89 e8                	mov    eax,ebp
c001bf0b:	f7 f7                	div    edi
c001bf0d:	89 c6                	mov    esi,eax
c001bf0f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bf12:	f7 f7                	div    edi
c001bf14:	89 c1                	mov    ecx,eax
c001bf16:	eb c4                	jmp    c001bedc <__divdi3+0x58>
c001bf18:	39 eb                	cmp    ebx,ebp
c001bf1a:	77 3c                	ja     c001bf58 <__divdi3+0xd4>
c001bf1c:	0f bd f3             	bsr    esi,ebx
c001bf1f:	83 f6 1f             	xor    esi,0x1f
c001bf22:	75 40                	jne    c001bf64 <__divdi3+0xe0>
c001bf24:	39 eb                	cmp    ebx,ebp
c001bf26:	72 09                	jb     c001bf31 <__divdi3+0xad>
c001bf28:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001bf2b:	0f 87 97 00 00 00    	ja     c001bfc8 <__divdi3+0x144>
c001bf31:	b9 01 00 00 00       	mov    ecx,0x1
c001bf36:	eb a4                	jmp    c001bedc <__divdi3+0x58>
c001bf38:	f7 d9                	neg    ecx
c001bf3a:	83 d3 00             	adc    ebx,0x0
c001bf3d:	f7 db                	neg    ebx
c001bf3f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001bf42:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001bf46:	89 dd                	mov    ebp,ebx
c001bf48:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001bf50:	e9 5f ff ff ff       	jmp    c001beb4 <__divdi3+0x30>
c001bf55:	8d 76 00             	lea    esi,[esi+0x0]
c001bf58:	31 f6                	xor    esi,esi
c001bf5a:	31 c9                	xor    ecx,ecx
c001bf5c:	e9 7b ff ff ff       	jmp    c001bedc <__divdi3+0x58>
c001bf61:	8d 76 00             	lea    esi,[esi+0x0]
c001bf64:	b8 20 00 00 00       	mov    eax,0x20
c001bf69:	29 f0                	sub    eax,esi
c001bf6b:	89 f1                	mov    ecx,esi
c001bf6d:	d3 e3                	shl    ebx,cl
c001bf6f:	89 fa                	mov    edx,edi
c001bf71:	88 c1                	mov    cl,al
c001bf73:	d3 ea                	shr    edx,cl
c001bf75:	09 da                	or     edx,ebx
c001bf77:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bf7b:	89 f1                	mov    ecx,esi
c001bf7d:	d3 e7                	shl    edi,cl
c001bf7f:	89 eb                	mov    ebx,ebp
c001bf81:	88 c1                	mov    cl,al
c001bf83:	d3 eb                	shr    ebx,cl
c001bf85:	89 f1                	mov    ecx,esi
c001bf87:	d3 e5                	shl    ebp,cl
c001bf89:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001bf8c:	88 c1                	mov    cl,al
c001bf8e:	d3 ea                	shr    edx,cl
c001bf90:	09 d5                	or     ebp,edx
c001bf92:	89 e8                	mov    eax,ebp
c001bf94:	89 da                	mov    edx,ebx
c001bf96:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001bf9a:	89 d3                	mov    ebx,edx
c001bf9c:	89 c5                	mov    ebp,eax
c001bf9e:	f7 e7                	mul    edi
c001bfa0:	39 d3                	cmp    ebx,edx
c001bfa2:	72 18                	jb     c001bfbc <__divdi3+0x138>
c001bfa4:	74 0a                	je     c001bfb0 <__divdi3+0x12c>
c001bfa6:	89 e9                	mov    ecx,ebp
c001bfa8:	31 f6                	xor    esi,esi
c001bfaa:	e9 2d ff ff ff       	jmp    c001bedc <__divdi3+0x58>
c001bfaf:	90                   	nop
c001bfb0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001bfb3:	89 f1                	mov    ecx,esi
c001bfb5:	d3 e7                	shl    edi,cl
c001bfb7:	39 c7                	cmp    edi,eax
c001bfb9:	73 eb                	jae    c001bfa6 <__divdi3+0x122>
c001bfbb:	90                   	nop
c001bfbc:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001bfbf:	31 f6                	xor    esi,esi
c001bfc1:	e9 16 ff ff ff       	jmp    c001bedc <__divdi3+0x58>
c001bfc6:	66 90                	xchg   ax,ax
c001bfc8:	31 c9                	xor    ecx,ecx
c001bfca:	e9 0d ff ff ff       	jmp    c001bedc <__divdi3+0x58>
c001bfcf:	90                   	nop

c001bfd0 <__moddi3>:
c001bfd0:	55                   	push   ebp
c001bfd1:	57                   	push   edi
c001bfd2:	56                   	push   esi
c001bfd3:	53                   	push   ebx
c001bfd4:	83 ec 2c             	sub    esp,0x2c
c001bfd7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001bfdb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001bfdf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001bfe3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001bfe7:	85 db                	test   ebx,ebx
c001bfe9:	0f 88 85 00 00 00    	js     c001c074 <__moddi3+0xa4>
c001bfef:	89 de                	mov    esi,ebx
c001bff1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001bff9:	89 d7                	mov    edi,edx
c001bffb:	85 d2                	test   edx,edx
c001bffd:	79 09                	jns    c001c008 <__moddi3+0x38>
c001bfff:	f7 d8                	neg    eax
c001c001:	83 d2 00             	adc    edx,0x0
c001c004:	f7 da                	neg    edx
c001c006:	89 d7                	mov    edi,edx
c001c008:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c00c:	89 cd                	mov    ebp,ecx
c001c00e:	85 ff                	test   edi,edi
c001c010:	75 52                	jne    c001c064 <__moddi3+0x94>
c001c012:	89 c3                	mov    ebx,eax
c001c014:	39 f0                	cmp    eax,esi
c001c016:	76 24                	jbe    c001c03c <__moddi3+0x6c>
c001c018:	89 c8                	mov    eax,ecx
c001c01a:	89 f2                	mov    edx,esi
c001c01c:	f7 f3                	div    ebx
c001c01e:	89 d6                	mov    esi,edx
c001c020:	89 f0                	mov    eax,esi
c001c022:	31 d2                	xor    edx,edx
c001c024:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c028:	85 c9                	test   ecx,ecx
c001c02a:	74 07                	je     c001c033 <__moddi3+0x63>
c001c02c:	f7 d8                	neg    eax
c001c02e:	83 d2 00             	adc    edx,0x0
c001c031:	f7 da                	neg    edx
c001c033:	83 c4 2c             	add    esp,0x2c
c001c036:	5b                   	pop    ebx
c001c037:	5e                   	pop    esi
c001c038:	5f                   	pop    edi
c001c039:	5d                   	pop    ebp
c001c03a:	c3                   	ret    
c001c03b:	90                   	nop
c001c03c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001c040:	85 db                	test   ebx,ebx
c001c042:	75 0d                	jne    c001c051 <__moddi3+0x81>
c001c044:	b8 01 00 00 00       	mov    eax,0x1
c001c049:	31 d2                	xor    edx,edx
c001c04b:	f7 f7                	div    edi
c001c04d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c051:	89 f0                	mov    eax,esi
c001c053:	31 d2                	xor    edx,edx
c001c055:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c059:	f7 f7                	div    edi
c001c05b:	89 e8                	mov    eax,ebp
c001c05d:	f7 f7                	div    edi
c001c05f:	89 d6                	mov    esi,edx
c001c061:	eb bd                	jmp    c001c020 <__moddi3+0x50>
c001c063:	90                   	nop
c001c064:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c068:	39 f7                	cmp    edi,esi
c001c06a:	76 20                	jbe    c001c08c <__moddi3+0xbc>
c001c06c:	89 c8                	mov    eax,ecx
c001c06e:	89 f2                	mov    edx,esi
c001c070:	eb b2                	jmp    c001c024 <__moddi3+0x54>
c001c072:	66 90                	xchg   ax,ax
c001c074:	f7 d9                	neg    ecx
c001c076:	83 d3 00             	adc    ebx,0x0
c001c079:	f7 db                	neg    ebx
c001c07b:	89 de                	mov    esi,ebx
c001c07d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001c085:	e9 6f ff ff ff       	jmp    c001bff9 <__moddi3+0x29>
c001c08a:	66 90                	xchg   ax,ax
c001c08c:	0f bd c7             	bsr    eax,edi
c001c08f:	83 f0 1f             	xor    eax,0x1f
c001c092:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c096:	75 24                	jne    c001c0bc <__moddi3+0xec>
c001c098:	39 f7                	cmp    edi,esi
c001c09a:	72 06                	jb     c001c0a2 <__moddi3+0xd2>
c001c09c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001c0a0:	77 0c                	ja     c001c0ae <__moddi3+0xde>
c001c0a2:	89 e9                	mov    ecx,ebp
c001c0a4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001c0a8:	19 fe                	sbb    esi,edi
c001c0aa:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c0ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c0b2:	89 f2                	mov    edx,esi
c001c0b4:	e9 6b ff ff ff       	jmp    c001c024 <__moddi3+0x54>
c001c0b9:	8d 76 00             	lea    esi,[esi+0x0]
c001c0bc:	b8 20 00 00 00       	mov    eax,0x20
c001c0c1:	89 c2                	mov    edx,eax
c001c0c3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c0c7:	29 da                	sub    edx,ebx
c001c0c9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c0cd:	88 d9                	mov    cl,bl
c001c0cf:	d3 e7                	shl    edi,cl
c001c0d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c0d5:	88 d1                	mov    cl,dl
c001c0d7:	d3 e8                	shr    eax,cl
c001c0d9:	09 c7                	or     edi,eax
c001c0db:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001c0df:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c0e3:	89 d8                	mov    eax,ebx
c001c0e5:	88 d9                	mov    cl,bl
c001c0e7:	d3 e7                	shl    edi,cl
c001c0e9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c0ed:	89 f3                	mov    ebx,esi
c001c0ef:	88 d1                	mov    cl,dl
c001c0f1:	d3 eb                	shr    ebx,cl
c001c0f3:	89 c7                	mov    edi,eax
c001c0f5:	88 c1                	mov    cl,al
c001c0f7:	d3 e6                	shl    esi,cl
c001c0f9:	89 e8                	mov    eax,ebp
c001c0fb:	88 d1                	mov    cl,dl
c001c0fd:	d3 e8                	shr    eax,cl
c001c0ff:	09 f0                	or     eax,esi
c001c101:	89 f9                	mov    ecx,edi
c001c103:	d3 e5                	shl    ebp,cl
c001c105:	89 da                	mov    edx,ebx
c001c107:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001c10b:	89 d3                	mov    ebx,edx
c001c10d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c111:	89 c6                	mov    esi,eax
c001c113:	89 d1                	mov    ecx,edx
c001c115:	39 d3                	cmp    ebx,edx
c001c117:	72 27                	jb     c001c140 <__moddi3+0x170>
c001c119:	74 21                	je     c001c13c <__moddi3+0x16c>
c001c11b:	29 f5                	sub    ebp,esi
c001c11d:	19 cb                	sbb    ebx,ecx
c001c11f:	89 de                	mov    esi,ebx
c001c121:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001c125:	d3 e6                	shl    esi,cl
c001c127:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c12b:	89 f9                	mov    ecx,edi
c001c12d:	d3 ed                	shr    ebp,cl
c001c12f:	09 ee                	or     esi,ebp
c001c131:	89 f0                	mov    eax,esi
c001c133:	d3 eb                	shr    ebx,cl
c001c135:	89 da                	mov    edx,ebx
c001c137:	e9 e8 fe ff ff       	jmp    c001c024 <__moddi3+0x54>
c001c13c:	39 c5                	cmp    ebp,eax
c001c13e:	73 db                	jae    c001c11b <__moddi3+0x14b>
c001c140:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c144:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001c148:	89 d1                	mov    ecx,edx
c001c14a:	89 c6                	mov    esi,eax
c001c14c:	eb cd                	jmp    c001c11b <__moddi3+0x14b>
c001c14e:	66 90                	xchg   ax,ax

c001c150 <__udivdi3>:
c001c150:	55                   	push   ebp
c001c151:	57                   	push   edi
c001c152:	56                   	push   esi
c001c153:	53                   	push   ebx
c001c154:	83 ec 1c             	sub    esp,0x1c
c001c157:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c15b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c15f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c163:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c167:	85 d2                	test   edx,edx
c001c169:	75 41                	jne    c001c1ac <__udivdi3+0x5c>
c001c16b:	39 f7                	cmp    edi,esi
c001c16d:	76 15                	jbe    c001c184 <__udivdi3+0x34>
c001c16f:	89 e8                	mov    eax,ebp
c001c171:	89 f2                	mov    edx,esi
c001c173:	f7 f7                	div    edi
c001c175:	31 db                	xor    ebx,ebx
c001c177:	89 da                	mov    edx,ebx
c001c179:	83 c4 1c             	add    esp,0x1c
c001c17c:	5b                   	pop    ebx
c001c17d:	5e                   	pop    esi
c001c17e:	5f                   	pop    edi
c001c17f:	5d                   	pop    ebp
c001c180:	c3                   	ret    
c001c181:	8d 76 00             	lea    esi,[esi+0x0]
c001c184:	89 f9                	mov    ecx,edi
c001c186:	85 ff                	test   edi,edi
c001c188:	75 0b                	jne    c001c195 <__udivdi3+0x45>
c001c18a:	b8 01 00 00 00       	mov    eax,0x1
c001c18f:	31 d2                	xor    edx,edx
c001c191:	f7 f7                	div    edi
c001c193:	89 c1                	mov    ecx,eax
c001c195:	31 d2                	xor    edx,edx
c001c197:	89 f0                	mov    eax,esi
c001c199:	f7 f1                	div    ecx
c001c19b:	89 c3                	mov    ebx,eax
c001c19d:	89 e8                	mov    eax,ebp
c001c19f:	f7 f1                	div    ecx
c001c1a1:	89 da                	mov    edx,ebx
c001c1a3:	83 c4 1c             	add    esp,0x1c
c001c1a6:	5b                   	pop    ebx
c001c1a7:	5e                   	pop    esi
c001c1a8:	5f                   	pop    edi
c001c1a9:	5d                   	pop    ebp
c001c1aa:	c3                   	ret    
c001c1ab:	90                   	nop
c001c1ac:	39 f2                	cmp    edx,esi
c001c1ae:	77 1c                	ja     c001c1cc <__udivdi3+0x7c>
c001c1b0:	0f bd da             	bsr    ebx,edx
c001c1b3:	83 f3 1f             	xor    ebx,0x1f
c001c1b6:	75 24                	jne    c001c1dc <__udivdi3+0x8c>
c001c1b8:	39 f2                	cmp    edx,esi
c001c1ba:	72 08                	jb     c001c1c4 <__udivdi3+0x74>
c001c1bc:	39 ef                	cmp    edi,ebp
c001c1be:	0f 87 84 00 00 00    	ja     c001c248 <__udivdi3+0xf8>
c001c1c4:	b8 01 00 00 00       	mov    eax,0x1
c001c1c9:	eb ac                	jmp    c001c177 <__udivdi3+0x27>
c001c1cb:	90                   	nop
c001c1cc:	31 db                	xor    ebx,ebx
c001c1ce:	31 c0                	xor    eax,eax
c001c1d0:	89 da                	mov    edx,ebx
c001c1d2:	83 c4 1c             	add    esp,0x1c
c001c1d5:	5b                   	pop    ebx
c001c1d6:	5e                   	pop    esi
c001c1d7:	5f                   	pop    edi
c001c1d8:	5d                   	pop    ebp
c001c1d9:	c3                   	ret    
c001c1da:	66 90                	xchg   ax,ax
c001c1dc:	b8 20 00 00 00       	mov    eax,0x20
c001c1e1:	29 d8                	sub    eax,ebx
c001c1e3:	88 d9                	mov    cl,bl
c001c1e5:	d3 e2                	shl    edx,cl
c001c1e7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c1eb:	89 fa                	mov    edx,edi
c001c1ed:	88 c1                	mov    cl,al
c001c1ef:	d3 ea                	shr    edx,cl
c001c1f1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c1f5:	09 d1                	or     ecx,edx
c001c1f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c1fb:	88 d9                	mov    cl,bl
c001c1fd:	d3 e7                	shl    edi,cl
c001c1ff:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c203:	89 f7                	mov    edi,esi
c001c205:	88 c1                	mov    cl,al
c001c207:	d3 ef                	shr    edi,cl
c001c209:	88 d9                	mov    cl,bl
c001c20b:	d3 e6                	shl    esi,cl
c001c20d:	89 ea                	mov    edx,ebp
c001c20f:	88 c1                	mov    cl,al
c001c211:	d3 ea                	shr    edx,cl
c001c213:	09 d6                	or     esi,edx
c001c215:	89 f0                	mov    eax,esi
c001c217:	89 fa                	mov    edx,edi
c001c219:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c21d:	89 d7                	mov    edi,edx
c001c21f:	89 c6                	mov    esi,eax
c001c221:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c225:	39 d7                	cmp    edi,edx
c001c227:	72 13                	jb     c001c23c <__udivdi3+0xec>
c001c229:	74 09                	je     c001c234 <__udivdi3+0xe4>
c001c22b:	89 f0                	mov    eax,esi
c001c22d:	31 db                	xor    ebx,ebx
c001c22f:	e9 43 ff ff ff       	jmp    c001c177 <__udivdi3+0x27>
c001c234:	88 d9                	mov    cl,bl
c001c236:	d3 e5                	shl    ebp,cl
c001c238:	39 c5                	cmp    ebp,eax
c001c23a:	73 ef                	jae    c001c22b <__udivdi3+0xdb>
c001c23c:	8d 46 ff             	lea    eax,[esi-0x1]
c001c23f:	31 db                	xor    ebx,ebx
c001c241:	e9 31 ff ff ff       	jmp    c001c177 <__udivdi3+0x27>
c001c246:	66 90                	xchg   ax,ax
c001c248:	31 c0                	xor    eax,eax
c001c24a:	e9 28 ff ff ff       	jmp    c001c177 <__udivdi3+0x27>
c001c24f:	90                   	nop

c001c250 <__umoddi3>:
c001c250:	55                   	push   ebp
c001c251:	57                   	push   edi
c001c252:	56                   	push   esi
c001c253:	53                   	push   ebx
c001c254:	83 ec 1c             	sub    esp,0x1c
c001c257:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c25b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c25f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c263:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c267:	89 da                	mov    edx,ebx
c001c269:	85 c0                	test   eax,eax
c001c26b:	75 37                	jne    c001c2a4 <__umoddi3+0x54>
c001c26d:	39 df                	cmp    edi,ebx
c001c26f:	76 13                	jbe    c001c284 <__umoddi3+0x34>
c001c271:	89 f0                	mov    eax,esi
c001c273:	f7 f7                	div    edi
c001c275:	89 d0                	mov    eax,edx
c001c277:	31 d2                	xor    edx,edx
c001c279:	83 c4 1c             	add    esp,0x1c
c001c27c:	5b                   	pop    ebx
c001c27d:	5e                   	pop    esi
c001c27e:	5f                   	pop    edi
c001c27f:	5d                   	pop    ebp
c001c280:	c3                   	ret    
c001c281:	8d 76 00             	lea    esi,[esi+0x0]
c001c284:	89 fd                	mov    ebp,edi
c001c286:	85 ff                	test   edi,edi
c001c288:	75 0b                	jne    c001c295 <__umoddi3+0x45>
c001c28a:	b8 01 00 00 00       	mov    eax,0x1
c001c28f:	31 d2                	xor    edx,edx
c001c291:	f7 f7                	div    edi
c001c293:	89 c5                	mov    ebp,eax
c001c295:	89 d8                	mov    eax,ebx
c001c297:	31 d2                	xor    edx,edx
c001c299:	f7 f5                	div    ebp
c001c29b:	89 f0                	mov    eax,esi
c001c29d:	f7 f5                	div    ebp
c001c29f:	89 d0                	mov    eax,edx
c001c2a1:	eb d4                	jmp    c001c277 <__umoddi3+0x27>
c001c2a3:	90                   	nop
c001c2a4:	89 f1                	mov    ecx,esi
c001c2a6:	39 d8                	cmp    eax,ebx
c001c2a8:	76 0a                	jbe    c001c2b4 <__umoddi3+0x64>
c001c2aa:	89 f0                	mov    eax,esi
c001c2ac:	83 c4 1c             	add    esp,0x1c
c001c2af:	5b                   	pop    ebx
c001c2b0:	5e                   	pop    esi
c001c2b1:	5f                   	pop    edi
c001c2b2:	5d                   	pop    ebp
c001c2b3:	c3                   	ret    
c001c2b4:	0f bd e8             	bsr    ebp,eax
c001c2b7:	83 f5 1f             	xor    ebp,0x1f
c001c2ba:	75 1c                	jne    c001c2d8 <__umoddi3+0x88>
c001c2bc:	39 d8                	cmp    eax,ebx
c001c2be:	72 04                	jb     c001c2c4 <__umoddi3+0x74>
c001c2c0:	39 f7                	cmp    edi,esi
c001c2c2:	77 08                	ja     c001c2cc <__umoddi3+0x7c>
c001c2c4:	89 da                	mov    edx,ebx
c001c2c6:	29 fe                	sub    esi,edi
c001c2c8:	19 c2                	sbb    edx,eax
c001c2ca:	89 f1                	mov    ecx,esi
c001c2cc:	89 c8                	mov    eax,ecx
c001c2ce:	83 c4 1c             	add    esp,0x1c
c001c2d1:	5b                   	pop    ebx
c001c2d2:	5e                   	pop    esi
c001c2d3:	5f                   	pop    edi
c001c2d4:	5d                   	pop    ebp
c001c2d5:	c3                   	ret    
c001c2d6:	66 90                	xchg   ax,ax
c001c2d8:	ba 20 00 00 00       	mov    edx,0x20
c001c2dd:	29 ea                	sub    edx,ebp
c001c2df:	89 e9                	mov    ecx,ebp
c001c2e1:	d3 e0                	shl    eax,cl
c001c2e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c2e7:	89 f8                	mov    eax,edi
c001c2e9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c2ed:	88 d1                	mov    cl,dl
c001c2ef:	d3 e8                	shr    eax,cl
c001c2f1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c2f5:	09 c1                	or     ecx,eax
c001c2f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c2fb:	89 e9                	mov    ecx,ebp
c001c2fd:	d3 e7                	shl    edi,cl
c001c2ff:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c303:	89 d8                	mov    eax,ebx
c001c305:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c309:	88 d1                	mov    cl,dl
c001c30b:	d3 e8                	shr    eax,cl
c001c30d:	89 c7                	mov    edi,eax
c001c30f:	89 e9                	mov    ecx,ebp
c001c311:	d3 e3                	shl    ebx,cl
c001c313:	89 f0                	mov    eax,esi
c001c315:	88 d1                	mov    cl,dl
c001c317:	d3 e8                	shr    eax,cl
c001c319:	09 d8                	or     eax,ebx
c001c31b:	89 e9                	mov    ecx,ebp
c001c31d:	d3 e6                	shl    esi,cl
c001c31f:	89 f3                	mov    ebx,esi
c001c321:	89 fa                	mov    edx,edi
c001c323:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c327:	89 d1                	mov    ecx,edx
c001c329:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c32d:	89 c6                	mov    esi,eax
c001c32f:	89 d7                	mov    edi,edx
c001c331:	39 d1                	cmp    ecx,edx
c001c333:	72 27                	jb     c001c35c <__umoddi3+0x10c>
c001c335:	74 21                	je     c001c358 <__umoddi3+0x108>
c001c337:	89 ca                	mov    edx,ecx
c001c339:	29 f3                	sub    ebx,esi
c001c33b:	19 fa                	sbb    edx,edi
c001c33d:	89 d0                	mov    eax,edx
c001c33f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001c343:	d3 e0                	shl    eax,cl
c001c345:	89 e9                	mov    ecx,ebp
c001c347:	d3 eb                	shr    ebx,cl
c001c349:	09 d8                	or     eax,ebx
c001c34b:	d3 ea                	shr    edx,cl
c001c34d:	83 c4 1c             	add    esp,0x1c
c001c350:	5b                   	pop    ebx
c001c351:	5e                   	pop    esi
c001c352:	5f                   	pop    edi
c001c353:	5d                   	pop    ebp
c001c354:	c3                   	ret    
c001c355:	8d 76 00             	lea    esi,[esi+0x0]
c001c358:	39 c3                	cmp    ebx,eax
c001c35a:	73 db                	jae    c001c337 <__umoddi3+0xe7>
c001c35c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c360:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001c364:	89 d7                	mov    edi,edx
c001c366:	89 c6                	mov    esi,eax
c001c368:	eb cd                	jmp    c001c337 <__umoddi3+0xe7>

Disassembly of section .init:

c001c36a <_init>:
c001c36a:	55                   	push   ebp
c001c36b:	89 e5                	mov    ebp,esp
c001c36d:	e8 82 3d fe ff       	call   c00000f4 <frame_dummy>
c001c372:	e8 e5 fa ff ff       	call   c001be5c <__do_global_ctors_aux>
c001c377:	5d                   	pop    ebp
c001c378:	c3                   	ret    

Disassembly of section .fini:

c001c379 <_fini>:
c001c379:	55                   	push   ebp
c001c37a:	89 e5                	mov    ebp,esp
c001c37c:	e8 03 3d fe ff       	call   c0000084 <__do_global_dtors_aux>
c001c381:	5d                   	pop    ebp
c001c382:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001c384 <Computer::~Computer()>:
c001c384:	83 ec 0c             	sub    esp,0xc
c001c387:	ba 38 d6 01 c0       	mov    edx,0xc001d638
c001c38c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c390:	89 10                	mov    DWORD PTR [eax],edx
c001c392:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c396:	83 ec 0c             	sub    esp,0xc
c001c399:	50                   	push   eax
c001c39a:	e8 23 f5 fe ff       	call   c000b8c2 <Device::~Device()>
c001c39f:	83 c4 10             	add    esp,0x10
c001c3a2:	90                   	nop
c001c3a3:	83 c4 0c             	add    esp,0xc
c001c3a6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001c3a8 <Computer::~Computer()>:
c001c3a8:	83 ec 0c             	sub    esp,0xc
c001c3ab:	83 ec 0c             	sub    esp,0xc
c001c3ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c3b2:	e8 cd ff ff ff       	call   c001c384 <Computer::~Computer()>
c001c3b7:	83 c4 10             	add    esp,0x10
c001c3ba:	83 ec 08             	sub    esp,0x8
c001c3bd:	68 70 01 00 00       	push   0x170
c001c3c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c3c6:	e8 c0 e0 fe ff       	call   c000a48b <operator delete(void*, unsigned long)>
c001c3cb:	83 c4 10             	add    esp,0x10
c001c3ce:	83 c4 0c             	add    esp,0xc
c001c3d1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001c3d2 <idleCommon()>:
c001c3d2:	83 ec 0c             	sub    esp,0xc
c001c3d5:	fa                   	cli    
c001c3d6:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001c3dc:	e8 17 74 ff ff       	call   c00137f8 <schedule()>
c001c3e1:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001c3e6:	48                   	dec    eax
c001c3e7:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001c3ec:	75 01                	jne    c001c3ef <idleCommon()+0x1d>
c001c3ee:	fb                   	sti    
c001c3ef:	83 c4 0c             	add    esp,0xc
c001c3f2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001c3f4 <LinkedList<UnixFile>::~LinkedList()>:
c001c3f4:	90                   	nop
c001c3f5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001c3f6 <LinkedList<UnixFile>::LinkedList()>:
c001c3f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c400:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c404:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c40b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c40f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c416:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c41a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c420:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c424:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c42b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c42f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c436:	90                   	nop
c001c437:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001c438 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001c438:	83 ec 0c             	sub    esp,0xc
c001c43b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c440:	75 10                	jne    c001c452 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001c442:	83 ec 0c             	sub    esp,0xc
c001c445:	68 98 d8 01 c0       	push   0xc001d898
c001c44a:	e8 b4 3d ff ff       	call   c0010203 <KePanic(char const*)>
c001c44f:	83 c4 10             	add    esp,0x10
c001c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c456:	8b 00                	mov    eax,DWORD PTR [eax]
c001c458:	85 c0                	test   eax,eax
c001c45a:	74 34                	je     c001c490 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c45c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c460:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c463:	85 c0                	test   eax,eax
c001c465:	74 29                	je     c001c490 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c467:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c46b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c46e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c472:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c475:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c479:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c47d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c480:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c484:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c487:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c48e:	eb 65                	jmp    c001c4f5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c494:	8b 00                	mov    eax,DWORD PTR [eax]
c001c496:	85 c0                	test   eax,eax
c001c498:	75 4b                	jne    c001c4e5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c49a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c49e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c4a1:	85 c0                	test   eax,eax
c001c4a3:	75 40                	jne    c001c4e5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c4a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4a9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c4ad:	89 10                	mov    DWORD PTR [eax],edx
c001c4af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4b3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c4b7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c4ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c4c1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c4c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4cc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c4cf:	85 c0                	test   eax,eax
c001c4d1:	74 22                	je     c001c4f5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c4d3:	83 ec 0c             	sub    esp,0xc
c001c4d6:	68 ba d8 01 c0       	push   0xc001d8ba
c001c4db:	e8 23 3d ff ff       	call   c0010203 <KePanic(char const*)>
c001c4e0:	83 c4 10             	add    esp,0x10
c001c4e3:	eb 10                	jmp    c001c4f5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c4e5:	83 ec 0c             	sub    esp,0xc
c001c4e8:	68 c4 d8 01 c0       	push   0xc001d8c4
c001c4ed:	e8 11 3d ff ff       	call   c0010203 <KePanic(char const*)>
c001c4f2:	83 c4 10             	add    esp,0x10
c001c4f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4f9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c4fc:	8d 50 01             	lea    edx,[eax+0x1]
c001c4ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c503:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c506:	90                   	nop
c001c507:	83 c4 0c             	add    esp,0xc
c001c50a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001c50c <LinkedList<UnixFile>::getFirstElement()>:
c001c50c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c510:	8b 00                	mov    eax,DWORD PTR [eax]
c001c512:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001c514 <LinkedList<UnixFile>::removeFirst()>:
c001c514:	83 ec 0c             	sub    esp,0xc
c001c517:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c51b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c51d:	85 c0                	test   eax,eax
c001c51f:	75 12                	jne    c001c533 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001c521:	83 ec 0c             	sub    esp,0xc
c001c524:	68 d0 d8 01 c0       	push   0xc001d8d0
c001c529:	e8 d5 3c ff ff       	call   c0010203 <KePanic(char const*)>
c001c52e:	83 c4 10             	add    esp,0x10
c001c531:	eb 7e                	jmp    c001c5b1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001c533:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c537:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c53a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c53d:	85 c0                	test   eax,eax
c001c53f:	74 10                	je     c001c551 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001c541:	83 ec 0c             	sub    esp,0xc
c001c544:	68 1b d9 01 c0       	push   0xc001d91b
c001c549:	e8 b5 3c ff ff       	call   c0010203 <KePanic(char const*)>
c001c54e:	83 c4 10             	add    esp,0x10
c001c551:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c555:	8b 00                	mov    eax,DWORD PTR [eax]
c001c557:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c55a:	85 c0                	test   eax,eax
c001c55c:	75 33                	jne    c001c591 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001c55e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c562:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c568:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c56c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c573:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c577:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c57a:	83 f8 01             	cmp    eax,0x1
c001c57d:	74 21                	je     c001c5a0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c57f:	83 ec 0c             	sub    esp,0xc
c001c582:	68 f4 d8 01 c0       	push   0xc001d8f4
c001c587:	e8 77 3c ff ff       	call   c0010203 <KePanic(char const*)>
c001c58c:	83 c4 10             	add    esp,0x10
c001c58f:	eb 0f                	jmp    c001c5a0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c591:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c595:	8b 00                	mov    eax,DWORD PTR [eax]
c001c597:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001c59a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c59e:	89 10                	mov    DWORD PTR [eax],edx
c001c5a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5a4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c5a7:	8d 50 ff             	lea    edx,[eax-0x1]
c001c5aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5ae:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c5b1:	83 c4 0c             	add    esp,0xc
c001c5b4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001c5b6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001c5b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c5ba:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c5bd:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001c5be <DriverlessDevice::~DriverlessDevice()>:
c001c5be:	ba 9c df 01 c0       	mov    edx,0xc001df9c
c001c5c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5c7:	89 10                	mov    DWORD PTR [eax],edx
c001c5c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5cd:	50                   	push   eax
c001c5ce:	e8 ef f2 fe ff       	call   c000b8c2 <Device::~Device()>
c001c5d3:	83 c4 04             	add    esp,0x4
c001c5d6:	90                   	nop
c001c5d7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001c5d8 <DriverlessDevice::~DriverlessDevice()>:
c001c5d8:	83 ec 0c             	sub    esp,0xc
c001c5db:	83 ec 0c             	sub    esp,0xc
c001c5de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c5e2:	e8 d7 ff ff ff       	call   c001c5be <DriverlessDevice::~DriverlessDevice()>
c001c5e7:	83 c4 10             	add    esp,0x10
c001c5ea:	83 ec 08             	sub    esp,0x8
c001c5ed:	68 58 01 00 00       	push   0x158
c001c5f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c5f6:	e8 90 de fe ff       	call   c000a48b <operator delete(void*, unsigned long)>
c001c5fb:	83 c4 10             	add    esp,0x10
c001c5fe:	83 c4 0c             	add    esp,0xc
c001c601:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001c602 <LinkedList<Device>::addElement(Device*)>:
c001c602:	83 ec 0c             	sub    esp,0xc
c001c605:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c60a:	75 10                	jne    c001c61c <LinkedList<Device>::addElement(Device*)+0x1a>
c001c60c:	83 ec 0c             	sub    esp,0xc
c001c60f:	68 98 d8 01 c0       	push   0xc001d898
c001c614:	e8 ea 3b ff ff       	call   c0010203 <KePanic(char const*)>
c001c619:	83 c4 10             	add    esp,0x10
c001c61c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c620:	8b 00                	mov    eax,DWORD PTR [eax]
c001c622:	85 c0                	test   eax,eax
c001c624:	74 3a                	je     c001c660 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c626:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c62a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c62d:	85 c0                	test   eax,eax
c001c62f:	74 2f                	je     c001c660 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c631:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c635:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c638:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c63c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001c642:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c646:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c64a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c64d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c651:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c654:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c65e:	eb 68                	jmp    c001c6c8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c664:	8b 00                	mov    eax,DWORD PTR [eax]
c001c666:	85 c0                	test   eax,eax
c001c668:	75 4e                	jne    c001c6b8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c66a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c66e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c671:	85 c0                	test   eax,eax
c001c673:	75 43                	jne    c001c6b8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c675:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c679:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c67d:	89 10                	mov    DWORD PTR [eax],edx
c001c67f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c683:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c687:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c68a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c68e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c691:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c69b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c69f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c6a2:	85 c0                	test   eax,eax
c001c6a4:	74 22                	je     c001c6c8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c6a6:	83 ec 0c             	sub    esp,0xc
c001c6a9:	68 ba d8 01 c0       	push   0xc001d8ba
c001c6ae:	e8 50 3b ff ff       	call   c0010203 <KePanic(char const*)>
c001c6b3:	83 c4 10             	add    esp,0x10
c001c6b6:	eb 10                	jmp    c001c6c8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c6b8:	83 ec 0c             	sub    esp,0xc
c001c6bb:	68 c4 d8 01 c0       	push   0xc001d8c4
c001c6c0:	e8 3e 3b ff ff       	call   c0010203 <KePanic(char const*)>
c001c6c5:	83 c4 10             	add    esp,0x10
c001c6c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6cc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c6cf:	8d 50 01             	lea    edx,[eax+0x1]
c001c6d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6d6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c6d9:	90                   	nop
c001c6da:	83 c4 0c             	add    esp,0xc
c001c6dd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001c6de <LinkedList<Device>::LinkedList()>:
c001c6de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6e2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c6e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6ec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c6f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6f7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c6fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c702:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c708:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c70c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c713:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c717:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c71e:	90                   	nop
c001c71f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001c720 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001c720:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c724:	8b 00                	mov    eax,DWORD PTR [eax]
c001c726:	85 c0                	test   eax,eax
c001c728:	75 0e                	jne    c001c738 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c72a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c72e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c731:	85 c0                	test   eax,eax
c001c733:	75 03                	jne    c001c738 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c735:	b0 01                	mov    al,0x1
c001c737:	c3                   	ret    
c001c738:	b0 00                	mov    al,0x0
c001c73a:	90                   	nop
c001c73b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001c73c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001c73c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c740:	8b 00                	mov    eax,DWORD PTR [eax]
c001c742:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001c744 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001c744:	83 ec 0c             	sub    esp,0xc
c001c747:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c74b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c74d:	85 c0                	test   eax,eax
c001c74f:	75 17                	jne    c001c768 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001c751:	83 ec 0c             	sub    esp,0xc
c001c754:	68 d0 d8 01 c0       	push   0xc001d8d0
c001c759:	e8 a5 3a ff ff       	call   c0010203 <KePanic(char const*)>
c001c75e:	83 c4 10             	add    esp,0x10
c001c761:	e9 92 00 00 00       	jmp    c001c7f8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001c766:	66 90                	xchg   ax,ax
c001c768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c76c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c76f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c772:	85 c0                	test   eax,eax
c001c774:	0f 95 c0             	setne  al
c001c777:	84 c0                	test   al,al
c001c779:	74 11                	je     c001c78c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001c77b:	83 ec 0c             	sub    esp,0xc
c001c77e:	68 1b d9 01 c0       	push   0xc001d91b
c001c783:	e8 7b 3a ff ff       	call   c0010203 <KePanic(char const*)>
c001c788:	83 c4 10             	add    esp,0x10
c001c78b:	90                   	nop
c001c78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c790:	8b 00                	mov    eax,DWORD PTR [eax]
c001c792:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c795:	85 c0                	test   eax,eax
c001c797:	0f 94 c0             	sete   al
c001c79a:	84 c0                	test   al,al
c001c79c:	74 36                	je     c001c7d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001c79e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c7a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7ac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c7b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7b7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c7ba:	83 f8 01             	cmp    eax,0x1
c001c7bd:	74 25                	je     c001c7e4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c7bf:	83 ec 0c             	sub    esp,0xc
c001c7c2:	68 f4 d8 01 c0       	push   0xc001d8f4
c001c7c7:	e8 37 3a ff ff       	call   c0010203 <KePanic(char const*)>
c001c7cc:	83 c4 10             	add    esp,0x10
c001c7cf:	eb 13                	jmp    c001c7e4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c7d1:	8d 76 00             	lea    esi,[esi+0x0]
c001c7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7d8:	8b 00                	mov    eax,DWORD PTR [eax]
c001c7da:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001c7dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7e1:	89 10                	mov    DWORD PTR [eax],edx
c001c7e3:	90                   	nop
c001c7e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7e8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c7eb:	8d 50 ff             	lea    edx,[eax-0x1]
c001c7ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7f2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c7f5:	8d 76 00             	lea    esi,[esi+0x0]
c001c7f8:	83 c4 0c             	add    esp,0xc
c001c7fb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001c7fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001c7fc:	83 ec 0c             	sub    esp,0xc
c001c7ff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c804:	75 12                	jne    c001c818 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001c806:	83 ec 0c             	sub    esp,0xc
c001c809:	68 98 d8 01 c0       	push   0xc001d898
c001c80e:	e8 f0 39 ff ff       	call   c0010203 <KePanic(char const*)>
c001c813:	83 c4 10             	add    esp,0x10
c001c816:	66 90                	xchg   ax,ax
c001c818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c81c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c81e:	85 c0                	test   eax,eax
c001c820:	74 36                	je     c001c858 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c826:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c829:	85 c0                	test   eax,eax
c001c82b:	74 2b                	je     c001c858 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c82d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c831:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c834:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c838:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001c83b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c83f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c843:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c84a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c84d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c854:	eb 6a                	jmp    c001c8c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c856:	66 90                	xchg   ax,ax
c001c858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c85c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c85e:	85 c0                	test   eax,eax
c001c860:	75 4e                	jne    c001c8b0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c862:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c866:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c869:	85 c0                	test   eax,eax
c001c86b:	75 43                	jne    c001c8b0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c86d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c871:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c875:	89 10                	mov    DWORD PTR [eax],edx
c001c877:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c87b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c87f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c886:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c889:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c890:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c894:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c897:	85 c0                	test   eax,eax
c001c899:	74 25                	je     c001c8c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c89b:	83 ec 0c             	sub    esp,0xc
c001c89e:	68 ba d8 01 c0       	push   0xc001d8ba
c001c8a3:	e8 5b 39 ff ff       	call   c0010203 <KePanic(char const*)>
c001c8a8:	83 c4 10             	add    esp,0x10
c001c8ab:	eb 13                	jmp    c001c8c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c8ad:	8d 76 00             	lea    esi,[esi+0x0]
c001c8b0:	83 ec 0c             	sub    esp,0xc
c001c8b3:	68 c4 d8 01 c0       	push   0xc001d8c4
c001c8b8:	e8 46 39 ff ff       	call   c0010203 <KePanic(char const*)>
c001c8bd:	83 c4 10             	add    esp,0x10
c001c8c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8c4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c8c7:	8d 50 01             	lea    edx,[eax+0x1]
c001c8ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8ce:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c8d1:	90                   	nop
c001c8d2:	83 c4 0c             	add    esp,0xc
c001c8d5:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001c8d8 <ACPI::~ACPI()>:
c001c8d8:	83 ec 0c             	sub    esp,0xc
c001c8db:	ba 14 e5 01 c0       	mov    edx,0xc001e514
c001c8e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8e4:	89 10                	mov    DWORD PTR [eax],edx
c001c8e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8ea:	83 ec 0c             	sub    esp,0xc
c001c8ed:	50                   	push   eax
c001c8ee:	e8 cf ef fe ff       	call   c000b8c2 <Device::~Device()>
c001c8f3:	83 c4 10             	add    esp,0x10
c001c8f6:	90                   	nop
c001c8f7:	83 c4 0c             	add    esp,0xc
c001c8fa:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001c8fc <ACPI::~ACPI()>:
c001c8fc:	83 ec 0c             	sub    esp,0xc
c001c8ff:	83 ec 0c             	sub    esp,0xc
c001c902:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c906:	e8 cd ff ff ff       	call   c001c8d8 <ACPI::~ACPI()>
c001c90b:	83 c4 10             	add    esp,0x10
c001c90e:	83 ec 08             	sub    esp,0x8
c001c911:	68 64 12 00 00       	push   0x1264
c001c916:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c91a:	e8 6c db fe ff       	call   c000a48b <operator delete(void*, unsigned long)>
c001c91f:	83 c4 10             	add    esp,0x10
c001c922:	83 c4 0c             	add    esp,0xc
c001c925:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001c928 <LinkedList<Device>::~LinkedList()>:
c001c928:	90                   	nop
c001c929:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001c92c <LinkedList<Device>::isEmpty()>:
c001c92c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c930:	8b 00                	mov    eax,DWORD PTR [eax]
c001c932:	85 c0                	test   eax,eax
c001c934:	75 0e                	jne    c001c944 <LinkedList<Device>::isEmpty()+0x18>
c001c936:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c93a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c93d:	85 c0                	test   eax,eax
c001c93f:	75 03                	jne    c001c944 <LinkedList<Device>::isEmpty()+0x18>
c001c941:	b0 01                	mov    al,0x1
c001c943:	c3                   	ret    
c001c944:	b0 00                	mov    al,0x0
c001c946:	90                   	nop
c001c947:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001c948 <LinkedList<Device>::getFirstElement()>:
c001c948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c94c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c94e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001c950 <LinkedList<Device>::removeFirst()>:
c001c950:	83 ec 0c             	sub    esp,0xc
c001c953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c957:	8b 00                	mov    eax,DWORD PTR [eax]
c001c959:	85 c0                	test   eax,eax
c001c95b:	75 17                	jne    c001c974 <LinkedList<Device>::removeFirst()+0x24>
c001c95d:	83 ec 0c             	sub    esp,0xc
c001c960:	68 d0 d8 01 c0       	push   0xc001d8d0
c001c965:	e8 99 38 ff ff       	call   c0010203 <KePanic(char const*)>
c001c96a:	83 c4 10             	add    esp,0x10
c001c96d:	e9 92 00 00 00       	jmp    c001ca04 <LinkedList<Device>::removeFirst()+0xb4>
c001c972:	66 90                	xchg   ax,ax
c001c974:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c978:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c97b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c981:	85 c0                	test   eax,eax
c001c983:	74 13                	je     c001c998 <LinkedList<Device>::removeFirst()+0x48>
c001c985:	83 ec 0c             	sub    esp,0xc
c001c988:	68 1b d9 01 c0       	push   0xc001d91b
c001c98d:	e8 71 38 ff ff       	call   c0010203 <KePanic(char const*)>
c001c992:	83 c4 10             	add    esp,0x10
c001c995:	8d 76 00             	lea    esi,[esi+0x0]
c001c998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c99c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c99e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c9a4:	85 c0                	test   eax,eax
c001c9a6:	75 34                	jne    c001c9dc <LinkedList<Device>::removeFirst()+0x8c>
c001c9a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9ac:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c9b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9b6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c9bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9c1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c9c4:	83 f8 01             	cmp    eax,0x1
c001c9c7:	74 27                	je     c001c9f0 <LinkedList<Device>::removeFirst()+0xa0>
c001c9c9:	83 ec 0c             	sub    esp,0xc
c001c9cc:	68 f4 d8 01 c0       	push   0xc001d8f4
c001c9d1:	e8 2d 38 ff ff       	call   c0010203 <KePanic(char const*)>
c001c9d6:	83 c4 10             	add    esp,0x10
c001c9d9:	eb 15                	jmp    c001c9f0 <LinkedList<Device>::removeFirst()+0xa0>
c001c9db:	90                   	nop
c001c9dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9e0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c9e2:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001c9e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9ec:	89 10                	mov    DWORD PTR [eax],edx
c001c9ee:	66 90                	xchg   ax,ax
c001c9f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c9f7:	8d 50 ff             	lea    edx,[eax-0x1]
c001c9fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9fe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ca01:	8d 76 00             	lea    esi,[esi+0x0]
c001ca04:	83 c4 0c             	add    esp,0xc
c001ca07:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001ca08 <CPU::~CPU()>:
c001ca08:	83 ec 0c             	sub    esp,0xc
c001ca0b:	ba b0 e6 01 c0       	mov    edx,0xc001e6b0
c001ca10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca14:	89 10                	mov    DWORD PTR [eax],edx
c001ca16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca1a:	83 ec 0c             	sub    esp,0xc
c001ca1d:	50                   	push   eax
c001ca1e:	e8 9f ee fe ff       	call   c000b8c2 <Device::~Device()>
c001ca23:	83 c4 10             	add    esp,0x10
c001ca26:	90                   	nop
c001ca27:	83 c4 0c             	add    esp,0xc
c001ca2a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001ca2c <CPU::~CPU()>:
c001ca2c:	83 ec 0c             	sub    esp,0xc
c001ca2f:	83 ec 0c             	sub    esp,0xc
c001ca32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca36:	e8 cd ff ff ff       	call   c001ca08 <CPU::~CPU()>
c001ca3b:	83 c4 10             	add    esp,0x10
c001ca3e:	83 ec 08             	sub    esp,0x8
c001ca41:	68 94 11 00 00       	push   0x1194
c001ca46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca4a:	e8 3c da fe ff       	call   c000a48b <operator delete(void*, unsigned long)>
c001ca4f:	83 c4 10             	add    esp,0x10
c001ca52:	83 c4 0c             	add    esp,0xc
c001ca55:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001ca58 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001ca58:	90                   	nop
c001ca59:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001ca5c <ThreadControlBlock::ThreadControlBlock()>:
c001ca5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca60:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ca67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca6b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001ca72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca76:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001ca7d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca81:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001ca88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca8c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001ca93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca97:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001ca9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca9f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001caa3:	90                   	nop
c001caa4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001caa8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001caa8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001caac:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cab2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cab6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cabd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cac1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cac8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cacc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cad2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cad6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cadd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cae1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cae8:	90                   	nop
c001cae9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001caec <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001caec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001caf0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001caf3:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001caf4 <PCI::~PCI()>:
c001caf4:	83 ec 0c             	sub    esp,0xc
c001caf7:	ba 4c f3 01 c0       	mov    edx,0xc001f34c
c001cafc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb00:	89 10                	mov    DWORD PTR [eax],edx
c001cb02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb06:	83 ec 0c             	sub    esp,0xc
c001cb09:	50                   	push   eax
c001cb0a:	e8 3d e8 fe ff       	call   c000b34c <Bus::~Bus()>
c001cb0f:	83 c4 10             	add    esp,0x10
c001cb12:	90                   	nop
c001cb13:	83 c4 0c             	add    esp,0xc
c001cb16:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001cb18 <PCI::~PCI()>:
c001cb18:	83 ec 0c             	sub    esp,0xc
c001cb1b:	83 ec 0c             	sub    esp,0xc
c001cb1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb22:	e8 cd ff ff ff       	call   c001caf4 <PCI::~PCI()>
c001cb27:	83 c4 10             	add    esp,0x10
c001cb2a:	83 ec 08             	sub    esp,0x8
c001cb2d:	68 5c 01 00 00       	push   0x15c
c001cb32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb36:	e8 50 d9 fe ff       	call   c000a48b <operator delete(void*, unsigned long)>
c001cb3b:	83 c4 10             	add    esp,0x10
c001cb3e:	83 c4 0c             	add    esp,0xc
c001cb41:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001cb42 <IDE::~IDE()>:
c001cb42:	83 ec 0c             	sub    esp,0xc
c001cb45:	ba 00 f4 01 c0       	mov    edx,0xc001f400
c001cb4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb4e:	89 10                	mov    DWORD PTR [eax],edx
c001cb50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb54:	83 ec 0c             	sub    esp,0xc
c001cb57:	50                   	push   eax
c001cb58:	e8 df f1 fe ff       	call   c000bd3c <HardDiskController::~HardDiskController()>
c001cb5d:	83 c4 10             	add    esp,0x10
c001cb60:	90                   	nop
c001cb61:	83 c4 0c             	add    esp,0xc
c001cb64:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001cb66 <IDE::~IDE()>:
c001cb66:	83 ec 0c             	sub    esp,0xc
c001cb69:	83 ec 0c             	sub    esp,0xc
c001cb6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb70:	e8 cd ff ff ff       	call   c001cb42 <IDE::~IDE()>
c001cb75:	83 c4 10             	add    esp,0x10
c001cb78:	83 ec 08             	sub    esp,0x8
c001cb7b:	68 70 02 00 00       	push   0x270
c001cb80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb84:	e8 02 d9 fe ff       	call   c000a48b <operator delete(void*, unsigned long)>
c001cb89:	83 c4 10             	add    esp,0x10
c001cb8c:	83 c4 0c             	add    esp,0xc
c001cb8f:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001cb90 <SATABus::~SATABus()>:
c001cb90:	83 ec 0c             	sub    esp,0xc
c001cb93:	ba 50 f4 01 c0       	mov    edx,0xc001f450
c001cb98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb9c:	89 10                	mov    DWORD PTR [eax],edx
c001cb9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cba2:	83 ec 0c             	sub    esp,0xc
c001cba5:	50                   	push   eax
c001cba6:	e8 91 f1 fe ff       	call   c000bd3c <HardDiskController::~HardDiskController()>
c001cbab:	83 c4 10             	add    esp,0x10
c001cbae:	90                   	nop
c001cbaf:	83 c4 0c             	add    esp,0xc
c001cbb2:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001cbb4 <SATABus::~SATABus()>:
c001cbb4:	83 ec 0c             	sub    esp,0xc
c001cbb7:	83 ec 0c             	sub    esp,0xc
c001cbba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbbe:	e8 cd ff ff ff       	call   c001cb90 <SATABus::~SATABus()>
c001cbc3:	83 c4 10             	add    esp,0x10
c001cbc6:	83 ec 08             	sub    esp,0x8
c001cbc9:	68 64 01 00 00       	push   0x164
c001cbce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbd2:	e8 b4 d8 fe ff       	call   c000a48b <operator delete(void*, unsigned long)>
c001cbd7:	83 c4 10             	add    esp,0x10
c001cbda:	83 c4 0c             	add    esp,0xc
c001cbdd:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001cbde <ATA::~ATA()>:
c001cbde:	83 ec 0c             	sub    esp,0xc
c001cbe1:	ba 90 f4 01 c0       	mov    edx,0xc001f490
c001cbe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbea:	89 10                	mov    DWORD PTR [eax],edx
c001cbec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbf0:	83 ec 0c             	sub    esp,0xc
c001cbf3:	50                   	push   eax
c001cbf4:	e8 25 f2 fe ff       	call   c000be1e <PhysicalDisk::~PhysicalDisk()>
c001cbf9:	83 c4 10             	add    esp,0x10
c001cbfc:	90                   	nop
c001cbfd:	83 c4 0c             	add    esp,0xc
c001cc00:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001cc02 <ATA::~ATA()>:
c001cc02:	83 ec 0c             	sub    esp,0xc
c001cc05:	83 ec 0c             	sub    esp,0xc
c001cc08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc0c:	e8 cd ff ff ff       	call   c001cbde <ATA::~ATA()>
c001cc11:	83 c4 10             	add    esp,0x10
c001cc14:	83 ec 08             	sub    esp,0x8
c001cc17:	68 7c 01 00 00       	push   0x17c
c001cc1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc20:	e8 66 d8 fe ff       	call   c000a48b <operator delete(void*, unsigned long)>
c001cc25:	83 c4 10             	add    esp,0x10
c001cc28:	83 c4 0c             	add    esp,0xc
c001cc2b:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001cc2c <ATAPI::~ATAPI()>:
c001cc2c:	83 ec 0c             	sub    esp,0xc
c001cc2f:	ba d8 f4 01 c0       	mov    edx,0xc001f4d8
c001cc34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc38:	89 10                	mov    DWORD PTR [eax],edx
c001cc3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc3e:	83 ec 0c             	sub    esp,0xc
c001cc41:	50                   	push   eax
c001cc42:	e8 d7 f1 fe ff       	call   c000be1e <PhysicalDisk::~PhysicalDisk()>
c001cc47:	83 c4 10             	add    esp,0x10
c001cc4a:	90                   	nop
c001cc4b:	83 c4 0c             	add    esp,0xc
c001cc4e:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001cc50 <ATAPI::~ATAPI()>:
c001cc50:	83 ec 0c             	sub    esp,0xc
c001cc53:	83 ec 0c             	sub    esp,0xc
c001cc56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc5a:	e8 cd ff ff ff       	call   c001cc2c <ATAPI::~ATAPI()>
c001cc5f:	83 c4 10             	add    esp,0x10
c001cc62:	83 ec 08             	sub    esp,0x8
c001cc65:	68 84 01 00 00       	push   0x184
c001cc6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc6e:	e8 18 d8 fe ff       	call   c000a48b <operator delete(void*, unsigned long)>
c001cc73:	83 c4 10             	add    esp,0x10
c001cc76:	83 c4 0c             	add    esp,0xc
c001cc79:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001cc7a <SATA::~SATA()>:
c001cc7a:	83 ec 0c             	sub    esp,0xc
c001cc7d:	ba 8c f5 01 c0       	mov    edx,0xc001f58c
c001cc82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc86:	89 10                	mov    DWORD PTR [eax],edx
c001cc88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc8c:	83 ec 0c             	sub    esp,0xc
c001cc8f:	50                   	push   eax
c001cc90:	e8 89 f1 fe ff       	call   c000be1e <PhysicalDisk::~PhysicalDisk()>
c001cc95:	83 c4 10             	add    esp,0x10
c001cc98:	90                   	nop
c001cc99:	83 c4 0c             	add    esp,0xc
c001cc9c:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001cc9e <SATA::~SATA()>:
c001cc9e:	83 ec 0c             	sub    esp,0xc
c001cca1:	83 ec 0c             	sub    esp,0xc
c001cca4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cca8:	e8 cd ff ff ff       	call   c001cc7a <SATA::~SATA()>
c001ccad:	83 c4 10             	add    esp,0x10
c001ccb0:	83 ec 08             	sub    esp,0x8
c001ccb3:	68 7c 01 00 00       	push   0x17c
c001ccb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccbc:	e8 ca d7 fe ff       	call   c000a48b <operator delete(void*, unsigned long)>
c001ccc1:	83 c4 10             	add    esp,0x10
c001ccc4:	83 c4 0c             	add    esp,0xc
c001ccc7:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001ccc8 <SATAPI::~SATAPI()>:
c001ccc8:	83 ec 0c             	sub    esp,0xc
c001cccb:	ba c4 f6 01 c0       	mov    edx,0xc001f6c4
c001ccd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccd4:	89 10                	mov    DWORD PTR [eax],edx
c001ccd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccda:	83 ec 0c             	sub    esp,0xc
c001ccdd:	50                   	push   eax
c001ccde:	e8 3b f1 fe ff       	call   c000be1e <PhysicalDisk::~PhysicalDisk()>
c001cce3:	83 c4 10             	add    esp,0x10
c001cce6:	90                   	nop
c001cce7:	83 c4 0c             	add    esp,0xc
c001ccea:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001ccec <SATAPI::~SATAPI()>:
c001ccec:	83 ec 0c             	sub    esp,0xc
c001ccef:	83 ec 0c             	sub    esp,0xc
c001ccf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccf6:	e8 cd ff ff ff       	call   c001ccc8 <SATAPI::~SATAPI()>
c001ccfb:	83 c4 10             	add    esp,0x10
c001ccfe:	83 ec 08             	sub    esp,0x8
c001cd01:	68 84 01 00 00       	push   0x184
c001cd06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd0a:	e8 7c d7 fe ff       	call   c000a48b <operator delete(void*, unsigned long)>
c001cd0f:	83 c4 10             	add    esp,0x10
c001cd12:	83 c4 0c             	add    esp,0xc
c001cd15:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001cd16 <IOAPIC::~IOAPIC()>:
c001cd16:	83 ec 0c             	sub    esp,0xc
c001cd19:	ba 04 f7 01 c0       	mov    edx,0xc001f704
c001cd1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd22:	89 10                	mov    DWORD PTR [eax],edx
c001cd24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd28:	83 ec 0c             	sub    esp,0xc
c001cd2b:	50                   	push   eax
c001cd2c:	e8 91 eb fe ff       	call   c000b8c2 <Device::~Device()>
c001cd31:	83 c4 10             	add    esp,0x10
c001cd34:	90                   	nop
c001cd35:	83 c4 0c             	add    esp,0xc
c001cd38:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001cd3a <IOAPIC::~IOAPIC()>:
c001cd3a:	83 ec 0c             	sub    esp,0xc
c001cd3d:	83 ec 0c             	sub    esp,0xc
c001cd40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd44:	e8 cd ff ff ff       	call   c001cd16 <IOAPIC::~IOAPIC()>
c001cd49:	83 c4 10             	add    esp,0x10
c001cd4c:	83 ec 08             	sub    esp,0x8
c001cd4f:	68 68 01 00 00       	push   0x168
c001cd54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd58:	e8 2e d7 fe ff       	call   c000a48b <operator delete(void*, unsigned long)>
c001cd5d:	83 c4 10             	add    esp,0x10
c001cd60:	83 c4 0c             	add    esp,0xc
c001cd63:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001cd64 <APICTimer::~APICTimer()>:
c001cd64:	83 ec 0c             	sub    esp,0xc
c001cd67:	ba 4c f7 01 c0       	mov    edx,0xc001f74c
c001cd6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd70:	89 10                	mov    DWORD PTR [eax],edx
c001cd72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd76:	83 ec 0c             	sub    esp,0xc
c001cd79:	50                   	push   eax
c001cd7a:	e8 81 04 ff ff       	call   c000d200 <Timer::~Timer()>
c001cd7f:	83 c4 10             	add    esp,0x10
c001cd82:	90                   	nop
c001cd83:	83 c4 0c             	add    esp,0xc
c001cd86:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001cd88 <APICTimer::~APICTimer()>:
c001cd88:	83 ec 0c             	sub    esp,0xc
c001cd8b:	83 ec 0c             	sub    esp,0xc
c001cd8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd92:	e8 cd ff ff ff       	call   c001cd64 <APICTimer::~APICTimer()>
c001cd97:	83 c4 10             	add    esp,0x10
c001cd9a:	83 ec 08             	sub    esp,0x8
c001cd9d:	68 60 01 00 00       	push   0x160
c001cda2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cda6:	e8 e0 d6 fe ff       	call   c000a48b <operator delete(void*, unsigned long)>
c001cdab:	83 c4 10             	add    esp,0x10
c001cdae:	83 c4 0c             	add    esp,0xc
c001cdb1:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001cdb4 <PIT::~PIT()>:
c001cdb4:	83 ec 0c             	sub    esp,0xc
c001cdb7:	ba 9c f7 01 c0       	mov    edx,0xc001f79c
c001cdbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdc0:	89 10                	mov    DWORD PTR [eax],edx
c001cdc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdc6:	83 ec 0c             	sub    esp,0xc
c001cdc9:	50                   	push   eax
c001cdca:	e8 31 04 ff ff       	call   c000d200 <Timer::~Timer()>
c001cdcf:	83 c4 10             	add    esp,0x10
c001cdd2:	90                   	nop
c001cdd3:	83 c4 0c             	add    esp,0xc
c001cdd6:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001cdd8 <PIT::~PIT()>:
c001cdd8:	83 ec 0c             	sub    esp,0xc
c001cddb:	83 ec 0c             	sub    esp,0xc
c001cdde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cde2:	e8 cd ff ff ff       	call   c001cdb4 <PIT::~PIT()>
c001cde7:	83 c4 10             	add    esp,0x10
c001cdea:	83 ec 08             	sub    esp,0x8
c001cded:	68 5c 01 00 00       	push   0x15c
c001cdf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdf6:	e8 90 d6 fe ff       	call   c000a48b <operator delete(void*, unsigned long)>
c001cdfb:	83 c4 10             	add    esp,0x10
c001cdfe:	83 c4 0c             	add    esp,0xc
c001ce01:	c3                   	ret    

Disassembly of section userkernel:

c0020000 <KiDefaultSignalHandlerAbort(int)>:
c0020000:	57                   	push   edi
c0020001:	b9 07 00 00 00       	mov    ecx,0x7
c0020006:	56                   	push   esi
c0020007:	be a1 e7 01 c0       	mov    esi,0xc001e7a1
c002000c:	83 ec 24             	sub    esp,0x24
c002000f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020013:	fc                   	cld    
c0020014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002001a:	50                   	push   eax
c002001b:	6a 00                	push   0x0
c002001d:	6a 00                	push   0x0
c002001f:	6a 27                	push   0x27
c0020021:	e8 2c 00 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020026:	83 c4 34             	add    esp,0x34
c0020029:	5e                   	pop    esi
c002002a:	5f                   	pop    edi
c002002b:	c3                   	ret    

c002002c <KiDefaultSignalHandlerTerminate(int)>:
c002002c:	57                   	push   edi
c002002d:	b9 08 00 00 00       	mov    ecx,0x8
c0020032:	56                   	push   esi
c0020033:	be bd e7 01 c0       	mov    esi,0xc001e7bd
c0020038:	83 ec 24             	sub    esp,0x24
c002003b:	89 e7                	mov    edi,esp
c002003d:	fc                   	cld    
c002003e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020040:	54                   	push   esp
c0020041:	6a 00                	push   0x0
c0020043:	6a 00                	push   0x0
c0020045:	6a 27                	push   0x27
c0020047:	e8 06 00 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002004c:	83 c4 34             	add    esp,0x34
c002004f:	5e                   	pop    esi
c0020050:	5f                   	pop    edi
c0020051:	c3                   	ret    

c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0020052:	53                   	push   ebx
c0020053:	83 ec 10             	sub    esp,0x10
c0020056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002005a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002005e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0020062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020066:	cd 60                	int    0x60
c0020068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002006c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020078:	83 c4 10             	add    esp,0x10
c002007b:	5b                   	pop    ebx
c002007c:	c3                   	ret    

Disassembly of section align_previous:

c0021000 <DO_NOT_DELETE()>:
c0021000:	c3                   	ret    
