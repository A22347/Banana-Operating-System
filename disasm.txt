
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 e8 7a 00 00       	call   c0007b08 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 28 24 02 c0       	mov    eax,0xc0022428
c0000025:	3d 28 24 02 c0       	cmp    eax,0xc0022428
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 28 24 02 c0       	push   0xc0022428
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 28 24 02 c0       	mov    eax,0xc0022428
c0000051:	2d 28 24 02 c0       	sub    eax,0xc0022428
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 28 24 02 c0       	push   0xc0022428
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 40 02 c0 00 	cmp    BYTE PTR ds:0xc00240c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 3c f3 01 c0       	mov    ebx,0xc001f33c
c0000097:	81 eb 38 f3 01 c0    	sub    ebx,0xc001f338
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 38 f3 01 c0       	mov    esi,0xc001f338
c00000a6:	a1 c4 40 02 c0       	mov    eax,ds:0xc00240c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 40 02 c0       	mov    ds:0xc00240c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 40 02 c0       	mov    eax,ds:0xc00240c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 28 24 02 c0       	push   0xc0022428
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 40 02 c0 01 	mov    BYTE PTR ds:0xc00240c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 40 02 c0       	push   0xc00240c8
c0000108:	68 28 24 02 c0       	push   0xc0022428
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 63 46 01 00       	call   c0014910 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 ba a4 00 00       	call   c000a77f <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 41 46 01 00       	call   c0014910 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 4e 4b 01 00       	call   c0014e3c <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 0d 52 01 00       	call   c0015504 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 4e 02 c0 	lgdtd  ds:0xc0024ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 93 05 01 00       	jmp    c0010912 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 40 02 c0       	mov    ds:0xc00240e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 40 02 c0    	mov    DWORD PTR ds:0xc00240e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 40 02 c0    	mov    ebx,DWORD PTR ds:0xc00240e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 40 f3 01 c0 02 	test   BYTE PTR [edx-0x3ffe0cc0],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 40 f3 01 c0 01 	test   BYTE PTR [edx-0x3ffe0cc0],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 40 f3 01 c0 08 	test   BYTE PTR [edx-0x3ffe0cc0],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 40 f3 01 c0 04 	test   BYTE PTR [ecx-0x3ffe0cc0],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 40 f3 01 c0 01 	test   BYTE PTR [edx-0x3ffe0cc0],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d5a:	85 db                	test   ebx,ebx
c0000d5c:	0f 84 e2 00 00 00    	je     c0000e44 <dlfree+0xf1>
c0000d62:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d65:	8b 0d 00 41 02 c0    	mov    ecx,DWORD PTR ds:0xc0024100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c1                	cmp    ecx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 c9 03             	or     ecx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 0d 00 41 02 c0    	mov    DWORD PTR ds:0xc0024100,ecx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 0c 85 04 41 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbefc]
c0000d8d:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d8f:	89 14 85 04 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbefc],edx
c0000d96:	e9 a9 00 00 00       	jmp    c0000e44 <dlfree+0xf1>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 c9 01             	or     ecx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 0d 00 41 02 c0    	mov    DWORD PTR ds:0xc0024100,ecx
c0000db0:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000db3:	83 e1 fc             	and    ecx,0xfffffffc
c0000db6:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000dbf:	29 da                	sub    edx,ebx
c0000dc1:	01 d8                	add    eax,ebx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dc9:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dcc:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000dcf:	39 35 2c 41 02 c0    	cmp    DWORD PTR ds:0xc002412c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000ddb:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000dde:	80 e3 01             	and    bl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000de9:	01 c8                	add    eax,ecx
c0000deb:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dee:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000df1:	8b 0d 3c 41 02 c0    	mov    ecx,DWORD PTR ds:0xc002413c
c0000df7:	c7 42 0c 34 41 02 c0 	mov    DWORD PTR [edx+0xc],0xc0024134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 c8                	add    eax,ecx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 16                	jbe    c0000e44 <dlfree+0xf1>
c0000e2e:	f6 05 00 41 02 c0 02 	test   BYTE PTR ds:0xc0024100,0x2
c0000e35:	74 0d                	je     c0000e44 <dlfree+0xf1>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	5b                   	pop    ebx
c0000e45:	5e                   	pop    esi
c0000e46:	5f                   	pop    edi
c0000e47:	c3                   	ret    

c0000e48 <sYSMALLOc>:
c0000e48:	55                   	push   ebp
c0000e49:	57                   	push   edi
c0000e4a:	56                   	push   esi
c0000e4b:	53                   	push   ebx
c0000e4c:	89 d3                	mov    ebx,edx
c0000e4e:	83 ec 2c             	sub    esp,0x2c
c0000e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e55:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e5b:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e5e:	8d 42 ff             	lea    eax,[edx-0x1]
c0000e61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000e65:	74 1f                	je     c0000e86 <sYSMALLOc+0x3e>
c0000e67:	89 d8                	mov    eax,ebx
c0000e69:	e8 fe fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e6e:	83 ec 0c             	sub    esp,0xc
c0000e71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000e75:	83 e8 07             	sub    eax,0x7
c0000e78:	50                   	push   eax
c0000e79:	e8 2d 02 00 00       	call   c00010ab <dlmalloc>
c0000e7e:	83 c4 10             	add    esp,0x10
c0000e81:	e9 1d 02 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000e86:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000e89:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e8f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e92:	83 e0 fc             	and    eax,0xfffffffc
c0000e95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e9d:	83 c0 10             	add    eax,0x10
c0000ea0:	01 c1                	add    ecx,eax
c0000ea2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000ea6:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ead:	74 04                	je     c0000eb3 <sYSMALLOc+0x6b>
c0000eaf:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000eb3:	f7 da                	neg    edx
c0000eb5:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
c0000eb9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0000ebd:	21 d1                	and    ecx,edx
c0000ebf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000ec3:	7f 07                	jg     c0000ecc <sYSMALLOc+0x84>
c0000ec5:	31 c0                	xor    eax,eax
c0000ec7:	e9 d7 01 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000ecc:	83 ec 0c             	sub    esp,0xc
c0000ecf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000ed3:	e8 a8 6a 00 00       	call   c0007980 <sbrk>
c0000ed8:	83 c4 10             	add    esp,0x10
c0000edb:	89 c6                	mov    esi,eax
c0000edd:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee0:	74 e3                	je     c0000ec5 <sYSMALLOc+0x7d>
c0000ee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000ee6:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000ee9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eed:	03 83 68 03 00 00    	add    eax,DWORD PTR [ebx+0x368]
c0000ef3:	39 f1                	cmp    ecx,esi
c0000ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ef9:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000eff:	75 13                	jne    c0000f14 <sYSMALLOc+0xcc>
c0000f01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f09:	83 c8 01             	or     eax,0x1
c0000f0c:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f0f:	e9 37 01 00 00       	jmp    c000104b <sYSMALLOc+0x203>
c0000f14:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f1a:	89 d5                	mov    ebp,edx
c0000f1c:	83 e5 01             	and    ebp,0x1
c0000f1f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f24:	0f 95 c0             	setne  al
c0000f27:	21 e8                	and    eax,ebp
c0000f29:	39 f1                	cmp    ecx,esi
c0000f2b:	76 12                	jbe    c0000f3f <sYSMALLOc+0xf7>
c0000f2d:	85 c0                	test   eax,eax
c0000f2f:	74 0e                	je     c0000f3f <sYSMALLOc+0xf7>
c0000f31:	83 e2 fe             	and    edx,0xfffffffe
c0000f34:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f3a:	e9 82 00 00 00       	jmp    c0000fc1 <sYSMALLOc+0x179>
c0000f3f:	85 ed                	test   ebp,ebp
c0000f41:	74 7e                	je     c0000fc1 <sYSMALLOc+0x179>
c0000f43:	85 c0                	test   eax,eax
c0000f45:	74 0e                	je     c0000f55 <sYSMALLOc+0x10d>
c0000f47:	89 f0                	mov    eax,esi
c0000f49:	29 c8                	sub    eax,ecx
c0000f4b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0000f4f:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f55:	89 f2                	mov    edx,esi
c0000f57:	83 e2 07             	and    edx,0x7
c0000f5a:	74 0c                	je     c0000f68 <sYSMALLOc+0x120>
c0000f5c:	b8 08 00 00 00       	mov    eax,0x8
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000f66:	eb 04                	jmp    c0000f6c <sYSMALLOc+0x124>
c0000f68:	89 f5                	mov    ebp,esi
c0000f6a:	31 c0                	xor    eax,eax
c0000f6c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f70:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000f78:	01 c1                	add    ecx,eax
c0000f7a:	83 ec 0c             	sub    esp,0xc
c0000f7d:	01 f1                	add    ecx,esi
c0000f7f:	01 ca                	add    edx,ecx
c0000f81:	29 c8                	sub    eax,ecx
c0000f83:	23 54 24 24          	and    edx,DWORD PTR [esp+0x24]
c0000f87:	01 c2                	add    edx,eax
c0000f89:	52                   	push   edx
c0000f8a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f8e:	e8 ed 69 00 00       	call   c0007980 <sbrk>
c0000f93:	83 c4 10             	add    esp,0x10
c0000f96:	83 f8 ff             	cmp    eax,0xffffffff
c0000f99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f9d:	75 0f                	jne    c0000fae <sYSMALLOc+0x166>
c0000f9f:	83 ec 0c             	sub    esp,0xc
c0000fa2:	6a 00                	push   0x0
c0000fa4:	e8 d7 69 00 00       	call   c0007980 <sbrk>
c0000fa9:	83 c4 10             	add    esp,0x10
c0000fac:	eb 30                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fae:	39 c6                	cmp    esi,eax
c0000fb0:	76 33                	jbe    c0000fe5 <sYSMALLOc+0x19d>
c0000fb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fb6:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000fbd:	01 f0                	add    eax,esi
c0000fbf:	eb 1d                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fc1:	83 ec 0c             	sub    esp,0xc
c0000fc4:	89 f5                	mov    ebp,esi
c0000fc6:	6a 00                	push   0x0
c0000fc8:	e8 b3 69 00 00       	call   c0007980 <sbrk>
c0000fcd:	89 c2                	mov    edx,eax
c0000fcf:	29 f2                	sub    edx,esi
c0000fd1:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000fd5:	83 c4 10             	add    esp,0x10
c0000fd8:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000fde:	31 d2                	xor    edx,edx
c0000fe0:	83 f8 ff             	cmp    eax,0xffffffff
c0000fe3:	74 66                	je     c000104b <sYSMALLOc+0x203>
c0000fe5:	29 e8                	sub    eax,ebp
c0000fe7:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000fea:	01 d0                	add    eax,edx
c0000fec:	83 c8 01             	or     eax,0x1
c0000fef:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000ff2:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000ff8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000ffd:	74 4c                	je     c000104b <sYSMALLOc+0x203>
c0000fff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001003:	83 e8 0c             	sub    eax,0xc
c0001006:	83 e0 f8             	and    eax,0xfffffff8
c0001009:	89 c2                	mov    edx,eax
c000100b:	83 ca 01             	or     edx,0x1
c000100e:	83 f8 0f             	cmp    eax,0xf
c0001011:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001014:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c000101c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001024:	76 25                	jbe    c000104b <sYSMALLOc+0x203>
c0001026:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000102c:	83 ec 0c             	sub    esp,0xc
c000102f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001039:	83 c7 08             	add    edi,0x8
c000103c:	57                   	push   edi
c000103d:	e8 11 fd ff ff       	call   c0000d53 <dlfree>
c0001042:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0001048:	83 c4 10             	add    esp,0x10
c000104b:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001051:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001057:	73 06                	jae    c000105f <sYSMALLOc+0x217>
c0001059:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c000105f:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0001065:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c000106b:	73 06                	jae    c0001073 <sYSMALLOc+0x22b>
c000106d:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001073:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001076:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001079:	83 e2 fc             	and    edx,0xfffffffc
c000107c:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
c0001080:	0f 82 3f fe ff ff    	jb     c0000ec5 <sYSMALLOc+0x7d>
c0001086:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000108a:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000108d:	29 fa                	sub    edx,edi
c000108f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001092:	83 ca 01             	or     edx,0x1
c0001095:	89 fb                	mov    ebx,edi
c0001097:	83 c0 08             	add    eax,0x8
c000109a:	83 cb 01             	or     ebx,0x1
c000109d:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	83 c4 2c             	add    esp,0x2c
c00010a6:	5b                   	pop    ebx
c00010a7:	5e                   	pop    esi
c00010a8:	5f                   	pop    edi
c00010a9:	5d                   	pop    ebp
c00010aa:	c3                   	ret    

c00010ab <dlmalloc>:
c00010ab:	55                   	push   ebp
c00010ac:	57                   	push   edi
c00010ad:	56                   	push   esi
c00010ae:	53                   	push   ebx
c00010af:	83 ec 1c             	sub    esp,0x1c
c00010b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010b6:	83 f8 df             	cmp    eax,0xffffffdf
c00010b9:	0f 87 70 03 00 00    	ja     c000142f <dlmalloc+0x384>
c00010bf:	83 c0 0b             	add    eax,0xb
c00010c2:	be 10 00 00 00       	mov    esi,0x10
c00010c7:	83 f8 0f             	cmp    eax,0xf
c00010ca:	76 05                	jbe    c00010d1 <dlmalloc+0x26>
c00010cc:	83 e0 f8             	and    eax,0xfffffff8
c00010cf:	89 c6                	mov    esi,eax
c00010d1:	8b 3d 00 41 02 c0    	mov    edi,DWORD PTR ds:0xc0024100
c00010d7:	f7 c7 01 00 00 00    	test   edi,0x1
c00010dd:	75 17                	jne    c00010f6 <dlmalloc+0x4b>
c00010df:	85 ff                	test   edi,edi
c00010e1:	0f 85 05 03 00 00    	jne    c00013ec <dlmalloc+0x341>
c00010e7:	b8 00 41 02 c0       	mov    eax,0xc0024100
c00010ec:	e8 7b fb ff ff       	call   c0000c6c <malloc_consolidate>
c00010f1:	e9 f6 02 00 00       	jmp    c00013ec <dlmalloc+0x341>
c00010f6:	39 f7                	cmp    edi,esi
c00010f8:	72 1f                	jb     c0001119 <dlmalloc+0x6e>
c00010fa:	89 f2                	mov    edx,esi
c00010fc:	c1 ea 03             	shr    edx,0x3
c00010ff:	83 ea 02             	sub    edx,0x2
c0001102:	8b 04 95 04 41 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbefc]
c0001109:	85 c0                	test   eax,eax
c000110b:	74 0c                	je     c0001119 <dlmalloc+0x6e>
c000110d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001110:	89 0c 95 04 41 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbefc],ecx
c0001117:	eb 30                	jmp    c0001149 <dlmalloc+0x9e>
c0001119:	89 f0                	mov    eax,esi
c000111b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001121:	77 2e                	ja     c0001151 <dlmalloc+0xa6>
c0001123:	c1 e8 03             	shr    eax,0x3
c0001126:	8d 14 c5 34 41 02 c0 	lea    edx,[eax*8-0x3ffdbecc]
c000112d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001131:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001134:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001137:	39 c3                	cmp    ebx,eax
c0001139:	74 2e                	je     c0001169 <dlmalloc+0xbe>
c000113b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000113e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001143:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0001146:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001149:	83 c0 08             	add    eax,0x8
c000114c:	e9 e0 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001151:	e8 92 fa ff ff       	call   c0000be8 <largebin_index>
c0001156:	83 e7 02             	and    edi,0x2
c0001159:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000115d:	74 0a                	je     c0001169 <dlmalloc+0xbe>
c000115f:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001164:	e8 03 fb ff ff       	call   c0000c6c <malloc_consolidate>
c0001169:	8d 46 10             	lea    eax,[esi+0x10]
c000116c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001170:	8b 1d 40 41 02 c0    	mov    ebx,DWORD PTR ds:0xc0024140
c0001176:	81 fb 34 41 02 c0    	cmp    ebx,0xc0024134
c000117c:	0f 84 13 01 00 00    	je     c0001295 <dlmalloc+0x1ea>
c0001182:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001185:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001188:	83 e7 fc             	and    edi,0xfffffffc
c000118b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001191:	77 4c                	ja     c00011df <dlmalloc+0x134>
c0001193:	3d 34 41 02 c0       	cmp    eax,0xc0024134
c0001198:	75 45                	jne    c00011df <dlmalloc+0x134>
c000119a:	39 1d 30 41 02 c0    	cmp    DWORD PTR ds:0xc0024130,ebx
c00011a0:	75 3d                	jne    c00011df <dlmalloc+0x134>
c00011a2:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011a6:	73 37                	jae    c00011df <dlmalloc+0x134>
c00011a8:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ab:	89 fa                	mov    edx,edi
c00011ad:	a3 3c 41 02 c0       	mov    ds:0xc002413c,eax
c00011b2:	a3 40 41 02 c0       	mov    ds:0xc0024140,eax
c00011b7:	a3 30 41 02 c0       	mov    ds:0xc0024130,eax
c00011bc:	29 f2                	sub    edx,esi
c00011be:	c7 40 08 34 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc0024134
c00011c5:	c7 40 0c 34 41 02 c0 	mov    DWORD PTR [eax+0xc],0xc0024134
c00011cc:	83 ce 01             	or     esi,0x1
c00011cf:	89 d1                	mov    ecx,edx
c00011d1:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c00011d4:	83 c9 01             	or     ecx,0x1
c00011d7:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00011da:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c00011dd:	eb 15                	jmp    c00011f4 <dlmalloc+0x149>
c00011df:	a3 40 41 02 c0       	mov    ds:0xc0024140,eax
c00011e4:	39 fe                	cmp    esi,edi
c00011e6:	c7 40 08 34 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc0024134
c00011ed:	75 0d                	jne    c00011fc <dlmalloc+0x151>
c00011ef:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00011f4:	8d 43 08             	lea    eax,[ebx+0x8]
c00011f7:	e9 35 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00011fc:	89 f8                	mov    eax,edi
c00011fe:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001204:	77 19                	ja     c000121f <dlmalloc+0x174>
c0001206:	c1 e8 03             	shr    eax,0x3
c0001209:	8d 14 00             	lea    edx,[eax+eax*1]
c000120c:	83 c2 0d             	add    edx,0xd
c000120f:	8d 2c 95 f8 40 02 c0 	lea    ebp,[edx*4-0x3ffdbf08]
c0001216:	8b 14 95 00 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf00]
c000121d:	eb 46                	jmp    c0001265 <dlmalloc+0x1ba>
c000121f:	e8 c4 f9 ff ff       	call   c0000be8 <largebin_index>
c0001224:	8d 14 00             	lea    edx,[eax+eax*1]
c0001227:	83 c2 0d             	add    edx,0xd
c000122a:	8d 0c 95 00 41 02 c0 	lea    ecx,[edx*4-0x3ffdbf00]
c0001231:	8b 14 95 00 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf00]
c0001238:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000123b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000123f:	89 d5                	mov    ebp,edx
c0001241:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001245:	74 1e                	je     c0001265 <dlmalloc+0x1ba>
c0001247:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000124a:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000124d:	77 12                	ja     c0001261 <dlmalloc+0x1b6>
c000124f:	83 cf 01             	or     edi,0x1
c0001252:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001255:	76 05                	jbe    c000125c <dlmalloc+0x1b1>
c0001257:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000125a:	eb f6                	jmp    c0001252 <dlmalloc+0x1a7>
c000125c:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000125f:	eb 04                	jmp    c0001265 <dlmalloc+0x1ba>
c0001261:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001265:	89 c7                	mov    edi,eax
c0001267:	88 c1                	mov    cl,al
c0001269:	c1 ff 05             	sar    edi,0x5
c000126c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001270:	bf 01 00 00 00       	mov    edi,0x1
c0001275:	d3 e7                	shl    edi,cl
c0001277:	89 f8                	mov    eax,edi
c0001279:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000127d:	09 04 bd 34 44 02 c0 	or     DWORD PTR [edi*4-0x3ffdbbcc],eax
c0001284:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001287:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000128a:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000128d:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001290:	e9 db fe ff ff       	jmp    c0001170 <dlmalloc+0xc5>
c0001295:	81 fe ff 00 00 00    	cmp    esi,0xff
c000129b:	76 78                	jbe    c0001315 <dlmalloc+0x26a>
c000129d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012a1:	8d 04 c5 34 41 02 c0 	lea    eax,[eax*8-0x3ffdbecc]
c00012a8:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012ae:	39 ca                	cmp    edx,ecx
c00012b0:	74 63                	je     c0001315 <dlmalloc+0x26a>
c00012b2:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012b5:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012b8:	83 e3 fc             	and    ebx,0xfffffffc
c00012bb:	39 de                	cmp    esi,ebx
c00012bd:	77 52                	ja     c0001311 <dlmalloc+0x266>
c00012bf:	89 df                	mov    edi,ebx
c00012c1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012c4:	29 f7                	sub    edi,esi
c00012c6:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00012c9:	01 d3                	add    ebx,edx
c00012cb:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00012ce:	83 ff 0f             	cmp    edi,0xf
c00012d1:	8d 42 08             	lea    eax,[edx+0x8]
c00012d4:	77 09                	ja     c00012df <dlmalloc+0x234>
c00012d6:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00012da:	e9 52 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00012df:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00012e2:	83 ce 01             	or     esi,0x1
c00012e5:	89 0d 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,ecx
c00012eb:	89 0d 40 41 02 c0    	mov    DWORD PTR ds:0xc0024140,ecx
c00012f1:	c7 41 08 34 41 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0024134
c00012f8:	c7 41 0c 34 41 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0024134
c00012ff:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001302:	89 fa                	mov    edx,edi
c0001304:	83 ca 01             	or     edx,0x1
c0001307:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000130a:	89 3b                	mov    DWORD PTR [ebx],edi
c000130c:	e9 20 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001311:	89 c2                	mov    edx,eax
c0001313:	eb 99                	jmp    c00012ae <dlmalloc+0x203>
c0001315:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001319:	b8 01 00 00 00       	mov    eax,0x1
c000131e:	41                   	inc    ecx
c000131f:	89 cb                	mov    ebx,ecx
c0001321:	8d 14 cd 2c 41 02 c0 	lea    edx,[ecx*8-0x3ffdbed4]
c0001328:	c1 eb 05             	shr    ebx,0x5
c000132b:	d3 e0                	shl    eax,cl
c000132d:	8b 3c 9d 34 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbbcc]
c0001334:	39 f8                	cmp    eax,edi
c0001336:	77 04                	ja     c000133c <dlmalloc+0x291>
c0001338:	85 c0                	test   eax,eax
c000133a:	75 26                	jne    c0001362 <dlmalloc+0x2b7>
c000133c:	43                   	inc    ebx
c000133d:	83 fb 02             	cmp    ebx,0x2
c0001340:	0f 87 a6 00 00 00    	ja     c00013ec <dlmalloc+0x341>
c0001346:	8b 3c 9d 34 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbbcc]
c000134d:	85 ff                	test   edi,edi
c000134f:	74 eb                	je     c000133c <dlmalloc+0x291>
c0001351:	89 d8                	mov    eax,ebx
c0001353:	c1 e0 06             	shl    eax,0x6
c0001356:	8d 14 85 2c 41 02 c0 	lea    edx,[eax*4-0x3ffdbed4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	85 f8                	test   eax,edi
c0001364:	75 07                	jne    c000136d <dlmalloc+0x2c2>
c0001366:	83 c2 08             	add    edx,0x8
c0001369:	01 c0                	add    eax,eax
c000136b:	eb f5                	jmp    c0001362 <dlmalloc+0x2b7>
c000136d:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001370:	39 ca                	cmp    edx,ecx
c0001372:	75 14                	jne    c0001388 <dlmalloc+0x2dd>
c0001374:	89 c1                	mov    ecx,eax
c0001376:	83 c2 08             	add    edx,0x8
c0001379:	f7 d1                	not    ecx
c000137b:	01 c0                	add    eax,eax
c000137d:	21 cf                	and    edi,ecx
c000137f:	89 3c 9d 34 44 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbbcc],edi
c0001386:	eb ac                	jmp    c0001334 <dlmalloc+0x289>
c0001388:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000138b:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000138e:	83 e0 fc             	and    eax,0xfffffffc
c0001391:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001394:	89 c3                	mov    ebx,eax
c0001396:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001399:	29 f3                	sub    ebx,esi
c000139b:	8d 14 01             	lea    edx,[ecx+eax*1]
c000139e:	83 fb 0f             	cmp    ebx,0xf
c00013a1:	8d 41 08             	lea    eax,[ecx+0x8]
c00013a4:	77 09                	ja     c00013af <dlmalloc+0x304>
c00013a6:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013aa:	e9 82 00 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00013af:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013b2:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013b8:	89 3d 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,edi
c00013be:	89 3d 40 41 02 c0    	mov    DWORD PTR ds:0xc0024140,edi
c00013c4:	c7 47 08 34 41 02 c0 	mov    DWORD PTR [edi+0x8],0xc0024134
c00013cb:	c7 47 0c 34 41 02 c0 	mov    DWORD PTR [edi+0xc],0xc0024134
c00013d2:	77 06                	ja     c00013da <dlmalloc+0x32f>
c00013d4:	89 3d 30 41 02 c0    	mov    DWORD PTR ds:0xc0024130,edi
c00013da:	83 ce 01             	or     esi,0x1
c00013dd:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00013e0:	89 d9                	mov    ecx,ebx
c00013e2:	83 c9 01             	or     ecx,0x1
c00013e5:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00013e8:	89 1a                	mov    DWORD PTR [edx],ebx
c00013ea:	eb 45                	jmp    c0001431 <dlmalloc+0x386>
c00013ec:	a1 2c 41 02 c0       	mov    eax,ds:0xc002412c
c00013f1:	8d 4e 10             	lea    ecx,[esi+0x10]
c00013f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00013f7:	83 e2 fc             	and    edx,0xfffffffc
c00013fa:	39 d1                	cmp    ecx,edx
c00013fc:	77 1e                	ja     c000141c <dlmalloc+0x371>
c00013fe:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001401:	89 f3                	mov    ebx,esi
c0001403:	89 0d 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,ecx
c0001409:	83 cb 01             	or     ebx,0x1
c000140c:	29 f2                	sub    edx,esi
c000140e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001411:	83 ca 01             	or     edx,0x1
c0001414:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001417:	e9 2d fd ff ff       	jmp    c0001149 <dlmalloc+0x9e>
c000141c:	83 c4 1c             	add    esp,0x1c
c000141f:	89 f0                	mov    eax,esi
c0001421:	5b                   	pop    ebx
c0001422:	ba 00 41 02 c0       	mov    edx,0xc0024100
c0001427:	5e                   	pop    esi
c0001428:	5f                   	pop    edi
c0001429:	5d                   	pop    ebp
c000142a:	e9 19 fa ff ff       	jmp    c0000e48 <sYSMALLOc>
c000142f:	31 c0                	xor    eax,eax
c0001431:	83 c4 1c             	add    esp,0x1c
c0001434:	5b                   	pop    ebx
c0001435:	5e                   	pop    esi
c0001436:	5f                   	pop    edi
c0001437:	5d                   	pop    ebp
c0001438:	c3                   	ret    

c0001439 <iALLOc>:
c0001439:	55                   	push   ebp
c000143a:	89 c5                	mov    ebp,eax
c000143c:	57                   	push   edi
c000143d:	56                   	push   esi
c000143e:	53                   	push   ebx
c000143f:	83 ec 2c             	sub    esp,0x2c
c0001442:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001446:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000144a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000144e:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c0001455:	75 12                	jne    c0001469 <iALLOc+0x30>
c0001457:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000145b:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001460:	e8 07 f8 ff ff       	call   c0000c6c <malloc_consolidate>
c0001465:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001469:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000146e:	74 12                	je     c0001482 <iALLOc+0x49>
c0001470:	85 ed                	test   ebp,ebp
c0001472:	0f 84 64 01 00 00    	je     c00015dc <iALLOc+0x1a3>
c0001478:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001480:	eb 33                	jmp    c00014b5 <iALLOc+0x7c>
c0001482:	85 ed                	test   ebp,ebp
c0001484:	75 14                	jne    c000149a <iALLOc+0x61>
c0001486:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000148e:	83 c4 2c             	add    esp,0x2c
c0001491:	5b                   	pop    ebx
c0001492:	5e                   	pop    esi
c0001493:	5f                   	pop    edi
c0001494:	5d                   	pop    ebp
c0001495:	e9 11 fc ff ff       	jmp    c00010ab <dlmalloc>
c000149a:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014a1:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014a9:	83 f8 0f             	cmp    eax,0xf
c00014ac:	76 07                	jbe    c00014b5 <iALLOc+0x7c>
c00014ae:	83 e0 f8             	and    eax,0xfffffff8
c00014b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014b5:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014ba:	75 09                	jne    c00014c5 <iALLOc+0x8c>
c00014bc:	89 d0                	mov    eax,edx
c00014be:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014c1:	31 f6                	xor    esi,esi
c00014c3:	eb 3b                	jmp    c0001500 <iALLOc+0xc7>
c00014c5:	8b 02                	mov    eax,DWORD PTR [edx]
c00014c7:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00014cf:	83 c0 0b             	add    eax,0xb
c00014d2:	83 f8 0f             	cmp    eax,0xf
c00014d5:	76 07                	jbe    c00014de <iALLOc+0xa5>
c00014d7:	83 e0 f8             	and    eax,0xfffffff8
c00014da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00014de:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00014e2:	0f af f5             	imul   esi,ebp
c00014e5:	eb 25                	jmp    c000150c <iALLOc+0xd3>
c00014e7:	8b 18                	mov    ebx,DWORD PTR [eax]
c00014e9:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00014ec:	bb 10 00 00 00       	mov    ebx,0x10
c00014f1:	83 f9 0f             	cmp    ecx,0xf
c00014f4:	76 05                	jbe    c00014fb <iALLOc+0xc2>
c00014f6:	83 e1 f8             	and    ecx,0xfffffff8
c00014f9:	89 cb                	mov    ebx,ecx
c00014fb:	01 de                	add    esi,ebx
c00014fd:	83 c0 04             	add    eax,0x4
c0001500:	39 c7                	cmp    edi,eax
c0001502:	75 e3                	jne    c00014e7 <iALLOc+0xae>
c0001504:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000150c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001510:	8b 1d 54 44 02 c0    	mov    ebx,DWORD PTR ds:0xc0024454
c0001516:	83 ec 0c             	sub    esp,0xc
c0001519:	c7 05 54 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024454,0x0
c0001523:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001527:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000152b:	50                   	push   eax
c000152c:	e8 7a fb ff ff       	call   c00010ab <dlmalloc>
c0001531:	83 c4 10             	add    esp,0x10
c0001534:	89 1d 54 44 02 c0    	mov    DWORD PTR ds:0xc0024454,ebx
c000153a:	85 c0                	test   eax,eax
c000153c:	0f 84 92 00 00 00    	je     c00015d4 <iALLOc+0x19b>
c0001542:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001545:	8d 78 f8             	lea    edi,[eax-0x8]
c0001548:	83 e3 fc             	and    ebx,0xfffffffc
c000154b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000154f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001554:	74 1e                	je     c0001574 <iALLOc+0x13b>
c0001556:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000155a:	89 d9                	mov    ecx,ebx
c000155c:	52                   	push   edx
c000155d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001561:	83 e9 04             	sub    ecx,0x4
c0001564:	51                   	push   ecx
c0001565:	6a 00                	push   0x0
c0001567:	50                   	push   eax
c0001568:	e8 83 ef ff ff       	call   c00004f0 <memset>
c000156d:	83 c4 10             	add    esp,0x10
c0001570:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001574:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001579:	75 14                	jne    c000158f <iALLOc+0x156>
c000157b:	8d 04 37             	lea    eax,[edi+esi*1]
c000157e:	29 f3                	sub    ebx,esi
c0001580:	8d 48 08             	lea    ecx,[eax+0x8]
c0001583:	83 cb 01             	or     ebx,0x1
c0001586:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000158a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000158d:	89 f3                	mov    ebx,esi
c000158f:	31 c0                	xor    eax,eax
c0001591:	4d                   	dec    ebp
c0001592:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001595:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001599:	39 c5                	cmp    ebp,eax
c000159b:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000159e:	74 2c                	je     c00015cc <iALLOc+0x193>
c00015a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015a4:	85 c9                	test   ecx,ecx
c00015a6:	75 15                	jne    c00015bd <iALLOc+0x184>
c00015a8:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ab:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015ae:	b9 10 00 00 00       	mov    ecx,0x10
c00015b3:	83 fe 0f             	cmp    esi,0xf
c00015b6:	76 05                	jbe    c00015bd <iALLOc+0x184>
c00015b8:	83 e6 f8             	and    esi,0xfffffff8
c00015bb:	89 f1                	mov    ecx,esi
c00015bd:	89 ce                	mov    esi,ecx
c00015bf:	29 cb                	sub    ebx,ecx
c00015c1:	83 ce 01             	or     esi,0x1
c00015c4:	40                   	inc    eax
c00015c5:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00015c8:	01 cf                	add    edi,ecx
c00015ca:	eb c6                	jmp    c0001592 <iALLOc+0x159>
c00015cc:	83 cb 01             	or     ebx,0x1
c00015cf:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00015d2:	eb 08                	jmp    c00015dc <iALLOc+0x1a3>
c00015d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00015dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015e0:	83 c4 2c             	add    esp,0x2c
c00015e3:	5b                   	pop    ebx
c00015e4:	5e                   	pop    esi
c00015e5:	5f                   	pop    edi
c00015e6:	5d                   	pop    ebp
c00015e7:	c3                   	ret    

c00015e8 <dlrealloc>:
c00015e8:	55                   	push   ebp
c00015e9:	57                   	push   edi
c00015ea:	56                   	push   esi
c00015eb:	53                   	push   ebx
c00015ec:	83 ec 1c             	sub    esp,0x1c
c00015ef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00015f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00015f7:	85 db                	test   ebx,ebx
c00015f9:	75 10                	jne    c000160b <dlrealloc+0x23>
c00015fb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00015ff:	83 c4 1c             	add    esp,0x1c
c0001602:	5b                   	pop    ebx
c0001603:	5e                   	pop    esi
c0001604:	5f                   	pop    edi
c0001605:	5d                   	pop    ebp
c0001606:	e9 a0 fa ff ff       	jmp    c00010ab <dlmalloc>
c000160b:	83 f8 df             	cmp    eax,0xffffffdf
c000160e:	76 07                	jbe    c0001617 <dlrealloc+0x2f>
c0001610:	31 db                	xor    ebx,ebx
c0001612:	e9 6a 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001617:	83 c0 0b             	add    eax,0xb
c000161a:	bd 10 00 00 00       	mov    ebp,0x10
c000161f:	83 f8 0f             	cmp    eax,0xf
c0001622:	76 05                	jbe    c0001629 <dlrealloc+0x41>
c0001624:	83 e0 f8             	and    eax,0xfffffff8
c0001627:	89 c5                	mov    ebp,eax
c0001629:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000162c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000162f:	89 c6                	mov    esi,eax
c0001631:	83 e6 fc             	and    esi,0xfffffffc
c0001634:	a8 02                	test   al,0x2
c0001636:	75 d8                	jne    c0001610 <dlrealloc+0x28>
c0001638:	39 f5                	cmp    ebp,esi
c000163a:	0f 86 04 01 00 00    	jbe    c0001744 <dlrealloc+0x15c>
c0001640:	8d 14 37             	lea    edx,[edi+esi*1]
c0001643:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001646:	39 15 2c 41 02 c0    	cmp    DWORD PTR ds:0xc002412c,edx
c000164c:	75 33                	jne    c0001681 <dlrealloc+0x99>
c000164e:	83 e1 fc             	and    ecx,0xfffffffc
c0001651:	01 f1                	add    ecx,esi
c0001653:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001657:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000165a:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000165e:	77 49                	ja     c00016a9 <dlrealloc+0xc1>
c0001660:	01 ef                	add    edi,ebp
c0001662:	83 e0 01             	and    eax,0x1
c0001665:	09 e8                	or     eax,ebp
c0001667:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c000166a:	89 3d 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,edi
c0001670:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001674:	29 e8                	sub    eax,ebp
c0001676:	83 c8 01             	or     eax,0x1
c0001679:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000167c:	e9 00 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001681:	89 c8                	mov    eax,ecx
c0001683:	83 e0 fe             	and    eax,0xfffffffe
c0001686:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c000168b:	75 1c                	jne    c00016a9 <dlrealloc+0xc1>
c000168d:	83 e1 fc             	and    ecx,0xfffffffc
c0001690:	01 f1                	add    ecx,esi
c0001692:	39 cd                	cmp    ebp,ecx
c0001694:	77 13                	ja     c00016a9 <dlrealloc+0xc1>
c0001696:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001699:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000169c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000169f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016a2:	89 ce                	mov    esi,ecx
c00016a4:	e9 9b 00 00 00       	jmp    c0001744 <dlrealloc+0x15c>
c00016a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016ad:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016b0:	83 ec 0c             	sub    esp,0xc
c00016b3:	50                   	push   eax
c00016b4:	e8 f2 f9 ff ff       	call   c00010ab <dlmalloc>
c00016b9:	83 c4 10             	add    esp,0x10
c00016bc:	85 c0                	test   eax,eax
c00016be:	0f 84 4c ff ff ff    	je     c0001610 <dlrealloc+0x28>
c00016c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00016c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00016cb:	39 ca                	cmp    edx,ecx
c00016cd:	75 0a                	jne    c00016d9 <dlrealloc+0xf1>
c00016cf:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c00016d2:	83 e0 fc             	and    eax,0xfffffffc
c00016d5:	01 c6                	add    esi,eax
c00016d7:	eb 6b                	jmp    c0001744 <dlrealloc+0x15c>
c00016d9:	8d 4e fc             	lea    ecx,[esi-0x4]
c00016dc:	83 f9 27             	cmp    ecx,0x27
c00016df:	76 08                	jbe    c00016e9 <dlrealloc+0x101>
c00016e1:	89 de                	mov    esi,ebx
c00016e3:	89 c7                	mov    edi,eax
c00016e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00016e7:	eb 43                	jmp    c000172c <dlrealloc+0x144>
c00016e9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00016eb:	83 f9 13             	cmp    ecx,0x13
c00016ee:	89 10                	mov    DWORD PTR [eax],edx
c00016f0:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00016f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00016f6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00016f9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00016fc:	76 2e                	jbe    c000172c <dlrealloc+0x144>
c00016fe:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001701:	83 f9 1b             	cmp    ecx,0x1b
c0001704:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001707:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000170a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000170d:	76 1d                	jbe    c000172c <dlrealloc+0x144>
c000170f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001712:	83 f9 23             	cmp    ecx,0x23
c0001715:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001718:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000171b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000171e:	76 0c                	jbe    c000172c <dlrealloc+0x144>
c0001720:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001723:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001726:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001729:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000172c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001730:	83 ec 0c             	sub    esp,0xc
c0001733:	53                   	push   ebx
c0001734:	e8 1a f6 ff ff       	call   c0000d53 <dlfree>
c0001739:	83 c4 10             	add    esp,0x10
c000173c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001740:	89 c3                	mov    ebx,eax
c0001742:	eb 3d                	jmp    c0001781 <dlrealloc+0x199>
c0001744:	89 f2                	mov    edx,esi
c0001746:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001749:	29 ea                	sub    edx,ebp
c000174b:	83 e1 01             	and    ecx,0x1
c000174e:	8d 04 37             	lea    eax,[edi+esi*1]
c0001751:	83 fa 0f             	cmp    edx,0xf
c0001754:	77 0b                	ja     c0001761 <dlrealloc+0x179>
c0001756:	09 ce                	or     esi,ecx
c0001758:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000175b:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000175f:	eb 20                	jmp    c0001781 <dlrealloc+0x199>
c0001761:	01 ef                	add    edi,ebp
c0001763:	83 ec 0c             	sub    esp,0xc
c0001766:	09 cd                	or     ebp,ecx
c0001768:	83 ca 01             	or     edx,0x1
c000176b:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000176e:	83 c7 08             	add    edi,0x8
c0001771:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001774:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001778:	57                   	push   edi
c0001779:	e8 d5 f5 ff ff       	call   c0000d53 <dlfree>
c000177e:	83 c4 10             	add    esp,0x10
c0001781:	83 c4 1c             	add    esp,0x1c
c0001784:	89 d8                	mov    eax,ebx
c0001786:	5b                   	pop    ebx
c0001787:	5e                   	pop    esi
c0001788:	5f                   	pop    edi
c0001789:	5d                   	pop    ebp
c000178a:	c3                   	ret    

c000178b <dlmemalign>:
c000178b:	55                   	push   ebp
c000178c:	57                   	push   edi
c000178d:	56                   	push   esi
c000178e:	53                   	push   ebx
c000178f:	83 ec 0c             	sub    esp,0xc
c0001792:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001796:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000179a:	83 fa 08             	cmp    edx,0x8
c000179d:	77 10                	ja     c00017af <dlmemalign+0x24>
c000179f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017a3:	83 c4 0c             	add    esp,0xc
c00017a6:	5b                   	pop    ebx
c00017a7:	5e                   	pop    esi
c00017a8:	5f                   	pop    edi
c00017a9:	5d                   	pop    ebp
c00017aa:	e9 fc f8 ff ff       	jmp    c00010ab <dlmalloc>
c00017af:	bf 10 00 00 00       	mov    edi,0x10
c00017b4:	83 fa 0f             	cmp    edx,0xf
c00017b7:	76 13                	jbe    c00017cc <dlmemalign+0x41>
c00017b9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017bc:	85 d1                	test   ecx,edx
c00017be:	75 04                	jne    c00017c4 <dlmemalign+0x39>
c00017c0:	89 d7                	mov    edi,edx
c00017c2:	eb 08                	jmp    c00017cc <dlmemalign+0x41>
c00017c4:	39 d7                	cmp    edi,edx
c00017c6:	73 04                	jae    c00017cc <dlmemalign+0x41>
c00017c8:	01 ff                	add    edi,edi
c00017ca:	eb f8                	jmp    c00017c4 <dlmemalign+0x39>
c00017cc:	83 f8 df             	cmp    eax,0xffffffdf
c00017cf:	76 07                	jbe    c00017d8 <dlmemalign+0x4d>
c00017d1:	31 c0                	xor    eax,eax
c00017d3:	e9 ce 00 00 00       	jmp    c00018a6 <dlmemalign+0x11b>
c00017d8:	83 c0 0b             	add    eax,0xb
c00017db:	bd 10 00 00 00       	mov    ebp,0x10
c00017e0:	83 f8 0f             	cmp    eax,0xf
c00017e3:	76 05                	jbe    c00017ea <dlmemalign+0x5f>
c00017e5:	83 e0 f8             	and    eax,0xfffffff8
c00017e8:	89 c5                	mov    ebp,eax
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00017f1:	50                   	push   eax
c00017f2:	e8 b4 f8 ff ff       	call   c00010ab <dlmalloc>
c00017f7:	83 c4 10             	add    esp,0x10
c00017fa:	89 c1                	mov    ecx,eax
c00017fc:	85 c0                	test   eax,eax
c00017fe:	74 d1                	je     c00017d1 <dlmemalign+0x46>
c0001800:	31 d2                	xor    edx,edx
c0001802:	8d 70 f8             	lea    esi,[eax-0x8]
c0001805:	f7 f7                	div    edi
c0001807:	85 d2                	test   edx,edx
c0001809:	74 62                	je     c000186d <dlmemalign+0xe2>
c000180b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000180f:	89 f8                	mov    eax,edi
c0001811:	f7 d8                	neg    eax
c0001813:	21 c3                	and    ebx,eax
c0001815:	83 eb 08             	sub    ebx,0x8
c0001818:	89 d8                	mov    eax,ebx
c000181a:	29 f0                	sub    eax,esi
c000181c:	83 f8 0f             	cmp    eax,0xf
c000181f:	77 02                	ja     c0001823 <dlmemalign+0x98>
c0001821:	01 fb                	add    ebx,edi
c0001823:	89 d8                	mov    eax,ebx
c0001825:	29 f0                	sub    eax,esi
c0001827:	89 c6                	mov    esi,eax
c0001829:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000182c:	89 c2                	mov    edx,eax
c000182e:	83 e2 fc             	and    edx,0xfffffffc
c0001831:	29 f2                	sub    edx,esi
c0001833:	a8 02                	test   al,0x2
c0001835:	74 10                	je     c0001847 <dlmemalign+0xbc>
c0001837:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000183a:	83 ca 02             	or     edx,0x2
c000183d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001840:	89 33                	mov    DWORD PTR [ebx],esi
c0001842:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001845:	eb 5f                	jmp    c00018a6 <dlmemalign+0x11b>
c0001847:	83 ec 0c             	sub    esp,0xc
c000184a:	89 d0                	mov    eax,edx
c000184c:	83 c8 01             	or     eax,0x1
c000184f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001852:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001857:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000185a:	83 e0 01             	and    eax,0x1
c000185d:	09 f0                	or     eax,esi
c000185f:	89 de                	mov    esi,ebx
c0001861:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001864:	51                   	push   ecx
c0001865:	e8 e9 f4 ff ff       	call   c0000d53 <dlfree>
c000186a:	83 c4 10             	add    esp,0x10
c000186d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001870:	a8 02                	test   al,0x2
c0001872:	75 2f                	jne    c00018a3 <dlmemalign+0x118>
c0001874:	83 e0 fc             	and    eax,0xfffffffc
c0001877:	8d 55 10             	lea    edx,[ebp+0x10]
c000187a:	39 c2                	cmp    edx,eax
c000187c:	73 25                	jae    c00018a3 <dlmemalign+0x118>
c000187e:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001881:	83 ec 0c             	sub    esp,0xc
c0001884:	29 e8                	sub    eax,ebp
c0001886:	83 c2 08             	add    edx,0x8
c0001889:	83 c8 01             	or     eax,0x1
c000188c:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000188f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001892:	83 e0 01             	and    eax,0x1
c0001895:	09 c5                	or     ebp,eax
c0001897:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000189a:	52                   	push   edx
c000189b:	e8 b3 f4 ff ff       	call   c0000d53 <dlfree>
c00018a0:	83 c4 10             	add    esp,0x10
c00018a3:	8d 46 08             	lea    eax,[esi+0x8]
c00018a6:	83 c4 0c             	add    esp,0xc
c00018a9:	5b                   	pop    ebx
c00018aa:	5e                   	pop    esi
c00018ab:	5f                   	pop    edi
c00018ac:	5d                   	pop    ebp
c00018ad:	c3                   	ret    

c00018ae <dlcalloc>:
c00018ae:	53                   	push   ebx
c00018af:	83 ec 14             	sub    esp,0x14
c00018b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018b6:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018bb:	50                   	push   eax
c00018bc:	e8 ea f7 ff ff       	call   c00010ab <dlmalloc>
c00018c1:	83 c4 10             	add    esp,0x10
c00018c4:	89 c3                	mov    ebx,eax
c00018c6:	85 c0                	test   eax,eax
c00018c8:	74 77                	je     c0001941 <dlcalloc+0x93>
c00018ca:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00018cd:	89 d0                	mov    eax,edx
c00018cf:	83 e0 fc             	and    eax,0xfffffffc
c00018d2:	80 e2 02             	and    dl,0x2
c00018d5:	75 5a                	jne    c0001931 <dlcalloc+0x83>
c00018d7:	83 e8 04             	sub    eax,0x4
c00018da:	83 f8 27             	cmp    eax,0x27
c00018dd:	76 03                	jbe    c00018e2 <dlcalloc+0x34>
c00018df:	51                   	push   ecx
c00018e0:	eb 53                	jmp    c0001935 <dlcalloc+0x87>
c00018e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00018e8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00018ef:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00018f6:	83 f8 13             	cmp    eax,0x13
c00018f9:	76 46                	jbe    c0001941 <dlcalloc+0x93>
c00018fb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001902:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001909:	83 f8 1b             	cmp    eax,0x1b
c000190c:	76 33                	jbe    c0001941 <dlcalloc+0x93>
c000190e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001915:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000191c:	83 f8 23             	cmp    eax,0x23
c000191f:	76 20                	jbe    c0001941 <dlcalloc+0x93>
c0001921:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001928:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000192f:	eb 10                	jmp    c0001941 <dlcalloc+0x93>
c0001931:	83 e8 08             	sub    eax,0x8
c0001934:	52                   	push   edx
c0001935:	50                   	push   eax
c0001936:	6a 00                	push   0x0
c0001938:	53                   	push   ebx
c0001939:	e8 b2 eb ff ff       	call   c00004f0 <memset>
c000193e:	83 c4 10             	add    esp,0x10
c0001941:	89 d8                	mov    eax,ebx
c0001943:	83 c4 08             	add    esp,0x8
c0001946:	5b                   	pop    ebx
c0001947:	c3                   	ret    

c0001948 <dlcfree>:
c0001948:	e9 06 f4 ff ff       	jmp    c0000d53 <dlfree>

c000194d <dlindependent_calloc>:
c000194d:	83 ec 28             	sub    esp,0x28
c0001950:	b9 03 00 00 00       	mov    ecx,0x3
c0001955:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001959:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000195d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001961:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001965:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001969:	e8 cb fa ff ff       	call   c0001439 <iALLOc>
c000196e:	83 c4 2c             	add    esp,0x2c
c0001971:	c3                   	ret    

c0001972 <dlindependent_comalloc>:
c0001972:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000197a:	31 c9                	xor    ecx,ecx
c000197c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001980:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001984:	e9 b0 fa ff ff       	jmp    c0001439 <iALLOc>

c0001989 <dlvalloc>:
c0001989:	83 ec 0c             	sub    esp,0xc
c000198c:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c0001993:	75 0a                	jne    c000199f <dlvalloc+0x16>
c0001995:	b8 00 41 02 c0       	mov    eax,0xc0024100
c000199a:	e8 cd f2 ff ff       	call   c0000c6c <malloc_consolidate>
c000199f:	50                   	push   eax
c00019a0:	50                   	push   eax
c00019a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019a5:	ff 35 5c 44 02 c0    	push   DWORD PTR ds:0xc002445c
c00019ab:	e8 db fd ff ff       	call   c000178b <dlmemalign>
c00019b0:	83 c4 1c             	add    esp,0x1c
c00019b3:	c3                   	ret    

c00019b4 <dlpvalloc>:
c00019b4:	83 ec 0c             	sub    esp,0xc
c00019b7:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c00019be:	75 0a                	jne    c00019ca <dlpvalloc+0x16>
c00019c0:	b8 00 41 02 c0       	mov    eax,0xc0024100
c00019c5:	e8 a2 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019ca:	a1 5c 44 02 c0       	mov    eax,ds:0xc002445c
c00019cf:	89 c1                	mov    ecx,eax
c00019d1:	52                   	push   edx
c00019d2:	f7 d9                	neg    ecx
c00019d4:	52                   	push   edx
c00019d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00019d9:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c00019dd:	21 ca                	and    edx,ecx
c00019df:	52                   	push   edx
c00019e0:	50                   	push   eax
c00019e1:	e8 a5 fd ff ff       	call   c000178b <dlmemalign>
c00019e6:	83 c4 1c             	add    esp,0x1c
c00019e9:	c3                   	ret    

c00019ea <dlmalloc_trim>:
c00019ea:	b8 00 41 02 c0       	mov    eax,0xc0024100
c00019ef:	e8 78 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019f4:	31 c0                	xor    eax,eax
c00019f6:	c3                   	ret    

c00019f7 <dlmalloc_usable_size>:
c00019f7:	53                   	push   ebx
c00019f8:	31 c0                	xor    eax,eax
c00019fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00019fe:	85 c9                	test   ecx,ecx
c0001a00:	74 24                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a02:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a05:	f6 c2 02             	test   dl,0x2
c0001a08:	74 08                	je     c0001a12 <dlmalloc_usable_size+0x1b>
c0001a0a:	83 e2 fc             	and    edx,0xfffffffc
c0001a0d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a10:	eb 14                	jmp    c0001a26 <dlmalloc_usable_size+0x2f>
c0001a12:	89 d3                	mov    ebx,edx
c0001a14:	31 c0                	xor    eax,eax
c0001a16:	83 e3 fe             	and    ebx,0xfffffffe
c0001a19:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a1e:	74 06                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a20:	83 e2 fc             	and    edx,0xfffffffc
c0001a23:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a26:	5b                   	pop    ebx
c0001a27:	c3                   	ret    

c0001a28 <dlmallinfo>:
c0001a28:	55                   	push   ebp
c0001a29:	57                   	push   edi
c0001a2a:	56                   	push   esi
c0001a2b:	53                   	push   ebx
c0001a2c:	83 ec 08             	sub    esp,0x8
c0001a2f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a33:	83 3d 2c 41 02 c0 00 	cmp    DWORD PTR ds:0xc002412c,0x0
c0001a3a:	75 0a                	jne    c0001a46 <dlmallinfo+0x1e>
c0001a3c:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001a41:	e8 26 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c0001a46:	a1 2c 41 02 c0       	mov    eax,ds:0xc002412c
c0001a4b:	31 ed                	xor    ebp,ebp
c0001a4d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a50:	31 c9                	xor    ecx,ecx
c0001a52:	83 e0 fc             	and    eax,0xfffffffc
c0001a55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a59:	31 c0                	xor    eax,eax
c0001a5b:	8b 14 85 04 41 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbefc]
c0001a62:	85 d2                	test   edx,edx
c0001a64:	74 0e                	je     c0001a74 <dlmallinfo+0x4c>
c0001a66:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001a69:	45                   	inc    ebp
c0001a6a:	83 e6 fc             	and    esi,0xfffffffc
c0001a6d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001a70:	01 f1                	add    ecx,esi
c0001a72:	eb ee                	jmp    c0001a62 <dlmallinfo+0x3a>
c0001a74:	40                   	inc    eax
c0001a75:	83 f8 0a             	cmp    eax,0xa
c0001a78:	75 e1                	jne    c0001a5b <dlmallinfo+0x33>
c0001a7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a7e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001a85:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a88:	b8 34 41 02 c0       	mov    eax,0xc0024134
c0001a8d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a90:	39 f0                	cmp    eax,esi
c0001a92:	74 10                	je     c0001aa4 <dlmallinfo+0x7c>
c0001a94:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a97:	ff 04 24             	inc    DWORD PTR [esp]
c0001a9a:	83 e7 fc             	and    edi,0xfffffffc
c0001a9d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001aa0:	01 fa                	add    edx,edi
c0001aa2:	eb ec                	jmp    c0001a90 <dlmallinfo+0x68>
c0001aa4:	83 c0 08             	add    eax,0x8
c0001aa7:	3d 2c 44 02 c0       	cmp    eax,0xc002442c
c0001aac:	75 df                	jne    c0001a8d <dlmallinfo+0x65>
c0001aae:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001ab1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001ab4:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001ab7:	a1 68 44 02 c0       	mov    eax,ds:0xc0024468
c0001abc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001abf:	89 03                	mov    DWORD PTR [ebx],eax
c0001ac1:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001ac4:	8b 35 50 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024450
c0001aca:	29 d0                	sub    eax,edx
c0001acc:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001acf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ad2:	8b 35 64 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024464
c0001ad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001adc:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001adf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001ae2:	8b 35 74 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024474
c0001ae8:	89 d8                	mov    eax,ebx
c0001aea:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001aed:	83 c4 08             	add    esp,0x8
c0001af0:	5b                   	pop    ebx
c0001af1:	5e                   	pop    esi
c0001af2:	5f                   	pop    edi
c0001af3:	5d                   	pop    ebp
c0001af4:	c2 04 00             	ret    0x4

c0001af7 <dlmalloc_stats>:
c0001af7:	83 ec 30             	sub    esp,0x30
c0001afa:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001afe:	50                   	push   eax
c0001aff:	e8 24 ff ff ff       	call   c0001a28 <dlmallinfo>
c0001b04:	83 c4 30             	add    esp,0x30
c0001b07:	c3                   	ret    

c0001b08 <dlmallopt>:
c0001b08:	56                   	push   esi
c0001b09:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001b0e:	53                   	push   ebx
c0001b0f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b17:	e8 50 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b1c:	8d 46 04             	lea    eax,[esi+0x4]
c0001b1f:	83 f8 05             	cmp    eax,0x5
c0001b22:	77 67                	ja     c0001b8b <dlmallopt+0x83>
c0001b24:	ff 24 85 44 f4 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0bbc]
c0001b2b:	83 fb 50             	cmp    ebx,0x50
c0001b2e:	77 5b                	ja     c0001b8b <dlmallopt+0x83>
c0001b30:	ba 08 00 00 00       	mov    edx,0x8
c0001b35:	85 db                	test   ebx,ebx
c0001b37:	74 12                	je     c0001b4b <dlmallopt+0x43>
c0001b39:	83 c3 0b             	add    ebx,0xb
c0001b3c:	ba 10 00 00 00       	mov    edx,0x10
c0001b41:	83 fb 0f             	cmp    ebx,0xf
c0001b44:	76 05                	jbe    c0001b4b <dlmallopt+0x43>
c0001b46:	89 da                	mov    edx,ebx
c0001b48:	83 e2 f8             	and    edx,0xfffffff8
c0001b4b:	a1 00 41 02 c0       	mov    eax,ds:0xc0024100
c0001b50:	83 e0 03             	and    eax,0x3
c0001b53:	09 d0                	or     eax,edx
c0001b55:	a3 00 41 02 c0       	mov    ds:0xc0024100,eax
c0001b5a:	eb 31                	jmp    c0001b8d <dlmallopt+0x85>
c0001b5c:	89 1d 44 44 02 c0    	mov    DWORD PTR ds:0xc0024444,ebx
c0001b62:	eb 06                	jmp    c0001b6a <dlmallopt+0x62>
c0001b64:	89 1d 48 44 02 c0    	mov    DWORD PTR ds:0xc0024448,ebx
c0001b6a:	be 01 00 00 00       	mov    esi,0x1
c0001b6f:	eb 1c                	jmp    c0001b8d <dlmallopt+0x85>
c0001b71:	89 1d 4c 44 02 c0    	mov    DWORD PTR ds:0xc002444c,ebx
c0001b77:	eb f1                	jmp    c0001b6a <dlmallopt+0x62>
c0001b79:	31 f6                	xor    esi,esi
c0001b7b:	85 db                	test   ebx,ebx
c0001b7d:	75 0e                	jne    c0001b8d <dlmallopt+0x85>
c0001b7f:	c7 05 54 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024454,0x0
c0001b89:	eb df                	jmp    c0001b6a <dlmallopt+0x62>
c0001b8b:	31 f6                	xor    esi,esi
c0001b8d:	89 f0                	mov    eax,esi
c0001b8f:	5b                   	pop    ebx
c0001b90:	5e                   	pop    esi
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax

c0001b94 <isblank>:
c0001b94:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b99:	74 09                	je     c0001ba4 <isblank+0x10>
c0001b9b:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ba0:	75 0a                	jne    c0001bac <isblank+0x18>
c0001ba2:	66 90                	xchg   ax,ax
c0001ba4:	b8 01 00 00 00       	mov    eax,0x1
c0001ba9:	c3                   	ret    
c0001baa:	66 90                	xchg   ax,ax
c0001bac:	b8 00 00 00 00       	mov    eax,0x0
c0001bb1:	c3                   	ret    
c0001bb2:	66 90                	xchg   ax,ax

c0001bb4 <iscntrl>:
c0001bb4:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bb9:	7e 09                	jle    c0001bc4 <iscntrl+0x10>
c0001bbb:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bc0:	75 0a                	jne    c0001bcc <iscntrl+0x18>
c0001bc2:	66 90                	xchg   ax,ax
c0001bc4:	b8 01 00 00 00       	mov    eax,0x1
c0001bc9:	c3                   	ret    
c0001bca:	66 90                	xchg   ax,ax
c0001bcc:	b8 00 00 00 00       	mov    eax,0x0
c0001bd1:	c3                   	ret    
c0001bd2:	66 90                	xchg   ax,ax

c0001bd4 <isdigit>:
c0001bd4:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001bd9:	7e 0d                	jle    c0001be8 <isdigit+0x14>
c0001bdb:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001be0:	7f 06                	jg     c0001be8 <isdigit+0x14>
c0001be2:	b8 01 00 00 00       	mov    eax,0x1
c0001be7:	c3                   	ret    
c0001be8:	b8 00 00 00 00       	mov    eax,0x0
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax

c0001bf0 <islower>:
c0001bf0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001bf5:	7e 0d                	jle    c0001c04 <islower+0x14>
c0001bf7:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001bfc:	7f 06                	jg     c0001c04 <islower+0x14>
c0001bfe:	b8 01 00 00 00       	mov    eax,0x1
c0001c03:	c3                   	ret    
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isspace>:
c0001c0c:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c11:	7c 19                	jl     c0001c2c <isspace+0x20>
c0001c13:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c18:	7e 0a                	jle    c0001c24 <isspace+0x18>
c0001c1a:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c1f:	75 0b                	jne    c0001c2c <isspace+0x20>
c0001c21:	8d 76 00             	lea    esi,[esi+0x0]
c0001c24:	b8 01 00 00 00       	mov    eax,0x1
c0001c29:	c3                   	ret    
c0001c2a:	66 90                	xchg   ax,ax
c0001c2c:	b8 00 00 00 00       	mov    eax,0x0
c0001c31:	c3                   	ret    
c0001c32:	66 90                	xchg   ax,ax

c0001c34 <isupper>:
c0001c34:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c39:	7e 0d                	jle    c0001c48 <isupper+0x14>
c0001c3b:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c40:	7f 06                	jg     c0001c48 <isupper+0x14>
c0001c42:	b8 01 00 00 00       	mov    eax,0x1
c0001c47:	c3                   	ret    
c0001c48:	b8 00 00 00 00       	mov    eax,0x0
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax

c0001c50 <isalpha>:
c0001c50:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c54:	e8 db ff ff ff       	call   c0001c34 <isupper>
c0001c59:	83 c4 04             	add    esp,0x4
c0001c5c:	85 c0                	test   eax,eax
c0001c5e:	75 10                	jne    c0001c70 <isalpha+0x20>
c0001c60:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c64:	e8 87 ff ff ff       	call   c0001bf0 <islower>
c0001c69:	83 c4 04             	add    esp,0x4
c0001c6c:	85 c0                	test   eax,eax
c0001c6e:	74 08                	je     c0001c78 <isalpha+0x28>
c0001c70:	b8 01 00 00 00       	mov    eax,0x1
c0001c75:	c3                   	ret    
c0001c76:	66 90                	xchg   ax,ax
c0001c78:	b8 00 00 00 00       	mov    eax,0x0
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax

c0001c80 <isalnum>:
c0001c80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c84:	e8 c7 ff ff ff       	call   c0001c50 <isalpha>
c0001c89:	83 c4 04             	add    esp,0x4
c0001c8c:	85 c0                	test   eax,eax
c0001c8e:	75 10                	jne    c0001ca0 <isalnum+0x20>
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 3b ff ff ff       	call   c0001bd4 <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	74 08                	je     c0001ca8 <isalnum+0x28>
c0001ca0:	b8 01 00 00 00       	mov    eax,0x1
c0001ca5:	c3                   	ret    
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <ispunct>:
c0001cb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cb4:	e8 c7 ff ff ff       	call   c0001c80 <isalnum>
c0001cb9:	83 c4 04             	add    esp,0x4
c0001cbc:	85 c0                	test   eax,eax
c0001cbe:	75 28                	jne    c0001ce8 <ispunct+0x38>
c0001cc0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cc4:	e8 43 ff ff ff       	call   c0001c0c <isspace>
c0001cc9:	83 c4 04             	add    esp,0x4
c0001ccc:	85 c0                	test   eax,eax
c0001cce:	75 18                	jne    c0001ce8 <ispunct+0x38>
c0001cd0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cd4:	e8 db fe ff ff       	call   c0001bb4 <iscntrl>
c0001cd9:	83 c4 04             	add    esp,0x4
c0001cdc:	85 c0                	test   eax,eax
c0001cde:	75 08                	jne    c0001ce8 <ispunct+0x38>
c0001ce0:	b8 01 00 00 00       	mov    eax,0x1
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax
c0001ce8:	b8 00 00 00 00       	mov    eax,0x0
c0001ced:	c3                   	ret    
c0001cee:	66 90                	xchg   ax,ax

c0001cf0 <isgraph>:
c0001cf0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cf4:	e8 87 ff ff ff       	call   c0001c80 <isalnum>
c0001cf9:	83 c4 04             	add    esp,0x4
c0001cfc:	85 c0                	test   eax,eax
c0001cfe:	75 10                	jne    c0001d10 <isgraph+0x20>
c0001d00:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d04:	e8 a7 ff ff ff       	call   c0001cb0 <ispunct>
c0001d09:	83 c4 04             	add    esp,0x4
c0001d0c:	85 c0                	test   eax,eax
c0001d0e:	74 08                	je     c0001d18 <isgraph+0x28>
c0001d10:	b8 01 00 00 00       	mov    eax,0x1
c0001d15:	c3                   	ret    
c0001d16:	66 90                	xchg   ax,ax
c0001d18:	b8 00 00 00 00       	mov    eax,0x0
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax

c0001d20 <isprint>:
c0001d20:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d24:	e8 c7 ff ff ff       	call   c0001cf0 <isgraph>
c0001d29:	83 c4 04             	add    esp,0x4
c0001d2c:	85 c0                	test   eax,eax
c0001d2e:	75 08                	jne    c0001d38 <isprint+0x18>
c0001d30:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d35:	75 09                	jne    c0001d40 <isprint+0x20>
c0001d37:	90                   	nop
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <isxdigit>:
c0001d48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d4c:	e8 83 fe ff ff       	call   c0001bd4 <isdigit>
c0001d51:	83 c4 04             	add    esp,0x4
c0001d54:	85 c0                	test   eax,eax
c0001d56:	75 20                	jne    c0001d78 <isxdigit+0x30>
c0001d58:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d5d:	7e 09                	jle    c0001d68 <isxdigit+0x20>
c0001d5f:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d64:	7e 12                	jle    c0001d78 <isxdigit+0x30>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d6d:	7e 11                	jle    c0001d80 <isxdigit+0x38>
c0001d6f:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001d74:	7f 0a                	jg     c0001d80 <isxdigit+0x38>
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 01 00 00 00       	mov    eax,0x1
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax
c0001d80:	b8 00 00 00 00       	mov    eax,0x0
c0001d85:	c3                   	ret    

c0001d86 <disk_status>:
c0001d86:	31 c0                	xor    eax,eax
c0001d88:	c3                   	ret    

c0001d89 <disk_initialize>:
c0001d89:	31 c0                	xor    eax,eax
c0001d8b:	c3                   	ret    

c0001d8c <disk_read>:
c0001d8c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d91:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001d99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d9d:	e9 2e 6c 01 00       	jmp    c00189d0 <fatWrapperReadDisk>

c0001da2 <disk_write>:
c0001da2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001da7:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001daf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001db3:	e9 58 6c 01 00       	jmp    c0018a10 <fatWrapperWriteDisk>

c0001db8 <disk_ioctl>:
c0001db8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001dbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001dc1:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc6:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001dce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd2:	e9 79 6c 01 00       	jmp    c0018a50 <fatWrapperIoctl>

c0001dd7 <ld_word>:
c0001dd7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ddb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001dde:	c1 e2 08             	shl    edx,0x8
c0001de1:	09 d0                	or     eax,edx
c0001de3:	c3                   	ret    

c0001de4 <ld_dword>:
c0001de4:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001de8:	89 d1                	mov    ecx,edx
c0001dea:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001dee:	c1 e1 08             	shl    ecx,0x8
c0001df1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001df4:	09 ca                	or     edx,ecx
c0001df6:	c1 e2 08             	shl    edx,0x8
c0001df9:	09 d0                	or     eax,edx
c0001dfb:	c3                   	ret    

c0001dfc <st_word>:
c0001dfc:	66 89 10             	mov    WORD PTR [eax],dx
c0001dff:	c3                   	ret    

c0001e00 <st_dword>:
c0001e00:	89 10                	mov    DWORD PTR [eax],edx
c0001e02:	c3                   	ret    

c0001e03 <mem_cpy>:
c0001e03:	85 c9                	test   ecx,ecx
c0001e05:	74 10                	je     c0001e17 <mem_cpy+0x14>
c0001e07:	57                   	push   edi
c0001e08:	01 c1                	add    ecx,eax
c0001e0a:	56                   	push   esi
c0001e0b:	89 c7                	mov    edi,eax
c0001e0d:	89 d6                	mov    esi,edx
c0001e0f:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e10:	39 f9                	cmp    ecx,edi
c0001e12:	75 fb                	jne    c0001e0f <mem_cpy+0xc>
c0001e14:	5e                   	pop    esi
c0001e15:	5f                   	pop    edi
c0001e16:	c3                   	ret    
c0001e17:	c3                   	ret    

c0001e18 <mem_set>:
c0001e18:	01 c1                	add    ecx,eax
c0001e1a:	40                   	inc    eax
c0001e1b:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001e1e:	39 c8                	cmp    eax,ecx
c0001e20:	75 f8                	jne    c0001e1a <mem_set+0x2>
c0001e22:	c3                   	ret    

c0001e23 <mem_cmp>:
c0001e23:	57                   	push   edi
c0001e24:	56                   	push   esi
c0001e25:	89 c6                	mov    esi,eax
c0001e27:	53                   	push   ebx
c0001e28:	46                   	inc    esi
c0001e29:	42                   	inc    edx
c0001e2a:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e2e:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e32:	29 fb                	sub    ebx,edi
c0001e34:	89 cf                	mov    edi,ecx
c0001e36:	29 f7                	sub    edi,esi
c0001e38:	01 c7                	add    edi,eax
c0001e3a:	74 04                	je     c0001e40 <mem_cmp+0x1d>
c0001e3c:	85 db                	test   ebx,ebx
c0001e3e:	74 e8                	je     c0001e28 <mem_cmp+0x5>
c0001e40:	89 d8                	mov    eax,ebx
c0001e42:	5b                   	pop    ebx
c0001e43:	5e                   	pop    esi
c0001e44:	5f                   	pop    edi
c0001e45:	c3                   	ret    

c0001e46 <chk_chr>:
c0001e46:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e49:	85 c9                	test   ecx,ecx
c0001e4b:	74 07                	je     c0001e54 <chk_chr+0xe>
c0001e4d:	39 d1                	cmp    ecx,edx
c0001e4f:	74 03                	je     c0001e54 <chk_chr+0xe>
c0001e51:	40                   	inc    eax
c0001e52:	eb f2                	jmp    c0001e46 <chk_chr>
c0001e54:	89 c8                	mov    eax,ecx
c0001e56:	c3                   	ret    

c0001e57 <dbc_1st>:
c0001e57:	31 c0                	xor    eax,eax
c0001e59:	c3                   	ret    

c0001e5a <dbc_2nd>:
c0001e5a:	31 c0                	xor    eax,eax
c0001e5c:	c3                   	ret    

c0001e5d <tchar2uni>:
c0001e5d:	57                   	push   edi
c0001e5e:	56                   	push   esi
c0001e5f:	53                   	push   ebx
c0001e60:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e62:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e64:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e67:	f6 c1 80             	test   cl,0x80
c0001e6a:	75 0a                	jne    c0001e76 <tchar2uni+0x19>
c0001e6c:	0f b6 d1             	movzx  edx,cl
c0001e6f:	89 f3                	mov    ebx,esi
c0001e71:	e9 b2 00 00 00       	jmp    c0001f28 <tchar2uni+0xcb>
c0001e76:	89 ca                	mov    edx,ecx
c0001e78:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001e7e:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001e84:	89 ca                	mov    edx,ecx
c0001e86:	75 0a                	jne    c0001e92 <tchar2uni+0x35>
c0001e88:	83 e2 1f             	and    edx,0x1f
c0001e8b:	b9 01 00 00 00       	mov    ecx,0x1
c0001e90:	eb 37                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001e92:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001e98:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001e9e:	75 0c                	jne    c0001eac <tchar2uni+0x4f>
c0001ea0:	89 ca                	mov    edx,ecx
c0001ea2:	b9 02 00 00 00       	mov    ecx,0x2
c0001ea7:	83 e2 0f             	and    edx,0xf
c0001eaa:	eb 1d                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001eac:	89 cf                	mov    edi,ecx
c0001eae:	83 ca ff             	or     edx,0xffffffff
c0001eb1:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eb7:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ebd:	75 70                	jne    c0001f2f <tchar2uni+0xd2>
c0001ebf:	89 ca                	mov    edx,ecx
c0001ec1:	b9 03 00 00 00       	mov    ecx,0x3
c0001ec6:	83 e2 07             	and    edx,0x7
c0001ec9:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001ecd:	46                   	inc    esi
c0001ece:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ed1:	89 cf                	mov    edi,ecx
c0001ed3:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001ed9:	83 c7 80             	add    edi,0xffffff80
c0001edc:	75 4e                	jne    c0001f2c <tchar2uni+0xcf>
c0001ede:	c1 e2 06             	shl    edx,0x6
c0001ee1:	83 e1 3f             	and    ecx,0x3f
c0001ee4:	09 ca                	or     edx,ecx
c0001ee6:	39 de                	cmp    esi,ebx
c0001ee8:	75 e3                	jne    c0001ecd <tchar2uni+0x70>
c0001eea:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001eed:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001ef3:	77 37                	ja     c0001f2c <tchar2uni+0xcf>
c0001ef5:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001efb:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f01:	76 29                	jbe    c0001f2c <tchar2uni+0xcf>
c0001f03:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f09:	76 1d                	jbe    c0001f28 <tchar2uni+0xcb>
c0001f0b:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f11:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f17:	c1 e1 06             	shl    ecx,0x6
c0001f1a:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f20:	09 ca                	or     edx,ecx
c0001f22:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f28:	89 18                	mov    DWORD PTR [eax],ebx
c0001f2a:	eb 03                	jmp    c0001f2f <tchar2uni+0xd2>
c0001f2c:	83 ca ff             	or     edx,0xffffffff
c0001f2f:	5b                   	pop    ebx
c0001f30:	89 d0                	mov    eax,edx
c0001f32:	5e                   	pop    esi
c0001f33:	5f                   	pop    edi
c0001f34:	c3                   	ret    

c0001f35 <put_utf>:
c0001f35:	53                   	push   ebx
c0001f36:	83 f8 7f             	cmp    eax,0x7f
c0001f39:	89 c3                	mov    ebx,eax
c0001f3b:	b0 00                	mov    al,0x0
c0001f3d:	77 11                	ja     c0001f50 <put_utf+0x1b>
c0001f3f:	85 c9                	test   ecx,ecx
c0001f41:	0f 84 e5 00 00 00    	je     c000202c <put_utf+0xf7>
c0001f47:	88 1a                	mov    BYTE PTR [edx],bl
c0001f49:	b0 01                	mov    al,0x1
c0001f4b:	e9 dc 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f50:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f56:	77 23                	ja     c0001f7b <put_utf+0x46>
c0001f58:	83 f9 01             	cmp    ecx,0x1
c0001f5b:	0f 86 cb 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f61:	89 d8                	mov    eax,ebx
c0001f63:	83 e3 3f             	and    ebx,0x3f
c0001f66:	c1 e8 06             	shr    eax,0x6
c0001f69:	83 cb 80             	or     ebx,0xffffff80
c0001f6c:	83 c8 c0             	or     eax,0xffffffc0
c0001f6f:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001f72:	88 02                	mov    BYTE PTR [edx],al
c0001f74:	b0 02                	mov    al,0x2
c0001f76:	e9 b1 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f7b:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001f81:	77 40                	ja     c0001fc3 <put_utf+0x8e>
c0001f83:	83 f9 02             	cmp    ecx,0x2
c0001f86:	0f 86 a0 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f8c:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001f92:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f98:	0f 86 8e 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f9e:	89 d8                	mov    eax,ebx
c0001fa0:	c1 e8 0c             	shr    eax,0xc
c0001fa3:	83 c8 e0             	or     eax,0xffffffe0
c0001fa6:	88 02                	mov    BYTE PTR [edx],al
c0001fa8:	89 d8                	mov    eax,ebx
c0001faa:	83 e3 3f             	and    ebx,0x3f
c0001fad:	c1 e8 06             	shr    eax,0x6
c0001fb0:	83 cb 80             	or     ebx,0xffffff80
c0001fb3:	83 e0 3f             	and    eax,0x3f
c0001fb6:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fb9:	83 c8 80             	or     eax,0xffffff80
c0001fbc:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001fbf:	b0 03                	mov    al,0x3
c0001fc1:	eb 69                	jmp    c000202c <put_utf+0xf7>
c0001fc3:	83 f9 03             	cmp    ecx,0x3
c0001fc6:	76 64                	jbe    c000202c <put_utf+0xf7>
c0001fc8:	89 d9                	mov    ecx,ebx
c0001fca:	0f b7 c3             	movzx  eax,bx
c0001fcd:	66 31 c9             	xor    cx,cx
c0001fd0:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001fd6:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001fdc:	c1 e9 06             	shr    ecx,0x6
c0001fdf:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001fe5:	77 43                	ja     c000202a <put_utf+0xf5>
c0001fe7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001fed:	77 3b                	ja     c000202a <put_utf+0xf5>
c0001fef:	09 cb                	or     ebx,ecx
c0001ff1:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ff7:	89 d8                	mov    eax,ebx
c0001ff9:	c1 e8 12             	shr    eax,0x12
c0001ffc:	83 c8 f0             	or     eax,0xfffffff0
c0001fff:	88 02                	mov    BYTE PTR [edx],al
c0002001:	89 d8                	mov    eax,ebx
c0002003:	c1 e8 0c             	shr    eax,0xc
c0002006:	83 e0 3f             	and    eax,0x3f
c0002009:	83 c8 80             	or     eax,0xffffff80
c000200c:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000200f:	89 d8                	mov    eax,ebx
c0002011:	83 e3 3f             	and    ebx,0x3f
c0002014:	c1 e8 06             	shr    eax,0x6
c0002017:	83 cb 80             	or     ebx,0xffffff80
c000201a:	83 e0 3f             	and    eax,0x3f
c000201d:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002020:	83 c8 80             	or     eax,0xffffff80
c0002023:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0002026:	b0 04                	mov    al,0x4
c0002028:	eb 02                	jmp    c000202c <put_utf+0xf7>
c000202a:	31 c0                	xor    eax,eax
c000202c:	5b                   	pop    ebx
c000202d:	c3                   	ret    

c000202e <clst2sect>:
c000202e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002031:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0002034:	83 ea 02             	sub    edx,0x2
c0002037:	39 ca                	cmp    edx,ecx
c0002039:	76 0d                	jbe    c0002048 <clst2sect+0x1a>
c000203b:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000203f:	0f af d1             	imul   edx,ecx
c0002042:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0002045:	89 d0                	mov    eax,edx
c0002047:	c3                   	ret    
c0002048:	31 c0                	xor    eax,eax
c000204a:	c3                   	ret    

c000204b <pick_lfn>:
c000204b:	55                   	push   ebp
c000204c:	57                   	push   edi
c000204d:	89 c7                	mov    edi,eax
c000204f:	56                   	push   esi
c0002050:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002053:	53                   	push   ebx
c0002054:	89 d3                	mov    ebx,edx
c0002056:	e8 7c fd ff ff       	call   c0001dd7 <ld_word>
c000205b:	66 85 c0             	test   ax,ax
c000205e:	74 04                	je     c0002064 <pick_lfn+0x19>
c0002060:	31 c0                	xor    eax,eax
c0002062:	eb 62                	jmp    c00020c6 <pick_lfn+0x7b>
c0002064:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002067:	bd 01 00 00 00       	mov    ebp,0x1
c000206c:	83 e1 bf             	and    ecx,0xffffffbf
c000206f:	31 f6                	xor    esi,esi
c0002071:	49                   	dec    ecx
c0002072:	6b c9 0d             	imul   ecx,ecx,0xd
c0002075:	0f b6 86 a0 f5 01 c0 	movzx  eax,BYTE PTR [esi-0x3ffe0a60]
c000207c:	01 d8                	add    eax,ebx
c000207e:	e8 54 fd ff ff       	call   c0001dd7 <ld_word>
c0002083:	66 85 ed             	test   bp,bp
c0002086:	74 11                	je     c0002099 <pick_lfn+0x4e>
c0002088:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000208e:	77 d0                	ja     c0002060 <pick_lfn+0x15>
c0002090:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c0002094:	89 c5                	mov    ebp,eax
c0002096:	41                   	inc    ecx
c0002097:	eb 0a                	jmp    c00020a3 <pick_lfn+0x58>
c0002099:	0f b7 c0             	movzx  eax,ax
c000209c:	3d ff ff 00 00       	cmp    eax,0xffff
c00020a1:	75 bd                	jne    c0002060 <pick_lfn+0x15>
c00020a3:	46                   	inc    esi
c00020a4:	83 fe 0d             	cmp    esi,0xd
c00020a7:	75 cc                	jne    c0002075 <pick_lfn+0x2a>
c00020a9:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020ac:	74 13                	je     c00020c1 <pick_lfn+0x76>
c00020ae:	66 85 ed             	test   bp,bp
c00020b1:	74 0e                	je     c00020c1 <pick_lfn+0x76>
c00020b3:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020b9:	77 a5                	ja     c0002060 <pick_lfn+0x15>
c00020bb:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020c1:	b8 01 00 00 00       	mov    eax,0x1
c00020c6:	5b                   	pop    ebx
c00020c7:	5e                   	pop    esi
c00020c8:	5f                   	pop    edi
c00020c9:	5d                   	pop    ebp
c00020ca:	c3                   	ret    

c00020cb <put_lfn>:
c00020cb:	55                   	push   ebp
c00020cc:	57                   	push   edi
c00020cd:	89 d7                	mov    edi,edx
c00020cf:	56                   	push   esi
c00020d0:	31 f6                	xor    esi,esi
c00020d2:	53                   	push   ebx
c00020d3:	83 ec 0c             	sub    esp,0xc
c00020d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00020da:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00020de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00020e2:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00020e8:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00020eb:	8d 42 1a             	lea    eax,[edx+0x1a]
c00020ee:	31 d2                	xor    edx,edx
c00020f0:	e8 07 fd ff ff       	call   c0001dfc <st_word>
c00020f5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00020fc:	0f b6 d9             	movzx  ebx,cl
c00020ff:	4b                   	dec    ebx
c0002100:	6b db 0d             	imul   ebx,ebx,0xd
c0002103:	0f b7 c6             	movzx  eax,si
c0002106:	3d ff ff 00 00       	cmp    eax,0xffff
c000210b:	74 09                	je     c0002116 <put_lfn+0x4b>
c000210d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002111:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002115:	43                   	inc    ebx
c0002116:	0f b7 ee             	movzx  ebp,si
c0002119:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000211c:	89 ea                	mov    edx,ebp
c000211e:	0f b6 80 a0 f5 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0a60]
c0002125:	01 f8                	add    eax,edi
c0002127:	e8 d0 fc ff ff       	call   c0001dfc <st_word>
c000212c:	85 ed                	test   ebp,ebp
c000212e:	75 05                	jne    c0002135 <put_lfn+0x6a>
c0002130:	be ff ff 00 00       	mov    esi,0xffff
c0002135:	ff 04 24             	inc    DWORD PTR [esp]
c0002138:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c000213c:	75 c5                	jne    c0002103 <put_lfn+0x38>
c000213e:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002144:	74 0b                	je     c0002151 <put_lfn+0x86>
c0002146:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000214a:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000214f:	75 07                	jne    c0002158 <put_lfn+0x8d>
c0002151:	83 c9 40             	or     ecx,0x40
c0002154:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002158:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000215c:	88 07                	mov    BYTE PTR [edi],al
c000215e:	83 c4 0c             	add    esp,0xc
c0002161:	5b                   	pop    ebx
c0002162:	5e                   	pop    esi
c0002163:	5f                   	pop    edi
c0002164:	5d                   	pop    ebp
c0002165:	c3                   	ret    

c0002166 <gen_numname>:
c0002166:	57                   	push   edi
c0002167:	89 cf                	mov    edi,ecx
c0002169:	56                   	push   esi
c000216a:	b9 0b 00 00 00       	mov    ecx,0xb
c000216f:	53                   	push   ebx
c0002170:	89 c6                	mov    esi,eax
c0002172:	83 ec 10             	sub    esp,0x10
c0002175:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002179:	e8 85 fc ff ff       	call   c0001e03 <mem_cpy>
c000217e:	83 fb 05             	cmp    ebx,0x5
c0002181:	76 30                	jbe    c00021b3 <gen_numname+0x4d>
c0002183:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002186:	66 85 c0             	test   ax,ax
c0002189:	74 28                	je     c00021b3 <gen_numname+0x4d>
c000218b:	83 c7 02             	add    edi,0x2
c000218e:	ba 10 00 00 00       	mov    edx,0x10
c0002193:	01 db                	add    ebx,ebx
c0002195:	89 c1                	mov    ecx,eax
c0002197:	c1 e0 10             	shl    eax,0x10
c000219a:	83 e1 01             	and    ecx,0x1
c000219d:	c1 e8 11             	shr    eax,0x11
c00021a0:	01 cb                	add    ebx,ecx
c00021a2:	0f ba e3 10          	bt     ebx,0x10
c00021a6:	73 06                	jae    c00021ae <gen_numname+0x48>
c00021a8:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021ae:	4a                   	dec    edx
c00021af:	75 e2                	jne    c0002193 <gen_numname+0x2d>
c00021b1:	eb d0                	jmp    c0002183 <gen_numname+0x1d>
c00021b3:	b8 07 00 00 00       	mov    eax,0x7
c00021b8:	89 d9                	mov    ecx,ebx
c00021ba:	83 e1 0f             	and    ecx,0xf
c00021bd:	8d 79 30             	lea    edi,[ecx+0x30]
c00021c0:	89 fa                	mov    edx,edi
c00021c2:	83 ff 39             	cmp    edi,0x39
c00021c5:	76 03                	jbe    c00021ca <gen_numname+0x64>
c00021c7:	8d 51 37             	lea    edx,[ecx+0x37]
c00021ca:	8d 48 ff             	lea    ecx,[eax-0x1]
c00021cd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00021d1:	89 da                	mov    edx,ebx
c00021d3:	c1 ea 04             	shr    edx,0x4
c00021d6:	83 fb 0f             	cmp    ebx,0xf
c00021d9:	76 06                	jbe    c00021e1 <gen_numname+0x7b>
c00021db:	89 c8                	mov    eax,ecx
c00021dd:	89 d3                	mov    ebx,edx
c00021df:	eb d7                	jmp    c00021b8 <gen_numname+0x52>
c00021e1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00021e6:	31 d2                	xor    edx,edx
c00021e8:	8d 58 fe             	lea    ebx,[eax-0x2]
c00021eb:	8d 04 16             	lea    eax,[esi+edx*1]
c00021ee:	39 ca                	cmp    edx,ecx
c00021f0:	73 19                	jae    c000220b <gen_numname+0xa5>
c00021f2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00021f5:	83 f8 20             	cmp    eax,0x20
c00021f8:	74 11                	je     c000220b <gen_numname+0xa5>
c00021fa:	e8 58 fc ff ff       	call   c0001e57 <dbc_1st>
c00021ff:	85 c0                	test   eax,eax
c0002201:	74 05                	je     c0002208 <gen_numname+0xa2>
c0002203:	39 d3                	cmp    ebx,edx
c0002205:	74 04                	je     c000220b <gen_numname+0xa5>
c0002207:	42                   	inc    edx
c0002208:	42                   	inc    edx
c0002209:	eb e0                	jmp    c00021eb <gen_numname+0x85>
c000220b:	b0 20                	mov    al,0x20
c000220d:	83 f9 07             	cmp    ecx,0x7
c0002210:	77 05                	ja     c0002217 <gen_numname+0xb1>
c0002212:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002216:	41                   	inc    ecx
c0002217:	42                   	inc    edx
c0002218:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000221c:	83 fa 07             	cmp    edx,0x7
c000221f:	76 ea                	jbe    c000220b <gen_numname+0xa5>
c0002221:	83 c4 10             	add    esp,0x10
c0002224:	5b                   	pop    ebx
c0002225:	5e                   	pop    esi
c0002226:	5f                   	pop    edi
c0002227:	c3                   	ret    

c0002228 <sum_sfn>:
c0002228:	53                   	push   ebx
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	31 db                	xor    ebx,ebx
c000222d:	0f b6 d1             	movzx  edx,cl
c0002230:	c1 e1 07             	shl    ecx,0x7
c0002233:	d1 ea                	shr    edx,1
c0002235:	09 ca                	or     edx,ecx
c0002237:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c000223a:	43                   	inc    ebx
c000223b:	01 ca                	add    edx,ecx
c000223d:	83 fb 0b             	cmp    ebx,0xb
c0002240:	88 d1                	mov    cl,dl
c0002242:	75 e9                	jne    c000222d <sum_sfn+0x5>
c0002244:	88 d0                	mov    al,dl
c0002246:	5b                   	pop    ebx
c0002247:	c3                   	ret    

c0002248 <get_ldnumber>:
c0002248:	8b 10                	mov    edx,DWORD PTR [eax]
c000224a:	85 d2                	test   edx,edx
c000224c:	74 14                	je     c0002262 <get_ldnumber+0x1a>
c000224e:	56                   	push   esi
c000224f:	53                   	push   ebx
c0002250:	89 d3                	mov    ebx,edx
c0002252:	43                   	inc    ebx
c0002253:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002256:	80 f9 1f             	cmp    cl,0x1f
c0002259:	76 0d                	jbe    c0002268 <get_ldnumber+0x20>
c000225b:	80 f9 3a             	cmp    cl,0x3a
c000225e:	75 f2                	jne    c0002252 <get_ldnumber+0xa>
c0002260:	eb 0a                	jmp    c000226c <get_ldnumber+0x24>
c0002262:	83 c9 ff             	or     ecx,0xffffffff
c0002265:	89 c8                	mov    eax,ecx
c0002267:	c3                   	ret    
c0002268:	31 c9                	xor    ecx,ecx
c000226a:	eb 24                	jmp    c0002290 <get_ldnumber+0x48>
c000226c:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226f:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002272:	80 f9 09             	cmp    cl,0x9
c0002275:	77 16                	ja     c000228d <get_ldnumber+0x45>
c0002277:	83 c2 02             	add    edx,0x2
c000227a:	83 c9 ff             	or     ecx,0xffffffff
c000227d:	39 d3                	cmp    ebx,edx
c000227f:	75 0f                	jne    c0002290 <get_ldnumber+0x48>
c0002281:	89 f2                	mov    edx,esi
c0002283:	89 18                	mov    DWORD PTR [eax],ebx
c0002285:	0f be ca             	movsx  ecx,dl
c0002288:	83 e9 30             	sub    ecx,0x30
c000228b:	eb 03                	jmp    c0002290 <get_ldnumber+0x48>
c000228d:	83 c9 ff             	or     ecx,0xffffffff
c0002290:	89 c8                	mov    eax,ecx
c0002292:	5b                   	pop    ebx
c0002293:	5e                   	pop    esi
c0002294:	c3                   	ret    

c0002295 <validate>:
c0002295:	56                   	push   esi
c0002296:	53                   	push   ebx
c0002297:	89 d6                	mov    esi,edx
c0002299:	51                   	push   ecx
c000229a:	85 c0                	test   eax,eax
c000229c:	75 09                	jne    c00022a7 <validate+0x12>
c000229e:	b8 09 00 00 00       	mov    eax,0x9
c00022a3:	31 c9                	xor    ecx,ecx
c00022a5:	eb 2e                	jmp    c00022d5 <validate+0x40>
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00022ab:	85 c0                	test   eax,eax
c00022ad:	74 ef                	je     c000229e <validate+0x9>
c00022af:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022b2:	74 ea                	je     c000229e <validate+0x9>
c00022b4:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022b7:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022bb:	75 e1                	jne    c000229e <validate+0x9>
c00022bd:	83 ec 0c             	sub    esp,0xc
c00022c0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c4:	50                   	push   eax
c00022c5:	e8 bc fa ff ff       	call   c0001d86 <disk_status>
c00022ca:	83 c4 10             	add    esp,0x10
c00022cd:	a8 01                	test   al,0x1
c00022cf:	75 cd                	jne    c000229e <validate+0x9>
c00022d1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00022d3:	31 c0                	xor    eax,eax
c00022d5:	89 0e                	mov    DWORD PTR [esi],ecx
c00022d7:	5a                   	pop    edx
c00022d8:	5b                   	pop    ebx
c00022d9:	5e                   	pop    esi
c00022da:	c3                   	ret    

c00022db <sync_window>:
c00022db:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022df:	74 58                	je     c0002339 <sync_window+0x5e>
c00022e1:	56                   	push   esi
c00022e2:	53                   	push   ebx
c00022e3:	8d 70 34             	lea    esi,[eax+0x34]
c00022e6:	51                   	push   ecx
c00022e7:	89 c3                	mov    ebx,eax
c00022e9:	6a 01                	push   0x1
c00022eb:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00022ee:	56                   	push   esi
c00022ef:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f3:	50                   	push   eax
c00022f4:	e8 a9 fa ff ff       	call   c0001da2 <disk_write>
c00022f9:	83 c4 10             	add    esp,0x10
c00022fc:	ba 01 00 00 00       	mov    edx,0x1
c0002301:	85 c0                	test   eax,eax
c0002303:	75 2e                	jne    c0002333 <sync_window+0x58>
c0002305:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002308:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000230b:	89 c1                	mov    ecx,eax
c000230d:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002311:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002314:	39 d1                	cmp    ecx,edx
c0002316:	73 19                	jae    c0002331 <sync_window+0x56>
c0002318:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000231c:	75 13                	jne    c0002331 <sync_window+0x56>
c000231e:	6a 01                	push   0x1
c0002320:	01 d0                	add    eax,edx
c0002322:	50                   	push   eax
c0002323:	56                   	push   esi
c0002324:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002328:	50                   	push   eax
c0002329:	e8 74 fa ff ff       	call   c0001da2 <disk_write>
c000232e:	83 c4 10             	add    esp,0x10
c0002331:	31 d2                	xor    edx,edx
c0002333:	89 d0                	mov    eax,edx
c0002335:	5a                   	pop    edx
c0002336:	5b                   	pop    ebx
c0002337:	5e                   	pop    esi
c0002338:	c3                   	ret    
c0002339:	31 d2                	xor    edx,edx
c000233b:	89 d0                	mov    eax,edx
c000233d:	c3                   	ret    

c000233e <move_window>:
c000233e:	57                   	push   edi
c000233f:	56                   	push   esi
c0002340:	31 f6                	xor    esi,esi
c0002342:	53                   	push   ebx
c0002343:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002346:	74 32                	je     c000237a <move_window+0x3c>
c0002348:	89 c3                	mov    ebx,eax
c000234a:	89 d7                	mov    edi,edx
c000234c:	e8 8a ff ff ff       	call   c00022db <sync_window>
c0002351:	89 c6                	mov    esi,eax
c0002353:	85 c0                	test   eax,eax
c0002355:	75 23                	jne    c000237a <move_window+0x3c>
c0002357:	6a 01                	push   0x1
c0002359:	8d 43 34             	lea    eax,[ebx+0x34]
c000235c:	57                   	push   edi
c000235d:	50                   	push   eax
c000235e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002362:	50                   	push   eax
c0002363:	e8 24 fa ff ff       	call   c0001d8c <disk_read>
c0002368:	83 c4 10             	add    esp,0x10
c000236b:	85 c0                	test   eax,eax
c000236d:	74 08                	je     c0002377 <move_window+0x39>
c000236f:	be 01 00 00 00       	mov    esi,0x1
c0002374:	83 cf ff             	or     edi,0xffffffff
c0002377:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000237a:	89 f0                	mov    eax,esi
c000237c:	5b                   	pop    ebx
c000237d:	5e                   	pop    esi
c000237e:	5f                   	pop    edi
c000237f:	c3                   	ret    

c0002380 <check_fs>:
c0002380:	53                   	push   ebx
c0002381:	89 c3                	mov    ebx,eax
c0002383:	83 ec 08             	sub    esp,0x8
c0002386:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000238a:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002391:	e8 a8 ff ff ff       	call   c000233e <move_window>
c0002396:	ba 04 00 00 00       	mov    edx,0x4
c000239b:	85 c0                	test   eax,eax
c000239d:	75 68                	jne    c0002407 <check_fs+0x87>
c000239f:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023a5:	e8 2d fa ff ff       	call   c0001dd7 <ld_word>
c00023aa:	ba 03 00 00 00       	mov    edx,0x3
c00023af:	66 3d 55 aa          	cmp    ax,0xaa55
c00023b3:	75 52                	jne    c0002407 <check_fs+0x87>
c00023b5:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023b8:	8d 50 18             	lea    edx,[eax+0x18]
c00023bb:	80 fa 01             	cmp    dl,0x1
c00023be:	76 09                	jbe    c00023c9 <check_fs+0x49>
c00023c0:	ba 02 00 00 00       	mov    edx,0x2
c00023c5:	3c eb                	cmp    al,0xeb
c00023c7:	75 3e                	jne    c0002407 <check_fs+0x87>
c00023c9:	ba 20 17 02 c0       	mov    edx,0xc0021720
c00023ce:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00023d1:	b9 03 00 00 00       	mov    ecx,0x3
c00023d6:	e8 48 fa ff ff       	call   c0001e23 <mem_cmp>
c00023db:	31 d2                	xor    edx,edx
c00023dd:	85 c0                	test   eax,eax
c00023df:	74 26                	je     c0002407 <check_fs+0x87>
c00023e1:	ba 5c f4 01 c0       	mov    edx,0xc001f45c
c00023e6:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00023ec:	b9 05 00 00 00       	mov    ecx,0x5
c00023f1:	e8 2d fa ff ff       	call   c0001e23 <mem_cmp>
c00023f6:	31 d2                	xor    edx,edx
c00023f8:	85 c0                	test   eax,eax
c00023fa:	74 0b                	je     c0002407 <check_fs+0x87>
c00023fc:	31 d2                	xor    edx,edx
c00023fe:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002402:	0f 95 c2             	setne  dl
c0002405:	01 d2                	add    edx,edx
c0002407:	89 d0                	mov    eax,edx
c0002409:	83 c4 08             	add    esp,0x8
c000240c:	5b                   	pop    ebx
c000240d:	c3                   	ret    

c000240e <find_volume>:
c000240e:	55                   	push   ebp
c000240f:	57                   	push   edi
c0002410:	56                   	push   esi
c0002411:	89 c6                	mov    esi,eax
c0002413:	53                   	push   ebx
c0002414:	89 d3                	mov    ebx,edx
c0002416:	83 ec 2c             	sub    esp,0x2c
c0002419:	31 d2                	xor    edx,edx
c000241b:	e8 60 ff ff ff       	call   c0002380 <check_fs>
c0002420:	83 f8 02             	cmp    eax,0x2
c0002423:	74 06                	je     c000242b <find_volume+0x1d>
c0002425:	77 62                	ja     c0002489 <find_volume+0x7b>
c0002427:	85 db                	test   ebx,ebx
c0002429:	74 5e                	je     c0002489 <find_volume+0x7b>
c000242b:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c000242f:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002435:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c000243b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000243f:	89 cf                	mov    edi,ecx
c0002441:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002445:	89 e8                	mov    eax,ebp
c0002447:	83 c5 10             	add    ebp,0x10
c000244a:	e8 95 f9 ff ff       	call   c0001de4 <ld_dword>
c000244f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002453:	89 01                	mov    DWORD PTR [ecx],eax
c0002455:	83 c1 04             	add    ecx,0x4
c0002458:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000245c:	75 e3                	jne    c0002441 <find_volume+0x33>
c000245e:	31 ed                	xor    ebp,ebp
c0002460:	85 db                	test   ebx,ebx
c0002462:	74 03                	je     c0002467 <find_volume+0x59>
c0002464:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002467:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c000246a:	b8 03 00 00 00       	mov    eax,0x3
c000246f:	85 d2                	test   edx,edx
c0002471:	74 0c                	je     c000247f <find_volume+0x71>
c0002473:	89 f0                	mov    eax,esi
c0002475:	e8 06 ff ff ff       	call   c0002380 <check_fs>
c000247a:	83 f8 01             	cmp    eax,0x1
c000247d:	76 0a                	jbe    c0002489 <find_volume+0x7b>
c000247f:	85 db                	test   ebx,ebx
c0002481:	75 06                	jne    c0002489 <find_volume+0x7b>
c0002483:	45                   	inc    ebp
c0002484:	83 fd 03             	cmp    ebp,0x3
c0002487:	76 de                	jbe    c0002467 <find_volume+0x59>
c0002489:	83 c4 2c             	add    esp,0x2c
c000248c:	5b                   	pop    ebx
c000248d:	5e                   	pop    esi
c000248e:	5f                   	pop    edi
c000248f:	5d                   	pop    ebp
c0002490:	c3                   	ret    

c0002491 <mount_volume>:
c0002491:	55                   	push   ebp
c0002492:	89 d5                	mov    ebp,edx
c0002494:	57                   	push   edi
c0002495:	89 cf                	mov    edi,ecx
c0002497:	56                   	push   esi
c0002498:	53                   	push   ebx
c0002499:	bb 0b 00 00 00       	mov    ebx,0xb
c000249e:	83 ec 1c             	sub    esp,0x1c
c00024a1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024a7:	e8 9c fd ff ff       	call   c0002248 <get_ldnumber>
c00024ac:	85 c0                	test   eax,eax
c00024ae:	0f 88 c4 02 00 00    	js     c0002778 <mount_volume+0x2e7>
c00024b4:	8b 34 85 a0 44 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbb60]
c00024bb:	89 c2                	mov    edx,eax
c00024bd:	bb 0c 00 00 00       	mov    ebx,0xc
c00024c2:	85 f6                	test   esi,esi
c00024c4:	0f 84 ae 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024ca:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00024cd:	83 e7 fe             	and    edi,0xfffffffe
c00024d0:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00024d3:	74 3a                	je     c000250f <mount_volume+0x7e>
c00024d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00024df:	50                   	push   eax
c00024e0:	e8 a1 f8 ff ff       	call   c0001d86 <disk_status>
c00024e5:	83 c4 10             	add    esp,0x10
c00024e8:	a8 01                	test   al,0x1
c00024ea:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00024ed:	75 20                	jne    c000250f <mount_volume+0x7e>
c00024ef:	31 db                	xor    ebx,ebx
c00024f1:	81 e7 fe 00 00 00    	and    edi,0xfe
c00024f7:	0f 84 7b 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024fd:	a8 04                	test   al,0x4
c00024ff:	0f 84 73 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002505:	bb 0a 00 00 00       	mov    ebx,0xa
c000250a:	e9 69 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c000250f:	83 ec 0c             	sub    esp,0xc
c0002512:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002515:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002518:	0f b6 c2             	movzx  eax,dl
c000251b:	bb 03 00 00 00       	mov    ebx,0x3
c0002520:	50                   	push   eax
c0002521:	e8 63 f8 ff ff       	call   c0001d89 <disk_initialize>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	a8 01                	test   al,0x1
c000252b:	0f 85 47 02 00 00    	jne    c0002778 <mount_volume+0x2e7>
c0002531:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002537:	74 04                	je     c000253d <mount_volume+0xac>
c0002539:	a8 04                	test   al,0x4
c000253b:	75 c8                	jne    c0002505 <mount_volume+0x74>
c000253d:	31 d2                	xor    edx,edx
c000253f:	89 f0                	mov    eax,esi
c0002541:	bb 01 00 00 00       	mov    ebx,0x1
c0002546:	e8 c3 fe ff ff       	call   c000240e <find_volume>
c000254b:	83 f8 04             	cmp    eax,0x4
c000254e:	0f 84 24 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002554:	83 f8 01             	cmp    eax,0x1
c0002557:	76 0a                	jbe    c0002563 <mount_volume+0xd2>
c0002559:	bb 0d 00 00 00       	mov    ebx,0xd
c000255e:	e9 15 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c0002563:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002566:	e8 6c f8 ff ff       	call   c0001dd7 <ld_word>
c000256b:	66 3d 00 02          	cmp    ax,0x200
c000256f:	75 e8                	jne    c0002559 <mount_volume+0xc8>
c0002571:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002574:	e8 5e f8 ff ff       	call   c0001dd7 <ld_word>
c0002579:	0f b7 c0             	movzx  eax,ax
c000257c:	89 04 24             	mov    DWORD PTR [esp],eax
c000257f:	85 c0                	test   eax,eax
c0002581:	75 0b                	jne    c000258e <mount_volume+0xfd>
c0002583:	8d 46 58             	lea    eax,[esi+0x58]
c0002586:	e8 59 f8 ff ff       	call   c0001de4 <ld_dword>
c000258b:	89 04 24             	mov    DWORD PTR [esp],eax
c000258e:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002591:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002595:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002598:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000259b:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c000259e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00025a2:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00025a9:	48                   	dec    eax
c00025aa:	3c 01                	cmp    al,0x1
c00025ac:	77 ab                	ja     c0002559 <mount_volume+0xc8>
c00025ae:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025b2:	89 c3                	mov    ebx,eax
c00025b4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025b8:	66 85 c0             	test   ax,ax
c00025bb:	74 9c                	je     c0002559 <mount_volume+0xc8>
c00025bd:	8d 40 ff             	lea    eax,[eax-0x1]
c00025c0:	85 d8                	test   eax,ebx
c00025c2:	75 95                	jne    c0002559 <mount_volume+0xc8>
c00025c4:	8d 46 45             	lea    eax,[esi+0x45]
c00025c7:	e8 0b f8 ff ff       	call   c0001dd7 <ld_word>
c00025cc:	89 c7                	mov    edi,eax
c00025ce:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00025d2:	a8 0f                	test   al,0xf
c00025d4:	75 83                	jne    c0002559 <mount_volume+0xc8>
c00025d6:	8d 46 47             	lea    eax,[esi+0x47]
c00025d9:	e8 f9 f7 ff ff       	call   c0001dd7 <ld_word>
c00025de:	0f b7 e8             	movzx  ebp,ax
c00025e1:	85 ed                	test   ebp,ebp
c00025e3:	75 0a                	jne    c00025ef <mount_volume+0x15e>
c00025e5:	8d 46 54             	lea    eax,[esi+0x54]
c00025e8:	e8 f7 f7 ff ff       	call   c0001de4 <ld_dword>
c00025ed:	89 c5                	mov    ebp,eax
c00025ef:	8d 46 42             	lea    eax,[esi+0x42]
c00025f2:	e8 e0 f7 ff ff       	call   c0001dd7 <ld_word>
c00025f7:	0f b7 c8             	movzx  ecx,ax
c00025fa:	85 c9                	test   ecx,ecx
c00025fc:	0f 84 57 ff ff ff    	je     c0002559 <mount_volume+0xc8>
c0002602:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002607:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c000260b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000260f:	0f b7 c7             	movzx  eax,di
c0002612:	c1 e8 04             	shr    eax,0x4
c0002615:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002619:	01 c8                	add    eax,ecx
c000261b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000261f:	39 c5                	cmp    ebp,eax
c0002621:	0f 82 32 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002627:	29 c5                	sub    ebp,eax
c0002629:	31 d2                	xor    edx,edx
c000262b:	89 e8                	mov    eax,ebp
c000262d:	f7 f3                	div    ebx
c000262f:	39 dd                	cmp    ebp,ebx
c0002631:	0f 82 22 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002637:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000263c:	0f 87 17 ff ff ff    	ja     c0002559 <mount_volume+0xc8>
c0002642:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002647:	0f 86 1c 01 00 00    	jbe    c0002769 <mount_volume+0x2d8>
c000264d:	bb 03 00 00 00       	mov    ebx,0x3
c0002652:	8d 68 02             	lea    ebp,[eax+0x2]
c0002655:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002659:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000265d:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c0002661:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002664:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002667:	01 c8                	add    eax,ecx
c0002669:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000266c:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000266f:	83 fb 03             	cmp    ebx,0x3
c0002672:	75 23                	jne    c0002697 <mount_volume+0x206>
c0002674:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002677:	e8 5b f7 ff ff       	call   c0001dd7 <ld_word>
c000267c:	09 c7                	or     edi,eax
c000267e:	66 85 ff             	test   di,di
c0002681:	0f 85 d2 fe ff ff    	jne    c0002559 <mount_volume+0xc8>
c0002687:	8d 46 60             	lea    eax,[esi+0x60]
c000268a:	c1 e5 02             	shl    ebp,0x2
c000268d:	e8 52 f7 ff ff       	call   c0001de4 <ld_dword>
c0002692:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002695:	eb 24                	jmp    c00026bb <mount_volume+0x22a>
c0002697:	66 85 ff             	test   di,di
c000269a:	0f 84 b9 fe ff ff    	je     c0002559 <mount_volume+0xc8>
c00026a0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00026a4:	83 fb 02             	cmp    ebx,0x2
c00026a7:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026aa:	75 04                	jne    c00026b0 <mount_volume+0x21f>
c00026ac:	01 ed                	add    ebp,ebp
c00026ae:	eb 0b                	jmp    c00026bb <mount_volume+0x22a>
c00026b0:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00026b4:	83 e5 01             	and    ebp,0x1
c00026b7:	d1 e8                	shr    eax,1
c00026b9:	01 c5                	add    ebp,eax
c00026bb:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00026c1:	c1 ed 09             	shr    ebp,0x9
c00026c4:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00026c7:	0f 87 8c fe ff ff    	ja     c0002559 <mount_volume+0xc8>
c00026cd:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00026d4:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00026db:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00026df:	83 fb 03             	cmp    ebx,0x3
c00026e2:	75 6e                	jne    c0002752 <mount_volume+0x2c1>
c00026e4:	8d 46 64             	lea    eax,[esi+0x64]
c00026e7:	e8 eb f6 ff ff       	call   c0001dd7 <ld_word>
c00026ec:	66 48                	dec    ax
c00026ee:	75 62                	jne    c0002752 <mount_volume+0x2c1>
c00026f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00026f4:	89 f0                	mov    eax,esi
c00026f6:	42                   	inc    edx
c00026f7:	e8 42 fc ff ff       	call   c000233e <move_window>
c00026fc:	85 c0                	test   eax,eax
c00026fe:	75 52                	jne    c0002752 <mount_volume+0x2c1>
c0002700:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002704:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000270a:	e8 c8 f6 ff ff       	call   c0001dd7 <ld_word>
c000270f:	66 3d 55 aa          	cmp    ax,0xaa55
c0002713:	75 3d                	jne    c0002752 <mount_volume+0x2c1>
c0002715:	8d 46 34             	lea    eax,[esi+0x34]
c0002718:	e8 c7 f6 ff ff       	call   c0001de4 <ld_dword>
c000271d:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002722:	75 2e                	jne    c0002752 <mount_volume+0x2c1>
c0002724:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000272a:	e8 b5 f6 ff ff       	call   c0001de4 <ld_dword>
c000272f:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002734:	75 1c                	jne    c0002752 <mount_volume+0x2c1>
c0002736:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c000273c:	e8 a3 f6 ff ff       	call   c0001de4 <ld_dword>
c0002741:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002744:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000274a:	e8 95 f6 ff ff       	call   c0001de4 <ld_dword>
c000274f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002752:	66 a1 80 44 02 c0    	mov    ax,ds:0xc0024480
c0002758:	88 1e                	mov    BYTE PTR [esi],bl
c000275a:	40                   	inc    eax
c000275b:	31 db                	xor    ebx,ebx
c000275d:	66 a3 80 44 02 c0    	mov    ds:0xc0024480,ax
c0002763:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002767:	eb 0f                	jmp    c0002778 <mount_volume+0x2e7>
c0002769:	3d f6 0f 00 00       	cmp    eax,0xff6
c000276e:	19 db                	sbb    ebx,ebx
c0002770:	83 c3 02             	add    ebx,0x2
c0002773:	e9 da fe ff ff       	jmp    c0002652 <mount_volume+0x1c1>
c0002778:	83 c4 1c             	add    esp,0x1c
c000277b:	89 d8                	mov    eax,ebx
c000277d:	5b                   	pop    ebx
c000277e:	5e                   	pop    esi
c000277f:	5f                   	pop    edi
c0002780:	5d                   	pop    ebp
c0002781:	c3                   	ret    

c0002782 <put_fat>:
c0002782:	55                   	push   ebp
c0002783:	bd 02 00 00 00       	mov    ebp,0x2
c0002788:	57                   	push   edi
c0002789:	56                   	push   esi
c000278a:	53                   	push   ebx
c000278b:	83 ec 1c             	sub    esp,0x1c
c000278e:	83 fa 01             	cmp    edx,0x1
c0002791:	0f 86 38 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c0002797:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c000279a:	0f 86 2f 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c00027a0:	89 c6                	mov    esi,eax
c00027a2:	89 cf                	mov    edi,ecx
c00027a4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027a7:	89 d3                	mov    ebx,edx
c00027a9:	83 f8 02             	cmp    eax,0x2
c00027ac:	0f 84 b1 00 00 00    	je     c0002863 <put_fat+0xe1>
c00027b2:	83 f8 03             	cmp    eax,0x3
c00027b5:	0f 84 d5 00 00 00    	je     c0002890 <put_fat+0x10e>
c00027bb:	48                   	dec    eax
c00027bc:	0f 85 0d 01 00 00    	jne    c00028cf <put_fat+0x14d>
c00027c2:	89 d1                	mov    ecx,edx
c00027c4:	89 f0                	mov    eax,esi
c00027c6:	d1 e9                	shr    ecx,1
c00027c8:	01 d1                	add    ecx,edx
c00027ca:	89 ca                	mov    edx,ecx
c00027cc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00027d0:	c1 ea 09             	shr    edx,0x9
c00027d3:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027d6:	e8 63 fb ff ff       	call   c000233e <move_window>
c00027db:	89 c5                	mov    ebp,eax
c00027dd:	85 c0                	test   eax,eax
c00027df:	0f 85 ea 00 00 00    	jne    c00028cf <put_fat+0x14d>
c00027e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027e9:	8d 46 34             	lea    eax,[esi+0x34]
c00027ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027f0:	8d 41 01             	lea    eax,[ecx+0x1]
c00027f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00027f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027fd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002801:	89 f8                	mov    eax,edi
c0002803:	83 e3 01             	and    ebx,0x1
c0002806:	74 11                	je     c0002819 <put_fat+0x97>
c0002808:	8a 11                	mov    dl,BYTE PTR [ecx]
c000280a:	89 f8                	mov    eax,edi
c000280c:	83 e2 0f             	and    edx,0xf
c000280f:	c1 e0 04             	shl    eax,0x4
c0002812:	25 f0 0f 00 00       	and    eax,0xff0
c0002817:	09 d0                	or     eax,edx
c0002819:	88 01                	mov    BYTE PTR [ecx],al
c000281b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000281f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002823:	c1 ea 09             	shr    edx,0x9
c0002826:	89 f0                	mov    eax,esi
c0002828:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000282b:	e8 0e fb ff ff       	call   c000233e <move_window>
c0002830:	89 c5                	mov    ebp,eax
c0002832:	85 c0                	test   eax,eax
c0002834:	0f 85 95 00 00 00    	jne    c00028cf <put_fat+0x14d>
c000283a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000283e:	25 ff 01 00 00       	and    eax,0x1ff
c0002843:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002847:	85 db                	test   ebx,ebx
c0002849:	74 07                	je     c0002852 <put_fat+0xd0>
c000284b:	c1 ef 04             	shr    edi,0x4
c000284e:	89 f9                	mov    ecx,edi
c0002850:	eb 0d                	jmp    c000285f <put_fat+0xdd>
c0002852:	8a 08                	mov    cl,BYTE PTR [eax]
c0002854:	c1 ef 08             	shr    edi,0x8
c0002857:	83 e1 f0             	and    ecx,0xfffffff0
c000285a:	83 e7 0f             	and    edi,0xf
c000285d:	09 f9                	or     ecx,edi
c000285f:	88 08                	mov    BYTE PTR [eax],cl
c0002861:	eb 27                	jmp    c000288a <put_fat+0x108>
c0002863:	c1 ea 08             	shr    edx,0x8
c0002866:	89 f0                	mov    eax,esi
c0002868:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000286b:	e8 ce fa ff ff       	call   c000233e <move_window>
c0002870:	89 c5                	mov    ebp,eax
c0002872:	85 c0                	test   eax,eax
c0002874:	75 59                	jne    c00028cf <put_fat+0x14d>
c0002876:	01 db                	add    ebx,ebx
c0002878:	0f b7 d7             	movzx  edx,di
c000287b:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002881:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002885:	e8 72 f5 ff ff       	call   c0001dfc <st_word>
c000288a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c000288e:	eb 3f                	jmp    c00028cf <put_fat+0x14d>
c0002890:	c1 ea 07             	shr    edx,0x7
c0002893:	89 f0                	mov    eax,esi
c0002895:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002898:	e8 a1 fa ff ff       	call   c000233e <move_window>
c000289d:	89 c5                	mov    ebp,eax
c000289f:	85 c0                	test   eax,eax
c00028a1:	75 2c                	jne    c00028cf <put_fat+0x14d>
c00028a3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028a9:	c1 e3 02             	shl    ebx,0x2
c00028ac:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028b2:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00028b6:	89 d8                	mov    eax,ebx
c00028b8:	e8 27 f5 ff ff       	call   c0001de4 <ld_dword>
c00028bd:	25 00 00 00 f0       	and    eax,0xf0000000
c00028c2:	09 f8                	or     eax,edi
c00028c4:	89 c2                	mov    edx,eax
c00028c6:	89 d8                	mov    eax,ebx
c00028c8:	e8 33 f5 ff ff       	call   c0001e00 <st_dword>
c00028cd:	eb bb                	jmp    c000288a <put_fat+0x108>
c00028cf:	83 c4 1c             	add    esp,0x1c
c00028d2:	89 e8                	mov    eax,ebp
c00028d4:	5b                   	pop    ebx
c00028d5:	5e                   	pop    esi
c00028d6:	5f                   	pop    edi
c00028d7:	5d                   	pop    ebp
c00028d8:	c3                   	ret    

c00028d9 <dir_clear>:
c00028d9:	55                   	push   ebp
c00028da:	57                   	push   edi
c00028db:	56                   	push   esi
c00028dc:	89 c6                	mov    esi,eax
c00028de:	53                   	push   ebx
c00028df:	83 ec 1c             	sub    esp,0x1c
c00028e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00028e6:	e8 f0 f9 ff ff       	call   c00022db <sync_window>
c00028eb:	85 c0                	test   eax,eax
c00028ed:	0f 85 c0 00 00 00    	jne    c00029b3 <dir_clear+0xda>
c00028f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028f7:	89 f0                	mov    eax,esi
c00028f9:	e8 30 f7 ff ff       	call   c000202e <clst2sect>
c00028fe:	31 d2                	xor    edx,edx
c0002900:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002903:	89 c5                	mov    ebp,eax
c0002905:	b9 00 02 00 00       	mov    ecx,0x200
c000290a:	8d 46 34             	lea    eax,[esi+0x34]
c000290d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002911:	e8 02 f5 ff ff       	call   c0001e18 <mem_set>
c0002916:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000291a:	c1 e3 09             	shl    ebx,0x9
c000291d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002923:	76 1b                	jbe    c0002940 <dir_clear+0x67>
c0002925:	bb 00 80 00 00       	mov    ebx,0x8000
c000292a:	eb 14                	jmp    c0002940 <dir_clear+0x67>
c000292c:	83 ec 0c             	sub    esp,0xc
c000292f:	53                   	push   ebx
c0002930:	e8 eb 32 00 00       	call   c0005c20 <ff_memalloc>
c0002935:	83 c4 10             	add    esp,0x10
c0002938:	89 c7                	mov    edi,eax
c000293a:	85 c0                	test   eax,eax
c000293c:	75 7c                	jne    c00029ba <dir_clear+0xe1>
c000293e:	d1 eb                	shr    ebx,1
c0002940:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002946:	77 e4                	ja     c000292c <dir_clear+0x53>
c0002948:	31 db                	xor    ebx,ebx
c000294a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000294e:	39 d8                	cmp    eax,ebx
c0002950:	76 53                	jbe    c00029a5 <dir_clear+0xcc>
c0002952:	6a 01                	push   0x1
c0002954:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002957:	50                   	push   eax
c0002958:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000295c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002960:	50                   	push   eax
c0002961:	e8 3c f4 ff ff       	call   c0001da2 <disk_write>
c0002966:	83 c4 10             	add    esp,0x10
c0002969:	85 c0                	test   eax,eax
c000296b:	75 38                	jne    c00029a5 <dir_clear+0xcc>
c000296d:	43                   	inc    ebx
c000296e:	eb da                	jmp    c000294a <dir_clear+0x71>
c0002970:	52                   	push   edx
c0002971:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002974:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002978:	50                   	push   eax
c0002979:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000297d:	57                   	push   edi
c000297e:	50                   	push   eax
c000297f:	e8 1e f4 ff ff       	call   c0001da2 <disk_write>
c0002984:	83 c4 10             	add    esp,0x10
c0002987:	85 c0                	test   eax,eax
c0002989:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000298d:	75 0a                	jne    c0002999 <dir_clear+0xc0>
c000298f:	01 d3                	add    ebx,edx
c0002991:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002995:	39 d8                	cmp    eax,ebx
c0002997:	77 d7                	ja     c0002970 <dir_clear+0x97>
c0002999:	83 ec 0c             	sub    esp,0xc
c000299c:	57                   	push   edi
c000299d:	e8 96 32 00 00       	call   c0005c38 <ff_memfree>
c00029a2:	83 c4 10             	add    esp,0x10
c00029a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029a9:	39 d8                	cmp    eax,ebx
c00029ab:	0f 95 c0             	setne  al
c00029ae:	0f b6 c0             	movzx  eax,al
c00029b1:	eb 19                	jmp    c00029cc <dir_clear+0xf3>
c00029b3:	b8 01 00 00 00       	mov    eax,0x1
c00029b8:	eb 12                	jmp    c00029cc <dir_clear+0xf3>
c00029ba:	89 d9                	mov    ecx,ebx
c00029bc:	31 d2                	xor    edx,edx
c00029be:	e8 55 f4 ff ff       	call   c0001e18 <mem_set>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	31 db                	xor    ebx,ebx
c00029c7:	c1 ea 09             	shr    edx,0x9
c00029ca:	eb c5                	jmp    c0002991 <dir_clear+0xb8>
c00029cc:	83 c4 1c             	add    esp,0x1c
c00029cf:	5b                   	pop    ebx
c00029d0:	5e                   	pop    esi
c00029d1:	5f                   	pop    edi
c00029d2:	5d                   	pop    ebp
c00029d3:	c3                   	ret    

c00029d4 <create_name>:
c00029d4:	55                   	push   ebp
c00029d5:	57                   	push   edi
c00029d6:	89 d7                	mov    edi,edx
c00029d8:	56                   	push   esi
c00029d9:	31 f6                	xor    esi,esi
c00029db:	53                   	push   ebx
c00029dc:	83 ec 3c             	sub    esp,0x3c
c00029df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029e3:	8b 02                	mov    eax,DWORD PTR [edx]
c00029e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00029e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00029ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00029f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029f6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00029fa:	e8 5e f4 ff ff       	call   c0001e5d <tchar2uni>
c00029ff:	89 c3                	mov    ebx,eax
c0002a01:	83 f8 ff             	cmp    eax,0xffffffff
c0002a04:	75 0a                	jne    c0002a10 <create_name+0x3c>
c0002a06:	b8 06 00 00 00       	mov    eax,0x6
c0002a0b:	e9 93 02 00 00       	jmp    c0002ca3 <create_name+0x2cf>
c0002a10:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a15:	76 0c                	jbe    c0002a23 <create_name+0x4f>
c0002a17:	c1 e8 10             	shr    eax,0x10
c0002a1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a1e:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002a22:	46                   	inc    esi
c0002a23:	0f b7 d3             	movzx  edx,bx
c0002a26:	83 fa 1f             	cmp    edx,0x1f
c0002a29:	76 4a                	jbe    c0002a75 <create_name+0xa1>
c0002a2b:	83 fa 5c             	cmp    edx,0x5c
c0002a2e:	74 30                	je     c0002a60 <create_name+0x8c>
c0002a30:	83 fa 2f             	cmp    edx,0x2f
c0002a33:	74 2b                	je     c0002a60 <create_name+0x8c>
c0002a35:	83 fa 7f             	cmp    edx,0x7f
c0002a38:	77 0e                	ja     c0002a48 <create_name+0x74>
c0002a3a:	b8 62 f4 01 c0       	mov    eax,0xc001f462
c0002a3f:	e8 02 f4 ff ff       	call   c0001e46 <chk_chr>
c0002a44:	85 c0                	test   eax,eax
c0002a46:	75 be                	jne    c0002a06 <create_name+0x32>
c0002a48:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a4e:	77 b6                	ja     c0002a06 <create_name+0x32>
c0002a50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a54:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002a58:	46                   	inc    esi
c0002a59:	eb 9b                	jmp    c00029f6 <create_name+0x22>
c0002a5b:	40                   	inc    eax
c0002a5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a64:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002a67:	83 fa 2f             	cmp    edx,0x2f
c0002a6a:	74 ef                	je     c0002a5b <create_name+0x87>
c0002a6c:	83 fa 5c             	cmp    edx,0x5c
c0002a6f:	74 ea                	je     c0002a5b <create_name+0x87>
c0002a71:	31 db                	xor    ebx,ebx
c0002a73:	eb 02                	jmp    c0002a77 <create_name+0xa3>
c0002a75:	b3 04                	mov    bl,0x4
c0002a77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a7b:	89 07                	mov    DWORD PTR [edi],eax
c0002a7d:	85 f6                	test   esi,esi
c0002a7f:	74 16                	je     c0002a97 <create_name+0xc3>
c0002a81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a85:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002a8a:	83 f8 20             	cmp    eax,0x20
c0002a8d:	74 05                	je     c0002a94 <create_name+0xc0>
c0002a8f:	83 f8 2e             	cmp    eax,0x2e
c0002a92:	75 03                	jne    c0002a97 <create_name+0xc3>
c0002a94:	4e                   	dec    esi
c0002a95:	eb e6                	jmp    c0002a7d <create_name+0xa9>
c0002a97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9b:	31 ff                	xor    edi,edi
c0002a9d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002aa3:	85 f6                	test   esi,esi
c0002aa5:	0f 84 5b ff ff ff    	je     c0002a06 <create_name+0x32>
c0002aab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aaf:	8d 57 01             	lea    edx,[edi+0x1]
c0002ab2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ab6:	83 f8 20             	cmp    eax,0x20
c0002ab9:	75 04                	jne    c0002abf <create_name+0xeb>
c0002abb:	89 d7                	mov    edi,edx
c0002abd:	eb ec                	jmp    c0002aab <create_name+0xd7>
c0002abf:	85 ff                	test   edi,edi
c0002ac1:	75 05                	jne    c0002ac8 <create_name+0xf4>
c0002ac3:	83 f8 2e             	cmp    eax,0x2e
c0002ac6:	75 08                	jne    c0002ad0 <create_name+0xfc>
c0002ac8:	83 cb 03             	or     ebx,0x3
c0002acb:	eb 03                	jmp    c0002ad0 <create_name+0xfc>
c0002acd:	4e                   	dec    esi
c0002ace:	74 0c                	je     c0002adc <create_name+0x108>
c0002ad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad4:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002ada:	75 f1                	jne    c0002acd <create_name+0xf9>
c0002adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002ae0:	b9 0b 00 00 00       	mov    ecx,0xb
c0002ae5:	83 c0 20             	add    eax,0x20
c0002ae8:	ba 20 00 00 00       	mov    edx,0x20
c0002aed:	31 ed                	xor    ebp,ebp
c0002aef:	e8 24 f3 ff ff       	call   c0001e18 <mem_set>
c0002af4:	b9 08 00 00 00       	mov    ecx,0x8
c0002af9:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002afe:	8d 47 01             	lea    eax,[edi+0x1]
c0002b01:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002b05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b09:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b0d:	89 c7                	mov    edi,eax
c0002b0f:	85 c0                	test   eax,eax
c0002b11:	0f 84 25 01 00 00    	je     c0002c3c <create_name+0x268>
c0002b17:	83 f8 20             	cmp    eax,0x20
c0002b1a:	74 0f                	je     c0002b2b <create_name+0x157>
c0002b1c:	83 f8 2e             	cmp    eax,0x2e
c0002b1f:	75 13                	jne    c0002b34 <create_name+0x160>
c0002b21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b25:	0f 84 6a 01 00 00    	je     c0002c95 <create_name+0x2c1>
c0002b2b:	83 cb 03             	or     ebx,0x3
c0002b2e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002b32:	eb ca                	jmp    c0002afe <create_name+0x12a>
c0002b34:	39 cd                	cmp    ebp,ecx
c0002b36:	73 0b                	jae    c0002b43 <create_name+0x16f>
c0002b38:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b3c:	75 3f                	jne    c0002b7d <create_name+0x1a9>
c0002b3e:	e9 52 01 00 00       	jmp    c0002c95 <create_name+0x2c1>
c0002b43:	83 f9 0b             	cmp    ecx,0xb
c0002b46:	75 0d                	jne    c0002b55 <create_name+0x181>
c0002b48:	83 cb 03             	or     ebx,0x3
c0002b4b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b50:	e9 e7 00 00 00       	jmp    c0002c3c <create_name+0x268>
c0002b55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b59:	74 0d                	je     c0002b68 <create_name+0x194>
c0002b5b:	83 cb 03             	or     ebx,0x3
c0002b5e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b62:	0f 87 d4 00 00 00    	ja     c0002c3c <create_name+0x268>
c0002b68:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002b6d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002b71:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b76:	bd 08 00 00 00       	mov    ebp,0x8
c0002b7b:	eb b1                	jmp    c0002b2e <create_name+0x15a>
c0002b7d:	83 f8 7f             	cmp    eax,0x7f
c0002b80:	76 66                	jbe    c0002be8 <create_name+0x214>
c0002b82:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002b86:	89 d9                	mov    ecx,ebx
c0002b88:	83 c9 02             	or     ecx,0x2
c0002b8b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b8f:	52                   	push   edx
c0002b90:	52                   	push   edx
c0002b91:	68 b5 01 00 00       	push   0x1b5
c0002b96:	50                   	push   eax
c0002b97:	e8 b4 30 00 00       	call   c0005c50 <ff_uni2oem>
c0002b9c:	83 c4 10             	add    esp,0x10
c0002b9f:	89 c7                	mov    edi,eax
c0002ba1:	a8 80                	test   al,0x80
c0002ba3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002ba7:	74 0c                	je     c0002bb5 <create_name+0x1e1>
c0002ba9:	83 e7 7f             	and    edi,0x7f
c0002bac:	0f b6 bf 20 f5 01 c0 	movzx  edi,BYTE PTR [edi-0x3ffe0ae0]
c0002bb3:	eb 2a                	jmp    c0002bdf <create_name+0x20b>
c0002bb5:	0f b7 c0             	movzx  eax,ax
c0002bb8:	3d ff 00 00 00       	cmp    eax,0xff
c0002bbd:	76 20                	jbe    c0002bdf <create_name+0x20b>
c0002bbf:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002bc2:	39 ea                	cmp    edx,ebp
c0002bc4:	77 0a                	ja     c0002bd0 <create_name+0x1fc>
c0002bc6:	83 cb 03             	or     ebx,0x3
c0002bc9:	89 cd                	mov    ebp,ecx
c0002bcb:	e9 5e ff ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002bd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002bd4:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002bd8:	45                   	inc    ebp
c0002bd9:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002bdd:	eb 4d                	jmp    c0002c2c <create_name+0x258>
c0002bdf:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002be3:	66 85 ff             	test   di,di
c0002be6:	74 19                	je     c0002c01 <create_name+0x22d>
c0002be8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bec:	0f b7 d7             	movzx  edx,di
c0002bef:	b8 6b f4 01 c0       	mov    eax,0xc001f46b
c0002bf4:	e8 4d f2 ff ff       	call   c0001e46 <chk_chr>
c0002bf9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002bfd:	85 c0                	test   eax,eax
c0002bff:	74 0a                	je     c0002c0b <create_name+0x237>
c0002c01:	83 cb 03             	or     ebx,0x3
c0002c04:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c09:	eb 21                	jmp    c0002c2c <create_name+0x258>
c0002c0b:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c0e:	66 83 f8 19          	cmp    ax,0x19
c0002c12:	77 07                	ja     c0002c1b <create_name+0x247>
c0002c14:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c19:	eb 11                	jmp    c0002c2c <create_name+0x258>
c0002c1b:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c1e:	66 83 f8 19          	cmp    ax,0x19
c0002c22:	77 08                	ja     c0002c2c <create_name+0x258>
c0002c24:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c29:	83 ef 20             	sub    edi,0x20
c0002c2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002c30:	89 f8                	mov    eax,edi
c0002c32:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002c36:	45                   	inc    ebp
c0002c37:	e9 f2 fe ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c40:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002c44:	75 04                	jne    c0002c4a <create_name+0x276>
c0002c46:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002c4a:	83 f9 08             	cmp    ecx,0x8
c0002c4d:	75 05                	jne    c0002c54 <create_name+0x280>
c0002c4f:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c58:	83 e0 0c             	and    eax,0xc
c0002c5b:	83 f8 0c             	cmp    eax,0xc
c0002c5e:	74 0c                	je     c0002c6c <create_name+0x298>
c0002c60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c64:	83 e0 03             	and    eax,0x3
c0002c67:	83 f8 03             	cmp    eax,0x3
c0002c6a:	75 05                	jne    c0002c71 <create_name+0x29d>
c0002c6c:	83 cb 02             	or     ebx,0x2
c0002c6f:	eb 19                	jmp    c0002c8a <create_name+0x2b6>
c0002c71:	f6 c3 02             	test   bl,0x2
c0002c74:	75 14                	jne    c0002c8a <create_name+0x2b6>
c0002c76:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002c7b:	74 03                	je     c0002c80 <create_name+0x2ac>
c0002c7d:	83 cb 10             	or     ebx,0x10
c0002c80:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002c85:	74 03                	je     c0002c8a <create_name+0x2b6>
c0002c87:	83 cb 08             	or     ebx,0x8
c0002c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c8e:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002c91:	31 c0                	xor    eax,eax
c0002c93:	eb 0e                	jmp    c0002ca3 <create_name+0x2cf>
c0002c95:	83 f9 0b             	cmp    ecx,0xb
c0002c98:	0f 85 ca fe ff ff    	jne    c0002b68 <create_name+0x194>
c0002c9e:	e9 a5 fe ff ff       	jmp    c0002b48 <create_name+0x174>
c0002ca3:	83 c4 3c             	add    esp,0x3c
c0002ca6:	5b                   	pop    ebx
c0002ca7:	5e                   	pop    esi
c0002ca8:	5f                   	pop    edi
c0002ca9:	5d                   	pop    ebp
c0002caa:	c3                   	ret    

c0002cab <cmp_lfn>:
c0002cab:	55                   	push   ebp
c0002cac:	57                   	push   edi
c0002cad:	89 d7                	mov    edi,edx
c0002caf:	56                   	push   esi
c0002cb0:	53                   	push   ebx
c0002cb1:	83 ec 1c             	sub    esp,0x1c
c0002cb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cbb:	e8 17 f1 ff ff       	call   c0001dd7 <ld_word>
c0002cc0:	66 85 c0             	test   ax,ax
c0002cc3:	74 07                	je     c0002ccc <cmp_lfn+0x21>
c0002cc5:	31 c0                	xor    eax,eax
c0002cc7:	e9 a1 00 00 00       	jmp    c0002d6d <cmp_lfn+0xc2>
c0002ccc:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cce:	bd 01 00 00 00       	mov    ebp,0x1
c0002cd3:	83 e3 3f             	and    ebx,0x3f
c0002cd6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002cde:	4b                   	dec    ebx
c0002cdf:	6b db 0d             	imul   ebx,ebx,0xd
c0002ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ce6:	0f b6 80 a0 f5 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0a60]
c0002ced:	01 f8                	add    eax,edi
c0002cef:	e8 e3 f0 ff ff       	call   c0001dd7 <ld_word>
c0002cf4:	66 85 ed             	test   bp,bp
c0002cf7:	89 c6                	mov    esi,eax
c0002cf9:	74 3c                	je     c0002d37 <cmp_lfn+0x8c>
c0002cfb:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d01:	77 c2                	ja     c0002cc5 <cmp_lfn+0x1a>
c0002d03:	83 ec 0c             	sub    esp,0xc
c0002d06:	0f b7 c0             	movzx  eax,ax
c0002d09:	50                   	push   eax
c0002d0a:	e8 59 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d0f:	89 c5                	mov    ebp,eax
c0002d11:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002d18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002d1c:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d20:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d23:	e8 40 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d28:	83 c4 10             	add    esp,0x10
c0002d2b:	39 c5                	cmp    ebp,eax
c0002d2d:	75 96                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d2f:	89 f5                	mov    ebp,esi
c0002d31:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002d35:	eb 0b                	jmp    c0002d42 <cmp_lfn+0x97>
c0002d37:	0f b7 c8             	movzx  ecx,ax
c0002d3a:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002d40:	75 83                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d42:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002d46:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002d4b:	75 95                	jne    c0002ce2 <cmp_lfn+0x37>
c0002d4d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d50:	74 16                	je     c0002d68 <cmp_lfn+0xbd>
c0002d52:	66 85 ed             	test   bp,bp
c0002d55:	74 11                	je     c0002d68 <cmp_lfn+0xbd>
c0002d57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d5b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d60:	0f 94 c0             	sete   al
c0002d63:	0f b6 c0             	movzx  eax,al
c0002d66:	eb 05                	jmp    c0002d6d <cmp_lfn+0xc2>
c0002d68:	b8 01 00 00 00       	mov    eax,0x1
c0002d6d:	83 c4 1c             	add    esp,0x1c
c0002d70:	5b                   	pop    ebx
c0002d71:	5e                   	pop    esi
c0002d72:	5f                   	pop    edi
c0002d73:	5d                   	pop    ebp
c0002d74:	c3                   	ret    

c0002d75 <sync_fs>:
c0002d75:	56                   	push   esi
c0002d76:	53                   	push   ebx
c0002d77:	53                   	push   ebx
c0002d78:	89 c3                	mov    ebx,eax
c0002d7a:	e8 5c f5 ff ff       	call   c00022db <sync_window>
c0002d7f:	85 c0                	test   eax,eax
c0002d81:	0f 85 9a 00 00 00    	jne    c0002e21 <sync_fs+0xac>
c0002d87:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002d8a:	75 7b                	jne    c0002e07 <sync_fs+0x92>
c0002d8c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002d90:	75 75                	jne    c0002e07 <sync_fs+0x92>
c0002d92:	b9 00 02 00 00       	mov    ecx,0x200
c0002d97:	8d 73 34             	lea    esi,[ebx+0x34]
c0002d9a:	31 d2                	xor    edx,edx
c0002d9c:	89 f0                	mov    eax,esi
c0002d9e:	e8 75 f0 ff ff       	call   c0001e18 <mem_set>
c0002da3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002da9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dae:	e8 49 f0 ff ff       	call   c0001dfc <st_word>
c0002db3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002db8:	89 f0                	mov    eax,esi
c0002dba:	e8 41 f0 ff ff       	call   c0001e00 <st_dword>
c0002dbf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002dc5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dca:	e8 31 f0 ff ff       	call   c0001e00 <st_dword>
c0002dcf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002dd2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002dd8:	e8 23 f0 ff ff       	call   c0001e00 <st_dword>
c0002ddd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002de0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002de6:	e8 15 f0 ff ff       	call   c0001e00 <st_dword>
c0002deb:	6a 01                	push   0x1
c0002ded:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002df0:	40                   	inc    eax
c0002df1:	50                   	push   eax
c0002df2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002df5:	56                   	push   esi
c0002df6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002dfa:	50                   	push   eax
c0002dfb:	e8 a2 ef ff ff       	call   c0001da2 <disk_write>
c0002e00:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e04:	83 c4 10             	add    esp,0x10
c0002e07:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e0b:	51                   	push   ecx
c0002e0c:	6a 00                	push   0x0
c0002e0e:	6a 00                	push   0x0
c0002e10:	50                   	push   eax
c0002e11:	e8 a2 ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e16:	83 c4 10             	add    esp,0x10
c0002e19:	85 c0                	test   eax,eax
c0002e1b:	0f 95 c0             	setne  al
c0002e1e:	0f b6 c0             	movzx  eax,al
c0002e21:	5a                   	pop    edx
c0002e22:	5b                   	pop    ebx
c0002e23:	5e                   	pop    esi
c0002e24:	c3                   	ret    

c0002e25 <create_partition>:
c0002e25:	55                   	push   ebp
c0002e26:	0f b6 c0             	movzx  eax,al
c0002e29:	57                   	push   edi
c0002e2a:	56                   	push   esi
c0002e2b:	53                   	push   ebx
c0002e2c:	83 ec 40             	sub    esp,0x40
c0002e2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e33:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e37:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e3b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e3f:	50                   	push   eax
c0002e40:	6a 01                	push   0x1
c0002e42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e46:	e8 6d ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e4b:	83 c4 10             	add    esp,0x10
c0002e4e:	85 c0                	test   eax,eax
c0002e50:	0f 85 6a 01 00 00    	jne    c0002fc0 <create_partition+0x19b>
c0002e56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002e5a:	b9 05 00 00 00       	mov    ecx,0x5
c0002e5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002e63:	be 08 00 00 00       	mov    esi,0x8
c0002e68:	89 f0                	mov    eax,esi
c0002e6a:	31 d2                	xor    edx,edx
c0002e6c:	0f b6 d8             	movzx  ebx,al
c0002e6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e73:	f7 f3                	div    ebx
c0002e75:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002e7a:	76 0a                	jbe    c0002e86 <create_partition+0x61>
c0002e7c:	d1 e6                	shl    esi,1
c0002e7e:	49                   	dec    ecx
c0002e7f:	75 e7                	jne    c0002e68 <create_partition+0x43>
c0002e81:	be ff ff ff ff       	mov    esi,0xffffffff
c0002e86:	b9 00 02 00 00       	mov    ecx,0x200
c0002e8b:	31 d2                	xor    edx,edx
c0002e8d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002e91:	e8 82 ef ff ff       	call   c0001e18 <mem_set>
c0002e96:	b9 64 00 00 00       	mov    ecx,0x64
c0002e9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ea9:	f7 f1                	div    ecx
c0002eab:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002eb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002ebe:	89 f0                	mov    eax,esi
c0002ec0:	0f b6 c0             	movzx  eax,al
c0002ec3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ec7:	85 c9                	test   ecx,ecx
c0002ec9:	75 34                	jne    c0002eff <create_partition+0xda>
c0002ecb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ecf:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ed4:	05 fe 01 00 00       	add    eax,0x1fe
c0002ed9:	e8 1e ef ff ff       	call   c0001dfc <st_word>
c0002ede:	6a 01                	push   0x1
c0002ee0:	6a 00                	push   0x0
c0002ee2:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002ee6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002eea:	e8 b3 ee ff ff       	call   c0001da2 <disk_write>
c0002eef:	83 c4 10             	add    esp,0x10
c0002ef2:	85 c0                	test   eax,eax
c0002ef4:	0f 95 c0             	setne  al
c0002ef7:	0f b6 c0             	movzx  eax,al
c0002efa:	e9 c6 00 00 00       	jmp    c0002fc5 <create_partition+0x1a0>
c0002eff:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002f03:	76 c6                	jbe    c0002ecb <create_partition+0xa6>
c0002f05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f09:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f0d:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f10:	83 fe 64             	cmp    esi,0x64
c0002f13:	77 0d                	ja     c0002f22 <create_partition+0xfd>
c0002f15:	74 07                	je     c0002f1e <create_partition+0xf9>
c0002f17:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f1c:	eb 04                	jmp    c0002f22 <create_partition+0xfd>
c0002f1e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f22:	31 c0                	xor    eax,eax
c0002f24:	89 f2                	mov    edx,esi
c0002f26:	01 ca                	add    edx,ecx
c0002f28:	0f 92 c0             	setb   al
c0002f2b:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002f2f:	77 04                	ja     c0002f35 <create_partition+0x110>
c0002f31:	85 c0                	test   eax,eax
c0002f33:	74 08                	je     c0002f3d <create_partition+0x118>
c0002f35:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f39:	29 ce                	sub    esi,ecx
c0002f3b:	eb 04                	jmp    c0002f41 <create_partition+0x11c>
c0002f3d:	85 f6                	test   esi,esi
c0002f3f:	74 8a                	je     c0002ecb <create_partition+0xa6>
c0002f41:	89 ca                	mov    edx,ecx
c0002f43:	89 d8                	mov    eax,ebx
c0002f45:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f4a:	e8 b1 ee ff ff       	call   c0001e00 <st_dword>
c0002f4f:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f52:	89 f2                	mov    edx,esi
c0002f54:	83 c3 10             	add    ebx,0x10
c0002f57:	e8 a4 ee ff ff       	call   c0001e00 <st_dword>
c0002f5c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f60:	31 d2                	xor    edx,edx
c0002f62:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f65:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f69:	89 c8                	mov    eax,ecx
c0002f6b:	01 f1                	add    ecx,esi
c0002f6d:	f7 f7                	div    edi
c0002f6f:	89 d5                	mov    ebp,edx
c0002f71:	31 d2                	xor    edx,edx
c0002f73:	45                   	inc    ebp
c0002f74:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f78:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f7b:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f7e:	89 c2                	mov    edx,eax
c0002f80:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f83:	c1 ea 02             	shr    edx,0x2
c0002f86:	83 e2 c0             	and    edx,0xffffffc0
c0002f89:	09 ea                	or     edx,ebp
c0002f8b:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f8e:	31 d2                	xor    edx,edx
c0002f90:	f7 f7                	div    edi
c0002f92:	89 d6                	mov    esi,edx
c0002f94:	31 d2                	xor    edx,edx
c0002f96:	46                   	inc    esi
c0002f97:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f9b:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002f9e:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002fa1:	89 c7                	mov    edi,eax
c0002fa3:	c1 ef 02             	shr    edi,0x2
c0002fa6:	83 e7 c0             	and    edi,0xffffffc0
c0002fa9:	09 fe                	or     esi,edi
c0002fab:	89 f2                	mov    edx,esi
c0002fad:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fb0:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c0002fb5:	0f 85 0c ff ff ff    	jne    c0002ec7 <create_partition+0xa2>
c0002fbb:	e9 0b ff ff ff       	jmp    c0002ecb <create_partition+0xa6>
c0002fc0:	b8 01 00 00 00       	mov    eax,0x1
c0002fc5:	83 c4 3c             	add    esp,0x3c
c0002fc8:	5b                   	pop    ebx
c0002fc9:	5e                   	pop    esi
c0002fca:	5f                   	pop    edi
c0002fcb:	5d                   	pop    ebp
c0002fcc:	c3                   	ret    

c0002fcd <get_fileinfo>:
c0002fcd:	55                   	push   ebp
c0002fce:	57                   	push   edi
c0002fcf:	56                   	push   esi
c0002fd0:	53                   	push   ebx
c0002fd1:	83 ec 1c             	sub    esp,0x1c
c0002fd4:	8b 30                	mov    esi,DWORD PTR [eax]
c0002fd6:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002fda:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002fde:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002fe2:	0f 84 d3 01 00 00    	je     c00031bb <get_fileinfo+0x1ee>
c0002fe8:	89 d3                	mov    ebx,edx
c0002fea:	89 c6                	mov    esi,eax
c0002fec:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002ff0:	74 72                	je     c0003064 <get_fileinfo+0x97>
c0002ff2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ffa:	31 ed                	xor    ebp,ebp
c0002ffc:	31 ff                	xor    edi,edi
c0002ffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003002:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0003006:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003009:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c000300d:	89 c2                	mov    edx,eax
c000300f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003013:	85 c0                	test   eax,eax
c0003015:	74 41                	je     c0003058 <get_fileinfo+0x8b>
c0003017:	0f b7 c5             	movzx  eax,bp
c000301a:	85 c0                	test   eax,eax
c000301c:	75 0d                	jne    c000302b <get_fileinfo+0x5e>
c000301e:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003024:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003029:	76 22                	jbe    c000304d <get_fileinfo+0x80>
c000302b:	c1 e0 10             	shl    eax,0x10
c000302e:	b9 ff 00 00 00       	mov    ecx,0xff
c0003033:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003037:	29 f9                	sub    ecx,edi
c0003039:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c000303d:	e8 f3 ee ff ff       	call   c0001f35 <put_utf>
c0003042:	0f b6 c0             	movzx  eax,al
c0003045:	85 c0                	test   eax,eax
c0003047:	74 0d                	je     c0003056 <get_fileinfo+0x89>
c0003049:	01 c7                	add    edi,eax
c000304b:	31 d2                	xor    edx,edx
c000304d:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c0003052:	89 d5                	mov    ebp,edx
c0003054:	eb a8                	jmp    c0002ffe <get_fileinfo+0x31>
c0003056:	31 ff                	xor    edi,edi
c0003058:	66 85 ed             	test   bp,bp
c000305b:	74 02                	je     c000305f <get_fileinfo+0x92>
c000305d:	31 ff                	xor    edi,edi
c000305f:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003064:	31 ff                	xor    edi,edi
c0003066:	31 c9                	xor    ecx,ecx
c0003068:	83 f9 0a             	cmp    ecx,0xa
c000306b:	0f 87 ac 00 00 00    	ja     c000311d <get_fileinfo+0x150>
c0003071:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003074:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003077:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000307b:	89 c2                	mov    edx,eax
c000307d:	83 f8 20             	cmp    eax,0x20
c0003080:	0f 84 90 00 00 00    	je     c0003116 <get_fileinfo+0x149>
c0003086:	83 f8 05             	cmp    eax,0x5
c0003089:	75 05                	jne    c0003090 <get_fileinfo+0xc3>
c000308b:	ba e5 00 00 00       	mov    edx,0xe5
c0003090:	83 ff 0b             	cmp    edi,0xb
c0003093:	77 0b                	ja     c00030a0 <get_fileinfo+0xd3>
c0003095:	83 fd 09             	cmp    ebp,0x9
c0003098:	75 06                	jne    c00030a0 <get_fileinfo+0xd3>
c000309a:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c000309f:	47                   	inc    edi
c00030a0:	0f b7 c2             	movzx  eax,dx
c00030a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030a7:	e8 ab ed ff ff       	call   c0001e57 <dbc_1st>
c00030ac:	85 c0                	test   eax,eax
c00030ae:	74 2f                	je     c00030df <get_fileinfo+0x112>
c00030b0:	83 fd 08             	cmp    ebp,0x8
c00030b3:	74 2a                	je     c00030df <get_fileinfo+0x112>
c00030b5:	83 fd 0b             	cmp    ebp,0xb
c00030b8:	74 25                	je     c00030df <get_fileinfo+0x112>
c00030ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bd:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030c1:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00030c5:	e8 90 ed ff ff       	call   c0001e5a <dbc_2nd>
c00030ca:	85 c0                	test   eax,eax
c00030cc:	74 11                	je     c00030df <get_fileinfo+0x112>
c00030ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00030d2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00030d7:	c1 e0 08             	shl    eax,0x8
c00030da:	8d 69 02             	lea    ebp,[ecx+0x2]
c00030dd:	09 c2                	or     edx,eax
c00030df:	0f b7 d2             	movzx  edx,dx
c00030e2:	50                   	push   eax
c00030e3:	50                   	push   eax
c00030e4:	68 b5 01 00 00       	push   0x1b5
c00030e9:	52                   	push   edx
c00030ea:	e8 01 2c 00 00       	call   c0005cf0 <ff_oem2uni>
c00030ef:	83 c4 10             	add    esp,0x10
c00030f2:	0f b7 c0             	movzx  eax,ax
c00030f5:	85 c0                	test   eax,eax
c00030f7:	75 04                	jne    c00030fd <get_fileinfo+0x130>
c00030f9:	31 ff                	xor    edi,edi
c00030fb:	eb 20                	jmp    c000311d <get_fileinfo+0x150>
c00030fd:	b9 0c 00 00 00       	mov    ecx,0xc
c0003102:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003106:	29 f9                	sub    ecx,edi
c0003108:	e8 28 ee ff ff       	call   c0001f35 <put_utf>
c000310d:	0f b6 c0             	movzx  eax,al
c0003110:	85 c0                	test   eax,eax
c0003112:	74 e5                	je     c00030f9 <get_fileinfo+0x12c>
c0003114:	01 c7                	add    edi,eax
c0003116:	89 e9                	mov    ecx,ebp
c0003118:	e9 4b ff ff ff       	jmp    c0003068 <get_fileinfo+0x9b>
c000311d:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003122:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003126:	75 5f                	jne    c0003187 <get_fileinfo+0x1ba>
c0003128:	85 ff                	test   edi,edi
c000312a:	75 0b                	jne    c0003137 <get_fileinfo+0x16a>
c000312c:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003130:	ba 01 00 00 00       	mov    edx,0x1
c0003135:	eb 3e                	jmp    c0003175 <get_fileinfo+0x1a8>
c0003137:	bf 08 00 00 00       	mov    edi,0x8
c000313c:	31 d2                	xor    edx,edx
c000313e:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003144:	84 c0                	test   al,al
c0003146:	74 2d                	je     c0003175 <get_fileinfo+0x1a8>
c0003148:	66 83 f8 2e          	cmp    ax,0x2e
c000314c:	74 1b                	je     c0003169 <get_fileinfo+0x19c>
c000314e:	8d 48 bf             	lea    ecx,[eax-0x41]
c0003151:	66 83 f9 19          	cmp    cx,0x19
c0003155:	77 17                	ja     c000316e <get_fileinfo+0x1a1>
c0003157:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000315a:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000315d:	21 f9                	and    ecx,edi
c000315f:	80 e1 18             	and    cl,0x18
c0003162:	74 0a                	je     c000316e <get_fileinfo+0x1a1>
c0003164:	83 c0 20             	add    eax,0x20
c0003167:	eb 05                	jmp    c000316e <get_fileinfo+0x1a1>
c0003169:	bf 10 00 00 00       	mov    edi,0x10
c000316e:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003172:	42                   	inc    edx
c0003173:	eb c9                	jmp    c000313e <get_fileinfo+0x171>
c0003175:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c000317a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000317d:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003181:	75 04                	jne    c0003187 <get_fileinfo+0x1ba>
c0003183:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003187:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000318a:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000318d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003190:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003193:	83 c0 1c             	add    eax,0x1c
c0003196:	e8 49 ec ff ff       	call   c0001de4 <ld_dword>
c000319b:	89 03                	mov    DWORD PTR [ebx],eax
c000319d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031a0:	83 c0 16             	add    eax,0x16
c00031a3:	e8 2f ec ff ff       	call   c0001dd7 <ld_word>
c00031a8:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031ac:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031af:	83 c0 18             	add    eax,0x18
c00031b2:	e8 20 ec ff ff       	call   c0001dd7 <ld_word>
c00031b7:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031bb:	83 c4 1c             	add    esp,0x1c
c00031be:	5b                   	pop    ebx
c00031bf:	5e                   	pop    esi
c00031c0:	5f                   	pop    edi
c00031c1:	5d                   	pop    ebp
c00031c2:	c3                   	ret    

c00031c3 <ld_clust.isra.0>:
c00031c3:	56                   	push   esi
c00031c4:	89 c6                	mov    esi,eax
c00031c6:	53                   	push   ebx
c00031c7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00031ca:	89 d3                	mov    ebx,edx
c00031cc:	e8 06 ec ff ff       	call   c0001dd7 <ld_word>
c00031d1:	0f b7 c8             	movzx  ecx,ax
c00031d4:	89 f0                	mov    eax,esi
c00031d6:	3c 03                	cmp    al,0x3
c00031d8:	75 0d                	jne    c00031e7 <ld_clust.isra.0+0x24>
c00031da:	8d 43 14             	lea    eax,[ebx+0x14]
c00031dd:	e8 f5 eb ff ff       	call   c0001dd7 <ld_word>
c00031e2:	c1 e0 10             	shl    eax,0x10
c00031e5:	09 c1                	or     ecx,eax
c00031e7:	89 c8                	mov    eax,ecx
c00031e9:	5b                   	pop    ebx
c00031ea:	5e                   	pop    esi
c00031eb:	c3                   	ret    

c00031ec <st_clust.isra.1>:
c00031ec:	56                   	push   esi
c00031ed:	89 c6                	mov    esi,eax
c00031ef:	53                   	push   ebx
c00031f0:	89 d3                	mov    ebx,edx
c00031f2:	0f b7 d1             	movzx  edx,cx
c00031f5:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00031f8:	e8 ff eb ff ff       	call   c0001dfc <st_word>
c00031fd:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0003200:	75 0f                	jne    c0003211 <st_clust.isra.1+0x25>
c0003202:	c1 e9 10             	shr    ecx,0x10
c0003205:	8d 43 14             	lea    eax,[ebx+0x14]
c0003208:	89 ca                	mov    edx,ecx
c000320a:	5b                   	pop    ebx
c000320b:	5e                   	pop    esi
c000320c:	e9 eb eb ff ff       	jmp    c0001dfc <st_word>
c0003211:	5b                   	pop    ebx
c0003212:	5e                   	pop    esi
c0003213:	c3                   	ret    

c0003214 <get_fat.isra.2>:
c0003214:	b9 01 00 00 00       	mov    ecx,0x1
c0003219:	83 fa 01             	cmp    edx,0x1
c000321c:	0f 86 f3 00 00 00    	jbe    c0003315 <get_fat.isra.2+0x101>
c0003222:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003225:	0f 83 ea 00 00 00    	jae    c0003315 <get_fat.isra.2+0x101>
c000322b:	55                   	push   ebp
c000322c:	57                   	push   edi
c000322d:	89 c7                	mov    edi,eax
c000322f:	56                   	push   esi
c0003230:	89 d6                	mov    esi,edx
c0003232:	53                   	push   ebx
c0003233:	83 ec 0c             	sub    esp,0xc
c0003236:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003239:	83 f8 02             	cmp    eax,0x2
c000323c:	74 78                	je     c00032b6 <get_fat.isra.2+0xa2>
c000323e:	83 f8 03             	cmp    eax,0x3
c0003241:	0f 84 96 00 00 00    	je     c00032dd <get_fat.isra.2+0xc9>
c0003247:	48                   	dec    eax
c0003248:	0f 85 bd 00 00 00    	jne    c000330b <get_fat.isra.2+0xf7>
c000324e:	89 d3                	mov    ebx,edx
c0003250:	89 f8                	mov    eax,edi
c0003252:	d1 eb                	shr    ebx,1
c0003254:	01 d3                	add    ebx,edx
c0003256:	89 da                	mov    edx,ebx
c0003258:	c1 ea 09             	shr    edx,0x9
c000325b:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000325e:	e8 db f0 ff ff       	call   c000233e <move_window>
c0003263:	85 c0                	test   eax,eax
c0003265:	74 08                	je     c000326f <get_fat.isra.2+0x5b>
c0003267:	83 c9 ff             	or     ecx,0xffffffff
c000326a:	e9 9c 00 00 00       	jmp    c000330b <get_fat.isra.2+0xf7>
c000326f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003272:	89 f8                	mov    eax,edi
c0003274:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000327a:	89 ea                	mov    edx,ebp
c000327c:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003280:	c1 ea 09             	shr    edx,0x9
c0003283:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003286:	e8 b3 f0 ff ff       	call   c000233e <move_window>
c000328b:	85 c0                	test   eax,eax
c000328d:	75 d8                	jne    c0003267 <get_fat.isra.2+0x53>
c000328f:	0f b6 c3             	movzx  eax,bl
c0003292:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003298:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c000329d:	c1 e3 08             	shl    ebx,0x8
c00032a0:	09 c3                	or     ebx,eax
c00032a2:	89 d9                	mov    ecx,ebx
c00032a4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032aa:	83 e6 01             	and    esi,0x1
c00032ad:	74 5c                	je     c000330b <get_fat.isra.2+0xf7>
c00032af:	89 d9                	mov    ecx,ebx
c00032b1:	c1 e9 04             	shr    ecx,0x4
c00032b4:	eb 55                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032b6:	c1 ea 08             	shr    edx,0x8
c00032b9:	89 f8                	mov    eax,edi
c00032bb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032be:	e8 7b f0 ff ff       	call   c000233e <move_window>
c00032c3:	85 c0                	test   eax,eax
c00032c5:	75 a0                	jne    c0003267 <get_fat.isra.2+0x53>
c00032c7:	01 f6                	add    esi,esi
c00032c9:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00032cf:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032d3:	e8 ff ea ff ff       	call   c0001dd7 <ld_word>
c00032d8:	0f b7 c8             	movzx  ecx,ax
c00032db:	eb 2e                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032dd:	c1 ea 07             	shr    edx,0x7
c00032e0:	89 f8                	mov    eax,edi
c00032e2:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032e5:	e8 54 f0 ff ff       	call   c000233e <move_window>
c00032ea:	85 c0                	test   eax,eax
c00032ec:	0f 85 75 ff ff ff    	jne    c0003267 <get_fat.isra.2+0x53>
c00032f2:	c1 e6 02             	shl    esi,0x2
c00032f5:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00032fb:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032ff:	e8 e0 ea ff ff       	call   c0001de4 <ld_dword>
c0003304:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003309:	89 c1                	mov    ecx,eax
c000330b:	83 c4 0c             	add    esp,0xc
c000330e:	89 c8                	mov    eax,ecx
c0003310:	5b                   	pop    ebx
c0003311:	5e                   	pop    esi
c0003312:	5f                   	pop    edi
c0003313:	5d                   	pop    ebp
c0003314:	c3                   	ret    
c0003315:	89 c8                	mov    eax,ecx
c0003317:	c3                   	ret    

c0003318 <dir_sdi>:
c0003318:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000331e:	0f 87 b6 00 00 00    	ja     c00033da <dir_sdi+0xc2>
c0003324:	55                   	push   ebp
c0003325:	57                   	push   edi
c0003326:	56                   	push   esi
c0003327:	53                   	push   ebx
c0003328:	89 d3                	mov    ebx,edx
c000332a:	83 ec 1c             	sub    esp,0x1c
c000332d:	f6 c2 1f             	test   dl,0x1f
c0003330:	74 0a                	je     c000333c <dir_sdi+0x24>
c0003332:	b8 02 00 00 00       	mov    eax,0x2
c0003337:	e9 96 00 00 00       	jmp    c00033d2 <dir_sdi+0xba>
c000333c:	89 c6                	mov    esi,eax
c000333e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003340:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003343:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003346:	85 c9                	test   ecx,ecx
c0003348:	75 23                	jne    c000336d <dir_sdi+0x55>
c000334a:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000334d:	76 07                	jbe    c0003356 <dir_sdi+0x3e>
c000334f:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003352:	85 c0                	test   eax,eax
c0003354:	75 15                	jne    c000336b <dir_sdi+0x53>
c0003356:	89 da                	mov    edx,ebx
c0003358:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000335c:	c1 ea 05             	shr    edx,0x5
c000335f:	39 c2                	cmp    edx,eax
c0003361:	73 cf                	jae    c0003332 <dir_sdi+0x1a>
c0003363:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003366:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003369:	eb 3d                	jmp    c00033a8 <dir_sdi+0x90>
c000336b:	89 c1                	mov    ecx,eax
c000336d:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003371:	c1 e5 09             	shl    ebp,0x9
c0003374:	89 ca                	mov    edx,ecx
c0003376:	39 eb                	cmp    ebx,ebp
c0003378:	72 1c                	jb     c0003396 <dir_sdi+0x7e>
c000337a:	8b 06                	mov    eax,DWORD PTR [esi]
c000337c:	e8 93 fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003381:	89 c1                	mov    ecx,eax
c0003383:	83 f8 ff             	cmp    eax,0xffffffff
c0003386:	74 45                	je     c00033cd <dir_sdi+0xb5>
c0003388:	83 f8 01             	cmp    eax,0x1
c000338b:	76 a5                	jbe    c0003332 <dir_sdi+0x1a>
c000338d:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003390:	76 a0                	jbe    c0003332 <dir_sdi+0x1a>
c0003392:	29 eb                	sub    ebx,ebp
c0003394:	eb de                	jmp    c0003374 <dir_sdi+0x5c>
c0003396:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000339a:	89 f8                	mov    eax,edi
c000339c:	e8 8d ec ff ff       	call   c000202e <clst2sect>
c00033a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033a5:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033a8:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ab:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00033ae:	85 d2                	test   edx,edx
c00033b0:	74 80                	je     c0003332 <dir_sdi+0x1a>
c00033b2:	89 d8                	mov    eax,ebx
c00033b4:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033ba:	c1 e8 09             	shr    eax,0x9
c00033bd:	01 d0                	add    eax,edx
c00033bf:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033c2:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00033c6:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00033c9:	31 c0                	xor    eax,eax
c00033cb:	eb 05                	jmp    c00033d2 <dir_sdi+0xba>
c00033cd:	b8 01 00 00 00       	mov    eax,0x1
c00033d2:	83 c4 1c             	add    esp,0x1c
c00033d5:	5b                   	pop    ebx
c00033d6:	5e                   	pop    esi
c00033d7:	5f                   	pop    edi
c00033d8:	5d                   	pop    ebp
c00033d9:	c3                   	ret    
c00033da:	b8 02 00 00 00       	mov    eax,0x2
c00033df:	c3                   	ret    

c00033e0 <create_chain>:
c00033e0:	55                   	push   ebp
c00033e1:	89 c5                	mov    ebp,eax
c00033e3:	57                   	push   edi
c00033e4:	89 d7                	mov    edi,edx
c00033e6:	56                   	push   esi
c00033e7:	53                   	push   ebx
c00033e8:	83 ec 1c             	sub    esp,0x1c
c00033eb:	85 d2                	test   edx,edx
c00033ed:	8b 30                	mov    esi,DWORD PTR [eax]
c00033ef:	75 0e                	jne    c00033ff <create_chain+0x1f>
c00033f1:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00033f4:	85 c9                	test   ecx,ecx
c00033f6:	74 34                	je     c000342c <create_chain+0x4c>
c00033f8:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00033fb:	77 34                	ja     c0003431 <create_chain+0x51>
c00033fd:	eb 2d                	jmp    c000342c <create_chain+0x4c>
c00033ff:	89 f0                	mov    eax,esi
c0003401:	e8 0e fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003406:	89 c3                	mov    ebx,eax
c0003408:	83 f8 01             	cmp    eax,0x1
c000340b:	77 0a                	ja     c0003417 <create_chain+0x37>
c000340d:	bb 01 00 00 00       	mov    ebx,0x1
c0003412:	e9 fe 00 00 00       	jmp    c0003515 <create_chain+0x135>
c0003417:	83 f8 ff             	cmp    eax,0xffffffff
c000341a:	0f 84 f2 00 00 00    	je     c0003512 <create_chain+0x132>
c0003420:	89 f9                	mov    ecx,edi
c0003422:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003425:	76 0a                	jbe    c0003431 <create_chain+0x51>
c0003427:	e9 e9 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000342c:	b9 01 00 00 00       	mov    ecx,0x1
c0003431:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003435:	75 07                	jne    c000343e <create_chain+0x5e>
c0003437:	31 db                	xor    ebx,ebx
c0003439:	e9 d7 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000343e:	39 f9                	cmp    ecx,edi
c0003440:	75 46                	jne    c0003488 <create_chain+0xa8>
c0003442:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003445:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003448:	77 05                	ja     c000344f <create_chain+0x6f>
c000344a:	bb 02 00 00 00       	mov    ebx,0x2
c000344f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003453:	89 da                	mov    edx,ebx
c0003455:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003458:	e8 b7 fd ff ff       	call   c0003214 <get_fat.isra.2>
c000345d:	83 f8 01             	cmp    eax,0x1
c0003460:	74 ab                	je     c000340d <create_chain+0x2d>
c0003462:	83 f8 ff             	cmp    eax,0xffffffff
c0003465:	0f 84 a7 00 00 00    	je     c0003512 <create_chain+0x132>
c000346b:	85 c0                	test   eax,eax
c000346d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003471:	74 11                	je     c0003484 <create_chain+0xa4>
c0003473:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003476:	83 f8 01             	cmp    eax,0x1
c0003479:	76 0d                	jbe    c0003488 <create_chain+0xa8>
c000347b:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c000347e:	73 08                	jae    c0003488 <create_chain+0xa8>
c0003480:	89 c1                	mov    ecx,eax
c0003482:	eb 04                	jmp    c0003488 <create_chain+0xa8>
c0003484:	85 db                	test   ebx,ebx
c0003486:	75 3d                	jne    c00034c5 <create_chain+0xe5>
c0003488:	89 cb                	mov    ebx,ecx
c000348a:	43                   	inc    ebx
c000348b:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c000348e:	77 0a                	ja     c000349a <create_chain+0xba>
c0003490:	83 f9 01             	cmp    ecx,0x1
c0003493:	76 a2                	jbe    c0003437 <create_chain+0x57>
c0003495:	bb 02 00 00 00       	mov    ebx,0x2
c000349a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000349e:	89 da                	mov    edx,ebx
c00034a0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034a3:	e8 6c fd ff ff       	call   c0003214 <get_fat.isra.2>
c00034a8:	85 c0                	test   eax,eax
c00034aa:	74 19                	je     c00034c5 <create_chain+0xe5>
c00034ac:	83 f8 01             	cmp    eax,0x1
c00034af:	0f 84 58 ff ff ff    	je     c000340d <create_chain+0x2d>
c00034b5:	40                   	inc    eax
c00034b6:	74 5a                	je     c0003512 <create_chain+0x132>
c00034b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034bc:	39 cb                	cmp    ebx,ecx
c00034be:	75 ca                	jne    c000348a <create_chain+0xaa>
c00034c0:	e9 72 ff ff ff       	jmp    c0003437 <create_chain+0x57>
c00034c5:	83 c9 ff             	or     ecx,0xffffffff
c00034c8:	89 da                	mov    edx,ebx
c00034ca:	89 f0                	mov    eax,esi
c00034cc:	e8 b1 f2 ff ff       	call   c0002782 <put_fat>
c00034d1:	85 c0                	test   eax,eax
c00034d3:	75 36                	jne    c000350b <create_chain+0x12b>
c00034d5:	85 ff                	test   edi,edi
c00034d7:	75 16                	jne    c00034ef <create_chain+0x10f>
c00034d9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00034dc:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00034df:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00034e2:	8d 57 fe             	lea    edx,[edi-0x2]
c00034e5:	39 d0                	cmp    eax,edx
c00034e7:	77 17                	ja     c0003500 <create_chain+0x120>
c00034e9:	48                   	dec    eax
c00034ea:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00034ed:	eb 11                	jmp    c0003500 <create_chain+0x120>
c00034ef:	89 d9                	mov    ecx,ebx
c00034f1:	89 fa                	mov    edx,edi
c00034f3:	89 f0                	mov    eax,esi
c00034f5:	e8 88 f2 ff ff       	call   c0002782 <put_fat>
c00034fa:	85 c0                	test   eax,eax
c00034fc:	74 db                	je     c00034d9 <create_chain+0xf9>
c00034fe:	eb 0b                	jmp    c000350b <create_chain+0x12b>
c0003500:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c0003503:	83 c8 01             	or     eax,0x1
c0003506:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0003509:	eb 0a                	jmp    c0003515 <create_chain+0x135>
c000350b:	48                   	dec    eax
c000350c:	0f 85 fb fe ff ff    	jne    c000340d <create_chain+0x2d>
c0003512:	83 cb ff             	or     ebx,0xffffffff
c0003515:	83 c4 1c             	add    esp,0x1c
c0003518:	89 d8                	mov    eax,ebx
c000351a:	5b                   	pop    ebx
c000351b:	5e                   	pop    esi
c000351c:	5f                   	pop    edi
c000351d:	5d                   	pop    ebp
c000351e:	c3                   	ret    

c000351f <remove_chain>:
c000351f:	55                   	push   ebp
c0003520:	57                   	push   edi
c0003521:	56                   	push   esi
c0003522:	89 d6                	mov    esi,edx
c0003524:	53                   	push   ebx
c0003525:	83 ec 0c             	sub    esp,0xc
c0003528:	83 fa 01             	cmp    edx,0x1
c000352b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000352d:	76 6a                	jbe    c0003599 <remove_chain+0x7a>
c000352f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003532:	76 65                	jbe    c0003599 <remove_chain+0x7a>
c0003534:	89 c5                	mov    ebp,eax
c0003536:	89 ca                	mov    edx,ecx
c0003538:	85 c9                	test   ecx,ecx
c000353a:	74 0e                	je     c000354a <remove_chain+0x2b>
c000353c:	83 c9 ff             	or     ecx,0xffffffff
c000353f:	89 d8                	mov    eax,ebx
c0003541:	e8 3c f2 ff ff       	call   c0002782 <put_fat>
c0003546:	85 c0                	test   eax,eax
c0003548:	75 5b                	jne    c00035a5 <remove_chain+0x86>
c000354a:	89 f2                	mov    edx,esi
c000354c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000354f:	e8 c0 fc ff ff       	call   c0003214 <get_fat.isra.2>
c0003554:	89 c7                	mov    edi,eax
c0003556:	85 c0                	test   eax,eax
c0003558:	75 04                	jne    c000355e <remove_chain+0x3f>
c000355a:	31 c0                	xor    eax,eax
c000355c:	eb 47                	jmp    c00035a5 <remove_chain+0x86>
c000355e:	83 f8 01             	cmp    eax,0x1
c0003561:	74 36                	je     c0003599 <remove_chain+0x7a>
c0003563:	83 f8 ff             	cmp    eax,0xffffffff
c0003566:	74 38                	je     c00035a0 <remove_chain+0x81>
c0003568:	31 c9                	xor    ecx,ecx
c000356a:	89 f2                	mov    edx,esi
c000356c:	89 d8                	mov    eax,ebx
c000356e:	e8 0f f2 ff ff       	call   c0002782 <put_fat>
c0003573:	85 c0                	test   eax,eax
c0003575:	75 2e                	jne    c00035a5 <remove_chain+0x86>
c0003577:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000357a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000357d:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003580:	39 c8                	cmp    eax,ecx
c0003582:	73 0d                	jae    c0003591 <remove_chain+0x72>
c0003584:	40                   	inc    eax
c0003585:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003588:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000358b:	83 c8 01             	or     eax,0x1
c000358e:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003591:	89 fe                	mov    esi,edi
c0003593:	39 fa                	cmp    edx,edi
c0003595:	77 b3                	ja     c000354a <remove_chain+0x2b>
c0003597:	eb c1                	jmp    c000355a <remove_chain+0x3b>
c0003599:	b8 02 00 00 00       	mov    eax,0x2
c000359e:	eb 05                	jmp    c00035a5 <remove_chain+0x86>
c00035a0:	b8 01 00 00 00       	mov    eax,0x1
c00035a5:	83 c4 0c             	add    esp,0xc
c00035a8:	5b                   	pop    ebx
c00035a9:	5e                   	pop    esi
c00035aa:	5f                   	pop    edi
c00035ab:	5d                   	pop    ebp
c00035ac:	c3                   	ret    

c00035ad <dir_next>:
c00035ad:	55                   	push   ebp
c00035ae:	57                   	push   edi
c00035af:	56                   	push   esi
c00035b0:	53                   	push   ebx
c00035b1:	83 ec 1c             	sub    esp,0x1c
c00035b4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035b7:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035b9:	83 c7 20             	add    edi,0x20
c00035bc:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035c2:	76 07                	jbe    c00035cb <dir_next+0x1e>
c00035c4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00035cb:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00035ce:	b9 04 00 00 00       	mov    ecx,0x4
c00035d3:	85 f6                	test   esi,esi
c00035d5:	0f 84 cd 00 00 00    	je     c00036a8 <dir_next+0xfb>
c00035db:	89 c3                	mov    ebx,eax
c00035dd:	89 d1                	mov    ecx,edx
c00035df:	89 f8                	mov    eax,edi
c00035e1:	25 ff 01 00 00       	and    eax,0x1ff
c00035e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035ea:	0f 85 a8 00 00 00    	jne    c0003698 <dir_next+0xeb>
c00035f0:	46                   	inc    esi
c00035f1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00035f4:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00035f7:	85 d2                	test   edx,edx
c00035f9:	75 22                	jne    c000361d <dir_next+0x70>
c00035fb:	89 fa                	mov    edx,edi
c00035fd:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003601:	c1 ea 05             	shr    edx,0x5
c0003604:	39 c2                	cmp    edx,eax
c0003606:	0f 82 8c 00 00 00    	jb     c0003698 <dir_next+0xeb>
c000360c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003613:	b9 04 00 00 00       	mov    ecx,0x4
c0003618:	e9 8b 00 00 00       	jmp    c00036a8 <dir_next+0xfb>
c000361d:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003621:	89 fe                	mov    esi,edi
c0003623:	48                   	dec    eax
c0003624:	c1 ee 09             	shr    esi,0x9
c0003627:	85 f0                	test   eax,esi
c0003629:	75 6d                	jne    c0003698 <dir_next+0xeb>
c000362b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000362f:	89 e8                	mov    eax,ebp
c0003631:	e8 de fb ff ff       	call   c0003214 <get_fat.isra.2>
c0003636:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000363a:	89 c6                	mov    esi,eax
c000363c:	83 f8 01             	cmp    eax,0x1
c000363f:	77 07                	ja     c0003648 <dir_next+0x9b>
c0003641:	b9 02 00 00 00       	mov    ecx,0x2
c0003646:	eb 60                	jmp    c00036a8 <dir_next+0xfb>
c0003648:	83 f8 ff             	cmp    eax,0xffffffff
c000364b:	75 07                	jne    c0003654 <dir_next+0xa7>
c000364d:	b9 01 00 00 00       	mov    ecx,0x1
c0003652:	eb 54                	jmp    c00036a8 <dir_next+0xfb>
c0003654:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003657:	77 30                	ja     c0003689 <dir_next+0xdc>
c0003659:	85 c9                	test   ecx,ecx
c000365b:	74 af                	je     c000360c <dir_next+0x5f>
c000365d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003660:	89 d8                	mov    eax,ebx
c0003662:	e8 79 fd ff ff       	call   c00033e0 <create_chain>
c0003667:	b9 07 00 00 00       	mov    ecx,0x7
c000366c:	89 c6                	mov    esi,eax
c000366e:	85 c0                	test   eax,eax
c0003670:	74 36                	je     c00036a8 <dir_next+0xfb>
c0003672:	83 f8 01             	cmp    eax,0x1
c0003675:	74 ca                	je     c0003641 <dir_next+0x94>
c0003677:	83 f8 ff             	cmp    eax,0xffffffff
c000367a:	74 d1                	je     c000364d <dir_next+0xa0>
c000367c:	89 c2                	mov    edx,eax
c000367e:	89 e8                	mov    eax,ebp
c0003680:	e8 54 f2 ff ff       	call   c00028d9 <dir_clear>
c0003685:	85 c0                	test   eax,eax
c0003687:	75 c4                	jne    c000364d <dir_next+0xa0>
c0003689:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000368c:	89 f2                	mov    edx,esi
c000368e:	89 e8                	mov    eax,ebp
c0003690:	e8 99 e9 ff ff       	call   c000202e <clst2sect>
c0003695:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000369c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000369f:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036a3:	31 c9                	xor    ecx,ecx
c00036a5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036a8:	83 c4 1c             	add    esp,0x1c
c00036ab:	89 c8                	mov    eax,ecx
c00036ad:	5b                   	pop    ebx
c00036ae:	5e                   	pop    esi
c00036af:	5f                   	pop    edi
c00036b0:	5d                   	pop    ebp
c00036b1:	c3                   	ret    

c00036b2 <dir_alloc>:
c00036b2:	55                   	push   ebp
c00036b3:	89 c5                	mov    ebp,eax
c00036b5:	57                   	push   edi
c00036b6:	89 d7                	mov    edi,edx
c00036b8:	56                   	push   esi
c00036b9:	31 d2                	xor    edx,edx
c00036bb:	53                   	push   ebx
c00036bc:	83 ec 0c             	sub    esp,0xc
c00036bf:	8b 30                	mov    esi,DWORD PTR [eax]
c00036c1:	e8 52 fc ff ff       	call   c0003318 <dir_sdi>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 3b                	jne    c0003705 <dir_alloc+0x53>
c00036ca:	31 db                	xor    ebx,ebx
c00036cc:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00036cf:	89 f0                	mov    eax,esi
c00036d1:	e8 68 ec ff ff       	call   c000233e <move_window>
c00036d6:	85 c0                	test   eax,eax
c00036d8:	75 2b                	jne    c0003705 <dir_alloc+0x53>
c00036da:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00036dd:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00036e0:	85 d2                	test   edx,edx
c00036e2:	74 08                	je     c00036ec <dir_alloc+0x3a>
c00036e4:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00036ea:	75 07                	jne    c00036f3 <dir_alloc+0x41>
c00036ec:	43                   	inc    ebx
c00036ed:	39 fb                	cmp    ebx,edi
c00036ef:	75 04                	jne    c00036f5 <dir_alloc+0x43>
c00036f1:	eb 1c                	jmp    c000370f <dir_alloc+0x5d>
c00036f3:	31 db                	xor    ebx,ebx
c00036f5:	ba 01 00 00 00       	mov    edx,0x1
c00036fa:	89 e8                	mov    eax,ebp
c00036fc:	e8 ac fe ff ff       	call   c00035ad <dir_next>
c0003701:	85 c0                	test   eax,eax
c0003703:	74 c7                	je     c00036cc <dir_alloc+0x1a>
c0003705:	83 f8 04             	cmp    eax,0x4
c0003708:	75 05                	jne    c000370f <dir_alloc+0x5d>
c000370a:	b8 07 00 00 00       	mov    eax,0x7
c000370f:	83 c4 0c             	add    esp,0xc
c0003712:	5b                   	pop    ebx
c0003713:	5e                   	pop    esi
c0003714:	5f                   	pop    edi
c0003715:	5d                   	pop    ebp
c0003716:	c3                   	ret    

c0003717 <dir_read>:
c0003717:	55                   	push   ebp
c0003718:	57                   	push   edi
c0003719:	bf ff ff ff ff       	mov    edi,0xffffffff
c000371e:	56                   	push   esi
c000371f:	be 04 00 00 00       	mov    esi,0x4
c0003724:	53                   	push   ebx
c0003725:	89 c3                	mov    ebx,eax
c0003727:	83 ec 1c             	sub    esp,0x1c
c000372a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000372e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003730:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003735:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003738:	85 d2                	test   edx,edx
c000373a:	0f 84 e3 00 00 00    	je     c0003823 <dir_read+0x10c>
c0003740:	89 e8                	mov    eax,ebp
c0003742:	e8 f7 eb ff ff       	call   c000233e <move_window>
c0003747:	89 c6                	mov    esi,eax
c0003749:	85 c0                	test   eax,eax
c000374b:	0f 85 dd 00 00 00    	jne    c000382e <dir_read+0x117>
c0003751:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003754:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003757:	88 04 24             	mov    BYTE PTR [esp],al
c000375a:	85 c0                	test   eax,eax
c000375c:	0f 84 c7 00 00 00    	je     c0003829 <dir_read+0x112>
c0003762:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003765:	83 e1 3f             	and    ecx,0x3f
c0003768:	83 f8 2e             	cmp    eax,0x2e
c000376b:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000376e:	0f 84 95 00 00 00    	je     c0003809 <dir_read+0xf2>
c0003774:	3d e5 00 00 00       	cmp    eax,0xe5
c0003779:	0f 84 8a 00 00 00    	je     c0003809 <dir_read+0xf2>
c000377f:	0f b6 c9             	movzx  ecx,cl
c0003782:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003786:	83 e1 df             	and    ecx,0xffffffdf
c0003789:	83 f9 08             	cmp    ecx,0x8
c000378c:	0f 94 c1             	sete   cl
c000378f:	0f b6 c9             	movzx  ecx,cl
c0003792:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0003796:	75 71                	jne    c0003809 <dir_read+0xf2>
c0003798:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c000379d:	75 4a                	jne    c00037e9 <dir_read+0xd2>
c000379f:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037a3:	74 16                	je     c00037bb <dir_read+0xa4>
c00037a5:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037a8:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037af:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037b6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037b9:	eb 0e                	jmp    c00037c9 <dir_read+0xb2>
c00037bb:	89 f9                	mov    ecx,edi
c00037bd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c2:	0f b6 c9             	movzx  ecx,cl
c00037c5:	39 c1                	cmp    ecx,eax
c00037c7:	75 45                	jne    c000380e <dir_read+0xf7>
c00037c9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037cd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037d2:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00037d5:	75 37                	jne    c000380e <dir_read+0xf7>
c00037d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00037da:	e8 6c e8 ff ff       	call   c000204b <pick_lfn>
c00037df:	85 c0                	test   eax,eax
c00037e1:	74 2b                	je     c000380e <dir_read+0xf7>
c00037e3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00037e6:	4f                   	dec    edi
c00037e7:	eb 25                	jmp    c000380e <dir_read+0xf7>
c00037e9:	89 f8                	mov    eax,edi
c00037eb:	84 c0                	test   al,al
c00037ed:	75 11                	jne    c0003800 <dir_read+0xe9>
c00037ef:	89 d0                	mov    eax,edx
c00037f1:	e8 32 ea ff ff       	call   c0002228 <sum_sfn>
c00037f6:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00037fa:	75 04                	jne    c0003800 <dir_read+0xe9>
c00037fc:	31 f6                	xor    esi,esi
c00037fe:	eb 35                	jmp    c0003835 <dir_read+0x11e>
c0003800:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003807:	eb 2c                	jmp    c0003835 <dir_read+0x11e>
c0003809:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380e:	31 d2                	xor    edx,edx
c0003810:	89 d8                	mov    eax,ebx
c0003812:	e8 96 fd ff ff       	call   c00035ad <dir_next>
c0003817:	89 c6                	mov    esi,eax
c0003819:	85 c0                	test   eax,eax
c000381b:	0f 84 14 ff ff ff    	je     c0003735 <dir_read+0x1e>
c0003821:	eb 0b                	jmp    c000382e <dir_read+0x117>
c0003823:	85 f6                	test   esi,esi
c0003825:	74 d5                	je     c00037fc <dir_read+0xe5>
c0003827:	eb 05                	jmp    c000382e <dir_read+0x117>
c0003829:	be 04 00 00 00       	mov    esi,0x4
c000382e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003835:	83 c4 1c             	add    esp,0x1c
c0003838:	89 f0                	mov    eax,esi
c000383a:	5b                   	pop    ebx
c000383b:	5e                   	pop    esi
c000383c:	5f                   	pop    edi
c000383d:	5d                   	pop    ebp
c000383e:	c3                   	ret    

c000383f <dir_remove>:
c000383f:	57                   	push   edi
c0003840:	56                   	push   esi
c0003841:	53                   	push   ebx
c0003842:	89 c3                	mov    ebx,eax
c0003844:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003847:	8b 30                	mov    esi,DWORD PTR [eax]
c0003849:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000384c:	83 fa ff             	cmp    edx,0xffffffff
c000384f:	74 09                	je     c000385a <dir_remove+0x1b>
c0003851:	e8 c2 fa ff ff       	call   c0003318 <dir_sdi>
c0003856:	85 c0                	test   eax,eax
c0003858:	75 34                	jne    c000388e <dir_remove+0x4f>
c000385a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000385d:	89 f0                	mov    eax,esi
c000385f:	e8 da ea ff ff       	call   c000233e <move_window>
c0003864:	85 c0                	test   eax,eax
c0003866:	75 1c                	jne    c0003884 <dir_remove+0x45>
c0003868:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000386b:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000386e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003872:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003875:	73 17                	jae    c000388e <dir_remove+0x4f>
c0003877:	31 d2                	xor    edx,edx
c0003879:	89 d8                	mov    eax,ebx
c000387b:	e8 2d fd ff ff       	call   c00035ad <dir_next>
c0003880:	85 c0                	test   eax,eax
c0003882:	74 d6                	je     c000385a <dir_remove+0x1b>
c0003884:	83 f8 04             	cmp    eax,0x4
c0003887:	75 05                	jne    c000388e <dir_remove+0x4f>
c0003889:	b8 02 00 00 00       	mov    eax,0x2
c000388e:	5b                   	pop    ebx
c000388f:	5e                   	pop    esi
c0003890:	5f                   	pop    edi
c0003891:	c3                   	ret    

c0003892 <dir_find>:
c0003892:	55                   	push   ebp
c0003893:	31 d2                	xor    edx,edx
c0003895:	57                   	push   edi
c0003896:	56                   	push   esi
c0003897:	53                   	push   ebx
c0003898:	89 c3                	mov    ebx,eax
c000389a:	83 ec 1c             	sub    esp,0x1c
c000389d:	8b 00                	mov    eax,DWORD PTR [eax]
c000389f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038a3:	89 d8                	mov    eax,ebx
c00038a5:	e8 6e fa ff ff       	call   c0003318 <dir_sdi>
c00038aa:	89 c6                	mov    esi,eax
c00038ac:	85 c0                	test   eax,eax
c00038ae:	0f 85 1d 01 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038b4:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038bb:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c00038c0:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038c5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038cc:	e8 6d ea ff ff       	call   c000233e <move_window>
c00038d1:	89 c6                	mov    esi,eax
c00038d3:	85 c0                	test   eax,eax
c00038d5:	0f 85 f6 00 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038db:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00038de:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c00038e2:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00038e6:	85 c9                	test   ecx,ecx
c00038e8:	0f 84 de 00 00 00    	je     c00039cc <dir_find+0x13a>
c00038ee:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00038f1:	89 d0                	mov    eax,edx
c00038f3:	83 e0 3f             	and    eax,0x3f
c00038f6:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c00038fc:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00038ff:	0f 84 a6 00 00 00    	je     c00039ab <dir_find+0x119>
c0003905:	80 e2 08             	and    dl,0x8
c0003908:	0f b6 c0             	movzx  eax,al
c000390b:	74 0b                	je     c0003918 <dir_find+0x86>
c000390d:	83 f8 0f             	cmp    eax,0xf
c0003910:	0f 85 95 00 00 00    	jne    c00039ab <dir_find+0x119>
c0003916:	eb 05                	jmp    c000391d <dir_find+0x8b>
c0003918:	83 f8 0f             	cmp    eax,0xf
c000391b:	75 62                	jne    c000397f <dir_find+0xed>
c000391d:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003921:	0f 85 90 00 00 00    	jne    c00039b7 <dir_find+0x125>
c0003927:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c000392c:	74 17                	je     c0003945 <dir_find+0xb3>
c000392e:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003931:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003939:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000393d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003940:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003943:	eb 13                	jmp    c0003958 <dir_find+0xc6>
c0003945:	89 f8                	mov    eax,edi
c0003947:	bf ff ff ff ff       	mov    edi,0xffffffff
c000394c:	0f b6 d0             	movzx  edx,al
c000394f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003954:	39 c2                	cmp    edx,eax
c0003956:	75 5f                	jne    c00039b7 <dir_find+0x125>
c0003958:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000395c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003961:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003964:	75 51                	jne    c00039b7 <dir_find+0x125>
c0003966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000396a:	89 ea                	mov    edx,ebp
c000396c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000396f:	e8 37 f3 ff ff       	call   c0002cab <cmp_lfn>
c0003974:	85 c0                	test   eax,eax
c0003976:	74 3f                	je     c00039b7 <dir_find+0x125>
c0003978:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000397c:	4f                   	dec    edi
c000397d:	eb 38                	jmp    c00039b7 <dir_find+0x125>
c000397f:	89 f8                	mov    eax,edi
c0003981:	84 c0                	test   al,al
c0003983:	75 0d                	jne    c0003992 <dir_find+0x100>
c0003985:	89 e8                	mov    eax,ebp
c0003987:	e8 9c e8 ff ff       	call   c0002228 <sum_sfn>
c000398c:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003990:	74 3f                	je     c00039d1 <dir_find+0x13f>
c0003992:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003996:	75 13                	jne    c00039ab <dir_find+0x119>
c0003998:	8d 53 20             	lea    edx,[ebx+0x20]
c000399b:	b9 0b 00 00 00       	mov    ecx,0xb
c00039a0:	89 e8                	mov    eax,ebp
c00039a2:	e8 7c e4 ff ff       	call   c0001e23 <mem_cmp>
c00039a7:	85 c0                	test   eax,eax
c00039a9:	74 26                	je     c00039d1 <dir_find+0x13f>
c00039ab:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039b2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039b7:	31 d2                	xor    edx,edx
c00039b9:	89 d8                	mov    eax,ebx
c00039bb:	e8 ed fb ff ff       	call   c00035ad <dir_next>
c00039c0:	89 c6                	mov    esi,eax
c00039c2:	85 c0                	test   eax,eax
c00039c4:	0f 84 fb fe ff ff    	je     c00038c5 <dir_find+0x33>
c00039ca:	eb 05                	jmp    c00039d1 <dir_find+0x13f>
c00039cc:	be 04 00 00 00       	mov    esi,0x4
c00039d1:	83 c4 1c             	add    esp,0x1c
c00039d4:	89 f0                	mov    eax,esi
c00039d6:	5b                   	pop    ebx
c00039d7:	5e                   	pop    esi
c00039d8:	5f                   	pop    edi
c00039d9:	5d                   	pop    ebp
c00039da:	c3                   	ret    

c00039db <follow_path>:
c00039db:	56                   	push   esi
c00039dc:	53                   	push   ebx
c00039dd:	89 c3                	mov    ebx,eax
c00039df:	83 ec 14             	sub    esp,0x14
c00039e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e6:	8b 30                	mov    esi,DWORD PTR [eax]
c00039e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039ec:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00039ef:	83 fa 5c             	cmp    edx,0x5c
c00039f2:	75 07                	jne    c00039fb <follow_path+0x20>
c00039f4:	40                   	inc    eax
c00039f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00039f9:	eb ed                	jmp    c00039e8 <follow_path+0xd>
c00039fb:	83 fa 2f             	cmp    edx,0x2f
c00039fe:	74 f4                	je     c00039f4 <follow_path+0x19>
c0003a00:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a07:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a0a:	77 3e                	ja     c0003a4a <follow_path+0x6f>
c0003a0c:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a10:	31 d2                	xor    edx,edx
c0003a12:	89 d8                	mov    eax,ebx
c0003a14:	e8 ff f8 ff ff       	call   c0003318 <dir_sdi>
c0003a19:	eb 4f                	jmp    c0003a6a <follow_path+0x8f>
c0003a1b:	89 d8                	mov    eax,ebx
c0003a1d:	e8 70 fe ff ff       	call   c0003892 <dir_find>
c0003a22:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a25:	85 c0                	test   eax,eax
c0003a27:	75 32                	jne    c0003a5b <follow_path+0x80>
c0003a29:	80 e2 04             	and    dl,0x4
c0003a2c:	75 3c                	jne    c0003a6a <follow_path+0x8f>
c0003a2e:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a32:	74 31                	je     c0003a65 <follow_path+0x8a>
c0003a34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a37:	25 ff 01 00 00       	and    eax,0x1ff
c0003a3c:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a40:	8a 06                	mov    al,BYTE PTR [esi]
c0003a42:	e8 7c f7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003a47:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a4a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a4e:	89 d8                	mov    eax,ebx
c0003a50:	e8 7f ef ff ff       	call   c00029d4 <create_name>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	74 c2                	je     c0003a1b <follow_path+0x40>
c0003a59:	eb 0f                	jmp    c0003a6a <follow_path+0x8f>
c0003a5b:	83 f8 04             	cmp    eax,0x4
c0003a5e:	75 0a                	jne    c0003a6a <follow_path+0x8f>
c0003a60:	80 e2 04             	and    dl,0x4
c0003a63:	75 05                	jne    c0003a6a <follow_path+0x8f>
c0003a65:	b8 05 00 00 00       	mov    eax,0x5
c0003a6a:	83 c4 14             	add    esp,0x14
c0003a6d:	5b                   	pop    ebx
c0003a6e:	5e                   	pop    esi
c0003a6f:	c3                   	ret    

c0003a70 <dir_register>:
c0003a70:	55                   	push   ebp
c0003a71:	57                   	push   edi
c0003a72:	56                   	push   esi
c0003a73:	be 06 00 00 00       	mov    esi,0x6
c0003a78:	53                   	push   ebx
c0003a79:	83 ec 2c             	sub    esp,0x2c
c0003a7c:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003a7f:	80 e2 a0             	and    dl,0xa0
c0003a82:	0f 85 66 01 00 00    	jne    c0003bee <dir_register+0x17e>
c0003a88:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a8a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003a92:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003a95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003a99:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003a9e:	74 06                	je     c0003aa6 <dir_register+0x36>
c0003aa0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aa4:	eb ef                	jmp    c0003a95 <dir_register+0x25>
c0003aa6:	89 c3                	mov    ebx,eax
c0003aa8:	b9 0c 00 00 00       	mov    ecx,0xc
c0003aad:	8d 40 20             	lea    eax,[eax+0x20]
c0003ab0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003ab4:	89 c2                	mov    edx,eax
c0003ab6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003aba:	e8 44 e3 ff ff       	call   c0001e03 <mem_cpy>
c0003abf:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ac4:	74 48                	je     c0003b0e <dir_register+0x9e>
c0003ac6:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003aca:	bd 01 00 00 00       	mov    ebp,0x1
c0003acf:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003ad2:	55                   	push   ebp
c0003ad3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003ad7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003adb:	e8 86 e6 ff ff       	call   c0002166 <gen_numname>
c0003ae0:	58                   	pop    eax
c0003ae1:	89 d8                	mov    eax,ebx
c0003ae3:	e8 aa fd ff ff       	call   c0003892 <dir_find>
c0003ae8:	89 c6                	mov    esi,eax
c0003aea:	85 c0                	test   eax,eax
c0003aec:	75 10                	jne    c0003afe <dir_register+0x8e>
c0003aee:	45                   	inc    ebp
c0003aef:	83 fd 64             	cmp    ebp,0x64
c0003af2:	75 db                	jne    c0003acf <dir_register+0x5f>
c0003af4:	be 07 00 00 00       	mov    esi,0x7
c0003af9:	e9 f0 00 00 00       	jmp    c0003bee <dir_register+0x17e>
c0003afe:	83 f8 04             	cmp    eax,0x4
c0003b01:	0f 85 e7 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b07:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b0b:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b0e:	bd 01 00 00 00       	mov    ebp,0x1
c0003b13:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b18:	74 13                	je     c0003b2d <dir_register+0xbd>
c0003b1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1e:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b23:	83 c0 0c             	add    eax,0xc
c0003b26:	31 d2                	xor    edx,edx
c0003b28:	f7 f1                	div    ecx
c0003b2a:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b2d:	89 ea                	mov    edx,ebp
c0003b2f:	89 d8                	mov    eax,ebx
c0003b31:	e8 7c fb ff ff       	call   c00036b2 <dir_alloc>
c0003b36:	89 c6                	mov    esi,eax
c0003b38:	85 c0                	test   eax,eax
c0003b3a:	0f 85 ae 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b40:	4d                   	dec    ebp
c0003b41:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003b45:	74 67                	je     c0003bae <dir_register+0x13e>
c0003b47:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b4a:	89 e8                	mov    eax,ebp
c0003b4c:	c1 e0 05             	shl    eax,0x5
c0003b4f:	29 c2                	sub    edx,eax
c0003b51:	89 d8                	mov    eax,ebx
c0003b53:	e8 c0 f7 ff ff       	call   c0003318 <dir_sdi>
c0003b58:	89 c6                	mov    esi,eax
c0003b5a:	85 c0                	test   eax,eax
c0003b5c:	0f 85 8c 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b66:	e8 bd e6 ff ff       	call   c0002228 <sum_sfn>
c0003b6b:	0f b6 e8             	movzx  ebp,al
c0003b6e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003b71:	89 f8                	mov    eax,edi
c0003b73:	e8 c6 e7 ff ff       	call   c000233e <move_window>
c0003b78:	89 c6                	mov    esi,eax
c0003b7a:	85 c0                	test   eax,eax
c0003b7c:	75 70                	jne    c0003bee <dir_register+0x17e>
c0003b7e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003b83:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003b86:	83 ec 0c             	sub    esp,0xc
c0003b89:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003b8c:	55                   	push   ebp
c0003b8d:	e8 39 e5 ff ff       	call   c00020cb <put_lfn>
c0003b92:	31 d2                	xor    edx,edx
c0003b94:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003b98:	89 d8                	mov    eax,ebx
c0003b9a:	e8 0e fa ff ff       	call   c00035ad <dir_next>
c0003b9f:	83 c4 10             	add    esp,0x10
c0003ba2:	89 c6                	mov    esi,eax
c0003ba4:	85 c0                	test   eax,eax
c0003ba6:	75 46                	jne    c0003bee <dir_register+0x17e>
c0003ba8:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003bac:	75 c0                	jne    c0003b6e <dir_register+0xfe>
c0003bae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb1:	89 f8                	mov    eax,edi
c0003bb3:	e8 86 e7 ff ff       	call   c000233e <move_window>
c0003bb8:	89 c6                	mov    esi,eax
c0003bba:	85 c0                	test   eax,eax
c0003bbc:	75 30                	jne    c0003bee <dir_register+0x17e>
c0003bbe:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bc1:	b9 20 00 00 00       	mov    ecx,0x20
c0003bc6:	31 d2                	xor    edx,edx
c0003bc8:	e8 4b e2 ff ff       	call   c0001e18 <mem_set>
c0003bcd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003bd4:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bd9:	e8 25 e2 ff ff       	call   c0001e03 <mem_cpy>
c0003bde:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003be1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003be4:	83 e0 18             	and    eax,0x18
c0003be7:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003bea:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003bee:	83 c4 2c             	add    esp,0x2c
c0003bf1:	89 f0                	mov    eax,esi
c0003bf3:	5b                   	pop    ebx
c0003bf4:	5e                   	pop    esi
c0003bf5:	5f                   	pop    edi
c0003bf6:	5d                   	pop    ebp
c0003bf7:	c3                   	ret    

c0003bf8 <f_mount>:
c0003bf8:	53                   	push   ebx
c0003bf9:	83 ec 18             	sub    esp,0x18
c0003bfc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c00:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c08:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c0c:	e8 37 e6 ff ff       	call   c0002248 <get_ldnumber>
c0003c11:	89 c2                	mov    edx,eax
c0003c13:	b8 0b 00 00 00       	mov    eax,0xb
c0003c18:	85 d2                	test   edx,edx
c0003c1a:	78 39                	js     c0003c55 <f_mount+0x5d>
c0003c1c:	8b 04 95 a0 44 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbb60]
c0003c23:	85 c0                	test   eax,eax
c0003c25:	74 03                	je     c0003c2a <f_mount+0x32>
c0003c27:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c2e:	85 c0                	test   eax,eax
c0003c30:	74 03                	je     c0003c35 <f_mount+0x3d>
c0003c32:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c39:	89 04 95 a0 44 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbb60],eax
c0003c40:	31 c0                	xor    eax,eax
c0003c42:	84 db                	test   bl,bl
c0003c44:	74 0f                	je     c0003c55 <f_mount+0x5d>
c0003c46:	31 c9                	xor    ecx,ecx
c0003c48:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c50:	e8 3c e8 ff ff       	call   c0002491 <mount_volume>
c0003c55:	83 c4 18             	add    esp,0x18
c0003c58:	5b                   	pop    ebx
c0003c59:	c3                   	ret    

c0003c5a <f_open>:
c0003c5a:	55                   	push   ebp
c0003c5b:	b8 09 00 00 00       	mov    eax,0x9
c0003c60:	57                   	push   edi
c0003c61:	56                   	push   esi
c0003c62:	53                   	push   ebx
c0003c63:	83 ec 5c             	sub    esp,0x5c
c0003c66:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003c6a:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003c6e:	85 db                	test   ebx,ebx
c0003c70:	0f 84 9f 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003c76:	89 fd                	mov    ebp,edi
c0003c78:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003c7c:	83 e5 3f             	and    ebp,0x3f
c0003c7f:	89 e8                	mov    eax,ebp
c0003c81:	89 ee                	mov    esi,ebp
c0003c83:	0f b6 c8             	movzx  ecx,al
c0003c86:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003c8a:	e8 02 e8 ff ff       	call   c0002491 <mount_volume>
c0003c8f:	85 c0                	test   eax,eax
c0003c91:	0f 85 78 02 00 00    	jne    c0003f0f <f_open+0x2b5>
c0003c97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c9b:	83 ec 0c             	sub    esp,0xc
c0003c9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ca2:	68 00 02 00 00       	push   0x200
c0003ca7:	e8 74 1f 00 00       	call   c0005c20 <ff_memalloc>
c0003cac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cb0:	83 c4 10             	add    esp,0x10
c0003cb3:	b8 11 00 00 00       	mov    eax,0x11
c0003cb8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003cbd:	0f 84 52 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003cc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003cc7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ccb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ccf:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003cd2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003cd6:	e8 00 fd ff ff       	call   c00039db <follow_path>
c0003cdb:	85 c0                	test   eax,eax
c0003cdd:	75 0c                	jne    c0003ceb <f_open+0x91>
c0003cdf:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ce4:	74 05                	je     c0003ceb <f_open+0x91>
c0003ce6:	b8 06 00 00 00       	mov    eax,0x6
c0003ceb:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003cf1:	0f 84 d5 00 00 00    	je     c0003dcc <f_open+0x172>
c0003cf7:	85 c0                	test   eax,eax
c0003cf9:	74 21                	je     c0003d1c <f_open+0xc2>
c0003cfb:	83 f8 04             	cmp    eax,0x4
c0003cfe:	0f 85 f0 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d04:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d08:	e8 63 fd ff ff       	call   c0003a70 <dir_register>
c0003d0d:	85 c0                	test   eax,eax
c0003d0f:	0f 85 df 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d15:	83 cd 08             	or     ebp,0x8
c0003d18:	89 ee                	mov    esi,ebp
c0003d1a:	eb 2c                	jmp    c0003d48 <f_open+0xee>
c0003d1c:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d20:	b8 07 00 00 00       	mov    eax,0x7
c0003d25:	80 e2 11             	and    dl,0x11
c0003d28:	0f 85 c6 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d2e:	b8 08 00 00 00       	mov    eax,0x8
c0003d33:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d39:	0f 85 b5 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d3f:	83 e7 08             	and    edi,0x8
c0003d42:	0f 84 b1 00 00 00    	je     c0003df9 <f_open+0x19f>
c0003d48:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d50:	89 ea                	mov    edx,ebp
c0003d52:	8a 00                	mov    al,BYTE PTR [eax]
c0003d54:	e8 6a f4 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003d59:	ba 00 00 21 50       	mov    edx,0x50210000
c0003d5e:	89 c7                	mov    edi,eax
c0003d60:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003d63:	e8 98 e0 ff ff       	call   c0001e00 <st_dword>
c0003d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d6c:	31 c9                	xor    ecx,ecx
c0003d6e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003d72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d76:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003d7a:	e8 6d f4 ff ff       	call   c00031ec <st_clust.isra.1>
c0003d7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d83:	31 d2                	xor    edx,edx
c0003d85:	83 c0 1c             	add    eax,0x1c
c0003d88:	e8 73 e0 ff ff       	call   c0001e00 <st_dword>
c0003d8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d91:	85 ff                	test   edi,edi
c0003d93:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003d97:	74 60                	je     c0003df9 <f_open+0x19f>
c0003d99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d9d:	31 c9                	xor    ecx,ecx
c0003d9f:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003da2:	89 fa                	mov    edx,edi
c0003da4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003da8:	e8 72 f7 ff ff       	call   c000351f <remove_chain>
c0003dad:	85 c0                	test   eax,eax
c0003daf:	0f 85 3f 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003db5:	89 ea                	mov    edx,ebp
c0003db7:	4f                   	dec    edi
c0003db8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbc:	e8 7d e5 ff ff       	call   c000233e <move_window>
c0003dc1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003dc5:	85 c0                	test   eax,eax
c0003dc7:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003dca:	eb 27                	jmp    c0003df3 <f_open+0x199>
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	0f 85 20 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003dd4:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003dd8:	b8 04 00 00 00       	mov    eax,0x4
c0003ddd:	f6 c2 10             	test   dl,0x10
c0003de0:	0f 85 0e 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003de6:	83 e7 02             	and    edi,0x2
c0003de9:	74 0e                	je     c0003df9 <f_open+0x19f>
c0003deb:	b8 07 00 00 00       	mov    eax,0x7
c0003df0:	80 e2 01             	and    dl,0x1
c0003df3:	0f 85 fb 00 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003df9:	f7 c6 08 00 00 00    	test   esi,0x8
c0003dff:	74 03                	je     c0003e04 <f_open+0x1aa>
c0003e01:	83 ce 40             	or     esi,0x40
c0003e04:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e08:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e0c:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e0f:	89 fa                	mov    edx,edi
c0003e11:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e14:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e17:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e1a:	e8 a4 f3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003e1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e22:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e25:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e28:	e8 b7 df ff ff       	call   c0001de4 <ld_dword>
c0003e2d:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e2f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e32:	31 d2                	xor    edx,edx
c0003e34:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e38:	b9 00 02 00 00       	mov    ecx,0x200
c0003e3d:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e41:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e45:	89 f0                	mov    eax,esi
c0003e47:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e4e:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e51:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e58:	89 f8                	mov    eax,edi
c0003e5a:	e8 b9 df ff ff       	call   c0001e18 <mem_set>
c0003e5f:	83 e6 20             	and    esi,0x20
c0003e62:	75 07                	jne    c0003e6b <f_open+0x211>
c0003e64:	31 c0                	xor    eax,eax
c0003e66:	e9 89 00 00 00       	jmp    c0003ef4 <f_open+0x29a>
c0003e6b:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0003e6e:	85 ed                	test   ebp,ebp
c0003e70:	74 f2                	je     c0003e64 <f_open+0x20a>
c0003e72:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c0003e75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e79:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003e7c:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003e80:	c1 e6 09             	shl    esi,0x9
c0003e83:	39 ee                	cmp    esi,ebp
c0003e85:	73 1c                	jae    c0003ea3 <f_open+0x249>
c0003e87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003e89:	29 f5                	sub    ebp,esi
c0003e8b:	e8 84 f3 ff ff       	call   c0003214 <get_fat.isra.2>
c0003e90:	89 c2                	mov    edx,eax
c0003e92:	83 f8 01             	cmp    eax,0x1
c0003e95:	76 10                	jbe    c0003ea7 <f_open+0x24d>
c0003e97:	83 f8 ff             	cmp    eax,0xffffffff
c0003e9a:	75 e7                	jne    c0003e83 <f_open+0x229>
c0003e9c:	b8 01 00 00 00       	mov    eax,0x1
c0003ea1:	eb 09                	jmp    c0003eac <f_open+0x252>
c0003ea3:	31 c0                	xor    eax,eax
c0003ea5:	eb 05                	jmp    c0003eac <f_open+0x252>
c0003ea7:	b8 02 00 00 00       	mov    eax,0x2
c0003eac:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003eaf:	85 c0                	test   eax,eax
c0003eb1:	75 41                	jne    c0003ef4 <f_open+0x29a>
c0003eb3:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0003eb9:	74 a9                	je     c0003e64 <f_open+0x20a>
c0003ebb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003ebf:	89 f0                	mov    eax,esi
c0003ec1:	e8 68 e1 ff ff       	call   c000202e <clst2sect>
c0003ec6:	89 c2                	mov    edx,eax
c0003ec8:	b8 02 00 00 00       	mov    eax,0x2
c0003ecd:	85 d2                	test   edx,edx
c0003ecf:	74 23                	je     c0003ef4 <f_open+0x29a>
c0003ed1:	c1 ed 09             	shr    ebp,0x9
c0003ed4:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0003ed8:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003edb:	6a 01                	push   0x1
c0003edd:	50                   	push   eax
c0003ede:	57                   	push   edi
c0003edf:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003ee3:	50                   	push   eax
c0003ee4:	e8 a3 de ff ff       	call   c0001d8c <disk_read>
c0003ee9:	83 c4 10             	add    esp,0x10
c0003eec:	85 c0                	test   eax,eax
c0003eee:	0f 95 c0             	setne  al
c0003ef1:	0f b6 c0             	movzx  eax,al
c0003ef4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003ef8:	83 ec 0c             	sub    esp,0xc
c0003efb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003eff:	e8 34 1d 00 00       	call   c0005c38 <ff_memfree>
c0003f04:	83 c4 10             	add    esp,0x10
c0003f07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	74 06                	je     c0003f15 <f_open+0x2bb>
c0003f0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f15:	83 c4 5c             	add    esp,0x5c
c0003f18:	5b                   	pop    ebx
c0003f19:	5e                   	pop    esi
c0003f1a:	5f                   	pop    edi
c0003f1b:	5d                   	pop    ebp
c0003f1c:	c3                   	ret    

c0003f1d <f_read>:
c0003f1d:	55                   	push   ebp
c0003f1e:	57                   	push   edi
c0003f1f:	56                   	push   esi
c0003f20:	53                   	push   ebx
c0003f21:	83 ec 2c             	sub    esp,0x2c
c0003f24:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f28:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f32:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003f36:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f3a:	89 d8                	mov    eax,ebx
c0003f3c:	e8 54 e3 ff ff       	call   c0002295 <validate>
c0003f41:	89 c5                	mov    ebp,eax
c0003f43:	85 c0                	test   eax,eax
c0003f45:	0f 85 c7 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f4b:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003f4f:	85 ed                	test   ebp,ebp
c0003f51:	0f 85 bb 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f57:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003f5b:	0f 84 ac 01 00 00    	je     c000410d <f_read+0x1f0>
c0003f61:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003f64:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003f67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f6b:	39 f0                	cmp    eax,esi
c0003f6d:	0f 86 b0 00 00 00    	jbe    c0004023 <f_read+0x106>
c0003f73:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0003f77:	e9 a7 00 00 00       	jmp    c0004023 <f_read+0x106>
c0003f7c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003f7f:	a9 ff 01 00 00       	test   eax,0x1ff
c0003f84:	0f 85 56 01 00 00    	jne    c00040e0 <f_read+0x1c3>
c0003f8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003f8e:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c0003f92:	89 c2                	mov    edx,eax
c0003f94:	4f                   	dec    edi
c0003f95:	c1 ea 09             	shr    edx,0x9
c0003f98:	21 d7                	and    edi,edx
c0003f9a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0003f9e:	0f 84 8f 00 00 00    	je     c0004033 <f_read+0x116>
c0003fa4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003fa8:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003fab:	89 c8                	mov    eax,ecx
c0003fad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003fb1:	e8 78 e0 ff ff       	call   c000202e <clst2sect>
c0003fb6:	85 c0                	test   eax,eax
c0003fb8:	0f 84 8d 00 00 00    	je     c000404b <f_read+0x12e>
c0003fbe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003fc2:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c0003fca:	8d 3c 01             	lea    edi,[ecx+eax*1]
c0003fcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003fd1:	0f 86 bf 00 00 00    	jbe    c0004096 <f_read+0x179>
c0003fd7:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003fdb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003fdf:	c1 ee 09             	shr    esi,0x9
c0003fe2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fe6:	01 f2                	add    edx,esi
c0003fe8:	39 c2                	cmp    edx,eax
c0003fea:	76 06                	jbe    c0003ff2 <f_read+0xd5>
c0003fec:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ff0:	89 c6                	mov    esi,eax
c0003ff2:	56                   	push   esi
c0003ff3:	57                   	push   edi
c0003ff4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ff8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ffc:	50                   	push   eax
c0003ffd:	e8 8a dd ff ff       	call   c0001d8c <disk_read>
c0004002:	83 c4 10             	add    esp,0x10
c0004005:	85 c0                	test   eax,eax
c0004007:	75 55                	jne    c000405e <f_read+0x141>
c0004009:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000400d:	75 65                	jne    c0004074 <f_read+0x157>
c000400f:	c1 e6 09             	shl    esi,0x9
c0004012:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004016:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c000401a:	01 30                	add    DWORD PTR [eax],esi
c000401c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004020:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004023:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004028:	0f 85 4e ff ff ff    	jne    c0003f7c <f_read+0x5f>
c000402e:	e9 df 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004033:	85 c0                	test   eax,eax
c0004035:	75 05                	jne    c000403c <f_read+0x11f>
c0004037:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000403a:	eb 0a                	jmp    c0004046 <f_read+0x129>
c000403c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000403f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004041:	e8 ce f1 ff ff       	call   c0003214 <get_fat.isra.2>
c0004046:	83 f8 01             	cmp    eax,0x1
c0004049:	77 0e                	ja     c0004059 <f_read+0x13c>
c000404b:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000404f:	bd 02 00 00 00       	mov    ebp,0x2
c0004054:	e9 b9 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004059:	83 f8 ff             	cmp    eax,0xffffffff
c000405c:	75 0e                	jne    c000406c <f_read+0x14f>
c000405e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004062:	bd 01 00 00 00       	mov    ebp,0x1
c0004067:	e9 a6 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c000406c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000406f:	e9 30 ff ff ff       	jmp    c0003fa4 <f_read+0x87>
c0004074:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004077:	29 f8                	sub    eax,edi
c0004079:	39 f0                	cmp    eax,esi
c000407b:	73 92                	jae    c000400f <f_read+0xf2>
c000407d:	c1 e0 09             	shl    eax,0x9
c0004080:	8d 53 28             	lea    edx,[ebx+0x28]
c0004083:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004087:	b9 00 02 00 00       	mov    ecx,0x200
c000408c:	e8 72 dd ff ff       	call   c0001e03 <mem_cpy>
c0004091:	e9 79 ff ff ff       	jmp    c000400f <f_read+0xf2>
c0004096:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004099:	39 f8                	cmp    eax,edi
c000409b:	74 40                	je     c00040dd <f_read+0x1c0>
c000409d:	8d 73 28             	lea    esi,[ebx+0x28]
c00040a0:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040a4:	74 1e                	je     c00040c4 <f_read+0x1a7>
c00040a6:	6a 01                	push   0x1
c00040a8:	50                   	push   eax
c00040a9:	56                   	push   esi
c00040aa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040ae:	50                   	push   eax
c00040af:	e8 ee dc ff ff       	call   c0001da2 <disk_write>
c00040b4:	83 c4 10             	add    esp,0x10
c00040b7:	85 c0                	test   eax,eax
c00040b9:	75 a3                	jne    c000405e <f_read+0x141>
c00040bb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040be:	83 e0 7f             	and    eax,0x7f
c00040c1:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040c4:	6a 01                	push   0x1
c00040c6:	57                   	push   edi
c00040c7:	56                   	push   esi
c00040c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040cc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040d0:	50                   	push   eax
c00040d1:	e8 b6 dc ff ff       	call   c0001d8c <disk_read>
c00040d6:	83 c4 10             	add    esp,0x10
c00040d9:	85 c0                	test   eax,eax
c00040db:	75 81                	jne    c000405e <f_read+0x141>
c00040dd:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00040e0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040e3:	ba 00 02 00 00       	mov    edx,0x200
c00040e8:	25 ff 01 00 00       	and    eax,0x1ff
c00040ed:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00040f1:	29 c2                	sub    edx,eax
c00040f3:	39 d6                	cmp    esi,edx
c00040f5:	76 02                	jbe    c00040f9 <f_read+0x1dc>
c00040f7:	89 d6                	mov    esi,edx
c00040f9:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00040fd:	89 f1                	mov    ecx,esi
c00040ff:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004103:	e8 fb dc ff ff       	call   c0001e03 <mem_cpy>
c0004108:	e9 05 ff ff ff       	jmp    c0004012 <f_read+0xf5>
c000410d:	bd 07 00 00 00       	mov    ebp,0x7
c0004112:	83 c4 2c             	add    esp,0x2c
c0004115:	89 e8                	mov    eax,ebp
c0004117:	5b                   	pop    ebx
c0004118:	5e                   	pop    esi
c0004119:	5f                   	pop    edi
c000411a:	5d                   	pop    ebp
c000411b:	c3                   	ret    

c000411c <f_write>:
c000411c:	55                   	push   ebp
c000411d:	57                   	push   edi
c000411e:	56                   	push   esi
c000411f:	53                   	push   ebx
c0004120:	83 ec 2c             	sub    esp,0x2c
c0004123:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004127:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000412b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004131:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004135:	89 d8                	mov    eax,ebx
c0004137:	e8 59 e1 ff ff       	call   c0002295 <validate>
c000413c:	89 c5                	mov    ebp,eax
c000413e:	85 c0                	test   eax,eax
c0004140:	0f 85 14 02 00 00    	jne    c000435a <f_write+0x23e>
c0004146:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c000414a:	85 ed                	test   ebp,ebp
c000414c:	0f 85 08 02 00 00    	jne    c000435a <f_write+0x23e>
c0004152:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004156:	0f 84 f9 01 00 00    	je     c0004355 <f_write+0x239>
c000415c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000415f:	89 c7                	mov    edi,eax
c0004161:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004165:	0f 83 ef 00 00 00    	jae    c000425a <f_write+0x13e>
c000416b:	f7 d0                	not    eax
c000416d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004171:	e9 e4 00 00 00       	jmp    c000425a <f_write+0x13e>
c0004176:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004179:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000417f:	0f 85 9a 01 00 00    	jne    c000431f <f_write+0x203>
c0004185:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004189:	89 d1                	mov    ecx,edx
c000418b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000418f:	c1 e9 09             	shr    ecx,0x9
c0004192:	48                   	dec    eax
c0004193:	21 c8                	and    eax,ecx
c0004195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004199:	0f 84 c8 00 00 00    	je     c0004267 <f_write+0x14b>
c000419f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041a3:	0f 85 22 01 00 00    	jne    c00042cb <f_write+0x1af>
c00041a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041ad:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041b0:	89 c8                	mov    eax,ecx
c00041b2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041b6:	e8 73 de ff ff       	call   c000202e <clst2sect>
c00041bb:	85 c0                	test   eax,eax
c00041bd:	0f 84 d2 00 00 00    	je     c0004295 <f_write+0x179>
c00041c3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00041c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041cb:	01 c7                	add    edi,eax
c00041cd:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041d5:	0f 86 1c 01 00 00    	jbe    c00042f7 <f_write+0x1db>
c00041db:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041df:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041e3:	c1 ee 09             	shr    esi,0x9
c00041e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041ea:	01 f2                	add    edx,esi
c00041ec:	39 c2                	cmp    edx,eax
c00041ee:	76 06                	jbe    c00041f6 <f_write+0xda>
c00041f0:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041f4:	89 c6                	mov    esi,eax
c00041f6:	56                   	push   esi
c00041f7:	57                   	push   edi
c00041f8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041fc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004200:	50                   	push   eax
c0004201:	e8 9c db ff ff       	call   c0001da2 <disk_write>
c0004206:	83 c4 10             	add    esp,0x10
c0004209:	85 c0                	test   eax,eax
c000420b:	0f 85 97 00 00 00    	jne    c00042a8 <f_write+0x18c>
c0004211:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004214:	29 fa                	sub    edx,edi
c0004216:	39 f2                	cmp    edx,esi
c0004218:	73 1d                	jae    c0004237 <f_write+0x11b>
c000421a:	8d 43 28             	lea    eax,[ebx+0x28]
c000421d:	c1 e2 09             	shl    edx,0x9
c0004220:	b9 00 02 00 00       	mov    ecx,0x200
c0004225:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004229:	e8 d5 db ff ff       	call   c0001e03 <mem_cpy>
c000422e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004231:	83 e0 7f             	and    eax,0x7f
c0004234:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004237:	c1 e6 09             	shl    esi,0x9
c000423a:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000423e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004242:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004246:	01 30                	add    DWORD PTR [eax],esi
c0004248:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000424b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000424e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004251:	39 f0                	cmp    eax,esi
c0004253:	73 02                	jae    c0004257 <f_write+0x13b>
c0004255:	89 f0                	mov    eax,esi
c0004257:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000425a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000425f:	0f 85 11 ff ff ff    	jne    c0004176 <f_write+0x5a>
c0004265:	eb 1b                	jmp    c0004282 <f_write+0x166>
c0004267:	85 d2                	test   edx,edx
c0004269:	75 09                	jne    c0004274 <f_write+0x158>
c000426b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000426e:	85 c0                	test   eax,eax
c0004270:	75 1e                	jne    c0004290 <f_write+0x174>
c0004272:	eb 03                	jmp    c0004277 <f_write+0x15b>
c0004274:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004277:	89 d8                	mov    eax,ebx
c0004279:	e8 62 f1 ff ff       	call   c00033e0 <create_chain>
c000427e:	85 c0                	test   eax,eax
c0004280:	75 0e                	jne    c0004290 <f_write+0x174>
c0004282:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004285:	83 c8 40             	or     eax,0x40
c0004288:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000428b:	e9 ca 00 00 00       	jmp    c000435a <f_write+0x23e>
c0004290:	83 f8 01             	cmp    eax,0x1
c0004293:	75 0e                	jne    c00042a3 <f_write+0x187>
c0004295:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004299:	bd 02 00 00 00       	mov    ebp,0x2
c000429e:	e9 b7 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042a3:	83 f8 ff             	cmp    eax,0xffffffff
c00042a6:	75 0e                	jne    c00042b6 <f_write+0x19a>
c00042a8:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042ac:	bd 01 00 00 00       	mov    ebp,0x1
c00042b1:	e9 a4 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042b6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042b9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042bd:	0f 85 dc fe ff ff    	jne    c000419f <f_write+0x83>
c00042c3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042c6:	e9 d4 fe ff ff       	jmp    c000419f <f_write+0x83>
c00042cb:	6a 01                	push   0x1
c00042cd:	8d 43 28             	lea    eax,[ebx+0x28]
c00042d0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042d3:	50                   	push   eax
c00042d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042dc:	50                   	push   eax
c00042dd:	e8 c0 da ff ff       	call   c0001da2 <disk_write>
c00042e2:	83 c4 10             	add    esp,0x10
c00042e5:	85 c0                	test   eax,eax
c00042e7:	75 bf                	jne    c00042a8 <f_write+0x18c>
c00042e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ec:	83 e0 7f             	and    eax,0x7f
c00042ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042f2:	e9 b2 fe ff ff       	jmp    c00041a9 <f_write+0x8d>
c00042f7:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00042fa:	74 20                	je     c000431c <f_write+0x200>
c00042fc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042ff:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0004302:	76 18                	jbe    c000431c <f_write+0x200>
c0004304:	6a 01                	push   0x1
c0004306:	8d 43 28             	lea    eax,[ebx+0x28]
c0004309:	57                   	push   edi
c000430a:	50                   	push   eax
c000430b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000430f:	50                   	push   eax
c0004310:	e8 77 da ff ff       	call   c0001d8c <disk_read>
c0004315:	83 c4 10             	add    esp,0x10
c0004318:	85 c0                	test   eax,eax
c000431a:	75 8c                	jne    c00042a8 <f_write+0x18c>
c000431c:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c000431f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004322:	ba 00 02 00 00       	mov    edx,0x200
c0004327:	25 ff 01 00 00       	and    eax,0x1ff
c000432c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004330:	29 c2                	sub    edx,eax
c0004332:	39 d6                	cmp    esi,edx
c0004334:	76 02                	jbe    c0004338 <f_write+0x21c>
c0004336:	89 d6                	mov    esi,edx
c0004338:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c000433c:	89 f1                	mov    ecx,esi
c000433e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004342:	e8 bc da ff ff       	call   c0001e03 <mem_cpy>
c0004347:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000434a:	83 c8 80             	or     eax,0xffffff80
c000434d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004350:	e9 e5 fe ff ff       	jmp    c000423a <f_write+0x11e>
c0004355:	bd 07 00 00 00       	mov    ebp,0x7
c000435a:	83 c4 2c             	add    esp,0x2c
c000435d:	89 e8                	mov    eax,ebp
c000435f:	5b                   	pop    ebx
c0004360:	5e                   	pop    esi
c0004361:	5f                   	pop    edi
c0004362:	5d                   	pop    ebp
c0004363:	c3                   	ret    

c0004364 <f_sync>:
c0004364:	56                   	push   esi
c0004365:	53                   	push   ebx
c0004366:	83 ec 14             	sub    esp,0x14
c0004369:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000436d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004371:	89 d8                	mov    eax,ebx
c0004373:	e8 1d df ff ff       	call   c0002295 <validate>
c0004378:	85 c0                	test   eax,eax
c000437a:	0f 85 a3 00 00 00    	jne    c0004423 <f_sync+0xbf>
c0004380:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004383:	f6 c2 40             	test   dl,0x40
c0004386:	0f 84 97 00 00 00    	je     c0004423 <f_sync+0xbf>
c000438c:	80 e2 80             	and    dl,0x80
c000438f:	74 2e                	je     c00043bf <f_sync+0x5b>
c0004391:	6a 01                	push   0x1
c0004393:	8d 43 28             	lea    eax,[ebx+0x28]
c0004396:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004399:	50                   	push   eax
c000439a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000439e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043a2:	50                   	push   eax
c00043a3:	e8 fa d9 ff ff       	call   c0001da2 <disk_write>
c00043a8:	83 c4 10             	add    esp,0x10
c00043ab:	89 c2                	mov    edx,eax
c00043ad:	b8 01 00 00 00       	mov    eax,0x1
c00043b2:	85 d2                	test   edx,edx
c00043b4:	75 6d                	jne    c0004423 <f_sync+0xbf>
c00043b6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043b9:	83 e0 7f             	and    eax,0x7f
c00043bc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043bf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043c6:	e8 73 df ff ff       	call   c000233e <move_window>
c00043cb:	85 c0                	test   eax,eax
c00043cd:	75 54                	jne    c0004423 <f_sync+0xbf>
c00043cf:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043d2:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043d5:	89 f2                	mov    edx,esi
c00043d7:	83 c8 20             	or     eax,0x20
c00043da:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00043dd:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00043e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043e2:	e8 05 ee ff ff       	call   c00031ec <st_clust.isra.1>
c00043e7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043ea:	8d 46 1c             	lea    eax,[esi+0x1c]
c00043ed:	e8 0e da ff ff       	call   c0001e00 <st_dword>
c00043f2:	8d 46 16             	lea    eax,[esi+0x16]
c00043f5:	ba 00 00 21 50       	mov    edx,0x50210000
c00043fa:	e8 01 da ff ff       	call   c0001e00 <st_dword>
c00043ff:	31 d2                	xor    edx,edx
c0004401:	8d 46 12             	lea    eax,[esi+0x12]
c0004404:	e8 f3 d9 ff ff       	call   c0001dfc <st_word>
c0004409:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000440d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004411:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004415:	e8 5b e9 ff ff       	call   c0002d75 <sync_fs>
c000441a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000441d:	83 e2 bf             	and    edx,0xffffffbf
c0004420:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004423:	83 c4 14             	add    esp,0x14
c0004426:	5b                   	pop    ebx
c0004427:	5e                   	pop    esi
c0004428:	c3                   	ret    

c0004429 <f_close>:
c0004429:	53                   	push   ebx
c000442a:	83 ec 24             	sub    esp,0x24
c000442d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004431:	53                   	push   ebx
c0004432:	e8 2d ff ff ff       	call   c0004364 <f_sync>
c0004437:	83 c4 10             	add    esp,0x10
c000443a:	85 c0                	test   eax,eax
c000443c:	75 15                	jne    c0004453 <f_close+0x2a>
c000443e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004442:	89 d8                	mov    eax,ebx
c0004444:	e8 4c de ff ff       	call   c0002295 <validate>
c0004449:	85 c0                	test   eax,eax
c000444b:	75 06                	jne    c0004453 <f_close+0x2a>
c000444d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004453:	83 c4 18             	add    esp,0x18
c0004456:	5b                   	pop    ebx
c0004457:	c3                   	ret    

c0004458 <f_lseek>:
c0004458:	55                   	push   ebp
c0004459:	57                   	push   edi
c000445a:	56                   	push   esi
c000445b:	53                   	push   ebx
c000445c:	83 ec 2c             	sub    esp,0x2c
c000445f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004463:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004467:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000446b:	89 d8                	mov    eax,ebx
c000446d:	e8 23 de ff ff       	call   c0002295 <validate>
c0004472:	89 c5                	mov    ebp,eax
c0004474:	85 c0                	test   eax,eax
c0004476:	0f 85 83 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c000447c:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004480:	85 ed                	test   ebp,ebp
c0004482:	0f 85 77 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c0004488:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000448b:	39 f0                	cmp    eax,esi
c000448d:	73 08                	jae    c0004497 <f_lseek+0x3f>
c000448f:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004493:	75 02                	jne    c0004497 <f_lseek+0x3f>
c0004495:	89 c6                	mov    esi,eax
c0004497:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000449a:	85 f6                	test   esi,esi
c000449c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044a3:	75 07                	jne    c00044ac <f_lseek+0x54>
c00044a5:	31 f6                	xor    esi,esi
c00044a7:	e9 e2 00 00 00       	jmp    c000458e <f_lseek+0x136>
c00044ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044b0:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044b4:	c1 e7 09             	shl    edi,0x9
c00044b7:	85 c9                	test   ecx,ecx
c00044b9:	74 28                	je     c00044e3 <f_lseek+0x8b>
c00044bb:	49                   	dec    ecx
c00044bc:	31 d2                	xor    edx,edx
c00044be:	8d 46 ff             	lea    eax,[esi-0x1]
c00044c1:	f7 f7                	div    edi
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044c9:	89 c8                	mov    eax,ecx
c00044cb:	f7 f7                	div    edi
c00044cd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044d1:	72 10                	jb     c00044e3 <f_lseek+0x8b>
c00044d3:	89 f8                	mov    eax,edi
c00044d5:	f7 d8                	neg    eax
c00044d7:	21 c1                	and    ecx,eax
c00044d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00044dc:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00044df:	29 ce                	sub    esi,ecx
c00044e1:	eb 3c                	jmp    c000451f <f_lseek+0xc7>
c00044e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00044e6:	85 c0                	test   eax,eax
c00044e8:	75 32                	jne    c000451c <f_lseek+0xc4>
c00044ea:	31 d2                	xor    edx,edx
c00044ec:	89 d8                	mov    eax,ebx
c00044ee:	e8 ed ee ff ff       	call   c00033e0 <create_chain>
c00044f3:	83 f8 01             	cmp    eax,0x1
c00044f6:	75 0e                	jne    c0004506 <f_lseek+0xae>
c00044f8:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044fc:	bd 02 00 00 00       	mov    ebp,0x2
c0004501:	e9 f9 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004506:	83 f8 ff             	cmp    eax,0xffffffff
c0004509:	75 0e                	jne    c0004519 <f_lseek+0xc1>
c000450b:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000450f:	bd 01 00 00 00       	mov    ebp,0x1
c0004514:	e9 e6 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004519:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000451c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000451f:	85 c0                	test   eax,eax
c0004521:	74 82                	je     c00044a5 <f_lseek+0x4d>
c0004523:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004526:	39 fe                	cmp    esi,edi
c0004528:	76 3d                	jbe    c0004567 <f_lseek+0x10f>
c000452a:	01 fa                	add    edx,edi
c000452c:	29 fe                	sub    esi,edi
c000452e:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004531:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004535:	89 c2                	mov    edx,eax
c0004537:	74 0d                	je     c0004546 <f_lseek+0xee>
c0004539:	89 d8                	mov    eax,ebx
c000453b:	e8 a0 ee ff ff       	call   c00033e0 <create_chain>
c0004540:	85 c0                	test   eax,eax
c0004542:	75 09                	jne    c000454d <f_lseek+0xf5>
c0004544:	eb 1f                	jmp    c0004565 <f_lseek+0x10d>
c0004546:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004548:	e8 c7 ec ff ff       	call   c0003214 <get_fat.isra.2>
c000454d:	83 f8 ff             	cmp    eax,0xffffffff
c0004550:	74 b9                	je     c000450b <f_lseek+0xb3>
c0004552:	83 f8 01             	cmp    eax,0x1
c0004555:	76 a1                	jbe    c00044f8 <f_lseek+0xa0>
c0004557:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000455b:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c000455e:	76 98                	jbe    c00044f8 <f_lseek+0xa0>
c0004560:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004563:	eb be                	jmp    c0004523 <f_lseek+0xcb>
c0004565:	31 f6                	xor    esi,esi
c0004567:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000456a:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004570:	0f 84 2f ff ff ff    	je     c00044a5 <f_lseek+0x4d>
c0004576:	89 c2                	mov    edx,eax
c0004578:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000457c:	e8 ad da ff ff       	call   c000202e <clst2sect>
c0004581:	85 c0                	test   eax,eax
c0004583:	0f 84 6f ff ff ff    	je     c00044f8 <f_lseek+0xa0>
c0004589:	c1 ee 09             	shr    esi,0x9
c000458c:	01 c6                	add    esi,eax
c000458e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004591:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004594:	76 0c                	jbe    c00045a2 <f_lseek+0x14a>
c0004596:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004599:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000459c:	83 ca 40             	or     edx,0x40
c000459f:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045a2:	a9 ff 01 00 00       	test   eax,0x1ff
c00045a7:	74 56                	je     c00045ff <f_lseek+0x1a7>
c00045a9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045ac:	39 f0                	cmp    eax,esi
c00045ae:	74 4f                	je     c00045ff <f_lseek+0x1a7>
c00045b0:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045b3:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045b7:	74 26                	je     c00045df <f_lseek+0x187>
c00045b9:	6a 01                	push   0x1
c00045bb:	50                   	push   eax
c00045bc:	57                   	push   edi
c00045bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045c5:	50                   	push   eax
c00045c6:	e8 d7 d7 ff ff       	call   c0001da2 <disk_write>
c00045cb:	83 c4 10             	add    esp,0x10
c00045ce:	85 c0                	test   eax,eax
c00045d0:	0f 85 35 ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045d6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045d9:	83 e0 7f             	and    eax,0x7f
c00045dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045df:	6a 01                	push   0x1
c00045e1:	56                   	push   esi
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 9b d7 ff ff       	call   c0001d8c <disk_read>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 0f ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045fc:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00045ff:	83 c4 2c             	add    esp,0x2c
c0004602:	89 e8                	mov    eax,ebp
c0004604:	5b                   	pop    ebx
c0004605:	5e                   	pop    esi
c0004606:	5f                   	pop    edi
c0004607:	5d                   	pop    ebp
c0004608:	c3                   	ret    

c0004609 <f_opendir>:
c0004609:	56                   	push   esi
c000460a:	b8 09 00 00 00       	mov    eax,0x9
c000460f:	53                   	push   ebx
c0004610:	83 ec 24             	sub    esp,0x24
c0004613:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004617:	85 db                	test   ebx,ebx
c0004619:	0f 84 af 00 00 00    	je     c00046ce <f_opendir+0xc5>
c000461f:	31 c9                	xor    ecx,ecx
c0004621:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004625:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004629:	e8 63 de ff ff       	call   c0002491 <mount_volume>
c000462e:	85 c0                	test   eax,eax
c0004630:	0f 85 92 00 00 00    	jne    c00046c8 <f_opendir+0xbf>
c0004636:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000463a:	83 ec 0c             	sub    esp,0xc
c000463d:	89 03                	mov    DWORD PTR [ebx],eax
c000463f:	68 00 02 00 00       	push   0x200
c0004644:	e8 d7 15 00 00       	call   c0005c20 <ff_memalloc>
c0004649:	83 c4 10             	add    esp,0x10
c000464c:	89 c6                	mov    esi,eax
c000464e:	b8 11 00 00 00       	mov    eax,0x11
c0004653:	85 f6                	test   esi,esi
c0004655:	74 77                	je     c00046ce <f_opendir+0xc5>
c0004657:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000465b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000465f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004662:	89 d8                	mov    eax,ebx
c0004664:	e8 72 f3 ff ff       	call   c00039db <follow_path>
c0004669:	85 c0                	test   eax,eax
c000466b:	75 37                	jne    c00046a4 <f_opendir+0x9b>
c000466d:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004671:	75 1c                	jne    c000468f <f_opendir+0x86>
c0004673:	b8 05 00 00 00       	mov    eax,0x5
c0004678:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000467c:	74 26                	je     c00046a4 <f_opendir+0x9b>
c000467e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004681:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004685:	8a 00                	mov    al,BYTE PTR [eax]
c0004687:	e8 37 eb ff ff       	call   c00031c3 <ld_clust.isra.0>
c000468c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000468f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004693:	31 d2                	xor    edx,edx
c0004695:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004699:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 74 ec ff ff       	call   c0003318 <dir_sdi>
c00046a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046a8:	83 ec 0c             	sub    esp,0xc
c00046ab:	56                   	push   esi
c00046ac:	e8 87 15 00 00       	call   c0005c38 <ff_memfree>
c00046b1:	83 c4 10             	add    esp,0x10
c00046b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046b8:	83 f8 04             	cmp    eax,0x4
c00046bb:	74 06                	je     c00046c3 <f_opendir+0xba>
c00046bd:	85 c0                	test   eax,eax
c00046bf:	74 0d                	je     c00046ce <f_opendir+0xc5>
c00046c1:	eb 05                	jmp    c00046c8 <f_opendir+0xbf>
c00046c3:	b8 05 00 00 00       	mov    eax,0x5
c00046c8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046ce:	83 c4 24             	add    esp,0x24
c00046d1:	5b                   	pop    ebx
c00046d2:	5e                   	pop    esi
c00046d3:	c3                   	ret    

c00046d4 <f_closedir>:
c00046d4:	53                   	push   ebx
c00046d5:	83 ec 18             	sub    esp,0x18
c00046d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00046dc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00046e0:	89 d8                	mov    eax,ebx
c00046e2:	e8 ae db ff ff       	call   c0002295 <validate>
c00046e7:	85 c0                	test   eax,eax
c00046e9:	75 06                	jne    c00046f1 <f_closedir+0x1d>
c00046eb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f1:	83 c4 18             	add    esp,0x18
c00046f4:	5b                   	pop    ebx
c00046f5:	c3                   	ret    

c00046f6 <f_readdir>:
c00046f6:	57                   	push   edi
c00046f7:	56                   	push   esi
c00046f8:	53                   	push   ebx
c00046f9:	83 ec 20             	sub    esp,0x20
c00046fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004700:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004704:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004708:	89 d8                	mov    eax,ebx
c000470a:	e8 86 db ff ff       	call   c0002295 <validate>
c000470f:	85 c0                	test   eax,eax
c0004711:	75 6e                	jne    c0004781 <f_readdir+0x8b>
c0004713:	85 ff                	test   edi,edi
c0004715:	75 0b                	jne    c0004722 <f_readdir+0x2c>
c0004717:	31 d2                	xor    edx,edx
c0004719:	89 d8                	mov    eax,ebx
c000471b:	e8 f8 eb ff ff       	call   c0003318 <dir_sdi>
c0004720:	eb 5f                	jmp    c0004781 <f_readdir+0x8b>
c0004722:	83 ec 0c             	sub    esp,0xc
c0004725:	68 00 02 00 00       	push   0x200
c000472a:	e8 f1 14 00 00       	call   c0005c20 <ff_memalloc>
c000472f:	83 c4 10             	add    esp,0x10
c0004732:	89 c6                	mov    esi,eax
c0004734:	b8 11 00 00 00       	mov    eax,0x11
c0004739:	85 f6                	test   esi,esi
c000473b:	74 44                	je     c0004781 <f_readdir+0x8b>
c000473d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004741:	31 d2                	xor    edx,edx
c0004743:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004746:	89 d8                	mov    eax,ebx
c0004748:	e8 ca ef ff ff       	call   c0003717 <dir_read>
c000474d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004752:	75 19                	jne    c000476d <f_readdir+0x77>
c0004754:	89 fa                	mov    edx,edi
c0004756:	89 d8                	mov    eax,ebx
c0004758:	e8 70 e8 ff ff       	call   c0002fcd <get_fileinfo>
c000475d:	31 d2                	xor    edx,edx
c000475f:	89 d8                	mov    eax,ebx
c0004761:	e8 47 ee ff ff       	call   c00035ad <dir_next>
c0004766:	83 f8 04             	cmp    eax,0x4
c0004769:	75 02                	jne    c000476d <f_readdir+0x77>
c000476b:	31 c0                	xor    eax,eax
c000476d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004771:	83 ec 0c             	sub    esp,0xc
c0004774:	56                   	push   esi
c0004775:	e8 be 14 00 00       	call   c0005c38 <ff_memfree>
c000477a:	83 c4 10             	add    esp,0x10
c000477d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004781:	83 c4 20             	add    esp,0x20
c0004784:	5b                   	pop    ebx
c0004785:	5e                   	pop    esi
c0004786:	5f                   	pop    edi
c0004787:	c3                   	ret    

c0004788 <f_stat>:
c0004788:	57                   	push   edi
c0004789:	31 c9                	xor    ecx,ecx
c000478b:	56                   	push   esi
c000478c:	53                   	push   ebx
c000478d:	83 ec 30             	sub    esp,0x30
c0004790:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004794:	89 e2                	mov    edx,esp
c0004796:	8d 44 24 40          	lea    eax,[esp+0x40]
c000479a:	e8 f2 dc ff ff       	call   c0002491 <mount_volume>
c000479f:	89 c3                	mov    ebx,eax
c00047a1:	85 c0                	test   eax,eax
c00047a3:	75 59                	jne    c00047fe <f_stat+0x76>
c00047a5:	83 ec 0c             	sub    esp,0xc
c00047a8:	bb 11 00 00 00       	mov    ebx,0x11
c00047ad:	68 00 02 00 00       	push   0x200
c00047b2:	e8 69 14 00 00       	call   c0005c20 <ff_memalloc>
c00047b7:	83 c4 10             	add    esp,0x10
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	74 3e                	je     c00047fe <f_stat+0x76>
c00047c0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047c3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047ca:	89 e0                	mov    eax,esp
c00047cc:	e8 0a f2 ff ff       	call   c00039db <follow_path>
c00047d1:	89 c3                	mov    ebx,eax
c00047d3:	85 c0                	test   eax,eax
c00047d5:	75 1b                	jne    c00047f2 <f_stat+0x6a>
c00047d7:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00047dc:	75 0f                	jne    c00047ed <f_stat+0x65>
c00047de:	85 ff                	test   edi,edi
c00047e0:	74 10                	je     c00047f2 <f_stat+0x6a>
c00047e2:	89 fa                	mov    edx,edi
c00047e4:	89 e0                	mov    eax,esp
c00047e6:	e8 e2 e7 ff ff       	call   c0002fcd <get_fileinfo>
c00047eb:	eb 05                	jmp    c00047f2 <f_stat+0x6a>
c00047ed:	bb 06 00 00 00       	mov    ebx,0x6
c00047f2:	83 ec 0c             	sub    esp,0xc
c00047f5:	56                   	push   esi
c00047f6:	e8 3d 14 00 00       	call   c0005c38 <ff_memfree>
c00047fb:	83 c4 10             	add    esp,0x10
c00047fe:	83 c4 30             	add    esp,0x30
c0004801:	89 d8                	mov    eax,ebx
c0004803:	5b                   	pop    ebx
c0004804:	5e                   	pop    esi
c0004805:	5f                   	pop    edi
c0004806:	c3                   	ret    

c0004807 <f_getfree>:
c0004807:	55                   	push   ebp
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	57                   	push   edi
c000480b:	56                   	push   esi
c000480c:	53                   	push   ebx
c000480d:	83 ec 2c             	sub    esp,0x2c
c0004810:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004814:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004818:	e8 74 dc ff ff       	call   c0002491 <mount_volume>
c000481d:	89 c7                	mov    edi,eax
c000481f:	85 c0                	test   eax,eax
c0004821:	0f 85 df 00 00 00    	jne    c0004906 <f_getfree+0xff>
c0004827:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000482b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000482f:	89 30                	mov    DWORD PTR [eax],esi
c0004831:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004834:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004837:	8d 55 fe             	lea    edx,[ebp-0x2]
c000483a:	39 d0                	cmp    eax,edx
c000483c:	77 0b                	ja     c0004849 <f_getfree+0x42>
c000483e:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004842:	89 01                	mov    DWORD PTR [ecx],eax
c0004844:	e9 bd 00 00 00       	jmp    c0004906 <f_getfree+0xff>
c0004849:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c000484c:	75 29                	jne    c0004877 <f_getfree+0x70>
c000484e:	bd 02 00 00 00       	mov    ebp,0x2
c0004853:	31 db                	xor    ebx,ebx
c0004855:	89 ea                	mov    edx,ebp
c0004857:	89 f0                	mov    eax,esi
c0004859:	e8 b6 e9 ff ff       	call   c0003214 <get_fat.isra.2>
c000485e:	83 f8 ff             	cmp    eax,0xffffffff
c0004861:	74 7d                	je     c00048e0 <f_getfree+0xd9>
c0004863:	83 f8 01             	cmp    eax,0x1
c0004866:	74 7f                	je     c00048e7 <f_getfree+0xe0>
c0004868:	83 d3 00             	adc    ebx,0x0
c000486b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486f:	45                   	inc    ebp
c0004870:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004873:	77 e0                	ja     c0004855 <f_getfree+0x4e>
c0004875:	eb 79                	jmp    c00048f0 <f_getfree+0xe9>
c0004877:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c000487a:	31 db                	xor    ebx,ebx
c000487c:	31 f6                	xor    esi,esi
c000487e:	85 f6                	test   esi,esi
c0004880:	75 18                	jne    c000489a <f_getfree+0x93>
c0004882:	8d 42 01             	lea    eax,[edx+0x1]
c0004885:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004889:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000488d:	e8 ac da ff ff       	call   c000233e <move_window>
c0004892:	85 c0                	test   eax,eax
c0004894:	75 58                	jne    c00048ee <f_getfree+0xe7>
c0004896:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000489a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000489e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048a2:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c00048a6:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048a9:	75 13                	jne    c00048be <f_getfree+0xb7>
c00048ab:	e8 27 d5 ff ff       	call   c0001dd7 <ld_word>
c00048b0:	0f b7 c0             	movzx  eax,ax
c00048b3:	83 f8 01             	cmp    eax,0x1
c00048b6:	83 d3 00             	adc    ebx,0x0
c00048b9:	83 c6 02             	add    esi,0x2
c00048bc:	eb 13                	jmp    c00048d1 <f_getfree+0xca>
c00048be:	e8 21 d5 ff ff       	call   c0001de4 <ld_dword>
c00048c3:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048c8:	83 f8 01             	cmp    eax,0x1
c00048cb:	83 d3 00             	adc    ebx,0x0
c00048ce:	83 c6 04             	add    esi,0x4
c00048d1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00048d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048db:	4d                   	dec    ebp
c00048dc:	75 a0                	jne    c000487e <f_getfree+0x77>
c00048de:	eb 10                	jmp    c00048f0 <f_getfree+0xe9>
c00048e0:	bf 01 00 00 00       	mov    edi,0x1
c00048e5:	eb 09                	jmp    c00048f0 <f_getfree+0xe9>
c00048e7:	bf 02 00 00 00       	mov    edi,0x2
c00048ec:	eb 02                	jmp    c00048f0 <f_getfree+0xe9>
c00048ee:	89 c7                	mov    edi,eax
c00048f0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00048f4:	89 18                	mov    DWORD PTR [eax],ebx
c00048f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048fa:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c00048fd:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004900:	83 ca 01             	or     edx,0x1
c0004903:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004906:	83 c4 2c             	add    esp,0x2c
c0004909:	89 f8                	mov    eax,edi
c000490b:	5b                   	pop    ebx
c000490c:	5e                   	pop    esi
c000490d:	5f                   	pop    edi
c000490e:	5d                   	pop    ebp
c000490f:	c3                   	ret    

c0004910 <f_truncate>:
c0004910:	56                   	push   esi
c0004911:	53                   	push   ebx
c0004912:	83 ec 14             	sub    esp,0x14
c0004915:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004919:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000491d:	89 d8                	mov    eax,ebx
c000491f:	e8 71 d9 ff ff       	call   c0002295 <validate>
c0004924:	89 c6                	mov    esi,eax
c0004926:	85 c0                	test   eax,eax
c0004928:	0f 85 c4 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000492e:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004932:	85 f6                	test   esi,esi
c0004934:	0f 85 b8 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000493a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000493e:	0f 84 a9 00 00 00    	je     c00049ed <f_truncate+0xdd>
c0004944:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004947:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000494a:	0f 83 a2 00 00 00    	jae    c00049f2 <f_truncate+0xe2>
c0004950:	85 c0                	test   eax,eax
c0004952:	75 15                	jne    c0004969 <f_truncate+0x59>
c0004954:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004957:	31 c9                	xor    ecx,ecx
c0004959:	89 d8                	mov    eax,ebx
c000495b:	e8 bf eb ff ff       	call   c000351f <remove_chain>
c0004960:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004967:	eb 35                	jmp    c000499e <f_truncate+0x8e>
c0004969:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000496c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000496e:	e8 a1 e8 ff ff       	call   c0003214 <get_fat.isra.2>
c0004973:	89 c2                	mov    edx,eax
c0004975:	b8 01 00 00 00       	mov    eax,0x1
c000497a:	83 fa ff             	cmp    edx,0xffffffff
c000497d:	74 1f                	je     c000499e <f_truncate+0x8e>
c000497f:	b8 02 00 00 00       	mov    eax,0x2
c0004984:	83 fa 01             	cmp    edx,0x1
c0004987:	74 15                	je     c000499e <f_truncate+0x8e>
c0004989:	31 c0                	xor    eax,eax
c000498b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000498f:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004992:	76 0a                	jbe    c000499e <f_truncate+0x8e>
c0004994:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004997:	89 d8                	mov    eax,ebx
c0004999:	e8 81 eb ff ff       	call   c000351f <remove_chain>
c000499e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049a1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049a4:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049a7:	83 ca 40             	or     edx,0x40
c00049aa:	85 c0                	test   eax,eax
c00049ac:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049af:	75 35                	jne    c00049e6 <f_truncate+0xd6>
c00049b1:	80 e2 80             	and    dl,0x80
c00049b4:	74 3c                	je     c00049f2 <f_truncate+0xe2>
c00049b6:	6a 01                	push   0x1
c00049b8:	8d 43 28             	lea    eax,[ebx+0x28]
c00049bb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049be:	50                   	push   eax
c00049bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049c3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049c7:	50                   	push   eax
c00049c8:	e8 d5 d3 ff ff       	call   c0001da2 <disk_write>
c00049cd:	83 c4 10             	add    esp,0x10
c00049d0:	85 c0                	test   eax,eax
c00049d2:	75 0d                	jne    c00049e1 <f_truncate+0xd1>
c00049d4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049d7:	31 f6                	xor    esi,esi
c00049d9:	83 e0 7f             	and    eax,0x7f
c00049dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00049df:	eb 11                	jmp    c00049f2 <f_truncate+0xe2>
c00049e1:	b8 01 00 00 00       	mov    eax,0x1
c00049e6:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00049e9:	89 c6                	mov    esi,eax
c00049eb:	eb 05                	jmp    c00049f2 <f_truncate+0xe2>
c00049ed:	be 07 00 00 00       	mov    esi,0x7
c00049f2:	89 f0                	mov    eax,esi
c00049f4:	83 c4 14             	add    esp,0x14
c00049f7:	5b                   	pop    ebx
c00049f8:	5e                   	pop    esi
c00049f9:	c3                   	ret    

c00049fa <f_unlink>:
c00049fa:	55                   	push   ebp
c00049fb:	b9 02 00 00 00       	mov    ecx,0x2
c0004a00:	57                   	push   edi
c0004a01:	56                   	push   esi
c0004a02:	53                   	push   ebx
c0004a03:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a09:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a0d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a14:	e8 78 da ff ff       	call   c0002491 <mount_volume>
c0004a19:	85 c0                	test   eax,eax
c0004a1b:	0f 85 f0 00 00 00    	jne    c0004b11 <f_unlink+0x117>
c0004a21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a25:	83 ec 0c             	sub    esp,0xc
c0004a28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a2c:	68 00 02 00 00       	push   0x200
c0004a31:	e8 ea 11 00 00       	call   c0005c20 <ff_memalloc>
c0004a36:	83 c4 10             	add    esp,0x10
c0004a39:	89 c3                	mov    ebx,eax
c0004a3b:	b8 11 00 00 00       	mov    eax,0x11
c0004a40:	85 db                	test   ebx,ebx
c0004a42:	0f 84 c9 00 00 00    	je     c0004b11 <f_unlink+0x117>
c0004a48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4c:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a53:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a56:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a5a:	e8 7c ef ff ff       	call   c00039db <follow_path>
c0004a5f:	85 c0                	test   eax,eax
c0004a61:	0f 85 96 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a67:	b8 06 00 00 00       	mov    eax,0x6
c0004a6c:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a71:	0f 85 86 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a77:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004a7c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004a82:	74 07                	je     c0004a8b <f_unlink+0x91>
c0004a84:	b8 07 00 00 00       	mov    eax,0x7
c0004a89:	eb 72                	jmp    c0004afd <f_unlink+0x103>
c0004a8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004a8f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004a93:	8a 07                	mov    al,BYTE PTR [edi]
c0004a95:	e8 29 e7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004a9a:	83 e5 10             	and    ebp,0x10
c0004a9d:	89 c6                	mov    esi,eax
c0004a9f:	75 0f                	jne    c0004ab0 <f_unlink+0xb6>
c0004aa1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aa5:	e8 95 ed ff ff       	call   c000383f <dir_remove>
c0004aaa:	85 c0                	test   eax,eax
c0004aac:	74 2f                	je     c0004add <f_unlink+0xe3>
c0004aae:	eb 4d                	jmp    c0004afd <f_unlink+0x103>
c0004ab0:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ab4:	31 d2                	xor    edx,edx
c0004ab6:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004aba:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004abe:	e8 55 e8 ff ff       	call   c0003318 <dir_sdi>
c0004ac3:	85 c0                	test   eax,eax
c0004ac5:	75 36                	jne    c0004afd <f_unlink+0x103>
c0004ac7:	31 d2                	xor    edx,edx
c0004ac9:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004acd:	e8 45 ec ff ff       	call   c0003717 <dir_read>
c0004ad2:	85 c0                	test   eax,eax
c0004ad4:	74 ae                	je     c0004a84 <f_unlink+0x8a>
c0004ad6:	83 f8 04             	cmp    eax,0x4
c0004ad9:	75 22                	jne    c0004afd <f_unlink+0x103>
c0004adb:	eb c4                	jmp    c0004aa1 <f_unlink+0xa7>
c0004add:	85 f6                	test   esi,esi
c0004adf:	75 0b                	jne    c0004aec <f_unlink+0xf2>
c0004ae1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae5:	e8 8b e2 ff ff       	call   c0002d75 <sync_fs>
c0004aea:	eb 11                	jmp    c0004afd <f_unlink+0x103>
c0004aec:	31 c9                	xor    ecx,ecx
c0004aee:	89 f2                	mov    edx,esi
c0004af0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004af4:	e8 26 ea ff ff       	call   c000351f <remove_chain>
c0004af9:	85 c0                	test   eax,eax
c0004afb:	74 e4                	je     c0004ae1 <f_unlink+0xe7>
c0004afd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b01:	83 ec 0c             	sub    esp,0xc
c0004b04:	53                   	push   ebx
c0004b05:	e8 2e 11 00 00       	call   c0005c38 <ff_memfree>
c0004b0a:	83 c4 10             	add    esp,0x10
c0004b0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b11:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b17:	5b                   	pop    ebx
c0004b18:	5e                   	pop    esi
c0004b19:	5f                   	pop    edi
c0004b1a:	5d                   	pop    ebp
c0004b1b:	c3                   	ret    

c0004b1c <f_mkdir>:
c0004b1c:	57                   	push   edi
c0004b1d:	b9 02 00 00 00       	mov    ecx,0x2
c0004b22:	56                   	push   esi
c0004b23:	53                   	push   ebx
c0004b24:	83 ec 50             	sub    esp,0x50
c0004b27:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b2b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b2f:	e8 5d d9 ff ff       	call   c0002491 <mount_volume>
c0004b34:	89 c3                	mov    ebx,eax
c0004b36:	85 c0                	test   eax,eax
c0004b38:	0f 85 70 01 00 00    	jne    c0004cae <f_mkdir+0x192>
c0004b3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b42:	bb 11 00 00 00       	mov    ebx,0x11
c0004b47:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004b4b:	83 ec 0c             	sub    esp,0xc
c0004b4e:	68 00 02 00 00       	push   0x200
c0004b53:	e8 c8 10 00 00       	call   c0005c20 <ff_memalloc>
c0004b58:	83 c4 10             	add    esp,0x10
c0004b5b:	89 c7                	mov    edi,eax
c0004b5d:	85 c0                	test   eax,eax
c0004b5f:	0f 84 49 01 00 00    	je     c0004cae <f_mkdir+0x192>
c0004b65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b6d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b74:	e8 62 ee ff ff       	call   c00039db <follow_path>
c0004b79:	89 c3                	mov    ebx,eax
c0004b7b:	85 c0                	test   eax,eax
c0004b7d:	74 3e                	je     c0004bbd <f_mkdir+0xa1>
c0004b7f:	83 f8 04             	cmp    eax,0x4
c0004b82:	75 3e                	jne    c0004bc2 <f_mkdir+0xa6>
c0004b84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b88:	31 d2                	xor    edx,edx
c0004b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004b8e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004b92:	e8 49 e8 ff ff       	call   c00033e0 <create_chain>
c0004b97:	89 c6                	mov    esi,eax
c0004b99:	85 c0                	test   eax,eax
c0004b9b:	74 0c                	je     c0004ba9 <f_mkdir+0x8d>
c0004b9d:	bb 02 00 00 00       	mov    ebx,0x2
c0004ba2:	83 f8 01             	cmp    eax,0x1
c0004ba5:	74 07                	je     c0004bae <f_mkdir+0x92>
c0004ba7:	eb 2a                	jmp    c0004bd3 <f_mkdir+0xb7>
c0004ba9:	bb 07 00 00 00       	mov    ebx,0x7
c0004bae:	31 c9                	xor    ecx,ecx
c0004bb0:	89 f2                	mov    edx,esi
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 64 e9 ff ff       	call   c000351f <remove_chain>
c0004bbb:	eb 05                	jmp    c0004bc2 <f_mkdir+0xa6>
c0004bbd:	bb 08 00 00 00       	mov    ebx,0x8
c0004bc2:	83 ec 0c             	sub    esp,0xc
c0004bc5:	57                   	push   edi
c0004bc6:	e8 6d 10 00 00       	call   c0005c38 <ff_memfree>
c0004bcb:	83 c4 10             	add    esp,0x10
c0004bce:	e9 db 00 00 00       	jmp    c0004cae <f_mkdir+0x192>
c0004bd3:	bb 01 00 00 00       	mov    ebx,0x1
c0004bd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004bdb:	74 d1                	je     c0004bae <f_mkdir+0x92>
c0004bdd:	89 f2                	mov    edx,esi
c0004bdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004be3:	e8 f1 dc ff ff       	call   c00028d9 <dir_clear>
c0004be8:	89 c3                	mov    ebx,eax
c0004bea:	85 c0                	test   eax,eax
c0004bec:	75 c0                	jne    c0004bae <f_mkdir+0x92>
c0004bee:	b9 0b 00 00 00       	mov    ecx,0xb
c0004bf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bf7:	ba 20 00 00 00       	mov    edx,0x20
c0004bfc:	83 c0 34             	add    eax,0x34
c0004bff:	e8 14 d2 ff ff       	call   c0001e18 <mem_set>
c0004c04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c08:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c0d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c11:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004c15:	83 c0 4a             	add    eax,0x4a
c0004c18:	e8 e3 d1 ff ff       	call   c0001e00 <st_dword>
c0004c1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c21:	89 f1                	mov    ecx,esi
c0004c23:	8d 50 34             	lea    edx,[eax+0x34]
c0004c26:	e8 c1 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2f:	b9 20 00 00 00       	mov    ecx,0x20
c0004c34:	8d 50 34             	lea    edx,[eax+0x34]
c0004c37:	83 c0 54             	add    eax,0x54
c0004c3a:	e8 c4 d1 ff ff       	call   c0001e03 <mem_cpy>
c0004c3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c43:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c47:	8d 50 54             	lea    edx,[eax+0x54]
c0004c4a:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c4e:	e8 99 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c57:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c5b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c5f:	e8 0c ee ff ff       	call   c0003a70 <dir_register>
c0004c64:	89 c3                	mov    ebx,eax
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 40 ff ff ff    	jne    c0004bae <f_mkdir+0x92>
c0004c6e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c72:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c77:	83 c0 16             	add    eax,0x16
c0004c7a:	e8 81 d1 ff ff       	call   c0001e00 <st_dword>
c0004c7f:	89 f1                	mov    ecx,esi
c0004c81:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c89:	e8 5e e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c8e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c92:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004c96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c9a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ca2:	e8 ce e0 ff ff       	call   c0002d75 <sync_fs>
c0004ca7:	89 c3                	mov    ebx,eax
c0004ca9:	e9 14 ff ff ff       	jmp    c0004bc2 <f_mkdir+0xa6>
c0004cae:	83 c4 50             	add    esp,0x50
c0004cb1:	89 d8                	mov    eax,ebx
c0004cb3:	5b                   	pop    ebx
c0004cb4:	5e                   	pop    esi
c0004cb5:	5f                   	pop    edi
c0004cb6:	c3                   	ret    

c0004cb7 <f_rename>:
c0004cb7:	57                   	push   edi
c0004cb8:	56                   	push   esi
c0004cb9:	53                   	push   ebx
c0004cba:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004cc0:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004cc7:	e8 7c d5 ff ff       	call   c0002248 <get_ldnumber>
c0004ccc:	b9 02 00 00 00       	mov    ecx,0x2
c0004cd1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cd5:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004cdc:	e8 b0 d7 ff ff       	call   c0002491 <mount_volume>
c0004ce1:	85 c0                	test   eax,eax
c0004ce3:	0f 85 7c 01 00 00    	jne    c0004e65 <f_rename+0x1ae>
c0004ce9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ced:	83 ec 0c             	sub    esp,0xc
c0004cf0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004cf4:	68 00 02 00 00       	push   0x200
c0004cf9:	e8 22 0f 00 00       	call   c0005c20 <ff_memalloc>
c0004cfe:	83 c4 10             	add    esp,0x10
c0004d01:	89 c6                	mov    esi,eax
c0004d03:	b8 11 00 00 00       	mov    eax,0x11
c0004d08:	85 f6                	test   esi,esi
c0004d0a:	0f 84 55 01 00 00    	je     c0004e65 <f_rename+0x1ae>
c0004d10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d14:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d1b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d1e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d22:	e8 b4 ec ff ff       	call   c00039db <follow_path>
c0004d27:	85 c0                	test   eax,eax
c0004d29:	0f 85 22 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d2f:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d33:	b8 06 00 00 00       	mov    eax,0x6
c0004d38:	80 e2 a0             	and    dl,0xa0
c0004d3b:	0f 85 10 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d41:	b9 20 00 00 00       	mov    ecx,0x20
c0004d46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d4e:	e8 b0 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d53:	b9 30 00 00 00       	mov    ecx,0x30
c0004d58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d5c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d60:	e8 9e d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d65:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d70:	e8 66 ec ff ff       	call   c00039db <follow_path>
c0004d75:	85 c0                	test   eax,eax
c0004d77:	75 20                	jne    c0004d99 <f_rename+0xe2>
c0004d79:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004d7d:	b8 08 00 00 00       	mov    eax,0x8
c0004d82:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004d86:	0f 85 c5 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d8c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004d90:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004d97:	eb 03                	jmp    c0004d9c <f_rename+0xe5>
c0004d99:	83 f8 04             	cmp    eax,0x4
c0004d9c:	0f 85 af 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004da2:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004da6:	e8 c5 ec ff ff       	call   c0003a70 <dir_register>
c0004dab:	85 c0                	test   eax,eax
c0004dad:	0f 85 9e 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004db3:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dba:	b9 13 00 00 00       	mov    ecx,0x13
c0004dbf:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dc2:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004dc6:	e8 38 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004dcb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004dcf:	a8 10                	test   al,0x10
c0004dd1:	75 03                	jne    c0004dd6 <f_rename+0x11f>
c0004dd3:	83 c8 20             	or     eax,0x20
c0004dd6:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ddd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004de1:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004de5:	74 54                	je     c0004e3b <f_rename+0x184>
c0004de7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004deb:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004def:	74 4a                	je     c0004e3b <f_rename+0x184>
c0004df1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004df5:	89 da                	mov    edx,ebx
c0004df7:	8a 07                	mov    al,BYTE PTR [edi]
c0004df9:	e8 c5 e3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004dfe:	89 c2                	mov    edx,eax
c0004e00:	89 f8                	mov    eax,edi
c0004e02:	e8 27 d2 ff ff       	call   c000202e <clst2sect>
c0004e07:	89 c2                	mov    edx,eax
c0004e09:	b8 02 00 00 00       	mov    eax,0x2
c0004e0e:	85 d2                	test   edx,edx
c0004e10:	74 3f                	je     c0004e51 <f_rename+0x19a>
c0004e12:	89 f8                	mov    eax,edi
c0004e14:	e8 25 d5 ff ff       	call   c000233e <move_window>
c0004e19:	85 c0                	test   eax,eax
c0004e1b:	75 34                	jne    c0004e51 <f_rename+0x19a>
c0004e1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e21:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e25:	75 14                	jne    c0004e3b <f_rename+0x184>
c0004e27:	8d 50 54             	lea    edx,[eax+0x54]
c0004e2a:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e2e:	e8 b9 e3 ff ff       	call   c00031ec <st_clust.isra.1>
c0004e33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e37:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e3b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e3f:	e8 fb e9 ff ff       	call   c000383f <dir_remove>
c0004e44:	85 c0                	test   eax,eax
c0004e46:	75 09                	jne    c0004e51 <f_rename+0x19a>
c0004e48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e4c:	e8 24 df ff ff       	call   c0002d75 <sync_fs>
c0004e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e55:	83 ec 0c             	sub    esp,0xc
c0004e58:	56                   	push   esi
c0004e59:	e8 da 0d 00 00       	call   c0005c38 <ff_memfree>
c0004e5e:	83 c4 10             	add    esp,0x10
c0004e61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e65:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e6b:	5b                   	pop    ebx
c0004e6c:	5e                   	pop    esi
c0004e6d:	5f                   	pop    edi
c0004e6e:	c3                   	ret    

c0004e6f <f_chmod>:
c0004e6f:	57                   	push   edi
c0004e70:	b9 02 00 00 00       	mov    ecx,0x2
c0004e75:	56                   	push   esi
c0004e76:	53                   	push   ebx
c0004e77:	83 ec 50             	sub    esp,0x50
c0004e7a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004e7e:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004e82:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e86:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e8a:	e8 02 d6 ff ff       	call   c0002491 <mount_volume>
c0004e8f:	85 c0                	test   eax,eax
c0004e91:	0f 85 81 00 00 00    	jne    c0004f18 <f_chmod+0xa9>
c0004e97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e9b:	83 ec 0c             	sub    esp,0xc
c0004e9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ea2:	68 00 02 00 00       	push   0x200
c0004ea7:	e8 74 0d 00 00       	call   c0005c20 <ff_memalloc>
c0004eac:	83 c4 10             	add    esp,0x10
c0004eaf:	89 c6                	mov    esi,eax
c0004eb1:	b8 11 00 00 00       	mov    eax,0x11
c0004eb6:	85 f6                	test   esi,esi
c0004eb8:	74 5e                	je     c0004f18 <f_chmod+0xa9>
c0004eba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebe:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ec2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ec5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ec9:	e8 0d eb ff ff       	call   c00039db <follow_path>
c0004ece:	85 c0                	test   eax,eax
c0004ed0:	75 32                	jne    c0004f04 <f_chmod+0x95>
c0004ed2:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004ed6:	b8 06 00 00 00       	mov    eax,0x6
c0004edb:	80 e2 a0             	and    dl,0xa0
c0004ede:	75 24                	jne    c0004f04 <f_chmod+0x95>
c0004ee0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004ee4:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004ee7:	31 d7                	xor    edi,edx
c0004ee9:	21 fb                	and    ebx,edi
c0004eeb:	83 e3 27             	and    ebx,0x27
c0004eee:	31 d3                	xor    ebx,edx
c0004ef0:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004ef3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004efb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004eff:	e8 71 de ff ff       	call   c0002d75 <sync_fs>
c0004f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f08:	83 ec 0c             	sub    esp,0xc
c0004f0b:	56                   	push   esi
c0004f0c:	e8 27 0d 00 00       	call   c0005c38 <ff_memfree>
c0004f11:	83 c4 10             	add    esp,0x10
c0004f14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f18:	83 c4 50             	add    esp,0x50
c0004f1b:	5b                   	pop    ebx
c0004f1c:	5e                   	pop    esi
c0004f1d:	5f                   	pop    edi
c0004f1e:	c3                   	ret    

c0004f1f <f_utime>:
c0004f1f:	56                   	push   esi
c0004f20:	b9 02 00 00 00       	mov    ecx,0x2
c0004f25:	53                   	push   ebx
c0004f26:	83 ec 54             	sub    esp,0x54
c0004f29:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f2d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f31:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f35:	e8 57 d5 ff ff       	call   c0002491 <mount_volume>
c0004f3a:	85 c0                	test   eax,eax
c0004f3c:	0f 85 87 00 00 00    	jne    c0004fc9 <f_utime+0xaa>
c0004f42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f46:	83 ec 0c             	sub    esp,0xc
c0004f49:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f4d:	68 00 02 00 00       	push   0x200
c0004f52:	e8 c9 0c 00 00       	call   c0005c20 <ff_memalloc>
c0004f57:	83 c4 10             	add    esp,0x10
c0004f5a:	89 c3                	mov    ebx,eax
c0004f5c:	b8 11 00 00 00       	mov    eax,0x11
c0004f61:	85 db                	test   ebx,ebx
c0004f63:	74 64                	je     c0004fc9 <f_utime+0xaa>
c0004f65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f6d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f74:	e8 62 ea ff ff       	call   c00039db <follow_path>
c0004f79:	85 c0                	test   eax,eax
c0004f7b:	75 38                	jne    c0004fb5 <f_utime+0x96>
c0004f7d:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004f81:	b8 06 00 00 00       	mov    eax,0x6
c0004f86:	80 e2 a0             	and    dl,0xa0
c0004f89:	75 2a                	jne    c0004fb5 <f_utime+0x96>
c0004f8b:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004f8f:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004f93:	c1 e2 10             	shl    edx,0x10
c0004f96:	09 c2                	or     edx,eax
c0004f98:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f9c:	83 c0 16             	add    eax,0x16
c0004f9f:	e8 5c ce ff ff       	call   c0001e00 <st_dword>
c0004fa4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fa8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fb0:	e8 c0 dd ff ff       	call   c0002d75 <sync_fs>
c0004fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fb9:	83 ec 0c             	sub    esp,0xc
c0004fbc:	53                   	push   ebx
c0004fbd:	e8 76 0c 00 00       	call   c0005c38 <ff_memfree>
c0004fc2:	83 c4 10             	add    esp,0x10
c0004fc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fc9:	83 c4 54             	add    esp,0x54
c0004fcc:	5b                   	pop    ebx
c0004fcd:	5e                   	pop    esi
c0004fce:	c3                   	ret    

c0004fcf <f_getlabel>:
c0004fcf:	55                   	push   ebp
c0004fd0:	31 c9                	xor    ecx,ecx
c0004fd2:	57                   	push   edi
c0004fd3:	56                   	push   esi
c0004fd4:	53                   	push   ebx
c0004fd5:	83 ec 5c             	sub    esp,0x5c
c0004fd8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004fdc:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fe0:	e8 ac d4 ff ff       	call   c0002491 <mount_volume>
c0004fe5:	89 c6                	mov    esi,eax
c0004fe7:	85 c0                	test   eax,eax
c0004fe9:	0f 85 27 01 00 00    	jne    c0005116 <f_getlabel+0x147>
c0004fef:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004ff4:	0f 84 d0 00 00 00    	je     c00050ca <f_getlabel+0xfb>
c0004ffa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ffe:	31 d2                	xor    edx,edx
c0005000:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005004:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000500c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005010:	e8 03 e3 ff ff       	call   c0003318 <dir_sdi>
c0005015:	85 c0                	test   eax,eax
c0005017:	0f 85 a1 00 00 00    	jne    c00050be <f_getlabel+0xef>
c000501d:	ba 01 00 00 00       	mov    edx,0x1
c0005022:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005026:	e8 ec e6 ff ff       	call   c0003717 <dir_read>
c000502b:	85 c0                	test   eax,eax
c000502d:	0f 85 8b 00 00 00    	jne    c00050be <f_getlabel+0xef>
c0005033:	31 db                	xor    ebx,ebx
c0005035:	31 c9                	xor    ecx,ecx
c0005037:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000503b:	8d 79 01             	lea    edi,[ecx+0x1]
c000503e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0005043:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005048:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000504c:	e8 06 ce ff ff       	call   c0001e57 <dbc_1st>
c0005051:	85 c0                	test   eax,eax
c0005053:	74 16                	je     c000506b <f_getlabel+0x9c>
c0005055:	83 ff 0b             	cmp    edi,0xb
c0005058:	74 11                	je     c000506b <f_getlabel+0x9c>
c000505a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c000505f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005063:	8d 79 02             	lea    edi,[ecx+0x2]
c0005066:	c1 e0 08             	shl    eax,0x8
c0005069:	09 c2                	or     edx,eax
c000506b:	0f b7 d2             	movzx  edx,dx
c000506e:	50                   	push   eax
c000506f:	50                   	push   eax
c0005070:	68 b5 01 00 00       	push   0x1b5
c0005075:	52                   	push   edx
c0005076:	e8 75 0c 00 00       	call   c0005cf0 <ff_oem2uni>
c000507b:	83 c4 10             	add    esp,0x10
c000507e:	0f b7 c0             	movzx  eax,ax
c0005081:	85 c0                	test   eax,eax
c0005083:	74 22                	je     c00050a7 <f_getlabel+0xd8>
c0005085:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005089:	b9 04 00 00 00       	mov    ecx,0x4
c000508e:	01 da                	add    edx,ebx
c0005090:	e8 a0 ce ff ff       	call   c0001f35 <put_utf>
c0005095:	0f b6 c0             	movzx  eax,al
c0005098:	85 c0                	test   eax,eax
c000509a:	74 0b                	je     c00050a7 <f_getlabel+0xd8>
c000509c:	01 c3                	add    ebx,eax
c000509e:	83 ff 0b             	cmp    edi,0xb
c00050a1:	74 06                	je     c00050a9 <f_getlabel+0xda>
c00050a3:	89 f9                	mov    ecx,edi
c00050a5:	eb 90                	jmp    c0005037 <f_getlabel+0x68>
c00050a7:	31 db                	xor    ebx,ebx
c00050a9:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c00050ad:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00050b0:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c00050b4:	74 14                	je     c00050ca <f_getlabel+0xfb>
c00050b6:	4b                   	dec    ebx
c00050b7:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00050ba:	74 f1                	je     c00050ad <f_getlabel+0xde>
c00050bc:	eb 0c                	jmp    c00050ca <f_getlabel+0xfb>
c00050be:	83 f8 04             	cmp    eax,0x4
c00050c1:	75 51                	jne    c0005114 <f_getlabel+0x145>
c00050c3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00050c7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00050ca:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050cf:	74 45                	je     c0005116 <f_getlabel+0x147>
c00050d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050d5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00050d8:	e8 61 d2 ff ff       	call   c000233e <move_window>
c00050dd:	89 c6                	mov    esi,eax
c00050df:	85 c0                	test   eax,eax
c00050e1:	75 33                	jne    c0005116 <f_getlabel+0x147>
c00050e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00050e7:	b8 43 00 00 00       	mov    eax,0x43
c00050ec:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00050ef:	83 f9 03             	cmp    ecx,0x3
c00050f2:	74 0f                	je     c0005103 <f_getlabel+0x134>
c00050f4:	31 c0                	xor    eax,eax
c00050f6:	83 f9 04             	cmp    ecx,0x4
c00050f9:	0f 94 c0             	sete   al
c00050fc:	48                   	dec    eax
c00050fd:	83 e0 c3             	and    eax,0xffffffc3
c0005100:	83 c0 64             	add    eax,0x64
c0005103:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005107:	e8 d8 cc ff ff       	call   c0001de4 <ld_dword>
c000510c:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0005110:	89 07                	mov    DWORD PTR [edi],eax
c0005112:	eb 02                	jmp    c0005116 <f_getlabel+0x147>
c0005114:	89 c6                	mov    esi,eax
c0005116:	83 c4 5c             	add    esp,0x5c
c0005119:	89 f0                	mov    eax,esi
c000511b:	5b                   	pop    ebx
c000511c:	5e                   	pop    esi
c000511d:	5f                   	pop    edi
c000511e:	5d                   	pop    ebp
c000511f:	c3                   	ret    

c0005120 <f_setlabel>:
c0005120:	57                   	push   edi
c0005121:	b9 02 00 00 00       	mov    ecx,0x2
c0005126:	56                   	push   esi
c0005127:	53                   	push   ebx
c0005128:	83 ec 50             	sub    esp,0x50
c000512b:	8d 54 24 04          	lea    edx,[esp+0x4]
c000512f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005133:	e8 59 d3 ff ff       	call   c0002491 <mount_volume>
c0005138:	89 c6                	mov    esi,eax
c000513a:	85 c0                	test   eax,eax
c000513c:	0f 85 65 01 00 00    	jne    c00052a7 <f_setlabel+0x187>
c0005142:	b9 0b 00 00 00       	mov    ecx,0xb
c0005147:	ba 20 00 00 00       	mov    edx,0x20
c000514c:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005150:	31 db                	xor    ebx,ebx
c0005152:	e8 c1 cc ff ff       	call   c0001e18 <mem_set>
c0005157:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000515b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000515e:	76 5d                	jbe    c00051bd <f_setlabel+0x9d>
c0005160:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005164:	e8 f4 cc ff ff       	call   c0001e5d <tchar2uni>
c0005169:	3d ff ff 00 00       	cmp    eax,0xffff
c000516e:	76 0a                	jbe    c000517a <f_setlabel+0x5a>
c0005170:	be 06 00 00 00       	mov    esi,0x6
c0005175:	e9 2d 01 00 00       	jmp    c00052a7 <f_setlabel+0x187>
c000517a:	83 ec 0c             	sub    esp,0xc
c000517d:	50                   	push   eax
c000517e:	e8 e5 0b 00 00       	call   c0005d68 <ff_wtoupper>
c0005183:	5a                   	pop    edx
c0005184:	59                   	pop    ecx
c0005185:	68 b5 01 00 00       	push   0x1b5
c000518a:	50                   	push   eax
c000518b:	e8 c0 0a 00 00       	call   c0005c50 <ff_uni2oem>
c0005190:	83 c4 10             	add    esp,0x10
c0005193:	0f b7 f0             	movzx  esi,ax
c0005196:	89 f7                	mov    edi,esi
c0005198:	85 f6                	test   esi,esi
c000519a:	74 d4                	je     c0005170 <f_setlabel+0x50>
c000519c:	89 f2                	mov    edx,esi
c000519e:	b8 f0 f4 01 c0       	mov    eax,0xc001f4f0
c00051a3:	e8 9e cc ff ff       	call   c0001e46 <chk_chr>
c00051a8:	85 c0                	test   eax,eax
c00051aa:	75 c4                	jne    c0005170 <f_setlabel+0x50>
c00051ac:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051b2:	0f 87 c9 00 00 00    	ja     c0005281 <f_setlabel+0x161>
c00051b8:	e9 e0 00 00 00       	jmp    c000529d <f_setlabel+0x17d>
c00051bd:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051c2:	74 ac                	je     c0005170 <f_setlabel+0x50>
c00051c4:	85 db                	test   ebx,ebx
c00051c6:	74 0e                	je     c00051d6 <f_setlabel+0xb6>
c00051c8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051cb:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051d0:	75 04                	jne    c00051d6 <f_setlabel+0xb6>
c00051d2:	89 c3                	mov    ebx,eax
c00051d4:	eb ee                	jmp    c00051c4 <f_setlabel+0xa4>
c00051d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00051da:	31 d2                	xor    edx,edx
c00051dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051e0:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051e8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051ec:	e8 27 e1 ff ff       	call   c0003318 <dir_sdi>
c00051f1:	89 c6                	mov    esi,eax
c00051f3:	85 c0                	test   eax,eax
c00051f5:	0f 85 ac 00 00 00    	jne    c00052a7 <f_setlabel+0x187>
c00051fb:	ba 01 00 00 00       	mov    edx,0x1
c0005200:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005204:	e8 0e e5 ff ff       	call   c0003717 <dir_read>
c0005209:	85 c0                	test   eax,eax
c000520b:	75 18                	jne    c0005225 <f_setlabel+0x105>
c000520d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005211:	85 db                	test   ebx,ebx
c0005213:	74 0b                	je     c0005220 <f_setlabel+0x100>
c0005215:	b9 0b 00 00 00       	mov    ecx,0xb
c000521a:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000521e:	eb 47                	jmp    c0005267 <f_setlabel+0x147>
c0005220:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005223:	eb 47                	jmp    c000526c <f_setlabel+0x14c>
c0005225:	83 f8 04             	cmp    eax,0x4
c0005228:	75 53                	jne    c000527d <f_setlabel+0x15d>
c000522a:	85 db                	test   ebx,ebx
c000522c:	74 79                	je     c00052a7 <f_setlabel+0x187>
c000522e:	ba 01 00 00 00       	mov    edx,0x1
c0005233:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005237:	e8 76 e4 ff ff       	call   c00036b2 <dir_alloc>
c000523c:	89 c6                	mov    esi,eax
c000523e:	85 c0                	test   eax,eax
c0005240:	75 65                	jne    c00052a7 <f_setlabel+0x187>
c0005242:	b9 20 00 00 00       	mov    ecx,0x20
c0005247:	31 d2                	xor    edx,edx
c0005249:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000524d:	e8 c6 cb ff ff       	call   c0001e18 <mem_set>
c0005252:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005256:	b9 0b 00 00 00       	mov    ecx,0xb
c000525b:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000525f:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005263:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005267:	e8 97 cb ff ff       	call   c0001e03 <mem_cpy>
c000526c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005270:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005278:	e8 f8 da ff ff       	call   c0002d75 <sync_fs>
c000527d:	89 c6                	mov    esi,eax
c000527f:	eb 26                	jmp    c00052a7 <f_setlabel+0x187>
c0005281:	83 fb 09             	cmp    ebx,0x9
c0005284:	0f 87 e6 fe ff ff    	ja     c0005170 <f_setlabel+0x50>
c000528a:	89 f0                	mov    eax,esi
c000528c:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005290:	43                   	inc    ebx
c0005291:	89 f8                	mov    eax,edi
c0005293:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005297:	43                   	inc    ebx
c0005298:	e9 ba fe ff ff       	jmp    c0005157 <f_setlabel+0x37>
c000529d:	83 fb 0a             	cmp    ebx,0xa
c00052a0:	76 ef                	jbe    c0005291 <f_setlabel+0x171>
c00052a2:	e9 c9 fe ff ff       	jmp    c0005170 <f_setlabel+0x50>
c00052a7:	83 c4 50             	add    esp,0x50
c00052aa:	89 f0                	mov    eax,esi
c00052ac:	5b                   	pop    ebx
c00052ad:	5e                   	pop    esi
c00052ae:	5f                   	pop    edi
c00052af:	c3                   	ret    

c00052b0 <f_expand>:
c00052b0:	55                   	push   ebp
c00052b1:	57                   	push   edi
c00052b2:	56                   	push   esi
c00052b3:	53                   	push   ebx
c00052b4:	83 ec 2c             	sub    esp,0x2c
c00052b7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052bb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052c7:	89 d8                	mov    eax,ebx
c00052c9:	e8 c7 cf ff ff       	call   c0002295 <validate>
c00052ce:	89 c6                	mov    esi,eax
c00052d0:	85 c0                	test   eax,eax
c00052d2:	0f 85 3b 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052d8:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00052dc:	85 f6                	test   esi,esi
c00052de:	0f 85 2f 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052e4:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00052e9:	75 0a                	jne    c00052f5 <f_expand+0x45>
c00052eb:	be 07 00 00 00       	mov    esi,0x7
c00052f0:	e9 1e 01 00 00       	jmp    c0005413 <f_expand+0x163>
c00052f5:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00052f9:	75 f0                	jne    c00052eb <f_expand+0x3b>
c00052fb:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00052ff:	74 ea                	je     c00052eb <f_expand+0x3b>
c0005301:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0005305:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0005309:	c1 e1 09             	shl    ecx,0x9
c000530c:	8d 41 ff             	lea    eax,[ecx-0x1]
c000530f:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005313:	0f 95 c0             	setne  al
c0005316:	31 d2                	xor    edx,edx
c0005318:	0f b6 c0             	movzx  eax,al
c000531b:	89 c7                	mov    edi,eax
c000531d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005321:	f7 f1                	div    ecx
c0005323:	01 f8                	add    eax,edi
c0005325:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005328:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000532c:	83 ff 01             	cmp    edi,0x1
c000532f:	76 05                	jbe    c0005336 <f_expand+0x86>
c0005331:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0005334:	77 05                	ja     c000533b <f_expand+0x8b>
c0005336:	bf 02 00 00 00       	mov    edi,0x2
c000533b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000533e:	89 fd                	mov    ebp,edi
c0005340:	31 c9                	xor    ecx,ecx
c0005342:	89 ea                	mov    edx,ebp
c0005344:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005348:	8b 03                	mov    eax,DWORD PTR [ebx]
c000534a:	45                   	inc    ebp
c000534b:	e8 c4 de ff ff       	call   c0003214 <get_fat.isra.2>
c0005350:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005354:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005358:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000535b:	77 05                	ja     c0005362 <f_expand+0xb2>
c000535d:	bd 02 00 00 00       	mov    ebp,0x2
c0005362:	83 f8 01             	cmp    eax,0x1
c0005365:	74 20                	je     c0005387 <f_expand+0xd7>
c0005367:	83 f8 ff             	cmp    eax,0xffffffff
c000536a:	74 25                	je     c0005391 <f_expand+0xe1>
c000536c:	85 c0                	test   eax,eax
c000536e:	75 09                	jne    c0005379 <f_expand+0xc9>
c0005370:	41                   	inc    ecx
c0005371:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005375:	75 07                	jne    c000537e <f_expand+0xce>
c0005377:	eb 1f                	jmp    c0005398 <f_expand+0xe8>
c0005379:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000537c:	31 c9                	xor    ecx,ecx
c000537e:	39 fd                	cmp    ebp,edi
c0005380:	75 c0                	jne    c0005342 <f_expand+0x92>
c0005382:	e9 64 ff ff ff       	jmp    c00052eb <f_expand+0x3b>
c0005387:	be 02 00 00 00       	mov    esi,0x2
c000538c:	e9 82 00 00 00       	jmp    c0005413 <f_expand+0x163>
c0005391:	be 01 00 00 00       	mov    esi,0x1
c0005396:	eb 7b                	jmp    c0005413 <f_expand+0x163>
c0005398:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000539d:	74 2b                	je     c00053ca <f_expand+0x11a>
c000539f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053a2:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053a6:	85 ed                	test   ebp,ebp
c00053a8:	74 24                	je     c00053ce <f_expand+0x11e>
c00053aa:	83 c9 ff             	or     ecx,0xffffffff
c00053ad:	83 fd 01             	cmp    ebp,0x1
c00053b0:	74 03                	je     c00053b5 <f_expand+0x105>
c00053b2:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053b5:	89 fa                	mov    edx,edi
c00053b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053bb:	e8 c2 d3 ff ff       	call   c0002782 <put_fat>
c00053c0:	85 c0                	test   eax,eax
c00053c2:	75 4d                	jne    c0005411 <f_expand+0x161>
c00053c4:	89 f8                	mov    eax,edi
c00053c6:	4d                   	dec    ebp
c00053c7:	47                   	inc    edi
c00053c8:	eb dc                	jmp    c00053a6 <f_expand+0xf6>
c00053ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053cd:	48                   	dec    eax
c00053ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053d2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053d7:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00053da:	74 37                	je     c0005413 <f_expand+0x163>
c00053dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053df:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00053e2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00053e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00053ec:	83 c8 40             	or     eax,0x40
c00053ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00053f2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00053f5:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00053f8:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00053fb:	39 c8                	cmp    eax,ecx
c00053fd:	77 14                	ja     c0005413 <f_expand+0x163>
c00053ff:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005403:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005406:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005409:	83 c8 01             	or     eax,0x1
c000540c:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000540f:	eb 02                	jmp    c0005413 <f_expand+0x163>
c0005411:	89 c6                	mov    esi,eax
c0005413:	83 c4 2c             	add    esp,0x2c
c0005416:	89 f0                	mov    eax,esi
c0005418:	5b                   	pop    ebx
c0005419:	5e                   	pop    esi
c000541a:	5f                   	pop    edi
c000541b:	5d                   	pop    ebp
c000541c:	c3                   	ret    

c000541d <f_mkfs>:
c000541d:	55                   	push   ebp
c000541e:	57                   	push   edi
c000541f:	56                   	push   esi
c0005420:	be 0b 00 00 00       	mov    esi,0xb
c0005425:	53                   	push   ebx
c0005426:	83 ec 5c             	sub    esp,0x5c
c0005429:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000542d:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c0005431:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005435:	e8 0e ce ff ff       	call   c0002248 <get_ldnumber>
c000543a:	85 c0                	test   eax,eax
c000543c:	0f 88 d1 07 00 00    	js     c0005c13 <f_mkfs+0x7f6>
c0005442:	8b 14 85 a0 44 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbb60]
c0005449:	85 d2                	test   edx,edx
c000544b:	74 03                	je     c0005450 <f_mkfs+0x33>
c000544d:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005450:	85 db                	test   ebx,ebx
c0005452:	75 05                	jne    c0005459 <f_mkfs+0x3c>
c0005454:	bb e0 f4 01 c0       	mov    ebx,0xc001f4e0
c0005459:	83 ec 0c             	sub    esp,0xc
c000545c:	0f b6 c0             	movzx  eax,al
c000545f:	be 03 00 00 00       	mov    esi,0x3
c0005464:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005468:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000546c:	e8 18 c9 ff ff       	call   c0001d89 <disk_initialize>
c0005471:	83 c4 10             	add    esp,0x10
c0005474:	a8 01                	test   al,0x1
c0005476:	0f 85 97 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c000547c:	be 0a 00 00 00       	mov    esi,0xa
c0005481:	a8 04                	test   al,0x4
c0005483:	0f 85 8a 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c0005489:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000548c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005490:	85 c0                	test   eax,eax
c0005492:	75 20                	jne    c00054b4 <f_mkfs+0x97>
c0005494:	51                   	push   ecx
c0005495:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005499:	50                   	push   eax
c000549a:	6a 03                	push   0x3
c000549c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054a0:	e8 13 c9 ff ff       	call   c0001db8 <disk_ioctl>
c00054a5:	83 c4 10             	add    esp,0x10
c00054a8:	85 c0                	test   eax,eax
c00054aa:	74 08                	je     c00054b4 <f_mkfs+0x97>
c00054ac:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054b4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054b8:	8d 42 ff             	lea    eax,[edx-0x1]
c00054bb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054c0:	77 04                	ja     c00054c6 <f_mkfs+0xa9>
c00054c2:	85 c2                	test   edx,eax
c00054c4:	74 08                	je     c00054ce <f_mkfs+0xb1>
c00054c6:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054ce:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054d1:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00054d9:	48                   	dec    eax
c00054da:	3c 01                	cmp    al,0x1
c00054dc:	76 05                	jbe    c00054e3 <f_mkfs+0xc6>
c00054de:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00054e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00054ea:	48                   	dec    eax
c00054eb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054f0:	77 07                	ja     c00054f9 <f_mkfs+0xdc>
c00054f2:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00054f7:	74 08                	je     c0005501 <f_mkfs+0xe4>
c00054f9:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c0005501:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005504:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000550a:	77 07                	ja     c0005513 <f_mkfs+0xf6>
c000550c:	8d 47 ff             	lea    eax,[edi-0x1]
c000550f:	85 f8                	test   eax,edi
c0005511:	74 02                	je     c0005515 <f_mkfs+0xf8>
c0005513:	31 ff                	xor    edi,edi
c0005515:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000551d:	77 0a                	ja     c0005529 <f_mkfs+0x10c>
c000551f:	be 11 00 00 00       	mov    esi,0x11
c0005524:	e9 ea 06 00 00       	jmp    c0005c13 <f_mkfs+0x7f6>
c0005529:	8b 33                	mov    esi,DWORD PTR [ebx]
c000552b:	85 ed                	test   ebp,ebp
c000552d:	89 eb                	mov    ebx,ebp
c000552f:	75 1e                	jne    c000554f <f_mkfs+0x132>
c0005531:	83 ec 0c             	sub    esp,0xc
c0005534:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c000553b:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005540:	50                   	push   eax
c0005541:	e8 da 06 00 00       	call   c0005c20 <ff_memalloc>
c0005546:	83 c4 10             	add    esp,0x10
c0005549:	89 c3                	mov    ebx,eax
c000554b:	85 c0                	test   eax,eax
c000554d:	74 d0                	je     c000551f <f_mkfs+0x102>
c000554f:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005557:	52                   	push   edx
c0005558:	8d 44 24 48          	lea    eax,[esp+0x48]
c000555c:	50                   	push   eax
c000555d:	6a 01                	push   0x1
c000555f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005563:	e8 50 c8 ff ff       	call   c0001db8 <disk_ioctl>
c0005568:	83 c4 10             	add    esp,0x10
c000556b:	85 c0                	test   eax,eax
c000556d:	0f 85 49 06 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005573:	89 f0                	mov    eax,esi
c0005575:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000557d:	83 e0 08             	and    eax,0x8
c0005580:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0005584:	75 18                	jne    c000559e <f_mkfs+0x181>
c0005586:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000558a:	83 f8 3f             	cmp    eax,0x3f
c000558d:	76 0f                	jbe    c000559e <f_mkfs+0x181>
c000558f:	83 e8 3f             	sub    eax,0x3f
c0005592:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000559a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000559e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055a6:	83 f8 7f             	cmp    eax,0x7f
c00055a9:	0f 86 5b 02 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c00055af:	b9 80 00 00 00       	mov    ecx,0x80
c00055b4:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055ba:	77 05                	ja     c00055c1 <f_mkfs+0x1a4>
c00055bc:	c1 ef 09             	shr    edi,0x9
c00055bf:	89 f9                	mov    ecx,edi
c00055c1:	89 f0                	mov    eax,esi
c00055c3:	89 f7                	mov    edi,esi
c00055c5:	83 e0 01             	and    eax,0x1
c00055c8:	83 e7 02             	and    edi,0x2
c00055cb:	0f b6 c0             	movzx  eax,al
c00055ce:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00055d2:	74 0a                	je     c00055de <f_mkfs+0x1c1>
c00055d4:	85 c0                	test   eax,eax
c00055d6:	0f 84 4f 01 00 00    	je     c000572b <f_mkfs+0x30e>
c00055dc:	eb 37                	jmp    c0005615 <f_mkfs+0x1f8>
c00055de:	be 13 00 00 00       	mov    esi,0x13
c00055e3:	85 c0                	test   eax,eax
c00055e5:	75 2e                	jne    c0005615 <f_mkfs+0x1f8>
c00055e7:	e9 e7 05 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c00055ec:	83 f8 02             	cmp    eax,0x2
c00055ef:	0f 85 0d 02 00 00    	jne    c0005802 <f_mkfs+0x3e5>
c00055f5:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00055fb:	0f 86 e4 01 00 00    	jbe    c00057e5 <f_mkfs+0x3c8>
c0005601:	85 c9                	test   ecx,ecx
c0005603:	0f 85 dc 05 00 00    	jne    c0005be5 <f_mkfs+0x7c8>
c0005609:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000560c:	83 f9 40             	cmp    ecx,0x40
c000560f:	0f 87 e0 05 00 00    	ja     c0005bf5 <f_mkfs+0x7d8>
c0005615:	89 cf                	mov    edi,ecx
c0005617:	85 c9                	test   ecx,ecx
c0005619:	75 1c                	jne    c0005637 <f_mkfs+0x21a>
c000561b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000561f:	b8 c0 f4 01 c0       	mov    eax,0xc001f4c0
c0005624:	c1 ee 0c             	shr    esi,0xc
c0005627:	bf 01 00 00 00       	mov    edi,0x1
c000562c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000562f:	85 d2                	test   edx,edx
c0005631:	0f 85 63 01 00 00    	jne    c000579a <f_mkfs+0x37d>
c0005637:	31 d2                	xor    edx,edx
c0005639:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000563d:	f7 f7                	div    edi
c000563f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005644:	0f 86 62 01 00 00    	jbe    c00057ac <f_mkfs+0x38f>
c000564a:	83 c0 02             	add    eax,0x2
c000564d:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c0005652:	01 c0                	add    eax,eax
c0005654:	05 ff 01 00 00       	add    eax,0x1ff
c0005659:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005661:	c1 e8 09             	shr    eax,0x9
c0005664:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005668:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000566c:	c1 e0 05             	shl    eax,0x5
c000566f:	c1 e8 09             	shr    eax,0x9
c0005672:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005676:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000567b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000567f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005683:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005687:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000568b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000568f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005694:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005698:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000569c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056a4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056a8:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056ac:	f7 d8                	neg    eax
c00056ae:	21 c6                	and    esi,eax
c00056b0:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056b5:	29 d6                	sub    esi,edx
c00056b7:	83 f8 03             	cmp    eax,0x3
c00056ba:	0f 85 ff 00 00 00    	jne    c00057bf <f_mkfs+0x3a2>
c00056c0:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00056c4:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00056c8:	89 f8                	mov    eax,edi
c00056ca:	c1 e0 04             	shl    eax,0x4
c00056cd:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00056d1:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00056d5:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00056d9:	0f 82 2b 01 00 00    	jb     c000580a <f_mkfs+0x3ed>
c00056df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00056e7:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00056eb:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00056f0:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00056f4:	29 d0                	sub    eax,edx
c00056f6:	31 d2                	xor    edx,edx
c00056f8:	f7 f7                	div    edi
c00056fa:	89 c6                	mov    esi,eax
c00056fc:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005701:	83 f8 03             	cmp    eax,0x3
c0005704:	0f 85 e2 fe ff ff    	jne    c00055ec <f_mkfs+0x1cf>
c000570a:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005710:	0f 87 03 01 00 00    	ja     c0005819 <f_mkfs+0x3fc>
c0005716:	85 c9                	test   ecx,ecx
c0005718:	0f 85 ec 00 00 00    	jne    c000580a <f_mkfs+0x3ed>
c000571e:	83 ff 01             	cmp    edi,0x1
c0005721:	0f 86 e3 00 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c0005727:	d1 ef                	shr    edi,1
c0005729:	89 f9                	mov    ecx,edi
c000572b:	89 ce                	mov    esi,ecx
c000572d:	85 c9                	test   ecx,ecx
c000572f:	75 25                	jne    c0005756 <f_mkfs+0x339>
c0005731:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005735:	b8 d0 f4 01 c0       	mov    eax,0xc001f4d0
c000573a:	c1 ee 11             	shr    esi,0x11
c000573d:	b9 01 00 00 00       	mov    ecx,0x1
c0005742:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005745:	85 d2                	test   edx,edx
c0005747:	74 0b                	je     c0005754 <f_mkfs+0x337>
c0005749:	83 c0 02             	add    eax,0x2
c000574c:	39 f2                	cmp    edx,esi
c000574e:	77 04                	ja     c0005754 <f_mkfs+0x337>
c0005750:	01 c9                	add    ecx,ecx
c0005752:	eb ee                	jmp    c0005742 <f_mkfs+0x325>
c0005754:	31 f6                	xor    esi,esi
c0005756:	31 d2                	xor    edx,edx
c0005758:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000575c:	f7 f1                	div    ecx
c000575e:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005765:	2d f6 ff 00 00       	sub    eax,0xfff6
c000576a:	c1 ea 09             	shr    edx,0x9
c000576d:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005772:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005776:	0f 87 8e 00 00 00    	ja     c000580a <f_mkfs+0x3ed>
c000577c:	89 cf                	mov    edi,ecx
c000577e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0005786:	89 f1                	mov    ecx,esi
c0005788:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005790:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c0005795:	e9 dc fe ff ff       	jmp    c0005676 <f_mkfs+0x259>
c000579a:	83 c0 02             	add    eax,0x2
c000579d:	39 f2                	cmp    edx,esi
c000579f:	0f 87 92 fe ff ff    	ja     c0005637 <f_mkfs+0x21a>
c00057a5:	01 ff                	add    edi,edi
c00057a7:	e9 80 fe ff ff       	jmp    c000562c <f_mkfs+0x20f>
c00057ac:	8d 04 40             	lea    eax,[eax+eax*2]
c00057af:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057b4:	40                   	inc    eax
c00057b5:	d1 e8                	shr    eax,1
c00057b7:	83 c0 03             	add    eax,0x3
c00057ba:	e9 95 fe ff ff       	jmp    c0005654 <f_mkfs+0x237>
c00057bf:	31 d2                	xor    edx,edx
c00057c1:	89 f0                	mov    eax,esi
c00057c3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057c7:	85 d2                	test   edx,edx
c00057c9:	74 09                	je     c00057d4 <f_mkfs+0x3b7>
c00057cb:	4e                   	dec    esi
c00057cc:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00057d0:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00057d4:	89 f0                	mov    eax,esi
c00057d6:	31 d2                	xor    edx,edx
c00057d8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057dc:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00057e0:	e9 e3 fe ff ff       	jmp    c00056c8 <f_mkfs+0x2ab>
c00057e5:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00057eb:	77 2c                	ja     c0005819 <f_mkfs+0x3fc>
c00057ed:	85 c9                	test   ecx,ecx
c00057ef:	75 19                	jne    c000580a <f_mkfs+0x3ed>
c00057f1:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f4:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00057fa:	0f 86 15 fe ff ff    	jbe    c0005615 <f_mkfs+0x1f8>
c0005800:	eb 08                	jmp    c000580a <f_mkfs+0x3ed>
c0005802:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005808:	76 0a                	jbe    c0005814 <f_mkfs+0x3f7>
c000580a:	be 0e 00 00 00       	mov    esi,0xe
c000580f:	e9 bf 03 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c0005814:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005819:	31 d2                	xor    edx,edx
c000581b:	b9 00 02 00 00       	mov    ecx,0x200
c0005820:	89 d8                	mov    eax,ebx
c0005822:	e8 f1 c5 ff ff       	call   c0001e18 <mem_set>
c0005827:	b9 0b 00 00 00       	mov    ecx,0xb
c000582c:	ba 72 f4 01 c0       	mov    edx,0xc001f472
c0005831:	89 d8                	mov    eax,ebx
c0005833:	e8 cb c5 ff ff       	call   c0001e03 <mem_cpy>
c0005838:	8d 43 0b             	lea    eax,[ebx+0xb]
c000583b:	ba 00 02 00 00       	mov    edx,0x200
c0005840:	e8 b7 c5 ff ff       	call   c0001dfc <st_word>
c0005845:	89 f8                	mov    eax,edi
c0005847:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000584c:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c000584f:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005852:	e8 a5 c5 ff ff       	call   c0001dfc <st_word>
c0005857:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000585b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000585e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005863:	83 f8 03             	cmp    eax,0x3
c0005866:	75 08                	jne    c0005870 <f_mkfs+0x453>
c0005868:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005870:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005874:	8d 43 11             	lea    eax,[ebx+0x11]
c0005877:	e8 80 c5 ff ff       	call   c0001dfc <st_word>
c000587c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005880:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005886:	77 0a                	ja     c0005892 <f_mkfs+0x475>
c0005888:	8d 43 13             	lea    eax,[ebx+0x13]
c000588b:	e8 6c c5 ff ff       	call   c0001dfc <st_word>
c0005890:	eb 08                	jmp    c000589a <f_mkfs+0x47d>
c0005892:	8d 43 20             	lea    eax,[ebx+0x20]
c0005895:	e8 66 c5 ff ff       	call   c0001e00 <st_dword>
c000589a:	8d 43 18             	lea    eax,[ebx+0x18]
c000589d:	ba 3f 00 00 00       	mov    edx,0x3f
c00058a2:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058a6:	e8 51 c5 ff ff       	call   c0001dfc <st_word>
c00058ab:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058ae:	ba ff 00 00 00       	mov    edx,0xff
c00058b3:	e8 44 c5 ff ff       	call   c0001dfc <st_word>
c00058b8:	8d 43 1c             	lea    eax,[ebx+0x1c]
c00058bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bf:	e8 3c c5 ff ff       	call   c0001e00 <st_dword>
c00058c4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058c9:	83 f8 03             	cmp    eax,0x3
c00058cc:	75 57                	jne    c0005925 <f_mkfs+0x508>
c00058ce:	8d 43 43             	lea    eax,[ebx+0x43]
c00058d1:	ba 00 00 21 50       	mov    edx,0x50210000
c00058d6:	e8 25 c5 ff ff       	call   c0001e00 <st_dword>
c00058db:	8d 43 24             	lea    eax,[ebx+0x24]
c00058de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058e2:	e8 19 c5 ff ff       	call   c0001e00 <st_dword>
c00058e7:	8d 43 2c             	lea    eax,[ebx+0x2c]
c00058ea:	ba 02 00 00 00       	mov    edx,0x2
c00058ef:	e8 0c c5 ff ff       	call   c0001e00 <st_dword>
c00058f4:	8d 43 30             	lea    eax,[ebx+0x30]
c00058f7:	ba 01 00 00 00       	mov    edx,0x1
c00058fc:	e8 fb c4 ff ff       	call   c0001dfc <st_word>
c0005901:	8d 43 32             	lea    eax,[ebx+0x32]
c0005904:	ba 06 00 00 00       	mov    edx,0x6
c0005909:	e8 ee c4 ff ff       	call   c0001dfc <st_word>
c000590e:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005912:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005916:	8d 43 47             	lea    eax,[ebx+0x47]
c0005919:	b9 13 00 00 00       	mov    ecx,0x13
c000591e:	ba 7e f4 01 c0       	mov    edx,0xc001f47e
c0005923:	eb 2f                	jmp    c0005954 <f_mkfs+0x537>
c0005925:	8d 43 27             	lea    eax,[ebx+0x27]
c0005928:	ba 00 00 21 50       	mov    edx,0x50210000
c000592d:	e8 ce c4 ff ff       	call   c0001e00 <st_dword>
c0005932:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005937:	8d 43 16             	lea    eax,[ebx+0x16]
c000593a:	e8 bd c4 ff ff       	call   c0001dfc <st_word>
c000593f:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005943:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005947:	8d 43 2b             	lea    eax,[ebx+0x2b]
c000594a:	b9 13 00 00 00       	mov    ecx,0x13
c000594f:	ba 92 f4 01 c0       	mov    edx,0xc001f492
c0005954:	e8 aa c4 ff ff       	call   c0001e03 <mem_cpy>
c0005959:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000595f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005964:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005968:	e8 8f c4 ff ff       	call   c0001dfc <st_word>
c000596d:	6a 01                	push   0x1
c000596f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005973:	53                   	push   ebx
c0005974:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005978:	e8 25 c4 ff ff       	call   c0001da2 <disk_write>
c000597d:	83 c4 10             	add    esp,0x10
c0005980:	85 c0                	test   eax,eax
c0005982:	0f 85 34 02 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005988:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000598d:	83 f8 03             	cmp    eax,0x3
c0005990:	0f 85 98 00 00 00    	jne    c0005a2e <f_mkfs+0x611>
c0005996:	6a 01                	push   0x1
c0005998:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000599c:	83 c0 06             	add    eax,0x6
c000599f:	50                   	push   eax
c00059a0:	53                   	push   ebx
c00059a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059a5:	e8 f8 c3 ff ff       	call   c0001da2 <disk_write>
c00059aa:	b9 00 02 00 00       	mov    ecx,0x200
c00059af:	31 d2                	xor    edx,edx
c00059b1:	89 d8                	mov    eax,ebx
c00059b3:	e8 60 c4 ff ff       	call   c0001e18 <mem_set>
c00059b8:	ba 52 52 61 41       	mov    edx,0x41615252
c00059bd:	89 d8                	mov    eax,ebx
c00059bf:	e8 3c c4 ff ff       	call   c0001e00 <st_dword>
c00059c4:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c00059ca:	ba 72 72 41 61       	mov    edx,0x61417272
c00059cf:	e8 2c c4 ff ff       	call   c0001e00 <st_dword>
c00059d4:	8d 56 ff             	lea    edx,[esi-0x1]
c00059d7:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c00059dd:	e8 1e c4 ff ff       	call   c0001e00 <st_dword>
c00059e2:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c00059e8:	ba 02 00 00 00       	mov    edx,0x2
c00059ed:	e8 0e c4 ff ff       	call   c0001e00 <st_dword>
c00059f2:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059f7:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059fd:	e8 fa c3 ff ff       	call   c0001dfc <st_word>
c0005a02:	6a 01                	push   0x1
c0005a04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005a08:	83 c0 07             	add    eax,0x7
c0005a0b:	50                   	push   eax
c0005a0c:	53                   	push   ebx
c0005a0d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a11:	e8 8c c3 ff ff       	call   c0001da2 <disk_write>
c0005a16:	83 c4 20             	add    esp,0x20
c0005a19:	6a 01                	push   0x1
c0005a1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a1f:	40                   	inc    eax
c0005a20:	50                   	push   eax
c0005a21:	53                   	push   ebx
c0005a22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a26:	e8 77 c3 ff ff       	call   c0001da2 <disk_write>
c0005a2b:	83 c4 10             	add    esp,0x10
c0005a2e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a32:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a36:	c1 e8 09             	shr    eax,0x9
c0005a39:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a43:	31 d2                	xor    edx,edx
c0005a45:	89 d8                	mov    eax,ebx
c0005a47:	e8 cc c3 ff ff       	call   c0001e18 <mem_set>
c0005a4c:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a51:	31 c9                	xor    ecx,ecx
c0005a53:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005a5b:	83 f8 01             	cmp    eax,0x1
c0005a5e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005a62:	0f 94 c1             	sete   cl
c0005a65:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005a69:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005a6d:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005a75:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005a7d:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005a82:	75 21                	jne    c0005aa5 <f_mkfs+0x688>
c0005a84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005a89:	89 d8                	mov    eax,ebx
c0005a8b:	e8 70 c3 ff ff       	call   c0001e00 <st_dword>
c0005a90:	8d 43 04             	lea    eax,[ebx+0x4]
c0005a93:	83 ca ff             	or     edx,0xffffffff
c0005a96:	e8 65 c3 ff ff       	call   c0001e00 <st_dword>
c0005a9b:	8d 43 08             	lea    eax,[ebx+0x8]
c0005a9e:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005aa3:	eb 06                	jmp    c0005aab <f_mkfs+0x68e>
c0005aa5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005aa9:	89 d8                	mov    eax,ebx
c0005aab:	e8 50 c3 ff ff       	call   c0001e00 <st_dword>
c0005ab0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ab4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ab8:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005abc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac0:	39 ce                	cmp    esi,ecx
c0005ac2:	76 02                	jbe    c0005ac6 <f_mkfs+0x6a9>
c0005ac4:	89 ce                	mov    esi,ecx
c0005ac6:	56                   	push   esi
c0005ac7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005acb:	53                   	push   ebx
c0005acc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ad0:	e8 cd c2 ff ff       	call   c0001da2 <disk_write>
c0005ad5:	83 c4 10             	add    esp,0x10
c0005ad8:	85 c0                	test   eax,eax
c0005ada:	0f 85 dc 00 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005ae0:	31 d2                	xor    edx,edx
c0005ae2:	b9 00 02 00 00       	mov    ecx,0x200
c0005ae7:	89 d8                	mov    eax,ebx
c0005ae9:	e8 2a c3 ff ff       	call   c0001e18 <mem_set>
c0005aee:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005af2:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005af6:	75 c0                	jne    c0005ab8 <f_mkfs+0x69b>
c0005af8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005afc:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005b04:	40                   	inc    eax
c0005b05:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b09:	0f 87 6e ff ff ff    	ja     c0005a7d <f_mkfs+0x660>
c0005b0f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b14:	83 f8 03             	cmp    eax,0x3
c0005b17:	74 04                	je     c0005b1d <f_mkfs+0x700>
c0005b19:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005b1d:	89 fe                	mov    esi,edi
c0005b1f:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b23:	76 04                	jbe    c0005b29 <f_mkfs+0x70c>
c0005b25:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b29:	56                   	push   esi
c0005b2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b2e:	53                   	push   ebx
c0005b2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b33:	e8 6a c2 ff ff       	call   c0001da2 <disk_write>
c0005b38:	83 c4 10             	add    esp,0x10
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	75 7d                	jne    c0005bbc <f_mkfs+0x79f>
c0005b3f:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b43:	29 f7                	sub    edi,esi
c0005b45:	75 d6                	jne    c0005b1d <f_mkfs+0x700>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b51:	83 f8 03             	cmp    eax,0x3
c0005b54:	74 1e                	je     c0005b74 <f_mkfs+0x757>
c0005b56:	b9 06 00 00 00       	mov    ecx,0x6
c0005b5b:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b63:	77 0f                	ja     c0005b74 <f_mkfs+0x757>
c0005b65:	b9 04 00 00 00       	mov    ecx,0x4
c0005b6a:	83 f8 02             	cmp    eax,0x2
c0005b6d:	74 05                	je     c0005b74 <f_mkfs+0x757>
c0005b6f:	b9 01 00 00 00       	mov    ecx,0x1
c0005b74:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005b79:	75 2a                	jne    c0005ba5 <f_mkfs+0x788>
c0005b7b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005b7f:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005b87:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005b8b:	83 ec 0c             	sub    esp,0xc
c0005b8e:	53                   	push   ebx
c0005b8f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005b93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b97:	e8 89 d2 ff ff       	call   c0002e25 <create_partition>
c0005b9c:	83 c4 10             	add    esp,0x10
c0005b9f:	89 c6                	mov    esi,eax
c0005ba1:	85 c0                	test   eax,eax
c0005ba3:	75 2e                	jne    c0005bd3 <f_mkfs+0x7b6>
c0005ba5:	31 f6                	xor    esi,esi
c0005ba7:	50                   	push   eax
c0005ba8:	6a 00                	push   0x0
c0005baa:	6a 00                	push   0x0
c0005bac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bb0:	e8 03 c2 ff ff       	call   c0001db8 <disk_ioctl>
c0005bb5:	83 c4 10             	add    esp,0x10
c0005bb8:	85 c0                	test   eax,eax
c0005bba:	74 17                	je     c0005bd3 <f_mkfs+0x7b6>
c0005bbc:	85 ed                	test   ebp,ebp
c0005bbe:	75 0c                	jne    c0005bcc <f_mkfs+0x7af>
c0005bc0:	83 ec 0c             	sub    esp,0xc
c0005bc3:	53                   	push   ebx
c0005bc4:	e8 6f 00 00 00       	call   c0005c38 <ff_memfree>
c0005bc9:	83 c4 10             	add    esp,0x10
c0005bcc:	be 01 00 00 00       	mov    esi,0x1
c0005bd1:	eb 40                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005bd3:	85 ed                	test   ebp,ebp
c0005bd5:	75 3c                	jne    c0005c13 <f_mkfs+0x7f6>
c0005bd7:	83 ec 0c             	sub    esp,0xc
c0005bda:	53                   	push   ebx
c0005bdb:	e8 58 00 00 00       	call   c0005c38 <ff_memfree>
c0005be0:	83 c4 10             	add    esp,0x10
c0005be3:	eb 2e                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005be5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bea:	0f 85 3b fb ff ff    	jne    c000572b <f_mkfs+0x30e>
c0005bf0:	e9 15 fc ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005bf5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bfa:	0f 85 31 fb ff ff    	jne    c0005731 <f_mkfs+0x314>
c0005c00:	89 cf                	mov    edi,ecx
c0005c02:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c08:	0f 86 29 fa ff ff    	jbe    c0005637 <f_mkfs+0x21a>
c0005c0e:	e9 f7 fb ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005c13:	83 c4 5c             	add    esp,0x5c
c0005c16:	89 f0                	mov    eax,esi
c0005c18:	5b                   	pop    ebx
c0005c19:	5e                   	pop    esi
c0005c1a:	5f                   	pop    edi
c0005c1b:	5d                   	pop    ebp
c0005c1c:	c3                   	ret    
c0005c1d:	66 90                	xchg   ax,ax
c0005c1f:	90                   	nop

c0005c20 <ff_memalloc>:
c0005c20:	83 ec 0c             	sub    esp,0xc
c0005c23:	83 ec 0c             	sub    esp,0xc
c0005c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c2a:	e8 7f 1e 00 00       	call   c0007aae <malloc>
c0005c2f:	83 c4 10             	add    esp,0x10
c0005c32:	83 c4 0c             	add    esp,0xc
c0005c35:	c3                   	ret    
c0005c36:	66 90                	xchg   ax,ax

c0005c38 <ff_memfree>:
c0005c38:	83 ec 0c             	sub    esp,0xc
c0005c3b:	83 ec 0c             	sub    esp,0xc
c0005c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c42:	e8 77 1e 00 00       	call   c0007abe <free>
c0005c47:	83 c4 10             	add    esp,0x10
c0005c4a:	90                   	nop
c0005c4b:	83 c4 0c             	add    esp,0xc
c0005c4e:	c3                   	ret    
c0005c4f:	90                   	nop

c0005c50 <ff_uni2oem>:
c0005c50:	83 ec 14             	sub    esp,0x14
c0005c53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c57:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c5b:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c62:	c7 44 24 0c c0 f8 01 c0 	mov    DWORD PTR [esp+0xc],0xc001f8c0
c0005c6a:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005c6f:	77 0b                	ja     c0005c7c <ff_uni2oem+0x2c>
c0005c71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c75:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c7a:	eb 68                	jmp    c0005ce4 <ff_uni2oem+0x94>
c0005c7c:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005c84:	77 5e                	ja     c0005ce4 <ff_uni2oem+0x94>
c0005c86:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005c8a:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005c8f:	75 53                	jne    c0005ce4 <ff_uni2oem+0x94>
c0005c91:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c98:	eb 12                	jmp    c0005cac <ff_uni2oem+0x5c>
c0005c9a:	66 90                	xchg   ax,ax
c0005c9c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ca1:	83 c0 01             	add    eax,0x1
c0005ca4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0005cac:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cb1:	83 f8 7f             	cmp    eax,0x7f
c0005cb4:	77 1e                	ja     c0005cd4 <ff_uni2oem+0x84>
c0005cb6:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cbb:	01 c0                	add    eax,eax
c0005cbd:	89 c2                	mov    edx,eax
c0005cbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc3:	01 d0                	add    eax,edx
c0005cc5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cc8:	0f b7 c0             	movzx  eax,ax
c0005ccb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ccf:	75 cb                	jne    c0005c9c <ff_uni2oem+0x4c>
c0005cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0005cd4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd9:	83 e8 80             	sub    eax,0xffffff80
c0005cdc:	0f b6 c0             	movzx  eax,al
c0005cdf:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ce4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ce9:	83 c4 14             	add    esp,0x14
c0005cec:	c3                   	ret    
c0005ced:	8d 76 00             	lea    esi,[esi+0x0]

c0005cf0 <ff_oem2uni>:
c0005cf0:	83 ec 18             	sub    esp,0x18
c0005cf3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005cf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005cfb:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d00:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d04:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d0b:	c7 44 24 10 c0 f8 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f8c0
c0005d13:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d18:	83 f8 7f             	cmp    eax,0x7f
c0005d1b:	77 0b                	ja     c0005d28 <ff_oem2uni+0x38>
c0005d1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d21:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d26:	eb 34                	jmp    c0005d5c <ff_oem2uni+0x6c>
c0005d28:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d2c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d31:	75 29                	jne    c0005d5c <ff_oem2uni+0x6c>
c0005d33:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d38:	3d ff 00 00 00       	cmp    eax,0xff
c0005d3d:	77 1d                	ja     c0005d5c <ff_oem2uni+0x6c>
c0005d3f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d44:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d49:	01 c0                	add    eax,eax
c0005d4b:	89 c2                	mov    edx,eax
c0005d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d51:	01 d0                	add    eax,edx
c0005d53:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d56:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d5b:	90                   	nop
c0005d5c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d61:	83 c4 18             	add    esp,0x18
c0005d64:	c3                   	ret    
c0005d65:	8d 76 00             	lea    esi,[esi+0x0]

c0005d68 <ff_wtoupper>:
c0005d68:	83 ec 10             	sub    esp,0x10
c0005d6b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005d73:	0f 87 ab 01 00 00    	ja     c0005f24 <ff_wtoupper+0x1bc>
c0005d79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d7d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005d82:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005d87:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005d8c:	77 0a                	ja     c0005d98 <ff_wtoupper+0x30>
c0005d8e:	b8 c0 f6 01 c0       	mov    eax,0xc001f6c0
c0005d93:	eb 0b                	jmp    c0005da0 <ff_wtoupper+0x38>
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]
c0005d98:	b8 00 f6 01 c0       	mov    eax,0xc001f600
c0005d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0005da0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005da4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005da8:	8d 50 02             	lea    edx,[eax+0x2]
c0005dab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005daf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005db2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005db7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dbc:	85 c0                	test   eax,eax
c0005dbe:	0f 84 54 01 00 00    	je     c0005f18 <ff_wtoupper+0x1b0>
c0005dc4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005dc9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dce:	39 c2                	cmp    edx,eax
c0005dd0:	0f 82 42 01 00 00    	jb     c0005f18 <ff_wtoupper+0x1b0>
c0005dd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dda:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005de1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005de9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005dee:	c1 e8 08             	shr    eax,0x8
c0005df1:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005df6:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005dfb:	0f b6 c0             	movzx  eax,al
c0005dfe:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e03:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e08:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e0d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e12:	01 ca                	add    edx,ecx
c0005e14:	39 d0                	cmp    eax,edx
c0005e16:	0f 8d d8 00 00 00    	jge    c0005ef4 <ff_wtoupper+0x18c>
c0005e1c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e21:	83 f8 08             	cmp    eax,0x8
c0005e24:	0f 87 ea 00 00 00    	ja     c0005f14 <ff_wtoupper+0x1ac>
c0005e2a:	8b 04 85 c0 f5 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0a40]
c0005e31:	ff e0                	jmp    eax
c0005e33:	90                   	nop
c0005e34:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e39:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e3e:	29 c2                	sub    edx,eax
c0005e40:	89 d0                	mov    eax,edx
c0005e42:	01 c0                	add    eax,eax
c0005e44:	89 c2                	mov    edx,eax
c0005e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e4a:	01 d0                	add    eax,edx
c0005e4c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e4f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e54:	e9 97 00 00 00       	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e59:	8d 76 00             	lea    esi,[esi+0x0]
c0005e5c:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e65:	89 d1                	mov    ecx,edx
c0005e67:	29 c1                	sub    ecx,eax
c0005e69:	89 c8                	mov    eax,ecx
c0005e6b:	83 e0 01             	and    eax,0x1
c0005e6e:	89 c2                	mov    edx,eax
c0005e70:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e75:	29 d0                	sub    eax,edx
c0005e77:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e7c:	eb 72                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e7e:	66 90                	xchg   ax,ax
c0005e80:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e85:	83 e8 10             	sub    eax,0x10
c0005e88:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e8d:	eb 61                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e8f:	90                   	nop
c0005e90:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e95:	83 e8 20             	sub    eax,0x20
c0005e98:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e9d:	eb 51                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e9f:	90                   	nop
c0005ea0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea5:	83 e8 30             	sub    eax,0x30
c0005ea8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ead:	eb 41                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005eaf:	90                   	nop
c0005eb0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb5:	83 e8 1a             	sub    eax,0x1a
c0005eb8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ebd:	eb 31                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ebf:	90                   	nop
c0005ec0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec5:	83 c0 08             	add    eax,0x8
c0005ec8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ecd:	eb 21                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ecf:	90                   	nop
c0005ed0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed5:	83 e8 50             	sub    eax,0x50
c0005ed8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005edd:	eb 11                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005edf:	90                   	nop
c0005ee0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee5:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005eea:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eef:	90                   	nop
c0005ef0:	eb 22                	jmp    c0005f14 <ff_wtoupper+0x1ac>
c0005ef2:	66 90                	xchg   ax,ax
c0005ef4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ef9:	85 c0                	test   eax,eax
c0005efb:	0f 85 a3 fe ff ff    	jne    c0005da4 <ff_wtoupper+0x3c>
c0005f01:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f06:	01 c0                	add    eax,eax
c0005f08:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f0c:	e9 93 fe ff ff       	jmp    c0005da4 <ff_wtoupper+0x3c>
c0005f11:	8d 76 00             	lea    esi,[esi+0x0]
c0005f14:	90                   	nop
c0005f15:	8d 76 00             	lea    esi,[esi+0x0]
c0005f18:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f1d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f21:	8d 76 00             	lea    esi,[esi+0x0]
c0005f24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f28:	83 c4 10             	add    esp,0x10
c0005f2b:	c3                   	ret    

c0005f2c <utf2ucs>:
c0005f2c:	57                   	push   edi
c0005f2d:	31 c9                	xor    ecx,ecx
c0005f2f:	56                   	push   esi
c0005f30:	89 d7                	mov    edi,edx
c0005f32:	53                   	push   ebx
c0005f33:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f37:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f3b:	89 de                	mov    esi,ebx
c0005f3d:	c1 fe 08             	sar    esi,0x8
c0005f40:	89 f2                	mov    edx,esi
c0005f42:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f45:	41                   	inc    ecx
c0005f46:	85 db                	test   ebx,ebx
c0005f48:	75 e9                	jne    c0005f33 <utf2ucs+0x7>
c0005f4a:	5b                   	pop    ebx
c0005f4b:	5e                   	pop    esi
c0005f4c:	5f                   	pop    edi
c0005f4d:	c3                   	ret    

c0005f4e <ucs2utfn>:
c0005f4e:	83 e1 fe             	and    ecx,0xfffffffe
c0005f51:	01 d1                	add    ecx,edx
c0005f53:	39 d1                	cmp    ecx,edx
c0005f55:	75 04                	jne    c0005f5b <ucs2utfn+0xd>
c0005f57:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f5a:	c3                   	ret    
c0005f5b:	57                   	push   edi
c0005f5c:	56                   	push   esi
c0005f5d:	53                   	push   ebx
c0005f5e:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f61:	83 c2 02             	add    edx,0x2
c0005f64:	89 de                	mov    esi,ebx
c0005f66:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f6a:	c1 e6 08             	shl    esi,0x8
c0005f6d:	09 f3                	or     ebx,esi
c0005f6f:	83 fb 3b             	cmp    ebx,0x3b
c0005f72:	74 50                	je     c0005fc4 <ucs2utfn+0x76>
c0005f74:	83 fb 7f             	cmp    ebx,0x7f
c0005f77:	7f 05                	jg     c0005f7e <ucs2utfn+0x30>
c0005f79:	88 18                	mov    BYTE PTR [eax],bl
c0005f7b:	40                   	inc    eax
c0005f7c:	eb 42                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005f7e:	89 de                	mov    esi,ebx
c0005f80:	89 df                	mov    edi,ebx
c0005f82:	c1 fe 06             	sar    esi,0x6
c0005f85:	83 e7 3f             	and    edi,0x3f
c0005f88:	83 cf 80             	or     edi,0xffffff80
c0005f8b:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005f91:	7f 12                	jg     c0005fa5 <ucs2utfn+0x57>
c0005f93:	83 ce c0             	or     esi,0xffffffc0
c0005f96:	83 c0 02             	add    eax,0x2
c0005f99:	89 f3                	mov    ebx,esi
c0005f9b:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005f9e:	89 fb                	mov    ebx,edi
c0005fa0:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fa3:	eb 1b                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005fa5:	c1 fb 0c             	sar    ebx,0xc
c0005fa8:	83 e6 3f             	and    esi,0x3f
c0005fab:	83 cb e0             	or     ebx,0xffffffe0
c0005fae:	83 ce 80             	or     esi,0xffffff80
c0005fb1:	88 18                	mov    BYTE PTR [eax],bl
c0005fb3:	89 f3                	mov    ebx,esi
c0005fb5:	83 c0 03             	add    eax,0x3
c0005fb8:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fbb:	89 fb                	mov    ebx,edi
c0005fbd:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fc0:	39 d1                	cmp    ecx,edx
c0005fc2:	75 9a                	jne    c0005f5e <ucs2utfn+0x10>
c0005fc4:	5b                   	pop    ebx
c0005fc5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005fc8:	5e                   	pop    esi
c0005fc9:	5f                   	pop    edi
c0005fca:	c3                   	ret    

c0005fcb <isjoliet>:
c0005fcb:	31 d2                	xor    edx,edx
c0005fcd:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005fd0:	75 26                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd2:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005fd6:	75 20                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd8:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0005fdc:	ba 02 00 00 00       	mov    edx,0x2
c0005fe1:	83 f8 43             	cmp    eax,0x43
c0005fe4:	74 12                	je     c0005ff8 <isjoliet+0x2d>
c0005fe6:	ba 03 00 00 00       	mov    edx,0x3
c0005feb:	83 f8 45             	cmp    eax,0x45
c0005fee:	74 08                	je     c0005ff8 <isjoliet+0x2d>
c0005ff0:	31 d2                	xor    edx,edx
c0005ff2:	83 f8 40             	cmp    eax,0x40
c0005ff5:	0f 94 c2             	sete   dl
c0005ff8:	89 d0                	mov    eax,edx
c0005ffa:	c3                   	ret    

c0005ffb <htohl_32>:
c0005ffb:	8b 00                	mov    eax,DWORD PTR [eax]
c0005ffd:	c3                   	ret    

c0005ffe <iso_733>:
c0005ffe:	eb fb                	jmp    c0005ffb <htohl_32>

c0006000 <bgrad_cache>:
c0006000:	83 fa 0e             	cmp    edx,0xe
c0006003:	77 16                	ja     c000601b <bgrad_cache+0x1b>
c0006005:	53                   	push   ebx
c0006006:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006009:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c000600d:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0006010:	42                   	inc    edx
c0006011:	83 fa 0f             	cmp    edx,0xf
c0006014:	75 f3                	jne    c0006009 <bgrad_cache+0x9>
c0006016:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006019:	5b                   	pop    ebx
c000601a:	c3                   	ret    
c000601b:	c3                   	ret    

c000601c <ucscompare>:
c000601c:	55                   	push   ebp
c000601d:	57                   	push   edi
c000601e:	89 c7                	mov    edi,eax
c0006020:	56                   	push   esi
c0006021:	89 d6                	mov    esi,edx
c0006023:	53                   	push   ebx
c0006024:	31 d2                	xor    edx,edx
c0006026:	83 ec 1c             	sub    esp,0x1c
c0006029:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c000602d:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0006032:	c1 e3 08             	shl    ebx,0x8
c0006035:	09 c3                	or     ebx,eax
c0006037:	39 ca                	cmp    edx,ecx
c0006039:	7d 42                	jge    c000607d <ucscompare+0x61>
c000603b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000603f:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006044:	c1 e0 08             	shl    eax,0x8
c0006047:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000604b:	09 e8                	or     eax,ebp
c000604d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006051:	83 f8 3b             	cmp    eax,0x3b
c0006054:	74 27                	je     c000607d <ucscompare+0x61>
c0006056:	83 ec 0c             	sub    esp,0xc
c0006059:	50                   	push   eax
c000605a:	e8 f1 a8 ff ff       	call   c0000950 <tolower>
c000605f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006062:	89 c5                	mov    ebp,eax
c0006064:	e8 e7 a8 ff ff       	call   c0000950 <tolower>
c0006069:	83 c4 10             	add    esp,0x10
c000606c:	39 c5                	cmp    ebp,eax
c000606e:	75 20                	jne    c0006090 <ucscompare+0x74>
c0006070:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006074:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006078:	83 c2 02             	add    edx,0x2
c000607b:	eb ac                	jmp    c0006029 <ucscompare+0xd>
c000607d:	85 db                	test   ebx,ebx
c000607f:	0f 95 c2             	setne  dl
c0006082:	31 c0                	xor    eax,eax
c0006084:	83 fb 2f             	cmp    ebx,0x2f
c0006087:	0f 95 c0             	setne  al
c000608a:	21 d0                	and    eax,edx
c000608c:	f7 d8                	neg    eax
c000608e:	eb 03                	jmp    c0006093 <ucscompare+0x77>
c0006090:	83 c8 ff             	or     eax,0xffffffff
c0006093:	83 c4 1c             	add    esp,0x1c
c0006096:	5b                   	pop    ebx
c0006097:	5e                   	pop    esi
c0006098:	5f                   	pop    edi
c0006099:	5d                   	pop    ebp
c000609a:	c3                   	ret    

c000609b <fncompare>:
c000609b:	55                   	push   ebp
c000609c:	57                   	push   edi
c000609d:	89 c7                	mov    edi,eax
c000609f:	56                   	push   esi
c00060a0:	89 ce                	mov    esi,ecx
c00060a2:	53                   	push   ebx
c00060a3:	31 db                	xor    ebx,ebx
c00060a5:	83 ec 1c             	sub    esp,0x1c
c00060a8:	39 d3                	cmp    ebx,edx
c00060aa:	7d 45                	jge    c00060f1 <fncompare+0x56>
c00060ac:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060b0:	83 f8 3b             	cmp    eax,0x3b
c00060b3:	74 3c                	je     c00060f1 <fncompare+0x56>
c00060b5:	83 f8 2e             	cmp    eax,0x2e
c00060b8:	75 0e                	jne    c00060c8 <fncompare+0x2d>
c00060ba:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060bd:	39 d9                	cmp    ecx,ebx
c00060bf:	74 30                	je     c00060f1 <fncompare+0x56>
c00060c1:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060c6:	74 29                	je     c00060f1 <fncompare+0x56>
c00060c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060cc:	83 ec 0c             	sub    esp,0xc
c00060cf:	50                   	push   eax
c00060d0:	e8 7b a8 ff ff       	call   c0000950 <tolower>
c00060d5:	89 c5                	mov    ebp,eax
c00060d7:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00060db:	89 04 24             	mov    DWORD PTR [esp],eax
c00060de:	e8 6d a8 ff ff       	call   c0000950 <tolower>
c00060e3:	83 c4 10             	add    esp,0x10
c00060e6:	39 c5                	cmp    ebp,eax
c00060e8:	75 1e                	jne    c0006108 <fncompare+0x6d>
c00060ea:	43                   	inc    ebx
c00060eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00060ef:	eb b7                	jmp    c00060a8 <fncompare+0xd>
c00060f1:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00060f5:	85 d2                	test   edx,edx
c00060f7:	0f 95 c1             	setne  cl
c00060fa:	31 c0                	xor    eax,eax
c00060fc:	83 fa 2f             	cmp    edx,0x2f
c00060ff:	0f 95 c0             	setne  al
c0006102:	21 c8                	and    eax,ecx
c0006104:	f7 d8                	neg    eax
c0006106:	eb 03                	jmp    c000610b <fncompare+0x70>
c0006108:	83 c8 ff             	or     eax,0xffffffff
c000610b:	83 c4 1c             	add    esp,0x1c
c000610e:	5b                   	pop    ebx
c000610f:	5e                   	pop    esi
c0006110:	5f                   	pop    edi
c0006111:	5d                   	pop    ebp
c0006112:	c3                   	ret    

c0006113 <bclear_cache>:
c0006113:	83 ec 18             	sub    esp,0x18
c0006116:	68 c0 f9 01 c0       	push   0xc001f9c0
c000611b:	e8 4c 32 01 00       	call   c001936c <iso_kprintf>
c0006120:	83 c4 10             	add    esp,0x10
c0006123:	31 c0                	xor    eax,eax
c0006125:	8b 14 85 20 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbfe0]
c000612c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006132:	8b 14 85 80 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbf80]
c0006139:	40                   	inc    eax
c000613a:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006140:	83 f8 10             	cmp    eax,0x10
c0006143:	75 e0                	jne    c0006125 <bclear_cache+0x12>
c0006145:	83 c4 0c             	add    esp,0xc
c0006148:	c3                   	ret    

c0006149 <bclear>:
c0006149:	eb c8                	jmp    c0006113 <bclear_cache>

c000614b <iso_break_all>:
c000614b:	83 ec 18             	sub    esp,0x18
c000614e:	68 ce f9 01 c0       	push   0xc001f9ce
c0006153:	e8 14 32 01 00       	call   c001936c <iso_kprintf>
c0006158:	83 c4 10             	add    esp,0x10
c000615b:	31 c0                	xor    eax,eax
c000615d:	c7 80 d0 45 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdba30],0x1
c0006167:	05 94 00 00 00       	add    eax,0x94
c000616c:	3d 40 09 00 00       	cmp    eax,0x940
c0006171:	75 ea                	jne    c000615d <iso_break_all+0x12>
c0006173:	83 c4 0c             	add    esp,0xc
c0006176:	c3                   	ret    

c0006177 <isoReadDiscSector>:
c0006177:	83 ec 0c             	sub    esp,0xc
c000617a:	0f be 05 60 40 02 c0 	movsx  eax,BYTE PTR ds:0xc0024060
c0006181:	50                   	push   eax
c0006182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618e:	e8 7d 31 01 00       	call   c0019310 <isoReadDiscSectorHelper>
c0006193:	83 c4 1c             	add    esp,0x1c
c0006196:	c3                   	ret    

c0006197 <bread_cache>:
c0006197:	55                   	push   ebp
c0006198:	57                   	push   edi
c0006199:	89 d7                	mov    edi,edx
c000619b:	56                   	push   esi
c000619c:	ba 0f 00 00 00       	mov    edx,0xf
c00061a1:	53                   	push   ebx
c00061a2:	89 c6                	mov    esi,eax
c00061a4:	83 ec 0c             	sub    esp,0xc
c00061a7:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061aa:	39 38                	cmp    DWORD PTR [eax],edi
c00061ac:	74 3c                	je     c00061ea <bread_cache+0x53>
c00061ae:	4a                   	dec    edx
c00061af:	83 fa ff             	cmp    edx,0xffffffff
c00061b2:	75 f3                	jne    c00061a7 <bread_cache+0x10>
c00061b4:	31 db                	xor    ebx,ebx
c00061b6:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061b9:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061bc:	74 08                	je     c00061c6 <bread_cache+0x2f>
c00061be:	43                   	inc    ebx
c00061bf:	83 fb 10             	cmp    ebx,0x10
c00061c2:	75 f2                	jne    c00061b6 <bread_cache+0x1f>
c00061c4:	31 db                	xor    ebx,ebx
c00061c6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061c9:	50                   	push   eax
c00061ca:	6a 01                	push   0x1
c00061cc:	57                   	push   edi
c00061cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061d0:	83 c0 04             	add    eax,0x4
c00061d3:	50                   	push   eax
c00061d4:	e8 9e ff ff ff       	call   c0006177 <isoReadDiscSector>
c00061d9:	83 c4 10             	add    esp,0x10
c00061dc:	83 c9 ff             	or     ecx,0xffffffff
c00061df:	85 c0                	test   eax,eax
c00061e1:	78 13                	js     c00061f6 <bread_cache+0x5f>
c00061e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061e6:	89 da                	mov    edx,ebx
c00061e8:	89 38                	mov    DWORD PTR [eax],edi
c00061ea:	89 f0                	mov    eax,esi
c00061ec:	e8 0f fe ff ff       	call   c0006000 <bgrad_cache>
c00061f1:	b9 0f 00 00 00       	mov    ecx,0xf
c00061f6:	83 c4 0c             	add    esp,0xc
c00061f9:	89 c8                	mov    eax,ecx
c00061fb:	5b                   	pop    ebx
c00061fc:	5e                   	pop    esi
c00061fd:	5f                   	pop    edi
c00061fe:	5d                   	pop    ebp
c00061ff:	c3                   	ret    

c0006200 <biread>:
c0006200:	89 c2                	mov    edx,eax
c0006202:	b8 80 40 02 c0       	mov    eax,0xc0024080
c0006207:	eb 8e                	jmp    c0006197 <bread_cache>

c0006209 <bdread>:
c0006209:	89 c2                	mov    edx,eax
c000620b:	b8 20 40 02 c0       	mov    eax,0xc0024020
c0006210:	eb 85                	jmp    c0006197 <bread_cache>

c0006212 <strnicmp>:
c0006212:	55                   	push   ebp
c0006213:	57                   	push   edi
c0006214:	31 ff                	xor    edi,edi
c0006216:	56                   	push   esi
c0006217:	53                   	push   ebx
c0006218:	83 ec 0c             	sub    esp,0xc
c000621b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000621f:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c0006223:	74 43                	je     c0006268 <strnicmp+0x56>
c0006225:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006229:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000622d:	85 c0                	test   eax,eax
c000622f:	74 37                	je     c0006268 <strnicmp+0x56>
c0006231:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006235:	85 d2                	test   edx,edx
c0006237:	74 2f                	je     c0006268 <strnicmp+0x56>
c0006239:	39 d0                	cmp    eax,edx
c000623b:	8d 6f 01             	lea    ebp,[edi+0x1]
c000623e:	75 04                	jne    c0006244 <strnicmp+0x32>
c0006240:	89 ef                	mov    edi,ebp
c0006242:	eb db                	jmp    c000621f <strnicmp+0xd>
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	50                   	push   eax
c0006248:	e8 03 a7 ff ff       	call   c0000950 <tolower>
c000624d:	89 c3                	mov    ebx,eax
c000624f:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c0006253:	89 ef                	mov    edi,ebp
c0006255:	89 04 24             	mov    DWORD PTR [esp],eax
c0006258:	e8 f3 a6 ff ff       	call   c0000950 <tolower>
c000625d:	83 c4 10             	add    esp,0x10
c0006260:	29 c3                	sub    ebx,eax
c0006262:	89 d8                	mov    eax,ebx
c0006264:	74 b9                	je     c000621f <strnicmp+0xd>
c0006266:	eb 02                	jmp    c000626a <strnicmp+0x58>
c0006268:	31 c0                	xor    eax,eax
c000626a:	83 c4 0c             	add    esp,0xc
c000626d:	5b                   	pop    ebx
c000626e:	5e                   	pop    esi
c000626f:	5f                   	pop    edi
c0006270:	5d                   	pop    ebp
c0006271:	c3                   	ret    

c0006272 <find_object>:
c0006272:	55                   	push   ebp
c0006273:	57                   	push   edi
c0006274:	89 c7                	mov    edi,eax
c0006276:	56                   	push   esi
c0006277:	53                   	push   ebx
c0006278:	89 d3                	mov    ebx,edx
c000627a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006280:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006287:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000628b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000628f:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006296:	74 0b                	je     c00062a3 <find_object+0x31>
c0006298:	89 fa                	mov    edx,edi
c000629a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000629e:	e8 89 fc ff ff       	call   c0005f2c <utf2ucs>
c00062a3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062aa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00062af:	7e 11                	jle    c00062c2 <find_object+0x50>
c00062b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b5:	e8 46 ff ff ff       	call   c0006200 <biread>
c00062ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00062be:	85 c0                	test   eax,eax
c00062c0:	79 07                	jns    c00062c9 <find_object+0x57>
c00062c2:	31 db                	xor    ebx,ebx
c00062c4:	e9 56 01 00 00       	jmp    c000641f <find_object+0x1ad>
c00062c9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00062d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00062d9:	8b 04 85 80 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf80]
c00062e0:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00062e4:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00062e7:	85 f6                	test   esi,esi
c00062e9:	75 0e                	jne    c00062f9 <find_object+0x87>
c00062eb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00062ef:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00062f7:	eb b1                	jmp    c00062aa <find_object+0x38>
c00062f9:	8b 2d b4 4e 02 c0    	mov    ebp,DWORD PTR ds:0xc0024eb4
c00062ff:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c0006303:	85 ed                	test   ebp,ebp
c0006305:	89 c8                	mov    eax,ecx
c0006307:	74 2b                	je     c0006334 <find_object+0xc2>
c0006309:	8d 43 21             	lea    eax,[ebx+0x21]
c000630c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006310:	e8 07 fd ff ff       	call   c000601c <ucscompare>
c0006315:	85 c0                	test   eax,eax
c0006317:	0f 84 bf 00 00 00    	je     c00063dc <find_object+0x16a>
c000631d:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006320:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006324:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c000632c:	0f 8e da 00 00 00    	jle    c000640c <find_object+0x19a>
c0006332:	eb b7                	jmp    c00062eb <find_object+0x79>
c0006334:	29 ce                	sub    esi,ecx
c0006336:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c000633a:	a8 01                	test   al,0x1
c000633c:	74 05                	je     c0006343 <find_object+0xd1>
c000633e:	83 ee 21             	sub    esi,0x21
c0006341:	eb 5a                	jmp    c000639d <find_object+0x12b>
c0006343:	42                   	inc    edx
c0006344:	83 ee 22             	sub    esi,0x22
c0006347:	eb 54                	jmp    c000639d <find_object+0x12b>
c0006349:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000634c:	48                   	dec    eax
c000634d:	3c 01                	cmp    al,0x1
c000634f:	77 51                	ja     c00063a2 <find_object+0x130>
c0006351:	50                   	push   eax
c0006352:	6a 02                	push   0x2
c0006354:	68 dd f9 01 c0       	push   0xc001f9dd
c0006359:	52                   	push   edx
c000635a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000635e:	e8 7d a4 ff ff       	call   c00007e0 <strncmp>
c0006363:	83 c4 10             	add    esp,0x10
c0006366:	85 c0                	test   eax,eax
c0006368:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000636c:	75 27                	jne    c0006395 <find_object+0x123>
c000636e:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006372:	8d 68 fb             	lea    ebp,[eax-0x5]
c0006375:	50                   	push   eax
c0006376:	8d 42 05             	lea    eax,[edx+0x5]
c0006379:	55                   	push   ebp
c000637a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000637e:	50                   	push   eax
c000637f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006383:	50                   	push   eax
c0006384:	e8 f7 a2 ff ff       	call   c0000680 <strncpy>
c0006389:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006395:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006399:	29 c6                	sub    esi,eax
c000639b:	01 c2                	add    edx,eax
c000639d:	83 fe 03             	cmp    esi,0x3
c00063a0:	7f a7                	jg     c0006349 <find_object+0xd7>
c00063a2:	85 ed                	test   ebp,ebp
c00063a4:	7e 40                	jle    c00063e6 <find_object+0x174>
c00063a6:	51                   	push   ecx
c00063a7:	51                   	push   ecx
c00063a8:	6a 2f                	push   0x2f
c00063aa:	57                   	push   edi
c00063ab:	e8 f0 a3 ff ff       	call   c00007a0 <strchr>
c00063b0:	83 c4 10             	add    esp,0x10
c00063b3:	85 c0                	test   eax,eax
c00063b5:	74 04                	je     c00063bb <find_object+0x149>
c00063b7:	29 f8                	sub    eax,edi
c00063b9:	eb 0c                	jmp    c00063c7 <find_object+0x155>
c00063bb:	83 ec 0c             	sub    esp,0xc
c00063be:	57                   	push   edi
c00063bf:	e8 ac a1 ff ff       	call   c0000570 <strlen>
c00063c4:	83 c4 10             	add    esp,0x10
c00063c7:	52                   	push   edx
c00063c8:	50                   	push   eax
c00063c9:	57                   	push   edi
c00063ca:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063ce:	50                   	push   eax
c00063cf:	e8 3e fe ff ff       	call   c0006212 <strnicmp>
c00063d4:	83 c4 10             	add    esp,0x10
c00063d7:	e9 39 ff ff ff       	jmp    c0006315 <find_object+0xa3>
c00063dc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00063e0:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00063e4:	eb 1e                	jmp    c0006404 <find_object+0x192>
c00063e6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00063ea:	8d 43 21             	lea    eax,[ebx+0x21]
c00063ed:	89 f9                	mov    ecx,edi
c00063ef:	e8 a7 fc ff ff       	call   c000609b <fncompare>
c00063f4:	85 c0                	test   eax,eax
c00063f6:	0f 85 21 ff ff ff    	jne    c000631d <find_object+0xab>
c00063fc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006400:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0006404:	0f 85 13 ff ff ff    	jne    c000631d <find_object+0xab>
c000640a:	eb 13                	jmp    c000641f <find_object+0x1ad>
c000640c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006410:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0006414:	0f 8f b7 fe ff ff    	jg     c00062d1 <find_object+0x5f>
c000641a:	e9 cc fe ff ff       	jmp    c00062eb <find_object+0x79>
c000641f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006425:	89 d8                	mov    eax,ebx
c0006427:	5b                   	pop    ebx
c0006428:	5e                   	pop    esi
c0006429:	5f                   	pop    edi
c000642a:	5d                   	pop    ebp
c000642b:	c3                   	ret    

c000642c <find_object_path>:
c000642c:	55                   	push   ebp
c000642d:	57                   	push   edi
c000642e:	89 d7                	mov    edi,edx
c0006430:	56                   	push   esi
c0006431:	89 c6                	mov    esi,eax
c0006433:	53                   	push   ebx
c0006434:	89 cb                	mov    ebx,ecx
c0006436:	83 ec 0c             	sub    esp,0xc
c0006439:	50                   	push   eax
c000643a:	50                   	push   eax
c000643b:	6a 2f                	push   0x2f
c000643d:	56                   	push   esi
c000643e:	e8 5d a3 ff ff       	call   c00007a0 <strchr>
c0006443:	83 c4 10             	add    esp,0x10
c0006446:	89 c5                	mov    ebp,eax
c0006448:	85 c0                	test   eax,eax
c000644a:	74 3a                	je     c0006486 <find_object_path+0x5a>
c000644c:	39 ee                	cmp    esi,ebp
c000644e:	74 31                	je     c0006481 <find_object_path+0x55>
c0006450:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006453:	e8 a6 fb ff ff       	call   c0005ffe <iso_733>
c0006458:	89 c2                	mov    edx,eax
c000645a:	8d 43 02             	lea    eax,[ebx+0x2]
c000645d:	e8 9c fb ff ff       	call   c0005ffe <iso_733>
c0006462:	83 ec 0c             	sub    esp,0xc
c0006465:	89 c1                	mov    ecx,eax
c0006467:	52                   	push   edx
c0006468:	89 f0                	mov    eax,esi
c000646a:	ba 01 00 00 00       	mov    edx,0x1
c000646f:	e8 fe fd ff ff       	call   c0006272 <find_object>
c0006474:	83 c4 10             	add    esp,0x10
c0006477:	89 c3                	mov    ebx,eax
c0006479:	85 c0                	test   eax,eax
c000647b:	75 04                	jne    c0006481 <find_object_path+0x55>
c000647d:	31 db                	xor    ebx,ebx
c000647f:	eb 36                	jmp    c00064b7 <find_object_path+0x8b>
c0006481:	8d 75 01             	lea    esi,[ebp+0x1]
c0006484:	eb b3                	jmp    c0006439 <find_object_path+0xd>
c0006486:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006489:	74 28                	je     c00064b3 <find_object_path+0x87>
c000648b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000648e:	e8 6b fb ff ff       	call   c0005ffe <iso_733>
c0006493:	89 c2                	mov    edx,eax
c0006495:	8d 43 02             	lea    eax,[ebx+0x2]
c0006498:	e8 61 fb ff ff       	call   c0005ffe <iso_733>
c000649d:	83 ec 0c             	sub    esp,0xc
c00064a0:	89 c1                	mov    ecx,eax
c00064a2:	52                   	push   edx
c00064a3:	89 f0                	mov    eax,esi
c00064a5:	89 fa                	mov    edx,edi
c00064a7:	e8 c6 fd ff ff       	call   c0006272 <find_object>
c00064ac:	83 c4 10             	add    esp,0x10
c00064af:	89 c3                	mov    ebx,eax
c00064b1:	eb 04                	jmp    c00064b7 <find_object_path+0x8b>
c00064b3:	85 ff                	test   edi,edi
c00064b5:	74 c6                	je     c000647d <find_object_path+0x51>
c00064b7:	83 c4 0c             	add    esp,0xc
c00064ba:	89 d8                	mov    eax,ebx
c00064bc:	5b                   	pop    ebx
c00064bd:	5e                   	pop    esi
c00064be:	5f                   	pop    edi
c00064bf:	5d                   	pop    ebp
c00064c0:	c3                   	ret    

c00064c1 <stricmp>:
c00064c1:	57                   	push   edi
c00064c2:	56                   	push   esi
c00064c3:	31 f6                	xor    esi,esi
c00064c5:	53                   	push   ebx
c00064c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064ca:	83 ec 0c             	sub    esp,0xc
c00064cd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064d5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064d9:	50                   	push   eax
c00064da:	e8 51 a4 ff ff       	call   c0000930 <toupper>
c00064df:	89 04 24             	mov    DWORD PTR [esp],eax
c00064e2:	e8 69 a4 ff ff       	call   c0000950 <tolower>
c00064e7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00064ea:	89 c3                	mov    ebx,eax
c00064ec:	e8 3f a4 ff ff       	call   c0000930 <toupper>
c00064f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00064f4:	e8 57 a4 ff ff       	call   c0000950 <tolower>
c00064f9:	83 c4 10             	add    esp,0x10
c00064fc:	39 c3                	cmp    ebx,eax
c00064fe:	75 05                	jne    c0006505 <stricmp+0x44>
c0006500:	46                   	inc    esi
c0006501:	85 db                	test   ebx,ebx
c0006503:	75 c1                	jne    c00064c6 <stricmp+0x5>
c0006505:	29 c3                	sub    ebx,eax
c0006507:	89 d8                	mov    eax,ebx
c0006509:	5b                   	pop    ebx
c000650a:	5e                   	pop    esi
c000650b:	5f                   	pop    edi
c000650c:	c3                   	ret    

c000650d <iso_open>:
c000650d:	57                   	push   edi
c000650e:	31 c0                	xor    eax,eax
c0006510:	56                   	push   esi
c0006511:	b9 80 4e 02 c0       	mov    ecx,0xc0024e80
c0006516:	53                   	push   ebx
c0006517:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000651c:	0f 95 c0             	setne  al
c000651f:	89 c2                	mov    edx,eax
c0006521:	89 c6                	mov    esi,eax
c0006523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006527:	e8 00 ff ff ff       	call   c000642c <find_object_path>
c000652c:	83 ca ff             	or     edx,0xffffffff
c000652f:	85 c0                	test   eax,eax
c0006531:	74 5e                	je     c0006591 <iso_open+0x84>
c0006533:	89 c1                	mov    ecx,eax
c0006535:	31 d2                	xor    edx,edx
c0006537:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000653d:	83 bf 40 45 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdbac0],0x0
c0006544:	75 42                	jne    c0006588 <iso_open+0x7b>
c0006546:	8d 41 02             	lea    eax,[ecx+0x2]
c0006549:	c7 87 40 45 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdbac0],0xffffffff
c0006553:	e8 a6 fa ff ff       	call   c0005ffe <iso_733>
c0006558:	89 b7 44 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbabc],esi
c000655e:	89 87 40 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbac0],eax
c0006564:	c7 87 48 45 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdbab8],0x0
c000656e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006571:	e8 88 fa ff ff       	call   c0005ffe <iso_733>
c0006576:	c7 87 d0 45 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdba30],0x0
c0006580:	89 87 4c 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbab4],eax
c0006586:	eb 09                	jmp    c0006591 <iso_open+0x84>
c0006588:	42                   	inc    edx
c0006589:	83 fa 10             	cmp    edx,0x10
c000658c:	75 a9                	jne    c0006537 <iso_open+0x2a>
c000658e:	83 ca ff             	or     edx,0xffffffff
c0006591:	5b                   	pop    ebx
c0006592:	89 d0                	mov    eax,edx
c0006594:	5e                   	pop    esi
c0006595:	5f                   	pop    edi
c0006596:	c3                   	ret    

c0006597 <iso_close>:
c0006597:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000659b:	83 f8 0f             	cmp    eax,0xf
c000659e:	7f 10                	jg     c00065b0 <iso_close+0x19>
c00065a0:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065a6:	c7 80 40 45 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdbac0],0x0
c00065b0:	e9 5e fb ff ff       	jmp    c0006113 <bclear_cache>

c00065b5 <iso_read>:
c00065b5:	55                   	push   ebp
c00065b6:	57                   	push   edi
c00065b7:	56                   	push   esi
c00065b8:	53                   	push   ebx
c00065b9:	83 ec 1c             	sub    esp,0x1c
c00065bc:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065c0:	83 fd 0f             	cmp    ebp,0xf
c00065c3:	7e 0a                	jle    c00065cf <iso_read+0x1a>
c00065c5:	83 c8 ff             	or     eax,0xffffffff
c00065c8:	89 c2                	mov    edx,eax
c00065ca:	e9 f4 00 00 00       	jmp    c00066c3 <iso_read+0x10e>
c00065cf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065d5:	83 bd 40 45 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdbac0],0x0
c00065dc:	74 e7                	je     c00065c5 <iso_read+0x10>
c00065de:	8b 95 d0 45 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdba30]
c00065e4:	85 d2                	test   edx,edx
c00065e6:	75 dd                	jne    c00065c5 <iso_read+0x10>
c00065e8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00065ed:	0f 84 cd 00 00 00    	je     c00066c0 <iso_read+0x10b>
c00065f3:	8b 85 48 45 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdbab8]
c00065f9:	8b 8d 4c 45 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffdbab4]
c00065ff:	29 c1                	sub    ecx,eax
c0006601:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c0006605:	76 04                	jbe    c000660b <iso_read+0x56>
c0006607:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000660b:	85 c9                	test   ecx,ecx
c000660d:	0f 84 ad 00 00 00    	je     c00066c0 <iso_read+0x10b>
c0006613:	89 c6                	mov    esi,eax
c0006615:	bb 00 08 00 00       	mov    ebx,0x800
c000661a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006620:	c1 e8 0b             	shr    eax,0xb
c0006623:	29 f3                	sub    ebx,esi
c0006625:	03 85 40 45 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdbac0]
c000662b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006631:	7e 3f                	jle    c0006672 <iso_read+0xbd>
c0006633:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006639:	75 37                	jne    c0006672 <iso_read+0xbd>
c000663b:	be 20 00 00 00       	mov    esi,0x20
c0006640:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006646:	7f 05                	jg     c000664d <iso_read+0x98>
c0006648:	89 ce                	mov    esi,ecx
c000664a:	c1 fe 0b             	sar    esi,0xb
c000664d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006651:	89 f3                	mov    ebx,esi
c0006653:	c1 e3 0b             	shl    ebx,0xb
c0006656:	52                   	push   edx
c0006657:	56                   	push   esi
c0006658:	50                   	push   eax
c0006659:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000665d:	e8 15 fb ff ff       	call   c0006177 <isoReadDiscSector>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	85 c0                	test   eax,eax
c0006667:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000666b:	7f 3e                	jg     c00066ab <iso_read+0xf6>
c000666d:	e9 53 ff ff ff       	jmp    c00065c5 <iso_read+0x10>
c0006672:	39 cb                	cmp    ebx,ecx
c0006674:	7e 02                	jle    c0006678 <iso_read+0xc3>
c0006676:	89 cb                	mov    ebx,ecx
c0006678:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000667c:	e8 88 fb ff ff       	call   c0006209 <bdread>
c0006681:	85 c0                	test   eax,eax
c0006683:	0f 88 3c ff ff ff    	js     c00065c5 <iso_read+0x10>
c0006689:	8b 0c 85 20 40 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbfe0]
c0006690:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006694:	8b 85 48 45 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdbab8]
c000669a:	25 ff 07 00 00       	and    eax,0x7ff
c000669f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066a3:	89 d9                	mov    ecx,ebx
c00066a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066ab:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066af:	01 9d 48 45 02 c0    	add    DWORD PTR [ebp-0x3ffdbab8],ebx
c00066b5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066b9:	01 da                	add    edx,ebx
c00066bb:	e9 28 ff ff ff       	jmp    c00065e8 <iso_read+0x33>
c00066c0:	89 d0                	mov    eax,edx
c00066c2:	99                   	cdq    
c00066c3:	83 c4 1c             	add    esp,0x1c
c00066c6:	5b                   	pop    ebx
c00066c7:	5e                   	pop    esi
c00066c8:	5f                   	pop    edi
c00066c9:	5d                   	pop    ebp
c00066ca:	c3                   	ret    

c00066cb <iso_seek>:
c00066cb:	55                   	push   ebp
c00066cc:	83 c8 ff             	or     eax,0xffffffff
c00066cf:	57                   	push   edi
c00066d0:	89 c2                	mov    edx,eax
c00066d2:	56                   	push   esi
c00066d3:	53                   	push   ebx
c00066d4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066d8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066e0:	83 fe 0f             	cmp    esi,0xf
c00066e3:	7f 65                	jg     c000674a <iso_seek+0x7f>
c00066e5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00066eb:	8d 8d 40 45 02 c0    	lea    ecx,[ebp-0x3ffdbac0]
c00066f1:	83 bd 40 45 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdbac0],0x0
c00066f8:	74 50                	je     c000674a <iso_seek+0x7f>
c00066fa:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006701:	75 47                	jne    c000674a <iso_seek+0x7f>
c0006703:	83 fb 01             	cmp    ebx,0x1
c0006706:	74 0e                	je     c0006716 <iso_seek+0x4b>
c0006708:	83 fb 02             	cmp    ebx,0x2
c000670b:	74 0e                	je     c000671b <iso_seek+0x50>
c000670d:	85 db                	test   ebx,ebx
c000670f:	75 39                	jne    c000674a <iso_seek+0x7f>
c0006711:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006714:	eb 0d                	jmp    c0006723 <iso_seek+0x58>
c0006716:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006719:	eb 08                	jmp    c0006723 <iso_seek+0x58>
c000671b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000671e:	01 f8                	add    eax,edi
c0006720:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006723:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006729:	8b 88 4c 45 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdbab4]
c000672f:	05 40 45 02 c0       	add    eax,0xc0024540
c0006734:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006737:	76 03                	jbe    c000673c <iso_seek+0x71>
c0006739:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000673c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006742:	8b 82 48 45 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdbab8]
c0006748:	31 d2                	xor    edx,edx
c000674a:	5b                   	pop    ebx
c000674b:	5e                   	pop    esi
c000674c:	5f                   	pop    edi
c000674d:	5d                   	pop    ebp
c000674e:	c3                   	ret    

c000674f <iso_tell>:
c000674f:	83 c8 ff             	or     eax,0xffffffff
c0006752:	53                   	push   ebx
c0006753:	89 c2                	mov    edx,eax
c0006755:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006759:	83 f9 0f             	cmp    ecx,0xf
c000675c:	7f 20                	jg     c000677e <iso_tell+0x2f>
c000675e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006764:	83 bb 40 45 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdbac0],0x0
c000676b:	74 11                	je     c000677e <iso_tell+0x2f>
c000676d:	83 bb d0 45 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdba30],0x0
c0006774:	75 08                	jne    c000677e <iso_tell+0x2f>
c0006776:	8b 83 48 45 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdbab8]
c000677c:	31 d2                	xor    edx,edx
c000677e:	5b                   	pop    ebx
c000677f:	c3                   	ret    

c0006780 <iso_total>:
c0006780:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006784:	83 c8 ff             	or     eax,0xffffffff
c0006787:	83 fa 0f             	cmp    edx,0xf
c000678a:	7f 1e                	jg     c00067aa <iso_total+0x2a>
c000678c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006792:	83 ba 40 45 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdbac0],0x0
c0006799:	74 0f                	je     c00067aa <iso_total+0x2a>
c000679b:	83 ba d0 45 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdba30],0x0
c00067a2:	75 06                	jne    c00067aa <iso_total+0x2a>
c00067a4:	8b 82 4c 45 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdbab4]
c00067aa:	c3                   	ret    

c00067ab <fn_postprocess>:
c00067ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067af:	89 d0                	mov    eax,edx
c00067b1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067b4:	83 f9 3b             	cmp    ecx,0x3b
c00067b7:	74 07                	je     c00067c0 <fn_postprocess+0x15>
c00067b9:	85 c9                	test   ecx,ecx
c00067bb:	74 03                	je     c00067c0 <fn_postprocess+0x15>
c00067bd:	40                   	inc    eax
c00067be:	eb f1                	jmp    c00067b1 <fn_postprocess+0x6>
c00067c0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067c3:	39 d0                	cmp    eax,edx
c00067c5:	76 0a                	jbe    c00067d1 <fn_postprocess+0x26>
c00067c7:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067cb:	75 04                	jne    c00067d1 <fn_postprocess+0x26>
c00067cd:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067d1:	c3                   	ret    

c00067d2 <iso_readdir>:
c00067d2:	55                   	push   ebp
c00067d3:	57                   	push   edi
c00067d4:	56                   	push   esi
c00067d5:	53                   	push   ebx
c00067d6:	83 ec 1c             	sub    esp,0x1c
c00067d9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067dd:	83 fb 0f             	cmp    ebx,0xf
c00067e0:	7f 28                	jg     c000680a <iso_readdir+0x38>
c00067e2:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00067e8:	8d b8 40 45 02 c0    	lea    edi,[eax-0x3ffdbac0]
c00067ee:	83 b8 40 45 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdbac0],0x0
c00067f5:	74 13                	je     c000680a <iso_readdir+0x38>
c00067f7:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00067fb:	74 0d                	je     c000680a <iso_readdir+0x38>
c00067fd:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006804:	0f 84 b1 00 00 00    	je     c00068bb <iso_readdir+0xe9>
c000680a:	83 ec 0c             	sub    esp,0xc
c000680d:	68 e0 f9 01 c0       	push   0xc001f9e0
c0006812:	e8 55 2b 01 00       	call   c001936c <iso_kprintf>
c0006817:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000681a:	e8 69 2b 01 00       	call   c0019388 <iso_kprintfd>
c000681f:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006825:	c7 04 24 e5 f9 01 c0 	mov    DWORD PTR [esp],0xc001f9e5
c000682c:	e8 3b 2b 01 00       	call   c001936c <iso_kprintf>
c0006831:	5d                   	pop    ebp
c0006832:	ff b3 40 45 02 c0    	push   DWORD PTR [ebx-0x3ffdbac0]
c0006838:	e8 4b 2b 01 00       	call   c0019388 <iso_kprintfd>
c000683d:	c7 04 24 eb f9 01 c0 	mov    DWORD PTR [esp],0xc001f9eb
c0006844:	e8 23 2b 01 00       	call   c001936c <iso_kprintf>
c0006849:	58                   	pop    eax
c000684a:	ff b3 44 45 02 c0    	push   DWORD PTR [ebx-0x3ffdbabc]
c0006850:	e8 33 2b 01 00       	call   c0019388 <iso_kprintfd>
c0006855:	c7 04 24 f1 f9 01 c0 	mov    DWORD PTR [esp],0xc001f9f1
c000685c:	e8 0b 2b 01 00       	call   c001936c <iso_kprintf>
c0006861:	58                   	pop    eax
c0006862:	ff b3 d0 45 02 c0    	push   DWORD PTR [ebx-0x3ffdba30]
c0006868:	e8 1b 2b 01 00       	call   c0019388 <iso_kprintfd>
c000686d:	83 c4 10             	add    esp,0x10
c0006870:	eb 42                	jmp    c00068b4 <iso_readdir+0xe2>
c0006872:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006875:	8b 34 85 80 40 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbf80]
c000687c:	89 d1                	mov    ecx,edx
c000687e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006884:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006888:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000688b:	75 35                	jne    c00068c2 <iso_readdir+0xf0>
c000688d:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006893:	81 c2 00 08 00 00    	add    edx,0x800
c0006899:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000689c:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000689f:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068a2:	73 1e                	jae    c00068c2 <iso_readdir+0xf0>
c00068a4:	c1 ea 0b             	shr    edx,0xb
c00068a7:	8b 07                	mov    eax,DWORD PTR [edi]
c00068a9:	01 d0                	add    eax,edx
c00068ab:	e8 50 f9 ff ff       	call   c0006200 <biread>
c00068b0:	85 c0                	test   eax,eax
c00068b2:	79 be                	jns    c0006872 <iso_readdir+0xa0>
c00068b4:	31 c0                	xor    eax,eax
c00068b6:	e9 66 01 00 00       	jmp    c0006a21 <iso_readdir+0x24f>
c00068bb:	31 f6                	xor    esi,esi
c00068bd:	83 c8 ff             	or     eax,0xffffffff
c00068c0:	eb da                	jmp    c000689c <iso_readdir+0xca>
c00068c2:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068c8:	8b ba 48 45 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdbab8]
c00068ce:	81 c2 40 45 02 c0    	add    edx,0xc0024540
c00068d4:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068d7:	73 db                	jae    c00068b4 <iso_readdir+0xe2>
c00068d9:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068dd:	75 34                	jne    c0006913 <iso_readdir+0x141>
c00068df:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00068e3:	75 2e                	jne    c0006913 <iso_readdir+0x141>
c00068e5:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00068e8:	8b 34 85 80 40 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbf80]
c00068ef:	01 f9                	add    ecx,edi
c00068f1:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068f4:	89 c8                	mov    eax,ecx
c00068f6:	25 ff 07 00 00       	and    eax,0x7ff
c00068fb:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006900:	01 c8                	add    eax,ecx
c0006902:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006905:	25 ff 07 00 00       	and    eax,0x7ff
c000690a:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000690e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006911:	74 a1                	je     c00068b4 <iso_readdir+0xe2>
c0006913:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006919:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000691d:	8d 56 21             	lea    edx,[esi+0x21]
c0006920:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006924:	8d a8 58 45 02 c0    	lea    ebp,[eax-0x3ffdbaa8]
c000692a:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006931:	74 0c                	je     c000693f <iso_readdir+0x16d>
c0006933:	89 e8                	mov    eax,ebp
c0006935:	e8 14 f6 ff ff       	call   c0005f4e <ucs2utfn>
c000693a:	e9 a6 00 00 00       	jmp    c00069e5 <iso_readdir+0x213>
c000693f:	57                   	push   edi
c0006940:	51                   	push   ecx
c0006941:	52                   	push   edx
c0006942:	55                   	push   ebp
c0006943:	e8 38 9d ff ff       	call   c0000680 <strncpy>
c0006948:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c000694c:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006952:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006955:	c6 84 01 58 45 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffdbaa8],0x0
c000695d:	e8 49 fe ff ff       	call   c00067ab <fn_postprocess>
c0006962:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006966:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	29 d0                	sub    eax,edx
c000696e:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006972:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006976:	74 05                	je     c000697d <iso_readdir+0x1ab>
c0006978:	83 e8 21             	sub    eax,0x21
c000697b:	eb 04                	jmp    c0006981 <iso_readdir+0x1af>
c000697d:	47                   	inc    edi
c000697e:	83 e8 22             	sub    eax,0x22
c0006981:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006985:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000698b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000698f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006994:	7e 4f                	jle    c00069e5 <iso_readdir+0x213>
c0006996:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006999:	48                   	dec    eax
c000699a:	3c 01                	cmp    al,0x1
c000699c:	77 47                	ja     c00069e5 <iso_readdir+0x213>
c000699e:	52                   	push   edx
c000699f:	6a 02                	push   0x2
c00069a1:	68 dd f9 01 c0       	push   0xc001f9dd
c00069a6:	57                   	push   edi
c00069a7:	e8 34 9e ff ff       	call   c00007e0 <strncmp>
c00069ac:	83 c4 10             	add    esp,0x10
c00069af:	85 c0                	test   eax,eax
c00069b1:	75 26                	jne    c00069d9 <iso_readdir+0x207>
c00069b3:	50                   	push   eax
c00069b4:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069b8:	83 e8 05             	sub    eax,0x5
c00069bb:	50                   	push   eax
c00069bc:	8d 47 05             	lea    eax,[edi+0x5]
c00069bf:	50                   	push   eax
c00069c0:	55                   	push   ebp
c00069c1:	e8 ba 9c ff ff       	call   c0000680 <strncpy>
c00069c6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00069ca:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069ce:	83 c4 10             	add    esp,0x10
c00069d1:	c6 84 08 53 45 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdbaad],0x0
c00069d9:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069dd:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c00069e1:	01 c7                	add    edi,eax
c00069e3:	eb aa                	jmp    c000698f <iso_readdir+0x1bd>
c00069e5:	83 c8 ff             	or     eax,0xffffffff
c00069e8:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c00069ec:	89 c2                	mov    edx,eax
c00069ee:	75 0a                	jne    c00069fa <iso_readdir+0x228>
c00069f0:	8d 46 0a             	lea    eax,[esi+0xa]
c00069f3:	e8 06 f6 ff ff       	call   c0005ffe <iso_733>
c00069f8:	31 d2                	xor    edx,edx
c00069fa:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a00:	89 83 50 45 02 c0    	mov    DWORD PTR [ebx-0x3ffdbab0],eax
c0006a06:	89 93 54 45 02 c0    	mov    DWORD PTR [ebx-0x3ffdbaac],edx
c0006a0c:	81 c3 40 45 02 c0    	add    ebx,0xc0024540
c0006a12:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a15:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006a1c:	05 50 45 02 c0       	add    eax,0xc0024550
c0006a21:	83 c4 1c             	add    esp,0x1c
c0006a24:	5b                   	pop    ebx
c0006a25:	5e                   	pop    esi
c0006a26:	5f                   	pop    edi
c0006a27:	5d                   	pop    ebp
c0006a28:	c3                   	ret    

c0006a29 <iso_reset>:
c0006a29:	83 ec 18             	sub    esp,0x18
c0006a2c:	68 fa f9 01 c0       	push   0xc001f9fa
c0006a31:	e8 36 29 01 00       	call   c001936c <iso_kprintf>
c0006a36:	e8 10 f7 ff ff       	call   c000614b <iso_break_all>
c0006a3b:	e8 09 f7 ff ff       	call   c0006149 <bclear>
c0006a40:	31 c0                	xor    eax,eax
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	c3                   	ret    

c0006a46 <init_percd>:
c0006a46:	57                   	push   edi
c0006a47:	56                   	push   esi
c0006a48:	53                   	push   ebx
c0006a49:	bb 01 00 00 00       	mov    ebx,0x1
c0006a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a52:	a2 60 40 02 c0       	mov    ds:0xc0024060,al
c0006a57:	e8 cd ff ff ff       	call   c0006a29 <iso_reset>
c0006a5c:	c7 05 b4 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024eb4,0x0
c0006a66:	a1 ac 4e 02 c0       	mov    eax,ds:0xc0024eac
c0006a6b:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a6f:	e8 8c f7 ff ff       	call   c0006200 <biread>
c0006a74:	89 c6                	mov    esi,eax
c0006a76:	85 c0                	test   eax,eax
c0006a78:	0f 88 ba 00 00 00    	js     c0006b38 <init_percd+0xf2>
c0006a7e:	8b 04 85 80 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf80]
c0006a85:	83 c0 04             	add    eax,0x4
c0006a88:	52                   	push   edx
c0006a89:	6a 06                	push   0x6
c0006a8b:	68 05 fa 01 c0       	push   0xc001fa05
c0006a90:	50                   	push   eax
c0006a91:	e8 ea 98 ff ff       	call   c0000380 <memcmp>
c0006a96:	83 c4 10             	add    esp,0x10
c0006a99:	85 c0                	test   eax,eax
c0006a9b:	74 08                	je     c0006aa5 <init_percd+0x5f>
c0006a9d:	43                   	inc    ebx
c0006a9e:	83 fb 04             	cmp    ebx,0x4
c0006aa1:	75 c3                	jne    c0006a66 <init_percd+0x20>
c0006aa3:	eb 1a                	jmp    c0006abf <init_percd+0x79>
c0006aa5:	8b 04 b5 80 40 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdbf80]
c0006aac:	83 c0 5c             	add    eax,0x5c
c0006aaf:	e8 17 f5 ff ff       	call   c0005fcb <isjoliet>
c0006ab4:	a3 b4 4e 02 c0       	mov    ds:0xc0024eb4,eax
c0006ab9:	85 c0                	test   eax,eax
c0006abb:	74 e0                	je     c0006a9d <init_percd+0x57>
c0006abd:	eb 3e                	jmp    c0006afd <init_percd+0xb7>
c0006abf:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006ac6:	75 35                	jne    c0006afd <init_percd+0xb7>
c0006ac8:	a1 ac 4e 02 c0       	mov    eax,ds:0xc0024eac
c0006acd:	83 c0 10             	add    eax,0x10
c0006ad0:	e8 2b f7 ff ff       	call   c0006200 <biread>
c0006ad5:	89 c6                	mov    esi,eax
c0006ad7:	85 c0                	test   eax,eax
c0006ad9:	78 5f                	js     c0006b3a <init_percd+0xf4>
c0006adb:	83 cb ff             	or     ebx,0xffffffff
c0006ade:	50                   	push   eax
c0006adf:	8b 04 b5 80 40 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdbf80]
c0006ae6:	6a 06                	push   0x6
c0006ae8:	83 c0 04             	add    eax,0x4
c0006aeb:	68 0c fa 01 c0       	push   0xc001fa0c
c0006af0:	50                   	push   eax
c0006af1:	e8 8a 98 ff ff       	call   c0000380 <memcmp>
c0006af6:	83 c4 10             	add    esp,0x10
c0006af9:	85 c0                	test   eax,eax
c0006afb:	75 3d                	jne    c0006b3a <init_percd+0xf4>
c0006afd:	8b 34 b5 80 40 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdbf80]
c0006b04:	bf 80 4e 02 c0       	mov    edi,0xc0024e80
c0006b09:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b0f:	b9 22 00 00 00       	mov    ecx,0x22
c0006b14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b16:	b8 82 4e 02 c0       	mov    eax,0xc0024e82
c0006b1b:	31 db                	xor    ebx,ebx
c0006b1d:	e8 dc f4 ff ff       	call   c0005ffe <iso_733>
c0006b22:	a3 a8 4e 02 c0       	mov    ds:0xc0024ea8,eax
c0006b27:	b8 8a 4e 02 c0       	mov    eax,0xc0024e8a
c0006b2c:	e8 cd f4 ff ff       	call   c0005ffe <iso_733>
c0006b31:	a3 a4 4e 02 c0       	mov    ds:0xc0024ea4,eax
c0006b36:	eb 02                	jmp    c0006b3a <init_percd+0xf4>
c0006b38:	89 c3                	mov    ebx,eax
c0006b3a:	89 d8                	mov    eax,ebx
c0006b3c:	5b                   	pop    ebx
c0006b3d:	5e                   	pop    esi
c0006b3e:	5f                   	pop    edi
c0006b3f:	c3                   	ret    

c0006b40 <iso_ioctl>:
c0006b40:	83 ec 18             	sub    esp,0x18
c0006b43:	68 13 fa 01 c0       	push   0xc001fa13
c0006b48:	e8 1f 28 01 00       	call   c001936c <iso_kprintf>
c0006b4d:	e8 d7 fe ff ff       	call   c0006a29 <iso_reset>
c0006b52:	31 c0                	xor    eax,eax
c0006b54:	83 c4 1c             	add    esp,0x1c
c0006b57:	c3                   	ret    

c0006b58 <fs_iso9660_init>:
c0006b58:	53                   	push   ebx
c0006b59:	31 db                	xor    ebx,ebx
c0006b5b:	83 ec 14             	sub    esp,0x14
c0006b5e:	68 1e fa 01 c0       	push   0xc001fa1e
c0006b63:	e8 04 28 01 00       	call   c001936c <iso_kprintf>
c0006b68:	83 c4 0c             	add    esp,0xc
c0006b6b:	68 40 09 00 00       	push   0x940
c0006b70:	6a 00                	push   0x0
c0006b72:	68 40 45 02 c0       	push   0xc0024540
c0006b77:	e8 74 99 ff ff       	call   c00004f0 <memset>
c0006b7c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b83:	c7 05 40 45 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0024540,0xffffffff
c0006b8d:	e8 1c 0f 00 00       	call   c0007aae <malloc>
c0006b92:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b99:	a3 b0 4e 02 c0       	mov    ds:0xc0024eb0,eax
c0006b9e:	e8 0b 0f 00 00       	call   c0007aae <malloc>
c0006ba3:	83 c4 10             	add    esp,0x10
c0006ba6:	a3 20 45 02 c0       	mov    ds:0xc0024520,eax
c0006bab:	83 ec 0c             	sub    esp,0xc
c0006bae:	68 04 08 00 00       	push   0x804
c0006bb3:	e8 f6 0e 00 00       	call   c0007aae <malloc>
c0006bb8:	89 04 9d 80 40 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbf80],eax
c0006bbf:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006bc5:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bcc:	e8 dd 0e 00 00       	call   c0007aae <malloc>
c0006bd1:	83 c4 10             	add    esp,0x10
c0006bd4:	89 04 9d 20 40 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbfe0],eax
c0006bdb:	43                   	inc    ebx
c0006bdc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be2:	83 fb 10             	cmp    ebx,0x10
c0006be5:	75 c4                	jne    c0006bab <fs_iso9660_init+0x53>
c0006be7:	31 c0                	xor    eax,eax
c0006be9:	83 c4 08             	add    esp,0x8
c0006bec:	5b                   	pop    ebx
c0006bed:	c3                   	ret    

c0006bee <fs_iso9660_shutdown>:
c0006bee:	53                   	push   ebx
c0006bef:	31 db                	xor    ebx,ebx
c0006bf1:	83 ec 08             	sub    esp,0x8
c0006bf4:	83 ec 0c             	sub    esp,0xc
c0006bf7:	ff 34 9d 80 40 02 c0 	push   DWORD PTR [ebx*4-0x3ffdbf80]
c0006bfe:	e8 bb 0e 00 00       	call   c0007abe <free>
c0006c03:	58                   	pop    eax
c0006c04:	ff 34 9d 20 40 02 c0 	push   DWORD PTR [ebx*4-0x3ffdbfe0]
c0006c0b:	43                   	inc    ebx
c0006c0c:	e8 ad 0e 00 00       	call   c0007abe <free>
c0006c11:	83 c4 10             	add    esp,0x10
c0006c14:	83 fb 10             	cmp    ebx,0x10
c0006c17:	75 db                	jne    c0006bf4 <fs_iso9660_shutdown+0x6>
c0006c19:	a1 b0 4e 02 c0       	mov    eax,ds:0xc0024eb0
c0006c1e:	85 c0                	test   eax,eax
c0006c20:	74 0c                	je     c0006c2e <fs_iso9660_shutdown+0x40>
c0006c22:	83 ec 0c             	sub    esp,0xc
c0006c25:	50                   	push   eax
c0006c26:	e8 93 0e 00 00       	call   c0007abe <free>
c0006c2b:	83 c4 10             	add    esp,0x10
c0006c2e:	a1 20 45 02 c0       	mov    eax,ds:0xc0024520
c0006c33:	85 c0                	test   eax,eax
c0006c35:	74 0c                	je     c0006c43 <fs_iso9660_shutdown+0x55>
c0006c37:	83 ec 0c             	sub    esp,0xc
c0006c3a:	50                   	push   eax
c0006c3b:	e8 7e 0e 00 00       	call   c0007abe <free>
c0006c40:	83 c4 10             	add    esp,0x10
c0006c43:	c7 05 20 45 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024520,0x0
c0006c4d:	c7 05 b0 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024eb0,0x0
c0006c57:	31 c0                	xor    eax,eax
c0006c59:	83 c4 08             	add    esp,0x8
c0006c5c:	5b                   	pop    ebx
c0006c5d:	c3                   	ret    

c0006c5e <Computer::close(int, int, void*)>:
c0006c5e:	57                   	push   edi
c0006c5f:	56                   	push   esi
c0006c60:	53                   	push   ebx
c0006c61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c6d:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c73:	83 ec 0c             	sub    esp,0xc
c0006c76:	50                   	push   eax
c0006c77:	e8 d0 52 00 00       	call   c000bf4c <Device::closeAll()>
c0006c7c:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c82:	83 c4 10             	add    esp,0x10
c0006c85:	8b 10                	mov    edx,DWORD PTR [eax]
c0006c87:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006c8b:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006c93:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006c97:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006c9b:	5b                   	pop    ebx
c0006c9c:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006c9f:	5e                   	pop    esi
c0006ca0:	5f                   	pop    edi
c0006ca1:	ff e0                	jmp    eax

c0006ca3 <Krnl::firstTask()>:
c0006ca3:	53                   	push   ebx
c0006ca4:	83 ec 14             	sub    esp,0x14
c0006ca7:	fb                   	sti    
c0006ca8:	68 2f fa 01 c0       	push   0xc001fa2f
c0006cad:	e8 f8 95 00 00       	call   c00102aa <KeSetBootMessage(char const*)>
c0006cb2:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006cb9:	e8 f0 0d 00 00       	call   c0007aae <malloc>
c0006cbe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cc5:	89 c3                	mov    ebx,eax
c0006cc7:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0006ccc:	50                   	push   eax
c0006ccd:	68 48 fa 01 c0       	push   0xc001fa48
c0006cd2:	6a 01                	push   0x1
c0006cd4:	53                   	push   ebx
c0006cd5:	e8 8e df 00 00       	call   c0014c68 <Process::Process(bool, char const*, Process*, char**)>
c0006cda:	83 c4 20             	add    esp,0x20
c0006cdd:	68 ff 00 00 00       	push   0xff
c0006ce2:	6a 00                	push   0x0
c0006ce4:	68 f5 74 00 c0       	push   0xc00074f5
c0006ce9:	53                   	push   ebx
c0006cea:	e8 9d e1 00 00       	call   c0014e8c <Process::createThread(void (*)(void*), void*, int)>
c0006cef:	8b 15 90 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028190
c0006cf5:	6a 7a                	push   0x7a
c0006cf7:	6a 00                	push   0x0
c0006cf9:	68 74 59 01 c0       	push   0xc0015974
c0006cfe:	52                   	push   edx
c0006cff:	e8 88 e1 00 00       	call   c0014e8c <Process::createThread(void (*)(void*), void*, int)>
c0006d04:	83 c4 20             	add    esp,0x20
c0006d07:	a3 48 81 02 c0       	mov    ds:0xc0028148,eax
c0006d0c:	c6 05 bd 4e 02 c0 01 	mov    BYTE PTR ds:0xc0024ebd,0x1
c0006d13:	e8 c8 9d 00 00       	call   c0010ae0 <KeInitRand()>
c0006d18:	83 ec 0c             	sub    esp,0xc
c0006d1b:	68 44 fb 01 c0       	push   0xc001fb44
c0006d20:	e8 85 95 00 00       	call   c00102aa <KeSetBootMessage(char const*)>
c0006d25:	e8 6d f0 00 00       	call   c0015d97 <Vm::initialise8086()>
c0006d2a:	e8 6b 40 00 00       	call   c000ad9a <Fs::initVFS()>
c0006d2f:	c7 04 24 55 fa 01 c0 	mov    DWORD PTR [esp],0xc001fa55
c0006d36:	e8 6f 95 00 00       	call   c00102aa <KeSetBootMessage(char const*)>
c0006d3b:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0006d40:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d46:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d48:	6a 00                	push   0x0
c0006d4a:	6a 00                	push   0x0
c0006d4c:	6a 00                	push   0x0
c0006d4e:	50                   	push   eax
c0006d4f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d52:	83 c4 14             	add    esp,0x14
c0006d55:	68 44 fb 01 c0       	push   0xc001fb44
c0006d5a:	e8 4b 95 00 00       	call   c00102aa <KeSetBootMessage(char const*)>
c0006d5f:	e8 26 9a 00 00       	call   c001078a <Krnl::loadSystemEnv()>
c0006d64:	e8 83 9c 00 00       	call   c00109ec <Krnl::setupPowerManager()>
c0006d69:	83 c4 0c             	add    esp,0xc
c0006d6c:	6a 3a                	push   0x3a
c0006d6e:	68 6f fa 01 c0       	push   0xc001fa6f
c0006d73:	68 78 fa 01 c0       	push   0xc001fa78
c0006d78:	e8 33 c2 00 00       	call   c0012fb0 <Reg::readIntWithDefault(char*, char*, int)>
c0006d7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d80:	e8 27 4b 00 00       	call   c000b8ac <User::loadClockSettings(int)>
c0006d85:	c7 04 24 68 fb 01 c0 	mov    DWORD PTR [esp],0xc001fb68
c0006d8c:	e8 19 95 00 00       	call   c00102aa <KeSetBootMessage(char const*)>
c0006d91:	59                   	pop    ecx
c0006d92:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0006d97:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006d9d:	53                   	push   ebx
c0006d9e:	e8 a7 51 00 00       	call   c000bf4a <Device::loadDriversForAll()>
c0006da3:	c7 04 24 80 fa 01 c0 	mov    DWORD PTR [esp],0xc001fa80
c0006daa:	e8 fb 94 00 00       	call   c00102aa <KeSetBootMessage(char const*)>
c0006daf:	58                   	pop    eax
c0006db0:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c0006db6:	5a                   	pop    edx
c0006db7:	6a 01                	push   0x1
c0006db9:	68 91 fa 01 c0       	push   0xc001fa91
c0006dbe:	e8 bb d8 00 00       	call   c001467e <Thr::loadDLL(char const*, bool)>
c0006dc3:	59                   	pop    ecx
c0006dc4:	5a                   	pop    edx
c0006dc5:	53                   	push   ebx
c0006dc6:	50                   	push   eax
c0006dc7:	e8 e3 da 00 00       	call   c00148af <Thr::executeDLL(unsigned long, void*)>
c0006dcc:	83 c4 10             	add    esp,0x10
c0006dcf:	83 ec 0c             	sub    esp,0xc
c0006dd2:	6a 02                	push   0x2
c0006dd4:	e8 17 e5 00 00       	call   c00152f0 <blockTask(TaskState)>
c0006dd9:	83 c4 10             	add    esp,0x10
c0006ddc:	eb f1                	jmp    c0006dcf <Krnl::firstTask()+0x12c>

c0006dde <Computer::Computer()>:
c0006dde:	83 ec 0c             	sub    esp,0xc
c0006de1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006de5:	83 ec 08             	sub    esp,0x8
c0006de8:	68 ad fa 01 c0       	push   0xc001faad
c0006ded:	50                   	push   eax
c0006dee:	e8 d3 51 00 00       	call   c000bfc6 <Device::Device(char const*)>
c0006df3:	83 c4 10             	add    esp,0x10
c0006df6:	ba b4 fb 01 c0       	mov    edx,0xc001fbb4
c0006dfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dff:	89 10                	mov    DWORD PTR [eax],edx
c0006e01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e05:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e13:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e21:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e27:	83 ca 04             	or     edx,0x4
c0006e2a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e34:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e3a:	0f b6 d0             	movzx  edx,al
c0006e3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e41:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e4c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e52:	0f b6 d0             	movzx  edx,al
c0006e55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e59:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e62:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e68:	8d 50 01             	lea    edx,[eax+0x1]
c0006e6b:	88 d1                	mov    cl,dl
c0006e6d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e71:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006e77:	0f b6 d0             	movzx  edx,al
c0006e7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e7e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006e82:	83 e1 3f             	and    ecx,0x3f
c0006e85:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006e89:	90                   	nop
c0006e8a:	83 c4 0c             	add    esp,0xc
c0006e8d:	c3                   	ret    

c0006e8e <Computer::setBootMessage(char const*)>:
c0006e8e:	c3                   	ret    
c0006e8f:	90                   	nop

c0006e90 <Computer::detectFeatures()>:
c0006e90:	55                   	push   ebp
c0006e91:	57                   	push   edi
c0006e92:	56                   	push   esi
c0006e93:	53                   	push   ebx
c0006e94:	83 ec 1c             	sub    esp,0x1c
c0006e97:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006e9b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ea1:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006ea7:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006ead:	e8 47 93 ff ff       	call   c00001f9 <detectCPUID>
c0006eb2:	31 d2                	xor    edx,edx
c0006eb4:	85 c0                	test   eax,eax
c0006eb6:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ebc:	0f 95 c2             	setne  dl
c0006ebf:	83 e0 fd             	and    eax,0xfffffffd
c0006ec2:	d1 e2                	shl    edx,1
c0006ec4:	09 d0                	or     eax,edx
c0006ec6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ecc:	a8 02                	test   al,0x2
c0006ece:	75 51                	jne    c0006f21 <Computer::detectFeatures()+0x91>
c0006ed0:	f6 05 d1 4e 02 c0 04 	test   BYTE PTR ds:0xc0024ed1,0x4
c0006ed7:	74 0f                	je     c0006ee8 <Computer::detectFeatures()+0x58>
c0006ed9:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006edf:	83 e0 fb             	and    eax,0xfffffffb
c0006ee2:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ee8:	e8 49 74 01 00       	call   c001e336 <x87Detect>
c0006eed:	83 e0 01             	and    eax,0x1
c0006ef0:	c1 e0 04             	shl    eax,0x4
c0006ef3:	89 c2                	mov    edx,eax
c0006ef5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006efb:	83 e0 ef             	and    eax,0xffffffef
c0006efe:	09 d0                	or     eax,edx
c0006f00:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f06:	88 c2                	mov    dl,al
c0006f08:	a8 10                	test   al,0x10
c0006f0a:	0f 85 33 01 00 00    	jne    c0007043 <Computer::detectFeatures()+0x1b3>
c0006f10:	80 e2 80             	and    dl,0x80
c0006f13:	0f 85 4c 01 00 00    	jne    c0007065 <Computer::detectFeatures()+0x1d5>
c0006f19:	83 c4 1c             	add    esp,0x1c
c0006f1c:	5b                   	pop    ebx
c0006f1d:	5e                   	pop    esi
c0006f1e:	5f                   	pop    edi
c0006f1f:	5d                   	pop    ebp
c0006f20:	c3                   	ret    
c0006f21:	83 ec 0c             	sub    esp,0xc
c0006f24:	6a 20                	push   0x20
c0006f26:	e8 95 88 00 00       	call   c000f7c0 <CPU::cpuidCheckEDX(unsigned int)>
c0006f2b:	83 e0 01             	and    eax,0x1
c0006f2e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f35:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f3b:	83 e0 f7             	and    eax,0xfffffff7
c0006f3e:	09 d0                	or     eax,edx
c0006f40:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f46:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f4d:	e8 6e 88 00 00       	call   c000f7c0 <CPU::cpuidCheckEDX(unsigned int)>
c0006f52:	89 c2                	mov    edx,eax
c0006f54:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f5a:	83 e2 01             	and    edx,0x1
c0006f5d:	83 e0 fe             	and    eax,0xfffffffe
c0006f60:	09 d0                	or     eax,edx
c0006f62:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f68:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f6f:	e8 4c 88 00 00       	call   c000f7c0 <CPU::cpuidCheckEDX(unsigned int)>
c0006f74:	89 c2                	mov    edx,eax
c0006f76:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f7c:	c1 e2 07             	shl    edx,0x7
c0006f7f:	83 e0 7f             	and    eax,0x7f
c0006f82:	09 d0                	or     eax,edx
c0006f84:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f8a:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006f91:	e8 2a 88 00 00       	call   c000f7c0 <CPU::cpuidCheckEDX(unsigned int)>
c0006f96:	83 c4 10             	add    esp,0x10
c0006f99:	83 e0 01             	and    eax,0x1
c0006f9c:	c1 e0 05             	shl    eax,0x5
c0006f9f:	89 c2                	mov    edx,eax
c0006fa1:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fa7:	83 e0 df             	and    eax,0xffffffdf
c0006faa:	09 d0                	or     eax,edx
c0006fac:	f7 05 d0 4e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0024ed0,0x401
c0006fb6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fbc:	0f 84 c9 00 00 00    	je     c000708b <Computer::detectFeatures()+0x1fb>
c0006fc2:	83 e0 fe             	and    eax,0xfffffffe
c0006fc5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fcb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd1:	89 c2                	mov    edx,eax
c0006fd3:	83 e2 09             	and    edx,0x9
c0006fd6:	83 fa 01             	cmp    edx,0x1
c0006fd9:	75 09                	jne    c0006fe4 <Computer::detectFeatures()+0x154>
c0006fdb:	83 e0 fe             	and    eax,0xfffffffe
c0006fde:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fe4:	83 ec 0c             	sub    esp,0xc
c0006fe7:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006feb:	50                   	push   eax
c0006fec:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006ff0:	55                   	push   ebp
c0006ff1:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006ff5:	57                   	push   edi
c0006ff6:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006ffa:	56                   	push   esi
c0006ffb:	68 00 00 00 80       	push   0x80000000
c0007000:	e8 37 87 00 00       	call   c000f73c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007005:	83 c4 20             	add    esp,0x20
c0007008:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000700f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0007013:	0f 86 b7 fe ff ff    	jbe    c0006ed0 <Computer::detectFeatures()+0x40>
c0007019:	83 ec 0c             	sub    esp,0xc
c000701c:	50                   	push   eax
c000701d:	55                   	push   ebp
c000701e:	57                   	push   edi
c000701f:	56                   	push   esi
c0007020:	68 01 00 00 80       	push   0x80000001
c0007025:	e8 12 87 00 00       	call   c000f73c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000702a:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0007030:	83 c4 20             	add    esp,0x20
c0007033:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007038:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000703e:	e9 8d fe ff ff       	jmp    c0006ed0 <Computer::detectFeatures()+0x40>
c0007043:	e8 a8 72 01 00       	call   c001e2f0 <absolutelyNoChanceInHell>
c0007048:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c000704e:	c1 e0 07             	shl    eax,0x7
c0007051:	83 e2 7f             	and    edx,0x7f
c0007054:	09 c2                	or     edx,eax
c0007056:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c000705c:	80 e2 80             	and    dl,0x80
c000705f:	0f 84 b4 fe ff ff    	je     c0006f19 <Computer::detectFeatures()+0x89>
c0007065:	e8 f6 6e 01 00       	call   c001df60 <avxDetect>
c000706a:	83 e0 01             	and    eax,0x1
c000706d:	c1 e0 05             	shl    eax,0x5
c0007070:	89 c2                	mov    edx,eax
c0007072:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007078:	83 e0 df             	and    eax,0xffffffdf
c000707b:	09 d0                	or     eax,edx
c000707d:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0007083:	83 c4 1c             	add    esp,0x1c
c0007086:	5b                   	pop    ebx
c0007087:	5e                   	pop    esi
c0007088:	5f                   	pop    edi
c0007089:	5d                   	pop    ebp
c000708a:	c3                   	ret    
c000708b:	83 ec 0c             	sub    esp,0xc
c000708e:	68 00 02 00 00       	push   0x200
c0007093:	e8 28 87 00 00       	call   c000f7c0 <CPU::cpuidCheckEDX(unsigned int)>
c0007098:	83 c4 10             	add    esp,0x10
c000709b:	89 c2                	mov    edx,eax
c000709d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070a3:	83 e2 01             	and    edx,0x1
c00070a6:	83 e0 fe             	and    eax,0xfffffffe
c00070a9:	09 d0                	or     eax,edx
c00070ab:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070b1:	e9 15 ff ff ff       	jmp    c0006fcb <Computer::detectFeatures()+0x13b>

c00070b6 <Computer::displayFeatures()>:
c00070b6:	c3                   	ret    
c00070b7:	90                   	nop

c00070b8 <Computer::rdmsr(unsigned int)>:
c00070b8:	83 ec 0c             	sub    esp,0xc
c00070bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070bf:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070c6:	74 0a                	je     c00070d2 <Computer::rdmsr(unsigned int)+0x1a>
c00070c8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070cc:	0f 32                	rdmsr  
c00070ce:	83 c4 0c             	add    esp,0xc
c00070d1:	c3                   	ret    
c00070d2:	83 ec 0c             	sub    esp,0xc
c00070d5:	68 b6 fa 01 c0       	push   0xc001fab6
c00070da:	e8 48 98 00 00       	call   c0010927 <KePanic(char const*)>
c00070df:	83 c4 10             	add    esp,0x10
c00070e2:	eb e4                	jmp    c00070c8 <Computer::rdmsr(unsigned int)+0x10>

c00070e4 <Computer::wrmsr(unsigned int, unsigned long long)>:
c00070e4:	57                   	push   edi
c00070e5:	56                   	push   esi
c00070e6:	83 ec 04             	sub    esp,0x4
c00070e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070ed:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00070f1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00070f5:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070fc:	74 10                	je     c000710e <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c00070fe:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007102:	89 f0                	mov    eax,esi
c0007104:	89 fa                	mov    edx,edi
c0007106:	0f 30                	wrmsr  
c0007108:	83 c4 04             	add    esp,0x4
c000710b:	5e                   	pop    esi
c000710c:	5f                   	pop    edi
c000710d:	c3                   	ret    
c000710e:	83 ec 0c             	sub    esp,0xc
c0007111:	68 bc fa 01 c0       	push   0xc001fabc
c0007116:	e8 0c 98 00 00       	call   c0010927 <KePanic(char const*)>
c000711b:	83 c4 10             	add    esp,0x10
c000711e:	eb de                	jmp    c00070fe <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0007120 <Computer::shutdown()>:
c0007120:	83 ec 0c             	sub    esp,0xc
c0007123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007127:	8b 10                	mov    edx,DWORD PTR [eax]
c0007129:	6a 00                	push   0x0
c000712b:	6a 00                	push   0x0
c000712d:	6a 00                	push   0x0
c000712f:	50                   	push   eax
c0007130:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007133:	83 c4 1c             	add    esp,0x1c
c0007136:	c3                   	ret    
c0007137:	90                   	nop

c0007138 <Computer::restart()>:
c0007138:	83 ec 0c             	sub    esp,0xc
c000713b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000713f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007141:	6a 00                	push   0x0
c0007143:	6a 00                	push   0x0
c0007145:	6a 01                	push   0x1
c0007147:	50                   	push   eax
c0007148:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000714b:	83 c4 1c             	add    esp,0x1c
c000714e:	c3                   	ret    
c000714f:	90                   	nop

c0007150 <Computer::sleep()>:
c0007150:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007154:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000715a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000715e:	e9 75 80 00 00       	jmp    c000f1d8 <ACPI::sleep()>
c0007163:	90                   	nop

c0007164 <Computer::nmiEnabled()>:
c0007164:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007168:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000716e:	c3                   	ret    
c000716f:	90                   	nop

c0007170 <Computer::readCMOS(unsigned char)>:
c0007170:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007174:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007178:	80 ba 58 01 00 00 00 	cmp    BYTE PTR [edx+0x158],0x0
c000717f:	75 09                	jne    c000718a <Computer::readCMOS(unsigned char)+0x1a>
c0007181:	b2 80                	mov    dl,0x80
c0007183:	09 d0                	or     eax,edx
c0007185:	e6 70                	out    0x70,al
c0007187:	e4 71                	in     al,0x71
c0007189:	c3                   	ret    
c000718a:	31 d2                	xor    edx,edx
c000718c:	eb f5                	jmp    c0007183 <Computer::readCMOS(unsigned char)+0x13>

c000718e <Computer::enableNMI(bool)>:
c000718e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007192:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007196:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000719c:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071a4:	eb ca                	jmp    c0007170 <Computer::readCMOS(unsigned char)>

c00071a6 <Computer::open(int, int, void*)>:
c00071a6:	56                   	push   esi
c00071a7:	53                   	push   ebx
c00071a8:	83 ec 10             	sub    esp,0x10
c00071ab:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071af:	f6 05 d0 4e 02 c0 04 	test   BYTE PTR ds:0xc0024ed0,0x4
c00071b6:	68 c2 fa 01 c0       	push   0xc001fac2
c00071bb:	0f 94 05 60 1f 02 c0 	sete   BYTE PTR ds:0xc0021f60
c00071c2:	e8 e3 90 00 00       	call   c00102aa <KeSetBootMessage(char const*)>
c00071c7:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071ce:	e8 db 08 00 00       	call   c0007aae <malloc>
c00071d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00071d6:	89 c6                	mov    esi,eax
c00071d8:	e8 6f 7b 00 00       	call   c000ed4c <ACPI::ACPI()>
c00071dd:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c00071e3:	58                   	pop    eax
c00071e4:	5a                   	pop    edx
c00071e5:	56                   	push   esi
c00071e6:	53                   	push   ebx
c00071e7:	e8 42 4c 00 00       	call   c000be2e <Device::addChild(Device*)>
c00071ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00071ef:	e8 9c fc ff ff       	call   c0006e90 <Computer::detectFeatures()>
c00071f4:	59                   	pop    ecx
c00071f5:	5e                   	pop    esi
c00071f6:	6a 01                	push   0x1
c00071f8:	53                   	push   ebx
c00071f9:	e8 90 ff ff ff       	call   c000718e <Computer::enableNMI(bool)>
c00071fe:	c7 04 24 da fa 01 c0 	mov    DWORD PTR [esp],0xc001fada
c0007205:	e8 a0 90 00 00       	call   c00102aa <KeSetBootMessage(char const*)>
c000720a:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007211:	e8 98 08 00 00       	call   c0007aae <malloc>
c0007216:	89 04 24             	mov    DWORD PTR [esp],eax
c0007219:	89 c6                	mov    esi,eax
c000721b:	e8 58 86 00 00       	call   c000f878 <CPU::CPU()>
c0007220:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0007226:	58                   	pop    eax
c0007227:	5a                   	pop    edx
c0007228:	56                   	push   esi
c0007229:	53                   	push   ebx
c000722a:	e8 ff 4b 00 00       	call   c000be2e <Device::addChild(Device*)>
c000722f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0007235:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007239:	8b 10                	mov    edx,DWORD PTR [eax]
c000723b:	51                   	push   ecx
c000723c:	6a 00                	push   0x0
c000723e:	6a 00                	push   0x0
c0007240:	50                   	push   eax
c0007241:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0007244:	83 c4 14             	add    esp,0x14
c0007247:	68 88 fb 01 c0       	push   0xc001fb88
c000724c:	e8 59 90 00 00       	call   c00102aa <KeSetBootMessage(char const*)>
c0007251:	e8 16 fd 00 00       	call   c0016f6c <HalInitialiseCoprocessor()>
c0007256:	c7 04 24 f4 fa 01 c0 	mov    DWORD PTR [esp],0xc001faf4
c000725d:	e8 48 90 00 00       	call   c00102aa <KeSetBootMessage(char const*)>
c0007262:	c7 04 24 a3 6c 00 c0 	mov    DWORD PTR [esp],0xc0006ca3
c0007269:	e8 4a dd 00 00       	call   c0014fb8 <setupMultitasking(void (*)())>
c000726e:	83 c4 14             	add    esp,0x14
c0007271:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007276:	5b                   	pop    ebx
c0007277:	5e                   	pop    esi
c0007278:	c3                   	ret    
c0007279:	90                   	nop

c000727a <Computer::disableNMI()>:
c000727a:	6a 00                	push   0x0
c000727c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007280:	50                   	push   eax
c0007281:	e8 08 ff ff ff       	call   c000718e <Computer::enableNMI(bool)>
c0007286:	5a                   	pop    edx
c0007287:	59                   	pop    ecx
c0007288:	c3                   	ret    
c0007289:	90                   	nop

c000728a <Computer::writeCMOS(unsigned char, unsigned char)>:
c000728a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000728e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007292:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007296:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c000729d:	75 0b                	jne    c00072aa <Computer::writeCMOS(unsigned char, unsigned char)+0x20>
c000729f:	b1 80                	mov    cl,0x80
c00072a1:	09 c8                	or     eax,ecx
c00072a3:	e6 70                	out    0x70,al
c00072a5:	88 d0                	mov    al,dl
c00072a7:	e6 71                	out    0x71,al
c00072a9:	c3                   	ret    
c00072aa:	31 c9                	xor    ecx,ecx
c00072ac:	eb f3                	jmp    c00072a1 <Computer::writeCMOS(unsigned char, unsigned char)+0x17>

c00072ae <Computer::handleNMI()>:
c00072ae:	56                   	push   esi
c00072af:	53                   	push   ebx
c00072b0:	83 ec 10             	sub    esp,0x10
c00072b3:	e4 92                	in     al,0x92
c00072b5:	89 c6                	mov    esi,eax
c00072b7:	e4 61                	in     al,0x61
c00072b9:	68 0f fb 01 c0       	push   0xc001fb0f
c00072be:	88 c3                	mov    bl,al
c00072c0:	e8 32 37 00 00       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c00072c5:	83 c4 10             	add    esp,0x10
c00072c8:	83 e6 10             	and    esi,0x10
c00072cb:	75 10                	jne    c00072dd <Computer::handleNMI()+0x2f>
c00072cd:	f6 c3 40             	test   bl,0x40
c00072d0:	75 20                	jne    c00072f2 <Computer::handleNMI()+0x44>
c00072d2:	80 e3 80             	and    bl,0x80
c00072d5:	75 30                	jne    c0007307 <Computer::handleNMI()+0x59>
c00072d7:	83 c4 04             	add    esp,0x4
c00072da:	5b                   	pop    ebx
c00072db:	5e                   	pop    esi
c00072dc:	c3                   	ret    
c00072dd:	83 ec 0c             	sub    esp,0xc
c00072e0:	68 20 fb 01 c0       	push   0xc001fb20
c00072e5:	e8 3d 96 00 00       	call   c0010927 <KePanic(char const*)>
c00072ea:	83 c4 10             	add    esp,0x10
c00072ed:	f6 c3 40             	test   bl,0x40
c00072f0:	74 e0                	je     c00072d2 <Computer::handleNMI()+0x24>
c00072f2:	83 ec 0c             	sub    esp,0xc
c00072f5:	68 2d fb 01 c0       	push   0xc001fb2d
c00072fa:	e8 28 96 00 00       	call   c0010927 <KePanic(char const*)>
c00072ff:	83 c4 10             	add    esp,0x10
c0007302:	80 e3 80             	and    bl,0x80
c0007305:	74 d0                	je     c00072d7 <Computer::handleNMI()+0x29>
c0007307:	c7 44 24 10 37 fb 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fb37
c000730f:	83 c4 04             	add    esp,0x4
c0007312:	5b                   	pop    ebx
c0007313:	5e                   	pop    esi
c0007314:	e9 0e 96 00 00       	jmp    c0010927 <KePanic(char const*)>
c0007319:	90                   	nop

c000731a <GDTEntry::setBase(unsigned int)>:
c000731a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000731e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007322:	89 c1                	mov    ecx,eax
c0007324:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007328:	c1 e9 10             	shr    ecx,0x10
c000732b:	c1 e8 18             	shr    eax,0x18
c000732e:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007331:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0007334:	c3                   	ret    
c0007335:	90                   	nop

c0007336 <GDTEntry::setLimit(unsigned int)>:
c0007336:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000733a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000733e:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007341:	66 89 01             	mov    WORD PTR [ecx],ax
c0007344:	83 e2 f0             	and    edx,0xfffffff0
c0007347:	c1 e8 10             	shr    eax,0x10
c000734a:	83 e0 0f             	and    eax,0xf
c000734d:	09 d0                	or     eax,edx
c000734f:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007352:	c3                   	ret    
c0007353:	90                   	nop

c0007354 <GDT::GDT()>:
c0007354:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007358:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000735e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007362:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007368:	90                   	nop
c0007369:	c3                   	ret    

c000736a <GDT::addEntry(GDTEntry)>:
c000736a:	53                   	push   ebx
c000736b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000736f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007373:	8b 02                	mov    eax,DWORD PTR [edx]
c0007375:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007379:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000737d:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0007381:	8d 48 01             	lea    ecx,[eax+0x1]
c0007384:	c1 e0 03             	shl    eax,0x3
c0007387:	89 0a                	mov    DWORD PTR [edx],ecx
c0007389:	5b                   	pop    ebx
c000738a:	c3                   	ret    
c000738b:	90                   	nop

c000738c <GDT::getNumberOfEntries()>:
c000738c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007390:	8b 00                	mov    eax,DWORD PTR [eax]
c0007392:	c3                   	ret    
c0007393:	90                   	nop

c0007394 <GDT::flush()>:
c0007394:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007398:	8b 10                	mov    edx,DWORD PTR [eax]
c000739a:	83 c0 04             	add    eax,0x4
c000739d:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073a4:	a3 c2 4e 02 c0       	mov    ds:0xc0024ec2,eax
c00073a9:	66 89 15 c0 4e 02 c0 	mov    WORD PTR ds:0xc0024ec0,dx
c00073b0:	e9 a5 8f ff ff       	jmp    c000035a <loadGDT>
c00073b5:	90                   	nop

c00073b6 <GDT::setup()>:
c00073b6:	57                   	push   edi
c00073b7:	56                   	push   esi
c00073b8:	53                   	push   ebx
c00073b9:	83 ec 30             	sub    esp,0x30
c00073bc:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073c0:	6a 00                	push   0x0
c00073c2:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073c6:	56                   	push   esi
c00073c7:	e8 4e ff ff ff       	call   c000731a <GDTEntry::setBase(unsigned int)>
c00073cc:	6a 00                	push   0x0
c00073ce:	56                   	push   esi
c00073cf:	e8 62 ff ff ff       	call   c0007336 <GDTEntry::setLimit(unsigned int)>
c00073d4:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00073dc:	6a 00                	push   0x0
c00073de:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00073e2:	56                   	push   esi
c00073e3:	e8 32 ff ff ff       	call   c000731a <GDTEntry::setBase(unsigned int)>
c00073e8:	68 ff ff ff 00       	push   0xffffff
c00073ed:	56                   	push   esi
c00073ee:	e8 43 ff ff ff       	call   c0007336 <GDTEntry::setLimit(unsigned int)>
c00073f3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00073f7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00073fb:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00073ff:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007403:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007408:	0d 00 9a c0 00       	or     eax,0xc09a00
c000740d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007411:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0007415:	89 f8                	mov    eax,edi
c0007417:	89 fa                	mov    edx,edi
c0007419:	80 e4 f7             	and    ah,0xf7
c000741c:	80 ce 60             	or     dh,0x60
c000741f:	89 c7                	mov    edi,eax
c0007421:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0007425:	80 cc 60             	or     ah,0x60
c0007428:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000742c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007430:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007434:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007438:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000743c:	83 c4 20             	add    esp,0x20
c000743f:	6a 00                	push   0x0
c0007441:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007445:	50                   	push   eax
c0007446:	e8 cf fe ff ff       	call   c000731a <GDTEntry::setBase(unsigned int)>
c000744b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000744f:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007453:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007457:	83 e0 3f             	and    eax,0x3f
c000745a:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000745e:	6a 00                	push   0x0
c0007460:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007464:	50                   	push   eax
c0007465:	e8 b0 fe ff ff       	call   c000731a <GDTEntry::setBase(unsigned int)>
c000746a:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000746e:	83 e0 3f             	and    eax,0x3f
c0007471:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c0007475:	83 c4 0c             	add    esp,0xc
c0007478:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000747c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007480:	53                   	push   ebx
c0007481:	e8 e4 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c0007486:	83 c4 0c             	add    esp,0xc
c0007489:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000748d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007491:	53                   	push   ebx
c0007492:	e8 d3 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c0007497:	83 c4 0c             	add    esp,0xc
c000749a:	57                   	push   edi
c000749b:	56                   	push   esi
c000749c:	53                   	push   ebx
c000749d:	e8 c8 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c00074a2:	83 c4 0c             	add    esp,0xc
c00074a5:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074a9:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074ad:	53                   	push   ebx
c00074ae:	e8 b7 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c00074b3:	83 c4 0c             	add    esp,0xc
c00074b6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074ba:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074be:	53                   	push   ebx
c00074bf:	e8 a6 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c00074c4:	83 c4 0c             	add    esp,0xc
c00074c7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074cf:	53                   	push   ebx
c00074d0:	e8 95 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c00074d5:	83 c4 0c             	add    esp,0xc
c00074d8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074dc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e0:	53                   	push   ebx
c00074e1:	e8 84 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c00074e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00074e9:	e8 a6 fe ff ff       	call   c0007394 <GDT::flush()>
c00074ee:	83 c4 40             	add    esp,0x40
c00074f1:	5b                   	pop    ebx
c00074f2:	5e                   	pop    esi
c00074f3:	5f                   	pop    edi
c00074f4:	c3                   	ret    

c00074f5 <idleFunction(void*)>:
c00074f5:	83 ec 0c             	sub    esp,0xc
c00074f8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00074fd:	48                   	dec    eax
c00074fe:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007503:	75 01                	jne    c0007506 <idleFunction(void*)+0x11>
c0007505:	fb                   	sti    
c0007506:	e8 2d f7 00 00       	call   c0016c38 <HalSystemIdle()>
c000750b:	e8 e2 73 01 00       	call   c001e8f2 <idleCommon()>
c0007510:	eb f4                	jmp    c0007506 <idleFunction(void*)+0x11>
c0007512:	66 90                	xchg   ax,ax

c0007514 <IDTEntry::IDTEntry(bool)>:
c0007514:	53                   	push   ebx
c0007515:	83 ec 04             	sub    esp,0x4
c0007518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000751c:	88 04 24             	mov    BYTE PTR [esp],al
c000751f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007523:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007529:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000752d:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007531:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007535:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007538:	83 e2 f0             	and    edx,0xfffffff0
c000753b:	83 ca 0e             	or     edx,0xe
c000753e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007541:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007545:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007548:	83 e2 ef             	and    edx,0xffffffef
c000754b:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000754e:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0007552:	85 c0                	test   eax,eax
c0007554:	74 06                	je     c000755c <IDTEntry::IDTEntry(bool)+0x48>
c0007556:	b2 03                	mov    dl,0x3
c0007558:	eb 06                	jmp    c0007560 <IDTEntry::IDTEntry(bool)+0x4c>
c000755a:	66 90                	xchg   ax,ax
c000755c:	b2 00                	mov    dl,0x0
c000755e:	66 90                	xchg   ax,ax
c0007560:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007564:	83 e2 03             	and    edx,0x3
c0007567:	89 d3                	mov    ebx,edx
c0007569:	c1 e3 05             	shl    ebx,0x5
c000756c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000756f:	83 e2 9f             	and    edx,0xffffff9f
c0007572:	88 d1                	mov    cl,dl
c0007574:	88 da                	mov    dl,bl
c0007576:	09 ca                	or     edx,ecx
c0007578:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000757b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000757f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007582:	83 ca 80             	or     edx,0xffffff80
c0007585:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007588:	90                   	nop
c0007589:	83 c4 04             	add    esp,0x4
c000758c:	5b                   	pop    ebx
c000758d:	c3                   	ret    

c000758e <IDTEntry::setOffset(unsigned int)>:
c000758e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007592:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007596:	66 89 02             	mov    WORD PTR [edx],ax
c0007599:	c1 e8 10             	shr    eax,0x10
c000759c:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075a0:	c3                   	ret    
c00075a1:	90                   	nop
c00075a2:	66 90                	xchg   ax,ax

c00075a4 <IDT::IDT()>:
c00075a4:	90                   	nop
c00075a5:	c3                   	ret    

c00075a6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075aa:	83 c0 30             	add    eax,0x30
c00075ad:	c3                   	ret    

c00075ae <IDT::addEntry(IDTEntry, int)>:
c00075ae:	53                   	push   ebx
c00075af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075b3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075b7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075bf:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075c2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075c6:	5b                   	pop    ebx
c00075c7:	c3                   	ret    

c00075c8 <IDT::addEntry(int, void (*)(), bool)>:
c00075c8:	53                   	push   ebx
c00075c9:	83 ec 10             	sub    esp,0x10
c00075cc:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075d1:	50                   	push   eax
c00075d2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075d6:	53                   	push   ebx
c00075d7:	e8 38 ff ff ff       	call   c0007514 <IDTEntry::IDTEntry(bool)>
c00075dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075e0:	53                   	push   ebx
c00075e1:	e8 a8 ff ff ff       	call   c000758e <IDTEntry::setOffset(unsigned int)>
c00075e6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00075ea:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075ee:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075f2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00075f6:	e8 b3 ff ff ff       	call   c00075ae <IDT::addEntry(IDTEntry, int)>
c00075fb:	83 c4 30             	add    esp,0x30
c00075fe:	5b                   	pop    ebx
c00075ff:	c3                   	ret    

c0007600 <IDT::flush()>:
c0007600:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007604:	66 c7 05 c8 4e 02 c0 ff 07 	mov    WORD PTR ds:0xc0024ec8,0x7ff
c000760d:	a3 ca 4e 02 c0       	mov    ds:0xc0024eca,eax
c0007612:	0f 01 1d c8 4e 02 c0 	lidtd  ds:0xc0024ec8
c0007619:	c3                   	ret    

c000761a <IDT::setup()>:
c000761a:	57                   	push   edi
c000761b:	56                   	push   esi
c000761c:	53                   	push   ebx
c000761d:	83 ec 10             	sub    esp,0x10
c0007620:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007624:	6a 00                	push   0x0
c0007626:	68 f0 df 01 c0       	push   0xc001dff0
c000762b:	6a 00                	push   0x0
c000762d:	53                   	push   ebx
c000762e:	e8 95 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007633:	6a 00                	push   0x0
c0007635:	68 00 e0 01 c0       	push   0xc001e000
c000763a:	6a 01                	push   0x1
c000763c:	53                   	push   ebx
c000763d:	e8 86 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007642:	83 c4 20             	add    esp,0x20
c0007645:	6a 00                	push   0x0
c0007647:	68 0a e0 01 c0       	push   0xc001e00a
c000764c:	6a 02                	push   0x2
c000764e:	53                   	push   ebx
c000764f:	e8 74 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007654:	6a 00                	push   0x0
c0007656:	68 14 e0 01 c0       	push   0xc001e014
c000765b:	6a 03                	push   0x3
c000765d:	53                   	push   ebx
c000765e:	e8 65 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007663:	83 c4 20             	add    esp,0x20
c0007666:	6a 00                	push   0x0
c0007668:	68 1e e0 01 c0       	push   0xc001e01e
c000766d:	6a 04                	push   0x4
c000766f:	53                   	push   ebx
c0007670:	e8 53 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007675:	6a 00                	push   0x0
c0007677:	68 28 e0 01 c0       	push   0xc001e028
c000767c:	6a 05                	push   0x5
c000767e:	53                   	push   ebx
c000767f:	e8 44 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007684:	83 c4 20             	add    esp,0x20
c0007687:	6a 00                	push   0x0
c0007689:	68 32 e0 01 c0       	push   0xc001e032
c000768e:	6a 06                	push   0x6
c0007690:	53                   	push   ebx
c0007691:	e8 32 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007696:	6a 00                	push   0x0
c0007698:	68 3c e0 01 c0       	push   0xc001e03c
c000769d:	6a 07                	push   0x7
c000769f:	53                   	push   ebx
c00076a0:	e8 23 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00076a5:	83 c4 20             	add    esp,0x20
c00076a8:	6a 00                	push   0x0
c00076aa:	68 46 e0 01 c0       	push   0xc001e046
c00076af:	6a 08                	push   0x8
c00076b1:	53                   	push   ebx
c00076b2:	e8 11 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00076b7:	6a 00                	push   0x0
c00076b9:	68 4e e0 01 c0       	push   0xc001e04e
c00076be:	6a 09                	push   0x9
c00076c0:	53                   	push   ebx
c00076c1:	e8 02 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00076c6:	83 c4 20             	add    esp,0x20
c00076c9:	6a 00                	push   0x0
c00076cb:	68 58 e0 01 c0       	push   0xc001e058
c00076d0:	6a 0a                	push   0xa
c00076d2:	53                   	push   ebx
c00076d3:	e8 f0 fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00076d8:	6a 00                	push   0x0
c00076da:	68 60 e0 01 c0       	push   0xc001e060
c00076df:	6a 0b                	push   0xb
c00076e1:	53                   	push   ebx
c00076e2:	e8 e1 fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00076e7:	83 c4 20             	add    esp,0x20
c00076ea:	6a 00                	push   0x0
c00076ec:	68 68 e0 01 c0       	push   0xc001e068
c00076f1:	6a 0c                	push   0xc
c00076f3:	53                   	push   ebx
c00076f4:	e8 cf fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00076f9:	6a 00                	push   0x0
c00076fb:	68 70 e0 01 c0       	push   0xc001e070
c0007700:	6a 0d                	push   0xd
c0007702:	53                   	push   ebx
c0007703:	e8 c0 fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007708:	83 c4 20             	add    esp,0x20
c000770b:	6a 00                	push   0x0
c000770d:	68 8a e0 01 c0       	push   0xc001e08a
c0007712:	6a 0e                	push   0xe
c0007714:	53                   	push   ebx
c0007715:	e8 ae fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000771a:	6a 00                	push   0x0
c000771c:	68 92 e0 01 c0       	push   0xc001e092
c0007721:	6a 0f                	push   0xf
c0007723:	53                   	push   ebx
c0007724:	e8 9f fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007729:	83 c4 20             	add    esp,0x20
c000772c:	6a 00                	push   0x0
c000772e:	68 9c e0 01 c0       	push   0xc001e09c
c0007733:	6a 10                	push   0x10
c0007735:	53                   	push   ebx
c0007736:	e8 8d fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000773b:	6a 00                	push   0x0
c000773d:	68 a6 e0 01 c0       	push   0xc001e0a6
c0007742:	6a 11                	push   0x11
c0007744:	53                   	push   ebx
c0007745:	e8 7e fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000774a:	83 c4 20             	add    esp,0x20
c000774d:	6a 00                	push   0x0
c000774f:	68 b0 e0 01 c0       	push   0xc001e0b0
c0007754:	6a 12                	push   0x12
c0007756:	53                   	push   ebx
c0007757:	e8 6c fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000775c:	6a 01                	push   0x1
c000775e:	68 4a e1 01 c0       	push   0xc001e14a
c0007763:	6a 60                	push   0x60
c0007765:	53                   	push   ebx
c0007766:	e8 5d fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000776b:	83 c4 20             	add    esp,0x20
c000776e:	6a 00                	push   0x0
c0007770:	68 51 e1 01 c0       	push   0xc001e151
c0007775:	6a 20                	push   0x20
c0007777:	53                   	push   ebx
c0007778:	e8 4b fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000777d:	6a 00                	push   0x0
c000777f:	68 3c e1 01 c0       	push   0xc001e13c
c0007784:	6a 21                	push   0x21
c0007786:	53                   	push   ebx
c0007787:	e8 3c fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000778c:	83 c4 20             	add    esp,0x20
c000778f:	6a 00                	push   0x0
c0007791:	68 43 e1 01 c0       	push   0xc001e143
c0007796:	6a 22                	push   0x22
c0007798:	53                   	push   ebx
c0007799:	e8 2a fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000779e:	6a 00                	push   0x0
c00077a0:	68 ba e0 01 c0       	push   0xc001e0ba
c00077a5:	6a 23                	push   0x23
c00077a7:	53                   	push   ebx
c00077a8:	e8 1b fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00077ad:	83 c4 20             	add    esp,0x20
c00077b0:	6a 00                	push   0x0
c00077b2:	68 c4 e0 01 c0       	push   0xc001e0c4
c00077b7:	6a 24                	push   0x24
c00077b9:	53                   	push   ebx
c00077ba:	e8 09 fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00077bf:	6a 00                	push   0x0
c00077c1:	68 ce e0 01 c0       	push   0xc001e0ce
c00077c6:	6a 25                	push   0x25
c00077c8:	53                   	push   ebx
c00077c9:	e8 fa fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00077ce:	83 c4 20             	add    esp,0x20
c00077d1:	6a 00                	push   0x0
c00077d3:	68 d8 e0 01 c0       	push   0xc001e0d8
c00077d8:	6a 26                	push   0x26
c00077da:	53                   	push   ebx
c00077db:	e8 e8 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00077e0:	6a 00                	push   0x0
c00077e2:	68 e2 e0 01 c0       	push   0xc001e0e2
c00077e7:	6a 27                	push   0x27
c00077e9:	53                   	push   ebx
c00077ea:	e8 d9 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00077ef:	83 c4 20             	add    esp,0x20
c00077f2:	6a 00                	push   0x0
c00077f4:	68 ec e0 01 c0       	push   0xc001e0ec
c00077f9:	6a 28                	push   0x28
c00077fb:	53                   	push   ebx
c00077fc:	e8 c7 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007801:	6a 00                	push   0x0
c0007803:	68 f6 e0 01 c0       	push   0xc001e0f6
c0007808:	6a 29                	push   0x29
c000780a:	53                   	push   ebx
c000780b:	e8 b8 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007810:	83 c4 20             	add    esp,0x20
c0007813:	6a 00                	push   0x0
c0007815:	68 00 e1 01 c0       	push   0xc001e100
c000781a:	6a 2a                	push   0x2a
c000781c:	53                   	push   ebx
c000781d:	e8 a6 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007822:	6a 00                	push   0x0
c0007824:	68 0a e1 01 c0       	push   0xc001e10a
c0007829:	6a 2b                	push   0x2b
c000782b:	53                   	push   ebx
c000782c:	e8 97 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007831:	83 c4 20             	add    esp,0x20
c0007834:	6a 00                	push   0x0
c0007836:	68 14 e1 01 c0       	push   0xc001e114
c000783b:	6a 2c                	push   0x2c
c000783d:	53                   	push   ebx
c000783e:	e8 85 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007843:	6a 00                	push   0x0
c0007845:	68 1e e1 01 c0       	push   0xc001e11e
c000784a:	6a 2d                	push   0x2d
c000784c:	53                   	push   ebx
c000784d:	e8 76 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007852:	83 c4 20             	add    esp,0x20
c0007855:	6a 00                	push   0x0
c0007857:	68 28 e1 01 c0       	push   0xc001e128
c000785c:	6a 2e                	push   0x2e
c000785e:	53                   	push   ebx
c000785f:	e8 64 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007864:	6a 00                	push   0x0
c0007866:	68 32 e1 01 c0       	push   0xc001e132
c000786b:	6a 2f                	push   0x2f
c000786d:	53                   	push   ebx
c000786e:	e8 55 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007873:	83 c4 20             	add    esp,0x20
c0007876:	6a 00                	push   0x0
c0007878:	68 8c e2 01 c0       	push   0xc001e28c
c000787d:	6a 30                	push   0x30
c000787f:	53                   	push   ebx
c0007880:	e8 43 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007885:	6a 00                	push   0x0
c0007887:	68 96 e2 01 c0       	push   0xc001e296
c000788c:	6a 31                	push   0x31
c000788e:	53                   	push   ebx
c000788f:	e8 34 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007894:	83 c4 20             	add    esp,0x20
c0007897:	6a 00                	push   0x0
c0007899:	68 a0 e2 01 c0       	push   0xc001e2a0
c000789e:	6a 32                	push   0x32
c00078a0:	53                   	push   ebx
c00078a1:	e8 22 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00078a6:	6a 00                	push   0x0
c00078a8:	68 aa e2 01 c0       	push   0xc001e2aa
c00078ad:	6a 33                	push   0x33
c00078af:	53                   	push   ebx
c00078b0:	e8 13 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00078b5:	83 c4 20             	add    esp,0x20
c00078b8:	6a 00                	push   0x0
c00078ba:	68 b4 e2 01 c0       	push   0xc001e2b4
c00078bf:	6a 34                	push   0x34
c00078c1:	53                   	push   ebx
c00078c2:	e8 01 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00078c7:	6a 00                	push   0x0
c00078c9:	68 be e2 01 c0       	push   0xc001e2be
c00078ce:	6a 35                	push   0x35
c00078d0:	53                   	push   ebx
c00078d1:	e8 f2 fc ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00078d6:	83 c4 20             	add    esp,0x20
c00078d9:	6a 00                	push   0x0
c00078db:	68 c8 e2 01 c0       	push   0xc001e2c8
c00078e0:	6a 36                	push   0x36
c00078e2:	53                   	push   ebx
c00078e3:	e8 e0 fc ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00078e8:	6a 00                	push   0x0
c00078ea:	68 d2 e2 01 c0       	push   0xc001e2d2
c00078ef:	6a 37                	push   0x37
c00078f1:	53                   	push   ebx
c00078f2:	e8 d1 fc ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00078f7:	83 c4 1c             	add    esp,0x1c
c00078fa:	6a 03                	push   0x3
c00078fc:	6a 02                	push   0x2
c00078fe:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007904:	e8 01 25 00 00       	call   c0009e0a <VAS::allocatePages(int, int)>
c0007909:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007910:	89 c6                	mov    esi,eax
c0007912:	e8 97 01 00 00       	call   c0007aae <malloc>
c0007917:	81 c6 00 20 00 00    	add    esi,0x2000
c000791d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007920:	89 c7                	mov    edi,eax
c0007922:	e8 2d 16 00 00       	call   c0008f54 <TSS::TSS()>
c0007927:	83 c4 0c             	add    esp,0xc
c000792a:	68 46 e0 01 c0       	push   0xc001e046
c000792f:	56                   	push   esi
c0007930:	57                   	push   edi
c0007931:	e8 62 16 00 00       	call   c0008f98 <TSS::setup(unsigned long, unsigned long)>
c0007936:	89 c6                	mov    esi,eax
c0007938:	58                   	pop    eax
c0007939:	5a                   	pop    edx
c000793a:	6a 00                	push   0x0
c000793c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007940:	50                   	push   eax
c0007941:	e8 ce fb ff ff       	call   c0007514 <IDTEntry::IDTEntry(bool)>
c0007946:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000794a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000794f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007956:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000795c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007960:	80 ce 05             	or     dh,0x5
c0007963:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007966:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000796a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000796e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007971:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007974:	e8 87 fc ff ff       	call   c0007600 <IDT::flush()>
c0007979:	83 c4 20             	add    esp,0x20
c000797c:	5b                   	pop    ebx
c000797d:	5e                   	pop    esi
c000797e:	5f                   	pop    edi
c000797f:	c3                   	ret    

c0007980 <sbrk>:
c0007980:	55                   	push   ebp
c0007981:	57                   	push   edi
c0007982:	56                   	push   esi
c0007983:	53                   	push   ebx
c0007984:	83 ec 1c             	sub    esp,0x1c
c0007987:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000798b:	85 c0                	test   eax,eax
c000798d:	74 61                	je     c00079f0 <sbrk+0x70>
c000798f:	78 66                	js     c00079f7 <sbrk+0x77>
c0007991:	8b 15 48 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021f48
c0007997:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000799b:	05 ff 0f 00 00       	add    eax,0xfff
c00079a0:	89 c5                	mov    ebp,eax
c00079a2:	78 6b                	js     c0007a0f <sbrk+0x8f>
c00079a4:	c1 fd 0c             	sar    ebp,0xc
c00079a7:	bb 00 00 00 00       	mov    ebx,0x0
c00079ac:	8b 35 b0 4f 02 c0    	mov    esi,DWORD PTR ds:0xc0024fb0
c00079b2:	8b 3d 48 1f 02 c0    	mov    edi,DWORD PTR ds:0xc0021f48
c00079b8:	e8 f6 03 00 00       	call   c0007db3 <Phys::allocatePage()>
c00079bd:	68 01 04 00 00       	push   0x401
c00079c2:	57                   	push   edi
c00079c3:	50                   	push   eax
c00079c4:	56                   	push   esi
c00079c5:	e8 3a 23 00 00       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c00079ca:	81 05 48 1f 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0021f48,0x1000
c00079d4:	83 c3 01             	add    ebx,0x1
c00079d7:	83 c4 10             	add    esp,0x10
c00079da:	39 dd                	cmp    ebp,ebx
c00079dc:	75 ce                	jne    c00079ac <sbrk+0x2c>
c00079de:	0f 20 d8             	mov    eax,cr3
c00079e1:	0f 22 d8             	mov    cr3,eax
c00079e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079e8:	83 c4 1c             	add    esp,0x1c
c00079eb:	5b                   	pop    ebx
c00079ec:	5e                   	pop    esi
c00079ed:	5f                   	pop    edi
c00079ee:	5d                   	pop    ebp
c00079ef:	c3                   	ret    
c00079f0:	a1 48 1f 02 c0       	mov    eax,ds:0xc0021f48
c00079f5:	eb f1                	jmp    c00079e8 <sbrk+0x68>
c00079f7:	83 ec 08             	sub    esp,0x8
c00079fa:	50                   	push   eax
c00079fb:	68 d8 fb 01 c0       	push   0xc001fbd8
c0007a00:	e8 f2 2f 00 00       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c0007a05:	83 c4 10             	add    esp,0x10
c0007a08:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a0d:	eb d9                	jmp    c00079e8 <sbrk+0x68>
c0007a0f:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007a15:	eb 8d                	jmp    c00079a4 <sbrk+0x24>

c0007a17 <mmap>:
c0007a17:	83 ec 18             	sub    esp,0x18
c0007a1a:	68 08 fc 01 c0       	push   0xc001fc08
c0007a1f:	e8 03 8f 00 00       	call   c0010927 <KePanic(char const*)>
c0007a24:	b8 00 00 00 00       	mov    eax,0x0
c0007a29:	83 c4 1c             	add    esp,0x1c
c0007a2c:	c3                   	ret    

c0007a2d <munmap>:
c0007a2d:	83 ec 18             	sub    esp,0x18
c0007a30:	68 0d fc 01 c0       	push   0xc001fc0d
c0007a35:	e8 ed 8e 00 00       	call   c0010927 <KePanic(char const*)>
c0007a3a:	b8 00 00 00 00       	mov    eax,0x0
c0007a3f:	83 c4 1c             	add    esp,0x1c
c0007a42:	c3                   	ret    

c0007a43 <liballoc_lock()>:
c0007a43:	fa                   	cli    
c0007a44:	83 05 68 81 02 c0 01 	add    DWORD PTR ds:0xc0028168,0x1
c0007a4b:	b8 00 00 00 00       	mov    eax,0x0
c0007a50:	c3                   	ret    

c0007a51 <liballoc_unlock()>:
c0007a51:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007a56:	83 e8 01             	sub    eax,0x1
c0007a59:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007a5e:	75 01                	jne    c0007a61 <liballoc_unlock()+0x10>
c0007a60:	fb                   	sti    
c0007a61:	b8 00 00 00 00       	mov    eax,0x0
c0007a66:	c3                   	ret    

c0007a67 <liballoc_alloc(int)>:
c0007a67:	83 ec 10             	sub    esp,0x10
c0007a6a:	6a 01                	push   0x1
c0007a6c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a70:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007a76:	e8 8f 23 00 00       	call   c0009e0a <VAS::allocatePages(int, int)>
c0007a7b:	83 c4 1c             	add    esp,0x1c
c0007a7e:	c3                   	ret    

c0007a7f <liballoc_free(void*, int)>:
c0007a7f:	83 ec 14             	sub    esp,0x14
c0007a82:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a86:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007a8c:	e8 bb 1f 00 00       	call   c0009a4c <VAS::freeAllocatedPages(unsigned long)>
c0007a91:	b8 00 00 00 00       	mov    eax,0x0
c0007a96:	83 c4 1c             	add    esp,0x1c
c0007a99:	c3                   	ret    

c0007a9a <realloc>:
c0007a9a:	83 ec 14             	sub    esp,0x14
c0007a9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aa1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aa5:	e8 3e 9b ff ff       	call   c00015e8 <dlrealloc>
c0007aaa:	83 c4 1c             	add    esp,0x1c
c0007aad:	c3                   	ret    

c0007aae <malloc>:
c0007aae:	83 ec 18             	sub    esp,0x18
c0007ab1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ab5:	e8 f1 95 ff ff       	call   c00010ab <dlmalloc>
c0007aba:	83 c4 1c             	add    esp,0x1c
c0007abd:	c3                   	ret    

c0007abe <free>:
c0007abe:	83 ec 18             	sub    esp,0x18
c0007ac1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ac5:	e8 89 92 ff ff       	call   c0000d53 <dlfree>
c0007aca:	83 c4 1c             	add    esp,0x1c
c0007acd:	c3                   	ret    

c0007ace <rfree>:
c0007ace:	83 ec 18             	sub    esp,0x18
c0007ad1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ad5:	e8 79 92 ff ff       	call   c0000d53 <dlfree>
c0007ada:	83 c4 1c             	add    esp,0x1c
c0007add:	c3                   	ret    

c0007ade <calloc>:
c0007ade:	56                   	push   esi
c0007adf:	53                   	push   ebx
c0007ae0:	83 ec 10             	sub    esp,0x10
c0007ae3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007ae7:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007aec:	53                   	push   ebx
c0007aed:	e8 bc ff ff ff       	call   c0007aae <malloc>
c0007af2:	89 c6                	mov    esi,eax
c0007af4:	83 c4 0c             	add    esp,0xc
c0007af7:	53                   	push   ebx
c0007af8:	6a 00                	push   0x0
c0007afa:	50                   	push   eax
c0007afb:	e8 f0 89 ff ff       	call   c00004f0 <memset>
c0007b00:	89 f0                	mov    eax,esi
c0007b02:	83 c4 14             	add    esp,0x14
c0007b05:	5b                   	pop    ebx
c0007b06:	5e                   	pop    esi
c0007b07:	c3                   	ret    

c0007b08 <KeEntryPoint>:
c0007b08:	57                   	push   edi
c0007b09:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b0e:	56                   	push   esi
c0007b0f:	89 fa                	mov    edx,edi
c0007b11:	53                   	push   ebx
c0007b12:	31 f6                	xor    esi,esi
c0007b14:	83 ec 2c             	sub    esp,0x2c
c0007b17:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b1c:	a3 d0 4e 02 c0       	mov    ds:0xc0024ed0,eax
c0007b21:	89 f0                	mov    eax,esi
c0007b23:	ee                   	out    dx,al
c0007b24:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b29:	b0 80                	mov    al,0x80
c0007b2b:	89 da                	mov    edx,ebx
c0007b2d:	ee                   	out    dx,al
c0007b2e:	b1 03                	mov    cl,0x3
c0007b30:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b35:	88 c8                	mov    al,cl
c0007b37:	ee                   	out    dx,al
c0007b38:	89 f0                	mov    eax,esi
c0007b3a:	89 fa                	mov    edx,edi
c0007b3c:	ee                   	out    dx,al
c0007b3d:	88 c8                	mov    al,cl
c0007b3f:	89 da                	mov    edx,ebx
c0007b41:	ee                   	out    dx,al
c0007b42:	b0 c7                	mov    al,0xc7
c0007b44:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b49:	ee                   	out    dx,al
c0007b4a:	b0 0b                	mov    al,0xb
c0007b4c:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b51:	ee                   	out    dx,al
c0007b52:	68 14 fc 01 c0       	push   0xc001fc14
c0007b57:	e8 9b 2e 00 00       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c0007b5c:	e8 d4 86 00 00       	call   c0010235 <KeDisplaySplashScreen()>
c0007b61:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b66:	05 ff 0f 00 00       	add    eax,0xfff
c0007b6b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b70:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b73:	e8 a9 03 00 00       	call   c0007f21 <Phys::physicalMemorySetup(unsigned int)>
c0007b78:	e8 7e 1c 00 00       	call   c00097fb <Virt::virtualMemorySetup()>
c0007b7d:	58                   	pop    eax
c0007b7e:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007b82:	53                   	push   ebx
c0007b83:	e8 44 1f 00 00       	call   c0009acc <VAS::VAS()>
c0007b88:	89 1d b0 4f 02 c0    	mov    DWORD PTR ds:0xc0024fb0,ebx
c0007b8e:	e8 f7 6c 01 00       	call   c001e88a <_init>
c0007b93:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007b9a:	e8 0f ff ff ff       	call   c0007aae <malloc>
c0007b9f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007ba2:	89 c6                	mov    esi,eax
c0007ba4:	e8 35 f2 ff ff       	call   c0006dde <Computer::Computer()>
c0007ba9:	6a 00                	push   0x0
c0007bab:	89 35 b8 4e 02 c0    	mov    DWORD PTR ds:0xc0024eb8,esi
c0007bb1:	6a 00                	push   0x0
c0007bb3:	6a 00                	push   0x0
c0007bb5:	56                   	push   esi
c0007bb6:	e8 eb f5 ff ff       	call   c00071a6 <Computer::open(int, int, void*)>
c0007bbb:	83 c4 14             	add    esp,0x14
c0007bbe:	53                   	push   ebx
c0007bbf:	e8 d2 1f 00 00       	call   c0009b96 <VAS::~VAS()>
c0007bc4:	83 c4 30             	add    esp,0x30
c0007bc7:	5b                   	pop    ebx
c0007bc8:	5e                   	pop    esi
c0007bc9:	5f                   	pop    edi
c0007bca:	c3                   	ret    

c0007bcb <Phys::allocateDMA(unsigned long)>:
c0007bcb:	55                   	push   ebp
c0007bcc:	31 ed                	xor    ebp,ebp
c0007bce:	57                   	push   edi
c0007bcf:	56                   	push   esi
c0007bd0:	53                   	push   ebx
c0007bd1:	31 db                	xor    ebx,ebx
c0007bd3:	83 ec 1c             	sub    esp,0x1c
c0007bd6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007bda:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007be2:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0007be8:	31 c0                	xor    eax,eax
c0007bea:	c1 ef 0c             	shr    edi,0xc
c0007bed:	eb 1b                	jmp    c0007c0a <Phys::allocateDMA(unsigned long)+0x3f>
c0007bef:	85 c0                	test   eax,eax
c0007bf1:	75 06                	jne    c0007bf9 <Phys::allocateDMA(unsigned long)+0x2e>
c0007bf3:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007bf7:	89 dd                	mov    ebp,ebx
c0007bf9:	8d 70 01             	lea    esi,[eax+0x1]
c0007bfc:	39 f7                	cmp    edi,esi
c0007bfe:	74 37                	je     c0007c37 <Phys::allocateDMA(unsigned long)+0x6c>
c0007c00:	89 f0                	mov    eax,esi
c0007c02:	83 c3 01             	add    ebx,0x1
c0007c05:	83 fb 0f             	cmp    ebx,0xf
c0007c08:	7f 13                	jg     c0007c1d <Phys::allocateDMA(unsigned long)+0x52>
c0007c0a:	80 bb ec 4e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdb114],0x0
c0007c11:	74 dc                	je     c0007bef <Phys::allocateDMA(unsigned long)+0x24>
c0007c13:	31 c0                	xor    eax,eax
c0007c15:	83 c3 01             	add    ebx,0x1
c0007c18:	83 fb 0f             	cmp    ebx,0xf
c0007c1b:	7e ed                	jle    c0007c0a <Phys::allocateDMA(unsigned long)+0x3f>
c0007c1d:	83 ec 0c             	sub    esp,0xc
c0007c20:	68 2c fc 01 c0       	push   0xc001fc2c
c0007c25:	e8 fd 8c 00 00       	call   c0010927 <KePanic(char const*)>
c0007c2a:	83 c4 10             	add    esp,0x10
c0007c2d:	31 c0                	xor    eax,eax
c0007c2f:	83 c4 1c             	add    esp,0x1c
c0007c32:	5b                   	pop    ebx
c0007c33:	5e                   	pop    esi
c0007c34:	5f                   	pop    edi
c0007c35:	5d                   	pop    ebp
c0007c36:	c3                   	ret    
c0007c37:	89 e9                	mov    ecx,ebp
c0007c39:	c1 f9 04             	sar    ecx,0x4
c0007c3c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007c40:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0007c44:	89 ca                	mov    edx,ecx
c0007c46:	83 ea 01             	sub    edx,0x1
c0007c49:	79 03                	jns    c0007c4e <Phys::allocateDMA(unsigned long)+0x83>
c0007c4b:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c4e:	c1 fa 04             	sar    edx,0x4
c0007c51:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007c55:	74 08                	je     c0007c5f <Phys::allocateDMA(unsigned long)+0x94>
c0007c57:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c5b:	31 c0                	xor    eax,eax
c0007c5d:	eb b6                	jmp    c0007c15 <Phys::allocateDMA(unsigned long)+0x4a>
c0007c5f:	85 f6                	test   esi,esi
c0007c61:	74 17                	je     c0007c7a <Phys::allocateDMA(unsigned long)+0xaf>
c0007c63:	8d 95 ec 4e 02 c0    	lea    edx,[ebp-0x3ffdb114]
c0007c69:	8d 84 05 ed 4e 02 c0 	lea    eax,[ebp+eax*1-0x3ffdb113]
c0007c70:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c73:	83 c2 01             	add    edx,0x1
c0007c76:	39 d0                	cmp    eax,edx
c0007c78:	75 f6                	jne    c0007c70 <Phys::allocateDMA(unsigned long)+0xa5>
c0007c7a:	a1 e4 4e 02 c0       	mov    eax,ds:0xc0024ee4
c0007c7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007c83:	01 f8                	add    eax,edi
c0007c85:	85 d2                	test   edx,edx
c0007c87:	a3 e4 4e 02 c0       	mov    ds:0xc0024ee4,eax
c0007c8c:	74 17                	je     c0007ca5 <Phys::allocateDMA(unsigned long)+0xda>
c0007c8e:	83 ec 0c             	sub    esp,0xc
c0007c91:	68 2c fc 01 c0       	push   0xc001fc2c
c0007c96:	e8 8c 8c 00 00       	call   c0010927 <KePanic(char const*)>
c0007c9b:	83 c4 10             	add    esp,0x10
c0007c9e:	89 f0                	mov    eax,esi
c0007ca0:	e9 5d ff ff ff       	jmp    c0007c02 <Phys::allocateDMA(unsigned long)+0x37>
c0007ca5:	c1 e5 0c             	shl    ebp,0xc
c0007ca8:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007cae:	e9 7c ff ff ff       	jmp    c0007c2f <Phys::allocateDMA(unsigned long)+0x64>

c0007cb3 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007cb3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cb7:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cbd:	a1 e4 4e 02 c0       	mov    eax,ds:0xc0024ee4
c0007cc2:	c1 ea 0c             	shr    edx,0xc
c0007cc5:	29 d0                	sub    eax,edx
c0007cc7:	a3 e4 4e 02 c0       	mov    ds:0xc0024ee4,eax
c0007ccc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd0:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007cd5:	c1 e8 0c             	shr    eax,0xc
c0007cd8:	85 d2                	test   edx,edx
c0007cda:	74 11                	je     c0007ced <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007cdc:	05 ec 4e 02 c0       	add    eax,0xc0024eec
c0007ce1:	01 c2                	add    edx,eax
c0007ce3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007ce6:	83 c0 01             	add    eax,0x1
c0007ce9:	39 d0                	cmp    eax,edx
c0007ceb:	75 f6                	jne    c0007ce3 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007ced:	c3                   	ret    

c0007cee <Phys::setPageState(unsigned long, bool)>:
c0007cee:	57                   	push   edi
c0007cef:	56                   	push   esi
c0007cf0:	8b 35 4c 1f 02 c0    	mov    esi,DWORD PTR ds:0xc0021f4c
c0007cf6:	53                   	push   ebx
c0007cf7:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007cfc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d00:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d04:	0f b6 c0             	movzx  eax,al
c0007d07:	89 ca                	mov    edx,ecx
c0007d09:	83 e1 07             	and    ecx,0x7
c0007d0c:	c1 ea 03             	shr    edx,0x3
c0007d0f:	d3 c3                	rol    ebx,cl
c0007d11:	01 d6                	add    esi,edx
c0007d13:	d3 e0                	shl    eax,cl
c0007d15:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d18:	21 fb                	and    ebx,edi
c0007d1a:	88 1e                	mov    BYTE PTR [esi],bl
c0007d1c:	8b 1d 4c 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021f4c
c0007d22:	01 da                	add    edx,ebx
c0007d24:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d26:	09 c8                	or     eax,ecx
c0007d28:	88 02                	mov    BYTE PTR [edx],al
c0007d2a:	5b                   	pop    ebx
c0007d2b:	5e                   	pop    esi
c0007d2c:	5f                   	pop    edi
c0007d2d:	c3                   	ret    

c0007d2e <Phys::getPageState(unsigned long)>:
c0007d2e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d32:	8b 15 4c 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021f4c
c0007d38:	89 c8                	mov    eax,ecx
c0007d3a:	83 e1 07             	and    ecx,0x7
c0007d3d:	c1 e8 03             	shr    eax,0x3
c0007d40:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d44:	d3 f8                	sar    eax,cl
c0007d46:	83 e0 01             	and    eax,0x1
c0007d49:	c3                   	ret    

c0007d4a <Phys::freePage(unsigned long)>:
c0007d4a:	53                   	push   ebx
c0007d4b:	83 ec 08             	sub    esp,0x8
c0007d4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d52:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d58:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d5e:	76 41                	jbe    c0007da1 <Phys::freePage(unsigned long)+0x57>
c0007d60:	c1 e8 0c             	shr    eax,0xc
c0007d63:	50                   	push   eax
c0007d64:	89 c3                	mov    ebx,eax
c0007d66:	e8 c3 ff ff ff       	call   c0007d2e <Phys::getPageState(unsigned long)>
c0007d6b:	5a                   	pop    edx
c0007d6c:	84 c0                	test   al,al
c0007d6e:	74 20                	je     c0007d90 <Phys::freePage(unsigned long)+0x46>
c0007d70:	83 ec 08             	sub    esp,0x8
c0007d73:	a1 e4 4e 02 c0       	mov    eax,ds:0xc0024ee4
c0007d78:	6a 00                	push   0x0
c0007d7a:	83 e8 01             	sub    eax,0x1
c0007d7d:	53                   	push   ebx
c0007d7e:	a3 e4 4e 02 c0       	mov    ds:0xc0024ee4,eax
c0007d83:	e8 66 ff ff ff       	call   c0007cee <Phys::setPageState(unsigned long, bool)>
c0007d88:	83 c4 10             	add    esp,0x10
c0007d8b:	83 c4 08             	add    esp,0x8
c0007d8e:	5b                   	pop    ebx
c0007d8f:	c3                   	ret    
c0007d90:	c7 44 24 10 d1 fc 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fcd1
c0007d98:	83 c4 08             	add    esp,0x8
c0007d9b:	5b                   	pop    ebx
c0007d9c:	e9 86 8b 00 00       	jmp    c0010927 <KePanic(char const*)>
c0007da1:	68 00 10 00 00       	push   0x1000
c0007da6:	50                   	push   eax
c0007da7:	e8 07 ff ff ff       	call   c0007cb3 <Phys::freeDMA(unsigned long, unsigned long)>
c0007dac:	59                   	pop    ecx
c0007dad:	5b                   	pop    ebx
c0007dae:	83 c4 08             	add    esp,0x8
c0007db1:	5b                   	pop    ebx
c0007db2:	c3                   	ret    

c0007db3 <Phys::allocatePage()>:
c0007db3:	56                   	push   esi
c0007db4:	53                   	push   ebx
c0007db5:	83 ec 14             	sub    esp,0x14
c0007db8:	8b 35 d8 4e 02 c0    	mov    esi,DWORD PTR ds:0xc0024ed8
c0007dbe:	89 f3                	mov    ebx,esi
c0007dc0:	eb 0a                	jmp    c0007dcc <Phys::allocatePage()+0x19>
c0007dc2:	89 1d d8 4e 02 c0    	mov    DWORD PTR ds:0xc0024ed8,ebx
c0007dc8:	39 de                	cmp    esi,ebx
c0007dca:	74 26                	je     c0007df2 <Phys::allocatePage()+0x3f>
c0007dcc:	53                   	push   ebx
c0007dcd:	e8 5c ff ff ff       	call   c0007d2e <Phys::getPageState(unsigned long)>
c0007dd2:	5a                   	pop    edx
c0007dd3:	84 c0                	test   al,al
c0007dd5:	74 67                	je     c0007e3e <Phys::allocatePage()+0x8b>
c0007dd7:	83 c3 01             	add    ebx,0x1
c0007dda:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007de0:	75 e0                	jne    c0007dc2 <Phys::allocatePage()+0xf>
c0007de2:	31 db                	xor    ebx,ebx
c0007de4:	c7 05 d8 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024ed8,0x0
c0007dee:	39 de                	cmp    esi,ebx
c0007df0:	75 da                	jne    c0007dcc <Phys::allocatePage()+0x19>
c0007df2:	83 ec 0c             	sub    esp,0xc
c0007df5:	a0 fc 4e 02 c0       	mov    al,ds:0xc0024efc
c0007dfa:	83 f0 01             	xor    eax,0x1
c0007dfd:	a2 fc 4e 02 c0       	mov    ds:0xc0024efc,al
c0007e02:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e07:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e0a:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e10:	50                   	push   eax
c0007e11:	e8 66 28 00 00       	call   c000a67c <VAS::scanForEviction()>
c0007e16:	83 c4 10             	add    esp,0x10
c0007e19:	85 c0                	test   eax,eax
c0007e1b:	75 48                	jne    c0007e65 <Phys::allocatePage()+0xb2>
c0007e1d:	83 ec 0c             	sub    esp,0xc
c0007e20:	68 54 fc 01 c0       	push   0xc001fc54
c0007e25:	e8 fd 8a 00 00       	call   c0010927 <KePanic(char const*)>
c0007e2a:	83 c4 10             	add    esp,0x10
c0007e2d:	8b 1d d8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024ed8
c0007e33:	53                   	push   ebx
c0007e34:	e8 f5 fe ff ff       	call   c0007d2e <Phys::getPageState(unsigned long)>
c0007e39:	5a                   	pop    edx
c0007e3a:	84 c0                	test   al,al
c0007e3c:	75 99                	jne    c0007dd7 <Phys::allocatePage()+0x24>
c0007e3e:	6a 01                	push   0x1
c0007e40:	53                   	push   ebx
c0007e41:	e8 a8 fe ff ff       	call   c0007cee <Phys::setPageState(unsigned long, bool)>
c0007e46:	8b 15 e4 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024ee4
c0007e4c:	a1 d8 4e 02 c0       	mov    eax,ds:0xc0024ed8
c0007e51:	83 c2 01             	add    edx,0x1
c0007e54:	59                   	pop    ecx
c0007e55:	89 15 e4 4e 02 c0    	mov    DWORD PTR ds:0xc0024ee4,edx
c0007e5b:	c1 e0 0c             	shl    eax,0xc
c0007e5e:	5b                   	pop    ebx
c0007e5f:	83 c4 14             	add    esp,0x14
c0007e62:	5b                   	pop    ebx
c0007e63:	5e                   	pop    esi
c0007e64:	c3                   	ret    
c0007e65:	83 ec 08             	sub    esp,0x8
c0007e68:	89 c2                	mov    edx,eax
c0007e6a:	6a 01                	push   0x1
c0007e6c:	c1 ea 0c             	shr    edx,0xc
c0007e6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e73:	52                   	push   edx
c0007e74:	e8 75 fe ff ff       	call   c0007cee <Phys::setPageState(unsigned long, bool)>
c0007e79:	83 c4 10             	add    esp,0x10
c0007e7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e80:	eb dd                	jmp    c0007e5f <Phys::allocatePage()+0xac>

c0007e82 <Phys::allocateContiguousPages(int)>:
c0007e82:	57                   	push   edi
c0007e83:	56                   	push   esi
c0007e84:	53                   	push   ebx
c0007e85:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007e89:	fa                   	cli    
c0007e8a:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007e8f:	31 db                	xor    ebx,ebx
c0007e91:	83 c0 01             	add    eax,0x1
c0007e94:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007e99:	85 db                	test   ebx,ebx
c0007e9b:	75 11                	jne    c0007eae <Phys::allocateContiguousPages(int)+0x2c>
c0007e9d:	e8 11 ff ff ff       	call   c0007db3 <Phys::allocatePage()>
c0007ea2:	83 fe 01             	cmp    esi,0x1
c0007ea5:	89 c7                	mov    edi,eax
c0007ea7:	74 21                	je     c0007eca <Phys::allocateContiguousPages(int)+0x48>
c0007ea9:	bb 01 00 00 00       	mov    ebx,0x1
c0007eae:	e8 00 ff ff ff       	call   c0007db3 <Phys::allocatePage()>
c0007eb3:	89 da                	mov    edx,ebx
c0007eb5:	c1 e2 0c             	shl    edx,0xc
c0007eb8:	01 fa                	add    edx,edi
c0007eba:	39 c2                	cmp    edx,eax
c0007ebc:	74 22                	je     c0007ee0 <Phys::allocateContiguousPages(int)+0x5e>
c0007ebe:	bb 01 00 00 00       	mov    ebx,0x1
c0007ec3:	89 c7                	mov    edi,eax
c0007ec5:	83 fe 01             	cmp    esi,0x1
c0007ec8:	75 e4                	jne    c0007eae <Phys::allocateContiguousPages(int)+0x2c>
c0007eca:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007ecf:	83 e8 01             	sub    eax,0x1
c0007ed2:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007ed7:	75 01                	jne    c0007eda <Phys::allocateContiguousPages(int)+0x58>
c0007ed9:	fb                   	sti    
c0007eda:	89 f8                	mov    eax,edi
c0007edc:	5b                   	pop    ebx
c0007edd:	5e                   	pop    esi
c0007ede:	5f                   	pop    edi
c0007edf:	c3                   	ret    
c0007ee0:	83 c3 01             	add    ebx,0x1
c0007ee3:	39 f3                	cmp    ebx,esi
c0007ee5:	75 b2                	jne    c0007e99 <Phys::allocateContiguousPages(int)+0x17>
c0007ee7:	eb e1                	jmp    c0007eca <Phys::allocateContiguousPages(int)+0x48>

c0007ee9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007ee9:	56                   	push   esi
c0007eea:	53                   	push   ebx
c0007eeb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007eef:	39 1d dc 4e 02 c0    	cmp    DWORD PTR ds:0xc0024edc,ebx
c0007ef5:	73 06                	jae    c0007efd <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007ef7:	89 1d dc 4e 02 c0    	mov    DWORD PTR ds:0xc0024edc,ebx
c0007efd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f01:	c1 eb 0c             	shr    ebx,0xc
c0007f04:	c1 e8 0c             	shr    eax,0xc
c0007f07:	39 d8                	cmp    eax,ebx
c0007f09:	73 13                	jae    c0007f1e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f0b:	6a 00                	push   0x0
c0007f0d:	8d 70 01             	lea    esi,[eax+0x1]
c0007f10:	50                   	push   eax
c0007f11:	e8 d8 fd ff ff       	call   c0007cee <Phys::setPageState(unsigned long, bool)>
c0007f16:	5a                   	pop    edx
c0007f17:	89 f0                	mov    eax,esi
c0007f19:	59                   	pop    ecx
c0007f1a:	39 f3                	cmp    ebx,esi
c0007f1c:	75 ed                	jne    c0007f0b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f1e:	5b                   	pop    ebx
c0007f1f:	5e                   	pop    esi
c0007f20:	c3                   	ret    

c0007f21 <Phys::physicalMemorySetup(unsigned int)>:
c0007f21:	55                   	push   ebp
c0007f22:	57                   	push   edi
c0007f23:	56                   	push   esi
c0007f24:	53                   	push   ebx
c0007f25:	83 ec 40             	sub    esp,0x40
c0007f28:	6a 10                	push   0x10
c0007f2a:	6a 00                	push   0x0
c0007f2c:	68 ec 4e 02 c0       	push   0xc0024eec
c0007f31:	e8 ba 85 ff ff       	call   c00004f0 <memset>
c0007f36:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f3a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f3f:	05 00 10 00 00       	add    eax,0x1000
c0007f44:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007f48:	5b                   	pop    ebx
c0007f49:	31 db                	xor    ebx,ebx
c0007f4b:	5e                   	pop    esi
c0007f4c:	50                   	push   eax
c0007f4d:	68 e7 fc 01 c0       	push   0xc001fce7
c0007f52:	e8 a0 2a 00 00       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c0007f57:	83 c4 10             	add    esp,0x10
c0007f5a:	83 ec 08             	sub    esp,0x8
c0007f5d:	6a 01                	push   0x1
c0007f5f:	53                   	push   ebx
c0007f60:	83 c3 01             	add    ebx,0x1
c0007f63:	e8 86 fd ff ff       	call   c0007cee <Phys::setPageState(unsigned long, bool)>
c0007f68:	83 c4 10             	add    esp,0x10
c0007f6b:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007f71:	75 e7                	jne    c0007f5a <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007f73:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0007f7a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007f7e:	85 c0                	test   eax,eax
c0007f80:	0f 84 98 01 00 00    	je     c000811e <Phys::physicalMemorySetup(unsigned int)+0x1fd>
c0007f86:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007f8a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007f92:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007f97:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007f9b:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007fa3:	eb 1c                	jmp    c0007fc1 <Phys::physicalMemorySetup(unsigned int)+0xa0>
c0007fa5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007fa9:	83 c3 18             	add    ebx,0x18
c0007fac:	83 c6 01             	add    esi,0x1
c0007faf:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0007fb3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007fb7:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007fbb:	0f 84 6d 01 00 00    	je     c000812e <Phys::physicalMemorySetup(unsigned int)+0x20d>
c0007fc1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007fc4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007fc7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007fca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007fce:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007fd2:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007fd4:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007fd7:	01 f0                	add    eax,esi
c0007fd9:	55                   	push   ebp
c0007fda:	11 fa                	adc    edx,edi
c0007fdc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007fe0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007fe4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007fe8:	51                   	push   ecx
c0007fe9:	56                   	push   esi
c0007fea:	68 84 fc 01 c0       	push   0xc001fc84
c0007fef:	e8 03 2a 00 00       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c0007ff4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007ff8:	83 c4 10             	add    esp,0x10
c0007ffb:	09 f8                	or     eax,edi
c0007ffd:	0f 85 2b 01 00 00    	jne    c000812e <Phys::physicalMemorySetup(unsigned int)+0x20d>
c0008003:	83 fd 01             	cmp    ebp,0x1
c0008006:	75 9d                	jne    c0007fa5 <Phys::physicalMemorySetup(unsigned int)+0x84>
c0008008:	ba 00 00 08 00       	mov    edx,0x80000
c000800d:	89 c1                	mov    ecx,eax
c000800f:	39 f2                	cmp    edx,esi
c0008011:	19 f9                	sbb    ecx,edi
c0008013:	0f 82 ab 00 00 00    	jb     c00080c4 <Phys::physicalMemorySetup(unsigned int)+0x1a3>
c0008019:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000801d:	89 c1                	mov    ecx,eax
c000801f:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0008023:	0f 83 9b 00 00 00    	jae    c00080c4 <Phys::physicalMemorySetup(unsigned int)+0x1a3>
c0008029:	ba 00 00 0a 00       	mov    edx,0xa0000
c000802e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008032:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0008036:	39 fa                	cmp    edx,edi
c0008038:	19 e8                	sbb    eax,ebp
c000803a:	0f 82 b0 01 00 00    	jb     c00081f0 <Phys::physicalMemorySetup(unsigned int)+0x2cf>
c0008040:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008044:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0008048:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000804e:	ba ff 1f 00 00       	mov    edx,0x1fff
c0008053:	83 d5 ff             	adc    ebp,0xffffffff
c0008056:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000805a:	31 c0                	xor    eax,eax
c000805c:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0008060:	39 fa                	cmp    edx,edi
c0008062:	89 c1                	mov    ecx,eax
c0008064:	19 e9                	sbb    ecx,ebp
c0008066:	0f 83 39 ff ff ff    	jae    c0007fa5 <Phys::physicalMemorySetup(unsigned int)+0x84>
c000806c:	be 00 00 08 00       	mov    esi,0x80000
c0008071:	83 ec 04             	sub    esp,0x4
c0008074:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0008078:	57                   	push   edi
c0008079:	56                   	push   esi
c000807a:	68 a8 fc 01 c0       	push   0xc001fca8
c000807f:	e8 73 29 00 00       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c0008084:	5d                   	pop    ebp
c0008085:	58                   	pop    eax
c0008086:	57                   	push   edi
c0008087:	56                   	push   esi
c0008088:	e8 5c fe ff ff       	call   c0007ee9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000808d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008091:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008095:	83 c4 0c             	add    esp,0xc
c0008098:	0f ac d0 0c          	shrd   eax,edx,0xc
c000809c:	8b 15 e8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024ee8
c00080a2:	01 d0                	add    eax,edx
c00080a4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00080ab:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c00080b0:	52                   	push   edx
c00080b1:	50                   	push   eax
c00080b2:	68 0d fd 01 c0       	push   0xc001fd0d
c00080b7:	e8 3b 29 00 00       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c00080bc:	83 c4 10             	add    esp,0x10
c00080bf:	e9 e1 fe ff ff       	jmp    c0007fa5 <Phys::physicalMemorySetup(unsigned int)+0x84>
c00080c4:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00080c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00080cc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080d0:	39 ea                	cmp    edx,ebp
c00080d2:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00080d6:	0f 82 c9 fe ff ff    	jb     c0007fa5 <Phys::physicalMemorySetup(unsigned int)+0x84>
c00080dc:	ba ff 1f 00 00       	mov    edx,0x1fff
c00080e1:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00080e5:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00080e9:	0f 83 b6 fe ff ff    	jae    c0007fa5 <Phys::physicalMemorySetup(unsigned int)+0x84>
c00080ef:	39 ee                	cmp    esi,ebp
c00080f1:	89 f8                	mov    eax,edi
c00080f3:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c00080f7:	0f 83 74 ff ff ff    	jae    c0008071 <Phys::physicalMemorySetup(unsigned int)+0x150>
c00080fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008101:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008105:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0008109:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000810d:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0008111:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008115:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008119:	e9 53 ff ff ff       	jmp    c0008071 <Phys::physicalMemorySetup(unsigned int)+0x150>
c000811e:	83 ec 0c             	sub    esp,0xc
c0008121:	68 ff fc 01 c0       	push   0xc001fcff
c0008126:	e8 fc 87 00 00       	call   c0010927 <KePanic(char const*)>
c000812b:	83 c4 10             	add    esp,0x10
c000812e:	83 ec 08             	sub    esp,0x8
c0008131:	bb 60 00 00 00       	mov    ebx,0x60
c0008136:	6a 00                	push   0x0
c0008138:	6a 06                	push   0x6
c000813a:	e8 af fb ff ff       	call   c0007cee <Phys::setPageState(unsigned long, bool)>
c000813f:	58                   	pop    eax
c0008140:	5a                   	pop    edx
c0008141:	6a 00                	push   0x0
c0008143:	6a 07                	push   0x7
c0008145:	e8 a4 fb ff ff       	call   c0007cee <Phys::setPageState(unsigned long, bool)>
c000814a:	8b 0d e8 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024ee8
c0008150:	83 c4 10             	add    esp,0x10
c0008153:	83 c1 02             	add    ecx,0x2
c0008156:	89 0d e8 4e 02 c0    	mov    DWORD PTR ds:0xc0024ee8,ecx
c000815c:	83 ec 08             	sub    esp,0x8
c000815f:	6a 00                	push   0x0
c0008161:	53                   	push   ebx
c0008162:	83 c3 01             	add    ebx,0x1
c0008165:	e8 84 fb ff ff       	call   c0007cee <Phys::setPageState(unsigned long, bool)>
c000816a:	83 c4 10             	add    esp,0x10
c000816d:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008173:	75 e7                	jne    c000815c <Phys::physicalMemorySetup(unsigned int)+0x23b>
c0008175:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c000817a:	bb 40 01 00 00       	mov    ebx,0x140
c000817f:	83 c0 20             	add    eax,0x20
c0008182:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c0008187:	eb 26                	jmp    c00081af <Phys::physicalMemorySetup(unsigned int)+0x28e>
c0008189:	83 ec 08             	sub    esp,0x8
c000818c:	6a 00                	push   0x0
c000818e:	53                   	push   ebx
c000818f:	83 c3 01             	add    ebx,0x1
c0008192:	e8 57 fb ff ff       	call   c0007cee <Phys::setPageState(unsigned long, bool)>
c0008197:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c000819c:	83 c4 10             	add    esp,0x10
c000819f:	83 c0 01             	add    eax,0x1
c00081a2:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00081a8:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c00081ad:	74 07                	je     c00081b6 <Phys::physicalMemorySetup(unsigned int)+0x295>
c00081af:	3d ff 03 00 00       	cmp    eax,0x3ff
c00081b4:	7e d3                	jle    c0008189 <Phys::physicalMemorySetup(unsigned int)+0x268>
c00081b6:	bb d0 01 00 00       	mov    ebx,0x1d0
c00081bb:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081c0:	7f 26                	jg     c00081e8 <Phys::physicalMemorySetup(unsigned int)+0x2c7>
c00081c2:	83 ec 08             	sub    esp,0x8
c00081c5:	6a 00                	push   0x0
c00081c7:	53                   	push   ebx
c00081c8:	83 c3 01             	add    ebx,0x1
c00081cb:	e8 1e fb ff ff       	call   c0007cee <Phys::setPageState(unsigned long, bool)>
c00081d0:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c00081d5:	83 c4 10             	add    esp,0x10
c00081d8:	83 c0 01             	add    eax,0x1
c00081db:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081e1:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c00081e6:	75 d3                	jne    c00081bb <Phys::physicalMemorySetup(unsigned int)+0x29a>
c00081e8:	83 c4 3c             	add    esp,0x3c
c00081eb:	5b                   	pop    ebx
c00081ec:	5e                   	pop    esi
c00081ed:	5f                   	pop    edi
c00081ee:	5d                   	pop    ebp
c00081ef:	c3                   	ret    
c00081f0:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c00081f8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008200:	e9 3b fe ff ff       	jmp    c0008040 <Phys::physicalMemorySetup(unsigned int)+0x11f>
c0008205:	90                   	nop

c0008206 <Pipe::isAtty()>:
c0008206:	31 c0                	xor    eax,eax
c0008208:	c3                   	ret    
c0008209:	90                   	nop

c000820a <Pipe::~Pipe()>:
c000820a:	83 ec 0c             	sub    esp,0xc
c000820d:	ba 6c fd 01 c0       	mov    edx,0xc001fd6c
c0008212:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008216:	89 10                	mov    DWORD PTR [eax],edx
c0008218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000821c:	83 ec 0c             	sub    esp,0xc
c000821f:	50                   	push   eax
c0008220:	e8 8f 11 00 00       	call   c00093b4 <UnixFile::~UnixFile()>
c0008225:	83 c4 10             	add    esp,0x10
c0008228:	90                   	nop
c0008229:	83 c4 0c             	add    esp,0xc
c000822c:	c3                   	ret    
c000822d:	90                   	nop

c000822e <Pipe::~Pipe()>:
c000822e:	83 ec 0c             	sub    esp,0xc
c0008231:	83 ec 0c             	sub    esp,0xc
c0008234:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008238:	e8 cd ff ff ff       	call   c000820a <Pipe::~Pipe()>
c000823d:	83 c4 10             	add    esp,0x10
c0008240:	83 ec 08             	sub    esp,0x8
c0008243:	6a 20                	push   0x20
c0008245:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008249:	e8 7c 26 00 00       	call   c000a8ca <operator delete(void*, unsigned long)>
c000824e:	83 c4 10             	add    esp,0x10
c0008251:	83 c4 0c             	add    esp,0xc
c0008254:	c3                   	ret    
c0008255:	90                   	nop

c0008256 <Pipe::write(unsigned long long, void*, int*)>:
c0008256:	55                   	push   ebp
c0008257:	57                   	push   edi
c0008258:	56                   	push   esi
c0008259:	53                   	push   ebx
c000825a:	83 ec 1c             	sub    esp,0x1c
c000825d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008261:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008265:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0008268:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000826c:	89 04 24             	mov    DWORD PTR [esp],eax
c000826f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008273:	89 d8                	mov    eax,ebx
c0008275:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0008278:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000827c:	89 d6                	mov    esi,edx
c000827e:	89 d7                	mov    edi,edx
c0008280:	c1 ff 1f             	sar    edi,0x1f
c0008283:	03 34 24             	add    esi,DWORD PTR [esp]
c0008286:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000828a:	c1 f8 1f             	sar    eax,0x1f
c000828d:	39 f3                	cmp    ebx,esi
c000828f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008297:	19 f8                	sbb    eax,edi
c0008299:	b8 01 00 00 00       	mov    eax,0x1
c000829e:	72 6e                	jb     c000830e <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00082a0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082a3:	01 d0                	add    eax,edx
c00082a5:	99                   	cdq    
c00082a6:	f7 fb                	idiv   ebx
c00082a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082ac:	29 d3                	sub    ebx,edx
c00082ae:	89 d7                	mov    edi,edx
c00082b0:	89 de                	mov    esi,ebx
c00082b2:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082b5:	c1 fb 1f             	sar    ebx,0x1f
c00082b8:	39 f2                	cmp    edx,esi
c00082ba:	19 d8                	sbb    eax,ebx
c00082bc:	b8 00 00 00 00       	mov    eax,0x0
c00082c1:	72 04                	jb     c00082c7 <Pipe::write(unsigned long long, void*, int*)+0x71>
c00082c3:	89 d0                	mov    eax,edx
c00082c5:	29 f0                	sub    eax,esi
c00082c7:	89 d3                	mov    ebx,edx
c00082c9:	29 c3                	sub    ebx,eax
c00082cb:	74 0b                	je     c00082d8 <Pipe::write(unsigned long long, void*, int*)+0x82>
c00082cd:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00082d0:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00082d4:	89 d9                	mov    ecx,ebx
c00082d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082d8:	85 c0                	test   eax,eax
c00082da:	74 0d                	je     c00082e9 <Pipe::write(unsigned long long, void*, int*)+0x93>
c00082dc:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00082e0:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00082e3:	89 de                	mov    esi,ebx
c00082e5:	89 c1                	mov    ecx,eax
c00082e7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082e9:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c00082ec:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00082f1:	75 10                	jne    c0008303 <Pipe::write(unsigned long long, void*, int*)+0xad>
c00082f3:	83 ec 0c             	sub    esp,0xc
c00082f6:	68 29 fd 01 c0       	push   0xc001fd29
c00082fb:	e8 27 86 00 00       	call   c0010927 <KePanic(char const*)>
c0008300:	83 c4 10             	add    esp,0x10
c0008303:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008307:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000830a:	89 08                	mov    DWORD PTR [eax],ecx
c000830c:	31 c0                	xor    eax,eax
c000830e:	83 c4 1c             	add    esp,0x1c
c0008311:	5b                   	pop    ebx
c0008312:	5e                   	pop    esi
c0008313:	5f                   	pop    edi
c0008314:	5d                   	pop    ebp
c0008315:	c3                   	ret    

c0008316 <Pipe::read(unsigned long long, void*, int*)>:
c0008316:	55                   	push   ebp
c0008317:	57                   	push   edi
c0008318:	56                   	push   esi
c0008319:	53                   	push   ebx
c000831a:	83 ec 1c             	sub    esp,0x1c
c000831d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008321:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0008325:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0008329:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000832c:	89 c8                	mov    eax,ecx
c000832e:	99                   	cdq    
c000832f:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008333:	74 24                	je     c0008359 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008335:	39 f9                	cmp    ecx,edi
c0008337:	89 d1                	mov    ecx,edx
c0008339:	19 f1                	sbb    ecx,esi
c000833b:	73 1c                	jae    c0008359 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000833d:	fa                   	cli    
c000833e:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0008344:	e8 93 cd 00 00       	call   c00150dc <schedule()>
c0008349:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000834e:	48                   	dec    eax
c000834f:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0008354:	75 d3                	jne    c0008329 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008356:	fb                   	sti    
c0008357:	eb d0                	jmp    c0008329 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008359:	39 f8                	cmp    eax,edi
c000835b:	89 d1                	mov    ecx,edx
c000835d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008360:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0008364:	19 f1                	sbb    ecx,esi
c0008366:	73 07                	jae    c000836f <Pipe::read(unsigned long long, void*, int*)+0x59>
c0008368:	89 04 24             	mov    DWORD PTR [esp],eax
c000836b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000836f:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0008372:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0008375:	29 f7                	sub    edi,esi
c0008377:	89 f8                	mov    eax,edi
c0008379:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000837d:	99                   	cdq    
c000837e:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0008381:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008385:	19 d0                	sbb    eax,edx
c0008387:	73 07                	jae    c0008390 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0008389:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000838c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008390:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c0008393:	89 ea                	mov    edx,ebp
c0008395:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0008399:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000839e:	74 0d                	je     c00083ad <Pipe::read(unsigned long long, void*, int*)+0x97>
c00083a0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083a3:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083a7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00083ab:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083ad:	85 d2                	test   edx,edx
c00083af:	74 11                	je     c00083c2 <Pipe::read(unsigned long long, void*, int*)+0xac>
c00083b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083b5:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083b8:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083bc:	89 d1                	mov    ecx,edx
c00083be:	89 c7                	mov    edi,eax
c00083c0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083c2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083c5:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083c8:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083cb:	99                   	cdq    
c00083cc:	89 f7                	mov    edi,esi
c00083ce:	03 04 24             	add    eax,DWORD PTR [esp]
c00083d1:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00083d5:	c1 ff 1f             	sar    edi,0x1f
c00083d8:	57                   	push   edi
c00083d9:	56                   	push   esi
c00083da:	52                   	push   edx
c00083db:	50                   	push   eax
c00083dc:	e8 8f 63 01 00       	call   c001e770 <__umoddi3>
c00083e1:	83 c4 10             	add    esp,0x10
c00083e4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00083e7:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00083ec:	75 10                	jne    c00083fe <Pipe::read(unsigned long long, void*, int*)+0xe8>
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	68 46 fd 01 c0       	push   0xc001fd46
c00083f6:	e8 2c 85 00 00       	call   c0010927 <KePanic(char const*)>
c00083fb:	83 c4 10             	add    esp,0x10
c00083fe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008402:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0008405:	89 10                	mov    DWORD PTR [eax],edx
c0008407:	83 c4 1c             	add    esp,0x1c
c000840a:	31 c0                	xor    eax,eax
c000840c:	5b                   	pop    ebx
c000840d:	5e                   	pop    esi
c000840e:	5f                   	pop    edi
c000840f:	5d                   	pop    ebp
c0008410:	c3                   	ret    
c0008411:	90                   	nop

c0008412 <Pipe::Pipe(int)>:
c0008412:	83 ec 0c             	sub    esp,0xc
c0008415:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008419:	83 ec 08             	sub    esp,0x8
c000841c:	6a 00                	push   0x0
c000841e:	50                   	push   eax
c000841f:	e8 aa 0d 00 00       	call   c00091ce <UnixFile::UnixFile(int)>
c0008424:	83 c4 10             	add    esp,0x10
c0008427:	ba 6c fd 01 c0       	mov    edx,0xc001fd6c
c000842c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008430:	89 10                	mov    DWORD PTR [eax],edx
c0008432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008436:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000843a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000843d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008441:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0008448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000844c:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008453:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008457:	83 ec 0c             	sub    esp,0xc
c000845a:	50                   	push   eax
c000845b:	e8 4e f6 ff ff       	call   c0007aae <malloc>
c0008460:	83 c4 10             	add    esp,0x10
c0008463:	89 c2                	mov    edx,eax
c0008465:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008469:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000846c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008470:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0008474:	90                   	nop
c0008475:	83 c4 0c             	add    esp,0xc
c0008478:	c3                   	ret    
c0008479:	90                   	nop

c000847a <VgaText::isAtty()>:
c000847a:	b0 01                	mov    al,0x1
c000847c:	c3                   	ret    
c000847d:	90                   	nop

c000847e <VgaText::~VgaText()>:
c000847e:	83 ec 0c             	sub    esp,0xc
c0008481:	ba b4 fd 01 c0       	mov    edx,0xc001fdb4
c0008486:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000848a:	89 10                	mov    DWORD PTR [eax],edx
c000848c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008490:	83 ec 0c             	sub    esp,0xc
c0008493:	50                   	push   eax
c0008494:	e8 1b 0f 00 00       	call   c00093b4 <UnixFile::~UnixFile()>
c0008499:	83 c4 10             	add    esp,0x10
c000849c:	90                   	nop
c000849d:	83 c4 0c             	add    esp,0xc
c00084a0:	c3                   	ret    
c00084a1:	90                   	nop

c00084a2 <VgaText::~VgaText()>:
c00084a2:	83 ec 0c             	sub    esp,0xc
c00084a5:	83 ec 0c             	sub    esp,0xc
c00084a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084ac:	e8 cd ff ff ff       	call   c000847e <VgaText::~VgaText()>
c00084b1:	83 c4 10             	add    esp,0x10
c00084b4:	83 ec 08             	sub    esp,0x8
c00084b7:	68 84 01 00 00       	push   0x184
c00084bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084c0:	e8 05 24 00 00       	call   c000a8ca <operator delete(void*, unsigned long)>
c00084c5:	83 c4 10             	add    esp,0x10
c00084c8:	83 c4 0c             	add    esp,0xc
c00084cb:	c3                   	ret    

c00084cc <VgaText::read(unsigned long long, void*, int*)>:
c00084cc:	83 ec 10             	sub    esp,0x10
c00084cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084d3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00084d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084db:	e8 28 48 00 00       	call   c000cd08 <readKeyboard(VgaText*, char*, unsigned long)>
c00084e0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084e4:	89 02                	mov    DWORD PTR [edx],eax
c00084e6:	31 c0                	xor    eax,eax
c00084e8:	83 c4 1c             	add    esp,0x1c
c00084eb:	c3                   	ret    

c00084ec <setTerminalScrollLock(bool)>:
c00084ec:	c3                   	ret    

c00084ed <doTerminalCycle()>:
c00084ed:	c3                   	ret    

c00084ee <addToTerminalCycle(VgaText*)>:
c00084ee:	c3                   	ret    

c00084ef <scrollTerminalScrollLock(int)>:
c00084ef:	c3                   	ret    

c00084f0 <VgaText::updateTitle()>:
c00084f0:	c3                   	ret    
c00084f1:	90                   	nop

c00084f2 <VgaText::load()>:
c00084f2:	c3                   	ret    
c00084f3:	90                   	nop

c00084f4 <VgaText::updateCursor()>:
c00084f4:	83 ec 14             	sub    esp,0x14
c00084f7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084fb:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00084fe:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008501:	e8 1e f9 00 00       	call   c0017e24 <HalConsoleCursorUpdate(int, int)>
c0008506:	83 c4 1c             	add    esp,0x1c
c0008509:	c3                   	ret    

c000850a <VgaText::doANSI_SGR(int)>:
c000850a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000850e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008512:	85 d2                	test   edx,edx
c0008514:	75 0b                	jne    c0008521 <VgaText::doANSI_SGR(int)+0x17>
c0008516:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008519:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000851c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000851f:	eb 59                	jmp    c000857a <VgaText::doANSI_SGR(int)+0x70>
c0008521:	83 fa 07             	cmp    edx,0x7
c0008524:	75 0b                	jne    c0008531 <VgaText::doANSI_SGR(int)+0x27>
c0008526:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008529:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000852c:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000852f:	eb 49                	jmp    c000857a <VgaText::doANSI_SGR(int)+0x70>
c0008531:	83 fa 1b             	cmp    edx,0x1b
c0008534:	74 e0                	je     c0008516 <VgaText::doANSI_SGR(int)+0xc>
c0008536:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008539:	83 f9 07             	cmp    ecx,0x7
c000853c:	77 09                	ja     c0008547 <VgaText::doANSI_SGR(int)+0x3d>
c000853e:	8b 14 8d 80 1f 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffde080]
c0008545:	eb 20                	jmp    c0008567 <VgaText::doANSI_SGR(int)+0x5d>
c0008547:	8d 4a d8             	lea    ecx,[edx-0x28]
c000854a:	83 f9 07             	cmp    ecx,0x7
c000854d:	77 09                	ja     c0008558 <VgaText::doANSI_SGR(int)+0x4e>
c000854f:	8b 14 8d 80 1f 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffde080]
c0008556:	eb 22                	jmp    c000857a <VgaText::doANSI_SGR(int)+0x70>
c0008558:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000855b:	83 f9 07             	cmp    ecx,0x7
c000855e:	77 0b                	ja     c000856b <VgaText::doANSI_SGR(int)+0x61>
c0008560:	8b 14 95 38 1e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde1c8]
c0008567:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000856a:	c3                   	ret    
c000856b:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000856e:	83 f9 07             	cmp    ecx,0x7
c0008571:	77 0a                	ja     c000857d <VgaText::doANSI_SGR(int)+0x73>
c0008573:	8b 14 95 10 1e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde1f0]
c000857a:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000857d:	c3                   	ret    

c000857e <VgaText::setDefaultBgColour(VgaColour)>:
c000857e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008582:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008586:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0008589:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000858c:	c3                   	ret    
c000858d:	90                   	nop

c000858e <VgaText::setDefaultFgColour(VgaColour)>:
c000858e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008592:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008596:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0008599:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000859c:	c3                   	ret    
c000859d:	90                   	nop

c000859e <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000859e:	53                   	push   ebx
c000859f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085a3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085a7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085ab:	51                   	push   ecx
c00085ac:	e8 cd ff ff ff       	call   c000857e <VgaText::setDefaultBgColour(VgaColour)>
c00085b1:	58                   	pop    eax
c00085b2:	5a                   	pop    edx
c00085b3:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085b7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085bb:	5b                   	pop    ebx
c00085bc:	eb d0                	jmp    c000858e <VgaText::setDefaultFgColour(VgaColour)>

c00085be <VgaText::setTitleTextColour(VgaColour)>:
c00085be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085c6:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085c9:	c3                   	ret    

c00085ca <VgaText::setTitleColour(VgaColour)>:
c00085ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085d2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00085d5:	c3                   	ret    

c00085d6 <VgaText::setTitle(char*)>:
c00085d6:	c3                   	ret    
c00085d7:	90                   	nop

c00085d8 <VgaText::combineColours(unsigned char, unsigned char)>:
c00085d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085dc:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00085e1:	83 e0 0f             	and    eax,0xf
c00085e4:	c1 e2 04             	shl    edx,0x4
c00085e7:	09 d0                	or     eax,edx
c00085e9:	c3                   	ret    

c00085ea <VgaText::scrollScreen()>:
c00085ea:	55                   	push   ebp
c00085eb:	57                   	push   edi
c00085ec:	56                   	push   esi
c00085ed:	be 01 00 00 00       	mov    esi,0x1
c00085f2:	53                   	push   ebx
c00085f3:	83 ec 0c             	sub    esp,0xc
c00085f6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00085fa:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00085fd:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0008603:	31 ff                	xor    edi,edi
c0008605:	01 e9                	add    ecx,ebp
c0008607:	8a 01                	mov    al,BYTE PTR [ecx]
c0008609:	83 fe 18             	cmp    esi,0x18
c000860c:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0008612:	75 20                	jne    c0008634 <VgaText::scrollScreen()+0x4a>
c0008614:	f7 c7 01 00 00 00    	test   edi,0x1
c000861a:	74 15                	je     c0008631 <VgaText::scrollScreen()+0x47>
c000861c:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008620:	50                   	push   eax
c0008621:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008625:	50                   	push   eax
c0008626:	e8 ad ff ff ff       	call   c00085d8 <VgaText::combineColours(unsigned char, unsigned char)>
c000862b:	5a                   	pop    edx
c000862c:	5a                   	pop    edx
c000862d:	88 01                	mov    BYTE PTR [ecx],al
c000862f:	eb 03                	jmp    c0008634 <VgaText::scrollScreen()+0x4a>
c0008631:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0008634:	47                   	inc    edi
c0008635:	41                   	inc    ecx
c0008636:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000863c:	75 c9                	jne    c0008607 <VgaText::scrollScreen()+0x1d>
c000863e:	46                   	inc    esi
c000863f:	83 fe 19             	cmp    esi,0x19
c0008642:	75 b9                	jne    c00085fd <VgaText::scrollScreen()+0x13>
c0008644:	39 1d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebx
c000864a:	75 1f                	jne    c000866b <VgaText::scrollScreen()+0x81>
c000864c:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008650:	74 05                	je     c0008657 <VgaText::scrollScreen()+0x6d>
c0008652:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008655:	eb 14                	jmp    c000866b <VgaText::scrollScreen()+0x81>
c0008657:	50                   	push   eax
c0008658:	50                   	push   eax
c0008659:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000865d:	50                   	push   eax
c000865e:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008662:	50                   	push   eax
c0008663:	e8 50 f6 00 00       	call   c0017cb8 <HalConsoleScroll(int, int)>
c0008668:	83 c4 10             	add    esp,0x10
c000866b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000866f:	83 c4 0c             	add    esp,0xc
c0008672:	5b                   	pop    ebx
c0008673:	5e                   	pop    esi
c0008674:	5f                   	pop    edi
c0008675:	5d                   	pop    ebp
c0008676:	e9 79 fe ff ff       	jmp    c00084f4 <VgaText::updateCursor()>
c000867b:	90                   	nop

c000867c <VgaText::combineCharAndColour(char, unsigned char)>:
c000867c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008681:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0008686:	c1 e0 08             	shl    eax,0x8
c0008689:	09 d0                	or     eax,edx
c000868b:	c3                   	ret    

c000868c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000868c:	55                   	push   ebp
c000868d:	57                   	push   edi
c000868e:	56                   	push   esi
c000868f:	53                   	push   ebx
c0008690:	83 ec 1c             	sub    esp,0x1c
c0008693:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008697:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000869b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000869f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086a3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086a7:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086ab:	0f b6 c3             	movzx  eax,bl
c00086ae:	50                   	push   eax
c00086af:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086b4:	50                   	push   eax
c00086b5:	e8 1e ff ff ff       	call   c00085d8 <VgaText::combineColours(unsigned char, unsigned char)>
c00086ba:	5a                   	pop    edx
c00086bb:	0f b6 c0             	movzx  eax,al
c00086be:	59                   	pop    ecx
c00086bf:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086c4:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086c8:	50                   	push   eax
c00086c9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086cd:	e8 aa ff ff ff       	call   c000867c <VgaText::combineCharAndColour(char, unsigned char)>
c00086d2:	5a                   	pop    edx
c00086d3:	6b d7 50             	imul   edx,edi,0x50
c00086d6:	59                   	pop    ecx
c00086d7:	01 f2                	add    edx,esi
c00086d9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00086dc:	0f b7 d2             	movzx  edx,dx
c00086df:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00086e3:	39 2d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebp
c00086e9:	75 28                	jne    c0008713 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c00086eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00086ef:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00086f3:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c00086f7:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00086fb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00086ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008703:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008707:	83 c4 1c             	add    esp,0x1c
c000870a:	5b                   	pop    ebx
c000870b:	5e                   	pop    esi
c000870c:	5f                   	pop    edi
c000870d:	5d                   	pop    ebp
c000870e:	e9 ad f6 00 00       	jmp    c0017dc0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008713:	83 c4 1c             	add    esp,0x1c
c0008716:	5b                   	pop    ebx
c0008717:	5e                   	pop    esi
c0008718:	5f                   	pop    edi
c0008719:	5d                   	pop    ebp
c000871a:	c3                   	ret    
c000871b:	90                   	nop

c000871c <VgaText::getCursorX()>:
c000871c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008720:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008723:	c3                   	ret    

c0008724 <VgaText::getCursorY()>:
c0008724:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008728:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000872b:	c3                   	ret    

c000872c <VgaText::setCursor(int, int)>:
c000872c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008730:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008734:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008737:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000873b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000873e:	e9 b1 fd ff ff       	jmp    c00084f4 <VgaText::updateCursor()>

c0008743 <setActiveTerminal(VgaText*)>:
c0008743:	53                   	push   ebx
c0008744:	83 ec 08             	sub    esp,0x8
c0008747:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000874b:	85 db                	test   ebx,ebx
c000874d:	75 11                	jne    c0008760 <setActiveTerminal(VgaText*)+0x1d>
c000874f:	c7 44 24 10 80 fd 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fd80
c0008757:	83 c4 08             	add    esp,0x8
c000875a:	5b                   	pop    ebx
c000875b:	e9 c7 81 00 00       	jmp    c0010927 <KePanic(char const*)>
c0008760:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c0008765:	85 c0                	test   eax,eax
c0008767:	74 0c                	je     c0008775 <setActiveTerminal(VgaText*)+0x32>
c0008769:	83 ec 0c             	sub    esp,0xc
c000876c:	50                   	push   eax
c000876d:	e8 82 fd ff ff       	call   c00084f4 <VgaText::updateCursor()>
c0008772:	83 c4 10             	add    esp,0x10
c0008775:	89 1d 04 4f 02 c0    	mov    DWORD PTR ds:0xc0024f04,ebx
c000877b:	50                   	push   eax
c000877c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000877f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008782:	53                   	push   ebx
c0008783:	e8 a4 ff ff ff       	call   c000872c <VgaText::setCursor(int, int)>
c0008788:	83 c4 18             	add    esp,0x18
c000878b:	5b                   	pop    ebx
c000878c:	c3                   	ret    
c000878d:	90                   	nop

c000878e <VgaText::clearScreen()>:
c000878e:	57                   	push   edi
c000878f:	56                   	push   esi
c0008790:	31 f6                	xor    esi,esi
c0008792:	53                   	push   ebx
c0008793:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008797:	52                   	push   edx
c0008798:	6a 00                	push   0x0
c000879a:	6a 00                	push   0x0
c000879c:	53                   	push   ebx
c000879d:	e8 8a ff ff ff       	call   c000872c <VgaText::setCursor(int, int)>
c00087a2:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087a9:	83 c4 10             	add    esp,0x10
c00087ac:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087af:	7e 20                	jle    c00087d1 <VgaText::clearScreen()+0x43>
c00087b1:	31 ff                	xor    edi,edi
c00087b3:	50                   	push   eax
c00087b4:	50                   	push   eax
c00087b5:	56                   	push   esi
c00087b6:	57                   	push   edi
c00087b7:	47                   	inc    edi
c00087b8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087bb:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087be:	6a 20                	push   0x20
c00087c0:	53                   	push   ebx
c00087c1:	e8 c6 fe ff ff       	call   c000868c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087c6:	83 c4 20             	add    esp,0x20
c00087c9:	83 ff 50             	cmp    edi,0x50
c00087cc:	75 e5                	jne    c00087b3 <VgaText::clearScreen()+0x25>
c00087ce:	46                   	inc    esi
c00087cf:	eb db                	jmp    c00087ac <VgaText::clearScreen()+0x1e>
c00087d1:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00087d8:	5b                   	pop    ebx
c00087d9:	5e                   	pop    esi
c00087da:	5f                   	pop    edi
c00087db:	c3                   	ret    

c00087dc <VgaText::setCursorX(int)>:
c00087dc:	83 ec 10             	sub    esp,0x10
c00087df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087e3:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00087e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00087ea:	50                   	push   eax
c00087eb:	e8 3c ff ff ff       	call   c000872c <VgaText::setCursor(int, int)>
c00087f0:	83 c4 1c             	add    esp,0x1c
c00087f3:	c3                   	ret    

c00087f4 <VgaText::setCursorY(int)>:
c00087f4:	83 ec 10             	sub    esp,0x10
c00087f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00087ff:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008802:	50                   	push   eax
c0008803:	e8 24 ff ff ff       	call   c000872c <VgaText::setCursor(int, int)>
c0008808:	83 c4 1c             	add    esp,0x1c
c000880b:	c3                   	ret    

c000880c <VgaText::incrementCursor(bool)>:
c000880c:	56                   	push   esi
c000880d:	53                   	push   ebx
c000880e:	51                   	push   ecx
c000880f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008813:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008817:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000881a:	40                   	inc    eax
c000881b:	83 f8 50             	cmp    eax,0x50
c000881e:	74 05                	je     c0008825 <VgaText::incrementCursor(bool)+0x19>
c0008820:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008823:	eb 24                	jmp    c0008849 <VgaText::incrementCursor(bool)+0x3d>
c0008825:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008828:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000882f:	8d 50 01             	lea    edx,[eax+0x1]
c0008832:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008835:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008838:	75 0f                	jne    c0008849 <VgaText::incrementCursor(bool)+0x3d>
c000883a:	83 ec 0c             	sub    esp,0xc
c000883d:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008840:	53                   	push   ebx
c0008841:	e8 a4 fd ff ff       	call   c00085ea <VgaText::scrollScreen()>
c0008846:	83 c4 10             	add    esp,0x10
c0008849:	89 f0                	mov    eax,esi
c000884b:	84 c0                	test   al,al
c000884d:	74 0c                	je     c000885b <VgaText::incrementCursor(bool)+0x4f>
c000884f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008853:	5a                   	pop    edx
c0008854:	5b                   	pop    ebx
c0008855:	5e                   	pop    esi
c0008856:	e9 99 fc ff ff       	jmp    c00084f4 <VgaText::updateCursor()>
c000885b:	58                   	pop    eax
c000885c:	5b                   	pop    ebx
c000885d:	5e                   	pop    esi
c000885e:	c3                   	ret    
c000885f:	90                   	nop

c0008860 <VgaText::decrementCursor(bool)>:
c0008860:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008864:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008868:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000886b:	85 c0                	test   eax,eax
c000886d:	74 04                	je     c0008873 <VgaText::decrementCursor(bool)+0x13>
c000886f:	48                   	dec    eax
c0008870:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008873:	84 c9                	test   cl,cl
c0008875:	74 09                	je     c0008880 <VgaText::decrementCursor(bool)+0x20>
c0008877:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000887b:	e9 74 fc ff ff       	jmp    c00084f4 <VgaText::updateCursor()>
c0008880:	c3                   	ret    
c0008881:	90                   	nop

c0008882 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008882:	53                   	push   ebx
c0008883:	83 ec 08             	sub    esp,0x8
c0008886:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c000888b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000888f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008893:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008897:	83 f8 07             	cmp    eax,0x7
c000889a:	75 21                	jne    c00088bd <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c000889c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088a4:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088ac:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088b4:	83 c4 08             	add    esp,0x8
c00088b7:	5b                   	pop    ebx
c00088b8:	e9 96 2f 00 00       	jmp    c000b853 <Krnl::beep(int, int, bool)>
c00088bd:	83 f8 0d             	cmp    eax,0xd
c00088c0:	75 09                	jne    c00088cb <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088c9:	eb 2d                	jmp    c00088f8 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088cb:	83 f8 0a             	cmp    eax,0xa
c00088ce:	75 31                	jne    c0008901 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088d0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088d3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088da:	8d 50 01             	lea    edx,[eax+0x1]
c00088dd:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00088e0:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00088e3:	75 0f                	jne    c00088f4 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00088e5:	83 ec 0c             	sub    esp,0xc
c00088e8:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00088eb:	53                   	push   ebx
c00088ec:	e8 f9 fc ff ff       	call   c00085ea <VgaText::scrollScreen()>
c00088f1:	83 c4 10             	add    esp,0x10
c00088f4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00088f8:	83 c4 08             	add    esp,0x8
c00088fb:	5b                   	pop    ebx
c00088fc:	e9 f3 fb ff ff       	jmp    c00084f4 <VgaText::updateCursor()>
c0008901:	83 f8 08             	cmp    eax,0x8
c0008904:	75 25                	jne    c000892b <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0008906:	50                   	push   eax
c0008907:	50                   	push   eax
c0008908:	6a 01                	push   0x1
c000890a:	53                   	push   ebx
c000890b:	e8 50 ff ff ff       	call   c0008860 <VgaText::decrementCursor(bool)>
c0008910:	5a                   	pop    edx
c0008911:	59                   	pop    ecx
c0008912:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008915:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008918:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000891b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000891e:	6a 20                	push   0x20
c0008920:	53                   	push   ebx
c0008921:	e8 66 fd ff ff       	call   c000868c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008926:	83 c4 28             	add    esp,0x28
c0008929:	5b                   	pop    ebx
c000892a:	c3                   	ret    
c000892b:	83 ec 08             	sub    esp,0x8
c000892e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008931:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008934:	51                   	push   ecx
c0008935:	52                   	push   edx
c0008936:	50                   	push   eax
c0008937:	53                   	push   ebx
c0008938:	e8 4f fd ff ff       	call   c000868c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000893d:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008941:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008949:	83 c4 28             	add    esp,0x28
c000894c:	5b                   	pop    ebx
c000894d:	e9 ba fe ff ff       	jmp    c000880c <VgaText::incrementCursor(bool)>

c0008952 <VgaText::putchar(char)>:
c0008952:	57                   	push   edi
c0008953:	56                   	push   esi
c0008954:	53                   	push   ebx
c0008955:	83 ec 10             	sub    esp,0x10
c0008958:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000895c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008960:	89 f8                	mov    eax,edi
c0008962:	0f be c0             	movsx  eax,al
c0008965:	83 f8 5b             	cmp    eax,0x5b
c0008968:	75 18                	jne    c0008982 <VgaText::putchar(char)+0x30>
c000896a:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000896e:	74 20                	je     c0008990 <VgaText::putchar(char)+0x3e>
c0008970:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008976:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000897d:	e9 c1 00 00 00       	jmp    c0008a43 <VgaText::putchar(char)+0xf1>
c0008982:	83 f8 1b             	cmp    eax,0x1b
c0008985:	75 09                	jne    c0008990 <VgaText::putchar(char)+0x3e>
c0008987:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000898b:	e9 b3 00 00 00       	jmp    c0008a43 <VgaText::putchar(char)+0xf1>
c0008990:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0008993:	84 c9                	test   cl,cl
c0008995:	0f 84 98 00 00 00    	je     c0008a33 <VgaText::putchar(char)+0xe1>
c000899b:	8d 77 c0             	lea    esi,[edi-0x40]
c000899e:	89 f2                	mov    edx,esi
c00089a0:	80 fa 3e             	cmp    dl,0x3e
c00089a3:	77 78                	ja     c0008a1d <VgaText::putchar(char)+0xcb>
c00089a5:	83 f8 6d             	cmp    eax,0x6d
c00089a8:	75 47                	jne    c00089f1 <VgaText::putchar(char)+0x9f>
c00089aa:	31 f6                	xor    esi,esi
c00089ac:	31 d2                	xor    edx,edx
c00089ae:	31 c0                	xor    eax,eax
c00089b0:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089b3:	7e 2d                	jle    c00089e2 <VgaText::putchar(char)+0x90>
c00089b5:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089ba:	83 fa 3b             	cmp    edx,0x3b
c00089bd:	75 17                	jne    c00089d6 <VgaText::putchar(char)+0x84>
c00089bf:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00089c3:	50                   	push   eax
c00089c4:	53                   	push   ebx
c00089c5:	e8 40 fb ff ff       	call   c000850a <VgaText::doANSI_SGR(int)>
c00089ca:	59                   	pop    ecx
c00089cb:	31 d2                	xor    edx,edx
c00089cd:	5f                   	pop    edi
c00089ce:	31 c0                	xor    eax,eax
c00089d0:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00089d4:	eb 09                	jmp    c00089df <VgaText::putchar(char)+0x8d>
c00089d6:	6b c0 0a             	imul   eax,eax,0xa
c00089d9:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089dd:	88 ca                	mov    dl,cl
c00089df:	46                   	inc    esi
c00089e0:	eb ce                	jmp    c00089b0 <VgaText::putchar(char)+0x5e>
c00089e2:	84 d2                	test   dl,dl
c00089e4:	74 2f                	je     c0008a15 <VgaText::putchar(char)+0xc3>
c00089e6:	50                   	push   eax
c00089e7:	53                   	push   ebx
c00089e8:	e8 1d fb ff ff       	call   c000850a <VgaText::doANSI_SGR(int)>
c00089ed:	58                   	pop    eax
c00089ee:	5a                   	pop    edx
c00089ef:	eb 24                	jmp    c0008a15 <VgaText::putchar(char)+0xc3>
c00089f1:	83 f8 4a             	cmp    eax,0x4a
c00089f4:	75 1f                	jne    c0008a15 <VgaText::putchar(char)+0xc3>
c00089f6:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00089fa:	75 19                	jne    c0008a15 <VgaText::putchar(char)+0xc3>
c00089fc:	83 ec 0c             	sub    esp,0xc
c00089ff:	53                   	push   ebx
c0008a00:	e8 89 fd ff ff       	call   c000878e <VgaText::clearScreen()>
c0008a05:	83 c4 0c             	add    esp,0xc
c0008a08:	6a 00                	push   0x0
c0008a0a:	6a 00                	push   0x0
c0008a0c:	53                   	push   ebx
c0008a0d:	e8 1a fd ff ff       	call   c000872c <VgaText::setCursor(int, int)>
c0008a12:	83 c4 10             	add    esp,0x10
c0008a15:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a1b:	eb 26                	jmp    c0008a43 <VgaText::putchar(char)+0xf1>
c0008a1d:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a20:	83 f8 0e             	cmp    eax,0xe
c0008a23:	7f 1e                	jg     c0008a43 <VgaText::putchar(char)+0xf1>
c0008a25:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a28:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a2b:	89 f9                	mov    ecx,edi
c0008a2d:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0008a31:	eb 10                	jmp    c0008a43 <VgaText::putchar(char)+0xf1>
c0008a33:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a36:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a39:	50                   	push   eax
c0008a3a:	53                   	push   ebx
c0008a3b:	e8 42 fe ff ff       	call   c0008882 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a40:	83 c4 10             	add    esp,0x10
c0008a43:	83 c4 10             	add    esp,0x10
c0008a46:	5b                   	pop    ebx
c0008a47:	5e                   	pop    esi
c0008a48:	5f                   	pop    edi
c0008a49:	c3                   	ret    

c0008a4a <VgaText::putx(unsigned int)>:
c0008a4a:	57                   	push   edi
c0008a4b:	b9 11 00 00 00       	mov    ecx,0x11
c0008a50:	56                   	push   esi
c0008a51:	be 8e fd 01 c0       	mov    esi,0xc001fd8e
c0008a56:	53                   	push   ebx
c0008a57:	83 ec 20             	sub    esp,0x20
c0008a5a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a5e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a62:	fc                   	cld    
c0008a63:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a65:	be 08 00 00 00       	mov    esi,0x8
c0008a6a:	50                   	push   eax
c0008a6b:	50                   	push   eax
c0008a6c:	89 d8                	mov    eax,ebx
c0008a6e:	c1 e3 04             	shl    ebx,0x4
c0008a71:	c1 e8 1c             	shr    eax,0x1c
c0008a74:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a79:	50                   	push   eax
c0008a7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a7e:	e8 cf fe ff ff       	call   c0008952 <VgaText::putchar(char)>
c0008a83:	83 c4 10             	add    esp,0x10
c0008a86:	4e                   	dec    esi
c0008a87:	75 e1                	jne    c0008a6a <VgaText::putx(unsigned int)+0x20>
c0008a89:	83 c4 20             	add    esp,0x20
c0008a8c:	5b                   	pop    ebx
c0008a8d:	5e                   	pop    esi
c0008a8e:	5f                   	pop    edi
c0008a8f:	c3                   	ret    

c0008a90 <VgaText::puts(char const*)>:
c0008a90:	53                   	push   ebx
c0008a91:	83 ec 08             	sub    esp,0x8
c0008a94:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008a98:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008a9b:	85 c0                	test   eax,eax
c0008a9d:	74 12                	je     c0008ab1 <VgaText::puts(char const*)+0x21>
c0008a9f:	43                   	inc    ebx
c0008aa0:	51                   	push   ecx
c0008aa1:	51                   	push   ecx
c0008aa2:	50                   	push   eax
c0008aa3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008aa7:	e8 a6 fe ff ff       	call   c0008952 <VgaText::putchar(char)>
c0008aac:	83 c4 10             	add    esp,0x10
c0008aaf:	eb e7                	jmp    c0008a98 <VgaText::puts(char const*)+0x8>
c0008ab1:	83 c4 08             	add    esp,0x8
c0008ab4:	5b                   	pop    ebx
c0008ab5:	c3                   	ret    

c0008ab6 <VgaText::write(unsigned long long, void*, int*)>:
c0008ab6:	55                   	push   ebp
c0008ab7:	57                   	push   edi
c0008ab8:	56                   	push   esi
c0008ab9:	53                   	push   ebx
c0008aba:	83 ec 0c             	sub    esp,0xc
c0008abd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008ac1:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008ac5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008ac9:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008ad0:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008ad3:	39 eb                	cmp    ebx,ebp
c0008ad5:	74 13                	je     c0008aea <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008ad7:	43                   	inc    ebx
c0008ad8:	50                   	push   eax
c0008ad9:	50                   	push   eax
c0008ada:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008ade:	50                   	push   eax
c0008adf:	56                   	push   esi
c0008ae0:	e8 6d fe ff ff       	call   c0008952 <VgaText::putchar(char)>
c0008ae5:	83 c4 10             	add    esp,0x10
c0008ae8:	eb e9                	jmp    c0008ad3 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008aea:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008af1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008af5:	89 38                	mov    DWORD PTR [eax],edi
c0008af7:	83 c4 0c             	add    esp,0xc
c0008afa:	31 c0                	xor    eax,eax
c0008afc:	5b                   	pop    ebx
c0008afd:	5e                   	pop    esi
c0008afe:	5f                   	pop    edi
c0008aff:	5d                   	pop    ebp
c0008b00:	c3                   	ret    
c0008b01:	90                   	nop

c0008b02 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b02:	55                   	push   ebp
c0008b03:	57                   	push   edi
c0008b04:	56                   	push   esi
c0008b05:	53                   	push   ebx
c0008b06:	83 ec 0c             	sub    esp,0xc
c0008b09:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008b0d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b12:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008b19:	50                   	push   eax
c0008b1a:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b1f:	50                   	push   eax
c0008b20:	e8 b3 fa ff ff       	call   c00085d8 <VgaText::combineColours(unsigned char, unsigned char)>
c0008b25:	5a                   	pop    edx
c0008b26:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b2a:	59                   	pop    ecx
c0008b2b:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b2e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008b32:	0f b7 f6             	movzx  esi,si
c0008b35:	0f b6 e8             	movzx  ebp,al
c0008b38:	01 f6                	add    esi,esi
c0008b3a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b3d:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008b40:	85 c0                	test   eax,eax
c0008b42:	0f 84 ef 00 00 00    	je     c0008c37 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b48:	83 f8 0d             	cmp    eax,0xd
c0008b4b:	75 0c                	jne    c0008b59 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b4d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b54:	e9 d8 00 00 00       	jmp    c0008c31 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b59:	83 f8 0a             	cmp    eax,0xa
c0008b5c:	75 44                	jne    c0008ba2 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b5e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008b61:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b68:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b6b:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008b6e:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008b71:	75 0f                	jne    c0008b82 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b73:	83 ec 0c             	sub    esp,0xc
c0008b76:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008b79:	53                   	push   ebx
c0008b7a:	e8 6b fa ff ff       	call   c00085ea <VgaText::scrollScreen()>
c0008b7f:	83 c4 10             	add    esp,0x10
c0008b82:	83 ec 0c             	sub    esp,0xc
c0008b85:	53                   	push   ebx
c0008b86:	e8 69 f9 ff ff       	call   c00084f4 <VgaText::updateCursor()>
c0008b8b:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b8f:	83 c4 10             	add    esp,0x10
c0008b92:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b95:	0f b7 f6             	movzx  esi,si
c0008b98:	01 f6                	add    esi,esi
c0008b9a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b9d:	e9 8f 00 00 00       	jmp    c0008c31 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008ba2:	83 f8 08             	cmp    eax,0x8
c0008ba5:	75 34                	jne    c0008bdb <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008ba7:	51                   	push   ecx
c0008ba8:	51                   	push   ecx
c0008ba9:	6a 01                	push   0x1
c0008bab:	53                   	push   ebx
c0008bac:	e8 af fc ff ff       	call   c0008860 <VgaText::decrementCursor(bool)>
c0008bb1:	5e                   	pop    esi
c0008bb2:	58                   	pop    eax
c0008bb3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008bb6:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bb9:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bbc:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bbf:	6a 20                	push   0x20
c0008bc1:	53                   	push   ebx
c0008bc2:	e8 c5 fa ff ff       	call   c000868c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008bc7:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008bcb:	83 c4 20             	add    esp,0x20
c0008bce:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008bd1:	0f b7 f6             	movzx  esi,si
c0008bd4:	01 f6                	add    esi,esi
c0008bd6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bd9:	eb 56                	jmp    c0008c31 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bdb:	52                   	push   edx
c0008bdc:	52                   	push   edx
c0008bdd:	55                   	push   ebp
c0008bde:	50                   	push   eax
c0008bdf:	e8 98 fa ff ff       	call   c000867c <VgaText::combineCharAndColour(char, unsigned char)>
c0008be4:	83 c4 10             	add    esp,0x10
c0008be7:	66 89 06             	mov    WORD PTR [esi],ax
c0008bea:	39 1d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebx
c0008bf0:	75 1d                	jne    c0008c0f <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008bf2:	83 ec 0c             	sub    esp,0xc
c0008bf5:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008bf8:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bfb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008bff:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c03:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008c06:	50                   	push   eax
c0008c07:	e8 b4 f1 00 00       	call   c0017dc0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c0c:	83 c4 20             	add    esp,0x20
c0008c0f:	83 c6 02             	add    esi,0x2
c0008c12:	50                   	push   eax
c0008c13:	50                   	push   eax
c0008c14:	6a 00                	push   0x0
c0008c16:	53                   	push   ebx
c0008c17:	e8 f0 fb ff ff       	call   c000880c <VgaText::incrementCursor(bool)>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008c23:	75 0c                	jne    c0008c31 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c25:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008c29:	0f b7 f6             	movzx  esi,si
c0008c2c:	01 f6                	add    esi,esi
c0008c2e:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008c31:	47                   	inc    edi
c0008c32:	e9 06 ff ff ff       	jmp    c0008b3d <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c37:	83 ec 0c             	sub    esp,0xc
c0008c3a:	53                   	push   ebx
c0008c3b:	e8 b4 f8 ff ff       	call   c00084f4 <VgaText::updateCursor()>
c0008c40:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008c47:	83 c4 1c             	add    esp,0x1c
c0008c4a:	5b                   	pop    ebx
c0008c4b:	5e                   	pop    esi
c0008c4c:	5f                   	pop    edi
c0008c4d:	5d                   	pop    ebp
c0008c4e:	c3                   	ret    
c0008c4f:	90                   	nop

c0008c50 <VgaText::VgaText(char const*)>:
c0008c50:	56                   	push   esi
c0008c51:	53                   	push   ebx
c0008c52:	83 ec 04             	sub    esp,0x4
c0008c55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c59:	83 ec 08             	sub    esp,0x8
c0008c5c:	6a 00                	push   0x0
c0008c5e:	50                   	push   eax
c0008c5f:	e8 6a 05 00 00       	call   c00091ce <UnixFile::UnixFile(int)>
c0008c64:	83 c4 10             	add    esp,0x10
c0008c67:	ba b4 fd 01 c0       	mov    edx,0xc001fdb4
c0008c6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c70:	89 10                	mov    DWORD PTR [eax],edx
c0008c72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c76:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c81:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008c90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c94:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008c98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9c:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008ca3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca7:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb2:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008cb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbd:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc8:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008ccf:	83 ec 0c             	sub    esp,0xc
c0008cd2:	6a 01                	push   0x1
c0008cd4:	e8 44 09 00 00       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c0008cd9:	83 c4 10             	add    esp,0x10
c0008cdc:	89 c2                	mov    edx,eax
c0008cde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008ce5:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c0008ceb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008cf2:	89 c6                	mov    esi,eax
c0008cf4:	e8 ba f0 ff ff       	call   c0007db3 <Phys::allocatePage()>
c0008cf9:	68 05 0c 00 00       	push   0xc05
c0008cfe:	56                   	push   esi
c0008cff:	50                   	push   eax
c0008d00:	53                   	push   ebx
c0008d01:	e8 fe 0f 00 00       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d06:	83 c4 10             	add    esp,0x10
c0008d09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d0d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d10:	83 ec 04             	sub    esp,0x4
c0008d13:	68 a0 0f 00 00       	push   0xfa0
c0008d18:	6a 00                	push   0x0
c0008d1a:	50                   	push   eax
c0008d1b:	e8 d0 77 ff ff       	call   c00004f0 <memset>
c0008d20:	83 c4 10             	add    esp,0x10
c0008d23:	83 ec 04             	sub    esp,0x4
c0008d26:	6a 00                	push   0x0
c0008d28:	6a 07                	push   0x7
c0008d2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d2e:	e8 6b f8 ff ff       	call   c000859e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d33:	83 c4 10             	add    esp,0x10
c0008d36:	83 ec 04             	sub    esp,0x4
c0008d39:	6a 00                	push   0x0
c0008d3b:	6a 00                	push   0x0
c0008d3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d41:	e8 e6 f9 ff ff       	call   c000872c <VgaText::setCursor(int, int)>
c0008d46:	83 c4 10             	add    esp,0x10
c0008d49:	83 ec 0c             	sub    esp,0xc
c0008d4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d50:	e8 39 fa ff ff       	call   c000878e <VgaText::clearScreen()>
c0008d55:	83 c4 10             	add    esp,0x10
c0008d58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d5c:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d64:	05 82 00 00 00       	add    eax,0x82
c0008d69:	83 ec 04             	sub    esp,0x4
c0008d6c:	68 80 00 00 00       	push   0x80
c0008d71:	6a 00                	push   0x0
c0008d73:	50                   	push   eax
c0008d74:	e8 77 77 ff ff       	call   c00004f0 <memset>
c0008d79:	83 c4 10             	add    esp,0x10
c0008d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d80:	05 02 01 00 00       	add    eax,0x102
c0008d85:	83 ec 04             	sub    esp,0x4
c0008d88:	68 80 00 00 00       	push   0x80
c0008d8d:	6a 00                	push   0x0
c0008d8f:	50                   	push   eax
c0008d90:	e8 5b 77 ff ff       	call   c00004f0 <memset>
c0008d95:	83 c4 10             	add    esp,0x10
c0008d98:	90                   	nop
c0008d99:	83 c4 04             	add    esp,0x4
c0008d9c:	5b                   	pop    ebx
c0008d9d:	5e                   	pop    esi
c0008d9e:	c3                   	ret    
c0008d9f:	90                   	nop

c0008da0 <VgaText::receiveKey(unsigned char)>:
c0008da0:	55                   	push   ebp
c0008da1:	57                   	push   edi
c0008da2:	56                   	push   esi
c0008da3:	53                   	push   ebx
c0008da4:	83 ec 2c             	sub    esp,0x2c
c0008da7:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0008dab:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008daf:	89 ef                	mov    edi,ebp
c0008db1:	81 e7 ff 00 00 00    	and    edi,0xff
c0008db7:	0f 84 66 01 00 00    	je     c0008f23 <VgaText::receiveKey(unsigned char)+0x183>
c0008dbd:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008dc3:	83 ff 08             	cmp    edi,0x8
c0008dc6:	75 73                	jne    c0008e3b <VgaText::receiveKey(unsigned char)+0x9b>
c0008dc8:	83 ec 0c             	sub    esp,0xc
c0008dcb:	56                   	push   esi
c0008dcc:	e8 9f 77 ff ff       	call   c0000570 <strlen>
c0008dd1:	83 c4 10             	add    esp,0x10
c0008dd4:	85 c0                	test   eax,eax
c0008dd6:	0f 84 02 01 00 00    	je     c0008ede <VgaText::receiveKey(unsigned char)+0x13e>
c0008ddc:	50                   	push   eax
c0008ddd:	50                   	push   eax
c0008dde:	6a 08                	push   0x8
c0008de0:	53                   	push   ebx
c0008de1:	e8 6c fb ff ff       	call   c0008952 <VgaText::putchar(char)>
c0008de6:	89 34 24             	mov    DWORD PTR [esp],esi
c0008de9:	e8 82 77 ff ff       	call   c0000570 <strlen>
c0008dee:	83 c4 10             	add    esp,0x10
c0008df1:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008df9:	83 fa 0d             	cmp    edx,0xd
c0008dfc:	89 d0                	mov    eax,edx
c0008dfe:	0f 95 c1             	setne  cl
c0008e01:	83 fa 1f             	cmp    edx,0x1f
c0008e04:	0f 9e c2             	setle  dl
c0008e07:	0f b6 d2             	movzx  edx,dl
c0008e0a:	85 ca                	test   edx,ecx
c0008e0c:	74 17                	je     c0008e25 <VgaText::receiveKey(unsigned char)+0x85>
c0008e0e:	83 e8 08             	sub    eax,0x8
c0008e11:	3c 02                	cmp    al,0x2
c0008e13:	76 10                	jbe    c0008e25 <VgaText::receiveKey(unsigned char)+0x85>
c0008e15:	55                   	push   ebp
c0008e16:	55                   	push   ebp
c0008e17:	68 9f fd 01 c0       	push   0xc001fd9f
c0008e1c:	53                   	push   ebx
c0008e1d:	e8 6e fc ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0008e22:	83 c4 10             	add    esp,0x10
c0008e25:	83 ec 0c             	sub    esp,0xc
c0008e28:	56                   	push   esi
c0008e29:	e8 42 77 ff ff       	call   c0000570 <strlen>
c0008e2e:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e36:	e9 a0 00 00 00       	jmp    c0008edb <VgaText::receiveKey(unsigned char)+0x13b>
c0008e3b:	83 ec 0c             	sub    esp,0xc
c0008e3e:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e44:	50                   	push   eax
c0008e45:	e8 26 77 ff ff       	call   c0000570 <strlen>
c0008e4a:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e4d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e51:	e8 1a 77 ff ff       	call   c0000570 <strlen>
c0008e56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e5a:	83 c4 10             	add    esp,0x10
c0008e5d:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e61:	3d 80 00 00 00       	cmp    eax,0x80
c0008e66:	0f 87 b7 00 00 00    	ja     c0008f23 <VgaText::receiveKey(unsigned char)+0x183>
c0008e6c:	8d 45 ff             	lea    eax,[ebp-0x1]
c0008e6f:	8d 55 f7             	lea    edx,[ebp-0x9]
c0008e72:	3c 1e                	cmp    al,0x1e
c0008e74:	0f 96 c0             	setbe  al
c0008e77:	80 fa 01             	cmp    dl,0x1
c0008e7a:	0f 97 c2             	seta   dl
c0008e7d:	0f b6 d2             	movzx  edx,dl
c0008e80:	85 c2                	test   edx,eax
c0008e82:	74 2e                	je     c0008eb2 <VgaText::receiveKey(unsigned char)+0x112>
c0008e84:	83 ff 0d             	cmp    edi,0xd
c0008e87:	74 29                	je     c0008eb2 <VgaText::receiveKey(unsigned char)+0x112>
c0008e89:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e8c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e8f:	68 a5 fd 01 c0       	push   0xc001fda5
c0008e94:	53                   	push   ebx
c0008e95:	e8 68 fc ff ff       	call   c0008b02 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008e9a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e9d:	8d 45 40             	lea    eax,[ebp+0x40]
c0008ea0:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ea3:	0f b6 c0             	movzx  eax,al
c0008ea6:	50                   	push   eax
c0008ea7:	53                   	push   ebx
c0008ea8:	e8 d5 f9 ff ff       	call   c0008882 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008ead:	83 c4 20             	add    esp,0x20
c0008eb0:	eb 11                	jmp    c0008ec3 <VgaText::receiveKey(unsigned char)+0x123>
c0008eb2:	89 e8                	mov    eax,ebp
c0008eb4:	51                   	push   ecx
c0008eb5:	0f be c0             	movsx  eax,al
c0008eb8:	51                   	push   ecx
c0008eb9:	50                   	push   eax
c0008eba:	53                   	push   ebx
c0008ebb:	e8 92 fa ff ff       	call   c0008952 <VgaText::putchar(char)>
c0008ec0:	83 c4 10             	add    esp,0x10
c0008ec3:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ec8:	89 e8                	mov    eax,ebp
c0008eca:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ece:	52                   	push   edx
c0008ecf:	52                   	push   edx
c0008ed0:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008ed4:	50                   	push   eax
c0008ed5:	56                   	push   esi
c0008ed6:	e8 65 79 ff ff       	call   c0000840 <strcat>
c0008edb:	83 c4 10             	add    esp,0x10
c0008ede:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0008ee4:	b0 01                	mov    al,0x1
c0008ee6:	83 ff 1c             	cmp    edi,0x1c
c0008ee9:	77 0e                	ja     c0008ef9 <VgaText::receiveKey(unsigned char)+0x159>
c0008eeb:	b8 08 04 00 10       	mov    eax,0x10000408
c0008ef0:	89 f9                	mov    ecx,edi
c0008ef2:	d3 e8                	shr    eax,cl
c0008ef4:	f7 d0                	not    eax
c0008ef6:	83 e0 01             	and    eax,0x1
c0008ef9:	84 c0                	test   al,al
c0008efb:	74 04                	je     c0008f01 <VgaText::receiveKey(unsigned char)+0x161>
c0008efd:	84 d2                	test   dl,dl
c0008eff:	74 22                	je     c0008f23 <VgaText::receiveKey(unsigned char)+0x183>
c0008f01:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f07:	50                   	push   eax
c0008f08:	50                   	push   eax
c0008f09:	56                   	push   esi
c0008f0a:	53                   	push   ebx
c0008f0b:	e8 30 79 ff ff       	call   c0000840 <strcat>
c0008f10:	83 c4 0c             	add    esp,0xc
c0008f13:	68 80 00 00 00       	push   0x80
c0008f18:	6a 00                	push   0x0
c0008f1a:	56                   	push   esi
c0008f1b:	e8 d0 75 ff ff       	call   c00004f0 <memset>
c0008f20:	83 c4 10             	add    esp,0x10
c0008f23:	83 c4 2c             	add    esp,0x2c
c0008f26:	5b                   	pop    ebx
c0008f27:	5e                   	pop    esi
c0008f28:	5f                   	pop    edi
c0008f29:	5d                   	pop    ebp
c0008f2a:	c3                   	ret    
c0008f2b:	90                   	nop

c0008f2c <VgaText::doUpdate()>:
c0008f2c:	c3                   	ret    

c0008f2d <newTerminal(char*)>:
c0008f2d:	83 ec 28             	sub    esp,0x28
c0008f30:	68 84 01 00 00       	push   0x184
c0008f35:	e8 74 eb ff ff       	call   c0007aae <malloc>
c0008f3a:	5a                   	pop    edx
c0008f3b:	59                   	pop    ecx
c0008f3c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008f40:	50                   	push   eax
c0008f41:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008f45:	e8 06 fd ff ff       	call   c0008c50 <VgaText::VgaText(char const*)>
c0008f4a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f4e:	83 c4 2c             	add    esp,0x2c
c0008f51:	c3                   	ret    
c0008f52:	66 90                	xchg   ax,ax

c0008f54 <TSS::TSS()>:
c0008f54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f58:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f5f:	90                   	nop
c0008f60:	c3                   	ret    
c0008f61:	90                   	nop
c0008f62:	66 90                	xchg   ax,ax

c0008f64 <TSS::setESP(unsigned long)>:
c0008f64:	55                   	push   ebp
c0008f65:	89 e5                	mov    ebp,esp
c0008f67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f6d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f70:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f73:	90                   	nop
c0008f74:	5d                   	pop    ebp
c0008f75:	c3                   	ret    
c0008f76:	66 90                	xchg   ax,ax

c0008f78 <TSS::flush()>:
c0008f78:	55                   	push   ebp
c0008f79:	89 e5                	mov    ebp,esp
c0008f7b:	83 ec 10             	sub    esp,0x10
c0008f7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f81:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f83:	83 c8 03             	or     eax,0x3
c0008f86:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f8a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f8e:	66 89 d0             	mov    ax,dx
c0008f91:	0f 00 d8             	ltr    ax
c0008f94:	90                   	nop
c0008f95:	c9                   	leave  
c0008f96:	c3                   	ret    
c0008f97:	90                   	nop

c0008f98 <TSS::setup(unsigned long, unsigned long)>:
c0008f98:	55                   	push   ebp
c0008f99:	89 e5                	mov    ebp,esp
c0008f9b:	83 ec 18             	sub    esp,0x18
c0008f9e:	83 ec 0c             	sub    esp,0xc
c0008fa1:	6a 68                	push   0x68
c0008fa3:	e8 06 eb ff ff       	call   c0007aae <malloc>
c0008fa8:	83 c4 10             	add    esp,0x10
c0008fab:	89 c2                	mov    edx,eax
c0008fad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fb9:	83 ec 04             	sub    esp,0x4
c0008fbc:	6a 68                	push   0x68
c0008fbe:	6a 00                	push   0x0
c0008fc0:	50                   	push   eax
c0008fc1:	e8 2a 75 ff ff       	call   c00004f0 <memset>
c0008fc6:	83 c4 10             	add    esp,0x10
c0008fc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fcc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcf:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fdb:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fe1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fea:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ff3:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008ff9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ffc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fff:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0009005:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009008:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000900b:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0009011:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009014:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009017:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000901d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009020:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009023:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009029:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000902c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0009035:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009038:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000903b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000903e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009041:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009044:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009047:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000904a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000904d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009050:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009053:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000905a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000905d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009060:	0f 20 da             	mov    edx,cr3
c0009063:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0009066:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009069:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000906c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000906f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009072:	83 ec 08             	sub    esp,0x8
c0009075:	50                   	push   eax
c0009076:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009079:	50                   	push   eax
c000907a:	e8 9b e2 ff ff       	call   c000731a <GDTEntry::setBase(unsigned int)>
c000907f:	83 c4 10             	add    esp,0x10
c0009082:	83 ec 08             	sub    esp,0x8
c0009085:	6a 68                	push   0x68
c0009087:	8d 45 ec             	lea    eax,[ebp-0x14]
c000908a:	50                   	push   eax
c000908b:	e8 a6 e2 ff ff       	call   c0007336 <GDTEntry::setLimit(unsigned int)>
c0009090:	83 c4 10             	add    esp,0x10
c0009093:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0009097:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000909a:	83 e0 0f             	and    eax,0xf
c000909d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00090a0:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00090a3:	83 c8 40             	or     eax,0x40
c00090a6:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00090a9:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00090ae:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090b4:	05 78 01 00 00       	add    eax,0x178
c00090b9:	83 ec 04             	sub    esp,0x4
c00090bc:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00090bf:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00090c2:	50                   	push   eax
c00090c3:	e8 a2 e2 ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c00090c8:	83 c4 10             	add    esp,0x10
c00090cb:	89 c2                	mov    edx,eax
c00090cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090d0:	89 10                	mov    DWORD PTR [eax],edx
c00090d2:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00090d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090dd:	05 78 01 00 00       	add    eax,0x178
c00090e2:	83 ec 0c             	sub    esp,0xc
c00090e5:	50                   	push   eax
c00090e6:	e8 a9 e2 ff ff       	call   c0007394 <GDT::flush()>
c00090eb:	83 c4 10             	add    esp,0x10
c00090ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00090f3:	c9                   	leave  
c00090f4:	c3                   	ret    
c00090f5:	90                   	nop

c00090f6 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090fa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009101:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009106:	75 08                	jne    c0009110 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0009108:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000910e:	eb 38                	jmp    c0009148 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0009110:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009115:	75 17                	jne    c000912e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0009117:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000911c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000911f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009125:	8b 10                	mov    edx,DWORD PTR [eax]
c0009127:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000912b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000912e:	89 c1                	mov    ecx,eax
c0009130:	83 e1 fd             	and    ecx,0xfffffffd
c0009133:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009139:	74 cd                	je     c0009108 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000913b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009140:	83 e0 ef             	and    eax,0xffffffef
c0009143:	83 f8 08             	cmp    eax,0x8
c0009146:	76 c0                	jbe    c0009108 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009148:	31 c0                	xor    eax,eax
c000914a:	c3                   	ret    
c000914b:	90                   	nop

c000914c <ReservedFilename::isAtty()>:
c000914c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009150:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009153:	31 c0                	xor    eax,eax
c0009155:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000915b:	74 09                	je     c0009166 <ReservedFilename::isAtty()+0x1a>
c000915d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0009163:	0f 94 c0             	sete   al
c0009166:	c3                   	ret    
c0009167:	90                   	nop

c0009168 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009168:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000916c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009170:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009173:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009177:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000917c:	75 08                	jne    c0009186 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000917e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009184:	eb 3d                	jmp    c00091c3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009186:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000918b:	75 17                	jne    c00091a4 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000918d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009192:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009195:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000919b:	8b 10                	mov    edx,DWORD PTR [eax]
c000919d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00091a1:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00091a4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00091a9:	75 04                	jne    c00091af <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00091ab:	89 0a                	mov    DWORD PTR [edx],ecx
c00091ad:	eb 14                	jmp    c00091c3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00091af:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00091b4:	74 c8                	je     c000917e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091b6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00091bb:	83 e0 ef             	and    eax,0xffffffef
c00091be:	83 f8 08             	cmp    eax,0x8
c00091c1:	76 bb                	jbe    c000917e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091c3:	31 c0                	xor    eax,eax
c00091c5:	c3                   	ret    

c00091c6 <UnixFile::getFileDescriptor()>:
c00091c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091cd:	c3                   	ret    

c00091ce <UnixFile::UnixFile(int)>:
c00091ce:	53                   	push   ebx
c00091cf:	83 ec 28             	sub    esp,0x28
c00091d2:	ba 7c fe 01 c0       	mov    edx,0xc001fe7c
c00091d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091db:	89 10                	mov    DWORD PTR [eax],edx
c00091dd:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091e5:	0f 8f 90 01 00 00    	jg     c000937b <UnixFile::UnixFile(int)+0x1ad>
c00091eb:	a1 c0 1f 02 c0       	mov    eax,ds:0xc0021fc0
c00091f0:	8d 50 01             	lea    edx,[eax+0x1]
c00091f3:	89 15 c0 1f 02 c0    	mov    DWORD PTR ds:0xc0021fc0,edx
c00091f9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091fd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009200:	83 ec 08             	sub    esp,0x8
c0009203:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0009207:	68 98 4f 02 c0       	push   0xc0024f98
c000920c:	e8 47 57 01 00       	call   c001e958 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009211:	83 c4 10             	add    esp,0x10
c0009214:	a0 94 4f 02 c0       	mov    al,ds:0xc0024f94
c0009219:	83 f0 01             	xor    eax,0x1
c000921c:	0f b6 c0             	movzx  eax,al
c000921f:	85 c0                	test   eax,eax
c0009221:	0f 84 55 01 00 00    	je     c000937c <UnixFile::UnixFile(int)+0x1ae>
c0009227:	c6 05 94 4f 02 c0 01 	mov    BYTE PTR ds:0xc0024f94,0x1
c000922e:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0009236:	83 ec 0c             	sub    esp,0xc
c0009239:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000923d:	e8 6c e8 ff ff       	call   c0007aae <malloc>
c0009242:	83 c4 10             	add    esp,0x10
c0009245:	89 c3                	mov    ebx,eax
c0009247:	83 ec 08             	sub    esp,0x8
c000924a:	68 03 ff ff 0f       	push   0xfffff03
c000924f:	53                   	push   ebx
c0009250:	e8 2d 01 00 00       	call   c0009382 <ReservedFilename::ReservedFilename(int)>
c0009255:	83 c4 10             	add    esp,0x10
c0009258:	89 1d 8c 4f 02 c0    	mov    DWORD PTR ds:0xc0024f8c,ebx
c000925e:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0009266:	83 ec 0c             	sub    esp,0xc
c0009269:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000926d:	e8 3c e8 ff ff       	call   c0007aae <malloc>
c0009272:	83 c4 10             	add    esp,0x10
c0009275:	89 c3                	mov    ebx,eax
c0009277:	83 ec 08             	sub    esp,0x8
c000927a:	68 01 ff ff 0f       	push   0xfffff01
c000927f:	53                   	push   ebx
c0009280:	e8 fd 00 00 00       	call   c0009382 <ReservedFilename::ReservedFilename(int)>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 1d 90 4f 02 c0    	mov    DWORD PTR ds:0xc0024f90,ebx
c000928e:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0009296:	83 ec 0c             	sub    esp,0xc
c0009299:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000929d:	e8 0c e8 ff ff       	call   c0007aae <malloc>
c00092a2:	83 c4 10             	add    esp,0x10
c00092a5:	89 c3                	mov    ebx,eax
c00092a7:	83 ec 08             	sub    esp,0x8
c00092aa:	68 00 ff ff 0f       	push   0xfffff00
c00092af:	53                   	push   ebx
c00092b0:	e8 cd 00 00 00       	call   c0009382 <ReservedFilename::ReservedFilename(int)>
c00092b5:	83 c4 10             	add    esp,0x10
c00092b8:	89 1d 84 4f 02 c0    	mov    DWORD PTR ds:0xc0024f84,ebx
c00092be:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00092c6:	83 ec 0c             	sub    esp,0xc
c00092c9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092cd:	e8 dc e7 ff ff       	call   c0007aae <malloc>
c00092d2:	83 c4 10             	add    esp,0x10
c00092d5:	89 c3                	mov    ebx,eax
c00092d7:	83 ec 08             	sub    esp,0x8
c00092da:	68 02 ff ff 0f       	push   0xfffff02
c00092df:	53                   	push   ebx
c00092e0:	e8 9d 00 00 00       	call   c0009382 <ReservedFilename::ReservedFilename(int)>
c00092e5:	83 c4 10             	add    esp,0x10
c00092e8:	89 1d 88 4f 02 c0    	mov    DWORD PTR ds:0xc0024f88,ebx
c00092ee:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092f6:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092fb:	7f 7f                	jg     c000937c <UnixFile::UnixFile(int)+0x1ae>
c00092fd:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0009305:	83 ec 0c             	sub    esp,0xc
c0009308:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000930c:	e8 9d e7 ff ff       	call   c0007aae <malloc>
c0009311:	83 c4 10             	add    esp,0x10
c0009314:	89 c3                	mov    ebx,eax
c0009316:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000931a:	05 10 ff ff 0f       	add    eax,0xfffff10
c000931f:	83 ec 08             	sub    esp,0x8
c0009322:	50                   	push   eax
c0009323:	53                   	push   ebx
c0009324:	e8 59 00 00 00       	call   c0009382 <ReservedFilename::ReservedFilename(int)>
c0009329:	83 c4 10             	add    esp,0x10
c000932c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009330:	89 1c 85 60 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb0a0],ebx
c0009337:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000933f:	83 ec 0c             	sub    esp,0xc
c0009342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009346:	e8 63 e7 ff ff       	call   c0007aae <malloc>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	89 c3                	mov    ebx,eax
c0009350:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009354:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009359:	83 ec 08             	sub    esp,0x8
c000935c:	50                   	push   eax
c000935d:	53                   	push   ebx
c000935e:	e8 1f 00 00 00       	call   c0009382 <ReservedFilename::ReservedFilename(int)>
c0009363:	83 c4 10             	add    esp,0x10
c0009366:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000936a:	89 1c 85 20 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb0e0],ebx
c0009371:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009376:	e9 7b ff ff ff       	jmp    c00092f6 <UnixFile::UnixFile(int)+0x128>
c000937b:	90                   	nop
c000937c:	83 c4 28             	add    esp,0x28
c000937f:	5b                   	pop    ebx
c0009380:	c3                   	ret    
c0009381:	90                   	nop

c0009382 <ReservedFilename::ReservedFilename(int)>:
c0009382:	83 ec 0c             	sub    esp,0xc
c0009385:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009389:	83 ec 08             	sub    esp,0x8
c000938c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009390:	50                   	push   eax
c0009391:	e8 38 fe ff ff       	call   c00091ce <UnixFile::UnixFile(int)>
c0009396:	83 c4 10             	add    esp,0x10
c0009399:	ba 98 fe 01 c0       	mov    edx,0xc001fe98
c000939e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093a2:	89 10                	mov    DWORD PTR [eax],edx
c00093a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093a8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00093ac:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00093af:	90                   	nop
c00093b0:	83 c4 0c             	add    esp,0xc
c00093b3:	c3                   	ret    

c00093b4 <UnixFile::~UnixFile()>:
c00093b4:	83 ec 1c             	sub    esp,0x1c
c00093b7:	ba 7c fe 01 c0       	mov    edx,0xc001fe7c
c00093bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093c0:	89 10                	mov    DWORD PTR [eax],edx
c00093c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093c9:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093ce:	7f 76                	jg     c0009446 <UnixFile::~UnixFile()+0x92>
c00093d0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093d8:	83 ec 0c             	sub    esp,0xc
c00093db:	68 98 4f 02 c0       	push   0xc0024f98
c00093e0:	e8 47 56 01 00       	call   c001ea2c <LinkedList<UnixFile>::getFirstElement()>
c00093e5:	83 c4 10             	add    esp,0x10
c00093e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093ec:	83 ec 0c             	sub    esp,0xc
c00093ef:	68 98 4f 02 c0       	push   0xc0024f98
c00093f4:	e8 3b 56 01 00       	call   c001ea34 <LinkedList<UnixFile>::removeFirst()>
c00093f9:	83 c4 10             	add    esp,0x10
c00093fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009400:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009404:	74 43                	je     c0009449 <UnixFile::~UnixFile()+0x95>
c0009406:	83 ec 08             	sub    esp,0x8
c0009409:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000940d:	68 98 4f 02 c0       	push   0xc0024f98
c0009412:	e8 41 55 01 00       	call   c001e958 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009417:	83 c4 10             	add    esp,0x10
c000941a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000941e:	8d 50 01             	lea    edx,[eax+0x1]
c0009421:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009425:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000942a:	0f 94 c0             	sete   al
c000942d:	0f b6 c0             	movzx  eax,al
c0009430:	85 c0                	test   eax,eax
c0009432:	74 a4                	je     c00093d8 <UnixFile::~UnixFile()+0x24>
c0009434:	83 ec 0c             	sub    esp,0xc
c0009437:	68 54 fe 01 c0       	push   0xc001fe54
c000943c:	e8 e6 74 00 00       	call   c0010927 <KePanic(char const*)>
c0009441:	83 c4 10             	add    esp,0x10
c0009444:	eb 92                	jmp    c00093d8 <UnixFile::~UnixFile()+0x24>
c0009446:	90                   	nop
c0009447:	eb 01                	jmp    c000944a <UnixFile::~UnixFile()+0x96>
c0009449:	90                   	nop
c000944a:	90                   	nop
c000944b:	83 c4 1c             	add    esp,0x1c
c000944e:	c3                   	ret    
c000944f:	90                   	nop

c0009450 <UnixFile::~UnixFile()>:
c0009450:	83 ec 0c             	sub    esp,0xc
c0009453:	83 ec 0c             	sub    esp,0xc
c0009456:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000945a:	e8 55 ff ff ff       	call   c00093b4 <UnixFile::~UnixFile()>
c000945f:	83 c4 10             	add    esp,0x10
c0009462:	83 ec 08             	sub    esp,0x8
c0009465:	6a 0c                	push   0xc
c0009467:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000946b:	e8 5a 14 00 00       	call   c000a8ca <operator delete(void*, unsigned long)>
c0009470:	83 c4 10             	add    esp,0x10
c0009473:	83 c4 0c             	add    esp,0xc
c0009476:	c3                   	ret    
c0009477:	90                   	nop

c0009478 <ReservedFilename::~ReservedFilename()>:
c0009478:	83 ec 0c             	sub    esp,0xc
c000947b:	ba 98 fe 01 c0       	mov    edx,0xc001fe98
c0009480:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009484:	89 10                	mov    DWORD PTR [eax],edx
c0009486:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000948a:	83 ec 0c             	sub    esp,0xc
c000948d:	50                   	push   eax
c000948e:	e8 21 ff ff ff       	call   c00093b4 <UnixFile::~UnixFile()>
c0009493:	83 c4 10             	add    esp,0x10
c0009496:	90                   	nop
c0009497:	83 c4 0c             	add    esp,0xc
c000949a:	c3                   	ret    
c000949b:	90                   	nop

c000949c <ReservedFilename::~ReservedFilename()>:
c000949c:	83 ec 0c             	sub    esp,0xc
c000949f:	83 ec 0c             	sub    esp,0xc
c00094a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094a6:	e8 cd ff ff ff       	call   c0009478 <ReservedFilename::~ReservedFilename()>
c00094ab:	83 c4 10             	add    esp,0x10
c00094ae:	83 ec 08             	sub    esp,0x8
c00094b1:	6a 0c                	push   0xc
c00094b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094b7:	e8 0e 14 00 00       	call   c000a8ca <operator delete(void*, unsigned long)>
c00094bc:	83 c4 10             	add    esp,0x10
c00094bf:	83 c4 0c             	add    esp,0xc
c00094c2:	c3                   	ret    

c00094c3 <getFromFileDescriptor(int)>:
c00094c3:	53                   	push   ebx
c00094c4:	83 ec 08             	sub    esp,0x8
c00094c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094cb:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094d1:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094d7:	7f 2c                	jg     c0009505 <getFromFileDescriptor(int)+0x42>
c00094d9:	83 ec 0c             	sub    esp,0xc
c00094dc:	68 98 4f 02 c0       	push   0xc0024f98
c00094e1:	e8 46 55 01 00       	call   c001ea2c <LinkedList<UnixFile>::getFirstElement()>
c00094e6:	83 c4 10             	add    esp,0x10
c00094e9:	85 c0                	test   eax,eax
c00094eb:	75 04                	jne    c00094f1 <getFromFileDescriptor(int)+0x2e>
c00094ed:	31 c0                	xor    eax,eax
c00094ef:	eb 6e                	jmp    c000955f <getFromFileDescriptor(int)+0x9c>
c00094f1:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094f4:	74 69                	je     c000955f <getFromFileDescriptor(int)+0x9c>
c00094f6:	52                   	push   edx
c00094f7:	52                   	push   edx
c00094f8:	50                   	push   eax
c00094f9:	68 98 4f 02 c0       	push   0xc0024f98
c00094fe:	e8 d3 55 01 00       	call   c001ead6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0009503:	eb e1                	jmp    c00094e6 <getFromFileDescriptor(int)+0x23>
c0009505:	a1 8c 4f 02 c0       	mov    eax,ds:0xc0024f8c
c000950a:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009510:	74 4d                	je     c000955f <getFromFileDescriptor(int)+0x9c>
c0009512:	a1 90 4f 02 c0       	mov    eax,ds:0xc0024f90
c0009517:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000951d:	74 40                	je     c000955f <getFromFileDescriptor(int)+0x9c>
c000951f:	a1 88 4f 02 c0       	mov    eax,ds:0xc0024f88
c0009524:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000952a:	74 33                	je     c000955f <getFromFileDescriptor(int)+0x9c>
c000952c:	a1 84 4f 02 c0       	mov    eax,ds:0xc0024f84
c0009531:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0009537:	74 26                	je     c000955f <getFromFileDescriptor(int)+0x9c>
c0009539:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000953f:	83 f8 08             	cmp    eax,0x8
c0009542:	77 09                	ja     c000954d <getFromFileDescriptor(int)+0x8a>
c0009544:	8b 04 85 60 4f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb0a0]
c000954b:	eb 12                	jmp    c000955f <getFromFileDescriptor(int)+0x9c>
c000954d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0009553:	83 fb 08             	cmp    ebx,0x8
c0009556:	77 95                	ja     c00094ed <getFromFileDescriptor(int)+0x2a>
c0009558:	8b 04 9d 20 4f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb0e0]
c000955f:	83 c4 08             	add    esp,0x8
c0009562:	5b                   	pop    ebx
c0009563:	c3                   	ret    

c0009564 <__static_initialization_and_destruction_0(int, int)>:
c0009564:	83 ec 0c             	sub    esp,0xc
c0009567:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000956c:	75 34                	jne    c00095a2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000956e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0009576:	75 2a                	jne    c00095a2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009578:	83 ec 0c             	sub    esp,0xc
c000957b:	68 98 4f 02 c0       	push   0xc0024f98
c0009580:	e8 91 53 01 00       	call   c001e916 <LinkedList<UnixFile>::LinkedList()>
c0009585:	83 c4 10             	add    esp,0x10
c0009588:	83 ec 04             	sub    esp,0x4
c000958b:	68 44 1f 02 c0       	push   0xc0021f44
c0009590:	68 98 4f 02 c0       	push   0xc0024f98
c0009595:	68 14 e9 01 c0       	push   0xc001e914
c000959a:	e8 db 12 00 00       	call   c000a87a <__cxa_atexit>
c000959f:	83 c4 10             	add    esp,0x10
c00095a2:	90                   	nop
c00095a3:	83 c4 0c             	add    esp,0xc
c00095a6:	c3                   	ret    

c00095a7 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00095a7:	83 ec 0c             	sub    esp,0xc
c00095aa:	83 ec 08             	sub    esp,0x8
c00095ad:	68 ff ff 00 00       	push   0xffff
c00095b2:	6a 01                	push   0x1
c00095b4:	e8 ab ff ff ff       	call   c0009564 <__static_initialization_and_destruction_0(int, int)>
c00095b9:	83 c4 10             	add    esp,0x10
c00095bc:	83 c4 0c             	add    esp,0xc
c00095bf:	c3                   	ret    

c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00095c0:	53                   	push   ebx
c00095c1:	8b 15 c8 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021fc8
c00095c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095cb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095cf:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095d5:	89 d8                	mov    eax,ebx
c00095d7:	d1 e8                	shr    eax,1
c00095d9:	01 d0                	add    eax,edx
c00095db:	80 e3 01             	and    bl,0x1
c00095de:	8a 10                	mov    dl,BYTE PTR [eax]
c00095e0:	75 09                	jne    c00095eb <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095e2:	83 e2 f0             	and    edx,0xfffffff0
c00095e5:	09 ca                	or     edx,ecx
c00095e7:	88 10                	mov    BYTE PTR [eax],dl
c00095e9:	5b                   	pop    ebx
c00095ea:	c3                   	ret    
c00095eb:	83 e2 0f             	and    edx,0xf
c00095ee:	0f b6 c9             	movzx  ecx,cl
c00095f1:	c1 e1 04             	shl    ecx,0x4
c00095f4:	09 ca                	or     edx,ecx
c00095f6:	88 10                	mov    BYTE PTR [eax],dl
c00095f8:	5b                   	pop    ebx
c00095f9:	c3                   	ret    

c00095fa <Virt::getPageState(unsigned long)>:
c00095fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095fe:	8b 0d c8 1f 02 c0    	mov    ecx,DWORD PTR ds:0xc0021fc8
c0009604:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000960a:	89 d0                	mov    eax,edx
c000960c:	d1 e8                	shr    eax,1
c000960e:	80 e2 01             	and    dl,0x1
c0009611:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0009614:	74 03                	je     c0009619 <Virt::getPageState(unsigned long)+0x1f>
c0009616:	c1 e8 04             	shr    eax,0x4
c0009619:	83 e0 0f             	and    eax,0xf
c000961c:	c3                   	ret    

c000961d <Virt::allocateKernelVirtualPages(int)>:
c000961d:	55                   	push   ebp
c000961e:	31 ed                	xor    ebp,ebp
c0009620:	57                   	push   edi
c0009621:	31 ff                	xor    edi,edi
c0009623:	56                   	push   esi
c0009624:	53                   	push   ebx
c0009625:	31 db                	xor    ebx,ebx
c0009627:	83 ec 0c             	sub    esp,0xc
c000962a:	8b 35 c4 1f 02 c0    	mov    esi,DWORD PTR ds:0xc0021fc4
c0009630:	56                   	push   esi
c0009631:	e8 c4 ff ff ff       	call   c00095fa <Virt::getPageState(unsigned long)>
c0009636:	5a                   	pop    edx
c0009637:	84 c0                	test   al,al
c0009639:	75 41                	jne    c000967c <Virt::allocateKernelVirtualPages(int)+0x5f>
c000963b:	85 db                	test   ebx,ebx
c000963d:	75 02                	jne    c0009641 <Virt::allocateKernelVirtualPages(int)+0x24>
c000963f:	89 f5                	mov    ebp,esi
c0009641:	83 c3 01             	add    ebx,0x1
c0009644:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0009648:	74 5f                	je     c00096a9 <Virt::allocateKernelVirtualPages(int)+0x8c>
c000964a:	83 c6 01             	add    esi,0x1
c000964d:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009653:	76 34                	jbe    c0009689 <Virt::allocateKernelVirtualPages(int)+0x6c>
c0009655:	c7 05 c4 1f 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0021fc4,0xc8000
c000965f:	f7 c7 01 00 00 00    	test   edi,0x1
c0009665:	75 2a                	jne    c0009691 <Virt::allocateKernelVirtualPages(int)+0x74>
c0009667:	be 00 80 0c 00       	mov    esi,0xc8000
c000966c:	bf 01 00 00 00       	mov    edi,0x1
c0009671:	56                   	push   esi
c0009672:	e8 83 ff ff ff       	call   c00095fa <Virt::getPageState(unsigned long)>
c0009677:	5a                   	pop    edx
c0009678:	84 c0                	test   al,al
c000967a:	74 bf                	je     c000963b <Virt::allocateKernelVirtualPages(int)+0x1e>
c000967c:	31 db                	xor    ebx,ebx
c000967e:	83 c6 01             	add    esi,0x1
c0009681:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009687:	77 cc                	ja     c0009655 <Virt::allocateKernelVirtualPages(int)+0x38>
c0009689:	89 35 c4 1f 02 c0    	mov    DWORD PTR ds:0xc0021fc4,esi
c000968f:	eb 9f                	jmp    c0009630 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009691:	83 ec 0c             	sub    esp,0xc
c0009694:	68 ac fe 01 c0       	push   0xc001feac
c0009699:	e8 89 72 00 00       	call   c0010927 <KePanic(char const*)>
c000969e:	8b 35 c4 1f 02 c0    	mov    esi,DWORD PTR ds:0xc0021fc4
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	eb 87                	jmp    c0009630 <Virt::allocateKernelVirtualPages(int)+0x13>
c00096a9:	89 2d c4 1f 02 c0    	mov    DWORD PTR ds:0xc0021fc4,ebp
c00096af:	83 fb 01             	cmp    ebx,0x1
c00096b2:	74 6f                	je     c0009723 <Virt::allocateKernelVirtualPages(int)+0x106>
c00096b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096b8:	85 c9                	test   ecx,ecx
c00096ba:	74 49                	je     c0009705 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096bc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096c0:	89 e8                	mov    eax,ebp
c00096c2:	31 db                	xor    ebx,ebx
c00096c4:	8d 79 ff             	lea    edi,[ecx-0x1]
c00096c7:	eb 18                	jmp    c00096e1 <Virt::allocateKernelVirtualPages(int)+0xc4>
c00096c9:	6a 01                	push   0x1
c00096cb:	83 c3 01             	add    ebx,0x1
c00096ce:	50                   	push   eax
c00096cf:	e8 ec fe ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096d4:	58                   	pop    eax
c00096d5:	5a                   	pop    edx
c00096d6:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096da:	74 29                	je     c0009705 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096dc:	a1 c4 1f 02 c0       	mov    eax,ds:0xc0021fc4
c00096e1:	8d 50 01             	lea    edx,[eax+0x1]
c00096e4:	85 db                	test   ebx,ebx
c00096e6:	89 15 c4 1f 02 c0    	mov    DWORD PTR ds:0xc0021fc4,edx
c00096ec:	74 24                	je     c0009712 <Virt::allocateKernelVirtualPages(int)+0xf5>
c00096ee:	39 df                	cmp    edi,ebx
c00096f0:	75 d7                	jne    c00096c9 <Virt::allocateKernelVirtualPages(int)+0xac>
c00096f2:	6a 03                	push   0x3
c00096f4:	83 c3 01             	add    ebx,0x1
c00096f7:	50                   	push   eax
c00096f8:	e8 c3 fe ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096fd:	59                   	pop    ecx
c00096fe:	5e                   	pop    esi
c00096ff:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0009703:	75 d7                	jne    c00096dc <Virt::allocateKernelVirtualPages(int)+0xbf>
c0009705:	83 c4 0c             	add    esp,0xc
c0009708:	89 e8                	mov    eax,ebp
c000970a:	5b                   	pop    ebx
c000970b:	c1 e0 0c             	shl    eax,0xc
c000970e:	5e                   	pop    esi
c000970f:	5f                   	pop    edi
c0009710:	5d                   	pop    ebp
c0009711:	c3                   	ret    
c0009712:	6a 02                	push   0x2
c0009714:	bb 01 00 00 00       	mov    ebx,0x1
c0009719:	50                   	push   eax
c000971a:	e8 a1 fe ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000971f:	58                   	pop    eax
c0009720:	5a                   	pop    edx
c0009721:	eb b9                	jmp    c00096dc <Virt::allocateKernelVirtualPages(int)+0xbf>
c0009723:	6a 04                	push   0x4
c0009725:	8d 45 01             	lea    eax,[ebp+0x1]
c0009728:	55                   	push   ebp
c0009729:	a3 c4 1f 02 c0       	mov    ds:0xc0021fc4,eax
c000972e:	e8 8d fe ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009733:	5b                   	pop    ebx
c0009734:	89 e8                	mov    eax,ebp
c0009736:	5e                   	pop    esi
c0009737:	c1 e0 0c             	shl    eax,0xc
c000973a:	83 c4 0c             	add    esp,0xc
c000973d:	5b                   	pop    ebx
c000973e:	5e                   	pop    esi
c000973f:	5f                   	pop    edi
c0009740:	5d                   	pop    ebp
c0009741:	c3                   	ret    

c0009742 <Virt::freeSwapfilePage(unsigned long)>:
c0009742:	53                   	push   ebx
c0009743:	8b 15 ac 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fac
c0009749:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000974d:	b8 01 00 00 00       	mov    eax,0x1
c0009752:	89 cb                	mov    ebx,ecx
c0009754:	d3 e0                	shl    eax,cl
c0009756:	c1 eb 05             	shr    ebx,0x5
c0009759:	f7 d0                	not    eax
c000975b:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000975e:	21 c1                	and    ecx,eax
c0009760:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009763:	5b                   	pop    ebx
c0009764:	c3                   	ret    

c0009765 <Virt::swapIDToSector(unsigned long)>:
c0009765:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009769:	8b 15 cc 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021fcc
c000976f:	8b 0d d4 1f 02 c0    	mov    ecx,DWORD PTR ds:0xc0021fd4
c0009775:	0f af c2             	imul   eax,edx
c0009778:	01 c8                	add    eax,ecx
c000977a:	c3                   	ret    

c000977b <Virt::allocateSwapfilePage()>:
c000977b:	55                   	push   ebp
c000977c:	31 d2                	xor    edx,edx
c000977e:	57                   	push   edi
c000977f:	56                   	push   esi
c0009780:	53                   	push   ebx
c0009781:	83 ec 0c             	sub    esp,0xc
c0009784:	8b 0d cc 1f 02 c0    	mov    ecx,DWORD PTR ds:0xc0021fcc
c000978a:	a1 d0 1f 02 c0       	mov    eax,ds:0xc0021fd0
c000978f:	f7 f1                	div    ecx
c0009791:	39 0d d0 1f 02 c0    	cmp    DWORD PTR ds:0xc0021fd0,ecx
c0009797:	72 2f                	jb     c00097c8 <Virt::allocateSwapfilePage()+0x4d>
c0009799:	8b 35 ac 4f 02 c0    	mov    esi,DWORD PTR ds:0xc0024fac
c000979f:	8b 16                	mov    edx,DWORD PTR [esi]
c00097a1:	f6 c2 01             	test   dl,0x1
c00097a4:	74 3e                	je     c00097e4 <Virt::allocateSwapfilePage()+0x69>
c00097a6:	31 c9                	xor    ecx,ecx
c00097a8:	bf 01 00 00 00       	mov    edi,0x1
c00097ad:	eb 12                	jmp    c00097c1 <Virt::allocateSwapfilePage()+0x46>
c00097af:	89 fd                	mov    ebp,edi
c00097b1:	89 ca                	mov    edx,ecx
c00097b3:	d3 e5                	shl    ebp,cl
c00097b5:	c1 ea 05             	shr    edx,0x5
c00097b8:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00097bb:	8b 13                	mov    edx,DWORD PTR [ebx]
c00097bd:	85 ea                	test   edx,ebp
c00097bf:	74 2c                	je     c00097ed <Virt::allocateSwapfilePage()+0x72>
c00097c1:	83 c1 01             	add    ecx,0x1
c00097c4:	39 c8                	cmp    eax,ecx
c00097c6:	77 e7                	ja     c00097af <Virt::allocateSwapfilePage()+0x34>
c00097c8:	83 ec 0c             	sub    esp,0xc
c00097cb:	68 44 00 02 c0       	push   0xc0020044
c00097d0:	e8 52 71 00 00       	call   c0010927 <KePanic(char const*)>
c00097d5:	83 c4 10             	add    esp,0x10
c00097d8:	31 c9                	xor    ecx,ecx
c00097da:	83 c4 0c             	add    esp,0xc
c00097dd:	89 c8                	mov    eax,ecx
c00097df:	5b                   	pop    ebx
c00097e0:	5e                   	pop    esi
c00097e1:	5f                   	pop    edi
c00097e2:	5d                   	pop    ebp
c00097e3:	c3                   	ret    
c00097e4:	89 f3                	mov    ebx,esi
c00097e6:	bd 01 00 00 00       	mov    ebp,0x1
c00097eb:	31 c9                	xor    ecx,ecx
c00097ed:	09 ea                	or     edx,ebp
c00097ef:	89 c8                	mov    eax,ecx
c00097f1:	89 13                	mov    DWORD PTR [ebx],edx
c00097f3:	83 c4 0c             	add    esp,0xc
c00097f6:	5b                   	pop    ebx
c00097f7:	5e                   	pop    esi
c00097f8:	5f                   	pop    edi
c00097f9:	5d                   	pop    ebp
c00097fa:	c3                   	ret    

c00097fb <Virt::virtualMemorySetup()>:
c00097fb:	53                   	push   ebx
c00097fc:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009801:	6a 0f                	push   0xf
c0009803:	53                   	push   ebx
c0009804:	83 c3 01             	add    ebx,0x1
c0009807:	e8 b4 fd ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000980c:	58                   	pop    eax
c000980d:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009813:	5a                   	pop    edx
c0009814:	75 eb                	jne    c0009801 <Virt::virtualMemorySetup()+0x6>
c0009816:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000981b:	6a 00                	push   0x0
c000981d:	53                   	push   ebx
c000981e:	83 c3 01             	add    ebx,0x1
c0009821:	e8 9a fd ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009826:	59                   	pop    ecx
c0009827:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000982d:	58                   	pop    eax
c000982e:	75 eb                	jne    c000981b <Virt::virtualMemorySetup()+0x20>
c0009830:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009835:	6a 0f                	push   0xf
c0009837:	53                   	push   ebx
c0009838:	83 c3 01             	add    ebx,0x1
c000983b:	e8 80 fd ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009840:	58                   	pop    eax
c0009841:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009847:	5a                   	pop    edx
c0009848:	75 eb                	jne    c0009835 <Virt::virtualMemorySetup()+0x3a>
c000984a:	5b                   	pop    ebx
c000984b:	c3                   	ret    

c000984c <Virt::setupPageSwapping(int)>:
c000984c:	53                   	push   ebx
c000984d:	83 ec 0c             	sub    esp,0xc
c0009850:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009854:	a1 28 74 02 c0       	mov    eax,ds:0xc0027428
c0009859:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000985f:	8b 10                	mov    edx,DWORD PTR [eax]
c0009861:	53                   	push   ebx
c0009862:	c1 e3 0b             	shl    ebx,0xb
c0009865:	68 5b 00 02 c0       	push   0xc002005b
c000986a:	50                   	push   eax
c000986b:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000986e:	89 1d d0 1f 02 c0    	mov    DWORD PTR ds:0xc0021fd0,ebx
c0009874:	c6 05 d8 1f 02 c0 43 	mov    BYTE PTR ds:0xc0021fd8,0x43
c000987b:	c1 eb 08             	shr    ebx,0x8
c000987e:	a3 d4 1f 02 c0       	mov    ds:0xc0021fd4,eax
c0009883:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009886:	c7 05 cc 1f 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0021fcc,0x8
c0009890:	e8 19 e2 ff ff       	call   c0007aae <malloc>
c0009895:	83 c4 0c             	add    esp,0xc
c0009898:	89 c1                	mov    ecx,eax
c000989a:	a3 ac 4f 02 c0       	mov    ds:0xc0024fac,eax
c000989f:	31 d2                	xor    edx,edx
c00098a1:	a1 d0 1f 02 c0       	mov    eax,ds:0xc0021fd0
c00098a6:	f7 35 cc 1f 02 c0    	div    DWORD PTR ds:0xc0021fcc
c00098ac:	c1 e8 05             	shr    eax,0x5
c00098af:	50                   	push   eax
c00098b0:	6a 00                	push   0x0
c00098b2:	51                   	push   ecx
c00098b3:	e8 38 6c ff ff       	call   c00004f0 <memset>
c00098b8:	83 c4 18             	add    esp,0x18
c00098bb:	5b                   	pop    ebx
c00098bc:	c3                   	ret    
c00098bd:	90                   	nop

c00098be <VAS::VAS(VAS*)>:
c00098be:	83 ec 0c             	sub    esp,0xc
c00098c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098c5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098d0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098d7:	83 ec 0c             	sub    esp,0xc
c00098da:	68 cc fe 01 c0       	push   0xc001fecc
c00098df:	e8 43 70 00 00       	call   c0010927 <KePanic(char const*)>
c00098e4:	83 c4 10             	add    esp,0x10
c00098e7:	90                   	nop
c00098e8:	83 c4 0c             	add    esp,0xc
c00098eb:	c3                   	ret    

c00098ec <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098f0:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098f5:	89 c2                	mov    edx,eax
c00098f7:	c1 e8 0a             	shr    eax,0xa
c00098fa:	c1 ea 16             	shr    edx,0x16
c00098fd:	83 f9 01             	cmp    ecx,0x1
c0009900:	19 c9                	sbb    ecx,ecx
c0009902:	c1 e2 0c             	shl    edx,0xc
c0009905:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000990b:	25 fc 0f 00 00       	and    eax,0xffc
c0009910:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009917:	01 d0                	add    eax,edx
c0009919:	c3                   	ret    

c000991a <VAS::getPageTableEntry(unsigned long)>:
c000991a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000991e:	89 ca                	mov    edx,ecx
c0009920:	c1 e9 0a             	shr    ecx,0xa
c0009923:	c1 ea 16             	shr    edx,0x16
c0009926:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000992c:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009932:	c1 e0 0c             	shl    eax,0xc
c0009935:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009938:	c3                   	ret    

c0009939 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009939:	55                   	push   ebp
c000993a:	57                   	push   edi
c000993b:	bf 01 00 00 00       	mov    edi,0x1
c0009940:	56                   	push   esi
c0009941:	53                   	push   ebx
c0009942:	83 ec 0c             	sub    esp,0xc
c0009945:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0009949:	c1 ee 0c             	shr    esi,0xc
c000994c:	eb 3a                	jmp    c0009988 <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000994e:	83 ec 08             	sub    esp,0x8
c0009951:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c0009956:	55                   	push   ebp
c0009957:	50                   	push   eax
c0009958:	e8 bd ff ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c000995d:	83 c4 10             	add    esp,0x10
c0009960:	8b 00                	mov    eax,DWORD PTR [eax]
c0009962:	f6 c4 04             	test   ah,0x4
c0009965:	75 5a                	jne    c00099c1 <Virt::freeKernelVirtualPages(unsigned long)+0x88>
c0009967:	83 fb 04             	cmp    ebx,0x4
c000996a:	74 6b                	je     c00099d7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c000996c:	83 fb 02             	cmp    ebx,0x2
c000996f:	74 7f                	je     c00099f0 <Virt::freeKernelVirtualPages(unsigned long)+0xb7>
c0009971:	83 fb 03             	cmp    ebx,0x3
c0009974:	0f 84 a3 00 00 00    	je     c0009a1d <Virt::freeKernelVirtualPages(unsigned long)+0xe4>
c000997a:	83 fb 01             	cmp    ebx,0x1
c000997d:	0f 84 87 00 00 00    	je     c0009a0a <Virt::freeKernelVirtualPages(unsigned long)+0xd1>
c0009983:	83 c6 01             	add    esi,0x1
c0009986:	31 ff                	xor    edi,edi
c0009988:	56                   	push   esi
c0009989:	89 f5                	mov    ebp,esi
c000998b:	e8 6a fc ff ff       	call   c00095fa <Virt::getPageState(unsigned long)>
c0009990:	c1 e5 0c             	shl    ebp,0xc
c0009993:	0f b6 d8             	movzx  ebx,al
c0009996:	5a                   	pop    edx
c0009997:	85 db                	test   ebx,ebx
c0009999:	75 b3                	jne    c000994e <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c000999b:	83 ec 0c             	sub    esp,0xc
c000999e:	68 72 00 02 c0       	push   0xc0020072
c00099a3:	e8 7f 6f 00 00       	call   c0010927 <KePanic(char const*)>
c00099a8:	5a                   	pop    edx
c00099a9:	59                   	pop    ecx
c00099aa:	55                   	push   ebp
c00099ab:	8b 2d b0 4f 02 c0    	mov    ebp,DWORD PTR ds:0xc0024fb0
c00099b1:	55                   	push   ebp
c00099b2:	e8 63 ff ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c00099b7:	83 c4 10             	add    esp,0x10
c00099ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00099bc:	f6 c4 04             	test   ah,0x4
c00099bf:	74 c2                	je     c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x4a>
c00099c1:	83 ec 0c             	sub    esp,0xc
c00099c4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00099c9:	50                   	push   eax
c00099ca:	e8 7b e3 ff ff       	call   c0007d4a <Phys::freePage(unsigned long)>
c00099cf:	83 c4 10             	add    esp,0x10
c00099d2:	83 fb 04             	cmp    ebx,0x4
c00099d5:	75 95                	jne    c000996c <Virt::freeKernelVirtualPages(unsigned long)+0x33>
c00099d7:	83 e7 01             	and    edi,0x1
c00099da:	75 46                	jne    c0009a22 <Virt::freeKernelVirtualPages(unsigned long)+0xe9>
c00099dc:	c7 44 24 20 f0 fe 01 c0 	mov    DWORD PTR [esp+0x20],0xc001fef0
c00099e4:	83 c4 0c             	add    esp,0xc
c00099e7:	5b                   	pop    ebx
c00099e8:	5e                   	pop    esi
c00099e9:	5f                   	pop    edi
c00099ea:	5d                   	pop    ebp
c00099eb:	e9 37 6f 00 00       	jmp    c0010927 <KePanic(char const*)>
c00099f0:	83 e7 01             	and    edi,0x1
c00099f3:	75 15                	jne    c0009a0a <Virt::freeKernelVirtualPages(unsigned long)+0xd1>
c00099f5:	83 ec 0c             	sub    esp,0xc
c00099f8:	68 8e 00 02 c0       	push   0xc002008e
c00099fd:	e8 25 6f 00 00       	call   c0010927 <KePanic(char const*)>
c0009a02:	83 c4 10             	add    esp,0x10
c0009a05:	e9 79 ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x4a>
c0009a0a:	83 ec 08             	sub    esp,0x8
c0009a0d:	6a 00                	push   0x0
c0009a0f:	56                   	push   esi
c0009a10:	e8 ab fb ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a15:	83 c4 10             	add    esp,0x10
c0009a18:	e9 66 ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x4a>
c0009a1d:	83 e7 01             	and    edi,0x1
c0009a20:	75 16                	jne    c0009a38 <Virt::freeKernelVirtualPages(unsigned long)+0xff>
c0009a22:	83 ec 08             	sub    esp,0x8
c0009a25:	6a 00                	push   0x0
c0009a27:	56                   	push   esi
c0009a28:	e8 93 fb ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a2d:	83 c4 10             	add    esp,0x10
c0009a30:	83 c4 0c             	add    esp,0xc
c0009a33:	5b                   	pop    ebx
c0009a34:	5e                   	pop    esi
c0009a35:	5f                   	pop    edi
c0009a36:	5d                   	pop    ebp
c0009a37:	c3                   	ret    
c0009a38:	c7 44 24 20 aa 00 02 c0 	mov    DWORD PTR [esp+0x20],0xc00200aa
c0009a40:	83 c4 0c             	add    esp,0xc
c0009a43:	5b                   	pop    ebx
c0009a44:	5e                   	pop    esi
c0009a45:	5f                   	pop    edi
c0009a46:	5d                   	pop    ebp
c0009a47:	e9 db 6e 00 00       	jmp    c0010927 <KePanic(char const*)>

c0009a4c <VAS::freeAllocatedPages(unsigned long)>:
c0009a4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a50:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a54:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a58:	74 09                	je     c0009a63 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a5a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a5e:	e9 d6 fe ff ff       	jmp    c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a63:	c7 44 24 04 14 ff 01 c0 	mov    DWORD PTR [esp+0x4],0xc001ff14
c0009a6b:	e9 87 0f 00 00       	jmp    c000a9f7 <Dbg::kprintf(char const*, ...)>

c0009a70 <VAS::virtualToPhysical(unsigned long)>:
c0009a70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a74:	50                   	push   eax
c0009a75:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a79:	52                   	push   edx
c0009a7a:	e8 9b fe ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c0009a7f:	59                   	pop    ecx
c0009a80:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a82:	5a                   	pop    edx
c0009a83:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009a88:	c3                   	ret    
c0009a89:	90                   	nop

c0009a8a <VAS::reflagRange(unsigned long, int, int, int)>:
c0009a8a:	55                   	push   ebp
c0009a8b:	57                   	push   edi
c0009a8c:	56                   	push   esi
c0009a8d:	53                   	push   ebx
c0009a8e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009a92:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009a96:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009a9a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009a9e:	85 db                	test   ebx,ebx
c0009aa0:	7e 24                	jle    c0009ac6 <VAS::reflagRange(unsigned long, int, int, int)+0x3c>
c0009aa2:	c1 e3 0c             	shl    ebx,0xc
c0009aa5:	01 f3                	add    ebx,esi
c0009aa7:	56                   	push   esi
c0009aa8:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aae:	55                   	push   ebp
c0009aaf:	e8 66 fe ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c0009ab4:	5a                   	pop    edx
c0009ab5:	59                   	pop    ecx
c0009ab6:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ab8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009abc:	21 f9                	and    ecx,edi
c0009abe:	09 d1                	or     ecx,edx
c0009ac0:	39 f3                	cmp    ebx,esi
c0009ac2:	89 08                	mov    DWORD PTR [eax],ecx
c0009ac4:	75 e1                	jne    c0009aa7 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0009ac6:	5b                   	pop    ebx
c0009ac7:	5e                   	pop    esi
c0009ac8:	5f                   	pop    edi
c0009ac9:	5d                   	pop    ebp
c0009aca:	c3                   	ret    
c0009acb:	90                   	nop

c0009acc <VAS::VAS()>:
c0009acc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ad0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ad7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009adb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009ae2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae6:	a3 b0 4f 02 c0       	mov    ds:0xc0024fb0,eax
c0009aeb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aef:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009af3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af7:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009afa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009afe:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009b05:	ba 7d 30 02 c0       	mov    edx,0xc002307d
c0009b0a:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0009b0f:	29 c2                	sub    edx,eax
c0009b11:	89 d0                	mov    eax,edx
c0009b13:	05 ff 0f 00 00       	add    eax,0xfff
c0009b18:	c1 e8 0c             	shr    eax,0xc
c0009b1b:	89 c2                	mov    edx,eax
c0009b1d:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0009b22:	6a 04                	push   0x4
c0009b24:	6a ff                	push   0xffffffff
c0009b26:	52                   	push   edx
c0009b27:	50                   	push   eax
c0009b28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b2c:	e8 59 ff ff ff       	call   c0009a8a <VAS::reflagRange(unsigned long, int, int, int)>
c0009b31:	83 c4 14             	add    esp,0x14
c0009b34:	90                   	nop
c0009b35:	c3                   	ret    

c0009b36 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b36:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009b3b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b41:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b48:	75 01                	jne    c0009b4b <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b4a:	c3                   	ret    
c0009b4b:	68 80 00 00 00       	push   0x80
c0009b50:	6a ff                	push   0xffffffff
c0009b52:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b56:	50                   	push   eax
c0009b57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b5b:	52                   	push   edx
c0009b5c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b60:	51                   	push   ecx
c0009b61:	e8 24 ff ff ff       	call   c0009a8a <VAS::reflagRange(unsigned long, int, int, int)>
c0009b66:	83 c4 14             	add    esp,0x14
c0009b69:	c3                   	ret    

c0009b6a <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b6e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b71:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b75:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b78:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b7d:	83 f8 01             	cmp    eax,0x1
c0009b80:	19 c0                	sbb    eax,eax
c0009b82:	83 ca 03             	or     edx,0x3
c0009b85:	83 e0 fc             	and    eax,0xfffffffc
c0009b88:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009b8f:	0f 20 d8             	mov    eax,cr3
c0009b92:	0f 22 d8             	mov    cr3,eax
c0009b95:	c3                   	ret    

c0009b96 <VAS::~VAS()>:
c0009b96:	83 ec 2c             	sub    esp,0x2c
c0009b99:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009ba1:	fa                   	cli    
c0009ba2:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009ba7:	83 c0 01             	add    eax,0x1
c0009baa:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0009baf:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bb4:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bb6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bb9:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bbf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bc3:	6a 01                	push   0x1
c0009bc5:	50                   	push   eax
c0009bc6:	e8 9f ff ff ff       	call   c0009b6a <VAS::mapOtherVASIn(bool, VAS*)>
c0009bcb:	83 c4 0c             	add    esp,0xc
c0009bce:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bd6:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bde:	0f 8f d8 00 00 00    	jg     c0009cbc <VAS::~VAS()+0x126>
c0009be4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009be8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009beb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009bef:	c1 e2 02             	shl    edx,0x2
c0009bf2:	01 d0                	add    eax,edx
c0009bf4:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bf6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009bfe:	83 e0 01             	and    eax,0x1
c0009c01:	0f 84 ab 00 00 00    	je     c0009cb2 <VAS::~VAS()+0x11c>
c0009c07:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c0f:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c17:	7f 74                	jg     c0009c8d <VAS::~VAS()+0xf7>
c0009c19:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c1d:	c1 e0 0a             	shl    eax,0xa
c0009c20:	89 c2                	mov    edx,eax
c0009c22:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c26:	01 d0                	add    eax,edx
c0009c28:	c1 e0 0c             	shl    eax,0xc
c0009c2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c2f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c34:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c36:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c39:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c3f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c43:	6a 01                	push   0x1
c0009c45:	50                   	push   eax
c0009c46:	e8 a1 fc ff ff       	call   c00098ec <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c4b:	83 c4 0c             	add    esp,0xc
c0009c4e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c56:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c60:	25 01 04 00 00       	and    eax,0x401
c0009c65:	3d 01 04 00 00       	cmp    eax,0x401
c0009c6a:	75 1a                	jne    c0009c86 <VAS::~VAS()+0xf0>
c0009c6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c70:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c75:	83 ec 0c             	sub    esp,0xc
c0009c78:	50                   	push   eax
c0009c79:	e8 cc e0 ff ff       	call   c0007d4a <Phys::freePage(unsigned long)>
c0009c7e:	83 c4 10             	add    esp,0x10
c0009c81:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c86:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009c8b:	eb 82                	jmp    c0009c0f <VAS::~VAS()+0x79>
c0009c8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c91:	25 00 04 00 00       	and    eax,0x400
c0009c96:	74 1a                	je     c0009cb2 <VAS::~VAS()+0x11c>
c0009c98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c9c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009ca1:	83 ec 0c             	sub    esp,0xc
c0009ca4:	50                   	push   eax
c0009ca5:	e8 a0 e0 ff ff       	call   c0007d4a <Phys::freePage(unsigned long)>
c0009caa:	83 c4 10             	add    esp,0x10
c0009cad:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cb2:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cb7:	e9 1a ff ff ff       	jmp    c0009bd6 <VAS::~VAS()+0x40>
c0009cbc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cc0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cc3:	83 ec 0c             	sub    esp,0xc
c0009cc6:	50                   	push   eax
c0009cc7:	e8 6d fc ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c0009ccc:	83 c4 10             	add    esp,0x10
c0009ccf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cd3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cd6:	83 ec 0c             	sub    esp,0xc
c0009cd9:	50                   	push   eax
c0009cda:	e8 6b e0 ff ff       	call   c0007d4a <Phys::freePage(unsigned long)>
c0009cdf:	83 c4 10             	add    esp,0x10
c0009ce2:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ce7:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009cec:	83 e8 01             	sub    eax,0x1
c0009cef:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0009cf4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009cf9:	85 c0                	test   eax,eax
c0009cfb:	75 01                	jne    c0009cfe <VAS::~VAS()+0x168>
c0009cfd:	fb                   	sti    
c0009cfe:	90                   	nop
c0009cff:	83 c4 2c             	add    esp,0x2c
c0009d02:	c3                   	ret    
c0009d03:	90                   	nop

c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009d04:	55                   	push   ebp
c0009d05:	57                   	push   edi
c0009d06:	56                   	push   esi
c0009d07:	53                   	push   ebx
c0009d08:	83 ec 1c             	sub    esp,0x1c
c0009d0b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d0f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009d13:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d19:	77 0b                	ja     c0009d26 <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c0009d1b:	0f 20 d8             	mov    eax,cr3
c0009d1e:	0f 20 d8             	mov    eax,cr3
c0009d21:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009d24:	75 49                	jne    c0009d6f <VAS::mapPage(unsigned long, unsigned long, int)+0x6b>
c0009d26:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d2a:	09 d8                	or     eax,ebx
c0009d2c:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d31:	75 59                	jne    c0009d8c <VAS::mapPage(unsigned long, unsigned long, int)+0x88>
c0009d33:	89 de                	mov    esi,ebx
c0009d35:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d38:	c1 ee 16             	shr    esi,0x16
c0009d3b:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d42:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d46:	74 56                	je     c0009d9e <VAS::mapPage(unsigned long, unsigned long, int)+0x9a>
c0009d48:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d4c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d50:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d56:	c1 eb 0a             	shr    ebx,0xa
c0009d59:	c1 e6 0c             	shl    esi,0xc
c0009d5c:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d62:	09 d0                	or     eax,edx
c0009d64:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009d67:	83 c4 1c             	add    esp,0x1c
c0009d6a:	5b                   	pop    ebx
c0009d6b:	5e                   	pop    esi
c0009d6c:	5f                   	pop    edi
c0009d6d:	5d                   	pop    ebp
c0009d6e:	c3                   	ret    
c0009d6f:	83 ec 0c             	sub    esp,0xc
c0009d72:	68 38 ff 01 c0       	push   0xc001ff38
c0009d77:	e8 7b 0c 00 00       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c0009d7c:	83 c4 10             	add    esp,0x10
c0009d7f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d83:	09 d8                	or     eax,ebx
c0009d85:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d8a:	74 a7                	je     c0009d33 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009d8c:	83 ec 0c             	sub    esp,0xc
c0009d8f:	68 a0 ff 01 c0       	push   0xc001ffa0
c0009d94:	e8 8e 6b 00 00       	call   c0010927 <KePanic(char const*)>
c0009d99:	83 c4 10             	add    esp,0x10
c0009d9c:	eb 95                	jmp    c0009d33 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009d9e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009da2:	e8 0c e0 ff ff       	call   c0007db3 <Phys::allocatePage()>
c0009da7:	83 ec 0c             	sub    esp,0xc
c0009daa:	89 c5                	mov    ebp,eax
c0009dac:	8b 0d b0 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fb0
c0009db2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009db6:	6a 01                	push   0x1
c0009db8:	e8 60 f8 ff ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c0009dbd:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009dc4:	6a 01                	push   0x1
c0009dc6:	50                   	push   eax
c0009dc7:	55                   	push   ebp
c0009dc8:	81 cd 07 04 00 00    	or     ebp,0x407
c0009dce:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009dd2:	51                   	push   ecx
c0009dd3:	e8 40 02 00 00       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009dd8:	83 c4 1c             	add    esp,0x1c
c0009ddb:	68 00 10 00 00       	push   0x1000
c0009de0:	6a 00                	push   0x0
c0009de2:	50                   	push   eax
c0009de3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009de7:	e8 04 67 ff ff       	call   c00004f0 <memset>
c0009dec:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009df0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009df3:	e8 41 fb ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c0009df8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009dfc:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009dff:	83 c4 10             	add    esp,0x10
c0009e02:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009e05:	e9 3e ff ff ff       	jmp    c0009d48 <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c0009e0a <VAS::allocatePages(int, int)>:
c0009e0a:	55                   	push   ebp
c0009e0b:	57                   	push   edi
c0009e0c:	56                   	push   esi
c0009e0d:	53                   	push   ebx
c0009e0e:	83 ec 1c             	sub    esp,0x1c
c0009e11:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009e15:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009e1a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009e20:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009e26:	83 e0 01             	and    eax,0x1
c0009e29:	80 7d 01 00          	cmp    BYTE PTR [ebp+0x1],0x0
c0009e2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e31:	89 c7                	mov    edi,eax
c0009e33:	0f 85 d6 00 00 00    	jne    c0009f0f <VAS::allocatePages(int, int)+0x105>
c0009e39:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0009e3c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e40:	85 c0                	test   eax,eax
c0009e42:	0f 84 ab 00 00 00    	je     c0009ef3 <VAS::allocatePages(int, int)+0xe9>
c0009e48:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009e4c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009e50:	c1 e6 0c             	shl    esi,0xc
c0009e53:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009e57:	01 de                	add    esi,ebx
c0009e59:	85 c0                	test   eax,eax
c0009e5b:	89 75 04             	mov    DWORD PTR [ebp+0x4],esi
c0009e5e:	7e 3a                	jle    c0009e9a <VAS::allocatePages(int, int)+0x90>
c0009e60:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009e64:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009e68:	80 cc 04             	or     ah,0x4
c0009e6b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009e6f:	89 f8                	mov    eax,edi
c0009e71:	0f b6 f8             	movzx  edi,al
c0009e74:	e8 3a df ff ff       	call   c0007db3 <Phys::allocatePage()>
c0009e79:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009e7d:	52                   	push   edx
c0009e7e:	53                   	push   ebx
c0009e7f:	50                   	push   eax
c0009e80:	55                   	push   ebp
c0009e81:	e8 7e fe ff ff       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e86:	83 c4 10             	add    esp,0x10
c0009e89:	85 ff                	test   edi,edi
c0009e8b:	74 03                	je     c0009e90 <VAS::allocatePages(int, int)+0x86>
c0009e8d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009e90:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e96:	39 de                	cmp    esi,ebx
c0009e98:	75 da                	jne    c0009e74 <VAS::allocatePages(int, int)+0x6a>
c0009e9a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009e9e:	85 c9                	test   ecx,ecx
c0009ea0:	75 12                	jne    c0009eb4 <VAS::allocatePages(int, int)+0xaa>
c0009ea2:	0f 20 d8             	mov    eax,cr3
c0009ea5:	0f 22 d8             	mov    cr3,eax
c0009ea8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009eac:	83 c4 1c             	add    esp,0x1c
c0009eaf:	5b                   	pop    ebx
c0009eb0:	5e                   	pop    esi
c0009eb1:	5f                   	pop    edi
c0009eb2:	5d                   	pop    ebp
c0009eb3:	c3                   	ret    
c0009eb4:	c1 ee 0a             	shr    esi,0xa
c0009eb7:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009ebb:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009ec1:	c1 eb 0a             	shr    ebx,0xa
c0009ec4:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009eca:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009ed0:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009ed6:	39 c3                	cmp    ebx,eax
c0009ed8:	77 ce                	ja     c0009ea8 <VAS::allocatePages(int, int)+0x9e>
c0009eda:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009edd:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ee3:	39 d8                	cmp    eax,ebx
c0009ee5:	73 f3                	jae    c0009eda <VAS::allocatePages(int, int)+0xd0>
c0009ee7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009eeb:	83 c4 1c             	add    esp,0x1c
c0009eee:	5b                   	pop    ebx
c0009eef:	5e                   	pop    esi
c0009ef0:	5f                   	pop    edi
c0009ef1:	5d                   	pop    ebp
c0009ef2:	c3                   	ret    
c0009ef3:	83 ec 0c             	sub    esp,0xc
c0009ef6:	68 c4 ff 01 c0       	push   0xc001ffc4
c0009efb:	e8 27 6a 00 00       	call   c0010927 <KePanic(char const*)>
c0009f00:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0009f03:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f07:	83 c4 10             	add    esp,0x10
c0009f0a:	e9 39 ff ff ff       	jmp    c0009e48 <VAS::allocatePages(int, int)+0x3e>
c0009f0f:	83 ec 0c             	sub    esp,0xc
c0009f12:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009f16:	50                   	push   eax
c0009f17:	e8 01 f7 ff ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c0009f1c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f20:	83 c4 10             	add    esp,0x10
c0009f23:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009f28:	0f 87 a4 00 00 00    	ja     c0009fd2 <VAS::allocatePages(int, int)+0x1c8>
c0009f2e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f32:	85 c0                	test   eax,eax
c0009f34:	7e 44                	jle    c0009f7a <VAS::allocatePages(int, int)+0x170>
c0009f36:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009f3a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f3e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f42:	c1 e0 0c             	shl    eax,0xc
c0009f45:	81 ce 00 04 00 00    	or     esi,0x400
c0009f4b:	01 d8                	add    eax,ebx
c0009f4d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f51:	89 f8                	mov    eax,edi
c0009f53:	0f b6 f8             	movzx  edi,al
c0009f56:	e8 58 de ff ff       	call   c0007db3 <Phys::allocatePage()>
c0009f5b:	56                   	push   esi
c0009f5c:	53                   	push   ebx
c0009f5d:	50                   	push   eax
c0009f5e:	55                   	push   ebp
c0009f5f:	e8 a0 fd ff ff       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f64:	83 c4 10             	add    esp,0x10
c0009f67:	85 ff                	test   edi,edi
c0009f69:	74 03                	je     c0009f6e <VAS::allocatePages(int, int)+0x164>
c0009f6b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009f6e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f74:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0009f78:	75 dc                	jne    c0009f56 <VAS::allocatePages(int, int)+0x14c>
c0009f7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009f7e:	85 c0                	test   eax,eax
c0009f80:	0f 84 1c ff ff ff    	je     c0009ea2 <VAS::allocatePages(int, int)+0x98>
c0009f86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009f8a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f8e:	89 d3                	mov    ebx,edx
c0009f90:	c1 e0 0c             	shl    eax,0xc
c0009f93:	c1 eb 0a             	shr    ebx,0xa
c0009f96:	01 d0                	add    eax,edx
c0009f98:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009f9e:	c1 e8 0a             	shr    eax,0xa
c0009fa1:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009fa7:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009fac:	2d 00 00 40 00       	sub    eax,0x400000
c0009fb1:	39 c3                	cmp    ebx,eax
c0009fb3:	0f 87 ef fe ff ff    	ja     c0009ea8 <VAS::allocatePages(int, int)+0x9e>
c0009fb9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009fbc:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009fc2:	39 d8                	cmp    eax,ebx
c0009fc4:	73 f3                	jae    c0009fb9 <VAS::allocatePages(int, int)+0x1af>
c0009fc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009fca:	83 c4 1c             	add    esp,0x1c
c0009fcd:	5b                   	pop    ebx
c0009fce:	5e                   	pop    esi
c0009fcf:	5f                   	pop    edi
c0009fd0:	5d                   	pop    ebp
c0009fd1:	c3                   	ret    
c0009fd2:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009fd7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fdd:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009fe4:	0f 84 44 ff ff ff    	je     c0009f2e <VAS::allocatePages(int, int)+0x124>
c0009fea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009fee:	80 cc 01             	or     ah,0x1
c0009ff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009ff5:	e9 34 ff ff ff       	jmp    c0009f2e <VAS::allocatePages(int, int)+0x124>

c0009ffa <VAS::setCPUSpecific(unsigned long)>:
c0009ffa:	83 ec 0c             	sub    esp,0xc
c0009ffd:	6a 05                	push   0x5
c0009fff:	68 00 00 40 c2       	push   0xc2400000
c000a004:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a008:	50                   	push   eax
c000a009:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a00d:	52                   	push   edx
c000a00e:	e8 f1 fc ff ff       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a013:	83 c4 1c             	add    esp,0x1c
c000a016:	c3                   	ret    
c000a017:	90                   	nop

c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000a018:	55                   	push   ebp
c000a019:	57                   	push   edi
c000a01a:	56                   	push   esi
c000a01b:	53                   	push   ebx
c000a01c:	83 ec 1c             	sub    esp,0x1c
c000a01f:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a024:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a028:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a02e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000a032:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000a038:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000a03c:	83 e0 01             	and    eax,0x1
c000a03f:	85 db                	test   ebx,ebx
c000a041:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a045:	7e 43                	jle    c000a08a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x72>
c000a047:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a04b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a04f:	c1 e2 0c             	shl    edx,0xc
c000a052:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000a056:	01 ca                	add    edx,ecx
c000a058:	0f b6 f0             	movzx  esi,al
c000a05b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a05f:	55                   	push   ebp
c000a060:	53                   	push   ebx
c000a061:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a065:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000a069:	29 d0                	sub    eax,edx
c000a06b:	01 d8                	add    eax,ebx
c000a06d:	50                   	push   eax
c000a06e:	57                   	push   edi
c000a06f:	e8 90 fc ff ff       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a074:	83 c4 10             	add    esp,0x10
c000a077:	85 f6                	test   esi,esi
c000a079:	74 03                	je     c000a07e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c000a07b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a07e:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a084:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c000a088:	75 d5                	jne    c000a05f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c000a08a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a08e:	85 c9                	test   ecx,ecx
c000a090:	75 12                	jne    c000a0a4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x8c>
c000a092:	0f 20 d8             	mov    eax,cr3
c000a095:	0f 22 d8             	mov    cr3,eax
c000a098:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a09c:	83 c4 1c             	add    esp,0x1c
c000a09f:	5b                   	pop    ebx
c000a0a0:	5e                   	pop    esi
c000a0a1:	5f                   	pop    edi
c000a0a2:	5d                   	pop    ebp
c000a0a3:	c3                   	ret    
c000a0a4:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000a0a8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a0ac:	c1 eb 0a             	shr    ebx,0xa
c000a0af:	c1 e0 0c             	shl    eax,0xc
c000a0b2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a0b8:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a0bc:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a0c2:	01 d0                	add    eax,edx
c000a0c4:	c1 e8 0a             	shr    eax,0xa
c000a0c7:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a0cc:	2d 00 00 40 00       	sub    eax,0x400000
c000a0d1:	39 c3                	cmp    ebx,eax
c000a0d3:	77 c3                	ja     c000a098 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x80>
c000a0d5:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a0d8:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a0de:	39 d8                	cmp    eax,ebx
c000a0e0:	73 f3                	jae    c000a0d5 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xbd>
c000a0e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a0e6:	83 c4 1c             	add    esp,0x1c
c000a0e9:	5b                   	pop    ebx
c000a0ea:	5e                   	pop    esi
c000a0eb:	5f                   	pop    edi
c000a0ec:	5d                   	pop    ebp
c000a0ed:	c3                   	ret    

c000a0ee <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000a0ee:	55                   	push   ebp
c000a0ef:	57                   	push   edi
c000a0f0:	56                   	push   esi
c000a0f1:	53                   	push   ebx
c000a0f2:	83 ec 1c             	sub    esp,0x1c
c000a0f5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a0f9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a0fd:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a101:	09 f8                	or     eax,edi
c000a103:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a107:	a9 ff 0f 00 00       	test   eax,0xfff
c000a10c:	75 4f                	jne    c000a15d <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c000a10e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000a112:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a115:	c1 eb 16             	shr    ebx,0x16
c000a118:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c000a11f:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c000a123:	74 52                	je     c000a177 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c000a125:	0f b6 f2             	movzx  esi,dl
c000a128:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a12c:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000a130:	c1 e8 0a             	shr    eax,0xa
c000a133:	83 fe 01             	cmp    esi,0x1
c000a136:	19 d2                	sbb    edx,edx
c000a138:	c1 e3 0c             	shl    ebx,0xc
c000a13b:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000a141:	25 fc 0f 00 00       	and    eax,0xffc
c000a146:	01 d8                	add    eax,ebx
c000a148:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a14c:	09 d9                	or     ecx,ebx
c000a14e:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000a155:	83 c4 1c             	add    esp,0x1c
c000a158:	5b                   	pop    ebx
c000a159:	5e                   	pop    esi
c000a15a:	5f                   	pop    edi
c000a15b:	5d                   	pop    ebp
c000a15c:	c3                   	ret    
c000a15d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a161:	83 ec 0c             	sub    esp,0xc
c000a164:	68 f0 ff 01 c0       	push   0xc001fff0
c000a169:	e8 b9 67 00 00       	call   c0010927 <KePanic(char const*)>
c000a16e:	83 c4 10             	add    esp,0x10
c000a171:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a175:	eb 97                	jmp    c000a10e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c000a177:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a17b:	e8 33 dc ff ff       	call   c0007db3 <Phys::allocatePage()>
c000a180:	83 ec 0c             	sub    esp,0xc
c000a183:	89 c5                	mov    ebp,eax
c000a185:	8b 0d b0 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fb0
c000a18b:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a18f:	6a 01                	push   0x1
c000a191:	e8 87 f4 ff ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c000a196:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a19d:	6a 01                	push   0x1
c000a19f:	50                   	push   eax
c000a1a0:	55                   	push   ebp
c000a1a1:	81 cd 07 04 00 00    	or     ebp,0x407
c000a1a7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a1ab:	51                   	push   ecx
c000a1ac:	e8 67 fe ff ff       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a1b1:	83 c4 1c             	add    esp,0x1c
c000a1b4:	68 00 10 00 00       	push   0x1000
c000a1b9:	6a 00                	push   0x0
c000a1bb:	50                   	push   eax
c000a1bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1c0:	e8 2b 63 ff ff       	call   c00004f0 <memset>
c000a1c5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a1c9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a1cc:	e8 68 f7 ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c000a1d1:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a1d4:	83 c4 10             	add    esp,0x10
c000a1d7:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c000a1da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a1de:	e9 42 ff ff ff       	jmp    c000a125 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000a1e3:	90                   	nop

c000a1e4 <VAS::VAS(bool)>:
c000a1e4:	53                   	push   ebx
c000a1e5:	83 ec 28             	sub    esp,0x28
c000a1e8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a1ec:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a1f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1f4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a1fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1ff:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a206:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a20a:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a20e:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a211:	e8 9d db ff ff       	call   c0007db3 <Phys::allocatePage()>
c000a216:	89 c2                	mov    edx,eax
c000a218:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a21c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a21f:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000a225:	83 ec 0c             	sub    esp,0xc
c000a228:	6a 01                	push   0x1
c000a22a:	e8 ee f3 ff ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c000a22f:	83 c4 10             	add    esp,0x10
c000a232:	89 c2                	mov    edx,eax
c000a234:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a238:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a23b:	83 ec 0c             	sub    esp,0xc
c000a23e:	6a 03                	push   0x3
c000a240:	6a 01                	push   0x1
c000a242:	52                   	push   edx
c000a243:	50                   	push   eax
c000a244:	53                   	push   ebx
c000a245:	e8 ce fd ff ff       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a24a:	83 c4 20             	add    esp,0x20
c000a24d:	89 c2                	mov    edx,eax
c000a24f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a253:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a256:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a25e:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a266:	7f 1d                	jg     c000a285 <VAS::VAS(bool)+0xa1>
c000a268:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a26c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a26f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a273:	c1 e2 02             	shl    edx,0x2
c000a276:	01 d0                	add    eax,edx
c000a278:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a27e:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a283:	eb d9                	jmp    c000a25e <VAS::VAS(bool)+0x7a>
c000a285:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a28d:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a295:	7f 7e                	jg     c000a315 <VAS::VAS(bool)+0x131>
c000a297:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a29b:	2d 00 02 00 00       	sub    eax,0x200
c000a2a0:	c1 e0 0c             	shl    eax,0xc
c000a2a3:	83 c8 05             	or     eax,0x5
c000a2a6:	89 c2                	mov    edx,eax
c000a2a8:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a2ad:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a2b3:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a2b9:	83 e0 10             	and    eax,0x10
c000a2bc:	0f b6 c0             	movzx  eax,al
c000a2bf:	85 c0                	test   eax,eax
c000a2c1:	74 07                	je     c000a2ca <VAS::VAS(bool)+0xe6>
c000a2c3:	b8 00 01 00 00       	mov    eax,0x100
c000a2c8:	eb 05                	jmp    c000a2cf <VAS::VAS(bool)+0xeb>
c000a2ca:	b8 00 00 00 00       	mov    eax,0x0
c000a2cf:	09 d0                	or     eax,edx
c000a2d1:	89 c1                	mov    ecx,eax
c000a2d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2d7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a2da:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a2de:	c1 e2 02             	shl    edx,0x2
c000a2e1:	01 d0                	add    eax,edx
c000a2e3:	89 ca                	mov    edx,ecx
c000a2e5:	89 10                	mov    DWORD PTR [eax],edx
c000a2e7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a2eb:	2d 40 03 00 00       	sub    eax,0x340
c000a2f0:	83 f8 7f             	cmp    eax,0x7f
c000a2f3:	77 16                	ja     c000a30b <VAS::VAS(bool)+0x127>
c000a2f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2f9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a2fc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a300:	c1 e2 02             	shl    edx,0x2
c000a303:	01 d0                	add    eax,edx
c000a305:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a30b:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a310:	e9 78 ff ff ff       	jmp    c000a28d <VAS::VAS(bool)+0xa9>
c000a315:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a31a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a320:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a326:	83 e0 10             	and    eax,0x10
c000a329:	0f b6 c0             	movzx  eax,al
c000a32c:	85 c0                	test   eax,eax
c000a32e:	74 07                	je     c000a337 <VAS::VAS(bool)+0x153>
c000a330:	b8 03 41 00 00       	mov    eax,0x4103
c000a335:	eb 05                	jmp    c000a33c <VAS::VAS(bool)+0x158>
c000a337:	b8 03 40 00 00       	mov    eax,0x4003
c000a33c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a340:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a343:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a349:	89 02                	mov    DWORD PTR [edx],eax
c000a34b:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a350:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a356:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a35c:	83 ec 08             	sub    esp,0x8
c000a35f:	50                   	push   eax
c000a360:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a364:	e8 91 fc ff ff       	call   c0009ffa <VAS::setCPUSpecific(unsigned long)>
c000a369:	83 c4 10             	add    esp,0x10
c000a36c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a370:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a373:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a378:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a37e:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a384:	83 e0 10             	and    eax,0x10
c000a387:	0f b6 c0             	movzx  eax,al
c000a38a:	85 c0                	test   eax,eax
c000a38c:	74 07                	je     c000a395 <VAS::VAS(bool)+0x1b1>
c000a38e:	b8 00 01 00 00       	mov    eax,0x100
c000a393:	eb 05                	jmp    c000a39a <VAS::VAS(bool)+0x1b6>
c000a395:	b8 00 00 00 00       	mov    eax,0x0
c000a39a:	09 c2                	or     edx,eax
c000a39c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a3a0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a3a3:	05 fc 0f 00 00       	add    eax,0xffc
c000a3a8:	83 ca 03             	or     edx,0x3
c000a3ab:	89 10                	mov    DWORD PTR [eax],edx
c000a3ad:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a3b2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a3b8:	83 ec 0c             	sub    esp,0xc
c000a3bb:	50                   	push   eax
c000a3bc:	e8 01 1d 00 00       	call   c000c0c2 <Device::getName()>
c000a3c1:	83 c4 10             	add    esp,0x10
c000a3c4:	83 ec 08             	sub    esp,0x8
c000a3c7:	68 c4 00 02 c0       	push   0xc00200c4
c000a3cc:	50                   	push   eax
c000a3cd:	e8 7e 63 ff ff       	call   c0000750 <strcmp>
c000a3d2:	83 c4 10             	add    esp,0x10
c000a3d5:	85 c0                	test   eax,eax
c000a3d7:	0f 94 c0             	sete   al
c000a3da:	0f b6 c0             	movzx  eax,al
c000a3dd:	85 c0                	test   eax,eax
c000a3df:	0f 84 8b 00 00 00    	je     c000a470 <VAS::VAS(bool)+0x28c>
c000a3e5:	fa                   	cli    
c000a3e6:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a3eb:	83 c0 01             	add    eax,0x1
c000a3ee:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a3f3:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a3f8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a3fe:	05 7c 09 00 00       	add    eax,0x97c
c000a403:	83 ec 0c             	sub    esp,0xc
c000a406:	50                   	push   eax
c000a407:	e8 9a d1 ff ff       	call   c00075a6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a40c:	83 c4 10             	add    esp,0x10
c000a40f:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a414:	89 c3                	mov    ebx,eax
c000a416:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a41b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a421:	05 7c 09 00 00       	add    eax,0x97c
c000a426:	83 ec 0c             	sub    esp,0xc
c000a429:	50                   	push   eax
c000a42a:	e8 77 d1 ff ff       	call   c00075a6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a42f:	83 c4 10             	add    esp,0x10
c000a432:	83 ec 08             	sub    esp,0x8
c000a435:	50                   	push   eax
c000a436:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a43a:	e8 db f4 ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c000a43f:	83 c4 10             	add    esp,0x10
c000a442:	8b 00                	mov    eax,DWORD PTR [eax]
c000a444:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a449:	6a 11                	push   0x11
c000a44b:	53                   	push   ebx
c000a44c:	50                   	push   eax
c000a44d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a451:	e8 ae f8 ff ff       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a456:	83 c4 10             	add    esp,0x10
c000a459:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a45e:	83 e8 01             	sub    eax,0x1
c000a461:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a466:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a46b:	85 c0                	test   eax,eax
c000a46d:	75 01                	jne    c000a470 <VAS::VAS(bool)+0x28c>
c000a46f:	fb                   	sti    
c000a470:	90                   	nop
c000a471:	83 c4 28             	add    esp,0x28
c000a474:	5b                   	pop    ebx
c000a475:	c3                   	ret    

c000a476 <VAS::evict(unsigned long)>:
c000a476:	55                   	push   ebp
c000a477:	57                   	push   edi
c000a478:	56                   	push   esi
c000a479:	53                   	push   ebx
c000a47a:	83 ec 1c             	sub    esp,0x1c
c000a47d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a481:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a485:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a489:	e8 ed f2 ff ff       	call   c000977b <Virt::allocateSwapfilePage()>
c000a48e:	89 c7                	mov    edi,eax
c000a490:	a1 cc 1f 02 c0       	mov    eax,ds:0xc0021fcc
c000a495:	85 c0                	test   eax,eax
c000a497:	7e 40                	jle    c000a4d9 <VAS::evict(unsigned long)+0x63>
c000a499:	89 ee                	mov    esi,ebp
c000a49b:	31 db                	xor    ebx,ebx
c000a49d:	83 ec 0c             	sub    esp,0xc
c000a4a0:	57                   	push   edi
c000a4a1:	e8 bf f2 ff ff       	call   c0009765 <Virt::swapIDToSector(unsigned long)>
c000a4a6:	89 34 24             	mov    DWORD PTR [esp],esi
c000a4a9:	01 d8                	add    eax,ebx
c000a4ab:	6a 01                	push   0x1
c000a4ad:	31 d2                	xor    edx,edx
c000a4af:	83 c3 01             	add    ebx,0x1
c000a4b2:	52                   	push   edx
c000a4b3:	81 c6 00 02 00 00    	add    esi,0x200
c000a4b9:	50                   	push   eax
c000a4ba:	0f be 05 d8 1f 02 c0 	movsx  eax,BYTE PTR ds:0xc0021fd8
c000a4c1:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c000a4c8:	50                   	push   eax
c000a4c9:	e8 ae 2d 00 00       	call   c000d27c <LogicalDisk::write(unsigned long long, int, void*)>
c000a4ce:	83 c4 20             	add    esp,0x20
c000a4d1:	39 1d cc 1f 02 c0    	cmp    DWORD PTR ds:0xc0021fcc,ebx
c000a4d7:	7f c4                	jg     c000a49d <VAS::evict(unsigned long)+0x27>
c000a4d9:	83 ec 08             	sub    esp,0x8
c000a4dc:	c1 e7 0b             	shl    edi,0xb
c000a4df:	55                   	push   ebp
c000a4e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a4e4:	50                   	push   eax
c000a4e5:	e8 30 f4 ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c000a4ea:	8b 10                	mov    edx,DWORD PTR [eax]
c000a4ec:	89 d3                	mov    ebx,edx
c000a4ee:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a4f4:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a4fa:	09 d7                	or     edi,edx
c000a4fc:	89 38                	mov    DWORD PTR [eax],edi
c000a4fe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a501:	8b 15 a8 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fa8
c000a507:	83 c2 01             	add    edx,0x1
c000a50a:	89 15 a8 4f 02 c0    	mov    DWORD PTR ds:0xc0024fa8,edx
c000a510:	e8 35 d8 ff ff       	call   c0007d4a <Phys::freePage(unsigned long)>
c000a515:	0f 20 d8             	mov    eax,cr3
c000a518:	0f 22 d8             	mov    cr3,eax
c000a51b:	8b 0d a8 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fa8
c000a521:	51                   	push   ecx
c000a522:	55                   	push   ebp
c000a523:	53                   	push   ebx
c000a524:	68 14 00 02 c0       	push   0xc0020014
c000a529:	e8 c9 04 00 00       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c000a52e:	a1 a4 4f 02 c0       	mov    eax,ds:0xc0024fa4
c000a533:	c7 44 24 50 d2 00 02 c0 	mov    DWORD PTR [esp+0x50],0xc00200d2
c000a53b:	8d 50 01             	lea    edx,[eax+0x1]
c000a53e:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a542:	89 15 a4 4f 02 c0    	mov    DWORD PTR ds:0xc0024fa4,edx
c000a548:	83 c4 3c             	add    esp,0x3c
c000a54b:	5b                   	pop    ebx
c000a54c:	5e                   	pop    esi
c000a54d:	5f                   	pop    edi
c000a54e:	5d                   	pop    ebp
c000a54f:	e9 a3 04 00 00       	jmp    c000a9f7 <Dbg::kprintf(char const*, ...)>

c000a554 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a554:	55                   	push   ebp
c000a555:	57                   	push   edi
c000a556:	56                   	push   esi
c000a557:	53                   	push   ebx
c000a558:	83 ec 0c             	sub    esp,0xc
c000a55b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a55f:	89 de                	mov    esi,ebx
c000a561:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000a567:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c000a56d:	77 1f                	ja     c000a58e <VAS::tryLoadBackOffDisk(unsigned long)+0x3a>
c000a56f:	83 ec 08             	sub    esp,0x8
c000a572:	53                   	push   ebx
c000a573:	68 f5 00 02 c0       	push   0xc00200f5
c000a578:	e8 7a 04 00 00       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c000a57d:	83 c4 10             	add    esp,0x10
c000a580:	85 f6                	test   esi,esi
c000a582:	75 27                	jne    c000a5ab <VAS::tryLoadBackOffDisk(unsigned long)+0x57>
c000a584:	31 c0                	xor    eax,eax
c000a586:	83 c4 0c             	add    esp,0xc
c000a589:	5b                   	pop    ebx
c000a58a:	5e                   	pop    esi
c000a58b:	5f                   	pop    edi
c000a58c:	5d                   	pop    ebp
c000a58d:	c3                   	ret    
c000a58e:	83 ec 0c             	sub    esp,0xc
c000a591:	68 e3 00 02 c0       	push   0xc00200e3
c000a596:	e8 8c 63 00 00       	call   c0010927 <KePanic(char const*)>
c000a59b:	5f                   	pop    edi
c000a59c:	5d                   	pop    ebp
c000a59d:	53                   	push   ebx
c000a59e:	68 f5 00 02 c0       	push   0xc00200f5
c000a5a3:	e8 4f 04 00 00       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c000a5a8:	83 c4 10             	add    esp,0x10
c000a5ab:	83 ec 08             	sub    esp,0x8
c000a5ae:	56                   	push   esi
c000a5af:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000a5b3:	51                   	push   ecx
c000a5b4:	e8 61 f3 ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c000a5b9:	83 c4 10             	add    esp,0x10
c000a5bc:	89 c3                	mov    ebx,eax
c000a5be:	85 c0                	test   eax,eax
c000a5c0:	74 c2                	je     c000a584 <VAS::tryLoadBackOffDisk(unsigned long)+0x30>
c000a5c2:	8b 38                	mov    edi,DWORD PTR [eax]
c000a5c4:	89 f8                	mov    eax,edi
c000a5c6:	25 01 04 00 00       	and    eax,0x401
c000a5cb:	3d 00 04 00 00       	cmp    eax,0x400
c000a5d0:	75 b2                	jne    c000a584 <VAS::tryLoadBackOffDisk(unsigned long)+0x30>
c000a5d2:	e8 dc d7 ff ff       	call   c0007db3 <Phys::allocatePage()>
c000a5d7:	c1 ef 0b             	shr    edi,0xb
c000a5da:	8b 13                	mov    edx,DWORD PTR [ebx]
c000a5dc:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a5e2:	09 c2                	or     edx,eax
c000a5e4:	81 ca 01 08 00 00    	or     edx,0x801
c000a5ea:	89 13                	mov    DWORD PTR [ebx],edx
c000a5ec:	8b 15 cc 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021fcc
c000a5f2:	85 d2                	test   edx,edx
c000a5f4:	7e 40                	jle    c000a636 <VAS::tryLoadBackOffDisk(unsigned long)+0xe2>
c000a5f6:	89 f5                	mov    ebp,esi
c000a5f8:	31 db                	xor    ebx,ebx
c000a5fa:	83 ec 0c             	sub    esp,0xc
c000a5fd:	57                   	push   edi
c000a5fe:	e8 62 f1 ff ff       	call   c0009765 <Virt::swapIDToSector(unsigned long)>
c000a603:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a606:	01 d8                	add    eax,ebx
c000a608:	6a 01                	push   0x1
c000a60a:	31 d2                	xor    edx,edx
c000a60c:	83 c3 01             	add    ebx,0x1
c000a60f:	52                   	push   edx
c000a610:	81 c5 00 02 00 00    	add    ebp,0x200
c000a616:	50                   	push   eax
c000a617:	0f be 05 d8 1f 02 c0 	movsx  eax,BYTE PTR ds:0xc0021fd8
c000a61e:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c000a625:	50                   	push   eax
c000a626:	e8 e5 2b 00 00       	call   c000d210 <LogicalDisk::read(unsigned long long, int, void*)>
c000a62b:	83 c4 20             	add    esp,0x20
c000a62e:	39 1d cc 1f 02 c0    	cmp    DWORD PTR ds:0xc0021fcc,ebx
c000a634:	7f c4                	jg     c000a5fa <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c000a636:	83 ec 04             	sub    esp,0x4
c000a639:	a1 a8 4f 02 c0       	mov    eax,ds:0xc0024fa8
c000a63e:	83 e8 01             	sub    eax,0x1
c000a641:	50                   	push   eax
c000a642:	a3 a8 4f 02 c0       	mov    ds:0xc0024fa8,eax
c000a647:	56                   	push   esi
c000a648:	68 08 01 02 c0       	push   0xc0020108
c000a64d:	e8 a5 03 00 00       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c000a652:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a655:	e8 e8 f0 ff ff       	call   c0009742 <Virt::freeSwapfilePage(unsigned long)>
c000a65a:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a65f:	83 c4 10             	add    esp,0x10
c000a662:	83 e8 01             	sub    eax,0x1
c000a665:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a66a:	85 c0                	test   eax,eax
c000a66c:	75 01                	jne    c000a66f <VAS::tryLoadBackOffDisk(unsigned long)+0x11b>
c000a66e:	fb                   	sti    
c000a66f:	0f 20 d8             	mov    eax,cr3
c000a672:	0f 22 d8             	mov    cr3,eax
c000a675:	b0 01                	mov    al,0x1
c000a677:	e9 0a ff ff ff       	jmp    c000a586 <VAS::tryLoadBackOffDisk(unsigned long)+0x32>

c000a67c <VAS::scanForEviction()>:
c000a67c:	57                   	push   edi
c000a67d:	56                   	push   esi
c000a67e:	31 f6                	xor    esi,esi
c000a680:	53                   	push   ebx
c000a681:	83 ec 10             	sub    esp,0x10
c000a684:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a688:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a68b:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a691:	75 0e                	jne    c000a6a1 <VAS::scanForEviction()+0x25>
c000a693:	89 da                	mov    edx,ebx
c000a695:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a698:	c1 ea 16             	shr    edx,0x16
c000a69b:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a69f:	74 57                	je     c000a6f8 <VAS::scanForEviction()+0x7c>
c000a6a1:	53                   	push   ebx
c000a6a2:	57                   	push   edi
c000a6a3:	e8 72 f2 ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c000a6a8:	5a                   	pop    edx
c000a6a9:	8b 10                	mov    edx,DWORD PTR [eax]
c000a6ab:	59                   	pop    ecx
c000a6ac:	89 d1                	mov    ecx,edx
c000a6ae:	c1 e9 0c             	shr    ecx,0xc
c000a6b1:	74 10                	je     c000a6c3 <VAS::scanForEviction()+0x47>
c000a6b3:	89 d1                	mov    ecx,edx
c000a6b5:	81 e1 01 08 00 00    	and    ecx,0x801
c000a6bb:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a6c1:	74 40                	je     c000a703 <VAS::scanForEviction()+0x87>
c000a6c3:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a6c9:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a6cf:	76 2d                	jbe    c000a6fe <VAS::scanForEviction()+0x82>
c000a6d1:	83 c6 01             	add    esi,0x1
c000a6d4:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a6db:	83 fe 03             	cmp    esi,0x3
c000a6de:	74 32                	je     c000a712 <VAS::scanForEviction()+0x96>
c000a6e0:	31 db                	xor    ebx,ebx
c000a6e2:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a6e8:	75 b7                	jne    c000a6a1 <VAS::scanForEviction()+0x25>
c000a6ea:	89 da                	mov    edx,ebx
c000a6ec:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a6ef:	c1 ea 16             	shr    edx,0x16
c000a6f2:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a6f6:	75 a9                	jne    c000a6a1 <VAS::scanForEviction()+0x25>
c000a6f8:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a6fe:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a701:	eb 88                	jmp    c000a68b <VAS::scanForEviction()+0xf>
c000a703:	f6 c2 20             	test   dl,0x20
c000a706:	74 13                	je     c000a71b <VAS::scanForEviction()+0x9f>
c000a708:	83 e2 df             	and    edx,0xffffffdf
c000a70b:	89 10                	mov    DWORD PTR [eax],edx
c000a70d:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a710:	eb b1                	jmp    c000a6c3 <VAS::scanForEviction()+0x47>
c000a712:	83 c4 10             	add    esp,0x10
c000a715:	31 c0                	xor    eax,eax
c000a717:	5b                   	pop    ebx
c000a718:	5e                   	pop    esi
c000a719:	5f                   	pop    edi
c000a71a:	c3                   	ret    
c000a71b:	83 ec 08             	sub    esp,0x8
c000a71e:	89 d0                	mov    eax,edx
c000a720:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a725:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a729:	53                   	push   ebx
c000a72a:	68 1d 01 02 c0       	push   0xc002011d
c000a72f:	e8 c3 02 00 00       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c000a734:	58                   	pop    eax
c000a735:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a738:	5a                   	pop    edx
c000a739:	51                   	push   ecx
c000a73a:	57                   	push   edi
c000a73b:	e8 36 fd ff ff       	call   c000a476 <VAS::evict(unsigned long)>
c000a740:	5b                   	pop    ebx
c000a741:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a744:	5e                   	pop    esi
c000a745:	50                   	push   eax
c000a746:	68 31 01 02 c0       	push   0xc0020131
c000a74b:	e8 a7 02 00 00       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c000a750:	58                   	pop    eax
c000a751:	5a                   	pop    edx
c000a752:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a756:	50                   	push   eax
c000a757:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a75b:	68 44 01 02 c0       	push   0xc0020144
c000a760:	e8 92 02 00 00       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c000a765:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a768:	83 c4 10             	add    esp,0x10
c000a76b:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a771:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a775:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a778:	83 c4 10             	add    esp,0x10
c000a77b:	5b                   	pop    ebx
c000a77c:	5e                   	pop    esi
c000a77d:	5f                   	pop    edi
c000a77e:	c3                   	ret    

c000a77f <mapVASFirstTime>:
c000a77f:	55                   	push   ebp
c000a780:	57                   	push   edi
c000a781:	56                   	push   esi
c000a782:	53                   	push   ebx
c000a783:	83 ec 0c             	sub    esp,0xc
c000a786:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a78b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a78e:	83 fa 01             	cmp    edx,0x1
c000a791:	0f 84 cb 00 00 00    	je     c000a862 <mapVASFirstTime+0xe3>
c000a797:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a79a:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a79d:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a7a2:	c1 e5 15             	shl    ebp,0x15
c000a7a5:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a7aa:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a7b0:	29 eb                	sub    ebx,ebp
c000a7b2:	29 ef                	sub    edi,ebp
c000a7b4:	e8 fa d5 ff ff       	call   c0007db3 <Phys::allocatePage()>
c000a7b9:	83 ec 0c             	sub    esp,0xc
c000a7bc:	68 03 04 00 00       	push   0x403
c000a7c1:	6a 01                	push   0x1
c000a7c3:	53                   	push   ebx
c000a7c4:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a7ca:	50                   	push   eax
c000a7cb:	56                   	push   esi
c000a7cc:	e8 47 f8 ff ff       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a7d1:	83 c4 20             	add    esp,0x20
c000a7d4:	39 fb                	cmp    ebx,edi
c000a7d6:	75 dc                	jne    c000a7b4 <mapVASFirstTime+0x35>
c000a7d8:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a7dd:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a7e2:	29 eb                	sub    ebx,ebp
c000a7e4:	29 ef                	sub    edi,ebp
c000a7e6:	e8 c8 d5 ff ff       	call   c0007db3 <Phys::allocatePage()>
c000a7eb:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a7ef:	83 fa 01             	cmp    edx,0x1
c000a7f2:	19 d2                	sbb    edx,edx
c000a7f4:	83 ec 0c             	sub    esp,0xc
c000a7f7:	83 e2 04             	and    edx,0x4
c000a7fa:	81 c2 03 04 00 00    	add    edx,0x403
c000a800:	52                   	push   edx
c000a801:	6a 01                	push   0x1
c000a803:	53                   	push   ebx
c000a804:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a80a:	50                   	push   eax
c000a80b:	56                   	push   esi
c000a80c:	e8 07 f8 ff ff       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a811:	83 c4 20             	add    esp,0x20
c000a814:	39 df                	cmp    edi,ebx
c000a816:	75 ce                	jne    c000a7e6 <mapVASFirstTime+0x67>
c000a818:	83 ec 0c             	sub    esp,0xc
c000a81b:	bb 7c 40 02 c0       	mov    ebx,0xc002407c
c000a820:	6a 04                	push   0x4
c000a822:	81 eb 00 30 02 c0    	sub    ebx,0xc0023000
c000a828:	6a ff                	push   0xffffffff
c000a82a:	c1 eb 0c             	shr    ebx,0xc
c000a82d:	53                   	push   ebx
c000a82e:	68 00 30 02 c0       	push   0xc0023000
c000a833:	56                   	push   esi
c000a834:	e8 51 f2 ff ff       	call   c0009a8a <VAS::reflagRange(unsigned long, int, int, int)>
c000a839:	83 c4 14             	add    esp,0x14
c000a83c:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c000a841:	6a 04                	push   0x4
c000a843:	6a ff                	push   0xffffffff
c000a845:	53                   	push   ebx
c000a846:	68 00 30 02 c0       	push   0xc0023000
c000a84b:	50                   	push   eax
c000a84c:	e8 39 f2 ff ff       	call   c0009a8a <VAS::reflagRange(unsigned long, int, int, int)>
c000a851:	0f 20 d8             	mov    eax,cr3
c000a854:	0f 22 d8             	mov    cr3,eax
c000a857:	83 c4 20             	add    esp,0x20
c000a85a:	83 c4 0c             	add    esp,0xc
c000a85d:	5b                   	pop    ebx
c000a85e:	5e                   	pop    esi
c000a85f:	5f                   	pop    edi
c000a860:	5d                   	pop    ebp
c000a861:	c3                   	ret    
c000a862:	83 ec 0c             	sub    esp,0xc
c000a865:	68 51 01 02 c0       	push   0xc0020151
c000a86a:	e8 88 01 00 00       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c000a86f:	83 c4 10             	add    esp,0x10
c000a872:	83 c4 0c             	add    esp,0xc
c000a875:	5b                   	pop    ebx
c000a876:	5e                   	pop    esi
c000a877:	5f                   	pop    edi
c000a878:	5d                   	pop    ebp
c000a879:	c3                   	ret    

c000a87a <__cxa_atexit>:
c000a87a:	31 c0                	xor    eax,eax
c000a87c:	c3                   	ret    

c000a87d <__cxa_finalize>:
c000a87d:	c3                   	ret    

c000a87e <__stack_chk_fail>:
c000a87e:	55                   	push   ebp
c000a87f:	89 e5                	mov    ebp,esp
c000a881:	83 ec 10             	sub    esp,0x10
c000a884:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a887:	68 6a 01 02 c0       	push   0xc002016a
c000a88c:	e8 66 01 00 00       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c000a891:	58                   	pop    eax
c000a892:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a895:	5a                   	pop    edx
c000a896:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a899:	68 6a 01 02 c0       	push   0xc002016a
c000a89e:	e8 54 01 00 00       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c000a8a3:	c7 04 24 72 01 02 c0 	mov    DWORD PTR [esp],0xc0020172
c000a8aa:	e8 78 60 00 00       	call   c0010927 <KePanic(char const*)>
c000a8af:	83 c4 10             	add    esp,0x10
c000a8b2:	c9                   	leave  
c000a8b3:	c3                   	ret    

c000a8b4 <__cxa_pure_virtual>:
c000a8b4:	83 ec 18             	sub    esp,0x18
c000a8b7:	68 8a 01 02 c0       	push   0xc002018a
c000a8bc:	e8 66 60 00 00       	call   c0010927 <KePanic(char const*)>
c000a8c1:	83 c4 1c             	add    esp,0x1c
c000a8c4:	c3                   	ret    

c000a8c5 <operator new[](unsigned long)>:
c000a8c5:	e9 e4 d1 ff ff       	jmp    c0007aae <malloc>

c000a8ca <operator delete(void*, unsigned long)>:
c000a8ca:	e9 ff d1 ff ff       	jmp    c0007ace <rfree>

c000a8cf <operator delete[](void*)>:
c000a8cf:	e9 fa d1 ff ff       	jmp    c0007ace <rfree>

c000a8d4 <operator delete[](void*, unsigned long)>:
c000a8d4:	e9 f5 d1 ff ff       	jmp    c0007ace <rfree>

c000a8d9 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a8d9:	55                   	push   ebp
c000a8da:	57                   	push   edi
c000a8db:	56                   	push   esi
c000a8dc:	be 8f fd 01 c0       	mov    esi,0xc001fd8f
c000a8e1:	53                   	push   ebx
c000a8e2:	83 ec 20             	sub    esp,0x20
c000a8e5:	a0 8e fd 01 c0       	mov    al,ds:0xc001fd8e
c000a8ea:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a8ee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000a8f2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a8f6:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a8fa:	b8 10 00 00 00       	mov    eax,0x10
c000a8ff:	f7 c7 02 00 00 00    	test   edi,0x2
c000a905:	75 60                	jne    c000a967 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c000a907:	89 c1                	mov    ecx,eax
c000a909:	c1 e9 02             	shr    ecx,0x2
c000a90c:	fc                   	cld    
c000a90d:	31 d2                	xor    edx,edx
c000a90f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a911:	a8 02                	test   al,0x2
c000a913:	74 0b                	je     c000a920 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c000a915:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a918:	66 89 17             	mov    WORD PTR [edi],dx
c000a91b:	ba 02 00 00 00       	mov    edx,0x2
c000a920:	a8 01                	test   al,0x1
c000a922:	74 06                	je     c000a92a <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c000a924:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000a927:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000a92a:	89 ee                	mov    esi,ebp
c000a92c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a930:	eb 02                	jmp    c000a934 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c000a932:	89 c6                	mov    esi,eax
c000a934:	31 d2                	xor    edx,edx
c000a936:	83 c1 01             	add    ecx,0x1
c000a939:	89 f0                	mov    eax,esi
c000a93b:	f7 f3                	div    ebx
c000a93d:	39 de                	cmp    esi,ebx
c000a93f:	73 f1                	jae    c000a932 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c000a941:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a944:	eb 02                	jmp    c000a948 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c000a946:	89 c5                	mov    ebp,eax
c000a948:	31 d2                	xor    edx,edx
c000a94a:	83 e9 01             	sub    ecx,0x1
c000a94d:	89 e8                	mov    eax,ebp
c000a94f:	f7 f3                	div    ebx
c000a951:	39 dd                	cmp    ebp,ebx
c000a953:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a957:	88 11                	mov    BYTE PTR [ecx],dl
c000a959:	73 eb                	jae    c000a946 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c000a95b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a95f:	83 c4 20             	add    esp,0x20
c000a962:	5b                   	pop    ebx
c000a963:	5e                   	pop    esi
c000a964:	5f                   	pop    edi
c000a965:	5d                   	pop    ebp
c000a966:	c3                   	ret    
c000a967:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a96a:	83 c7 02             	add    edi,0x2
c000a96d:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000a971:	83 c6 02             	add    esi,0x2
c000a974:	83 e8 02             	sub    eax,0x2
c000a977:	eb 8e                	jmp    c000a907 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c000a979 <Dbg::logc(char)>:
c000a979:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a97d:	f6 05 d0 4e 02 c0 10 	test   BYTE PTR ds:0xc0024ed0,0x10
c000a984:	75 12                	jne    c000a998 <Dbg::logc(char)+0x1f>
c000a986:	ba fd 03 00 00       	mov    edx,0x3fd
c000a98b:	ec                   	in     al,dx
c000a98c:	a8 20                	test   al,0x20
c000a98e:	74 fb                	je     c000a98b <Dbg::logc(char)+0x12>
c000a990:	ba f8 03 00 00       	mov    edx,0x3f8
c000a995:	88 c8                	mov    al,cl
c000a997:	ee                   	out    dx,al
c000a998:	c3                   	ret    

c000a999 <Dbg::logs(char*)>:
c000a999:	53                   	push   ebx
c000a99a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a99e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a9a1:	85 c0                	test   eax,eax
c000a9a3:	74 11                	je     c000a9b6 <Dbg::logs(char*)+0x1d>
c000a9a5:	83 c3 01             	add    ebx,0x1
c000a9a8:	50                   	push   eax
c000a9a9:	e8 cb ff ff ff       	call   c000a979 <Dbg::logc(char)>
c000a9ae:	58                   	pop    eax
c000a9af:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a9b2:	85 c0                	test   eax,eax
c000a9b4:	75 ef                	jne    c000a9a5 <Dbg::logs(char*)+0xc>
c000a9b6:	5b                   	pop    ebx
c000a9b7:	c3                   	ret    

c000a9b8 <Dbg::logWriteInt(unsigned int)>:
c000a9b8:	83 ec 10             	sub    esp,0x10
c000a9bb:	6a 0a                	push   0xa
c000a9bd:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a9c1:	50                   	push   eax
c000a9c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a9c6:	50                   	push   eax
c000a9c7:	e8 0d ff ff ff       	call   c000a8d9 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a9cc:	50                   	push   eax
c000a9cd:	e8 c7 ff ff ff       	call   c000a999 <Dbg::logs(char*)>
c000a9d2:	83 c4 20             	add    esp,0x20
c000a9d5:	c3                   	ret    

c000a9d6 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a9d6:	83 ec 10             	sub    esp,0x10
c000a9d9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a9dd:	50                   	push   eax
c000a9de:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a9e2:	50                   	push   eax
c000a9e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a9e7:	52                   	push   edx
c000a9e8:	e8 ec fe ff ff       	call   c000a8d9 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a9ed:	50                   	push   eax
c000a9ee:	e8 a6 ff ff ff       	call   c000a999 <Dbg::logs(char*)>
c000a9f3:	83 c4 20             	add    esp,0x20
c000a9f6:	c3                   	ret    

c000a9f7 <Dbg::kprintf(char const*, ...)>:
c000a9f7:	55                   	push   ebp
c000a9f8:	57                   	push   edi
c000a9f9:	56                   	push   esi
c000a9fa:	53                   	push   ebx
c000a9fb:	83 ec 0c             	sub    esp,0xc
c000a9fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000aa02:	f6 05 d0 4e 02 c0 10 	test   BYTE PTR ds:0xc0024ed0,0x10
c000aa09:	74 08                	je     c000aa13 <Dbg::kprintf(char const*, ...)+0x1c>
c000aa0b:	83 c4 0c             	add    esp,0xc
c000aa0e:	5b                   	pop    ebx
c000aa0f:	5e                   	pop    esi
c000aa10:	5f                   	pop    edi
c000aa11:	5d                   	pop    ebp
c000aa12:	c3                   	ret    
c000aa13:	8d 44 24 24          	lea    eax,[esp+0x24]
c000aa17:	31 ff                	xor    edi,edi
c000aa19:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aa1d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000aa20:	85 c0                	test   eax,eax
c000aa22:	74 e7                	je     c000aa0b <Dbg::kprintf(char const*, ...)+0x14>
c000aa24:	8d 77 01             	lea    esi,[edi+0x1]
c000aa27:	83 f8 25             	cmp    eax,0x25
c000aa2a:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000aa2d:	75 47                	jne    c000aa76 <Dbg::kprintf(char const*, ...)+0x7f>
c000aa2f:	83 c7 02             	add    edi,0x2
c000aa32:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000aa35:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000aa38:	83 e8 25             	sub    eax,0x25
c000aa3b:	0f b6 c0             	movzx  eax,al
c000aa3e:	83 f8 53             	cmp    eax,0x53
c000aa41:	0f 87 ce 00 00 00    	ja     c000ab15 <Dbg::kprintf(char const*, ...)+0x11e>
c000aa47:	ff 24 85 a0 01 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfe60]
c000aa4e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa52:	89 c8                	mov    eax,ecx
c000aa54:	83 c1 04             	add    ecx,0x4
c000aa57:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa5b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000aa5d:	55                   	push   ebp
c000aa5e:	e8 55 ff ff ff       	call   c000a9b8 <Dbg::logWriteInt(unsigned int)>
c000aa63:	58                   	pop    eax
c000aa64:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000aa67:	85 c0                	test   eax,eax
c000aa69:	74 a0                	je     c000aa0b <Dbg::kprintf(char const*, ...)+0x14>
c000aa6b:	8d 77 01             	lea    esi,[edi+0x1]
c000aa6e:	83 f8 25             	cmp    eax,0x25
c000aa71:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000aa74:	74 b9                	je     c000aa2f <Dbg::kprintf(char const*, ...)+0x38>
c000aa76:	50                   	push   eax
c000aa77:	89 f7                	mov    edi,esi
c000aa79:	e8 fb fe ff ff       	call   c000a979 <Dbg::logc(char)>
c000aa7e:	89 ee                	mov    esi,ebp
c000aa80:	58                   	pop    eax
c000aa81:	eb e1                	jmp    c000aa64 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa83:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa87:	89 c8                	mov    eax,ecx
c000aa89:	83 c1 04             	add    ecx,0x4
c000aa8c:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa8e:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa92:	50                   	push   eax
c000aa93:	e8 01 ff ff ff       	call   c000a999 <Dbg::logs(char*)>
c000aa98:	58                   	pop    eax
c000aa99:	eb c9                	jmp    c000aa64 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa9b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa9f:	89 d0                	mov    eax,edx
c000aaa1:	83 c2 04             	add    edx,0x4
c000aaa4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaa8:	8b 00                	mov    eax,DWORD PTR [eax]
c000aaaa:	50                   	push   eax
c000aaab:	e8 08 ff ff ff       	call   c000a9b8 <Dbg::logWriteInt(unsigned int)>
c000aab0:	58                   	pop    eax
c000aab1:	eb b1                	jmp    c000aa64 <Dbg::kprintf(char const*, ...)+0x6d>
c000aab3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aab7:	89 d0                	mov    eax,edx
c000aab9:	83 c2 04             	add    edx,0x4
c000aabc:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aabf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aac3:	50                   	push   eax
c000aac4:	e8 b0 fe ff ff       	call   c000a979 <Dbg::logc(char)>
c000aac9:	58                   	pop    eax
c000aaca:	eb 98                	jmp    c000aa64 <Dbg::kprintf(char const*, ...)+0x6d>
c000aacc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aad0:	89 c8                	mov    eax,ecx
c000aad2:	83 c1 04             	add    ecx,0x4
c000aad5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aad9:	6a 10                	push   0x10
c000aadb:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aadd:	51                   	push   ecx
c000aade:	e8 f3 fe ff ff       	call   c000a9d6 <Dbg::logWriteIntBase(unsigned int, int)>
c000aae3:	5d                   	pop    ebp
c000aae4:	58                   	pop    eax
c000aae5:	e9 7a ff ff ff       	jmp    c000aa64 <Dbg::kprintf(char const*, ...)+0x6d>
c000aaea:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aaee:	89 d0                	mov    eax,edx
c000aaf0:	83 c2 08             	add    edx,0x8
c000aaf3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaf7:	6a 10                	push   0x10
c000aaf9:	8b 00                	mov    eax,DWORD PTR [eax]
c000aafb:	50                   	push   eax
c000aafc:	e8 d5 fe ff ff       	call   c000a9d6 <Dbg::logWriteIntBase(unsigned int, int)>
c000ab01:	58                   	pop    eax
c000ab02:	5a                   	pop    edx
c000ab03:	e9 5c ff ff ff       	jmp    c000aa64 <Dbg::kprintf(char const*, ...)+0x6d>
c000ab08:	6a 25                	push   0x25
c000ab0a:	e8 6a fe ff ff       	call   c000a979 <Dbg::logc(char)>
c000ab0f:	5a                   	pop    edx
c000ab10:	e9 4f ff ff ff       	jmp    c000aa64 <Dbg::kprintf(char const*, ...)+0x6d>
c000ab15:	6a 25                	push   0x25
c000ab17:	e8 5d fe ff ff       	call   c000a979 <Dbg::logc(char)>
c000ab1c:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000ab20:	50                   	push   eax
c000ab21:	e8 53 fe ff ff       	call   c000a979 <Dbg::logc(char)>
c000ab26:	5a                   	pop    edx
c000ab27:	59                   	pop    ecx
c000ab28:	e9 37 ff ff ff       	jmp    c000aa64 <Dbg::kprintf(char const*, ...)+0x6d>
c000ab2d:	90                   	nop

c000ab2e <File::read(unsigned long long, void*, int*)>:
c000ab2e:	53                   	push   ebx
c000ab2f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ab33:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ab37:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ab3e:	83 f8 19             	cmp    eax,0x19
c000ab41:	77 35                	ja     c000ab78 <File::read(unsigned long long, void*, int*)+0x4a>
c000ab43:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000ab4a:	85 c0                	test   eax,eax
c000ab4c:	74 2a                	je     c000ab78 <File::read(unsigned long long, void*, int*)+0x4a>
c000ab4e:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ab54:	85 c0                	test   eax,eax
c000ab56:	74 20                	je     c000ab78 <File::read(unsigned long long, void*, int*)+0x4a>
c000ab58:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ab5c:	74 21                	je     c000ab7f <File::read(unsigned long long, void*, int*)+0x51>
c000ab5e:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ab60:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ab64:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ab6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab72:	5b                   	pop    ebx
c000ab73:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000ab76:	ff e0                	jmp    eax
c000ab78:	b8 0b 00 00 00       	mov    eax,0xb
c000ab7d:	eb 05                	jmp    c000ab84 <File::read(unsigned long long, void*, int*)+0x56>
c000ab7f:	b8 05 00 00 00       	mov    eax,0x5
c000ab84:	5b                   	pop    ebx
c000ab85:	c3                   	ret    

c000ab86 <File::write(unsigned long long, void*, int*)>:
c000ab86:	53                   	push   ebx
c000ab87:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ab8b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ab8f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ab96:	83 f8 19             	cmp    eax,0x19
c000ab99:	77 35                	ja     c000abd0 <File::write(unsigned long long, void*, int*)+0x4a>
c000ab9b:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000aba2:	85 c0                	test   eax,eax
c000aba4:	74 2a                	je     c000abd0 <File::write(unsigned long long, void*, int*)+0x4a>
c000aba6:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000abac:	85 c0                	test   eax,eax
c000abae:	74 20                	je     c000abd0 <File::write(unsigned long long, void*, int*)+0x4a>
c000abb0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000abb4:	74 21                	je     c000abd7 <File::write(unsigned long long, void*, int*)+0x51>
c000abb6:	8b 08                	mov    ecx,DWORD PTR [eax]
c000abb8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000abbc:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000abc2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abca:	5b                   	pop    ebx
c000abcb:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000abce:	ff e0                	jmp    eax
c000abd0:	b8 0b 00 00 00       	mov    eax,0xb
c000abd5:	eb 05                	jmp    c000abdc <File::write(unsigned long long, void*, int*)+0x56>
c000abd7:	b8 05 00 00 00       	mov    eax,0x5
c000abdc:	5b                   	pop    ebx
c000abdd:	c3                   	ret    

c000abde <Directory::read(unsigned long long, void*, int*)>:
c000abde:	53                   	push   ebx
c000abdf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000abe3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000abe7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000abee:	83 f8 19             	cmp    eax,0x19
c000abf1:	77 35                	ja     c000ac28 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000abf3:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000abfa:	85 c0                	test   eax,eax
c000abfc:	74 2a                	je     c000ac28 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000abfe:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ac04:	85 c0                	test   eax,eax
c000ac06:	74 20                	je     c000ac28 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000ac08:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ac0c:	74 21                	je     c000ac2f <Directory::read(unsigned long long, void*, int*)+0x51>
c000ac0e:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ac10:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ac14:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ac1a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac1e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac22:	5b                   	pop    ebx
c000ac23:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000ac26:	ff e0                	jmp    eax
c000ac28:	b8 0b 00 00 00       	mov    eax,0xb
c000ac2d:	eb 05                	jmp    c000ac34 <Directory::read(unsigned long long, void*, int*)+0x56>
c000ac2f:	b8 05 00 00 00       	mov    eax,0x5
c000ac34:	5b                   	pop    ebx
c000ac35:	c3                   	ret    

c000ac36 <Directory::write(unsigned long long, void*, int*)>:
c000ac36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac3a:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000ac41:	b8 0b 00 00 00       	mov    eax,0xb
c000ac46:	83 fa 19             	cmp    edx,0x19
c000ac49:	77 18                	ja     c000ac63 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ac4b:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000ac52:	85 d2                	test   edx,edx
c000ac54:	74 0d                	je     c000ac63 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ac56:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000ac5d:	19 c0                	sbb    eax,eax
c000ac5f:	83 e0 0a             	and    eax,0xa
c000ac62:	40                   	inc    eax
c000ac63:	c3                   	ret    

c000ac64 <File::isAtty()>:
c000ac64:	31 c0                	xor    eax,eax
c000ac66:	c3                   	ret    
c000ac67:	90                   	nop

c000ac68 <Directory::isAtty()>:
c000ac68:	31 c0                	xor    eax,eax
c000ac6a:	c3                   	ret    
c000ac6b:	90                   	nop

c000ac6c <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000ac6c:	b8 0a 00 00 00       	mov    eax,0xa
c000ac71:	c3                   	ret    

c000ac72 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000ac72:	b8 0a 00 00 00       	mov    eax,0xa
c000ac77:	c3                   	ret    

c000ac78 <Filesystem::allocateSwapfile(char const*, int)>:
c000ac78:	31 c0                	xor    eax,eax
c000ac7a:	31 d2                	xor    edx,edx
c000ac7c:	c3                   	ret    
c000ac7d:	90                   	nop

c000ac7e <File::~File()>:
c000ac7e:	83 ec 0c             	sub    esp,0xc
c000ac81:	ba 60 03 02 c0       	mov    edx,0xc0020360
c000ac86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac8a:	89 10                	mov    DWORD PTR [eax],edx
c000ac8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac90:	83 ec 0c             	sub    esp,0xc
c000ac93:	50                   	push   eax
c000ac94:	e8 1b e7 ff ff       	call   c00093b4 <UnixFile::~UnixFile()>
c000ac99:	83 c4 10             	add    esp,0x10
c000ac9c:	90                   	nop
c000ac9d:	83 c4 0c             	add    esp,0xc
c000aca0:	c3                   	ret    
c000aca1:	90                   	nop

c000aca2 <File::~File()>:
c000aca2:	83 ec 0c             	sub    esp,0xc
c000aca5:	83 ec 0c             	sub    esp,0xc
c000aca8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000acac:	e8 cd ff ff ff       	call   c000ac7e <File::~File()>
c000acb1:	83 c4 10             	add    esp,0x10
c000acb4:	83 ec 08             	sub    esp,0x8
c000acb7:	68 14 01 00 00       	push   0x114
c000acbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000acc0:	e8 05 fc ff ff       	call   c000a8ca <operator delete(void*, unsigned long)>
c000acc5:	83 c4 10             	add    esp,0x10
c000acc8:	83 c4 0c             	add    esp,0xc
c000accb:	c3                   	ret    

c000accc <Directory::~Directory()>:
c000accc:	83 ec 0c             	sub    esp,0xc
c000accf:	ba 7c 03 02 c0       	mov    edx,0xc002037c
c000acd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acd8:	89 10                	mov    DWORD PTR [eax],edx
c000acda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acde:	83 ec 0c             	sub    esp,0xc
c000ace1:	50                   	push   eax
c000ace2:	e8 cd e6 ff ff       	call   c00093b4 <UnixFile::~UnixFile()>
c000ace7:	83 c4 10             	add    esp,0x10
c000acea:	90                   	nop
c000aceb:	83 c4 0c             	add    esp,0xc
c000acee:	c3                   	ret    
c000acef:	90                   	nop

c000acf0 <Directory::~Directory()>:
c000acf0:	83 ec 0c             	sub    esp,0xc
c000acf3:	83 ec 0c             	sub    esp,0xc
c000acf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000acfa:	e8 cd ff ff ff       	call   c000accc <Directory::~Directory()>
c000acff:	83 c4 10             	add    esp,0x10
c000ad02:	83 ec 08             	sub    esp,0x8
c000ad05:	68 14 01 00 00       	push   0x114
c000ad0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ad0e:	e8 b7 fb ff ff       	call   c000a8ca <operator delete(void*, unsigned long)>
c000ad13:	83 c4 10             	add    esp,0x10
c000ad16:	83 c4 0c             	add    esp,0xc
c000ad19:	c3                   	ret    

c000ad1a <Filesystem::Filesystem()>:
c000ad1a:	ba f8 02 02 c0       	mov    edx,0xc00202f8
c000ad1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad23:	89 10                	mov    DWORD PTR [eax],edx
c000ad25:	8b 15 b4 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fb4
c000ad2b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad2f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ad32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad36:	a3 b4 4f 02 c0       	mov    ds:0xc0024fb4,eax
c000ad3b:	90                   	nop
c000ad3c:	c3                   	ret    
c000ad3d:	90                   	nop

c000ad3e <Filesystem::~Filesystem()>:
c000ad3e:	ba f8 02 02 c0       	mov    edx,0xc00202f8
c000ad43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad47:	89 10                	mov    DWORD PTR [eax],edx
c000ad49:	90                   	nop
c000ad4a:	c3                   	ret    
c000ad4b:	90                   	nop

c000ad4c <Filesystem::~Filesystem()>:
c000ad4c:	83 ec 0c             	sub    esp,0xc
c000ad4f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ad53:	e8 e6 ff ff ff       	call   c000ad3e <Filesystem::~Filesystem()>
c000ad58:	83 c4 04             	add    esp,0x4
c000ad5b:	83 ec 08             	sub    esp,0x8
c000ad5e:	6a 08                	push   0x8
c000ad60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ad64:	e8 61 fb ff ff       	call   c000a8ca <operator delete(void*, unsigned long)>
c000ad69:	83 c4 10             	add    esp,0x10
c000ad6c:	83 c4 0c             	add    esp,0xc
c000ad6f:	c3                   	ret    

c000ad70 <Fs::getcwd(Process*, char*, int)>:
c000ad70:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad74:	31 c0                	xor    eax,eax
c000ad76:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000ad79:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ad7d:	7d 15                	jge    c000ad94 <Fs::getcwd(Process*, char*, int)+0x24>
c000ad7f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ad83:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000ad8a:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000ad8d:	84 c9                	test   cl,cl
c000ad8f:	74 06                	je     c000ad97 <Fs::getcwd(Process*, char*, int)+0x27>
c000ad91:	40                   	inc    eax
c000ad92:	eb e2                	jmp    c000ad76 <Fs::getcwd(Process*, char*, int)+0x6>
c000ad94:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000ad97:	31 c0                	xor    eax,eax
c000ad99:	c3                   	ret    

c000ad9a <Fs::initVFS()>:
c000ad9a:	83 ec 18             	sub    esp,0x18
c000ad9d:	6a 08                	push   0x8
c000ad9f:	e8 0a cd ff ff       	call   c0007aae <malloc>
c000ada4:	89 04 24             	mov    DWORD PTR [esp],eax
c000ada7:	e8 c0 dd 00 00       	call   c0018b6c <FAT::FAT()>
c000adac:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000adb3:	e8 f6 cc ff ff       	call   c0007aae <malloc>
c000adb8:	89 04 24             	mov    DWORD PTR [esp],eax
c000adbb:	e8 d2 ec 00 00       	call   c0019a92 <ISO9660::ISO9660()>
c000adc0:	83 c4 1c             	add    esp,0x1c
c000adc3:	c3                   	ret    

c000adc4 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000adc4:	55                   	push   ebp
c000adc5:	57                   	push   edi
c000adc6:	56                   	push   esi
c000adc7:	53                   	push   ebx
c000adc8:	81 ec 10 04 00 00    	sub    esp,0x410
c000adce:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000add5:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000addc:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000ade3:	68 00 04 00 00       	push   0x400
c000ade8:	6a 00                	push   0x0
c000adea:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000adee:	56                   	push   esi
c000adef:	e8 fc 56 ff ff       	call   c00004f0 <memset>
c000adf4:	83 c4 10             	add    esp,0x10
c000adf7:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000adfb:	75 0b                	jne    c000ae08 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000adfd:	50                   	push   eax
c000adfe:	50                   	push   eax
c000adff:	57                   	push   edi
c000ae00:	56                   	push   esi
c000ae01:	e8 3a 58 ff ff       	call   c0000640 <strcpy>
c000ae06:	eb 44                	jmp    c000ae4c <Fs::standardiseFiles(char*, char const*, char const*)+0x88>
c000ae08:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000ae0b:	83 f8 5c             	cmp    eax,0x5c
c000ae0e:	74 05                	je     c000ae15 <Fs::standardiseFiles(char*, char const*, char const*)+0x51>
c000ae10:	83 f8 2f             	cmp    eax,0x2f
c000ae13:	75 18                	jne    c000ae2d <Fs::standardiseFiles(char*, char const*, char const*)+0x69>
c000ae15:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000ae18:	3c 60                	cmp    al,0x60
c000ae1a:	7e 03                	jle    c000ae1f <Fs::standardiseFiles(char*, char const*, char const*)+0x5b>
c000ae1c:	83 e8 20             	sub    eax,0x20
c000ae1f:	88 04 24             	mov    BYTE PTR [esp],al
c000ae22:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000ae29:	50                   	push   eax
c000ae2a:	50                   	push   eax
c000ae2b:	eb 18                	jmp    c000ae45 <Fs::standardiseFiles(char*, char const*, char const*)+0x81>
c000ae2d:	50                   	push   eax
c000ae2e:	50                   	push   eax
c000ae2f:	55                   	push   ebp
c000ae30:	56                   	push   esi
c000ae31:	e8 0a 58 ff ff       	call   c0000640 <strcpy>
c000ae36:	5a                   	pop    edx
c000ae37:	59                   	pop    ecx
c000ae38:	68 73 12 02 c0       	push   0xc0021273
c000ae3d:	56                   	push   esi
c000ae3e:	e8 fd 59 ff ff       	call   c0000840 <strcat>
c000ae43:	5d                   	pop    ebp
c000ae44:	58                   	pop    eax
c000ae45:	57                   	push   edi
c000ae46:	56                   	push   esi
c000ae47:	e8 f4 59 ff ff       	call   c0000840 <strcat>
c000ae4c:	83 c4 10             	add    esp,0x10
c000ae4f:	8a 04 24             	mov    al,BYTE PTR [esp]
c000ae52:	3c 60                	cmp    al,0x60
c000ae54:	7e 03                	jle    c000ae59 <Fs::standardiseFiles(char*, char const*, char const*)+0x95>
c000ae56:	83 e8 20             	sub    eax,0x20
c000ae59:	88 04 24             	mov    BYTE PTR [esp],al
c000ae5c:	88 03                	mov    BYTE PTR [ebx],al
c000ae5e:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000ae65:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000ae6b:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000ae6f:	bf 03 00 00 00       	mov    edi,0x3
c000ae74:	b8 03 00 00 00       	mov    eax,0x3
c000ae79:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c000ae7d:	89 ea                	mov    edx,ebp
c000ae7f:	85 ed                	test   ebp,ebp
c000ae81:	0f 84 97 00 00 00    	je     c000af1e <Fs::standardiseFiles(char*, char const*, char const*)+0x15a>
c000ae87:	8d 4f 01             	lea    ecx,[edi+0x1]
c000ae8a:	83 fd 5c             	cmp    ebp,0x5c
c000ae8d:	74 05                	je     c000ae94 <Fs::standardiseFiles(char*, char const*, char const*)+0xd0>
c000ae8f:	83 fd 2f             	cmp    ebp,0x2f
c000ae92:	75 12                	jne    c000aea6 <Fs::standardiseFiles(char*, char const*, char const*)+0xe2>
c000ae94:	89 c5                	mov    ebp,eax
c000ae96:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000ae9b:	74 09                	je     c000aea6 <Fs::standardiseFiles(char*, char const*, char const*)+0xe2>
c000ae9d:	40                   	inc    eax
c000ae9e:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000aea2:	89 cf                	mov    edi,ecx
c000aea4:	eb d3                	jmp    c000ae79 <Fs::standardiseFiles(char*, char const*, char const*)+0xb5>
c000aea6:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000aeab:	0f be ea             	movsx  ebp,dl
c000aeae:	75 5e                	jne    c000af0e <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000aeb0:	83 fd 2e             	cmp    ebp,0x2e
c000aeb3:	75 59                	jne    c000af0e <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000aeb5:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000aeb9:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c000aebe:	74 18                	je     c000aed8 <Fs::standardiseFiles(char*, char const*, char const*)+0x114>
c000aec0:	83 fd 2e             	cmp    ebp,0x2e
c000aec3:	74 53                	je     c000af18 <Fs::standardiseFiles(char*, char const*, char const*)+0x154>
c000aec5:	89 f9                	mov    ecx,edi
c000aec7:	41                   	inc    ecx
c000aec8:	0f be 14 0e          	movsx  edx,BYTE PTR [esi+ecx*1]
c000aecc:	83 fa 2f             	cmp    edx,0x2f
c000aecf:	74 f6                	je     c000aec7 <Fs::standardiseFiles(char*, char const*, char const*)+0x103>
c000aed1:	83 fa 5c             	cmp    edx,0x5c
c000aed4:	74 f1                	je     c000aec7 <Fs::standardiseFiles(char*, char const*, char const*)+0x103>
c000aed6:	eb ca                	jmp    c000aea2 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000aed8:	83 fd 2e             	cmp    ebp,0x2e
c000aedb:	74 3b                	je     c000af18 <Fs::standardiseFiles(char*, char const*, char const*)+0x154>
c000aedd:	83 f8 03             	cmp    eax,0x3
c000aee0:	74 c0                	je     c000aea2 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000aee2:	41                   	inc    ecx
c000aee3:	0f be 14 0e          	movsx  edx,BYTE PTR [esi+ecx*1]
c000aee7:	83 fa 2f             	cmp    edx,0x2f
c000aeea:	74 f6                	je     c000aee2 <Fs::standardiseFiles(char*, char const*, char const*)+0x11e>
c000aeec:	83 fa 5c             	cmp    edx,0x5c
c000aeef:	74 f1                	je     c000aee2 <Fs::standardiseFiles(char*, char const*, char const*)+0x11e>
c000aef1:	48                   	dec    eax
c000aef2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000aef6:	75 06                	jne    c000aefe <Fs::standardiseFiles(char*, char const*, char const*)+0x13a>
c000aef8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aefc:	eb f3                	jmp    c000aef1 <Fs::standardiseFiles(char*, char const*, char const*)+0x12d>
c000aefe:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000af02:	74 07                	je     c000af0b <Fs::standardiseFiles(char*, char const*, char const*)+0x147>
c000af04:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000af08:	48                   	dec    eax
c000af09:	eb f3                	jmp    c000aefe <Fs::standardiseFiles(char*, char const*, char const*)+0x13a>
c000af0b:	40                   	inc    eax
c000af0c:	eb 94                	jmp    c000aea2 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000af0e:	83 fd 2f             	cmp    ebp,0x2f
c000af11:	74 8f                	je     c000aea2 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000af13:	83 fd 5c             	cmp    ebp,0x5c
c000af16:	74 8a                	je     c000aea2 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000af18:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000af1b:	40                   	inc    eax
c000af1c:	eb 84                	jmp    c000aea2 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000af1e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000af22:	83 ec 0c             	sub    esp,0xc
c000af25:	53                   	push   ebx
c000af26:	e8 45 56 ff ff       	call   c0000570 <strlen>
c000af2b:	83 c4 10             	add    esp,0x10
c000af2e:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000af33:	75 26                	jne    c000af5b <Fs::standardiseFiles(char*, char const*, char const*)+0x197>
c000af35:	83 ec 0c             	sub    esp,0xc
c000af38:	53                   	push   ebx
c000af39:	e8 32 56 ff ff       	call   c0000570 <strlen>
c000af3e:	83 c4 10             	add    esp,0x10
c000af41:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000af46:	74 26                	je     c000af6e <Fs::standardiseFiles(char*, char const*, char const*)+0x1aa>
c000af48:	83 ec 0c             	sub    esp,0xc
c000af4b:	53                   	push   ebx
c000af4c:	e8 1f 56 ff ff       	call   c0000570 <strlen>
c000af51:	83 c4 10             	add    esp,0x10
c000af54:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000af59:	eb c7                	jmp    c000af22 <Fs::standardiseFiles(char*, char const*, char const*)+0x15e>
c000af5b:	83 ec 0c             	sub    esp,0xc
c000af5e:	53                   	push   ebx
c000af5f:	e8 0c 56 ff ff       	call   c0000570 <strlen>
c000af64:	83 c4 10             	add    esp,0x10
c000af67:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000af6c:	74 c7                	je     c000af35 <Fs::standardiseFiles(char*, char const*, char const*)+0x171>
c000af6e:	81 c4 0c 04 00 00    	add    esp,0x40c
c000af74:	5b                   	pop    ebx
c000af75:	5e                   	pop    esi
c000af76:	5f                   	pop    edi
c000af77:	5d                   	pop    ebp
c000af78:	c3                   	ret    
c000af79:	90                   	nop

c000af7a <File::File(char const*, Process*)>:
c000af7a:	83 ec 0c             	sub    esp,0xc
c000af7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af81:	83 ec 08             	sub    esp,0x8
c000af84:	6a 00                	push   0x0
c000af86:	50                   	push   eax
c000af87:	e8 42 e2 ff ff       	call   c00091ce <UnixFile::UnixFile(int)>
c000af8c:	83 c4 10             	add    esp,0x10
c000af8f:	ba 60 03 02 c0       	mov    edx,0xc0020360
c000af94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af98:	89 10                	mov    DWORD PTR [eax],edx
c000af9a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000af9e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000afa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afa8:	83 c0 0d             	add    eax,0xd
c000afab:	83 ec 04             	sub    esp,0x4
c000afae:	52                   	push   edx
c000afaf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afb3:	50                   	push   eax
c000afb4:	e8 0b fe ff ff       	call   c000adc4 <Fs::standardiseFiles(char*, char const*, char const*)>
c000afb9:	83 c4 10             	add    esp,0x10
c000afbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afc0:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000afc3:	83 e8 41             	sub    eax,0x41
c000afc6:	88 c2                	mov    dl,al
c000afc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afcc:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000afd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afd6:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000afda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afde:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000afe4:	0f b6 c0             	movzx  eax,al
c000afe7:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000afee:	85 c0                	test   eax,eax
c000aff0:	74 3e                	je     c000b030 <File::File(char const*, Process*)+0xb6>
c000aff2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aff6:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000affc:	0f b6 c0             	movzx  eax,al
c000afff:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b006:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b00c:	85 c0                	test   eax,eax
c000b00e:	75 20                	jne    c000b030 <File::File(char const*, Process*)+0xb6>
c000b010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b014:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b01a:	0f b6 c0             	movzx  eax,al
c000b01d:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b024:	83 ec 0c             	sub    esp,0xc
c000b027:	50                   	push   eax
c000b028:	e8 21 21 00 00       	call   c000d14e <LogicalDisk::mount()>
c000b02d:	83 c4 10             	add    esp,0x10
c000b030:	90                   	nop
c000b031:	83 c4 0c             	add    esp,0xc
c000b034:	c3                   	ret    
c000b035:	90                   	nop

c000b036 <File::open(FileOpenMode)>:
c000b036:	53                   	push   ebx
c000b037:	b8 0b 00 00 00       	mov    eax,0xb
c000b03c:	83 ec 08             	sub    esp,0x8
c000b03f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b043:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b04a:	83 fa 19             	cmp    edx,0x19
c000b04d:	77 40                	ja     c000b08f <File::open(FileOpenMode)+0x59>
c000b04f:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b056:	85 d2                	test   edx,edx
c000b058:	74 35                	je     c000b08f <File::open(FileOpenMode)+0x59>
c000b05a:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b060:	85 d2                	test   edx,edx
c000b062:	74 2b                	je     c000b08f <File::open(FileOpenMode)+0x59>
c000b064:	b8 06 00 00 00       	mov    eax,0x6
c000b069:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b06d:	75 20                	jne    c000b08f <File::open(FileOpenMode)+0x59>
c000b06f:	8b 02                	mov    eax,DWORD PTR [edx]
c000b071:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b077:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b07b:	51                   	push   ecx
c000b07c:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b07f:	51                   	push   ecx
c000b080:	52                   	push   edx
c000b081:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b084:	83 c4 10             	add    esp,0x10
c000b087:	85 c0                	test   eax,eax
c000b089:	75 04                	jne    c000b08f <File::open(FileOpenMode)+0x59>
c000b08b:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b08f:	83 c4 08             	add    esp,0x8
c000b092:	5b                   	pop    ebx
c000b093:	c3                   	ret    

c000b094 <File::close()>:
c000b094:	53                   	push   ebx
c000b095:	b8 0b 00 00 00       	mov    eax,0xb
c000b09a:	83 ec 08             	sub    esp,0x8
c000b09d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b0a1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b0a8:	83 f9 19             	cmp    ecx,0x19
c000b0ab:	77 41                	ja     c000b0ee <File::close()+0x5a>
c000b0ad:	8b 1c 8d 20 74 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b0b4:	85 db                	test   ebx,ebx
c000b0b6:	74 36                	je     c000b0ee <File::close()+0x5a>
c000b0b8:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b0bf:	74 2d                	je     c000b0ee <File::close()+0x5a>
c000b0c1:	b8 05 00 00 00       	mov    eax,0x5
c000b0c6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b0ca:	74 22                	je     c000b0ee <File::close()+0x5a>
c000b0cc:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b0d0:	8b 04 8d 20 74 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd8be0]
c000b0d7:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b0dd:	53                   	push   ebx
c000b0de:	53                   	push   ebx
c000b0df:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b0e1:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b0e7:	50                   	push   eax
c000b0e8:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000b0eb:	83 c4 10             	add    esp,0x10
c000b0ee:	83 c4 08             	add    esp,0x8
c000b0f1:	5b                   	pop    ebx
c000b0f2:	c3                   	ret    
c000b0f3:	90                   	nop

c000b0f4 <File::seek(unsigned long long)>:
c000b0f4:	56                   	push   esi
c000b0f5:	53                   	push   ebx
c000b0f6:	b8 0b 00 00 00       	mov    eax,0xb
c000b0fb:	51                   	push   ecx
c000b0fc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b100:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b104:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b10b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b10f:	83 fa 19             	cmp    edx,0x19
c000b112:	77 31                	ja     c000b145 <File::seek(unsigned long long)+0x51>
c000b114:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b11b:	85 d2                	test   edx,edx
c000b11d:	74 26                	je     c000b145 <File::seek(unsigned long long)+0x51>
c000b11f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b125:	85 d2                	test   edx,edx
c000b127:	74 1c                	je     c000b145 <File::seek(unsigned long long)+0x51>
c000b129:	b8 05 00 00 00       	mov    eax,0x5
c000b12e:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b132:	74 11                	je     c000b145 <File::seek(unsigned long long)+0x51>
c000b134:	8b 02                	mov    eax,DWORD PTR [edx]
c000b136:	53                   	push   ebx
c000b137:	51                   	push   ecx
c000b138:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b13e:	52                   	push   edx
c000b13f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b142:	83 c4 10             	add    esp,0x10
c000b145:	5a                   	pop    edx
c000b146:	5b                   	pop    ebx
c000b147:	5e                   	pop    esi
c000b148:	c3                   	ret    
c000b149:	90                   	nop

c000b14a <File::tell(unsigned long long*)>:
c000b14a:	83 ec 0c             	sub    esp,0xc
c000b14d:	b8 0b 00 00 00       	mov    eax,0xb
c000b152:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b156:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b15d:	83 fa 19             	cmp    edx,0x19
c000b160:	77 34                	ja     c000b196 <File::tell(unsigned long long*)+0x4c>
c000b162:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b169:	85 d2                	test   edx,edx
c000b16b:	74 29                	je     c000b196 <File::tell(unsigned long long*)+0x4c>
c000b16d:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b173:	85 d2                	test   edx,edx
c000b175:	74 1f                	je     c000b196 <File::tell(unsigned long long*)+0x4c>
c000b177:	b8 05 00 00 00       	mov    eax,0x5
c000b17c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b180:	74 14                	je     c000b196 <File::tell(unsigned long long*)+0x4c>
c000b182:	50                   	push   eax
c000b183:	8b 02                	mov    eax,DWORD PTR [edx]
c000b185:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b189:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b18f:	52                   	push   edx
c000b190:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b193:	83 c4 10             	add    esp,0x10
c000b196:	83 c4 0c             	add    esp,0xc
c000b199:	c3                   	ret    

c000b19a <File::rewind()>:
c000b19a:	83 ec 10             	sub    esp,0x10
c000b19d:	6a 00                	push   0x0
c000b19f:	6a 00                	push   0x0
c000b1a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b1a5:	e8 4a ff ff ff       	call   c000b0f4 <File::seek(unsigned long long)>
c000b1aa:	83 c4 1c             	add    esp,0x1c
c000b1ad:	c3                   	ret    

c000b1ae <File::unlink()>:
c000b1ae:	83 ec 0c             	sub    esp,0xc
c000b1b1:	b8 0b 00 00 00       	mov    eax,0xb
c000b1b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b1ba:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b1c1:	83 f9 19             	cmp    ecx,0x19
c000b1c4:	77 2f                	ja     c000b1f5 <File::unlink()+0x47>
c000b1c6:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b1cd:	85 c9                	test   ecx,ecx
c000b1cf:	74 24                	je     c000b1f5 <File::unlink()+0x47>
c000b1d1:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b1d7:	85 c9                	test   ecx,ecx
c000b1d9:	74 1a                	je     c000b1f5 <File::unlink()+0x47>
c000b1db:	b8 06 00 00 00       	mov    eax,0x6
c000b1e0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b1e4:	75 0f                	jne    c000b1f5 <File::unlink()+0x47>
c000b1e6:	83 c2 0d             	add    edx,0xd
c000b1e9:	50                   	push   eax
c000b1ea:	50                   	push   eax
c000b1eb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b1ed:	52                   	push   edx
c000b1ee:	51                   	push   ecx
c000b1ef:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b1f2:	83 c4 10             	add    esp,0x10
c000b1f5:	83 c4 0c             	add    esp,0xc
c000b1f8:	c3                   	ret    
c000b1f9:	90                   	nop

c000b1fa <File::rename(char const*)>:
c000b1fa:	83 ec 0c             	sub    esp,0xc
c000b1fd:	b8 0b 00 00 00       	mov    eax,0xb
c000b202:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b206:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b20d:	83 f9 19             	cmp    ecx,0x19
c000b210:	77 32                	ja     c000b244 <File::rename(char const*)+0x4a>
c000b212:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b219:	85 c9                	test   ecx,ecx
c000b21b:	74 27                	je     c000b244 <File::rename(char const*)+0x4a>
c000b21d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b223:	85 c9                	test   ecx,ecx
c000b225:	74 1d                	je     c000b244 <File::rename(char const*)+0x4a>
c000b227:	b8 06 00 00 00       	mov    eax,0x6
c000b22c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b230:	75 12                	jne    c000b244 <File::rename(char const*)+0x4a>
c000b232:	83 c2 0d             	add    edx,0xd
c000b235:	50                   	push   eax
c000b236:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b238:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b23c:	52                   	push   edx
c000b23d:	51                   	push   ecx
c000b23e:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b241:	83 c4 10             	add    esp,0x10
c000b244:	83 c4 0c             	add    esp,0xc
c000b247:	c3                   	ret    

c000b248 <File::chfatattr(unsigned char, unsigned char)>:
c000b248:	57                   	push   edi
c000b249:	b8 0b 00 00 00       	mov    eax,0xb
c000b24e:	56                   	push   esi
c000b24f:	53                   	push   ebx
c000b250:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b254:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b258:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b25f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b263:	83 f9 19             	cmp    ecx,0x19
c000b266:	77 37                	ja     c000b29f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b268:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b26f:	85 c9                	test   ecx,ecx
c000b271:	74 2c                	je     c000b29f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b273:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b279:	85 c9                	test   ecx,ecx
c000b27b:	74 22                	je     c000b29f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b27d:	b8 06 00 00 00       	mov    eax,0x6
c000b282:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b286:	75 17                	jne    c000b29f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b288:	8b 39                	mov    edi,DWORD PTR [ecx]
c000b28a:	89 f0                	mov    eax,esi
c000b28c:	83 c2 0d             	add    edx,0xd
c000b28f:	0f b6 f0             	movzx  esi,al
c000b292:	0f b6 db             	movzx  ebx,bl
c000b295:	56                   	push   esi
c000b296:	53                   	push   ebx
c000b297:	52                   	push   edx
c000b298:	51                   	push   ecx
c000b299:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000b29c:	83 c4 10             	add    esp,0x10
c000b29f:	5b                   	pop    ebx
c000b2a0:	5e                   	pop    esi
c000b2a1:	5f                   	pop    edi
c000b2a2:	c3                   	ret    
c000b2a3:	90                   	nop

c000b2a4 <File::exists()>:
c000b2a4:	83 ec 0c             	sub    esp,0xc
c000b2a7:	31 c0                	xor    eax,eax
c000b2a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b2ad:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b2b4:	83 f9 19             	cmp    ecx,0x19
c000b2b7:	77 24                	ja     c000b2dd <File::exists()+0x39>
c000b2b9:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b2c0:	85 c9                	test   ecx,ecx
c000b2c2:	74 19                	je     c000b2dd <File::exists()+0x39>
c000b2c4:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b2ca:	85 c9                	test   ecx,ecx
c000b2cc:	74 0f                	je     c000b2dd <File::exists()+0x39>
c000b2ce:	83 c2 0d             	add    edx,0xd
c000b2d1:	50                   	push   eax
c000b2d2:	50                   	push   eax
c000b2d3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2d5:	52                   	push   edx
c000b2d6:	51                   	push   ecx
c000b2d7:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b2da:	83 c4 10             	add    esp,0x10
c000b2dd:	83 c4 0c             	add    esp,0xc
c000b2e0:	c3                   	ret    
c000b2e1:	90                   	nop

c000b2e2 <File::stat(unsigned long long*, bool*)>:
c000b2e2:	56                   	push   esi
c000b2e3:	53                   	push   ebx
c000b2e4:	50                   	push   eax
c000b2e5:	b8 0b 00 00 00       	mov    eax,0xb
c000b2ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b2ee:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b2f2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b2f9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b2fd:	83 f9 19             	cmp    ecx,0x19
c000b300:	77 3d                	ja     c000b33f <File::stat(unsigned long long*, bool*)+0x5d>
c000b302:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b309:	85 c9                	test   ecx,ecx
c000b30b:	74 32                	je     c000b33f <File::stat(unsigned long long*, bool*)+0x5d>
c000b30d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b313:	85 c9                	test   ecx,ecx
c000b315:	74 28                	je     c000b33f <File::stat(unsigned long long*, bool*)+0x5d>
c000b317:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b319:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b31d:	74 13                	je     c000b332 <File::stat(unsigned long long*, bool*)+0x50>
c000b31f:	83 ec 04             	sub    esp,0x4
c000b322:	56                   	push   esi
c000b323:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b329:	51                   	push   ecx
c000b32a:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b32d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000b330:	eb 0a                	jmp    c000b33c <File::stat(unsigned long long*, bool*)+0x5a>
c000b332:	53                   	push   ebx
c000b333:	83 c2 0d             	add    edx,0xd
c000b336:	56                   	push   esi
c000b337:	52                   	push   edx
c000b338:	51                   	push   ecx
c000b339:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000b33c:	83 c4 10             	add    esp,0x10
c000b33f:	5a                   	pop    edx
c000b340:	5b                   	pop    ebx
c000b341:	5e                   	pop    esi
c000b342:	c3                   	ret    

c000b343 <Fs::setcwd(Process*, char*)>:
c000b343:	55                   	push   ebp
c000b344:	57                   	push   edi
c000b345:	56                   	push   esi
c000b346:	53                   	push   ebx
c000b347:	81 ec 20 02 00 00    	sub    esp,0x220
c000b34d:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000b354:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000b35a:	57                   	push   edi
c000b35b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000b362:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000b366:	56                   	push   esi
c000b367:	e8 58 fa ff ff       	call   c000adc4 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b36c:	89 34 24             	mov    DWORD PTR [esp],esi
c000b36f:	e8 fc 51 ff ff       	call   c0000570 <strlen>
c000b374:	83 c4 10             	add    esp,0x10
c000b377:	83 f8 02             	cmp    eax,0x2
c000b37a:	77 15                	ja     c000b391 <Fs::setcwd(Process*, char*)+0x4e>
c000b37c:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000b381:	83 eb 41             	sub    ebx,0x41
c000b384:	8b 04 9d 20 74 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd8be0]
c000b38b:	85 c0                	test   eax,eax
c000b38d:	75 1c                	jne    c000b3ab <Fs::setcwd(Process*, char*)+0x68>
c000b38f:	eb 2f                	jmp    c000b3c0 <Fs::setcwd(Process*, char*)+0x7d>
c000b391:	83 ec 0c             	sub    esp,0xc
c000b394:	56                   	push   esi
c000b395:	e8 d6 51 ff ff       	call   c0000570 <strlen>
c000b39a:	83 c4 10             	add    esp,0x10
c000b39d:	83 f8 03             	cmp    eax,0x3
c000b3a0:	75 57                	jne    c000b3f9 <Fs::setcwd(Process*, char*)+0xb6>
c000b3a2:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000b3a7:	75 50                	jne    c000b3f9 <Fs::setcwd(Process*, char*)+0xb6>
c000b3a9:	eb d1                	jmp    c000b37c <Fs::setcwd(Process*, char*)+0x39>
c000b3ab:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000b3b2:	75 0c                	jne    c000b3c0 <Fs::setcwd(Process*, char*)+0x7d>
c000b3b4:	83 ec 0c             	sub    esp,0xc
c000b3b7:	50                   	push   eax
c000b3b8:	e8 91 1d 00 00       	call   c000d14e <LogicalDisk::mount()>
c000b3bd:	83 c4 10             	add    esp,0x10
c000b3c0:	b8 03 00 00 00       	mov    eax,0x3
c000b3c5:	83 fb 19             	cmp    ebx,0x19
c000b3c8:	0f 87 c6 00 00 00    	ja     c000b494 <Fs::setcwd(Process*, char*)+0x151>
c000b3ce:	8b 14 9d 20 74 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd8be0]
c000b3d5:	b8 05 00 00 00       	mov    eax,0x5
c000b3da:	85 d2                	test   edx,edx
c000b3dc:	0f 84 b2 00 00 00    	je     c000b494 <Fs::setcwd(Process*, char*)+0x151>
c000b3e2:	b8 06 00 00 00       	mov    eax,0x6
c000b3e7:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000b3ee:	0f 85 92 00 00 00    	jne    c000b486 <Fs::setcwd(Process*, char*)+0x143>
c000b3f4:	e9 9b 00 00 00       	jmp    c000b494 <Fs::setcwd(Process*, char*)+0x151>
c000b3f9:	83 ec 0c             	sub    esp,0xc
c000b3fc:	68 14 01 00 00       	push   0x114
c000b401:	e8 a8 c6 ff ff       	call   c0007aae <malloc>
c000b406:	83 c4 0c             	add    esp,0xc
c000b409:	89 c3                	mov    ebx,eax
c000b40b:	55                   	push   ebp
c000b40c:	56                   	push   esi
c000b40d:	50                   	push   eax
c000b40e:	e8 67 fb ff ff       	call   c000af7a <File::File(char const*, Process*)>
c000b413:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b418:	83 c4 0c             	add    esp,0xc
c000b41b:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b41f:	50                   	push   eax
c000b420:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b424:	50                   	push   eax
c000b425:	53                   	push   ebx
c000b426:	e8 b7 fe ff ff       	call   c000b2e2 <File::stat(unsigned long long*, bool*)>
c000b42b:	83 c4 10             	add    esp,0x10
c000b42e:	83 f8 02             	cmp    eax,0x2
c000b431:	74 27                	je     c000b45a <Fs::setcwd(Process*, char*)+0x117>
c000b433:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b438:	75 1c                	jne    c000b456 <Fs::setcwd(Process*, char*)+0x113>
c000b43a:	b8 02 00 00 00       	mov    eax,0x2
c000b43f:	85 db                	test   ebx,ebx
c000b441:	74 51                	je     c000b494 <Fs::setcwd(Process*, char*)+0x151>
c000b443:	83 ec 0c             	sub    esp,0xc
c000b446:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b448:	53                   	push   ebx
c000b449:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b44c:	83 c4 10             	add    esp,0x10
c000b44f:	b8 02 00 00 00       	mov    eax,0x2
c000b454:	eb 3e                	jmp    c000b494 <Fs::setcwd(Process*, char*)+0x151>
c000b456:	85 c0                	test   eax,eax
c000b458:	74 1c                	je     c000b476 <Fs::setcwd(Process*, char*)+0x133>
c000b45a:	b8 01 00 00 00       	mov    eax,0x1
c000b45f:	85 db                	test   ebx,ebx
c000b461:	74 31                	je     c000b494 <Fs::setcwd(Process*, char*)+0x151>
c000b463:	83 ec 0c             	sub    esp,0xc
c000b466:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b468:	53                   	push   ebx
c000b469:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b46c:	83 c4 10             	add    esp,0x10
c000b46f:	b8 01 00 00 00       	mov    eax,0x1
c000b474:	eb 1e                	jmp    c000b494 <Fs::setcwd(Process*, char*)+0x151>
c000b476:	85 db                	test   ebx,ebx
c000b478:	74 0c                	je     c000b486 <Fs::setcwd(Process*, char*)+0x143>
c000b47a:	83 ec 0c             	sub    esp,0xc
c000b47d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b47f:	53                   	push   ebx
c000b480:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b483:	83 c4 10             	add    esp,0x10
c000b486:	50                   	push   eax
c000b487:	50                   	push   eax
c000b488:	56                   	push   esi
c000b489:	57                   	push   edi
c000b48a:	e8 b1 51 ff ff       	call   c0000640 <strcpy>
c000b48f:	83 c4 10             	add    esp,0x10
c000b492:	31 c0                	xor    eax,eax
c000b494:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b49a:	5b                   	pop    ebx
c000b49b:	5e                   	pop    esi
c000b49c:	5f                   	pop    edi
c000b49d:	5d                   	pop    ebp
c000b49e:	c3                   	ret    
c000b49f:	90                   	nop

c000b4a0 <Directory::Directory(char const*, Process*)>:
c000b4a0:	83 ec 0c             	sub    esp,0xc
c000b4a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4a7:	83 ec 08             	sub    esp,0x8
c000b4aa:	6a 00                	push   0x0
c000b4ac:	50                   	push   eax
c000b4ad:	e8 1c dd ff ff       	call   c00091ce <UnixFile::UnixFile(int)>
c000b4b2:	83 c4 10             	add    esp,0x10
c000b4b5:	ba 7c 03 02 c0       	mov    edx,0xc002037c
c000b4ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4be:	89 10                	mov    DWORD PTR [eax],edx
c000b4c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b4c4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b4ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4ce:	83 c0 0d             	add    eax,0xd
c000b4d1:	83 ec 04             	sub    esp,0x4
c000b4d4:	52                   	push   edx
c000b4d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4d9:	50                   	push   eax
c000b4da:	e8 e5 f8 ff ff       	call   c000adc4 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b4df:	83 c4 10             	add    esp,0x10
c000b4e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4e6:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b4e9:	83 e8 41             	sub    eax,0x41
c000b4ec:	88 c2                	mov    dl,al
c000b4ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4f2:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b4f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4fc:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b504:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b50a:	0f b6 c0             	movzx  eax,al
c000b50d:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b514:	85 c0                	test   eax,eax
c000b516:	74 3e                	je     c000b556 <Directory::Directory(char const*, Process*)+0xb6>
c000b518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b51c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b522:	0f b6 c0             	movzx  eax,al
c000b525:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b52c:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b532:	85 c0                	test   eax,eax
c000b534:	75 20                	jne    c000b556 <Directory::Directory(char const*, Process*)+0xb6>
c000b536:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b53a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b540:	0f b6 c0             	movzx  eax,al
c000b543:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b54a:	83 ec 0c             	sub    esp,0xc
c000b54d:	50                   	push   eax
c000b54e:	e8 fb 1b 00 00       	call   c000d14e <LogicalDisk::mount()>
c000b553:	83 c4 10             	add    esp,0x10
c000b556:	90                   	nop
c000b557:	83 c4 0c             	add    esp,0xc
c000b55a:	c3                   	ret    
c000b55b:	90                   	nop

c000b55c <Directory::open()>:
c000b55c:	53                   	push   ebx
c000b55d:	b8 0b 00 00 00       	mov    eax,0xb
c000b562:	83 ec 08             	sub    esp,0x8
c000b565:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b569:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b570:	83 fa 19             	cmp    edx,0x19
c000b573:	77 3d                	ja     c000b5b2 <Directory::open()+0x56>
c000b575:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b57c:	85 d2                	test   edx,edx
c000b57e:	74 32                	je     c000b5b2 <Directory::open()+0x56>
c000b580:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b586:	85 d2                	test   edx,edx
c000b588:	74 28                	je     c000b5b2 <Directory::open()+0x56>
c000b58a:	b8 06 00 00 00       	mov    eax,0x6
c000b58f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b593:	75 1d                	jne    c000b5b2 <Directory::open()+0x56>
c000b595:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b59b:	50                   	push   eax
c000b59c:	8b 02                	mov    eax,DWORD PTR [edx]
c000b59e:	51                   	push   ecx
c000b59f:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b5a2:	51                   	push   ecx
c000b5a3:	52                   	push   edx
c000b5a4:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b5a7:	83 c4 10             	add    esp,0x10
c000b5aa:	85 c0                	test   eax,eax
c000b5ac:	75 04                	jne    c000b5b2 <Directory::open()+0x56>
c000b5ae:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b5b2:	83 c4 08             	add    esp,0x8
c000b5b5:	5b                   	pop    ebx
c000b5b6:	c3                   	ret    
c000b5b7:	90                   	nop

c000b5b8 <Directory::close()>:
c000b5b8:	53                   	push   ebx
c000b5b9:	b8 0b 00 00 00       	mov    eax,0xb
c000b5be:	83 ec 08             	sub    esp,0x8
c000b5c1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b5c5:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b5cc:	83 f9 19             	cmp    ecx,0x19
c000b5cf:	77 41                	ja     c000b612 <Directory::close()+0x5a>
c000b5d1:	8b 1c 8d 20 74 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b5d8:	85 db                	test   ebx,ebx
c000b5da:	74 36                	je     c000b612 <Directory::close()+0x5a>
c000b5dc:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b5e3:	74 2d                	je     c000b612 <Directory::close()+0x5a>
c000b5e5:	b8 05 00 00 00       	mov    eax,0x5
c000b5ea:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b5ee:	74 22                	je     c000b612 <Directory::close()+0x5a>
c000b5f0:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b5f4:	8b 04 8d 20 74 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd8be0]
c000b5fb:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b601:	53                   	push   ebx
c000b602:	53                   	push   ebx
c000b603:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b605:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b60b:	50                   	push   eax
c000b60c:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000b60f:	83 c4 10             	add    esp,0x10
c000b612:	83 c4 08             	add    esp,0x8
c000b615:	5b                   	pop    ebx
c000b616:	c3                   	ret    
c000b617:	90                   	nop

c000b618 <Directory::unlink()>:
c000b618:	83 ec 0c             	sub    esp,0xc
c000b61b:	b8 0b 00 00 00       	mov    eax,0xb
c000b620:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b624:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b62b:	83 f9 19             	cmp    ecx,0x19
c000b62e:	77 2f                	ja     c000b65f <Directory::unlink()+0x47>
c000b630:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b637:	85 c9                	test   ecx,ecx
c000b639:	74 24                	je     c000b65f <Directory::unlink()+0x47>
c000b63b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b641:	85 c9                	test   ecx,ecx
c000b643:	74 1a                	je     c000b65f <Directory::unlink()+0x47>
c000b645:	b8 06 00 00 00       	mov    eax,0x6
c000b64a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b64e:	75 0f                	jne    c000b65f <Directory::unlink()+0x47>
c000b650:	83 c2 0d             	add    edx,0xd
c000b653:	50                   	push   eax
c000b654:	50                   	push   eax
c000b655:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b657:	52                   	push   edx
c000b658:	51                   	push   ecx
c000b659:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b65c:	83 c4 10             	add    esp,0x10
c000b65f:	83 c4 0c             	add    esp,0xc
c000b662:	c3                   	ret    
c000b663:	90                   	nop

c000b664 <Directory::rename(char const*)>:
c000b664:	83 ec 0c             	sub    esp,0xc
c000b667:	b8 0b 00 00 00       	mov    eax,0xb
c000b66c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b670:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b677:	83 f9 19             	cmp    ecx,0x19
c000b67a:	77 32                	ja     c000b6ae <Directory::rename(char const*)+0x4a>
c000b67c:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b683:	85 c9                	test   ecx,ecx
c000b685:	74 27                	je     c000b6ae <Directory::rename(char const*)+0x4a>
c000b687:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b68d:	85 c9                	test   ecx,ecx
c000b68f:	74 1d                	je     c000b6ae <Directory::rename(char const*)+0x4a>
c000b691:	b8 06 00 00 00       	mov    eax,0x6
c000b696:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b69a:	75 12                	jne    c000b6ae <Directory::rename(char const*)+0x4a>
c000b69c:	83 c2 0d             	add    edx,0xd
c000b69f:	50                   	push   eax
c000b6a0:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b6a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b6a6:	52                   	push   edx
c000b6a7:	51                   	push   ecx
c000b6a8:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b6ab:	83 c4 10             	add    esp,0x10
c000b6ae:	83 c4 0c             	add    esp,0xc
c000b6b1:	c3                   	ret    

c000b6b2 <Directory::exists()>:
c000b6b2:	83 ec 0c             	sub    esp,0xc
c000b6b5:	31 c0                	xor    eax,eax
c000b6b7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b6bb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b6c2:	83 f9 19             	cmp    ecx,0x19
c000b6c5:	77 24                	ja     c000b6eb <Directory::exists()+0x39>
c000b6c7:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b6ce:	85 c9                	test   ecx,ecx
c000b6d0:	74 19                	je     c000b6eb <Directory::exists()+0x39>
c000b6d2:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b6d8:	85 c9                	test   ecx,ecx
c000b6da:	74 0f                	je     c000b6eb <Directory::exists()+0x39>
c000b6dc:	83 c2 0d             	add    edx,0xd
c000b6df:	50                   	push   eax
c000b6e0:	50                   	push   eax
c000b6e1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b6e3:	52                   	push   edx
c000b6e4:	51                   	push   ecx
c000b6e5:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b6e8:	83 c4 10             	add    esp,0x10
c000b6eb:	83 c4 0c             	add    esp,0xc
c000b6ee:	c3                   	ret    
c000b6ef:	90                   	nop

c000b6f0 <Directory::read(dirent*)>:
c000b6f0:	83 ec 1c             	sub    esp,0x1c
c000b6f3:	b8 0b 00 00 00       	mov    eax,0xb
c000b6f8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b6fc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b703:	83 f9 19             	cmp    ecx,0x19
c000b706:	77 30                	ja     c000b738 <Directory::read(dirent*)+0x48>
c000b708:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b70f:	85 c9                	test   ecx,ecx
c000b711:	74 25                	je     c000b738 <Directory::read(dirent*)+0x48>
c000b713:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000b71a:	74 1c                	je     c000b738 <Directory::read(dirent*)+0x48>
c000b71c:	83 ec 0c             	sub    esp,0xc
c000b71f:	8b 02                	mov    eax,DWORD PTR [edx]
c000b721:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000b725:	51                   	push   ecx
c000b726:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b72a:	6a 00                	push   0x0
c000b72c:	68 10 01 00 00       	push   0x110
c000b731:	52                   	push   edx
c000b732:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b735:	83 c4 20             	add    esp,0x20
c000b738:	83 c4 1c             	add    esp,0x1c
c000b73b:	c3                   	ret    

c000b73c <Directory::create()>:
c000b73c:	83 ec 0c             	sub    esp,0xc
c000b73f:	b8 0b 00 00 00       	mov    eax,0xb
c000b744:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b748:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b74f:	83 f9 19             	cmp    ecx,0x19
c000b752:	77 2f                	ja     c000b783 <Directory::create()+0x47>
c000b754:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b75b:	85 c9                	test   ecx,ecx
c000b75d:	74 24                	je     c000b783 <Directory::create()+0x47>
c000b75f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b765:	85 c9                	test   ecx,ecx
c000b767:	74 1a                	je     c000b783 <Directory::create()+0x47>
c000b769:	b8 06 00 00 00       	mov    eax,0x6
c000b76e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b772:	75 0f                	jne    c000b783 <Directory::create()+0x47>
c000b774:	83 c2 0d             	add    edx,0xd
c000b777:	50                   	push   eax
c000b778:	50                   	push   eax
c000b779:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b77b:	52                   	push   edx
c000b77c:	51                   	push   ecx
c000b77d:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b780:	83 c4 10             	add    esp,0x10
c000b783:	83 c4 0c             	add    esp,0xc
c000b786:	c3                   	ret    
c000b787:	90                   	nop

c000b788 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b788:	b8 0a 00 00 00       	mov    eax,0xa
c000b78d:	c3                   	ret    
c000b78e:	66 90                	xchg   ax,ax

c000b790 <Bus::Bus(char const*)>:
c000b790:	83 ec 0c             	sub    esp,0xc
c000b793:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b797:	83 ec 08             	sub    esp,0x8
c000b79a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79e:	50                   	push   eax
c000b79f:	e8 22 08 00 00       	call   c000bfc6 <Device::Device(char const*)>
c000b7a4:	83 c4 10             	add    esp,0x10
c000b7a7:	ba 98 03 02 c0       	mov    edx,0xc0020398
c000b7ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7b0:	89 10                	mov    DWORD PTR [eax],edx
c000b7b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7b6:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b7c0:	90                   	nop
c000b7c1:	83 c4 0c             	add    esp,0xc
c000b7c4:	c3                   	ret    
c000b7c5:	90                   	nop
c000b7c6:	66 90                	xchg   ax,ax

c000b7c8 <Bus::~Bus()>:
c000b7c8:	83 ec 0c             	sub    esp,0xc
c000b7cb:	ba 98 03 02 c0       	mov    edx,0xc0020398
c000b7d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7d4:	89 10                	mov    DWORD PTR [eax],edx
c000b7d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7da:	83 ec 0c             	sub    esp,0xc
c000b7dd:	50                   	push   eax
c000b7de:	e8 4d 05 00 00       	call   c000bd30 <Device::~Device()>
c000b7e3:	83 c4 10             	add    esp,0x10
c000b7e6:	90                   	nop
c000b7e7:	83 c4 0c             	add    esp,0xc
c000b7ea:	c3                   	ret    
c000b7eb:	90                   	nop

c000b7ec <Bus::~Bus()>:
c000b7ec:	83 ec 0c             	sub    esp,0xc
c000b7ef:	83 ec 0c             	sub    esp,0xc
c000b7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f6:	e8 cd ff ff ff       	call   c000b7c8 <Bus::~Bus()>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	83 ec 08             	sub    esp,0x8
c000b801:	68 58 01 00 00       	push   0x158
c000b806:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b80a:	e8 bb f0 ff ff       	call   c000a8ca <operator delete(void*, unsigned long)>
c000b80f:	83 c4 10             	add    esp,0x10
c000b812:	83 c4 0c             	add    esp,0xc
c000b815:	c3                   	ret    

c000b816 <beepThread(void*)>:
c000b816:	83 ec 0c             	sub    esp,0xc
c000b819:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000b81e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b822:	48                   	dec    eax
c000b823:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000b828:	75 01                	jne    c000b82b <beepThread(void*)+0x15>
c000b82a:	fb                   	sti    
c000b82b:	83 ec 0c             	sub    esp,0xc
c000b82e:	6b c2 0a             	imul   eax,edx,0xa
c000b831:	50                   	push   eax
c000b832:	e8 d5 9b 00 00       	call   c001540c <milliTenthSleep(unsigned int)>
c000b837:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b83e:	e8 b4 ba 00 00       	call   c00172f7 <HalMakeBeep(int)>
c000b843:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b84b:	83 c4 1c             	add    esp,0x1c
c000b84e:	e9 9d 9a 00 00       	jmp    c00152f0 <blockTask(TaskState)>

c000b853 <Krnl::beep(int, int, bool)>:
c000b853:	56                   	push   esi
c000b854:	53                   	push   ebx
c000b855:	83 ec 10             	sub    esp,0x10
c000b858:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b85c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b860:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b864:	e8 8e ba 00 00       	call   c00172f7 <HalMakeBeep(int)>
c000b869:	83 c4 10             	add    esp,0x10
c000b86c:	89 f0                	mov    eax,esi
c000b86e:	84 c0                	test   al,al
c000b870:	74 1e                	je     c000b890 <Krnl::beep(int, int, bool)+0x3d>
c000b872:	83 ec 0c             	sub    esp,0xc
c000b875:	6b db 0a             	imul   ebx,ebx,0xa
c000b878:	53                   	push   ebx
c000b879:	e8 8e 9b 00 00       	call   c001540c <milliTenthSleep(unsigned int)>
c000b87e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b886:	83 c4 14             	add    esp,0x14
c000b889:	5b                   	pop    ebx
c000b88a:	5e                   	pop    esi
c000b88b:	e9 67 ba 00 00       	jmp    c00172f7 <HalMakeBeep(int)>
c000b890:	68 e6 00 00 00       	push   0xe6
c000b895:	53                   	push   ebx
c000b896:	68 16 b8 00 c0       	push   0xc000b816
c000b89b:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c000b8a1:	e8 e6 95 00 00       	call   c0014e8c <Process::createThread(void (*)(void*), void*, int)>
c000b8a6:	83 c4 14             	add    esp,0x14
c000b8a9:	5b                   	pop    ebx
c000b8aa:	5e                   	pop    esi
c000b8ab:	c3                   	ret    

c000b8ac <User::loadClockSettings(int)>:
c000b8ac:	53                   	push   ebx
c000b8ad:	83 ec 14             	sub    esp,0x14
c000b8b0:	68 14 01 00 00       	push   0x114
c000b8b5:	e8 f4 c1 ff ff       	call   c0007aae <malloc>
c000b8ba:	83 c4 0c             	add    esp,0xc
c000b8bd:	89 c3                	mov    ebx,eax
c000b8bf:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c000b8c5:	68 bc 03 02 c0       	push   0xc00203bc
c000b8ca:	50                   	push   eax
c000b8cb:	e8 aa f6 ff ff       	call   c000af7a <File::File(char const*, Process*)>
c000b8d0:	58                   	pop    eax
c000b8d1:	5a                   	pop    edx
c000b8d2:	6a 01                	push   0x1
c000b8d4:	53                   	push   ebx
c000b8d5:	e8 5c f7 ff ff       	call   c000b036 <File::open(FileOpenMode)>
c000b8da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b8dd:	e8 b2 f7 ff ff       	call   c000b094 <File::close()>
c000b8e2:	83 c4 10             	add    esp,0x10
c000b8e5:	85 db                	test   ebx,ebx
c000b8e7:	74 0f                	je     c000b8f8 <User::loadClockSettings(int)+0x4c>
c000b8e9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b8eb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b8ef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b8f2:	83 c4 08             	add    esp,0x8
c000b8f5:	5b                   	pop    ebx
c000b8f6:	ff e0                	jmp    eax
c000b8f8:	83 c4 08             	add    esp,0x8
c000b8fb:	5b                   	pop    ebx
c000b8fc:	c3                   	ret    
c000b8fd:	90                   	nop

c000b8fe <Clock::Clock(char const*)>:
c000b8fe:	83 ec 0c             	sub    esp,0xc
c000b901:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b905:	83 ec 08             	sub    esp,0x8
c000b908:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b90c:	50                   	push   eax
c000b90d:	e8 b4 06 00 00       	call   c000bfc6 <Device::Device(char const*)>
c000b912:	83 c4 10             	add    esp,0x10
c000b915:	ba e4 03 02 c0       	mov    edx,0xc00203e4
c000b91a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b91e:	89 10                	mov    DWORD PTR [eax],edx
c000b920:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b924:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b92e:	90                   	nop
c000b92f:	83 c4 0c             	add    esp,0xc
c000b932:	c3                   	ret    
c000b933:	90                   	nop

c000b934 <Clock::~Clock()>:
c000b934:	83 ec 0c             	sub    esp,0xc
c000b937:	ba e4 03 02 c0       	mov    edx,0xc00203e4
c000b93c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b940:	89 10                	mov    DWORD PTR [eax],edx
c000b942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b946:	83 ec 0c             	sub    esp,0xc
c000b949:	50                   	push   eax
c000b94a:	e8 e1 03 00 00       	call   c000bd30 <Device::~Device()>
c000b94f:	83 c4 10             	add    esp,0x10
c000b952:	90                   	nop
c000b953:	83 c4 0c             	add    esp,0xc
c000b956:	c3                   	ret    
c000b957:	90                   	nop

c000b958 <Clock::~Clock()>:
c000b958:	83 ec 0c             	sub    esp,0xc
c000b95b:	83 ec 0c             	sub    esp,0xc
c000b95e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b962:	e8 cd ff ff ff       	call   c000b934 <Clock::~Clock()>
c000b967:	83 c4 10             	add    esp,0x10
c000b96a:	83 ec 08             	sub    esp,0x8
c000b96d:	68 58 01 00 00       	push   0x158
c000b972:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b976:	e8 4f ef ff ff       	call   c000a8ca <operator delete(void*, unsigned long)>
c000b97b:	83 c4 10             	add    esp,0x10
c000b97e:	83 c4 0c             	add    esp,0xc
c000b981:	c3                   	ret    

c000b982 <Clock::timeInSecondsLocal()>:
c000b982:	53                   	push   ebx
c000b983:	83 ec 14             	sub    esp,0x14
c000b986:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b98a:	8b 10                	mov    edx,DWORD PTR [eax]
c000b98c:	50                   	push   eax
c000b98d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b990:	0f b6 0d b8 4f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024fb8
c000b997:	03 0d bc 4f 02 c0    	add    ecx,DWORD PTR ds:0xc0024fbc
c000b99d:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b9a3:	89 cb                	mov    ebx,ecx
c000b9a5:	c1 fb 1f             	sar    ebx,0x1f
c000b9a8:	01 c8                	add    eax,ecx
c000b9aa:	11 da                	adc    edx,ebx
c000b9ac:	83 c4 10             	add    esp,0x10
c000b9af:	31 c9                	xor    ecx,ecx
c000b9b1:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000b9b8:	74 05                	je     c000b9bf <Clock::timeInSecondsLocal()+0x3d>
c000b9ba:	b9 08 07 00 00       	mov    ecx,0x708
c000b9bf:	31 db                	xor    ebx,ebx
c000b9c1:	01 c8                	add    eax,ecx
c000b9c3:	11 da                	adc    edx,ebx
c000b9c5:	83 c4 08             	add    esp,0x8
c000b9c8:	5b                   	pop    ebx
c000b9c9:	c3                   	ret    

c000b9ca <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b9ca:	57                   	push   edi
c000b9cb:	56                   	push   esi
c000b9cc:	53                   	push   ebx
c000b9cd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b9d1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b9d5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b9d7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b9db:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b9de:	0f b6 05 b8 4f 02 c0 	movzx  eax,BYTE PTR ds:0xc0024fb8
c000b9e5:	03 05 bc 4f 02 c0    	add    eax,DWORD PTR ds:0xc0024fbc
c000b9eb:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b9f1:	99                   	cdq    
c000b9f2:	29 c6                	sub    esi,eax
c000b9f4:	19 d7                	sbb    edi,edx
c000b9f6:	89 f0                	mov    eax,esi
c000b9f8:	89 fa                	mov    edx,edi
c000b9fa:	31 f6                	xor    esi,esi
c000b9fc:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000ba03:	74 05                	je     c000ba0a <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000ba05:	be 08 07 00 00       	mov    esi,0x708
c000ba0a:	31 ff                	xor    edi,edi
c000ba0c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000ba10:	29 f0                	sub    eax,esi
c000ba12:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ba16:	19 fa                	sbb    edx,edi
c000ba18:	89 d8                	mov    eax,ebx
c000ba1a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ba1e:	5b                   	pop    ebx
c000ba1f:	5e                   	pop    esi
c000ba20:	5f                   	pop    edi
c000ba21:	ff e0                	jmp    eax

c000ba23 <datetimeToSeconds(datetime_t)>:
c000ba23:	55                   	push   ebp
c000ba24:	57                   	push   edi
c000ba25:	56                   	push   esi
c000ba26:	53                   	push   ebx
c000ba27:	83 ec 0c             	sub    esp,0xc
c000ba2a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ba2e:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000ba32:	89 d6                	mov    esi,edx
c000ba34:	0f b6 c7             	movzx  eax,bh
c000ba37:	c1 ee 10             	shr    esi,0x10
c000ba3a:	6b e8 3c             	imul   ebp,eax,0x3c
c000ba3d:	81 ee 6c 07 00 00    	sub    esi,0x76c
c000ba43:	0f b6 ce             	movzx  ecx,dh
c000ba46:	89 df                	mov    edi,ebx
c000ba48:	49                   	dec    ecx
c000ba49:	c1 ef 10             	shr    edi,0x10
c000ba4c:	0f b6 db             	movzx  ebx,bl
c000ba4f:	89 f8                	mov    eax,edi
c000ba51:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c000ba57:	0f b6 f8             	movzx  edi,al
c000ba5a:	0f b6 d2             	movzx  edx,dl
c000ba5d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000ba61:	01 d8                	add    eax,ebx
c000ba63:	0f b7 de             	movzx  ebx,si
c000ba66:	89 04 24             	mov    DWORD PTR [esp],eax
c000ba69:	c1 f8 1f             	sar    eax,0x1f
c000ba6c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ba70:	0f b6 c1             	movzx  eax,cl
c000ba73:	8b 0c 85 20 04 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdfbe0]
c000ba7a:	83 f8 01             	cmp    eax,0x1
c000ba7d:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000ba81:	76 27                	jbe    c000baaa <datetimeToSeconds(datetime_t)+0x87>
c000ba83:	83 e6 03             	and    esi,0x3
c000ba86:	75 22                	jne    c000baaa <datetimeToSeconds(datetime_t)+0x87>
c000ba88:	31 d2                	xor    edx,edx
c000ba8a:	be 64 00 00 00       	mov    esi,0x64
c000ba8f:	89 d8                	mov    eax,ebx
c000ba91:	f7 f6                	div    esi
c000ba93:	85 d2                	test   edx,edx
c000ba95:	75 12                	jne    c000baa9 <datetimeToSeconds(datetime_t)+0x86>
c000ba97:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000ba9d:	be 90 01 00 00       	mov    esi,0x190
c000baa2:	99                   	cdq    
c000baa3:	f7 fe                	idiv   esi
c000baa5:	85 d2                	test   edx,edx
c000baa7:	75 01                	jne    c000baaa <datetimeToSeconds(datetime_t)+0x87>
c000baa9:	41                   	inc    ecx
c000baaa:	83 fb 46             	cmp    ebx,0x46
c000baad:	76 48                	jbe    c000baf7 <datetimeToSeconds(datetime_t)+0xd4>
c000baaf:	be 46 00 00 00       	mov    esi,0x46
c000bab4:	bf 64 00 00 00       	mov    edi,0x64
c000bab9:	bd 90 01 00 00       	mov    ebp,0x190
c000babe:	b8 6d 01 00 00       	mov    eax,0x16d
c000bac3:	f7 c6 03 00 00 00    	test   esi,0x3
c000bac9:	75 23                	jne    c000baee <datetimeToSeconds(datetime_t)+0xcb>
c000bacb:	89 f0                	mov    eax,esi
c000bacd:	99                   	cdq    
c000bace:	f7 ff                	idiv   edi
c000bad0:	b8 6e 01 00 00       	mov    eax,0x16e
c000bad5:	85 d2                	test   edx,edx
c000bad7:	75 15                	jne    c000baee <datetimeToSeconds(datetime_t)+0xcb>
c000bad9:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000badf:	99                   	cdq    
c000bae0:	f7 fd                	idiv   ebp
c000bae2:	83 fa 01             	cmp    edx,0x1
c000bae5:	19 c0                	sbb    eax,eax
c000bae7:	f7 d0                	not    eax
c000bae9:	05 6e 01 00 00       	add    eax,0x16e
c000baee:	01 c1                	add    ecx,eax
c000baf0:	46                   	inc    esi
c000baf1:	39 de                	cmp    esi,ebx
c000baf3:	7c c9                	jl     c000babe <datetimeToSeconds(datetime_t)+0x9b>
c000baf5:	eb 34                	jmp    c000bb2b <datetimeToSeconds(datetime_t)+0x108>
c000baf7:	74 32                	je     c000bb2b <datetimeToSeconds(datetime_t)+0x108>
c000baf9:	b8 45 00 00 00       	mov    eax,0x45
c000bafe:	89 c2                	mov    edx,eax
c000bb00:	83 e2 03             	and    edx,0x3
c000bb03:	39 d8                	cmp    eax,ebx
c000bb05:	7e 0f                	jle    c000bb16 <datetimeToSeconds(datetime_t)+0xf3>
c000bb07:	83 fa 01             	cmp    edx,0x1
c000bb0a:	19 d2                	sbb    edx,edx
c000bb0c:	48                   	dec    eax
c000bb0d:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000bb14:	eb e8                	jmp    c000bafe <datetimeToSeconds(datetime_t)+0xdb>
c000bb16:	b8 6d 01 00 00       	mov    eax,0x16d
c000bb1b:	85 d2                	test   edx,edx
c000bb1d:	75 0a                	jne    c000bb29 <datetimeToSeconds(datetime_t)+0x106>
c000bb1f:	83 fb 01             	cmp    ebx,0x1
c000bb22:	19 c0                	sbb    eax,eax
c000bb24:	05 6e 01 00 00       	add    eax,0x16e
c000bb29:	29 c1                	sub    ecx,eax
c000bb2b:	b8 80 51 01 00       	mov    eax,0x15180
c000bb30:	f7 e9                	imul   ecx
c000bb32:	03 04 24             	add    eax,DWORD PTR [esp]
c000bb35:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000bb39:	83 c4 0c             	add    esp,0xc
c000bb3c:	5b                   	pop    ebx
c000bb3d:	5e                   	pop    esi
c000bb3e:	5f                   	pop    edi
c000bb3f:	5d                   	pop    ebp
c000bb40:	c3                   	ret    
c000bb41:	90                   	nop

c000bb42 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000bb42:	57                   	push   edi
c000bb43:	56                   	push   esi
c000bb44:	53                   	push   ebx
c000bb45:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bb49:	8b 06                	mov    eax,DWORD PTR [esi]
c000bb4b:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000bb4e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb52:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb56:	e8 c8 fe ff ff       	call   c000ba23 <datetimeToSeconds(datetime_t)>
c000bb5b:	59                   	pop    ecx
c000bb5c:	0f b6 0d b8 4f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024fb8
c000bb63:	5b                   	pop    ebx
c000bb64:	03 0d bc 4f 02 c0    	add    ecx,DWORD PTR ds:0xc0024fbc
c000bb6a:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bb70:	89 cb                	mov    ebx,ecx
c000bb72:	c1 fb 1f             	sar    ebx,0x1f
c000bb75:	29 c8                	sub    eax,ecx
c000bb77:	19 da                	sbb    edx,ebx
c000bb79:	31 c9                	xor    ecx,ecx
c000bb7b:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000bb82:	74 05                	je     c000bb89 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000bb84:	b9 08 07 00 00       	mov    ecx,0x708
c000bb89:	31 db                	xor    ebx,ebx
c000bb8b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000bb8f:	29 c8                	sub    eax,ecx
c000bb91:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb95:	19 da                	sbb    edx,ebx
c000bb97:	89 f8                	mov    eax,edi
c000bb99:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb9d:	5b                   	pop    ebx
c000bb9e:	5e                   	pop    esi
c000bb9f:	5f                   	pop    edi
c000bba0:	ff e0                	jmp    eax

c000bba2 <secondsToDatetime(unsigned long long)>:
c000bba2:	55                   	push   ebp
c000bba3:	57                   	push   edi
c000bba4:	56                   	push   esi
c000bba5:	53                   	push   ebx
c000bba6:	83 ec 1c             	sub    esp,0x1c
c000bba9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bbad:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000bbb1:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000bbb5:	6a 00                	push   0x0
c000bbb7:	68 80 51 01 00       	push   0x15180
c000bbbc:	55                   	push   ebp
c000bbbd:	57                   	push   edi
c000bbbe:	e8 ad 2a 01 00       	call   c001e670 <__udivdi3>
c000bbc3:	83 c4 10             	add    esp,0x10
c000bbc6:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000bbcc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbd0:	6a 00                	push   0x0
c000bbd2:	68 80 51 01 00       	push   0x15180
c000bbd7:	55                   	push   ebp
c000bbd8:	57                   	push   edi
c000bbd9:	bf 10 0e 00 00       	mov    edi,0xe10
c000bbde:	e8 8d 2b 01 00       	call   c001e770 <__umoddi3>
c000bbe3:	83 c4 10             	add    esp,0x10
c000bbe6:	99                   	cdq    
c000bbe7:	f7 ff                	idiv   edi
c000bbe9:	bf 3c 00 00 00       	mov    edi,0x3c
c000bbee:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000bbf1:	89 d0                	mov    eax,edx
c000bbf3:	99                   	cdq    
c000bbf4:	f7 ff                	idiv   edi
c000bbf6:	85 db                	test   ebx,ebx
c000bbf8:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000bbfb:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000bbfe:	79 11                	jns    c000bc11 <secondsToDatetime(unsigned long long)+0x6f>
c000bc00:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bc04:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000bc0a:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000bc0f:	eb 07                	jmp    c000bc18 <secondsToDatetime(unsigned long long)+0x76>
c000bc11:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000bc16:	89 d8                	mov    eax,ebx
c000bc18:	bf b4 05 00 00       	mov    edi,0x5b4
c000bc1d:	99                   	cdq    
c000bc1e:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000bc23:	f7 f9                	idiv   ecx
c000bc25:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000bc2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc2e:	31 d2                	xor    edx,edx
c000bc30:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000bc38:	01 c3                	add    ebx,eax
c000bc3a:	89 d8                	mov    eax,ebx
c000bc3c:	f7 f1                	div    ecx
c000bc3e:	31 d2                	xor    edx,edx
c000bc40:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000bc43:	89 d8                	mov    eax,ebx
c000bc45:	f7 f7                	div    edi
c000bc47:	31 d2                	xor    edx,edx
c000bc49:	29 c1                	sub    ecx,eax
c000bc4b:	89 d8                	mov    eax,ebx
c000bc4d:	f7 f5                	div    ebp
c000bc4f:	bd 6d 01 00 00       	mov    ebp,0x16d
c000bc54:	29 c1                	sub    ecx,eax
c000bc56:	31 d2                	xor    edx,edx
c000bc58:	89 c8                	mov    eax,ecx
c000bc5a:	f7 f5                	div    ebp
c000bc5c:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000bc61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bc65:	31 d2                	xor    edx,edx
c000bc67:	89 c8                	mov    eax,ecx
c000bc69:	f7 f5                	div    ebp
c000bc6b:	31 d2                	xor    edx,edx
c000bc6d:	01 c3                	add    ebx,eax
c000bc6f:	89 c8                	mov    eax,ecx
c000bc71:	f7 f7                	div    edi
c000bc73:	bf 99 00 00 00       	mov    edi,0x99
c000bc78:	29 c3                	sub    ebx,eax
c000bc7a:	31 d2                	xor    edx,edx
c000bc7c:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000bc84:	29 c3                	sub    ebx,eax
c000bc86:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000bc89:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000bc8c:	bb 05 00 00 00       	mov    ebx,0x5
c000bc91:	83 c1 02             	add    ecx,0x2
c000bc94:	89 c8                	mov    eax,ecx
c000bc96:	f7 f7                	div    edi
c000bc98:	31 d2                	xor    edx,edx
c000bc9a:	89 c7                	mov    edi,eax
c000bc9c:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000bca2:	83 c0 02             	add    eax,0x2
c000bca5:	f7 f3                	div    ebx
c000bca7:	89 eb                	mov    ebx,ebp
c000bca9:	29 c3                	sub    ebx,eax
c000bcab:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000bcb1:	88 1e                	mov    BYTE PTR [esi],bl
c000bcb3:	19 c0                	sbb    eax,eax
c000bcb5:	31 d2                	xor    edx,edx
c000bcb7:	83 e0 0c             	and    eax,0xc
c000bcba:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000bcbe:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000bcc6:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000bcca:	83 f9 01             	cmp    ecx,0x1
c000bccd:	0f 96 c2             	setbe  dl
c000bcd0:	41                   	inc    ecx
c000bcd1:	01 d0                	add    eax,edx
c000bcd3:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000bcd6:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000bcda:	83 c4 1c             	add    esp,0x1c
c000bcdd:	89 f0                	mov    eax,esi
c000bcdf:	5b                   	pop    ebx
c000bce0:	5e                   	pop    esi
c000bce1:	5f                   	pop    edi
c000bce2:	5d                   	pop    ebp
c000bce3:	c2 04 00             	ret    0x4

c000bce6 <Clock::timeInDatetimeLocal()>:
c000bce6:	53                   	push   ebx
c000bce7:	83 ec 14             	sub    esp,0x14
c000bcea:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bcee:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bcf2:	e8 8b fc ff ff       	call   c000b982 <Clock::timeInSecondsLocal()>
c000bcf7:	83 c4 0c             	add    esp,0xc
c000bcfa:	52                   	push   edx
c000bcfb:	50                   	push   eax
c000bcfc:	53                   	push   ebx
c000bcfd:	e8 a0 fe ff ff       	call   c000bba2 <secondsToDatetime(unsigned long long)>
c000bd02:	89 d8                	mov    eax,ebx
c000bd04:	83 c4 14             	add    esp,0x14
c000bd07:	5b                   	pop    ebx
c000bd08:	c2 04 00             	ret    0x4
c000bd0b:	90                   	nop

c000bd0c <Device::hibernate()>:
c000bd0c:	c3                   	ret    
c000bd0d:	90                   	nop

c000bd0e <Device::wake()>:
c000bd0e:	c3                   	ret    
c000bd0f:	90                   	nop

c000bd10 <Device::detect()>:
c000bd10:	c3                   	ret    
c000bd11:	90                   	nop

c000bd12 <Device::disableLegacy()>:
c000bd12:	c3                   	ret    
c000bd13:	90                   	nop

c000bd14 <Device::powerSaving(PowerSavingLevel)>:
c000bd14:	c3                   	ret    
c000bd15:	90                   	nop

c000bd16 <DriverlessDevice::close(int, int, void*)>:
c000bd16:	31 c0                	xor    eax,eax
c000bd18:	c3                   	ret    
c000bd19:	90                   	nop

c000bd1a <DriverlessDevice::detect()>:
c000bd1a:	c3                   	ret    
c000bd1b:	90                   	nop

c000bd1c <DriverlessDevice::open(int, int, void*)>:
c000bd1c:	83 ec 18             	sub    esp,0x18
c000bd1f:	68 50 04 02 c0       	push   0xc0020450
c000bd24:	e8 fe 4b 00 00       	call   c0010927 <KePanic(char const*)>
c000bd29:	83 c8 ff             	or     eax,0xffffffff
c000bd2c:	83 c4 1c             	add    esp,0x1c
c000bd2f:	c3                   	ret    

c000bd30 <Device::~Device()>:
c000bd30:	ba b0 04 02 c0       	mov    edx,0xc00204b0
c000bd35:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bd39:	89 10                	mov    DWORD PTR [eax],edx
c000bd3b:	90                   	nop
c000bd3c:	c3                   	ret    
c000bd3d:	90                   	nop

c000bd3e <Device::~Device()>:
c000bd3e:	83 ec 0c             	sub    esp,0xc
c000bd41:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bd45:	e8 e6 ff ff ff       	call   c000bd30 <Device::~Device()>
c000bd4a:	83 c4 04             	add    esp,0x4
c000bd4d:	83 ec 08             	sub    esp,0x8
c000bd50:	68 58 01 00 00       	push   0x158
c000bd55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd59:	e8 6c eb ff ff       	call   c000a8ca <operator delete(void*, unsigned long)>
c000bd5e:	83 c4 10             	add    esp,0x10
c000bd61:	83 c4 0c             	add    esp,0xc
c000bd64:	c3                   	ret    
c000bd65:	90                   	nop

c000bd66 <Device::findAndLoadDriver()>:
c000bd66:	c7 44 24 04 6e 04 02 c0 	mov    DWORD PTR [esp+0x4],0xc002046e
c000bd6e:	e9 84 ec ff ff       	jmp    c000a9f7 <Dbg::kprintf(char const*, ...)>
c000bd73:	90                   	nop

c000bd74 <Device::preOpenPCI(PCIDeviceInfo)>:
c000bd74:	57                   	push   edi
c000bd75:	b9 09 00 00 00       	mov    ecx,0x9
c000bd7a:	56                   	push   esi
c000bd7b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000bd7f:	8d 74 24 10          	lea    esi,[esp+0x10]
c000bd83:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000bd8d:	81 c7 18 01 00 00    	add    edi,0x118
c000bd93:	fc                   	cld    
c000bd94:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000bd96:	5e                   	pop    esi
c000bd97:	5f                   	pop    edi
c000bd98:	c3                   	ret    
c000bd99:	90                   	nop

c000bd9a <Device::preOpenACPI(void*, char*, char*)>:
c000bd9a:	57                   	push   edi
c000bd9b:	b9 1e 00 00 00       	mov    ecx,0x1e
c000bda0:	56                   	push   esi
c000bda1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bda5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bda9:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000bdb3:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000bdb9:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000bdbf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bdc3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bdc5:	b9 0e 00 00 00       	mov    ecx,0xe
c000bdca:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000bdd0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bdd4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bdd6:	5e                   	pop    esi
c000bdd7:	5f                   	pop    edi
c000bdd8:	c3                   	ret    
c000bdd9:	90                   	nop

c000bdda <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bdda:	53                   	push   ebx
c000bddb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bddf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bde3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bde7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bdeb:	0f b6 c0             	movzx  eax,al
c000bdee:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000bdf2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bdf6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bdfa:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000bdfe:	5b                   	pop    ebx
c000bdff:	e9 a8 05 00 00       	jmp    c000c3ac <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000be04 <Device::getParent()>:
c000be04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000be08:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000be0e:	c3                   	ret    
c000be0f:	90                   	nop

c000be10 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000be10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000be14:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000be18:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000be1d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000be21:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000be25:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000be29:	e9 e6 06 00 00       	jmp    c000c514 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000be2e <Device::addChild(Device*)>:
c000be2e:	53                   	push   ebx
c000be2f:	83 ec 08             	sub    esp,0x8
c000be32:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be36:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000be3a:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000be40:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000be46:	8b 13                	mov    edx,DWORD PTR [ebx]
c000be48:	85 d2                	test   edx,edx
c000be4a:	74 04                	je     c000be50 <Device::addChild(Device*)+0x22>
c000be4c:	89 d3                	mov    ebx,edx
c000be4e:	eb f6                	jmp    c000be46 <Device::addChild(Device*)+0x18>
c000be50:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000be53:	83 ec 0c             	sub    esp,0xc
c000be56:	6a 08                	push   0x8
c000be58:	e8 51 bc ff ff       	call   c0007aae <malloc>
c000be5d:	89 03                	mov    DWORD PTR [ebx],eax
c000be5f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000be65:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000be6c:	83 c4 18             	add    esp,0x18
c000be6f:	5b                   	pop    ebx
c000be70:	c3                   	ret    
c000be71:	90                   	nop

c000be72 <Device::removeAllChildren()>:
c000be72:	56                   	push   esi
c000be73:	53                   	push   ebx
c000be74:	52                   	push   edx
c000be75:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000be79:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000be7f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000be82:	74 17                	je     c000be9b <Device::removeAllChildren()+0x29>
c000be84:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000be87:	85 c0                	test   eax,eax
c000be89:	74 0c                	je     c000be97 <Device::removeAllChildren()+0x25>
c000be8b:	83 ec 0c             	sub    esp,0xc
c000be8e:	8b 10                	mov    edx,DWORD PTR [eax]
c000be90:	50                   	push   eax
c000be91:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000be94:	83 c4 10             	add    esp,0x10
c000be97:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000be99:	eb e4                	jmp    c000be7f <Device::removeAllChildren()+0xd>
c000be9b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000bea1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bea7:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000bead:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000beb4:	58                   	pop    eax
c000beb5:	5b                   	pop    ebx
c000beb6:	5e                   	pop    esi
c000beb7:	c3                   	ret    

c000beb8 <Device::hibernateAll()>:
c000beb8:	53                   	push   ebx
c000beb9:	83 ec 14             	sub    esp,0x14
c000bebc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bec0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bec2:	53                   	push   ebx
c000bec3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000bec6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000becc:	83 c4 10             	add    esp,0x10
c000becf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bed2:	74 0f                	je     c000bee3 <Device::hibernateAll()+0x2b>
c000bed4:	83 ec 0c             	sub    esp,0xc
c000bed7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000beda:	e8 d9 ff ff ff       	call   c000beb8 <Device::hibernateAll()>
c000bedf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bee1:	eb e9                	jmp    c000becc <Device::hibernateAll()+0x14>
c000bee3:	83 c4 08             	add    esp,0x8
c000bee6:	5b                   	pop    ebx
c000bee7:	c3                   	ret    

c000bee8 <Device::wakeAll()>:
c000bee8:	53                   	push   ebx
c000bee9:	83 ec 14             	sub    esp,0x14
c000beec:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bef0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bef2:	53                   	push   ebx
c000bef3:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000bef6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000befc:	83 c4 10             	add    esp,0x10
c000beff:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bf02:	74 0f                	je     c000bf13 <Device::wakeAll()+0x2b>
c000bf04:	83 ec 0c             	sub    esp,0xc
c000bf07:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bf0a:	e8 d9 ff ff ff       	call   c000bee8 <Device::wakeAll()>
c000bf0f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bf11:	eb e9                	jmp    c000befc <Device::wakeAll()+0x14>
c000bf13:	83 c4 08             	add    esp,0x8
c000bf16:	5b                   	pop    ebx
c000bf17:	c3                   	ret    

c000bf18 <Device::detectAll()>:
c000bf18:	53                   	push   ebx
c000bf19:	83 ec 14             	sub    esp,0x14
c000bf1c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bf20:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf22:	53                   	push   ebx
c000bf23:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000bf26:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bf2c:	83 c4 10             	add    esp,0x10
c000bf2f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bf32:	74 0f                	je     c000bf43 <Device::detectAll()+0x2b>
c000bf34:	83 ec 0c             	sub    esp,0xc
c000bf37:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bf3a:	e8 d9 ff ff ff       	call   c000bf18 <Device::detectAll()>
c000bf3f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bf41:	eb e9                	jmp    c000bf2c <Device::detectAll()+0x14>
c000bf43:	83 c4 08             	add    esp,0x8
c000bf46:	5b                   	pop    ebx
c000bf47:	c3                   	ret    

c000bf48 <Device::disableLegacyAll()>:
c000bf48:	c3                   	ret    
c000bf49:	90                   	nop

c000bf4a <Device::loadDriversForAll()>:
c000bf4a:	c3                   	ret    
c000bf4b:	90                   	nop

c000bf4c <Device::closeAll()>:
c000bf4c:	53                   	push   ebx
c000bf4d:	83 ec 08             	sub    esp,0x8
c000bf50:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bf54:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf56:	6a 00                	push   0x0
c000bf58:	6a 00                	push   0x0
c000bf5a:	6a 00                	push   0x0
c000bf5c:	53                   	push   ebx
c000bf5d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bf60:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bf66:	83 c4 10             	add    esp,0x10
c000bf69:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bf6c:	74 0f                	je     c000bf7d <Device::closeAll()+0x31>
c000bf6e:	83 ec 0c             	sub    esp,0xc
c000bf71:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bf74:	e8 d3 ff ff ff       	call   c000bf4c <Device::closeAll()>
c000bf79:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bf7b:	eb e9                	jmp    c000bf66 <Device::closeAll()+0x1a>
c000bf7d:	83 c4 08             	add    esp,0x8
c000bf80:	5b                   	pop    ebx
c000bf81:	c3                   	ret    

c000bf82 <Device::powerSavingAll(PowerSavingLevel)>:
c000bf82:	56                   	push   esi
c000bf83:	53                   	push   ebx
c000bf84:	83 ec 0c             	sub    esp,0xc
c000bf87:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bf8b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000bf8f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf91:	56                   	push   esi
c000bf92:	53                   	push   ebx
c000bf93:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000bf96:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bf9c:	83 c4 10             	add    esp,0x10
c000bf9f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bfa2:	74 0f                	je     c000bfb3 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000bfa4:	52                   	push   edx
c000bfa5:	52                   	push   edx
c000bfa6:	56                   	push   esi
c000bfa7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bfaa:	e8 d3 ff ff ff       	call   c000bf82 <Device::powerSavingAll(PowerSavingLevel)>
c000bfaf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bfb1:	eb e9                	jmp    c000bf9c <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000bfb3:	58                   	pop    eax
c000bfb4:	5b                   	pop    ebx
c000bfb5:	5e                   	pop    esi
c000bfb6:	c3                   	ret    
c000bfb7:	90                   	nop

c000bfb8 <Device::setName(char const*)>:
c000bfb8:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000bfc0:	e9 7b 46 ff ff       	jmp    c0000640 <strcpy>
c000bfc5:	90                   	nop

c000bfc6 <Device::Device(char const*)>:
c000bfc6:	83 ec 1c             	sub    esp,0x1c
c000bfc9:	ba b0 04 02 c0       	mov    edx,0xc00204b0
c000bfce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfd2:	89 10                	mov    DWORD PTR [eax],edx
c000bfd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfd8:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000bfe2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfe6:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bff0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bff4:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bffe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c002:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c00c:	83 ec 08             	sub    esp,0x8
c000c00f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c013:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c017:	e8 9c ff ff ff       	call   c000bfb8 <Device::setName(char const*)>
c000c01c:	83 c4 10             	add    esp,0x10
c000c01f:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000c027:	83 ec 0c             	sub    esp,0xc
c000c02a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c02e:	e8 7b ba ff ff       	call   c0007aae <malloc>
c000c033:	83 c4 10             	add    esp,0x10
c000c036:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c03c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c043:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c047:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c04d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c051:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c057:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c05d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c061:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c067:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c06e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c072:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c079:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c07d:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c084:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c088:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c092:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c096:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c0a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c0a4:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c0ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c0b2:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000c0bc:	90                   	nop
c000c0bd:	83 c4 1c             	add    esp,0x1c
c000c0c0:	c3                   	ret    
c000c0c1:	90                   	nop

c000c0c2 <Device::getName()>:
c000c0c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c0c6:	05 d0 00 00 00       	add    eax,0xd0
c000c0cb:	c3                   	ret    

c000c0cc <DriverlessDevice::DriverlessDevice(char const*)>:
c000c0cc:	83 ec 0c             	sub    esp,0xc
c000c0cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0d3:	83 ec 08             	sub    esp,0x8
c000c0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0da:	50                   	push   eax
c000c0db:	e8 e6 fe ff ff       	call   c000bfc6 <Device::Device(char const*)>
c000c0e0:	83 c4 10             	add    esp,0x10
c000c0e3:	ba dc 04 02 c0       	mov    edx,0xc00204dc
c000c0e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0ec:	89 10                	mov    DWORD PTR [eax],edx
c000c0ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0f2:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c0fc:	90                   	nop
c000c0fd:	83 c4 0c             	add    esp,0xc
c000c100:	c3                   	ret    
c000c101:	90                   	nop

c000c102 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c102:	57                   	push   edi
c000c103:	56                   	push   esi
c000c104:	53                   	push   ebx
c000c105:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c109:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c10d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c111:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c117:	75 0c                	jne    c000c125 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c119:	52                   	push   edx
c000c11a:	52                   	push   edx
c000c11b:	53                   	push   ebx
c000c11c:	56                   	push   esi
c000c11d:	e8 00 2a 01 00       	call   c001eb22 <LinkedList<Device>::addElement(Device*)>
c000c122:	83 c4 10             	add    esp,0x10
c000c125:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c12b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c12e:	74 12                	je     c000c142 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c130:	50                   	push   eax
c000c131:	57                   	push   edi
c000c132:	56                   	push   esi
c000c133:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c136:	e8 c7 ff ff ff       	call   c000c102 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c13b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c13d:	83 c4 10             	add    esp,0x10
c000c140:	eb e9                	jmp    c000c12b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c142:	5b                   	pop    ebx
c000c143:	5e                   	pop    esi
c000c144:	5f                   	pop    edi
c000c145:	c3                   	ret    

c000c146 <getDevicesOfType(DeviceType)>:
c000c146:	53                   	push   ebx
c000c147:	83 ec 14             	sub    esp,0x14
c000c14a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c14e:	53                   	push   ebx
c000c14f:	e8 aa 2a 01 00       	call   c001ebfe <LinkedList<Device>::LinkedList()>
c000c154:	83 c4 0c             	add    esp,0xc
c000c157:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c15b:	53                   	push   ebx
c000c15c:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000c162:	e8 9b ff ff ff       	call   c000c102 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c167:	89 d8                	mov    eax,ebx
c000c169:	83 c4 18             	add    esp,0x18
c000c16c:	5b                   	pop    ebx
c000c16d:	c2 04 00             	ret    0x4

c000c170 <HardDiskController::HardDiskController(char const*)>:
c000c170:	83 ec 0c             	sub    esp,0xc
c000c173:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c177:	83 ec 08             	sub    esp,0x8
c000c17a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c17e:	50                   	push   eax
c000c17f:	e8 42 fe ff ff       	call   c000bfc6 <Device::Device(char const*)>
c000c184:	83 c4 10             	add    esp,0x10
c000c187:	ba 08 05 02 c0       	mov    edx,0xc0020508
c000c18c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c190:	89 10                	mov    DWORD PTR [eax],edx
c000c192:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c196:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000c1a0:	90                   	nop
c000c1a1:	83 c4 0c             	add    esp,0xc
c000c1a4:	c3                   	ret    
c000c1a5:	90                   	nop
c000c1a6:	66 90                	xchg   ax,ax

c000c1a8 <HardDiskController::~HardDiskController()>:
c000c1a8:	83 ec 0c             	sub    esp,0xc
c000c1ab:	ba 08 05 02 c0       	mov    edx,0xc0020508
c000c1b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1b4:	89 10                	mov    DWORD PTR [eax],edx
c000c1b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1ba:	83 ec 0c             	sub    esp,0xc
c000c1bd:	50                   	push   eax
c000c1be:	e8 6d fb ff ff       	call   c000bd30 <Device::~Device()>
c000c1c3:	83 c4 10             	add    esp,0x10
c000c1c6:	90                   	nop
c000c1c7:	83 c4 0c             	add    esp,0xc
c000c1ca:	c3                   	ret    
c000c1cb:	90                   	nop

c000c1cc <HardDiskController::~HardDiskController()>:
c000c1cc:	83 ec 0c             	sub    esp,0xc
c000c1cf:	83 ec 0c             	sub    esp,0xc
c000c1d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1d6:	e8 cd ff ff ff       	call   c000c1a8 <HardDiskController::~HardDiskController()>
c000c1db:	83 c4 10             	add    esp,0x10
c000c1de:	83 ec 08             	sub    esp,0x8
c000c1e1:	68 58 01 00 00       	push   0x158
c000c1e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1ea:	e8 db e6 ff ff       	call   c000a8ca <operator delete(void*, unsigned long)>
c000c1ef:	83 c4 10             	add    esp,0x10
c000c1f2:	83 c4 0c             	add    esp,0xc
c000c1f5:	c3                   	ret    

c000c1f6 <PhysicalDisk::eject()>:
c000c1f6:	83 c8 ff             	or     eax,0xffffffff
c000c1f9:	c3                   	ret    

c000c1fa <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000c1fa:	83 ec 0c             	sub    esp,0xc
c000c1fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c201:	83 ec 08             	sub    esp,0x8
c000c204:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c208:	50                   	push   eax
c000c209:	e8 b8 fd ff ff       	call   c000bfc6 <Device::Device(char const*)>
c000c20e:	83 c4 10             	add    esp,0x10
c000c211:	ba 34 05 02 c0       	mov    edx,0xc0020534
c000c216:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c21a:	89 10                	mov    DWORD PTR [eax],edx
c000c21c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c220:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c227:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c22b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000c232:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c236:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000c240:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c244:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c248:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000c24e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c252:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000c25c:	90                   	nop
c000c25d:	83 c4 0c             	add    esp,0xc
c000c260:	c3                   	ret    
c000c261:	90                   	nop

c000c262 <PhysicalDisk::startCache()>:
c000c262:	56                   	push   esi
c000c263:	53                   	push   ebx
c000c264:	83 ec 10             	sub    esp,0x10
c000c267:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c26b:	6a 44                	push   0x44
c000c26d:	e8 3c b8 ff ff       	call   c0007aae <malloc>
c000c272:	89 c6                	mov    esi,eax
c000c274:	58                   	pop    eax
c000c275:	5a                   	pop    edx
c000c276:	53                   	push   ebx
c000c277:	56                   	push   esi
c000c278:	e8 7b 17 00 00       	call   c000d9f8 <VCache::VCache(PhysicalDisk*)>
c000c27d:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000c283:	83 c4 14             	add    esp,0x14
c000c286:	5b                   	pop    ebx
c000c287:	5e                   	pop    esi
c000c288:	c3                   	ret    
c000c289:	90                   	nop

c000c28a <PhysicalDisk::~PhysicalDisk()>:
c000c28a:	83 ec 0c             	sub    esp,0xc
c000c28d:	ba 34 05 02 c0       	mov    edx,0xc0020534
c000c292:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c296:	89 10                	mov    DWORD PTR [eax],edx
c000c298:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c29c:	83 ec 0c             	sub    esp,0xc
c000c29f:	50                   	push   eax
c000c2a0:	e8 8b fa ff ff       	call   c000bd30 <Device::~Device()>
c000c2a5:	83 c4 10             	add    esp,0x10
c000c2a8:	90                   	nop
c000c2a9:	83 c4 0c             	add    esp,0xc
c000c2ac:	c3                   	ret    
c000c2ad:	90                   	nop

c000c2ae <PhysicalDisk::~PhysicalDisk()>:
c000c2ae:	83 ec 0c             	sub    esp,0xc
c000c2b1:	83 ec 0c             	sub    esp,0xc
c000c2b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2b8:	e8 cd ff ff ff       	call   c000c28a <PhysicalDisk::~PhysicalDisk()>
c000c2bd:	83 c4 10             	add    esp,0x10
c000c2c0:	83 ec 08             	sub    esp,0x8
c000c2c3:	68 6c 01 00 00       	push   0x16c
c000c2c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2cc:	e8 f9 e5 ff ff       	call   c000a8ca <operator delete(void*, unsigned long)>
c000c2d1:	83 c4 10             	add    esp,0x10
c000c2d4:	83 c4 0c             	add    esp,0xc
c000c2d7:	c3                   	ret    

c000c2d8 <int_handler>:
c000c2d8:	55                   	push   ebp
c000c2d9:	57                   	push   edi
c000c2da:	56                   	push   esi
c000c2db:	53                   	push   ebx
c000c2dc:	83 ec 0c             	sub    esp,0xc
c000c2df:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c2e3:	80 3d 38 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027938,0x0
c000c2ea:	74 0b                	je     c000c2f7 <int_handler+0x1f>
c000c2ec:	fa                   	cli    
c000c2ed:	f4                   	hlt    
c000c2ee:	80 3d 38 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027938,0x0
c000c2f5:	75 f5                	jne    c000c2ec <int_handler+0x14>
c000c2f7:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000c2fa:	8d 46 e0             	lea    eax,[esi-0x20]
c000c2fd:	83 f8 17             	cmp    eax,0x17
c000c300:	76 40                	jbe    c000c342 <int_handler+0x6a>
c000c302:	c1 e6 04             	shl    esi,0x4
c000c305:	31 db                	xor    ebx,ebx
c000c307:	8d ae c0 5f 02 c0    	lea    ebp,[esi-0x3ffda040]
c000c30d:	81 c6 c0 4f 02 c0    	add    esi,0xc0024fc0
c000c313:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000c317:	85 c0                	test   eax,eax
c000c319:	74 13                	je     c000c32e <int_handler+0x56>
c000c31b:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000c31e:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000c322:	74 2c                	je     c000c350 <int_handler+0x78>
c000c324:	83 ec 08             	sub    esp,0x8
c000c327:	52                   	push   edx
c000c328:	57                   	push   edi
c000c329:	ff d0                	call   eax
c000c32b:	83 c4 10             	add    esp,0x10
c000c32e:	83 c3 01             	add    ebx,0x1
c000c331:	83 fb 04             	cmp    ebx,0x4
c000c334:	75 dd                	jne    c000c313 <int_handler+0x3b>
c000c336:	83 c4 0c             	add    esp,0xc
c000c339:	31 c0                	xor    eax,eax
c000c33b:	5b                   	pop    ebx
c000c33c:	31 d2                	xor    edx,edx
c000c33e:	5e                   	pop    esi
c000c33f:	5f                   	pop    edi
c000c340:	5d                   	pop    ebp
c000c341:	c3                   	ret    
c000c342:	83 ec 0c             	sub    esp,0xc
c000c345:	50                   	push   eax
c000c346:	e8 e9 af 00 00       	call   c0017334 <HalEndOfInterrupt(int)>
c000c34b:	83 c4 10             	add    esp,0x10
c000c34e:	eb b2                	jmp    c000c302 <int_handler+0x2a>
c000c350:	83 ec 08             	sub    esp,0x8
c000c353:	52                   	push   edx
c000c354:	57                   	push   edi
c000c355:	ff d0                	call   eax
c000c357:	83 c4 10             	add    esp,0x10
c000c35a:	83 c4 0c             	add    esp,0xc
c000c35d:	5b                   	pop    ebx
c000c35e:	5e                   	pop    esi
c000c35f:	5f                   	pop    edi
c000c360:	5d                   	pop    ebp
c000c361:	c3                   	ret    

c000c362 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000c362:	56                   	push   esi
c000c363:	31 c0                	xor    eax,eax
c000c365:	53                   	push   ebx
c000c366:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c36a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c36e:	89 ca                	mov    edx,ecx
c000c370:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c374:	c1 e2 04             	shl    edx,0x4
c000c377:	83 bc 82 c0 5f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffda040],0x0
c000c37f:	74 17                	je     c000c398 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000c381:	83 c0 01             	add    eax,0x1
c000c384:	83 f8 04             	cmp    eax,0x4
c000c387:	75 ee                	jne    c000c377 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000c389:	c7 44 24 0c 64 05 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020564
c000c391:	5b                   	pop    ebx
c000c392:	5e                   	pop    esi
c000c393:	e9 8f 45 00 00       	jmp    c0010927 <KePanic(char const*)>
c000c398:	8d 04 88             	lea    eax,[eax+ecx*4]
c000c39b:	89 1c 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],ebx
c000c3a2:	89 34 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],esi
c000c3a9:	5b                   	pop    ebx
c000c3aa:	5e                   	pop    esi
c000c3ab:	c3                   	ret    

c000c3ac <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c3ac:	57                   	push   edi
c000c3ad:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000c3b3:	56                   	push   esi
c000c3b4:	53                   	push   ebx
c000c3b5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c3b9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c3bd:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c3c4:	74 54                	je     c000c41a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6e>
c000c3c6:	89 c7                	mov    edi,eax
c000c3c8:	84 c0                	test   al,al
c000c3ca:	74 1d                	je     c000c3e9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000c3cc:	83 fe 0f             	cmp    esi,0xf
c000c3cf:	0f 8f d5 00 00 00    	jg     c000c4aa <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xfe>
c000c3d5:	0f b6 b6 e0 1f 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffde020]
c000c3dc:	0f b7 bc 36 60 77 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd88a0]
c000c3e4:	d1 ef                	shr    edi,1
c000c3e6:	83 e7 01             	and    edi,0x1
c000c3e9:	83 ec 08             	sub    esp,0x8
c000c3ec:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c000c3f1:	31 db                	xor    ebx,ebx
c000c3f3:	50                   	push   eax
c000c3f4:	68 71 05 02 c0       	push   0xc0020571
c000c3f9:	e8 f9 e5 ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c000c3fe:	83 c4 10             	add    esp,0x10
c000c401:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c000c406:	85 c0                	test   eax,eax
c000c408:	7f 55                	jg     c000c45f <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000c40a:	83 ec 0c             	sub    esp,0xc
c000c40d:	68 88 05 02 c0       	push   0xc0020588
c000c412:	e8 10 45 00 00       	call   c0010927 <KePanic(char const*)>
c000c417:	83 c4 10             	add    esp,0x10
c000c41a:	8d 7e 20             	lea    edi,[esi+0x20]
c000c41d:	89 f8                	mov    eax,edi
c000c41f:	31 d2                	xor    edx,edx
c000c421:	c1 e0 04             	shl    eax,0x4
c000c424:	8b 8c 90 c0 5f 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffda040]
c000c42b:	85 c9                	test   ecx,ecx
c000c42d:	0f 84 8e 00 00 00    	je     c000c4c1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x115>
c000c433:	83 c2 01             	add    edx,0x1
c000c436:	83 fa 04             	cmp    edx,0x4
c000c439:	75 e9                	jne    c000c424 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000c43b:	83 ec 0c             	sub    esp,0xc
c000c43e:	68 dc 05 02 c0       	push   0xc00205dc
c000c443:	e8 df 44 00 00       	call   c0010927 <KePanic(char const*)>
c000c448:	83 c4 10             	add    esp,0x10
c000c44b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c450:	5b                   	pop    ebx
c000c451:	5e                   	pop    esi
c000c452:	5f                   	pop    edi
c000c453:	c3                   	ret    
c000c454:	83 c3 01             	add    ebx,0x1
c000c457:	39 1d 60 8b 02 c0    	cmp    DWORD PTR ds:0xc0028b60,ebx
c000c45d:	7e ab                	jle    c000c40a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5e>
c000c45f:	83 ec 08             	sub    esp,0x8
c000c462:	8b 04 9d 80 8b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7480]
c000c469:	56                   	push   esi
c000c46a:	50                   	push   eax
c000c46b:	e8 de 15 01 00       	call   c001da4e <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c470:	83 c4 10             	add    esp,0x10
c000c473:	84 c0                	test   al,al
c000c475:	74 dd                	je     c000c454 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c000c477:	83 ec 04             	sub    esp,0x4
c000c47a:	89 f8                	mov    eax,edi
c000c47c:	8b 1c 9d 80 8b 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd7480]
c000c483:	0f b6 f8             	movzx  edi,al
c000c486:	57                   	push   edi
c000c487:	8d 7e 20             	lea    edi,[esi+0x20]
c000c48a:	6a 00                	push   0x0
c000c48c:	89 f8                	mov    eax,edi
c000c48e:	0f b6 c0             	movzx  eax,al
c000c491:	50                   	push   eax
c000c492:	89 f0                	mov    eax,esi
c000c494:	6a 00                	push   0x0
c000c496:	0f b6 c0             	movzx  eax,al
c000c499:	6a 00                	push   0x0
c000c49b:	50                   	push   eax
c000c49c:	53                   	push   ebx
c000c49d:	e8 18 17 01 00       	call   c001dbba <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c4a2:	83 c4 20             	add    esp,0x20
c000c4a5:	e9 73 ff ff ff       	jmp    c000c41d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x71>
c000c4aa:	83 ec 0c             	sub    esp,0xc
c000c4ad:	31 ff                	xor    edi,edi
c000c4af:	68 a4 05 02 c0       	push   0xc00205a4
c000c4b4:	e8 6e 44 00 00       	call   c0010927 <KePanic(char const*)>
c000c4b9:	83 c4 10             	add    esp,0x10
c000c4bc:	e9 28 ff ff ff       	jmp    c000c3e9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000c4c1:	8d 04 ba             	lea    eax,[edx+edi*4]
c000c4c4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c4c8:	89 14 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],edx
c000c4cf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c4d3:	5b                   	pop    ebx
c000c4d4:	89 14 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],edx
c000c4db:	89 f0                	mov    eax,esi
c000c4dd:	5e                   	pop    esi
c000c4de:	5f                   	pop    edi
c000c4df:	c3                   	ret    

c000c4e0 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c4e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c4e4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c4e8:	c1 e0 04             	shl    eax,0x4
c000c4eb:	8d 50 10             	lea    edx,[eax+0x10]
c000c4ee:	39 88 c0 5f 02 c0    	cmp    DWORD PTR [eax-0x3ffda040],ecx
c000c4f4:	74 08                	je     c000c4fe <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c4f6:	83 c0 04             	add    eax,0x4
c000c4f9:	39 d0                	cmp    eax,edx
c000c4fb:	75 f1                	jne    c000c4ee <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c4fd:	c3                   	ret    
c000c4fe:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c508:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c512:	eb e2                	jmp    c000c4f6 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c514 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c514:	53                   	push   ebx
c000c515:	83 ec 08             	sub    esp,0x8
c000c518:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c51c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c521:	74 0e                	je     c000c531 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c523:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000c528:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c52f:	75 37                	jne    c000c568 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c531:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c535:	83 c0 20             	add    eax,0x20
c000c538:	c1 e0 04             	shl    eax,0x4
c000c53b:	8d 50 10             	lea    edx,[eax+0x10]
c000c53e:	39 98 c0 5f 02 c0    	cmp    DWORD PTR [eax-0x3ffda040],ebx
c000c544:	74 0c                	je     c000c552 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c546:	83 c0 04             	add    eax,0x4
c000c549:	39 d0                	cmp    eax,edx
c000c54b:	75 f1                	jne    c000c53e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c54d:	83 c4 08             	add    esp,0x8
c000c550:	5b                   	pop    ebx
c000c551:	c3                   	ret    
c000c552:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c55c:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c566:	eb de                	jmp    c000c546 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c568:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c56d:	7f 11                	jg     c000c580 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c000c56f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c573:	0f b6 80 e0 1f 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffde020]
c000c57a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c57e:	eb b1                	jmp    c000c531 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c580:	83 ec 0c             	sub    esp,0xc
c000c583:	68 95 05 02 c0       	push   0xc0020595
c000c588:	e8 9a 43 00 00       	call   c0010927 <KePanic(char const*)>
c000c58d:	83 c4 10             	add    esp,0x10
c000c590:	eb 9f                	jmp    c000c531 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c592 <setupINTS()>:
c000c592:	31 c0                	xor    eax,eax
c000c594:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c59e:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c5a8:	c7 80 c4 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda03c],0x0
c000c5b2:	c7 80 c4 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb03c],0x0
c000c5bc:	c7 80 c8 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda038],0x0
c000c5c6:	c7 80 c8 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb038],0x0
c000c5d0:	c7 80 cc 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda034],0x0
c000c5da:	c7 80 cc 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb034],0x0
c000c5e4:	83 c0 10             	add    eax,0x10
c000c5e7:	3d 00 10 00 00       	cmp    eax,0x1000
c000c5ec:	75 a6                	jne    c000c594 <setupINTS()+0x2>
c000c5ee:	c3                   	ret    

c000c5ef <convertLegacyIRQNumber(int)>:
c000c5ef:	83 ec 0c             	sub    esp,0xc
c000c5f2:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000c5f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c5fc:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c603:	74 0c                	je     c000c611 <convertLegacyIRQNumber(int)+0x22>
c000c605:	83 f8 0f             	cmp    eax,0xf
c000c608:	7f 0b                	jg     c000c615 <convertLegacyIRQNumber(int)+0x26>
c000c60a:	0f b6 80 e0 1f 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffde020]
c000c611:	83 c4 0c             	add    esp,0xc
c000c614:	c3                   	ret    
c000c615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c619:	83 ec 0c             	sub    esp,0xc
c000c61c:	68 a4 05 02 c0       	push   0xc00205a4
c000c621:	e8 01 43 00 00       	call   c0010927 <KePanic(char const*)>
c000c626:	83 c4 10             	add    esp,0x10
c000c629:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c62d:	83 c4 0c             	add    esp,0xc
c000c630:	c3                   	ret    
c000c631:	90                   	nop

c000c632 <startGUI(void*)>:
c000c632:	55                   	push   ebp
c000c633:	89 e5                	mov    ebp,esp
c000c635:	53                   	push   ebx
c000c636:	83 ec 04             	sub    esp,0x4
c000c639:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c63e:	83 e8 01             	sub    eax,0x1
c000c641:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c646:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c64b:	85 c0                	test   eax,eax
c000c64d:	75 01                	jne    c000c650 <startGUI(void*)+0x1e>
c000c64f:	fb                   	sti    
c000c650:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c656:	83 ec 08             	sub    esp,0x8
c000c659:	6a 01                	push   0x1
c000c65b:	68 01 06 02 c0       	push   0xc0020601
c000c660:	e8 19 80 00 00       	call   c001467e <Thr::loadDLL(char const*, bool)>
c000c665:	83 c4 10             	add    esp,0x10
c000c668:	83 ec 08             	sub    esp,0x8
c000c66b:	53                   	push   ebx
c000c66c:	50                   	push   eax
c000c66d:	e8 3d 82 00 00       	call   c00148af <Thr::executeDLL(unsigned long, void*)>
c000c672:	83 c4 10             	add    esp,0x10
c000c675:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c67b:	83 ec 08             	sub    esp,0x8
c000c67e:	6a 01                	push   0x1
c000c680:	68 1b 06 02 c0       	push   0xc002061b
c000c685:	e8 f4 7f 00 00       	call   c001467e <Thr::loadDLL(char const*, bool)>
c000c68a:	83 c4 10             	add    esp,0x10
c000c68d:	83 ec 08             	sub    esp,0x8
c000c690:	53                   	push   ebx
c000c691:	50                   	push   eax
c000c692:	e8 18 82 00 00       	call   c00148af <Thr::executeDLL(unsigned long, void*)>
c000c697:	83 c4 10             	add    esp,0x10
c000c69a:	90                   	nop
c000c69b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c69e:	c9                   	leave  
c000c69f:	c3                   	ret    

c000c6a0 <startGUIVESA(void*)>:
c000c6a0:	55                   	push   ebp
c000c6a1:	89 e5                	mov    ebp,esp
c000c6a3:	53                   	push   ebx
c000c6a4:	83 ec 04             	sub    esp,0x4
c000c6a7:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c6ac:	83 e8 01             	sub    eax,0x1
c000c6af:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c6b4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c6b9:	85 c0                	test   eax,eax
c000c6bb:	75 01                	jne    c000c6be <startGUIVESA(void*)+0x1e>
c000c6bd:	fb                   	sti    
c000c6be:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c6c4:	83 ec 08             	sub    esp,0x8
c000c6c7:	6a 01                	push   0x1
c000c6c9:	68 39 06 02 c0       	push   0xc0020639
c000c6ce:	e8 ab 7f 00 00       	call   c001467e <Thr::loadDLL(char const*, bool)>
c000c6d3:	83 c4 10             	add    esp,0x10
c000c6d6:	83 ec 08             	sub    esp,0x8
c000c6d9:	53                   	push   ebx
c000c6da:	50                   	push   eax
c000c6db:	e8 cf 81 00 00       	call   c00148af <Thr::executeDLL(unsigned long, void*)>
c000c6e0:	83 c4 10             	add    esp,0x10
c000c6e3:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c6e9:	83 ec 08             	sub    esp,0x8
c000c6ec:	6a 01                	push   0x1
c000c6ee:	68 1b 06 02 c0       	push   0xc002061b
c000c6f3:	e8 86 7f 00 00       	call   c001467e <Thr::loadDLL(char const*, bool)>
c000c6f8:	83 c4 10             	add    esp,0x10
c000c6fb:	83 ec 08             	sub    esp,0x8
c000c6fe:	53                   	push   ebx
c000c6ff:	50                   	push   eax
c000c700:	e8 aa 81 00 00       	call   c00148af <Thr::executeDLL(unsigned long, void*)>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	90                   	nop
c000c709:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c70c:	c9                   	leave  
c000c70d:	c3                   	ret    

c000c70e <sendKeyToTerminal(unsigned char)>:
c000c70e:	55                   	push   ebp
c000c70f:	89 e5                	mov    ebp,esp
c000c711:	83 ec 28             	sub    esp,0x28
c000c714:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c717:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c71a:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c000c71f:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000c723:	83 ec 08             	sub    esp,0x8
c000c726:	52                   	push   edx
c000c727:	50                   	push   eax
c000c728:	e8 73 c6 ff ff       	call   c0008da0 <VgaText::receiveKey(unsigned char)>
c000c72d:	83 c4 10             	add    esp,0x10
c000c730:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c734:	83 f8 0a             	cmp    eax,0xa
c000c737:	74 16                	je     c000c74f <sendKeyToTerminal(unsigned char)+0x41>
c000c739:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c73d:	83 f8 03             	cmp    eax,0x3
c000c740:	74 0d                	je     c000c74f <sendKeyToTerminal(unsigned char)+0x41>
c000c742:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c746:	83 f8 1c             	cmp    eax,0x1c
c000c749:	0f 85 97 00 00 00    	jne    c000c7e6 <sendKeyToTerminal(unsigned char)+0xd8>
c000c74f:	fa                   	cli    
c000c750:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c755:	83 c0 01             	add    eax,0x1
c000c758:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c75d:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c762:	83 c0 01             	add    eax,0x1
c000c765:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000c76a:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000c76f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c772:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000c77c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c780:	74 1f                	je     c000c7a1 <sendKeyToTerminal(unsigned char)+0x93>
c000c782:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c785:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c788:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c78b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c78e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c791:	83 ec 0c             	sub    esp,0xc
c000c794:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c797:	e8 58 8e 00 00       	call   c00155f4 <unblockTask(ThreadControlBlock*)>
c000c79c:	83 c4 10             	add    esp,0x10
c000c79f:	eb db                	jmp    c000c77c <sendKeyToTerminal(unsigned char)+0x6e>
c000c7a1:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c7a6:	83 e8 01             	sub    eax,0x1
c000c7a9:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000c7ae:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c7b3:	85 c0                	test   eax,eax
c000c7b5:	75 18                	jne    c000c7cf <sendKeyToTerminal(unsigned char)+0xc1>
c000c7b7:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c000c7bc:	85 c0                	test   eax,eax
c000c7be:	74 0f                	je     c000c7cf <sendKeyToTerminal(unsigned char)+0xc1>
c000c7c0:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c000c7ca:	e8 0d 89 00 00       	call   c00150dc <schedule()>
c000c7cf:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c7d4:	83 e8 01             	sub    eax,0x1
c000c7d7:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c7dc:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c7e1:	85 c0                	test   eax,eax
c000c7e3:	75 01                	jne    c000c7e6 <sendKeyToTerminal(unsigned char)+0xd8>
c000c7e5:	fb                   	sti    
c000c7e6:	90                   	nop
c000c7e7:	c9                   	leave  
c000c7e8:	c3                   	ret    

c000c7e9 <sendKeyboardToken(KeyboardToken)>:
c000c7e9:	55                   	push   ebp
c000c7ea:	89 e5                	mov    ebp,esp
c000c7ec:	83 ec 18             	sub    esp,0x18
c000c7ef:	e8 83 41 00 00       	call   c0010977 <Krnl::userIOReceived()>
c000c7f4:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c7f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7fa:	0f b7 c0             	movzx  eax,ax
c000c7fd:	83 f2 01             	xor    edx,0x1
c000c800:	88 90 e0 6f 02 c0    	mov    BYTE PTR [eax-0x3ffd9020],dl
c000c806:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000c80b:	85 c0                	test   eax,eax
c000c80d:	74 24                	je     c000c833 <sendKeyboardToken(KeyboardToken)+0x4a>
c000c80f:	8b 0d c8 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fc8
c000c815:	83 ec 04             	sub    esp,0x4
c000c818:	68 e0 6f 02 c0       	push   0xc0026fe0
c000c81d:	83 ec 08             	sub    esp,0x8
c000c820:	89 e2                	mov    edx,esp
c000c822:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c825:	89 02                	mov    DWORD PTR [edx],eax
c000c827:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c82a:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c82e:	ff d1                	call   ecx
c000c830:	83 c4 10             	add    esp,0x10
c000c833:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c837:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c83a:	a0 e8 73 02 c0       	mov    al,ds:0xc00273e8
c000c83f:	0f b6 d2             	movzx  edx,dl
c000c842:	0f b6 c0             	movzx  eax,al
c000c845:	39 c2                	cmp    edx,eax
c000c847:	74 1c                	je     c000c865 <sendKeyboardToken(KeyboardToken)+0x7c>
c000c849:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c84c:	a2 e8 73 02 c0       	mov    ds:0xc00273e8,al
c000c851:	a0 e8 73 02 c0       	mov    al,ds:0xc00273e8
c000c856:	0f b6 c0             	movzx  eax,al
c000c859:	83 ec 0c             	sub    esp,0xc
c000c85c:	50                   	push   eax
c000c85d:	e8 8a bc ff ff       	call   c00084ec <setTerminalScrollLock(bool)>
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c868:	0f b6 c0             	movzx  eax,al
c000c86b:	85 c0                	test   eax,eax
c000c86d:	0f 84 da 00 00 00    	je     c000c94d <sendKeyboardToken(KeyboardToken)+0x164>
c000c873:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c876:	0f b7 c0             	movzx  eax,ax
c000c879:	3d 18 03 00 00       	cmp    eax,0x318
c000c87e:	75 06                	jne    c000c886 <sendKeyboardToken(KeyboardToken)+0x9d>
c000c880:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c886:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c889:	0f b7 c0             	movzx  eax,ax
c000c88c:	3d 19 03 00 00       	cmp    eax,0x319
c000c891:	75 06                	jne    c000c899 <sendKeyboardToken(KeyboardToken)+0xb0>
c000c893:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c899:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c89c:	0f b7 c0             	movzx  eax,ax
c000c89f:	3d 1a 03 00 00       	cmp    eax,0x31a
c000c8a4:	75 06                	jne    c000c8ac <sendKeyboardToken(KeyboardToken)+0xc3>
c000c8a6:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c8ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8af:	0f b7 c0             	movzx  eax,ax
c000c8b2:	3d 1b 03 00 00       	cmp    eax,0x31b
c000c8b7:	75 06                	jne    c000c8bf <sendKeyboardToken(KeyboardToken)+0xd6>
c000c8b9:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c8bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8c2:	0f b7 c0             	movzx  eax,ax
c000c8c5:	3d 1c 03 00 00       	cmp    eax,0x31c
c000c8ca:	75 06                	jne    c000c8d2 <sendKeyboardToken(KeyboardToken)+0xe9>
c000c8cc:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c8d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8d5:	0f b7 c0             	movzx  eax,ax
c000c8d8:	3d 1d 03 00 00       	cmp    eax,0x31d
c000c8dd:	75 06                	jne    c000c8e5 <sendKeyboardToken(KeyboardToken)+0xfc>
c000c8df:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c8e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8e8:	0f b7 c0             	movzx  eax,ax
c000c8eb:	3d 1e 03 00 00       	cmp    eax,0x31e
c000c8f0:	75 06                	jne    c000c8f8 <sendKeyboardToken(KeyboardToken)+0x10f>
c000c8f2:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c8f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8fb:	0f b7 c0             	movzx  eax,ax
c000c8fe:	3d 1f 03 00 00       	cmp    eax,0x31f
c000c903:	75 06                	jne    c000c90b <sendKeyboardToken(KeyboardToken)+0x122>
c000c905:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c90b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c90e:	0f b7 c0             	movzx  eax,ax
c000c911:	3d 20 03 00 00       	cmp    eax,0x320
c000c916:	75 06                	jne    c000c91e <sendKeyboardToken(KeyboardToken)+0x135>
c000c918:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c91e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c921:	0f b7 c0             	movzx  eax,ax
c000c924:	3d 21 03 00 00       	cmp    eax,0x321
c000c929:	75 06                	jne    c000c931 <sendKeyboardToken(KeyboardToken)+0x148>
c000c92b:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c931:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c934:	0f b7 c0             	movzx  eax,ax
c000c937:	3d 22 03 00 00       	cmp    eax,0x322
c000c93c:	0f 85 f1 00 00 00    	jne    c000ca33 <sendKeyboardToken(KeyboardToken)+0x24a>
c000c942:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c948:	e9 e6 00 00 00       	jmp    c000ca33 <sendKeyboardToken(KeyboardToken)+0x24a>
c000c94d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c950:	0f b7 c0             	movzx  eax,ax
c000c953:	3d 18 03 00 00       	cmp    eax,0x318
c000c958:	75 0a                	jne    c000c964 <sendKeyboardToken(KeyboardToken)+0x17b>
c000c95a:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c960:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c964:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c967:	0f b7 c0             	movzx  eax,ax
c000c96a:	3d 19 03 00 00       	cmp    eax,0x319
c000c96f:	75 0a                	jne    c000c97b <sendKeyboardToken(KeyboardToken)+0x192>
c000c971:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c977:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c97b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c97e:	0f b7 c0             	movzx  eax,ax
c000c981:	3d 1a 03 00 00       	cmp    eax,0x31a
c000c986:	75 0a                	jne    c000c992 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000c988:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c98e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c992:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c995:	0f b7 c0             	movzx  eax,ax
c000c998:	3d 1b 03 00 00       	cmp    eax,0x31b
c000c99d:	75 0a                	jne    c000c9a9 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000c99f:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c9a5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9ac:	0f b7 c0             	movzx  eax,ax
c000c9af:	3d 1c 03 00 00       	cmp    eax,0x31c
c000c9b4:	75 0a                	jne    c000c9c0 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000c9b6:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c9bc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9c3:	0f b7 c0             	movzx  eax,ax
c000c9c6:	3d 1d 03 00 00       	cmp    eax,0x31d
c000c9cb:	75 0a                	jne    c000c9d7 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000c9cd:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c9d3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9da:	0f b7 c0             	movzx  eax,ax
c000c9dd:	3d 1e 03 00 00       	cmp    eax,0x31e
c000c9e2:	75 0a                	jne    c000c9ee <sendKeyboardToken(KeyboardToken)+0x205>
c000c9e4:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c9ea:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9f1:	0f b7 c0             	movzx  eax,ax
c000c9f4:	3d 1f 03 00 00       	cmp    eax,0x31f
c000c9f9:	75 0a                	jne    c000ca05 <sendKeyboardToken(KeyboardToken)+0x21c>
c000c9fb:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000ca01:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ca05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca08:	0f b7 c0             	movzx  eax,ax
c000ca0b:	3d 20 03 00 00       	cmp    eax,0x320
c000ca10:	75 0a                	jne    c000ca1c <sendKeyboardToken(KeyboardToken)+0x233>
c000ca12:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000ca18:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ca1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca1f:	0f b7 c0             	movzx  eax,ax
c000ca22:	3d 21 03 00 00       	cmp    eax,0x321
c000ca27:	75 0a                	jne    c000ca33 <sendKeyboardToken(KeyboardToken)+0x24a>
c000ca29:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000ca2f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ca33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca36:	0f b7 c0             	movzx  eax,ax
c000ca39:	3d 00 02 00 00       	cmp    eax,0x200
c000ca3e:	75 2f                	jne    c000ca6f <sendKeyboardToken(KeyboardToken)+0x286>
c000ca40:	a0 e0 73 02 c0       	mov    al,ds:0xc00273e0
c000ca45:	83 f0 01             	xor    eax,0x1
c000ca48:	0f b6 c0             	movzx  eax,al
c000ca4b:	85 c0                	test   eax,eax
c000ca4d:	74 20                	je     c000ca6f <sendKeyboardToken(KeyboardToken)+0x286>
c000ca4f:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000ca54:	6a 01                	push   0x1
c000ca56:	6a 00                	push   0x0
c000ca58:	68 32 c6 00 c0       	push   0xc000c632
c000ca5d:	50                   	push   eax
c000ca5e:	e8 29 84 00 00       	call   c0014e8c <Process::createThread(void (*)(void*), void*, int)>
c000ca63:	83 c4 10             	add    esp,0x10
c000ca66:	c6 05 e0 73 02 c0 01 	mov    BYTE PTR ds:0xc00273e0,0x1
c000ca6d:	eb 3a                	jmp    c000caa9 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000ca6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca72:	0f b7 c0             	movzx  eax,ax
c000ca75:	3d 01 02 00 00       	cmp    eax,0x201
c000ca7a:	75 2d                	jne    c000caa9 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000ca7c:	a0 e0 73 02 c0       	mov    al,ds:0xc00273e0
c000ca81:	83 f0 01             	xor    eax,0x1
c000ca84:	0f b6 c0             	movzx  eax,al
c000ca87:	85 c0                	test   eax,eax
c000ca89:	74 1e                	je     c000caa9 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000ca8b:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000ca90:	6a 01                	push   0x1
c000ca92:	6a 00                	push   0x0
c000ca94:	68 a0 c6 00 c0       	push   0xc000c6a0
c000ca99:	50                   	push   eax
c000ca9a:	e8 ed 83 00 00       	call   c0014e8c <Process::createThread(void (*)(void*), void*, int)>
c000ca9f:	83 c4 10             	add    esp,0x10
c000caa2:	c6 05 e0 73 02 c0 01 	mov    BYTE PTR ds:0xc00273e0,0x1
c000caa9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000caac:	0f b7 c0             	movzx  eax,ax
c000caaf:	3d 25 03 00 00       	cmp    eax,0x325
c000cab4:	75 06                	jne    c000cabc <sendKeyboardToken(KeyboardToken)+0x2d3>
c000cab6:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000cabc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cabf:	0f b7 c0             	movzx  eax,ax
c000cac2:	3d 24 03 00 00       	cmp    eax,0x324
c000cac7:	75 06                	jne    c000cacf <sendKeyboardToken(KeyboardToken)+0x2e6>
c000cac9:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000cacf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cad2:	0f b7 c0             	movzx  eax,ax
c000cad5:	3d 23 03 00 00       	cmp    eax,0x323
c000cada:	75 06                	jne    c000cae2 <sendKeyboardToken(KeyboardToken)+0x2f9>
c000cadc:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000cae2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cae5:	0f b7 c0             	movzx  eax,ax
c000cae8:	3d 26 03 00 00       	cmp    eax,0x326
c000caed:	75 06                	jne    c000caf5 <sendKeyboardToken(KeyboardToken)+0x30c>
c000caef:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000caf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000caf8:	0f b7 c0             	movzx  eax,ax
c000cafb:	3d 27 03 00 00       	cmp    eax,0x327
c000cb00:	75 06                	jne    c000cb08 <sendKeyboardToken(KeyboardToken)+0x31f>
c000cb02:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000cb08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb0b:	0f b7 c0             	movzx  eax,ax
c000cb0e:	3d 22 03 00 00       	cmp    eax,0x322
c000cb13:	75 06                	jne    c000cb1b <sendKeyboardToken(KeyboardToken)+0x332>
c000cb15:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000cb1b:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000cb1f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cb22:	83 f0 01             	xor    eax,0x1
c000cb25:	0f b6 c0             	movzx  eax,al
c000cb28:	85 c0                	test   eax,eax
c000cb2a:	74 7c                	je     c000cba8 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000cb2c:	a0 e1 70 02 c0       	mov    al,ds:0xc00270e1
c000cb31:	0f b6 c0             	movzx  eax,al
c000cb34:	85 c0                	test   eax,eax
c000cb36:	74 43                	je     c000cb7b <sendKeyboardToken(KeyboardToken)+0x392>
c000cb38:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cb3c:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000cb40:	85 c0                	test   eax,eax
c000cb42:	74 2b                	je     c000cb6f <sendKeyboardToken(KeyboardToken)+0x386>
c000cb44:	8b 15 e4 73 02 c0    	mov    edx,DWORD PTR ds:0xc00273e4
c000cb4a:	89 d0                	mov    eax,edx
c000cb4c:	c1 e0 02             	shl    eax,0x2
c000cb4f:	01 d0                	add    eax,edx
c000cb51:	01 c0                	add    eax,eax
c000cb53:	a3 e4 73 02 c0       	mov    ds:0xc00273e4,eax
c000cb58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb5b:	0f b7 c0             	movzx  eax,ax
c000cb5e:	8d 50 d0             	lea    edx,[eax-0x30]
c000cb61:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb66:	01 d0                	add    eax,edx
c000cb68:	a3 e4 73 02 c0       	mov    ds:0xc00273e4,eax
c000cb6d:	eb 71                	jmp    c000cbe0 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cb6f:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cb79:	eb 65                	jmp    c000cbe0 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cb7b:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb80:	85 c0                	test   eax,eax
c000cb82:	74 18                	je     c000cb9c <sendKeyboardToken(KeyboardToken)+0x3b3>
c000cb84:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb89:	0f b6 c0             	movzx  eax,al
c000cb8c:	83 ec 0c             	sub    esp,0xc
c000cb8f:	50                   	push   eax
c000cb90:	e8 79 fb ff ff       	call   c000c70e <sendKeyToTerminal(unsigned char)>
c000cb95:	83 c4 10             	add    esp,0x10
c000cb98:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cb9c:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cba6:	eb 38                	jmp    c000cbe0 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cba8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbab:	0f b7 c0             	movzx  eax,ax
c000cbae:	3d 01 01 00 00       	cmp    eax,0x101
c000cbb3:	75 2b                	jne    c000cbe0 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cbb5:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cbba:	85 c0                	test   eax,eax
c000cbbc:	74 18                	je     c000cbd6 <sendKeyboardToken(KeyboardToken)+0x3ed>
c000cbbe:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cbc3:	0f b6 c0             	movzx  eax,al
c000cbc6:	83 ec 0c             	sub    esp,0xc
c000cbc9:	50                   	push   eax
c000cbca:	e8 3f fb ff ff       	call   c000c70e <sendKeyToTerminal(unsigned char)>
c000cbcf:	83 c4 10             	add    esp,0x10
c000cbd2:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cbd6:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cbe0:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cbe3:	83 f0 01             	xor    eax,0x1
c000cbe6:	0f b6 c0             	movzx  eax,al
c000cbe9:	85 c0                	test   eax,eax
c000cbeb:	74 5a                	je     c000cc47 <sendKeyboardToken(KeyboardToken)+0x45e>
c000cbed:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cbf0:	83 f0 01             	xor    eax,0x1
c000cbf3:	0f b6 c0             	movzx  eax,al
c000cbf6:	85 c0                	test   eax,eax
c000cbf8:	74 4d                	je     c000cc47 <sendKeyboardToken(KeyboardToken)+0x45e>
c000cbfa:	a0 e0 70 02 c0       	mov    al,ds:0xc00270e0
c000cbff:	83 f0 01             	xor    eax,0x1
c000cc02:	0f b6 c0             	movzx  eax,al
c000cc05:	85 c0                	test   eax,eax
c000cc07:	74 3e                	je     c000cc47 <sendKeyboardToken(KeyboardToken)+0x45e>
c000cc09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc0c:	0f b7 c0             	movzx  eax,ax
c000cc0f:	83 f8 1f             	cmp    eax,0x1f
c000cc12:	76 0b                	jbe    c000cc1f <sendKeyboardToken(KeyboardToken)+0x436>
c000cc14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc17:	0f b7 c0             	movzx  eax,ax
c000cc1a:	83 f8 7e             	cmp    eax,0x7e
c000cc1d:	76 16                	jbe    c000cc35 <sendKeyboardToken(KeyboardToken)+0x44c>
c000cc1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc22:	0f b7 c0             	movzx  eax,ax
c000cc25:	83 f8 0a             	cmp    eax,0xa
c000cc28:	74 0b                	je     c000cc35 <sendKeyboardToken(KeyboardToken)+0x44c>
c000cc2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc2d:	0f b7 c0             	movzx  eax,ax
c000cc30:	83 f8 08             	cmp    eax,0x8
c000cc33:	75 12                	jne    c000cc47 <sendKeyboardToken(KeyboardToken)+0x45e>
c000cc35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc38:	0f b6 c0             	movzx  eax,al
c000cc3b:	83 ec 0c             	sub    esp,0xc
c000cc3e:	50                   	push   eax
c000cc3f:	e8 ca fa ff ff       	call   c000c70e <sendKeyToTerminal(unsigned char)>
c000cc44:	83 c4 10             	add    esp,0x10
c000cc47:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cc4a:	83 f0 01             	xor    eax,0x1
c000cc4d:	0f b6 c0             	movzx  eax,al
c000cc50:	85 c0                	test   eax,eax
c000cc52:	74 5d                	je     c000ccb1 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cc54:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cc57:	83 f0 01             	xor    eax,0x1
c000cc5a:	0f b6 c0             	movzx  eax,al
c000cc5d:	85 c0                	test   eax,eax
c000cc5f:	74 50                	je     c000ccb1 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cc61:	a0 e0 70 02 c0       	mov    al,ds:0xc00270e0
c000cc66:	0f b6 c0             	movzx  eax,al
c000cc69:	85 c0                	test   eax,eax
c000cc6b:	74 44                	je     c000ccb1 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cc6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc70:	0f b7 c0             	movzx  eax,ax
c000cc73:	83 f8 3f             	cmp    eax,0x3f
c000cc76:	76 39                	jbe    c000ccb1 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cc78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc7b:	0f b7 c0             	movzx  eax,ax
c000cc7e:	83 f8 7f             	cmp    eax,0x7f
c000cc81:	77 2e                	ja     c000ccb1 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cc83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc86:	88 c2                	mov    dl,al
c000cc88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc8b:	0f b7 c0             	movzx  eax,ax
c000cc8e:	83 f8 5f             	cmp    eax,0x5f
c000cc91:	76 04                	jbe    c000cc97 <sendKeyboardToken(KeyboardToken)+0x4ae>
c000cc93:	b0 20                	mov    al,0x20
c000cc95:	eb 02                	jmp    c000cc99 <sendKeyboardToken(KeyboardToken)+0x4b0>
c000cc97:	b0 00                	mov    al,0x0
c000cc99:	89 d1                	mov    ecx,edx
c000cc9b:	29 c1                	sub    ecx,eax
c000cc9d:	89 c8                	mov    eax,ecx
c000cc9f:	83 e8 40             	sub    eax,0x40
c000cca2:	0f b6 c0             	movzx  eax,al
c000cca5:	83 ec 0c             	sub    esp,0xc
c000cca8:	50                   	push   eax
c000cca9:	e8 60 fa ff ff       	call   c000c70e <sendKeyToTerminal(unsigned char)>
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ccb4:	0f b7 c0             	movzx  eax,ax
c000ccb7:	3d 00 03 00 00       	cmp    eax,0x300
c000ccbc:	75 12                	jne    c000ccd0 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000ccbe:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ccc1:	83 f0 01             	xor    eax,0x1
c000ccc4:	0f b6 c0             	movzx  eax,al
c000ccc7:	85 c0                	test   eax,eax
c000ccc9:	74 05                	je     c000ccd0 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000cccb:	e8 1d b8 ff ff       	call   c00084ed <doTerminalCycle()>
c000ccd0:	90                   	nop
c000ccd1:	c9                   	leave  
c000ccd2:	c3                   	ret    

c000ccd3 <clearInternalKeybuffer(VgaText*)>:
c000ccd3:	55                   	push   ebp
c000ccd4:	89 e5                	mov    ebp,esp
c000ccd6:	83 ec 08             	sub    esp,0x8
c000ccd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ccdc:	05 02 01 00 00       	add    eax,0x102
c000cce1:	83 ec 0c             	sub    esp,0xc
c000cce4:	50                   	push   eax
c000cce5:	e8 86 38 ff ff       	call   c0000570 <strlen>
c000ccea:	83 c4 10             	add    esp,0x10
c000cced:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ccf0:	81 c2 02 01 00 00    	add    edx,0x102
c000ccf6:	83 ec 04             	sub    esp,0x4
c000ccf9:	50                   	push   eax
c000ccfa:	6a 00                	push   0x0
c000ccfc:	52                   	push   edx
c000ccfd:	e8 ee 37 ff ff       	call   c00004f0 <memset>
c000cd02:	83 c4 10             	add    esp,0x10
c000cd05:	90                   	nop
c000cd06:	c9                   	leave  
c000cd07:	c3                   	ret    

c000cd08 <readKeyboard(VgaText*, char*, unsigned long)>:
c000cd08:	55                   	push   ebp
c000cd09:	89 e5                	mov    ebp,esp
c000cd0b:	83 ec 18             	sub    esp,0x18
c000cd0e:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000cd13:	85 c0                	test   eax,eax
c000cd15:	74 2a                	je     c000cd41 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000cd17:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000cd1d:	8b 0d c8 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fc8
c000cd23:	83 ec 04             	sub    esp,0x4
c000cd26:	68 e0 6f 02 c0       	push   0xc0026fe0
c000cd2b:	83 ec 08             	sub    esp,0x8
c000cd2e:	89 e2                	mov    edx,esp
c000cd30:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000cd33:	89 02                	mov    DWORD PTR [edx],eax
c000cd35:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000cd38:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000cd3c:	ff d1                	call   ecx
c000cd3e:	83 c4 10             	add    esp,0x10
c000cd41:	fb                   	sti    
c000cd42:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000cd49:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000cd4d:	0f 84 0d 01 00 00    	je     c000ce60 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000cd53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd56:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000cd5c:	0f be c0             	movsx  eax,al
c000cd5f:	85 c0                	test   eax,eax
c000cd61:	75 2c                	jne    c000cd8f <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000cd63:	fa                   	cli    
c000cd64:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cd69:	83 c0 01             	add    eax,0x1
c000cd6c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000cd71:	e8 66 83 00 00       	call   c00150dc <schedule()>
c000cd76:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cd7b:	83 e8 01             	sub    eax,0x1
c000cd7e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000cd83:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cd88:	85 c0                	test   eax,eax
c000cd8a:	75 c7                	jne    c000cd53 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cd8c:	fb                   	sti    
c000cd8d:	eb c4                	jmp    c000cd53 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cd8f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000cd92:	8d 50 01             	lea    edx,[eax+0x1]
c000cd95:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cd98:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cd9b:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000cda1:	88 10                	mov    BYTE PTR [eax],dl
c000cda3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cda6:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000cdac:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000cdaf:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cdb3:	83 f8 03             	cmp    eax,0x3
c000cdb6:	75 1e                	jne    c000cdd6 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000cdb8:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000cdbd:	8b 00                	mov    eax,DWORD PTR [eax]
c000cdbf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000cdc2:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000cdc8:	83 ec 08             	sub    esp,0x8
c000cdcb:	6a 02                	push   0x2
c000cdcd:	50                   	push   eax
c000cdce:	e8 f0 3f 00 00       	call   c0010dc3 <KeRaiseSignal(SigHandlerBlock*, int)>
c000cdd3:	83 c4 10             	add    esp,0x10
c000cdd6:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cdda:	83 f8 1c             	cmp    eax,0x1c
c000cddd:	75 1e                	jne    c000cdfd <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000cddf:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000cde4:	8b 00                	mov    eax,DWORD PTR [eax]
c000cde6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000cde9:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000cdef:	83 ec 08             	sub    esp,0x8
c000cdf2:	6a 09                	push   0x9
c000cdf4:	50                   	push   eax
c000cdf5:	e8 c9 3f 00 00       	call   c0010dc3 <KeRaiseSignal(SigHandlerBlock*, int)>
c000cdfa:	83 c4 10             	add    esp,0x10
c000cdfd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce00:	05 02 01 00 00       	add    eax,0x102
c000ce05:	83 ec 0c             	sub    esp,0xc
c000ce08:	50                   	push   eax
c000ce09:	e8 62 37 ff ff       	call   c0000570 <strlen>
c000ce0e:	83 c4 10             	add    esp,0x10
c000ce11:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ce14:	81 c2 02 01 00 00    	add    edx,0x102
c000ce1a:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ce1d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ce20:	81 c2 02 01 00 00    	add    edx,0x102
c000ce26:	83 ec 04             	sub    esp,0x4
c000ce29:	50                   	push   eax
c000ce2a:	51                   	push   ecx
c000ce2b:	52                   	push   edx
c000ce2c:	e8 9f 35 ff ff       	call   c00003d0 <memmove>
c000ce31:	83 c4 10             	add    esp,0x10
c000ce34:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000ce38:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000ce3c:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000ce40:	83 f8 0a             	cmp    eax,0xa
c000ce43:	74 16                	je     c000ce5b <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000ce45:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000ce49:	83 f8 03             	cmp    eax,0x3
c000ce4c:	74 0d                	je     c000ce5b <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000ce4e:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000ce52:	83 f8 1c             	cmp    eax,0x1c
c000ce55:	0f 85 ee fe ff ff    	jne    c000cd49 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000ce5b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ce5e:	eb 03                	jmp    c000ce63 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000ce60:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ce63:	c9                   	leave  
c000ce64:	c3                   	ret    
c000ce65:	90                   	nop

c000ce66 <Keyboard::Keyboard(char const*)>:
c000ce66:	83 ec 0c             	sub    esp,0xc
c000ce69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce6d:	83 ec 08             	sub    esp,0x8
c000ce70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce74:	50                   	push   eax
c000ce75:	e8 4c f1 ff ff       	call   c000bfc6 <Device::Device(char const*)>
c000ce7a:	83 c4 10             	add    esp,0x10
c000ce7d:	ba 5c 06 02 c0       	mov    edx,0xc002065c
c000ce82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce86:	89 10                	mov    DWORD PTR [eax],edx
c000ce88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce8c:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000ce96:	c6 05 c4 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026fc4,0x1
c000ce9d:	90                   	nop
c000ce9e:	83 c4 0c             	add    esp,0xc
c000cea1:	c3                   	ret    

c000cea2 <Keyboard::~Keyboard()>:
c000cea2:	83 ec 0c             	sub    esp,0xc
c000cea5:	ba 5c 06 02 c0       	mov    edx,0xc002065c
c000ceaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ceae:	89 10                	mov    DWORD PTR [eax],edx
c000ceb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ceb4:	83 ec 0c             	sub    esp,0xc
c000ceb7:	50                   	push   eax
c000ceb8:	e8 73 ee ff ff       	call   c000bd30 <Device::~Device()>
c000cebd:	83 c4 10             	add    esp,0x10
c000cec0:	90                   	nop
c000cec1:	83 c4 0c             	add    esp,0xc
c000cec4:	c3                   	ret    
c000cec5:	90                   	nop

c000cec6 <Keyboard::~Keyboard()>:
c000cec6:	83 ec 0c             	sub    esp,0xc
c000cec9:	83 ec 0c             	sub    esp,0xc
c000cecc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ced0:	e8 cd ff ff ff       	call   c000cea2 <Keyboard::~Keyboard()>
c000ced5:	83 c4 10             	add    esp,0x10
c000ced8:	83 ec 08             	sub    esp,0x8
c000cedb:	68 5c 01 00 00       	push   0x15c
c000cee0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cee4:	e8 e1 d9 ff ff       	call   c000a8ca <operator delete(void*, unsigned long)>
c000cee9:	83 c4 10             	add    esp,0x10
c000ceec:	83 c4 0c             	add    esp,0xc
c000ceef:	c3                   	ret    

c000cef0 <LogicalDisk::close(int, int, void*)>:
c000cef0:	83 c8 ff             	or     eax,0xffffffff
c000cef3:	c3                   	ret    

c000cef4 <LogicalDisk::~LogicalDisk()>:
c000cef4:	83 ec 0c             	sub    esp,0xc
c000cef7:	ba d4 06 02 c0       	mov    edx,0xc00206d4
c000cefc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf00:	89 10                	mov    DWORD PTR [eax],edx
c000cf02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf06:	83 ec 0c             	sub    esp,0xc
c000cf09:	50                   	push   eax
c000cf0a:	e8 21 ee ff ff       	call   c000bd30 <Device::~Device()>
c000cf0f:	83 c4 10             	add    esp,0x10
c000cf12:	90                   	nop
c000cf13:	83 c4 0c             	add    esp,0xc
c000cf16:	c3                   	ret    
c000cf17:	90                   	nop

c000cf18 <LogicalDisk::~LogicalDisk()>:
c000cf18:	83 ec 0c             	sub    esp,0xc
c000cf1b:	83 ec 0c             	sub    esp,0xc
c000cf1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf22:	e8 cd ff ff ff       	call   c000cef4 <LogicalDisk::~LogicalDisk()>
c000cf27:	83 c4 10             	add    esp,0x10
c000cf2a:	83 ec 08             	sub    esp,0x8
c000cf2d:	68 78 01 00 00       	push   0x178
c000cf32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf36:	e8 8f d9 ff ff       	call   c000a8ca <operator delete(void*, unsigned long)>
c000cf3b:	83 c4 10             	add    esp,0x10
c000cf3e:	83 c4 0c             	add    esp,0xc
c000cf41:	c3                   	ret    

c000cf42 <LogicalDisk::open(int, int, void*)>:
c000cf42:	83 ec 18             	sub    esp,0x18
c000cf45:	68 88 06 02 c0       	push   0xc0020688
c000cf4a:	e8 d8 39 00 00       	call   c0010927 <KePanic(char const*)>
c000cf4f:	83 c8 ff             	or     eax,0xffffffff
c000cf52:	83 c4 1c             	add    esp,0x1c
c000cf55:	c3                   	ret    

c000cf56 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000cf56:	53                   	push   ebx
c000cf57:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cf5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cf5f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cf63:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000cf69:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000cf6f:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000cf75:	77 10                	ja     c000cf87 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000cf77:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000cf7d:	89 d3                	mov    ebx,edx
c000cf7f:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000cf85:	72 05                	jb     c000cf8c <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000cf87:	83 c8 ff             	or     eax,0xffffffff
c000cf8a:	89 c2                	mov    edx,eax
c000cf8c:	5b                   	pop    ebx
c000cf8d:	c3                   	ret    

c000cf8e <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000cf8e:	56                   	push   esi
c000cf8f:	83 c8 ff             	or     eax,0xffffffff
c000cf92:	53                   	push   ebx
c000cf93:	89 c2                	mov    edx,eax
c000cf95:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cf99:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000cf9d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cfa1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cfa7:	77 27                	ja     c000cfd0 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cfa9:	89 d8                	mov    eax,ebx
c000cfab:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000cfb1:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000cfb7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cfbc:	89 c2                	mov    edx,eax
c000cfbe:	73 10                	jae    c000cfd0 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cfc0:	89 c8                	mov    eax,ecx
c000cfc2:	89 da                	mov    edx,ebx
c000cfc4:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000cfca:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000cfd0:	5b                   	pop    ebx
c000cfd1:	5e                   	pop    esi
c000cfd2:	c3                   	ret    
c000cfd3:	90                   	nop

c000cfd4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cfd4:	83 ec 1c             	sub    esp,0x1c
c000cfd7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cfdb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfdf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cfe3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cfe7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cfeb:	89 04 24             	mov    DWORD PTR [esp],eax
c000cfee:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cff2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cff6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cffa:	83 ec 08             	sub    esp,0x8
c000cffd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d001:	50                   	push   eax
c000d002:	e8 bf ef ff ff       	call   c000bfc6 <Device::Device(char const*)>
c000d007:	83 c4 10             	add    esp,0x10
c000d00a:	ba d4 06 02 c0       	mov    edx,0xc00206d4
c000d00f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d013:	89 10                	mov    DWORD PTR [eax],edx
c000d015:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d019:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d020:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d024:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000d02b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d02f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d036:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d03a:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d044:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d048:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d04c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d050:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d056:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d05c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d060:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d063:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d067:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d06d:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d073:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d077:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d07b:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d081:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d085:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d08f:	90                   	nop
c000d090:	83 c4 1c             	add    esp,0x1c
c000d093:	c3                   	ret    

c000d094 <LogicalDisk::assignDriveLetter()>:
c000d094:	55                   	push   ebp
c000d095:	57                   	push   edi
c000d096:	56                   	push   esi
c000d097:	53                   	push   ebx
c000d098:	83 ec 14             	sub    esp,0x14
c000d09b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d09f:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d0a5:	b0 41                	mov    al,0x41
c000d0a7:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000d0ad:	84 d2                	test   dl,dl
c000d0af:	75 02                	jne    c000d0b3 <LogicalDisk::assignDriveLetter()+0x1f>
c000d0b1:	b0 43                	mov    al,0x43
c000d0b3:	8b 3d 00 74 02 c0    	mov    edi,DWORD PTR ds:0xc0027400
c000d0b9:	0f b6 ca             	movzx  ecx,dl
c000d0bc:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000d0c0:	0f be e8             	movsx  ebp,al
c000d0c3:	8b 3d 04 74 02 c0    	mov    edi,DWORD PTR ds:0xc0027404
c000d0c9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000d0cd:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d0d1:	3c 43                	cmp    al,0x43
c000d0d3:	75 10                	jne    c000d0e5 <LogicalDisk::assignDriveLetter()+0x51>
c000d0d5:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d0dc:	75 5a                	jne    c000d138 <LogicalDisk::assignDriveLetter()+0xa4>
c000d0de:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d0e3:	75 53                	jne    c000d138 <LogicalDisk::assignDriveLetter()+0xa4>
c000d0e5:	8d 75 bf             	lea    esi,[ebp-0x41]
c000d0e8:	ba 01 00 00 00       	mov    edx,0x1
c000d0ed:	89 34 24             	mov    DWORD PTR [esp],esi
c000d0f0:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000d0f3:	d3 e2                	shl    edx,cl
c000d0f5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d0f9:	89 d7                	mov    edi,edx
c000d0fb:	89 d6                	mov    esi,edx
c000d0fd:	c1 ff 1f             	sar    edi,0x1f
c000d100:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000d104:	21 f9                	and    ecx,edi
c000d106:	09 d1                	or     ecx,edx
c000d108:	75 2e                	jne    c000d138 <LogicalDisk::assignDriveLetter()+0xa4>
c000d10a:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000d10e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d112:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000d118:	09 f2                	or     edx,esi
c000d11a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000d11d:	89 15 00 74 02 c0    	mov    DWORD PTR ds:0xc0027400,edx
c000d123:	89 1c b5 20 74 02 c0 	mov    DWORD PTR [esi*4-0x3ffd8be0],ebx
c000d12a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d12e:	09 fa                	or     edx,edi
c000d130:	89 15 04 74 02 c0    	mov    DWORD PTR ds:0xc0027404,edx
c000d136:	eb 0d                	jmp    c000d145 <LogicalDisk::assignDriveLetter()+0xb1>
c000d138:	8d 50 01             	lea    edx,[eax+0x1]
c000d13b:	45                   	inc    ebp
c000d13c:	88 d0                	mov    al,dl
c000d13e:	80 fa 5b             	cmp    dl,0x5b
c000d141:	75 8e                	jne    c000d0d1 <LogicalDisk::assignDriveLetter()+0x3d>
c000d143:	31 c0                	xor    eax,eax
c000d145:	83 c4 14             	add    esp,0x14
c000d148:	5b                   	pop    ebx
c000d149:	5e                   	pop    esi
c000d14a:	5f                   	pop    edi
c000d14b:	5d                   	pop    ebp
c000d14c:	c3                   	ret    
c000d14d:	90                   	nop

c000d14e <LogicalDisk::mount()>:
c000d14e:	56                   	push   esi
c000d14f:	53                   	push   ebx
c000d150:	53                   	push   ebx
c000d151:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d155:	8b 1d b4 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb4
c000d15b:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000d165:	85 db                	test   ebx,ebx
c000d167:	74 27                	je     c000d190 <LogicalDisk::mount()+0x42>
c000d169:	51                   	push   ecx
c000d16a:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000d171:	8b 13                	mov    edx,DWORD PTR [ebx]
c000d173:	83 e8 41             	sub    eax,0x41
c000d176:	50                   	push   eax
c000d177:	56                   	push   esi
c000d178:	53                   	push   ebx
c000d179:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d17c:	83 c4 10             	add    esp,0x10
c000d17f:	84 c0                	test   al,al
c000d181:	74 08                	je     c000d18b <LogicalDisk::mount()+0x3d>
c000d183:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000d189:	eb 07                	jmp    c000d192 <LogicalDisk::mount()+0x44>
c000d18b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000d18e:	eb d5                	jmp    c000d165 <LogicalDisk::mount()+0x17>
c000d190:	31 c0                	xor    eax,eax
c000d192:	5a                   	pop    edx
c000d193:	5b                   	pop    ebx
c000d194:	5e                   	pop    esi
c000d195:	c3                   	ret    

c000d196 <LogicalDisk::unmount()>:
c000d196:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d19a:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d1a4:	c3                   	ret    
c000d1a5:	90                   	nop

c000d1a6 <LogicalDisk::eject()>:
c000d1a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d1aa:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000d1b0:	8b 10                	mov    edx,DWORD PTR [eax]
c000d1b2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d1b6:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000d1b9:	90                   	nop

c000d1ba <LogicalDisk::unassignDriveLetter()>:
c000d1ba:	57                   	push   edi
c000d1bb:	56                   	push   esi
c000d1bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1c0:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000d1c7:	85 c9                	test   ecx,ecx
c000d1c9:	75 0f                	jne    c000d1da <LogicalDisk::unassignDriveLetter()+0x20>
c000d1cb:	c7 44 24 0c ac 06 02 c0 	mov    DWORD PTR [esp+0xc],0xc00206ac
c000d1d3:	5e                   	pop    esi
c000d1d4:	5f                   	pop    edi
c000d1d5:	e9 4d 37 00 00       	jmp    c0010927 <KePanic(char const*)>
c000d1da:	83 e9 41             	sub    ecx,0x41
c000d1dd:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000d1e4:	b8 01 00 00 00       	mov    eax,0x1
c000d1e9:	c7 04 8d 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd8be0],0x0
c000d1f4:	d3 e0                	shl    eax,cl
c000d1f6:	89 c7                	mov    edi,eax
c000d1f8:	f7 d0                	not    eax
c000d1fa:	c1 ff 1f             	sar    edi,0x1f
c000d1fd:	21 05 00 74 02 c0    	and    DWORD PTR ds:0xc0027400,eax
c000d203:	89 fe                	mov    esi,edi
c000d205:	f7 d6                	not    esi
c000d207:	21 35 04 74 02 c0    	and    DWORD PTR ds:0xc0027404,esi
c000d20d:	5e                   	pop    esi
c000d20e:	5f                   	pop    edi
c000d20f:	c3                   	ret    

c000d210 <LogicalDisk::read(unsigned long long, int, void*)>:
c000d210:	57                   	push   edi
c000d211:	56                   	push   esi
c000d212:	53                   	push   ebx
c000d213:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d217:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d21b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d21f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d223:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d229:	77 41                	ja     c000d26c <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000d22b:	99                   	cdq    
c000d22c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d232:	01 c8                	add    eax,ecx
c000d234:	11 da                	adc    edx,ebx
c000d236:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d23c:	19 d7                	sbb    edi,edx
c000d23e:	72 33                	jb     c000d273 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000d240:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d246:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d24c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d250:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d254:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d25a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d260:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d264:	5b                   	pop    ebx
c000d265:	5e                   	pop    esi
c000d266:	5f                   	pop    edi
c000d267:	e9 c6 0a 00 00       	jmp    c000dd32 <VCache::read(unsigned long long, int, void*)>
c000d26c:	b8 05 00 00 00       	mov    eax,0x5
c000d271:	eb 05                	jmp    c000d278 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000d273:	b8 07 00 00 00       	mov    eax,0x7
c000d278:	5b                   	pop    ebx
c000d279:	5e                   	pop    esi
c000d27a:	5f                   	pop    edi
c000d27b:	c3                   	ret    

c000d27c <LogicalDisk::write(unsigned long long, int, void*)>:
c000d27c:	57                   	push   edi
c000d27d:	56                   	push   esi
c000d27e:	53                   	push   ebx
c000d27f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d283:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d287:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d28b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d28f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d295:	77 41                	ja     c000d2d8 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000d297:	99                   	cdq    
c000d298:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d29e:	01 c8                	add    eax,ecx
c000d2a0:	11 da                	adc    edx,ebx
c000d2a2:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d2a8:	19 d7                	sbb    edi,edx
c000d2aa:	72 33                	jb     c000d2df <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000d2ac:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d2b2:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d2b8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d2bc:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d2c0:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d2c6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d2cc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2d0:	5b                   	pop    ebx
c000d2d1:	5e                   	pop    esi
c000d2d2:	5f                   	pop    edi
c000d2d3:	e9 6c 09 00 00       	jmp    c000dc44 <VCache::write(unsigned long long, int, void*)>
c000d2d8:	b8 05 00 00 00       	mov    eax,0x5
c000d2dd:	eb 05                	jmp    c000d2e4 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000d2df:	b8 07 00 00 00       	mov    eax,0x7
c000d2e4:	5b                   	pop    ebx
c000d2e5:	5e                   	pop    esi
c000d2e6:	5f                   	pop    edi
c000d2e7:	c3                   	ret    

c000d2e8 <Mouse::Mouse(char const*)>:
c000d2e8:	83 ec 0c             	sub    esp,0xc
c000d2eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2ef:	83 ec 08             	sub    esp,0x8
c000d2f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2f6:	50                   	push   eax
c000d2f7:	e8 ca ec ff ff       	call   c000bfc6 <Device::Device(char const*)>
c000d2fc:	83 c4 10             	add    esp,0x10
c000d2ff:	ba 00 07 02 c0       	mov    edx,0xc0020700
c000d304:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d308:	89 10                	mov    DWORD PTR [eax],edx
c000d30a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d30e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000d318:	90                   	nop
c000d319:	83 c4 0c             	add    esp,0xc
c000d31c:	c3                   	ret    
c000d31d:	90                   	nop
c000d31e:	66 90                	xchg   ax,ax

c000d320 <Mouse::~Mouse()>:
c000d320:	83 ec 0c             	sub    esp,0xc
c000d323:	ba 00 07 02 c0       	mov    edx,0xc0020700
c000d328:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d32c:	89 10                	mov    DWORD PTR [eax],edx
c000d32e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d332:	83 ec 0c             	sub    esp,0xc
c000d335:	50                   	push   eax
c000d336:	e8 f5 e9 ff ff       	call   c000bd30 <Device::~Device()>
c000d33b:	83 c4 10             	add    esp,0x10
c000d33e:	90                   	nop
c000d33f:	83 c4 0c             	add    esp,0xc
c000d342:	c3                   	ret    
c000d343:	90                   	nop

c000d344 <Mouse::~Mouse()>:
c000d344:	83 ec 0c             	sub    esp,0xc
c000d347:	83 ec 0c             	sub    esp,0xc
c000d34a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d34e:	e8 cd ff ff ff       	call   c000d320 <Mouse::~Mouse()>
c000d353:	83 c4 10             	add    esp,0x10
c000d356:	83 ec 08             	sub    esp,0x8
c000d359:	68 58 01 00 00       	push   0x158
c000d35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d362:	e8 63 d5 ff ff       	call   c000a8ca <operator delete(void*, unsigned long)>
c000d367:	83 c4 10             	add    esp,0x10
c000d36a:	83 c4 0c             	add    esp,0xc
c000d36d:	c3                   	ret    

c000d36e <NIC::getMAC()>:
c000d36e:	31 c0                	xor    eax,eax
c000d370:	31 d2                	xor    edx,edx
c000d372:	c3                   	ret    
c000d373:	90                   	nop

c000d374 <NIC::write(int, unsigned char*, int*)>:
c000d374:	b8 01 00 00 00       	mov    eax,0x1
c000d379:	c3                   	ret    

c000d37a <NIC::NIC(char const*)>:
c000d37a:	83 ec 0c             	sub    esp,0xc
c000d37d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d381:	83 ec 08             	sub    esp,0x8
c000d384:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d388:	50                   	push   eax
c000d389:	e8 38 ec ff ff       	call   c000bfc6 <Device::Device(char const*)>
c000d38e:	83 c4 10             	add    esp,0x10
c000d391:	ba 2c 07 02 c0       	mov    edx,0xc002072c
c000d396:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d39a:	89 10                	mov    DWORD PTR [eax],edx
c000d39c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3a0:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000d3aa:	90                   	nop
c000d3ab:	83 c4 0c             	add    esp,0xc
c000d3ae:	c3                   	ret    
c000d3af:	90                   	nop

c000d3b0 <NIC::~NIC()>:
c000d3b0:	83 ec 0c             	sub    esp,0xc
c000d3b3:	ba 2c 07 02 c0       	mov    edx,0xc002072c
c000d3b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3bc:	89 10                	mov    DWORD PTR [eax],edx
c000d3be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3c2:	83 ec 0c             	sub    esp,0xc
c000d3c5:	50                   	push   eax
c000d3c6:	e8 65 e9 ff ff       	call   c000bd30 <Device::~Device()>
c000d3cb:	83 c4 10             	add    esp,0x10
c000d3ce:	90                   	nop
c000d3cf:	83 c4 0c             	add    esp,0xc
c000d3d2:	c3                   	ret    
c000d3d3:	90                   	nop

c000d3d4 <NIC::~NIC()>:
c000d3d4:	83 ec 0c             	sub    esp,0xc
c000d3d7:	83 ec 0c             	sub    esp,0xc
c000d3da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3de:	e8 cd ff ff ff       	call   c000d3b0 <NIC::~NIC()>
c000d3e3:	83 c4 10             	add    esp,0x10
c000d3e6:	83 ec 08             	sub    esp,0x8
c000d3e9:	68 58 01 00 00       	push   0x158
c000d3ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3f2:	e8 d3 d4 ff ff       	call   c000a8ca <operator delete(void*, unsigned long)>
c000d3f7:	83 c4 10             	add    esp,0x10
c000d3fa:	83 c4 0c             	add    esp,0xc
c000d3fd:	c3                   	ret    

c000d3fe <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d3fe:	55                   	push   ebp
c000d3ff:	57                   	push   edi
c000d400:	56                   	push   esi
c000d401:	53                   	push   ebx
c000d402:	81 ec 28 01 00 00    	sub    esp,0x128
c000d408:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000d40f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000d416:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000d41d:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000d424:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d428:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d42c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d433:	e8 8a ec ff ff       	call   c000c0c2 <Device::getName()>
c000d438:	5a                   	pop    edx
c000d439:	59                   	pop    ecx
c000d43a:	50                   	push   eax
c000d43b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000d43f:	55                   	push   ebp
c000d440:	e8 fb 31 ff ff       	call   c0000640 <strcpy>
c000d445:	5b                   	pop    ebx
c000d446:	58                   	pop    eax
c000d447:	68 58 07 02 c0       	push   0xc0020758
c000d44c:	55                   	push   ebp
c000d44d:	e8 ee 33 ff ff       	call   c0000840 <strcat>
c000d452:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000d459:	e8 50 a6 ff ff       	call   c0007aae <malloc>
c000d45e:	83 c4 0c             	add    esp,0xc
c000d461:	89 c3                	mov    ebx,eax
c000d463:	57                   	push   edi
c000d464:	56                   	push   esi
c000d465:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d469:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d46d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000d474:	55                   	push   ebp
c000d475:	50                   	push   eax
c000d476:	e8 59 fb ff ff       	call   c000cfd4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000d47b:	83 c4 14             	add    esp,0x14
c000d47e:	53                   	push   ebx
c000d47f:	e8 10 fc ff ff       	call   c000d094 <LogicalDisk::assignDriveLetter()>
c000d484:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d487:	e8 c2 fc ff ff       	call   c000d14e <LogicalDisk::mount()>
c000d48c:	58                   	pop    eax
c000d48d:	5a                   	pop    edx
c000d48e:	53                   	push   ebx
c000d48f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d496:	e8 93 e9 ff ff       	call   c000be2e <Device::addChild(Device*)>
c000d49b:	81 c4 2c 01 00 00    	add    esp,0x12c
c000d4a1:	5b                   	pop    ebx
c000d4a2:	5e                   	pop    esi
c000d4a3:	5f                   	pop    edi
c000d4a4:	5d                   	pop    ebp
c000d4a5:	c3                   	ret    

c000d4a6 <createPartitionsForDisk(PhysicalDisk*)>:
c000d4a6:	55                   	push   ebp
c000d4a7:	57                   	push   edi
c000d4a8:	56                   	push   esi
c000d4a9:	53                   	push   ebx
c000d4aa:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000d4b0:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000d4b7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000d4bd:	3d 00 02 00 00       	cmp    eax,0x200
c000d4c2:	74 27                	je     c000d4eb <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000d4c4:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000d4ca:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000d4d0:	83 ec 10             	sub    esp,0x10
c000d4d3:	0f a4 f7 0a          	shld   edi,esi,0xa
c000d4d7:	99                   	cdq    
c000d4d8:	c1 e6 0a             	shl    esi,0xa
c000d4db:	52                   	push   edx
c000d4dc:	89 fd                	mov    ebp,edi
c000d4de:	50                   	push   eax
c000d4df:	55                   	push   ebp
c000d4e0:	56                   	push   esi
c000d4e1:	e8 8a 11 01 00       	call   c001e670 <__udivdi3>
c000d4e6:	e9 b9 00 00 00       	jmp    c000d5a4 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000d4eb:	83 ec 0c             	sub    esp,0xc
c000d4ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d4f0:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000d4f4:	56                   	push   esi
c000d4f5:	6a 01                	push   0x1
c000d4f7:	6a 00                	push   0x0
c000d4f9:	6a 00                	push   0x0
c000d4fb:	53                   	push   ebx
c000d4fc:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d4ff:	83 c4 20             	add    esp,0x20
c000d502:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000d50a:	75 0a                	jne    c000d516 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000d50c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000d514:	74 2c                	je     c000d542 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000d516:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d51c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d522:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d528:	83 ec 10             	sub    esp,0x10
c000d52b:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d52f:	89 f7                	mov    edi,esi
c000d531:	c1 e0 0a             	shl    eax,0xa
c000d534:	c1 ff 1f             	sar    edi,0x1f
c000d537:	57                   	push   edi
c000d538:	56                   	push   esi
c000d539:	52                   	push   edx
c000d53a:	50                   	push   eax
c000d53b:	e8 30 11 01 00       	call   c001e670 <__udivdi3>
c000d540:	eb 62                	jmp    c000d5a4 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000d542:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000d549:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000d550:	89 cf                	mov    edi,ecx
c000d552:	83 e2 7f             	and    edx,0x7f
c000d555:	83 e7 7f             	and    edi,0x7f
c000d558:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000d55f:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000d562:	83 e0 7f             	and    eax,0x7f
c000d565:	8d 14 01             	lea    edx,[ecx+eax*1]
c000d568:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000d56f:	83 e0 7f             	and    eax,0x7f
c000d572:	01 d0                	add    eax,edx
c000d574:	89 c5                	mov    ebp,eax
c000d576:	84 c0                	test   al,al
c000d578:	74 41                	je     c000d5bb <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000d57a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d580:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d586:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d58c:	83 ec 10             	sub    esp,0x10
c000d58f:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d593:	89 f7                	mov    edi,esi
c000d595:	c1 e0 0a             	shl    eax,0xa
c000d598:	c1 ff 1f             	sar    edi,0x1f
c000d59b:	57                   	push   edi
c000d59c:	56                   	push   esi
c000d59d:	52                   	push   edx
c000d59e:	50                   	push   eax
c000d59f:	e8 cc 10 01 00       	call   c001e670 <__udivdi3>
c000d5a4:	83 c4 14             	add    esp,0x14
c000d5a7:	52                   	push   edx
c000d5a8:	50                   	push   eax
c000d5a9:	6a 00                	push   0x0
c000d5ab:	6a 00                	push   0x0
c000d5ad:	53                   	push   ebx
c000d5ae:	e8 4b fe ff ff       	call   c000d3fe <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d5b3:	83 c4 20             	add    esp,0x20
c000d5b6:	e9 73 01 00 00       	jmp    c000d72e <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000d5bb:	89 f0                	mov    eax,esi
c000d5bd:	31 c9                	xor    ecx,ecx
c000d5bf:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d5c6:	75 02                	jne    c000d5ca <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000d5c8:	89 cd                	mov    ebp,ecx
c000d5ca:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000d5d1:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000d5d8:	c1 e2 08             	shl    edx,0x8
c000d5db:	c1 e6 10             	shl    esi,0x10
c000d5de:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000d5e6:	09 f2                	or     edx,esi
c000d5e8:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000d5f0:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000d5f7:	83 c0 10             	add    eax,0x10
c000d5fa:	09 f2                	or     edx,esi
c000d5fc:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000d603:	c1 e6 18             	shl    esi,0x18
c000d606:	09 f2                	or     edx,esi
c000d608:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000d60f:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000d613:	c1 e6 10             	shl    esi,0x10
c000d616:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d61d:	c1 e2 08             	shl    edx,0x8
c000d620:	09 f2                	or     edx,esi
c000d622:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000d629:	09 f2                	or     edx,esi
c000d62b:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000d632:	c1 e6 18             	shl    esi,0x18
c000d635:	09 f2                	or     edx,esi
c000d637:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000d63b:	41                   	inc    ecx
c000d63c:	83 f9 04             	cmp    ecx,0x4
c000d63f:	0f 85 7a ff ff ff    	jne    c000d5bf <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000d645:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d649:	83 f0 01             	xor    eax,0x1
c000d64c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d650:	75 4f                	jne    c000d6a1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d652:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d656:	83 f0 01             	xor    eax,0x1
c000d659:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d65d:	75 42                	jne    c000d6a1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d65f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d667:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d66f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d675:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d67b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d681:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d685:	89 f7                	mov    edi,esi
c000d687:	c1 e0 0a             	shl    eax,0xa
c000d68a:	c1 ff 1f             	sar    edi,0x1f
c000d68d:	57                   	push   edi
c000d68e:	56                   	push   esi
c000d68f:	52                   	push   edx
c000d690:	50                   	push   eax
c000d691:	e8 da 0f 01 00       	call   c001e670 <__udivdi3>
c000d696:	83 c4 10             	add    esp,0x10
c000d699:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d69d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d6a1:	89 e8                	mov    eax,ebp
c000d6a3:	0f b6 e8             	movzx  ebp,al
c000d6a6:	85 ed                	test   ebp,ebp
c000d6a8:	74 50                	je     c000d6fa <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d6aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d6ae:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d6b2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d6b6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000d6ba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6be:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6c2:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d6c6:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d6ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d6ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d6d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d6d6:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000d6da:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000d6de:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d6e2:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d6e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d6ea:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000d6ee:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000d6f2:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000d6f6:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000d6fa:	31 ed                	xor    ebp,ebp
c000d6fc:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d700:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d704:	89 f8                	mov    eax,edi
c000d706:	09 f0                	or     eax,esi
c000d708:	74 1e                	je     c000d728 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000d70a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d70e:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d712:	89 d1                	mov    ecx,edx
c000d714:	09 c1                	or     ecx,eax
c000d716:	74 10                	je     c000d728 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000d718:	83 ec 0c             	sub    esp,0xc
c000d71b:	57                   	push   edi
c000d71c:	56                   	push   esi
c000d71d:	52                   	push   edx
c000d71e:	50                   	push   eax
c000d71f:	53                   	push   ebx
c000d720:	e8 d9 fc ff ff       	call   c000d3fe <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d725:	83 c4 20             	add    esp,0x20
c000d728:	45                   	inc    ebp
c000d729:	83 fd 04             	cmp    ebp,0x4
c000d72c:	75 ce                	jne    c000d6fc <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000d72e:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d734:	5b                   	pop    ebx
c000d735:	5e                   	pop    esi
c000d736:	5f                   	pop    edi
c000d737:	5d                   	pop    ebp
c000d738:	c3                   	ret    
c000d739:	66 90                	xchg   ax,ax
c000d73b:	90                   	nop

c000d73c <Serial::Serial(char const*)>:
c000d73c:	83 ec 0c             	sub    esp,0xc
c000d73f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d743:	83 ec 08             	sub    esp,0x8
c000d746:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d74a:	50                   	push   eax
c000d74b:	e8 76 e8 ff ff       	call   c000bfc6 <Device::Device(char const*)>
c000d750:	83 c4 10             	add    esp,0x10
c000d753:	ba 6c 07 02 c0       	mov    edx,0xc002076c
c000d758:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d75c:	89 10                	mov    DWORD PTR [eax],edx
c000d75e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d762:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d76c:	90                   	nop
c000d76d:	83 c4 0c             	add    esp,0xc
c000d770:	c3                   	ret    
c000d771:	90                   	nop
c000d772:	66 90                	xchg   ax,ax

c000d774 <Serial::~Serial()>:
c000d774:	83 ec 0c             	sub    esp,0xc
c000d777:	ba 6c 07 02 c0       	mov    edx,0xc002076c
c000d77c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d780:	89 10                	mov    DWORD PTR [eax],edx
c000d782:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d786:	83 ec 0c             	sub    esp,0xc
c000d789:	50                   	push   eax
c000d78a:	e8 a1 e5 ff ff       	call   c000bd30 <Device::~Device()>
c000d78f:	83 c4 10             	add    esp,0x10
c000d792:	90                   	nop
c000d793:	83 c4 0c             	add    esp,0xc
c000d796:	c3                   	ret    
c000d797:	90                   	nop

c000d798 <Serial::~Serial()>:
c000d798:	83 ec 0c             	sub    esp,0xc
c000d79b:	83 ec 0c             	sub    esp,0xc
c000d79e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7a2:	e8 cd ff ff ff       	call   c000d774 <Serial::~Serial()>
c000d7a7:	83 c4 10             	add    esp,0x10
c000d7aa:	83 ec 08             	sub    esp,0x8
c000d7ad:	68 58 01 00 00       	push   0x158
c000d7b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7b6:	e8 0f d1 ff ff       	call   c000a8ca <operator delete(void*, unsigned long)>
c000d7bb:	83 c4 10             	add    esp,0x10
c000d7be:	83 c4 0c             	add    esp,0xc
c000d7c1:	c3                   	ret    
c000d7c2:	66 90                	xchg   ax,ax

c000d7c4 <Timer::Timer(char const*)>:
c000d7c4:	83 ec 0c             	sub    esp,0xc
c000d7c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7cb:	83 ec 08             	sub    esp,0x8
c000d7ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7d2:	50                   	push   eax
c000d7d3:	e8 ee e7 ff ff       	call   c000bfc6 <Device::Device(char const*)>
c000d7d8:	83 c4 10             	add    esp,0x10
c000d7db:	ba b0 07 02 c0       	mov    edx,0xc00207b0
c000d7e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7e4:	89 10                	mov    DWORD PTR [eax],edx
c000d7e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7ea:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000d7f4:	90                   	nop
c000d7f5:	83 c4 0c             	add    esp,0xc
c000d7f8:	c3                   	ret    
c000d7f9:	90                   	nop
c000d7fa:	66 90                	xchg   ax,ax

c000d7fc <Timer::~Timer()>:
c000d7fc:	83 ec 0c             	sub    esp,0xc
c000d7ff:	ba b0 07 02 c0       	mov    edx,0xc00207b0
c000d804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d808:	89 10                	mov    DWORD PTR [eax],edx
c000d80a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d80e:	83 ec 0c             	sub    esp,0xc
c000d811:	50                   	push   eax
c000d812:	e8 19 e5 ff ff       	call   c000bd30 <Device::~Device()>
c000d817:	83 c4 10             	add    esp,0x10
c000d81a:	90                   	nop
c000d81b:	83 c4 0c             	add    esp,0xc
c000d81e:	c3                   	ret    
c000d81f:	90                   	nop

c000d820 <Timer::~Timer()>:
c000d820:	83 ec 0c             	sub    esp,0xc
c000d823:	83 ec 0c             	sub    esp,0xc
c000d826:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d82a:	e8 cd ff ff ff       	call   c000d7fc <Timer::~Timer()>
c000d82f:	83 c4 10             	add    esp,0x10
c000d832:	83 ec 08             	sub    esp,0x8
c000d835:	68 5c 01 00 00       	push   0x15c
c000d83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d83e:	e8 87 d0 ff ff       	call   c000a8ca <operator delete(void*, unsigned long)>
c000d843:	83 c4 10             	add    esp,0x10
c000d846:	83 c4 0c             	add    esp,0xc
c000d849:	c3                   	ret    

c000d84a <Timer::read()>:
c000d84a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d84e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d854:	c3                   	ret    

c000d855 <setupTimer(int)>:
c000d855:	53                   	push   ebx
c000d856:	83 ec 14             	sub    esp,0x14
c000d859:	68 5c 01 00 00       	push   0x15c
c000d85e:	e8 4b a2 ff ff       	call   c0007aae <malloc>
c000d863:	89 04 24             	mov    DWORD PTR [esp],eax
c000d866:	89 c3                	mov    ebx,eax
c000d868:	e8 6b 06 01 00       	call   c001ded8 <PIT::PIT()>
c000d86d:	58                   	pop    eax
c000d86e:	5a                   	pop    edx
c000d86f:	53                   	push   ebx
c000d870:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000d876:	e8 b3 e5 ff ff       	call   c000be2e <Device::addChild(Device*)>
c000d87b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d87d:	6a 00                	push   0x0
c000d87f:	6a 00                	push   0x0
c000d881:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d885:	53                   	push   ebx
c000d886:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d889:	89 d8                	mov    eax,ebx
c000d88b:	83 c4 28             	add    esp,0x28
c000d88e:	5b                   	pop    ebx
c000d88f:	c3                   	ret    

c000d890 <timerHandler(unsigned int)>:
c000d890:	56                   	push   esi
c000d891:	53                   	push   ebx
c000d892:	51                   	push   ecx
c000d893:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d897:	01 05 8c 74 02 c0    	add    DWORD PTR ds:0xc002748c,eax
c000d89d:	80 3d bd 4e 02 c0 00 	cmp    BYTE PTR ds:0xc0024ebd,0x0
c000d8a4:	0f 84 4a 01 00 00    	je     c000d9f4 <timerHandler(unsigned int)+0x164>
c000d8aa:	fa                   	cli    
c000d8ab:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000d8b1:	83 ec 0c             	sub    esp,0xc
c000d8b4:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c000d8ba:	68 78 81 02 c0       	push   0xc0028178
c000d8bf:	e8 7c 13 01 00       	call   c001ec40 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d8c4:	83 c4 10             	add    esp,0x10
c000d8c7:	84 c0                	test   al,al
c000d8c9:	0f 85 a1 00 00 00    	jne    c000d970 <timerHandler(unsigned int)+0xe0>
c000d8cf:	83 ec 0c             	sub    esp,0xc
c000d8d2:	68 78 81 02 c0       	push   0xc0028178
c000d8d7:	e8 80 13 01 00       	call   c001ec5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d8dc:	83 c4 10             	add    esp,0x10
c000d8df:	89 c6                	mov    esi,eax
c000d8e1:	8d 76 00             	lea    esi,[esi+0x0]
c000d8e4:	83 ec 0c             	sub    esp,0xc
c000d8e7:	68 78 81 02 c0       	push   0xc0028178
c000d8ec:	e8 6b 13 01 00       	call   c001ec5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d8f1:	c7 04 24 78 81 02 c0 	mov    DWORD PTR [esp],0xc0028178
c000d8f8:	89 c3                	mov    ebx,eax
c000d8fa:	e8 65 13 01 00       	call   c001ec64 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d8ff:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d902:	83 c4 10             	add    esp,0x10
c000d905:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c000d90b:	77 23                	ja     c000d930 <timerHandler(unsigned int)+0xa0>
c000d90d:	83 ec 0c             	sub    esp,0xc
c000d910:	53                   	push   ebx
c000d911:	e8 de 7c 00 00       	call   c00155f4 <unblockTask(ThreadControlBlock*)>
c000d916:	83 c4 10             	add    esp,0x10
c000d919:	39 de                	cmp    esi,ebx
c000d91b:	75 27                	jne    c000d944 <timerHandler(unsigned int)+0xb4>
c000d91d:	83 ec 0c             	sub    esp,0xc
c000d920:	68 78 81 02 c0       	push   0xc0028178
c000d925:	e8 32 13 01 00       	call   c001ec5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d92a:	89 c6                	mov    esi,eax
c000d92c:	eb 12                	jmp    c000d940 <timerHandler(unsigned int)+0xb0>
c000d92e:	66 90                	xchg   ax,ax
c000d930:	52                   	push   edx
c000d931:	52                   	push   edx
c000d932:	53                   	push   ebx
c000d933:	68 78 81 02 c0       	push   0xc0028178
c000d938:	e8 e3 13 01 00       	call   c001ed20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d93d:	8d 76 00             	lea    esi,[esi+0x0]
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	90                   	nop
c000d944:	83 ec 0c             	sub    esp,0xc
c000d947:	68 78 81 02 c0       	push   0xc0028178
c000d94c:	e8 ef 12 01 00       	call   c001ec40 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d951:	83 c4 10             	add    esp,0x10
c000d954:	84 c0                	test   al,al
c000d956:	75 18                	jne    c000d970 <timerHandler(unsigned int)+0xe0>
c000d958:	83 ec 0c             	sub    esp,0xc
c000d95b:	68 78 81 02 c0       	push   0xc0028178
c000d960:	e8 f7 12 01 00       	call   c001ec5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d965:	83 c4 10             	add    esp,0x10
c000d968:	39 f0                	cmp    eax,esi
c000d96a:	0f 85 74 ff ff ff    	jne    c000d8e4 <timerHandler(unsigned int)+0x54>
c000d970:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d975:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d979:	74 41                	je     c000d9bc <timerHandler(unsigned int)+0x12c>
c000d97b:	80 3d bc 4e 02 c0 00 	cmp    BYTE PTR ds:0xc0024ebc,0x0
c000d982:	74 38                	je     c000d9bc <timerHandler(unsigned int)+0x12c>
c000d984:	fa                   	cli    
c000d985:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000d98b:	a1 8c 74 02 c0       	mov    eax,ds:0xc002748c
c000d990:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d996:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d999:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d99f:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d9a2:	72 08                	jb     c000d9ac <timerHandler(unsigned int)+0x11c>
c000d9a4:	e8 33 77 00 00       	call   c00150dc <schedule()>
c000d9a9:	8d 76 00             	lea    esi,[esi+0x0]
c000d9ac:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000d9b1:	48                   	dec    eax
c000d9b2:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000d9b7:	75 03                	jne    c000d9bc <timerHandler(unsigned int)+0x12c>
c000d9b9:	fb                   	sti    
c000d9ba:	66 90                	xchg   ax,ax
c000d9bc:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000d9c1:	48                   	dec    eax
c000d9c2:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000d9c7:	75 1b                	jne    c000d9e4 <timerHandler(unsigned int)+0x154>
c000d9c9:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c000d9d0:	74 12                	je     c000d9e4 <timerHandler(unsigned int)+0x154>
c000d9d2:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c000d9dc:	e8 fb 76 00 00       	call   c00150dc <schedule()>
c000d9e1:	8d 76 00             	lea    esi,[esi+0x0]
c000d9e4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000d9e9:	48                   	dec    eax
c000d9ea:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000d9ef:	75 03                	jne    c000d9f4 <timerHandler(unsigned int)+0x164>
c000d9f1:	fb                   	sti    
c000d9f2:	66 90                	xchg   ax,ax
c000d9f4:	58                   	pop    eax
c000d9f5:	5b                   	pop    ebx
c000d9f6:	5e                   	pop    esi
c000d9f7:	c3                   	ret    

c000d9f8 <VCache::VCache(PhysicalDisk*)>:
c000d9f8:	53                   	push   ebx
c000d9f9:	83 ec 18             	sub    esp,0x18
c000d9fc:	ba e0 07 02 c0       	mov    edx,0xc00207e0
c000da01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da05:	89 10                	mov    DWORD PTR [eax],edx
c000da07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da0b:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000da12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da16:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000da1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da21:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000da28:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000da2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da33:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000da3a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000da41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da45:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000da4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da50:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000da54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da58:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000da5f:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000da66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da6a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000da6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da72:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000da76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da7a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000da7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da82:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000da89:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000da91:	83 ec 0c             	sub    esp,0xc
c000da94:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000da98:	e8 11 a0 ff ff       	call   c0007aae <malloc>
c000da9d:	83 c4 10             	add    esp,0x10
c000daa0:	89 c3                	mov    ebx,eax
c000daa2:	83 ec 0c             	sub    esp,0xc
c000daa5:	53                   	push   ebx
c000daa6:	e8 cd 73 00 00       	call   c0014e78 <Mutex::Mutex()>
c000daab:	83 c4 10             	add    esp,0x10
c000daae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dab2:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000dab5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dab9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000dabd:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000dac0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dac4:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000dacb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dacf:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000dad5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dad9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dadc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dae0:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000dae6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000daec:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000daf0:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000daf3:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000daf6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dafa:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000dafe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000db02:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000db08:	05 00 02 00 00       	add    eax,0x200
c000db0d:	c1 e0 03             	shl    eax,0x3
c000db10:	83 ec 0c             	sub    esp,0xc
c000db13:	50                   	push   eax
c000db14:	e8 95 9f ff ff       	call   c0007aae <malloc>
c000db19:	83 c4 10             	add    esp,0x10
c000db1c:	89 c2                	mov    edx,eax
c000db1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db22:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000db25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db29:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000db30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db34:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000db38:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000db3c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000db42:	89 d0                	mov    eax,edx
c000db44:	c1 e0 02             	shl    eax,0x2
c000db47:	01 d0                	add    eax,edx
c000db49:	c1 e0 04             	shl    eax,0x4
c000db4c:	83 ec 0c             	sub    esp,0xc
c000db4f:	50                   	push   eax
c000db50:	e8 59 9f ff ff       	call   c0007aae <malloc>
c000db55:	83 c4 10             	add    esp,0x10
c000db58:	89 c2                	mov    edx,eax
c000db5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db5e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000db61:	90                   	nop
c000db62:	83 c4 18             	add    esp,0x18
c000db65:	5b                   	pop    ebx
c000db66:	c3                   	ret    
c000db67:	90                   	nop

c000db68 <VCache::invalidateReadBuffer()>:
c000db68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db6c:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000db72:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000db76:	c3                   	ret    
c000db77:	90                   	nop

c000db78 <VCache::writeWriteBuffer()>:
c000db78:	53                   	push   ebx
c000db79:	83 ec 08             	sub    esp,0x8
c000db7c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000db80:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000db84:	74 1e                	je     c000dba4 <VCache::writeWriteBuffer()+0x2c>
c000db86:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000db89:	83 ec 0c             	sub    esp,0xc
c000db8c:	8b 10                	mov    edx,DWORD PTR [eax]
c000db8e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000db91:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000db94:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000db97:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000db9a:	50                   	push   eax
c000db9b:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000db9e:	83 c4 20             	add    esp,0x20
c000dba1:	8d 76 00             	lea    esi,[esi+0x0]
c000dba4:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dbab:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000dbb2:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000dbb6:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000dbbd:	83 c4 08             	add    esp,0x8
c000dbc0:	5b                   	pop    ebx
c000dbc1:	c3                   	ret    
c000dbc2:	66 90                	xchg   ax,ax

c000dbc4 <VCache::~VCache()>:
c000dbc4:	83 ec 0c             	sub    esp,0xc
c000dbc7:	ba e0 07 02 c0       	mov    edx,0xc00207e0
c000dbcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbd0:	89 10                	mov    DWORD PTR [eax],edx
c000dbd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbd6:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000dbd9:	0f b6 c0             	movzx  eax,al
c000dbdc:	85 c0                	test   eax,eax
c000dbde:	74 10                	je     c000dbf0 <VCache::~VCache()+0x2c>
c000dbe0:	83 ec 0c             	sub    esp,0xc
c000dbe3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbe7:	e8 8c ff ff ff       	call   c000db78 <VCache::writeWriteBuffer()>
c000dbec:	83 c4 10             	add    esp,0x10
c000dbef:	90                   	nop
c000dbf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbf4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000dbf7:	83 ec 0c             	sub    esp,0xc
c000dbfa:	50                   	push   eax
c000dbfb:	e8 be 9e ff ff       	call   c0007abe <free>
c000dc00:	83 c4 10             	add    esp,0x10
c000dc03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc07:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000dc0a:	83 ec 0c             	sub    esp,0xc
c000dc0d:	50                   	push   eax
c000dc0e:	e8 ab 9e ff ff       	call   c0007abe <free>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	90                   	nop
c000dc17:	83 c4 0c             	add    esp,0xc
c000dc1a:	c3                   	ret    
c000dc1b:	90                   	nop

c000dc1c <VCache::~VCache()>:
c000dc1c:	83 ec 0c             	sub    esp,0xc
c000dc1f:	83 ec 0c             	sub    esp,0xc
c000dc22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc26:	e8 99 ff ff ff       	call   c000dbc4 <VCache::~VCache()>
c000dc2b:	83 c4 10             	add    esp,0x10
c000dc2e:	83 ec 08             	sub    esp,0x8
c000dc31:	6a 44                	push   0x44
c000dc33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc37:	e8 8e cc ff ff       	call   c000a8ca <operator delete(void*, unsigned long)>
c000dc3c:	83 c4 10             	add    esp,0x10
c000dc3f:	83 c4 0c             	add    esp,0xc
c000dc42:	c3                   	ret    
c000dc43:	90                   	nop

c000dc44 <VCache::write(unsigned long long, int, void*)>:
c000dc44:	55                   	push   ebp
c000dc45:	57                   	push   edi
c000dc46:	56                   	push   esi
c000dc47:	53                   	push   ebx
c000dc48:	83 ec 1c             	sub    esp,0x1c
c000dc4b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dc4f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dc53:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000dc57:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc5b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000dc5f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000dc63:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000dc67:	74 07                	je     c000dc70 <VCache::write(unsigned long long, int, void*)+0x2c>
c000dc69:	53                   	push   ebx
c000dc6a:	e8 f9 fe ff ff       	call   c000db68 <VCache::invalidateReadBuffer()>
c000dc6f:	58                   	pop    eax
c000dc70:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dc74:	74 62                	je     c000dcd8 <VCache::write(unsigned long long, int, void*)+0x94>
c000dc76:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000dc79:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dc7d:	99                   	cdq    
c000dc7e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc82:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000dc85:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000dc88:	31 c1                	xor    ecx,eax
c000dc8a:	89 d0                	mov    eax,edx
c000dc8c:	89 ca                	mov    edx,ecx
c000dc8e:	31 e8                	xor    eax,ebp
c000dc90:	09 c2                	or     edx,eax
c000dc92:	75 38                	jne    c000dccc <VCache::write(unsigned long long, int, void*)+0x88>
c000dc94:	83 ff 01             	cmp    edi,0x1
c000dc97:	75 33                	jne    c000dccc <VCache::write(unsigned long long, int, void*)+0x88>
c000dc99:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dc9c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dca0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000dca6:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000dca9:	0f af c8             	imul   ecx,eax
c000dcac:	01 cf                	add    edi,ecx
c000dcae:	89 c1                	mov    ecx,eax
c000dcb0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dcb2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000dcb5:	40                   	inc    eax
c000dcb6:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000dcb9:	83 f8 50             	cmp    eax,0x50
c000dcbc:	75 6a                	jne    c000dd28 <VCache::write(unsigned long long, int, void*)+0xe4>
c000dcbe:	83 ec 0c             	sub    esp,0xc
c000dcc1:	53                   	push   ebx
c000dcc2:	e8 b1 fe ff ff       	call   c000db78 <VCache::writeWriteBuffer()>
c000dcc7:	83 c4 10             	add    esp,0x10
c000dcca:	eb 5c                	jmp    c000dd28 <VCache::write(unsigned long long, int, void*)+0xe4>
c000dccc:	83 ec 0c             	sub    esp,0xc
c000dccf:	53                   	push   ebx
c000dcd0:	e8 a3 fe ff ff       	call   c000db78 <VCache::writeWriteBuffer()>
c000dcd5:	83 c4 10             	add    esp,0x10
c000dcd8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dcdb:	83 ff 4f             	cmp    edi,0x4f
c000dcde:	7f 20                	jg     c000dd00 <VCache::write(unsigned long long, int, void*)+0xbc>
c000dce0:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000dce3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dce7:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000dcea:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000dced:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000dcf1:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000dcf4:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dcfa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dcfc:	eb 2a                	jmp    c000dd28 <VCache::write(unsigned long long, int, void*)+0xe4>
c000dcfe:	66 90                	xchg   ax,ax
c000dd00:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd02:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000dd06:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000dd0a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000dd0e:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000dd12:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000dd16:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dd1a:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000dd1d:	83 c4 1c             	add    esp,0x1c
c000dd20:	5b                   	pop    ebx
c000dd21:	5e                   	pop    esi
c000dd22:	5f                   	pop    edi
c000dd23:	5d                   	pop    ebp
c000dd24:	ff e0                	jmp    eax
c000dd26:	66 90                	xchg   ax,ax
c000dd28:	83 c4 1c             	add    esp,0x1c
c000dd2b:	31 c0                	xor    eax,eax
c000dd2d:	5b                   	pop    ebx
c000dd2e:	5e                   	pop    esi
c000dd2f:	5f                   	pop    edi
c000dd30:	5d                   	pop    ebp
c000dd31:	c3                   	ret    

c000dd32 <VCache::read(unsigned long long, int, void*)>:
c000dd32:	55                   	push   ebp
c000dd33:	57                   	push   edi
c000dd34:	56                   	push   esi
c000dd35:	53                   	push   ebx
c000dd36:	83 ec 1c             	sub    esp,0x1c
c000dd39:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000dd3d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dd41:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000dd45:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000dd49:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000dd4d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dd51:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000dd55:	74 0d                	je     c000dd64 <VCache::read(unsigned long long, int, void*)+0x32>
c000dd57:	83 ec 0c             	sub    esp,0xc
c000dd5a:	57                   	push   edi
c000dd5b:	e8 18 fe ff ff       	call   c000db78 <VCache::writeWriteBuffer()>
c000dd60:	83 c4 10             	add    esp,0x10
c000dd63:	90                   	nop
c000dd64:	83 fd 01             	cmp    ebp,0x1
c000dd67:	0f 85 93 00 00 00    	jne    c000de00 <VCache::read(unsigned long long, int, void*)+0xce>
c000dd6d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dd70:	89 04 24             	mov    DWORD PTR [esp],eax
c000dd73:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000dd7a:	0f 85 80 00 00 00    	jne    c000de00 <VCache::read(unsigned long long, int, void*)+0xce>
c000dd80:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000dd83:	89 e9                	mov    ecx,ebp
c000dd85:	f7 d9                	neg    ecx
c000dd87:	89 c8                	mov    eax,ecx
c000dd89:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000dd8d:	c1 f8 1f             	sar    eax,0x1f
c000dd90:	21 d9                	and    ecx,ebx
c000dd92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dd96:	89 c8                	mov    eax,ecx
c000dd98:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dd9c:	21 f1                	and    ecx,esi
c000dd9e:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000dda2:	89 ca                	mov    edx,ecx
c000dda4:	74 2e                	je     c000ddd4 <VCache::read(unsigned long long, int, void*)+0xa2>
c000dda6:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000dda9:	75 29                	jne    c000ddd4 <VCache::read(unsigned long long, int, void*)+0xa2>
c000ddab:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000ddae:	75 24                	jne    c000ddd4 <VCache::read(unsigned long long, int, void*)+0xa2>
c000ddb0:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ddb3:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000ddb9:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000ddbc:	8d 70 ff             	lea    esi,[eax-0x1]
c000ddbf:	21 f3                	and    ebx,esi
c000ddc1:	0f af d9             	imul   ebx,ecx
c000ddc4:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000ddc7:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000ddcb:	89 de                	mov    esi,ebx
c000ddcd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ddcf:	31 c0                	xor    eax,eax
c000ddd1:	eb 61                	jmp    c000de34 <VCache::read(unsigned long long, int, void*)+0x102>
c000ddd3:	90                   	nop
c000ddd4:	83 ec 0c             	sub    esp,0xc
c000ddd7:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000dddb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000dddf:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000dde2:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000dde5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dde7:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000ddea:	55                   	push   ebp
c000ddeb:	52                   	push   edx
c000ddec:	50                   	push   eax
c000dded:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf1:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000ddf4:	83 c4 20             	add    esp,0x20
c000ddf7:	85 c0                	test   eax,eax
c000ddf9:	75 39                	jne    c000de34 <VCache::read(unsigned long long, int, void*)+0x102>
c000ddfb:	eb b3                	jmp    c000ddb0 <VCache::read(unsigned long long, int, void*)+0x7e>
c000ddfd:	8d 76 00             	lea    esi,[esi+0x0]
c000de00:	83 ec 0c             	sub    esp,0xc
c000de03:	57                   	push   edi
c000de04:	e8 5f fd ff ff       	call   c000db68 <VCache::invalidateReadBuffer()>
c000de09:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de0c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000de10:	8b 10                	mov    edx,DWORD PTR [eax]
c000de12:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000de16:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000de1a:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000de1e:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000de22:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000de26:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000de29:	83 c4 2c             	add    esp,0x2c
c000de2c:	5b                   	pop    ebx
c000de2d:	5e                   	pop    esi
c000de2e:	5f                   	pop    edi
c000de2f:	5d                   	pop    ebp
c000de30:	ff e0                	jmp    eax
c000de32:	66 90                	xchg   ax,ax
c000de34:	83 c4 1c             	add    esp,0x1c
c000de37:	5b                   	pop    ebx
c000de38:	5e                   	pop    esi
c000de39:	5f                   	pop    edi
c000de3a:	5d                   	pop    ebp
c000de3b:	c3                   	ret    

c000de3c <Video::putrect(int, int, int, int, unsigned int)>:
c000de3c:	55                   	push   ebp
c000de3d:	57                   	push   edi
c000de3e:	56                   	push   esi
c000de3f:	53                   	push   ebx
c000de40:	83 ec 1c             	sub    esp,0x1c
c000de43:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000de47:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000de4b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000de4f:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000de53:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000de57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de5b:	01 df                	add    edi,ebx
c000de5d:	39 fb                	cmp    ebx,edi
c000de5f:	7d 1f                	jge    c000de80 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000de61:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000de65:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000de69:	7d 12                	jge    c000de7d <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000de6b:	8b 16                	mov    edx,DWORD PTR [esi]
c000de6d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000de71:	53                   	push   ebx
c000de72:	55                   	push   ebp
c000de73:	45                   	inc    ebp
c000de74:	56                   	push   esi
c000de75:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000de78:	83 c4 10             	add    esp,0x10
c000de7b:	eb e8                	jmp    c000de65 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000de7d:	43                   	inc    ebx
c000de7e:	eb dd                	jmp    c000de5d <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000de80:	83 c4 1c             	add    esp,0x1c
c000de83:	5b                   	pop    ebx
c000de84:	5e                   	pop    esi
c000de85:	5f                   	pop    edi
c000de86:	5d                   	pop    ebp
c000de87:	c3                   	ret    

c000de88 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000de88:	55                   	push   ebp
c000de89:	57                   	push   edi
c000de8a:	31 ff                	xor    edi,edi
c000de8c:	56                   	push   esi
c000de8d:	53                   	push   ebx
c000de8e:	83 ec 1c             	sub    esp,0x1c
c000de91:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000de95:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000de99:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000dea0:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000dea5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dea9:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000dead:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000deb1:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000deb4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000deb8:	01 f9                	add    ecx,edi
c000deba:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000debe:	7d 2f                	jge    c000deef <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000dec0:	31 f6                	xor    esi,esi
c000dec2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000dec6:	01 f2                	add    edx,esi
c000dec8:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000decc:	7d 1a                	jge    c000dee8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000dece:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ded1:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000ded4:	46                   	inc    esi
c000ded5:	51                   	push   ecx
c000ded6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000deda:	52                   	push   edx
c000dedb:	55                   	push   ebp
c000dedc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dedf:	83 c4 10             	add    esp,0x10
c000dee2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dee6:	eb da                	jmp    c000dec2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000dee8:	47                   	inc    edi
c000dee9:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000deed:	eb c5                	jmp    c000deb4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000deef:	83 c4 1c             	add    esp,0x1c
c000def2:	5b                   	pop    ebx
c000def3:	5e                   	pop    esi
c000def4:	5f                   	pop    edi
c000def5:	5d                   	pop    ebp
c000def6:	c3                   	ret    
c000def7:	90                   	nop

c000def8 <Video::blit(unsigned int*, int, int, int, int)>:
c000def8:	55                   	push   ebp
c000def9:	57                   	push   edi
c000defa:	56                   	push   esi
c000defb:	53                   	push   ebx
c000defc:	83 ec 1c             	sub    esp,0x1c
c000deff:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000df03:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000df07:	85 c0                	test   eax,eax
c000df09:	79 02                	jns    c000df0d <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000df0b:	31 c0                	xor    eax,eax
c000df0d:	c1 e0 02             	shl    eax,0x2
c000df10:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000df14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000df18:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000df1c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000df20:	39 d8                	cmp    eax,ebx
c000df22:	7e 49                	jle    c000df6d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000df24:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000df2a:	7c 41                	jl     c000df6d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000df2c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000df30:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000df34:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000df38:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000df3c:	39 f9                	cmp    ecx,edi
c000df3e:	7e 22                	jle    c000df62 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000df40:	83 c5 04             	add    ebp,0x4
c000df43:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000df49:	7c 14                	jl     c000df5f <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000df4b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000df4d:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000df50:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000df54:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000df58:	56                   	push   esi
c000df59:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000df5c:	83 c4 10             	add    esp,0x10
c000df5f:	47                   	inc    edi
c000df60:	eb d2                	jmp    c000df34 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000df62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df66:	43                   	inc    ebx
c000df67:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000df6b:	eb ab                	jmp    c000df18 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000df6d:	83 c4 1c             	add    esp,0x1c
c000df70:	5b                   	pop    ebx
c000df71:	5e                   	pop    esi
c000df72:	5f                   	pop    edi
c000df73:	5d                   	pop    ebp
c000df74:	c3                   	ret    
c000df75:	90                   	nop

c000df76 <Video::clearScreen(unsigned int)>:
c000df76:	57                   	push   edi
c000df77:	56                   	push   esi
c000df78:	53                   	push   ebx
c000df79:	31 db                	xor    ebx,ebx
c000df7b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000df7f:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000df85:	7e 1f                	jle    c000dfa6 <Video::clearScreen(unsigned int)+0x30>
c000df87:	31 ff                	xor    edi,edi
c000df89:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000df8f:	7e 12                	jle    c000dfa3 <Video::clearScreen(unsigned int)+0x2d>
c000df91:	8b 06                	mov    eax,DWORD PTR [esi]
c000df93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df97:	53                   	push   ebx
c000df98:	57                   	push   edi
c000df99:	47                   	inc    edi
c000df9a:	56                   	push   esi
c000df9b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000df9e:	83 c4 10             	add    esp,0x10
c000dfa1:	eb e6                	jmp    c000df89 <Video::clearScreen(unsigned int)+0x13>
c000dfa3:	43                   	inc    ebx
c000dfa4:	eb d9                	jmp    c000df7f <Video::clearScreen(unsigned int)+0x9>
c000dfa6:	5b                   	pop    ebx
c000dfa7:	5e                   	pop    esi
c000dfa8:	5f                   	pop    edi
c000dfa9:	c3                   	ret    

c000dfaa <Video::putpixel(int, int, unsigned int)>:
c000dfaa:	c7 44 24 04 e8 07 02 c0 	mov    DWORD PTR [esp+0x4],0xc00207e8
c000dfb2:	e9 70 29 00 00       	jmp    c0010927 <KePanic(char const*)>
c000dfb7:	90                   	nop

c000dfb8 <Video::readPixelApprox(int, int)>:
c000dfb8:	83 ec 18             	sub    esp,0x18
c000dfbb:	68 09 08 02 c0       	push   0xc0020809
c000dfc0:	e8 62 29 00 00       	call   c0010927 <KePanic(char const*)>
c000dfc5:	31 c0                	xor    eax,eax
c000dfc7:	83 c4 1c             	add    esp,0x1c
c000dfca:	c3                   	ret    
c000dfcb:	90                   	nop

c000dfcc <Video::Video(char const*)>:
c000dfcc:	83 ec 0c             	sub    esp,0xc
c000dfcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfd3:	83 ec 08             	sub    esp,0x8
c000dfd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfda:	50                   	push   eax
c000dfdb:	e8 e6 df ff ff       	call   c000bfc6 <Device::Device(char const*)>
c000dfe0:	83 c4 10             	add    esp,0x10
c000dfe3:	ba 84 08 02 c0       	mov    edx,0xc0020884
c000dfe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfec:	89 10                	mov    DWORD PTR [eax],edx
c000dfee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dff2:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000dffc:	90                   	nop
c000dffd:	83 c4 0c             	add    esp,0xc
c000e000:	c3                   	ret    
c000e001:	90                   	nop

c000e002 <Video::~Video()>:
c000e002:	83 ec 0c             	sub    esp,0xc
c000e005:	ba 84 08 02 c0       	mov    edx,0xc0020884
c000e00a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e00e:	89 10                	mov    DWORD PTR [eax],edx
c000e010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e014:	83 ec 0c             	sub    esp,0xc
c000e017:	50                   	push   eax
c000e018:	e8 13 dd ff ff       	call   c000bd30 <Device::~Device()>
c000e01d:	83 c4 10             	add    esp,0x10
c000e020:	90                   	nop
c000e021:	83 c4 0c             	add    esp,0xc
c000e024:	c3                   	ret    
c000e025:	90                   	nop

c000e026 <Video::~Video()>:
c000e026:	83 ec 0c             	sub    esp,0xc
c000e029:	83 ec 0c             	sub    esp,0xc
c000e02c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e030:	e8 cd ff ff ff       	call   c000e002 <Video::~Video()>
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	83 ec 08             	sub    esp,0x8
c000e03b:	68 64 01 00 00       	push   0x164
c000e040:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e044:	e8 81 c8 ff ff       	call   c000a8ca <operator delete(void*, unsigned long)>
c000e049:	83 c4 10             	add    esp,0x10
c000e04c:	83 c4 0c             	add    esp,0xc
c000e04f:	c3                   	ret    

c000e050 <Video::isMonochrome()>:
c000e050:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e054:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e05a:	c3                   	ret    
c000e05b:	90                   	nop

c000e05c <Video::getWidth()>:
c000e05c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e060:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e066:	c3                   	ret    
c000e067:	90                   	nop

c000e068 <Video::getHeight()>:
c000e068:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e06c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e072:	c3                   	ret    
c000e073:	90                   	nop

c000e074 <Video::drawCursor(int, int, unsigned int*, int)>:
c000e074:	55                   	push   ebp
c000e075:	57                   	push   edi
c000e076:	56                   	push   esi
c000e077:	53                   	push   ebx
c000e078:	83 ec 2c             	sub    esp,0x2c
c000e07b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e07f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e083:	83 f8 01             	cmp    eax,0x1
c000e086:	19 c9                	sbb    ecx,ecx
c000e088:	31 db                	xor    ebx,ebx
c000e08a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e08e:	89 cd                	mov    ebp,ecx
c000e090:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e098:	f7 d5                	not    ebp
c000e09a:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000e0a0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e0a4:	01 d8                	add    eax,ebx
c000e0a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e0aa:	56                   	push   esi
c000e0ab:	e8 b8 ff ff ff       	call   c000e068 <Video::getHeight()>
c000e0b0:	59                   	pop    ecx
c000e0b1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e0b5:	7e 70                	jle    c000e127 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000e0b7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e0bb:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000e0bf:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e0c2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e0c6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e0ca:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e0d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0d5:	89 f8                	mov    eax,edi
c000e0d7:	83 c0 20             	add    eax,0x20
c000e0da:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e0de:	56                   	push   esi
c000e0df:	e8 78 ff ff ff       	call   c000e05c <Video::getWidth()>
c000e0e4:	5a                   	pop    edx
c000e0e5:	39 c7                	cmp    edi,eax
c000e0e7:	7d 34                	jge    c000e11d <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000e0e9:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000e0ee:	74 05                	je     c000e0f5 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000e0f0:	8b 06                	mov    eax,DWORD PTR [esi]
c000e0f2:	55                   	push   ebp
c000e0f3:	eb 0d                	jmp    c000e102 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000e0f5:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000e0fa:	74 12                	je     c000e10e <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000e0fc:	8b 06                	mov    eax,DWORD PTR [esi]
c000e0fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e102:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e106:	57                   	push   edi
c000e107:	56                   	push   esi
c000e108:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e10b:	83 c4 10             	add    esp,0x10
c000e10e:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000e112:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000e116:	47                   	inc    edi
c000e117:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000e11b:	75 c1                	jne    c000e0de <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000e11d:	43                   	inc    ebx
c000e11e:	83 fb 20             	cmp    ebx,0x20
c000e121:	0f 85 79 ff ff ff    	jne    c000e0a0 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000e127:	83 c4 2c             	add    esp,0x2c
c000e12a:	5b                   	pop    ebx
c000e12b:	5e                   	pop    esi
c000e12c:	5f                   	pop    edi
c000e12d:	5d                   	pop    ebp
c000e12e:	c3                   	ret    
c000e12f:	90                   	nop

c000e130 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000e130:	55                   	push   ebp
c000e131:	57                   	push   edi
c000e132:	56                   	push   esi
c000e133:	53                   	push   ebx
c000e134:	83 ec 28             	sub    esp,0x28
c000e137:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e13b:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000e13f:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000e143:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000e147:	c1 e6 08             	shl    esi,0x8
c000e14a:	01 c6                	add    esi,eax
c000e14c:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000e150:	c1 e0 08             	shl    eax,0x8
c000e153:	01 d0                	add    eax,edx
c000e155:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e159:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e15d:	0f af c6             	imul   eax,esi
c000e160:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000e167:	50                   	push   eax
c000e168:	e8 41 99 ff ff       	call   c0007aae <malloc>
c000e16d:	83 c4 10             	add    esp,0x10
c000e170:	89 c7                	mov    edi,eax
c000e172:	85 c0                	test   eax,eax
c000e174:	75 10                	jne    c000e186 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000e176:	83 ec 0c             	sub    esp,0xc
c000e179:	68 34 08 02 c0       	push   0xc0020834
c000e17e:	e8 a4 27 00 00       	call   c0010927 <KePanic(char const*)>
c000e183:	83 c4 10             	add    esp,0x10
c000e186:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000e18a:	ba 12 00 00 00       	mov    edx,0x12
c000e18f:	85 c0                	test   eax,eax
c000e191:	74 11                	je     c000e1a4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000e193:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000e197:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000e19b:	c1 fa 03             	sar    edx,0x3
c000e19e:	0f af d1             	imul   edx,ecx
c000e1a1:	83 c2 12             	add    edx,0x12
c000e1a4:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000e1a8:	74 04                	je     c000e1ae <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000e1aa:	85 f6                	test   esi,esi
c000e1ac:	75 12                	jne    c000e1c0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000e1ae:	83 ec 0c             	sub    esp,0xc
c000e1b1:	68 44 08 02 c0       	push   0xc0020844
c000e1b6:	e8 3c c8 ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c000e1bb:	e9 b8 00 00 00       	jmp    c000e278 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000e1c0:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000e1c4:	83 f9 02             	cmp    ecx,0x2
c000e1c7:	0f 85 96 00 00 00    	jne    c000e263 <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000e1cd:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000e1d2:	75 0e                	jne    c000e1e2 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e1d4:	85 c0                	test   eax,eax
c000e1d6:	75 0a                	jne    c000e1e2 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e1d8:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000e1db:	83 e8 18             	sub    eax,0x18
c000e1de:	a8 f7                	test   al,0xf7
c000e1e0:	74 0a                	je     c000e1ec <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000e1e2:	83 ec 0c             	sub    esp,0xc
c000e1e5:	68 59 08 02 c0       	push   0xc0020859
c000e1ea:	eb 7f                	jmp    c000e26b <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000e1ec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e1f4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000e1fc:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000e200:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e208:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000e20c:	75 0c                	jne    c000e21a <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000e20e:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000e213:	c1 e0 18             	shl    eax,0x18
c000e216:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e21a:	45                   	inc    ebp
c000e21b:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000e220:	c1 e1 10             	shl    ecx,0x10
c000e223:	89 c8                	mov    eax,ecx
c000e225:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000e22a:	c1 e1 08             	shl    ecx,0x8
c000e22d:	09 c1                	or     ecx,eax
c000e22f:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000e233:	09 c1                	or     ecx,eax
c000e235:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000e239:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000e23d:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000e241:	c1 f8 03             	sar    eax,0x3
c000e244:	01 c2                	add    edx,eax
c000e246:	89 e8                	mov    eax,ebp
c000e248:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000e24c:	39 c6                	cmp    esi,eax
c000e24e:	7f b0                	jg     c000e200 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000e250:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e254:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e258:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000e25b:	7e 22                	jle    c000e27f <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000e25d:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000e261:	eb 99                	jmp    c000e1fc <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000e263:	50                   	push   eax
c000e264:	50                   	push   eax
c000e265:	51                   	push   ecx
c000e266:	68 67 08 02 c0       	push   0xc0020867
c000e26b:	e8 87 c7 ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c000e270:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e273:	e8 46 98 ff ff       	call   c0007abe <free>
c000e278:	83 c4 10             	add    esp,0x10
c000e27b:	31 ff                	xor    edi,edi
c000e27d:	eb 0f                	jmp    c000e28e <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000e27f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e283:	89 30                	mov    DWORD PTR [eax],esi
c000e285:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e289:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000e28c:	89 30                	mov    DWORD PTR [eax],esi
c000e28e:	83 c4 1c             	add    esp,0x1c
c000e291:	89 f8                	mov    eax,edi
c000e293:	5b                   	pop    ebx
c000e294:	5e                   	pop    esi
c000e295:	5f                   	pop    edi
c000e296:	5d                   	pop    ebp
c000e297:	c3                   	ret    

c000e298 <Video::putTGA(int, int, unsigned char*, int)>:
c000e298:	55                   	push   ebp
c000e299:	57                   	push   edi
c000e29a:	56                   	push   esi
c000e29b:	53                   	push   ebx
c000e29c:	83 ec 28             	sub    esp,0x28
c000e29f:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000e2a3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e2a7:	50                   	push   eax
c000e2a8:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e2ac:	50                   	push   eax
c000e2ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e2b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e2b5:	56                   	push   esi
c000e2b6:	e8 75 fe ff ff       	call   c000e130 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000e2bb:	83 c4 20             	add    esp,0x20
c000e2be:	85 c0                	test   eax,eax
c000e2c0:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e2c4:	74 35                	je     c000e2fb <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e2c6:	89 c7                	mov    edi,eax
c000e2c8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e2cc:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e2d0:	39 d8                	cmp    eax,ebx
c000e2d2:	7e 27                	jle    c000e2fb <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e2d4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e2d8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e2dc:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000e2e0:	39 e8                	cmp    eax,ebp
c000e2e2:	7e 14                	jle    c000e2f8 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000e2e4:	8b 06                	mov    eax,DWORD PTR [esi]
c000e2e6:	83 c7 04             	add    edi,0x4
c000e2e9:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000e2ec:	53                   	push   ebx
c000e2ed:	55                   	push   ebp
c000e2ee:	45                   	inc    ebp
c000e2ef:	56                   	push   esi
c000e2f0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e2f3:	83 c4 10             	add    esp,0x10
c000e2f6:	eb e0                	jmp    c000e2d8 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000e2f8:	43                   	inc    ebx
c000e2f9:	eb cd                	jmp    c000e2c8 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000e2fb:	83 c4 1c             	add    esp,0x1c
c000e2fe:	5b                   	pop    ebx
c000e2ff:	5e                   	pop    esi
c000e300:	5f                   	pop    edi
c000e301:	5d                   	pop    ebp
c000e302:	c3                   	ret    
c000e303:	90                   	nop

c000e304 <ACPI::close(int, int, void*)>:
c000e304:	83 ec 1c             	sub    esp,0x1c
c000e307:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000e30f:	74 0b                	je     c000e31c <ACPI::close(int, int, void*)+0x18>
c000e311:	b8 00 00 00 00       	mov    eax,0x0
c000e316:	e9 99 00 00 00       	jmp    c000e3b4 <ACPI::close(int, int, void*)+0xb0>
c000e31b:	90                   	nop
c000e31c:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000e321:	75 29                	jne    c000e34c <ACPI::close(int, int, void*)+0x48>
c000e323:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000e328:	85 c0                	test   eax,eax
c000e32a:	74 08                	je     c000e334 <ACPI::close(int, int, void*)+0x30>
c000e32c:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000e331:	ff d0                	call   eax
c000e333:	90                   	nop
c000e334:	83 ec 0c             	sub    esp,0xc
c000e337:	68 c8 08 02 c0       	push   0xc00208c8
c000e33c:	e8 e6 25 00 00       	call   c0010927 <KePanic(char const*)>
c000e341:	83 c4 10             	add    esp,0x10
c000e344:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e349:	eb 69                	jmp    c000e3b4 <ACPI::close(int, int, void*)+0xb0>
c000e34b:	90                   	nop
c000e34c:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000e351:	75 59                	jne    c000e3ac <ACPI::close(int, int, void*)+0xa8>
c000e353:	a1 a4 74 02 c0       	mov    eax,ds:0xc00274a4
c000e358:	85 c0                	test   eax,eax
c000e35a:	74 08                	je     c000e364 <ACPI::close(int, int, void*)+0x60>
c000e35c:	a1 a4 74 02 c0       	mov    eax,ds:0xc00274a4
c000e361:	ff d0                	call   eax
c000e363:	90                   	nop
c000e364:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000e369:	8d 76 00             	lea    esi,[esi+0x0]
c000e36c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000e371:	83 e0 02             	and    eax,0x2
c000e374:	74 1e                	je     c000e394 <ACPI::close(int, int, void*)+0x90>
c000e376:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000e37d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e381:	89 c2                	mov    edx,eax
c000e383:	ec                   	in     al,dx
c000e384:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e388:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000e38c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e390:	eb da                	jmp    c000e36c <ACPI::close(int, int, void*)+0x68>
c000e392:	66 90                	xchg   ax,ax
c000e394:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000e39b:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000e3a0:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000e3a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e3a8:	ee                   	out    dx,al
c000e3a9:	8d 76 00             	lea    esi,[esi+0x0]
c000e3ac:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e3b1:	8d 76 00             	lea    esi,[esi+0x0]
c000e3b4:	83 c4 1c             	add    esp,0x1c
c000e3b7:	c3                   	ret    

c000e3b8 <findRSDP()>:
c000e3b8:	83 ec 1c             	sub    esp,0x1c
c000e3bb:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e3c0:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e3c6:	83 e0 04             	and    eax,0x4
c000e3c9:	0f b6 c0             	movzx  eax,al
c000e3cc:	85 c0                	test   eax,eax
c000e3ce:	75 08                	jne    c000e3d8 <findRSDP()+0x20>
c000e3d0:	b8 00 00 00 00       	mov    eax,0x0
c000e3d5:	eb 75                	jmp    c000e44c <findRSDP()+0x94>
c000e3d7:	90                   	nop
c000e3d8:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c000e3dd:	3d ff 07 00 00       	cmp    eax,0x7ff
c000e3e2:	7f 1c                	jg     c000e400 <findRSDP()+0x48>
c000e3e4:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e3e9:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e3ef:	83 e2 fb             	and    edx,0xfffffffb
c000e3f2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e3f8:	b8 00 00 00 00       	mov    eax,0x0
c000e3fd:	eb 4d                	jmp    c000e44c <findRSDP()+0x94>
c000e3ff:	90                   	nop
c000e400:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000e408:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000e410:	77 32                	ja     c000e444 <findRSDP()+0x8c>
c000e412:	83 ec 04             	sub    esp,0x4
c000e415:	6a 08                	push   0x8
c000e417:	68 63 09 02 c0       	push   0xc0020963
c000e41c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e420:	e8 5b 1f ff ff       	call   c0000380 <memcmp>
c000e425:	83 c4 10             	add    esp,0x10
c000e428:	85 c0                	test   eax,eax
c000e42a:	0f 94 c0             	sete   al
c000e42d:	0f b6 c0             	movzx  eax,al
c000e430:	85 c0                	test   eax,eax
c000e432:	74 08                	je     c000e43c <findRSDP()+0x84>
c000e434:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e438:	eb 12                	jmp    c000e44c <findRSDP()+0x94>
c000e43a:	66 90                	xchg   ax,ax
c000e43c:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000e441:	eb c5                	jmp    c000e408 <findRSDP()+0x50>
c000e443:	90                   	nop
c000e444:	b8 00 00 00 00       	mov    eax,0x0
c000e449:	8d 76 00             	lea    esi,[esi+0x0]
c000e44c:	83 c4 1c             	add    esp,0x1c
c000e44f:	c3                   	ret    

c000e450 <loadACPITables(unsigned char*)>:
c000e450:	57                   	push   edi
c000e451:	56                   	push   esi
c000e452:	53                   	push   ebx
c000e453:	83 ec 60             	sub    esp,0x60
c000e456:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e45b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e461:	83 e0 04             	and    eax,0x4
c000e464:	0f b6 c0             	movzx  eax,al
c000e467:	85 c0                	test   eax,eax
c000e469:	0f 84 41 02 00 00    	je     c000e6b0 <loadACPITables(unsigned char*)+0x260>
c000e46f:	a0 c0 76 02 c0       	mov    al,ds:0xc00276c0
c000e474:	0f b6 c0             	movzx  eax,al
c000e477:	85 c0                	test   eax,eax
c000e479:	74 79                	je     c000e4f4 <loadACPITables(unsigned char*)+0xa4>
c000e47b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e47f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e483:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e487:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e48a:	83 e8 24             	sub    eax,0x24
c000e48d:	c1 e8 03             	shr    eax,0x3
c000e490:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e494:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000e49c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e4a0:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000e4a4:	0f 8d ba 00 00 00    	jge    c000e564 <loadACPITables(unsigned char*)+0x114>
c000e4aa:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e4ae:	83 c0 24             	add    eax,0x24
c000e4b1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000e4b5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e4b9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e4bd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e4c1:	c1 e0 03             	shl    eax,0x3
c000e4c4:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000e4c8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e4cc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e4cf:	8b 00                	mov    eax,DWORD PTR [eax]
c000e4d1:	89 c1                	mov    ecx,eax
c000e4d3:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e4d8:	8d 50 01             	lea    edx,[eax+0x1]
c000e4db:	89 15 ac 74 02 c0    	mov    DWORD PTR ds:0xc00274ac,edx
c000e4e1:	89 ca                	mov    edx,ecx
c000e4e3:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e4ea:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000e4ef:	eb ab                	jmp    c000e49c <loadACPITables(unsigned char*)+0x4c>
c000e4f1:	8d 76 00             	lea    esi,[esi+0x0]
c000e4f4:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e4f8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e4fc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e500:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e503:	83 e8 24             	sub    eax,0x24
c000e506:	c1 e8 02             	shr    eax,0x2
c000e509:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e50d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000e515:	8d 76 00             	lea    esi,[esi+0x0]
c000e518:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e51c:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000e520:	7d 42                	jge    c000e564 <loadACPITables(unsigned char*)+0x114>
c000e522:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e526:	83 c0 24             	add    eax,0x24
c000e529:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e52d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e531:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000e535:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e539:	c1 e0 02             	shl    eax,0x2
c000e53c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e540:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e544:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e546:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e54b:	8d 50 01             	lea    edx,[eax+0x1]
c000e54e:	89 15 ac 74 02 c0    	mov    DWORD PTR ds:0xc00274ac,edx
c000e554:	89 ca                	mov    edx,ecx
c000e556:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e55d:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000e562:	eb b4                	jmp    c000e518 <loadACPITables(unsigned char*)+0xc8>
c000e564:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000e56c:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e571:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000e575:	0f 8d 39 01 00 00    	jge    c000e6b4 <loadACPITables(unsigned char*)+0x264>
c000e57b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e57f:	8b 04 c5 c4 74 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd8b3c]
c000e586:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e58a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e58e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e592:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e596:	25 ff 0f 00 00       	and    eax,0xfff
c000e59b:	89 c6                	mov    esi,eax
c000e59d:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e5a3:	83 ec 0c             	sub    esp,0xc
c000e5a6:	6a 01                	push   0x1
c000e5a8:	e8 70 b0 ff ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c000e5ad:	83 c4 10             	add    esp,0x10
c000e5b0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e5b4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e5ba:	83 ec 0c             	sub    esp,0xc
c000e5bd:	6a 01                	push   0x1
c000e5bf:	6a 01                	push   0x1
c000e5c1:	50                   	push   eax
c000e5c2:	52                   	push   edx
c000e5c3:	53                   	push   ebx
c000e5c4:	e8 4f ba ff ff       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e5c9:	83 c4 20             	add    esp,0x20
c000e5cc:	09 f0                	or     eax,esi
c000e5ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e5d2:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e5d6:	c1 e0 03             	shl    eax,0x3
c000e5d9:	05 c0 74 02 c0       	add    eax,0xc00274c0
c000e5de:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e5e2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e5e6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e5ea:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000e5f2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e5f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e5fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e5fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e602:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e606:	89 c6                	mov    esi,eax
c000e608:	89 d7                	mov    edi,edx
c000e60a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e60c:	89 c8                	mov    eax,ecx
c000e60e:	89 fa                	mov    edx,edi
c000e610:	89 f3                	mov    ebx,esi
c000e612:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e616:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e61a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e61e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e622:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e625:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e629:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e62d:	05 00 10 00 00       	add    eax,0x1000
c000e632:	c1 e8 0c             	shr    eax,0xc
c000e635:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e639:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e63d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e641:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e645:	25 ff 0f 00 00       	and    eax,0xfff
c000e64a:	89 c6                	mov    esi,eax
c000e64c:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e652:	83 ec 0c             	sub    esp,0xc
c000e655:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e659:	e8 bf af ff ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c000e65e:	83 c4 10             	add    esp,0x10
c000e661:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e665:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e66b:	83 ec 0c             	sub    esp,0xc
c000e66e:	6a 01                	push   0x1
c000e670:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e674:	50                   	push   eax
c000e675:	52                   	push   edx
c000e676:	53                   	push   ebx
c000e677:	e8 9c b9 ff ff       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e67c:	83 c4 20             	add    esp,0x20
c000e67f:	09 f0                	or     eax,esi
c000e681:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e685:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e689:	83 ec 0c             	sub    esp,0xc
c000e68c:	50                   	push   eax
c000e68d:	e8 a7 b2 ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c000e692:	83 c4 10             	add    esp,0x10
c000e695:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e699:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e69d:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e6a4:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000e6a9:	e9 be fe ff ff       	jmp    c000e56c <loadACPITables(unsigned char*)+0x11c>
c000e6ae:	66 90                	xchg   ax,ax
c000e6b0:	90                   	nop
c000e6b1:	8d 76 00             	lea    esi,[esi+0x0]
c000e6b4:	83 c4 60             	add    esp,0x60
c000e6b7:	5b                   	pop    ebx
c000e6b8:	5e                   	pop    esi
c000e6b9:	5f                   	pop    edi
c000e6ba:	c3                   	ret    
c000e6bb:	90                   	nop

c000e6bc <findRSDT(unsigned char*)>:
c000e6bc:	57                   	push   edi
c000e6bd:	56                   	push   esi
c000e6be:	53                   	push   ebx
c000e6bf:	83 ec 50             	sub    esp,0x50
c000e6c2:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e6c7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e6cd:	83 e0 04             	and    eax,0x4
c000e6d0:	0f b6 c0             	movzx  eax,al
c000e6d3:	85 c0                	test   eax,eax
c000e6d5:	75 0d                	jne    c000e6e4 <findRSDT(unsigned char*)+0x28>
c000e6d7:	b8 00 00 00 00       	mov    eax,0x0
c000e6dc:	e9 2b 01 00 00       	jmp    c000e80c <findRSDT(unsigned char*)+0x150>
c000e6e1:	8d 76 00             	lea    esi,[esi+0x0]
c000e6e4:	89 e0                	mov    eax,esp
c000e6e6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e6ea:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e6ee:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e6f2:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e6fa:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e6fe:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e702:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e706:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e70a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e70e:	89 c6                	mov    esi,eax
c000e710:	89 d7                	mov    edi,edx
c000e712:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e714:	89 c8                	mov    eax,ecx
c000e716:	89 fa                	mov    edx,edi
c000e718:	89 f3                	mov    ebx,esi
c000e71a:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e71e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e722:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e726:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e72a:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e72e:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e736:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e73a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e73e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e746:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e74a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e74e:	25 ff 0f 00 00       	and    eax,0xfff
c000e753:	89 c6                	mov    esi,eax
c000e755:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e75b:	83 ec 0c             	sub    esp,0xc
c000e75e:	6a 02                	push   0x2
c000e760:	e8 b8 ae ff ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c000e765:	83 c4 10             	add    esp,0x10
c000e768:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e76c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e772:	83 ec 0c             	sub    esp,0xc
c000e775:	6a 01                	push   0x1
c000e777:	6a 02                	push   0x2
c000e779:	50                   	push   eax
c000e77a:	52                   	push   edx
c000e77b:	53                   	push   ebx
c000e77c:	e8 97 b8 ff ff       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e781:	83 c4 20             	add    esp,0x20
c000e784:	09 f0                	or     eax,esi
c000e786:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e78a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e78e:	25 ff 0f 00 00       	and    eax,0xfff
c000e793:	89 c6                	mov    esi,eax
c000e795:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e79b:	83 ec 0c             	sub    esp,0xc
c000e79e:	6a 02                	push   0x2
c000e7a0:	e8 78 ae ff ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c000e7a5:	83 c4 10             	add    esp,0x10
c000e7a8:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e7ac:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e7b2:	83 ec 0c             	sub    esp,0xc
c000e7b5:	6a 01                	push   0x1
c000e7b7:	6a 02                	push   0x2
c000e7b9:	50                   	push   eax
c000e7ba:	52                   	push   edx
c000e7bb:	53                   	push   ebx
c000e7bc:	e8 57 b8 ff ff       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e7c1:	83 c4 20             	add    esp,0x20
c000e7c4:	09 f0                	or     eax,esi
c000e7c6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e7ca:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000e7cf:	85 c0                	test   eax,eax
c000e7d1:	75 11                	jne    c000e7e4 <findRSDT(unsigned char*)+0x128>
c000e7d3:	c6 05 c0 76 02 c0 00 	mov    BYTE PTR ds:0xc00276c0,0x0
c000e7da:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e7de:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e7e2:	eb 24                	jmp    c000e808 <findRSDT(unsigned char*)+0x14c>
c000e7e4:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000e7e9:	83 f8 02             	cmp    eax,0x2
c000e7ec:	75 12                	jne    c000e800 <findRSDT(unsigned char*)+0x144>
c000e7ee:	c6 05 c0 76 02 c0 01 	mov    BYTE PTR ds:0xc00276c0,0x1
c000e7f5:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e7f9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e7fd:	eb 09                	jmp    c000e808 <findRSDT(unsigned char*)+0x14c>
c000e7ff:	90                   	nop
c000e800:	b8 00 00 00 00       	mov    eax,0x0
c000e805:	eb 05                	jmp    c000e80c <findRSDT(unsigned char*)+0x150>
c000e807:	90                   	nop
c000e808:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e80c:	83 c4 50             	add    esp,0x50
c000e80f:	5b                   	pop    ebx
c000e810:	5e                   	pop    esi
c000e811:	5f                   	pop    edi
c000e812:	c3                   	ret    
c000e813:	90                   	nop

c000e814 <findDataTable(unsigned char*, char*)>:
c000e814:	83 ec 1c             	sub    esp,0x1c
c000e817:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e81c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e822:	83 e0 04             	and    eax,0x4
c000e825:	0f b6 c0             	movzx  eax,al
c000e828:	85 c0                	test   eax,eax
c000e82a:	75 08                	jne    c000e834 <findDataTable(unsigned char*, char*)+0x20>
c000e82c:	b8 00 00 00 00       	mov    eax,0x0
c000e831:	eb 5d                	jmp    c000e890 <findDataTable(unsigned char*, char*)+0x7c>
c000e833:	90                   	nop
c000e834:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e83c:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e841:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e845:	7d 41                	jge    c000e888 <findDataTable(unsigned char*, char*)+0x74>
c000e847:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e84b:	c1 e0 03             	shl    eax,0x3
c000e84e:	05 c0 74 02 c0       	add    eax,0xc00274c0
c000e853:	83 ec 04             	sub    esp,0x4
c000e856:	6a 04                	push   0x4
c000e858:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e85c:	50                   	push   eax
c000e85d:	e8 1e 1b ff ff       	call   c0000380 <memcmp>
c000e862:	83 c4 10             	add    esp,0x10
c000e865:	85 c0                	test   eax,eax
c000e867:	0f 94 c0             	sete   al
c000e86a:	0f b6 c0             	movzx  eax,al
c000e86d:	85 c0                	test   eax,eax
c000e86f:	74 0f                	je     c000e880 <findDataTable(unsigned char*, char*)+0x6c>
c000e871:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e875:	8b 04 c5 c4 74 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd8b3c]
c000e87c:	eb 12                	jmp    c000e890 <findDataTable(unsigned char*, char*)+0x7c>
c000e87e:	66 90                	xchg   ax,ax
c000e880:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000e885:	eb b5                	jmp    c000e83c <findDataTable(unsigned char*, char*)+0x28>
c000e887:	90                   	nop
c000e888:	b8 00 00 00 00       	mov    eax,0x0
c000e88d:	8d 76 00             	lea    esi,[esi+0x0]
c000e890:	83 c4 1c             	add    esp,0x1c
c000e893:	c3                   	ret    

c000e894 <scanMADT()>:
c000e894:	53                   	push   ebx
c000e895:	83 ec 38             	sub    esp,0x38
c000e898:	a1 d0 4e 02 c0       	mov    eax,ds:0xc0024ed0
c000e89d:	25 00 04 00 00       	and    eax,0x400
c000e8a2:	74 14                	je     c000e8b8 <scanMADT()+0x24>
c000e8a4:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e8a9:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e8af:	83 e2 fb             	and    edx,0xfffffffb
c000e8b2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e8b8:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e8bd:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e8c3:	83 e0 04             	and    eax,0x4
c000e8c6:	0f b6 c0             	movzx  eax,al
c000e8c9:	85 c0                	test   eax,eax
c000e8cb:	0f 84 6b 04 00 00    	je     c000ed3c <scanMADT()+0x4a8>
c000e8d1:	e8 e2 fa ff ff       	call   c000e3b8 <findRSDP()>
c000e8d6:	a3 cc 76 02 c0       	mov    ds:0xc00276cc,eax
c000e8db:	a1 cc 76 02 c0       	mov    eax,ds:0xc00276cc
c000e8e0:	85 c0                	test   eax,eax
c000e8e2:	75 1c                	jne    c000e900 <scanMADT()+0x6c>
c000e8e4:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e8e9:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e8ef:	83 e2 fb             	and    edx,0xfffffffb
c000e8f2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e8f8:	e9 47 04 00 00       	jmp    c000ed44 <scanMADT()+0x4b0>
c000e8fd:	8d 76 00             	lea    esi,[esi+0x0]
c000e900:	a1 cc 76 02 c0       	mov    eax,ds:0xc00276cc
c000e905:	83 ec 0c             	sub    esp,0xc
c000e908:	50                   	push   eax
c000e909:	e8 ae fd ff ff       	call   c000e6bc <findRSDT(unsigned char*)>
c000e90e:	83 c4 10             	add    esp,0x10
c000e911:	a3 c8 76 02 c0       	mov    ds:0xc00276c8,eax
c000e916:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e91b:	85 c0                	test   eax,eax
c000e91d:	75 19                	jne    c000e938 <scanMADT()+0xa4>
c000e91f:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e924:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e92a:	83 e2 fb             	and    edx,0xfffffffb
c000e92d:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e933:	e9 0c 04 00 00       	jmp    c000ed44 <scanMADT()+0x4b0>
c000e938:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e93d:	83 ec 0c             	sub    esp,0xc
c000e940:	50                   	push   eax
c000e941:	e8 0a fb ff ff       	call   c000e450 <loadACPITables(unsigned char*)>
c000e946:	83 c4 10             	add    esp,0x10
c000e949:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e94e:	83 ec 08             	sub    esp,0x8
c000e951:	68 6c 09 02 c0       	push   0xc002096c
c000e956:	50                   	push   eax
c000e957:	e8 b8 fe ff ff       	call   c000e814 <findDataTable(unsigned char*, char*)>
c000e95c:	83 c4 10             	add    esp,0x10
c000e95f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e963:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e968:	75 1a                	jne    c000e984 <scanMADT()+0xf0>
c000e96a:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e96f:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e975:	83 e2 fe             	and    edx,0xfffffffe
c000e978:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e97e:	e9 c1 03 00 00       	jmp    c000ed44 <scanMADT()+0x4b0>
c000e983:	90                   	nop
c000e984:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e98c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e990:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e993:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e997:	0f 87 a7 03 00 00    	ja     c000ed44 <scanMADT()+0x4b0>
c000e99d:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e9a5:	0f 87 99 03 00 00    	ja     c000ed44 <scanMADT()+0x4b0>
c000e9ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9af:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e9b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9b7:	8d 50 01             	lea    edx,[eax+0x1]
c000e9ba:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e9be:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e9c2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e9c6:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e9ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9ce:	8d 50 01             	lea    edx,[eax+0x1]
c000e9d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e9d5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e9d9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e9dd:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e9e1:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000e9e6:	83 f8 02             	cmp    eax,0x2
c000e9e9:	0f 86 51 03 00 00    	jbe    c000ed40 <scanMADT()+0x4ac>
c000e9ef:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000e9f4:	85 c0                	test   eax,eax
c000e9f6:	75 58                	jne    c000ea50 <scanMADT()+0x1bc>
c000e9f8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9fc:	8d 50 01             	lea    edx,[eax+0x1]
c000e9ff:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ea03:	8a 15 c0 78 02 c0    	mov    dl,BYTE PTR ds:0xc00278c0
c000ea09:	0f b6 d2             	movzx  edx,dl
c000ea0c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ea10:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ea14:	88 82 00 79 02 c0    	mov    BYTE PTR [edx-0x3ffd8700],al
c000ea1a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea1e:	8d 50 01             	lea    edx,[eax+0x1]
c000ea21:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ea25:	8a 15 c0 78 02 c0    	mov    dl,BYTE PTR ds:0xc00278c0
c000ea2b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ea2e:	88 0d c0 78 02 c0    	mov    BYTE PTR ds:0xc00278c0,cl
c000ea34:	0f b6 d2             	movzx  edx,dl
c000ea37:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ea3b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ea3f:	88 82 e0 78 02 c0    	mov    BYTE PTR [edx-0x3ffd8720],al
c000ea45:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ea4a:	e9 d9 02 00 00       	jmp    c000ed28 <scanMADT()+0x494>
c000ea4f:	90                   	nop
c000ea50:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ea55:	83 f8 01             	cmp    eax,0x1
c000ea58:	0f 85 1a 01 00 00    	jne    c000eb78 <scanMADT()+0x2e4>
c000ea5e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea62:	8d 50 01             	lea    edx,[eax+0x1]
c000ea65:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ea69:	8a 15 80 77 02 c0    	mov    dl,BYTE PTR ds:0xc0027780
c000ea6f:	0f b6 d2             	movzx  edx,dl
c000ea72:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ea76:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ea7a:	88 82 a0 77 02 c0    	mov    BYTE PTR [edx-0x3ffd8860],al
c000ea80:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000ea85:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ea89:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea8d:	01 d0                	add    eax,edx
c000ea8f:	83 c0 2c             	add    eax,0x2c
c000ea92:	8a 00                	mov    al,BYTE PTR [eax]
c000ea94:	0f b6 d0             	movzx  edx,al
c000ea97:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea9b:	8d 48 01             	lea    ecx,[eax+0x1]
c000ea9e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eaa2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000eaa6:	0f b6 c0             	movzx  eax,al
c000eaa9:	c1 e0 08             	shl    eax,0x8
c000eaac:	89 d1                	mov    ecx,edx
c000eaae:	09 c1                	or     ecx,eax
c000eab0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eab4:	8d 50 02             	lea    edx,[eax+0x2]
c000eab7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eabb:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eabf:	0f b6 c0             	movzx  eax,al
c000eac2:	c1 e0 10             	shl    eax,0x10
c000eac5:	09 c1                	or     ecx,eax
c000eac7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eacb:	8d 50 03             	lea    edx,[eax+0x3]
c000eace:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ead2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ead6:	0f b6 c0             	movzx  eax,al
c000ead9:	c1 e0 18             	shl    eax,0x18
c000eadc:	09 c1                	or     ecx,eax
c000eade:	89 ca                	mov    edx,ecx
c000eae0:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000eae5:	0f b6 c0             	movzx  eax,al
c000eae8:	89 14 85 c0 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8840],edx
c000eaef:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000eaf4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eaf8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eafc:	01 d0                	add    eax,edx
c000eafe:	83 c0 2c             	add    eax,0x2c
c000eb01:	8a 00                	mov    al,BYTE PTR [eax]
c000eb03:	0f b6 d0             	movzx  edx,al
c000eb06:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb0a:	8d 48 01             	lea    ecx,[eax+0x1]
c000eb0d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb11:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000eb15:	0f b6 c0             	movzx  eax,al
c000eb18:	c1 e0 08             	shl    eax,0x8
c000eb1b:	89 d1                	mov    ecx,edx
c000eb1d:	09 c1                	or     ecx,eax
c000eb1f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb23:	8d 50 02             	lea    edx,[eax+0x2]
c000eb26:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb2a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eb2e:	0f b6 c0             	movzx  eax,al
c000eb31:	c1 e0 10             	shl    eax,0x10
c000eb34:	09 c1                	or     ecx,eax
c000eb36:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb3a:	8d 50 03             	lea    edx,[eax+0x3]
c000eb3d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb41:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eb45:	0f b6 c0             	movzx  eax,al
c000eb48:	c1 e0 18             	shl    eax,0x18
c000eb4b:	09 c1                	or     ecx,eax
c000eb4d:	89 ca                	mov    edx,ecx
c000eb4f:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000eb54:	0f b6 c0             	movzx  eax,al
c000eb57:	89 14 85 40 78 02 c0 	mov    DWORD PTR [eax*4-0x3ffd87c0],edx
c000eb5e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000eb63:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000eb68:	83 c0 01             	add    eax,0x1
c000eb6b:	a2 80 77 02 c0       	mov    ds:0xc0027780,al
c000eb70:	e9 b3 01 00 00       	jmp    c000ed28 <scanMADT()+0x494>
c000eb75:	8d 76 00             	lea    esi,[esi+0x0]
c000eb78:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000eb7d:	83 f8 02             	cmp    eax,0x2
c000eb80:	0f 85 ea 00 00 00    	jne    c000ec70 <scanMADT()+0x3dc>
c000eb86:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb8a:	8d 50 01             	lea    edx,[eax+0x1]
c000eb8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eb91:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb95:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eb99:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000eb9d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eba1:	8d 50 01             	lea    edx,[eax+0x1]
c000eba4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eba8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ebac:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ebb0:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000ebb4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ebb8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebbc:	01 d0                	add    eax,edx
c000ebbe:	83 c0 2c             	add    eax,0x2c
c000ebc1:	8a 00                	mov    al,BYTE PTR [eax]
c000ebc3:	0f b6 d0             	movzx  edx,al
c000ebc6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebca:	8d 48 01             	lea    ecx,[eax+0x1]
c000ebcd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ebd1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ebd5:	0f b6 c0             	movzx  eax,al
c000ebd8:	c1 e0 08             	shl    eax,0x8
c000ebdb:	89 d1                	mov    ecx,edx
c000ebdd:	09 c1                	or     ecx,eax
c000ebdf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebe3:	8d 50 02             	lea    edx,[eax+0x2]
c000ebe6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ebea:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ebee:	0f b6 c0             	movzx  eax,al
c000ebf1:	c1 e0 10             	shl    eax,0x10
c000ebf4:	09 c1                	or     ecx,eax
c000ebf6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebfa:	8d 50 03             	lea    edx,[eax+0x3]
c000ebfd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ec01:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ec05:	0f b6 c0             	movzx  eax,al
c000ec08:	c1 e0 18             	shl    eax,0x18
c000ec0b:	09 c8                	or     eax,ecx
c000ec0d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ec11:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ec16:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec1a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec1e:	01 d0                	add    eax,edx
c000ec20:	83 c0 2c             	add    eax,0x2c
c000ec23:	8a 00                	mov    al,BYTE PTR [eax]
c000ec25:	0f b6 c0             	movzx  eax,al
c000ec28:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ec2c:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ec2f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec33:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000ec37:	0f b6 d2             	movzx  edx,dl
c000ec3a:	c1 e2 08             	shl    edx,0x8
c000ec3d:	09 d0                	or     eax,edx
c000ec3f:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000ec44:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ec49:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000ec4e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ec52:	88 90 e0 1f 02 c0    	mov    BYTE PTR [eax-0x3ffde020],dl
c000ec58:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000ec5d:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000ec62:	66 89 84 12 60 77 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd88a0],ax
c000ec6a:	e9 b9 00 00 00       	jmp    c000ed28 <scanMADT()+0x494>
c000ec6f:	90                   	nop
c000ec70:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ec75:	83 f8 04             	cmp    eax,0x4
c000ec78:	0f 85 9a 00 00 00    	jne    c000ed18 <scanMADT()+0x484>
c000ec7e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec82:	8d 50 01             	lea    edx,[eax+0x1]
c000ec85:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec89:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec8d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ec91:	0f b6 c0             	movzx  eax,al
c000ec94:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ec98:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec9c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eca0:	01 d0                	add    eax,edx
c000eca2:	83 c0 2c             	add    eax,0x2c
c000eca5:	8a 00                	mov    al,BYTE PTR [eax]
c000eca7:	0f b6 d0             	movzx  edx,al
c000ecaa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ecae:	8d 48 01             	lea    ecx,[eax+0x1]
c000ecb1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ecb5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ecb9:	0f b6 c0             	movzx  eax,al
c000ecbc:	c1 e0 08             	shl    eax,0x8
c000ecbf:	09 d0                	or     eax,edx
c000ecc1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ecc5:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ecca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ecce:	8d 50 01             	lea    edx,[eax+0x1]
c000ecd1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ecd5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ecd9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ecdd:	0f b6 c0             	movzx  eax,al
c000ece0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ece4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ece8:	c1 e0 08             	shl    eax,0x8
c000eceb:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000ecef:	89 c1                	mov    ecx,eax
c000ecf1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ecf5:	c1 e0 18             	shl    eax,0x18
c000ecf8:	89 c3                	mov    ebx,eax
c000ecfa:	a1 d0 76 02 c0       	mov    eax,ds:0xc00276d0
c000ecff:	8d 50 01             	lea    edx,[eax+0x1]
c000ed02:	89 15 d0 76 02 c0    	mov    DWORD PTR ds:0xc00276d0,edx
c000ed08:	09 d9                	or     ecx,ebx
c000ed0a:	89 ca                	mov    edx,ecx
c000ed0c:	89 14 85 e0 76 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8920],edx
c000ed13:	eb 13                	jmp    c000ed28 <scanMADT()+0x494>
c000ed15:	8d 76 00             	lea    esi,[esi+0x0]
c000ed18:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ed1d:	83 f8 05             	cmp    eax,0x5
c000ed20:	75 06                	jne    c000ed28 <scanMADT()+0x494>
c000ed22:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000ed27:	90                   	nop
c000ed28:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000ed2d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ed31:	01 d0                	add    eax,edx
c000ed33:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ed37:	e9 50 fc ff ff       	jmp    c000e98c <scanMADT()+0xf8>
c000ed3c:	90                   	nop
c000ed3d:	eb 05                	jmp    c000ed44 <scanMADT()+0x4b0>
c000ed3f:	90                   	nop
c000ed40:	90                   	nop
c000ed41:	8d 76 00             	lea    esi,[esi+0x0]
c000ed44:	83 c4 38             	add    esp,0x38
c000ed47:	5b                   	pop    ebx
c000ed48:	c3                   	ret    
c000ed49:	90                   	nop
c000ed4a:	66 90                	xchg   ax,ax

c000ed4c <ACPI::ACPI()>:
c000ed4c:	83 ec 0c             	sub    esp,0xc
c000ed4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed53:	83 ec 08             	sub    esp,0x8
c000ed56:	68 71 09 02 c0       	push   0xc0020971
c000ed5b:	50                   	push   eax
c000ed5c:	e8 65 d2 ff ff       	call   c000bfc6 <Device::Device(char const*)>
c000ed61:	83 c4 10             	add    esp,0x10
c000ed64:	ba e0 0a 02 c0       	mov    edx,0xc0020ae0
c000ed69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed6d:	89 10                	mov    DWORD PTR [eax],edx
c000ed6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed73:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000ed7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed7e:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000ed88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed8c:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000ed96:	e8 f9 fa ff ff       	call   c000e894 <scanMADT()>
c000ed9b:	90                   	nop
c000ed9c:	83 c4 0c             	add    esp,0xc
c000ed9f:	c3                   	ret    

c000eda0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000eda0:	83 ec 2c             	sub    esp,0x2c
c000eda3:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000eda7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000edab:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000edaf:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000edb3:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000edb8:	88 d0                	mov    al,dl
c000edba:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000edbe:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000edc3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000edcb:	90                   	nop
c000edcc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000edd0:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000edd6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000edda:	0f 8d b0 00 00 00    	jge    c000ee90 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000ede0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ede4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ede8:	83 c2 2a             	add    edx,0x2a
c000edeb:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000edef:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000edf4:	0f b7 c0             	movzx  eax,ax
c000edf7:	39 c2                	cmp    edx,eax
c000edf9:	0f 85 85 00 00 00    	jne    c000ee84 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000edff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee03:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee07:	83 c2 2a             	add    edx,0x2a
c000ee0a:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000ee0e:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000ee13:	0f b6 c0             	movzx  eax,al
c000ee16:	39 c2                	cmp    edx,eax
c000ee18:	75 6a                	jne    c000ee84 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000ee1a:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000ee1f:	85 c0                	test   eax,eax
c000ee21:	74 3d                	je     c000ee60 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000ee23:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee27:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee2b:	83 c2 2a             	add    edx,0x2a
c000ee2e:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000ee32:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ee39:	39 c2                	cmp    edx,eax
c000ee3b:	74 13                	je     c000ee50 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000ee3d:	83 ec 0c             	sub    esp,0xc
c000ee40:	68 ec 08 02 c0       	push   0xc00208ec
c000ee45:	e8 dd 1a 00 00       	call   c0010927 <KePanic(char const*)>
c000ee4a:	83 c4 10             	add    esp,0x10
c000ee4d:	8d 76 00             	lea    esi,[esi+0x0]
c000ee50:	83 ec 0c             	sub    esp,0xc
c000ee53:	68 76 09 02 c0       	push   0xc0020976
c000ee58:	e8 ca 1a 00 00       	call   c0010927 <KePanic(char const*)>
c000ee5d:	83 c4 10             	add    esp,0x10
c000ee60:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ee64:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee68:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee6c:	83 c2 2a             	add    edx,0x2a
c000ee6f:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000ee73:	8b 02                	mov    eax,DWORD PTR [edx]
c000ee75:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000ee78:	89 01                	mov    DWORD PTR [ecx],eax
c000ee7a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000ee7d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ee82:	66 90                	xchg   ax,ax
c000ee84:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000ee89:	e9 3e ff ff ff       	jmp    c000edcc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000ee8e:	66 90                	xchg   ax,ax
c000ee90:	90                   	nop
c000ee91:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee95:	83 c4 2c             	add    esp,0x2c
c000ee98:	c2 04 00             	ret    0x4
c000ee9b:	90                   	nop

c000ee9c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000ee9c:	83 ec 1c             	sub    esp,0x1c
c000ee9f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eea3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000eea7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000eeab:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000eeb0:	88 c8                	mov    al,cl
c000eeb2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000eeb6:	88 d0                	mov    al,dl
c000eeb8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000eebc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eec0:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000eec6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eeca:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000eecd:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000eed1:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000eed5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eed9:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000eedf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000eee3:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000eee6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eeea:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000eeef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eef3:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000eef9:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000eefd:	83 c0 01             	add    eax,0x1
c000ef00:	88 c1                	mov    cl,al
c000ef02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef06:	83 c2 2a             	add    edx,0x2a
c000ef09:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000ef0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef11:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ef17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef1b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ef1e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ef22:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000ef26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef2a:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ef30:	8d 50 01             	lea    edx,[eax+0x1]
c000ef33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef37:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000ef3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef41:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ef47:	3d 00 02 00 00       	cmp    eax,0x200
c000ef4c:	75 12                	jne    c000ef60 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000ef4e:	83 ec 0c             	sub    esp,0xc
c000ef51:	68 85 09 02 c0       	push   0xc0020985
c000ef56:	e8 cc 19 00 00       	call   c0010927 <KePanic(char const*)>
c000ef5b:	83 c4 10             	add    esp,0x10
c000ef5e:	66 90                	xchg   ax,ax
c000ef60:	90                   	nop
c000ef61:	83 c4 1c             	add    esp,0x1c
c000ef64:	c3                   	ret    
c000ef65:	90                   	nop
c000ef66:	66 90                	xchg   ax,ax

c000ef68 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000ef68:	b8 00 00 00 00       	mov    eax,0x0
c000ef6d:	c3                   	ret    
c000ef6e:	66 90                	xchg   ax,ax

c000ef70 <ACPI::detectPCI()>:
c000ef70:	53                   	push   ebx
c000ef71:	83 ec 28             	sub    esp,0x28
c000ef74:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ef79:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000ef7e:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000ef83:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ef89:	83 e0 04             	and    eax,0x4
c000ef8c:	0f b6 c0             	movzx  eax,al
c000ef8f:	85 c0                	test   eax,eax
c000ef91:	74 2d                	je     c000efc0 <ACPI::detectPCI()+0x50>
c000ef93:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000ef98:	83 ec 08             	sub    esp,0x8
c000ef9b:	68 a2 09 02 c0       	push   0xc00209a2
c000efa0:	50                   	push   eax
c000efa1:	e8 6e f8 ff ff       	call   c000e814 <findDataTable(unsigned char*, char*)>
c000efa6:	83 c4 10             	add    esp,0x10
c000efa9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000efad:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000efb2:	74 0c                	je     c000efc0 <ACPI::detectPCI()+0x50>
c000efb4:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000efb9:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000efbe:	66 90                	xchg   ax,ax
c000efc0:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000efc8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000efcc:	8a 00                	mov    al,BYTE PTR [eax]
c000efce:	0f b6 c0             	movzx  eax,al
c000efd1:	83 f8 01             	cmp    eax,0x1
c000efd4:	75 0e                	jne    c000efe4 <ACPI::detectPCI()+0x74>
c000efd6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000efdb:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000efe0:	eb 2e                	jmp    c000f010 <ACPI::detectPCI()+0xa0>
c000efe2:	66 90                	xchg   ax,ax
c000efe4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000efe8:	8a 00                	mov    al,BYTE PTR [eax]
c000efea:	0f b6 c0             	movzx  eax,al
c000efed:	83 f8 02             	cmp    eax,0x2
c000eff0:	75 1e                	jne    c000f010 <ACPI::detectPCI()+0xa0>
c000eff2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eff7:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000effc:	85 c0                	test   eax,eax
c000effe:	74 10                	je     c000f010 <ACPI::detectPCI()+0xa0>
c000f000:	83 ec 0c             	sub    esp,0xc
c000f003:	68 1c 09 02 c0       	push   0xc002091c
c000f008:	e8 1a 19 00 00       	call   c0010927 <KePanic(char const*)>
c000f00d:	83 c4 10             	add    esp,0x10
c000f010:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000f014:	83 f0 01             	xor    eax,0x1
c000f017:	0f b6 c0             	movzx  eax,al
c000f01a:	85 c0                	test   eax,eax
c000f01c:	74 46                	je     c000f064 <ACPI::detectPCI()+0xf4>
c000f01e:	e8 0d 11 ff ff       	call   c0000130 <manualPCIProbe>
c000f023:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f027:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f02c:	75 0e                	jne    c000f03c <ACPI::detectPCI()+0xcc>
c000f02e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f033:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f038:	eb 2a                	jmp    c000f064 <ACPI::detectPCI()+0xf4>
c000f03a:	66 90                	xchg   ax,ax
c000f03c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000f041:	75 21                	jne    c000f064 <ACPI::detectPCI()+0xf4>
c000f043:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f048:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f04d:	85 c0                	test   eax,eax
c000f04f:	74 13                	je     c000f064 <ACPI::detectPCI()+0xf4>
c000f051:	83 ec 0c             	sub    esp,0xc
c000f054:	68 1c 09 02 c0       	push   0xc002091c
c000f059:	e8 c9 18 00 00       	call   c0010927 <KePanic(char const*)>
c000f05e:	83 c4 10             	add    esp,0x10
c000f061:	8d 76 00             	lea    esi,[esi+0x0]
c000f064:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f069:	85 c0                	test   eax,eax
c000f06b:	0f 84 87 00 00 00    	je     c000f0f8 <ACPI::detectPCI()+0x188>
c000f071:	83 ec 0c             	sub    esp,0xc
c000f074:	68 a7 09 02 c0       	push   0xc00209a7
c000f079:	e8 2c 12 00 00       	call   c00102aa <KeSetBootMessage(char const*)>
c000f07e:	83 c4 10             	add    esp,0x10
c000f081:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f089:	83 ec 0c             	sub    esp,0xc
c000f08c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f090:	e8 19 8a ff ff       	call   c0007aae <malloc>
c000f095:	83 c4 10             	add    esp,0x10
c000f098:	89 c3                	mov    ebx,eax
c000f09a:	83 ec 0c             	sub    esp,0xc
c000f09d:	53                   	push   ebx
c000f09e:	e8 31 b0 00 00       	call   c001a0d4 <PCI::PCI()>
c000f0a3:	83 c4 10             	add    esp,0x10
c000f0a6:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f0aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f0ae:	83 ec 08             	sub    esp,0x8
c000f0b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f0b5:	50                   	push   eax
c000f0b6:	e8 73 cd ff ff       	call   c000be2e <Device::addChild(Device*)>
c000f0bb:	83 c4 10             	add    esp,0x10
c000f0be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f0c2:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0c4:	83 c0 08             	add    eax,0x8
c000f0c7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0c9:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000f0ce:	85 d2                	test   edx,edx
c000f0d0:	74 0a                	je     c000f0dc <ACPI::detectPCI()+0x16c>
c000f0d2:	ba 01 00 00 00       	mov    edx,0x1
c000f0d7:	eb 0b                	jmp    c000f0e4 <ACPI::detectPCI()+0x174>
c000f0d9:	8d 76 00             	lea    esi,[esi+0x0]
c000f0dc:	ba 02 00 00 00       	mov    edx,0x2
c000f0e1:	8d 76 00             	lea    esi,[esi+0x0]
c000f0e4:	6a 00                	push   0x0
c000f0e6:	6a 00                	push   0x0
c000f0e8:	52                   	push   edx
c000f0e9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f0ed:	ff d0                	call   eax
c000f0ef:	83 c4 10             	add    esp,0x10
c000f0f2:	e9 91 00 00 00       	jmp    c000f188 <ACPI::detectPCI()+0x218>
c000f0f7:	90                   	nop
c000f0f8:	83 ec 0c             	sub    esp,0xc
c000f0fb:	68 bf 09 02 c0       	push   0xc00209bf
c000f100:	e8 a5 11 00 00       	call   c00102aa <KeSetBootMessage(char const*)>
c000f105:	83 c4 10             	add    esp,0x10
c000f108:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000f10f:	83 ec 0c             	sub    esp,0xc
c000f112:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f116:	e8 93 89 ff ff       	call   c0007aae <malloc>
c000f11b:	83 c4 10             	add    esp,0x10
c000f11e:	89 c3                	mov    ebx,eax
c000f120:	83 ec 0c             	sub    esp,0xc
c000f123:	53                   	push   ebx
c000f124:	e8 45 bb 00 00       	call   c001ac6e <IDE::IDE()>
c000f129:	83 c4 10             	add    esp,0x10
c000f12c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f130:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f134:	83 ec 08             	sub    esp,0x8
c000f137:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f13b:	50                   	push   eax
c000f13c:	e8 ed cc ff ff       	call   c000be2e <Device::addChild(Device*)>
c000f141:	83 c4 10             	add    esp,0x10
c000f144:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f148:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000f152:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f156:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000f15f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f163:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000f16c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f170:	8b 00                	mov    eax,DWORD PTR [eax]
c000f172:	83 c0 08             	add    eax,0x8
c000f175:	8b 00                	mov    eax,DWORD PTR [eax]
c000f177:	6a 00                	push   0x0
c000f179:	6a 00                	push   0x0
c000f17b:	6a 00                	push   0x0
c000f17d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f181:	ff d0                	call   eax
c000f183:	83 c4 10             	add    esp,0x10
c000f186:	66 90                	xchg   ax,ax
c000f188:	90                   	nop
c000f189:	83 c4 28             	add    esp,0x28
c000f18c:	5b                   	pop    ebx
c000f18d:	c3                   	ret    
c000f18e:	66 90                	xchg   ax,ax

c000f190 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000f190:	83 ec 1c             	sub    esp,0x1c
c000f193:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f197:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f19a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f19e:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f1a3:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f1a8:	83 ec 08             	sub    esp,0x8
c000f1ab:	52                   	push   edx
c000f1ac:	50                   	push   eax
c000f1ad:	e8 be 7f ff ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c000f1b2:	83 c4 10             	add    esp,0x10
c000f1b5:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000f1b9:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f1be:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f1c3:	83 ec 04             	sub    esp,0x4
c000f1c6:	6a 01                	push   0x1
c000f1c8:	52                   	push   edx
c000f1c9:	50                   	push   eax
c000f1ca:	e8 bb 80 ff ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c000f1cf:	83 c4 10             	add    esp,0x10
c000f1d2:	90                   	nop
c000f1d3:	83 c4 1c             	add    esp,0x1c
c000f1d6:	c3                   	ret    
c000f1d7:	90                   	nop

c000f1d8 <ACPI::sleep()>:
c000f1d8:	83 ec 0c             	sub    esp,0xc
c000f1db:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c000f1e0:	85 c0                	test   eax,eax
c000f1e2:	74 08                	je     c000f1ec <ACPI::sleep()+0x14>
c000f1e4:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c000f1e9:	ff d0                	call   eax
c000f1eb:	90                   	nop
c000f1ec:	90                   	nop
c000f1ed:	83 c4 0c             	add    esp,0xc
c000f1f0:	c3                   	ret    
c000f1f1:	90                   	nop
c000f1f2:	66 90                	xchg   ax,ax

c000f1f4 <ACPI::open(int, int, void*)>:
c000f1f4:	57                   	push   edi
c000f1f5:	56                   	push   esi
c000f1f6:	53                   	push   ebx
c000f1f7:	81 ec 70 01 00 00    	sub    esp,0x170
c000f1fd:	83 ec 0c             	sub    esp,0xc
c000f200:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f207:	e8 64 fd ff ff       	call   c000ef70 <ACPI::detectPCI()>
c000f20c:	83 c4 10             	add    esp,0x10
c000f20f:	83 ec 0c             	sub    esp,0xc
c000f212:	68 44 09 02 c0       	push   0xc0020944
c000f217:	e8 8e 10 00 00       	call   c00102aa <KeSetBootMessage(char const*)>
c000f21c:	83 c4 10             	add    esp,0x10
c000f21f:	b8 4c 05 00 00       	mov    eax,0x54c
c000f224:	8a 00                	mov    al,BYTE PTR [eax]
c000f226:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000f22d:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000f235:	83 f8 01             	cmp    eax,0x1
c000f238:	75 12                	jne    c000f24c <ACPI::open(int, int, void*)+0x58>
c000f23a:	83 ec 0c             	sub    esp,0xc
c000f23d:	68 d4 09 02 c0       	push   0xc00209d4
c000f242:	e8 bd 49 00 00       	call   c0013c04 <Thr::loadKernelSymbolTable(char const*)>
c000f247:	83 c4 10             	add    esp,0x10
c000f24a:	eb 34                	jmp    c000f280 <ACPI::open(int, int, void*)+0x8c>
c000f24c:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000f254:	3d bb 00 00 00       	cmp    eax,0xbb
c000f259:	75 15                	jne    c000f270 <ACPI::open(int, int, void*)+0x7c>
c000f25b:	83 ec 0c             	sub    esp,0xc
c000f25e:	68 f2 09 02 c0       	push   0xc00209f2
c000f263:	e8 9c 49 00 00       	call   c0013c04 <Thr::loadKernelSymbolTable(char const*)>
c000f268:	83 c4 10             	add    esp,0x10
c000f26b:	eb 13                	jmp    c000f280 <ACPI::open(int, int, void*)+0x8c>
c000f26d:	8d 76 00             	lea    esi,[esi+0x0]
c000f270:	83 ec 0c             	sub    esp,0xc
c000f273:	68 10 0a 02 c0       	push   0xc0020a10
c000f278:	e8 aa 16 00 00       	call   c0010927 <KePanic(char const*)>
c000f27d:	83 c4 10             	add    esp,0x10
c000f280:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000f288:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000f293:	83 ec 0c             	sub    esp,0xc
c000f296:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f29d:	e8 0c 88 ff ff       	call   c0007aae <malloc>
c000f2a2:	83 c4 10             	add    esp,0x10
c000f2a5:	89 c3                	mov    ebx,eax
c000f2a7:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f2ac:	83 ec 04             	sub    esp,0x4
c000f2af:	50                   	push   eax
c000f2b0:	68 2a 0a 02 c0       	push   0xc0020a2a
c000f2b5:	53                   	push   ebx
c000f2b6:	e8 bf bc ff ff       	call   c000af7a <File::File(char const*, Process*)>
c000f2bb:	83 c4 10             	add    esp,0x10
c000f2be:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000f2c5:	83 ec 08             	sub    esp,0x8
c000f2c8:	6a 01                	push   0x1
c000f2ca:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f2d1:	e8 60 bd ff ff       	call   c000b036 <File::open(FileOpenMode)>
c000f2d6:	83 c4 10             	add    esp,0x10
c000f2d9:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000f2e0:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000f2e8:	75 16                	jne    c000f300 <ACPI::open(int, int, void*)+0x10c>
c000f2ea:	83 ec 0c             	sub    esp,0xc
c000f2ed:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f2f4:	e8 9b bd ff ff       	call   c000b094 <File::close()>
c000f2f9:	83 c4 10             	add    esp,0x10
c000f2fc:	eb 0a                	jmp    c000f308 <ACPI::open(int, int, void*)+0x114>
c000f2fe:	66 90                	xchg   ax,ax
c000f300:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000f308:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000f310:	74 1e                	je     c000f330 <ACPI::open(int, int, void*)+0x13c>
c000f312:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000f319:	8b 00                	mov    eax,DWORD PTR [eax]
c000f31b:	83 c0 08             	add    eax,0x8
c000f31e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f320:	83 ec 0c             	sub    esp,0xc
c000f323:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f32a:	ff d0                	call   eax
c000f32c:	83 c4 10             	add    esp,0x10
c000f32f:	90                   	nop
c000f330:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000f337:	83 f0 01             	xor    eax,0x1
c000f33a:	0f b6 c0             	movzx  eax,al
c000f33d:	85 c0                	test   eax,eax
c000f33f:	74 43                	je     c000f384 <ACPI::open(int, int, void*)+0x190>
c000f341:	83 ec 0c             	sub    esp,0xc
c000f344:	68 48 0a 02 c0       	push   0xc0020a48
c000f349:	e8 5c 0f 00 00       	call   c00102aa <KeSetBootMessage(char const*)>
c000f34e:	83 c4 10             	add    esp,0x10
c000f351:	83 ec 04             	sub    esp,0x4
c000f354:	6a 0c                	push   0xc
c000f356:	68 63 0a 02 c0       	push   0xc0020a63
c000f35b:	68 74 0a 02 c0       	push   0xc0020a74
c000f360:	e8 4b 3c 00 00       	call   c0012fb0 <Reg::readIntWithDefault(char*, char*, int)>
c000f365:	83 c4 10             	add    esp,0x10
c000f368:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000f36f:	83 ec 0c             	sub    esp,0xc
c000f372:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000f379:	e8 ce a4 ff ff       	call   c000984c <Virt::setupPageSwapping(int)>
c000f37e:	83 c4 10             	add    esp,0x10
c000f381:	8d 76 00             	lea    esi,[esi+0x0]
c000f384:	83 ec 0c             	sub    esp,0xc
c000f387:	68 55 fa 01 c0       	push   0xc001fa55
c000f38c:	e8 19 0f 00 00       	call   c00102aa <KeSetBootMessage(char const*)>
c000f391:	83 c4 10             	add    esp,0x10
c000f394:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000f39b:	83 ec 08             	sub    esp,0x8
c000f39e:	6a 13                	push   0x13
c000f3a0:	50                   	push   eax
c000f3a1:	e8 a0 cd ff ff       	call   c000c146 <getDevicesOfType(DeviceType)>
c000f3a6:	83 c4 0c             	add    esp,0xc
c000f3a9:	8d 76 00             	lea    esi,[esi+0x0]
c000f3ac:	83 ec 0c             	sub    esp,0xc
c000f3af:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f3b6:	50                   	push   eax
c000f3b7:	e8 94 fa 00 00       	call   c001ee50 <LinkedList<Device>::isEmpty()>
c000f3bc:	83 c4 10             	add    esp,0x10
c000f3bf:	83 f0 01             	xor    eax,0x1
c000f3c2:	0f b6 c0             	movzx  eax,al
c000f3c5:	85 c0                	test   eax,eax
c000f3c7:	0f 84 47 01 00 00    	je     c000f514 <ACPI::open(int, int, void*)+0x320>
c000f3cd:	83 ec 0c             	sub    esp,0xc
c000f3d0:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f3d7:	50                   	push   eax
c000f3d8:	e8 8f fa 00 00       	call   c001ee6c <LinkedList<Device>::getFirstElement()>
c000f3dd:	83 c4 10             	add    esp,0x10
c000f3e0:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000f3e7:	83 ec 0c             	sub    esp,0xc
c000f3ea:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f3f1:	50                   	push   eax
c000f3f2:	e8 7d fa 00 00       	call   c001ee74 <LinkedList<Device>::removeFirst()>
c000f3f7:	83 c4 10             	add    esp,0x10
c000f3fa:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000f401:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000f408:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000f40f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f413:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000f419:	ba 09 00 00 00       	mov    edx,0x9
c000f41e:	fc                   	cld    
c000f41f:	89 c7                	mov    edi,eax
c000f421:	89 de                	mov    esi,ebx
c000f423:	89 d1                	mov    ecx,edx
c000f425:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f427:	83 ec 08             	sub    esp,0x8
c000f42a:	8d 44 24 38          	lea    eax,[esp+0x38]
c000f42e:	50                   	push   eax
c000f42f:	83 ec 24             	sub    esp,0x24
c000f432:	89 e0                	mov    eax,esp
c000f434:	89 c3                	mov    ebx,eax
c000f436:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000f43a:	ba 09 00 00 00       	mov    edx,0x9
c000f43f:	89 df                	mov    edi,ebx
c000f441:	89 c6                	mov    esi,eax
c000f443:	89 d1                	mov    ecx,edx
c000f445:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f447:	e8 72 b1 00 00       	call   c001a5be <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000f44c:	83 c4 30             	add    esp,0x30
c000f44f:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000f456:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000f45e:	0f 84 48 ff ff ff    	je     c000f3ac <ACPI::open(int, int, void*)+0x1b8>
c000f464:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000f46f:	83 ec 0c             	sub    esp,0xc
c000f472:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000f479:	e8 30 86 ff ff       	call   c0007aae <malloc>
c000f47e:	83 c4 10             	add    esp,0x10
c000f481:	89 c3                	mov    ebx,eax
c000f483:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f488:	83 ec 04             	sub    esp,0x4
c000f48b:	50                   	push   eax
c000f48c:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f493:	53                   	push   ebx
c000f494:	e8 e1 ba ff ff       	call   c000af7a <File::File(char const*, Process*)>
c000f499:	83 c4 10             	add    esp,0x10
c000f49c:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000f4a3:	83 ec 0c             	sub    esp,0xc
c000f4a6:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f4ad:	e8 f2 bd ff ff       	call   c000b2a4 <File::exists()>
c000f4b2:	83 c4 10             	add    esp,0x10
c000f4b5:	0f b6 c0             	movzx  eax,al
c000f4b8:	85 c0                	test   eax,eax
c000f4ba:	74 28                	je     c000f4e4 <ACPI::open(int, int, void*)+0x2f0>
c000f4bc:	83 ec 08             	sub    esp,0x8
c000f4bf:	6a 01                	push   0x1
c000f4c1:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000f4c8:	e8 b1 51 00 00       	call   c001467e <Thr::loadDLL(char const*, bool)>
c000f4cd:	83 c4 10             	add    esp,0x10
c000f4d0:	83 ec 08             	sub    esp,0x8
c000f4d3:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000f4da:	50                   	push   eax
c000f4db:	e8 cf 53 00 00       	call   c00148af <Thr::executeDLL(unsigned long, void*)>
c000f4e0:	83 c4 10             	add    esp,0x10
c000f4e3:	90                   	nop
c000f4e4:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000f4ec:	0f 84 ba fe ff ff    	je     c000f3ac <ACPI::open(int, int, void*)+0x1b8>
c000f4f2:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000f4f9:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4fb:	83 c0 08             	add    eax,0x8
c000f4fe:	8b 00                	mov    eax,DWORD PTR [eax]
c000f500:	83 ec 0c             	sub    esp,0xc
c000f503:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f50a:	ff d0                	call   eax
c000f50c:	83 c4 10             	add    esp,0x10
c000f50f:	e9 98 fe ff ff       	jmp    c000f3ac <ACPI::open(int, int, void*)+0x1b8>
c000f514:	83 ec 0c             	sub    esp,0xc
c000f517:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f51e:	50                   	push   eax
c000f51f:	e8 28 f9 00 00       	call   c001ee4c <LinkedList<Device>::~LinkedList()>
c000f524:	83 c4 10             	add    esp,0x10
c000f527:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000f52d:	83 ec 08             	sub    esp,0x8
c000f530:	6a 01                	push   0x1
c000f532:	68 7b 0a 02 c0       	push   0xc0020a7b
c000f537:	e8 42 51 00 00       	call   c001467e <Thr::loadDLL(char const*, bool)>
c000f53c:	83 c4 10             	add    esp,0x10
c000f53f:	83 ec 08             	sub    esp,0x8
c000f542:	53                   	push   ebx
c000f543:	50                   	push   eax
c000f544:	e8 66 53 00 00       	call   c00148af <Thr::executeDLL(unsigned long, void*)>
c000f549:	83 c4 10             	add    esp,0x10
c000f54c:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f551:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f557:	83 e0 04             	and    eax,0x4
c000f55a:	0f b6 c0             	movzx  eax,al
c000f55d:	85 c0                	test   eax,eax
c000f55f:	0f 84 1b 01 00 00    	je     c000f680 <ACPI::open(int, int, void*)+0x48c>
c000f565:	83 ec 0c             	sub    esp,0xc
c000f568:	68 98 0a 02 c0       	push   0xc0020a98
c000f56d:	e8 38 0d 00 00       	call   c00102aa <KeSetBootMessage(char const*)>
c000f572:	83 c4 10             	add    esp,0x10
c000f575:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000f580:	83 ec 0c             	sub    esp,0xc
c000f583:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000f58a:	e8 1f 85 ff ff       	call   c0007aae <malloc>
c000f58f:	83 c4 10             	add    esp,0x10
c000f592:	89 c3                	mov    ebx,eax
c000f594:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f599:	83 ec 04             	sub    esp,0x4
c000f59c:	50                   	push   eax
c000f59d:	68 b5 0a 02 c0       	push   0xc0020ab5
c000f5a2:	53                   	push   ebx
c000f5a3:	e8 d2 b9 ff ff       	call   c000af7a <File::File(char const*, Process*)>
c000f5a8:	83 c4 10             	add    esp,0x10
c000f5ab:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000f5b2:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f5ba:	74 20                	je     c000f5dc <ACPI::open(int, int, void*)+0x3e8>
c000f5bc:	83 ec 0c             	sub    esp,0xc
c000f5bf:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f5c6:	e8 d9 bc ff ff       	call   c000b2a4 <File::exists()>
c000f5cb:	83 c4 10             	add    esp,0x10
c000f5ce:	0f b6 c0             	movzx  eax,al
c000f5d1:	85 c0                	test   eax,eax
c000f5d3:	74 07                	je     c000f5dc <ACPI::open(int, int, void*)+0x3e8>
c000f5d5:	b0 01                	mov    al,0x1
c000f5d7:	eb 07                	jmp    c000f5e0 <ACPI::open(int, int, void*)+0x3ec>
c000f5d9:	8d 76 00             	lea    esi,[esi+0x0]
c000f5dc:	b0 00                	mov    al,0x0
c000f5de:	66 90                	xchg   ax,ax
c000f5e0:	0f b6 c0             	movzx  eax,al
c000f5e3:	85 c0                	test   eax,eax
c000f5e5:	74 25                	je     c000f60c <ACPI::open(int, int, void*)+0x418>
c000f5e7:	83 ec 08             	sub    esp,0x8
c000f5ea:	6a 01                	push   0x1
c000f5ec:	68 b5 0a 02 c0       	push   0xc0020ab5
c000f5f1:	e8 88 50 00 00       	call   c001467e <Thr::loadDLL(char const*, bool)>
c000f5f6:	83 c4 10             	add    esp,0x10
c000f5f9:	83 ec 08             	sub    esp,0x8
c000f5fc:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000f603:	50                   	push   eax
c000f604:	e8 a6 52 00 00       	call   c00148af <Thr::executeDLL(unsigned long, void*)>
c000f609:	83 c4 10             	add    esp,0x10
c000f60c:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f614:	74 2a                	je     c000f640 <ACPI::open(int, int, void*)+0x44c>
c000f616:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f61e:	74 20                	je     c000f640 <ACPI::open(int, int, void*)+0x44c>
c000f620:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000f627:	8b 00                	mov    eax,DWORD PTR [eax]
c000f629:	83 c0 08             	add    eax,0x8
c000f62c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f62e:	83 ec 0c             	sub    esp,0xc
c000f631:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f638:	ff d0                	call   eax
c000f63a:	83 c4 10             	add    esp,0x10
c000f63d:	8d 76 00             	lea    esi,[esi+0x0]
c000f640:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000f645:	83 ec 08             	sub    esp,0x8
c000f648:	68 d2 0a 02 c0       	push   0xc0020ad2
c000f64d:	50                   	push   eax
c000f64e:	e8 c1 f1 ff ff       	call   c000e814 <findDataTable(unsigned char*, char*)>
c000f653:	83 c4 10             	add    esp,0x10
c000f656:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000f65d:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000f665:	74 19                	je     c000f680 <ACPI::open(int, int, void*)+0x48c>
c000f667:	83 ec 08             	sub    esp,0x8
c000f66a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f671:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f678:	e8 13 fb ff ff       	call   c000f190 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f67d:	83 c4 10             	add    esp,0x10
c000f680:	b8 00 00 00 00       	mov    eax,0x0
c000f685:	81 c4 70 01 00 00    	add    esp,0x170
c000f68b:	5b                   	pop    ebx
c000f68c:	5e                   	pop    esi
c000f68d:	5f                   	pop    edi
c000f68e:	c3                   	ret    
c000f68f:	90                   	nop

c000f690 <CPU::close(int, int, void*)>:
c000f690:	31 c0                	xor    eax,eax
c000f692:	c3                   	ret    
c000f693:	90                   	nop

c000f694 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f694:	60                   	pusha  
c000f695:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f699:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f69d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f6a1:	9c                   	pushf  
c000f6a2:	fa                   	cli    
c000f6a3:	0f 09                	wbinvd 
c000f6a5:	0f 30                	wrmsr  
c000f6a7:	9d                   	popf   
c000f6a8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f6ac:	89 02                	mov    DWORD PTR [edx],eax
c000f6ae:	61                   	popa   
c000f6af:	c3                   	ret    

c000f6b0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f6b0:	60                   	pusha  
c000f6b1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f6b5:	9c                   	pushf  
c000f6b6:	fa                   	cli    
c000f6b7:	0f 09                	wbinvd 
c000f6b9:	31 c0                	xor    eax,eax
c000f6bb:	31 d2                	xor    edx,edx
c000f6bd:	0f 32                	rdmsr  
c000f6bf:	9d                   	popf   
c000f6c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f6c4:	89 02                	mov    DWORD PTR [edx],eax
c000f6c6:	61                   	popa   
c000f6c7:	c3                   	ret    

c000f6c8 <CPU::AMD_K6_writeback(int, int, int)>:
c000f6c8:	56                   	push   esi
c000f6c9:	53                   	push   ebx
c000f6ca:	83 ec 10             	sub    esp,0x10
c000f6cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6d1:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f6d6:	75 5d                	jne    c000f735 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f6d8:	83 f8 08             	cmp    eax,0x8
c000f6db:	75 09                	jne    c000f6e6 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f6dd:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f6e2:	7e 13                	jle    c000f6f7 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f6e4:	eb 30                	jmp    c000f716 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f6e6:	83 f8 06             	cmp    eax,0x6
c000f6e9:	7c 4a                	jl     c000f735 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f6eb:	83 f8 07             	cmp    eax,0x7
c000f6ee:	7e 07                	jle    c000f6f7 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f6f0:	83 f8 09             	cmp    eax,0x9
c000f6f3:	74 21                	je     c000f716 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f6f5:	eb 3e                	jmp    c000f735 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f6f7:	89 e6                	mov    esi,esp
c000f6f9:	8b 1d dc 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024edc
c000f6ff:	56                   	push   esi
c000f700:	c1 eb 15             	shr    ebx,0x15
c000f703:	68 82 00 00 c0       	push   0xc0000082
c000f708:	83 e3 7e             	and    ebx,0x7e
c000f70b:	e8 a0 ff ff ff       	call   c000f6b0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f710:	56                   	push   esi
c000f711:	6a 00                	push   0x0
c000f713:	53                   	push   ebx
c000f714:	eb 12                	jmp    c000f728 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f716:	89 e3                	mov    ebx,esp
c000f718:	53                   	push   ebx
c000f719:	68 82 00 00 c0       	push   0xc0000082
c000f71e:	e8 8d ff ff ff       	call   c000f6b0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f723:	53                   	push   ebx
c000f724:	6a 00                	push   0x0
c000f726:	6a 00                	push   0x0
c000f728:	68 82 00 00 c0       	push   0xc0000082
c000f72d:	e8 62 ff ff ff       	call   c000f694 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f732:	83 c4 18             	add    esp,0x18
c000f735:	83 c4 10             	add    esp,0x10
c000f738:	5b                   	pop    ebx
c000f739:	5e                   	pop    esi
c000f73a:	c3                   	ret    
c000f73b:	90                   	nop

c000f73c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f73c:	55                   	push   ebp
c000f73d:	57                   	push   edi
c000f73e:	56                   	push   esi
c000f73f:	53                   	push   ebx
c000f740:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f744:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f748:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f74c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f750:	39 05 f0 1f 02 c0    	cmp    DWORD PTR ds:0xc0021ff0,eax
c000f756:	75 23                	jne    c000f77b <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f758:	a1 2c 79 02 c0       	mov    eax,ds:0xc002792c
c000f75d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f761:	89 06                	mov    DWORD PTR [esi],eax
c000f763:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000f768:	89 07                	mov    DWORD PTR [edi],eax
c000f76a:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c000f76f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f772:	a1 20 79 02 c0       	mov    eax,ds:0xc0027920
c000f777:	89 02                	mov    DWORD PTR [edx],eax
c000f779:	eb 3f                	jmp    c000f7ba <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f77b:	31 c9                	xor    ecx,ecx
c000f77d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f781:	0f a2                	cpuid  
c000f783:	89 06                	mov    DWORD PTR [esi],eax
c000f785:	89 1f                	mov    DWORD PTR [edi],ebx
c000f787:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f78b:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f78e:	89 10                	mov    DWORD PTR [eax],edx
c000f790:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f794:	a3 f0 1f 02 c0       	mov    ds:0xc0021ff0,eax
c000f799:	8b 06                	mov    eax,DWORD PTR [esi]
c000f79b:	a3 2c 79 02 c0       	mov    ds:0xc002792c,eax
c000f7a0:	8b 07                	mov    eax,DWORD PTR [edi]
c000f7a2:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000f7a7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f7aa:	a3 24 79 02 c0       	mov    ds:0xc0027924,eax
c000f7af:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f7b3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7b5:	a3 20 79 02 c0       	mov    ds:0xc0027920,eax
c000f7ba:	5b                   	pop    ebx
c000f7bb:	5e                   	pop    esi
c000f7bc:	5f                   	pop    edi
c000f7bd:	5d                   	pop    ebp
c000f7be:	c3                   	ret    
c000f7bf:	90                   	nop

c000f7c0 <CPU::cpuidCheckEDX(unsigned int)>:
c000f7c0:	83 ec 10             	sub    esp,0x10
c000f7c3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7c7:	50                   	push   eax
c000f7c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7cc:	50                   	push   eax
c000f7cd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7d1:	50                   	push   eax
c000f7d2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7d6:	50                   	push   eax
c000f7d7:	6a 01                	push   0x1
c000f7d9:	e8 5e ff ff ff       	call   c000f73c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f7de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7e2:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f7e6:	0f 95 c0             	setne  al
c000f7e9:	83 c4 24             	add    esp,0x24
c000f7ec:	c3                   	ret    
c000f7ed:	90                   	nop

c000f7ee <CPU::cpuidCheckECX(unsigned int)>:
c000f7ee:	83 ec 10             	sub    esp,0x10
c000f7f1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7f5:	50                   	push   eax
c000f7f6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7fa:	50                   	push   eax
c000f7fb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7ff:	50                   	push   eax
c000f800:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f804:	50                   	push   eax
c000f805:	6a 01                	push   0x1
c000f807:	e8 30 ff ff ff       	call   c000f73c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f80c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f810:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f814:	0f 95 c0             	setne  al
c000f817:	83 c4 24             	add    esp,0x24
c000f81a:	c3                   	ret    
c000f81b:	90                   	nop

c000f81c <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f81c:	83 ec 10             	sub    esp,0x10
c000f81f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f823:	50                   	push   eax
c000f824:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f828:	50                   	push   eax
c000f829:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f82d:	50                   	push   eax
c000f82e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f832:	50                   	push   eax
c000f833:	6a 07                	push   0x7
c000f835:	e8 02 ff ff ff       	call   c000f73c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f83a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f83e:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f842:	0f 95 c0             	setne  al
c000f845:	83 c4 24             	add    esp,0x24
c000f848:	c3                   	ret    
c000f849:	90                   	nop

c000f84a <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f84a:	83 ec 10             	sub    esp,0x10
c000f84d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f851:	50                   	push   eax
c000f852:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f856:	50                   	push   eax
c000f857:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f85b:	50                   	push   eax
c000f85c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f860:	50                   	push   eax
c000f861:	6a 07                	push   0x7
c000f863:	e8 d4 fe ff ff       	call   c000f73c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f868:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f86c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f870:	0f 95 c0             	setne  al
c000f873:	83 c4 24             	add    esp,0x24
c000f876:	c3                   	ret    
c000f877:	90                   	nop

c000f878 <CPU::CPU()>:
c000f878:	83 ec 0c             	sub    esp,0xc
c000f87b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f87f:	83 ec 08             	sub    esp,0x8
c000f882:	68 f5 0b 02 c0       	push   0xc0020bf5
c000f887:	50                   	push   eax
c000f888:	e8 39 c7 ff ff       	call   c000bfc6 <Device::Device(char const*)>
c000f88d:	83 c4 10             	add    esp,0x10
c000f890:	ba 7c 0c 02 c0       	mov    edx,0xc0020c7c
c000f895:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f899:	89 10                	mov    DWORD PTR [eax],edx
c000f89b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f89f:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f8a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8ad:	05 78 01 00 00       	add    eax,0x178
c000f8b2:	83 ec 0c             	sub    esp,0xc
c000f8b5:	50                   	push   eax
c000f8b6:	e8 99 7a ff ff       	call   c0007354 <GDT::GDT()>
c000f8bb:	83 c4 10             	add    esp,0x10
c000f8be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8c2:	05 7c 09 00 00       	add    eax,0x97c
c000f8c7:	83 ec 0c             	sub    esp,0xc
c000f8ca:	50                   	push   eax
c000f8cb:	e8 d4 7c ff ff       	call   c00075a4 <IDT::IDT()>
c000f8d0:	83 c4 10             	add    esp,0x10
c000f8d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8d7:	05 7c 11 00 00       	add    eax,0x117c
c000f8dc:	83 ec 0c             	sub    esp,0xc
c000f8df:	50                   	push   eax
c000f8e0:	e8 6f 96 ff ff       	call   c0008f54 <TSS::TSS()>
c000f8e5:	83 c4 10             	add    esp,0x10
c000f8e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8ec:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f8f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8f7:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c000f901:	90                   	nop
c000f902:	83 c4 0c             	add    esp,0xc
c000f905:	c3                   	ret    

c000f906 <CPU::displayFeatures()>:
c000f906:	c3                   	ret    
c000f907:	90                   	nop

c000f908 <CPU::detectFeatures()>:
c000f908:	55                   	push   ebp
c000f909:	57                   	push   edi
c000f90a:	56                   	push   esi
c000f90b:	53                   	push   ebx
c000f90c:	83 ec 30             	sub    esp,0x30
c000f90f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f913:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f91d:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f924:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f92a:	6a 0d                	push   0xd
c000f92c:	6a 00                	push   0x0
c000f92e:	55                   	push   ebp
c000f92f:	e8 bc 0b ff ff       	call   c00004f0 <memset>
c000f934:	83 c4 10             	add    esp,0x10
c000f937:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f93c:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f943:	0f 84 db 05 00 00    	je     c000ff24 <CPU::detectFeatures()+0x61c>
c000f949:	83 ec 0c             	sub    esp,0xc
c000f94c:	89 ef                	mov    edi,ebp
c000f94e:	6a 10                	push   0x10
c000f950:	e8 6b fe ff ff       	call   c000f7c0 <CPU::cpuidCheckEDX(unsigned int)>
c000f955:	83 e0 01             	and    eax,0x1
c000f958:	8d 14 00             	lea    edx,[eax+eax*1]
c000f95b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f961:	83 e0 fd             	and    eax,0xfffffffd
c000f964:	09 d0                	or     eax,edx
c000f966:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f96c:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f973:	e8 48 fe ff ff       	call   c000f7c0 <CPU::cpuidCheckEDX(unsigned int)>
c000f978:	83 e0 01             	and    eax,0x1
c000f97b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f982:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f988:	83 e0 fb             	and    eax,0xfffffffb
c000f98b:	09 d0                	or     eax,edx
c000f98d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f993:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f99a:	e8 21 fe ff ff       	call   c000f7c0 <CPU::cpuidCheckEDX(unsigned int)>
c000f99f:	83 e0 01             	and    eax,0x1
c000f9a2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f9a9:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f9af:	83 e0 f7             	and    eax,0xfffffff7
c000f9b2:	09 d0                	or     eax,edx
c000f9b4:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f9ba:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f9c1:	e8 fa fd ff ff       	call   c000f7c0 <CPU::cpuidCheckEDX(unsigned int)>
c000f9c6:	83 e0 01             	and    eax,0x1
c000f9c9:	c1 e0 04             	shl    eax,0x4
c000f9cc:	89 c2                	mov    edx,eax
c000f9ce:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f9d4:	83 e0 ef             	and    eax,0xffffffef
c000f9d7:	09 d0                	or     eax,edx
c000f9d9:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f9df:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f9e6:	e8 d5 fd ff ff       	call   c000f7c0 <CPU::cpuidCheckEDX(unsigned int)>
c000f9eb:	83 e0 01             	and    eax,0x1
c000f9ee:	c1 e0 05             	shl    eax,0x5
c000f9f1:	89 c2                	mov    edx,eax
c000f9f3:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f9f9:	83 e0 df             	and    eax,0xffffffdf
c000f9fc:	09 d0                	or     eax,edx
c000f9fe:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fa04:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000fa0b:	e8 b0 fd ff ff       	call   c000f7c0 <CPU::cpuidCheckEDX(unsigned int)>
c000fa10:	83 e0 01             	and    eax,0x1
c000fa13:	8d 14 00             	lea    edx,[eax+eax*1]
c000fa16:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fa1c:	83 e0 fd             	and    eax,0xfffffffd
c000fa1f:	09 d0                	or     eax,edx
c000fa21:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fa27:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000fa2e:	e8 8d fd ff ff       	call   c000f7c0 <CPU::cpuidCheckEDX(unsigned int)>
c000fa33:	83 e0 01             	and    eax,0x1
c000fa36:	c1 e0 06             	shl    eax,0x6
c000fa39:	89 c2                	mov    edx,eax
c000fa3b:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fa41:	83 e0 bf             	and    eax,0xffffffbf
c000fa44:	09 d0                	or     eax,edx
c000fa46:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fa4c:	58                   	pop    eax
c000fa4d:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fa51:	50                   	push   eax
c000fa52:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fa56:	50                   	push   eax
c000fa57:	8d 74 24 28          	lea    esi,[esp+0x28]
c000fa5b:	56                   	push   esi
c000fa5c:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fa60:	50                   	push   eax
c000fa61:	6a 00                	push   0x0
c000fa63:	e8 d4 fc ff ff       	call   c000f73c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fa68:	b8 04 00 00 00       	mov    eax,0x4
c000fa6d:	89 c1                	mov    ecx,eax
c000fa6f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fa71:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000fa77:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000fa7b:	89 c1                	mov    ecx,eax
c000fa7d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fa7f:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000fa85:	8d 74 24 38          	lea    esi,[esp+0x38]
c000fa89:	89 c1                	mov    ecx,eax
c000fa8b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fa8d:	83 c4 18             	add    esp,0x18
c000fa90:	68 04 0b 02 c0       	push   0xc0020b04
c000fa95:	55                   	push   ebp
c000fa96:	e8 b5 0c ff ff       	call   c0000750 <strcmp>
c000fa9b:	83 c4 10             	add    esp,0x10
c000fa9e:	85 c0                	test   eax,eax
c000faa0:	75 0f                	jne    c000fab1 <CPU::detectFeatures()+0x1a9>
c000faa2:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000faac:	e9 22 02 00 00       	jmp    c000fcd3 <CPU::detectFeatures()+0x3cb>
c000fab1:	50                   	push   eax
c000fab2:	50                   	push   eax
c000fab3:	68 11 0b 02 c0       	push   0xc0020b11
c000fab8:	55                   	push   ebp
c000fab9:	e8 92 0c ff ff       	call   c0000750 <strcmp>
c000fabe:	83 c4 10             	add    esp,0x10
c000fac1:	85 c0                	test   eax,eax
c000fac3:	74 dd                	je     c000faa2 <CPU::detectFeatures()+0x19a>
c000fac5:	50                   	push   eax
c000fac6:	50                   	push   eax
c000fac7:	68 1e 0b 02 c0       	push   0xc0020b1e
c000facc:	55                   	push   ebp
c000facd:	e8 7e 0c ff ff       	call   c0000750 <strcmp>
c000fad2:	83 c4 10             	add    esp,0x10
c000fad5:	85 c0                	test   eax,eax
c000fad7:	74 2a                	je     c000fb03 <CPU::detectFeatures()+0x1fb>
c000fad9:	50                   	push   eax
c000fada:	50                   	push   eax
c000fadb:	68 2b 0b 02 c0       	push   0xc0020b2b
c000fae0:	55                   	push   ebp
c000fae1:	e8 6a 0c ff ff       	call   c0000750 <strcmp>
c000fae6:	83 c4 10             	add    esp,0x10
c000fae9:	85 c0                	test   eax,eax
c000faeb:	74 16                	je     c000fb03 <CPU::detectFeatures()+0x1fb>
c000faed:	50                   	push   eax
c000faee:	50                   	push   eax
c000faef:	68 38 0b 02 c0       	push   0xc0020b38
c000faf4:	55                   	push   ebp
c000faf5:	e8 56 0c ff ff       	call   c0000750 <strcmp>
c000fafa:	83 c4 10             	add    esp,0x10
c000fafd:	85 c0                	test   eax,eax
c000faff:	74 48                	je     c000fb49 <CPU::detectFeatures()+0x241>
c000fb01:	eb 0f                	jmp    c000fb12 <CPU::detectFeatures()+0x20a>
c000fb03:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000fb0d:	e9 c1 01 00 00       	jmp    c000fcd3 <CPU::detectFeatures()+0x3cb>
c000fb12:	50                   	push   eax
c000fb13:	50                   	push   eax
c000fb14:	68 45 0b 02 c0       	push   0xc0020b45
c000fb19:	55                   	push   ebp
c000fb1a:	e8 31 0c ff ff       	call   c0000750 <strcmp>
c000fb1f:	83 c4 10             	add    esp,0x10
c000fb22:	85 c0                	test   eax,eax
c000fb24:	74 23                	je     c000fb49 <CPU::detectFeatures()+0x241>
c000fb26:	57                   	push   edi
c000fb27:	57                   	push   edi
c000fb28:	68 52 0b 02 c0       	push   0xc0020b52
c000fb2d:	55                   	push   ebp
c000fb2e:	e8 1d 0c ff ff       	call   c0000750 <strcmp>
c000fb33:	83 c4 10             	add    esp,0x10
c000fb36:	85 c0                	test   eax,eax
c000fb38:	75 1e                	jne    c000fb58 <CPU::detectFeatures()+0x250>
c000fb3a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fb44:	e9 8a 01 00 00       	jmp    c000fcd3 <CPU::detectFeatures()+0x3cb>
c000fb49:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000fb53:	e9 7b 01 00 00       	jmp    c000fcd3 <CPU::detectFeatures()+0x3cb>
c000fb58:	56                   	push   esi
c000fb59:	56                   	push   esi
c000fb5a:	68 5f 0b 02 c0       	push   0xc0020b5f
c000fb5f:	55                   	push   ebp
c000fb60:	e8 eb 0b ff ff       	call   c0000750 <strcmp>
c000fb65:	83 c4 10             	add    esp,0x10
c000fb68:	85 c0                	test   eax,eax
c000fb6a:	75 0f                	jne    c000fb7b <CPU::detectFeatures()+0x273>
c000fb6c:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000fb76:	e9 58 01 00 00       	jmp    c000fcd3 <CPU::detectFeatures()+0x3cb>
c000fb7b:	51                   	push   ecx
c000fb7c:	51                   	push   ecx
c000fb7d:	68 1e 0b 02 c0       	push   0xc0020b1e
c000fb82:	55                   	push   ebp
c000fb83:	e8 c8 0b ff ff       	call   c0000750 <strcmp>
c000fb88:	83 c4 10             	add    esp,0x10
c000fb8b:	85 c0                	test   eax,eax
c000fb8d:	75 0f                	jne    c000fb9e <CPU::detectFeatures()+0x296>
c000fb8f:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000fb99:	e9 35 01 00 00       	jmp    c000fcd3 <CPU::detectFeatures()+0x3cb>
c000fb9e:	52                   	push   edx
c000fb9f:	52                   	push   edx
c000fba0:	68 6c 0b 02 c0       	push   0xc0020b6c
c000fba5:	55                   	push   ebp
c000fba6:	e8 a5 0b ff ff       	call   c0000750 <strcmp>
c000fbab:	83 c4 10             	add    esp,0x10
c000fbae:	85 c0                	test   eax,eax
c000fbb0:	75 0f                	jne    c000fbc1 <CPU::detectFeatures()+0x2b9>
c000fbb2:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000fbbc:	e9 12 01 00 00       	jmp    c000fcd3 <CPU::detectFeatures()+0x3cb>
c000fbc1:	50                   	push   eax
c000fbc2:	50                   	push   eax
c000fbc3:	68 79 0b 02 c0       	push   0xc0020b79
c000fbc8:	55                   	push   ebp
c000fbc9:	e8 82 0b ff ff       	call   c0000750 <strcmp>
c000fbce:	83 c4 10             	add    esp,0x10
c000fbd1:	85 c0                	test   eax,eax
c000fbd3:	75 0f                	jne    c000fbe4 <CPU::detectFeatures()+0x2dc>
c000fbd5:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000fbdf:	e9 ef 00 00 00       	jmp    c000fcd3 <CPU::detectFeatures()+0x3cb>
c000fbe4:	50                   	push   eax
c000fbe5:	50                   	push   eax
c000fbe6:	68 86 0b 02 c0       	push   0xc0020b86
c000fbeb:	55                   	push   ebp
c000fbec:	e8 5f 0b ff ff       	call   c0000750 <strcmp>
c000fbf1:	83 c4 10             	add    esp,0x10
c000fbf4:	85 c0                	test   eax,eax
c000fbf6:	75 0f                	jne    c000fc07 <CPU::detectFeatures()+0x2ff>
c000fbf8:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000fc02:	e9 cc 00 00 00       	jmp    c000fcd3 <CPU::detectFeatures()+0x3cb>
c000fc07:	50                   	push   eax
c000fc08:	50                   	push   eax
c000fc09:	68 93 0b 02 c0       	push   0xc0020b93
c000fc0e:	55                   	push   ebp
c000fc0f:	e8 3c 0b ff ff       	call   c0000750 <strcmp>
c000fc14:	83 c4 10             	add    esp,0x10
c000fc17:	85 c0                	test   eax,eax
c000fc19:	75 0f                	jne    c000fc2a <CPU::detectFeatures()+0x322>
c000fc1b:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000fc25:	e9 a9 00 00 00       	jmp    c000fcd3 <CPU::detectFeatures()+0x3cb>
c000fc2a:	50                   	push   eax
c000fc2b:	50                   	push   eax
c000fc2c:	68 a0 0b 02 c0       	push   0xc0020ba0
c000fc31:	55                   	push   ebp
c000fc32:	e8 19 0b ff ff       	call   c0000750 <strcmp>
c000fc37:	83 c4 10             	add    esp,0x10
c000fc3a:	85 c0                	test   eax,eax
c000fc3c:	75 0f                	jne    c000fc4d <CPU::detectFeatures()+0x345>
c000fc3e:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000fc48:	e9 86 00 00 00       	jmp    c000fcd3 <CPU::detectFeatures()+0x3cb>
c000fc4d:	50                   	push   eax
c000fc4e:	50                   	push   eax
c000fc4f:	68 ad 0b 02 c0       	push   0xc0020bad
c000fc54:	55                   	push   ebp
c000fc55:	e8 f6 0a ff ff       	call   c0000750 <strcmp>
c000fc5a:	83 c4 10             	add    esp,0x10
c000fc5d:	85 c0                	test   eax,eax
c000fc5f:	75 0c                	jne    c000fc6d <CPU::detectFeatures()+0x365>
c000fc61:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000fc6b:	eb 66                	jmp    c000fcd3 <CPU::detectFeatures()+0x3cb>
c000fc6d:	50                   	push   eax
c000fc6e:	50                   	push   eax
c000fc6f:	68 ba 0b 02 c0       	push   0xc0020bba
c000fc74:	55                   	push   ebp
c000fc75:	e8 d6 0a ff ff       	call   c0000750 <strcmp>
c000fc7a:	83 c4 10             	add    esp,0x10
c000fc7d:	85 c0                	test   eax,eax
c000fc7f:	75 0c                	jne    c000fc8d <CPU::detectFeatures()+0x385>
c000fc81:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000fc8b:	eb 46                	jmp    c000fcd3 <CPU::detectFeatures()+0x3cb>
c000fc8d:	57                   	push   edi
c000fc8e:	57                   	push   edi
c000fc8f:	68 c7 0b 02 c0       	push   0xc0020bc7
c000fc94:	55                   	push   ebp
c000fc95:	e8 b6 0a ff ff       	call   c0000750 <strcmp>
c000fc9a:	83 c4 10             	add    esp,0x10
c000fc9d:	85 c0                	test   eax,eax
c000fc9f:	74 e0                	je     c000fc81 <CPU::detectFeatures()+0x379>
c000fca1:	56                   	push   esi
c000fca2:	56                   	push   esi
c000fca3:	68 d4 0b 02 c0       	push   0xc0020bd4
c000fca8:	55                   	push   ebp
c000fca9:	e8 a2 0a ff ff       	call   c0000750 <strcmp>
c000fcae:	83 c4 10             	add    esp,0x10
c000fcb1:	85 c0                	test   eax,eax
c000fcb3:	74 cc                	je     c000fc81 <CPU::detectFeatures()+0x379>
c000fcb5:	51                   	push   ecx
c000fcb6:	51                   	push   ecx
c000fcb7:	68 e1 0b 02 c0       	push   0xc0020be1
c000fcbc:	55                   	push   ebp
c000fcbd:	e8 8e 0a ff ff       	call   c0000750 <strcmp>
c000fcc2:	83 c4 10             	add    esp,0x10
c000fcc5:	85 c0                	test   eax,eax
c000fcc7:	74 b8                	je     c000fc81 <CPU::detectFeatures()+0x379>
c000fcc9:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000fcd3:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000fcd8:	0f 86 be 00 00 00    	jbe    c000fd9c <CPU::detectFeatures()+0x494>
c000fcde:	83 ec 0c             	sub    esp,0xc
c000fce1:	68 80 00 00 00       	push   0x80
c000fce6:	e8 31 fb ff ff       	call   c000f81c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fceb:	83 e0 01             	and    eax,0x1
c000fcee:	c1 e0 06             	shl    eax,0x6
c000fcf1:	89 c2                	mov    edx,eax
c000fcf3:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fcf9:	83 e0 bf             	and    eax,0xffffffbf
c000fcfc:	09 d0                	or     eax,edx
c000fcfe:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fd04:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000fd0b:	e8 0c fb ff ff       	call   c000f81c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fd10:	83 e0 01             	and    eax,0x1
c000fd13:	c1 e0 04             	shl    eax,0x4
c000fd16:	89 c2                	mov    edx,eax
c000fd18:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fd1e:	83 e0 ef             	and    eax,0xffffffef
c000fd21:	09 d0                	or     eax,edx
c000fd23:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fd29:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000fd30:	e8 e7 fa ff ff       	call   c000f81c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fd35:	89 c2                	mov    edx,eax
c000fd37:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fd3d:	c1 e2 07             	shl    edx,0x7
c000fd40:	83 e0 7f             	and    eax,0x7f
c000fd43:	09 d0                	or     eax,edx
c000fd45:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fd4b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000fd52:	e8 f3 fa ff ff       	call   c000f84a <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fd57:	83 e0 01             	and    eax,0x1
c000fd5a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000fd61:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fd67:	83 e0 f7             	and    eax,0xfffffff7
c000fd6a:	09 d0                	or     eax,edx
c000fd6c:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fd72:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000fd79:	e8 cc fa ff ff       	call   c000f84a <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fd7e:	83 c4 10             	add    esp,0x10
c000fd81:	83 e0 01             	and    eax,0x1
c000fd84:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fd8b:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fd91:	83 e0 fb             	and    eax,0xfffffffb
c000fd94:	09 d0                	or     eax,edx
c000fd96:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fd9c:	83 ec 0c             	sub    esp,0xc
c000fd9f:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fda3:	50                   	push   eax
c000fda4:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fda8:	50                   	push   eax
c000fda9:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000fdad:	57                   	push   edi
c000fdae:	8d 74 24 28          	lea    esi,[esp+0x28]
c000fdb2:	56                   	push   esi
c000fdb3:	6a 01                	push   0x1
c000fdb5:	e8 82 f9 ff ff       	call   c000f73c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fdba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fdbe:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c000fdc4:	89 c1                	mov    ecx,eax
c000fdc6:	83 e2 f0             	and    edx,0xfffffff0
c000fdc9:	83 e1 0f             	and    ecx,0xf
c000fdcc:	09 ca                	or     edx,ecx
c000fdce:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000fdd4:	89 c2                	mov    edx,eax
c000fdd6:	c1 ea 04             	shr    edx,0x4
c000fdd9:	83 e2 0f             	and    edx,0xf
c000fddc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000fde0:	89 d1                	mov    ecx,edx
c000fde2:	83 c4 20             	add    esp,0x20
c000fde5:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c000fdeb:	c1 e1 06             	shl    ecx,0x6
c000fdee:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c000fdf4:	09 ca                	or     edx,ecx
c000fdf6:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000fdfd:	89 c2                	mov    edx,eax
c000fdff:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c000fe05:	c1 ea 08             	shr    edx,0x8
c000fe08:	83 e1 3f             	and    ecx,0x3f
c000fe0b:	83 e2 0f             	and    edx,0xf
c000fe0e:	89 d5                	mov    ebp,edx
c000fe10:	83 e5 03             	and    ebp,0x3
c000fe13:	c1 e5 06             	shl    ebp,0x6
c000fe16:	09 e9                	or     ecx,ebp
c000fe18:	89 d5                	mov    ebp,edx
c000fe1a:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c000fe20:	c1 ed 02             	shr    ebp,0x2
c000fe23:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c000fe29:	83 e1 c0             	and    ecx,0xffffffc0
c000fe2c:	09 e9                	or     ecx,ebp
c000fe2e:	89 c5                	mov    ebp,eax
c000fe30:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000fe36:	c1 ed 08             	shr    ebp,0x8
c000fe39:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c000fe3f:	83 e5 30             	and    ebp,0x30
c000fe42:	83 e1 cf             	and    ecx,0xffffffcf
c000fe45:	09 e9                	or     ecx,ebp
c000fe47:	83 fa 06             	cmp    edx,0x6
c000fe4a:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c000fe50:	74 05                	je     c000fe57 <CPU::detectFeatures()+0x54f>
c000fe52:	83 fa 0f             	cmp    edx,0xf
c000fe55:	75 64                	jne    c000febb <CPU::detectFeatures()+0x5b3>
c000fe57:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000fe5d:	89 c1                	mov    ecx,eax
c000fe5f:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c000fe65:	c1 e9 10             	shr    ecx,0x10
c000fe68:	c1 e1 04             	shl    ecx,0x4
c000fe6b:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c000fe6f:	0f b6 c9             	movzx  ecx,cl
c000fe72:	c1 e1 06             	shl    ecx,0x6
c000fe75:	09 e9                	or     ecx,ebp
c000fe77:	83 fa 0f             	cmp    edx,0xf
c000fe7a:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c000fe81:	75 38                	jne    c000febb <CPU::detectFeatures()+0x5b3>
c000fe83:	c1 e8 14             	shr    eax,0x14
c000fe86:	83 c0 0f             	add    eax,0xf
c000fe89:	0f b6 c0             	movzx  eax,al
c000fe8c:	89 c2                	mov    edx,eax
c000fe8e:	c1 e8 02             	shr    eax,0x2
c000fe91:	83 e2 03             	and    edx,0x3
c000fe94:	89 d1                	mov    ecx,edx
c000fe96:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c000fe9c:	c1 e1 06             	shl    ecx,0x6
c000fe9f:	83 e2 3f             	and    edx,0x3f
c000fea2:	09 ca                	or     edx,ecx
c000fea4:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000feaa:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c000feb0:	83 e2 c0             	and    edx,0xffffffc0
c000feb3:	09 d0                	or     eax,edx
c000feb5:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c000febb:	83 ec 0c             	sub    esp,0xc
c000febe:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fec4:	83 c8 07             	or     eax,0x7
c000fec7:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fecd:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fed1:	50                   	push   eax
c000fed2:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000fed6:	55                   	push   ebp
c000fed7:	57                   	push   edi
c000fed8:	56                   	push   esi
c000fed9:	68 00 00 00 80       	push   0x80000000
c000fede:	e8 59 f8 ff ff       	call   c000f73c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fee3:	83 c4 20             	add    esp,0x20
c000fee6:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000feee:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000fef2:	76 1e                	jbe    c000ff12 <CPU::detectFeatures()+0x60a>
c000fef4:	83 ec 0c             	sub    esp,0xc
c000fef7:	50                   	push   eax
c000fef8:	55                   	push   ebp
c000fef9:	57                   	push   edi
c000fefa:	56                   	push   esi
c000fefb:	68 01 00 00 80       	push   0x80000001
c000ff00:	e8 37 f8 ff ff       	call   c000f73c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ff05:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000ff0f:	83 c4 20             	add    esp,0x20
c000ff12:	52                   	push   edx
c000ff13:	52                   	push   edx
c000ff14:	68 ed 0b 02 c0       	push   0xc0020bed
c000ff19:	53                   	push   ebx
c000ff1a:	e8 99 c0 ff ff       	call   c000bfb8 <Device::setName(char const*)>
c000ff1f:	83 c4 10             	add    esp,0x10
c000ff22:	eb 69                	jmp    c000ff8d <CPU::detectFeatures()+0x685>
c000ff24:	50                   	push   eax
c000ff25:	50                   	push   eax
c000ff26:	68 52 0b 02 c0       	push   0xc0020b52
c000ff2b:	55                   	push   ebp
c000ff2c:	e8 0f 07 ff ff       	call   c0000640 <strcpy>
c000ff31:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000ff3b:	e8 83 02 ff ff       	call   c00001c3 <is486>
c000ff40:	83 c4 10             	add    esp,0x10
c000ff43:	85 c0                	test   eax,eax
c000ff45:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000ff4b:	74 1f                	je     c000ff6c <CPU::detectFeatures()+0x664>
c000ff4d:	83 c8 07             	or     eax,0x7
c000ff50:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000ff56:	0f 20 c0             	mov    eax,cr0
c000ff59:	83 e0 14             	and    eax,0x14
c000ff5c:	83 f8 04             	cmp    eax,0x4
c000ff5f:	75 10                	jne    c000ff71 <CPU::detectFeatures()+0x669>
c000ff61:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000ff67:	83 e0 fd             	and    eax,0xfffffffd
c000ff6a:	eb 1b                	jmp    c000ff87 <CPU::detectFeatures()+0x67f>
c000ff6c:	83 e0 f8             	and    eax,0xfffffff8
c000ff6f:	eb df                	jmp    c000ff50 <CPU::detectFeatures()+0x648>
c000ff71:	e8 28 02 ff ff       	call   c000019e <hasLegacyFPU>
c000ff76:	83 e0 01             	and    eax,0x1
c000ff79:	8d 14 00             	lea    edx,[eax+eax*1]
c000ff7c:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000ff82:	83 e0 fd             	and    eax,0xfffffffd
c000ff85:	09 d0                	or     eax,edx
c000ff87:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000ff8d:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000ff94:	74 17                	je     c000ffad <CPU::detectFeatures()+0x6a5>
c000ff96:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000ff9c:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c000ffa2:	83 c8 10             	or     eax,0x10
c000ffa5:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c000ffab:	eb 20                	jmp    c000ffcd <CPU::detectFeatures()+0x6c5>
c000ffad:	e8 ec 01 ff ff       	call   c000019e <hasLegacyFPU>
c000ffb2:	83 e0 01             	and    eax,0x1
c000ffb5:	8d 14 00             	lea    edx,[eax+eax*1]
c000ffb8:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000ffbe:	83 e0 fd             	and    eax,0xfffffffd
c000ffc1:	09 d0                	or     eax,edx
c000ffc3:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000ffc9:	a8 02                	test   al,0x2
c000ffcb:	75 c9                	jne    c000ff96 <CPU::detectFeatures()+0x68e>
c000ffcd:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000ffd4:	83 c4 2c             	add    esp,0x2c
c000ffd7:	5b                   	pop    ebx
c000ffd8:	5e                   	pop    esi
c000ffd9:	5f                   	pop    edi
c000ffda:	5d                   	pop    ebp
c000ffdb:	c3                   	ret    

c000ffdc <CPU::setupSMEP()>:
c000ffdc:	0f 20 e0             	mov    eax,cr4
c000ffdf:	0d 00 00 10 00       	or     eax,0x100000
c000ffe4:	0f 22 e0             	mov    cr4,eax
c000ffe7:	c3                   	ret    

c000ffe8 <CPU::setupUMIP()>:
c000ffe8:	0f 20 e0             	mov    eax,cr4
c000ffeb:	80 cc 08             	or     ah,0x8
c000ffee:	0f 22 e0             	mov    cr4,eax
c000fff1:	c3                   	ret    

c000fff2 <CPU::setupTSC()>:
c000fff2:	0f 20 e0             	mov    eax,cr4
c000fff5:	83 c8 04             	or     eax,0x4
c000fff8:	0f 22 e0             	mov    cr4,eax
c000fffb:	c3                   	ret    

c000fffc <CPU::setupLargePages()>:
c000fffc:	0f 20 e0             	mov    eax,cr4
c000ffff:	83 c8 10             	or     eax,0x10
c0010002:	0f 22 e0             	mov    cr4,eax
c0010005:	c3                   	ret    

c0010006 <CPU::setupPAT()>:
c0010006:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001000b:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0010012:	74 2c                	je     c0010040 <CPU::setupPAT()+0x3a>
c0010014:	53                   	push   ebx
c0010015:	83 ec 10             	sub    esp,0x10
c0010018:	68 77 02 00 00       	push   0x277
c001001d:	50                   	push   eax
c001001e:	e8 95 70 ff ff       	call   c00070b8 <Computer::rdmsr(unsigned int)>
c0010023:	83 e2 f8             	and    edx,0xfffffff8
c0010026:	83 ca 01             	or     edx,0x1
c0010029:	52                   	push   edx
c001002a:	50                   	push   eax
c001002b:	68 77 02 00 00       	push   0x277
c0010030:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0010036:	e8 a9 70 ff ff       	call   c00070e4 <Computer::wrmsr(unsigned int, unsigned long long)>
c001003b:	83 c4 28             	add    esp,0x28
c001003e:	5b                   	pop    ebx
c001003f:	c3                   	ret    
c0010040:	c3                   	ret    
c0010041:	90                   	nop

c0010042 <CPU::setupMTRR()>:
c0010042:	c3                   	ret    
c0010043:	90                   	nop

c0010044 <CPU::setupGlobalPages()>:
c0010044:	0f 20 e0             	mov    eax,cr4
c0010047:	0c 80                	or     al,0x80
c0010049:	0f 22 e0             	mov    cr4,eax
c001004c:	c3                   	ret    
c001004d:	90                   	nop

c001004e <CPU::allowUsermodeDataAccess()>:
c001004e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010052:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010059:	74 03                	je     c001005e <CPU::allowUsermodeDataAccess()+0x10>
c001005b:	0f 01 cb             	stac   
c001005e:	c3                   	ret    
c001005f:	90                   	nop

c0010060 <CPU::prohibitUsermodeDataAccess()>:
c0010060:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010064:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001006b:	74 03                	je     c0010070 <CPU::prohibitUsermodeDataAccess()+0x10>
c001006d:	0f 01 ca             	clac   
c0010070:	c3                   	ret    
c0010071:	90                   	nop

c0010072 <CPU::setupSMAP()>:
c0010072:	0f 20 e0             	mov    eax,cr4
c0010075:	0d 00 00 20 00       	or     eax,0x200000
c001007a:	0f 22 e0             	mov    cr4,eax
c001007d:	eb e1                	jmp    c0010060 <CPU::prohibitUsermodeDataAccess()>
c001007f:	90                   	nop

c0010080 <CPU::setupFeatures()>:
c0010080:	53                   	push   ebx
c0010081:	83 ec 08             	sub    esp,0x8
c0010084:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010088:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c001008f:	74 18                	je     c00100a9 <CPU::setupFeatures()+0x29>
c0010091:	83 ec 0c             	sub    esp,0xc
c0010094:	68 f9 0b 02 c0       	push   0xc0020bf9
c0010099:	e8 59 a9 ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c001009e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00100a1:	e8 42 ff ff ff       	call   c000ffe8 <CPU::setupUMIP()>
c00100a6:	83 c4 10             	add    esp,0x10
c00100a9:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c00100b0:	74 18                	je     c00100ca <CPU::setupFeatures()+0x4a>
c00100b2:	83 ec 0c             	sub    esp,0xc
c00100b5:	68 03 0c 02 c0       	push   0xc0020c03
c00100ba:	e8 38 a9 ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c00100bf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00100c2:	e8 2b ff ff ff       	call   c000fff2 <CPU::setupTSC()>
c00100c7:	83 c4 10             	add    esp,0x10
c00100ca:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c00100d1:	74 18                	je     c00100eb <CPU::setupFeatures()+0x6b>
c00100d3:	83 ec 0c             	sub    esp,0xc
c00100d6:	68 0c 0c 02 c0       	push   0xc0020c0c
c00100db:	e8 17 a9 ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c00100e0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00100e3:	e8 14 ff ff ff       	call   c000fffc <CPU::setupLargePages()>
c00100e8:	83 c4 10             	add    esp,0x10
c00100eb:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c00100f2:	74 18                	je     c001010c <CPU::setupFeatures()+0x8c>
c00100f4:	83 ec 0c             	sub    esp,0xc
c00100f7:	68 15 0c 02 c0       	push   0xc0020c15
c00100fc:	e8 f6 a8 ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c0010101:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010104:	e8 3b ff ff ff       	call   c0010044 <CPU::setupGlobalPages()>
c0010109:	83 c4 10             	add    esp,0x10
c001010c:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010113:	74 18                	je     c001012d <CPU::setupFeatures()+0xad>
c0010115:	83 ec 0c             	sub    esp,0xc
c0010118:	68 27 0c 02 c0       	push   0xc0020c27
c001011d:	e8 d5 a8 ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c0010122:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010125:	e8 dc fe ff ff       	call   c0010006 <CPU::setupPAT()>
c001012a:	83 c4 10             	add    esp,0x10
c001012d:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010134:	74 11                	je     c0010147 <CPU::setupFeatures()+0xc7>
c0010136:	c7 44 24 10 30 0c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020c30
c001013e:	83 c4 08             	add    esp,0x8
c0010141:	5b                   	pop    ebx
c0010142:	e9 b0 a8 ff ff       	jmp    c000a9f7 <Dbg::kprintf(char const*, ...)>
c0010147:	83 c4 08             	add    esp,0x8
c001014a:	5b                   	pop    ebx
c001014b:	c3                   	ret    

c001014c <CPU::open(int, int, void*)>:
c001014c:	57                   	push   edi
c001014d:	56                   	push   esi
c001014e:	53                   	push   ebx
c001014f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010153:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010157:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001015d:	83 ec 0c             	sub    esp,0xc
c0010160:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0010166:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c001016c:	50                   	push   eax
c001016d:	e8 44 72 ff ff       	call   c00073b6 <GDT::setup()>
c0010172:	83 c4 0c             	add    esp,0xc
c0010175:	6a 00                	push   0x0
c0010177:	68 ef be ad de       	push   0xdeadbeef
c001017c:	57                   	push   edi
c001017d:	e8 16 8e ff ff       	call   c0008f98 <TSS::setup(unsigned long, unsigned long)>
c0010182:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010185:	e8 ee 8d ff ff       	call   c0008f78 <TSS::flush()>
c001018a:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010190:	89 04 24             	mov    DWORD PTR [esp],eax
c0010193:	e8 82 74 ff ff       	call   c000761a <IDT::setup()>
c0010198:	b8 00 04 00 00       	mov    eax,0x400
c001019d:	0f 23 f8             	mov    db7,eax
c00101a0:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00101aa:	e8 04 7c ff ff       	call   c0007db3 <Phys::allocatePage()>
c00101af:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00101b5:	89 30                	mov    DWORD PTR [eax],esi
c00101b7:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00101bd:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00101c0:	58                   	pop    eax
c00101c1:	5a                   	pop    edx
c00101c2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00101c8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00101cc:	e8 29 9e ff ff       	call   c0009ffa <VAS::setCPUSpecific(unsigned long)>
c00101d1:	c7 04 24 3a 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c3a
c00101d8:	e8 cd 00 00 00       	call   c00102aa <KeSetBootMessage(char const*)>
c00101dd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00101e0:	e8 23 f7 ff ff       	call   c000f908 <CPU::detectFeatures()>
c00101e5:	c7 04 24 5d 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c5d
c00101ec:	e8 b9 00 00 00       	call   c00102aa <KeSetBootMessage(char const*)>
c00101f1:	e8 4b 6f 00 00       	call   c0017141 <HalInitialise()>
c00101f6:	a1 d0 4e 02 c0       	mov    eax,ds:0xc0024ed0
c00101fb:	83 e0 10             	and    eax,0x10
c00101fe:	83 f8 01             	cmp    eax,0x1
c0010201:	19 c0                	sbb    eax,eax
c0010203:	83 e0 46             	and    eax,0x46
c0010206:	83 c0 1e             	add    eax,0x1e
c0010209:	89 04 24             	mov    DWORD PTR [esp],eax
c001020c:	e8 44 d6 ff ff       	call   c000d855 <setupTimer(int)>
c0010211:	83 c4 10             	add    esp,0x10
c0010214:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001021a:	f6 05 d0 4e 02 c0 20 	test   BYTE PTR ds:0xc0024ed0,0x20
c0010221:	74 0c                	je     c001022f <CPU::open(int, int, void*)+0xe3>
c0010223:	83 ec 0c             	sub    esp,0xc
c0010226:	53                   	push   ebx
c0010227:	e8 54 fe ff ff       	call   c0010080 <CPU::setupFeatures()>
c001022c:	83 c4 10             	add    esp,0x10
c001022f:	5b                   	pop    ebx
c0010230:	31 c0                	xor    eax,eax
c0010232:	5e                   	pop    esi
c0010233:	5f                   	pop    edi
c0010234:	c3                   	ret    

c0010235 <KeDisplaySplashScreen()>:
c0010235:	55                   	push   ebp
c0010236:	bd 05 00 00 00       	mov    ebp,0x5
c001023b:	57                   	push   edi
c001023c:	bf 00 20 02 c0       	mov    edi,0xc0022000
c0010241:	56                   	push   esi
c0010242:	be 0a 00 00 00       	mov    esi,0xa
c0010247:	53                   	push   ebx
c0010248:	31 db                	xor    ebx,ebx
c001024a:	83 ec 0c             	sub    esp,0xc
c001024d:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0010250:	89 d0                	mov    eax,edx
c0010252:	85 d2                	test   edx,edx
c0010254:	74 4c                	je     c00102a2 <KeDisplaySplashScreen()+0x6d>
c0010256:	80 bb 36 20 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffddfca],0xdb
c001025d:	75 13                	jne    c0010272 <KeDisplaySplashScreen()+0x3d>
c001025f:	0f b6 8b 35 20 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffddfcb]
c0010266:	83 e1 fe             	and    ecx,0xfffffffe
c0010269:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c001026f:	75 01                	jne    c0010272 <KeDisplaySplashScreen()+0x3d>
c0010271:	46                   	inc    esi
c0010272:	83 fa 0d             	cmp    edx,0xd
c0010275:	74 28                	je     c001029f <KeDisplaySplashScreen()+0x6a>
c0010277:	83 fa 0a             	cmp    edx,0xa
c001027a:	75 0a                	jne    c0010286 <KeDisplaySplashScreen()+0x51>
c001027c:	45                   	inc    ebp
c001027d:	be 0a 00 00 00       	mov    esi,0xa
c0010282:	31 db                	xor    ebx,ebx
c0010284:	eb 19                	jmp    c001029f <KeDisplaySplashScreen()+0x6a>
c0010286:	83 ec 0c             	sub    esp,0xc
c0010289:	8d 14 33             	lea    edx,[ebx+esi*1]
c001028c:	55                   	push   ebp
c001028d:	0f be c0             	movsx  eax,al
c0010290:	52                   	push   edx
c0010291:	43                   	inc    ebx
c0010292:	6a 00                	push   0x0
c0010294:	6a 0e                	push   0xe
c0010296:	50                   	push   eax
c0010297:	e8 24 7b 00 00       	call   c0017dc0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c001029c:	83 c4 20             	add    esp,0x20
c001029f:	47                   	inc    edi
c00102a0:	eb ab                	jmp    c001024d <KeDisplaySplashScreen()+0x18>
c00102a2:	83 c4 0c             	add    esp,0xc
c00102a5:	5b                   	pop    ebx
c00102a6:	5e                   	pop    esi
c00102a7:	5f                   	pop    edi
c00102a8:	5d                   	pop    ebp
c00102a9:	c3                   	ret    

c00102aa <KeSetBootMessage(char const*)>:
c00102aa:	57                   	push   edi
c00102ab:	56                   	push   esi
c00102ac:	53                   	push   ebx
c00102ad:	81 ec a4 00 00 00    	sub    esp,0xa4
c00102b3:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c00102ba:	68 9e 00 00 00       	push   0x9e
c00102bf:	6a 00                	push   0x0
c00102c1:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00102c5:	56                   	push   esi
c00102c6:	e8 25 02 ff ff       	call   c00004f0 <memset>
c00102cb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00102ce:	e8 9d 02 ff ff       	call   c0000570 <strlen>
c00102d3:	ba 50 00 00 00       	mov    edx,0x50
c00102d8:	83 c4 10             	add    esp,0x10
c00102db:	29 c2                	sub    edx,eax
c00102dd:	31 c9                	xor    ecx,ecx
c00102df:	83 e2 fe             	and    edx,0xfffffffe
c00102e2:	01 f2                	add    edx,esi
c00102e4:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c00102e9:	84 c0                	test   al,al
c00102eb:	74 0a                	je     c00102f7 <KeSetBootMessage(char const*)+0x4d>
c00102ed:	80 cc 0f             	or     ah,0xf
c00102f0:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c00102f4:	41                   	inc    ecx
c00102f5:	eb ed                	jmp    c00102e4 <KeSetBootMessage(char const*)+0x3a>
c00102f7:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c00102fc:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010301:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010303:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010309:	5b                   	pop    ebx
c001030a:	5e                   	pop    esi
c001030b:	5f                   	pop    edi
c001030c:	c3                   	ret    
c001030d:	90                   	nop

c001030e <EnvVarContainer::getEnv(char const*)>:
c001030e:	57                   	push   edi
c001030f:	56                   	push   esi
c0010310:	53                   	push   ebx
c0010311:	31 db                	xor    ebx,ebx
c0010313:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010317:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010319:	7e 2b                	jle    c0010346 <EnvVarContainer::getEnv(char const*)+0x38>
c001031b:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010322:	50                   	push   eax
c0010323:	50                   	push   eax
c0010324:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010327:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001032a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001032e:	e8 1d 04 ff ff       	call   c0000750 <strcmp>
c0010333:	83 c4 10             	add    esp,0x10
c0010336:	85 c0                	test   eax,eax
c0010338:	75 09                	jne    c0010343 <EnvVarContainer::getEnv(char const*)+0x35>
c001033a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001033d:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010341:	eb 05                	jmp    c0010348 <EnvVarContainer::getEnv(char const*)+0x3a>
c0010343:	43                   	inc    ebx
c0010344:	eb d1                	jmp    c0010317 <EnvVarContainer::getEnv(char const*)+0x9>
c0010346:	31 c0                	xor    eax,eax
c0010348:	5b                   	pop    ebx
c0010349:	5e                   	pop    esi
c001034a:	5f                   	pop    edi
c001034b:	c3                   	ret    

c001034c <EnvVarContainer::setEnv(char const*, char const*)>:
c001034c:	55                   	push   ebp
c001034d:	57                   	push   edi
c001034e:	56                   	push   esi
c001034f:	53                   	push   ebx
c0010350:	83 ec 28             	sub    esp,0x28
c0010353:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010357:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001035b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001035f:	56                   	push   esi
c0010360:	e8 0b 02 ff ff       	call   c0000570 <strlen>
c0010365:	40                   	inc    eax
c0010366:	89 04 24             	mov    DWORD PTR [esp],eax
c0010369:	e8 40 77 ff ff       	call   c0007aae <malloc>
c001036e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010371:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010375:	e8 f6 01 ff ff       	call   c0000570 <strlen>
c001037a:	40                   	inc    eax
c001037b:	89 04 24             	mov    DWORD PTR [esp],eax
c001037e:	e8 2b 77 ff ff       	call   c0007aae <malloc>
c0010383:	89 34 24             	mov    DWORD PTR [esp],esi
c0010386:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001038a:	e8 e1 01 ff ff       	call   c0000570 <strlen>
c001038f:	83 c4 0c             	add    esp,0xc
c0010392:	40                   	inc    eax
c0010393:	50                   	push   eax
c0010394:	6a 00                	push   0x0
c0010396:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001039a:	e8 51 01 ff ff       	call   c00004f0 <memset>
c001039f:	89 34 24             	mov    DWORD PTR [esp],esi
c00103a2:	e8 c9 01 ff ff       	call   c0000570 <strlen>
c00103a7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00103ab:	8d 48 01             	lea    ecx,[eax+0x1]
c00103ae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103b0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00103b3:	89 de                	mov    esi,ebx
c00103b5:	e8 b6 01 ff ff       	call   c0000570 <strlen>
c00103ba:	83 c4 0c             	add    esp,0xc
c00103bd:	40                   	inc    eax
c00103be:	50                   	push   eax
c00103bf:	6a 00                	push   0x0
c00103c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00103c5:	e8 26 01 ff ff       	call   c00004f0 <memset>
c00103ca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00103cd:	e8 9e 01 ff ff       	call   c0000570 <strlen>
c00103d2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00103d6:	8d 48 01             	lea    ecx,[eax+0x1]
c00103d9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103db:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00103de:	40                   	inc    eax
c00103df:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00103e2:	c1 e0 03             	shl    eax,0x3
c00103e5:	5a                   	pop    edx
c00103e6:	59                   	pop    ecx
c00103e7:	50                   	push   eax
c00103e8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00103eb:	e8 aa 76 ff ff       	call   c0007a9a <realloc>
c00103f0:	8d 74 24 18          	lea    esi,[esp+0x18]
c00103f4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00103f7:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00103fa:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00103fe:	b9 08 00 00 00       	mov    ecx,0x8
c0010403:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010405:	83 c4 2c             	add    esp,0x2c
c0010408:	5b                   	pop    ebx
c0010409:	5e                   	pop    esi
c001040a:	5f                   	pop    edi
c001040b:	5d                   	pop    ebp
c001040c:	c3                   	ret    
c001040d:	90                   	nop

c001040e <EnvVarContainer::deleteEnv(char const*)>:
c001040e:	c3                   	ret    
c001040f:	90                   	nop

c0010410 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0010410:	55                   	push   ebp
c0010411:	57                   	push   edi
c0010412:	56                   	push   esi
c0010413:	53                   	push   ebx
c0010414:	81 ec 38 01 00 00    	sub    esp,0x138
c001041a:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010421:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0010428:	68 14 01 00 00       	push   0x114
c001042d:	e8 7c 76 ff ff       	call   c0007aae <malloc>
c0010432:	83 c4 0c             	add    esp,0xc
c0010435:	89 c3                	mov    ebx,eax
c0010437:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001043a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010441:	50                   	push   eax
c0010442:	e8 33 ab ff ff       	call   c000af7a <File::File(char const*, Process*)>
c0010447:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001044a:	e8 55 ae ff ff       	call   c000b2a4 <File::exists()>
c001044f:	83 c4 10             	add    esp,0x10
c0010452:	84 c0                	test   al,al
c0010454:	75 31                	jne    c0010487 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0010456:	50                   	push   eax
c0010457:	50                   	push   eax
c0010458:	6a 12                	push   0x12
c001045a:	53                   	push   ebx
c001045b:	e8 d6 ab ff ff       	call   c000b036 <File::open(FileOpenMode)>
c0010460:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010462:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0010465:	89 34 24             	mov    DWORD PTR [esp],esi
c0010468:	e8 03 01 ff ff       	call   c0000570 <strlen>
c001046d:	5a                   	pop    edx
c001046e:	31 d2                	xor    edx,edx
c0010470:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010474:	51                   	push   ecx
c0010475:	56                   	push   esi
c0010476:	52                   	push   edx
c0010477:	50                   	push   eax
c0010478:	53                   	push   ebx
c0010479:	ff d7                	call   edi
c001047b:	83 c4 14             	add    esp,0x14
c001047e:	53                   	push   ebx
c001047f:	e8 10 ac ff ff       	call   c000b094 <File::close()>
c0010484:	83 c4 10             	add    esp,0x10
c0010487:	56                   	push   esi
c0010488:	31 f6                	xor    esi,esi
c001048a:	68 00 01 00 00       	push   0x100
c001048f:	6a 00                	push   0x0
c0010491:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010495:	50                   	push   eax
c0010496:	e8 55 00 ff ff       	call   c00004f0 <memset>
c001049b:	5f                   	pop    edi
c001049c:	58                   	pop    eax
c001049d:	6a 01                	push   0x1
c001049f:	53                   	push   ebx
c00104a0:	e8 91 ab ff ff       	call   c000b036 <File::open(FileOpenMode)>
c00104a5:	83 c4 10             	add    esp,0x10
c00104a8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00104b0:	83 ec 0c             	sub    esp,0xc
c00104b3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00104b5:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00104b9:	51                   	push   ecx
c00104ba:	8d 54 24 23          	lea    edx,[esp+0x23]
c00104be:	52                   	push   edx
c00104bf:	6a 00                	push   0x0
c00104c1:	6a 01                	push   0x1
c00104c3:	53                   	push   ebx
c00104c4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00104c7:	0f be 54 24 33       	movsx  edx,BYTE PTR [esp+0x33]
c00104cc:	83 c4 20             	add    esp,0x20
c00104cf:	89 d0                	mov    eax,edx
c00104d1:	83 fa 0d             	cmp    edx,0xd
c00104d4:	0f 84 0a 01 00 00    	je     c00105e4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d4>
c00104da:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00104df:	0f 84 f0 00 00 00    	je     c00105d5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c00104e5:	83 fa 0a             	cmp    edx,0xa
c00104e8:	74 13                	je     c00104fd <EnvVarContainer::loadFrom(char const*, char const*)+0xed>
c00104ea:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00104ef:	74 0c                	je     c00104fd <EnvVarContainer::loadFrom(char const*, char const*)+0xed>
c00104f1:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00104f7:	0f 8e d8 00 00 00    	jle    c00105d5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c00104fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010501:	83 ec 0c             	sub    esp,0xc
c0010504:	8d 78 01             	lea    edi,[eax+0x1]
c0010507:	57                   	push   edi
c0010508:	e8 a1 75 ff ff       	call   c0007aae <malloc>
c001050d:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0010511:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010515:	8d 56 04             	lea    edx,[esi+0x4]
c0010518:	89 14 24             	mov    DWORD PTR [esp],edx
c001051b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001051f:	e8 8a 75 ff ff       	call   c0007aae <malloc>
c0010524:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010528:	83 c4 0c             	add    esp,0xc
c001052b:	57                   	push   edi
c001052c:	6a 00                	push   0x0
c001052e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010532:	e8 b9 ff fe ff       	call   c00004f0 <memset>
c0010537:	8d 74 24 30          	lea    esi,[esp+0x30]
c001053b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001053f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0010543:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010545:	83 c4 0c             	add    esp,0xc
c0010548:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001054c:	52                   	push   edx
c001054d:	6a 00                	push   0x0
c001054f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010553:	e8 98 ff fe ff       	call   c00004f0 <memset>
c0010558:	8d 74 24 30          	lea    esi,[esp+0x30]
c001055c:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0010560:	89 34 24             	mov    DWORD PTR [esp],esi
c0010563:	e8 08 00 ff ff       	call   c0000570 <strlen>
c0010568:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001056c:	89 c1                	mov    ecx,eax
c001056e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010570:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010573:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0010576:	40                   	inc    eax
c0010577:	83 c4 10             	add    esp,0x10
c001057a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001057d:	85 d2                	test   edx,edx
c001057f:	75 0c                	jne    c001058d <EnvVarContainer::loadFrom(char const*, char const*)+0x17d>
c0010581:	83 ec 0c             	sub    esp,0xc
c0010584:	6a 08                	push   0x8
c0010586:	e8 23 75 ff ff       	call   c0007aae <malloc>
c001058b:	eb 0c                	jmp    c0010599 <EnvVarContainer::loadFrom(char const*, char const*)+0x189>
c001058d:	c1 e0 03             	shl    eax,0x3
c0010590:	51                   	push   ecx
c0010591:	51                   	push   ecx
c0010592:	50                   	push   eax
c0010593:	52                   	push   edx
c0010594:	e8 01 75 ff ff       	call   c0007a9a <realloc>
c0010599:	83 c4 10             	add    esp,0x10
c001059c:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001059f:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00105a2:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00105a5:	8d 74 24 18          	lea    esi,[esp+0x18]
c00105a9:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00105ad:	b9 08 00 00 00       	mov    ecx,0x8
c00105b2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00105b4:	31 f6                	xor    esi,esi
c00105b6:	50                   	push   eax
c00105b7:	68 00 01 00 00       	push   0x100
c00105bc:	6a 00                	push   0x0
c00105be:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00105c2:	50                   	push   eax
c00105c3:	e8 28 ff fe ff       	call   c00004f0 <memset>
c00105c8:	83 c4 10             	add    esp,0x10
c00105cb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00105d3:	eb 0f                	jmp    c00105e4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d4>
c00105d5:	3c 3d                	cmp    al,0x3d
c00105d7:	74 07                	je     c00105e0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c00105d9:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c00105dd:	46                   	inc    esi
c00105de:	eb 04                	jmp    c00105e4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d4>
c00105e0:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00105e4:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00105e9:	0f 85 c1 fe ff ff    	jne    c00104b0 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c00105ef:	81 c4 2c 01 00 00    	add    esp,0x12c
c00105f5:	5b                   	pop    ebx
c00105f6:	5e                   	pop    esi
c00105f7:	5f                   	pop    edi
c00105f8:	5d                   	pop    ebp
c00105f9:	c3                   	ret    

c00105fa <EnvVarContainer::__loadSystem()>:
c00105fa:	83 ec 10             	sub    esp,0x10
c00105fd:	68 60 21 02 c0       	push   0xc0022160
c0010602:	68 a0 0c 02 c0       	push   0xc0020ca0
c0010607:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001060b:	e8 00 fe ff ff       	call   c0010410 <EnvVarContainer::loadFrom(char const*, char const*)>
c0010610:	83 c4 1c             	add    esp,0x1c
c0010613:	c3                   	ret    

c0010614 <EnvVarContainer::__loadUser()>:
c0010614:	c3                   	ret    
c0010615:	90                   	nop

c0010616 <EnvVarContainer::EnvVarContainer(Process*)>:
c0010616:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001061a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010620:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010624:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010628:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001062b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001062f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010636:	90                   	nop
c0010637:	c3                   	ret    

c0010638 <EnvVarContainer::~EnvVarContainer()>:
c0010638:	83 ec 0c             	sub    esp,0xc
c001063b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001063f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010642:	85 c0                	test   eax,eax
c0010644:	74 1d                	je     c0010663 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010646:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001064a:	8b 00                	mov    eax,DWORD PTR [eax]
c001064c:	85 c0                	test   eax,eax
c001064e:	74 13                	je     c0010663 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010650:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010654:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010657:	83 ec 0c             	sub    esp,0xc
c001065a:	50                   	push   eax
c001065b:	e8 5e 74 ff ff       	call   c0007abe <free>
c0010660:	83 c4 10             	add    esp,0x10
c0010663:	90                   	nop
c0010664:	83 c4 0c             	add    esp,0xc
c0010667:	c3                   	ret    

c0010668 <Krnl::getEnv(Process*, char const*)>:
c0010668:	53                   	push   ebx
c0010669:	83 ec 08             	sub    esp,0x8
c001066c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010670:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010674:	39 05 90 81 02 c0    	cmp    DWORD PTR ds:0xc0028190,eax
c001067a:	74 04                	je     c0010680 <Krnl::getEnv(Process*, char const*)+0x18>
c001067c:	85 c0                	test   eax,eax
c001067e:	75 0b                	jne    c001068b <Krnl::getEnv(Process*, char const*)+0x23>
c0010680:	a1 30 79 02 c0       	mov    eax,ds:0xc0027930
c0010685:	85 c0                	test   eax,eax
c0010687:	75 19                	jne    c00106a2 <Krnl::getEnv(Process*, char const*)+0x3a>
c0010689:	eb 27                	jmp    c00106b2 <Krnl::getEnv(Process*, char const*)+0x4a>
c001068b:	52                   	push   edx
c001068c:	52                   	push   edx
c001068d:	53                   	push   ebx
c001068e:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0010694:	e8 75 fc ff ff       	call   c001030e <EnvVarContainer::getEnv(char const*)>
c0010699:	83 c4 10             	add    esp,0x10
c001069c:	85 c0                	test   eax,eax
c001069e:	75 28                	jne    c00106c8 <Krnl::getEnv(Process*, char const*)+0x60>
c00106a0:	eb de                	jmp    c0010680 <Krnl::getEnv(Process*, char const*)+0x18>
c00106a2:	52                   	push   edx
c00106a3:	52                   	push   edx
c00106a4:	53                   	push   ebx
c00106a5:	50                   	push   eax
c00106a6:	e8 63 fc ff ff       	call   c001030e <EnvVarContainer::getEnv(char const*)>
c00106ab:	83 c4 10             	add    esp,0x10
c00106ae:	85 c0                	test   eax,eax
c00106b0:	75 16                	jne    c00106c8 <Krnl::getEnv(Process*, char const*)+0x60>
c00106b2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00106b6:	a1 34 79 02 c0       	mov    eax,ds:0xc0027934
c00106bb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00106bf:	83 c4 08             	add    esp,0x8
c00106c2:	5b                   	pop    ebx
c00106c3:	e9 46 fc ff ff       	jmp    c001030e <EnvVarContainer::getEnv(char const*)>
c00106c8:	83 c4 08             	add    esp,0x8
c00106cb:	5b                   	pop    ebx
c00106cc:	c3                   	ret    

c00106cd <Krnl::setEnvSystem(char const*, char const*)>:
c00106cd:	83 ec 10             	sub    esp,0x10
c00106d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00106d4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00106d8:	ff 35 34 79 02 c0    	push   DWORD PTR ds:0xc0027934
c00106de:	e8 69 fc ff ff       	call   c001034c <EnvVarContainer::setEnv(char const*, char const*)>
c00106e3:	83 c4 1c             	add    esp,0x1c
c00106e6:	c3                   	ret    

c00106e7 <Krnl::setEnvUser(char const*, char const*)>:
c00106e7:	a1 30 79 02 c0       	mov    eax,ds:0xc0027930
c00106ec:	85 c0                	test   eax,eax
c00106ee:	74 15                	je     c0010705 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c00106f0:	83 ec 10             	sub    esp,0x10
c00106f3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00106f7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00106fb:	50                   	push   eax
c00106fc:	e8 4b fc ff ff       	call   c001034c <EnvVarContainer::setEnv(char const*, char const*)>
c0010701:	83 c4 1c             	add    esp,0x1c
c0010704:	c3                   	ret    
c0010705:	c3                   	ret    

c0010706 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0010706:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001070a:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0010710:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010714:	e9 33 fc ff ff       	jmp    c001034c <EnvVarContainer::setEnv(char const*, char const*)>

c0010719 <Krnl::deleteEnvSystem(char const*)>:
c0010719:	c3                   	ret    

c001071a <Krnl::deleteEnvUser(char const*)>:
c001071a:	c3                   	ret    

c001071b <Krnl::deleteEnvProcess(Process*, char const*)>:
c001071b:	c3                   	ret    

c001071c <Krnl::newProcessEnv(Process*)>:
c001071c:	83 ec 28             	sub    esp,0x28
c001071f:	6a 0c                	push   0xc
c0010721:	e8 88 73 ff ff       	call   c0007aae <malloc>
c0010726:	5a                   	pop    edx
c0010727:	59                   	pop    ecx
c0010728:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001072c:	50                   	push   eax
c001072d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010731:	e8 e0 fe ff ff       	call   c0010616 <EnvVarContainer::EnvVarContainer(Process*)>
c0010736:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001073a:	83 c4 2c             	add    esp,0x2c
c001073d:	c3                   	ret    

c001073e <Krnl::copyProcessEnv(Process*, Process*)>:
c001073e:	57                   	push   edi
c001073f:	56                   	push   esi
c0010740:	53                   	push   ebx
c0010741:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010745:	83 ec 0c             	sub    esp,0xc
c0010748:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c001074e:	6a 0c                	push   0xc
c0010750:	e8 59 73 ff ff       	call   c0007aae <malloc>
c0010755:	89 c3                	mov    ebx,eax
c0010757:	58                   	pop    eax
c0010758:	5a                   	pop    edx
c0010759:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001075d:	53                   	push   ebx
c001075e:	e8 b3 fe ff ff       	call   c0010616 <EnvVarContainer::EnvVarContainer(Process*)>
c0010763:	8b 07                	mov    eax,DWORD PTR [edi]
c0010765:	89 03                	mov    DWORD PTR [ebx],eax
c0010767:	c1 e0 03             	shl    eax,0x3
c001076a:	89 04 24             	mov    DWORD PTR [esp],eax
c001076d:	e8 3c 73 ff ff       	call   c0007aae <malloc>
c0010772:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010775:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0010777:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001077a:	c1 e1 03             	shl    ecx,0x3
c001077d:	89 c7                	mov    edi,eax
c001077f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010781:	83 c4 10             	add    esp,0x10
c0010784:	89 d8                	mov    eax,ebx
c0010786:	5b                   	pop    ebx
c0010787:	5e                   	pop    esi
c0010788:	5f                   	pop    edi
c0010789:	c3                   	ret    

c001078a <Krnl::loadSystemEnv()>:
c001078a:	53                   	push   ebx
c001078b:	83 ec 14             	sub    esp,0x14
c001078e:	6a 0c                	push   0xc
c0010790:	e8 19 73 ff ff       	call   c0007aae <malloc>
c0010795:	89 c3                	mov    ebx,eax
c0010797:	58                   	pop    eax
c0010798:	5a                   	pop    edx
c0010799:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c001079f:	53                   	push   ebx
c00107a0:	e8 71 fe ff ff       	call   c0010616 <EnvVarContainer::EnvVarContainer(Process*)>
c00107a5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00107a8:	89 1d 34 79 02 c0    	mov    DWORD PTR ds:0xc0027934,ebx
c00107ae:	e8 47 fe ff ff       	call   c00105fa <EnvVarContainer::__loadSystem()>
c00107b3:	83 c4 18             	add    esp,0x18
c00107b6:	5b                   	pop    ebx
c00107b7:	c3                   	ret    

c00107b8 <Krnl::loadUserEnv()>:
c00107b8:	53                   	push   ebx
c00107b9:	83 ec 14             	sub    esp,0x14
c00107bc:	6a 0c                	push   0xc
c00107be:	e8 eb 72 ff ff       	call   c0007aae <malloc>
c00107c3:	89 c3                	mov    ebx,eax
c00107c5:	58                   	pop    eax
c00107c6:	5a                   	pop    edx
c00107c7:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c00107cd:	53                   	push   ebx
c00107ce:	e8 43 fe ff ff       	call   c0010616 <EnvVarContainer::EnvVarContainer(Process*)>
c00107d3:	89 1d 30 79 02 c0    	mov    DWORD PTR ds:0xc0027930,ebx
c00107d9:	83 c4 18             	add    esp,0x18
c00107dc:	5b                   	pop    ebx
c00107dd:	c3                   	ret    

c00107de <Krnl::flushEnv()>:
c00107de:	c3                   	ret    

c00107df <Krnl::getProcessTotalEnvCount(Process*)>:
c00107df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107e3:	8b 15 30 79 02 c0    	mov    edx,DWORD PTR ds:0xc0027930
c00107e9:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00107ef:	a1 34 79 02 c0       	mov    eax,ds:0xc0027934
c00107f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00107f6:	03 01                	add    eax,DWORD PTR [ecx]
c00107f8:	85 d2                	test   edx,edx
c00107fa:	74 02                	je     c00107fe <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c00107fc:	03 02                	add    eax,DWORD PTR [edx]
c00107fe:	c3                   	ret    

c00107ff <Krnl::getProcessEnvPair(Process*, int)>:
c00107ff:	57                   	push   edi
c0010800:	56                   	push   esi
c0010801:	8b 35 30 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027930
c0010807:	53                   	push   ebx
c0010808:	85 f6                	test   esi,esi
c001080a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001080e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010812:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010818:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001081c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001081e:	75 16                	jne    c0010836 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0010820:	39 c2                	cmp    edx,eax
c0010822:	7c 16                	jl     c001083a <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010824:	8b 0d 34 79 02 c0    	mov    ecx,DWORD PTR ds:0xc0027934
c001082a:	8b 31                	mov    esi,DWORD PTR [ecx]
c001082c:	01 c6                	add    esi,eax
c001082e:	39 d6                	cmp    esi,edx
c0010830:	7e 3c                	jle    c001086e <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010832:	29 c2                	sub    edx,eax
c0010834:	eb 04                	jmp    c001083a <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010836:	39 c2                	cmp    edx,eax
c0010838:	7d 05                	jge    c001083f <Krnl::getProcessEnvPair(Process*, int)+0x40>
c001083a:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001083d:	eb 20                	jmp    c001085f <Krnl::getProcessEnvPair(Process*, int)+0x60>
c001083f:	8b 3e                	mov    edi,DWORD PTR [esi]
c0010841:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0010844:	39 d1                	cmp    ecx,edx
c0010846:	7e 04                	jle    c001084c <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0010848:	29 c2                	sub    edx,eax
c001084a:	eb 10                	jmp    c001085c <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c001084c:	8b 35 34 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027934
c0010852:	03 0e                	add    ecx,DWORD PTR [esi]
c0010854:	39 d1                	cmp    ecx,edx
c0010856:	7e 16                	jle    c001086e <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010858:	29 c2                	sub    edx,eax
c001085a:	29 fa                	sub    edx,edi
c001085c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001085f:	8d 14 d0             	lea    edx,[eax+edx*8]
c0010862:	8b 02                	mov    eax,DWORD PTR [edx]
c0010864:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0010867:	89 03                	mov    DWORD PTR [ebx],eax
c0010869:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001086c:	eb 1d                	jmp    c001088b <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c001086e:	83 ec 0c             	sub    esp,0xc
c0010871:	68 c2 0c 02 c0       	push   0xc0020cc2
c0010876:	e8 ac 00 00 00       	call   c0010927 <KePanic(char const*)>
c001087b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010881:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010888:	83 c4 10             	add    esp,0x10
c001088b:	89 d8                	mov    eax,ebx
c001088d:	5b                   	pop    ebx
c001088e:	5e                   	pop    esi
c001088f:	5f                   	pop    edi
c0010890:	c2 04 00             	ret    0x4

c0010893 <CPU::current()>:
c0010893:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0010898:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001089e:	c3                   	ret    

c001089f <operator new(unsigned long)>:
c001089f:	e9 0a 72 ff ff       	jmp    c0007aae <malloc>

c00108a4 <operator delete(void*)>:
c00108a4:	e9 25 72 ff ff       	jmp    c0007ace <rfree>

c00108a9 <disableIRQs()>:
c00108a9:	fa                   	cli    
c00108aa:	c3                   	ret    

c00108ab <enableIRQs()>:
c00108ab:	fb                   	sti    
c00108ac:	c3                   	ret    

c00108ad <lockScheduler()>:
c00108ad:	fa                   	cli    
c00108ae:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00108b4:	c3                   	ret    

c00108b5 <unlockScheduler()>:
c00108b5:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00108ba:	48                   	dec    eax
c00108bb:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00108c0:	75 01                	jne    c00108c3 <unlockScheduler()+0xe>
c00108c2:	fb                   	sti    
c00108c3:	c3                   	ret    

c00108c4 <lockStuff()>:
c00108c4:	fa                   	cli    
c00108c5:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00108cb:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c00108d1:	c3                   	ret    

c00108d2 <unlockStuff()>:
c00108d2:	83 ec 0c             	sub    esp,0xc
c00108d5:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00108da:	48                   	dec    eax
c00108db:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00108e0:	75 18                	jne    c00108fa <unlockStuff()+0x28>
c00108e2:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c00108e9:	74 0f                	je     c00108fa <unlockStuff()+0x28>
c00108eb:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c00108f5:	e8 e2 47 00 00       	call   c00150dc <schedule()>
c00108fa:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00108ff:	48                   	dec    eax
c0010900:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0010905:	75 01                	jne    c0010908 <unlockStuff()+0x36>
c0010907:	fb                   	sti    
c0010908:	83 c4 0c             	add    esp,0xc
c001090b:	c3                   	ret    

c001090c <Virt::getAKernelVAS()>:
c001090c:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c0010911:	c3                   	ret    

c0010912 <__not_memcpy>:
c0010912:	57                   	push   edi
c0010913:	56                   	push   esi
c0010914:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010918:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001091c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010920:	89 c7                	mov    edi,eax
c0010922:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010924:	5e                   	pop    esi
c0010925:	5f                   	pop    edi
c0010926:	c3                   	ret    

c0010927 <KePanic(char const*)>:
c0010927:	c6 05 38 79 02 c0 01 	mov    BYTE PTR ds:0xc0027938,0x1
c001092e:	e9 e7 66 00 00       	jmp    c001701a <HalPanic(char const*)>

c0010933 <Krnl::powerThread(void*)>:
c0010933:	83 ec 0c             	sub    esp,0xc
c0010936:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001093b:	48                   	dec    eax
c001093c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0010941:	75 01                	jne    c0010944 <Krnl::powerThread(void*)+0x11>
c0010943:	fb                   	sti    
c0010944:	83 ec 0c             	sub    esp,0xc
c0010947:	c6 05 40 79 02 c0 00 	mov    BYTE PTR ds:0xc0027940,0x0
c001094e:	6a 0a                	push   0xa
c0010950:	e8 cb 4a 00 00       	call   c0015420 <sleep(unsigned int)>
c0010955:	83 05 84 79 02 c0 0a 	add    DWORD PTR ds:0xc0027984,0xa
c001095c:	83 c4 10             	add    esp,0x10
c001095f:	eb e3                	jmp    c0010944 <Krnl::powerThread(void*)+0x11>

c0010961 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0010961:	57                   	push   edi
c0010962:	b9 09 00 00 00       	mov    ecx,0x9
c0010967:	56                   	push   esi
c0010968:	bf 60 79 02 c0       	mov    edi,0xc0027960
c001096d:	fc                   	cld    
c001096e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010972:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010974:	5e                   	pop    esi
c0010975:	5f                   	pop    edi
c0010976:	c3                   	ret    

c0010977 <Krnl::userIOReceived()>:
c0010977:	c7 05 84 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027984,0x0
c0010981:	c3                   	ret    

c0010982 <Krnl::handlePowerButton()>:
c0010982:	83 ec 0c             	sub    esp,0xc
c0010985:	a1 60 79 02 c0       	mov    eax,ds:0xc0027960
c001098a:	83 f8 02             	cmp    eax,0x2
c001098d:	75 10                	jne    c001099f <Krnl::handlePowerButton()+0x1d>
c001098f:	83 ec 0c             	sub    esp,0xc
c0010992:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0010998:	e8 83 67 ff ff       	call   c0007120 <Computer::shutdown()>
c001099d:	eb 11                	jmp    c00109b0 <Krnl::handlePowerButton()+0x2e>
c001099f:	48                   	dec    eax
c00109a0:	75 11                	jne    c00109b3 <Krnl::handlePowerButton()+0x31>
c00109a2:	83 ec 0c             	sub    esp,0xc
c00109a5:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00109ab:	e8 a0 67 ff ff       	call   c0007150 <Computer::sleep()>
c00109b0:	83 c4 10             	add    esp,0x10
c00109b3:	83 c4 0c             	add    esp,0xc
c00109b6:	c3                   	ret    

c00109b7 <Krnl::handleSleepButton()>:
c00109b7:	83 ec 0c             	sub    esp,0xc
c00109ba:	a1 64 79 02 c0       	mov    eax,ds:0xc0027964
c00109bf:	83 f8 02             	cmp    eax,0x2
c00109c2:	75 10                	jne    c00109d4 <Krnl::handleSleepButton()+0x1d>
c00109c4:	83 ec 0c             	sub    esp,0xc
c00109c7:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00109cd:	e8 4e 67 ff ff       	call   c0007120 <Computer::shutdown()>
c00109d2:	eb 11                	jmp    c00109e5 <Krnl::handleSleepButton()+0x2e>
c00109d4:	48                   	dec    eax
c00109d5:	75 11                	jne    c00109e8 <Krnl::handleSleepButton()+0x31>
c00109d7:	83 ec 0c             	sub    esp,0xc
c00109da:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00109e0:	e8 6b 67 ff ff       	call   c0007150 <Computer::sleep()>
c00109e5:	83 c4 10             	add    esp,0x10
c00109e8:	83 c4 0c             	add    esp,0xc
c00109eb:	c3                   	ret    

c00109ec <Krnl::setupPowerManager()>:
c00109ec:	83 ec 0c             	sub    esp,0xc
c00109ef:	c7 05 84 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027984,0x0
c00109f9:	68 f0 00 00 00       	push   0xf0
c00109fe:	c6 05 40 79 02 c0 00 	mov    BYTE PTR ds:0xc0027940,0x0
c0010a05:	6a 00                	push   0x0
c0010a07:	68 33 09 01 c0       	push   0xc0010933
c0010a0c:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0010a12:	e8 75 44 00 00       	call   c0014e8c <Process::createThread(void (*)(void*), void*, int)>
c0010a17:	c7 05 60 79 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0027960,0x2
c0010a21:	c7 05 64 79 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027964,0x1
c0010a2b:	c7 05 68 79 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0027968,0x3
c0010a35:	c7 05 6c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002796c,0x0
c0010a3f:	c7 05 78 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027978,0x0
c0010a49:	c7 05 70 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027970,0x0
c0010a53:	c7 05 7c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002797c,0x0
c0010a5d:	c7 05 74 79 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0027974,0x3c
c0010a67:	c7 05 80 79 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0027980,0x3c
c0010a71:	83 c4 1c             	add    esp,0x1c
c0010a74:	c3                   	ret    

c0010a75 <KeRand()>:
c0010a75:	69 05 88 79 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0027988,0x2875
c0010a7f:	69 0d 8c 79 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002798c,0xa2e7b175
c0010a89:	53                   	push   ebx
c0010a8a:	01 c1                	add    ecx,eax
c0010a8c:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0010a91:	f7 25 88 79 02 c0    	mul    DWORD PTR ds:0xc0027988
c0010a97:	01 ca                	add    edx,ecx
c0010a99:	05 ef 04 b5 00       	add    eax,0xb504ef
c0010a9e:	83 d2 00             	adc    edx,0x0
c0010aa1:	a3 88 79 02 c0       	mov    ds:0xc0027988,eax
c0010aa6:	0f b7 da             	movzx  ebx,dx
c0010aa9:	89 da                	mov    edx,ebx
c0010aab:	89 1d 8c 79 02 c0    	mov    DWORD PTR ds:0xc002798c,ebx
c0010ab1:	0f ac d0 0e          	shrd   eax,edx,0xe
c0010ab5:	5b                   	pop    ebx
c0010ab6:	c3                   	ret    

c0010ab7 <KeSeedRand(unsigned int)>:
c0010ab7:	53                   	push   ebx
c0010ab8:	83 ec 08             	sub    esp,0x8
c0010abb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010abf:	e8 6d 68 00 00       	call   c0017331 <HalGetRand()>
c0010ac4:	c7 05 8c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002798c,0x0
c0010ace:	31 d8                	xor    eax,ebx
c0010ad0:	a3 88 79 02 c0       	mov    ds:0xc0027988,eax
c0010ad5:	e8 9b ff ff ff       	call   c0010a75 <KeRand()>
c0010ada:	83 c4 08             	add    esp,0x8
c0010add:	5b                   	pop    ebx
c0010ade:	eb 95                	jmp    c0010a75 <KeRand()>

c0010ae0 <KeInitRand()>:
c0010ae0:	83 ec 0c             	sub    esp,0xc
c0010ae3:	e8 3e 66 00 00       	call   c0017126 <HalQueryPerformanceCounter()>
c0010ae8:	0f 20 da             	mov    edx,cr3
c0010aeb:	0f 22 da             	mov    cr3,edx
c0010aee:	0f 20 da             	mov    edx,cr3
c0010af1:	0f 22 da             	mov    cr3,edx
c0010af4:	0f 20 da             	mov    edx,cr3
c0010af7:	0f 22 da             	mov    cr3,edx
c0010afa:	0f 20 da             	mov    edx,cr3
c0010afd:	0f 22 da             	mov    cr3,edx
c0010b00:	83 ec 0c             	sub    esp,0xc
c0010b03:	35 03 8a 95 38       	xor    eax,0x38958a03
c0010b08:	50                   	push   eax
c0010b09:	e8 a9 ff ff ff       	call   c0010ab7 <KeSeedRand(unsigned int)>
c0010b0e:	83 c4 1c             	add    esp,0x1c
c0010b11:	c3                   	ret    
c0010b12:	66 90                	xchg   ax,ax

c0010b14 <KeResolveCompatibilitySymbol(char*)>:
c0010b14:	83 ec 0c             	sub    esp,0xc
c0010b17:	83 ec 08             	sub    esp,0x8
c0010b1a:	68 dc 0c 02 c0       	push   0xc0020cdc
c0010b1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b23:	e8 28 fc fe ff       	call   c0000750 <strcmp>
c0010b28:	83 c4 10             	add    esp,0x10
c0010b2b:	85 c0                	test   eax,eax
c0010b2d:	0f 94 c0             	sete   al
c0010b30:	0f b6 c0             	movzx  eax,al
c0010b33:	85 c0                	test   eax,eax
c0010b35:	74 0d                	je     c0010b44 <KeResolveCompatibilitySymbol(char*)+0x30>
c0010b37:	b8 b8 4e 02 c0       	mov    eax,0xc0024eb8
c0010b3c:	e9 8b 01 00 00       	jmp    c0010ccc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b41:	8d 76 00             	lea    esi,[esi+0x0]
c0010b44:	83 ec 08             	sub    esp,0x8
c0010b47:	68 e5 0c 02 c0       	push   0xc0020ce5
c0010b4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b50:	e8 fb fb fe ff       	call   c0000750 <strcmp>
c0010b55:	83 c4 10             	add    esp,0x10
c0010b58:	85 c0                	test   eax,eax
c0010b5a:	0f 94 c0             	sete   al
c0010b5d:	0f b6 c0             	movzx  eax,al
c0010b60:	85 c0                	test   eax,eax
c0010b62:	74 0c                	je     c0010b70 <KeResolveCompatibilitySymbol(char*)+0x5c>
c0010b64:	b8 70 e6 01 c0       	mov    eax,0xc001e670
c0010b69:	e9 5e 01 00 00       	jmp    c0010ccc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b6e:	66 90                	xchg   ax,ax
c0010b70:	83 ec 08             	sub    esp,0x8
c0010b73:	68 ef 0c 02 c0       	push   0xc0020cef
c0010b78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b7c:	e8 cf fb fe ff       	call   c0000750 <strcmp>
c0010b81:	83 c4 10             	add    esp,0x10
c0010b84:	85 c0                	test   eax,eax
c0010b86:	0f 94 c0             	sete   al
c0010b89:	0f b6 c0             	movzx  eax,al
c0010b8c:	85 c0                	test   eax,eax
c0010b8e:	74 0c                	je     c0010b9c <KeResolveCompatibilitySymbol(char*)+0x88>
c0010b90:	b8 a4 e3 01 c0       	mov    eax,0xc001e3a4
c0010b95:	e9 32 01 00 00       	jmp    c0010ccc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b9a:	66 90                	xchg   ax,ax
c0010b9c:	83 ec 08             	sub    esp,0x8
c0010b9f:	68 f8 0c 02 c0       	push   0xc0020cf8
c0010ba4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ba8:	e8 a3 fb fe ff       	call   c0000750 <strcmp>
c0010bad:	83 c4 10             	add    esp,0x10
c0010bb0:	85 c0                	test   eax,eax
c0010bb2:	0f 94 c0             	sete   al
c0010bb5:	0f b6 c0             	movzx  eax,al
c0010bb8:	85 c0                	test   eax,eax
c0010bba:	74 0c                	je     c0010bc8 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0010bbc:	b8 27 09 01 c0       	mov    eax,0xc0010927
c0010bc1:	e9 06 01 00 00       	jmp    c0010ccc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010bc6:	66 90                	xchg   ax,ax
c0010bc8:	83 ec 08             	sub    esp,0x8
c0010bcb:	68 0b 0d 02 c0       	push   0xc0020d0b
c0010bd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bd4:	e8 77 fb fe ff       	call   c0000750 <strcmp>
c0010bd9:	83 c4 10             	add    esp,0x10
c0010bdc:	85 c0                	test   eax,eax
c0010bde:	0f 94 c0             	sete   al
c0010be1:	0f b6 c0             	movzx  eax,al
c0010be4:	85 c0                	test   eax,eax
c0010be6:	74 0c                	je     c0010bf4 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0010be8:	b8 aa 02 01 c0       	mov    eax,0xc00102aa
c0010bed:	e9 da 00 00 00       	jmp    c0010ccc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010bf2:	66 90                	xchg   ax,ax
c0010bf4:	83 ec 08             	sub    esp,0x8
c0010bf7:	68 28 0d 02 c0       	push   0xc0020d28
c0010bfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c00:	e8 4b fb fe ff       	call   c0000750 <strcmp>
c0010c05:	83 c4 10             	add    esp,0x10
c0010c08:	85 c0                	test   eax,eax
c0010c0a:	0f 94 c0             	sete   al
c0010c0d:	0f b6 c0             	movzx  eax,al
c0010c10:	85 c0                	test   eax,eax
c0010c12:	74 0c                	je     c0010c20 <KeResolveCompatibilitySymbol(char*)+0x10c>
c0010c14:	b8 70 e7 01 c0       	mov    eax,0xc001e770
c0010c19:	e9 ae 00 00 00       	jmp    c0010ccc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010c1e:	66 90                	xchg   ax,ax
c0010c20:	83 ec 08             	sub    esp,0x8
c0010c23:	68 32 0d 02 c0       	push   0xc0020d32
c0010c28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c2c:	e8 1f fb fe ff       	call   c0000750 <strcmp>
c0010c31:	83 c4 10             	add    esp,0x10
c0010c34:	85 c0                	test   eax,eax
c0010c36:	0f 94 c0             	sete   al
c0010c39:	0f b6 c0             	movzx  eax,al
c0010c3c:	85 c0                	test   eax,eax
c0010c3e:	74 0c                	je     c0010c4c <KeResolveCompatibilitySymbol(char*)+0x138>
c0010c40:	b8 f0 e4 01 c0       	mov    eax,0xc001e4f0
c0010c45:	e9 82 00 00 00       	jmp    c0010ccc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010c4a:	66 90                	xchg   ax,ax
c0010c4c:	83 ec 08             	sub    esp,0x8
c0010c4f:	68 3b 0d 02 c0       	push   0xc0020d3b
c0010c54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c58:	e8 f3 fa fe ff       	call   c0000750 <strcmp>
c0010c5d:	83 c4 10             	add    esp,0x10
c0010c60:	85 c0                	test   eax,eax
c0010c62:	0f 94 c0             	sete   al
c0010c65:	0f b6 c0             	movzx  eax,al
c0010c68:	85 c0                	test   eax,eax
c0010c6a:	74 08                	je     c0010c74 <KeResolveCompatibilitySymbol(char*)+0x160>
c0010c6c:	b8 bc 4e 02 c0       	mov    eax,0xc0024ebc
c0010c71:	eb 59                	jmp    c0010ccc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010c73:	90                   	nop
c0010c74:	83 ec 08             	sub    esp,0x8
c0010c77:	68 53 0d 02 c0       	push   0xc0020d53
c0010c7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c80:	e8 cb fa fe ff       	call   c0000750 <strcmp>
c0010c85:	83 c4 10             	add    esp,0x10
c0010c88:	85 c0                	test   eax,eax
c0010c8a:	0f 94 c0             	sete   al
c0010c8d:	0f b6 c0             	movzx  eax,al
c0010c90:	85 c0                	test   eax,eax
c0010c92:	74 08                	je     c0010c9c <KeResolveCompatibilitySymbol(char*)+0x188>
c0010c94:	b8 bc 4e 02 c0       	mov    eax,0xc0024ebc
c0010c99:	eb 31                	jmp    c0010ccc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010c9b:	90                   	nop
c0010c9c:	83 ec 08             	sub    esp,0x8
c0010c9f:	68 60 0d 02 c0       	push   0xc0020d60
c0010ca4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ca8:	e8 a3 fa fe ff       	call   c0000750 <strcmp>
c0010cad:	83 c4 10             	add    esp,0x10
c0010cb0:	85 c0                	test   eax,eax
c0010cb2:	0f 94 c0             	sete   al
c0010cb5:	0f b6 c0             	movzx  eax,al
c0010cb8:	85 c0                	test   eax,eax
c0010cba:	74 08                	je     c0010cc4 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0010cbc:	b8 bd 4e 02 c0       	mov    eax,0xc0024ebd
c0010cc1:	eb 09                	jmp    c0010ccc <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010cc3:	90                   	nop
c0010cc4:	b8 00 00 00 00       	mov    eax,0x0
c0010cc9:	8d 76 00             	lea    esi,[esi+0x0]
c0010ccc:	83 c4 0c             	add    esp,0xc
c0010ccf:	c3                   	ret    

c0010cd0 <KiSigKill(int)>:
c0010cd0:	83 ec 0c             	sub    esp,0xc
c0010cd3:	6a 00                	push   0x0
c0010cd5:	6a 00                	push   0x0
c0010cd7:	6a ff                	push   0xffffffff
c0010cd9:	6a 01                	push   0x1
c0010cdb:	e8 72 23 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010ce0:	83 c4 1c             	add    esp,0x1c
c0010ce3:	c3                   	ret    

c0010ce4 <KiDefaultSignalHandlerIgnore(int)>:
c0010ce4:	c3                   	ret    

c0010ce5 <KiDefaultSignalHandlerPause(int)>:
c0010ce5:	57                   	push   edi
c0010ce6:	b9 07 00 00 00       	mov    ecx,0x7
c0010ceb:	56                   	push   esi
c0010cec:	be a9 0d 02 c0       	mov    esi,0xc0020da9
c0010cf1:	83 ec 24             	sub    esp,0x24
c0010cf4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010cf8:	fc                   	cld    
c0010cf9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010cfb:	8d 44 24 04          	lea    eax,[esp+0x4]
c0010cff:	50                   	push   eax
c0010d00:	6a 00                	push   0x0
c0010d02:	6a 00                	push   0x0
c0010d04:	6a 27                	push   0x27
c0010d06:	e8 47 23 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010d0b:	83 c4 34             	add    esp,0x34
c0010d0e:	5e                   	pop    esi
c0010d0f:	5f                   	pop    edi
c0010d10:	c3                   	ret    

c0010d11 <KiDefaultSignalHandlerResume(int)>:
c0010d11:	57                   	push   edi
c0010d12:	b9 1d 00 00 00       	mov    ecx,0x1d
c0010d17:	56                   	push   esi
c0010d18:	be c5 0d 02 c0       	mov    esi,0xc0020dc5
c0010d1d:	83 ec 24             	sub    esp,0x24
c0010d20:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0010d24:	fc                   	cld    
c0010d25:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010d27:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010d2b:	50                   	push   eax
c0010d2c:	6a 00                	push   0x0
c0010d2e:	6a 00                	push   0x0
c0010d30:	6a 27                	push   0x27
c0010d32:	e8 1b 23 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010d37:	83 c4 34             	add    esp,0x34
c0010d3a:	5e                   	pop    esi
c0010d3b:	5f                   	pop    edi
c0010d3c:	c3                   	ret    

c0010d3d <KeDeinitSignals(SigHandlerBlock*)>:
c0010d3d:	e9 7c 6d ff ff       	jmp    c0007abe <free>

c0010d42 <KeInitSignals()>:
c0010d42:	53                   	push   ebx
c0010d43:	83 ec 14             	sub    esp,0x14
c0010d46:	68 c8 00 00 00       	push   0xc8
c0010d4b:	e8 5e 6d ff ff       	call   c0007aae <malloc>
c0010d50:	83 c4 0c             	add    esp,0xc
c0010d53:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0010d5d:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0010d67:	89 c3                	mov    ebx,eax
c0010d69:	6a 20                	push   0x20
c0010d6b:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0010d71:	6a 00                	push   0x0
c0010d73:	50                   	push   eax
c0010d74:	e8 77 f7 fe ff       	call   c00004f0 <memset>
c0010d79:	83 c4 0c             	add    esp,0xc
c0010d7c:	6a 44                	push   0x44
c0010d7e:	6a 00                	push   0x0
c0010d80:	53                   	push   ebx
c0010d81:	e8 6a f7 fe ff       	call   c00004f0 <memset>
c0010d86:	89 d8                	mov    eax,ebx
c0010d88:	83 c4 18             	add    esp,0x18
c0010d8b:	5b                   	pop    ebx
c0010d8c:	c3                   	ret    

c0010d8d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010d8d:	53                   	push   ebx
c0010d8e:	b8 01 00 00 00       	mov    eax,0x1
c0010d93:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010d97:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010d9b:	83 f9 10             	cmp    ecx,0x10
c0010d9e:	7f 21                	jg     c0010dc1 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0010da0:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0010da3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010da7:	89 03                	mov    DWORD PTR [ebx],eax
c0010da9:	b8 01 00 00 00       	mov    eax,0x1
c0010dae:	d3 e0                	shl    eax,cl
c0010db0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010db4:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0010db7:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0010dbf:	31 c0                	xor    eax,eax
c0010dc1:	5b                   	pop    ebx
c0010dc2:	c3                   	ret    

c0010dc3 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0010dc3:	55                   	push   ebp
c0010dc4:	57                   	push   edi
c0010dc5:	bf 08 00 00 00       	mov    edi,0x8
c0010dca:	56                   	push   esi
c0010dcb:	53                   	push   ebx
c0010dcc:	83 ec 18             	sub    esp,0x18
c0010dcf:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010dd3:	68 e2 0d 02 c0       	push   0xc0020de2
c0010dd8:	e8 1a 9c ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c0010ddd:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010de4:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0010dea:	83 c4 10             	add    esp,0x10
c0010ded:	31 c9                	xor    ecx,ecx
c0010def:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0010df3:	99                   	cdq    
c0010df4:	f7 ff                	idiv   edi
c0010df6:	8d 42 24             	lea    eax,[edx+0x24]
c0010df9:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0010dfd:	85 f6                	test   esi,esi
c0010dff:	75 1a                	jne    c0010e1b <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0010e01:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0010e05:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0010e09:	50                   	push   eax
c0010e0a:	50                   	push   eax
c0010e0b:	52                   	push   edx
c0010e0c:	68 f3 0d 02 c0       	push   0xc0020df3
c0010e11:	e8 e1 9b ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c0010e16:	83 c4 10             	add    esp,0x10
c0010e19:	eb 1b                	jmp    c0010e36 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0010e1b:	41                   	inc    ecx
c0010e1c:	83 f9 08             	cmp    ecx,0x8
c0010e1f:	75 ce                	jne    c0010def <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0010e21:	83 ec 0c             	sub    esp,0xc
c0010e24:	be 01 00 00 00       	mov    esi,0x1
c0010e29:	68 14 0e 02 c0       	push   0xc0020e14
c0010e2e:	e8 c4 9b ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c0010e33:	83 c4 10             	add    esp,0x10
c0010e36:	83 c4 0c             	add    esp,0xc
c0010e39:	89 f0                	mov    eax,esi
c0010e3b:	5b                   	pop    ebx
c0010e3c:	5e                   	pop    esi
c0010e3d:	5f                   	pop    edi
c0010e3e:	5d                   	pop    ebp
c0010e3f:	c3                   	ret    

c0010e40 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0010e40:	55                   	push   ebp
c0010e41:	57                   	push   edi
c0010e42:	56                   	push   esi
c0010e43:	53                   	push   ebx
c0010e44:	51                   	push   ecx
c0010e45:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010e49:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0010e50:	0f 84 af 00 00 00    	je     c0010f05 <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010e56:	31 c9                	xor    ecx,ecx
c0010e58:	bf 08 00 00 00       	mov    edi,0x8
c0010e5d:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0010e63:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0010e66:	99                   	cdq    
c0010e67:	f7 ff                	idiv   edi
c0010e69:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0010e70:	85 ed                	test   ebp,ebp
c0010e72:	0f 84 9e 00 00 00    	je     c0010f16 <KeCheckSignal(SigHandlerBlock*, int*)+0xd6>
c0010e78:	89 e9                	mov    ecx,ebp
c0010e7a:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0010e80:	bf 01 00 00 00       	mov    edi,0x1
c0010e85:	89 04 24             	mov    DWORD PTR [esp],eax
c0010e88:	d3 e7                	shl    edi,cl
c0010e8a:	31 c9                	xor    ecx,ecx
c0010e8c:	b8 01 00 00 00       	mov    eax,0x1
c0010e91:	d3 e0                	shl    eax,cl
c0010e93:	85 04 24             	test   DWORD PTR [esp],eax
c0010e96:	74 06                	je     c0010e9e <KeCheckSignal(SigHandlerBlock*, int*)+0x5e>
c0010e98:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0010e9c:	75 67                	jne    c0010f05 <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010e9e:	41                   	inc    ecx
c0010e9f:	83 f9 11             	cmp    ecx,0x11
c0010ea2:	75 e8                	jne    c0010e8c <KeCheckSignal(SigHandlerBlock*, int*)+0x4c>
c0010ea4:	46                   	inc    esi
c0010ea5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010ea8:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010eae:	09 f8                	or     eax,edi
c0010eb0:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0010ebb:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0010ec1:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010ec8:	31 c0                	xor    eax,eax
c0010eca:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0010ed2:	74 09                	je     c0010edd <KeCheckSignal(SigHandlerBlock*, int*)+0x9d>
c0010ed4:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010edb:	eb 06                	jmp    c0010ee3 <KeCheckSignal(SigHandlerBlock*, int*)+0xa3>
c0010edd:	40                   	inc    eax
c0010ede:	83 f8 08             	cmp    eax,0x8
c0010ee1:	75 e7                	jne    c0010eca <KeCheckSignal(SigHandlerBlock*, int*)+0x8a>
c0010ee3:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0010ee6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010eea:	83 fd 09             	cmp    ebp,0x9
c0010eed:	89 2a                	mov    DWORD PTR [edx],ebp
c0010eef:	75 07                	jne    c0010ef8 <KeCheckSignal(SigHandlerBlock*, int*)+0xb8>
c0010ef1:	b8 d0 0c 01 c0       	mov    eax,0xc0010cd0
c0010ef6:	eb 31                	jmp    c0010f29 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010ef8:	83 f8 01             	cmp    eax,0x1
c0010efb:	75 0c                	jne    c0010f09 <KeCheckSignal(SigHandlerBlock*, int*)+0xc9>
c0010efd:	f7 d7                	not    edi
c0010eff:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0010f05:	31 c0                	xor    eax,eax
c0010f07:	eb 20                	jmp    c0010f29 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010f09:	85 c0                	test   eax,eax
c0010f0b:	75 1c                	jne    c0010f29 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010f0d:	8b 04 ad c0 21 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdde40]
c0010f14:	eb 13                	jmp    c0010f29 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010f16:	46                   	inc    esi
c0010f17:	41                   	inc    ecx
c0010f18:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010f1e:	83 f9 08             	cmp    ecx,0x8
c0010f21:	0f 85 36 ff ff ff    	jne    c0010e5d <KeCheckSignal(SigHandlerBlock*, int*)+0x1d>
c0010f27:	eb dc                	jmp    c0010f05 <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010f29:	5a                   	pop    edx
c0010f2a:	5b                   	pop    ebx
c0010f2b:	5e                   	pop    esi
c0010f2c:	5f                   	pop    edi
c0010f2d:	5d                   	pop    ebp
c0010f2e:	c3                   	ret    

c0010f2f <KiCheckSignalZ>:
c0010f2f:	83 ec 10             	sub    esp,0x10
c0010f32:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010f36:	50                   	push   eax
c0010f37:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f3c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f3f:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010f45:	e8 f6 fe ff ff       	call   c0010e40 <KeCheckSignal(SigHandlerBlock*, int*)>
c0010f4a:	5a                   	pop    edx
c0010f4b:	31 d2                	xor    edx,edx
c0010f4d:	59                   	pop    ecx
c0010f4e:	85 c0                	test   eax,eax
c0010f50:	74 19                	je     c0010f6b <KiCheckSignalZ+0x3c>
c0010f52:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010f58:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0010f5b:	89 02                	mov    DWORD PTR [edx],eax
c0010f5d:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0010f64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f68:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0010f6b:	89 d0                	mov    eax,edx
c0010f6d:	83 c4 10             	add    esp,0x10
c0010f70:	c3                   	ret    

c0010f71 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0010f71:	56                   	push   esi
c0010f72:	53                   	push   ebx
c0010f73:	bb 01 00 00 00       	mov    ebx,0x1
c0010f78:	52                   	push   edx
c0010f79:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010f7d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010f81:	d3 e3                	shl    ebx,cl
c0010f83:	83 f9 10             	cmp    ecx,0x10
c0010f86:	7f 08                	jg     c0010f90 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0010f88:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0010f8e:	75 10                	jne    c0010fa0 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0010f90:	83 ec 0c             	sub    esp,0xc
c0010f93:	68 25 0e 02 c0       	push   0xc0020e25
c0010f98:	e8 8a f9 ff ff       	call   c0010927 <KePanic(char const*)>
c0010f9d:	83 c4 10             	add    esp,0x10
c0010fa0:	f7 d3                	not    ebx
c0010fa2:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0010fa8:	58                   	pop    eax
c0010fa9:	5b                   	pop    ebx
c0010faa:	5e                   	pop    esi
c0010fab:	c3                   	ret    

c0010fac <KiFinishSignalZ>:
c0010fac:	53                   	push   ebx
c0010fad:	83 ec 10             	sub    esp,0x10
c0010fb0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010fb4:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0010fb7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010fbc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010fbf:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010fc5:	e8 a7 ff ff ff       	call   c0010f71 <KeCompleteSignal(SigHandlerBlock*, int)>
c0010fca:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010fd0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010fd7:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0010fde:	83 c4 18             	add    esp,0x18
c0010fe1:	5b                   	pop    ebx
c0010fe2:	c3                   	ret    

c0010fe3 <SysSeekDir(regs*)>:
c0010fe3:	31 c0                	xor    eax,eax
c0010fe5:	31 d2                	xor    edx,edx
c0010fe7:	c3                   	ret    

c0010fe8 <SysTellDir(regs*)>:
c0010fe8:	31 c0                	xor    eax,eax
c0010fea:	31 d2                	xor    edx,edx
c0010fec:	c3                   	ret    

c0010fed <SysVerify(regs*)>:
c0010fed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ff1:	31 d2                	xor    edx,edx
c0010ff3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010ff6:	c3                   	ret    

c0010ff7 <SysGetArgc(regs*)>:
c0010ff7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ffc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010fff:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011005:	89 c2                	mov    edx,eax
c0011007:	c1 fa 1f             	sar    edx,0x1f
c001100a:	c3                   	ret    

c001100b <SysTTYName(regs*)>:
c001100b:	b8 01 00 00 00       	mov    eax,0x1
c0011010:	31 d2                	xor    edx,edx
c0011012:	c3                   	ret    

c0011013 <SysFormatDisk(regs*)>:
c0011013:	56                   	push   esi
c0011014:	53                   	push   ebx
c0011015:	83 ec 04             	sub    esp,0x4
c0011018:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001101c:	8b 1d b4 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb4
c0011022:	eb 28                	jmp    c001104c <SysFormatDisk(regs*)+0x39>
c0011024:	83 ec 0c             	sub    esp,0xc
c0011027:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001102a:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c001102d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001102f:	51                   	push   ecx
c0011030:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011033:	51                   	push   ecx
c0011034:	50                   	push   eax
c0011035:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c001103c:	50                   	push   eax
c001103d:	53                   	push   ebx
c001103e:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0011041:	83 c4 20             	add    esp,0x20
c0011044:	83 f8 08             	cmp    eax,0x8
c0011047:	75 14                	jne    c001105d <SysFormatDisk(regs*)+0x4a>
c0011049:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001104c:	85 db                	test   ebx,ebx
c001104e:	75 d4                	jne    c0011024 <SysFormatDisk(regs*)+0x11>
c0011050:	83 c4 04             	add    esp,0x4
c0011053:	b8 03 00 00 00       	mov    eax,0x3
c0011058:	31 d2                	xor    edx,edx
c001105a:	5b                   	pop    ebx
c001105b:	5e                   	pop    esi
c001105c:	c3                   	ret    
c001105d:	85 c0                	test   eax,eax
c001105f:	74 1f                	je     c0011080 <SysFormatDisk(regs*)+0x6d>
c0011061:	83 f8 09             	cmp    eax,0x9
c0011064:	74 0d                	je     c0011073 <SysFormatDisk(regs*)+0x60>
c0011066:	83 c4 04             	add    esp,0x4
c0011069:	b8 02 00 00 00       	mov    eax,0x2
c001106e:	31 d2                	xor    edx,edx
c0011070:	5b                   	pop    ebx
c0011071:	5e                   	pop    esi
c0011072:	c3                   	ret    
c0011073:	83 c4 04             	add    esp,0x4
c0011076:	b8 01 00 00 00       	mov    eax,0x1
c001107b:	31 d2                	xor    edx,edx
c001107d:	5b                   	pop    ebx
c001107e:	5e                   	pop    esi
c001107f:	c3                   	ret    
c0011080:	83 c4 04             	add    esp,0x4
c0011083:	31 c0                	xor    eax,eax
c0011085:	31 d2                	xor    edx,edx
c0011087:	5b                   	pop    ebx
c0011088:	5e                   	pop    esi
c0011089:	c3                   	ret    

c001108a <SysSetDiskVolumeLabel(regs*)>:
c001108a:	56                   	push   esi
c001108b:	53                   	push   ebx
c001108c:	83 ec 04             	sub    esp,0x4
c001108f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011093:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011096:	83 f8 19             	cmp    eax,0x19
c0011099:	77 33                	ja     c00110ce <SysSetDiskVolumeLabel(regs*)+0x44>
c001109b:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c00110a2:	85 c9                	test   ecx,ecx
c00110a4:	74 28                	je     c00110ce <SysSetDiskVolumeLabel(regs*)+0x44>
c00110a6:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00110a9:	85 db                	test   ebx,ebx
c00110ab:	74 21                	je     c00110ce <SysSetDiskVolumeLabel(regs*)+0x44>
c00110ad:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c00110b3:	85 d2                	test   edx,edx
c00110b5:	74 17                	je     c00110ce <SysSetDiskVolumeLabel(regs*)+0x44>
c00110b7:	8b 32                	mov    esi,DWORD PTR [edx]
c00110b9:	53                   	push   ebx
c00110ba:	50                   	push   eax
c00110bb:	51                   	push   ecx
c00110bc:	52                   	push   edx
c00110bd:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00110c0:	83 c4 10             	add    esp,0x10
c00110c3:	89 c2                	mov    edx,eax
c00110c5:	83 c4 04             	add    esp,0x4
c00110c8:	c1 fa 1f             	sar    edx,0x1f
c00110cb:	5b                   	pop    ebx
c00110cc:	5e                   	pop    esi
c00110cd:	c3                   	ret    
c00110ce:	83 c4 04             	add    esp,0x4
c00110d1:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00110d6:	ba ff ff ff ff       	mov    edx,0xffffffff
c00110db:	5b                   	pop    ebx
c00110dc:	5e                   	pop    esi
c00110dd:	c3                   	ret    

c00110de <SysGetDiskVolumeLabel(regs*)>:
c00110de:	57                   	push   edi
c00110df:	56                   	push   esi
c00110e0:	53                   	push   ebx
c00110e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110e5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00110e8:	83 fa 19             	cmp    edx,0x19
c00110eb:	77 3c                	ja     c0011129 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00110ed:	8b 0c 95 20 74 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd8be0]
c00110f4:	85 c9                	test   ecx,ecx
c00110f6:	74 31                	je     c0011129 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00110f8:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00110fb:	85 db                	test   ebx,ebx
c00110fd:	74 2a                	je     c0011129 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00110ff:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011102:	85 f6                	test   esi,esi
c0011104:	74 23                	je     c0011129 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011106:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c001110c:	85 c0                	test   eax,eax
c001110e:	74 19                	je     c0011129 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011110:	83 ec 0c             	sub    esp,0xc
c0011113:	8b 38                	mov    edi,DWORD PTR [eax]
c0011115:	56                   	push   esi
c0011116:	53                   	push   ebx
c0011117:	52                   	push   edx
c0011118:	51                   	push   ecx
c0011119:	50                   	push   eax
c001111a:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001111d:	83 c4 20             	add    esp,0x20
c0011120:	89 c2                	mov    edx,eax
c0011122:	5b                   	pop    ebx
c0011123:	c1 fa 1f             	sar    edx,0x1f
c0011126:	5e                   	pop    esi
c0011127:	5f                   	pop    edi
c0011128:	c3                   	ret    
c0011129:	5b                   	pop    ebx
c001112a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001112f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011134:	5e                   	pop    esi
c0011135:	5f                   	pop    edi
c0011136:	c3                   	ret    

c0011137 <SysShutdown(regs*)>:
c0011137:	83 ec 0c             	sub    esp,0xc
c001113a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001113e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011141:	85 c0                	test   eax,eax
c0011143:	74 18                	je     c001115d <SysShutdown(regs*)+0x26>
c0011145:	83 f8 01             	cmp    eax,0x1
c0011148:	74 38                	je     c0011182 <SysShutdown(regs*)+0x4b>
c001114a:	83 f8 02             	cmp    eax,0x2
c001114d:	74 24                	je     c0011173 <SysShutdown(regs*)+0x3c>
c001114f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011154:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011159:	83 c4 0c             	add    esp,0xc
c001115c:	c3                   	ret    
c001115d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0011162:	8b 10                	mov    edx,DWORD PTR [eax]
c0011164:	6a 00                	push   0x0
c0011166:	6a 00                	push   0x0
c0011168:	6a 00                	push   0x0
c001116a:	50                   	push   eax
c001116b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001116e:	83 c4 10             	add    esp,0x10
c0011171:	eb dc                	jmp    c001114f <SysShutdown(regs*)+0x18>
c0011173:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0011178:	8b 10                	mov    edx,DWORD PTR [eax]
c001117a:	6a 00                	push   0x0
c001117c:	6a 00                	push   0x0
c001117e:	6a 01                	push   0x1
c0011180:	eb e8                	jmp    c001116a <SysShutdown(regs*)+0x33>
c0011182:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c0011187:	85 c0                	test   eax,eax
c0011189:	74 02                	je     c001118d <SysShutdown(regs*)+0x56>
c001118b:	ff d0                	call   eax
c001118d:	31 c0                	xor    eax,eax
c001118f:	31 d2                	xor    edx,edx
c0011191:	83 c4 0c             	add    esp,0xc
c0011194:	c3                   	ret    

c0011195 <SysRealpath(regs*)>:
c0011195:	83 ec 0c             	sub    esp,0xc
c0011198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001119c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001119f:	85 d2                	test   edx,edx
c00111a1:	74 07                	je     c00111aa <SysRealpath(regs*)+0x15>
c00111a3:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00111a6:	85 c0                	test   eax,eax
c00111a8:	75 0b                	jne    c00111b5 <SysRealpath(regs*)+0x20>
c00111aa:	b8 01 00 00 00       	mov    eax,0x1
c00111af:	31 d2                	xor    edx,edx
c00111b1:	83 c4 0c             	add    esp,0xc
c00111b4:	c3                   	ret    
c00111b5:	83 ec 04             	sub    esp,0x4
c00111b8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00111be:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00111c1:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00111c7:	51                   	push   ecx
c00111c8:	52                   	push   edx
c00111c9:	50                   	push   eax
c00111ca:	e8 f5 9b ff ff       	call   c000adc4 <Fs::standardiseFiles(char*, char const*, char const*)>
c00111cf:	83 c4 10             	add    esp,0x10
c00111d2:	31 c0                	xor    eax,eax
c00111d4:	31 d2                	xor    edx,edx
c00111d6:	83 c4 0c             	add    esp,0xc
c00111d9:	c3                   	ret    

c00111da <SysReadDir(regs*)>:
c00111da:	53                   	push   ebx
c00111db:	83 ec 18             	sub    esp,0x18
c00111de:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00111e2:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00111e5:	83 f8 02             	cmp    eax,0x2
c00111e8:	76 61                	jbe    c001124b <SysReadDir(regs*)+0x71>
c00111ea:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00111f1:	77 49                	ja     c001123c <SysReadDir(regs*)+0x62>
c00111f3:	83 ec 0c             	sub    esp,0xc
c00111f6:	50                   	push   eax
c00111f7:	e8 c7 82 ff ff       	call   c00094c3 <getFromFileDescriptor(int)>
c00111fc:	83 c4 10             	add    esp,0x10
c00111ff:	85 c0                	test   eax,eax
c0011201:	74 39                	je     c001123c <SysReadDir(regs*)+0x62>
c0011203:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001120b:	83 ec 0c             	sub    esp,0xc
c001120e:	8b 10                	mov    edx,DWORD PTR [eax]
c0011210:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011214:	51                   	push   ecx
c0011215:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011218:	51                   	push   ecx
c0011219:	6a 00                	push   0x0
c001121b:	68 10 01 00 00       	push   0x110
c0011220:	50                   	push   eax
c0011221:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011224:	83 c4 20             	add    esp,0x20
c0011227:	85 c0                	test   eax,eax
c0011229:	74 29                	je     c0011254 <SysReadDir(regs*)+0x7a>
c001122b:	83 f8 07             	cmp    eax,0x7
c001122e:	74 1b                	je     c001124b <SysReadDir(regs*)+0x71>
c0011230:	b8 02 00 00 00       	mov    eax,0x2
c0011235:	31 d2                	xor    edx,edx
c0011237:	83 c4 18             	add    esp,0x18
c001123a:	5b                   	pop    ebx
c001123b:	c3                   	ret    
c001123c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011241:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011246:	83 c4 18             	add    esp,0x18
c0011249:	5b                   	pop    ebx
c001124a:	c3                   	ret    
c001124b:	b8 01 00 00 00       	mov    eax,0x1
c0011250:	31 d2                	xor    edx,edx
c0011252:	eb e3                	jmp    c0011237 <SysReadDir(regs*)+0x5d>
c0011254:	31 c0                	xor    eax,eax
c0011256:	31 d2                	xor    edx,edx
c0011258:	eb dd                	jmp    c0011237 <SysReadDir(regs*)+0x5d>

c001125a <SysIsATTY(regs*)>:
c001125a:	83 ec 0c             	sub    esp,0xc
c001125d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011261:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011264:	83 f8 02             	cmp    eax,0x2
c0011267:	76 07                	jbe    c0011270 <SysIsATTY(regs*)+0x16>
c0011269:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001126e:	75 26                	jne    c0011296 <SysIsATTY(regs*)+0x3c>
c0011270:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011275:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011278:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001127e:	85 c0                	test   eax,eax
c0011280:	74 24                	je     c00112a6 <SysIsATTY(regs*)+0x4c>
c0011282:	83 ec 0c             	sub    esp,0xc
c0011285:	8b 10                	mov    edx,DWORD PTR [eax]
c0011287:	50                   	push   eax
c0011288:	ff 12                	call   DWORD PTR [edx]
c001128a:	31 d2                	xor    edx,edx
c001128c:	0f b6 c0             	movzx  eax,al
c001128f:	83 c4 10             	add    esp,0x10
c0011292:	83 c4 0c             	add    esp,0xc
c0011295:	c3                   	ret    
c0011296:	83 ec 0c             	sub    esp,0xc
c0011299:	50                   	push   eax
c001129a:	e8 24 82 ff ff       	call   c00094c3 <getFromFileDescriptor(int)>
c001129f:	83 c4 10             	add    esp,0x10
c00112a2:	85 c0                	test   eax,eax
c00112a4:	75 dc                	jne    c0011282 <SysIsATTY(regs*)+0x28>
c00112a6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00112ab:	ba ff ff ff ff       	mov    edx,0xffffffff
c00112b0:	83 c4 0c             	add    esp,0xc
c00112b3:	c3                   	ret    

c00112b4 <SysSeek(regs*)>:
c00112b4:	53                   	push   ebx
c00112b5:	83 ec 08             	sub    esp,0x8
c00112b8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00112bc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00112bf:	8d 50 fd             	lea    edx,[eax-0x3]
c00112c2:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00112c8:	77 32                	ja     c00112fc <SysSeek(regs*)+0x48>
c00112ca:	83 ec 0c             	sub    esp,0xc
c00112cd:	50                   	push   eax
c00112ce:	e8 f0 81 ff ff       	call   c00094c3 <getFromFileDescriptor(int)>
c00112d3:	83 c4 0c             	add    esp,0xc
c00112d6:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00112d9:	31 db                	xor    ebx,ebx
c00112db:	53                   	push   ebx
c00112dc:	51                   	push   ecx
c00112dd:	50                   	push   eax
c00112de:	e8 11 9e ff ff       	call   c000b0f4 <File::seek(unsigned long long)>
c00112e3:	83 c4 10             	add    esp,0x10
c00112e6:	85 c0                	test   eax,eax
c00112e8:	0f 95 c0             	setne  al
c00112eb:	31 d2                	xor    edx,edx
c00112ed:	0f b6 c0             	movzx  eax,al
c00112f0:	f7 d8                	neg    eax
c00112f2:	83 d2 00             	adc    edx,0x0
c00112f5:	83 c4 08             	add    esp,0x8
c00112f8:	f7 da                	neg    edx
c00112fa:	5b                   	pop    ebx
c00112fb:	c3                   	ret    
c00112fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011301:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011306:	83 c4 08             	add    esp,0x8
c0011309:	5b                   	pop    ebx
c001130a:	c3                   	ret    

c001130b <SysTell(regs*)>:
c001130b:	53                   	push   ebx
c001130c:	83 ec 08             	sub    esp,0x8
c001130f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011313:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011316:	83 f8 02             	cmp    eax,0x2
c0011319:	76 4e                	jbe    c0011369 <SysTell(regs*)+0x5e>
c001131b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011320:	76 19                	jbe    c001133b <SysTell(regs*)+0x30>
c0011322:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011325:	31 d2                	xor    edx,edx
c0011327:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001132d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011334:	31 c0                	xor    eax,eax
c0011336:	83 c4 08             	add    esp,0x8
c0011339:	5b                   	pop    ebx
c001133a:	c3                   	ret    
c001133b:	83 ec 0c             	sub    esp,0xc
c001133e:	50                   	push   eax
c001133f:	e8 7f 81 ff ff       	call   c00094c3 <getFromFileDescriptor(int)>
c0011344:	5a                   	pop    edx
c0011345:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011348:	59                   	pop    ecx
c0011349:	53                   	push   ebx
c001134a:	50                   	push   eax
c001134b:	e8 fa 9d ff ff       	call   c000b14a <File::tell(unsigned long long*)>
c0011350:	83 c4 10             	add    esp,0x10
c0011353:	85 c0                	test   eax,eax
c0011355:	0f 95 c0             	setne  al
c0011358:	31 d2                	xor    edx,edx
c001135a:	0f b6 c0             	movzx  eax,al
c001135d:	f7 d8                	neg    eax
c001135f:	83 d2 00             	adc    edx,0x0
c0011362:	83 c4 08             	add    esp,0x8
c0011365:	f7 da                	neg    edx
c0011367:	5b                   	pop    ebx
c0011368:	c3                   	ret    
c0011369:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001136e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011373:	83 c4 08             	add    esp,0x8
c0011376:	5b                   	pop    ebx
c0011377:	c3                   	ret    

c0011378 <SysSize(regs*)>:
c0011378:	53                   	push   ebx
c0011379:	83 ec 18             	sub    esp,0x18
c001137c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011380:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011383:	83 f8 02             	cmp    eax,0x2
c0011386:	76 54                	jbe    c00113dc <SysSize(regs*)+0x64>
c0011388:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001138d:	76 19                	jbe    c00113a8 <SysSize(regs*)+0x30>
c001138f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011392:	31 d2                	xor    edx,edx
c0011394:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001139a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00113a1:	31 c0                	xor    eax,eax
c00113a3:	83 c4 18             	add    esp,0x18
c00113a6:	5b                   	pop    ebx
c00113a7:	c3                   	ret    
c00113a8:	83 ec 0c             	sub    esp,0xc
c00113ab:	50                   	push   eax
c00113ac:	e8 12 81 ff ff       	call   c00094c3 <getFromFileDescriptor(int)>
c00113b1:	83 c4 0c             	add    esp,0xc
c00113b4:	8d 54 24 13          	lea    edx,[esp+0x13]
c00113b8:	52                   	push   edx
c00113b9:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00113bc:	52                   	push   edx
c00113bd:	50                   	push   eax
c00113be:	e8 1f 9f ff ff       	call   c000b2e2 <File::stat(unsigned long long*, bool*)>
c00113c3:	83 c4 10             	add    esp,0x10
c00113c6:	85 c0                	test   eax,eax
c00113c8:	0f 95 c0             	setne  al
c00113cb:	31 d2                	xor    edx,edx
c00113cd:	0f b6 c0             	movzx  eax,al
c00113d0:	f7 d8                	neg    eax
c00113d2:	83 d2 00             	adc    edx,0x0
c00113d5:	83 c4 18             	add    esp,0x18
c00113d8:	f7 da                	neg    edx
c00113da:	5b                   	pop    ebx
c00113db:	c3                   	ret    
c00113dc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00113e1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00113e6:	83 c4 18             	add    esp,0x18
c00113e9:	5b                   	pop    ebx
c00113ea:	c3                   	ret    

c00113eb <SysSizeFromFilename(regs*)>:
c00113eb:	57                   	push   edi
c00113ec:	56                   	push   esi
c00113ed:	53                   	push   ebx
c00113ee:	83 ec 20             	sub    esp,0x20
c00113f1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00113f5:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00113f8:	83 fb 02             	cmp    ebx,0x2
c00113fb:	0f 86 8a 00 00 00    	jbe    c001148b <SysSizeFromFilename(regs*)+0xa0>
c0011401:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011407:	76 1b                	jbe    c0011424 <SysSizeFromFilename(regs*)+0x39>
c0011409:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001140c:	31 d2                	xor    edx,edx
c001140e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011414:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001141b:	83 c4 20             	add    esp,0x20
c001141e:	31 c0                	xor    eax,eax
c0011420:	5b                   	pop    ebx
c0011421:	5e                   	pop    esi
c0011422:	5f                   	pop    edi
c0011423:	c3                   	ret    
c0011424:	83 ec 0c             	sub    esp,0xc
c0011427:	68 14 01 00 00       	push   0x114
c001142c:	e8 7d 66 ff ff       	call   c0007aae <malloc>
c0011431:	83 c4 0c             	add    esp,0xc
c0011434:	89 c7                	mov    edi,eax
c0011436:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001143b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001143e:	50                   	push   eax
c001143f:	53                   	push   ebx
c0011440:	57                   	push   edi
c0011441:	e8 34 9b ff ff       	call   c000af7a <File::File(char const*, Process*)>
c0011446:	83 c4 0c             	add    esp,0xc
c0011449:	8d 44 24 23          	lea    eax,[esp+0x23]
c001144d:	50                   	push   eax
c001144e:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0011451:	52                   	push   edx
c0011452:	57                   	push   edi
c0011453:	e8 8a 9e ff ff       	call   c000b2e2 <File::stat(unsigned long long*, bool*)>
c0011458:	83 c4 10             	add    esp,0x10
c001145b:	85 ff                	test   edi,edi
c001145d:	74 14                	je     c0011473 <SysSizeFromFilename(regs*)+0x88>
c001145f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011463:	8b 17                	mov    edx,DWORD PTR [edi]
c0011465:	83 ec 0c             	sub    esp,0xc
c0011468:	57                   	push   edi
c0011469:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001146c:	83 c4 10             	add    esp,0x10
c001146f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011473:	85 c0                	test   eax,eax
c0011475:	0f 95 c0             	setne  al
c0011478:	31 d2                	xor    edx,edx
c001147a:	0f b6 c0             	movzx  eax,al
c001147d:	f7 d8                	neg    eax
c001147f:	83 d2 00             	adc    edx,0x0
c0011482:	83 c4 20             	add    esp,0x20
c0011485:	f7 da                	neg    edx
c0011487:	5b                   	pop    ebx
c0011488:	5e                   	pop    esi
c0011489:	5f                   	pop    edi
c001148a:	c3                   	ret    
c001148b:	83 c4 20             	add    esp,0x20
c001148e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011493:	5b                   	pop    ebx
c0011494:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011499:	5e                   	pop    esi
c001149a:	5f                   	pop    edi
c001149b:	c3                   	ret    

c001149c <SysClose(regs*)>:
c001149c:	53                   	push   ebx
c001149d:	83 ec 08             	sub    esp,0x8
c00114a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114a4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00114a7:	83 f8 02             	cmp    eax,0x2
c00114aa:	76 41                	jbe    c00114ed <SysClose(regs*)+0x51>
c00114ac:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00114b2:	83 fa 01             	cmp    edx,0x1
c00114b5:	76 2d                	jbe    c00114e4 <SysClose(regs*)+0x48>
c00114b7:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00114bc:	77 2f                	ja     c00114ed <SysClose(regs*)+0x51>
c00114be:	83 ec 0c             	sub    esp,0xc
c00114c1:	50                   	push   eax
c00114c2:	e8 fc 7f ff ff       	call   c00094c3 <getFromFileDescriptor(int)>
c00114c7:	89 c3                	mov    ebx,eax
c00114c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00114cc:	e8 c3 9b ff ff       	call   c000b094 <File::close()>
c00114d1:	83 c4 10             	add    esp,0x10
c00114d4:	85 db                	test   ebx,ebx
c00114d6:	74 0c                	je     c00114e4 <SysClose(regs*)+0x48>
c00114d8:	83 ec 0c             	sub    esp,0xc
c00114db:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114dd:	53                   	push   ebx
c00114de:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00114e1:	83 c4 10             	add    esp,0x10
c00114e4:	31 c0                	xor    eax,eax
c00114e6:	31 d2                	xor    edx,edx
c00114e8:	83 c4 08             	add    esp,0x8
c00114eb:	5b                   	pop    ebx
c00114ec:	c3                   	ret    
c00114ed:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00114f2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00114f7:	83 c4 08             	add    esp,0x8
c00114fa:	5b                   	pop    ebx
c00114fb:	c3                   	ret    

c00114fc <SysOpenDir(regs*)>:
c00114fc:	56                   	push   esi
c00114fd:	53                   	push   ebx
c00114fe:	83 ec 04             	sub    esp,0x4
c0011501:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011505:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011508:	85 c9                	test   ecx,ecx
c001150a:	74 5d                	je     c0011569 <SysOpenDir(regs*)+0x6d>
c001150c:	83 ec 0c             	sub    esp,0xc
c001150f:	68 14 01 00 00       	push   0x114
c0011514:	e8 95 65 ff ff       	call   c0007aae <malloc>
c0011519:	83 c4 0c             	add    esp,0xc
c001151c:	89 c6                	mov    esi,eax
c001151e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011523:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011526:	50                   	push   eax
c0011527:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001152a:	52                   	push   edx
c001152b:	56                   	push   esi
c001152c:	e8 6f 9f ff ff       	call   c000b4a0 <Directory::Directory(char const*, Process*)>
c0011531:	83 c4 10             	add    esp,0x10
c0011534:	85 f6                	test   esi,esi
c0011536:	74 31                	je     c0011569 <SysOpenDir(regs*)+0x6d>
c0011538:	83 ec 0c             	sub    esp,0xc
c001153b:	56                   	push   esi
c001153c:	e8 1b a0 ff ff       	call   c000b55c <Directory::open()>
c0011541:	83 c4 10             	add    esp,0x10
c0011544:	85 c0                	test   eax,eax
c0011546:	75 21                	jne    c0011569 <SysOpenDir(regs*)+0x6d>
c0011548:	83 ec 0c             	sub    esp,0xc
c001154b:	56                   	push   esi
c001154c:	e8 75 7c ff ff       	call   c00091c6 <UnixFile::getFileDescriptor()>
c0011551:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011554:	83 c4 10             	add    esp,0x10
c0011557:	89 02                	mov    DWORD PTR [edx],eax
c0011559:	c1 f8 1f             	sar    eax,0x1f
c001155c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001155f:	83 c4 04             	add    esp,0x4
c0011562:	31 c0                	xor    eax,eax
c0011564:	31 d2                	xor    edx,edx
c0011566:	5b                   	pop    ebx
c0011567:	5e                   	pop    esi
c0011568:	c3                   	ret    
c0011569:	83 c4 04             	add    esp,0x4
c001156c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011571:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011576:	5b                   	pop    ebx
c0011577:	5e                   	pop    esi
c0011578:	c3                   	ret    

c0011579 <SysMakeDir(regs*)>:
c0011579:	56                   	push   esi
c001157a:	53                   	push   ebx
c001157b:	83 ec 10             	sub    esp,0x10
c001157e:	68 14 01 00 00       	push   0x114
c0011583:	e8 26 65 ff ff       	call   c0007aae <malloc>
c0011588:	83 c4 0c             	add    esp,0xc
c001158b:	89 c3                	mov    ebx,eax
c001158d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011592:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011595:	50                   	push   eax
c0011596:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001159a:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c001159d:	52                   	push   edx
c001159e:	53                   	push   ebx
c001159f:	e8 fc 9e ff ff       	call   c000b4a0 <Directory::Directory(char const*, Process*)>
c00115a4:	83 c4 10             	add    esp,0x10
c00115a7:	85 db                	test   ebx,ebx
c00115a9:	74 2c                	je     c00115d7 <SysMakeDir(regs*)+0x5e>
c00115ab:	83 ec 0c             	sub    esp,0xc
c00115ae:	53                   	push   ebx
c00115af:	e8 88 a1 ff ff       	call   c000b73c <Directory::create()>
c00115b4:	89 c6                	mov    esi,eax
c00115b6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00115b8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00115bb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00115be:	83 c4 10             	add    esp,0x10
c00115c1:	31 c0                	xor    eax,eax
c00115c3:	85 f6                	test   esi,esi
c00115c5:	0f 95 c0             	setne  al
c00115c8:	31 d2                	xor    edx,edx
c00115ca:	f7 d8                	neg    eax
c00115cc:	83 d2 00             	adc    edx,0x0
c00115cf:	83 c4 04             	add    esp,0x4
c00115d2:	f7 da                	neg    edx
c00115d4:	5b                   	pop    ebx
c00115d5:	5e                   	pop    esi
c00115d6:	c3                   	ret    
c00115d7:	83 c4 04             	add    esp,0x4
c00115da:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00115df:	ba ff ff ff ff       	mov    edx,0xffffffff
c00115e4:	5b                   	pop    ebx
c00115e5:	5e                   	pop    esi
c00115e6:	c3                   	ret    

c00115e7 <SysCloseDir(regs*)>:
c00115e7:	53                   	push   ebx
c00115e8:	83 ec 08             	sub    esp,0x8
c00115eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115ef:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00115f2:	8d 50 fd             	lea    edx,[eax-0x3]
c00115f5:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00115fb:	77 2f                	ja     c001162c <SysCloseDir(regs*)+0x45>
c00115fd:	83 ec 0c             	sub    esp,0xc
c0011600:	50                   	push   eax
c0011601:	e8 bd 7e ff ff       	call   c00094c3 <getFromFileDescriptor(int)>
c0011606:	89 c3                	mov    ebx,eax
c0011608:	89 04 24             	mov    DWORD PTR [esp],eax
c001160b:	e8 a8 9f ff ff       	call   c000b5b8 <Directory::close()>
c0011610:	83 c4 10             	add    esp,0x10
c0011613:	85 db                	test   ebx,ebx
c0011615:	74 0c                	je     c0011623 <SysCloseDir(regs*)+0x3c>
c0011617:	83 ec 0c             	sub    esp,0xc
c001161a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001161c:	53                   	push   ebx
c001161d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011620:	83 c4 10             	add    esp,0x10
c0011623:	31 c0                	xor    eax,eax
c0011625:	31 d2                	xor    edx,edx
c0011627:	83 c4 08             	add    esp,0x8
c001162a:	5b                   	pop    ebx
c001162b:	c3                   	ret    
c001162c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011631:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011636:	83 c4 08             	add    esp,0x8
c0011639:	5b                   	pop    ebx
c001163a:	c3                   	ret    

c001163b <SysWait(regs*)>:
c001163b:	83 ec 10             	sub    esp,0x10
c001163e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011642:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011645:	52                   	push   edx
c0011646:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011649:	51                   	push   ecx
c001164a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001164d:	50                   	push   eax
c001164e:	e8 d5 3c 00 00       	call   c0015328 <waitTask(int, int*, int)>
c0011653:	83 c4 1c             	add    esp,0x1c
c0011656:	89 c2                	mov    edx,eax
c0011658:	c1 fa 1f             	sar    edx,0x1f
c001165b:	c3                   	ret    

c001165c <SysNotImpl(regs*)>:
c001165c:	83 ec 18             	sub    esp,0x18
c001165f:	68 36 0e 02 c0       	push   0xc0020e36
c0011664:	e8 be f2 ff ff       	call   c0010927 <KePanic(char const*)>
c0011669:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001166e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011673:	83 c4 1c             	add    esp,0x1c
c0011676:	c3                   	ret    

c0011677 <SysPanic(regs*)>:
c0011677:	83 ec 18             	sub    esp,0x18
c001167a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001167e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011681:	50                   	push   eax
c0011682:	e8 a0 f2 ff ff       	call   c0010927 <KePanic(char const*)>
c0011687:	b8 01 00 00 00       	mov    eax,0x1
c001168c:	31 d2                	xor    edx,edx
c001168e:	83 c4 1c             	add    esp,0x1c
c0011691:	c3                   	ret    

c0011692 <SysRmdir(regs*)>:
c0011692:	56                   	push   esi
c0011693:	53                   	push   ebx
c0011694:	83 ec 20             	sub    esp,0x20
c0011697:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001169b:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001169e:	68 14 01 00 00       	push   0x114
c00116a3:	e8 06 64 ff ff       	call   c0007aae <malloc>
c00116a8:	83 c4 0c             	add    esp,0xc
c00116ab:	89 c3                	mov    ebx,eax
c00116ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116b2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00116b5:	50                   	push   eax
c00116b6:	56                   	push   esi
c00116b7:	53                   	push   ebx
c00116b8:	e8 bd 98 ff ff       	call   c000af7a <File::File(char const*, Process*)>
c00116bd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00116c0:	e8 e9 9a ff ff       	call   c000b1ae <File::unlink()>
c00116c5:	83 c4 10             	add    esp,0x10
c00116c8:	85 db                	test   ebx,ebx
c00116ca:	74 14                	je     c00116e0 <SysRmdir(regs*)+0x4e>
c00116cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00116d0:	8b 13                	mov    edx,DWORD PTR [ebx]
c00116d2:	83 ec 0c             	sub    esp,0xc
c00116d5:	53                   	push   ebx
c00116d6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00116d9:	83 c4 10             	add    esp,0x10
c00116dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00116e0:	85 c0                	test   eax,eax
c00116e2:	0f 95 c0             	setne  al
c00116e5:	31 d2                	xor    edx,edx
c00116e7:	0f b6 c0             	movzx  eax,al
c00116ea:	f7 d8                	neg    eax
c00116ec:	83 d2 00             	adc    edx,0x0
c00116ef:	83 c4 14             	add    esp,0x14
c00116f2:	f7 da                	neg    edx
c00116f4:	5b                   	pop    ebx
c00116f5:	5e                   	pop    esi
c00116f6:	c3                   	ret    

c00116f7 <SysUnlink(regs*)>:
c00116f7:	56                   	push   esi
c00116f8:	53                   	push   ebx
c00116f9:	83 ec 20             	sub    esp,0x20
c00116fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011700:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011703:	68 14 01 00 00       	push   0x114
c0011708:	e8 a1 63 ff ff       	call   c0007aae <malloc>
c001170d:	83 c4 0c             	add    esp,0xc
c0011710:	89 c3                	mov    ebx,eax
c0011712:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011717:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001171a:	50                   	push   eax
c001171b:	56                   	push   esi
c001171c:	53                   	push   ebx
c001171d:	e8 58 98 ff ff       	call   c000af7a <File::File(char const*, Process*)>
c0011722:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011725:	e8 84 9a ff ff       	call   c000b1ae <File::unlink()>
c001172a:	83 c4 10             	add    esp,0x10
c001172d:	85 db                	test   ebx,ebx
c001172f:	74 14                	je     c0011745 <SysUnlink(regs*)+0x4e>
c0011731:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011735:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011737:	83 ec 0c             	sub    esp,0xc
c001173a:	53                   	push   ebx
c001173b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001173e:	83 c4 10             	add    esp,0x10
c0011741:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011745:	85 c0                	test   eax,eax
c0011747:	0f 95 c0             	setne  al
c001174a:	31 d2                	xor    edx,edx
c001174c:	0f b6 c0             	movzx  eax,al
c001174f:	f7 d8                	neg    eax
c0011751:	83 d2 00             	adc    edx,0x0
c0011754:	83 c4 14             	add    esp,0x14
c0011757:	f7 da                	neg    edx
c0011759:	5b                   	pop    ebx
c001175a:	5e                   	pop    esi
c001175b:	c3                   	ret    

c001175c <SysGetArgv(regs*)>:
c001175c:	83 ec 0c             	sub    esp,0xc
c001175f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011763:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011766:	85 c0                	test   eax,eax
c0011768:	78 2c                	js     c0011796 <SysGetArgv(regs*)+0x3a>
c001176a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011770:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011773:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0011779:	7d 1b                	jge    c0011796 <SysGetArgv(regs*)+0x3a>
c001177b:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0011782:	85 c0                	test   eax,eax
c0011784:	74 18                	je     c001179e <SysGetArgv(regs*)+0x42>
c0011786:	83 ec 08             	sub    esp,0x8
c0011789:	50                   	push   eax
c001178a:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c001178d:	50                   	push   eax
c001178e:	e8 ad ee fe ff       	call   c0000640 <strcpy>
c0011793:	83 c4 10             	add    esp,0x10
c0011796:	31 c0                	xor    eax,eax
c0011798:	31 d2                	xor    edx,edx
c001179a:	83 c4 0c             	add    esp,0xc
c001179d:	c3                   	ret    
c001179e:	b8 01 00 00 00       	mov    eax,0x1
c00117a3:	31 d2                	xor    edx,edx
c00117a5:	83 c4 0c             	add    esp,0xc
c00117a8:	c3                   	ret    

c00117a9 <SysUSleep(regs*)>:
c00117a9:	83 ec 1c             	sub    esp,0x1c
c00117ac:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00117b0:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00117b3:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00117b6:	6a 00                	push   0x0
c00117b8:	6a 64                	push   0x64
c00117ba:	52                   	push   edx
c00117bb:	50                   	push   eax
c00117bc:	e8 af ce 00 00       	call   c001e670 <__udivdi3>
c00117c1:	83 c4 14             	add    esp,0x14
c00117c4:	50                   	push   eax
c00117c5:	e8 42 3c 00 00       	call   c001540c <milliTenthSleep(unsigned int)>
c00117ca:	31 c0                	xor    eax,eax
c00117cc:	31 d2                	xor    edx,edx
c00117ce:	83 c4 1c             	add    esp,0x1c
c00117d1:	c3                   	ret    

c00117d2 <SysSpawn(regs*)>:
c00117d2:	56                   	push   esi
c00117d3:	53                   	push   ebx
c00117d4:	83 ec 04             	sub    esp,0x4
c00117d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00117db:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00117de:	85 f6                	test   esi,esi
c00117e0:	75 0a                	jne    c00117ec <SysSpawn(regs*)+0x1a>
c00117e2:	83 c4 04             	add    esp,0x4
c00117e5:	31 c0                	xor    eax,eax
c00117e7:	31 d2                	xor    edx,edx
c00117e9:	5b                   	pop    ebx
c00117ea:	5e                   	pop    esi
c00117eb:	c3                   	ret    
c00117ec:	83 ec 0c             	sub    esp,0xc
c00117ef:	68 24 07 00 00       	push   0x724
c00117f4:	e8 b5 62 ff ff       	call   c0007aae <malloc>
c00117f9:	83 c4 10             	add    esp,0x10
c00117fc:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00117ff:	89 c6                	mov    esi,eax
c0011801:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011804:	85 c9                	test   ecx,ecx
c0011806:	75 39                	jne    c0011841 <SysSpawn(regs*)+0x6f>
c0011808:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001180d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011810:	52                   	push   edx
c0011811:	50                   	push   eax
c0011812:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011815:	50                   	push   eax
c0011816:	56                   	push   esi
c0011817:	e8 40 32 00 00       	call   c0014a5c <Process::Process(char const*, Process*, char**)>
c001181c:	83 c4 10             	add    esp,0x10
c001181f:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0011826:	75 ba                	jne    c00117e2 <SysSpawn(regs*)+0x10>
c0011828:	83 ec 0c             	sub    esp,0xc
c001182b:	56                   	push   esi
c001182c:	e8 67 37 00 00       	call   c0014f98 <Process::createUserThread()>
c0011831:	8b 06                	mov    eax,DWORD PTR [esi]
c0011833:	83 c4 10             	add    esp,0x10
c0011836:	89 c2                	mov    edx,eax
c0011838:	83 c4 04             	add    esp,0x4
c001183b:	c1 fa 1f             	sar    edx,0x1f
c001183e:	5b                   	pop    ebx
c001183f:	5e                   	pop    esi
c0011840:	c3                   	ret    
c0011841:	31 c0                	xor    eax,eax
c0011843:	eb cb                	jmp    c0011810 <SysSpawn(regs*)+0x3e>

c0011845 <SysGetEnv(regs*)>:
c0011845:	57                   	push   edi
c0011846:	56                   	push   esi
c0011847:	53                   	push   ebx
c0011848:	83 ec 1c             	sub    esp,0x1c
c001184b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001184f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011854:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011857:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001185a:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c001185d:	51                   	push   ecx
c001185e:	e8 7c ef ff ff       	call   c00107df <Krnl::getProcessTotalEnvCount(Process*)>
c0011863:	83 c4 10             	add    esp,0x10
c0011866:	39 c7                	cmp    edi,eax
c0011868:	7c 14                	jl     c001187e <SysGetEnv(regs*)+0x39>
c001186a:	85 f6                	test   esi,esi
c001186c:	75 0b                	jne    c0011879 <SysGetEnv(regs*)+0x34>
c001186e:	83 c4 10             	add    esp,0x10
c0011871:	31 c0                	xor    eax,eax
c0011873:	5b                   	pop    ebx
c0011874:	31 d2                	xor    edx,edx
c0011876:	5e                   	pop    esi
c0011877:	5f                   	pop    edi
c0011878:	c3                   	ret    
c0011879:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001187c:	eb f0                	jmp    c001186e <SysGetEnv(regs*)+0x29>
c001187e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011882:	83 ec 04             	sub    esp,0x4
c0011885:	57                   	push   edi
c0011886:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001188c:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c001188f:	57                   	push   edi
c0011890:	50                   	push   eax
c0011891:	e8 69 ef ff ff       	call   c00107ff <Krnl::getProcessEnvPair(Process*, int)>
c0011896:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011899:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001189d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00118a1:	83 c4 0c             	add    esp,0xc
c00118a4:	85 d2                	test   edx,edx
c00118a6:	75 23                	jne    c00118cb <SysGetEnv(regs*)+0x86>
c00118a8:	83 ec 0c             	sub    esp,0xc
c00118ab:	50                   	push   eax
c00118ac:	e8 bf ec fe ff       	call   c0000570 <strlen>
c00118b1:	89 3c 24             	mov    DWORD PTR [esp],edi
c00118b4:	89 c3                	mov    ebx,eax
c00118b6:	e8 b5 ec fe ff       	call   c0000570 <strlen>
c00118bb:	83 c4 10             	add    esp,0x10
c00118be:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00118c2:	83 c4 10             	add    esp,0x10
c00118c5:	31 d2                	xor    edx,edx
c00118c7:	5b                   	pop    ebx
c00118c8:	5e                   	pop    esi
c00118c9:	5f                   	pop    edi
c00118ca:	c3                   	ret    
c00118cb:	83 ec 08             	sub    esp,0x8
c00118ce:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00118d1:	50                   	push   eax
c00118d2:	56                   	push   esi
c00118d3:	e8 68 ed fe ff       	call   c0000640 <strcpy>
c00118d8:	58                   	pop    eax
c00118d9:	5a                   	pop    edx
c00118da:	68 50 0e 02 c0       	push   0xc0020e50
c00118df:	56                   	push   esi
c00118e0:	e8 5b ef fe ff       	call   c0000840 <strcat>
c00118e5:	59                   	pop    ecx
c00118e6:	5b                   	pop    ebx
c00118e7:	57                   	push   edi
c00118e8:	56                   	push   esi
c00118e9:	e8 52 ef fe ff       	call   c0000840 <strcat>
c00118ee:	83 c4 10             	add    esp,0x10
c00118f1:	e9 78 ff ff ff       	jmp    c001186e <SysGetEnv(regs*)+0x29>

c00118f6 <SysSetFatAttrib(regs*)>:
c00118f6:	57                   	push   edi
c00118f7:	56                   	push   esi
c00118f8:	53                   	push   ebx
c00118f9:	83 ec 1c             	sub    esp,0x1c
c00118fc:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0011900:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011903:	68 14 01 00 00       	push   0x114
c0011908:	e8 a1 61 ff ff       	call   c0007aae <malloc>
c001190d:	83 c4 0c             	add    esp,0xc
c0011910:	89 c3                	mov    ebx,eax
c0011912:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011917:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001191a:	50                   	push   eax
c001191b:	57                   	push   edi
c001191c:	53                   	push   ebx
c001191d:	e8 58 96 ff ff       	call   c000af7a <File::File(char const*, Process*)>
c0011922:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011925:	83 c4 0c             	add    esp,0xc
c0011928:	0f b6 d4             	movzx  edx,ah
c001192b:	0f b6 c0             	movzx  eax,al
c001192e:	52                   	push   edx
c001192f:	50                   	push   eax
c0011930:	53                   	push   ebx
c0011931:	e8 12 99 ff ff       	call   c000b248 <File::chfatattr(unsigned char, unsigned char)>
c0011936:	83 c4 10             	add    esp,0x10
c0011939:	85 db                	test   ebx,ebx
c001193b:	74 14                	je     c0011951 <SysSetFatAttrib(regs*)+0x5b>
c001193d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011941:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011943:	83 ec 0c             	sub    esp,0xc
c0011946:	53                   	push   ebx
c0011947:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001194a:	83 c4 10             	add    esp,0x10
c001194d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011951:	85 c0                	test   eax,eax
c0011953:	0f 95 c0             	setne  al
c0011956:	31 d2                	xor    edx,edx
c0011958:	0f b6 c0             	movzx  eax,al
c001195b:	f7 d8                	neg    eax
c001195d:	83 d2 00             	adc    edx,0x0
c0011960:	83 c4 10             	add    esp,0x10
c0011963:	f7 da                	neg    edx
c0011965:	5b                   	pop    ebx
c0011966:	5e                   	pop    esi
c0011967:	5f                   	pop    edi
c0011968:	c3                   	ret    

c0011969 <SysPipe(regs*)>:
c0011969:	57                   	push   edi
c001196a:	56                   	push   esi
c001196b:	53                   	push   ebx
c001196c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011970:	83 ec 0c             	sub    esp,0xc
c0011973:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011976:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011979:	6a 20                	push   0x20
c001197b:	e8 2e 61 ff ff       	call   c0007aae <malloc>
c0011980:	89 c3                	mov    ebx,eax
c0011982:	58                   	pop    eax
c0011983:	5a                   	pop    edx
c0011984:	68 00 50 00 00       	push   0x5000
c0011989:	53                   	push   ebx
c001198a:	e8 83 6a ff ff       	call   c0008412 <Pipe::Pipe(int)>
c001198f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011992:	e8 2f 78 ff ff       	call   c00091c6 <UnixFile::getFileDescriptor()>
c0011997:	89 07                	mov    DWORD PTR [edi],eax
c0011999:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001199c:	e8 25 78 ff ff       	call   c00091c6 <UnixFile::getFileDescriptor()>
c00119a1:	83 c4 10             	add    esp,0x10
c00119a4:	89 06                	mov    DWORD PTR [esi],eax
c00119a6:	31 d2                	xor    edx,edx
c00119a8:	5b                   	pop    ebx
c00119a9:	31 c0                	xor    eax,eax
c00119ab:	5e                   	pop    esi
c00119ac:	5f                   	pop    edi
c00119ad:	c3                   	ret    

c00119ae <SysGetUnixTime(regs*)>:
c00119ae:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00119b3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00119b9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00119bd:	e9 c0 9f ff ff       	jmp    c000b982 <Clock::timeInSecondsLocal()>

c00119c2 <string_ends_with(char const*, char const*)>:
c00119c2:	57                   	push   edi
c00119c3:	56                   	push   esi
c00119c4:	53                   	push   ebx
c00119c5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00119c9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00119cd:	83 ec 0c             	sub    esp,0xc
c00119d0:	53                   	push   ebx
c00119d1:	e8 9a eb fe ff       	call   c0000570 <strlen>
c00119d6:	89 3c 24             	mov    DWORD PTR [esp],edi
c00119d9:	89 c6                	mov    esi,eax
c00119db:	e8 90 eb fe ff       	call   c0000570 <strlen>
c00119e0:	83 c4 10             	add    esp,0x10
c00119e3:	39 c6                	cmp    esi,eax
c00119e5:	7d 06                	jge    c00119ed <string_ends_with(char const*, char const*)+0x2b>
c00119e7:	5b                   	pop    ebx
c00119e8:	31 c0                	xor    eax,eax
c00119ea:	5e                   	pop    esi
c00119eb:	5f                   	pop    edi
c00119ec:	c3                   	ret    
c00119ed:	83 ec 08             	sub    esp,0x8
c00119f0:	29 c6                	sub    esi,eax
c00119f2:	57                   	push   edi
c00119f3:	01 f3                	add    ebx,esi
c00119f5:	53                   	push   ebx
c00119f6:	e8 55 ed fe ff       	call   c0000750 <strcmp>
c00119fb:	83 c4 10             	add    esp,0x10
c00119fe:	85 c0                	test   eax,eax
c0011a00:	5b                   	pop    ebx
c0011a01:	0f 94 c0             	sete   al
c0011a04:	5e                   	pop    esi
c0011a05:	0f b6 c0             	movzx  eax,al
c0011a08:	5f                   	pop    edi
c0011a09:	c3                   	ret    

c0011a0a <SysOpen(regs*)>:
c0011a0a:	56                   	push   esi
c0011a0b:	53                   	push   ebx
c0011a0c:	81 ec 04 01 00 00    	sub    esp,0x104
c0011a12:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011a19:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a1c:	85 c0                	test   eax,eax
c0011a1e:	0f 84 bd 01 00 00    	je     c0011be1 <SysOpen(regs*)+0x1d7>
c0011a24:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011a27:	85 c0                	test   eax,eax
c0011a29:	0f 84 b2 01 00 00    	je     c0011be1 <SysOpen(regs*)+0x1d7>
c0011a2f:	83 ec 04             	sub    esp,0x4
c0011a32:	68 52 0e 02 c0       	push   0xc0020e52
c0011a37:	50                   	push   eax
c0011a38:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011a3c:	56                   	push   esi
c0011a3d:	e8 82 93 ff ff       	call   c000adc4 <Fs::standardiseFiles(char*, char const*, char const*)>
c0011a42:	89 34 24             	mov    DWORD PTR [esp],esi
c0011a45:	e8 26 eb fe ff       	call   c0000570 <strlen>
c0011a4a:	83 c4 10             	add    esp,0x10
c0011a4d:	83 e8 01             	sub    eax,0x1
c0011a50:	74 21                	je     c0011a73 <SysOpen(regs*)+0x69>
c0011a52:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0011a56:	eb 12                	jmp    c0011a6a <SysOpen(regs*)+0x60>
c0011a58:	83 fa 3a             	cmp    edx,0x3a
c0011a5b:	74 12                	je     c0011a6f <SysOpen(regs*)+0x65>
c0011a5d:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011a61:	83 e8 01             	sub    eax,0x1
c0011a64:	74 0d                	je     c0011a73 <SysOpen(regs*)+0x69>
c0011a66:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0011a6a:	83 fa 2e             	cmp    edx,0x2e
c0011a6d:	75 e9                	jne    c0011a58 <SysOpen(regs*)+0x4e>
c0011a6f:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0011a73:	83 ec 08             	sub    esp,0x8
c0011a76:	68 56 0e 02 c0       	push   0xc0020e56
c0011a7b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011a7e:	50                   	push   eax
c0011a7f:	e8 3e ff ff ff       	call   c00119c2 <string_ends_with(char const*, char const*)>
c0011a84:	83 c4 10             	add    esp,0x10
c0011a87:	85 c0                	test   eax,eax
c0011a89:	74 1d                	je     c0011aa8 <SysOpen(regs*)+0x9e>
c0011a8b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a8e:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0011a94:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011a9b:	81 c4 04 01 00 00    	add    esp,0x104
c0011aa1:	31 c0                	xor    eax,eax
c0011aa3:	31 d2                	xor    edx,edx
c0011aa5:	5b                   	pop    ebx
c0011aa6:	5e                   	pop    esi
c0011aa7:	c3                   	ret    
c0011aa8:	83 ec 08             	sub    esp,0x8
c0011aab:	68 5b 0e 02 c0       	push   0xc0020e5b
c0011ab0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011ab3:	50                   	push   eax
c0011ab4:	e8 09 ff ff ff       	call   c00119c2 <string_ends_with(char const*, char const*)>
c0011ab9:	83 c4 10             	add    esp,0x10
c0011abc:	85 c0                	test   eax,eax
c0011abe:	75 cb                	jne    c0011a8b <SysOpen(regs*)+0x81>
c0011ac0:	83 ec 08             	sub    esp,0x8
c0011ac3:	68 57 0e 02 c0       	push   0xc0020e57
c0011ac8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011acb:	50                   	push   eax
c0011acc:	e8 7f ec fe ff       	call   c0000750 <strcmp>
c0011ad1:	83 c4 10             	add    esp,0x10
c0011ad4:	85 c0                	test   eax,eax
c0011ad6:	74 b3                	je     c0011a8b <SysOpen(regs*)+0x81>
c0011ad8:	83 ec 08             	sub    esp,0x8
c0011adb:	68 56 0e 02 c0       	push   0xc0020e56
c0011ae0:	56                   	push   esi
c0011ae1:	e8 dc fe ff ff       	call   c00119c2 <string_ends_with(char const*, char const*)>
c0011ae6:	83 c4 10             	add    esp,0x10
c0011ae9:	85 c0                	test   eax,eax
c0011aeb:	75 9e                	jne    c0011a8b <SysOpen(regs*)+0x81>
c0011aed:	83 ec 08             	sub    esp,0x8
c0011af0:	68 60 0e 02 c0       	push   0xc0020e60
c0011af5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011af8:	50                   	push   eax
c0011af9:	e8 c4 fe ff ff       	call   c00119c2 <string_ends_with(char const*, char const*)>
c0011afe:	83 c4 10             	add    esp,0x10
c0011b01:	85 c0                	test   eax,eax
c0011b03:	0f 85 eb 00 00 00    	jne    c0011bf4 <SysOpen(regs*)+0x1ea>
c0011b09:	83 ec 08             	sub    esp,0x8
c0011b0c:	68 65 0e 02 c0       	push   0xc0020e65
c0011b11:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011b14:	50                   	push   eax
c0011b15:	e8 a8 fe ff ff       	call   c00119c2 <string_ends_with(char const*, char const*)>
c0011b1a:	83 c4 10             	add    esp,0x10
c0011b1d:	85 c0                	test   eax,eax
c0011b1f:	0f 85 cf 00 00 00    	jne    c0011bf4 <SysOpen(regs*)+0x1ea>
c0011b25:	83 ec 08             	sub    esp,0x8
c0011b28:	68 61 0e 02 c0       	push   0xc0020e61
c0011b2d:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011b30:	51                   	push   ecx
c0011b31:	e8 1a ec fe ff       	call   c0000750 <strcmp>
c0011b36:	83 c4 10             	add    esp,0x10
c0011b39:	85 c0                	test   eax,eax
c0011b3b:	0f 84 b3 00 00 00    	je     c0011bf4 <SysOpen(regs*)+0x1ea>
c0011b41:	83 ec 08             	sub    esp,0x8
c0011b44:	68 60 0e 02 c0       	push   0xc0020e60
c0011b49:	56                   	push   esi
c0011b4a:	e8 73 fe ff ff       	call   c00119c2 <string_ends_with(char const*, char const*)>
c0011b4f:	83 c4 10             	add    esp,0x10
c0011b52:	85 c0                	test   eax,eax
c0011b54:	0f 85 9a 00 00 00    	jne    c0011bf4 <SysOpen(regs*)+0x1ea>
c0011b5a:	83 ec 0c             	sub    esp,0xc
c0011b5d:	68 14 01 00 00       	push   0x114
c0011b62:	e8 47 5f ff ff       	call   c0007aae <malloc>
c0011b67:	83 c4 0c             	add    esp,0xc
c0011b6a:	89 c6                	mov    esi,eax
c0011b6c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b71:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b74:	50                   	push   eax
c0011b75:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011b78:	52                   	push   edx
c0011b79:	56                   	push   esi
c0011b7a:	e8 fb 93 ff ff       	call   c000af7a <File::File(char const*, Process*)>
c0011b7f:	83 c4 10             	add    esp,0x10
c0011b82:	85 f6                	test   esi,esi
c0011b84:	74 5b                	je     c0011be1 <SysOpen(regs*)+0x1d7>
c0011b86:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011b89:	0f b6 c2             	movzx  eax,dl
c0011b8c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011b8f:	89 d0                	mov    eax,edx
c0011b91:	83 e0 01             	and    eax,0x1
c0011b94:	f6 c2 02             	test   dl,0x2
c0011b97:	74 03                	je     c0011b9c <SysOpen(regs*)+0x192>
c0011b99:	83 c8 02             	or     eax,0x2
c0011b9c:	f6 c2 04             	test   dl,0x4
c0011b9f:	74 03                	je     c0011ba4 <SysOpen(regs*)+0x19a>
c0011ba1:	83 c8 04             	or     eax,0x4
c0011ba4:	f6 c2 08             	test   dl,0x8
c0011ba7:	74 03                	je     c0011bac <SysOpen(regs*)+0x1a2>
c0011ba9:	83 c8 0a             	or     eax,0xa
c0011bac:	80 e2 10             	and    dl,0x10
c0011baf:	74 03                	je     c0011bb4 <SysOpen(regs*)+0x1aa>
c0011bb1:	83 c8 12             	or     eax,0x12
c0011bb4:	83 ec 08             	sub    esp,0x8
c0011bb7:	50                   	push   eax
c0011bb8:	56                   	push   esi
c0011bb9:	e8 78 94 ff ff       	call   c000b036 <File::open(FileOpenMode)>
c0011bbe:	83 c4 10             	add    esp,0x10
c0011bc1:	85 c0                	test   eax,eax
c0011bc3:	75 1c                	jne    c0011be1 <SysOpen(regs*)+0x1d7>
c0011bc5:	83 ec 0c             	sub    esp,0xc
c0011bc8:	56                   	push   esi
c0011bc9:	e8 f8 75 ff ff       	call   c00091c6 <UnixFile::getFileDescriptor()>
c0011bce:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011bd1:	83 c4 10             	add    esp,0x10
c0011bd4:	89 02                	mov    DWORD PTR [edx],eax
c0011bd6:	c1 f8 1f             	sar    eax,0x1f
c0011bd9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011bdc:	e9 ba fe ff ff       	jmp    c0011a9b <SysOpen(regs*)+0x91>
c0011be1:	81 c4 04 01 00 00    	add    esp,0x104
c0011be7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011bec:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011bf1:	5b                   	pop    ebx
c0011bf2:	5e                   	pop    esi
c0011bf3:	c3                   	ret    
c0011bf4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011bf7:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011bfd:	e9 92 fe ff ff       	jmp    c0011a94 <SysOpen(regs*)+0x8a>

c0011c02 <KeSystemCall(regs*, void*)>:
c0011c02:	53                   	push   ebx
c0011c03:	83 ec 08             	sub    esp,0x8
c0011c06:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011c0a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011c0d:	83 f8 3b             	cmp    eax,0x3b
c0011c10:	77 16                	ja     c0011c28 <KeSystemCall(regs*, void*)+0x26>
c0011c12:	8b 14 85 20 22 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffddde0]
c0011c19:	85 d2                	test   edx,edx
c0011c1b:	74 0b                	je     c0011c28 <KeSystemCall(regs*, void*)+0x26>
c0011c1d:	83 ec 0c             	sub    esp,0xc
c0011c20:	53                   	push   ebx
c0011c21:	ff d2                	call   edx
c0011c23:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011c26:	eb 0d                	jmp    c0011c35 <KeSystemCall(regs*, void*)+0x33>
c0011c28:	52                   	push   edx
c0011c29:	52                   	push   edx
c0011c2a:	50                   	push   eax
c0011c2b:	68 6a 0e 02 c0       	push   0xc0020e6a
c0011c30:	e8 c2 8d ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c0011c35:	83 c4 10             	add    esp,0x10
c0011c38:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011c3d:	31 d2                	xor    edx,edx
c0011c3f:	83 c4 08             	add    esp,0x8
c0011c42:	5b                   	pop    ebx
c0011c43:	c3                   	ret    

c0011c44 <KeSwitchEndian16(unsigned short)>:
c0011c44:	83 ec 04             	sub    esp,0x4
c0011c47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011c4b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0011c4f:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011c53:	c1 f8 08             	sar    eax,0x8
c0011c56:	89 c2                	mov    edx,eax
c0011c58:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011c5c:	c1 e0 08             	shl    eax,0x8
c0011c5f:	09 d0                	or     eax,edx
c0011c61:	83 c4 04             	add    esp,0x4
c0011c64:	c3                   	ret    
c0011c65:	8d 76 00             	lea    esi,[esi+0x0]

c0011c68 <KeSwitchEndian32(unsigned int)>:
c0011c68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c6c:	c1 e8 18             	shr    eax,0x18
c0011c6f:	89 c2                	mov    edx,eax
c0011c71:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c75:	c1 e0 08             	shl    eax,0x8
c0011c78:	25 00 00 ff 00       	and    eax,0xff0000
c0011c7d:	09 c2                	or     edx,eax
c0011c7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c83:	c1 e8 08             	shr    eax,0x8
c0011c86:	25 00 ff 00 00       	and    eax,0xff00
c0011c8b:	09 c2                	or     edx,eax
c0011c8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c91:	c1 e0 18             	shl    eax,0x18
c0011c94:	09 d0                	or     eax,edx
c0011c96:	c3                   	ret    
c0011c97:	90                   	nop

c0011c98 <EthernetCRC32(unsigned char*, int)>:
c0011c98:	83 ec 10             	sub    esp,0x10
c0011c9b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011ca0:	75 0a                	jne    c0011cac <EthernetCRC32(unsigned char*, int)+0x14>
c0011ca2:	b8 00 00 00 00       	mov    eax,0x0
c0011ca7:	e9 8c 00 00 00       	jmp    c0011d38 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011cac:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0011cb1:	7f 09                	jg     c0011cbc <EthernetCRC32(unsigned char*, int)+0x24>
c0011cb3:	b8 00 00 00 00       	mov    eax,0x0
c0011cb8:	eb 7e                	jmp    c0011d38 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011cba:	66 90                	xchg   ax,ax
c0011cbc:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0011cc4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011ccc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011cd0:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0011cd4:	7d 5a                	jge    c0011d30 <EthernetCRC32(unsigned char*, int)+0x98>
c0011cd6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011cda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011cde:	01 d0                	add    eax,edx
c0011ce0:	8a 00                	mov    al,BYTE PTR [eax]
c0011ce2:	0f b6 c0             	movzx  eax,al
c0011ce5:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0011ce9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011cf1:	8d 76 00             	lea    esi,[esi+0x0]
c0011cf4:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0011cf9:	7f 2d                	jg     c0011d28 <EthernetCRC32(unsigned char*, int)+0x90>
c0011cfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cff:	83 e0 01             	and    eax,0x1
c0011d02:	74 10                	je     c0011d14 <EthernetCRC32(unsigned char*, int)+0x7c>
c0011d04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d08:	d1 e8                	shr    eax,1
c0011d0a:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0011d0f:	eb 0b                	jmp    c0011d1c <EthernetCRC32(unsigned char*, int)+0x84>
c0011d11:	8d 76 00             	lea    esi,[esi+0x0]
c0011d14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d18:	d1 e8                	shr    eax,1
c0011d1a:	66 90                	xchg   ax,ax
c0011d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011d20:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0011d25:	eb cd                	jmp    c0011cf4 <EthernetCRC32(unsigned char*, int)+0x5c>
c0011d27:	90                   	nop
c0011d28:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0011d2d:	eb 9d                	jmp    c0011ccc <EthernetCRC32(unsigned char*, int)+0x34>
c0011d2f:	90                   	nop
c0011d30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d34:	f7 d0                	not    eax
c0011d36:	66 90                	xchg   ax,ax
c0011d38:	83 c4 10             	add    esp,0x10
c0011d3b:	c3                   	ret    

c0011d3c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0011d3c:	83 ec 2c             	sub    esp,0x2c
c0011d3f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011d43:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011d48:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d4c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011d50:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011d54:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011d57:	0f b7 c0             	movzx  eax,ax
c0011d5a:	3d 06 08 00 00       	cmp    eax,0x806
c0011d5f:	75 13                	jne    c0011d74 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0011d61:	83 ec 0c             	sub    esp,0xc
c0011d64:	68 7e 0e 02 c0       	push   0xc0020e7e
c0011d69:	e8 89 8c ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c0011d6e:	83 c4 10             	add    esp,0x10
c0011d71:	eb 25                	jmp    c0011d98 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0011d73:	90                   	nop
c0011d74:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011d78:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011d7b:	0f b7 c0             	movzx  eax,ax
c0011d7e:	3d 00 08 00 00       	cmp    eax,0x800
c0011d83:	75 13                	jne    c0011d98 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0011d85:	83 ec 0c             	sub    esp,0xc
c0011d88:	68 94 0e 02 c0       	push   0xc0020e94
c0011d8d:	e8 65 8c ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c0011d92:	83 c4 10             	add    esp,0x10
c0011d95:	8d 76 00             	lea    esi,[esi+0x0]
c0011d98:	90                   	nop
c0011d99:	83 c4 2c             	add    esp,0x2c
c0011d9c:	c3                   	ret    

c0011d9d <CmOpen(char const*)>:
c0011d9d:	57                   	push   edi
c0011d9e:	56                   	push   esi
c0011d9f:	53                   	push   ebx
c0011da0:	83 ec 1c             	sub    esp,0x1c
c0011da3:	6a 30                	push   0x30
c0011da5:	e8 04 5d ff ff       	call   c0007aae <malloc>
c0011daa:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011db1:	89 c3                	mov    ebx,eax
c0011db3:	e8 f6 5c ff ff       	call   c0007aae <malloc>
c0011db8:	83 c4 0c             	add    esp,0xc
c0011dbb:	89 c6                	mov    esi,eax
c0011dbd:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0011dc3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011dc7:	50                   	push   eax
c0011dc8:	e8 ad 91 ff ff       	call   c000af7a <File::File(char const*, Process*)>
c0011dcd:	83 c4 0c             	add    esp,0xc
c0011dd0:	89 33                	mov    DWORD PTR [ebx],esi
c0011dd2:	8d 44 24 07          	lea    eax,[esp+0x7]
c0011dd6:	50                   	push   eax
c0011dd7:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011ddb:	50                   	push   eax
c0011ddc:	56                   	push   esi
c0011ddd:	e8 00 95 ff ff       	call   c000b2e2 <File::stat(unsigned long long*, bool*)>
c0011de2:	5a                   	pop    edx
c0011de3:	59                   	pop    ecx
c0011de4:	6a 01                	push   0x1
c0011de6:	ff 33                	push   DWORD PTR [ebx]
c0011de8:	e8 49 92 ff ff       	call   c000b036 <File::open(FileOpenMode)>
c0011ded:	5e                   	pop    esi
c0011dee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011df2:	e8 b7 5c ff ff       	call   c0007aae <malloc>
c0011df7:	5a                   	pop    edx
c0011df8:	89 c7                	mov    edi,eax
c0011dfa:	8d 74 24 10          	lea    esi,[esp+0x10]
c0011dfe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011e00:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e02:	56                   	push   esi
c0011e03:	57                   	push   edi
c0011e04:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011e08:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011e0c:	50                   	push   eax
c0011e0d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011e10:	83 c4 14             	add    esp,0x14
c0011e13:	ff 33                	push   DWORD PTR [ebx]
c0011e15:	e8 7a 92 ff ff       	call   c000b094 <File::close()>
c0011e1a:	59                   	pop    ecx
c0011e1b:	58                   	pop    eax
c0011e1c:	6a 13                	push   0x13
c0011e1e:	ff 33                	push   DWORD PTR [ebx]
c0011e20:	e8 11 92 ff ff       	call   c000b036 <File::open(FileOpenMode)>
c0011e25:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011e27:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e29:	89 34 24             	mov    DWORD PTR [esp],esi
c0011e2c:	57                   	push   edi
c0011e2d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011e31:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011e35:	50                   	push   eax
c0011e36:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011e39:	83 c4 14             	add    esp,0x14
c0011e3c:	57                   	push   edi
c0011e3d:	e8 7c 5c ff ff       	call   c0007abe <free>
c0011e42:	83 c4 10             	add    esp,0x10
c0011e45:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0011e48:	75 10                	jne    c0011e5a <CmOpen(char const*)+0xbd>
c0011e4a:	83 ec 0c             	sub    esp,0xc
c0011e4d:	68 a9 0e 02 c0       	push   0xc0020ea9
c0011e52:	e8 d0 ea ff ff       	call   c0010927 <KePanic(char const*)>
c0011e57:	83 c4 10             	add    esp,0x10
c0011e5a:	8d 7b 05             	lea    edi,[ebx+0x5]
c0011e5d:	50                   	push   eax
c0011e5e:	6a 00                	push   0x0
c0011e60:	6a 00                	push   0x0
c0011e62:	ff 33                	push   DWORD PTR [ebx]
c0011e64:	e8 8b 92 ff ff       	call   c000b0f4 <File::seek(unsigned long long)>
c0011e69:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011e6b:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e6d:	89 34 24             	mov    DWORD PTR [esp],esi
c0011e70:	57                   	push   edi
c0011e71:	6a 00                	push   0x0
c0011e73:	6a 2b                	push   0x2b
c0011e75:	50                   	push   eax
c0011e76:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011e79:	83 c4 1c             	add    esp,0x1c
c0011e7c:	6a 00                	push   0x0
c0011e7e:	6a 00                	push   0x0
c0011e80:	ff 33                	push   DWORD PTR [ebx]
c0011e82:	e8 6d 92 ff ff       	call   c000b0f4 <File::seek(unsigned long long)>
c0011e87:	83 c4 0c             	add    esp,0xc
c0011e8a:	6a 08                	push   0x8
c0011e8c:	68 ba 0e 02 c0       	push   0xc0020eba
c0011e91:	57                   	push   edi
c0011e92:	e8 e9 e4 fe ff       	call   c0000380 <memcmp>
c0011e97:	83 c4 10             	add    esp,0x10
c0011e9a:	85 c0                	test   eax,eax
c0011e9c:	74 10                	je     c0011eae <CmOpen(char const*)+0x111>
c0011e9e:	83 ec 0c             	sub    esp,0xc
c0011ea1:	68 c3 0e 02 c0       	push   0xc0020ec3
c0011ea6:	e8 7c ea ff ff       	call   c0010927 <KePanic(char const*)>
c0011eab:	83 c4 10             	add    esp,0x10
c0011eae:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0011eb2:	89 d8                	mov    eax,ebx
c0011eb4:	83 c4 10             	add    esp,0x10
c0011eb7:	5b                   	pop    ebx
c0011eb8:	5e                   	pop    esi
c0011eb9:	5f                   	pop    edi
c0011eba:	c3                   	ret    

c0011ebb <CmClose(Reghive_Tag*)>:
c0011ebb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ebf:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0011ec3:	74 0b                	je     c0011ed0 <CmClose(Reghive_Tag*)+0x15>
c0011ec5:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ec7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011ecb:	e9 c4 91 ff ff       	jmp    c000b094 <File::close()>
c0011ed0:	c3                   	ret    

c0011ed1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0011ed1:	53                   	push   ebx
c0011ed2:	83 ec 18             	sub    esp,0x18
c0011ed5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ed9:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011edd:	74 29                	je     c0011f08 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0011edf:	50                   	push   eax
c0011ee0:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0011ee5:	99                   	cdq    
c0011ee6:	52                   	push   edx
c0011ee7:	50                   	push   eax
c0011ee8:	ff 33                	push   DWORD PTR [ebx]
c0011eea:	e8 05 92 ff ff       	call   c000b0f4 <File::seek(unsigned long long)>
c0011eef:	5a                   	pop    edx
c0011ef0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011ef2:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011ef6:	8b 10                	mov    edx,DWORD PTR [eax]
c0011ef8:	51                   	push   ecx
c0011ef9:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011efd:	6a 00                	push   0x0
c0011eff:	6a 2b                	push   0x2b
c0011f01:	50                   	push   eax
c0011f02:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011f05:	83 c4 20             	add    esp,0x20
c0011f08:	83 c4 18             	add    esp,0x18
c0011f0b:	5b                   	pop    ebx
c0011f0c:	c3                   	ret    

c0011f0d <CmGetString(Reghive_Tag*, int, char*)>:
c0011f0d:	55                   	push   ebp
c0011f0e:	57                   	push   edi
c0011f0f:	56                   	push   esi
c0011f10:	53                   	push   ebx
c0011f11:	31 db                	xor    ebx,ebx
c0011f13:	83 ec 70             	sub    esp,0x70
c0011f16:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0011f1d:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0011f21:	50                   	push   eax
c0011f22:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0011f29:	55                   	push   ebp
c0011f2a:	e8 a2 ff ff ff       	call   c0011ed1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011f2f:	83 c4 10             	add    esp,0x10
c0011f32:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0011f37:	c1 e0 08             	shl    eax,0x8
c0011f3a:	89 c2                	mov    edx,eax
c0011f3c:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0011f41:	09 d0                	or     eax,edx
c0011f43:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0011f48:	c1 e0 08             	shl    eax,0x8
c0011f4b:	09 d0                	or     eax,edx
c0011f4d:	74 25                	je     c0011f74 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0011f4f:	6b fb 0d             	imul   edi,ebx,0xd
c0011f52:	52                   	push   edx
c0011f53:	8d 54 24 39          	lea    edx,[esp+0x39]
c0011f57:	52                   	push   edx
c0011f58:	50                   	push   eax
c0011f59:	55                   	push   ebp
c0011f5a:	e8 72 ff ff ff       	call   c0011ed1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011f5f:	8d 74 24 49          	lea    esi,[esp+0x49]
c0011f63:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0011f6a:	b9 27 00 00 00       	mov    ecx,0x27
c0011f6f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011f71:	83 c4 10             	add    esp,0x10
c0011f74:	83 c3 03             	add    ebx,0x3
c0011f77:	83 fb 15             	cmp    ebx,0x15
c0011f7a:	75 b6                	jne    c0011f32 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0011f7c:	83 c4 6c             	add    esp,0x6c
c0011f7f:	5b                   	pop    ebx
c0011f80:	5e                   	pop    esi
c0011f81:	5f                   	pop    edi
c0011f82:	5d                   	pop    ebp
c0011f83:	c3                   	ret    

c0011f84 <CmEnterDirectory(Reghive_Tag*, int)>:
c0011f84:	83 ec 40             	sub    esp,0x40
c0011f87:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011f8b:	50                   	push   eax
c0011f8c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f90:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f94:	e8 38 ff ff ff       	call   c0011ed1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011f99:	83 c4 10             	add    esp,0x10
c0011f9c:	83 c8 ff             	or     eax,0xffffffff
c0011f9f:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0011fa4:	75 19                	jne    c0011fbf <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0011fa6:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0011fab:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011fb0:	c1 e0 08             	shl    eax,0x8
c0011fb3:	09 c2                	or     edx,eax
c0011fb5:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0011fba:	c1 e0 10             	shl    eax,0x10
c0011fbd:	09 d0                	or     eax,edx
c0011fbf:	83 c4 3c             	add    esp,0x3c
c0011fc2:	c3                   	ret    

c0011fc3 <CmGetNext(Reghive_Tag*, int)>:
c0011fc3:	83 ec 40             	sub    esp,0x40
c0011fc6:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011fca:	50                   	push   eax
c0011fcb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011fcf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011fd3:	e8 f9 fe ff ff       	call   c0011ed1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011fd8:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0011fdd:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011fe2:	c1 e0 08             	shl    eax,0x8
c0011fe5:	09 c2                	or     edx,eax
c0011fe7:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0011fec:	83 c4 4c             	add    esp,0x4c
c0011fef:	c1 e0 10             	shl    eax,0x10
c0011ff2:	09 d0                	or     eax,edx
c0011ff4:	c3                   	ret    

c0011ff5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0011ff5:	53                   	push   ebx
c0011ff6:	83 ec 18             	sub    esp,0x18
c0011ff9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ffd:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012001:	74 29                	je     c001202c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012003:	50                   	push   eax
c0012004:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012009:	99                   	cdq    
c001200a:	52                   	push   edx
c001200b:	50                   	push   eax
c001200c:	ff 33                	push   DWORD PTR [ebx]
c001200e:	e8 e1 90 ff ff       	call   c000b0f4 <File::seek(unsigned long long)>
c0012013:	5a                   	pop    edx
c0012014:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012016:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001201a:	8b 10                	mov    edx,DWORD PTR [eax]
c001201c:	51                   	push   ecx
c001201d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012021:	6a 00                	push   0x0
c0012023:	6a 2b                	push   0x2b
c0012025:	50                   	push   eax
c0012026:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012029:	83 c4 20             	add    esp,0x20
c001202c:	83 c4 18             	add    esp,0x18
c001202f:	5b                   	pop    ebx
c0012030:	c3                   	ret    

c0012031 <CmFreeExtent(Reghive_Tag*, int)>:
c0012031:	53                   	push   ebx
c0012032:	83 ec 3c             	sub    esp,0x3c
c0012035:	6a 2b                	push   0x2b
c0012037:	6a 00                	push   0x0
c0012039:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c001203d:	53                   	push   ebx
c001203e:	e8 ad e4 fe ff       	call   c00004f0 <memset>
c0012043:	83 c4 0c             	add    esp,0xc
c0012046:	53                   	push   ebx
c0012047:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001204b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001204f:	e8 a1 ff ff ff       	call   c0011ff5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012054:	83 c4 48             	add    esp,0x48
c0012057:	5b                   	pop    ebx
c0012058:	c3                   	ret    

c0012059 <CmUpdateHeader(Reghive_Tag*)>:
c0012059:	83 ec 0c             	sub    esp,0xc
c001205c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012060:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012064:	74 10                	je     c0012076 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0012066:	52                   	push   edx
c0012067:	8d 50 05             	lea    edx,[eax+0x5]
c001206a:	52                   	push   edx
c001206b:	6a 00                	push   0x0
c001206d:	50                   	push   eax
c001206e:	e8 82 ff ff ff       	call   c0011ff5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012073:	83 c4 10             	add    esp,0x10
c0012076:	83 c4 0c             	add    esp,0xc
c0012079:	c3                   	ret    

c001207a <CmExpand(Reghive_Tag*, int)>:
c001207a:	57                   	push   edi
c001207b:	56                   	push   esi
c001207c:	83 ce ff             	or     esi,0xffffffff
c001207f:	53                   	push   ebx
c0012080:	83 ec 30             	sub    esp,0x30
c0012083:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012087:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c001208b:	74 5f                	je     c00120ec <CmExpand(Reghive_Tag*, int)+0x72>
c001208d:	31 d2                	xor    edx,edx
c001208f:	31 f6                	xor    esi,esi
c0012091:	50                   	push   eax
c0012092:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0012096:	52                   	push   edx
c0012097:	50                   	push   eax
c0012098:	ff 33                	push   DWORD PTR [ebx]
c001209a:	e8 55 90 ff ff       	call   c000b0f4 <File::seek(unsigned long long)>
c001209f:	83 c4 0c             	add    esp,0xc
c00120a2:	6a 2b                	push   0x2b
c00120a4:	6a 00                	push   0x0
c00120a6:	8d 7c 24 11          	lea    edi,[esp+0x11]
c00120aa:	57                   	push   edi
c00120ab:	e8 40 e4 fe ff       	call   c00004f0 <memset>
c00120b0:	83 c4 10             	add    esp,0x10
c00120b3:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c00120b7:	7d 1b                	jge    c00120d4 <CmExpand(Reghive_Tag*, int)+0x5a>
c00120b9:	83 ec 0c             	sub    esp,0xc
c00120bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00120be:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c00120c2:	8b 10                	mov    edx,DWORD PTR [eax]
c00120c4:	46                   	inc    esi
c00120c5:	51                   	push   ecx
c00120c6:	57                   	push   edi
c00120c7:	6a 00                	push   0x0
c00120c9:	6a 2b                	push   0x2b
c00120cb:	50                   	push   eax
c00120cc:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00120cf:	83 c4 20             	add    esp,0x20
c00120d2:	eb df                	jmp    c00120b3 <CmExpand(Reghive_Tag*, int)+0x39>
c00120d4:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00120d8:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c00120db:	83 ec 0c             	sub    esp,0xc
c00120de:	01 f2                	add    edx,esi
c00120e0:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c00120e3:	53                   	push   ebx
c00120e4:	e8 70 ff ff ff       	call   c0012059 <CmUpdateHeader(Reghive_Tag*)>
c00120e9:	83 c4 10             	add    esp,0x10
c00120ec:	83 c4 30             	add    esp,0x30
c00120ef:	89 f0                	mov    eax,esi
c00120f1:	5b                   	pop    ebx
c00120f2:	5e                   	pop    esi
c00120f3:	5f                   	pop    edi
c00120f4:	c3                   	ret    

c00120f5 <CmFindUnusedExtent(Reghive_Tag*)>:
c00120f5:	55                   	push   ebp
c00120f6:	57                   	push   edi
c00120f7:	56                   	push   esi
c00120f8:	53                   	push   ebx
c00120f9:	83 cb ff             	or     ebx,0xffffffff
c00120fc:	83 ec 1c             	sub    esp,0x1c
c00120ff:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012103:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0012107:	74 68                	je     c0012171 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012109:	be 2b 00 00 00       	mov    esi,0x2b
c001210e:	51                   	push   ecx
c001210f:	31 ff                	xor    edi,edi
c0012111:	6a 00                	push   0x0
c0012113:	31 db                	xor    ebx,ebx
c0012115:	6a 00                	push   0x0
c0012117:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c001211a:	e8 d5 8f ff ff       	call   c000b0f4 <File::seek(unsigned long long)>
c001211f:	83 c4 10             	add    esp,0x10
c0012122:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012125:	76 3b                	jbe    c0012162 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0012127:	83 ec 0c             	sub    esp,0xc
c001212a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001212d:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012131:	8b 10                	mov    edx,DWORD PTR [eax]
c0012133:	51                   	push   ecx
c0012134:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012138:	51                   	push   ecx
c0012139:	6a 00                	push   0x0
c001213b:	6a 01                	push   0x1
c001213d:	50                   	push   eax
c001213e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012141:	83 c4 20             	add    esp,0x20
c0012144:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012149:	74 26                	je     c0012171 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c001214b:	43                   	inc    ebx
c001214c:	52                   	push   edx
c001214d:	57                   	push   edi
c001214e:	56                   	push   esi
c001214f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012152:	e8 9d 8f ff ff       	call   c000b0f4 <File::seek(unsigned long long)>
c0012157:	83 c6 2b             	add    esi,0x2b
c001215a:	83 d7 00             	adc    edi,0x0
c001215d:	83 c4 10             	add    esp,0x10
c0012160:	eb c0                	jmp    c0012122 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0012162:	50                   	push   eax
c0012163:	50                   	push   eax
c0012164:	6a 40                	push   0x40
c0012166:	55                   	push   ebp
c0012167:	e8 0e ff ff ff       	call   c001207a <CmExpand(Reghive_Tag*, int)>
c001216c:	83 c4 10             	add    esp,0x10
c001216f:	89 c3                	mov    ebx,eax
c0012171:	83 c4 1c             	add    esp,0x1c
c0012174:	89 d8                	mov    eax,ebx
c0012176:	5b                   	pop    ebx
c0012177:	5e                   	pop    esi
c0012178:	5f                   	pop    edi
c0012179:	5d                   	pop    ebp
c001217a:	c3                   	ret    

c001217b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c001217b:	55                   	push   ebp
c001217c:	57                   	push   edi
c001217d:	56                   	push   esi
c001217e:	53                   	push   ebx
c001217f:	81 ec 88 00 00 00    	sub    esp,0x88
c0012185:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c001218c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012193:	e8 5d ff ff ff       	call   c00120f5 <CmFindUnusedExtent(Reghive_Tag*)>
c0012198:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001219c:	83 c4 0c             	add    esp,0xc
c001219f:	6a 2b                	push   0x2b
c00121a1:	6a 00                	push   0x0
c00121a3:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c00121a7:	55                   	push   ebp
c00121a8:	e8 43 e3 fe ff       	call   c00004f0 <memset>
c00121ad:	83 c4 10             	add    esp,0x10
c00121b0:	85 db                	test   ebx,ebx
c00121b2:	74 12                	je     c00121c6 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c00121b4:	51                   	push   ecx
c00121b5:	55                   	push   ebp
c00121b6:	53                   	push   ebx
c00121b7:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00121be:	e8 0e fd ff ff       	call   c0011ed1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00121c3:	83 c4 10             	add    esp,0x10
c00121c6:	8d 7c 24 45          	lea    edi,[esp+0x45]
c00121ca:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c00121d1:	b9 2b 00 00 00       	mov    ecx,0x2b
c00121d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00121d8:	85 db                	test   ebx,ebx
c00121da:	74 49                	je     c0012225 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c00121dc:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c00121e1:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c00121e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00121ea:	c1 e0 08             	shl    eax,0x8
c00121ed:	81 e2 ff ff ff 00    	and    edx,0xffffff
c00121f3:	09 c8                	or     eax,ecx
c00121f5:	74 11                	je     c0012208 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c00121f7:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00121fb:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c00121ff:	c1 e8 10             	shr    eax,0x10
c0012202:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0012206:	eb 0f                	jmp    c0012217 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0012208:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c001220d:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012212:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012217:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c001221b:	c1 ea 08             	shr    edx,0x8
c001221e:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0012223:	eb 0f                	jmp    c0012234 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0012225:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c001222a:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c001222f:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012234:	52                   	push   edx
c0012235:	8d 44 24 49          	lea    eax,[esp+0x49]
c0012239:	50                   	push   eax
c001223a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001223e:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012245:	e8 ab fd ff ff       	call   c0011ff5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001224a:	83 c4 10             	add    esp,0x10
c001224d:	85 db                	test   ebx,ebx
c001224f:	74 12                	je     c0012263 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0012251:	50                   	push   eax
c0012252:	55                   	push   ebp
c0012253:	53                   	push   ebx
c0012254:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001225b:	e8 95 fd ff ff       	call   c0011ff5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012260:	83 c4 10             	add    esp,0x10
c0012263:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012267:	83 c4 7c             	add    esp,0x7c
c001226a:	5b                   	pop    ebx
c001226b:	5e                   	pop    esi
c001226c:	5f                   	pop    edi
c001226d:	5d                   	pop    ebp
c001226e:	c3                   	ret    

c001226f <CmSetString(Reghive_Tag*, int, char const*)>:
c001226f:	55                   	push   ebp
c0012270:	57                   	push   edi
c0012271:	56                   	push   esi
c0012272:	53                   	push   ebx
c0012273:	bb 27 00 00 00       	mov    ebx,0x27
c0012278:	81 ec 88 00 00 00    	sub    esp,0x88
c001227e:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012285:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c001228c:	e8 df e2 fe ff       	call   c0000570 <strlen>
c0012291:	8d 48 26             	lea    ecx,[eax+0x26]
c0012294:	89 c8                	mov    eax,ecx
c0012296:	99                   	cdq    
c0012297:	f7 fb                	idiv   ebx
c0012299:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001229d:	83 c4 10             	add    esp,0x10
c00122a0:	81 f9 37 01 00 00    	cmp    ecx,0x137
c00122a6:	7e 10                	jle    c00122b8 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c00122a8:	83 ec 0c             	sub    esp,0xc
c00122ab:	68 d4 0e 02 c0       	push   0xc0020ed4
c00122b0:	e8 72 e6 ff ff       	call   c0010927 <KePanic(char const*)>
c00122b5:	83 c4 10             	add    esp,0x10
c00122b8:	31 ff                	xor    edi,edi
c00122ba:	50                   	push   eax
c00122bb:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c00122bf:	53                   	push   ebx
c00122c0:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00122c7:	56                   	push   esi
c00122c8:	e8 04 fc ff ff       	call   c0011ed1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00122cd:	83 c4 10             	add    esp,0x10
c00122d0:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c00122d4:	89 d0                	mov    eax,edx
c00122d6:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c00122da:	c1 e0 08             	shl    eax,0x8
c00122dd:	09 c2                	or     edx,eax
c00122df:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c00122e3:	c1 e2 08             	shl    edx,0x8
c00122e6:	09 c2                	or     edx,eax
c00122e8:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00122ec:	7e 76                	jle    c0012364 <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c00122ee:	85 d2                	test   edx,edx
c00122f0:	75 25                	jne    c0012317 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c00122f2:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c00122f7:	8d 44 24 45          	lea    eax,[esp+0x45]
c00122fb:	50                   	push   eax
c00122fc:	6a 00                	push   0x0
c00122fe:	6a 00                	push   0x0
c0012300:	56                   	push   esi
c0012301:	e8 75 fe ff ff       	call   c001217b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012306:	83 c4 10             	add    esp,0x10
c0012309:	89 c2                	mov    edx,eax
c001230b:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c001230e:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0012311:	c1 f8 10             	sar    eax,0x10
c0012314:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0012317:	55                   	push   ebp
c0012318:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c001231c:	55                   	push   ebp
c001231d:	52                   	push   edx
c001231e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0012322:	56                   	push   esi
c0012323:	e8 a9 fb ff ff       	call   c0011ed1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012328:	83 c4 0c             	add    esp,0xc
c001232b:	6a 27                	push   0x27
c001232d:	6a 00                	push   0x0
c001232f:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012333:	51                   	push   ecx
c0012334:	e8 b7 e1 fe ff       	call   c00004f0 <memset>
c0012339:	83 c4 0c             	add    esp,0xc
c001233c:	6b c7 27             	imul   eax,edi,0x27
c001233f:	6a 27                	push   0x27
c0012341:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0012348:	50                   	push   eax
c0012349:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c001234d:	51                   	push   ecx
c001234e:	e8 2d e3 fe ff       	call   c0000680 <strncpy>
c0012353:	83 c4 0c             	add    esp,0xc
c0012356:	55                   	push   ebp
c0012357:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001235b:	52                   	push   edx
c001235c:	56                   	push   esi
c001235d:	e8 93 fc ff ff       	call   c0011ff5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012362:	eb 19                	jmp    c001237d <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c0012364:	85 d2                	test   edx,edx
c0012366:	74 18                	je     c0012380 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c0012368:	51                   	push   ecx
c0012369:	51                   	push   ecx
c001236a:	52                   	push   edx
c001236b:	56                   	push   esi
c001236c:	e8 c0 fc ff ff       	call   c0012031 <CmFreeExtent(Reghive_Tag*, int)>
c0012371:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0012375:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0012379:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001237d:	83 c4 10             	add    esp,0x10
c0012380:	47                   	inc    edi
c0012381:	83 c3 03             	add    ebx,0x3
c0012384:	83 ff 07             	cmp    edi,0x7
c0012387:	0f 85 43 ff ff ff    	jne    c00122d0 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c001238d:	50                   	push   eax
c001238e:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0012392:	50                   	push   eax
c0012393:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001239a:	56                   	push   esi
c001239b:	e8 55 fc ff ff       	call   c0011ff5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00123a0:	81 c4 8c 00 00 00    	add    esp,0x8c
c00123a6:	5b                   	pop    ebx
c00123a7:	5e                   	pop    esi
c00123a8:	5f                   	pop    edi
c00123a9:	5d                   	pop    ebp
c00123aa:	c3                   	ret    

c00123ab <CmGetMatch(char*, char*, bool, bool*)>:
c00123ab:	56                   	push   esi
c00123ac:	53                   	push   ebx
c00123ad:	50                   	push   eax
c00123ae:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00123b2:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00123b7:	74 25                	je     c00123de <CmGetMatch(char*, char*, bool, bool*)+0x33>
c00123b9:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00123bc:	31 db                	xor    ebx,ebx
c00123be:	50                   	push   eax
c00123bf:	50                   	push   eax
c00123c0:	8d 04 9d 20 23 02 c0 	lea    eax,[ebx*4-0x3ffddce0]
c00123c7:	50                   	push   eax
c00123c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00123cc:	e8 7f e3 fe ff       	call   c0000750 <strcmp>
c00123d1:	83 c4 10             	add    esp,0x10
c00123d4:	85 c0                	test   eax,eax
c00123d6:	74 2e                	je     c0012406 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00123d8:	43                   	inc    ebx
c00123d9:	83 fb 3f             	cmp    ebx,0x3f
c00123dc:	75 e0                	jne    c00123be <CmGetMatch(char*, char*, bool, bool*)+0x13>
c00123de:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00123e1:	31 db                	xor    ebx,ebx
c00123e3:	8d 04 9d 20 23 02 c0 	lea    eax,[ebx*4-0x3ffddce0]
c00123ea:	51                   	push   ecx
c00123eb:	51                   	push   ecx
c00123ec:	50                   	push   eax
c00123ed:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00123f1:	e8 5a e3 fe ff       	call   c0000750 <strcmp>
c00123f6:	83 c4 10             	add    esp,0x10
c00123f9:	85 c0                	test   eax,eax
c00123fb:	74 09                	je     c0012406 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00123fd:	43                   	inc    ebx
c00123fe:	83 fb 3f             	cmp    ebx,0x3f
c0012401:	75 e0                	jne    c00123e3 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0012403:	83 cb ff             	or     ebx,0xffffffff
c0012406:	89 d8                	mov    eax,ebx
c0012408:	5a                   	pop    edx
c0012409:	5b                   	pop    ebx
c001240a:	5e                   	pop    esi
c001240b:	c3                   	ret    

c001240c <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c001240c:	55                   	push   ebp
c001240d:	31 c0                	xor    eax,eax
c001240f:	57                   	push   edi
c0012410:	56                   	push   esi
c0012411:	53                   	push   ebx
c0012412:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012416:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001241a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001241c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012420:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0012423:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012427:	83 fd 1f             	cmp    ebp,0x1f
c001242a:	7f 0b                	jg     c0012437 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c001242c:	0f b6 c2             	movzx  eax,dl
c001242f:	d3 e0                	shl    eax,cl
c0012431:	09 07                	or     DWORD PTR [edi],eax
c0012433:	b0 01                	mov    al,0x1
c0012435:	01 33                	add    DWORD PTR [ebx],esi
c0012437:	5b                   	pop    ebx
c0012438:	5e                   	pop    esi
c0012439:	5f                   	pop    edi
c001243a:	5d                   	pop    ebp
c001243b:	c3                   	ret    

c001243c <CmGetShift(unsigned int*, int*, int, bool*)>:
c001243c:	57                   	push   edi
c001243d:	56                   	push   esi
c001243e:	53                   	push   ebx
c001243f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012443:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012447:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001244b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001244f:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0012451:	7c 17                	jl     c001246a <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0012453:	8b 17                	mov    edx,DWORD PTR [edi]
c0012455:	b8 01 00 00 00       	mov    eax,0x1
c001245a:	d3 e0                	shl    eax,cl
c001245c:	48                   	dec    eax
c001245d:	21 d0                	and    eax,edx
c001245f:	d3 ea                	shr    edx,cl
c0012461:	89 17                	mov    DWORD PTR [edi],edx
c0012463:	29 0b                	sub    DWORD PTR [ebx],ecx
c0012465:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012468:	eb 05                	jmp    c001246f <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c001246a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001246d:	31 c0                	xor    eax,eax
c001246f:	5b                   	pop    ebx
c0012470:	5e                   	pop    esi
c0012471:	5f                   	pop    edi
c0012472:	c3                   	ret    

c0012473 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0012473:	83 ec 40             	sub    esp,0x40
c0012476:	8d 44 24 09          	lea    eax,[esp+0x9]
c001247a:	50                   	push   eax
c001247b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001247f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012483:	e8 49 fa ff ff       	call   c0011ed1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012488:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001248c:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0012490:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0012494:	89 10                	mov    DWORD PTR [eax],edx
c0012496:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0012499:	83 c4 4c             	add    esp,0x4c
c001249c:	c3                   	ret    

c001249d <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c001249d:	55                   	push   ebp
c001249e:	57                   	push   edi
c001249f:	56                   	push   esi
c00124a0:	53                   	push   ebx
c00124a1:	83 ec 40             	sub    esp,0x40
c00124a4:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c00124a8:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00124ac:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c00124b0:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c00124b4:	53                   	push   ebx
c00124b5:	56                   	push   esi
c00124b6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00124ba:	e8 12 fa ff ff       	call   c0011ed1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00124bf:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c00124c3:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c00124c7:	83 c4 0c             	add    esp,0xc
c00124ca:	53                   	push   ebx
c00124cb:	56                   	push   esi
c00124cc:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00124d0:	e8 20 fb ff ff       	call   c0011ff5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00124d5:	83 c4 4c             	add    esp,0x4c
c00124d8:	5b                   	pop    ebx
c00124d9:	5e                   	pop    esi
c00124da:	5f                   	pop    edi
c00124db:	5d                   	pop    ebp
c00124dc:	c3                   	ret    

c00124dd <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c00124dd:	55                   	push   ebp
c00124de:	57                   	push   edi
c00124df:	56                   	push   esi
c00124e0:	31 f6                	xor    esi,esi
c00124e2:	53                   	push   ebx
c00124e3:	31 db                	xor    ebx,ebx
c00124e5:	83 ec 40             	sub    esp,0x40
c00124e8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00124f0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00124f8:	6a 12                	push   0x12
c00124fa:	68 ee 00 00 00       	push   0xee
c00124ff:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012503:	e8 e8 df fe ff       	call   c00004f0 <memset>
c0012508:	83 c4 10             	add    esp,0x10
c001250b:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001250f:	6a 08                	push   0x8
c0012511:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012515:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0012519:	50                   	push   eax
c001251a:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001251e:	55                   	push   ebp
c001251f:	57                   	push   edi
c0012520:	e8 e7 fe ff ff       	call   c001240c <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012525:	83 c4 10             	add    esp,0x10
c0012528:	8d 44 24 0f          	lea    eax,[esp+0xf]
c001252c:	50                   	push   eax
c001252d:	6a 06                	push   0x6
c001252f:	55                   	push   ebp
c0012530:	57                   	push   edi
c0012531:	e8 06 ff ff ff       	call   c001243c <CmGetShift(unsigned int*, int*, int, bool*)>
c0012536:	83 c4 10             	add    esp,0x10
c0012539:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001253e:	74 07                	je     c0012547 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0012540:	46                   	inc    esi
c0012541:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0012545:	eb e1                	jmp    c0012528 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0012547:	43                   	inc    ebx
c0012548:	83 fb 12             	cmp    ebx,0x12
c001254b:	75 c2                	jne    c001250f <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c001254d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012551:	31 db                	xor    ebx,ebx
c0012553:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012556:	50                   	push   eax
c0012557:	50                   	push   eax
c0012558:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c001255d:	43                   	inc    ebx
c001255e:	8d 04 85 20 23 02 c0 	lea    eax,[eax*4-0x3ffddce0]
c0012565:	50                   	push   eax
c0012566:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c001256a:	e8 d1 e2 fe ff       	call   c0000840 <strcat>
c001256f:	83 c4 10             	add    esp,0x10
c0012572:	83 fb 18             	cmp    ebx,0x18
c0012575:	75 df                	jne    c0012556 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0012577:	83 c4 3c             	add    esp,0x3c
c001257a:	31 c0                	xor    eax,eax
c001257c:	5b                   	pop    ebx
c001257d:	5e                   	pop    esi
c001257e:	5f                   	pop    edi
c001257f:	5d                   	pop    ebp
c0012580:	c3                   	ret    

c0012581 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0012581:	83 ec 40             	sub    esp,0x40
c0012584:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012588:	50                   	push   eax
c0012589:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001258d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012591:	e8 3b f9 ff ff       	call   c0011ed1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012596:	58                   	pop    eax
c0012597:	5a                   	pop    edx
c0012598:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001259c:	8d 44 24 15          	lea    eax,[esp+0x15]
c00125a0:	50                   	push   eax
c00125a1:	e8 37 ff ff ff       	call   c00124dd <CmConvertFromInternalFilename(unsigned char const*, char*)>
c00125a6:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c00125ab:	83 c4 4c             	add    esp,0x4c
c00125ae:	c3                   	ret    

c00125af <CmConvertToInternalFilename(char const*, unsigned char*)>:
c00125af:	55                   	push   ebp
c00125b0:	57                   	push   edi
c00125b1:	56                   	push   esi
c00125b2:	53                   	push   ebx
c00125b3:	31 db                	xor    ebx,ebx
c00125b5:	83 ec 70             	sub    esp,0x70
c00125b8:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c00125bf:	6a 30                	push   0x30
c00125c1:	6a 00                	push   0x0
c00125c3:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00125c7:	56                   	push   esi
c00125c8:	e8 23 df fe ff       	call   c00004f0 <memset>
c00125cd:	83 c4 10             	add    esp,0x10
c00125d0:	83 ec 0c             	sub    esp,0xc
c00125d3:	57                   	push   edi
c00125d4:	e8 97 df fe ff       	call   c0000570 <strlen>
c00125d9:	83 c4 10             	add    esp,0x10
c00125dc:	39 d8                	cmp    eax,ebx
c00125de:	76 16                	jbe    c00125f6 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c00125e0:	83 ec 0c             	sub    esp,0xc
c00125e3:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00125e7:	50                   	push   eax
c00125e8:	e8 43 e3 fe ff       	call   c0000930 <toupper>
c00125ed:	83 c4 10             	add    esp,0x10
c00125f0:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00125f3:	43                   	inc    ebx
c00125f4:	eb da                	jmp    c00125d0 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c00125f6:	31 f6                	xor    esi,esi
c00125f8:	52                   	push   edx
c00125f9:	31 ff                	xor    edi,edi
c00125fb:	6a 18                	push   0x18
c00125fd:	6a 3f                	push   0x3f
c00125ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012603:	50                   	push   eax
c0012604:	e8 e7 de fe ff       	call   c00004f0 <memset>
c0012609:	83 c4 10             	add    esp,0x10
c001260c:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c0012610:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c0012614:	84 c0                	test   al,al
c0012616:	0f 84 b0 00 00 00    	je     c00126cc <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c001261c:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0012620:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c0012625:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0012629:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c001262e:	8d 6e 01             	lea    ebp,[esi+0x1]
c0012631:	83 ec 0c             	sub    esp,0xc
c0012634:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0012638:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c001263c:	53                   	push   ebx
c001263d:	e8 2e df fe ff       	call   c0000570 <strlen>
c0012642:	83 c4 10             	add    esp,0x10
c0012645:	85 c0                	test   eax,eax
c0012647:	8d 44 24 0f          	lea    eax,[esp+0xf]
c001264b:	74 0b                	je     c0012658 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c001264d:	50                   	push   eax
c001264e:	6a 01                	push   0x1
c0012650:	53                   	push   ebx
c0012651:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012655:	50                   	push   eax
c0012656:	eb 0a                	jmp    c0012662 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0012658:	50                   	push   eax
c0012659:	6a 00                	push   0x0
c001265b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001265f:	50                   	push   eax
c0012660:	6a 00                	push   0x0
c0012662:	e8 44 fd ff ff       	call   c00123ab <CmGetMatch(char*, char*, bool, bool*)>
c0012667:	83 c4 10             	add    esp,0x10
c001266a:	83 f8 ff             	cmp    eax,0xffffffff
c001266d:	75 1a                	jne    c0012689 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c001266f:	83 ec 0c             	sub    esp,0xc
c0012672:	68 e9 0e 02 c0       	push   0xc0020ee9
c0012677:	e8 ab e2 ff ff       	call   c0010927 <KePanic(char const*)>
c001267c:	83 c4 10             	add    esp,0x10
c001267f:	b8 02 00 00 00       	mov    eax,0x2
c0012684:	e9 bc 00 00 00       	jmp    c0012745 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0012689:	83 ff 18             	cmp    edi,0x18
c001268c:	75 1a                	jne    c00126a8 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c001268e:	83 ec 0c             	sub    esp,0xc
c0012691:	68 fe 0e 02 c0       	push   0xc0020efe
c0012696:	e8 8c e2 ff ff       	call   c0010927 <KePanic(char const*)>
c001269b:	83 c4 10             	add    esp,0x10
c001269e:	b8 01 00 00 00       	mov    eax,0x1
c00126a3:	e9 9d 00 00 00       	jmp    c0012745 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c00126a8:	47                   	inc    edi
c00126a9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00126ae:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c00126b2:	74 02                	je     c00126b6 <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c00126b4:	89 ee                	mov    esi,ebp
c00126b6:	83 ec 0c             	sub    esp,0xc
c00126b9:	53                   	push   ebx
c00126ba:	e8 b1 de fe ff       	call   c0000570 <strlen>
c00126bf:	83 c4 10             	add    esp,0x10
c00126c2:	85 c0                	test   eax,eax
c00126c4:	74 06                	je     c00126cc <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c00126c6:	46                   	inc    esi
c00126c7:	e9 40 ff ff ff       	jmp    c001260c <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c00126cc:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00126d4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00126dc:	31 f6                	xor    esi,esi
c00126de:	50                   	push   eax
c00126df:	31 ff                	xor    edi,edi
c00126e1:	6a 12                	push   0x12
c00126e3:	68 ee 00 00 00       	push   0xee
c00126e8:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00126ef:	e8 fc dd fe ff       	call   c00004f0 <memset>
c00126f4:	83 c4 10             	add    esp,0x10
c00126f7:	83 fe 17             	cmp    esi,0x17
c00126fa:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c00126fe:	7e 26                	jle    c0012726 <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c0012700:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012704:	50                   	push   eax
c0012705:	6a 08                	push   0x8
c0012707:	55                   	push   ebp
c0012708:	53                   	push   ebx
c0012709:	e8 2e fd ff ff       	call   c001243c <CmGetShift(unsigned int*, int*, int, bool*)>
c001270e:	83 c4 10             	add    esp,0x10
c0012711:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012716:	74 26                	je     c001273e <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c0012718:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c001271f:	4e                   	dec    esi
c0012720:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c0012723:	47                   	inc    edi
c0012724:	eb 1c                	jmp    c0012742 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0012726:	6a 06                	push   0x6
c0012728:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c001272d:	50                   	push   eax
c001272e:	55                   	push   ebp
c001272f:	53                   	push   ebx
c0012730:	e8 d7 fc ff ff       	call   c001240c <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012735:	83 c4 10             	add    esp,0x10
c0012738:	84 c0                	test   al,al
c001273a:	75 06                	jne    c0012742 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c001273c:	eb c2                	jmp    c0012700 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c001273e:	31 c0                	xor    eax,eax
c0012740:	eb 03                	jmp    c0012745 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0012742:	46                   	inc    esi
c0012743:	eb b2                	jmp    c00126f7 <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c0012745:	83 c4 6c             	add    esp,0x6c
c0012748:	5b                   	pop    ebx
c0012749:	5e                   	pop    esi
c001274a:	5f                   	pop    edi
c001274b:	5d                   	pop    ebp
c001274c:	c3                   	ret    

c001274d <CmCreateString(Reghive_Tag*, int, char const*)>:
c001274d:	53                   	push   ebx
c001274e:	83 ec 3c             	sub    esp,0x3c
c0012751:	6a 2b                	push   0x2b
c0012753:	6a 00                	push   0x0
c0012755:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012759:	53                   	push   ebx
c001275a:	e8 91 dd fe ff       	call   c00004f0 <memset>
c001275f:	58                   	pop    eax
c0012760:	5a                   	pop    edx
c0012761:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012765:	50                   	push   eax
c0012766:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001276a:	e8 40 fe ff ff       	call   c00125af <CmConvertToInternalFilename(char const*, unsigned char*)>
c001276f:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c0012774:	83 c4 0c             	add    esp,0xc
c0012777:	6a 15                	push   0x15
c0012779:	6a 00                	push   0x0
c001277b:	8d 44 24 27          	lea    eax,[esp+0x27]
c001277f:	50                   	push   eax
c0012780:	e8 6b dd fe ff       	call   c00004f0 <memset>
c0012785:	53                   	push   ebx
c0012786:	6a 00                	push   0x0
c0012788:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001278c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012790:	e8 e6 f9 ff ff       	call   c001217b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012795:	83 c4 58             	add    esp,0x58
c0012798:	5b                   	pop    ebx
c0012799:	c3                   	ret    

c001279a <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c001279a:	56                   	push   esi
c001279b:	53                   	push   ebx
c001279c:	83 ec 48             	sub    esp,0x48
c001279f:	6a 12                	push   0x12
c00127a1:	68 ff 00 00 00       	push   0xff
c00127a6:	8d 74 24 0f          	lea    esi,[esp+0xf]
c00127aa:	56                   	push   esi
c00127ab:	e8 40 dd fe ff       	call   c00004f0 <memset>
c00127b0:	5a                   	pop    edx
c00127b1:	59                   	pop    ecx
c00127b2:	56                   	push   esi
c00127b3:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00127b7:	e8 f3 fd ff ff       	call   c00125af <CmConvertToInternalFilename(char const*, unsigned char*)>
c00127bc:	83 c4 10             	add    esp,0x10
c00127bf:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00127c3:	85 db                	test   ebx,ebx
c00127c5:	74 42                	je     c0012809 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c00127c7:	50                   	push   eax
c00127c8:	8d 44 24 19          	lea    eax,[esp+0x19]
c00127cc:	50                   	push   eax
c00127cd:	53                   	push   ebx
c00127ce:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00127d2:	e8 fa f6 ff ff       	call   c0011ed1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00127d7:	83 c4 0c             	add    esp,0xc
c00127da:	6a 12                	push   0x12
c00127dc:	8d 44 24 21          	lea    eax,[esp+0x21]
c00127e0:	50                   	push   eax
c00127e1:	56                   	push   esi
c00127e2:	e8 99 db fe ff       	call   c0000380 <memcmp>
c00127e7:	83 c4 10             	add    esp,0x10
c00127ea:	85 c0                	test   eax,eax
c00127ec:	74 1e                	je     c001280c <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c00127ee:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c00127f3:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c00127f8:	c1 e3 08             	shl    ebx,0x8
c00127fb:	09 d8                	or     eax,ebx
c00127fd:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0012802:	c1 e3 10             	shl    ebx,0x10
c0012805:	09 c3                	or     ebx,eax
c0012807:	eb ba                	jmp    c00127c3 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0012809:	83 cb ff             	or     ebx,0xffffffff
c001280c:	89 d8                	mov    eax,ebx
c001280e:	83 c4 44             	add    esp,0x44
c0012811:	5b                   	pop    ebx
c0012812:	5e                   	pop    esi
c0012813:	c3                   	ret    

c0012814 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0012814:	57                   	push   edi
c0012815:	56                   	push   esi
c0012816:	53                   	push   ebx
c0012817:	83 ec 34             	sub    esp,0x34
c001281a:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001281e:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0012822:	6a 2b                	push   0x2b
c0012824:	6a 00                	push   0x0
c0012826:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c001282a:	53                   	push   ebx
c001282b:	e8 c0 dc fe ff       	call   c00004f0 <memset>
c0012830:	58                   	pop    eax
c0012831:	5a                   	pop    edx
c0012832:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012836:	50                   	push   eax
c0012837:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001283b:	e8 6f fd ff ff       	call   c00125af <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012840:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0012844:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c0012848:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c001284c:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012850:	53                   	push   ebx
c0012851:	6a 00                	push   0x0
c0012853:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012857:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001285b:	e8 1b f9 ff ff       	call   c001217b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012860:	83 c4 50             	add    esp,0x50
c0012863:	5b                   	pop    ebx
c0012864:	5e                   	pop    esi
c0012865:	5f                   	pop    edi
c0012866:	c3                   	ret    

c0012867 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c0012867:	55                   	push   ebp
c0012868:	57                   	push   edi
c0012869:	56                   	push   esi
c001286a:	53                   	push   ebx
c001286b:	83 ec 40             	sub    esp,0x40
c001286e:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0012872:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0012876:	6a 2b                	push   0x2b
c0012878:	6a 00                	push   0x0
c001287a:	8d 74 24 11          	lea    esi,[esp+0x11]
c001287e:	56                   	push   esi
c001287f:	e8 6c dc fe ff       	call   c00004f0 <memset>
c0012884:	5f                   	pop    edi
c0012885:	89 ef                	mov    edi,ebp
c0012887:	58                   	pop    eax
c0012888:	8d 44 24 11          	lea    eax,[esp+0x11]
c001288c:	50                   	push   eax
c001288d:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0012891:	e8 19 fd ff ff       	call   c00125af <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012896:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c001289b:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c00128a0:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c00128a5:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c00128aa:	83 c4 10             	add    esp,0x10
c00128ad:	85 ed                	test   ebp,ebp
c00128af:	74 14                	je     c00128c5 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00128b1:	51                   	push   ecx
c00128b2:	51                   	push   ecx
c00128b3:	57                   	push   edi
c00128b4:	53                   	push   ebx
c00128b5:	e8 09 f7 ff ff       	call   c0011fc3 <CmGetNext(Reghive_Tag*, int)>
c00128ba:	83 c4 10             	add    esp,0x10
c00128bd:	85 c0                	test   eax,eax
c00128bf:	74 04                	je     c00128c5 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00128c1:	89 c7                	mov    edi,eax
c00128c3:	eb e8                	jmp    c00128ad <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c00128c5:	56                   	push   esi
c00128c6:	6a 00                	push   0x0
c00128c8:	57                   	push   edi
c00128c9:	53                   	push   ebx
c00128ca:	e8 ac f8 ff ff       	call   c001217b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00128cf:	83 c4 0c             	add    esp,0xc
c00128d2:	89 c7                	mov    edi,eax
c00128d4:	56                   	push   esi
c00128d5:	50                   	push   eax
c00128d6:	53                   	push   ebx
c00128d7:	e8 f5 f5 ff ff       	call   c0011ed1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00128dc:	58                   	pop    eax
c00128dd:	5a                   	pop    edx
c00128de:	6a 6c                	push   0x6c
c00128e0:	6a 00                	push   0x0
c00128e2:	6a 00                	push   0x0
c00128e4:	68 0f 0f 02 c0       	push   0xc0020f0f
c00128e9:	57                   	push   edi
c00128ea:	53                   	push   ebx
c00128eb:	e8 24 ff ff ff       	call   c0012814 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c00128f0:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00128f4:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c00128f8:	c1 e8 10             	shr    eax,0x10
c00128fb:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c00128ff:	83 c4 1c             	add    esp,0x1c
c0012902:	56                   	push   esi
c0012903:	57                   	push   edi
c0012904:	53                   	push   ebx
c0012905:	e8 eb f6 ff ff       	call   c0011ff5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001290a:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c001290f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0012914:	c1 e0 08             	shl    eax,0x8
c0012917:	09 c2                	or     edx,eax
c0012919:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001291e:	83 c4 4c             	add    esp,0x4c
c0012921:	c1 e0 10             	shl    eax,0x10
c0012924:	5b                   	pop    ebx
c0012925:	09 d0                	or     eax,edx
c0012927:	5e                   	pop    esi
c0012928:	5f                   	pop    edi
c0012929:	5d                   	pop    ebp
c001292a:	c3                   	ret    

c001292b <zStrtok(char*, char const*)>:
c001292b:	55                   	push   ebp
c001292c:	57                   	push   edi
c001292d:	56                   	push   esi
c001292e:	53                   	push   ebx
c001292f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012933:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012937:	85 db                	test   ebx,ebx
c0012939:	74 2f                	je     c001296a <zStrtok(char*, char const*)+0x3f>
c001293b:	85 c0                	test   eax,eax
c001293d:	75 09                	jne    c0012948 <zStrtok(char*, char const*)+0x1d>
c001293f:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c0012944:	85 c0                	test   eax,eax
c0012946:	74 50                	je     c0012998 <zStrtok(char*, char const*)+0x6d>
c0012948:	31 c9                	xor    ecx,ecx
c001294a:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c001294e:	74 03                	je     c0012953 <zStrtok(char*, char const*)+0x28>
c0012950:	41                   	inc    ecx
c0012951:	eb f7                	jmp    c001294a <zStrtok(char*, char const*)+0x1f>
c0012953:	31 d2                	xor    edx,edx
c0012955:	39 ca                	cmp    edx,ecx
c0012957:	74 15                	je     c001296e <zStrtok(char*, char const*)+0x43>
c0012959:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c001295d:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c0012960:	8d 3c 10             	lea    edi,[eax+edx*1]
c0012963:	39 ee                	cmp    esi,ebp
c0012965:	74 13                	je     c001297a <zStrtok(char*, char const*)+0x4f>
c0012967:	42                   	inc    edx
c0012968:	eb eb                	jmp    c0012955 <zStrtok(char*, char const*)+0x2a>
c001296a:	31 c0                	xor    eax,eax
c001296c:	eb 2a                	jmp    c0012998 <zStrtok(char*, char const*)+0x6d>
c001296e:	c7 05 90 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027990,0x0
c0012978:	eb 1e                	jmp    c0012998 <zStrtok(char*, char const*)+0x6d>
c001297a:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c001297d:	39 ce                	cmp    esi,ecx
c001297f:	75 0a                	jne    c001298b <zStrtok(char*, char const*)+0x60>
c0012981:	40                   	inc    eax
c0012982:	a3 90 79 02 c0       	mov    ds:0xc0027990,eax
c0012987:	89 d8                	mov    eax,ebx
c0012989:	eb 0d                	jmp    c0012998 <zStrtok(char*, char const*)+0x6d>
c001298b:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c001298f:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0012992:	89 15 90 79 02 c0    	mov    DWORD PTR ds:0xc0027990,edx
c0012998:	5b                   	pop    ebx
c0012999:	5e                   	pop    esi
c001299a:	5f                   	pop    edi
c001299b:	5d                   	pop    ebp
c001299c:	c3                   	ret    

c001299d <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c001299d:	57                   	push   edi
c001299e:	56                   	push   esi
c001299f:	53                   	push   ebx
c00129a0:	81 ec 08 01 00 00    	sub    esp,0x108
c00129a6:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c00129ad:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c00129b4:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00129b8:	53                   	push   ebx
c00129b9:	e8 82 dc fe ff       	call   c0000640 <strcpy>
c00129be:	59                   	pop    ecx
c00129bf:	5e                   	pop    esi
c00129c0:	68 73 12 02 c0       	push   0xc0021273
c00129c5:	53                   	push   ebx
c00129c6:	bb 01 00 00 00       	mov    ebx,0x1
c00129cb:	e8 5b ff ff ff       	call   c001292b <zStrtok(char*, char const*)>
c00129d0:	83 c4 10             	add    esp,0x10
c00129d3:	85 c0                	test   eax,eax
c00129d5:	74 3b                	je     c0012a12 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00129d7:	52                   	push   edx
c00129d8:	50                   	push   eax
c00129d9:	6a 01                	push   0x1
c00129db:	57                   	push   edi
c00129dc:	e8 b9 fd ff ff       	call   c001279a <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c00129e1:	59                   	pop    ecx
c00129e2:	89 c3                	mov    ebx,eax
c00129e4:	5e                   	pop    esi
c00129e5:	68 73 12 02 c0       	push   0xc0021273
c00129ea:	6a 00                	push   0x0
c00129ec:	e8 3a ff ff ff       	call   c001292b <zStrtok(char*, char const*)>
c00129f1:	83 c4 10             	add    esp,0x10
c00129f4:	89 c6                	mov    esi,eax
c00129f6:	85 c0                	test   eax,eax
c00129f8:	74 18                	je     c0012a12 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00129fa:	52                   	push   edx
c00129fb:	52                   	push   edx
c00129fc:	53                   	push   ebx
c00129fd:	57                   	push   edi
c00129fe:	e8 81 f5 ff ff       	call   c0011f84 <CmEnterDirectory(Reghive_Tag*, int)>
c0012a03:	83 c4 10             	add    esp,0x10
c0012a06:	89 c3                	mov    ebx,eax
c0012a08:	83 f8 ff             	cmp    eax,0xffffffff
c0012a0b:	74 05                	je     c0012a12 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012a0d:	50                   	push   eax
c0012a0e:	56                   	push   esi
c0012a0f:	53                   	push   ebx
c0012a10:	eb c9                	jmp    c00129db <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0012a12:	81 c4 00 01 00 00    	add    esp,0x100
c0012a18:	89 d8                	mov    eax,ebx
c0012a1a:	5b                   	pop    ebx
c0012a1b:	5e                   	pop    esi
c0012a1c:	5f                   	pop    edi
c0012a1d:	c3                   	ret    

c0012a1e <CmDisplayTree(Reghive_Tag*, int, int)>:
c0012a1e:	55                   	push   ebp
c0012a1f:	57                   	push   edi
c0012a20:	56                   	push   esi
c0012a21:	53                   	push   ebx
c0012a22:	83 ec 5c             	sub    esp,0x5c
c0012a25:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0012a29:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0012a2d:	85 db                	test   ebx,ebx
c0012a2f:	0f 8e 84 00 00 00    	jle    c0012ab9 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0012a35:	31 ed                	xor    ebp,ebp
c0012a37:	57                   	push   edi
c0012a38:	6a 32                	push   0x32
c0012a3a:	6a 00                	push   0x0
c0012a3c:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0012a40:	57                   	push   edi
c0012a41:	e8 aa da fe ff       	call   c00004f0 <memset>
c0012a46:	83 c4 0c             	add    esp,0xc
c0012a49:	57                   	push   edi
c0012a4a:	53                   	push   ebx
c0012a4b:	56                   	push   esi
c0012a4c:	e8 30 fb ff ff       	call   c0012581 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0012a51:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012a55:	83 c4 10             	add    esp,0x10
c0012a58:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0012a5c:	7d 13                	jge    c0012a71 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0012a5e:	83 ec 0c             	sub    esp,0xc
c0012a61:	45                   	inc    ebp
c0012a62:	68 e4 15 02 c0       	push   0xc00215e4
c0012a67:	e8 8b 7f ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c0012a6c:	83 c4 10             	add    esp,0x10
c0012a6f:	eb e7                	jmp    c0012a58 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0012a71:	51                   	push   ecx
c0012a72:	57                   	push   edi
c0012a73:	53                   	push   ebx
c0012a74:	68 15 0f 02 c0       	push   0xc0020f15
c0012a79:	e8 79 7f ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c0012a7e:	83 c4 10             	add    esp,0x10
c0012a81:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c0012a86:	75 1e                	jne    c0012aa6 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c0012a88:	52                   	push   edx
c0012a89:	52                   	push   edx
c0012a8a:	53                   	push   ebx
c0012a8b:	56                   	push   esi
c0012a8c:	e8 f3 f4 ff ff       	call   c0011f84 <CmEnterDirectory(Reghive_Tag*, int)>
c0012a91:	83 c4 0c             	add    esp,0xc
c0012a94:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0012a98:	8d 51 04             	lea    edx,[ecx+0x4]
c0012a9b:	52                   	push   edx
c0012a9c:	50                   	push   eax
c0012a9d:	56                   	push   esi
c0012a9e:	e8 7b ff ff ff       	call   c0012a1e <CmDisplayTree(Reghive_Tag*, int, int)>
c0012aa3:	83 c4 10             	add    esp,0x10
c0012aa6:	50                   	push   eax
c0012aa7:	50                   	push   eax
c0012aa8:	53                   	push   ebx
c0012aa9:	56                   	push   esi
c0012aaa:	e8 14 f5 ff ff       	call   c0011fc3 <CmGetNext(Reghive_Tag*, int)>
c0012aaf:	83 c4 10             	add    esp,0x10
c0012ab2:	89 c3                	mov    ebx,eax
c0012ab4:	e9 74 ff ff ff       	jmp    c0012a2d <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0012ab9:	83 c4 5c             	add    esp,0x5c
c0012abc:	5b                   	pop    ebx
c0012abd:	5e                   	pop    esi
c0012abe:	5f                   	pop    edi
c0012abf:	5d                   	pop    ebp
c0012ac0:	c3                   	ret    

c0012ac1 <CmSplitFinalSlashInPlace(char*)>:
c0012ac1:	53                   	push   ebx
c0012ac2:	83 ec 14             	sub    esp,0x14
c0012ac5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012ac9:	53                   	push   ebx
c0012aca:	e8 a1 da fe ff       	call   c0000570 <strlen>
c0012acf:	83 c4 10             	add    esp,0x10
c0012ad2:	48                   	dec    eax
c0012ad3:	85 c0                	test   eax,eax
c0012ad5:	74 15                	je     c0012aec <CmSplitFinalSlashInPlace(char*)+0x2b>
c0012ad7:	8d 14 03             	lea    edx,[ebx+eax*1]
c0012ada:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012ade:	75 09                	jne    c0012ae9 <CmSplitFinalSlashInPlace(char*)+0x28>
c0012ae0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0012ae3:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012ae7:	eb 05                	jmp    c0012aee <CmSplitFinalSlashInPlace(char*)+0x2d>
c0012ae9:	48                   	dec    eax
c0012aea:	eb e7                	jmp    c0012ad3 <CmSplitFinalSlashInPlace(char*)+0x12>
c0012aec:	31 c0                	xor    eax,eax
c0012aee:	83 c4 08             	add    esp,0x8
c0012af1:	5b                   	pop    ebx
c0012af2:	c3                   	ret    

c0012af3 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0012af3:	55                   	push   ebp
c0012af4:	57                   	push   edi
c0012af5:	56                   	push   esi
c0012af6:	53                   	push   ebx
c0012af7:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012afd:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0012b04:	8a 13                	mov    dl,BYTE PTR [ebx]
c0012b06:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012b09:	80 fa 40             	cmp    dl,0x40
c0012b0c:	75 1c                	jne    c0012b2a <Reg::findLineFromLoadedData(char*, char*, char*)+0x37>
c0012b0e:	0f be 0b             	movsx  ecx,BYTE PTR [ebx]
c0012b11:	85 c9                	test   ecx,ecx
c0012b13:	0f 84 09 01 00 00    	je     c0012c22 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0012b19:	8d 43 01             	lea    eax,[ebx+0x1]
c0012b1c:	83 f9 3a             	cmp    ecx,0x3a
c0012b1f:	74 04                	je     c0012b25 <Reg::findLineFromLoadedData(char*, char*, char*)+0x32>
c0012b21:	89 c3                	mov    ebx,eax
c0012b23:	eb e9                	jmp    c0012b0e <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0012b25:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012b28:	89 c3                	mov    ebx,eax
c0012b2a:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0012b2e:	50                   	push   eax
c0012b2f:	6a 40                	push   0x40
c0012b31:	6a 00                	push   0x0
c0012b33:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012b37:	50                   	push   eax
c0012b38:	e8 b3 d9 fe ff       	call   c00004f0 <memset>
c0012b3d:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0012b44:	31 c0                	xor    eax,eax
c0012b46:	83 c4 10             	add    esp,0x10
c0012b49:	0f be 74 24 0c       	movsx  esi,BYTE PTR [esp+0xc]
c0012b4e:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0012b51:	89 d1                	mov    ecx,edx
c0012b53:	85 d2                	test   edx,edx
c0012b55:	0f 84 c7 00 00 00    	je     c0012c22 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0012b5b:	3d c7 00 00 00       	cmp    eax,0xc7
c0012b60:	0f 8f bc 00 00 00    	jg     c0012c22 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0012b66:	83 fa 0a             	cmp    edx,0xa
c0012b69:	0f 85 a4 00 00 00    	jne    c0012c13 <Reg::findLineFromLoadedData(char*, char*, char*)+0x120>
c0012b6f:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0012b74:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0012b79:	89 c8                	mov    eax,ecx
c0012b7b:	a8 df                	test   al,0xdf
c0012b7d:	0f 94 c2             	sete   dl
c0012b80:	83 f9 23             	cmp    ecx,0x23
c0012b83:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0012b88:	0b 54 24 0c          	or     edx,DWORD PTR [esp+0xc]
c0012b8c:	80 e2 01             	and    dl,0x1
c0012b8f:	75 4a                	jne    c0012bdb <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0012b91:	83 e8 09             	sub    eax,0x9
c0012b94:	3c 01                	cmp    al,0x1
c0012b96:	76 43                	jbe    c0012bdb <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0012b98:	83 f9 5b             	cmp    ecx,0x5b
c0012b9b:	75 42                	jne    c0012bdf <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c0012b9d:	83 fe 40             	cmp    esi,0x40
c0012ba0:	75 39                	jne    c0012bdb <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0012ba2:	83 ec 0c             	sub    esp,0xc
c0012ba5:	8d 54 24 65          	lea    edx,[esp+0x65]
c0012ba9:	52                   	push   edx
c0012baa:	e8 c1 d9 fe ff       	call   c0000570 <strlen>
c0012baf:	83 c4 10             	add    esp,0x10
c0012bb2:	83 f8 3f             	cmp    eax,0x3f
c0012bb5:	77 6b                	ja     c0012c22 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0012bb7:	50                   	push   eax
c0012bb8:	50                   	push   eax
c0012bb9:	8d 54 24 61          	lea    edx,[esp+0x61]
c0012bbd:	52                   	push   edx
c0012bbe:	8d 54 24 24          	lea    edx,[esp+0x24]
c0012bc2:	52                   	push   edx
c0012bc3:	e8 78 da fe ff       	call   c0000640 <strcpy>
c0012bc8:	58                   	pop    eax
c0012bc9:	8d 54 24 24          	lea    edx,[esp+0x24]
c0012bcd:	52                   	push   edx
c0012bce:	e8 9d d9 fe ff       	call   c0000570 <strlen>
c0012bd3:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0012bd8:	83 c4 10             	add    esp,0x10
c0012bdb:	31 d2                	xor    edx,edx
c0012bdd:	eb 3b                	jmp    c0012c1a <Reg::findLineFromLoadedData(char*, char*, char*)+0x127>
c0012bdf:	83 fe 40             	cmp    esi,0x40
c0012be2:	74 06                	je     c0012bea <Reg::findLineFromLoadedData(char*, char*, char*)+0xf7>
c0012be4:	8d 44 24 58          	lea    eax,[esp+0x58]
c0012be8:	eb 20                	jmp    c0012c0a <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c0012bea:	50                   	push   eax
c0012beb:	50                   	push   eax
c0012bec:	55                   	push   ebp
c0012bed:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012bf1:	50                   	push   eax
c0012bf2:	e8 59 db fe ff       	call   c0000750 <strcmp>
c0012bf7:	83 c4 10             	add    esp,0x10
c0012bfa:	85 c0                	test   eax,eax
c0012bfc:	75 dd                	jne    c0012bdb <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0012bfe:	eb e4                	jmp    c0012be4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0012c00:	8d 50 01             	lea    edx,[eax+0x1]
c0012c03:	83 f9 3d             	cmp    ecx,0x3d
c0012c06:	74 1e                	je     c0012c26 <Reg::findLineFromLoadedData(char*, char*, char*)+0x133>
c0012c08:	89 d0                	mov    eax,edx
c0012c0a:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0012c0d:	85 c9                	test   ecx,ecx
c0012c0f:	75 ef                	jne    c0012c00 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10d>
c0012c11:	eb 0f                	jmp    c0012c22 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0012c13:	8d 50 01             	lea    edx,[eax+0x1]
c0012c16:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0012c1a:	47                   	inc    edi
c0012c1b:	89 d0                	mov    eax,edx
c0012c1d:	e9 2c ff ff ff       	jmp    c0012b4e <Reg::findLineFromLoadedData(char*, char*, char*)+0x5b>
c0012c22:	31 c0                	xor    eax,eax
c0012c24:	eb 33                	jmp    c0012c59 <Reg::findLineFromLoadedData(char*, char*, char*)+0x166>
c0012c26:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012c2a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012c2d:	50                   	push   eax
c0012c2e:	50                   	push   eax
c0012c2f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0012c33:	50                   	push   eax
c0012c34:	53                   	push   ebx
c0012c35:	e8 16 db fe ff       	call   c0000750 <strcmp>
c0012c3a:	83 c4 10             	add    esp,0x10
c0012c3d:	85 c0                	test   eax,eax
c0012c3f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012c43:	75 96                	jne    c0012bdb <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0012c45:	51                   	push   ecx
c0012c46:	51                   	push   ecx
c0012c47:	52                   	push   edx
c0012c48:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0012c4f:	e8 ec d9 fe ff       	call   c0000640 <strcpy>
c0012c54:	83 c4 10             	add    esp,0x10
c0012c57:	b0 01                	mov    al,0x1
c0012c59:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012c5f:	5b                   	pop    ebx
c0012c60:	5e                   	pop    esi
c0012c61:	5f                   	pop    edi
c0012c62:	5d                   	pop    ebp
c0012c63:	c3                   	ret    

c0012c64 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0012c64:	57                   	push   edi
c0012c65:	56                   	push   esi
c0012c66:	53                   	push   ebx
c0012c67:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012c6d:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0012c74:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0012c7b:	53                   	push   ebx
c0012c7c:	e8 ef d8 fe ff       	call   c0000570 <strlen>
c0012c81:	89 34 24             	mov    DWORD PTR [esp],esi
c0012c84:	89 c7                	mov    edi,eax
c0012c86:	e8 e5 d8 fe ff       	call   c0000570 <strlen>
c0012c8b:	83 c4 10             	add    esp,0x10
c0012c8e:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0012c92:	3d ff 00 00 00       	cmp    eax,0xff
c0012c97:	0f 87 d3 00 00 00    	ja     c0012d70 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012c9d:	57                   	push   edi
c0012c9e:	57                   	push   edi
c0012c9f:	56                   	push   esi
c0012ca0:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0012ca4:	56                   	push   esi
c0012ca5:	e8 96 d9 fe ff       	call   c0000640 <strcpy>
c0012caa:	58                   	pop    eax
c0012cab:	5a                   	pop    edx
c0012cac:	68 73 12 02 c0       	push   0xc0021273
c0012cb1:	56                   	push   esi
c0012cb2:	e8 89 db fe ff       	call   c0000840 <strcat>
c0012cb7:	59                   	pop    ecx
c0012cb8:	5f                   	pop    edi
c0012cb9:	53                   	push   ebx
c0012cba:	56                   	push   esi
c0012cbb:	e8 80 db fe ff       	call   c0000840 <strcat>
c0012cc0:	58                   	pop    eax
c0012cc1:	5a                   	pop    edx
c0012cc2:	68 1f 0f 02 c0       	push   0xc0020f1f
c0012cc7:	56                   	push   esi
c0012cc8:	e8 73 db fe ff       	call   c0000840 <strcat>
c0012ccd:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012cd4:	e8 d5 4d ff ff       	call   c0007aae <malloc>
c0012cd9:	83 c4 0c             	add    esp,0xc
c0012cdc:	89 c3                	mov    ebx,eax
c0012cde:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0012ce4:	56                   	push   esi
c0012ce5:	50                   	push   eax
c0012ce6:	e8 8f 82 ff ff       	call   c000af7a <File::File(char const*, Process*)>
c0012ceb:	83 c4 10             	add    esp,0x10
c0012cee:	85 db                	test   ebx,ebx
c0012cf0:	74 7e                	je     c0012d70 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012cf2:	51                   	push   ecx
c0012cf3:	51                   	push   ecx
c0012cf4:	6a 01                	push   0x1
c0012cf6:	53                   	push   ebx
c0012cf7:	e8 3a 83 ff ff       	call   c000b036 <File::open(FileOpenMode)>
c0012cfc:	83 c4 10             	add    esp,0x10
c0012cff:	85 c0                	test   eax,eax
c0012d01:	74 08                	je     c0012d0b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0012d03:	83 ec 0c             	sub    esp,0xc
c0012d06:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d08:	53                   	push   ebx
c0012d09:	eb 5f                	jmp    c0012d6a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0012d0b:	52                   	push   edx
c0012d0c:	8d 44 24 17          	lea    eax,[esp+0x17]
c0012d10:	50                   	push   eax
c0012d11:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012d15:	50                   	push   eax
c0012d16:	53                   	push   ebx
c0012d17:	e8 c6 85 ff ff       	call   c000b2e2 <File::stat(unsigned long long*, bool*)>
c0012d1c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012d20:	83 c4 10             	add    esp,0x10
c0012d23:	89 c1                	mov    ecx,eax
c0012d25:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0012d29:	74 31                	je     c0012d5c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012d2b:	83 ec 0c             	sub    esp,0xc
c0012d2e:	50                   	push   eax
c0012d2f:	e8 7a 4d ff ff       	call   c0007aae <malloc>
c0012d34:	89 c6                	mov    esi,eax
c0012d36:	58                   	pop    eax
c0012d37:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d39:	8d 54 24 20          	lea    edx,[esp+0x20]
c0012d3d:	52                   	push   edx
c0012d3e:	56                   	push   esi
c0012d3f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012d43:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012d47:	53                   	push   ebx
c0012d48:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012d4b:	83 c4 20             	add    esp,0x20
c0012d4e:	85 c0                	test   eax,eax
c0012d50:	75 0a                	jne    c0012d5c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012d52:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012d56:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0012d5a:	74 18                	je     c0012d74 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0012d5c:	83 ec 0c             	sub    esp,0xc
c0012d5f:	53                   	push   ebx
c0012d60:	e8 2f 83 ff ff       	call   c000b094 <File::close()>
c0012d65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d67:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012d6a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012d6d:	83 c4 10             	add    esp,0x10
c0012d70:	31 c0                	xor    eax,eax
c0012d72:	eb 3b                	jmp    c0012daf <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0012d74:	83 ec 0c             	sub    esp,0xc
c0012d77:	53                   	push   ebx
c0012d78:	e8 17 83 ff ff       	call   c000b094 <File::close()>
c0012d7d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d7f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012d82:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012d85:	83 c4 0c             	add    esp,0xc
c0012d88:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0012d8f:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0012d96:	56                   	push   esi
c0012d97:	e8 57 fd ff ff       	call   c0012af3 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0012d9c:	89 34 24             	mov    DWORD PTR [esp],esi
c0012d9f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012da3:	e8 16 4d ff ff       	call   c0007abe <free>
c0012da8:	83 c4 10             	add    esp,0x10
c0012dab:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012daf:	81 c4 20 01 00 00    	add    esp,0x120
c0012db5:	5b                   	pop    ebx
c0012db6:	5e                   	pop    esi
c0012db7:	5f                   	pop    edi
c0012db8:	c3                   	ret    

c0012db9 <Reg::getLine(char*, char*, char*)>:
c0012db9:	57                   	push   edi
c0012dba:	56                   	push   esi
c0012dbb:	53                   	push   ebx
c0012dbc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012dc0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012dc4:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012dc8:	57                   	push   edi
c0012dc9:	56                   	push   esi
c0012dca:	53                   	push   ebx
c0012dcb:	68 24 0f 02 c0       	push   0xc0020f24
c0012dd0:	e8 8f fe ff ff       	call   c0012c64 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012dd5:	83 c4 10             	add    esp,0x10
c0012dd8:	84 c0                	test   al,al
c0012dda:	75 10                	jne    c0012dec <Reg::getLine(char*, char*, char*)+0x33>
c0012ddc:	57                   	push   edi
c0012ddd:	56                   	push   esi
c0012dde:	53                   	push   ebx
c0012ddf:	68 49 0f 02 c0       	push   0xc0020f49
c0012de4:	e8 7b fe ff ff       	call   c0012c64 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012de9:	83 c4 10             	add    esp,0x10
c0012dec:	5b                   	pop    ebx
c0012ded:	5e                   	pop    esi
c0012dee:	5f                   	pop    edi
c0012def:	c3                   	ret    

c0012df0 <Reg::readInt(char*, char*, int*)>:
c0012df0:	55                   	push   ebp
c0012df1:	57                   	push   edi
c0012df2:	56                   	push   esi
c0012df3:	53                   	push   ebx
c0012df4:	81 ec f0 00 00 00    	sub    esp,0xf0
c0012dfa:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012dfe:	55                   	push   ebp
c0012dff:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0012e06:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0012e0d:	e8 a7 ff ff ff       	call   c0012db9 <Reg::getLine(char*, char*, char*)>
c0012e12:	83 c4 10             	add    esp,0x10
c0012e15:	84 c0                	test   al,al
c0012e17:	0f 84 b6 00 00 00    	je     c0012ed3 <Reg::readInt(char*, char*, int*)+0xe3>
c0012e1d:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0012e22:	83 fa 2b             	cmp    edx,0x2b
c0012e25:	74 0c                	je     c0012e33 <Reg::readInt(char*, char*, int*)+0x43>
c0012e27:	83 fa 2d             	cmp    edx,0x2d
c0012e2a:	75 0e                	jne    c0012e3a <Reg::readInt(char*, char*, int*)+0x4a>
c0012e2c:	ba 01 00 00 00       	mov    edx,0x1
c0012e31:	eb 0b                	jmp    c0012e3e <Reg::readInt(char*, char*, int*)+0x4e>
c0012e33:	ba 01 00 00 00       	mov    edx,0x1
c0012e38:	eb 02                	jmp    c0012e3c <Reg::readInt(char*, char*, int*)+0x4c>
c0012e3a:	31 d2                	xor    edx,edx
c0012e3c:	31 c0                	xor    eax,eax
c0012e3e:	be 0a 00 00 00       	mov    esi,0xa
c0012e43:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0012e48:	75 21                	jne    c0012e6b <Reg::readInt(char*, char*, int*)+0x7b>
c0012e4a:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0012e4f:	83 f9 78             	cmp    ecx,0x78
c0012e52:	75 0a                	jne    c0012e5e <Reg::readInt(char*, char*, int*)+0x6e>
c0012e54:	83 c2 02             	add    edx,0x2
c0012e57:	be 10 00 00 00       	mov    esi,0x10
c0012e5c:	eb 0d                	jmp    c0012e6b <Reg::readInt(char*, char*, int*)+0x7b>
c0012e5e:	83 f9 62             	cmp    ecx,0x62
c0012e61:	75 08                	jne    c0012e6b <Reg::readInt(char*, char*, int*)+0x7b>
c0012e63:	83 c2 02             	add    edx,0x2
c0012e66:	be 02 00 00 00       	mov    esi,0x2
c0012e6b:	01 d5                	add    ebp,edx
c0012e6d:	31 d2                	xor    edx,edx
c0012e6f:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0012e73:	83 f9 0d             	cmp    ecx,0xd
c0012e76:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0012e7a:	0f 94 c3             	sete   bl
c0012e7d:	85 c9                	test   ecx,ecx
c0012e7f:	89 df                	mov    edi,ebx
c0012e81:	0f 94 c3             	sete   bl
c0012e84:	09 df                	or     edi,ebx
c0012e86:	89 fb                	mov    ebx,edi
c0012e88:	83 e7 01             	and    edi,0x1
c0012e8b:	75 35                	jne    c0012ec2 <Reg::readInt(char*, char*, int*)+0xd2>
c0012e8d:	0f af d6             	imul   edx,esi
c0012e90:	83 fe 10             	cmp    esi,0x10
c0012e93:	75 26                	jne    c0012ebb <Reg::readInt(char*, char*, int*)+0xcb>
c0012e95:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0012e99:	83 ef 41             	sub    edi,0x41
c0012e9c:	89 fb                	mov    ebx,edi
c0012e9e:	80 fb 05             	cmp    bl,0x5
c0012ea1:	77 06                	ja     c0012ea9 <Reg::readInt(char*, char*, int*)+0xb9>
c0012ea3:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0012ea7:	eb 16                	jmp    c0012ebf <Reg::readInt(char*, char*, int*)+0xcf>
c0012ea9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012ead:	83 eb 61             	sub    ebx,0x61
c0012eb0:	80 fb 05             	cmp    bl,0x5
c0012eb3:	77 06                	ja     c0012ebb <Reg::readInt(char*, char*, int*)+0xcb>
c0012eb5:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0012eb9:	eb 04                	jmp    c0012ebf <Reg::readInt(char*, char*, int*)+0xcf>
c0012ebb:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0012ebf:	45                   	inc    ebp
c0012ec0:	eb ad                	jmp    c0012e6f <Reg::readInt(char*, char*, int*)+0x7f>
c0012ec2:	84 c0                	test   al,al
c0012ec4:	74 02                	je     c0012ec8 <Reg::readInt(char*, char*, int*)+0xd8>
c0012ec6:	f7 da                	neg    edx
c0012ec8:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0012ecf:	89 10                	mov    DWORD PTR [eax],edx
c0012ed1:	88 d8                	mov    al,bl
c0012ed3:	81 c4 ec 00 00 00    	add    esp,0xec
c0012ed9:	5b                   	pop    ebx
c0012eda:	5e                   	pop    esi
c0012edb:	5f                   	pop    edi
c0012edc:	5d                   	pop    ebp
c0012edd:	c3                   	ret    

c0012ede <Reg::readString(char*, char*, char*, int)>:
c0012ede:	57                   	push   edi
c0012edf:	56                   	push   esi
c0012ee0:	53                   	push   ebx
c0012ee1:	81 ec d4 00 00 00    	sub    esp,0xd4
c0012ee7:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0012eee:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0012ef2:	57                   	push   edi
c0012ef3:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0012efa:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0012f01:	e8 b3 fe ff ff       	call   c0012db9 <Reg::getLine(char*, char*, char*)>
c0012f06:	83 c4 10             	add    esp,0x10
c0012f09:	89 c6                	mov    esi,eax
c0012f0b:	84 c0                	test   al,al
c0012f0d:	74 44                	je     c0012f53 <Reg::readString(char*, char*, char*, int)+0x75>
c0012f0f:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0012f16:	31 c0                	xor    eax,eax
c0012f18:	4a                   	dec    edx
c0012f19:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0012f1c:	84 c9                	test   cl,cl
c0012f1e:	74 0f                	je     c0012f2f <Reg::readString(char*, char*, char*, int)+0x51>
c0012f20:	39 c2                	cmp    edx,eax
c0012f22:	7e 0b                	jle    c0012f2f <Reg::readString(char*, char*, char*, int)+0x51>
c0012f24:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0012f27:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0012f2c:	40                   	inc    eax
c0012f2d:	eb ea                	jmp    c0012f19 <Reg::readString(char*, char*, char*, int)+0x3b>
c0012f2f:	83 ec 0c             	sub    esp,0xc
c0012f32:	53                   	push   ebx
c0012f33:	e8 38 d6 fe ff       	call   c0000570 <strlen>
c0012f38:	83 c4 10             	add    esp,0x10
c0012f3b:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0012f40:	75 11                	jne    c0012f53 <Reg::readString(char*, char*, char*, int)+0x75>
c0012f42:	83 ec 0c             	sub    esp,0xc
c0012f45:	53                   	push   ebx
c0012f46:	e8 25 d6 fe ff       	call   c0000570 <strlen>
c0012f4b:	83 c4 10             	add    esp,0x10
c0012f4e:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012f53:	81 c4 d0 00 00 00    	add    esp,0xd0
c0012f59:	89 f0                	mov    eax,esi
c0012f5b:	5b                   	pop    ebx
c0012f5c:	5e                   	pop    esi
c0012f5d:	5f                   	pop    edi
c0012f5e:	c3                   	ret    

c0012f5f <Reg::readBool(char*, char*, bool*)>:
c0012f5f:	83 ec 20             	sub    esp,0x20
c0012f62:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012f66:	50                   	push   eax
c0012f67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f6f:	e8 7c fe ff ff       	call   c0012df0 <Reg::readInt(char*, char*, int*)>
c0012f74:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0012f79:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0012f7d:	0f 95 02             	setne  BYTE PTR [edx]
c0012f80:	83 c4 2c             	add    esp,0x2c
c0012f83:	c3                   	ret    

c0012f84 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0012f84:	53                   	push   ebx
c0012f85:	83 ec 1c             	sub    esp,0x1c
c0012f88:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0012f8c:	8d 44 24 13          	lea    eax,[esp+0x13]
c0012f90:	50                   	push   eax
c0012f91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f99:	e8 c1 ff ff ff       	call   c0012f5f <Reg::readBool(char*, char*, bool*)>
c0012f9e:	83 c4 10             	add    esp,0x10
c0012fa1:	84 c0                	test   al,al
c0012fa3:	74 04                	je     c0012fa9 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0012fa5:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0012fa9:	88 d8                	mov    al,bl
c0012fab:	83 c4 18             	add    esp,0x18
c0012fae:	5b                   	pop    ebx
c0012faf:	c3                   	ret    

c0012fb0 <Reg::readIntWithDefault(char*, char*, int)>:
c0012fb0:	53                   	push   ebx
c0012fb1:	83 ec 1c             	sub    esp,0x1c
c0012fb4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012fb8:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012fbc:	50                   	push   eax
c0012fbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012fc1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012fc5:	e8 26 fe ff ff       	call   c0012df0 <Reg::readInt(char*, char*, int*)>
c0012fca:	83 c4 10             	add    esp,0x10
c0012fcd:	84 c0                	test   al,al
c0012fcf:	74 04                	je     c0012fd5 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0012fd1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012fd5:	89 d8                	mov    eax,ebx
c0012fd7:	83 c4 18             	add    esp,0x18
c0012fda:	5b                   	pop    ebx
c0012fdb:	c3                   	ret    

c0012fdc <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0012fdc:	57                   	push   edi
c0012fdd:	56                   	push   esi
c0012fde:	56                   	push   esi
c0012fdf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012fe3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012fe7:	56                   	push   esi
c0012fe8:	57                   	push   edi
c0012fe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ff1:	e8 e8 fe ff ff       	call   c0012ede <Reg::readString(char*, char*, char*, int)>
c0012ff6:	83 c4 10             	add    esp,0x10
c0012ff9:	84 c0                	test   al,al
c0012ffb:	75 1a                	jne    c0013017 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0012ffd:	51                   	push   ecx
c0012ffe:	56                   	push   esi
c0012fff:	6a 00                	push   0x0
c0013001:	57                   	push   edi
c0013002:	e8 e9 d4 fe ff       	call   c00004f0 <memset>
c0013007:	8d 4e ff             	lea    ecx,[esi-0x1]
c001300a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001300e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013010:	83 c4 10             	add    esp,0x10
c0013013:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013017:	89 f8                	mov    eax,edi
c0013019:	5a                   	pop    edx
c001301a:	5e                   	pop    esi
c001301b:	5f                   	pop    edi
c001301c:	c3                   	ret    

c001301d <SysEject(regs*)>:
c001301d:	83 ec 0c             	sub    esp,0xc
c0013020:	83 ca ff             	or     edx,0xffffffff
c0013023:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013027:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001302a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001302f:	83 e9 41             	sub    ecx,0x41
c0013032:	83 f9 19             	cmp    ecx,0x19
c0013035:	77 18                	ja     c001304f <SysEject(regs*)+0x32>
c0013037:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c001303e:	85 c9                	test   ecx,ecx
c0013040:	74 0d                	je     c001304f <SysEject(regs*)+0x32>
c0013042:	83 ec 0c             	sub    esp,0xc
c0013045:	51                   	push   ecx
c0013046:	e8 5b a1 ff ff       	call   c000d1a6 <LogicalDisk::eject()>
c001304b:	83 c4 10             	add    esp,0x10
c001304e:	99                   	cdq    
c001304f:	83 c4 0c             	add    esp,0xc
c0013052:	c3                   	ret    

c0013053 <SysExit(regs*)>:
c0013053:	83 ec 18             	sub    esp,0x18
c0013056:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001305a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001305d:	e8 1a 2a 00 00       	call   c0015a7c <terminateTask(int)>
c0013062:	83 c8 ff             	or     eax,0xffffffff
c0013065:	83 c4 1c             	add    esp,0x1c
c0013068:	89 c2                	mov    edx,eax
c001306a:	c3                   	ret    

c001306b <SysGetCwd(regs*)>:
c001306b:	83 ec 10             	sub    esp,0x10
c001306e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013072:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013075:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013078:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001307d:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013080:	e8 eb 7c ff ff       	call   c000ad70 <Fs::getcwd(Process*, char*, int)>
c0013085:	83 c4 1c             	add    esp,0x1c
c0013088:	99                   	cdq    
c0013089:	c3                   	ret    

c001308a <SysGetPID(regs*)>:
c001308a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001308f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013092:	8b 00                	mov    eax,DWORD PTR [eax]
c0013094:	99                   	cdq    
c0013095:	c3                   	ret    

c0013096 <SysGetRAMData(regs*)>:
c0013096:	8b 0d e8 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024ee8
c001309c:	69 05 e4 4e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0024ee4,0xc8
c00130a6:	99                   	cdq    
c00130a7:	f7 f9                	idiv   ecx
c00130a9:	c1 e0 18             	shl    eax,0x18
c00130ac:	09 c8                	or     eax,ecx
c00130ae:	99                   	cdq    
c00130af:	c3                   	ret    

c00130b0 <SysGetVGAPtr(regs*)>:
c00130b0:	55                   	push   ebp
c00130b1:	57                   	push   edi
c00130b2:	56                   	push   esi
c00130b3:	53                   	push   ebx
c00130b4:	83 ec 18             	sub    esp,0x18
c00130b7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00130bb:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00130be:	e8 85 24 00 00       	call   c0015548 <Thr::processFromPID(int)>
c00130c3:	83 c4 10             	add    esp,0x10
c00130c6:	89 c1                	mov    ecx,eax
c00130c8:	b8 01 00 00 00       	mov    eax,0x1
c00130cd:	85 c9                	test   ecx,ecx
c00130cf:	74 57                	je     c0013128 <SysGetVGAPtr(regs*)+0x78>
c00130d1:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c00130d7:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00130db:	74 0c                	je     c00130e9 <SysGetVGAPtr(regs*)+0x39>
c00130dd:	83 ec 0c             	sub    esp,0xc
c00130e0:	55                   	push   ebp
c00130e1:	e8 5d 56 ff ff       	call   c0008743 <setActiveTerminal(VgaText*)>
c00130e6:	83 c4 10             	add    esp,0x10
c00130e9:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00130ec:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00130ef:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c00130f4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00130f6:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00130f9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00130fc:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013102:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013105:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013108:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001310e:	50                   	push   eax
c001310f:	50                   	push   eax
c0013110:	68 64 0f 02 c0       	push   0xc0020f64
c0013115:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013118:	05 a8 0f 00 00       	add    eax,0xfa8
c001311d:	50                   	push   eax
c001311e:	e8 1d d5 fe ff       	call   c0000640 <strcpy>
c0013123:	83 c4 10             	add    esp,0x10
c0013126:	31 c0                	xor    eax,eax
c0013128:	83 c4 0c             	add    esp,0xc
c001312b:	31 d2                	xor    edx,edx
c001312d:	5b                   	pop    ebx
c001312e:	5e                   	pop    esi
c001312f:	5f                   	pop    edi
c0013130:	5d                   	pop    ebp
c0013131:	c3                   	ret    
c0013132:	66 90                	xchg   ax,ax

c0013134 <SysKill(regs*)>:
c0013134:	53                   	push   ebx
c0013135:	83 ec 08             	sub    esp,0x8
c0013138:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001313c:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013140:	75 16                	jne    c0013158 <SysKill(regs*)+0x24>
c0013142:	83 ec 0c             	sub    esp,0xc
c0013145:	68 6e 0f 02 c0       	push   0xc0020f6e
c001314a:	e8 d8 d7 ff ff       	call   c0010927 <KePanic(char const*)>
c001314f:	83 c4 10             	add    esp,0x10
c0013152:	e9 89 00 00 00       	jmp    c00131e0 <SysKill(regs*)+0xac>
c0013157:	90                   	nop
c0013158:	83 ec 0c             	sub    esp,0xc
c001315b:	68 84 81 02 c0       	push   0xc0028184
c0013160:	e8 f7 ba 00 00       	call   c001ec5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013165:	8d 76 00             	lea    esi,[esi+0x0]
c0013168:	83 c4 10             	add    esp,0x10
c001316b:	85 c0                	test   eax,eax
c001316d:	74 19                	je     c0013188 <SysKill(regs*)+0x54>
c001316f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013172:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013175:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013177:	74 33                	je     c00131ac <SysKill(regs*)+0x78>
c0013179:	52                   	push   edx
c001317a:	52                   	push   edx
c001317b:	50                   	push   eax
c001317c:	68 84 81 02 c0       	push   0xc0028184
c0013181:	e8 f6 bd 00 00       	call   c001ef7c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013186:	eb e0                	jmp    c0013168 <SysKill(regs*)+0x34>
c0013188:	83 ec 0c             	sub    esp,0xc
c001318b:	68 78 81 02 c0       	push   0xc0028178
c0013190:	e8 c7 ba 00 00       	call   c001ec5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013195:	8d 76 00             	lea    esi,[esi+0x0]
c0013198:	83 c4 10             	add    esp,0x10
c001319b:	85 c0                	test   eax,eax
c001319d:	74 41                	je     c00131e0 <SysKill(regs*)+0xac>
c001319f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00131a2:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00131a5:	39 0a                	cmp    DWORD PTR [edx],ecx
c00131a7:	75 27                	jne    c00131d0 <SysKill(regs*)+0x9c>
c00131a9:	8d 76 00             	lea    esi,[esi+0x0]
c00131ac:	51                   	push   ecx
c00131ad:	51                   	push   ecx
c00131ae:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00131b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00131b6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00131b9:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00131bf:	e8 ff db ff ff       	call   c0010dc3 <KeRaiseSignal(SigHandlerBlock*, int)>
c00131c4:	83 c4 10             	add    esp,0x10
c00131c7:	31 c0                	xor    eax,eax
c00131c9:	31 d2                	xor    edx,edx
c00131cb:	eb 1b                	jmp    c00131e8 <SysKill(regs*)+0xb4>
c00131cd:	8d 76 00             	lea    esi,[esi+0x0]
c00131d0:	52                   	push   edx
c00131d1:	52                   	push   edx
c00131d2:	50                   	push   eax
c00131d3:	68 78 81 02 c0       	push   0xc0028178
c00131d8:	e8 9f bd 00 00       	call   c001ef7c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00131dd:	eb b9                	jmp    c0013198 <SysKill(regs*)+0x64>
c00131df:	90                   	nop
c00131e0:	83 c8 ff             	or     eax,0xffffffff
c00131e3:	89 c2                	mov    edx,eax
c00131e5:	8d 76 00             	lea    esi,[esi+0x0]
c00131e8:	83 c4 08             	add    esp,0x8
c00131eb:	5b                   	pop    ebx
c00131ec:	c3                   	ret    

c00131ed <SysLoadDLL(regs*)>:
c00131ed:	56                   	push   esi
c00131ee:	53                   	push   ebx
c00131ef:	31 d2                	xor    edx,edx
c00131f1:	51                   	push   ecx
c00131f2:	b8 01 00 00 00       	mov    eax,0x1
c00131f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00131fb:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00131ff:	0f 84 8c 00 00 00    	je     c0013291 <SysLoadDLL(regs*)+0xa4>
c0013205:	83 ec 0c             	sub    esp,0xc
c0013208:	68 14 01 00 00       	push   0x114
c001320d:	e8 9c 48 ff ff       	call   c0007aae <malloc>
c0013212:	83 c4 0c             	add    esp,0xc
c0013215:	89 c3                	mov    ebx,eax
c0013217:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001321c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001321f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013222:	53                   	push   ebx
c0013223:	e8 52 7d ff ff       	call   c000af7a <File::File(char const*, Process*)>
c0013228:	83 c4 10             	add    esp,0x10
c001322b:	31 d2                	xor    edx,edx
c001322d:	b8 02 00 00 00       	mov    eax,0x2
c0013232:	85 db                	test   ebx,ebx
c0013234:	74 5b                	je     c0013291 <SysLoadDLL(regs*)+0xa4>
c0013236:	83 ec 0c             	sub    esp,0xc
c0013239:	53                   	push   ebx
c001323a:	e8 65 80 ff ff       	call   c000b2a4 <File::exists()>
c001323f:	83 c4 10             	add    esp,0x10
c0013242:	84 c0                	test   al,al
c0013244:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013246:	75 11                	jne    c0013259 <SysLoadDLL(regs*)+0x6c>
c0013248:	83 ec 0c             	sub    esp,0xc
c001324b:	53                   	push   ebx
c001324c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001324f:	83 c4 10             	add    esp,0x10
c0013252:	b8 03 00 00 00       	mov    eax,0x3
c0013257:	eb 36                	jmp    c001328f <SysLoadDLL(regs*)+0xa2>
c0013259:	83 ec 0c             	sub    esp,0xc
c001325c:	53                   	push   ebx
c001325d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013260:	58                   	pop    eax
c0013261:	5a                   	pop    edx
c0013262:	6a 00                	push   0x0
c0013264:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013267:	e8 12 14 00 00       	call   c001467e <Thr::loadDLL(char const*, bool)>
c001326c:	83 c4 10             	add    esp,0x10
c001326f:	89 c1                	mov    ecx,eax
c0013271:	31 d2                	xor    edx,edx
c0013273:	b8 04 00 00 00       	mov    eax,0x4
c0013278:	85 c9                	test   ecx,ecx
c001327a:	74 15                	je     c0013291 <SysLoadDLL(regs*)+0xa4>
c001327c:	53                   	push   ebx
c001327d:	53                   	push   ebx
c001327e:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0013284:	51                   	push   ecx
c0013285:	e8 25 16 00 00       	call   c00148af <Thr::executeDLL(unsigned long, void*)>
c001328a:	83 c4 10             	add    esp,0x10
c001328d:	31 c0                	xor    eax,eax
c001328f:	31 d2                	xor    edx,edx
c0013291:	59                   	pop    ecx
c0013292:	5b                   	pop    ebx
c0013293:	5e                   	pop    esi
c0013294:	c3                   	ret    

c0013295 <SysRead(regs*)>:
c0013295:	57                   	push   edi
c0013296:	56                   	push   esi
c0013297:	53                   	push   ebx
c0013298:	83 ec 10             	sub    esp,0x10
c001329b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001329f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00132a2:	83 f8 02             	cmp    eax,0x2
c00132a5:	77 10                	ja     c00132b7 <SysRead(regs*)+0x22>
c00132a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00132ac:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00132af:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00132b5:	eb 0e                	jmp    c00132c5 <SysRead(regs*)+0x30>
c00132b7:	83 ec 0c             	sub    esp,0xc
c00132ba:	50                   	push   eax
c00132bb:	e8 03 62 ff ff       	call   c00094c3 <getFromFileDescriptor(int)>
c00132c0:	83 c4 10             	add    esp,0x10
c00132c3:	89 c1                	mov    ecx,eax
c00132c5:	83 c8 ff             	or     eax,0xffffffff
c00132c8:	85 c9                	test   ecx,ecx
c00132ca:	89 c2                	mov    edx,eax
c00132cc:	74 28                	je     c00132f6 <SysRead(regs*)+0x61>
c00132ce:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00132d6:	31 ff                	xor    edi,edi
c00132d8:	83 ec 0c             	sub    esp,0xc
c00132db:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132dd:	8d 54 24 18          	lea    edx,[esp+0x18]
c00132e1:	52                   	push   edx
c00132e2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00132e5:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00132e8:	57                   	push   edi
c00132e9:	56                   	push   esi
c00132ea:	51                   	push   ecx
c00132eb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00132ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00132f2:	83 c4 20             	add    esp,0x20
c00132f5:	99                   	cdq    
c00132f6:	83 c4 10             	add    esp,0x10
c00132f9:	5b                   	pop    ebx
c00132fa:	5e                   	pop    esi
c00132fb:	5f                   	pop    edi
c00132fc:	c3                   	ret    

c00132fd <SysRegisterSignal(regs*)>:
c00132fd:	83 ec 18             	sub    esp,0x18
c0013300:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013304:	6a 00                	push   0x0
c0013306:	6a 00                	push   0x0
c0013308:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001330b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001330e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013313:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013316:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001331c:	e8 6c da ff ff       	call   c0010d8d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0013321:	83 c4 2c             	add    esp,0x2c
c0013324:	99                   	cdq    
c0013325:	c3                   	ret    

c0013326 <SysRegistryGetTypeFromPath(regs*)>:
c0013326:	57                   	push   edi
c0013327:	56                   	push   esi
c0013328:	53                   	push   ebx
c0013329:	81 ec 38 01 00 00    	sub    esp,0x138
c001332f:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0013336:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013339:	68 8f 0f 02 c0       	push   0xc0020f8f
c001333e:	e8 b4 76 ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c0013343:	5a                   	pop    edx
c0013344:	59                   	pop    ecx
c0013345:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013348:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001334b:	e8 4d f6 ff ff       	call   c001299d <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013350:	5f                   	pop    edi
c0013351:	89 c6                	mov    esi,eax
c0013353:	5a                   	pop    edx
c0013354:	50                   	push   eax
c0013355:	68 af 0f 02 c0       	push   0xc0020faf
c001335a:	e8 98 76 ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c001335f:	83 c4 10             	add    esp,0x10
c0013362:	85 f6                	test   esi,esi
c0013364:	74 28                	je     c001338e <SysRegistryGetTypeFromPath(regs*)+0x68>
c0013366:	50                   	push   eax
c0013367:	8d 7c 24 08          	lea    edi,[esp+0x8]
c001336b:	57                   	push   edi
c001336c:	56                   	push   esi
c001336d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013370:	e8 0c f2 ff ff       	call   c0012581 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013375:	83 c4 0c             	add    esp,0xc
c0013378:	89 c3                	mov    ebx,eax
c001337a:	57                   	push   edi
c001337b:	50                   	push   eax
c001337c:	68 b7 0f 02 c0       	push   0xc0020fb7
c0013381:	e8 71 76 ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c0013386:	89 d8                	mov    eax,ebx
c0013388:	83 c4 10             	add    esp,0x10
c001338b:	99                   	cdq    
c001338c:	eb 05                	jmp    c0013393 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c001338e:	83 c8 ff             	or     eax,0xffffffff
c0013391:	89 c2                	mov    edx,eax
c0013393:	81 c4 30 01 00 00    	add    esp,0x130
c0013399:	5b                   	pop    ebx
c001339a:	5e                   	pop    esi
c001339b:	5f                   	pop    edi
c001339c:	c3                   	ret    

c001339d <SysRegistryReadExtent(regs*)>:
c001339d:	83 ec 1c             	sub    esp,0x1c
c00133a0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00133a4:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00133a7:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c00133aa:	85 c0                	test   eax,eax
c00133ac:	79 1f                	jns    c00133cd <SysRegistryReadExtent(regs*)+0x30>
c00133ae:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00133b3:	52                   	push   edx
c00133b4:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00133b8:	52                   	push   edx
c00133b9:	50                   	push   eax
c00133ba:	51                   	push   ecx
c00133bb:	e8 b3 f0 ff ff       	call   c0012473 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c00133c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00133c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00133c8:	83 c4 10             	add    esp,0x10
c00133cb:	eb 14                	jmp    c00133e1 <SysRegistryReadExtent(regs*)+0x44>
c00133cd:	83 ec 04             	sub    esp,0x4
c00133d0:	ff 72 24             	push   DWORD PTR [edx+0x24]
c00133d3:	50                   	push   eax
c00133d4:	51                   	push   ecx
c00133d5:	e8 33 eb ff ff       	call   c0011f0d <CmGetString(Reghive_Tag*, int, char*)>
c00133da:	83 c4 10             	add    esp,0x10
c00133dd:	31 c0                	xor    eax,eax
c00133df:	31 d2                	xor    edx,edx
c00133e1:	83 c4 1c             	add    esp,0x1c
c00133e4:	c3                   	ret    

c00133e5 <SysRegistryPathToExtentLookup(regs*)>:
c00133e5:	53                   	push   ebx
c00133e6:	83 ec 10             	sub    esp,0x10
c00133e9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00133ed:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00133f0:	68 cd 0f 02 c0       	push   0xc0020fcd
c00133f5:	e8 fd 75 ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c00133fa:	58                   	pop    eax
c00133fb:	5a                   	pop    edx
c00133fc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00133ff:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013402:	e8 96 f5 ff ff       	call   c001299d <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013407:	83 c4 18             	add    esp,0x18
c001340a:	99                   	cdq    
c001340b:	5b                   	pop    ebx
c001340c:	c3                   	ret    

c001340d <SysRegistryEnterDirectory(regs*)>:
c001340d:	53                   	push   ebx
c001340e:	83 ec 10             	sub    esp,0x10
c0013411:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013415:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013418:	68 f0 0f 02 c0       	push   0xc0020ff0
c001341d:	e8 d5 75 ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c0013422:	58                   	pop    eax
c0013423:	5a                   	pop    edx
c0013424:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013427:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001342a:	e8 55 eb ff ff       	call   c0011f84 <CmEnterDirectory(Reghive_Tag*, int)>
c001342f:	83 c4 18             	add    esp,0x18
c0013432:	99                   	cdq    
c0013433:	5b                   	pop    ebx
c0013434:	c3                   	ret    

c0013435 <SysRegistryGetNext(regs*)>:
c0013435:	53                   	push   ebx
c0013436:	83 ec 10             	sub    esp,0x10
c0013439:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001343d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013440:	68 0e 10 02 c0       	push   0xc002100e
c0013445:	e8 ad 75 ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c001344a:	58                   	pop    eax
c001344b:	5a                   	pop    edx
c001344c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001344f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013452:	e8 6c eb ff ff       	call   c0011fc3 <CmGetNext(Reghive_Tag*, int)>
c0013457:	83 c4 18             	add    esp,0x18
c001345a:	99                   	cdq    
c001345b:	5b                   	pop    ebx
c001345c:	c3                   	ret    

c001345d <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c001345d:	57                   	push   edi
c001345e:	56                   	push   esi
c001345f:	53                   	push   ebx
c0013460:	81 ec 34 01 00 00    	sub    esp,0x134
c0013466:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001346d:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013471:	57                   	push   edi
c0013472:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013475:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013478:	e8 04 f1 ff ff       	call   c0012581 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001347d:	89 c3                	mov    ebx,eax
c001347f:	58                   	pop    eax
c0013480:	5a                   	pop    edx
c0013481:	57                   	push   edi
c0013482:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013485:	e8 b6 d1 fe ff       	call   c0000640 <strcpy>
c001348a:	89 d8                	mov    eax,ebx
c001348c:	81 c4 40 01 00 00    	add    esp,0x140
c0013492:	99                   	cdq    
c0013493:	5b                   	pop    ebx
c0013494:	5e                   	pop    esi
c0013495:	5f                   	pop    edi
c0013496:	c3                   	ret    

c0013497 <SysRegistryOpen(regs*)>:
c0013497:	83 ec 18             	sub    esp,0x18
c001349a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001349e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00134a1:	e8 f7 e8 ff ff       	call   c0011d9d <CmOpen(char const*)>
c00134a6:	83 c4 1c             	add    esp,0x1c
c00134a9:	99                   	cdq    
c00134aa:	c3                   	ret    

c00134ab <SysRegistryClose(regs*)>:
c00134ab:	83 ec 18             	sub    esp,0x18
c00134ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134b2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00134b5:	e8 01 ea ff ff       	call   c0011ebb <CmClose(Reghive_Tag*)>
c00134ba:	31 c0                	xor    eax,eax
c00134bc:	31 d2                	xor    edx,edx
c00134be:	83 c4 1c             	add    esp,0x1c
c00134c1:	c3                   	ret    

c00134c2 <SysSbrk(regs*)>:
c00134c2:	56                   	push   esi
c00134c3:	53                   	push   ebx
c00134c4:	50                   	push   eax
c00134c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00134ca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00134ce:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00134d1:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00134d4:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00134da:	85 db                	test   ebx,ebx
c00134dc:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00134df:	74 02                	je     c00134e3 <SysSbrk(regs*)+0x21>
c00134e1:	79 06                	jns    c00134e9 <SysSbrk(regs*)+0x27>
c00134e3:	89 f0                	mov    eax,esi
c00134e5:	31 d2                	xor    edx,edx
c00134e7:	eb 2a                	jmp    c0013513 <SysSbrk(regs*)+0x51>
c00134e9:	83 c8 ff             	or     eax,0xffffffff
c00134ec:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00134f2:	89 c2                	mov    edx,eax
c00134f4:	77 1d                	ja     c0013513 <SysSbrk(regs*)+0x51>
c00134f6:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00134fc:	50                   	push   eax
c00134fd:	c1 ea 0c             	shr    edx,0xc
c0013500:	68 07 0c 00 00       	push   0xc07
c0013505:	52                   	push   edx
c0013506:	51                   	push   ecx
c0013507:	e8 fe 68 ff ff       	call   c0009e0a <VAS::allocatePages(int, int)>
c001350c:	89 f0                	mov    eax,esi
c001350e:	31 d2                	xor    edx,edx
c0013510:	83 c4 10             	add    esp,0x10
c0013513:	59                   	pop    ecx
c0013514:	5b                   	pop    ebx
c0013515:	5e                   	pop    esi
c0013516:	c3                   	ret    

c0013517 <SysSetCwd(regs*)>:
c0013517:	83 ec 14             	sub    esp,0x14
c001351a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001351e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013521:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013526:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013529:	e8 15 7e ff ff       	call   c000b343 <Fs::setcwd(Process*, char*)>
c001352e:	83 c4 1c             	add    esp,0x1c
c0013531:	99                   	cdq    
c0013532:	c3                   	ret    

c0013533 <SysSetTime(regs*)>:
c0013533:	55                   	push   ebp
c0013534:	31 c9                	xor    ecx,ecx
c0013536:	57                   	push   edi
c0013537:	bd 0c 00 00 00       	mov    ebp,0xc
c001353c:	56                   	push   esi
c001353d:	53                   	push   ebx
c001353e:	31 db                	xor    ebx,ebx
c0013540:	83 ec 10             	sub    esp,0x10
c0013543:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013547:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001354a:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001354d:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0013550:	89 c2                	mov    edx,eax
c0013552:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0013558:	83 e2 1f             	and    edx,0x1f
c001355b:	c1 e7 10             	shl    edi,0x10
c001355e:	42                   	inc    edx
c001355f:	c1 e8 05             	shr    eax,0x5
c0013562:	88 d1                	mov    cl,dl
c0013564:	31 d2                	xor    edx,edx
c0013566:	f7 f5                	div    ebp
c0013568:	89 dd                	mov    ebp,ebx
c001356a:	88 d5                	mov    ch,dl
c001356c:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0013572:	0f b7 c1             	movzx  eax,cx
c0013575:	31 d2                	xor    edx,edx
c0013577:	09 f8                	or     eax,edi
c0013579:	bf 3c 00 00 00       	mov    edi,0x3c
c001357e:	89 c1                	mov    ecx,eax
c0013580:	89 f0                	mov    eax,esi
c0013582:	f7 f7                	div    edi
c0013584:	c1 e2 10             	shl    edx,0x10
c0013587:	09 d5                	or     ebp,edx
c0013589:	31 d2                	xor    edx,edx
c001358b:	89 eb                	mov    ebx,ebp
c001358d:	f7 f7                	div    edi
c001358f:	bf 10 0e 00 00       	mov    edi,0xe10
c0013594:	88 d7                	mov    bh,dl
c0013596:	89 f0                	mov    eax,esi
c0013598:	31 d2                	xor    edx,edx
c001359a:	f7 f7                	div    edi
c001359c:	bf 18 00 00 00       	mov    edi,0x18
c00135a1:	31 d2                	xor    edx,edx
c00135a3:	f7 f7                	div    edi
c00135a5:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00135aa:	88 d3                	mov    bl,dl
c00135ac:	53                   	push   ebx
c00135ad:	51                   	push   ecx
c00135ae:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00135b4:	e8 89 85 ff ff       	call   c000bb42 <Clock::setTimeInDatetimeLocal(datetime_t)>
c00135b9:	83 c4 1c             	add    esp,0x1c
c00135bc:	83 f0 01             	xor    eax,0x1
c00135bf:	5b                   	pop    ebx
c00135c0:	0f b6 c0             	movzx  eax,al
c00135c3:	5e                   	pop    esi
c00135c4:	31 d2                	xor    edx,edx
c00135c6:	5f                   	pop    edi
c00135c7:	5d                   	pop    ebp
c00135c8:	c3                   	ret    

c00135c9 <SysTimezone(regs*)>:
c00135c9:	53                   	push   ebx
c00135ca:	83 ec 08             	sub    esp,0x8
c00135cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00135d1:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00135d5:	75 17                	jne    c00135ee <SysTimezone(regs*)+0x25>
c00135d7:	83 ec 0c             	sub    esp,0xc
c00135da:	68 25 10 02 c0       	push   0xc0021025
c00135df:	e8 13 74 ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c00135e4:	83 c8 ff             	or     eax,0xffffffff
c00135e7:	83 c4 10             	add    esp,0x10
c00135ea:	89 c2                	mov    edx,eax
c00135ec:	eb 20                	jmp    c001360e <SysTimezone(regs*)+0x45>
c00135ee:	83 ec 0c             	sub    esp,0xc
c00135f1:	68 3a 10 02 c0       	push   0xc002103a
c00135f6:	e8 fc 73 ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c00135fb:	58                   	pop    eax
c00135fc:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00135ff:	e8 a8 82 ff ff       	call   c000b8ac <User::loadClockSettings(int)>
c0013604:	83 c4 10             	add    esp,0x10
c0013607:	b8 01 00 00 00       	mov    eax,0x1
c001360c:	31 d2                	xor    edx,edx
c001360e:	83 c4 08             	add    esp,0x8
c0013611:	5b                   	pop    ebx
c0013612:	c3                   	ret    

c0013613 <SysWrite(regs*)>:
c0013613:	57                   	push   edi
c0013614:	56                   	push   esi
c0013615:	53                   	push   ebx
c0013616:	83 ec 10             	sub    esp,0x10
c0013619:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001361d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013620:	83 f8 02             	cmp    eax,0x2
c0013623:	77 10                	ja     c0013635 <SysWrite(regs*)+0x22>
c0013625:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001362a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001362d:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013633:	eb 0e                	jmp    c0013643 <SysWrite(regs*)+0x30>
c0013635:	83 ec 0c             	sub    esp,0xc
c0013638:	50                   	push   eax
c0013639:	e8 85 5e ff ff       	call   c00094c3 <getFromFileDescriptor(int)>
c001363e:	83 c4 10             	add    esp,0x10
c0013641:	89 c1                	mov    ecx,eax
c0013643:	83 c8 ff             	or     eax,0xffffffff
c0013646:	85 c9                	test   ecx,ecx
c0013648:	89 c2                	mov    edx,eax
c001364a:	74 28                	je     c0013674 <SysWrite(regs*)+0x61>
c001364c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013654:	31 ff                	xor    edi,edi
c0013656:	83 ec 0c             	sub    esp,0xc
c0013659:	8b 01                	mov    eax,DWORD PTR [ecx]
c001365b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001365f:	52                   	push   edx
c0013660:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013663:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013666:	57                   	push   edi
c0013667:	56                   	push   esi
c0013668:	51                   	push   ecx
c0013669:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001366c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013670:	83 c4 20             	add    esp,0x20
c0013673:	99                   	cdq    
c0013674:	83 c4 10             	add    esp,0x10
c0013677:	5b                   	pop    ebx
c0013678:	5e                   	pop    esi
c0013679:	5f                   	pop    edi
c001367a:	c3                   	ret    

c001367b <SysWsbe(regs*)>:
c001367b:	57                   	push   edi
c001367c:	b9 0b 00 00 00       	mov    ecx,0xb
c0013681:	56                   	push   esi
c0013682:	be 79 10 02 c0       	mov    esi,0xc0021079
c0013687:	53                   	push   ebx
c0013688:	83 ec 30             	sub    esp,0x30
c001368b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001368f:	fc                   	cld    
c0013690:	83 ec 0c             	sub    esp,0xc
c0013693:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013695:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0013699:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001369e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00136a1:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00136a7:	8b 06                	mov    eax,DWORD PTR [esi]
c00136a9:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00136ac:	57                   	push   edi
c00136ad:	e8 be ce fe ff       	call   c0000570 <strlen>
c00136b2:	5a                   	pop    edx
c00136b3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00136b7:	52                   	push   edx
c00136b8:	31 d2                	xor    edx,edx
c00136ba:	57                   	push   edi
c00136bb:	52                   	push   edx
c00136bc:	50                   	push   eax
c00136bd:	56                   	push   esi
c00136be:	ff d3                	call   ebx
c00136c0:	83 c4 14             	add    esp,0x14
c00136c3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00136c7:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00136ca:	e8 ad 23 00 00       	call   c0015a7c <terminateTask(int)>
c00136cf:	83 c4 40             	add    esp,0x40
c00136d2:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00136d7:	5b                   	pop    ebx
c00136d8:	31 d2                	xor    edx,edx
c00136da:	5e                   	pop    esi
c00136db:	5f                   	pop    edi
c00136dc:	c3                   	ret    

c00136dd <SysYield(regs*)>:
c00136dd:	83 ec 0c             	sub    esp,0xc
c00136e0:	fa                   	cli    
c00136e1:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00136e7:	e8 f0 19 00 00       	call   c00150dc <schedule()>
c00136ec:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00136f1:	48                   	dec    eax
c00136f2:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00136f7:	75 01                	jne    c00136fa <SysYield(regs*)+0x1d>
c00136f9:	fb                   	sti    
c00136fa:	31 c0                	xor    eax,eax
c00136fc:	31 d2                	xor    edx,edx
c00136fe:	83 c4 0c             	add    esp,0xc
c0013701:	c3                   	ret    

c0013702 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0013702:	55                   	push   ebp
c0013703:	57                   	push   edi
c0013704:	56                   	push   esi
c0013705:	53                   	push   ebx
c0013706:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001370c:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0013714:	0f 95 c0             	setne  al
c0013717:	31 d2                	xor    edx,edx
c0013719:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0013721:	0f 94 c2             	sete   dl
c0013724:	85 c2                	test   edx,eax
c0013726:	74 34                	je     c001375c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0013728:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0013733:	74 27                	je     c001375c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0013735:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c001373c:	05 00 10 00 00       	add    eax,0x1000
c0013741:	89 c1                	mov    ecx,eax
c0013743:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013748:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c001374e:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0013755:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c001375c:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0013763:	83 ec 0c             	sub    esp,0xc
c0013766:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001376c:	6a 01                	push   0x1
c001376e:	e8 aa 5e ff ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c0013773:	83 c4 10             	add    esp,0x10
c0013776:	89 c3                	mov    ebx,eax
c0013778:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001377e:	0f 86 25 01 00 00    	jbe    c00138a9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0013784:	c1 ee 0c             	shr    esi,0xc
c0013787:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001378e:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0013792:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001379a:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00137a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00137a5:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00137ac:	29 ef                	sub    edi,ebp
c00137ae:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00137b2:	0f 83 f8 00 00 00    	jae    c00138b0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ae>
c00137b8:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00137be:	76 05                	jbe    c00137c5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c00137c0:	bf 00 10 00 00       	mov    edi,0x1000
c00137c5:	83 ec 0c             	sub    esp,0xc
c00137c8:	31 d2                	xor    edx,edx
c00137ca:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00137d1:	8b 08                	mov    ecx,DWORD PTR [eax]
c00137d3:	8d 44 24 28          	lea    eax,[esp+0x28]
c00137d7:	50                   	push   eax
c00137d8:	8d 74 24 30          	lea    esi,[esp+0x30]
c00137dc:	56                   	push   esi
c00137dd:	52                   	push   edx
c00137de:	57                   	push   edi
c00137df:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c00137e6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00137e9:	83 c4 20             	add    esp,0x20
c00137ec:	85 c0                	test   eax,eax
c00137ee:	75 06                	jne    c00137f6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c00137f0:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00137f4:	74 13                	je     c0013809 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c00137f6:	83 ec 0c             	sub    esp,0xc
c00137f9:	53                   	push   ebx
c00137fa:	e8 3a 61 ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c00137ff:	83 c4 10             	add    esp,0x10
c0013802:	31 c0                	xor    eax,eax
c0013804:	e9 7c 01 00 00       	jmp    c0013985 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0013809:	fa                   	cli    
c001380a:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0013810:	e8 9e 45 ff ff       	call   c0007db3 <Phys::allocatePage()>
c0013815:	6a 07                	push   0x7
c0013817:	89 c7                	mov    edi,eax
c0013819:	53                   	push   ebx
c001381a:	50                   	push   eax
c001381b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013820:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013823:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013829:	e8 d6 64 ff ff       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c001382e:	83 c4 0c             	add    esp,0xc
c0013831:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013838:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001383e:	6a 00                	push   0x0
c0013840:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013845:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013848:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001384e:	e8 17 63 ff ff       	call   c0009b6a <VAS::mapOtherVASIn(bool, VAS*)>
c0013853:	58                   	pop    eax
c0013854:	5a                   	pop    edx
c0013855:	68 07 0c 00 00       	push   0xc07
c001385a:	55                   	push   ebp
c001385b:	57                   	push   edi
c001385c:	89 df                	mov    edi,ebx
c001385e:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013865:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001386b:	6a 00                	push   0x0
c001386d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013872:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013875:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001387b:	e8 6e 68 ff ff       	call   c000a0ee <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013880:	b9 00 10 00 00       	mov    ecx,0x1000
c0013885:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013887:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001388c:	83 c4 20             	add    esp,0x20
c001388f:	48                   	dec    eax
c0013890:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0013895:	85 c0                	test   eax,eax
c0013897:	75 01                	jne    c001389a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c0013899:	fb                   	sti    
c001389a:	81 c5 00 10 00 00    	add    ebp,0x1000
c00138a0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00138a4:	e9 f1 fe ff ff       	jmp    c001379a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c00138a9:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00138b0:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00138b7:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00138bd:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00138c3:	0f 86 ae 00 00 00    	jbe    c0013977 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c00138c9:	fa                   	cli    
c00138ca:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00138d0:	c1 ee 0c             	shr    esi,0xc
c00138d3:	51                   	push   ecx
c00138d4:	31 ff                	xor    edi,edi
c00138d6:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00138dd:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00138e3:	6a 00                	push   0x0
c00138e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00138ea:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00138ed:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00138f3:	e8 72 62 ff ff       	call   c0009b6a <VAS::mapOtherVASIn(bool, VAS*)>
c00138f8:	83 c4 10             	add    esp,0x10
c00138fb:	e8 b3 44 ff ff       	call   c0007db3 <Phys::allocatePage()>
c0013900:	47                   	inc    edi
c0013901:	6a 07                	push   0x7
c0013903:	53                   	push   ebx
c0013904:	50                   	push   eax
c0013905:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013909:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001390f:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0013912:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0013918:	e8 e7 63 ff ff       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c001391d:	58                   	pop    eax
c001391e:	5a                   	pop    edx
c001391f:	68 07 0c 00 00       	push   0xc07
c0013924:	55                   	push   ebp
c0013925:	81 c5 00 10 00 00    	add    ebp,0x1000
c001392b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001392f:	50                   	push   eax
c0013930:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013937:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001393d:	6a 00                	push   0x0
c001393f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013944:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013947:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001394d:	e8 9c 67 ff ff       	call   c000a0ee <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013952:	83 c4 1c             	add    esp,0x1c
c0013955:	68 00 10 00 00       	push   0x1000
c001395a:	6a 00                	push   0x0
c001395c:	53                   	push   ebx
c001395d:	e8 8e cb fe ff       	call   c00004f0 <memset>
c0013962:	83 c4 10             	add    esp,0x10
c0013965:	39 fe                	cmp    esi,edi
c0013967:	77 92                	ja     c00138fb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f9>
c0013969:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001396e:	48                   	dec    eax
c001396f:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0013974:	75 01                	jne    c0013977 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0013976:	fb                   	sti    
c0013977:	83 ec 0c             	sub    esp,0xc
c001397a:	53                   	push   ebx
c001397b:	e8 b9 5f ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c0013980:	83 c4 10             	add    esp,0x10
c0013983:	b0 01                	mov    al,0x1
c0013985:	81 c4 2c 10 00 00    	add    esp,0x102c
c001398b:	5b                   	pop    ebx
c001398c:	5e                   	pop    esi
c001398d:	5f                   	pop    edi
c001398e:	5d                   	pop    ebp
c001398f:	c3                   	ret    

c0013990 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0013990:	55                   	push   ebp
c0013991:	57                   	push   edi
c0013992:	56                   	push   esi
c0013993:	53                   	push   ebx
c0013994:	83 ec 48             	sub    esp,0x48
c0013997:	68 14 01 00 00       	push   0x114
c001399c:	e8 0d 41 ff ff       	call   c0007aae <malloc>
c00139a1:	83 c4 0c             	add    esp,0xc
c00139a4:	89 c6                	mov    esi,eax
c00139a6:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00139aa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00139ae:	50                   	push   eax
c00139af:	e8 c6 75 ff ff       	call   c000af7a <File::File(char const*, Process*)>
c00139b4:	58                   	pop    eax
c00139b5:	5a                   	pop    edx
c00139b6:	6a 01                	push   0x1
c00139b8:	56                   	push   esi
c00139b9:	e8 78 76 ff ff       	call   c000b036 <File::open(FileOpenMode)>
c00139be:	83 c4 10             	add    esp,0x10
c00139c1:	85 c0                	test   eax,eax
c00139c3:	0f 85 43 01 00 00    	jne    c0013b0c <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00139c9:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00139d1:	83 ec 0c             	sub    esp,0xc
c00139d4:	6a 34                	push   0x34
c00139d6:	e8 d3 40 ff ff       	call   c0007aae <malloc>
c00139db:	89 c3                	mov    ebx,eax
c00139dd:	58                   	pop    eax
c00139de:	8b 06                	mov    eax,DWORD PTR [esi]
c00139e0:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00139e4:	57                   	push   edi
c00139e5:	53                   	push   ebx
c00139e6:	6a 00                	push   0x0
c00139e8:	6a 34                	push   0x34
c00139ea:	56                   	push   esi
c00139eb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00139ee:	83 c4 20             	add    esp,0x20
c00139f1:	85 c0                	test   eax,eax
c00139f3:	0f 85 13 01 00 00    	jne    c0013b0c <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00139f9:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00139ff:	0f 85 07 01 00 00    	jne    c0013b0c <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013a05:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013a08:	85 c0                	test   eax,eax
c0013a0a:	0f 84 fc 00 00 00    	je     c0013b0c <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013a10:	31 d2                	xor    edx,edx
c0013a12:	55                   	push   ebp
c0013a13:	52                   	push   edx
c0013a14:	50                   	push   eax
c0013a15:	56                   	push   esi
c0013a16:	e8 d9 76 ff ff       	call   c000b0f4 <File::seek(unsigned long long)>
c0013a1b:	83 c4 10             	add    esp,0x10
c0013a1e:	85 c0                	test   eax,eax
c0013a20:	0f 85 e6 00 00 00    	jne    c0013b0c <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013a26:	83 ec 0c             	sub    esp,0xc
c0013a29:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013a2c:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013a30:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0013a34:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013a38:	0f af c2             	imul   eax,edx
c0013a3b:	50                   	push   eax
c0013a3c:	e8 6d 40 ff ff       	call   c0007aae <malloc>
c0013a41:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0013a43:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013a47:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013a4a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013a4e:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013a52:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013a56:	0f af c2             	imul   eax,edx
c0013a59:	99                   	cdq    
c0013a5a:	52                   	push   edx
c0013a5b:	50                   	push   eax
c0013a5c:	56                   	push   esi
c0013a5d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013a60:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0013a63:	83 c4 20             	add    esp,0x20
c0013a66:	85 c0                	test   eax,eax
c0013a68:	0f 84 9e 00 00 00    	je     c0013b0c <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013a6e:	31 d2                	xor    edx,edx
c0013a70:	51                   	push   ecx
c0013a71:	52                   	push   edx
c0013a72:	50                   	push   eax
c0013a73:	56                   	push   esi
c0013a74:	e8 7b 76 ff ff       	call   c000b0f4 <File::seek(unsigned long long)>
c0013a79:	83 c4 10             	add    esp,0x10
c0013a7c:	85 c0                	test   eax,eax
c0013a7e:	0f 85 88 00 00 00    	jne    c0013b0c <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013a84:	83 ec 0c             	sub    esp,0xc
c0013a87:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013a8b:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013a8f:	31 ed                	xor    ebp,ebp
c0013a91:	0f af c2             	imul   eax,edx
c0013a94:	50                   	push   eax
c0013a95:	e8 14 40 ff ff       	call   c0007aae <malloc>
c0013a9a:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0013a9c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013aa0:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013aa3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013aa7:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013aab:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013aaf:	0f af c2             	imul   eax,edx
c0013ab2:	99                   	cdq    
c0013ab3:	52                   	push   edx
c0013ab4:	50                   	push   eax
c0013ab5:	56                   	push   esi
c0013ab6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013ab9:	83 c4 20             	add    esp,0x20
c0013abc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013ac4:	0f b7 fd             	movzx  edi,bp
c0013ac7:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0013acb:	73 7d                	jae    c0013b4a <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c0013acd:	c1 e7 05             	shl    edi,0x5
c0013ad0:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0013ad4:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0013ad7:	75 6b                	jne    c0013b44 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0013ad9:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0013adc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013ae0:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0013ae3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013ae7:	52                   	push   edx
c0013ae8:	31 d2                	xor    edx,edx
c0013aea:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0013aed:	52                   	push   edx
c0013aee:	50                   	push   eax
c0013aef:	56                   	push   esi
c0013af0:	e8 ff 75 ff ff       	call   c000b0f4 <File::seek(unsigned long long)>
c0013af5:	83 c4 10             	add    esp,0x10
c0013af8:	85 c0                	test   eax,eax
c0013afa:	74 17                	je     c0013b13 <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c0013afc:	83 ec 0c             	sub    esp,0xc
c0013aff:	68 a5 10 02 c0       	push   0xc00210a5
c0013b04:	e8 ee 6e ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c0013b09:	83 c4 10             	add    esp,0x10
c0013b0c:	31 c0                	xor    eax,eax
c0013b0e:	e9 87 00 00 00       	jmp    c0013b9a <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c0013b13:	83 ec 0c             	sub    esp,0xc
c0013b16:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0013b19:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0013b1c:	50                   	push   eax
c0013b1d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013b21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b25:	56                   	push   esi
c0013b26:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0013b2a:	e8 d3 fb ff ff       	call   c0013702 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0013b2f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013b33:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0013b37:	83 c4 20             	add    esp,0x20
c0013b3a:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0013b3e:	73 04                	jae    c0013b44 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0013b40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013b44:	45                   	inc    ebp
c0013b45:	e9 7a ff ff ff       	jmp    c0013ac4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0013b4a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0013b4e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013b52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013b56:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0013b5c:	83 ec 0c             	sub    esp,0xc
c0013b5f:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0013b65:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013b6a:	05 00 10 00 00       	add    eax,0x1000
c0013b6f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013b72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b76:	e8 43 3f ff ff       	call   c0007abe <free>
c0013b7b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013b7e:	e8 3b 3f ff ff       	call   c0007abe <free>
c0013b83:	58                   	pop    eax
c0013b84:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013b88:	e8 31 3f ff ff       	call   c0007abe <free>
c0013b8d:	89 34 24             	mov    DWORD PTR [esp],esi
c0013b90:	e8 ff 74 ff ff       	call   c000b094 <File::close()>
c0013b95:	83 c4 10             	add    esp,0x10
c0013b98:	b0 01                	mov    al,0x1
c0013b9a:	83 c4 3c             	add    esp,0x3c
c0013b9d:	5b                   	pop    ebx
c0013b9e:	5e                   	pop    esi
c0013b9f:	5f                   	pop    edi
c0013ba0:	5d                   	pop    ebp
c0013ba1:	c3                   	ret    

c0013ba2 <Thr::runtimeReferenceHelper()>:
c0013ba2:	83 ec 18             	sub    esp,0x18
c0013ba5:	68 ad 10 02 c0       	push   0xc00210ad
c0013baa:	e8 48 6e ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c0013baf:	fa                   	cli    
c0013bb0:	83 c4 10             	add    esp,0x10
c0013bb3:	eb fe                	jmp    c0013bb3 <Thr::runtimeReferenceHelper()+0x11>

c0013bb5 <Thr::getAddressOfKernelSymbol(char const*)>:
c0013bb5:	57                   	push   edi
c0013bb6:	56                   	push   esi
c0013bb7:	53                   	push   ebx
c0013bb8:	31 db                	xor    ebx,ebx
c0013bba:	39 1d 40 81 02 c0    	cmp    DWORD PTR ds:0xc0028140,ebx
c0013bc0:	7e 3c                	jle    c0013bfe <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0013bc2:	8b 34 9d c0 80 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd7f40]
c0013bc9:	31 ff                	xor    edi,edi
c0013bcb:	39 3c 9d c0 7f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd8040],edi
c0013bd2:	7e 27                	jle    c0013bfb <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0013bd4:	50                   	push   eax
c0013bd5:	50                   	push   eax
c0013bd6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013bda:	8b 06                	mov    eax,DWORD PTR [esi]
c0013bdc:	03 04 9d 40 80 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd7fc0]
c0013be3:	50                   	push   eax
c0013be4:	e8 67 cb fe ff       	call   c0000750 <strcmp>
c0013be9:	83 c4 10             	add    esp,0x10
c0013bec:	85 c0                	test   eax,eax
c0013bee:	75 05                	jne    c0013bf5 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0013bf0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013bf3:	eb 0b                	jmp    c0013c00 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0013bf5:	83 c6 10             	add    esi,0x10
c0013bf8:	47                   	inc    edi
c0013bf9:	eb d0                	jmp    c0013bcb <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0013bfb:	43                   	inc    ebx
c0013bfc:	eb bc                	jmp    c0013bba <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0013bfe:	31 c0                	xor    eax,eax
c0013c00:	5b                   	pop    ebx
c0013c01:	5e                   	pop    esi
c0013c02:	5f                   	pop    edi
c0013c03:	c3                   	ret    

c0013c04 <Thr::loadKernelSymbolTable(char const*)>:
c0013c04:	55                   	push   ebp
c0013c05:	57                   	push   edi
c0013c06:	56                   	push   esi
c0013c07:	53                   	push   ebx
c0013c08:	83 ec 68             	sub    esp,0x68
c0013c0b:	8b 35 90 81 02 c0    	mov    esi,DWORD PTR ds:0xc0028190
c0013c11:	68 14 01 00 00       	push   0x114
c0013c16:	e8 93 3e ff ff       	call   c0007aae <malloc>
c0013c1b:	83 c4 0c             	add    esp,0xc
c0013c1e:	89 c3                	mov    ebx,eax
c0013c20:	56                   	push   esi
c0013c21:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0013c25:	50                   	push   eax
c0013c26:	e8 4f 73 ff ff       	call   c000af7a <File::File(char const*, Process*)>
c0013c2b:	5e                   	pop    esi
c0013c2c:	5f                   	pop    edi
c0013c2d:	6a 01                	push   0x1
c0013c2f:	53                   	push   ebx
c0013c30:	e8 01 74 ff ff       	call   c000b036 <File::open(FileOpenMode)>
c0013c35:	83 c4 10             	add    esp,0x10
c0013c38:	85 c0                	test   eax,eax
c0013c3a:	74 0a                	je     c0013c46 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0013c3c:	83 ec 0c             	sub    esp,0xc
c0013c3f:	68 cf 10 02 c0       	push   0xc00210cf
c0013c44:	eb 34                	jmp    c0013c7a <Thr::loadKernelSymbolTable(char const*)+0x76>
c0013c46:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0013c4e:	83 ec 0c             	sub    esp,0xc
c0013c51:	6a 34                	push   0x34
c0013c53:	e8 56 3e ff ff       	call   c0007aae <malloc>
c0013c58:	59                   	pop    ecx
c0013c59:	89 c7                	mov    edi,eax
c0013c5b:	8d 74 24 34          	lea    esi,[esp+0x34]
c0013c5f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c61:	56                   	push   esi
c0013c62:	57                   	push   edi
c0013c63:	6a 00                	push   0x0
c0013c65:	6a 34                	push   0x34
c0013c67:	53                   	push   ebx
c0013c68:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c6b:	83 c4 20             	add    esp,0x20
c0013c6e:	85 c0                	test   eax,eax
c0013c70:	74 17                	je     c0013c89 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0013c72:	83 ec 0c             	sub    esp,0xc
c0013c75:	68 e6 10 02 c0       	push   0xc00210e6
c0013c7a:	e8 a8 cc ff ff       	call   c0010927 <KePanic(char const*)>
c0013c7f:	83 c4 10             	add    esp,0x10
c0013c82:	31 c0                	xor    eax,eax
c0013c84:	e9 31 02 00 00       	jmp    c0013eba <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0013c89:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0013c8f:	75 e1                	jne    c0013c72 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013c91:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0013c94:	85 c0                	test   eax,eax
c0013c96:	74 da                	je     c0013c72 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013c98:	52                   	push   edx
c0013c99:	31 d2                	xor    edx,edx
c0013c9b:	52                   	push   edx
c0013c9c:	50                   	push   eax
c0013c9d:	53                   	push   ebx
c0013c9e:	e8 51 74 ff ff       	call   c000b0f4 <File::seek(unsigned long long)>
c0013ca3:	83 c4 10             	add    esp,0x10
c0013ca6:	85 c0                	test   eax,eax
c0013ca8:	75 c8                	jne    c0013c72 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013caa:	83 ec 0c             	sub    esp,0xc
c0013cad:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013cb1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013cb5:	31 ed                	xor    ebp,ebp
c0013cb7:	0f af c2             	imul   eax,edx
c0013cba:	50                   	push   eax
c0013cbb:	e8 ee 3d ff ff       	call   c0007aae <malloc>
c0013cc0:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013cc2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013cc6:	89 34 24             	mov    DWORD PTR [esp],esi
c0013cc9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ccd:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013cd1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013cd5:	0f af c2             	imul   eax,edx
c0013cd8:	99                   	cdq    
c0013cd9:	52                   	push   edx
c0013cda:	50                   	push   eax
c0013cdb:	53                   	push   ebx
c0013cdc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013cdf:	83 c4 20             	add    esp,0x20
c0013ce2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013cea:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013cf2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0013cfa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013d02:	0f b7 f5             	movzx  esi,bp
c0013d05:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0013d09:	0f 83 a7 00 00 00    	jae    c0013db6 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0013d0f:	6b f6 28             	imul   esi,esi,0x28
c0013d12:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0013d16:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013d19:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013d1d:	50                   	push   eax
c0013d1e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013d22:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0013d26:	8b 16                	mov    edx,DWORD PTR [esi]
c0013d28:	6b c0 28             	imul   eax,eax,0x28
c0013d2b:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0013d2f:	89 d0                	mov    eax,edx
c0013d31:	31 d2                	xor    edx,edx
c0013d33:	52                   	push   edx
c0013d34:	50                   	push   eax
c0013d35:	53                   	push   ebx
c0013d36:	e8 b9 73 ff ff       	call   c000b0f4 <File::seek(unsigned long long)>
c0013d3b:	83 c4 0c             	add    esp,0xc
c0013d3e:	6a 20                	push   0x20
c0013d40:	6a 00                	push   0x0
c0013d42:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013d46:	52                   	push   edx
c0013d47:	e8 a4 c7 fe ff       	call   c00004f0 <memset>
c0013d4c:	58                   	pop    eax
c0013d4d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d4f:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0013d53:	51                   	push   ecx
c0013d54:	8d 54 24 40          	lea    edx,[esp+0x40]
c0013d58:	52                   	push   edx
c0013d59:	6a 00                	push   0x0
c0013d5b:	6a 1f                	push   0x1f
c0013d5d:	53                   	push   ebx
c0013d5e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013d61:	83 c4 18             	add    esp,0x18
c0013d64:	68 fd 10 02 c0       	push   0xc00210fd
c0013d69:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013d6d:	52                   	push   edx
c0013d6e:	e8 dd c9 fe ff       	call   c0000750 <strcmp>
c0013d73:	83 c4 10             	add    esp,0x10
c0013d76:	85 c0                	test   eax,eax
c0013d78:	75 0f                	jne    c0013d89 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0013d7a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013d7d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013d81:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013d89:	50                   	push   eax
c0013d8a:	50                   	push   eax
c0013d8b:	68 05 11 02 c0       	push   0xc0021105
c0013d90:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0013d94:	50                   	push   eax
c0013d95:	e8 b6 c9 fe ff       	call   c0000750 <strcmp>
c0013d9a:	83 c4 10             	add    esp,0x10
c0013d9d:	85 c0                	test   eax,eax
c0013d9f:	75 0f                	jne    c0013db0 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0013da1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013da4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013da8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013dac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013db0:	45                   	inc    ebp
c0013db1:	e9 4c ff ff ff       	jmp    c0013d02 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0013db6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013dbb:	75 10                	jne    c0013dcd <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0013dbd:	83 ec 0c             	sub    esp,0xc
c0013dc0:	68 0d 11 02 c0       	push   0xc002110d
c0013dc5:	e8 5d cb ff ff       	call   c0010927 <KePanic(char const*)>
c0013dca:	83 c4 10             	add    esp,0x10
c0013dcd:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0013dd2:	75 10                	jne    c0013de4 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0013dd4:	83 ec 0c             	sub    esp,0xc
c0013dd7:	68 0d 11 02 c0       	push   0xc002110d
c0013ddc:	e8 46 cb ff ff       	call   c0010927 <KePanic(char const*)>
c0013de1:	83 c4 10             	add    esp,0x10
c0013de4:	31 d2                	xor    edx,edx
c0013de6:	50                   	push   eax
c0013de7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013deb:	52                   	push   edx
c0013dec:	50                   	push   eax
c0013ded:	53                   	push   ebx
c0013dee:	e8 01 73 ff ff       	call   c000b0f4 <File::seek(unsigned long long)>
c0013df3:	5a                   	pop    edx
c0013df4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013df8:	e8 b1 3c ff ff       	call   c0007aae <malloc>
c0013dfd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013e01:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013e05:	31 c9                	xor    ecx,ecx
c0013e07:	5e                   	pop    esi
c0013e08:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e0a:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0013e0e:	55                   	push   ebp
c0013e0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e13:	51                   	push   ecx
c0013e14:	52                   	push   edx
c0013e15:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0013e19:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0013e1d:	53                   	push   ebx
c0013e1e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013e21:	83 c4 14             	add    esp,0x14
c0013e24:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013e28:	e8 81 3c ff ff       	call   c0007aae <malloc>
c0013e2d:	89 c6                	mov    esi,eax
c0013e2f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e31:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013e34:	56                   	push   esi
c0013e35:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013e39:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0013e3d:	51                   	push   ecx
c0013e3e:	52                   	push   edx
c0013e3f:	53                   	push   ebx
c0013e40:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013e43:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013e47:	8b 15 40 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028140
c0013e4d:	83 c4 1c             	add    esp,0x1c
c0013e50:	c1 e8 04             	shr    eax,0x4
c0013e53:	89 04 95 c0 7f 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8040],eax
c0013e5a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e5e:	31 d2                	xor    edx,edx
c0013e60:	52                   	push   edx
c0013e61:	50                   	push   eax
c0013e62:	53                   	push   ebx
c0013e63:	e8 8c 72 ff ff       	call   c000b0f4 <File::seek(unsigned long long)>
c0013e68:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013e6a:	31 d2                	xor    edx,edx
c0013e6c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013e6f:	56                   	push   esi
c0013e70:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013e74:	52                   	push   edx
c0013e75:	50                   	push   eax
c0013e76:	53                   	push   ebx
c0013e77:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013e7a:	83 c4 14             	add    esp,0x14
c0013e7d:	53                   	push   ebx
c0013e7e:	e8 11 72 ff ff       	call   c000b094 <File::close()>
c0013e83:	5d                   	pop    ebp
c0013e84:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013e88:	e8 31 3c ff ff       	call   c0007abe <free>
c0013e8d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013e90:	e8 29 3c ff ff       	call   c0007abe <free>
c0013e95:	a1 40 81 02 c0       	mov    eax,ds:0xc0028140
c0013e9a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013e9e:	8d 50 01             	lea    edx,[eax+0x1]
c0013ea1:	89 0c 85 c0 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7f40],ecx
c0013ea8:	89 34 85 40 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7fc0],esi
c0013eaf:	89 15 40 81 02 c0    	mov    DWORD PTR ds:0xc0028140,edx
c0013eb5:	83 c4 10             	add    esp,0x10
c0013eb8:	b0 01                	mov    al,0x1
c0013eba:	83 c4 5c             	add    esp,0x5c
c0013ebd:	5b                   	pop    ebx
c0013ebe:	5e                   	pop    esi
c0013ebf:	5f                   	pop    edi
c0013ec0:	5d                   	pop    ebp
c0013ec1:	c3                   	ret    

c0013ec2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0013ec2:	55                   	push   ebp
c0013ec3:	57                   	push   edi
c0013ec4:	56                   	push   esi
c0013ec5:	53                   	push   ebx
c0013ec6:	81 ec 68 03 00 00    	sub    esp,0x368
c0013ecc:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0013ed3:	8b 1d 90 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028190
c0013ed9:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0013edd:	68 14 01 00 00       	push   0x114
c0013ee2:	e8 c7 3b ff ff       	call   c0007aae <malloc>
c0013ee7:	83 c4 0c             	add    esp,0xc
c0013eea:	89 c5                	mov    ebp,eax
c0013eec:	53                   	push   ebx
c0013eed:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0013ef4:	50                   	push   eax
c0013ef5:	e8 80 70 ff ff       	call   c000af7a <File::File(char const*, Process*)>
c0013efa:	5e                   	pop    esi
c0013efb:	5f                   	pop    edi
c0013efc:	6a 01                	push   0x1
c0013efe:	55                   	push   ebp
c0013eff:	e8 32 71 ff ff       	call   c000b036 <File::open(FileOpenMode)>
c0013f04:	83 c4 10             	add    esp,0x10
c0013f07:	85 c0                	test   eax,eax
c0013f09:	0f 85 aa 06 00 00    	jne    c00145b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0013f0f:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0013f17:	83 ec 0c             	sub    esp,0xc
c0013f1a:	6a 34                	push   0x34
c0013f1c:	e8 8d 3b ff ff       	call   c0007aae <malloc>
c0013f21:	5b                   	pop    ebx
c0013f22:	89 c7                	mov    edi,eax
c0013f24:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0013f28:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013f2b:	53                   	push   ebx
c0013f2c:	57                   	push   edi
c0013f2d:	6a 00                	push   0x0
c0013f2f:	6a 34                	push   0x34
c0013f31:	55                   	push   ebp
c0013f32:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013f35:	83 c4 20             	add    esp,0x20
c0013f38:	85 c0                	test   eax,eax
c0013f3a:	0f 85 79 06 00 00    	jne    c00145b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0013f40:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0013f46:	0f 85 6d 06 00 00    	jne    c00145b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0013f4c:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0013f4f:	85 c0                	test   eax,eax
c0013f51:	0f 84 62 06 00 00    	je     c00145b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0013f57:	31 d2                	xor    edx,edx
c0013f59:	51                   	push   ecx
c0013f5a:	52                   	push   edx
c0013f5b:	50                   	push   eax
c0013f5c:	55                   	push   ebp
c0013f5d:	e8 92 71 ff ff       	call   c000b0f4 <File::seek(unsigned long long)>
c0013f62:	83 c4 10             	add    esp,0x10
c0013f65:	85 c0                	test   eax,eax
c0013f67:	0f 85 4c 06 00 00    	jne    c00145b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0013f6d:	83 ec 0c             	sub    esp,0xc
c0013f70:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0013f73:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013f77:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0013f7b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013f7f:	0f af c2             	imul   eax,edx
c0013f82:	50                   	push   eax
c0013f83:	e8 26 3b ff ff       	call   c0007aae <malloc>
c0013f88:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013f8b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013f8f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f92:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f96:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013f9a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013f9e:	0f af c2             	imul   eax,edx
c0013fa1:	99                   	cdq    
c0013fa2:	52                   	push   edx
c0013fa3:	50                   	push   eax
c0013fa4:	55                   	push   ebp
c0013fa5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013fa8:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0013fab:	83 c4 20             	add    esp,0x20
c0013fae:	85 c0                	test   eax,eax
c0013fb0:	0f 84 03 06 00 00    	je     c00145b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0013fb6:	52                   	push   edx
c0013fb7:	31 d2                	xor    edx,edx
c0013fb9:	52                   	push   edx
c0013fba:	50                   	push   eax
c0013fbb:	55                   	push   ebp
c0013fbc:	e8 33 71 ff ff       	call   c000b0f4 <File::seek(unsigned long long)>
c0013fc1:	83 c4 10             	add    esp,0x10
c0013fc4:	85 c0                	test   eax,eax
c0013fc6:	0f 85 ed 05 00 00    	jne    c00145b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0013fcc:	83 ec 0c             	sub    esp,0xc
c0013fcf:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0013fd3:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0013fd7:	31 f6                	xor    esi,esi
c0013fd9:	0f af c2             	imul   eax,edx
c0013fdc:	50                   	push   eax
c0013fdd:	e8 cc 3a ff ff       	call   c0007aae <malloc>
c0013fe2:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013fe5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013fe9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013fec:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013ff0:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0013ff4:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0013ff8:	0f af c2             	imul   eax,edx
c0013ffb:	99                   	cdq    
c0013ffc:	52                   	push   edx
c0013ffd:	50                   	push   eax
c0013ffe:	55                   	push   ebp
c0013fff:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014002:	83 c4 20             	add    esp,0x20
c0014005:	0f b7 de             	movzx  ebx,si
c0014008:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c001400c:	0f 83 87 00 00 00    	jae    c0014099 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0014012:	c1 e3 05             	shl    ebx,0x5
c0014015:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0014019:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001401c:	75 75                	jne    c0014093 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001401e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0014021:	31 d2                	xor    edx,edx
c0014023:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014027:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001402a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001402e:	50                   	push   eax
c001402f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014032:	52                   	push   edx
c0014033:	50                   	push   eax
c0014034:	55                   	push   ebp
c0014035:	e8 ba 70 ff ff       	call   c000b0f4 <File::seek(unsigned long long)>
c001403a:	83 c4 10             	add    esp,0x10
c001403d:	85 c0                	test   eax,eax
c001403f:	0f 85 74 05 00 00    	jne    c00145b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014045:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001404c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001404f:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0014053:	31 d2                	xor    edx,edx
c0014055:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014059:	83 ec 0c             	sub    esp,0xc
c001405c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014060:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014067:	50                   	push   eax
c0014068:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001406c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014070:	52                   	push   edx
c0014071:	50                   	push   eax
c0014072:	55                   	push   ebp
c0014073:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014076:	83 c4 1c             	add    esp,0x1c
c0014079:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001407c:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001407f:	50                   	push   eax
c0014080:	6a 00                	push   0x0
c0014082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014086:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001408a:	50                   	push   eax
c001408b:	e8 60 c4 fe ff       	call   c00004f0 <memset>
c0014090:	83 c4 10             	add    esp,0x10
c0014093:	46                   	inc    esi
c0014094:	e9 6c ff ff ff       	jmp    c0014005 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0014099:	53                   	push   ebx
c001409a:	31 db                	xor    ebx,ebx
c001409c:	68 00 01 00 00       	push   0x100
c00140a1:	6a 00                	push   0x0
c00140a3:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00140a7:	50                   	push   eax
c00140a8:	e8 43 c4 fe ff       	call   c00004f0 <memset>
c00140ad:	83 c4 0c             	add    esp,0xc
c00140b0:	68 00 01 00 00       	push   0x100
c00140b5:	6a 00                	push   0x0
c00140b7:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00140be:	50                   	push   eax
c00140bf:	e8 2c c4 fe ff       	call   c00004f0 <memset>
c00140c4:	83 c4 10             	add    esp,0x10
c00140c7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00140cf:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00140d7:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00140df:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00140e7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00140ef:	0f b7 f3             	movzx  esi,bx
c00140f2:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c00140f6:	0f 83 2d 01 00 00    	jae    c0014229 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c00140fc:	6b f6 28             	imul   esi,esi,0x28
c00140ff:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014103:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014106:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001410a:	52                   	push   edx
c001410b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001410f:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0014113:	8b 06                	mov    eax,DWORD PTR [esi]
c0014115:	6b d2 28             	imul   edx,edx,0x28
c0014118:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001411c:	31 d2                	xor    edx,edx
c001411e:	52                   	push   edx
c001411f:	50                   	push   eax
c0014120:	55                   	push   ebp
c0014121:	e8 ce 6f ff ff       	call   c000b0f4 <File::seek(unsigned long long)>
c0014126:	83 c4 0c             	add    esp,0xc
c0014129:	6a 20                	push   0x20
c001412b:	6a 00                	push   0x0
c001412d:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014134:	51                   	push   ecx
c0014135:	e8 b6 c3 fe ff       	call   c00004f0 <memset>
c001413a:	59                   	pop    ecx
c001413b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001413e:	8d 54 24 58          	lea    edx,[esp+0x58]
c0014142:	52                   	push   edx
c0014143:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001414a:	51                   	push   ecx
c001414b:	6a 00                	push   0x0
c001414d:	6a 1f                	push   0x1f
c001414f:	55                   	push   ebp
c0014150:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014153:	83 c4 1c             	add    esp,0x1c
c0014156:	6a 09                	push   0x9
c0014158:	68 27 11 02 c0       	push   0xc0021127
c001415d:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014164:	51                   	push   ecx
c0014165:	e8 16 c2 fe ff       	call   c0000380 <memcmp>
c001416a:	83 c4 10             	add    esp,0x10
c001416d:	85 c0                	test   eax,eax
c001416f:	75 21                	jne    c0014192 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0014171:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014175:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014179:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001417d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014181:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014184:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001418b:	89 d0                	mov    eax,edx
c001418d:	40                   	inc    eax
c001418e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014192:	50                   	push   eax
c0014193:	6a 09                	push   0x9
c0014195:	68 31 11 02 c0       	push   0xc0021131
c001419a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00141a1:	50                   	push   eax
c00141a2:	e8 d9 c1 fe ff       	call   c0000380 <memcmp>
c00141a7:	83 c4 10             	add    esp,0x10
c00141aa:	85 c0                	test   eax,eax
c00141ac:	75 21                	jne    c00141cf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c00141ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141b2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00141b6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00141ba:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c00141be:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00141c1:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00141c8:	89 d0                	mov    eax,edx
c00141ca:	40                   	inc    eax
c00141cb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00141cf:	50                   	push   eax
c00141d0:	50                   	push   eax
c00141d1:	68 fd 10 02 c0       	push   0xc00210fd
c00141d6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00141dd:	50                   	push   eax
c00141de:	e8 6d c5 fe ff       	call   c0000750 <strcmp>
c00141e3:	83 c4 10             	add    esp,0x10
c00141e6:	85 c0                	test   eax,eax
c00141e8:	75 0f                	jne    c00141f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c00141ea:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00141ed:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00141f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00141f5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00141f9:	50                   	push   eax
c00141fa:	50                   	push   eax
c00141fb:	68 05 11 02 c0       	push   0xc0021105
c0014200:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014207:	50                   	push   eax
c0014208:	e8 43 c5 fe ff       	call   c0000750 <strcmp>
c001420d:	83 c4 10             	add    esp,0x10
c0014210:	85 c0                	test   eax,eax
c0014212:	75 0f                	jne    c0014223 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0014214:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014217:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001421b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001421f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014223:	43                   	inc    ebx
c0014224:	e9 c6 fe ff ff       	jmp    c00140ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0014229:	31 d2                	xor    edx,edx
c001422b:	50                   	push   eax
c001422c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014230:	52                   	push   edx
c0014231:	50                   	push   eax
c0014232:	55                   	push   ebp
c0014233:	e8 bc 6e ff ff       	call   c000b0f4 <File::seek(unsigned long long)>
c0014238:	58                   	pop    eax
c0014239:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001423d:	e8 6c 38 ff ff       	call   c0007aae <malloc>
c0014242:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014245:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014249:	31 d2                	xor    edx,edx
c001424b:	58                   	pop    eax
c001424c:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014250:	53                   	push   ebx
c0014251:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0014255:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014259:	52                   	push   edx
c001425a:	50                   	push   eax
c001425b:	55                   	push   ebp
c001425c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001425f:	83 c4 14             	add    esp,0x14
c0014262:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014266:	e8 43 38 ff ff       	call   c0007aae <malloc>
c001426b:	31 d2                	xor    edx,edx
c001426d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014271:	83 c4 0c             	add    esp,0xc
c0014274:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014278:	52                   	push   edx
c0014279:	50                   	push   eax
c001427a:	55                   	push   ebp
c001427b:	e8 74 6e ff ff       	call   c000b0f4 <File::seek(unsigned long long)>
c0014280:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014283:	31 d2                	xor    edx,edx
c0014285:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014288:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001428c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014290:	52                   	push   edx
c0014291:	50                   	push   eax
c0014292:	55                   	push   ebp
c0014293:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014296:	83 c4 20             	add    esp,0x20
c0014299:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c001429e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00142a6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00142aa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00142ae:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c00142b2:	0f 84 05 03 00 00    	je     c00145bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c00142b8:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c00142bf:	31 d2                	xor    edx,edx
c00142c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00142c5:	c1 e8 03             	shr    eax,0x3
c00142c8:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00142cc:	51                   	push   ecx
c00142cd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00142d1:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00142d5:	52                   	push   edx
c00142d6:	50                   	push   eax
c00142d7:	55                   	push   ebp
c00142d8:	e8 17 6e ff ff       	call   c000b0f4 <File::seek(unsigned long long)>
c00142dd:	5b                   	pop    ebx
c00142de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00142e2:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00142e9:	e8 c0 37 ff ff       	call   c0007aae <malloc>
c00142ee:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00142f1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00142f5:	31 d2                	xor    edx,edx
c00142f7:	5e                   	pop    esi
c00142f8:	8d 44 24 58          	lea    eax,[esp+0x58]
c00142fc:	50                   	push   eax
c00142fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014301:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014305:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001430c:	52                   	push   edx
c001430d:	50                   	push   eax
c001430e:	55                   	push   ebp
c001430f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014312:	83 c4 20             	add    esp,0x20
c0014315:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001431d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0014321:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c0014325:	0f 8d 76 02 00 00    	jge    c00145a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c001432b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001432f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014333:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c0014338:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c001433b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001433f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014343:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c0014347:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001434b:	c1 e8 08             	shr    eax,0x8
c001434e:	89 c6                	mov    esi,eax
c0014350:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014354:	c1 e6 04             	shl    esi,0x4
c0014357:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001435b:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c001435e:	85 db                	test   ebx,ebx
c0014360:	0f 85 b3 00 00 00    	jne    c0014419 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014366:	83 ec 0c             	sub    esp,0xc
c0014369:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001436d:	03 06                	add    eax,DWORD PTR [esi]
c001436f:	50                   	push   eax
c0014370:	e8 40 f8 ff ff       	call   c0013bb5 <Thr::getAddressOfKernelSymbol(char const*)>
c0014375:	83 c4 10             	add    esp,0x10
c0014378:	89 c3                	mov    ebx,eax
c001437a:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c001437f:	85 c0                	test   eax,eax
c0014381:	0f 85 92 00 00 00    	jne    c0014419 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014387:	83 ec 0c             	sub    esp,0xc
c001438a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001438e:	03 06                	add    eax,DWORD PTR [esi]
c0014390:	50                   	push   eax
c0014391:	e8 7e c7 ff ff       	call   c0010b14 <KeResolveCompatibilitySymbol(char*)>
c0014396:	83 c4 10             	add    esp,0x10
c0014399:	89 c3                	mov    ebx,eax
c001439b:	85 c0                	test   eax,eax
c001439d:	75 7a                	jne    c0014419 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c001439f:	51                   	push   ecx
c00143a0:	51                   	push   ecx
c00143a1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00143a5:	03 06                	add    eax,DWORD PTR [esi]
c00143a7:	50                   	push   eax
c00143a8:	68 3b 11 02 c0       	push   0xc002113b
c00143ad:	e8 45 66 ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c00143b2:	58                   	pop    eax
c00143b3:	5a                   	pop    edx
c00143b4:	68 55 11 02 c0       	push   0xc0021155
c00143b9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00143c0:	50                   	push   eax
c00143c1:	e8 7a c2 fe ff       	call   c0000640 <strcpy>
c00143c6:	59                   	pop    ecx
c00143c7:	58                   	pop    eax
c00143c8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00143cc:	03 06                	add    eax,DWORD PTR [esi]
c00143ce:	50                   	push   eax
c00143cf:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00143d6:	50                   	push   eax
c00143d7:	e8 64 c4 fe ff       	call   c0000840 <strcat>
c00143dc:	58                   	pop    eax
c00143dd:	5a                   	pop    edx
c00143de:	68 eb 11 02 c0       	push   0xc00211eb
c00143e3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00143ea:	50                   	push   eax
c00143eb:	e8 50 c4 fe ff       	call   c0000840 <strcat>
c00143f0:	83 c4 10             	add    esp,0x10
c00143f3:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00143f8:	0f 84 5d 01 00 00    	je     c001455b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00143fe:	83 ec 0c             	sub    esp,0xc
c0014401:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014408:	50                   	push   eax
c0014409:	e8 19 c5 ff ff       	call   c0010927 <KePanic(char const*)>
c001440e:	83 c4 10             	add    esp,0x10
c0014411:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0014415:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c0014419:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001441e:	83 f8 01             	cmp    eax,0x1
c0014421:	0f 85 8f 00 00 00    	jne    c00144b6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c0014427:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001442e:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0014432:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0014436:	01 ce                	add    esi,ecx
c0014438:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0014440:	0f 94 c0             	sete   al
c0014443:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001444b:	0f 94 c2             	sete   dl
c001444e:	09 c2                	or     edx,eax
c0014450:	8b 06                	mov    eax,DWORD PTR [esi]
c0014452:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0014457:	0f b6 d2             	movzx  edx,dl
c001445a:	74 41                	je     c001449d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c001445c:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c001445f:	85 d2                	test   edx,edx
c0014461:	75 15                	jne    c0014478 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c0014463:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014467:	66 83 f8 0c          	cmp    ax,0xc
c001446b:	76 05                	jbe    c0014472 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c001446d:	b8 0c 00 00 00       	mov    eax,0xc
c0014472:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0014476:	76 37                	jbe    c00144af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014478:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001447c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014481:	0f 84 d4 00 00 00    	je     c001455b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014487:	83 ec 0c             	sub    esp,0xc
c001448a:	68 6c 11 02 c0       	push   0xc002116c
c001448f:	e8 93 c4 ff ff       	call   c0010927 <KePanic(char const*)>
c0014494:	83 c4 10             	add    esp,0x10
c0014497:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001449b:	eb 12                	jmp    c00144af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c001449d:	01 c1                	add    ecx,eax
c001449f:	85 d2                	test   edx,edx
c00144a1:	75 0c                	jne    c00144af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00144a3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00144a7:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00144ab:	77 02                	ja     c00144af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00144ad:	01 d9                	add    ecx,ebx
c00144af:	89 0e                	mov    DWORD PTR [esi],ecx
c00144b1:	e9 e2 00 00 00       	jmp    c0014598 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c00144b6:	83 f8 02             	cmp    eax,0x2
c00144b9:	75 77                	jne    c0014532 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c00144bb:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c00144c2:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c00144c6:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c00144ca:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00144d2:	74 21                	je     c00144f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c00144d4:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00144dc:	74 17                	je     c00144f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c00144de:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c00144e2:	b8 0a 00 00 00       	mov    eax,0xa
c00144e7:	83 fa 0e             	cmp    edx,0xe
c00144ea:	77 03                	ja     c00144ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c00144ec:	8d 42 fc             	lea    eax,[edx-0x4]
c00144ef:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00144f3:	76 17                	jbe    c001450c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c00144f5:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00144fa:	74 5f                	je     c001455b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00144fc:	83 ec 0c             	sub    esp,0xc
c00144ff:	68 88 11 02 c0       	push   0xc0021188
c0014504:	e8 1e c4 ff ff       	call   c0010927 <KePanic(char const*)>
c0014509:	83 c4 10             	add    esp,0x10
c001450c:	8b 06                	mov    eax,DWORD PTR [esi]
c001450e:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0014513:	74 13                	je     c0014528 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c0014515:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014519:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c0014520:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c0014524:	01 d0                	add    eax,edx
c0014526:	eb 04                	jmp    c001452c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0014528:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001452c:	01 c3                	add    ebx,eax
c001452e:	89 1e                	mov    DWORD PTR [esi],ebx
c0014530:	eb 66                	jmp    c0014598 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0014532:	52                   	push   edx
c0014533:	52                   	push   edx
c0014534:	50                   	push   eax
c0014535:	68 a4 11 02 c0       	push   0xc00211a4
c001453a:	e8 b8 64 ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c001453f:	83 c4 10             	add    esp,0x10
c0014542:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014547:	74 12                	je     c001455b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014549:	83 ec 0c             	sub    esp,0xc
c001454c:	68 af 11 02 c0       	push   0xc00211af
c0014551:	e8 d1 c3 ff ff       	call   c0010927 <KePanic(char const*)>
c0014556:	83 c4 10             	add    esp,0x10
c0014559:	eb 3d                	jmp    c0014598 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c001455b:	83 ec 0c             	sub    esp,0xc
c001455e:	55                   	push   ebp
c001455f:	e8 30 6b ff ff       	call   c000b094 <File::close()>
c0014564:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014567:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001456a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001456d:	59                   	pop    ecx
c001456e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014572:	e8 47 35 ff ff       	call   c0007abe <free>
c0014577:	5b                   	pop    ebx
c0014578:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001457c:	e8 3d 35 ff ff       	call   c0007abe <free>
c0014581:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014584:	e8 35 35 ff ff       	call   c0007abe <free>
c0014589:	5e                   	pop    esi
c001458a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001458e:	e8 2b 35 ff ff       	call   c0007abe <free>
c0014593:	83 c4 10             	add    esp,0x10
c0014596:	eb 21                	jmp    c00145b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014598:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001459c:	e9 7c fd ff ff       	jmp    c001431d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c00145a1:	83 ec 0c             	sub    esp,0xc
c00145a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145a8:	e8 11 35 ff ff       	call   c0007abe <free>
c00145ad:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00145b1:	83 c4 10             	add    esp,0x10
c00145b4:	e9 f1 fc ff ff       	jmp    c00142aa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c00145b9:	31 c0                	xor    eax,eax
c00145bb:	eb 33                	jmp    c00145f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c00145bd:	83 ec 0c             	sub    esp,0xc
c00145c0:	55                   	push   ebp
c00145c1:	e8 ce 6a ff ff       	call   c000b094 <File::close()>
c00145c6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00145c9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00145cc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00145cf:	58                   	pop    eax
c00145d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00145d4:	e8 e5 34 ff ff       	call   c0007abe <free>
c00145d9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00145dc:	e8 dd 34 ff ff       	call   c0007abe <free>
c00145e1:	5a                   	pop    edx
c00145e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145e6:	e8 d3 34 ff ff       	call   c0007abe <free>
c00145eb:	83 c4 10             	add    esp,0x10
c00145ee:	b0 01                	mov    al,0x1
c00145f0:	81 c4 5c 03 00 00    	add    esp,0x35c
c00145f6:	5b                   	pop    ebx
c00145f7:	5e                   	pop    esi
c00145f8:	5f                   	pop    edi
c00145f9:	5d                   	pop    ebp
c00145fa:	c3                   	ret    

c00145fb <Thr::getDriverBaseFromAddress(unsigned long)>:
c00145fb:	56                   	push   esi
c00145fc:	31 d2                	xor    edx,edx
c00145fe:	53                   	push   ebx
c00145ff:	8b 1d a0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279a0
c0014605:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014609:	39 d3                	cmp    ebx,edx
c001460b:	7e 1b                	jle    c0014628 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001460d:	8b 04 95 c0 7b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8440]
c0014614:	39 c8                	cmp    eax,ecx
c0014616:	77 0d                	ja     c0014625 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0014618:	8b 34 95 c0 79 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd8640]
c001461f:	01 c6                	add    esi,eax
c0014621:	39 ce                	cmp    esi,ecx
c0014623:	77 05                	ja     c001462a <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0014625:	42                   	inc    edx
c0014626:	eb e1                	jmp    c0014609 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0014628:	31 c0                	xor    eax,eax
c001462a:	5b                   	pop    ebx
c001462b:	5e                   	pop    esi
c001462c:	c3                   	ret    

c001462d <Thr::getDriverNameFromAddress(unsigned long)>:
c001462d:	53                   	push   ebx
c001462e:	31 c0                	xor    eax,eax
c0014630:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014634:	8b 1d a0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279a0
c001463a:	39 c3                	cmp    ebx,eax
c001463c:	7e 22                	jle    c0014660 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001463e:	8b 14 85 c0 7b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8440]
c0014645:	39 ca                	cmp    edx,ecx
c0014647:	77 14                	ja     c001465d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014649:	03 14 85 c0 79 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd8640]
c0014650:	39 ca                	cmp    edx,ecx
c0014652:	76 09                	jbe    c001465d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014654:	8b 04 85 c0 7d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8240]
c001465b:	eb 05                	jmp    c0014662 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001465d:	40                   	inc    eax
c001465e:	eb da                	jmp    c001463a <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0014660:	31 c0                	xor    eax,eax
c0014662:	5b                   	pop    ebx
c0014663:	c3                   	ret    

c0014664 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0014664:	53                   	push   ebx
c0014665:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0014669:	53                   	push   ebx
c001466a:	e8 8c ff ff ff       	call   c00145fb <Thr::getDriverBaseFromAddress(unsigned long)>
c001466f:	5a                   	pop    edx
c0014670:	31 d2                	xor    edx,edx
c0014672:	85 c0                	test   eax,eax
c0014674:	74 04                	je     c001467a <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0014676:	89 da                	mov    edx,ebx
c0014678:	29 c2                	sub    edx,eax
c001467a:	89 d0                	mov    eax,edx
c001467c:	5b                   	pop    ebx
c001467d:	c3                   	ret    

c001467e <Thr::loadDLL(char const*, bool)>:
c001467e:	55                   	push   ebp
c001467f:	57                   	push   edi
c0014680:	56                   	push   esi
c0014681:	53                   	push   ebx
c0014682:	81 ec 34 01 00 00    	sub    esp,0x134
c0014688:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001468f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0014696:	56                   	push   esi
c0014697:	68 c7 11 02 c0       	push   0xc00211c7
c001469c:	e8 56 63 ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c00146a1:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00146a8:	e8 01 34 ff ff       	call   c0007aae <malloc>
c00146ad:	83 c4 0c             	add    esp,0xc
c00146b0:	89 c3                	mov    ebx,eax
c00146b2:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c00146b8:	56                   	push   esi
c00146b9:	50                   	push   eax
c00146ba:	e8 bb 68 ff ff       	call   c000af7a <File::File(char const*, Process*)>
c00146bf:	83 c4 10             	add    esp,0x10
c00146c2:	85 db                	test   ebx,ebx
c00146c4:	75 3c                	jne    c0014702 <Thr::loadDLL(char const*, bool)+0x84>
c00146c6:	89 f8                	mov    eax,edi
c00146c8:	84 c0                	test   al,al
c00146ca:	0f 84 d2 01 00 00    	je     c00148a2 <Thr::loadDLL(char const*, bool)+0x224>
c00146d0:	55                   	push   ebp
c00146d1:	55                   	push   ebp
c00146d2:	68 d8 11 02 c0       	push   0xc00211d8
c00146d7:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c00146db:	55                   	push   ebp
c00146dc:	e8 5f bf fe ff       	call   c0000640 <strcpy>
c00146e1:	58                   	pop    eax
c00146e2:	5a                   	pop    edx
c00146e3:	56                   	push   esi
c00146e4:	55                   	push   ebp
c00146e5:	e8 56 c1 fe ff       	call   c0000840 <strcat>
c00146ea:	59                   	pop    ecx
c00146eb:	58                   	pop    eax
c00146ec:	68 eb 11 02 c0       	push   0xc00211eb
c00146f1:	55                   	push   ebp
c00146f2:	e8 49 c1 fe ff       	call   c0000840 <strcat>
c00146f7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00146fa:	e8 28 c2 ff ff       	call   c0010927 <KePanic(char const*)>
c00146ff:	83 c4 10             	add    esp,0x10
c0014702:	51                   	push   ecx
c0014703:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0014707:	50                   	push   eax
c0014708:	8d 44 24 20          	lea    eax,[esp+0x20]
c001470c:	50                   	push   eax
c001470d:	53                   	push   ebx
c001470e:	e8 cf 6b ff ff       	call   c000b2e2 <File::stat(unsigned long long*, bool*)>
c0014713:	83 c4 10             	add    esp,0x10
c0014716:	85 db                	test   ebx,ebx
c0014718:	74 0c                	je     c0014726 <Thr::loadDLL(char const*, bool)+0xa8>
c001471a:	83 ec 0c             	sub    esp,0xc
c001471d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001471f:	53                   	push   ebx
c0014720:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014723:	83 c4 10             	add    esp,0x10
c0014726:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001472b:	75 0a                	jne    c0014737 <Thr::loadDLL(char const*, bool)+0xb9>
c001472d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014731:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0014735:	75 3c                	jne    c0014773 <Thr::loadDLL(char const*, bool)+0xf5>
c0014737:	89 f8                	mov    eax,edi
c0014739:	84 c0                	test   al,al
c001473b:	0f 84 49 01 00 00    	je     c001488a <Thr::loadDLL(char const*, bool)+0x20c>
c0014741:	51                   	push   ecx
c0014742:	51                   	push   ecx
c0014743:	68 d8 11 02 c0       	push   0xc00211d8
c0014748:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001474c:	53                   	push   ebx
c001474d:	e8 ee be fe ff       	call   c0000640 <strcpy>
c0014752:	5d                   	pop    ebp
c0014753:	58                   	pop    eax
c0014754:	56                   	push   esi
c0014755:	53                   	push   ebx
c0014756:	e8 e5 c0 fe ff       	call   c0000840 <strcat>
c001475b:	58                   	pop    eax
c001475c:	5a                   	pop    edx
c001475d:	68 eb 11 02 c0       	push   0xc00211eb
c0014762:	53                   	push   ebx
c0014763:	e8 d8 c0 fe ff       	call   c0000840 <strcat>
c0014768:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001476b:	e8 b7 c1 ff ff       	call   c0010927 <KePanic(char const*)>
c0014770:	83 c4 10             	add    esp,0x10
c0014773:	52                   	push   edx
c0014774:	6a 03                	push   0x3
c0014776:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001477a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001477e:	05 ff 0f 00 00       	add    eax,0xfff
c0014783:	83 d2 00             	adc    edx,0x0
c0014786:	0f ac d0 0c          	shrd   eax,edx,0xc
c001478a:	50                   	push   eax
c001478b:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0014791:	e8 74 56 ff ff       	call   c0009e0a <VAS::allocatePages(int, int)>
c0014796:	59                   	pop    ecx
c0014797:	89 c3                	mov    ebx,eax
c0014799:	5d                   	pop    ebp
c001479a:	50                   	push   eax
c001479b:	68 f2 fc 01 c0       	push   0xc001fcf2
c00147a0:	e8 52 62 ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c00147a5:	89 34 24             	mov    DWORD PTR [esp],esi
c00147a8:	e8 c3 bd fe ff       	call   c0000570 <strlen>
c00147ad:	8b 2d a0 79 02 c0    	mov    ebp,DWORD PTR ds:0xc00279a0
c00147b3:	40                   	inc    eax
c00147b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00147b7:	e8 f2 32 ff ff       	call   c0007aae <malloc>
c00147bc:	89 04 ad c0 7d 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd8240],eax
c00147c3:	58                   	pop    eax
c00147c4:	a1 a0 79 02 c0       	mov    eax,ds:0xc00279a0
c00147c9:	5a                   	pop    edx
c00147ca:	56                   	push   esi
c00147cb:	ff 34 85 c0 7d 02 c0 	push   DWORD PTR [eax*4-0x3ffd8240]
c00147d2:	e8 69 be fe ff       	call   c0000640 <strcpy>
c00147d7:	a1 a0 79 02 c0       	mov    eax,ds:0xc00279a0
c00147dc:	8d 50 01             	lea    edx,[eax+0x1]
c00147df:	89 1c 85 c0 7b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8440],ebx
c00147e6:	89 15 a0 79 02 c0    	mov    DWORD PTR ds:0xc00279a0,edx
c00147ec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00147f0:	83 c4 0c             	add    esp,0xc
c00147f3:	89 14 85 c0 79 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8640],edx
c00147fa:	6a 01                	push   0x1
c00147fc:	53                   	push   ebx
c00147fd:	56                   	push   esi
c00147fe:	e8 bf f6 ff ff       	call   c0013ec2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0014803:	83 c4 10             	add    esp,0x10
c0014806:	0f b6 c0             	movzx  eax,al
c0014809:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001480d:	85 c0                	test   eax,eax
c001480f:	0f 85 89 00 00 00    	jne    c001489e <Thr::loadDLL(char const*, bool)+0x220>
c0014815:	89 f8                	mov    eax,edi
c0014817:	84 c0                	test   al,al
c0014819:	74 73                	je     c001488e <Thr::loadDLL(char const*, bool)+0x210>
c001481b:	83 ec 0c             	sub    esp,0xc
c001481e:	68 ed 11 02 c0       	push   0xc00211ed
c0014823:	e8 ff c0 ff ff       	call   c0010927 <KePanic(char const*)>
c0014828:	83 c4 10             	add    esp,0x10
c001482b:	eb 61                	jmp    c001488e <Thr::loadDLL(char const*, bool)+0x210>
c001482d:	50                   	push   eax
c001482e:	50                   	push   eax
c001482f:	89 e8                	mov    eax,ebp
c0014831:	c1 e0 0c             	shl    eax,0xc
c0014834:	01 d8                	add    eax,ebx
c0014836:	50                   	push   eax
c0014837:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001483d:	e8 d8 50 ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c0014842:	83 c4 10             	add    esp,0x10
c0014845:	8b 00                	mov    eax,DWORD PTR [eax]
c0014847:	a8 60                	test   al,0x60
c0014849:	75 11                	jne    c001485c <Thr::loadDLL(char const*, bool)+0x1de>
c001484b:	83 ec 0c             	sub    esp,0xc
c001484e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014853:	50                   	push   eax
c0014854:	e8 f1 34 ff ff       	call   c0007d4a <Phys::freePage(unsigned long)>
c0014859:	83 c4 10             	add    esp,0x10
c001485c:	45                   	inc    ebp
c001485d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014861:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014865:	05 ff 0f 00 00       	add    eax,0xfff
c001486a:	bf 00 00 00 00       	mov    edi,0x0
c001486f:	83 d2 00             	adc    edx,0x0
c0014872:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014876:	c1 ea 0c             	shr    edx,0xc
c0014879:	39 c5                	cmp    ebp,eax
c001487b:	89 d1                	mov    ecx,edx
c001487d:	89 f8                	mov    eax,edi
c001487f:	19 c8                	sbb    eax,ecx
c0014881:	72 aa                	jb     c001482d <Thr::loadDLL(char const*, bool)+0x1af>
c0014883:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014888:	75 18                	jne    c00148a2 <Thr::loadDLL(char const*, bool)+0x224>
c001488a:	31 db                	xor    ebx,ebx
c001488c:	eb 14                	jmp    c00148a2 <Thr::loadDLL(char const*, bool)+0x224>
c001488e:	83 ec 0c             	sub    esp,0xc
c0014891:	68 0c 12 02 c0       	push   0xc002120c
c0014896:	e8 8c c0 ff ff       	call   c0010927 <KePanic(char const*)>
c001489b:	83 c4 10             	add    esp,0x10
c001489e:	31 ed                	xor    ebp,ebp
c00148a0:	eb bb                	jmp    c001485d <Thr::loadDLL(char const*, bool)+0x1df>
c00148a2:	81 c4 2c 01 00 00    	add    esp,0x12c
c00148a8:	89 d8                	mov    eax,ebx
c00148aa:	5b                   	pop    ebx
c00148ab:	5e                   	pop    esi
c00148ac:	5f                   	pop    edi
c00148ad:	5d                   	pop    ebp
c00148ae:	c3                   	ret    

c00148af <Thr::executeDLL(unsigned long, void*)>:
c00148af:	56                   	push   esi
c00148b0:	53                   	push   ebx
c00148b1:	52                   	push   edx
c00148b2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00148b6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00148ba:	85 db                	test   ebx,ebx
c00148bc:	75 10                	jne    c00148ce <Thr::executeDLL(unsigned long, void*)+0x1f>
c00148be:	83 ec 0c             	sub    esp,0xc
c00148c1:	68 28 12 02 c0       	push   0xc0021228
c00148c6:	e8 5c c0 ff ff       	call   c0010927 <KePanic(char const*)>
c00148cb:	83 c4 10             	add    esp,0x10
c00148ce:	50                   	push   eax
c00148cf:	50                   	push   eax
c00148d0:	53                   	push   ebx
c00148d1:	68 52 12 02 c0       	push   0xc0021252
c00148d6:	e8 1c 61 ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c00148db:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00148df:	89 d8                	mov    eax,ebx
c00148e1:	83 c4 14             	add    esp,0x14
c00148e4:	5b                   	pop    ebx
c00148e5:	5e                   	pop    esi
c00148e6:	ff e0                	jmp    eax

c00148e8 <userModeEntryPoint(void*)>:
c00148e8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00148ed:	83 e8 01             	sub    eax,0x1
c00148f0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00148f5:	75 01                	jne    c00148f8 <userModeEntryPoint(void*)+0x10>
c00148f7:	fb                   	sti    
c00148f8:	fb                   	sti    
c00148f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148fe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014901:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0014907:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001490b:	e9 2f b9 fe ff       	jmp    c000023f <goToUsermode>

c0014910 <changeTSS>:
c0014910:	83 ec 14             	sub    esp,0x14
c0014913:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014918:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001491b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0014920:	c1 e2 15             	shl    edx,0x15
c0014923:	29 d0                	sub    eax,edx
c0014925:	50                   	push   eax
c0014926:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001492b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014931:	05 7c 11 00 00       	add    eax,0x117c
c0014936:	50                   	push   eax
c0014937:	e8 28 46 ff ff       	call   c0008f64 <TSS::setESP(unsigned long)>
c001493c:	83 c4 1c             	add    esp,0x1c
c001493f:	c3                   	ret    

c0014940 <switchToThread(ThreadControlBlock*)>:
c0014940:	57                   	push   edi
c0014941:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c0014947:	56                   	push   esi
c0014948:	85 c9                	test   ecx,ecx
c001494a:	53                   	push   ebx
c001494b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001494f:	0f 85 8b 00 00 00    	jne    c00149e0 <switchToThread(ThreadControlBlock*)+0xa0>
c0014955:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0014959:	81 fa ff 00 00 00    	cmp    edx,0xff
c001495f:	74 7b                	je     c00149dc <switchToThread(ThreadControlBlock*)+0x9c>
c0014961:	b8 00 04 00 00       	mov    eax,0x400
c0014966:	29 d0                	sub    eax,edx
c0014968:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c001496b:	d1 f8                	sar    eax,1
c001496d:	01 d0                	add    eax,edx
c001496f:	90                   	nop
c0014970:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0014973:	e8 ae 27 00 00       	call   c0017126 <HalQueryPerformanceCounter()>
c0014978:	a3 a8 81 02 c0       	mov    ds:0xc00281a8,eax
c001497d:	89 15 ac 81 02 c0    	mov    DWORD PTR ds:0xc00281ac,edx
c0014983:	89 c6                	mov    esi,eax
c0014985:	89 d7                	mov    edi,edx
c0014987:	2b 35 98 81 02 c0    	sub    esi,DWORD PTR ds:0xc0028198
c001498d:	a3 98 81 02 c0       	mov    ds:0xc0028198,eax
c0014992:	1b 3d 9c 81 02 c0    	sbb    edi,DWORD PTR ds:0xc002819c
c0014998:	89 35 a0 81 02 c0    	mov    DWORD PTR ds:0xc00281a0,esi
c001499e:	89 3d a4 81 02 c0    	mov    DWORD PTR ds:0xc00281a4,edi
c00149a4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00149aa:	89 15 9c 81 02 c0    	mov    DWORD PTR ds:0xc002819c,edx
c00149b0:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00149b3:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00149b6:	01 c6                	add    esi,eax
c00149b8:	11 d7                	adc    edi,edx
c00149ba:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00149bd:	83 ec 0c             	sub    esp,0xc
c00149c0:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00149c3:	53                   	push   ebx
c00149c4:	e8 ae b8 fe ff       	call   c0000277 <switchToThreadASM>
c00149c9:	0f 20 c0             	mov    eax,cr0
c00149cc:	83 c8 08             	or     eax,0x8
c00149cf:	0f 22 c0             	mov    cr0,eax
c00149d2:	83 c4 10             	add    esp,0x10
c00149d5:	5b                   	pop    ebx
c00149d6:	5e                   	pop    esi
c00149d7:	5f                   	pop    edi
c00149d8:	c3                   	ret    
c00149d9:	8d 76 00             	lea    esi,[esi+0x0]
c00149dc:	31 c0                	xor    eax,eax
c00149de:	eb 90                	jmp    c0014970 <switchToThread(ThreadControlBlock*)+0x30>
c00149e0:	5b                   	pop    ebx
c00149e1:	c7 05 60 81 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x1
c00149eb:	5e                   	pop    esi
c00149ec:	5f                   	pop    edi
c00149ed:	c3                   	ret    
c00149ee:	66 90                	xchg   ax,ax

c00149f0 <Process::addArgs(char**)>:
c00149f0:	57                   	push   edi
c00149f1:	56                   	push   esi
c00149f2:	53                   	push   ebx
c00149f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00149f7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00149fb:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0014a05:	85 ff                	test   edi,edi
c0014a07:	74 4f                	je     c0014a58 <Process::addArgs(char**)+0x68>
c0014a09:	8b 07                	mov    eax,DWORD PTR [edi]
c0014a0b:	85 c0                	test   eax,eax
c0014a0d:	74 49                	je     c0014a58 <Process::addArgs(char**)+0x68>
c0014a0f:	31 db                	xor    ebx,ebx
c0014a11:	8d 76 00             	lea    esi,[esi+0x0]
c0014a14:	83 ec 0c             	sub    esp,0xc
c0014a17:	50                   	push   eax
c0014a18:	e8 53 bb fe ff       	call   c0000570 <strlen>
c0014a1d:	83 c0 01             	add    eax,0x1
c0014a20:	89 04 24             	mov    DWORD PTR [esp],eax
c0014a23:	e8 86 30 ff ff       	call   c0007aae <malloc>
c0014a28:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0014a2f:	5a                   	pop    edx
c0014a30:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014a33:	59                   	pop    ecx
c0014a34:	83 c3 01             	add    ebx,0x1
c0014a37:	52                   	push   edx
c0014a38:	50                   	push   eax
c0014a39:	e8 02 bc fe ff       	call   c0000640 <strcpy>
c0014a3e:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c0014a44:	83 c4 10             	add    esp,0x10
c0014a47:	83 c1 01             	add    ecx,0x1
c0014a4a:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c0014a50:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0014a53:	85 c0                	test   eax,eax
c0014a55:	75 bd                	jne    c0014a14 <Process::addArgs(char**)+0x24>
c0014a57:	90                   	nop
c0014a58:	5b                   	pop    ebx
c0014a59:	5e                   	pop    esi
c0014a5a:	5f                   	pop    edi
c0014a5b:	c3                   	ret    

c0014a5c <Process::Process(char const*, Process*, char**)>:
c0014a5c:	56                   	push   esi
c0014a5d:	53                   	push   ebx
c0014a5e:	83 ec 14             	sub    esp,0x14
c0014a61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a65:	05 0c 02 00 00       	add    eax,0x20c
c0014a6a:	bb 07 00 00 00       	mov    ebx,0x7
c0014a6f:	89 c6                	mov    esi,eax
c0014a71:	8d 76 00             	lea    esi,[esi+0x0]
c0014a74:	85 db                	test   ebx,ebx
c0014a76:	78 14                	js     c0014a8c <Process::Process(char const*, Process*, char**)+0x30>
c0014a78:	83 ec 0c             	sub    esp,0xc
c0014a7b:	56                   	push   esi
c0014a7c:	e8 07 a5 00 00       	call   c001ef88 <ThreadControlBlock::ThreadControlBlock()>
c0014a81:	83 c4 10             	add    esp,0x10
c0014a84:	83 c6 5f             	add    esi,0x5f
c0014a87:	83 eb 01             	sub    ebx,0x1
c0014a8a:	eb e8                	jmp    c0014a74 <Process::Process(char const*, Process*, char**)+0x18>
c0014a8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a90:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014a97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a9b:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014aa2:	83 ec 0c             	sub    esp,0xc
c0014aa5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014aa9:	e8 6e bc ff ff       	call   c001071c <Krnl::newProcessEnv(Process*)>
c0014aae:	83 c4 10             	add    esp,0x10
c0014ab1:	89 c2                	mov    edx,eax
c0014ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ab7:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014abd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ac1:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014aca:	a1 20 24 02 c0       	mov    eax,ds:0xc0022420
c0014acf:	8d 50 01             	lea    edx,[eax+0x1]
c0014ad2:	89 15 20 24 02 c0    	mov    DWORD PTR ds:0xc0022420,edx
c0014ad8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014adc:	89 02                	mov    DWORD PTR [edx],eax
c0014ade:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0014ae6:	83 ec 0c             	sub    esp,0xc
c0014ae9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014aed:	e8 bc 2f ff ff       	call   c0007aae <malloc>
c0014af2:	83 c4 10             	add    esp,0x10
c0014af5:	89 c3                	mov    ebx,eax
c0014af7:	83 ec 08             	sub    esp,0x8
c0014afa:	6a 00                	push   0x0
c0014afc:	53                   	push   ebx
c0014afd:	e8 e2 56 ff ff       	call   c000a1e4 <VAS::VAS(bool)>
c0014b02:	83 c4 10             	add    esp,0x10
c0014b05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b09:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014b0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b13:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014b1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b21:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014b25:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014b2b:	e8 12 c2 ff ff       	call   c0010d42 <KeInitSignals()>
c0014b30:	89 c2                	mov    edx,eax
c0014b32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b36:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014b3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b40:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014b46:	85 c0                	test   eax,eax
c0014b48:	74 42                	je     c0014b8c <Process::Process(char const*, Process*, char**)+0x130>
c0014b4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b4e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014b54:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014b5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b5e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b68:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014b6e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014b74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b78:	05 0c 01 00 00       	add    eax,0x10c
c0014b7d:	83 ec 08             	sub    esp,0x8
c0014b80:	52                   	push   edx
c0014b81:	50                   	push   eax
c0014b82:	e8 b9 ba fe ff       	call   c0000640 <strcpy>
c0014b87:	83 c4 10             	add    esp,0x10
c0014b8a:	eb 64                	jmp    c0014bf0 <Process::Process(char const*, Process*, char**)+0x194>
c0014b8c:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0014b94:	83 ec 0c             	sub    esp,0xc
c0014b97:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014b9b:	e8 0e 2f ff ff       	call   c0007aae <malloc>
c0014ba0:	83 c4 10             	add    esp,0x10
c0014ba3:	89 c3                	mov    ebx,eax
c0014ba5:	83 ec 08             	sub    esp,0x8
c0014ba8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014bac:	53                   	push   ebx
c0014bad:	e8 9e 40 ff ff       	call   c0008c50 <VgaText::VgaText(char const*)>
c0014bb2:	83 c4 10             	add    esp,0x10
c0014bb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014bb9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014bbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014bc3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014bc9:	83 ec 0c             	sub    esp,0xc
c0014bcc:	50                   	push   eax
c0014bcd:	e8 1c 39 ff ff       	call   c00084ee <addToTerminalCycle(VgaText*)>
c0014bd2:	83 c4 10             	add    esp,0x10
c0014bd5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014bd9:	05 0c 01 00 00       	add    eax,0x10c
c0014bde:	83 ec 08             	sub    esp,0x8
c0014be1:	68 71 12 02 c0       	push   0xc0021271
c0014be6:	50                   	push   eax
c0014be7:	e8 54 ba fe ff       	call   c0000640 <strcpy>
c0014bec:	83 c4 10             	add    esp,0x10
c0014bef:	90                   	nop
c0014bf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014bf4:	83 c0 0c             	add    eax,0xc
c0014bf7:	83 ec 08             	sub    esp,0x8
c0014bfa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014bfe:	50                   	push   eax
c0014bff:	e8 3c ba fe ff       	call   c0000640 <strcpy>
c0014c04:	83 c4 10             	add    esp,0x10
c0014c07:	83 ec 08             	sub    esp,0x8
c0014c0a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0014c0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014c12:	e8 d9 fd ff ff       	call   c00149f0 <Process::addArgs(char**)>
c0014c17:	83 c4 10             	add    esp,0x10
c0014c1a:	83 ec 08             	sub    esp,0x8
c0014c1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014c21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014c25:	e8 66 ed ff ff       	call   c0013990 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0014c2a:	83 c4 10             	add    esp,0x10
c0014c2d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014c31:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014c35:	83 f0 01             	xor    eax,0x1
c0014c38:	88 c2                	mov    dl,al
c0014c3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c3e:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0014c44:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0014c49:	83 ec 04             	sub    esp,0x4
c0014c4c:	50                   	push   eax
c0014c4d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014c51:	68 c8 12 02 c0       	push   0xc00212c8
c0014c56:	e8 9c 5d ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c0014c5b:	83 c4 10             	add    esp,0x10
c0014c5e:	90                   	nop
c0014c5f:	83 c4 14             	add    esp,0x14
c0014c62:	5b                   	pop    ebx
c0014c63:	5e                   	pop    esi
c0014c64:	c3                   	ret    
c0014c65:	90                   	nop
c0014c66:	66 90                	xchg   ax,ax

c0014c68 <Process::Process(bool, char const*, Process*, char**)>:
c0014c68:	56                   	push   esi
c0014c69:	53                   	push   ebx
c0014c6a:	83 ec 24             	sub    esp,0x24
c0014c6d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014c71:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0014c75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c79:	05 0c 02 00 00       	add    eax,0x20c
c0014c7e:	bb 07 00 00 00       	mov    ebx,0x7
c0014c83:	89 c6                	mov    esi,eax
c0014c85:	8d 76 00             	lea    esi,[esi+0x0]
c0014c88:	85 db                	test   ebx,ebx
c0014c8a:	78 14                	js     c0014ca0 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0014c8c:	83 ec 0c             	sub    esp,0xc
c0014c8f:	56                   	push   esi
c0014c90:	e8 f3 a2 00 00       	call   c001ef88 <ThreadControlBlock::ThreadControlBlock()>
c0014c95:	83 c4 10             	add    esp,0x10
c0014c98:	83 c6 5f             	add    esi,0x5f
c0014c9b:	83 eb 01             	sub    ebx,0x1
c0014c9e:	eb e8                	jmp    c0014c88 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0014ca0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ca4:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014cab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014caf:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014cb6:	83 ec 0c             	sub    esp,0xc
c0014cb9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014cbd:	e8 5a ba ff ff       	call   c001071c <Krnl::newProcessEnv(Process*)>
c0014cc2:	83 c4 10             	add    esp,0x10
c0014cc5:	89 c2                	mov    edx,eax
c0014cc7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ccb:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014cd1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cd5:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014cde:	a1 20 24 02 c0       	mov    eax,ds:0xc0022420
c0014ce3:	8d 50 01             	lea    edx,[eax+0x1]
c0014ce6:	89 15 20 24 02 c0    	mov    DWORD PTR ds:0xc0022420,edx
c0014cec:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0014cf0:	89 02                	mov    DWORD PTR [edx],eax
c0014cf2:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0014cfa:	83 ec 0c             	sub    esp,0xc
c0014cfd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014d01:	e8 a8 2d ff ff       	call   c0007aae <malloc>
c0014d06:	83 c4 10             	add    esp,0x10
c0014d09:	89 c3                	mov    ebx,eax
c0014d0b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0014d10:	83 ec 08             	sub    esp,0x8
c0014d13:	50                   	push   eax
c0014d14:	53                   	push   ebx
c0014d15:	e8 ca 54 ff ff       	call   c000a1e4 <VAS::VAS(bool)>
c0014d1a:	83 c4 10             	add    esp,0x10
c0014d1d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d21:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014d27:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d2b:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014d35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d39:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014d3d:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014d43:	e8 fa bf ff ff       	call   c0010d42 <KeInitSignals()>
c0014d48:	89 c2                	mov    edx,eax
c0014d4a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d4e:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014d54:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d58:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014d5e:	85 c0                	test   eax,eax
c0014d60:	74 42                	je     c0014da4 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0014d62:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d66:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014d6c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014d72:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d76:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014d7c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d80:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014d86:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014d8c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d90:	05 0c 01 00 00       	add    eax,0x10c
c0014d95:	83 ec 08             	sub    esp,0x8
c0014d98:	52                   	push   edx
c0014d99:	50                   	push   eax
c0014d9a:	e8 a1 b8 fe ff       	call   c0000640 <strcpy>
c0014d9f:	83 c4 10             	add    esp,0x10
c0014da2:	eb 64                	jmp    c0014e08 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0014da4:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0014dac:	83 ec 0c             	sub    esp,0xc
c0014daf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014db3:	e8 f6 2c ff ff       	call   c0007aae <malloc>
c0014db8:	83 c4 10             	add    esp,0x10
c0014dbb:	89 c3                	mov    ebx,eax
c0014dbd:	83 ec 08             	sub    esp,0x8
c0014dc0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014dc4:	53                   	push   ebx
c0014dc5:	e8 86 3e ff ff       	call   c0008c50 <VgaText::VgaText(char const*)>
c0014dca:	83 c4 10             	add    esp,0x10
c0014dcd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014dd1:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014dd7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ddb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014de1:	83 ec 0c             	sub    esp,0xc
c0014de4:	50                   	push   eax
c0014de5:	e8 04 37 ff ff       	call   c00084ee <addToTerminalCycle(VgaText*)>
c0014dea:	83 c4 10             	add    esp,0x10
c0014ded:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014df1:	05 0c 01 00 00       	add    eax,0x10c
c0014df6:	83 ec 08             	sub    esp,0x8
c0014df9:	68 71 12 02 c0       	push   0xc0021271
c0014dfe:	50                   	push   eax
c0014dff:	e8 3c b8 fe ff       	call   c0000640 <strcpy>
c0014e04:	83 c4 10             	add    esp,0x10
c0014e07:	90                   	nop
c0014e08:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014e0c:	83 c0 0c             	add    eax,0xc
c0014e0f:	83 ec 08             	sub    esp,0x8
c0014e12:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014e16:	50                   	push   eax
c0014e17:	e8 24 b8 fe ff       	call   c0000640 <strcpy>
c0014e1c:	83 c4 10             	add    esp,0x10
c0014e1f:	83 ec 08             	sub    esp,0x8
c0014e22:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0014e26:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014e2a:	e8 c1 fb ff ff       	call   c00149f0 <Process::addArgs(char**)>
c0014e2f:	83 c4 10             	add    esp,0x10
c0014e32:	90                   	nop
c0014e33:	83 c4 24             	add    esp,0x24
c0014e36:	5b                   	pop    ebx
c0014e37:	5e                   	pop    esi
c0014e38:	c3                   	ret    
c0014e39:	8d 76 00             	lea    esi,[esi+0x0]

c0014e3c <taskStartupFunction>:
c0014e3c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e41:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0014e44:	c3                   	ret    
c0014e45:	90                   	nop
c0014e46:	66 90                	xchg   ax,ax

c0014e48 <Semaphore::Semaphore(int)>:
c0014e48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014e4c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014e50:	89 10                	mov    DWORD PTR [eax],edx
c0014e52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014e56:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0014e5d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014e61:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014e68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014e6c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0014e73:	90                   	nop
c0014e74:	c3                   	ret    
c0014e75:	90                   	nop
c0014e76:	66 90                	xchg   ax,ax

c0014e78 <Mutex::Mutex()>:
c0014e78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014e7c:	6a 01                	push   0x1
c0014e7e:	50                   	push   eax
c0014e7f:	e8 c4 ff ff ff       	call   c0014e48 <Semaphore::Semaphore(int)>
c0014e84:	83 c4 08             	add    esp,0x8
c0014e87:	90                   	nop
c0014e88:	c3                   	ret    
c0014e89:	90                   	nop
c0014e8a:	66 90                	xchg   ax,ax

c0014e8c <Process::createThread(void (*)(void*), void*, int)>:
c0014e8c:	57                   	push   edi
c0014e8d:	31 c9                	xor    ecx,ecx
c0014e8f:	56                   	push   esi
c0014e90:	53                   	push   ebx
c0014e91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014e95:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0014e9c:	89 f2                	mov    edx,esi
c0014e9e:	66 90                	xchg   ax,ax
c0014ea0:	0f b7 c2             	movzx  eax,dx
c0014ea3:	80 e2 01             	and    dl,0x1
c0014ea6:	74 14                	je     c0014ebc <Process::createThread(void (*)(void*), void*, int)+0x30>
c0014ea8:	d1 f8                	sar    eax,1
c0014eaa:	83 c1 01             	add    ecx,0x1
c0014ead:	89 c2                	mov    edx,eax
c0014eaf:	83 f9 10             	cmp    ecx,0x10
c0014eb2:	75 ec                	jne    c0014ea0 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0014eb4:	31 db                	xor    ebx,ebx
c0014eb6:	89 d8                	mov    eax,ebx
c0014eb8:	5b                   	pop    ebx
c0014eb9:	5e                   	pop    esi
c0014eba:	5f                   	pop    edi
c0014ebb:	c3                   	ret    
c0014ebc:	b8 01 00 00 00       	mov    eax,0x1
c0014ec1:	d3 e0                	shl    eax,cl
c0014ec3:	09 c6                	or     esi,eax
c0014ec5:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0014ec8:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0014ecf:	01 c0                	add    eax,eax
c0014ed1:	01 c8                	add    eax,ecx
c0014ed3:	8d 04 80             	lea    eax,[eax+eax*4]
c0014ed6:	01 d8                	add    eax,ebx
c0014ed8:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0014edf:	75 0b                	jne    c0014eec <Process::createThread(void (*)(void*), void*, int)+0x60>
c0014ee1:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0014eeb:	90                   	nop
c0014eec:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0014ef2:	83 ec 0c             	sub    esp,0xc
c0014ef5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0014ef8:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0014efb:	01 c0                	add    eax,eax
c0014efd:	01 c8                	add    eax,ecx
c0014eff:	8d 3c 80             	lea    edi,[eax+eax*4]
c0014f02:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0014f05:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0014f0b:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0014f11:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014f15:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0014f1b:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0014f21:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0014f27:	89 ca                	mov    edx,ecx
c0014f29:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0014f30:	f7 da                	neg    edx
c0014f32:	c1 e2 15             	shl    edx,0x15
c0014f35:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0014f3b:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0014f41:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014f45:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0014f4f:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0014f55:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014f59:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0014f5f:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0014f69:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0014f73:	68 00 01 00 00       	push   0x100
c0014f78:	e8 31 2b ff ff       	call   c0007aae <malloc>
c0014f7d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0014f80:	58                   	pop    eax
c0014f81:	5a                   	pop    edx
c0014f82:	53                   	push   ebx
c0014f83:	68 84 81 02 c0       	push   0xc0028184
c0014f88:	e8 93 9d 00 00       	call   c001ed20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014f8d:	83 c4 10             	add    esp,0x10
c0014f90:	89 d8                	mov    eax,ebx
c0014f92:	5b                   	pop    ebx
c0014f93:	5e                   	pop    esi
c0014f94:	5f                   	pop    edi
c0014f95:	c3                   	ret    
c0014f96:	66 90                	xchg   ax,ax

c0014f98 <Process::createUserThread()>:
c0014f98:	83 ec 0c             	sub    esp,0xc
c0014f9b:	68 80 00 00 00       	push   0x80
c0014fa0:	6a 00                	push   0x0
c0014fa2:	68 e8 48 01 c0       	push   0xc00148e8
c0014fa7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014fab:	50                   	push   eax
c0014fac:	e8 db fe ff ff       	call   c0014e8c <Process::createThread(void (*)(void*), void*, int)>
c0014fb1:	83 c4 1c             	add    esp,0x1c
c0014fb4:	c3                   	ret    
c0014fb5:	8d 76 00             	lea    esi,[esi+0x0]

c0014fb8 <setupMultitasking(void (*)())>:
c0014fb8:	56                   	push   esi
c0014fb9:	53                   	push   ebx
c0014fba:	83 ec 04             	sub    esp,0x4
c0014fbd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014fc1:	eb 11                	jmp    c0014fd4 <setupMultitasking(void (*)())+0x1c>
c0014fc3:	90                   	nop
c0014fc4:	83 ec 0c             	sub    esp,0xc
c0014fc7:	68 84 81 02 c0       	push   0xc0028184
c0014fcc:	e8 93 9c 00 00       	call   c001ec64 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014fd1:	83 c4 10             	add    esp,0x10
c0014fd4:	83 ec 0c             	sub    esp,0xc
c0014fd7:	68 84 81 02 c0       	push   0xc0028184
c0014fdc:	e8 5f 9c 00 00       	call   c001ec40 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014fe1:	83 c4 10             	add    esp,0x10
c0014fe4:	84 c0                	test   al,al
c0014fe6:	74 dc                	je     c0014fc4 <setupMultitasking(void (*)())+0xc>
c0014fe8:	83 ec 0c             	sub    esp,0xc
c0014feb:	68 24 07 00 00       	push   0x724
c0014ff0:	e8 b9 2a ff ff       	call   c0007aae <malloc>
c0014ff5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014ffc:	89 c3                	mov    ebx,eax
c0014ffe:	6a 00                	push   0x0
c0015000:	68 75 12 02 c0       	push   0xc0021275
c0015005:	6a 01                	push   0x1
c0015007:	50                   	push   eax
c0015008:	e8 5b fc ff ff       	call   c0014c68 <Process::Process(bool, char const*, Process*, char**)>
c001500d:	83 c4 14             	add    esp,0x14
c0015010:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0015016:	89 1d 90 81 02 c0    	mov    DWORD PTR ds:0xc0028190,ebx
c001501c:	50                   	push   eax
c001501d:	e8 21 37 ff ff       	call   c0008743 <setActiveTerminal(VgaText*)>
c0015022:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0015029:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0015033:	83 c8 01             	or     eax,0x1
c0015036:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c001503d:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015043:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015046:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015050:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0015056:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c001505c:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0015066:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0015070:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001507a:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015080:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001508a:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0015090:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001509a:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c00150a1:	e8 08 2a ff ff       	call   c0007aae <malloc>
c00150a6:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c00150ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00150b2:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00150b8:	5a                   	pop    edx
c00150b9:	59                   	pop    ecx
c00150ba:	68 71 12 02 c0       	push   0xc0021271
c00150bf:	50                   	push   eax
c00150c0:	e8 7b b5 fe ff       	call   c0000640 <strcpy>
c00150c5:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00150cc:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00150d0:	83 c4 14             	add    esp,0x14
c00150d3:	5b                   	pop    ebx
c00150d4:	5e                   	pop    esi
c00150d5:	e9 8f b1 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c00150da:	66 90                	xchg   ax,ax

c00150dc <schedule()>:
c00150dc:	8b 15 64 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028164
c00150e2:	85 d2                	test   edx,edx
c00150e4:	74 0e                	je     c00150f4 <schedule()+0x18>
c00150e6:	c7 05 60 81 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x1
c00150f0:	c3                   	ret    
c00150f1:	8d 76 00             	lea    esi,[esi+0x0]
c00150f4:	53                   	push   ebx
c00150f5:	83 ec 14             	sub    esp,0x14
c00150f8:	68 84 81 02 c0       	push   0xc0028184
c00150fd:	e8 3e 9b 00 00       	call   c001ec40 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015102:	83 c4 10             	add    esp,0x10
c0015105:	84 c0                	test   al,al
c0015107:	75 3f                	jne    c0015148 <schedule()+0x6c>
c0015109:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001510e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015111:	83 fa 01             	cmp    edx,0x1
c0015114:	74 3a                	je     c0015150 <schedule()+0x74>
c0015116:	66 90                	xchg   ax,ax
c0015118:	83 ec 0c             	sub    esp,0xc
c001511b:	68 84 81 02 c0       	push   0xc0028184
c0015120:	e8 37 9b 00 00       	call   c001ec5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015125:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c001512c:	89 c3                	mov    ebx,eax
c001512e:	e8 31 9b 00 00       	call   c001ec64 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015133:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001513a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001513d:	e8 fe f7 ff ff       	call   c0014940 <switchToThread(ThreadControlBlock*)>
c0015142:	83 c4 10             	add    esp,0x10
c0015145:	8d 76 00             	lea    esi,[esi+0x0]
c0015148:	83 c4 08             	add    esp,0x8
c001514b:	5b                   	pop    ebx
c001514c:	c3                   	ret    
c001514d:	8d 76 00             	lea    esi,[esi+0x0]
c0015150:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0015157:	83 ec 08             	sub    esp,0x8
c001515a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001515f:	50                   	push   eax
c0015160:	68 84 81 02 c0       	push   0xc0028184
c0015165:	e8 b6 9b 00 00       	call   c001ed20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001516a:	83 c4 10             	add    esp,0x10
c001516d:	eb a9                	jmp    c0015118 <schedule()+0x3c>
c001516f:	90                   	nop

c0015170 <Semaphore::tryAcquire()>:
c0015170:	53                   	push   ebx
c0015171:	83 ec 08             	sub    esp,0x8
c0015174:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015178:	fa                   	cli    
c0015179:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001517e:	8d 50 01             	lea    edx,[eax+0x1]
c0015181:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015187:	8b 15 64 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028164
c001518d:	8d 5a 01             	lea    ebx,[edx+0x1]
c0015190:	89 1d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ebx
c0015196:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0015199:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001519b:	7c 33                	jl     c00151d0 <Semaphore::tryAcquire()+0x60>
c001519d:	89 15 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,edx
c00151a3:	85 d2                	test   edx,edx
c00151a5:	75 0d                	jne    c00151b4 <Semaphore::tryAcquire()+0x44>
c00151a7:	8b 15 60 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028160
c00151ad:	85 d2                	test   edx,edx
c00151af:	75 6f                	jne    c0015220 <Semaphore::tryAcquire()+0xb0>
c00151b1:	8d 76 00             	lea    esi,[esi+0x0]
c00151b4:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00151b9:	85 c0                	test   eax,eax
c00151bb:	74 0b                	je     c00151c8 <Semaphore::tryAcquire()+0x58>
c00151bd:	8d 76 00             	lea    esi,[esi+0x0]
c00151c0:	31 c0                	xor    eax,eax
c00151c2:	83 c4 08             	add    esp,0x8
c00151c5:	5b                   	pop    ebx
c00151c6:	c3                   	ret    
c00151c7:	90                   	nop
c00151c8:	fb                   	sti    
c00151c9:	83 c4 08             	add    esp,0x8
c00151cc:	5b                   	pop    ebx
c00151cd:	c3                   	ret    
c00151ce:	66 90                	xchg   ax,ax
c00151d0:	83 c3 01             	add    ebx,0x1
c00151d3:	89 15 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,edx
c00151d9:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c00151dc:	85 d2                	test   edx,edx
c00151de:	75 24                	jne    c0015204 <Semaphore::tryAcquire()+0x94>
c00151e0:	8b 0d 60 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028160
c00151e6:	85 c9                	test   ecx,ecx
c00151e8:	74 1a                	je     c0015204 <Semaphore::tryAcquire()+0x94>
c00151ea:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c00151f4:	e8 e3 fe ff ff       	call   c00150dc <schedule()>
c00151f9:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00151fe:	83 e8 01             	sub    eax,0x1
c0015201:	8d 76 00             	lea    esi,[esi+0x0]
c0015204:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015209:	85 c0                	test   eax,eax
c001520b:	75 0b                	jne    c0015218 <Semaphore::tryAcquire()+0xa8>
c001520d:	fb                   	sti    
c001520e:	b0 01                	mov    al,0x1
c0015210:	83 c4 08             	add    esp,0x8
c0015213:	5b                   	pop    ebx
c0015214:	c3                   	ret    
c0015215:	8d 76 00             	lea    esi,[esi+0x0]
c0015218:	b0 01                	mov    al,0x1
c001521a:	83 c4 08             	add    esp,0x8
c001521d:	5b                   	pop    ebx
c001521e:	c3                   	ret    
c001521f:	90                   	nop
c0015220:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c001522a:	e8 ad fe ff ff       	call   c00150dc <schedule()>
c001522f:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015234:	83 e8 01             	sub    eax,0x1
c0015237:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001523c:	85 c0                	test   eax,eax
c001523e:	75 80                	jne    c00151c0 <Semaphore::tryAcquire()+0x50>
c0015240:	eb 86                	jmp    c00151c8 <Semaphore::tryAcquire()+0x58>
c0015242:	66 90                	xchg   ax,ax

c0015244 <Semaphore::assertLocked(char const*)>:
c0015244:	83 ec 0c             	sub    esp,0xc
c0015247:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001524b:	fa                   	cli    
c001524c:	8b 0d 68 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028168
c0015252:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015257:	83 c1 01             	add    ecx,0x1
c001525a:	89 0d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ecx
c0015260:	8d 48 01             	lea    ecx,[eax+0x1]
c0015263:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015269:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001526b:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001526e:	7c 28                	jl     c0015298 <Semaphore::assertLocked(char const*)+0x54>
c0015270:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015275:	85 c0                	test   eax,eax
c0015277:	75 0b                	jne    c0015284 <Semaphore::assertLocked(char const*)+0x40>
c0015279:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c001527e:	85 c0                	test   eax,eax
c0015280:	75 32                	jne    c00152b4 <Semaphore::assertLocked(char const*)+0x70>
c0015282:	66 90                	xchg   ax,ax
c0015284:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015289:	83 e8 01             	sub    eax,0x1
c001528c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015291:	75 01                	jne    c0015294 <Semaphore::assertLocked(char const*)+0x50>
c0015293:	fb                   	sti    
c0015294:	83 c4 0c             	add    esp,0xc
c0015297:	c3                   	ret    
c0015298:	83 ec 0c             	sub    esp,0xc
c001529b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001529f:	52                   	push   edx
c00152a0:	e8 82 b6 ff ff       	call   c0010927 <KePanic(char const*)>
c00152a5:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00152aa:	83 c4 10             	add    esp,0x10
c00152ad:	83 e8 01             	sub    eax,0x1
c00152b0:	eb be                	jmp    c0015270 <Semaphore::assertLocked(char const*)+0x2c>
c00152b2:	66 90                	xchg   ax,ax
c00152b4:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c00152be:	e8 19 fe ff ff       	call   c00150dc <schedule()>
c00152c3:	eb bf                	jmp    c0015284 <Semaphore::assertLocked(char const*)+0x40>
c00152c5:	8d 76 00             	lea    esi,[esi+0x0]

c00152c8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00152c8:	83 ec 0c             	sub    esp,0xc
c00152cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152d0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00152d4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00152d7:	e8 00 fe ff ff       	call   c00150dc <schedule()>
c00152dc:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00152e1:	83 e8 01             	sub    eax,0x1
c00152e4:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00152e9:	75 01                	jne    c00152ec <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00152eb:	fb                   	sti    
c00152ec:	83 c4 0c             	add    esp,0xc
c00152ef:	c3                   	ret    

c00152f0 <blockTask(TaskState)>:
c00152f0:	83 ec 0c             	sub    esp,0xc
c00152f3:	fa                   	cli    
c00152f4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00152f9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00152fd:	83 c0 01             	add    eax,0x1
c0015300:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015305:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001530a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001530d:	e8 ca fd ff ff       	call   c00150dc <schedule()>
c0015312:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015317:	83 e8 01             	sub    eax,0x1
c001531a:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001531f:	75 03                	jne    c0015324 <blockTask(TaskState)+0x34>
c0015321:	fb                   	sti    
c0015322:	66 90                	xchg   ax,ax
c0015324:	83 c4 0c             	add    esp,0xc
c0015327:	c3                   	ret    

c0015328 <waitTask(int, int*, int)>:
c0015328:	83 ec 18             	sub    esp,0x18
c001532b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015330:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015334:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0015337:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001533b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015340:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0015343:	6a 07                	push   0x7
c0015345:	e8 a6 ff ff ff       	call   c00152f0 <blockTask(TaskState)>
c001534a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001534f:	83 c4 10             	add    esp,0x10
c0015352:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0015355:	85 d2                	test   edx,edx
c0015357:	74 0b                	je     c0015364 <waitTask(int, int*, int)+0x3c>
c0015359:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c001535c:	89 02                	mov    DWORD PTR [edx],eax
c001535e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015363:	90                   	nop
c0015364:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0015367:	83 c4 0c             	add    esp,0xc
c001536a:	c3                   	ret    
c001536b:	90                   	nop

c001536c <milliTenthSleepUntil(unsigned int)>:
c001536c:	83 ec 0c             	sub    esp,0xc
c001536f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015373:	39 05 8c 74 02 c0    	cmp    DWORD PTR ds:0xc002748c,eax
c0015379:	76 05                	jbe    c0015380 <milliTenthSleepUntil(unsigned int)+0x14>
c001537b:	90                   	nop
c001537c:	83 c4 0c             	add    esp,0xc
c001537f:	c3                   	ret    
c0015380:	fa                   	cli    
c0015381:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c0015387:	83 ec 08             	sub    esp,0x8
c001538a:	83 c2 01             	add    edx,0x1
c001538d:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c0015393:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015399:	83 c1 01             	add    ecx,0x1
c001539c:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c00153a2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00153a8:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00153ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153b0:	50                   	push   eax
c00153b1:	68 78 81 02 c0       	push   0xc0028178
c00153b6:	e8 65 99 00 00       	call   c001ed20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00153bb:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00153c2:	e8 29 ff ff ff       	call   c00152f0 <blockTask(TaskState)>
c00153c7:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00153cc:	83 c4 10             	add    esp,0x10
c00153cf:	83 e8 01             	sub    eax,0x1
c00153d2:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00153d7:	85 c0                	test   eax,eax
c00153d9:	75 09                	jne    c00153e4 <milliTenthSleepUntil(unsigned int)+0x78>
c00153db:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c00153e0:	85 c0                	test   eax,eax
c00153e2:	75 14                	jne    c00153f8 <milliTenthSleepUntil(unsigned int)+0x8c>
c00153e4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00153e9:	83 e8 01             	sub    eax,0x1
c00153ec:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00153f1:	75 89                	jne    c001537c <milliTenthSleepUntil(unsigned int)+0x10>
c00153f3:	fb                   	sti    
c00153f4:	83 c4 0c             	add    esp,0xc
c00153f7:	c3                   	ret    
c00153f8:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015402:	e8 d5 fc ff ff       	call   c00150dc <schedule()>
c0015407:	eb db                	jmp    c00153e4 <milliTenthSleepUntil(unsigned int)+0x78>
c0015409:	8d 76 00             	lea    esi,[esi+0x0]

c001540c <milliTenthSleep(unsigned int)>:
c001540c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015410:	a1 8c 74 02 c0       	mov    eax,ds:0xc002748c
c0015415:	01 c2                	add    edx,eax
c0015417:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001541b:	e9 4c ff ff ff       	jmp    c001536c <milliTenthSleepUntil(unsigned int)>

c0015420 <sleep(unsigned int)>:
c0015420:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015424:	8d 04 80             	lea    eax,[eax+eax*4]
c0015427:	8d 04 80             	lea    eax,[eax+eax*4]
c001542a:	8d 04 80             	lea    eax,[eax+eax*4]
c001542d:	8d 04 80             	lea    eax,[eax+eax*4]
c0015430:	c1 e0 04             	shl    eax,0x4
c0015433:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015437:	eb d3                	jmp    c001540c <milliTenthSleep(unsigned int)>
c0015439:	90                   	nop
c001543a:	66 90                	xchg   ax,ax

c001543c <Semaphore::acquire()>:
c001543c:	83 ec 0c             	sub    esp,0xc
c001543f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015443:	fa                   	cli    
c0015444:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015449:	83 c0 01             	add    eax,0x1
c001544c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015451:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015456:	8d 48 01             	lea    ecx,[eax+0x1]
c0015459:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c001545f:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015462:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0015464:	7d 2e                	jge    c0015494 <Semaphore::acquire()+0x58>
c0015466:	83 c1 01             	add    ecx,0x1
c0015469:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001546c:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015471:	85 c0                	test   eax,eax
c0015473:	75 0b                	jne    c0015480 <Semaphore::acquire()+0x44>
c0015475:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c001547a:	85 c0                	test   eax,eax
c001547c:	75 66                	jne    c00154e4 <Semaphore::acquire()+0xa8>
c001547e:	66 90                	xchg   ax,ax
c0015480:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015485:	83 e8 01             	sub    eax,0x1
c0015488:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001548d:	75 01                	jne    c0015490 <Semaphore::acquire()+0x54>
c001548f:	fb                   	sti    
c0015490:	83 c4 0c             	add    esp,0xc
c0015493:	c3                   	ret    
c0015494:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015499:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00154a0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00154a3:	85 c9                	test   ecx,ecx
c00154a5:	74 51                	je     c00154f8 <Semaphore::acquire()+0xbc>
c00154a7:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c00154aa:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00154b0:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c00154b3:	90                   	nop
c00154b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154b9:	83 ec 0c             	sub    esp,0xc
c00154bc:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00154bf:	68 f4 12 02 c0       	push   0xc00212f4
c00154c4:	e8 2e 55 ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c00154c9:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c00154d0:	e8 1b fe ff ff       	call   c00152f0 <blockTask(TaskState)>
c00154d5:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00154da:	83 c4 10             	add    esp,0x10
c00154dd:	83 e8 01             	sub    eax,0x1
c00154e0:	eb 8a                	jmp    c001546c <Semaphore::acquire()+0x30>
c00154e2:	66 90                	xchg   ax,ax
c00154e4:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c00154ee:	e8 e9 fb ff ff       	call   c00150dc <schedule()>
c00154f3:	eb 8b                	jmp    c0015480 <Semaphore::acquire()+0x44>
c00154f5:	8d 76 00             	lea    esi,[esi+0x0]
c00154f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154fd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015500:	eb b2                	jmp    c00154b4 <Semaphore::acquire()+0x78>
c0015502:	66 90                	xchg   ax,ax

c0015504 <taskReturned>:
c0015504:	83 ec 18             	sub    esp,0x18
c0015507:	68 14 13 02 c0       	push   0xc0021314
c001550c:	e8 16 b4 ff ff       	call   c0010927 <KePanic(char const*)>
c0015511:	83 c4 10             	add    esp,0x10
c0015514:	83 ec 0c             	sub    esp,0xc
c0015517:	6a 02                	push   0x2
c0015519:	e8 d2 fd ff ff       	call   c00152f0 <blockTask(TaskState)>
c001551e:	fa                   	cli    
c001551f:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015524:	83 c0 01             	add    eax,0x1
c0015527:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001552c:	e8 ab fb ff ff       	call   c00150dc <schedule()>
c0015531:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015536:	83 c4 10             	add    esp,0x10
c0015539:	83 e8 01             	sub    eax,0x1
c001553c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015541:	85 c0                	test   eax,eax
c0015543:	75 cf                	jne    c0015514 <taskReturned+0x10>
c0015545:	fb                   	sti    
c0015546:	eb cc                	jmp    c0015514 <taskReturned+0x10>

c0015548 <Thr::processFromPID(int)>:
c0015548:	57                   	push   edi
c0015549:	56                   	push   esi
c001554a:	53                   	push   ebx
c001554b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001554f:	fa                   	cli    
c0015550:	8b 0d 68 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028168
c0015556:	83 ec 0c             	sub    esp,0xc
c0015559:	83 c1 01             	add    ecx,0x1
c001555c:	68 84 81 02 c0       	push   0xc0028184
c0015561:	89 0d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ecx
c0015567:	e8 f0 96 00 00       	call   c001ec5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001556c:	83 c4 10             	add    esp,0x10
c001556f:	89 c7                	mov    edi,eax
c0015571:	eb 15                	jmp    c0015588 <Thr::processFromPID(int)+0x40>
c0015573:	90                   	nop
c0015574:	83 ec 0c             	sub    esp,0xc
c0015577:	68 84 81 02 c0       	push   0xc0028184
c001557c:	e8 db 96 00 00       	call   c001ec5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015581:	83 c4 10             	add    esp,0x10
c0015584:	39 f8                	cmp    eax,edi
c0015586:	74 50                	je     c00155d8 <Thr::processFromPID(int)+0x90>
c0015588:	83 ec 0c             	sub    esp,0xc
c001558b:	68 84 81 02 c0       	push   0xc0028184
c0015590:	e8 c7 96 00 00       	call   c001ec5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015595:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c001559c:	89 c3                	mov    ebx,eax
c001559e:	e8 c1 96 00 00       	call   c001ec64 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00155a3:	58                   	pop    eax
c00155a4:	5a                   	pop    edx
c00155a5:	53                   	push   ebx
c00155a6:	68 84 81 02 c0       	push   0xc0028184
c00155ab:	e8 70 97 00 00       	call   c001ed20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00155b0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00155b3:	83 c4 10             	add    esp,0x10
c00155b6:	39 30                	cmp    DWORD PTR [eax],esi
c00155b8:	75 ba                	jne    c0015574 <Thr::processFromPID(int)+0x2c>
c00155ba:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00155bf:	83 e8 01             	sub    eax,0x1
c00155c2:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00155c7:	74 0b                	je     c00155d4 <Thr::processFromPID(int)+0x8c>
c00155c9:	8d 76 00             	lea    esi,[esi+0x0]
c00155cc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00155cf:	5b                   	pop    ebx
c00155d0:	5e                   	pop    esi
c00155d1:	5f                   	pop    edi
c00155d2:	c3                   	ret    
c00155d3:	90                   	nop
c00155d4:	fb                   	sti    
c00155d5:	eb f5                	jmp    c00155cc <Thr::processFromPID(int)+0x84>
c00155d7:	90                   	nop
c00155d8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00155dd:	83 e8 01             	sub    eax,0x1
c00155e0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00155e5:	75 05                	jne    c00155ec <Thr::processFromPID(int)+0xa4>
c00155e7:	fb                   	sti    
c00155e8:	5b                   	pop    ebx
c00155e9:	5e                   	pop    esi
c00155ea:	5f                   	pop    edi
c00155eb:	c3                   	ret    
c00155ec:	5b                   	pop    ebx
c00155ed:	31 c0                	xor    eax,eax
c00155ef:	5e                   	pop    esi
c00155f0:	5f                   	pop    edi
c00155f1:	c3                   	ret    
c00155f2:	66 90                	xchg   ax,ax

c00155f4 <unblockTask(ThreadControlBlock*)>:
c00155f4:	53                   	push   ebx
c00155f5:	83 ec 08             	sub    esp,0x8
c00155f8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00155fc:	fa                   	cli    
c00155fd:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015602:	83 c0 01             	add    eax,0x1
c0015605:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001560a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001560d:	85 c0                	test   eax,eax
c001560f:	74 67                	je     c0015678 <unblockTask(ThreadControlBlock*)+0x84>
c0015611:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015614:	83 f8 01             	cmp    eax,0x1
c0015617:	74 37                	je     c0015650 <unblockTask(ThreadControlBlock*)+0x5c>
c0015619:	83 ec 0c             	sub    esp,0xc
c001561c:	68 84 81 02 c0       	push   0xc0028184
c0015621:	e8 36 96 00 00       	call   c001ec5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015626:	83 c4 10             	add    esp,0x10
c0015629:	85 c0                	test   eax,eax
c001562b:	75 1b                	jne    c0015648 <unblockTask(ThreadControlBlock*)+0x54>
c001562d:	eb 5d                	jmp    c001568c <unblockTask(ThreadControlBlock*)+0x98>
c001562f:	90                   	nop
c0015630:	83 ec 08             	sub    esp,0x8
c0015633:	50                   	push   eax
c0015634:	68 84 81 02 c0       	push   0xc0028184
c0015639:	e8 3e 99 00 00       	call   c001ef7c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001563e:	83 c4 10             	add    esp,0x10
c0015641:	85 c0                	test   eax,eax
c0015643:	74 47                	je     c001568c <unblockTask(ThreadControlBlock*)+0x98>
c0015645:	8d 76 00             	lea    esi,[esi+0x0]
c0015648:	39 c3                	cmp    ebx,eax
c001564a:	75 e4                	jne    c0015630 <unblockTask(ThreadControlBlock*)+0x3c>
c001564c:	eb 12                	jmp    c0015660 <unblockTask(ThreadControlBlock*)+0x6c>
c001564e:	66 90                	xchg   ax,ax
c0015650:	83 ec 0c             	sub    esp,0xc
c0015653:	68 93 12 02 c0       	push   0xc0021293
c0015658:	e8 9a 53 ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c001565d:	83 c4 10             	add    esp,0x10
c0015660:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015665:	83 e8 01             	sub    eax,0x1
c0015668:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001566d:	75 01                	jne    c0015670 <unblockTask(ThreadControlBlock*)+0x7c>
c001566f:	fb                   	sti    
c0015670:	83 c4 08             	add    esp,0x8
c0015673:	5b                   	pop    ebx
c0015674:	c3                   	ret    
c0015675:	8d 76 00             	lea    esi,[esi+0x0]
c0015678:	83 ec 0c             	sub    esp,0xc
c001567b:	68 7c 12 02 c0       	push   0xc002127c
c0015680:	e8 72 53 ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c0015685:	83 c4 10             	add    esp,0x10
c0015688:	eb d6                	jmp    c0015660 <unblockTask(ThreadControlBlock*)+0x6c>
c001568a:	66 90                	xchg   ax,ax
c001568c:	83 ec 08             	sub    esp,0x8
c001568f:	53                   	push   ebx
c0015690:	68 84 81 02 c0       	push   0xc0028184
c0015695:	e8 86 96 00 00       	call   c001ed20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001569a:	83 c4 10             	add    esp,0x10
c001569d:	eb c1                	jmp    c0015660 <unblockTask(ThreadControlBlock*)+0x6c>
c001569f:	90                   	nop

c00156a0 <cleanupTerminatedTask(ThreadControlBlock*)>:
c00156a0:	55                   	push   ebp
c00156a1:	57                   	push   edi
c00156a2:	56                   	push   esi
c00156a3:	53                   	push   ebx
c00156a4:	83 ec 1c             	sub    esp,0x1c
c00156a7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00156ab:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00156ae:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c00156b4:	85 ed                	test   ebp,ebp
c00156b6:	7e 28                	jle    c00156e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c00156b8:	31 f6                	xor    esi,esi
c00156ba:	66 90                	xchg   ax,ax
c00156bc:	83 ec 0c             	sub    esp,0xc
c00156bf:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c00156c6:	83 c6 01             	add    esi,0x1
c00156c9:	57                   	push   edi
c00156ca:	e8 ef 23 ff ff       	call   c0007abe <free>
c00156cf:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00156d2:	83 c4 10             	add    esp,0x10
c00156d5:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00156db:	7f df                	jg     c00156bc <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00156dd:	8d 76 00             	lea    esi,[esi+0x0]
c00156e0:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00156ea:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00156ef:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00156f2:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00156f5:	d3 c0                	rol    eax,cl
c00156f7:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c00156fe:	21 c8                	and    eax,ecx
c0015700:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c0015707:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001570a:	89 f7                	mov    edi,esi
c001570c:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0015714:	0f 85 72 01 00 00    	jne    c001588c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001571a:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0015720:	85 ed                	test   ebp,ebp
c0015722:	74 1c                	je     c0015740 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0015724:	83 ec 0c             	sub    esp,0xc
c0015727:	55                   	push   ebp
c0015728:	e8 0b af ff ff       	call   c0010638 <EnvVarContainer::~EnvVarContainer()>
c001572d:	59                   	pop    ecx
c001572e:	5e                   	pop    esi
c001572f:	6a 0c                	push   0xc
c0015731:	55                   	push   ebp
c0015732:	e8 93 51 ff ff       	call   c000a8ca <operator delete(void*, unsigned long)>
c0015737:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001573a:	83 c4 10             	add    esp,0x10
c001573d:	89 f7                	mov    edi,esi
c001573f:	90                   	nop
c0015740:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015746:	85 c0                	test   eax,eax
c0015748:	0f 84 b2 00 00 00    	je     c0015800 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c001574e:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0015751:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0015755:	31 c9                	xor    ecx,ecx
c0015757:	eb 17                	jmp    c0015770 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0015759:	8d 76 00             	lea    esi,[esi+0x0]
c001575c:	83 c1 01             	add    ecx,0x1
c001575f:	83 f9 10             	cmp    ecx,0x10
c0015762:	0f 84 98 00 00 00    	je     c0015800 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0015768:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001576e:	66 90                	xchg   ax,ax
c0015770:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0015777:	d3 fa                	sar    edx,cl
c0015779:	80 e2 01             	and    dl,0x1
c001577c:	74 de                	je     c001575c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001577e:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0015781:	01 d2                	add    edx,edx
c0015783:	01 ca                	add    edx,ecx
c0015785:	8d 14 92             	lea    edx,[edx+edx*4]
c0015788:	01 d0                	add    eax,edx
c001578a:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0015790:	83 fd 07             	cmp    ebp,0x7
c0015793:	75 c7                	jne    c001575c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015795:	05 40 02 00 00       	add    eax,0x240
c001579a:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c001579d:	83 fd ff             	cmp    ebp,0xffffffff
c00157a0:	0f 8c ee 00 00 00    	jl     c0015894 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c00157a6:	0f 84 ac 01 00 00    	je     c0015958 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c00157ac:	85 ed                	test   ebp,ebp
c00157ae:	0f 84 90 01 00 00    	je     c0015944 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c00157b4:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00157b6:	75 a4                	jne    c001575c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00157b8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00157be:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00157c2:	01 d0                	add    eax,edx
c00157c4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00157c8:	83 ec 0c             	sub    esp,0xc
c00157cb:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00157d1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00157d4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00157da:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00157e1:	50                   	push   eax
c00157e2:	e8 0d fe ff ff       	call   c00155f4 <unblockTask(ThreadControlBlock*)>
c00157e7:	83 c4 10             	add    esp,0x10
c00157ea:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00157ed:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00157f1:	89 f7                	mov    edi,esi
c00157f3:	83 c1 01             	add    ecx,0x1
c00157f6:	83 f9 10             	cmp    ecx,0x10
c00157f9:	0f 85 69 ff ff ff    	jne    c0015768 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c00157ff:	90                   	nop
c0015800:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0015806:	85 c0                	test   eax,eax
c0015808:	74 62                	je     c001586c <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c001580a:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0015810:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0015816:	74 54                	je     c001586c <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0015818:	83 ec 0c             	sub    esp,0xc
c001581b:	68 84 81 02 c0       	push   0xc0028184
c0015820:	e8 37 94 00 00       	call   c001ec5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015825:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c001582c:	89 c7                	mov    edi,eax
c001582e:	e8 0d 94 00 00       	call   c001ec40 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015833:	83 c4 10             	add    esp,0x10
c0015836:	84 c0                	test   al,al
c0015838:	0f 84 ce 00 00 00    	je     c001590c <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c001583e:	66 90                	xchg   ax,ax
c0015840:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015843:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015849:	85 d2                	test   edx,edx
c001584b:	74 0f                	je     c001585c <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c001584d:	83 ec 0c             	sub    esp,0xc
c0015850:	8b 02                	mov    eax,DWORD PTR [edx]
c0015852:	52                   	push   edx
c0015853:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015856:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015859:	83 c4 10             	add    esp,0x10
c001585c:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0015866:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0015869:	8d 76 00             	lea    esi,[esi+0x0]
c001586c:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0015872:	85 db                	test   ebx,ebx
c0015874:	74 16                	je     c001588c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0015876:	83 ec 0c             	sub    esp,0xc
c0015879:	53                   	push   ebx
c001587a:	e8 17 43 ff ff       	call   c0009b96 <VAS::~VAS()>
c001587f:	58                   	pop    eax
c0015880:	5a                   	pop    edx
c0015881:	6a 14                	push   0x14
c0015883:	53                   	push   ebx
c0015884:	e8 41 50 ff ff       	call   c000a8ca <operator delete(void*, unsigned long)>
c0015889:	83 c4 10             	add    esp,0x10
c001588c:	83 c4 1c             	add    esp,0x1c
c001588f:	5b                   	pop    ebx
c0015890:	5e                   	pop    esi
c0015891:	5f                   	pop    edi
c0015892:	5d                   	pop    ebp
c0015893:	c3                   	ret    
c0015894:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015898:	83 ec 0c             	sub    esp,0xc
c001589b:	68 48 13 02 c0       	push   0xc0021348
c00158a0:	e8 82 b0 ff ff       	call   c0010927 <KePanic(char const*)>
c00158a5:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00158a8:	83 c4 10             	add    esp,0x10
c00158ab:	89 f7                	mov    edi,esi
c00158ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00158b1:	e9 a6 fe ff ff       	jmp    c001575c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00158b6:	66 90                	xchg   ax,ax
c00158b8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00158be:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00158c4:	75 1e                	jne    c00158e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00158c6:	83 ec 0c             	sub    esp,0xc
c00158c9:	68 b0 13 02 c0       	push   0xc00213b0
c00158ce:	e8 24 51 ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c00158d3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00158da:	e8 11 fa ff ff       	call   c00152f0 <blockTask(TaskState)>
c00158df:	83 c4 10             	add    esp,0x10
c00158e2:	66 90                	xchg   ax,ax
c00158e4:	83 ec 08             	sub    esp,0x8
c00158e7:	56                   	push   esi
c00158e8:	68 84 81 02 c0       	push   0xc0028184
c00158ed:	e8 2e 94 00 00       	call   c001ed20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00158f2:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00158f9:	e8 5e 93 00 00       	call   c001ec5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00158fe:	83 c4 10             	add    esp,0x10
c0015901:	39 f8                	cmp    eax,edi
c0015903:	0f 84 37 ff ff ff    	je     c0015840 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0015909:	8d 76 00             	lea    esi,[esi+0x0]
c001590c:	83 ec 0c             	sub    esp,0xc
c001590f:	68 84 81 02 c0       	push   0xc0028184
c0015914:	e8 43 93 00 00       	call   c001ec5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015919:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015920:	89 c6                	mov    esi,eax
c0015922:	e8 3d 93 00 00       	call   c001ec64 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015927:	83 c4 10             	add    esp,0x10
c001592a:	39 f3                	cmp    ebx,esi
c001592c:	74 b6                	je     c00158e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001592e:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0015931:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015934:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c001593a:	75 a8                	jne    c00158e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001593c:	e9 77 ff ff ff       	jmp    c00158b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0015941:	8d 76 00             	lea    esi,[esi+0x0]
c0015944:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015948:	83 ec 0c             	sub    esp,0xc
c001594b:	68 7c 13 02 c0       	push   0xc002137c
c0015950:	e9 4b ff ff ff       	jmp    c00158a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0015955:	8d 76 00             	lea    esi,[esi+0x0]
c0015958:	8b 36                	mov    esi,DWORD PTR [esi]
c001595a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001595e:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0015961:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015964:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c001596a:	01 d7                	add    edi,edx
c001596c:	89 f8                	mov    eax,edi
c001596e:	e9 51 fe ff ff       	jmp    c00157c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0015973:	90                   	nop

c0015974 <cleanerTaskFunction(void*)>:
c0015974:	53                   	push   ebx
c0015975:	83 ec 08             	sub    esp,0x8
c0015978:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001597d:	83 e8 01             	sub    eax,0x1
c0015980:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015985:	75 01                	jne    c0015988 <cleanerTaskFunction(void*)+0x14>
c0015987:	fb                   	sti    
c0015988:	fa                   	cli    
c0015989:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001598e:	80 3d 4c 81 02 c0 00 	cmp    BYTE PTR ds:0xc002814c,0x0
c0015995:	8d 50 01             	lea    edx,[eax+0x1]
c0015998:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c001599e:	0f 84 c4 00 00 00    	je     c0015a68 <cleanerTaskFunction(void*)+0xf4>
c00159a4:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00159a9:	85 c0                	test   eax,eax
c00159ab:	75 03                	jne    c00159b0 <cleanerTaskFunction(void*)+0x3c>
c00159ad:	fb                   	sti    
c00159ae:	66 90                	xchg   ax,ax
c00159b0:	c6 05 4c 81 02 c0 00 	mov    BYTE PTR ds:0xc002814c,0x0
c00159b7:	fa                   	cli    
c00159b8:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c00159be:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c00159c4:	83 c2 01             	add    edx,0x1
c00159c7:	83 c1 01             	add    ecx,0x1
c00159ca:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c00159d0:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c00159d6:	fa                   	cli    
c00159d7:	8b 1d 68 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028168
c00159dd:	83 c3 01             	add    ebx,0x1
c00159e0:	89 1d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ebx
c00159e6:	eb 28                	jmp    c0015a10 <cleanerTaskFunction(void*)+0x9c>
c00159e8:	83 ec 0c             	sub    esp,0xc
c00159eb:	68 6c 81 02 c0       	push   0xc002816c
c00159f0:	e8 67 92 00 00       	call   c001ec5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00159f5:	c7 04 24 6c 81 02 c0 	mov    DWORD PTR [esp],0xc002816c
c00159fc:	89 c3                	mov    ebx,eax
c00159fe:	e8 61 92 00 00       	call   c001ec64 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015a03:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015a06:	e8 95 fc ff ff       	call   c00156a0 <cleanupTerminatedTask(ThreadControlBlock*)>
c0015a0b:	83 c4 10             	add    esp,0x10
c0015a0e:	66 90                	xchg   ax,ax
c0015a10:	83 ec 0c             	sub    esp,0xc
c0015a13:	68 6c 81 02 c0       	push   0xc002816c
c0015a18:	e8 23 92 00 00       	call   c001ec40 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015a1d:	83 c4 10             	add    esp,0x10
c0015a20:	84 c0                	test   al,al
c0015a22:	74 c4                	je     c00159e8 <cleanerTaskFunction(void*)+0x74>
c0015a24:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015a29:	83 e8 01             	sub    eax,0x1
c0015a2c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015a31:	75 01                	jne    c0015a34 <cleanerTaskFunction(void*)+0xc0>
c0015a33:	fb                   	sti    
c0015a34:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015a39:	83 e8 01             	sub    eax,0x1
c0015a3c:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015a41:	0f 85 31 ff ff ff    	jne    c0015978 <cleanerTaskFunction(void*)+0x4>
c0015a47:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015a4c:	85 c0                	test   eax,eax
c0015a4e:	0f 84 24 ff ff ff    	je     c0015978 <cleanerTaskFunction(void*)+0x4>
c0015a54:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015a5e:	e8 79 f6 ff ff       	call   c00150dc <schedule()>
c0015a63:	e9 10 ff ff ff       	jmp    c0015978 <cleanerTaskFunction(void*)+0x4>
c0015a68:	83 ec 0c             	sub    esp,0xc
c0015a6b:	6a 02                	push   0x2
c0015a6d:	e8 56 f8 ff ff       	call   c00152c8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015a72:	83 c4 10             	add    esp,0x10
c0015a75:	e9 36 ff ff ff       	jmp    c00159b0 <cleanerTaskFunction(void*)+0x3c>
c0015a7a:	66 90                	xchg   ax,ax

c0015a7c <terminateTask(int)>:
c0015a7c:	83 ec 14             	sub    esp,0x14
c0015a7f:	fa                   	cli    
c0015a80:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c0015a86:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c0015a8c:	83 c2 01             	add    edx,0x1
c0015a8f:	83 c1 01             	add    ecx,0x1
c0015a92:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015a98:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015a9e:	fa                   	cli    
c0015a9f:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015aa4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015aa8:	83 c0 01             	add    eax,0x1
c0015aab:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015ab0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ab5:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0015ab8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015abd:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015ac0:	50                   	push   eax
c0015ac1:	68 6c 81 02 c0       	push   0xc002816c
c0015ac6:	e8 55 92 00 00       	call   c001ed20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015acb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ad0:	83 c4 10             	add    esp,0x10
c0015ad3:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0015ada:	a1 48 81 02 c0       	mov    eax,ds:0xc0028148
c0015adf:	85 c0                	test   eax,eax
c0015ae1:	74 65                	je     c0015b48 <terminateTask(int)+0xcc>
c0015ae3:	83 ec 0c             	sub    esp,0xc
c0015ae6:	c6 05 4c 81 02 c0 01 	mov    BYTE PTR ds:0xc002814c,0x1
c0015aed:	50                   	push   eax
c0015aee:	e8 01 fb ff ff       	call   c00155f4 <unblockTask(ThreadControlBlock*)>
c0015af3:	83 c4 10             	add    esp,0x10
c0015af6:	66 90                	xchg   ax,ax
c0015af8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015afd:	83 e8 01             	sub    eax,0x1
c0015b00:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015b05:	75 01                	jne    c0015b08 <terminateTask(int)+0x8c>
c0015b07:	fb                   	sti    
c0015b08:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015b0d:	83 e8 01             	sub    eax,0x1
c0015b10:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015b15:	75 09                	jne    c0015b20 <terminateTask(int)+0xa4>
c0015b17:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c0015b1e:	75 3c                	jne    c0015b5c <terminateTask(int)+0xe0>
c0015b20:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015b25:	83 e8 01             	sub    eax,0x1
c0015b28:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015b2d:	75 01                	jne    c0015b30 <terminateTask(int)+0xb4>
c0015b2f:	fb                   	sti    
c0015b30:	fa                   	cli    
c0015b31:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015b36:	83 c0 01             	add    eax,0x1
c0015b39:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015b3e:	66 90                	xchg   ax,ax
c0015b40:	e8 97 f5 ff ff       	call   c00150dc <schedule()>
c0015b45:	eb d9                	jmp    c0015b20 <terminateTask(int)+0xa4>
c0015b47:	90                   	nop
c0015b48:	83 ec 0c             	sub    esp,0xc
c0015b4b:	68 aa 12 02 c0       	push   0xc00212aa
c0015b50:	e8 a2 4e ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c0015b55:	83 c4 10             	add    esp,0x10
c0015b58:	eb 9e                	jmp    c0015af8 <terminateTask(int)+0x7c>
c0015b5a:	66 90                	xchg   ax,ax
c0015b5c:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015b66:	eb d8                	jmp    c0015b40 <terminateTask(int)+0xc4>

c0015b68 <Thr::terminateFromIRQ(int)>:
c0015b68:	83 ec 18             	sub    esp,0x18
c0015b6b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015b6f:	50                   	push   eax
c0015b70:	e8 07 ff ff ff       	call   c0015a7c <terminateTask(int)>
c0015b75:	90                   	nop
c0015b76:	66 90                	xchg   ax,ax

c0015b78 <Semaphore::release()>:
c0015b78:	83 ec 0c             	sub    esp,0xc
c0015b7b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015b7f:	fa                   	cli    
c0015b80:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015b85:	83 c0 01             	add    eax,0x1
c0015b88:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015b8d:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015b92:	8d 48 01             	lea    ecx,[eax+0x1]
c0015b95:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015b9b:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015b9e:	85 c9                	test   ecx,ecx
c0015ba0:	74 42                	je     c0015be4 <Semaphore::release()+0x6c>
c0015ba2:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0015ba5:	83 ec 0c             	sub    esp,0xc
c0015ba8:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015bab:	51                   	push   ecx
c0015bac:	e8 43 fa ff ff       	call   c00155f4 <unblockTask(ThreadControlBlock*)>
c0015bb1:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015bb6:	83 c4 10             	add    esp,0x10
c0015bb9:	83 e8 01             	sub    eax,0x1
c0015bbc:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015bc1:	85 c0                	test   eax,eax
c0015bc3:	75 0b                	jne    c0015bd0 <Semaphore::release()+0x58>
c0015bc5:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015bca:	85 c0                	test   eax,eax
c0015bcc:	75 22                	jne    c0015bf0 <Semaphore::release()+0x78>
c0015bce:	66 90                	xchg   ax,ax
c0015bd0:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015bd5:	83 e8 01             	sub    eax,0x1
c0015bd8:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015bdd:	75 01                	jne    c0015be0 <Semaphore::release()+0x68>
c0015bdf:	fb                   	sti    
c0015be0:	83 c4 0c             	add    esp,0xc
c0015be3:	c3                   	ret    
c0015be4:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015be7:	83 e9 01             	sub    ecx,0x1
c0015bea:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015bed:	eb cd                	jmp    c0015bbc <Semaphore::release()+0x44>
c0015bef:	90                   	nop
c0015bf0:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015bfa:	e8 dd f4 ff ff       	call   c00150dc <schedule()>
c0015bff:	eb cf                	jmp    c0015bd0 <Semaphore::release()+0x58>
c0015c01:	8d 76 00             	lea    esi,[esi+0x0]

c0015c04 <__static_initialization_and_destruction_0(int, int)>:
c0015c04:	83 ec 0c             	sub    esp,0xc
c0015c07:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0015c0c:	0f 85 8e 00 00 00    	jne    c0015ca0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015c12:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0015c1a:	0f 85 80 00 00 00    	jne    c0015ca0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015c20:	83 ec 0c             	sub    esp,0xc
c0015c23:	68 84 81 02 c0       	push   0xc0028184
c0015c28:	e8 a7 93 00 00       	call   c001efd4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015c2d:	83 c4 10             	add    esp,0x10
c0015c30:	83 ec 04             	sub    esp,0x4
c0015c33:	68 44 1f 02 c0       	push   0xc0021f44
c0015c38:	68 84 81 02 c0       	push   0xc0028184
c0015c3d:	68 84 ef 01 c0       	push   0xc001ef84
c0015c42:	e8 33 4c ff ff       	call   c000a87a <__cxa_atexit>
c0015c47:	83 c4 10             	add    esp,0x10
c0015c4a:	83 ec 0c             	sub    esp,0xc
c0015c4d:	68 78 81 02 c0       	push   0xc0028178
c0015c52:	e8 7d 93 00 00       	call   c001efd4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015c57:	83 c4 10             	add    esp,0x10
c0015c5a:	83 ec 04             	sub    esp,0x4
c0015c5d:	68 44 1f 02 c0       	push   0xc0021f44
c0015c62:	68 78 81 02 c0       	push   0xc0028178
c0015c67:	68 84 ef 01 c0       	push   0xc001ef84
c0015c6c:	e8 09 4c ff ff       	call   c000a87a <__cxa_atexit>
c0015c71:	83 c4 10             	add    esp,0x10
c0015c74:	83 ec 0c             	sub    esp,0xc
c0015c77:	68 6c 81 02 c0       	push   0xc002816c
c0015c7c:	e8 53 93 00 00       	call   c001efd4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015c81:	83 c4 10             	add    esp,0x10
c0015c84:	83 ec 04             	sub    esp,0x4
c0015c87:	68 44 1f 02 c0       	push   0xc0021f44
c0015c8c:	68 6c 81 02 c0       	push   0xc002816c
c0015c91:	68 84 ef 01 c0       	push   0xc001ef84
c0015c96:	e8 df 4b ff ff       	call   c000a87a <__cxa_atexit>
c0015c9b:	83 c4 10             	add    esp,0x10
c0015c9e:	66 90                	xchg   ax,ax
c0015ca0:	90                   	nop
c0015ca1:	83 c4 0c             	add    esp,0xc
c0015ca4:	c3                   	ret    
c0015ca5:	8d 76 00             	lea    esi,[esi+0x0]

c0015ca8 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0015ca8:	83 ec 0c             	sub    esp,0xc
c0015cab:	83 ec 08             	sub    esp,0x8
c0015cae:	68 ff ff 00 00       	push   0xffff
c0015cb3:	6a 01                	push   0x1
c0015cb5:	e8 4a ff ff ff       	call   c0015c04 <__static_initialization_and_destruction_0(int, int)>
c0015cba:	83 c4 10             	add    esp,0x10
c0015cbd:	83 c4 0c             	add    esp,0xc
c0015cc0:	c3                   	ret    

c0015cc1 <Vm::inbv(unsigned short)>:
c0015cc1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015cc5:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015cca:	75 06                	jne    c0015cd2 <Vm::inbv(unsigned short)+0x11>
c0015ccc:	a0 cc 81 02 c0       	mov    al,ds:0xc00281cc
c0015cd1:	c3                   	ret    
c0015cd2:	ec                   	in     al,dx
c0015cd3:	c3                   	ret    

c0015cd4 <Vm::outbv(unsigned short, unsigned char)>:
c0015cd4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015cd8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015cdc:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015ce1:	75 25                	jne    c0015d08 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0015ce3:	8b 0d cc 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281cc
c0015ce9:	8d 51 01             	lea    edx,[ecx+0x1]
c0015cec:	88 81 e0 81 02 c0    	mov    BYTE PTR [ecx-0x3ffd7e20],al
c0015cf2:	89 15 cc 81 02 c0    	mov    DWORD PTR ds:0xc00281cc,edx
c0015cf8:	83 fa 20             	cmp    edx,0x20
c0015cfb:	75 0c                	jne    c0015d09 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0015cfd:	c7 05 cc 81 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x1f
c0015d07:	c3                   	ret    
c0015d08:	ee                   	out    dx,al
c0015d09:	c3                   	ret    

c0015d0a <Vm::realToLinear(unsigned short, unsigned short)>:
c0015d0a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015d0f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015d14:	c1 e0 04             	shl    eax,0x4
c0015d17:	01 d0                	add    eax,edx
c0015d19:	c3                   	ret    

c0015d1a <Vm::getSegment(unsigned int)>:
c0015d1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d1e:	c1 e8 10             	shr    eax,0x10
c0015d21:	c3                   	ret    

c0015d22 <Vm::getOffset(unsigned int)>:
c0015d22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d26:	c3                   	ret    

c0015d27 <Vm::mainloop2()>:
c0015d27:	83 ec 18             	sub    esp,0x18
c0015d2a:	fa                   	cli    
c0015d2b:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015d31:	6a 02                	push   0x2
c0015d33:	c6 05 c5 81 02 c0 01 	mov    BYTE PTR ds:0xc00281c5,0x1
c0015d3a:	e8 89 f5 ff ff       	call   c00152c8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015d3f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d44:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0015d48:	52                   	push   edx
c0015d49:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0015d4d:	52                   	push   edx
c0015d4e:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0015d52:	52                   	push   edx
c0015d53:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0015d57:	50                   	push   eax
c0015d58:	e8 b2 a4 fe ff       	call   c000020f <goToVM86>
c0015d5d:	83 c4 2c             	add    esp,0x2c
c0015d60:	c3                   	ret    

c0015d61 <Vm::mainVm8086Loop(void*)>:
c0015d61:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015d66:	48                   	dec    eax
c0015d67:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015d6c:	75 01                	jne    c0015d6f <Vm::mainVm8086Loop(void*)+0xe>
c0015d6e:	fb                   	sti    
c0015d6f:	eb b6                	jmp    c0015d27 <Vm::mainloop2()>

c0015d71 <Vm::mainloop3(unsigned long)>:
c0015d71:	83 ec 18             	sub    esp,0x18
c0015d74:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015d78:	fa                   	cli    
c0015d79:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015d7f:	6a 02                	push   0x2
c0015d81:	c6 05 c4 81 02 c0 01 	mov    BYTE PTR ds:0xc00281c4,0x1
c0015d88:	a3 c0 81 02 c0       	mov    ds:0xc00281c0,eax
c0015d8d:	e8 36 f5 ff ff       	call   c00152c8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015d92:	83 c4 1c             	add    esp,0x1c
c0015d95:	eb 90                	jmp    c0015d27 <Vm::mainloop2()>

c0015d97 <Vm::initialise8086()>:
c0015d97:	83 ec 0c             	sub    esp,0xc
c0015d9a:	68 80 00 00 00       	push   0x80
c0015d9f:	6a 00                	push   0x0
c0015da1:	68 61 5d 01 c0       	push   0xc0015d61
c0015da6:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0015dac:	e8 db f0 ff ff       	call   c0014e8c <Process::createThread(void (*)(void*), void*, int)>
c0015db1:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0015db8:	a3 c8 81 02 c0       	mov    ds:0xc00281c8,eax
c0015dbd:	68 00 01 00 00       	push   0x100
c0015dc2:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0015dc7:	6a 00                	push   0x0
c0015dc9:	6a 00                	push   0x0
c0015dcb:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015dd1:	e8 42 42 ff ff       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0015dd6:	83 c4 2c             	add    esp,0x2c
c0015dd9:	c3                   	ret    

c0015dda <Vm::finish8086()>:
c0015dda:	53                   	push   ebx
c0015ddb:	83 ec 08             	sub    esp,0x8
c0015dde:	fa                   	cli    
c0015ddf:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015de5:	80 3d c4 81 02 c0 00 	cmp    BYTE PTR ds:0xc00281c4,0x0
c0015dec:	75 15                	jne    c0015e03 <Vm::finish8086()+0x29>
c0015dee:	e8 e9 f2 ff ff       	call   c00150dc <schedule()>
c0015df3:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015df8:	48                   	dec    eax
c0015df9:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015dfe:	75 de                	jne    c0015dde <Vm::finish8086()+0x4>
c0015e00:	fb                   	sti    
c0015e01:	eb db                	jmp    c0015dde <Vm::finish8086()+0x4>
c0015e03:	83 ec 0c             	sub    esp,0xc
c0015e06:	8b 1d c0 81 02 c0    	mov    ebx,DWORD PTR ds:0xc00281c0
c0015e0c:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015e12:	c6 05 c4 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c4,0x0
c0015e19:	e8 d6 f7 ff ff       	call   c00155f4 <unblockTask(ThreadControlBlock*)>
c0015e1e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015e23:	83 c4 10             	add    esp,0x10
c0015e26:	8d 50 ff             	lea    edx,[eax-0x1]
c0015e29:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015e2f:	85 d2                	test   edx,edx
c0015e31:	75 01                	jne    c0015e34 <Vm::finish8086()+0x5a>
c0015e33:	fb                   	sti    
c0015e34:	89 d8                	mov    eax,ebx
c0015e36:	83 c4 08             	add    esp,0x8
c0015e39:	5b                   	pop    ebx
c0015e3a:	c3                   	ret    

c0015e3b <Vm::getOutput8086(unsigned char*)>:
c0015e3b:	57                   	push   edi
c0015e3c:	8b 0d cc 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281cc
c0015e42:	56                   	push   esi
c0015e43:	be e0 81 02 c0       	mov    esi,0xc00281e0
c0015e48:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0015e4c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015e4e:	a1 cc 81 02 c0       	mov    eax,ds:0xc00281cc
c0015e53:	5e                   	pop    esi
c0015e54:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015e5e:	5f                   	pop    edi
c0015e5f:	c3                   	ret    

c0015e60 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015e60:	55                   	push   ebp
c0015e61:	57                   	push   edi
c0015e62:	56                   	push   esi
c0015e63:	53                   	push   ebx
c0015e64:	83 ec 0c             	sub    esp,0xc
c0015e67:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0015e6b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0015e6f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0015e73:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0015e77:	fa                   	cli    
c0015e78:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015e7e:	80 3d c5 81 02 c0 00 	cmp    BYTE PTR ds:0xc00281c5,0x0
c0015e85:	75 15                	jne    c0015e9c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0015e87:	e8 50 f2 ff ff       	call   c00150dc <schedule()>
c0015e8c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015e91:	48                   	dec    eax
c0015e92:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015e97:	75 de                	jne    c0015e77 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015e99:	fb                   	sti    
c0015e9a:	eb db                	jmp    c0015e77 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015e9c:	a1 c8 81 02 c0       	mov    eax,ds:0xc00281c8
c0015ea1:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015eab:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0015eaf:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0015eb3:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0015eb7:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0015ebb:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0015ebf:	0f b7 ff             	movzx  edi,di
c0015ec2:	0f b7 f6             	movzx  esi,si
c0015ec5:	50                   	push   eax
c0015ec6:	6a 20                	push   0x20
c0015ec8:	6a 00                	push   0x0
c0015eca:	68 e0 81 02 c0       	push   0xc00281e0
c0015ecf:	e8 1c a6 fe ff       	call   c00004f0 <memset>
c0015ed4:	5a                   	pop    edx
c0015ed5:	59                   	pop    ecx
c0015ed6:	57                   	push   edi
c0015ed7:	56                   	push   esi
c0015ed8:	e8 2d fe ff ff       	call   c0015d0a <Vm::realToLinear(unsigned short, unsigned short)>
c0015edd:	83 c4 10             	add    esp,0x10
c0015ee0:	89 c7                	mov    edi,eax
c0015ee2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0015ee6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0015eea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015eec:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015ef1:	c6 05 c5 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c5,0x0
c0015ef8:	48                   	dec    eax
c0015ef9:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015efe:	75 01                	jne    c0015f01 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0015f00:	fb                   	sti    
c0015f01:	83 ec 0c             	sub    esp,0xc
c0015f04:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015f0a:	e8 e5 f6 ff ff       	call   c00155f4 <unblockTask(ThreadControlBlock*)>
c0015f0f:	83 c4 1c             	add    esp,0x1c
c0015f12:	b0 01                	mov    al,0x1
c0015f14:	5b                   	pop    ebx
c0015f15:	5e                   	pop    esi
c0015f16:	5f                   	pop    edi
c0015f17:	5d                   	pop    ebp
c0015f18:	c3                   	ret    

c0015f19 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015f19:	55                   	push   ebp
c0015f1a:	57                   	push   edi
c0015f1b:	56                   	push   esi
c0015f1c:	53                   	push   ebx
c0015f1d:	83 ec 2c             	sub    esp,0x2c
c0015f20:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0015f24:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0015f28:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0015f2c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0015f30:	fa                   	cli    
c0015f31:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015f37:	0f b6 35 c5 81 02 c0 	movzx  esi,BYTE PTR ds:0xc00281c5
c0015f3e:	89 f0                	mov    eax,esi
c0015f40:	84 c0                	test   al,al
c0015f42:	75 1d                	jne    c0015f61 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0015f44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015f48:	e8 8f f1 ff ff       	call   c00150dc <schedule()>
c0015f4d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015f52:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015f56:	48                   	dec    eax
c0015f57:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015f5c:	75 d2                	jne    c0015f30 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015f5e:	fb                   	sti    
c0015f5f:	eb cf                	jmp    c0015f30 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015f61:	a1 c8 81 02 c0       	mov    eax,ds:0xc00281c8
c0015f66:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015f70:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0015f74:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0015f78:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0015f7c:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0015f80:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0015f84:	50                   	push   eax
c0015f85:	6a 20                	push   0x20
c0015f87:	6a 00                	push   0x0
c0015f89:	68 e0 81 02 c0       	push   0xc00281e0
c0015f8e:	e8 5d a5 fe ff       	call   c00004f0 <memset>
c0015f93:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015f9a:	e8 0f 1b ff ff       	call   c0007aae <malloc>
c0015f9f:	83 c4 0c             	add    esp,0xc
c0015fa2:	89 c3                	mov    ebx,eax
c0015fa4:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0015faa:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015fae:	50                   	push   eax
c0015faf:	e8 c6 4f ff ff       	call   c000af7a <File::File(char const*, Process*)>
c0015fb4:	83 c4 10             	add    esp,0x10
c0015fb7:	85 db                	test   ebx,ebx
c0015fb9:	75 0a                	jne    c0015fc5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0015fbb:	83 ec 0c             	sub    esp,0xc
c0015fbe:	68 d8 13 02 c0       	push   0xc00213d8
c0015fc3:	eb 2b                	jmp    c0015ff0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd7>
c0015fc5:	50                   	push   eax
c0015fc6:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015fca:	50                   	push   eax
c0015fcb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015fcf:	50                   	push   eax
c0015fd0:	53                   	push   ebx
c0015fd1:	e8 0c 53 ff ff       	call   c000b2e2 <File::stat(unsigned long long*, bool*)>
c0015fd6:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015fda:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015fde:	83 c4 10             	add    esp,0x10
c0015fe1:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0015fe6:	74 27                	je     c001600f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf6>
c0015fe8:	83 ec 0c             	sub    esp,0xc
c0015feb:	68 ec 13 02 c0       	push   0xc00213ec
c0015ff0:	e8 32 a9 ff ff       	call   c0010927 <KePanic(char const*)>
c0015ff5:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015ffa:	83 c4 10             	add    esp,0x10
c0015ffd:	48                   	dec    eax
c0015ffe:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0016003:	85 c0                	test   eax,eax
c0016005:	75 01                	jne    c0016008 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xef>
c0016007:	fb                   	sti    
c0016008:	31 f6                	xor    esi,esi
c001600a:	e9 8f 00 00 00       	jmp    c001609e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x185>
c001600f:	51                   	push   ecx
c0016010:	51                   	push   ecx
c0016011:	6a 01                	push   0x1
c0016013:	53                   	push   ebx
c0016014:	e8 1d 50 ff ff       	call   c000b036 <File::open(FileOpenMode)>
c0016019:	83 c4 10             	add    esp,0x10
c001601c:	85 c0                	test   eax,eax
c001601e:	74 26                	je     c0016046 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x12d>
c0016020:	83 ec 0c             	sub    esp,0xc
c0016023:	68 05 14 02 c0       	push   0xc0021405
c0016028:	e8 fa a8 ff ff       	call   c0010927 <KePanic(char const*)>
c001602d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0016032:	83 c4 10             	add    esp,0x10
c0016035:	48                   	dec    eax
c0016036:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001603b:	85 c0                	test   eax,eax
c001603d:	75 c9                	jne    c0016008 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xef>
c001603f:	fb                   	sti    
c0016040:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0016044:	eb 58                	jmp    c001609e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x185>
c0016046:	0f b7 ed             	movzx  ebp,bp
c0016049:	50                   	push   eax
c001604a:	0f b7 ff             	movzx  edi,di
c001604d:	50                   	push   eax
c001604e:	55                   	push   ebp
c001604f:	57                   	push   edi
c0016050:	e8 b5 fc ff ff       	call   c0015d0a <Vm::realToLinear(unsigned short, unsigned short)>
c0016055:	5a                   	pop    edx
c0016056:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016058:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001605c:	51                   	push   ecx
c001605d:	50                   	push   eax
c001605e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016062:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016066:	53                   	push   ebx
c0016067:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001606a:	83 c4 14             	add    esp,0x14
c001606d:	53                   	push   ebx
c001606e:	e8 21 50 ff ff       	call   c000b094 <File::close()>
c0016073:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0016078:	83 c4 10             	add    esp,0x10
c001607b:	48                   	dec    eax
c001607c:	c6 05 c5 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c5,0x0
c0016083:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0016088:	85 c0                	test   eax,eax
c001608a:	75 01                	jne    c001608d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x174>
c001608c:	fb                   	sti    
c001608d:	83 ec 0c             	sub    esp,0xc
c0016090:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0016096:	e8 59 f5 ff ff       	call   c00155f4 <unblockTask(ThreadControlBlock*)>
c001609b:	83 c4 10             	add    esp,0x10
c001609e:	83 c4 2c             	add    esp,0x2c
c00160a1:	89 f0                	mov    eax,esi
c00160a3:	5b                   	pop    ebx
c00160a4:	5e                   	pop    esi
c00160a5:	5f                   	pop    edi
c00160a6:	5d                   	pop    ebp
c00160a7:	c3                   	ret    

c00160a8 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00160a8:	57                   	push   edi
c00160a9:	56                   	push   esi
c00160aa:	53                   	push   ebx
c00160ab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00160af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00160b3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00160b7:	83 e8 06             	sub    eax,0x6
c00160ba:	0f b7 c0             	movzx  eax,ax
c00160bd:	50                   	push   eax
c00160be:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00160c3:	50                   	push   eax
c00160c4:	e8 41 fc ff ff       	call   c0015d0a <Vm::realToLinear(unsigned short, unsigned short)>
c00160c9:	5a                   	pop    edx
c00160ca:	5e                   	pop    esi
c00160cb:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00160ce:	8d 56 fa             	lea    edx,[esi-0x6]
c00160d1:	8b 71 38             	mov    esi,DWORD PTR [ecx+0x38]
c00160d4:	81 e2 ff ff 00 00    	and    edx,0xffff
c00160da:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00160dd:	8d 56 02             	lea    edx,[esi+0x2]
c00160e0:	66 89 10             	mov    WORD PTR [eax],dx
c00160e3:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c00160e6:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00160ea:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c00160ed:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00160f1:	89 d6                	mov    esi,edx
c00160f3:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00160f9:	81 e6 ff fd ff ff    	and    esi,0xfffffdff
c00160ff:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0016103:	74 05                	je     c001610a <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x62>
c0016105:	80 ce 02             	or     dh,0x2
c0016108:	89 d6                	mov    esi,edx
c001610a:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001610e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016113:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016117:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001611f:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0016122:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001612a:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001612d:	5b                   	pop    ebx
c001612e:	5e                   	pop    esi
c001612f:	5f                   	pop    edi
c0016130:	c3                   	ret    

c0016131 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016131:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016136:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001613b:	c1 e0 04             	shl    eax,0x4
c001613e:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0016141:	c3                   	ret    

c0016142 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0016142:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016147:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001614c:	c1 e0 04             	shl    eax,0x4
c001614f:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0016153:	c3                   	ret    

c0016154 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0016154:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016159:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001615e:	c1 e0 04             	shl    eax,0x4
c0016161:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0016164:	c3                   	ret    

c0016165 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0016165:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001616a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001616f:	c1 e0 04             	shl    eax,0x4
c0016172:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016176:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0016179:	c3                   	ret    

c001617a <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001617a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001617f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016184:	c1 e0 04             	shl    eax,0x4
c0016187:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001618b:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001618f:	c3                   	ret    

c0016190 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0016190:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016195:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001619a:	c1 e0 04             	shl    eax,0x4
c001619d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00161a1:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00161a4:	c3                   	ret    

c00161a5 <Vm::faultHandler(regs*)>:
c00161a5:	55                   	push   ebp
c00161a6:	57                   	push   edi
c00161a7:	56                   	push   esi
c00161a8:	53                   	push   ebx
c00161a9:	83 ec 2c             	sub    esp,0x2c
c00161ac:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00161b0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00161b3:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00161b7:	0f b7 f8             	movzx  edi,ax
c00161ba:	52                   	push   edx
c00161bb:	0f b7 c0             	movzx  eax,ax
c00161be:	50                   	push   eax
c00161bf:	e8 46 fb ff ff       	call   c0015d0a <Vm::realToLinear(unsigned short, unsigned short)>
c00161c4:	5a                   	pop    edx
c00161c5:	59                   	pop    ecx
c00161c6:	89 c1                	mov    ecx,eax
c00161c8:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00161cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00161cf:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c00161d4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00161d8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c00161db:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00161df:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c00161e4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00161e8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00161ec:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00161f0:	e8 15 fb ff ff       	call   c0015d0a <Vm::realToLinear(unsigned short, unsigned short)>
c00161f5:	5e                   	pop    esi
c00161f6:	be 06 00 00 00       	mov    esi,0x6
c00161fb:	5d                   	pop    ebp
c00161fc:	31 ed                	xor    ebp,ebp
c00161fe:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016203:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0016206:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c001620c:	0f 84 54 02 00 00    	je     c0016466 <Vm::faultHandler(regs*)+0x2c1>
c0016212:	0f 87 94 00 00 00    	ja     c00162ac <Vm::faultHandler(regs*)+0x107>
c0016218:	83 fa 66             	cmp    edx,0x66
c001621b:	0f 84 c2 01 00 00    	je     c00163e3 <Vm::faultHandler(regs*)+0x23e>
c0016221:	77 47                	ja     c001626a <Vm::faultHandler(regs*)+0xc5>
c0016223:	83 fa 36             	cmp    edx,0x36
c0016226:	0f 84 aa 01 00 00    	je     c00163d6 <Vm::faultHandler(regs*)+0x231>
c001622c:	77 1a                	ja     c0016248 <Vm::faultHandler(regs*)+0xa3>
c001622e:	83 fa 26             	cmp    edx,0x26
c0016231:	0f 84 78 01 00 00    	je     c00163af <Vm::faultHandler(regs*)+0x20a>
c0016237:	83 fa 2e             	cmp    edx,0x2e
c001623a:	0f 85 01 06 00 00    	jne    c0016841 <Vm::faultHandler(regs*)+0x69c>
c0016240:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016243:	31 f6                	xor    esi,esi
c0016245:	41                   	inc    ecx
c0016246:	eb bb                	jmp    c0016203 <Vm::faultHandler(regs*)+0x5e>
c0016248:	83 fa 64             	cmp    edx,0x64
c001624b:	0f 84 6b 01 00 00    	je     c00163bc <Vm::faultHandler(regs*)+0x217>
c0016251:	0f 87 72 01 00 00    	ja     c00163c9 <Vm::faultHandler(regs*)+0x224>
c0016257:	83 fa 3e             	cmp    edx,0x3e
c001625a:	0f 85 e1 05 00 00    	jne    c0016841 <Vm::faultHandler(regs*)+0x69c>
c0016260:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016263:	be 01 00 00 00       	mov    esi,0x1
c0016268:	eb db                	jmp    c0016245 <Vm::faultHandler(regs*)+0xa0>
c001626a:	83 fa 6d             	cmp    edx,0x6d
c001626d:	0f 84 14 03 00 00    	je     c0016587 <Vm::faultHandler(regs*)+0x3e2>
c0016273:	77 17                	ja     c001628c <Vm::faultHandler(regs*)+0xe7>
c0016275:	83 fa 67             	cmp    edx,0x67
c0016278:	0f 84 72 01 00 00    	je     c00163f0 <Vm::faultHandler(regs*)+0x24b>
c001627e:	83 fa 6c             	cmp    edx,0x6c
c0016281:	0f 84 91 02 00 00    	je     c0016518 <Vm::faultHandler(regs*)+0x373>
c0016287:	e9 b5 05 00 00       	jmp    c0016841 <Vm::faultHandler(regs*)+0x69c>
c001628c:	83 fa 6f             	cmp    edx,0x6f
c001628f:	0f 84 1d 04 00 00    	je     c00166b2 <Vm::faultHandler(regs*)+0x50d>
c0016295:	0f 82 7f 03 00 00    	jb     c001661a <Vm::faultHandler(regs*)+0x475>
c001629b:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c00162a1:	0f 84 56 01 00 00    	je     c00163fd <Vm::faultHandler(regs*)+0x258>
c00162a7:	e9 95 05 00 00       	jmp    c0016841 <Vm::faultHandler(regs*)+0x69c>
c00162ac:	81 fa ec 00 00 00    	cmp    edx,0xec
c00162b2:	0f 84 31 05 00 00    	je     c00167e9 <Vm::faultHandler(regs*)+0x644>
c00162b8:	0f 87 89 00 00 00    	ja     c0016347 <Vm::faultHandler(regs*)+0x1a2>
c00162be:	81 fa e4 00 00 00    	cmp    edx,0xe4
c00162c4:	0f 84 b0 04 00 00    	je     c001677a <Vm::faultHandler(regs*)+0x5d5>
c00162ca:	77 58                	ja     c0016324 <Vm::faultHandler(regs*)+0x17f>
c00162cc:	81 fa cd 00 00 00    	cmp    edx,0xcd
c00162d2:	0f 84 ee 01 00 00    	je     c00164c6 <Vm::faultHandler(regs*)+0x321>
c00162d8:	81 fa cf 00 00 00    	cmp    edx,0xcf
c00162de:	0f 85 5d 05 00 00    	jne    c0016841 <Vm::faultHandler(regs*)+0x69c>
c00162e4:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00162e7:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00162ea:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00162ee:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00162f1:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00162f5:	81 ca 00 02 02 00    	or     edx,0x20200
c00162fb:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00162fe:	0f b7 40 04          	movzx  eax,WORD PTR [eax+0x4]
c0016302:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016308:	c1 e8 09             	shr    eax,0x9
c001630b:	83 e0 01             	and    eax,0x1
c001630e:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016311:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016314:	83 c0 06             	add    eax,0x6
c0016317:	25 ff ff 00 00       	and    eax,0xffff
c001631c:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001631f:	e9 19 05 00 00       	jmp    c001683d <Vm::faultHandler(regs*)+0x698>
c0016324:	81 fa e6 00 00 00    	cmp    edx,0xe6
c001632a:	0f 84 8f 04 00 00    	je     c00167bf <Vm::faultHandler(regs*)+0x61a>
c0016330:	0f 82 60 04 00 00    	jb     c0016796 <Vm::faultHandler(regs*)+0x5f1>
c0016336:	81 fa e7 00 00 00    	cmp    edx,0xe7
c001633c:	0f 84 94 04 00 00    	je     c00167d6 <Vm::faultHandler(regs*)+0x631>
c0016342:	e9 fa 04 00 00       	jmp    c0016841 <Vm::faultHandler(regs*)+0x69c>
c0016347:	81 fa ef 00 00 00    	cmp    edx,0xef
c001634d:	0f 84 d7 04 00 00    	je     c001682a <Vm::faultHandler(regs*)+0x685>
c0016353:	77 2e                	ja     c0016383 <Vm::faultHandler(regs*)+0x1de>
c0016355:	81 fa ed 00 00 00    	cmp    edx,0xed
c001635b:	0f 84 a4 04 00 00    	je     c0016805 <Vm::faultHandler(regs*)+0x660>
c0016361:	81 fa ee 00 00 00    	cmp    edx,0xee
c0016367:	0f 85 d4 04 00 00    	jne    c0016841 <Vm::faultHandler(regs*)+0x69c>
c001636d:	50                   	push   eax
c001636e:	50                   	push   eax
c001636f:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016373:	50                   	push   eax
c0016374:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016378:	50                   	push   eax
c0016379:	e8 56 f9 ff ff       	call   c0015cd4 <Vm::outbv(unsigned short, unsigned char)>
c001637e:	e9 9f 04 00 00       	jmp    c0016822 <Vm::faultHandler(regs*)+0x67d>
c0016383:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0016389:	0f 84 6d 01 00 00    	je     c00164fc <Vm::faultHandler(regs*)+0x357>
c001638f:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0016395:	0f 84 6f 01 00 00    	je     c001650a <Vm::faultHandler(regs*)+0x365>
c001639b:	81 fa f3 00 00 00    	cmp    edx,0xf3
c00163a1:	0f 85 9a 04 00 00    	jne    c0016841 <Vm::faultHandler(regs*)+0x69c>
c00163a7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00163aa:	e9 96 fe ff ff       	jmp    c0016245 <Vm::faultHandler(regs*)+0xa0>
c00163af:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00163b2:	be 02 00 00 00       	mov    esi,0x2
c00163b7:	e9 89 fe ff ff       	jmp    c0016245 <Vm::faultHandler(regs*)+0xa0>
c00163bc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00163bf:	be 03 00 00 00       	mov    esi,0x3
c00163c4:	e9 7c fe ff ff       	jmp    c0016245 <Vm::faultHandler(regs*)+0xa0>
c00163c9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00163cc:	be 04 00 00 00       	mov    esi,0x4
c00163d1:	e9 6f fe ff ff       	jmp    c0016245 <Vm::faultHandler(regs*)+0xa0>
c00163d6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00163d9:	be 05 00 00 00       	mov    esi,0x5
c00163de:	e9 62 fe ff ff       	jmp    c0016245 <Vm::faultHandler(regs*)+0xa0>
c00163e3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00163e6:	bd 01 00 00 00       	mov    ebp,0x1
c00163eb:	e9 55 fe ff ff       	jmp    c0016245 <Vm::faultHandler(regs*)+0xa0>
c00163f0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00163f3:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00163f8:	e9 48 fe ff ff       	jmp    c0016245 <Vm::faultHandler(regs*)+0xa0>
c00163fd:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016400:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016404:	83 e5 01             	and    ebp,0x1
c0016407:	74 30                	je     c0016439 <Vm::faultHandler(regs*)+0x294>
c0016409:	83 e9 04             	sub    ecx,0x4
c001640c:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016412:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016418:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001641b:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001641e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016424:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016428:	0f 84 0c 04 00 00    	je     c001683a <Vm::faultHandler(regs*)+0x695>
c001642e:	80 ce 02             	or     dh,0x2
c0016431:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016434:	e9 01 04 00 00       	jmp    c001683a <Vm::faultHandler(regs*)+0x695>
c0016439:	83 e9 02             	sub    ecx,0x2
c001643c:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016442:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016445:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016449:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001644f:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016453:	74 05                	je     c001645a <Vm::faultHandler(regs*)+0x2b5>
c0016455:	80 ce 02             	or     dh,0x2
c0016458:	eb 03                	jmp    c001645d <Vm::faultHandler(regs*)+0x2b8>
c001645a:	80 e6 fd             	and    dh,0xfd
c001645d:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016461:	e9 d4 03 00 00       	jmp    c001683a <Vm::faultHandler(regs*)+0x695>
c0016466:	83 e5 01             	and    ebp,0x1
c0016469:	74 2a                	je     c0016495 <Vm::faultHandler(regs*)+0x2f0>
c001646b:	8b 10                	mov    edx,DWORD PTR [eax]
c001646d:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016473:	81 ca 00 02 02 00    	or     edx,0x20200
c0016479:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001647c:	8b 00                	mov    eax,DWORD PTR [eax]
c001647e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016484:	c1 e8 09             	shr    eax,0x9
c0016487:	83 e0 01             	and    eax,0x1
c001648a:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001648d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016490:	83 c0 04             	add    eax,0x4
c0016493:	eb 24                	jmp    c00164b9 <Vm::faultHandler(regs*)+0x314>
c0016495:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0016498:	81 ca 00 02 02 00    	or     edx,0x20200
c001649e:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00164a1:	0f b7 00             	movzx  eax,WORD PTR [eax]
c00164a4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00164aa:	c1 e8 09             	shr    eax,0x9
c00164ad:	83 e0 01             	and    eax,0x1
c00164b0:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00164b3:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00164b6:	83 c0 02             	add    eax,0x2
c00164b9:	25 ff ff 00 00       	and    eax,0xffff
c00164be:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00164c1:	e9 74 03 00 00       	jmp    c001683a <Vm::faultHandler(regs*)+0x695>
c00164c6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00164ca:	3d ee 00 00 00       	cmp    eax,0xee
c00164cf:	75 10                	jne    c00164e1 <Vm::faultHandler(regs*)+0x33c>
c00164d1:	83 ec 0c             	sub    esp,0xc
c00164d4:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00164d7:	e8 95 f8 ff ff       	call   c0015d71 <Vm::mainloop3(unsigned long)>
c00164dc:	e9 44 03 00 00       	jmp    c0016825 <Vm::faultHandler(regs*)+0x680>
c00164e1:	83 ec 0c             	sub    esp,0xc
c00164e4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00164e8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00164ec:	51                   	push   ecx
c00164ed:	50                   	push   eax
c00164ee:	53                   	push   ebx
c00164ef:	e8 b4 fb ff ff       	call   c00160a8 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00164f4:	83 c4 20             	add    esp,0x20
c00164f7:	e9 41 03 00 00       	jmp    c001683d <Vm::faultHandler(regs*)+0x698>
c00164fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016501:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016505:	e9 30 03 00 00       	jmp    c001683a <Vm::faultHandler(regs*)+0x695>
c001650a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001650f:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0016513:	e9 22 03 00 00       	jmp    c001683a <Vm::faultHandler(regs*)+0x695>
c0016518:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001651b:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016520:	74 2b                	je     c001654d <Vm::faultHandler(regs*)+0x3a8>
c0016522:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0016529:	76 22                	jbe    c001654d <Vm::faultHandler(regs*)+0x3a8>
c001652b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001652f:	50                   	push   eax
c0016530:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016534:	50                   	push   eax
c0016535:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016539:	50                   	push   eax
c001653a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001653e:	50                   	push   eax
c001653f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016543:	50                   	push   eax
c0016544:	6a 6c                	push   0x6c
c0016546:	6a 6c                	push   0x6c
c0016548:	e9 bd 01 00 00       	jmp    c001670a <Vm::faultHandler(regs*)+0x565>
c001654d:	83 ec 0c             	sub    esp,0xc
c0016550:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016554:	0f b7 f6             	movzx  esi,si
c0016557:	50                   	push   eax
c0016558:	e8 64 f7 ff ff       	call   c0015cc1 <Vm::inbv(unsigned short)>
c001655d:	83 c4 0c             	add    esp,0xc
c0016560:	0f b6 c0             	movzx  eax,al
c0016563:	50                   	push   eax
c0016564:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0016568:	50                   	push   eax
c0016569:	56                   	push   esi
c001656a:	e8 f6 fb ff ff       	call   c0016165 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001656f:	83 c4 10             	add    esp,0x10
c0016572:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016575:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016579:	74 03                	je     c001657e <Vm::faultHandler(regs*)+0x3d9>
c001657b:	48                   	dec    eax
c001657c:	eb 01                	jmp    c001657f <Vm::faultHandler(regs*)+0x3da>
c001657e:	40                   	inc    eax
c001657f:	0f b7 c0             	movzx  eax,ax
c0016582:	e9 8b 00 00 00       	jmp    c0016612 <Vm::faultHandler(regs*)+0x46d>
c0016587:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001658a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001658d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016592:	74 29                	je     c00165bd <Vm::faultHandler(regs*)+0x418>
c0016594:	3d ff ff 00 00       	cmp    eax,0xffff
c0016599:	76 22                	jbe    c00165bd <Vm::faultHandler(regs*)+0x418>
c001659b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001659f:	50                   	push   eax
c00165a0:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00165a4:	50                   	push   eax
c00165a5:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00165a9:	50                   	push   eax
c00165aa:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00165ae:	50                   	push   eax
c00165af:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00165b3:	50                   	push   eax
c00165b4:	6a 6d                	push   0x6d
c00165b6:	6a 6d                	push   0x6d
c00165b8:	e9 4d 01 00 00       	jmp    c001670a <Vm::faultHandler(regs*)+0x565>
c00165bd:	0f b7 c8             	movzx  ecx,ax
c00165c0:	0f b7 f6             	movzx  esi,si
c00165c3:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00165c6:	83 e5 01             	and    ebp,0x1
c00165c9:	74 20                	je     c00165eb <Vm::faultHandler(regs*)+0x446>
c00165cb:	ed                   	in     eax,dx
c00165cc:	55                   	push   ebp
c00165cd:	50                   	push   eax
c00165ce:	51                   	push   ecx
c00165cf:	56                   	push   esi
c00165d0:	e8 bb fb ff ff       	call   c0016190 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00165d5:	83 c4 10             	add    esp,0x10
c00165d8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00165db:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00165df:	74 05                	je     c00165e6 <Vm::faultHandler(regs*)+0x441>
c00165e1:	83 e8 04             	sub    eax,0x4
c00165e4:	eb 27                	jmp    c001660d <Vm::faultHandler(regs*)+0x468>
c00165e6:	83 c0 04             	add    eax,0x4
c00165e9:	eb 22                	jmp    c001660d <Vm::faultHandler(regs*)+0x468>
c00165eb:	66 ed                	in     ax,dx
c00165ed:	0f b7 c0             	movzx  eax,ax
c00165f0:	57                   	push   edi
c00165f1:	50                   	push   eax
c00165f2:	51                   	push   ecx
c00165f3:	56                   	push   esi
c00165f4:	e8 81 fb ff ff       	call   c001617a <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00165f9:	83 c4 10             	add    esp,0x10
c00165fc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00165ff:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016603:	74 05                	je     c001660a <Vm::faultHandler(regs*)+0x465>
c0016605:	83 e8 02             	sub    eax,0x2
c0016608:	eb 03                	jmp    c001660d <Vm::faultHandler(regs*)+0x468>
c001660a:	83 c0 02             	add    eax,0x2
c001660d:	25 ff ff 00 00       	and    eax,0xffff
c0016612:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0016615:	e9 20 02 00 00       	jmp    c001683a <Vm::faultHandler(regs*)+0x695>
c001661a:	8d 46 ff             	lea    eax,[esi-0x1]
c001661d:	0f b6 f0             	movzx  esi,al
c0016620:	83 fe 05             	cmp    esi,0x5
c0016623:	77 23                	ja     c0016648 <Vm::faultHandler(regs*)+0x4a3>
c0016625:	ff 24 b5 78 14 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdeb88]
c001662c:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0016631:	eb 15                	jmp    c0016648 <Vm::faultHandler(regs*)+0x4a3>
c0016633:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0016637:	eb 0f                	jmp    c0016648 <Vm::faultHandler(regs*)+0x4a3>
c0016639:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001663d:	eb 09                	jmp    c0016648 <Vm::faultHandler(regs*)+0x4a3>
c001663f:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0016643:	eb 03                	jmp    c0016648 <Vm::faultHandler(regs*)+0x4a3>
c0016645:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0016648:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001664b:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016650:	74 29                	je     c001667b <Vm::faultHandler(regs*)+0x4d6>
c0016652:	3d ff ff 00 00       	cmp    eax,0xffff
c0016657:	76 22                	jbe    c001667b <Vm::faultHandler(regs*)+0x4d6>
c0016659:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001665d:	50                   	push   eax
c001665e:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016662:	50                   	push   eax
c0016663:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016667:	50                   	push   eax
c0016668:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001666c:	50                   	push   eax
c001666d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016671:	50                   	push   eax
c0016672:	6a 6e                	push   0x6e
c0016674:	6a 6e                	push   0x6e
c0016676:	e9 8f 00 00 00       	jmp    c001670a <Vm::faultHandler(regs*)+0x565>
c001667b:	0f b7 c0             	movzx  eax,ax
c001667e:	52                   	push   edx
c001667f:	52                   	push   edx
c0016680:	50                   	push   eax
c0016681:	57                   	push   edi
c0016682:	e8 aa fa ff ff       	call   c0016131 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0016687:	59                   	pop    ecx
c0016688:	0f b6 c0             	movzx  eax,al
c001668b:	5e                   	pop    esi
c001668c:	50                   	push   eax
c001668d:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016691:	50                   	push   eax
c0016692:	e8 3d f6 ff ff       	call   c0015cd4 <Vm::outbv(unsigned short, unsigned char)>
c0016697:	83 c4 10             	add    esp,0x10
c001669a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001669d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00166a1:	74 03                	je     c00166a6 <Vm::faultHandler(regs*)+0x501>
c00166a3:	48                   	dec    eax
c00166a4:	eb 01                	jmp    c00166a7 <Vm::faultHandler(regs*)+0x502>
c00166a6:	40                   	inc    eax
c00166a7:	0f b7 c0             	movzx  eax,ax
c00166aa:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00166ad:	e9 88 01 00 00       	jmp    c001683a <Vm::faultHandler(regs*)+0x695>
c00166b2:	8d 46 ff             	lea    eax,[esi-0x1]
c00166b5:	0f b6 f0             	movzx  esi,al
c00166b8:	83 fe 05             	cmp    esi,0x5
c00166bb:	77 1e                	ja     c00166db <Vm::faultHandler(regs*)+0x536>
c00166bd:	ff 24 b5 90 14 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdeb70]
c00166c4:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00166c8:	eb 11                	jmp    c00166db <Vm::faultHandler(regs*)+0x536>
c00166ca:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00166cd:	eb 0c                	jmp    c00166db <Vm::faultHandler(regs*)+0x536>
c00166cf:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00166d2:	eb 07                	jmp    c00166db <Vm::faultHandler(regs*)+0x536>
c00166d4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00166d7:	eb 02                	jmp    c00166db <Vm::faultHandler(regs*)+0x536>
c00166d9:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00166db:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00166de:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00166e3:	74 37                	je     c001671c <Vm::faultHandler(regs*)+0x577>
c00166e5:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00166eb:	76 2f                	jbe    c001671c <Vm::faultHandler(regs*)+0x577>
c00166ed:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00166f1:	50                   	push   eax
c00166f2:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00166f6:	50                   	push   eax
c00166f7:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00166fb:	50                   	push   eax
c00166fc:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016700:	50                   	push   eax
c0016701:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016705:	50                   	push   eax
c0016706:	6a 6f                	push   0x6f
c0016708:	6a 6f                	push   0x6f
c001670a:	68 1e 14 02 c0       	push   0xc002141e
c001670f:	e8 e3 42 ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c0016714:	83 c4 20             	add    esp,0x20
c0016717:	e9 83 01 00 00       	jmp    c001689f <Vm::faultHandler(regs*)+0x6fa>
c001671c:	0f b7 d7             	movzx  edx,di
c001671f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0016722:	0f b7 c6             	movzx  eax,si
c0016725:	81 e1 00 04 00 00    	and    ecx,0x400
c001672b:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001672e:	83 e5 01             	and    ebp,0x1
c0016731:	74 1d                	je     c0016750 <Vm::faultHandler(regs*)+0x5ab>
c0016733:	55                   	push   ebp
c0016734:	55                   	push   ebp
c0016735:	50                   	push   eax
c0016736:	52                   	push   edx
c0016737:	e8 18 fa ff ff       	call   c0016154 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001673c:	83 c4 10             	add    esp,0x10
c001673f:	89 fa                	mov    edx,edi
c0016741:	ef                   	out    dx,eax
c0016742:	85 c9                	test   ecx,ecx
c0016744:	74 05                	je     c001674b <Vm::faultHandler(regs*)+0x5a6>
c0016746:	83 ee 04             	sub    esi,0x4
c0016749:	eb 21                	jmp    c001676c <Vm::faultHandler(regs*)+0x5c7>
c001674b:	83 c6 04             	add    esi,0x4
c001674e:	eb 1c                	jmp    c001676c <Vm::faultHandler(regs*)+0x5c7>
c0016750:	55                   	push   ebp
c0016751:	55                   	push   ebp
c0016752:	50                   	push   eax
c0016753:	52                   	push   edx
c0016754:	e8 e9 f9 ff ff       	call   c0016142 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0016759:	83 c4 10             	add    esp,0x10
c001675c:	89 fa                	mov    edx,edi
c001675e:	66 ef                	out    dx,ax
c0016760:	85 c9                	test   ecx,ecx
c0016762:	74 05                	je     c0016769 <Vm::faultHandler(regs*)+0x5c4>
c0016764:	83 ee 02             	sub    esi,0x2
c0016767:	eb 03                	jmp    c001676c <Vm::faultHandler(regs*)+0x5c7>
c0016769:	83 c6 02             	add    esi,0x2
c001676c:	81 e6 ff ff 00 00    	and    esi,0xffff
c0016772:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0016775:	e9 c0 00 00 00       	jmp    c001683a <Vm::faultHandler(regs*)+0x695>
c001677a:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016781:	83 ec 0c             	sub    esp,0xc
c0016784:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016788:	50                   	push   eax
c0016789:	e8 33 f5 ff ff       	call   c0015cc1 <Vm::inbv(unsigned short)>
c001678e:	0f b6 c0             	movzx  eax,al
c0016791:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016794:	eb 3a                	jmp    c00167d0 <Vm::faultHandler(regs*)+0x62b>
c0016796:	83 e5 01             	and    ebp,0x1
c0016799:	74 07                	je     c00167a2 <Vm::faultHandler(regs*)+0x5fd>
c001679b:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001679f:	ed                   	in     eax,dx
c00167a0:	eb 14                	jmp    c00167b6 <Vm::faultHandler(regs*)+0x611>
c00167a2:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00167a5:	66 31 f6             	xor    si,si
c00167a8:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00167ab:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00167af:	66 ed                	in     ax,dx
c00167b1:	0f b7 c0             	movzx  eax,ax
c00167b4:	09 f0                	or     eax,esi
c00167b6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00167b9:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00167bd:	eb 7e                	jmp    c001683d <Vm::faultHandler(regs*)+0x698>
c00167bf:	52                   	push   edx
c00167c0:	52                   	push   edx
c00167c1:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00167c5:	50                   	push   eax
c00167c6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00167ca:	50                   	push   eax
c00167cb:	e8 04 f5 ff ff       	call   c0015cd4 <Vm::outbv(unsigned short, unsigned char)>
c00167d0:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00167d4:	eb 4f                	jmp    c0016825 <Vm::faultHandler(regs*)+0x680>
c00167d6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00167d9:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00167dd:	83 e5 01             	and    ebp,0x1
c00167e0:	74 03                	je     c00167e5 <Vm::faultHandler(regs*)+0x640>
c00167e2:	ef                   	out    dx,eax
c00167e3:	eb d4                	jmp    c00167b9 <Vm::faultHandler(regs*)+0x614>
c00167e5:	66 ef                	out    dx,ax
c00167e7:	eb d0                	jmp    c00167b9 <Vm::faultHandler(regs*)+0x614>
c00167e9:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00167f0:	83 ec 0c             	sub    esp,0xc
c00167f3:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00167f7:	50                   	push   eax
c00167f8:	e8 c4 f4 ff ff       	call   c0015cc1 <Vm::inbv(unsigned short)>
c00167fd:	0f b6 c0             	movzx  eax,al
c0016800:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016803:	eb 1d                	jmp    c0016822 <Vm::faultHandler(regs*)+0x67d>
c0016805:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016808:	83 e5 01             	and    ebp,0x1
c001680b:	74 03                	je     c0016810 <Vm::faultHandler(regs*)+0x66b>
c001680d:	ed                   	in     eax,dx
c001680e:	eb 0d                	jmp    c001681d <Vm::faultHandler(regs*)+0x678>
c0016810:	66 ed                	in     ax,dx
c0016812:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0016815:	0f b7 c0             	movzx  eax,ax
c0016818:	66 31 d2             	xor    dx,dx
c001681b:	09 d0                	or     eax,edx
c001681d:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016820:	eb 18                	jmp    c001683a <Vm::faultHandler(regs*)+0x695>
c0016822:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016825:	83 c4 10             	add    esp,0x10
c0016828:	eb 13                	jmp    c001683d <Vm::faultHandler(regs*)+0x698>
c001682a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001682d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016830:	83 e5 01             	and    ebp,0x1
c0016833:	74 03                	je     c0016838 <Vm::faultHandler(regs*)+0x693>
c0016835:	ef                   	out    dx,eax
c0016836:	eb 02                	jmp    c001683a <Vm::faultHandler(regs*)+0x695>
c0016838:	66 ef                	out    dx,ax
c001683a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001683d:	b0 01                	mov    al,0x1
c001683f:	eb 60                	jmp    c00168a1 <Vm::faultHandler(regs*)+0x6fc>
c0016841:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016845:	50                   	push   eax
c0016846:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001684a:	50                   	push   eax
c001684b:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001684f:	50                   	push   eax
c0016850:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016854:	50                   	push   eax
c0016855:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016859:	50                   	push   eax
c001685a:	52                   	push   edx
c001685b:	52                   	push   edx
c001685c:	68 4b 14 02 c0       	push   0xc002144b
c0016861:	e8 91 41 ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c0016866:	83 c4 20             	add    esp,0x20
c0016869:	83 ec 0c             	sub    esp,0xc
c001686c:	6a 60                	push   0x60
c001686e:	e8 4e f4 ff ff       	call   c0015cc1 <Vm::inbv(unsigned short)>
c0016873:	83 c4 10             	add    esp,0x10
c0016876:	0f b6 d0             	movzx  edx,al
c0016879:	83 fa 1c             	cmp    edx,0x1c
c001687c:	74 05                	je     c0016883 <Vm::faultHandler(regs*)+0x6de>
c001687e:	83 fa 5a             	cmp    edx,0x5a
c0016881:	75 e6                	jne    c0016869 <Vm::faultHandler(regs*)+0x6c4>
c0016883:	0f b6 c0             	movzx  eax,al
c0016886:	83 f8 1c             	cmp    eax,0x1c
c0016889:	74 05                	je     c0016890 <Vm::faultHandler(regs*)+0x6eb>
c001688b:	83 f8 5a             	cmp    eax,0x5a
c001688e:	75 0f                	jne    c001689f <Vm::faultHandler(regs*)+0x6fa>
c0016890:	83 ec 0c             	sub    esp,0xc
c0016893:	6a 60                	push   0x60
c0016895:	e8 27 f4 ff ff       	call   c0015cc1 <Vm::inbv(unsigned short)>
c001689a:	83 c4 10             	add    esp,0x10
c001689d:	eb e4                	jmp    c0016883 <Vm::faultHandler(regs*)+0x6de>
c001689f:	31 c0                	xor    eax,eax
c00168a1:	83 c4 2c             	add    esp,0x2c
c00168a4:	5b                   	pop    ebx
c00168a5:	5e                   	pop    esi
c00168a6:	5f                   	pop    edi
c00168a7:	5d                   	pop    ebp
c00168a8:	c3                   	ret    

c00168a9 <noCopro(unsigned long)>:
c00168a9:	c3                   	ret    

c00168aa <nmiHandler(regs*, void*)>:
c00168aa:	83 ec 0c             	sub    esp,0xc
c00168ad:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00168b2:	83 ec 0c             	sub    esp,0xc
c00168b5:	50                   	push   eax
c00168b6:	e8 f3 09 ff ff       	call   c00072ae <Computer::handleNMI()>
c00168bb:	83 c4 10             	add    esp,0x10
c00168be:	90                   	nop
c00168bf:	83 c4 0c             	add    esp,0xc
c00168c2:	c3                   	ret    

c00168c3 <doubleFault(regs*, void*)>:
c00168c3:	55                   	push   ebp
c00168c4:	89 e5                	mov    ebp,esp
c00168c6:	83 ec 08             	sub    esp,0x8
c00168c9:	83 ec 0c             	sub    esp,0xc
c00168cc:	68 a8 14 02 c0       	push   0xc00214a8
c00168d1:	e8 51 a0 ff ff       	call   c0010927 <KePanic(char const*)>
c00168d6:	83 c4 10             	add    esp,0x10
c00168d9:	90                   	nop
c00168da:	c9                   	leave  
c00168db:	c3                   	ret    

c00168dc <displayDebugInfo(regs*)>:
c00168dc:	83 ec 1c             	sub    esp,0x1c
c00168df:	0f 20 c0             	mov    eax,cr0
c00168e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00168e6:	0f 20 d0             	mov    eax,cr2
c00168e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00168ed:	0f 20 d8             	mov    eax,cr3
c00168f0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00168f4:	0f 20 e0             	mov    eax,cr4
c00168f7:	89 04 24             	mov    DWORD PTR [esp],eax
c00168fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168fe:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016901:	83 ec 08             	sub    esp,0x8
c0016904:	50                   	push   eax
c0016905:	68 c4 14 02 c0       	push   0xc00214c4
c001690a:	e8 e8 40 ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c001690f:	83 c4 10             	add    esp,0x10
c0016912:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016916:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0016919:	83 ec 08             	sub    esp,0x8
c001691c:	50                   	push   eax
c001691d:	68 b5 14 02 c0       	push   0xc00214b5
c0016922:	e8 d0 40 ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c0016927:	83 c4 10             	add    esp,0x10
c001692a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001692e:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0016931:	83 ec 08             	sub    esp,0x8
c0016934:	50                   	push   eax
c0016935:	68 c0 14 02 c0       	push   0xc00214c0
c001693a:	e8 b8 40 ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c001693f:	83 c4 10             	add    esp,0x10
c0016942:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016946:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016949:	83 ec 08             	sub    esp,0x8
c001694c:	50                   	push   eax
c001694d:	68 cf 14 02 c0       	push   0xc00214cf
c0016952:	e8 a0 40 ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c0016957:	83 c4 10             	add    esp,0x10
c001695a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001695e:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0016961:	83 ec 08             	sub    esp,0x8
c0016964:	50                   	push   eax
c0016965:	68 da 14 02 c0       	push   0xc00214da
c001696a:	e8 88 40 ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c001696f:	83 c4 10             	add    esp,0x10
c0016972:	83 ec 08             	sub    esp,0x8
c0016975:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016979:	68 e5 14 02 c0       	push   0xc00214e5
c001697e:	e8 74 40 ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c0016983:	83 c4 10             	add    esp,0x10
c0016986:	83 ec 08             	sub    esp,0x8
c0016989:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001698d:	68 f0 14 02 c0       	push   0xc00214f0
c0016992:	e8 60 40 ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c0016997:	83 c4 10             	add    esp,0x10
c001699a:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001699f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169a5:	83 ec 0c             	sub    esp,0xc
c00169a8:	50                   	push   eax
c00169a9:	e8 95 1d ff ff       	call   c0008743 <setActiveTerminal(VgaText*)>
c00169ae:	83 c4 10             	add    esp,0x10
c00169b1:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169b6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169bc:	83 ec 08             	sub    esp,0x8
c00169bf:	68 fb 14 02 c0       	push   0xc00214fb
c00169c4:	50                   	push   eax
c00169c5:	e8 c6 20 ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c00169ca:	83 c4 10             	add    esp,0x10
c00169cd:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169d2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169d8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00169dc:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c00169df:	83 ec 08             	sub    esp,0x8
c00169e2:	52                   	push   edx
c00169e3:	50                   	push   eax
c00169e4:	e8 61 20 ff ff       	call   c0008a4a <VgaText::putx(unsigned int)>
c00169e9:	83 c4 10             	add    esp,0x10
c00169ec:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169f1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169f7:	83 ec 08             	sub    esp,0x8
c00169fa:	68 09 15 02 c0       	push   0xc0021509
c00169ff:	50                   	push   eax
c0016a00:	e8 8b 20 ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0016a05:	83 c4 10             	add    esp,0x10
c0016a08:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a0d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a13:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0016a18:	8b 12                	mov    edx,DWORD PTR [edx]
c0016a1a:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0016a1d:	83 c2 0c             	add    edx,0xc
c0016a20:	83 ec 08             	sub    esp,0x8
c0016a23:	52                   	push   edx
c0016a24:	50                   	push   eax
c0016a25:	e8 66 20 ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0016a2a:	83 c4 10             	add    esp,0x10
c0016a2d:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a32:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a38:	83 ec 08             	sub    esp,0x8
c0016a3b:	68 12 15 02 c0       	push   0xc0021512
c0016a40:	50                   	push   eax
c0016a41:	e8 4a 20 ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0016a46:	83 c4 10             	add    esp,0x10
c0016a49:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a4e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a54:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016a58:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0016a5b:	83 ec 08             	sub    esp,0x8
c0016a5e:	52                   	push   edx
c0016a5f:	50                   	push   eax
c0016a60:	e8 e5 1f ff ff       	call   c0008a4a <VgaText::putx(unsigned int)>
c0016a65:	83 c4 10             	add    esp,0x10
c0016a68:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a6d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a73:	83 ec 08             	sub    esp,0x8
c0016a76:	68 1a 15 02 c0       	push   0xc002151a
c0016a7b:	50                   	push   eax
c0016a7c:	e8 0f 20 ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0016a81:	83 c4 10             	add    esp,0x10
c0016a84:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a89:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a8f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016a93:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0016a96:	83 ec 08             	sub    esp,0x8
c0016a99:	52                   	push   edx
c0016a9a:	50                   	push   eax
c0016a9b:	e8 aa 1f ff ff       	call   c0008a4a <VgaText::putx(unsigned int)>
c0016aa0:	83 c4 10             	add    esp,0x10
c0016aa3:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016aa8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016aae:	83 ec 08             	sub    esp,0x8
c0016ab1:	68 22 15 02 c0       	push   0xc0021522
c0016ab6:	50                   	push   eax
c0016ab7:	e8 d4 1f ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0016abc:	83 c4 10             	add    esp,0x10
c0016abf:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016ac4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016aca:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016ace:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0016ad1:	83 ec 08             	sub    esp,0x8
c0016ad4:	52                   	push   edx
c0016ad5:	50                   	push   eax
c0016ad6:	e8 6f 1f ff ff       	call   c0008a4a <VgaText::putx(unsigned int)>
c0016adb:	83 c4 10             	add    esp,0x10
c0016ade:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016ae3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016ae9:	83 ec 08             	sub    esp,0x8
c0016aec:	68 2a 15 02 c0       	push   0xc002152a
c0016af1:	50                   	push   eax
c0016af2:	e8 99 1f ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0016af7:	83 c4 10             	add    esp,0x10
c0016afa:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016aff:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b05:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016b09:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0016b0c:	83 ec 08             	sub    esp,0x8
c0016b0f:	52                   	push   edx
c0016b10:	50                   	push   eax
c0016b11:	e8 34 1f ff ff       	call   c0008a4a <VgaText::putx(unsigned int)>
c0016b16:	83 c4 10             	add    esp,0x10
c0016b19:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b1e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b24:	83 ec 08             	sub    esp,0x8
c0016b27:	68 32 15 02 c0       	push   0xc0021532
c0016b2c:	50                   	push   eax
c0016b2d:	e8 5e 1f ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0016b32:	83 c4 10             	add    esp,0x10
c0016b35:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b3a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b40:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016b44:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0016b47:	83 ec 08             	sub    esp,0x8
c0016b4a:	52                   	push   edx
c0016b4b:	50                   	push   eax
c0016b4c:	e8 f9 1e ff ff       	call   c0008a4a <VgaText::putx(unsigned int)>
c0016b51:	83 c4 10             	add    esp,0x10
c0016b54:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b59:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b5f:	83 ec 08             	sub    esp,0x8
c0016b62:	68 3a 15 02 c0       	push   0xc002153a
c0016b67:	50                   	push   eax
c0016b68:	e8 23 1f ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0016b6d:	83 c4 10             	add    esp,0x10
c0016b70:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b75:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b7b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016b7f:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016b82:	83 ec 08             	sub    esp,0x8
c0016b85:	52                   	push   edx
c0016b86:	50                   	push   eax
c0016b87:	e8 be 1e ff ff       	call   c0008a4a <VgaText::putx(unsigned int)>
c0016b8c:	83 c4 10             	add    esp,0x10
c0016b8f:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b94:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b9a:	83 ec 08             	sub    esp,0x8
c0016b9d:	68 42 15 02 c0       	push   0xc0021542
c0016ba2:	50                   	push   eax
c0016ba3:	e8 e8 1e ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0016ba8:	83 c4 10             	add    esp,0x10
c0016bab:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016bb0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016bb6:	83 ec 08             	sub    esp,0x8
c0016bb9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016bbd:	50                   	push   eax
c0016bbe:	e8 87 1e ff ff       	call   c0008a4a <VgaText::putx(unsigned int)>
c0016bc3:	83 c4 10             	add    esp,0x10
c0016bc6:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016bcb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016bd1:	83 ec 08             	sub    esp,0x8
c0016bd4:	68 4b 15 02 c0       	push   0xc002154b
c0016bd9:	50                   	push   eax
c0016bda:	e8 b1 1e ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0016bdf:	83 c4 10             	add    esp,0x10
c0016be2:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016be7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016bed:	83 ec 08             	sub    esp,0x8
c0016bf0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016bf4:	50                   	push   eax
c0016bf5:	e8 50 1e ff ff       	call   c0008a4a <VgaText::putx(unsigned int)>
c0016bfa:	83 c4 10             	add    esp,0x10
c0016bfd:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016c02:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016c08:	83 ec 08             	sub    esp,0x8
c0016c0b:	68 53 15 02 c0       	push   0xc0021553
c0016c10:	50                   	push   eax
c0016c11:	e8 7a 1e ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0016c16:	83 c4 10             	add    esp,0x10
c0016c19:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016c1e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016c24:	83 ec 08             	sub    esp,0x8
c0016c27:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016c2b:	50                   	push   eax
c0016c2c:	e8 19 1e ff ff       	call   c0008a4a <VgaText::putx(unsigned int)>
c0016c31:	83 c4 10             	add    esp,0x10
c0016c34:	fa                   	cli    
c0016c35:	f4                   	hlt    
c0016c36:	eb fe                	jmp    c0016c36 <displayDebugInfo(regs*)+0x35a>

c0016c38 <HalSystemIdle()>:
c0016c38:	56                   	push   esi
c0016c39:	53                   	push   ebx
c0016c3a:	83 ec 14             	sub    esp,0x14
c0016c3d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016c42:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016c48:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0016c4e:	83 e0 04             	and    eax,0x4
c0016c51:	0f b6 c0             	movzx  eax,al
c0016c54:	85 c0                	test   eax,eax
c0016c56:	0f 95 c0             	setne  al
c0016c59:	0f b6 c0             	movzx  eax,al
c0016c5c:	85 c0                	test   eax,eax
c0016c5e:	74 4c                	je     c0016cac <HalSystemIdle()+0x74>
c0016c60:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016c65:	83 ec 08             	sub    esp,0x8
c0016c68:	68 e1 00 00 00       	push   0xe1
c0016c6d:	50                   	push   eax
c0016c6e:	e8 45 04 ff ff       	call   c00070b8 <Computer::rdmsr(unsigned int)>
c0016c73:	83 c4 10             	add    esp,0x10
c0016c76:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016c7a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016c7e:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016c83:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016c87:	83 e2 02             	and    edx,0x2
c0016c8a:	89 d3                	mov    ebx,edx
c0016c8c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016c90:	83 e2 00             	and    edx,0x0
c0016c93:	89 d6                	mov    esi,edx
c0016c95:	56                   	push   esi
c0016c96:	53                   	push   ebx
c0016c97:	68 e1 00 00 00       	push   0xe1
c0016c9c:	50                   	push   eax
c0016c9d:	e8 42 04 ff ff       	call   c00070e4 <Computer::wrmsr(unsigned int, unsigned long long)>
c0016ca2:	83 c4 10             	add    esp,0x10
c0016ca5:	e8 ea 94 fe ff       	call   c0000194 <doTPAUSE>
c0016caa:	eb 01                	jmp    c0016cad <HalSystemIdle()+0x75>
c0016cac:	f4                   	hlt    
c0016cad:	90                   	nop
c0016cae:	83 c4 14             	add    esp,0x14
c0016cb1:	5b                   	pop    ebx
c0016cb2:	5e                   	pop    esi
c0016cb3:	c3                   	ret    

c0016cb4 <displayProgramFault(char const*)>:
c0016cb4:	83 ec 0c             	sub    esp,0xc
c0016cb7:	83 ec 0c             	sub    esp,0xc
c0016cba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cbe:	e8 34 3d ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c0016cc3:	83 c4 10             	add    esp,0x10
c0016cc6:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016ccb:	8b 00                	mov    eax,DWORD PTR [eax]
c0016ccd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016cd0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016cd6:	85 c0                	test   eax,eax
c0016cd8:	74 21                	je     c0016cfb <displayProgramFault(char const*)+0x47>
c0016cda:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016cdf:	8b 00                	mov    eax,DWORD PTR [eax]
c0016ce1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016ce4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016cea:	6a 04                	push   0x4
c0016cec:	6a 0f                	push   0xf
c0016cee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016cf2:	50                   	push   eax
c0016cf3:	e8 0a 1e ff ff       	call   c0008b02 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0016cf8:	83 c4 10             	add    esp,0x10
c0016cfb:	90                   	nop
c0016cfc:	83 c4 0c             	add    esp,0xc
c0016cff:	c3                   	ret    

c0016d00 <gpFault(regs*, void*)>:
c0016d00:	83 ec 1c             	sub    esp,0x1c
c0016d03:	c7 05 14 82 02 c0 a5 61 01 c0 	mov    DWORD PTR ds:0xc0028214,0xc00161a5
c0016d0d:	a1 14 82 02 c0       	mov    eax,ds:0xc0028214
c0016d12:	85 c0                	test   eax,eax
c0016d14:	74 1e                	je     c0016d34 <gpFault(regs*, void*)+0x34>
c0016d16:	a1 14 82 02 c0       	mov    eax,ds:0xc0028214
c0016d1b:	83 ec 0c             	sub    esp,0xc
c0016d1e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016d22:	ff d0                	call   eax
c0016d24:	83 c4 10             	add    esp,0x10
c0016d27:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016d2b:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016d30:	85 c0                	test   eax,eax
c0016d32:	75 2e                	jne    c0016d62 <gpFault(regs*, void*)+0x62>
c0016d34:	83 ec 0c             	sub    esp,0xc
c0016d37:	68 5b 15 02 c0       	push   0xc002155b
c0016d3c:	e8 73 ff ff ff       	call   c0016cb4 <displayProgramFault(char const*)>
c0016d41:	83 c4 10             	add    esp,0x10
c0016d44:	83 ec 0c             	sub    esp,0xc
c0016d47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016d4b:	e8 8c fb ff ff       	call   c00168dc <displayDebugInfo(regs*)>
c0016d50:	83 c4 10             	add    esp,0x10
c0016d53:	83 ec 0c             	sub    esp,0xc
c0016d56:	6a 00                	push   0x0
c0016d58:	e8 0b ee ff ff       	call   c0015b68 <Thr::terminateFromIRQ(int)>
c0016d5d:	83 c4 10             	add    esp,0x10
c0016d60:	eb 01                	jmp    c0016d63 <gpFault(regs*, void*)+0x63>
c0016d62:	90                   	nop
c0016d63:	83 c4 1c             	add    esp,0x1c
c0016d66:	c3                   	ret    

c0016d67 <pgFault(regs*, void*)>:
c0016d67:	83 ec 1c             	sub    esp,0x1c
c0016d6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d6e:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0016d71:	0f 20 d0             	mov    eax,cr2
c0016d74:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016d78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016d7c:	83 ec 04             	sub    esp,0x4
c0016d7f:	52                   	push   edx
c0016d80:	50                   	push   eax
c0016d81:	68 38 16 02 c0       	push   0xc0021638
c0016d86:	e8 6c 3c ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c0016d8b:	83 c4 10             	add    esp,0x10
c0016d8e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016d93:	8b 00                	mov    eax,DWORD PTR [eax]
c0016d95:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016d98:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0016d9e:	0f 20 d2             	mov    edx,cr2
c0016da1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016da5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016da9:	83 ec 08             	sub    esp,0x8
c0016dac:	52                   	push   edx
c0016dad:	50                   	push   eax
c0016dae:	e8 a1 37 ff ff       	call   c000a554 <VAS::tryLoadBackOffDisk(unsigned long)>
c0016db3:	83 c4 10             	add    esp,0x10
c0016db6:	0f b6 c0             	movzx  eax,al
c0016db9:	85 c0                	test   eax,eax
c0016dbb:	75 2e                	jne    c0016deb <pgFault(regs*, void*)+0x84>
c0016dbd:	83 ec 0c             	sub    esp,0xc
c0016dc0:	68 74 15 02 c0       	push   0xc0021574
c0016dc5:	e8 ea fe ff ff       	call   c0016cb4 <displayProgramFault(char const*)>
c0016dca:	83 c4 10             	add    esp,0x10
c0016dcd:	83 ec 0c             	sub    esp,0xc
c0016dd0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016dd4:	e8 03 fb ff ff       	call   c00168dc <displayDebugInfo(regs*)>
c0016dd9:	83 c4 10             	add    esp,0x10
c0016ddc:	83 ec 0c             	sub    esp,0xc
c0016ddf:	6a 00                	push   0x0
c0016de1:	e8 82 ed ff ff       	call   c0015b68 <Thr::terminateFromIRQ(int)>
c0016de6:	83 c4 10             	add    esp,0x10
c0016de9:	eb 01                	jmp    c0016dec <pgFault(regs*, void*)+0x85>
c0016deb:	90                   	nop
c0016dec:	83 c4 1c             	add    esp,0x1c
c0016def:	c3                   	ret    

c0016df0 <otherISRHandler(regs*, void*)>:
c0016df0:	83 ec 0c             	sub    esp,0xc
c0016df3:	83 ec 0c             	sub    esp,0xc
c0016df6:	68 60 16 02 c0       	push   0xc0021660
c0016dfb:	e8 b4 fe ff ff       	call   c0016cb4 <displayProgramFault(char const*)>
c0016e00:	83 c4 10             	add    esp,0x10
c0016e03:	83 ec 0c             	sub    esp,0xc
c0016e06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e0a:	e8 cd fa ff ff       	call   c00168dc <displayDebugInfo(regs*)>
c0016e0f:	83 c4 10             	add    esp,0x10
c0016e12:	83 ec 0c             	sub    esp,0xc
c0016e15:	6a 00                	push   0x0
c0016e17:	e8 4c ed ff ff       	call   c0015b68 <Thr::terminateFromIRQ(int)>
c0016e1c:	83 c4 10             	add    esp,0x10
c0016e1f:	90                   	nop
c0016e20:	83 c4 0c             	add    esp,0xc
c0016e23:	c3                   	ret    

c0016e24 <opcodeFault(regs*, void*)>:
c0016e24:	55                   	push   ebp
c0016e25:	89 e5                	mov    ebp,esp
c0016e27:	83 ec 08             	sub    esp,0x8
c0016e2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016e2d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016e30:	83 ec 08             	sub    esp,0x8
c0016e33:	50                   	push   eax
c0016e34:	68 7f 15 02 c0       	push   0xc002157f
c0016e39:	e8 b9 3b ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c0016e3e:	83 c4 10             	add    esp,0x10
c0016e41:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016e46:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016e4c:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0016e52:	0f b6 c0             	movzx  eax,al
c0016e55:	85 c0                	test   eax,eax
c0016e57:	74 21                	je     c0016e7a <opcodeFault(regs*, void*)+0x56>
c0016e59:	83 ec 0c             	sub    esp,0xc
c0016e5c:	68 88 16 02 c0       	push   0xc0021688
c0016e61:	e8 91 3b ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c0016e66:	83 c4 10             	add    esp,0x10
c0016e69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016e6c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016e6f:	8d 50 19             	lea    edx,[eax+0x19]
c0016e72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016e75:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016e78:	eb 2b                	jmp    c0016ea5 <opcodeFault(regs*, void*)+0x81>
c0016e7a:	83 ec 0c             	sub    esp,0xc
c0016e7d:	68 8d 15 02 c0       	push   0xc002158d
c0016e82:	e8 2d fe ff ff       	call   c0016cb4 <displayProgramFault(char const*)>
c0016e87:	83 c4 10             	add    esp,0x10
c0016e8a:	83 ec 0c             	sub    esp,0xc
c0016e8d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0016e90:	e8 47 fa ff ff       	call   c00168dc <displayDebugInfo(regs*)>
c0016e95:	83 c4 10             	add    esp,0x10
c0016e98:	83 ec 0c             	sub    esp,0xc
c0016e9b:	6a 00                	push   0x0
c0016e9d:	e8 c6 ec ff ff       	call   c0015b68 <Thr::terminateFromIRQ(int)>
c0016ea2:	83 c4 10             	add    esp,0x10
c0016ea5:	c9                   	leave  
c0016ea6:	c3                   	ret    

c0016ea7 <i386SaveCoprocessor(void*)>:
c0016ea7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016eab:	83 c0 3f             	add    eax,0x3f
c0016eae:	83 e0 c0             	and    eax,0xffffffc0
c0016eb1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016eb5:	ff 25 10 82 02 c0    	jmp    DWORD PTR ds:0xc0028210

c0016ebb <i386LoadCoprocessor(void*)>:
c0016ebb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016ebf:	83 c0 3f             	add    eax,0x3f
c0016ec2:	83 e0 c0             	and    eax,0xffffffc0
c0016ec5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016ec9:	ff 25 0c 82 02 c0    	jmp    DWORD PTR ds:0xc002820c

c0016ecf <x87EmulHandler(regs*, void*)>:
c0016ecf:	53                   	push   ebx
c0016ed0:	83 ec 08             	sub    esp,0x8
c0016ed3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ed8:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0016edc:	74 10                	je     c0016eee <x87EmulHandler(regs*, void*)+0x1f>
c0016ede:	83 ec 0c             	sub    esp,0xc
c0016ee1:	68 9a 15 02 c0       	push   0xc002159a
c0016ee6:	e8 3c 9a ff ff       	call   c0010927 <KePanic(char const*)>
c0016eeb:	83 c4 10             	add    esp,0x10
c0016eee:	0f 20 c0             	mov    eax,cr0
c0016ef1:	a8 08                	test   al,0x8
c0016ef3:	74 59                	je     c0016f4e <x87EmulHandler(regs*, void*)+0x7f>
c0016ef5:	0f 06                	clts   
c0016ef7:	a1 08 82 02 c0       	mov    eax,ds:0xc0028208
c0016efc:	85 c0                	test   eax,eax
c0016efe:	74 0e                	je     c0016f0e <x87EmulHandler(regs*, void*)+0x3f>
c0016f00:	83 ec 0c             	sub    esp,0xc
c0016f03:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0016f06:	e8 9c ff ff ff       	call   c0016ea7 <i386SaveCoprocessor(void*)>
c0016f0b:	83 c4 10             	add    esp,0x10
c0016f0e:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0016f14:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0016f18:	75 12                	jne    c0016f2c <x87EmulHandler(regs*, void*)+0x5d>
c0016f1a:	83 ec 0c             	sub    esp,0xc
c0016f1d:	68 40 02 00 00       	push   0x240
c0016f22:	e8 87 0b ff ff       	call   c0007aae <malloc>
c0016f27:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0016f2a:	eb 10                	jmp    c0016f3c <x87EmulHandler(regs*, void*)+0x6d>
c0016f2c:	83 ec 0c             	sub    esp,0xc
c0016f2f:	a1 08 82 02 c0       	mov    eax,ds:0xc0028208
c0016f34:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0016f37:	e8 7f ff ff ff       	call   c0016ebb <i386LoadCoprocessor(void*)>
c0016f3c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f41:	83 c4 10             	add    esp,0x10
c0016f44:	a3 08 82 02 c0       	mov    ds:0xc0028208,eax
c0016f49:	83 c4 08             	add    esp,0x8
c0016f4c:	5b                   	pop    ebx
c0016f4d:	c3                   	ret    
c0016f4e:	83 ec 0c             	sub    esp,0xc
c0016f51:	68 ae 15 02 c0       	push   0xc00215ae
c0016f56:	e8 9c 3a ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c0016f5b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016f63:	83 c4 18             	add    esp,0x18
c0016f66:	5b                   	pop    ebx
c0016f67:	e9 fc eb ff ff       	jmp    c0015b68 <Thr::terminateFromIRQ(int)>

c0016f6c <HalInitialiseCoprocessor()>:
c0016f6c:	83 ec 10             	sub    esp,0x10
c0016f6f:	c7 05 08 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028208,0x0
c0016f79:	6a 00                	push   0x0
c0016f7b:	68 cf 6e 01 c0       	push   0xc0016ecf
c0016f80:	6a 07                	push   0x7
c0016f82:	e8 db 53 ff ff       	call   c000c362 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016f87:	e8 d4 6f 00 00       	call   c001df60 <avxDetect>
c0016f8c:	83 c4 10             	add    esp,0x10
c0016f8f:	85 c0                	test   eax,eax
c0016f91:	74 1c                	je     c0016faf <HalInitialiseCoprocessor()+0x43>
c0016f93:	c7 05 10 82 02 c0 8a df 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc001df8a
c0016f9d:	c7 05 0c 82 02 c0 9b df 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001df9b
c0016fa7:	83 c4 0c             	add    esp,0xc
c0016faa:	e9 fd 6f 00 00       	jmp    c001dfac <avxInit>
c0016faf:	e8 3c 73 00 00       	call   c001e2f0 <absolutelyNoChanceInHell>
c0016fb4:	85 c0                	test   eax,eax
c0016fb6:	74 1c                	je     c0016fd4 <HalInitialiseCoprocessor()+0x68>
c0016fb8:	c7 05 10 82 02 c0 08 e3 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc001e308
c0016fc2:	c7 05 0c 82 02 c0 10 e3 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001e310
c0016fcc:	83 c4 0c             	add    esp,0xc
c0016fcf:	e9 44 73 00 00       	jmp    c001e318 <sseInit>
c0016fd4:	e8 5d 73 00 00       	call   c001e336 <x87Detect>
c0016fd9:	85 c0                	test   eax,eax
c0016fdb:	74 1c                	je     c0016ff9 <HalInitialiseCoprocessor()+0x8d>
c0016fdd:	c7 05 10 82 02 c0 51 e3 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc001e351
c0016fe7:	c7 05 0c 82 02 c0 58 e3 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001e358
c0016ff1:	83 c4 0c             	add    esp,0xc
c0016ff4:	e9 66 73 00 00       	jmp    c001e35f <x87Init>
c0016ff9:	c7 05 10 82 02 c0 a9 68 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc00168a9
c0017003:	c7 05 0c 82 02 c0 a9 68 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc00168a9
c001700d:	0f 20 c0             	mov    eax,cr0
c0017010:	83 c8 04             	or     eax,0x4
c0017013:	0f 22 c0             	mov    cr0,eax
c0017016:	83 c4 0c             	add    esp,0xc
c0017019:	c3                   	ret    

c001701a <HalPanic(char const*)>:
c001701a:	53                   	push   ebx
c001701b:	83 ec 10             	sub    esp,0x10
c001701e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017022:	fa                   	cli    
c0017023:	53                   	push   ebx
c0017024:	68 c4 15 02 c0       	push   0xc00215c4
c0017029:	e8 c9 39 ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c001702e:	a1 04 82 02 c0       	mov    eax,ds:0xc0028204
c0017033:	83 c4 10             	add    esp,0x10
c0017036:	85 c0                	test   eax,eax
c0017038:	74 09                	je     c0017043 <HalPanic(char const*)+0x29>
c001703a:	83 ec 0c             	sub    esp,0xc
c001703d:	53                   	push   ebx
c001703e:	ff d0                	call   eax
c0017040:	83 c4 10             	add    esp,0x10
c0017043:	50                   	push   eax
c0017044:	6a 01                	push   0x1
c0017046:	6a 0f                	push   0xf
c0017048:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001704e:	e8 4b 15 ff ff       	call   c000859e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017053:	5a                   	pop    edx
c0017054:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001705a:	e8 2f 17 ff ff       	call   c000878e <VgaText::clearScreen()>
c001705f:	59                   	pop    ecx
c0017060:	58                   	pop    eax
c0017061:	68 a4 fd 01 c0       	push   0xc001fda4
c0017066:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001706c:	e8 65 15 ff ff       	call   c00085d6 <VgaText::setTitle(char*)>
c0017071:	83 c4 0c             	add    esp,0xc
c0017074:	6a 01                	push   0x1
c0017076:	6a 0f                	push   0xf
c0017078:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001707e:	e8 1b 15 ff ff       	call   c000859e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017083:	58                   	pop    eax
c0017084:	5a                   	pop    edx
c0017085:	68 dd 15 02 c0       	push   0xc00215dd
c001708a:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017090:	e8 fb 19 ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0017095:	83 c4 0c             	add    esp,0xc
c0017098:	6a 0f                	push   0xf
c001709a:	6a 01                	push   0x1
c001709c:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c00170a2:	e8 f7 14 ff ff       	call   c000859e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00170a7:	59                   	pop    ecx
c00170a8:	58                   	pop    eax
c00170a9:	68 e6 15 02 c0       	push   0xc00215e6
c00170ae:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c00170b4:	e8 d7 19 ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c00170b9:	83 c4 0c             	add    esp,0xc
c00170bc:	6a 01                	push   0x1
c00170be:	6a 0f                	push   0xf
c00170c0:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c00170c6:	e8 d3 14 ff ff       	call   c000859e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00170cb:	58                   	pop    eax
c00170cc:	5a                   	pop    edx
c00170cd:	68 2a 16 02 c0       	push   0xc002162a
c00170d2:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c00170d8:	e8 b3 19 ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c00170dd:	59                   	pop    ecx
c00170de:	58                   	pop    eax
c00170df:	68 f3 15 02 c0       	push   0xc00215f3
c00170e4:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c00170ea:	e8 a1 19 ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c00170ef:	58                   	pop    eax
c00170f0:	5a                   	pop    edx
c00170f1:	68 2d 16 02 c0       	push   0xc002162d
c00170f6:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c00170fc:	e8 8f 19 ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0017101:	59                   	pop    ecx
c0017102:	58                   	pop    eax
c0017103:	53                   	push   ebx
c0017104:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001710a:	e8 81 19 ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c001710f:	58                   	pop    eax
c0017110:	5a                   	pop    edx
c0017111:	68 2a 16 02 c0       	push   0xc002162a
c0017116:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001711c:	e8 6f 19 ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0017121:	83 c4 10             	add    esp,0x10
c0017124:	eb fe                	jmp    c0017124 <HalPanic(char const*)+0x10a>

c0017126 <HalQueryPerformanceCounter()>:
c0017126:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001712b:	31 d2                	xor    edx,edx
c001712d:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0017133:	31 c0                	xor    eax,eax
c0017135:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c001713c:	74 02                	je     c0017140 <HalQueryPerformanceCounter()+0x1a>
c001713e:	0f 31                	rdtsc  
c0017140:	c3                   	ret    

c0017141 <HalInitialise()>:
c0017141:	53                   	push   ebx
c0017142:	83 ec 08             	sub    esp,0x8
c0017145:	e8 48 54 ff ff       	call   c000c592 <setupINTS()>
c001714a:	80 3d 80 77 02 c0 00 	cmp    BYTE PTR ds:0xc0027780,0x0
c0017151:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017156:	75 0f                	jne    c0017167 <HalInitialise()+0x26>
c0017158:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001715e:	83 e2 fe             	and    edx,0xfffffffe
c0017161:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017167:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001716d:	c6 05 00 82 02 c0 00 	mov    BYTE PTR ds:0xc0028200,0x0
c0017174:	83 e2 fe             	and    edx,0xfffffffe
c0017177:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001717d:	e8 9e 02 00 00       	call   c0017420 <picOpen()>
c0017182:	80 3d 00 82 02 c0 00 	cmp    BYTE PTR ds:0xc0028200,0x0
c0017189:	74 0a                	je     c0017195 <HalInitialise()+0x54>
c001718b:	e8 e0 01 00 00       	call   c0017370 <picDisable()>
c0017190:	e8 3d 67 00 00       	call   c001d8d2 <apicOpen()>
c0017195:	bb 0f 00 00 00       	mov    ebx,0xf
c001719a:	50                   	push   eax
c001719b:	6a 00                	push   0x0
c001719d:	68 f0 6d 01 c0       	push   0xc0016df0
c00171a2:	6a 00                	push   0x0
c00171a4:	e8 b9 51 ff ff       	call   c000c362 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171a9:	83 c4 0c             	add    esp,0xc
c00171ac:	6a 00                	push   0x0
c00171ae:	68 f0 6d 01 c0       	push   0xc0016df0
c00171b3:	6a 01                	push   0x1
c00171b5:	e8 a8 51 ff ff       	call   c000c362 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171ba:	83 c4 0c             	add    esp,0xc
c00171bd:	6a 00                	push   0x0
c00171bf:	68 aa 68 01 c0       	push   0xc00168aa
c00171c4:	6a 02                	push   0x2
c00171c6:	e8 97 51 ff ff       	call   c000c362 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171cb:	83 c4 0c             	add    esp,0xc
c00171ce:	6a 00                	push   0x0
c00171d0:	68 f0 6d 01 c0       	push   0xc0016df0
c00171d5:	6a 03                	push   0x3
c00171d7:	e8 86 51 ff ff       	call   c000c362 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171dc:	83 c4 0c             	add    esp,0xc
c00171df:	6a 00                	push   0x0
c00171e1:	68 f0 6d 01 c0       	push   0xc0016df0
c00171e6:	6a 04                	push   0x4
c00171e8:	e8 75 51 ff ff       	call   c000c362 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171ed:	83 c4 0c             	add    esp,0xc
c00171f0:	6a 00                	push   0x0
c00171f2:	68 f0 6d 01 c0       	push   0xc0016df0
c00171f7:	6a 05                	push   0x5
c00171f9:	e8 64 51 ff ff       	call   c000c362 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171fe:	83 c4 0c             	add    esp,0xc
c0017201:	6a 00                	push   0x0
c0017203:	68 24 6e 01 c0       	push   0xc0016e24
c0017208:	6a 06                	push   0x6
c001720a:	e8 53 51 ff ff       	call   c000c362 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001720f:	83 c4 0c             	add    esp,0xc
c0017212:	6a 00                	push   0x0
c0017214:	68 c3 68 01 c0       	push   0xc00168c3
c0017219:	6a 08                	push   0x8
c001721b:	e8 42 51 ff ff       	call   c000c362 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017220:	83 c4 0c             	add    esp,0xc
c0017223:	6a 00                	push   0x0
c0017225:	68 f0 6d 01 c0       	push   0xc0016df0
c001722a:	6a 09                	push   0x9
c001722c:	e8 31 51 ff ff       	call   c000c362 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017231:	83 c4 0c             	add    esp,0xc
c0017234:	6a 00                	push   0x0
c0017236:	68 f0 6d 01 c0       	push   0xc0016df0
c001723b:	6a 0a                	push   0xa
c001723d:	e8 20 51 ff ff       	call   c000c362 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017242:	83 c4 0c             	add    esp,0xc
c0017245:	6a 00                	push   0x0
c0017247:	68 f0 6d 01 c0       	push   0xc0016df0
c001724c:	6a 0b                	push   0xb
c001724e:	e8 0f 51 ff ff       	call   c000c362 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017253:	83 c4 0c             	add    esp,0xc
c0017256:	6a 00                	push   0x0
c0017258:	68 00 6d 01 c0       	push   0xc0016d00
c001725d:	6a 0d                	push   0xd
c001725f:	e8 fe 50 ff ff       	call   c000c362 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017264:	83 c4 0c             	add    esp,0xc
c0017267:	6a 00                	push   0x0
c0017269:	68 67 6d 01 c0       	push   0xc0016d67
c001726e:	6a 0e                	push   0xe
c0017270:	e8 ed 50 ff ff       	call   c000c362 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017275:	83 c4 10             	add    esp,0x10
c0017278:	50                   	push   eax
c0017279:	6a 00                	push   0x0
c001727b:	68 f0 6d 01 c0       	push   0xc0016df0
c0017280:	53                   	push   ebx
c0017281:	43                   	inc    ebx
c0017282:	e8 db 50 ff ff       	call   c000c362 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017287:	83 c4 10             	add    esp,0x10
c001728a:	83 fb 1e             	cmp    ebx,0x1e
c001728d:	75 e9                	jne    c0017278 <HalInitialise()+0x137>
c001728f:	50                   	push   eax
c0017290:	6a 00                	push   0x0
c0017292:	68 02 1c 01 c0       	push   0xc0011c02
c0017297:	6a 60                	push   0x60
c0017299:	e8 c4 50 ff ff       	call   c000c362 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001729e:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00172a3:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00172ad:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c00172b4:	e8 f5 07 ff ff       	call   c0007aae <malloc>
c00172b9:	89 04 24             	mov    DWORD PTR [esp],eax
c00172bc:	89 c3                	mov    ebx,eax
c00172be:	e8 3b 09 00 00       	call   c0017bfe <RTC::RTC()>
c00172c3:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c00172cd:	5a                   	pop    edx
c00172ce:	59                   	pop    ecx
c00172cf:	53                   	push   ebx
c00172d0:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00172d6:	e8 53 4b ff ff       	call   c000be2e <Device::addChild(Device*)>
c00172db:	8b 03                	mov    eax,DWORD PTR [ebx]
c00172dd:	6a 00                	push   0x0
c00172df:	6a 00                	push   0x0
c00172e1:	6a 00                	push   0x0
c00172e3:	53                   	push   ebx
c00172e4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00172e7:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00172ec:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c00172f2:	83 c4 28             	add    esp,0x28
c00172f5:	5b                   	pop    ebx
c00172f6:	c3                   	ret    

c00172f7 <HalMakeBeep(int)>:
c00172f7:	53                   	push   ebx
c00172f8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00172fc:	85 db                	test   ebx,ebx
c00172fe:	75 07                	jne    c0017307 <HalMakeBeep(int)+0x10>
c0017300:	e4 61                	in     al,0x61
c0017302:	83 e0 fc             	and    eax,0xfffffffc
c0017305:	eb 26                	jmp    c001732d <HalMakeBeep(int)+0x36>
c0017307:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001730c:	99                   	cdq    
c001730d:	f7 fb                	idiv   ebx
c001730f:	89 c1                	mov    ecx,eax
c0017311:	b0 b6                	mov    al,0xb6
c0017313:	e6 43                	out    0x43,al
c0017315:	88 c8                	mov    al,cl
c0017317:	e6 42                	out    0x42,al
c0017319:	89 c8                	mov    eax,ecx
c001731b:	c1 e8 08             	shr    eax,0x8
c001731e:	e6 42                	out    0x42,al
c0017320:	e4 61                	in     al,0x61
c0017322:	89 c2                	mov    edx,eax
c0017324:	83 ca 03             	or     edx,0x3
c0017327:	38 d0                	cmp    al,dl
c0017329:	74 04                	je     c001732f <HalMakeBeep(int)+0x38>
c001732b:	88 d0                	mov    al,dl
c001732d:	e6 61                	out    0x61,al
c001732f:	5b                   	pop    ebx
c0017330:	c3                   	ret    

c0017331 <HalGetRand()>:
c0017331:	31 c0                	xor    eax,eax
c0017333:	c3                   	ret    

c0017334 <HalEndOfInterrupt(int)>:
c0017334:	80 3d 00 82 02 c0 00 	cmp    BYTE PTR ds:0xc0028200,0x0
c001733b:	74 23                	je     c0017360 <HalEndOfInterrupt(int)+0x2c>
c001733d:	83 ec 14             	sub    esp,0x14
c0017340:	6a 1b                	push   0x1b
c0017342:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017348:	e8 6b fd fe ff       	call   c00070b8 <Computer::rdmsr(unsigned int)>
c001734d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017352:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001735c:	83 c4 1c             	add    esp,0x1c
c001735f:	c3                   	ret    
c0017360:	e9 3f 02 00 00       	jmp    c00175a4 <picEOI(int)>

c0017365 <HalRestart()>:
c0017365:	c3                   	ret    

c0017366 <HalShutdown()>:
c0017366:	c3                   	ret    

c0017367 <HalSleep()>:
c0017367:	c3                   	ret    

c0017368 <picIoWait()>:
c0017368:	eb 00                	jmp    c001736a <picIoWait()+0x2>
c001736a:	eb 00                	jmp    c001736c <picIoWait()+0x4>
c001736c:	90                   	nop
c001736d:	c3                   	ret    
c001736e:	66 90                	xchg   ax,ax

c0017370 <picDisable()>:
c0017370:	83 ec 10             	sub    esp,0x10
c0017373:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001737a:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001737f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017383:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0017388:	ee                   	out    dx,al
c0017389:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0017390:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0017395:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017399:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001739e:	ee                   	out    dx,al
c001739f:	90                   	nop
c00173a0:	83 c4 10             	add    esp,0x10
c00173a3:	c3                   	ret    

c00173a4 <picGetIRQReg(int)>:
c00173a4:	83 ec 10             	sub    esp,0x10
c00173a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00173ab:	0f b6 c0             	movzx  eax,al
c00173ae:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00173b5:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c00173b9:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00173bd:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00173c2:	ee                   	out    dx,al
c00173c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00173c7:	0f b6 c0             	movzx  eax,al
c00173ca:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00173d1:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00173d5:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00173d9:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00173de:	ee                   	out    dx,al
c00173df:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c00173e6:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00173eb:	89 c2                	mov    edx,eax
c00173ed:	ec                   	in     al,dx
c00173ee:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00173f2:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00173f6:	0f b6 c0             	movzx  eax,al
c00173f9:	c1 e0 08             	shl    eax,0x8
c00173fc:	89 c1                	mov    ecx,eax
c00173fe:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0017405:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001740a:	89 c2                	mov    edx,eax
c001740c:	ec                   	in     al,dx
c001740d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0017411:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017415:	0f b6 c0             	movzx  eax,al
c0017418:	09 c8                	or     eax,ecx
c001741a:	83 c4 10             	add    esp,0x10
c001741d:	c3                   	ret    
c001741e:	66 90                	xchg   ax,ax

c0017420 <picOpen()>:
c0017420:	83 ec 50             	sub    esp,0x50
c0017423:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001742a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001742f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017433:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017437:	ee                   	out    dx,al
c0017438:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001743f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0017444:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0017448:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001744c:	ee                   	out    dx,al
c001744d:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0017455:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c001745d:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0017464:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017468:	89 c2                	mov    edx,eax
c001746a:	ec                   	in     al,dx
c001746b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001746f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0017473:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0017477:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001747e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017482:	89 c2                	mov    edx,eax
c0017484:	ec                   	in     al,dx
c0017485:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017489:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001748d:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0017491:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0017498:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c001749d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00174a1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00174a5:	ee                   	out    dx,al
c00174a6:	e8 bd fe ff ff       	call   c0017368 <picIoWait()>
c00174ab:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c00174b2:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c00174b7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00174bb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00174bf:	ee                   	out    dx,al
c00174c0:	e8 a3 fe ff ff       	call   c0017368 <picIoWait()>
c00174c5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00174c9:	0f b6 c0             	movzx  eax,al
c00174cc:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c00174d3:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c00174d7:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00174db:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00174df:	ee                   	out    dx,al
c00174e0:	e8 83 fe ff ff       	call   c0017368 <picIoWait()>
c00174e5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00174e9:	0f b6 c0             	movzx  eax,al
c00174ec:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c00174f3:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00174f7:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c00174fb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00174ff:	ee                   	out    dx,al
c0017500:	e8 63 fe ff ff       	call   c0017368 <picIoWait()>
c0017505:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001750c:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0017511:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0017515:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017519:	ee                   	out    dx,al
c001751a:	e8 49 fe ff ff       	call   c0017368 <picIoWait()>
c001751f:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0017526:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001752b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001752f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017533:	ee                   	out    dx,al
c0017534:	e8 2f fe ff ff       	call   c0017368 <picIoWait()>
c0017539:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0017540:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0017545:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0017549:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001754d:	ee                   	out    dx,al
c001754e:	e8 15 fe ff ff       	call   c0017368 <picIoWait()>
c0017553:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001755a:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001755f:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0017563:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017567:	ee                   	out    dx,al
c0017568:	e8 fb fd ff ff       	call   c0017368 <picIoWait()>
c001756d:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0017572:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0017579:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c001757d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0017581:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017585:	ee                   	out    dx,al
c0017586:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001758b:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0017592:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0017596:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001759a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001759e:	ee                   	out    dx,al
c001759f:	90                   	nop
c00175a0:	83 c4 50             	add    esp,0x50
c00175a3:	c3                   	ret    

c00175a4 <picEOI(int)>:
c00175a4:	83 ec 10             	sub    esp,0x10
c00175a7:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00175ac:	75 1e                	jne    c00175cc <picEOI(int)+0x28>
c00175ae:	6a 0b                	push   0xb
c00175b0:	e8 ef fd ff ff       	call   c00173a4 <picGetIRQReg(int)>
c00175b5:	83 c4 04             	add    esp,0x4
c00175b8:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00175bd:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c00175c2:	25 80 00 00 00       	and    eax,0x80
c00175c7:	74 73                	je     c001763c <picEOI(int)+0x98>
c00175c9:	8d 76 00             	lea    esi,[esi+0x0]
c00175cc:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00175d1:	75 31                	jne    c0017604 <picEOI(int)+0x60>
c00175d3:	6a 0b                	push   0xb
c00175d5:	e8 ca fd ff ff       	call   c00173a4 <picGetIRQReg(int)>
c00175da:	83 c4 04             	add    esp,0x4
c00175dd:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00175e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00175e6:	98                   	cwde   
c00175e7:	85 c0                	test   eax,eax
c00175e9:	78 19                	js     c0017604 <picEOI(int)+0x60>
c00175eb:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c00175f2:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c00175f7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00175fb:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0017600:	ee                   	out    dx,al
c0017601:	eb 3d                	jmp    c0017640 <picEOI(int)+0x9c>
c0017603:	90                   	nop
c0017604:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0017609:	7e 19                	jle    c0017624 <picEOI(int)+0x80>
c001760b:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0017612:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0017617:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001761b:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0017620:	ee                   	out    dx,al
c0017621:	8d 76 00             	lea    esi,[esi+0x0]
c0017624:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001762b:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0017630:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0017634:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0017639:	ee                   	out    dx,al
c001763a:	eb 04                	jmp    c0017640 <picEOI(int)+0x9c>
c001763c:	90                   	nop
c001763d:	8d 76 00             	lea    esi,[esi+0x0]
c0017640:	83 c4 10             	add    esp,0x10
c0017643:	c3                   	ret    

c0017644 <RTC::open(int, int, void*)>:
c0017644:	31 c0                	xor    eax,eax
c0017646:	c3                   	ret    
c0017647:	90                   	nop

c0017648 <RTC::close(int, int, void*)>:
c0017648:	31 c0                	xor    eax,eax
c001764a:	c3                   	ret    
c001764b:	90                   	nop

c001764c <RTC::timeInSecondsUTC()>:
c001764c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017650:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017656:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001765c:	c3                   	ret    
c001765d:	90                   	nop

c001765e <RTC::timeInDatetimeUTC()>:
c001765e:	53                   	push   ebx
c001765f:	83 ec 14             	sub    esp,0x14
c0017662:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017666:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001766a:	8b 10                	mov    edx,DWORD PTR [eax]
c001766c:	50                   	push   eax
c001766d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0017670:	83 c4 0c             	add    esp,0xc
c0017673:	52                   	push   edx
c0017674:	50                   	push   eax
c0017675:	53                   	push   ebx
c0017676:	e8 27 45 ff ff       	call   c000bba2 <secondsToDatetime(unsigned long long)>
c001767b:	89 d8                	mov    eax,ebx
c001767d:	83 c4 14             	add    esp,0x14
c0017680:	5b                   	pop    ebx
c0017681:	c2 04 00             	ret    0x4

c0017684 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0017684:	56                   	push   esi
c0017685:	53                   	push   ebx
c0017686:	83 ec 14             	sub    esp,0x14
c0017689:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001768d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001768f:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0017692:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017696:	52                   	push   edx
c0017697:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001769b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001769f:	50                   	push   eax
c00176a0:	e8 fd 44 ff ff       	call   c000bba2 <secondsToDatetime(unsigned long long)>
c00176a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00176a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00176ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00176b1:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00176b5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00176b9:	89 f0                	mov    eax,esi
c00176bb:	83 c4 20             	add    esp,0x20
c00176be:	5b                   	pop    ebx
c00176bf:	5e                   	pop    esi
c00176c0:	ff e0                	jmp    eax

c00176c2 <RTC::~RTC()>:
c00176c2:	83 ec 0c             	sub    esp,0xc
c00176c5:	ba c8 16 02 c0       	mov    edx,0xc00216c8
c00176ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176ce:	89 10                	mov    DWORD PTR [eax],edx
c00176d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176d4:	83 ec 0c             	sub    esp,0xc
c00176d7:	50                   	push   eax
c00176d8:	e8 57 42 ff ff       	call   c000b934 <Clock::~Clock()>
c00176dd:	83 c4 10             	add    esp,0x10
c00176e0:	90                   	nop
c00176e1:	83 c4 0c             	add    esp,0xc
c00176e4:	c3                   	ret    
c00176e5:	90                   	nop

c00176e6 <RTC::~RTC()>:
c00176e6:	83 ec 0c             	sub    esp,0xc
c00176e9:	83 ec 0c             	sub    esp,0xc
c00176ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00176f0:	e8 cd ff ff ff       	call   c00176c2 <RTC::~RTC()>
c00176f5:	83 c4 10             	add    esp,0x10
c00176f8:	83 ec 08             	sub    esp,0x8
c00176fb:	68 60 01 00 00       	push   0x160
c0017700:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017704:	e8 c1 31 ff ff       	call   c000a8ca <operator delete(void*, unsigned long)>
c0017709:	83 c4 10             	add    esp,0x10
c001770c:	83 c4 0c             	add    esp,0xc
c001770f:	c3                   	ret    

c0017710 <RTC::get_update_in_progress_flag()>:
c0017710:	83 ec 14             	sub    esp,0x14
c0017713:	6a 0a                	push   0xa
c0017715:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001771b:	e8 50 fa fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017720:	83 c4 1c             	add    esp,0x1c
c0017723:	0f b6 c0             	movzx  eax,al
c0017726:	c1 e8 07             	shr    eax,0x7
c0017729:	c3                   	ret    

c001772a <RTC::completeRTCRefresh()>:
c001772a:	55                   	push   ebp
c001772b:	57                   	push   edi
c001772c:	56                   	push   esi
c001772d:	53                   	push   ebx
c001772e:	83 ec 3c             	sub    esp,0x3c
c0017731:	8b 1d 8c 74 02 c0    	mov    ebx,DWORD PTR ds:0xc002748c
c0017737:	83 ec 0c             	sub    esp,0xc
c001773a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001773e:	e8 cd ff ff ff       	call   c0017710 <RTC::get_update_in_progress_flag()>
c0017743:	83 c4 10             	add    esp,0x10
c0017746:	84 c0                	test   al,al
c0017748:	74 0e                	je     c0017758 <RTC::completeRTCRefresh()+0x2e>
c001774a:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0017750:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c0017756:	73 df                	jae    c0017737 <RTC::completeRTCRefresh()+0xd>
c0017758:	51                   	push   ecx
c0017759:	51                   	push   ecx
c001775a:	6a 00                	push   0x0
c001775c:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017762:	e8 09 fa fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017767:	5b                   	pop    ebx
c0017768:	89 c7                	mov    edi,eax
c001776a:	5e                   	pop    esi
c001776b:	6a 02                	push   0x2
c001776d:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017773:	e8 f8 f9 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017778:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001777c:	5d                   	pop    ebp
c001777d:	58                   	pop    eax
c001777e:	6a 04                	push   0x4
c0017780:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017786:	e8 e5 f9 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c001778b:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001778f:	58                   	pop    eax
c0017790:	5a                   	pop    edx
c0017791:	6a 07                	push   0x7
c0017793:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017799:	e8 d2 f9 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c001779e:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c00177a2:	59                   	pop    ecx
c00177a3:	5b                   	pop    ebx
c00177a4:	6a 08                	push   0x8
c00177a6:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00177ac:	e8 bf f9 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c00177b1:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c00177b5:	5e                   	pop    esi
c00177b6:	5d                   	pop    ebp
c00177b7:	6a 09                	push   0x9
c00177b9:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00177bf:	e8 ac f9 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c00177c4:	0f b6 c0             	movzx  eax,al
c00177c7:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00177cb:	83 c4 10             	add    esp,0x10
c00177ce:	8b 1d 8c 74 02 c0    	mov    ebx,DWORD PTR ds:0xc002748c
c00177d4:	83 ec 0c             	sub    esp,0xc
c00177d7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00177db:	e8 30 ff ff ff       	call   c0017710 <RTC::get_update_in_progress_flag()>
c00177e0:	83 c4 10             	add    esp,0x10
c00177e3:	84 c0                	test   al,al
c00177e5:	74 0e                	je     c00177f5 <RTC::completeRTCRefresh()+0xcb>
c00177e7:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00177ed:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c00177f3:	73 df                	jae    c00177d4 <RTC::completeRTCRefresh()+0xaa>
c00177f5:	51                   	push   ecx
c00177f6:	51                   	push   ecx
c00177f7:	6a 00                	push   0x0
c00177f9:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00177ff:	e8 6c f9 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017804:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0017808:	5b                   	pop    ebx
c0017809:	5e                   	pop    esi
c001780a:	6a 02                	push   0x2
c001780c:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017812:	e8 59 f9 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017817:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001781b:	5d                   	pop    ebp
c001781c:	58                   	pop    eax
c001781d:	6a 04                	push   0x4
c001781f:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017825:	e8 46 f9 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c001782a:	88 c3                	mov    bl,al
c001782c:	58                   	pop    eax
c001782d:	5a                   	pop    edx
c001782e:	6a 07                	push   0x7
c0017830:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017836:	e8 35 f9 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c001783b:	59                   	pop    ecx
c001783c:	89 c6                	mov    esi,eax
c001783e:	5d                   	pop    ebp
c001783f:	6a 08                	push   0x8
c0017841:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017847:	e8 24 f9 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c001784c:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017850:	58                   	pop    eax
c0017851:	5a                   	pop    edx
c0017852:	6a 09                	push   0x9
c0017854:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001785a:	e8 11 f9 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c001785f:	89 f9                	mov    ecx,edi
c0017861:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0017865:	0f b6 e8             	movzx  ebp,al
c0017868:	83 c4 10             	add    esp,0x10
c001786b:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c001786f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017874:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c0017879:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001787d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017881:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0017885:	0f 94 c0             	sete   al
c0017888:	0f b6 fb             	movzx  edi,bl
c001788b:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c001788f:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0017894:	0f 94 c2             	sete   dl
c0017897:	21 d0                	and    eax,edx
c0017899:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c001789d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00178a1:	0f 94 c2             	sete   dl
c00178a4:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00178a8:	21 c2                	and    edx,eax
c00178aa:	89 f0                	mov    eax,esi
c00178ac:	0f b6 c0             	movzx  eax,al
c00178af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00178b3:	89 f0                	mov    eax,esi
c00178b5:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c00178b9:	0f 94 c0             	sete   al
c00178bc:	21 d0                	and    eax,edx
c00178be:	31 d2                	xor    edx,edx
c00178c0:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c00178c4:	0f 94 c2             	sete   dl
c00178c7:	85 c2                	test   edx,eax
c00178c9:	75 27                	jne    c00178f2 <RTC::completeRTCRefresh()+0x1c8>
c00178cb:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00178cf:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c00178d3:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00178d7:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c00178db:	89 f0                	mov    eax,esi
c00178dd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00178e1:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00178e5:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00178e9:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00178ed:	e9 dc fe ff ff       	jmp    c00177ce <RTC::completeRTCRefresh()+0xa4>
c00178f2:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c00178f6:	75 d3                	jne    c00178cb <RTC::completeRTCRefresh()+0x1a1>
c00178f8:	52                   	push   edx
c00178f9:	52                   	push   edx
c00178fa:	6a 0b                	push   0xb
c00178fc:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017902:	e8 69 f8 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017907:	83 c4 10             	add    esp,0x10
c001790a:	a8 04                	test   al,0x4
c001790c:	75 7a                	jne    c0017988 <RTC::completeRTCRefresh()+0x25e>
c001790e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017912:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017916:	83 e1 0f             	and    ecx,0xf
c0017919:	c1 ea 04             	shr    edx,0x4
c001791c:	c1 ef 04             	shr    edi,0x4
c001791f:	6b d2 0a             	imul   edx,edx,0xa
c0017922:	83 e6 0f             	and    esi,0xf
c0017925:	01 d1                	add    ecx,edx
c0017927:	c1 ed 04             	shr    ebp,0x4
c001792a:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001792e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017932:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017936:	c1 ea 04             	shr    edx,0x4
c0017939:	83 e1 0f             	and    ecx,0xf
c001793c:	6b d2 0a             	imul   edx,edx,0xa
c001793f:	6b ed 0a             	imul   ebp,ebp,0xa
c0017942:	01 d1                	add    ecx,edx
c0017944:	89 fa                	mov    edx,edi
c0017946:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001794a:	83 e2 07             	and    edx,0x7
c001794d:	89 d9                	mov    ecx,ebx
c001794f:	6b d2 0a             	imul   edx,edx,0xa
c0017952:	83 e1 0f             	and    ecx,0xf
c0017955:	83 e3 80             	and    ebx,0xffffff80
c0017958:	01 d1                	add    ecx,edx
c001795a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001795e:	09 cb                	or     ebx,ecx
c0017960:	c1 ea 04             	shr    edx,0x4
c0017963:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017967:	6b d2 0a             	imul   edx,edx,0xa
c001796a:	83 e1 0f             	and    ecx,0xf
c001796d:	01 d6                	add    esi,edx
c001796f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017973:	c1 ea 04             	shr    edx,0x4
c0017976:	6b d2 0a             	imul   edx,edx,0xa
c0017979:	01 d1                	add    ecx,edx
c001797b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001797f:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0017983:	83 e2 0f             	and    edx,0xf
c0017986:	01 d5                	add    ebp,edx
c0017988:	a8 02                	test   al,0x2
c001798a:	75 15                	jne    c00179a1 <RTC::completeRTCRefresh()+0x277>
c001798c:	f6 c3 80             	test   bl,0x80
c001798f:	74 10                	je     c00179a1 <RTC::completeRTCRefresh()+0x277>
c0017991:	83 e3 7f             	and    ebx,0x7f
c0017994:	b9 18 00 00 00       	mov    ecx,0x18
c0017999:	8d 43 0c             	lea    eax,[ebx+0xc]
c001799c:	99                   	cdq    
c001799d:	f7 f9                	idiv   ecx
c001799f:	88 d3                	mov    bl,dl
c00179a1:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c00179a7:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c00179ad:	77 06                	ja     c00179b5 <RTC::completeRTCRefresh()+0x28b>
c00179af:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c00179b5:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00179ba:	31 c9                	xor    ecx,ecx
c00179bc:	c1 e0 10             	shl    eax,0x10
c00179bf:	89 cd                	mov    ebp,ecx
c00179c1:	c1 e7 10             	shl    edi,0x10
c00179c4:	31 d2                	xor    edx,edx
c00179c6:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00179cc:	09 c5                	or     ebp,eax
c00179ce:	89 f0                	mov    eax,esi
c00179d0:	89 e9                	mov    ecx,ebp
c00179d2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00179d6:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c00179da:	88 c2                	mov    dl,al
c00179dc:	88 d9                	mov    cl,bl
c00179de:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c00179e2:	0f b7 c2             	movzx  eax,dx
c00179e5:	09 f8                	or     eax,edi
c00179e7:	89 c2                	mov    edx,eax
c00179e9:	50                   	push   eax
c00179ea:	50                   	push   eax
c00179eb:	51                   	push   ecx
c00179ec:	52                   	push   edx
c00179ed:	e8 31 40 ff ff       	call   c000ba23 <datetimeToSeconds(datetime_t)>
c00179f2:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c00179f6:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c00179fc:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0017a02:	83 c4 4c             	add    esp,0x4c
c0017a05:	5b                   	pop    ebx
c0017a06:	5e                   	pop    esi
c0017a07:	5f                   	pop    edi
c0017a08:	5d                   	pop    ebp
c0017a09:	c3                   	ret    

c0017a0a <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0017a0a:	55                   	push   ebp
c0017a0b:	57                   	push   edi
c0017a0c:	56                   	push   esi
c0017a0d:	53                   	push   ebx
c0017a0e:	83 ec 30             	sub    esp,0x30
c0017a11:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017a15:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0017a19:	6a 00                	push   0x0
c0017a1b:	6a 00                	push   0x0
c0017a1d:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a23:	e8 62 f8 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a28:	83 c4 0c             	add    esp,0xc
c0017a2b:	6a 00                	push   0x0
c0017a2d:	6a 02                	push   0x2
c0017a2f:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a35:	e8 50 f8 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a3a:	31 d2                	xor    edx,edx
c0017a3c:	89 f9                	mov    ecx,edi
c0017a3e:	89 f8                	mov    eax,edi
c0017a40:	c1 e9 10             	shr    ecx,0x10
c0017a43:	0f b6 c4             	movzx  eax,ah
c0017a46:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0017a4a:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0017a4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017a52:	b9 64 00 00 00       	mov    ecx,0x64
c0017a57:	89 f0                	mov    eax,esi
c0017a59:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017a5d:	89 f0                	mov    eax,esi
c0017a5f:	0f b6 c4             	movzx  eax,ah
c0017a62:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017a66:	89 f0                	mov    eax,esi
c0017a68:	c1 e8 10             	shr    eax,0x10
c0017a6b:	f7 f1                	div    ecx
c0017a6d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0017a71:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0017a75:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0017a79:	59                   	pop    ecx
c0017a7a:	5b                   	pop    ebx
c0017a7b:	89 fb                	mov    ebx,edi
c0017a7d:	6a 0b                	push   0xb
c0017a7f:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a85:	e8 e6 f6 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017a8a:	83 c4 10             	add    esp,0x10
c0017a8d:	89 c5                	mov    ebp,eax
c0017a8f:	a8 04                	test   al,0x4
c0017a91:	75 6e                	jne    c0017b01 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0017a93:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017a97:	31 d2                	xor    edx,edx
c0017a99:	0f b6 c1             	movzx  eax,cl
c0017a9c:	b9 0a 00 00 00       	mov    ecx,0xa
c0017aa1:	f7 f1                	div    ecx
c0017aa3:	c1 e0 04             	shl    eax,0x4
c0017aa6:	09 d0                	or     eax,edx
c0017aa8:	31 d2                	xor    edx,edx
c0017aaa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017aae:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0017ab3:	f7 f1                	div    ecx
c0017ab5:	c1 e0 04             	shl    eax,0x4
c0017ab8:	09 d0                	or     eax,edx
c0017aba:	31 d2                	xor    edx,edx
c0017abc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017ac0:	0f b6 c3             	movzx  eax,bl
c0017ac3:	f7 f1                	div    ecx
c0017ac5:	c1 e0 04             	shl    eax,0x4
c0017ac8:	09 d0                	or     eax,edx
c0017aca:	31 d2                	xor    edx,edx
c0017acc:	89 c3                	mov    ebx,eax
c0017ace:	89 f0                	mov    eax,esi
c0017ad0:	0f b6 c0             	movzx  eax,al
c0017ad3:	f7 f1                	div    ecx
c0017ad5:	c1 e0 04             	shl    eax,0x4
c0017ad8:	09 d0                	or     eax,edx
c0017ada:	31 d2                	xor    edx,edx
c0017adc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017ae0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017ae5:	f7 f1                	div    ecx
c0017ae7:	c1 e0 04             	shl    eax,0x4
c0017aea:	09 d0                	or     eax,edx
c0017aec:	31 d2                	xor    edx,edx
c0017aee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017af2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017af6:	f7 f1                	div    ecx
c0017af8:	c1 e0 04             	shl    eax,0x4
c0017afb:	09 d0                	or     eax,edx
c0017afd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017b01:	83 e5 02             	and    ebp,0x2
c0017b04:	75 1e                	jne    c0017b24 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017b06:	0f b6 c3             	movzx  eax,bl
c0017b09:	83 f8 0b             	cmp    eax,0xb
c0017b0c:	76 10                	jbe    c0017b1e <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0017b0e:	8d 53 f4             	lea    edx,[ebx-0xc]
c0017b11:	88 d3                	mov    bl,dl
c0017b13:	84 d2                	test   dl,dl
c0017b15:	75 02                	jne    c0017b19 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0017b17:	b3 0c                	mov    bl,0xc
c0017b19:	83 cb 80             	or     ebx,0xffffff80
c0017b1c:	eb 06                	jmp    c0017b24 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017b1e:	85 c0                	test   eax,eax
c0017b20:	75 02                	jne    c0017b24 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017b22:	b3 0c                	mov    bl,0xc
c0017b24:	0f b6 db             	movzx  ebx,bl
c0017b27:	50                   	push   eax
c0017b28:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0017b2d:	52                   	push   edx
c0017b2e:	6a 00                	push   0x0
c0017b30:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017b36:	e8 4f f7 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017b3b:	83 c4 0c             	add    esp,0xc
c0017b3e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017b43:	50                   	push   eax
c0017b44:	6a 02                	push   0x2
c0017b46:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017b4c:	e8 39 f7 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017b51:	83 c4 0c             	add    esp,0xc
c0017b54:	53                   	push   ebx
c0017b55:	6a 04                	push   0x4
c0017b57:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017b5d:	e8 28 f7 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017b62:	83 c4 0c             	add    esp,0xc
c0017b65:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0017b6a:	52                   	push   edx
c0017b6b:	6a 07                	push   0x7
c0017b6d:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017b73:	e8 12 f7 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017b78:	83 c4 0c             	add    esp,0xc
c0017b7b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017b80:	50                   	push   eax
c0017b81:	6a 08                	push   0x8
c0017b83:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017b89:	e8 fc f6 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017b8e:	83 c4 0c             	add    esp,0xc
c0017b91:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0017b96:	55                   	push   ebp
c0017b97:	6a 09                	push   0x9
c0017b99:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017b9f:	e8 e6 f6 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017ba4:	5a                   	pop    edx
c0017ba5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017ba9:	e8 7c fb ff ff       	call   c001772a <RTC::completeRTCRefresh()>
c0017bae:	83 c4 3c             	add    esp,0x3c
c0017bb1:	b0 01                	mov    al,0x1
c0017bb3:	5b                   	pop    ebx
c0017bb4:	5e                   	pop    esi
c0017bb5:	5f                   	pop    edi
c0017bb6:	5d                   	pop    ebp
c0017bb7:	c3                   	ret    

c0017bb8 <rtcIRQHandler(regs*, void*)>:
c0017bb8:	53                   	push   ebx
c0017bb9:	83 ec 10             	sub    esp,0x10
c0017bbc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017bc0:	6a 0c                	push   0xc
c0017bc2:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017bc8:	e8 a3 f5 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017bcd:	83 c4 10             	add    esp,0x10
c0017bd0:	a8 80                	test   al,0x80
c0017bd2:	74 24                	je     c0017bf8 <rtcIRQHandler(regs*, void*)+0x40>
c0017bd4:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0017bdb:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0017be2:	66 ff 05 18 82 02 c0 	inc    WORD PTR ds:0xc0028218
c0017be9:	75 0d                	jne    c0017bf8 <rtcIRQHandler(regs*, void*)+0x40>
c0017beb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017bef:	83 c4 08             	add    esp,0x8
c0017bf2:	5b                   	pop    ebx
c0017bf3:	e9 32 fb ff ff       	jmp    c001772a <RTC::completeRTCRefresh()>
c0017bf8:	83 c4 08             	add    esp,0x8
c0017bfb:	5b                   	pop    ebx
c0017bfc:	c3                   	ret    
c0017bfd:	90                   	nop

c0017bfe <RTC::RTC()>:
c0017bfe:	83 ec 1c             	sub    esp,0x1c
c0017c01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c05:	83 ec 08             	sub    esp,0x8
c0017c08:	68 ab 16 02 c0       	push   0xc00216ab
c0017c0d:	50                   	push   eax
c0017c0e:	e8 eb 3c ff ff       	call   c000b8fe <Clock::Clock(char const*)>
c0017c13:	83 c4 10             	add    esp,0x10
c0017c16:	ba c8 16 02 c0       	mov    edx,0xc00216c8
c0017c1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c1f:	89 10                	mov    DWORD PTR [eax],edx
c0017c21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c25:	83 ec 0c             	sub    esp,0xc
c0017c28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017c2c:	6a 01                	push   0x1
c0017c2e:	68 b8 7b 01 c0       	push   0xc0017bb8
c0017c33:	6a 08                	push   0x8
c0017c35:	50                   	push   eax
c0017c36:	e8 9f 41 ff ff       	call   c000bdda <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0017c3b:	83 c4 20             	add    esp,0x20
c0017c3e:	89 c2                	mov    edx,eax
c0017c40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c44:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0017c4a:	fa                   	cli    
c0017c4b:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017c50:	83 c0 01             	add    eax,0x1
c0017c53:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0017c58:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017c5d:	83 ec 08             	sub    esp,0x8
c0017c60:	6a 0b                	push   0xb
c0017c62:	50                   	push   eax
c0017c63:	e8 08 f5 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017c68:	83 c4 10             	add    esp,0x10
c0017c6b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017c6f:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017c74:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0017c78:	83 ca 10             	or     edx,0x10
c0017c7b:	0f b6 d2             	movzx  edx,dl
c0017c7e:	83 ec 04             	sub    esp,0x4
c0017c81:	52                   	push   edx
c0017c82:	6a 0b                	push   0xb
c0017c84:	50                   	push   eax
c0017c85:	e8 00 f6 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017c8a:	83 c4 10             	add    esp,0x10
c0017c8d:	83 ec 0c             	sub    esp,0xc
c0017c90:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017c94:	e8 91 fa ff ff       	call   c001772a <RTC::completeRTCRefresh()>
c0017c99:	83 c4 10             	add    esp,0x10
c0017c9c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017ca1:	83 e8 01             	sub    eax,0x1
c0017ca4:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0017ca9:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017cae:	85 c0                	test   eax,eax
c0017cb0:	75 01                	jne    c0017cb3 <RTC::RTC()+0xb5>
c0017cb2:	fb                   	sti    
c0017cb3:	90                   	nop
c0017cb4:	83 c4 1c             	add    esp,0x1c
c0017cb7:	c3                   	ret    

c0017cb8 <HalConsoleScroll(int, int)>:
c0017cb8:	83 ec 10             	sub    esp,0x10
c0017cbb:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0017cc3:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0017ccb:	90                   	nop
c0017ccc:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017cd1:	0f 8f e1 00 00 00    	jg     c0017db8 <HalConsoleScroll(int, int)+0x100>
c0017cd7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017cdf:	90                   	nop
c0017ce0:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0017ce8:	0f 8f be 00 00 00    	jg     c0017dac <HalConsoleScroll(int, int)+0xf4>
c0017cee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017cf2:	89 d0                	mov    eax,edx
c0017cf4:	c1 e0 02             	shl    eax,0x2
c0017cf7:	01 d0                	add    eax,edx
c0017cf9:	c1 e0 05             	shl    eax,0x5
c0017cfc:	89 c2                	mov    edx,eax
c0017cfe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d02:	01 d0                	add    eax,edx
c0017d04:	89 c2                	mov    edx,eax
c0017d06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d0a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0017d0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017d11:	89 d0                	mov    eax,edx
c0017d13:	c1 e0 02             	shl    eax,0x2
c0017d16:	01 d0                	add    eax,edx
c0017d18:	c1 e0 05             	shl    eax,0x5
c0017d1b:	89 c2                	mov    edx,eax
c0017d1d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d21:	01 d0                	add    eax,edx
c0017d23:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0017d29:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d2d:	01 c2                	add    edx,eax
c0017d2f:	8a 01                	mov    al,BYTE PTR [ecx]
c0017d31:	88 02                	mov    BYTE PTR [edx],al
c0017d33:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017d38:	75 66                	jne    c0017da0 <HalConsoleScroll(int, int)+0xe8>
c0017d3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d3e:	83 e0 01             	and    eax,0x1
c0017d41:	74 39                	je     c0017d7c <HalConsoleScroll(int, int)+0xc4>
c0017d43:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017d47:	83 e0 0f             	and    eax,0xf
c0017d4a:	88 c2                	mov    dl,al
c0017d4c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017d50:	c1 e0 04             	shl    eax,0x4
c0017d53:	09 d0                	or     eax,edx
c0017d55:	88 c1                	mov    cl,al
c0017d57:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017d5b:	89 d0                	mov    eax,edx
c0017d5d:	c1 e0 02             	shl    eax,0x2
c0017d60:	01 d0                	add    eax,edx
c0017d62:	c1 e0 05             	shl    eax,0x5
c0017d65:	89 c2                	mov    edx,eax
c0017d67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d6b:	01 d0                	add    eax,edx
c0017d6d:	89 c2                	mov    edx,eax
c0017d6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d73:	01 d0                	add    eax,edx
c0017d75:	88 ca                	mov    dl,cl
c0017d77:	88 10                	mov    BYTE PTR [eax],dl
c0017d79:	eb 25                	jmp    c0017da0 <HalConsoleScroll(int, int)+0xe8>
c0017d7b:	90                   	nop
c0017d7c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017d80:	89 d0                	mov    eax,edx
c0017d82:	c1 e0 02             	shl    eax,0x2
c0017d85:	01 d0                	add    eax,edx
c0017d87:	c1 e0 05             	shl    eax,0x5
c0017d8a:	89 c2                	mov    edx,eax
c0017d8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d90:	01 d0                	add    eax,edx
c0017d92:	89 c2                	mov    edx,eax
c0017d94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d98:	01 d0                	add    eax,edx
c0017d9a:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0017d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0017da0:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0017da5:	e9 36 ff ff ff       	jmp    c0017ce0 <HalConsoleScroll(int, int)+0x28>
c0017daa:	66 90                	xchg   ax,ax
c0017dac:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0017db1:	e9 16 ff ff ff       	jmp    c0017ccc <HalConsoleScroll(int, int)+0x14>
c0017db6:	66 90                	xchg   ax,ax
c0017db8:	90                   	nop
c0017db9:	83 c4 10             	add    esp,0x10
c0017dbc:	c3                   	ret    
c0017dbd:	8d 76 00             	lea    esi,[esi+0x0]

c0017dc0 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0017dc0:	83 ec 14             	sub    esp,0x14
c0017dc3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017dc7:	88 04 24             	mov    BYTE PTR [esp],al
c0017dca:	8a 04 24             	mov    al,BYTE PTR [esp]
c0017dcd:	0f b6 c0             	movzx  eax,al
c0017dd0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017dd4:	89 d1                	mov    ecx,edx
c0017dd6:	83 e1 0f             	and    ecx,0xf
c0017dd9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017ddd:	c1 e2 04             	shl    edx,0x4
c0017de0:	0f b6 d2             	movzx  edx,dl
c0017de3:	09 ca                	or     edx,ecx
c0017de5:	c1 e2 08             	shl    edx,0x8
c0017de8:	09 d0                	or     eax,edx
c0017dea:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0017def:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0017df7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017dfb:	89 d0                	mov    eax,edx
c0017dfd:	c1 e0 02             	shl    eax,0x2
c0017e00:	01 d0                	add    eax,edx
c0017e02:	c1 e0 04             	shl    eax,0x4
c0017e05:	89 c2                	mov    edx,eax
c0017e07:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017e0b:	01 d0                	add    eax,edx
c0017e0d:	01 c0                	add    eax,eax
c0017e0f:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0017e13:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017e17:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0017e1c:	66 89 02             	mov    WORD PTR [edx],ax
c0017e1f:	90                   	nop
c0017e20:	83 c4 14             	add    esp,0x14
c0017e23:	c3                   	ret    

c0017e24 <HalConsoleCursorUpdate(int, int)>:
c0017e24:	83 ec 20             	sub    esp,0x20
c0017e27:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e2b:	89 c2                	mov    edx,eax
c0017e2d:	c1 e2 02             	shl    edx,0x2
c0017e30:	01 d0                	add    eax,edx
c0017e32:	c1 e0 04             	shl    eax,0x4
c0017e35:	89 c2                	mov    edx,eax
c0017e37:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017e3b:	01 d0                	add    eax,edx
c0017e3d:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0017e42:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0017e49:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0017e4e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017e52:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017e56:	ee                   	out    dx,al
c0017e57:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0017e5c:	0f b6 c0             	movzx  eax,al
c0017e5f:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0017e66:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0017e6a:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0017e6e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017e72:	ee                   	out    dx,al
c0017e73:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0017e7a:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0017e7f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0017e83:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e87:	ee                   	out    dx,al
c0017e88:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0017e8d:	c1 e8 08             	shr    eax,0x8
c0017e90:	0f b6 c0             	movzx  eax,al
c0017e93:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0017e9a:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017e9e:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017ea2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017ea6:	ee                   	out    dx,al
c0017ea7:	90                   	nop
c0017ea8:	83 c4 20             	add    esp,0x20
c0017eab:	c3                   	ret    

c0017eac <FAT::getName()>:
c0017eac:	b8 fc 16 02 c0       	mov    eax,0xc00216fc
c0017eb1:	c3                   	ret    
c0017eb2:	66 90                	xchg   ax,ax

c0017eb4 <FAT::tell(void*, unsigned long long*)>:
c0017eb4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017eb9:	75 09                	jne    c0017ec4 <FAT::tell(void*, unsigned long long*)+0x10>
c0017ebb:	b8 04 00 00 00       	mov    eax,0x4
c0017ec0:	c3                   	ret    
c0017ec1:	8d 76 00             	lea    esi,[esi+0x0]
c0017ec4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017ec9:	75 09                	jne    c0017ed4 <FAT::tell(void*, unsigned long long*)+0x20>
c0017ecb:	b8 04 00 00 00       	mov    eax,0x4
c0017ed0:	c3                   	ret    
c0017ed1:	8d 76 00             	lea    esi,[esi+0x0]
c0017ed4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017ed8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0017edb:	ba 00 00 00 00       	mov    edx,0x0
c0017ee0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017ee4:	89 01                	mov    DWORD PTR [ecx],eax
c0017ee6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017ee9:	b8 00 00 00 00       	mov    eax,0x0
c0017eee:	c3                   	ret    
c0017eef:	90                   	nop

c0017ef0 <FAT::stat(void*, unsigned long long*)>:
c0017ef0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017ef5:	75 09                	jne    c0017f00 <FAT::stat(void*, unsigned long long*)+0x10>
c0017ef7:	b8 04 00 00 00       	mov    eax,0x4
c0017efc:	c3                   	ret    
c0017efd:	8d 76 00             	lea    esi,[esi+0x0]
c0017f00:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017f05:	75 09                	jne    c0017f10 <FAT::stat(void*, unsigned long long*)+0x20>
c0017f07:	b8 04 00 00 00       	mov    eax,0x4
c0017f0c:	c3                   	ret    
c0017f0d:	8d 76 00             	lea    esi,[esi+0x0]
c0017f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017f14:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017f17:	ba 00 00 00 00       	mov    edx,0x0
c0017f1c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017f20:	89 01                	mov    DWORD PTR [ecx],eax
c0017f22:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017f25:	b8 00 00 00 00       	mov    eax,0x0
c0017f2a:	c3                   	ret    
c0017f2b:	90                   	nop

c0017f2c <FAT::~FAT()>:
c0017f2c:	83 ec 0c             	sub    esp,0xc
c0017f2f:	ba 48 17 02 c0       	mov    edx,0xc0021748
c0017f34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f38:	89 10                	mov    DWORD PTR [eax],edx
c0017f3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f3e:	83 ec 0c             	sub    esp,0xc
c0017f41:	50                   	push   eax
c0017f42:	e8 f7 2d ff ff       	call   c000ad3e <Filesystem::~Filesystem()>
c0017f47:	83 c4 10             	add    esp,0x10
c0017f4a:	90                   	nop
c0017f4b:	83 c4 0c             	add    esp,0xc
c0017f4e:	c3                   	ret    
c0017f4f:	90                   	nop

c0017f50 <FAT::~FAT()>:
c0017f50:	83 ec 0c             	sub    esp,0xc
c0017f53:	83 ec 0c             	sub    esp,0xc
c0017f56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f5a:	e8 cd ff ff ff       	call   c0017f2c <FAT::~FAT()>
c0017f5f:	83 c4 10             	add    esp,0x10
c0017f62:	83 ec 08             	sub    esp,0x8
c0017f65:	6a 08                	push   0x8
c0017f67:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f6b:	e8 5a 29 ff ff       	call   c000a8ca <operator delete(void*, unsigned long)>
c0017f70:	83 c4 10             	add    esp,0x10
c0017f73:	83 c4 0c             	add    esp,0xc
c0017f76:	c3                   	ret    
c0017f77:	90                   	nop

c0017f78 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0017f78:	83 ec 1c             	sub    esp,0x1c
c0017f7b:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0017f82:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0017f87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f8b:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017f92:	83 f8 ff             	cmp    eax,0xffffffff
c0017f95:	75 35                	jne    c0017fcc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0017f97:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017f9b:	88 c2                	mov    dl,al
c0017f9d:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017fa2:	01 d0                	add    eax,edx
c0017fa4:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017fa8:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0017fae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fb2:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0017fb9:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017fbe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fc2:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0017fc9:	eb 19                	jmp    c0017fe4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0017fcb:	90                   	nop
c0017fcc:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017fd0:	88 c2                	mov    dl,al
c0017fd2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fd6:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017fdd:	01 d0                	add    eax,edx
c0017fdf:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017fe3:	90                   	nop
c0017fe4:	83 ec 04             	sub    esp,0x4
c0017fe7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017feb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017fef:	8d 44 24 15          	lea    eax,[esp+0x15]
c0017ff3:	50                   	push   eax
c0017ff4:	e8 d6 cf fe ff       	call   c0004fcf <f_getlabel>
c0017ff9:	83 c4 10             	add    esp,0x10
c0017ffc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018000:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018005:	75 09                	jne    c0018010 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0018007:	b8 00 00 00 00       	mov    eax,0x0
c001800c:	eb 0a                	jmp    c0018018 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001800e:	66 90                	xchg   ax,ax
c0018010:	b8 01 00 00 00       	mov    eax,0x1
c0018015:	8d 76 00             	lea    esi,[esi+0x0]
c0018018:	83 c4 1c             	add    esp,0x1c
c001801b:	c3                   	ret    

c001801c <FAT::setlabel(LogicalDisk*, int, char*)>:
c001801c:	57                   	push   edi
c001801d:	83 ec 58             	sub    esp,0x58
c0018020:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018028:	8d 54 24 10          	lea    edx,[esp+0x10]
c001802c:	b8 00 00 00 00       	mov    eax,0x0
c0018031:	b9 0f 00 00 00       	mov    ecx,0xf
c0018036:	fc                   	cld    
c0018037:	89 d7                	mov    edi,edx
c0018039:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001803b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001803f:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018046:	83 f8 ff             	cmp    eax,0xffffffff
c0018049:	75 35                	jne    c0018080 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001804b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001804f:	88 c2                	mov    dl,al
c0018051:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018056:	01 d0                	add    eax,edx
c0018058:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001805c:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0018062:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018066:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c001806d:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018072:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0018076:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c001807d:	eb 19                	jmp    c0018098 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001807f:	90                   	nop
c0018080:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018084:	88 c2                	mov    dl,al
c0018086:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001808a:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018091:	01 d0                	add    eax,edx
c0018093:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018097:	90                   	nop
c0018098:	83 ec 08             	sub    esp,0x8
c001809b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001809f:	8d 44 24 18          	lea    eax,[esp+0x18]
c00180a3:	50                   	push   eax
c00180a4:	e8 97 87 fe ff       	call   c0000840 <strcat>
c00180a9:	83 c4 10             	add    esp,0x10
c00180ac:	83 ec 0c             	sub    esp,0xc
c00180af:	8d 44 24 18          	lea    eax,[esp+0x18]
c00180b3:	50                   	push   eax
c00180b4:	e8 67 d0 fe ff       	call   c0005120 <f_setlabel>
c00180b9:	83 c4 10             	add    esp,0x10
c00180bc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00180c0:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00180c5:	75 09                	jne    c00180d0 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c00180c7:	b8 00 00 00 00       	mov    eax,0x0
c00180cc:	eb 0a                	jmp    c00180d8 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c00180ce:	66 90                	xchg   ax,ax
c00180d0:	b8 01 00 00 00       	mov    eax,0x1
c00180d5:	8d 76 00             	lea    esi,[esi+0x0]
c00180d8:	83 c4 58             	add    esp,0x58
c00180db:	5f                   	pop    edi
c00180dc:	c3                   	ret    
c00180dd:	90                   	nop
c00180de:	66 90                	xchg   ax,ax

c00180e0 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00180e0:	83 ec 2c             	sub    esp,0x2c
c00180e3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00180eb:	83 ec 08             	sub    esp,0x8
c00180ee:	68 20 17 02 c0       	push   0xc0021720
c00180f3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00180f7:	e8 54 86 fe ff       	call   c0000750 <strcmp>
c00180fc:	83 c4 10             	add    esp,0x10
c00180ff:	85 c0                	test   eax,eax
c0018101:	0f 94 c0             	sete   al
c0018104:	0f b6 c0             	movzx  eax,al
c0018107:	85 c0                	test   eax,eax
c0018109:	74 0d                	je     c0018118 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001810b:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018113:	e9 c0 00 00 00       	jmp    c00181d8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018118:	83 ec 08             	sub    esp,0x8
c001811b:	68 12 17 02 c0       	push   0xc0021712
c0018120:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018124:	e8 27 86 fe ff       	call   c0000750 <strcmp>
c0018129:	83 c4 10             	add    esp,0x10
c001812c:	85 c0                	test   eax,eax
c001812e:	0f 94 c0             	sete   al
c0018131:	0f b6 c0             	movzx  eax,al
c0018134:	85 c0                	test   eax,eax
c0018136:	74 10                	je     c0018148 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0018138:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018140:	e9 93 00 00 00       	jmp    c00181d8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018145:	8d 76 00             	lea    esi,[esi+0x0]
c0018148:	83 ec 08             	sub    esp,0x8
c001814b:	68 18 17 02 c0       	push   0xc0021718
c0018150:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018154:	e8 f7 85 fe ff       	call   c0000750 <strcmp>
c0018159:	83 c4 10             	add    esp,0x10
c001815c:	85 c0                	test   eax,eax
c001815e:	0f 94 c0             	sete   al
c0018161:	0f b6 c0             	movzx  eax,al
c0018164:	85 c0                	test   eax,eax
c0018166:	74 0c                	je     c0018174 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0018168:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018170:	eb 66                	jmp    c00181d8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018172:	66 90                	xchg   ax,ax
c0018174:	83 ec 08             	sub    esp,0x8
c0018177:	68 5c f4 01 c0       	push   0xc001f45c
c001817c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018180:	e8 cb 85 fe ff       	call   c0000750 <strcmp>
c0018185:	83 c4 10             	add    esp,0x10
c0018188:	85 c0                	test   eax,eax
c001818a:	0f 94 c0             	sete   al
c001818d:	0f b6 c0             	movzx  eax,al
c0018190:	85 c0                	test   eax,eax
c0018192:	74 0c                	je     c00181a0 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0018194:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001819c:	eb 3a                	jmp    c00181d8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001819e:	66 90                	xchg   ax,ax
c00181a0:	83 ec 08             	sub    esp,0x8
c00181a3:	68 1e 17 02 c0       	push   0xc002171e
c00181a8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00181ac:	e8 9f 85 fe ff       	call   c0000750 <strcmp>
c00181b1:	83 c4 10             	add    esp,0x10
c00181b4:	85 c0                	test   eax,eax
c00181b6:	0f 94 c0             	sete   al
c00181b9:	0f b6 c0             	movzx  eax,al
c00181bc:	85 c0                	test   eax,eax
c00181be:	74 0c                	je     c00181cc <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c00181c0:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00181c8:	eb 0e                	jmp    c00181d8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00181ca:	66 90                	xchg   ax,ax
c00181cc:	b8 08 00 00 00       	mov    eax,0x8
c00181d1:	e9 ea 00 00 00       	jmp    c00182c0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00181d6:	66 90                	xchg   ax,ax
c00181d8:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00181df:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00181e4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00181e8:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c00181ef:	83 f8 ff             	cmp    eax,0xffffffff
c00181f2:	75 34                	jne    c0018228 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c00181f4:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00181f8:	88 c2                	mov    dl,al
c00181fa:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00181ff:	01 d0                	add    eax,edx
c0018201:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018205:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c001820b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001820f:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0018216:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c001821b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001821f:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0018226:	eb 18                	jmp    c0018240 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0018228:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001822c:	88 c2                	mov    dl,al
c001822e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018232:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018239:	01 d0                	add    eax,edx
c001823b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001823f:	90                   	nop
c0018240:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018244:	88 04 24             	mov    BYTE PTR [esp],al
c0018247:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001824b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001824f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0018257:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001825c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018264:	83 ec 0c             	sub    esp,0xc
c0018267:	68 00 20 00 00       	push   0x2000
c001826c:	e8 3d f8 fe ff       	call   c0007aae <malloc>
c0018271:	83 c4 10             	add    esp,0x10
c0018274:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018278:	68 00 20 00 00       	push   0x2000
c001827d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018281:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018285:	50                   	push   eax
c0018286:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001828a:	50                   	push   eax
c001828b:	e8 8d d1 fe ff       	call   c000541d <f_mkfs>
c0018290:	83 c4 10             	add    esp,0x10
c0018293:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018297:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001829c:	75 0a                	jne    c00182a8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001829e:	b8 00 00 00 00       	mov    eax,0x0
c00182a3:	eb 1b                	jmp    c00182c0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00182a5:	8d 76 00             	lea    esi,[esi+0x0]
c00182a8:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00182ad:	75 09                	jne    c00182b8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c00182af:	b8 09 00 00 00       	mov    eax,0x9
c00182b4:	eb 0a                	jmp    c00182c0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00182b6:	66 90                	xchg   ax,ax
c00182b8:	b8 01 00 00 00       	mov    eax,0x1
c00182bd:	8d 76 00             	lea    esi,[esi+0x0]
c00182c0:	83 c4 2c             	add    esp,0x2c
c00182c3:	c3                   	ret    

c00182c4 <FAT::tryMount(LogicalDisk*, int)>:
c00182c4:	81 ec 4c 03 00 00    	sub    esp,0x34c
c00182ca:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00182cf:	83 f8 14             	cmp    eax,0x14
c00182d2:	75 18                	jne    c00182ec <FAT::tryMount(LogicalDisk*, int)+0x28>
c00182d4:	83 ec 0c             	sub    esp,0xc
c00182d7:	68 24 17 02 c0       	push   0xc0021724
c00182dc:	e8 46 86 ff ff       	call   c0010927 <KePanic(char const*)>
c00182e1:	83 c4 10             	add    esp,0x10
c00182e4:	b0 00                	mov    al,0x0
c00182e6:	e9 ed 01 00 00       	jmp    c00184d8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00182eb:	90                   	nop
c00182ec:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00182f3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00182f9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00182ff:	3d 00 02 00 00       	cmp    eax,0x200
c0018304:	74 0a                	je     c0018310 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0018306:	b0 00                	mov    al,0x0
c0018308:	e9 cb 01 00 00       	jmp    c00184d8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001830d:	8d 76 00             	lea    esi,[esi+0x0]
c0018310:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0018318:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001831f:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018326:	83 f8 ff             	cmp    eax,0xffffffff
c0018329:	74 09                	je     c0018334 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001832b:	b0 01                	mov    al,0x1
c001832d:	e9 a6 01 00 00       	jmp    c00184d8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018332:	66 90                	xchg   ax,ax
c0018334:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001833e:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0018346:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001834d:	88 c2                	mov    dl,al
c001834f:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018354:	01 d0                	add    eax,edx
c0018356:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c001835d:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0018363:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001836a:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0018371:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018376:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001837d:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0018384:	83 ec 0c             	sub    esp,0xc
c0018387:	68 34 02 00 00       	push   0x234
c001838c:	e8 1d f7 fe ff       	call   c0007aae <malloc>
c0018391:	83 c4 10             	add    esp,0x10
c0018394:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001839b:	83 ec 04             	sub    esp,0x4
c001839e:	6a 00                	push   0x0
c00183a0:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00183a7:	50                   	push   eax
c00183a8:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00183af:	e8 44 b8 fe ff       	call   c0003bf8 <f_mount>
c00183b4:	83 c4 10             	add    esp,0x10
c00183b7:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00183be:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c00183c6:	74 1c                	je     c00183e4 <FAT::tryMount(LogicalDisk*, int)+0x120>
c00183c8:	83 ec 0c             	sub    esp,0xc
c00183cb:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00183d2:	e8 f7 f6 fe ff       	call   c0007ace <rfree>
c00183d7:	83 c4 10             	add    esp,0x10
c00183da:	b0 00                	mov    al,0x0
c00183dc:	e9 f7 00 00 00       	jmp    c00184d8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00183e1:	8d 76 00             	lea    esi,[esi+0x0]
c00183e4:	83 ec 04             	sub    esp,0x4
c00183e7:	68 00 01 00 00       	push   0x100
c00183ec:	6a 00                	push   0x0
c00183ee:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00183f5:	50                   	push   eax
c00183f6:	e8 f5 80 fe ff       	call   c00004f0 <memset>
c00183fb:	83 c4 10             	add    esp,0x10
c00183fe:	83 ec 08             	sub    esp,0x8
c0018401:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018408:	50                   	push   eax
c0018409:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018410:	50                   	push   eax
c0018411:	e8 2a 84 fe ff       	call   c0000840 <strcat>
c0018416:	83 c4 10             	add    esp,0x10
c0018419:	83 ec 08             	sub    esp,0x8
c001841c:	68 32 17 02 c0       	push   0xc0021732
c0018421:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018428:	50                   	push   eax
c0018429:	e8 12 84 fe ff       	call   c0000840 <strcat>
c001842e:	83 c4 10             	add    esp,0x10
c0018431:	83 ec 04             	sub    esp,0x4
c0018434:	6a 01                	push   0x1
c0018436:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c001843d:	50                   	push   eax
c001843e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018442:	50                   	push   eax
c0018443:	e8 12 b8 fe ff       	call   c0003c5a <f_open>
c0018448:	83 c4 10             	add    esp,0x10
c001844b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018452:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0018459:	85 c0                	test   eax,eax
c001845b:	74 0b                	je     c0018468 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001845d:	78 31                	js     c0018490 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001845f:	83 e8 04             	sub    eax,0x4
c0018462:	83 f8 01             	cmp    eax,0x1
c0018465:	77 29                	ja     c0018490 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018467:	90                   	nop
c0018468:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0018470:	83 ec 0c             	sub    esp,0xc
c0018473:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018477:	50                   	push   eax
c0018478:	e8 ac bf fe ff       	call   c0004429 <f_close>
c001847d:	83 c4 10             	add    esp,0x10
c0018480:	90                   	nop
c0018481:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0018489:	85 c0                	test   eax,eax
c001848b:	74 43                	je     c00184d0 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c001848d:	eb 31                	jmp    c00184c0 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001848f:	90                   	nop
c0018490:	83 ec 0c             	sub    esp,0xc
c0018493:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001849a:	e8 2f f6 fe ff       	call   c0007ace <rfree>
c001849f:	83 c4 10             	add    esp,0x10
c00184a2:	83 ec 04             	sub    esp,0x4
c00184a5:	6a 00                	push   0x0
c00184a7:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00184ae:	50                   	push   eax
c00184af:	6a 00                	push   0x0
c00184b1:	e8 42 b7 fe ff       	call   c0003bf8 <f_mount>
c00184b6:	83 c4 10             	add    esp,0x10
c00184b9:	b0 00                	mov    al,0x0
c00184bb:	eb 1b                	jmp    c00184d8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00184bd:	8d 76 00             	lea    esi,[esi+0x0]
c00184c0:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00184c5:	83 c0 01             	add    eax,0x1
c00184c8:	a3 20 82 02 c0       	mov    ds:0xc0028220,eax
c00184cd:	8d 76 00             	lea    esi,[esi+0x0]
c00184d0:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c00184d7:	90                   	nop
c00184d8:	81 c4 4c 03 00 00    	add    esp,0x34c
c00184de:	c3                   	ret    
c00184df:	90                   	nop

c00184e0 <FAT::allocateSwapfile(char const*, int)>:
c00184e0:	55                   	push   ebp
c00184e1:	57                   	push   edi
c00184e2:	56                   	push   esi
c00184e3:	53                   	push   ebx
c00184e4:	81 ec 3c 04 00 00    	sub    esp,0x43c
c00184ea:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c00184f5:	83 ec 0c             	sub    esp,0xc
c00184f8:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c00184ff:	e8 aa f5 fe ff       	call   c0007aae <malloc>
c0018504:	83 c4 10             	add    esp,0x10
c0018507:	89 c7                	mov    edi,eax
c0018509:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001850e:	83 ec 04             	sub    esp,0x4
c0018511:	50                   	push   eax
c0018512:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0018519:	57                   	push   edi
c001851a:	e8 5b 2a ff ff       	call   c000af7a <File::File(char const*, Process*)>
c001851f:	83 c4 10             	add    esp,0x10
c0018522:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0018529:	83 ec 04             	sub    esp,0x4
c001852c:	8d 44 24 13          	lea    eax,[esp+0x13]
c0018530:	50                   	push   eax
c0018531:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018535:	50                   	push   eax
c0018536:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001853d:	e8 a0 2d ff ff       	call   c000b2e2 <File::stat(unsigned long long*, bool*)>
c0018542:	83 c4 10             	add    esp,0x10
c0018545:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001854c:	c1 e0 14             	shl    eax,0x14
c001854f:	89 c7                	mov    edi,eax
c0018551:	89 c5                	mov    ebp,eax
c0018553:	c1 fd 1f             	sar    ebp,0x1f
c0018556:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001855a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001855e:	89 f9                	mov    ecx,edi
c0018560:	31 c1                	xor    ecx,eax
c0018562:	89 cb                	mov    ebx,ecx
c0018564:	89 e9                	mov    ecx,ebp
c0018566:	31 d1                	xor    ecx,edx
c0018568:	89 ce                	mov    esi,ecx
c001856a:	89 f0                	mov    eax,esi
c001856c:	09 d8                	or     eax,ebx
c001856e:	0f 84 9c 00 00 00    	je     c0018610 <FAT::allocateSwapfile(char const*, int)+0x130>
c0018574:	83 ec 0c             	sub    esp,0xc
c0018577:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001857e:	e8 2b 2c ff ff       	call   c000b1ae <File::unlink()>
c0018583:	83 c4 10             	add    esp,0x10
c0018586:	83 ec 08             	sub    esp,0x8
c0018589:	6a 12                	push   0x12
c001858b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018592:	e8 9f 2a ff ff       	call   c000b036 <File::open(FileOpenMode)>
c0018597:	83 c4 10             	add    esp,0x10
c001859a:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00185a1:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00185a7:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00185ae:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00185b5:	c1 e0 14             	shl    eax,0x14
c00185b8:	83 ec 04             	sub    esp,0x4
c00185bb:	6a 01                	push   0x1
c00185bd:	50                   	push   eax
c00185be:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c00185c5:	e8 e6 cc fe ff       	call   c00052b0 <f_expand>
c00185ca:	83 c4 10             	add    esp,0x10
c00185cd:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00185d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00185d6:	83 c0 10             	add    eax,0x10
c00185d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00185db:	83 ec 0c             	sub    esp,0xc
c00185de:	8d 54 24 24          	lea    edx,[esp+0x24]
c00185e2:	52                   	push   edx
c00185e3:	8d 54 24 30          	lea    edx,[esp+0x30]
c00185e7:	52                   	push   edx
c00185e8:	6a 00                	push   0x0
c00185ea:	68 00 04 00 00       	push   0x400
c00185ef:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00185f6:	ff d0                	call   eax
c00185f8:	83 c4 20             	add    esp,0x20
c00185fb:	83 ec 0c             	sub    esp,0xc
c00185fe:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018605:	e8 8a 2a ff ff       	call   c000b094 <File::close()>
c001860a:	83 c4 10             	add    esp,0x10
c001860d:	8d 76 00             	lea    esi,[esi+0x0]
c0018610:	83 ec 08             	sub    esp,0x8
c0018613:	6a 01                	push   0x1
c0018615:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001861c:	e8 15 2a ff ff       	call   c000b036 <File::open(FileOpenMode)>
c0018621:	83 c4 10             	add    esp,0x10
c0018624:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001862b:	8b 00                	mov    eax,DWORD PTR [eax]
c001862d:	83 c0 0c             	add    eax,0xc
c0018630:	8b 00                	mov    eax,DWORD PTR [eax]
c0018632:	83 ec 0c             	sub    esp,0xc
c0018635:	8d 54 24 24          	lea    edx,[esp+0x24]
c0018639:	52                   	push   edx
c001863a:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001863e:	52                   	push   edx
c001863f:	6a 00                	push   0x0
c0018641:	6a 04                	push   0x4
c0018643:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001864a:	ff d0                	call   eax
c001864c:	83 c4 20             	add    esp,0x20
c001864f:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0018656:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001865c:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0018663:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001866a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001866d:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0018674:	83 ec 0c             	sub    esp,0xc
c0018677:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001867e:	e8 11 2a ff ff       	call   c000b094 <File::close()>
c0018683:	83 c4 10             	add    esp,0x10
c0018686:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001868d:	ba 00 00 00 00       	mov    edx,0x0
c0018692:	81 c4 3c 04 00 00    	add    esp,0x43c
c0018698:	5b                   	pop    ebx
c0018699:	5e                   	pop    esi
c001869a:	5f                   	pop    edi
c001869b:	5d                   	pop    ebp
c001869c:	c3                   	ret    
c001869d:	90                   	nop
c001869e:	66 90                	xchg   ax,ax

c00186a0 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00186a0:	57                   	push   edi
c00186a1:	56                   	push   esi
c00186a2:	53                   	push   ebx
c00186a3:	81 ec 50 02 00 00    	sub    esp,0x250
c00186a9:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00186b1:	74 0d                	je     c00186c0 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c00186b3:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00186bb:	75 0f                	jne    c00186cc <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c00186bd:	8d 76 00             	lea    esi,[esi+0x0]
c00186c0:	b8 04 00 00 00       	mov    eax,0x4
c00186c5:	e9 3a 01 00 00       	jmp    c0018804 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00186ca:	66 90                	xchg   ax,ax
c00186cc:	83 ec 08             	sub    esp,0x8
c00186cf:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00186d6:	50                   	push   eax
c00186d7:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c00186de:	e8 13 c0 fe ff       	call   c00046f6 <f_readdir>
c00186e3:	83 c4 10             	add    esp,0x10
c00186e6:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00186ed:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c00186f4:	83 ec 0c             	sub    esp,0xc
c00186f7:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00186fe:	83 c0 16             	add    eax,0x16
c0018701:	50                   	push   eax
c0018702:	e8 69 7e fe ff       	call   c0000570 <strlen>
c0018707:	83 c4 10             	add    esp,0x10
c001870a:	ba 00 00 00 00       	mov    edx,0x0
c001870f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018713:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0018717:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001871e:	0f b6 c0             	movzx  eax,al
c0018721:	83 e0 10             	and    eax,0x10
c0018724:	74 0a                	je     c0018730 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0018726:	b8 02 00 00 00       	mov    eax,0x2
c001872b:	eb 0b                	jmp    c0018738 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001872d:	8d 76 00             	lea    esi,[esi+0x0]
c0018730:	b8 01 00 00 00       	mov    eax,0x1
c0018735:	8d 76 00             	lea    esi,[esi+0x0]
c0018738:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001873c:	83 ec 08             	sub    esp,0x8
c001873f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0018746:	83 c0 16             	add    eax,0x16
c0018749:	50                   	push   eax
c001874a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001874e:	83 c0 10             	add    eax,0x10
c0018751:	50                   	push   eax
c0018752:	e8 e9 7e fe ff       	call   c0000640 <strcpy>
c0018757:	83 c4 10             	add    esp,0x10
c001875a:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0018761:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0018768:	8d 44 24 08          	lea    eax,[esp+0x8]
c001876c:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0018773:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001877a:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0018781:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0018788:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001878f:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0018796:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001879d:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00187a4:	89 c6                	mov    esi,eax
c00187a6:	89 d7                	mov    edi,edx
c00187a8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00187aa:	89 c8                	mov    eax,ecx
c00187ac:	89 fa                	mov    edx,edi
c00187ae:	89 f3                	mov    ebx,esi
c00187b0:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00187b7:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00187be:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00187c5:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00187cc:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00187d2:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00187d9:	0f be c0             	movsx  eax,al
c00187dc:	85 c0                	test   eax,eax
c00187de:	75 08                	jne    c00187e8 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c00187e0:	b8 07 00 00 00       	mov    eax,0x7
c00187e5:	eb 1d                	jmp    c0018804 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00187e7:	90                   	nop
c00187e8:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c00187ef:	85 c0                	test   eax,eax
c00187f1:	75 09                	jne    c00187fc <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c00187f3:	b8 00 00 00 00       	mov    eax,0x0
c00187f8:	eb 0a                	jmp    c0018804 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00187fa:	66 90                	xchg   ax,ax
c00187fc:	b8 01 00 00 00       	mov    eax,0x1
c0018801:	8d 76 00             	lea    esi,[esi+0x0]
c0018804:	81 c4 50 02 00 00    	add    esp,0x250
c001880a:	5b                   	pop    ebx
c001880b:	5e                   	pop    esi
c001880c:	5f                   	pop    edi
c001880d:	c3                   	ret    
c001880e:	66 90                	xchg   ax,ax

c0018810 <FAT::read(void*, unsigned long, void*, int*)>:
c0018810:	83 ec 1c             	sub    esp,0x1c
c0018813:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018818:	74 0a                	je     c0018824 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001881a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001881f:	75 0b                	jne    c001882c <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0018821:	8d 76 00             	lea    esi,[esi+0x0]
c0018824:	b8 04 00 00 00       	mov    eax,0x4
c0018829:	eb 41                	jmp    c001886c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001882b:	90                   	nop
c001882c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018830:	50                   	push   eax
c0018831:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018835:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018839:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001883d:	e8 db b6 fe ff       	call   c0003f1d <f_read>
c0018842:	83 c4 10             	add    esp,0x10
c0018845:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018849:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001884d:	89 c2                	mov    edx,eax
c001884f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018853:	89 10                	mov    DWORD PTR [eax],edx
c0018855:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018859:	85 c0                	test   eax,eax
c001885b:	75 07                	jne    c0018864 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001885d:	b8 00 00 00 00       	mov    eax,0x0
c0018862:	eb 08                	jmp    c001886c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0018864:	b8 01 00 00 00       	mov    eax,0x1
c0018869:	8d 76 00             	lea    esi,[esi+0x0]
c001886c:	83 c4 1c             	add    esp,0x1c
c001886f:	c3                   	ret    

c0018870 <FAT::write(void*, unsigned long, void*, int*)>:
c0018870:	83 ec 1c             	sub    esp,0x1c
c0018873:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018878:	74 0a                	je     c0018884 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001887a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001887f:	75 0b                	jne    c001888c <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0018881:	8d 76 00             	lea    esi,[esi+0x0]
c0018884:	b8 04 00 00 00       	mov    eax,0x4
c0018889:	eb 41                	jmp    c00188cc <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001888b:	90                   	nop
c001888c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018890:	50                   	push   eax
c0018891:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018895:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018899:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001889d:	e8 7a b8 fe ff       	call   c000411c <f_write>
c00188a2:	83 c4 10             	add    esp,0x10
c00188a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00188a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00188ad:	89 c2                	mov    edx,eax
c00188af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00188b3:	89 10                	mov    DWORD PTR [eax],edx
c00188b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00188b9:	85 c0                	test   eax,eax
c00188bb:	75 07                	jne    c00188c4 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c00188bd:	b8 00 00 00 00       	mov    eax,0x0
c00188c2:	eb 08                	jmp    c00188cc <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00188c4:	b8 01 00 00 00       	mov    eax,0x1
c00188c9:	8d 76 00             	lea    esi,[esi+0x0]
c00188cc:	83 c4 1c             	add    esp,0x1c
c00188cf:	c3                   	ret    

c00188d0 <FAT::close(void*)>:
c00188d0:	83 ec 1c             	sub    esp,0x1c
c00188d3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00188d8:	75 0a                	jne    c00188e4 <FAT::close(void*)+0x14>
c00188da:	b8 04 00 00 00       	mov    eax,0x4
c00188df:	eb 3f                	jmp    c0018920 <FAT::close(void*)+0x50>
c00188e1:	8d 76 00             	lea    esi,[esi+0x0]
c00188e4:	83 ec 0c             	sub    esp,0xc
c00188e7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00188eb:	e8 39 bb fe ff       	call   c0004429 <f_close>
c00188f0:	83 c4 10             	add    esp,0x10
c00188f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00188f7:	83 ec 0c             	sub    esp,0xc
c00188fa:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00188fe:	e8 bb f1 fe ff       	call   c0007abe <free>
c0018903:	83 c4 10             	add    esp,0x10
c0018906:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001890a:	85 c0                	test   eax,eax
c001890c:	75 0a                	jne    c0018918 <FAT::close(void*)+0x48>
c001890e:	b8 00 00 00 00       	mov    eax,0x0
c0018913:	eb 0b                	jmp    c0018920 <FAT::close(void*)+0x50>
c0018915:	8d 76 00             	lea    esi,[esi+0x0]
c0018918:	b8 01 00 00 00       	mov    eax,0x1
c001891d:	8d 76 00             	lea    esi,[esi+0x0]
c0018920:	83 c4 1c             	add    esp,0x1c
c0018923:	c3                   	ret    

c0018924 <FAT::closeDir(void*)>:
c0018924:	83 ec 1c             	sub    esp,0x1c
c0018927:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001892c:	75 0a                	jne    c0018938 <FAT::closeDir(void*)+0x14>
c001892e:	b8 04 00 00 00       	mov    eax,0x4
c0018933:	eb 3f                	jmp    c0018974 <FAT::closeDir(void*)+0x50>
c0018935:	8d 76 00             	lea    esi,[esi+0x0]
c0018938:	83 ec 0c             	sub    esp,0xc
c001893b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001893f:	e8 90 bd fe ff       	call   c00046d4 <f_closedir>
c0018944:	83 c4 10             	add    esp,0x10
c0018947:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001894b:	83 ec 0c             	sub    esp,0xc
c001894e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018952:	e8 67 f1 fe ff       	call   c0007abe <free>
c0018957:	83 c4 10             	add    esp,0x10
c001895a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001895e:	85 c0                	test   eax,eax
c0018960:	75 0a                	jne    c001896c <FAT::closeDir(void*)+0x48>
c0018962:	b8 00 00 00 00       	mov    eax,0x0
c0018967:	eb 0b                	jmp    c0018974 <FAT::closeDir(void*)+0x50>
c0018969:	8d 76 00             	lea    esi,[esi+0x0]
c001896c:	b8 01 00 00 00       	mov    eax,0x1
c0018971:	8d 76 00             	lea    esi,[esi+0x0]
c0018974:	83 c4 1c             	add    esp,0x1c
c0018977:	c3                   	ret    

c0018978 <FAT::seek(void*, unsigned long long)>:
c0018978:	83 ec 2c             	sub    esp,0x2c
c001897b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001897f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018983:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018987:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001898b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0018990:	75 0a                	jne    c001899c <FAT::seek(void*, unsigned long long)+0x24>
c0018992:	b8 04 00 00 00       	mov    eax,0x4
c0018997:	eb 33                	jmp    c00189cc <FAT::seek(void*, unsigned long long)+0x54>
c0018999:	8d 76 00             	lea    esi,[esi+0x0]
c001899c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00189a0:	83 ec 08             	sub    esp,0x8
c00189a3:	50                   	push   eax
c00189a4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00189a8:	e8 ab ba fe ff       	call   c0004458 <f_lseek>
c00189ad:	83 c4 10             	add    esp,0x10
c00189b0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00189b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00189b8:	85 c0                	test   eax,eax
c00189ba:	75 08                	jne    c00189c4 <FAT::seek(void*, unsigned long long)+0x4c>
c00189bc:	b8 00 00 00 00       	mov    eax,0x0
c00189c1:	eb 09                	jmp    c00189cc <FAT::seek(void*, unsigned long long)+0x54>
c00189c3:	90                   	nop
c00189c4:	b8 01 00 00 00       	mov    eax,0x1
c00189c9:	8d 76 00             	lea    esi,[esi+0x0]
c00189cc:	83 c4 2c             	add    esp,0x2c
c00189cf:	c3                   	ret    

c00189d0 <fatWrapperReadDisk>:
c00189d0:	53                   	push   ebx
c00189d1:	83 ec 18             	sub    esp,0x18
c00189d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189d8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00189dc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00189e1:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c00189e8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00189ec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00189f0:	ba 00 00 00 00       	mov    edx,0x0
c00189f5:	83 ec 0c             	sub    esp,0xc
c00189f8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00189fc:	53                   	push   ebx
c00189fd:	52                   	push   edx
c00189fe:	50                   	push   eax
c00189ff:	51                   	push   ecx
c0018a00:	e8 0b 48 ff ff       	call   c000d210 <LogicalDisk::read(unsigned long long, int, void*)>
c0018a05:	83 c4 20             	add    esp,0x20
c0018a08:	83 c4 18             	add    esp,0x18
c0018a0b:	5b                   	pop    ebx
c0018a0c:	c3                   	ret    
c0018a0d:	8d 76 00             	lea    esi,[esi+0x0]

c0018a10 <fatWrapperWriteDisk>:
c0018a10:	53                   	push   ebx
c0018a11:	83 ec 18             	sub    esp,0x18
c0018a14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a18:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018a1c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018a21:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c0018a28:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018a2c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a30:	ba 00 00 00 00       	mov    edx,0x0
c0018a35:	83 ec 0c             	sub    esp,0xc
c0018a38:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018a3c:	53                   	push   ebx
c0018a3d:	52                   	push   edx
c0018a3e:	50                   	push   eax
c0018a3f:	51                   	push   ecx
c0018a40:	e8 37 48 ff ff       	call   c000d27c <LogicalDisk::write(unsigned long long, int, void*)>
c0018a45:	83 c4 20             	add    esp,0x20
c0018a48:	83 c4 18             	add    esp,0x18
c0018a4b:	5b                   	pop    ebx
c0018a4c:	c3                   	ret    
c0018a4d:	8d 76 00             	lea    esi,[esi+0x0]

c0018a50 <fatWrapperIoctl>:
c0018a50:	53                   	push   ebx
c0018a51:	83 ec 28             	sub    esp,0x28
c0018a54:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018a58:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018a5c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0018a60:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018a64:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018a69:	83 f8 02             	cmp    eax,0x2
c0018a6c:	75 32                	jne    c0018aa0 <fatWrapperIoctl+0x50>
c0018a6e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018a72:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018a76:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018a7b:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c0018a82:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018a88:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018a8e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018a92:	66 89 02             	mov    WORD PTR [edx],ax
c0018a95:	b8 00 00 00 00       	mov    eax,0x0
c0018a9a:	e9 c5 00 00 00       	jmp    c0018b64 <fatWrapperIoctl+0x114>
c0018a9f:	90                   	nop
c0018aa0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018aa5:	83 f8 01             	cmp    eax,0x1
c0018aa8:	75 6a                	jne    c0018b14 <fatWrapperIoctl+0xc4>
c0018aaa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018aae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018ab2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018ab7:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c0018abe:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018ac4:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0018aca:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0018ad0:	89 c8                	mov    eax,ecx
c0018ad2:	89 da                	mov    edx,ebx
c0018ad4:	0f a4 c2 0a          	shld   edx,eax,0xa
c0018ad8:	c1 e0 0a             	shl    eax,0xa
c0018adb:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0018ae0:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c0018ae7:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0018aed:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0018af3:	89 cb                	mov    ebx,ecx
c0018af5:	c1 fb 1f             	sar    ebx,0x1f
c0018af8:	53                   	push   ebx
c0018af9:	51                   	push   ecx
c0018afa:	52                   	push   edx
c0018afb:	50                   	push   eax
c0018afc:	e8 6f 5b 00 00       	call   c001e670 <__udivdi3>
c0018b01:	83 c4 10             	add    esp,0x10
c0018b04:	89 c2                	mov    edx,eax
c0018b06:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018b0a:	89 10                	mov    DWORD PTR [eax],edx
c0018b0c:	b8 00 00 00 00       	mov    eax,0x0
c0018b11:	eb 51                	jmp    c0018b64 <fatWrapperIoctl+0x114>
c0018b13:	90                   	nop
c0018b14:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018b19:	85 c0                	test   eax,eax
c0018b1b:	75 07                	jne    c0018b24 <fatWrapperIoctl+0xd4>
c0018b1d:	b8 00 00 00 00       	mov    eax,0x0
c0018b22:	eb 40                	jmp    c0018b64 <fatWrapperIoctl+0x114>
c0018b24:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018b29:	83 f8 03             	cmp    eax,0x3
c0018b2c:	75 1a                	jne    c0018b48 <fatWrapperIoctl+0xf8>
c0018b2e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018b32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018b36:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018b3a:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0018b40:	b8 00 00 00 00       	mov    eax,0x0
c0018b45:	eb 1d                	jmp    c0018b64 <fatWrapperIoctl+0x114>
c0018b47:	90                   	nop
c0018b48:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018b4d:	83 f8 04             	cmp    eax,0x4
c0018b50:	75 0a                	jne    c0018b5c <fatWrapperIoctl+0x10c>
c0018b52:	b8 00 00 00 00       	mov    eax,0x0
c0018b57:	eb 0b                	jmp    c0018b64 <fatWrapperIoctl+0x114>
c0018b59:	8d 76 00             	lea    esi,[esi+0x0]
c0018b5c:	b8 04 00 00 00       	mov    eax,0x4
c0018b61:	8d 76 00             	lea    esi,[esi+0x0]
c0018b64:	83 c4 28             	add    esp,0x28
c0018b67:	5b                   	pop    ebx
c0018b68:	c3                   	ret    
c0018b69:	90                   	nop
c0018b6a:	66 90                	xchg   ax,ax

c0018b6c <FAT::FAT()>:
c0018b6c:	83 ec 1c             	sub    esp,0x1c
c0018b6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018b73:	83 ec 0c             	sub    esp,0xc
c0018b76:	50                   	push   eax
c0018b77:	e8 9e 21 ff ff       	call   c000ad1a <Filesystem::Filesystem()>
c0018b7c:	83 c4 10             	add    esp,0x10
c0018b7f:	ba 48 17 02 c0       	mov    edx,0xc0021748
c0018b84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018b88:	89 10                	mov    DWORD PTR [eax],edx
c0018b8a:	c7 05 20 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028220,0x0
c0018b94:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0018b9c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0018ba1:	7f 19                	jg     c0018bbc <FAT::FAT()+0x50>
c0018ba3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018ba7:	c7 04 85 40 82 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd7dc0],0xffffffff
c0018bb2:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018bb7:	eb e3                	jmp    c0018b9c <FAT::FAT()+0x30>
c0018bb9:	8d 76 00             	lea    esi,[esi+0x0]
c0018bbc:	90                   	nop
c0018bbd:	83 c4 1c             	add    esp,0x1c
c0018bc0:	c3                   	ret    
c0018bc1:	90                   	nop
c0018bc2:	66 90                	xchg   ax,ax

c0018bc4 <FAT::fixFilepath(char*)>:
c0018bc4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018bc8:	8a 00                	mov    al,BYTE PTR [eax]
c0018bca:	0f be c0             	movsx  eax,al
c0018bcd:	83 f8 40             	cmp    eax,0x40
c0018bd0:	7e 2e                	jle    c0018c00 <FAT::fixFilepath(char*)+0x3c>
c0018bd2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018bd6:	8a 00                	mov    al,BYTE PTR [eax]
c0018bd8:	83 e8 41             	sub    eax,0x41
c0018bdb:	88 c2                	mov    dl,al
c0018bdd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018be1:	88 10                	mov    BYTE PTR [eax],dl
c0018be3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018be7:	8a 00                	mov    al,BYTE PTR [eax]
c0018be9:	0f be c0             	movsx  eax,al
c0018bec:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018bf3:	83 c0 30             	add    eax,0x30
c0018bf6:	88 c2                	mov    dl,al
c0018bf8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018bfc:	88 10                	mov    BYTE PTR [eax],dl
c0018bfe:	66 90                	xchg   ax,ax
c0018c00:	90                   	nop
c0018c01:	c3                   	ret    
c0018c02:	66 90                	xchg   ax,ax

c0018c04 <FAT::open(char const*, void**, FileOpenMode)>:
c0018c04:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018c0a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018c12:	74 0c                	je     c0018c20 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0018c14:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0018c1c:	75 0e                	jne    c0018c2c <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0018c1e:	66 90                	xchg   ax,ax
c0018c20:	b8 04 00 00 00       	mov    eax,0x4
c0018c25:	e9 46 01 00 00       	jmp    c0018d70 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0018c2a:	66 90                	xchg   ax,ax
c0018c2c:	83 ec 08             	sub    esp,0x8
c0018c2f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018c36:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018c3a:	50                   	push   eax
c0018c3b:	e8 00 7a fe ff       	call   c0000640 <strcpy>
c0018c40:	83 c4 10             	add    esp,0x10
c0018c43:	83 ec 08             	sub    esp,0x8
c0018c46:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018c4a:	50                   	push   eax
c0018c4b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018c52:	e8 6d ff ff ff       	call   c0018bc4 <FAT::fixFilepath(char*)>
c0018c57:	83 c4 10             	add    esp,0x10
c0018c5a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0018c62:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018c69:	83 e0 01             	and    eax,0x1
c0018c6c:	74 12                	je     c0018c80 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0018c6e:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018c75:	83 c8 01             	or     eax,0x1
c0018c78:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018c7f:	90                   	nop
c0018c80:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018c87:	83 e0 04             	and    eax,0x4
c0018c8a:	74 24                	je     c0018cb0 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0018c8c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018c93:	83 c8 30             	or     eax,0x30
c0018c96:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018c9d:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018ca4:	83 c8 02             	or     eax,0x2
c0018ca7:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018cae:	66 90                	xchg   ax,ax
c0018cb0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018cb7:	83 e0 02             	and    eax,0x2
c0018cba:	74 14                	je     c0018cd0 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0018cbc:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018cc3:	83 c8 02             	or     eax,0x2
c0018cc6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018ccd:	8d 76 00             	lea    esi,[esi+0x0]
c0018cd0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018cd7:	83 e0 08             	and    eax,0x8
c0018cda:	74 14                	je     c0018cf0 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0018cdc:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018ce3:	83 c8 04             	or     eax,0x4
c0018ce6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018ced:	8d 76 00             	lea    esi,[esi+0x0]
c0018cf0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018cf7:	83 e0 10             	and    eax,0x10
c0018cfa:	74 14                	je     c0018d10 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0018cfc:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018d03:	83 c8 08             	or     eax,0x8
c0018d06:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018d0d:	8d 76 00             	lea    esi,[esi+0x0]
c0018d10:	83 ec 0c             	sub    esp,0xc
c0018d13:	68 28 02 00 00       	push   0x228
c0018d18:	e8 91 ed fe ff       	call   c0007aae <malloc>
c0018d1d:	83 c4 10             	add    esp,0x10
c0018d20:	89 c2                	mov    edx,eax
c0018d22:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018d29:	89 10                	mov    DWORD PTR [eax],edx
c0018d2b:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0018d33:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018d3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d3c:	83 ec 04             	sub    esp,0x4
c0018d3f:	52                   	push   edx
c0018d40:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018d44:	52                   	push   edx
c0018d45:	50                   	push   eax
c0018d46:	e8 0f af fe ff       	call   c0003c5a <f_open>
c0018d4b:	83 c4 10             	add    esp,0x10
c0018d4e:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0018d55:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0018d5d:	74 09                	je     c0018d68 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0018d5f:	b8 01 00 00 00       	mov    eax,0x1
c0018d64:	eb 0a                	jmp    c0018d70 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0018d66:	66 90                	xchg   ax,ax
c0018d68:	b8 00 00 00 00       	mov    eax,0x0
c0018d6d:	8d 76 00             	lea    esi,[esi+0x0]
c0018d70:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018d76:	c3                   	ret    
c0018d77:	90                   	nop

c0018d78 <FAT::openDir(char const*, void**)>:
c0018d78:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018d7e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018d86:	74 0c                	je     c0018d94 <FAT::openDir(char const*, void**)+0x1c>
c0018d88:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0018d90:	75 0e                	jne    c0018da0 <FAT::openDir(char const*, void**)+0x28>
c0018d92:	66 90                	xchg   ax,ax
c0018d94:	b8 04 00 00 00       	mov    eax,0x4
c0018d99:	e9 82 00 00 00       	jmp    c0018e20 <FAT::openDir(char const*, void**)+0xa8>
c0018d9e:	66 90                	xchg   ax,ax
c0018da0:	83 ec 08             	sub    esp,0x8
c0018da3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018daa:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018dae:	50                   	push   eax
c0018daf:	e8 8c 78 fe ff       	call   c0000640 <strcpy>
c0018db4:	83 c4 10             	add    esp,0x10
c0018db7:	83 ec 08             	sub    esp,0x8
c0018dba:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018dbe:	50                   	push   eax
c0018dbf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018dc6:	e8 f9 fd ff ff       	call   c0018bc4 <FAT::fixFilepath(char*)>
c0018dcb:	83 c4 10             	add    esp,0x10
c0018dce:	83 ec 0c             	sub    esp,0xc
c0018dd1:	6a 30                	push   0x30
c0018dd3:	e8 d6 ec fe ff       	call   c0007aae <malloc>
c0018dd8:	83 c4 10             	add    esp,0x10
c0018ddb:	89 c2                	mov    edx,eax
c0018ddd:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018de4:	89 10                	mov    DWORD PTR [eax],edx
c0018de6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018ded:	8b 00                	mov    eax,DWORD PTR [eax]
c0018def:	83 ec 08             	sub    esp,0x8
c0018df2:	8d 54 24 14          	lea    edx,[esp+0x14]
c0018df6:	52                   	push   edx
c0018df7:	50                   	push   eax
c0018df8:	e8 0c b8 fe ff       	call   c0004609 <f_opendir>
c0018dfd:	83 c4 10             	add    esp,0x10
c0018e00:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0018e07:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0018e0f:	74 07                	je     c0018e18 <FAT::openDir(char const*, void**)+0xa0>
c0018e11:	b8 01 00 00 00       	mov    eax,0x1
c0018e16:	eb 08                	jmp    c0018e20 <FAT::openDir(char const*, void**)+0xa8>
c0018e18:	b8 00 00 00 00       	mov    eax,0x0
c0018e1d:	8d 76 00             	lea    esi,[esi+0x0]
c0018e20:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018e26:	c3                   	ret    
c0018e27:	90                   	nop

c0018e28 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0018e28:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0018e2e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0018e36:	75 0c                	jne    c0018e44 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0018e38:	b8 04 00 00 00       	mov    eax,0x4
c0018e3d:	e9 d6 00 00 00       	jmp    c0018f18 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018e42:	66 90                	xchg   ax,ax
c0018e44:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0018e4c:	75 0a                	jne    c0018e58 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0018e4e:	b8 04 00 00 00       	mov    eax,0x4
c0018e53:	e9 c0 00 00 00       	jmp    c0018f18 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018e58:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0018e60:	75 0a                	jne    c0018e6c <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0018e62:	b8 04 00 00 00       	mov    eax,0x4
c0018e67:	e9 ac 00 00 00       	jmp    c0018f18 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018e6c:	83 ec 08             	sub    esp,0x8
c0018e6f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018e76:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0018e7d:	50                   	push   eax
c0018e7e:	e8 bd 77 fe ff       	call   c0000640 <strcpy>
c0018e83:	83 c4 10             	add    esp,0x10
c0018e86:	83 ec 08             	sub    esp,0x8
c0018e89:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0018e90:	50                   	push   eax
c0018e91:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018e98:	e8 27 fd ff ff       	call   c0018bc4 <FAT::fixFilepath(char*)>
c0018e9d:	83 c4 10             	add    esp,0x10
c0018ea0:	83 ec 08             	sub    esp,0x8
c0018ea3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ea7:	50                   	push   eax
c0018ea8:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0018eaf:	50                   	push   eax
c0018eb0:	e8 d3 b8 fe ff       	call   c0004788 <f_stat>
c0018eb5:	83 c4 10             	add    esp,0x10
c0018eb8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0018ebf:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0018ec6:	85 c0                	test   eax,eax
c0018ec8:	74 0a                	je     c0018ed4 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0018eca:	83 f8 04             	cmp    eax,0x4
c0018ecd:	74 39                	je     c0018f08 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0018ecf:	eb 3f                	jmp    c0018f10 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0018ed1:	8d 76 00             	lea    esi,[esi+0x0]
c0018ed4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018ed8:	0f b6 c0             	movzx  eax,al
c0018edb:	83 e0 10             	and    eax,0x10
c0018ede:	0f 95 c2             	setne  dl
c0018ee1:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0018ee8:	88 10                	mov    BYTE PTR [eax],dl
c0018eea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018eee:	ba 00 00 00 00       	mov    edx,0x0
c0018ef3:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0018efa:	89 01                	mov    DWORD PTR [ecx],eax
c0018efc:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018eff:	b8 00 00 00 00       	mov    eax,0x0
c0018f04:	eb 12                	jmp    c0018f18 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018f06:	66 90                	xchg   ax,ax
c0018f08:	b8 02 00 00 00       	mov    eax,0x2
c0018f0d:	eb 09                	jmp    c0018f18 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018f0f:	90                   	nop
c0018f10:	b8 01 00 00 00       	mov    eax,0x1
c0018f15:	8d 76 00             	lea    esi,[esi+0x0]
c0018f18:	81 c4 2c 02 00 00    	add    esp,0x22c
c0018f1e:	c3                   	ret    
c0018f1f:	90                   	nop

c0018f20 <FAT::unlink(char const*)>:
c0018f20:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018f26:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018f2e:	75 08                	jne    c0018f38 <FAT::unlink(char const*)+0x18>
c0018f30:	b8 04 00 00 00       	mov    eax,0x4
c0018f35:	eb 61                	jmp    c0018f98 <FAT::unlink(char const*)+0x78>
c0018f37:	90                   	nop
c0018f38:	83 ec 08             	sub    esp,0x8
c0018f3b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018f42:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018f46:	50                   	push   eax
c0018f47:	e8 f4 76 fe ff       	call   c0000640 <strcpy>
c0018f4c:	83 c4 10             	add    esp,0x10
c0018f4f:	83 ec 08             	sub    esp,0x8
c0018f52:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018f56:	50                   	push   eax
c0018f57:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018f5e:	e8 61 fc ff ff       	call   c0018bc4 <FAT::fixFilepath(char*)>
c0018f63:	83 c4 10             	add    esp,0x10
c0018f66:	83 ec 0c             	sub    esp,0xc
c0018f69:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018f6d:	50                   	push   eax
c0018f6e:	e8 87 ba fe ff       	call   c00049fa <f_unlink>
c0018f73:	83 c4 10             	add    esp,0x10
c0018f76:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0018f7d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0018f84:	85 c0                	test   eax,eax
c0018f86:	75 08                	jne    c0018f90 <FAT::unlink(char const*)+0x70>
c0018f88:	b8 00 00 00 00       	mov    eax,0x0
c0018f8d:	eb 09                	jmp    c0018f98 <FAT::unlink(char const*)+0x78>
c0018f8f:	90                   	nop
c0018f90:	b8 01 00 00 00       	mov    eax,0x1
c0018f95:	8d 76 00             	lea    esi,[esi+0x0]
c0018f98:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018f9e:	c3                   	ret    
c0018f9f:	90                   	nop

c0018fa0 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0018fa0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018fa6:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0018fad:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0018fb4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0018fb8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018fbc:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0018fc4:	75 0a                	jne    c0018fd0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0018fc6:	b8 04 00 00 00       	mov    eax,0x4
c0018fcb:	e9 7c 01 00 00       	jmp    c001914c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0018fd0:	83 ec 08             	sub    esp,0x8
c0018fd3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0018fda:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018fde:	50                   	push   eax
c0018fdf:	e8 5c 76 fe ff       	call   c0000640 <strcpy>
c0018fe4:	83 c4 10             	add    esp,0x10
c0018fe7:	83 ec 08             	sub    esp,0x8
c0018fea:	8d 44 24 20          	lea    eax,[esp+0x20]
c0018fee:	50                   	push   eax
c0018fef:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0018ff6:	e8 c9 fb ff ff       	call   c0018bc4 <FAT::fixFilepath(char*)>
c0018ffb:	83 c4 10             	add    esp,0x10
c0018ffe:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0019006:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001900e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019013:	83 e0 01             	and    eax,0x1
c0019016:	74 14                	je     c001902c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c0019018:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001901f:	83 c8 01             	or     eax,0x1
c0019022:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019029:	8d 76 00             	lea    esi,[esi+0x0]
c001902c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019031:	83 e0 02             	and    eax,0x2
c0019034:	74 12                	je     c0019048 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c0019036:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001903d:	83 c8 20             	or     eax,0x20
c0019040:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019047:	90                   	nop
c0019048:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001904d:	83 e0 04             	and    eax,0x4
c0019050:	74 12                	je     c0019064 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c0019052:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019059:	83 c8 04             	or     eax,0x4
c001905c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019063:	90                   	nop
c0019064:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019069:	83 e0 08             	and    eax,0x8
c001906c:	74 12                	je     c0019080 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c001906e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019075:	83 c8 02             	or     eax,0x2
c0019078:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001907f:	90                   	nop
c0019080:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019085:	83 e0 01             	and    eax,0x1
c0019088:	74 12                	je     c001909c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001908a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019091:	83 c8 01             	or     eax,0x1
c0019094:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001909b:	90                   	nop
c001909c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00190a1:	83 e0 02             	and    eax,0x2
c00190a4:	74 12                	je     c00190b8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c00190a6:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c00190ad:	83 c8 20             	or     eax,0x20
c00190b0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c00190b7:	90                   	nop
c00190b8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00190bd:	83 e0 04             	and    eax,0x4
c00190c0:	74 12                	je     c00190d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c00190c2:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c00190c9:	83 c8 04             	or     eax,0x4
c00190cc:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c00190d3:	90                   	nop
c00190d4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00190d9:	83 e0 08             	and    eax,0x8
c00190dc:	74 12                	je     c00190f0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c00190de:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c00190e5:	83 c8 02             	or     eax,0x2
c00190e8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c00190ef:	90                   	nop
c00190f0:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c00190f7:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00190fe:	09 d0                	or     eax,edx
c0019100:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019107:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001910f:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019117:	83 ec 04             	sub    esp,0x4
c001911a:	52                   	push   edx
c001911b:	50                   	push   eax
c001911c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019120:	50                   	push   eax
c0019121:	e8 49 bd fe ff       	call   c0004e6f <f_chmod>
c0019126:	83 c4 10             	add    esp,0x10
c0019129:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019130:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019137:	85 c0                	test   eax,eax
c0019139:	75 09                	jne    c0019144 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c001913b:	b8 00 00 00 00       	mov    eax,0x0
c0019140:	eb 0a                	jmp    c001914c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0019142:	66 90                	xchg   ax,ax
c0019144:	b8 01 00 00 00       	mov    eax,0x1
c0019149:	8d 76 00             	lea    esi,[esi+0x0]
c001914c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019152:	c3                   	ret    
c0019153:	90                   	nop

c0019154 <FAT::rename(char const*, char const*)>:
c0019154:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001915a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019162:	74 0c                	je     c0019170 <FAT::rename(char const*, char const*)+0x1c>
c0019164:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001916c:	75 0e                	jne    c001917c <FAT::rename(char const*, char const*)+0x28>
c001916e:	66 90                	xchg   ax,ax
c0019170:	b8 04 00 00 00       	mov    eax,0x4
c0019175:	e9 9e 00 00 00       	jmp    c0019218 <FAT::rename(char const*, char const*)+0xc4>
c001917a:	66 90                	xchg   ax,ax
c001917c:	83 ec 08             	sub    esp,0x8
c001917f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019186:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001918d:	50                   	push   eax
c001918e:	e8 ad 74 fe ff       	call   c0000640 <strcpy>
c0019193:	83 c4 10             	add    esp,0x10
c0019196:	83 ec 08             	sub    esp,0x8
c0019199:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00191a0:	50                   	push   eax
c00191a1:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00191a8:	e8 17 fa ff ff       	call   c0018bc4 <FAT::fixFilepath(char*)>
c00191ad:	83 c4 10             	add    esp,0x10
c00191b0:	83 ec 08             	sub    esp,0x8
c00191b3:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00191ba:	8d 44 24 18          	lea    eax,[esp+0x18]
c00191be:	50                   	push   eax
c00191bf:	e8 7c 74 fe ff       	call   c0000640 <strcpy>
c00191c4:	83 c4 10             	add    esp,0x10
c00191c7:	83 ec 08             	sub    esp,0x8
c00191ca:	8d 44 24 14          	lea    eax,[esp+0x14]
c00191ce:	50                   	push   eax
c00191cf:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00191d6:	e8 e9 f9 ff ff       	call   c0018bc4 <FAT::fixFilepath(char*)>
c00191db:	83 c4 10             	add    esp,0x10
c00191de:	83 ec 08             	sub    esp,0x8
c00191e1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00191e5:	50                   	push   eax
c00191e6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00191ed:	50                   	push   eax
c00191ee:	e8 c4 ba fe ff       	call   c0004cb7 <f_rename>
c00191f3:	83 c4 10             	add    esp,0x10
c00191f6:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00191fd:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019204:	85 c0                	test   eax,eax
c0019206:	75 08                	jne    c0019210 <FAT::rename(char const*, char const*)+0xbc>
c0019208:	b8 00 00 00 00       	mov    eax,0x0
c001920d:	eb 09                	jmp    c0019218 <FAT::rename(char const*, char const*)+0xc4>
c001920f:	90                   	nop
c0019210:	b8 01 00 00 00       	mov    eax,0x1
c0019215:	8d 76 00             	lea    esi,[esi+0x0]
c0019218:	81 c4 1c 02 00 00    	add    esp,0x21c
c001921e:	c3                   	ret    
c001921f:	90                   	nop

c0019220 <FAT::mkdir(char const*)>:
c0019220:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019226:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001922e:	75 08                	jne    c0019238 <FAT::mkdir(char const*)+0x18>
c0019230:	b8 04 00 00 00       	mov    eax,0x4
c0019235:	eb 61                	jmp    c0019298 <FAT::mkdir(char const*)+0x78>
c0019237:	90                   	nop
c0019238:	83 ec 08             	sub    esp,0x8
c001923b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019242:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019246:	50                   	push   eax
c0019247:	e8 f4 73 fe ff       	call   c0000640 <strcpy>
c001924c:	83 c4 10             	add    esp,0x10
c001924f:	83 ec 08             	sub    esp,0x8
c0019252:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019256:	50                   	push   eax
c0019257:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001925e:	e8 61 f9 ff ff       	call   c0018bc4 <FAT::fixFilepath(char*)>
c0019263:	83 c4 10             	add    esp,0x10
c0019266:	83 ec 0c             	sub    esp,0xc
c0019269:	8d 44 24 18          	lea    eax,[esp+0x18]
c001926d:	50                   	push   eax
c001926e:	e8 a9 b8 fe ff       	call   c0004b1c <f_mkdir>
c0019273:	83 c4 10             	add    esp,0x10
c0019276:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001927d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019284:	85 c0                	test   eax,eax
c0019286:	75 08                	jne    c0019290 <FAT::mkdir(char const*)+0x70>
c0019288:	b8 00 00 00 00       	mov    eax,0x0
c001928d:	eb 09                	jmp    c0019298 <FAT::mkdir(char const*)+0x78>
c001928f:	90                   	nop
c0019290:	b8 01 00 00 00       	mov    eax,0x1
c0019295:	8d 76 00             	lea    esi,[esi+0x0]
c0019298:	81 c4 1c 01 00 00    	add    esp,0x11c
c001929e:	c3                   	ret    
c001929f:	90                   	nop

c00192a0 <FAT::exists(char const*)>:
c00192a0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00192a6:	83 ec 08             	sub    esp,0x8
c00192a9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00192b0:	8d 44 24 10          	lea    eax,[esp+0x10]
c00192b4:	50                   	push   eax
c00192b5:	e8 86 73 fe ff       	call   c0000640 <strcpy>
c00192ba:	83 c4 10             	add    esp,0x10
c00192bd:	83 ec 08             	sub    esp,0x8
c00192c0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00192c4:	50                   	push   eax
c00192c5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00192cc:	e8 f3 f8 ff ff       	call   c0018bc4 <FAT::fixFilepath(char*)>
c00192d1:	83 c4 10             	add    esp,0x10
c00192d4:	83 ec 08             	sub    esp,0x8
c00192d7:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c00192de:	50                   	push   eax
c00192df:	8d 44 24 10          	lea    eax,[esp+0x10]
c00192e3:	50                   	push   eax
c00192e4:	e8 9f b4 fe ff       	call   c0004788 <f_stat>
c00192e9:	83 c4 10             	add    esp,0x10
c00192ec:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00192f3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00192fa:	85 c0                	test   eax,eax
c00192fc:	75 06                	jne    c0019304 <FAT::exists(char const*)+0x64>
c00192fe:	b0 01                	mov    al,0x1
c0019300:	eb 06                	jmp    c0019308 <FAT::exists(char const*)+0x68>
c0019302:	66 90                	xchg   ax,ax
c0019304:	b0 00                	mov    al,0x0
c0019306:	66 90                	xchg   ax,ax
c0019308:	81 c4 2c 02 00 00    	add    esp,0x22c
c001930e:	c3                   	ret    
c001930f:	90                   	nop

c0019310 <isoReadDiscSectorHelper>:
c0019310:	83 ec 2c             	sub    esp,0x2c
c0019313:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019317:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001931b:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0019320:	83 e8 41             	sub    eax,0x41
c0019323:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c001932a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001932e:	ba 00 00 00 00       	mov    edx,0x0
c0019333:	83 ec 0c             	sub    esp,0xc
c0019336:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001933a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001933e:	52                   	push   edx
c001933f:	50                   	push   eax
c0019340:	51                   	push   ecx
c0019341:	e8 ca 3e ff ff       	call   c000d210 <LogicalDisk::read(unsigned long long, int, void*)>
c0019346:	83 c4 20             	add    esp,0x20
c0019349:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001934d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0019352:	74 0c                	je     c0019360 <isoReadDiscSectorHelper+0x50>
c0019354:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019358:	c1 e0 0b             	shl    eax,0xb
c001935b:	eb 0b                	jmp    c0019368 <isoReadDiscSectorHelper+0x58>
c001935d:	8d 76 00             	lea    esi,[esi+0x0]
c0019360:	b8 00 00 00 00       	mov    eax,0x0
c0019365:	8d 76 00             	lea    esi,[esi+0x0]
c0019368:	83 c4 2c             	add    esp,0x2c
c001936b:	c3                   	ret    

c001936c <iso_kprintf>:
c001936c:	83 ec 0c             	sub    esp,0xc
c001936f:	83 ec 08             	sub    esp,0x8
c0019372:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019376:	68 51 11 02 c0       	push   0xc0021151
c001937b:	e8 77 16 ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c0019380:	83 c4 10             	add    esp,0x10
c0019383:	90                   	nop
c0019384:	83 c4 0c             	add    esp,0xc
c0019387:	c3                   	ret    

c0019388 <iso_kprintfd>:
c0019388:	83 ec 0c             	sub    esp,0xc
c001938b:	83 ec 08             	sub    esp,0x8
c001938e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019392:	68 3e 01 02 c0       	push   0xc002013e
c0019397:	e8 5b 16 ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c001939c:	83 c4 10             	add    esp,0x10
c001939f:	90                   	nop
c00193a0:	83 c4 0c             	add    esp,0xc
c00193a3:	c3                   	ret    

c00193a4 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00193a4:	b8 08 00 00 00       	mov    eax,0x8
c00193a9:	c3                   	ret    

c00193aa <ISO9660::getName()>:
c00193aa:	b8 a8 17 02 c0       	mov    eax,0xc00217a8
c00193af:	c3                   	ret    

c00193b0 <ISO9660::closeDir(void*)>:
c00193b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00193b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00193b6:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c00193b9:	90                   	nop

c00193ba <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00193ba:	b8 01 00 00 00       	mov    eax,0x1
c00193bf:	c3                   	ret    

c00193c0 <ISO9660::unlink(char const*)>:
c00193c0:	b8 01 00 00 00       	mov    eax,0x1
c00193c5:	c3                   	ret    

c00193c6 <ISO9660::write(void*, unsigned long, void*, int*)>:
c00193c6:	b8 03 00 00 00       	mov    eax,0x3
c00193cb:	c3                   	ret    

c00193cc <ISO9660::rename(char const*, char const*)>:
c00193cc:	b8 01 00 00 00       	mov    eax,0x1
c00193d1:	c3                   	ret    

c00193d2 <ISO9660::mkdir(char const*)>:
c00193d2:	b8 01 00 00 00       	mov    eax,0x1
c00193d7:	c3                   	ret    

c00193d8 <ISO9660::~ISO9660()>:
c00193d8:	83 ec 0c             	sub    esp,0xc
c00193db:	ba e8 18 02 c0       	mov    edx,0xc00218e8
c00193e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00193e4:	89 10                	mov    DWORD PTR [eax],edx
c00193e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00193ea:	83 ec 0c             	sub    esp,0xc
c00193ed:	50                   	push   eax
c00193ee:	e8 4b 19 ff ff       	call   c000ad3e <Filesystem::~Filesystem()>
c00193f3:	83 c4 10             	add    esp,0x10
c00193f6:	90                   	nop
c00193f7:	83 c4 0c             	add    esp,0xc
c00193fa:	c3                   	ret    
c00193fb:	90                   	nop

c00193fc <ISO9660::~ISO9660()>:
c00193fc:	83 ec 0c             	sub    esp,0xc
c00193ff:	83 ec 0c             	sub    esp,0xc
c0019402:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019406:	e8 cd ff ff ff       	call   c00193d8 <ISO9660::~ISO9660()>
c001940b:	83 c4 10             	add    esp,0x10
c001940e:	83 ec 08             	sub    esp,0x8
c0019411:	6a 08                	push   0x8
c0019413:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019417:	e8 ae 14 ff ff       	call   c000a8ca <operator delete(void*, unsigned long)>
c001941c:	83 c4 10             	add    esp,0x10
c001941f:	83 c4 0c             	add    esp,0xc
c0019422:	c3                   	ret    
c0019423:	90                   	nop

c0019424 <ISO9660::exists(char const*)>:
c0019424:	83 ec 18             	sub    esp,0x18
c0019427:	68 c3 17 02 c0       	push   0xc00217c3
c001942c:	e8 f6 74 ff ff       	call   c0010927 <KePanic(char const*)>
c0019431:	31 c0                	xor    eax,eax
c0019433:	83 c4 1c             	add    esp,0x1c
c0019436:	c3                   	ret    
c0019437:	90                   	nop

c0019438 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0019438:	56                   	push   esi
c0019439:	53                   	push   ebx
c001943a:	53                   	push   ebx
c001943b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001943f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019443:	85 db                	test   ebx,ebx
c0019445:	0f 84 ca 00 00 00    	je     c0019515 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001944b:	85 f6                	test   esi,esi
c001944d:	0f 84 c2 00 00 00    	je     c0019515 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0019453:	b8 03 00 00 00       	mov    eax,0x3
c0019458:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001945d:	0f 85 b7 00 00 00    	jne    c001951a <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019463:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0019465:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c001946c:	38 0d 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,cl
c0019472:	74 1b                	je     c001948f <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0019474:	85 c0                	test   eax,eax
c0019476:	74 10                	je     c0019488 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c0019478:	83 ec 0c             	sub    esp,0xc
c001947b:	68 e1 17 02 c0       	push   0xc00217e1
c0019480:	e8 a2 74 ff ff       	call   c0010927 <KePanic(char const*)>
c0019485:	83 c4 10             	add    esp,0x10
c0019488:	8a 03                	mov    al,BYTE PTR [ebx]
c001948a:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c001948f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019492:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c0019499:	85 c0                	test   eax,eax
c001949b:	74 09                	je     c00194a6 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001949d:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00194a4:	74 48                	je     c00194ee <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c00194a6:	83 ec 0c             	sub    esp,0xc
c00194a9:	68 f1 17 02 c0       	push   0xc00217f1
c00194ae:	e8 44 15 ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c00194b3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00194b6:	83 c4 10             	add    esp,0x10
c00194b9:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c00194c0:	85 c0                	test   eax,eax
c00194c2:	74 17                	je     c00194db <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c00194c4:	83 ec 0c             	sub    esp,0xc
c00194c7:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c00194ce:	68 11 18 02 c0       	push   0xc0021811
c00194d3:	e8 1f 15 ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c00194d8:	83 c4 10             	add    esp,0x10
c00194db:	83 ec 0c             	sub    esp,0xc
c00194de:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c00194e5:	50                   	push   eax
c00194e6:	e8 5b d5 fe ff       	call   c0006a46 <init_percd>
c00194eb:	83 c4 10             	add    esp,0x10
c00194ee:	83 c3 03             	add    ebx,0x3
c00194f1:	51                   	push   ecx
c00194f2:	51                   	push   ecx
c00194f3:	6a 00                	push   0x0
c00194f5:	53                   	push   ebx
c00194f6:	e8 12 d0 fe ff       	call   c000650d <iso_open>
c00194fb:	83 c4 10             	add    esp,0x10
c00194fe:	89 c2                	mov    edx,eax
c0019500:	b8 01 00 00 00       	mov    eax,0x1
c0019505:	83 fa ff             	cmp    edx,0xffffffff
c0019508:	74 10                	je     c001951a <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001950a:	83 c2 32             	add    edx,0x32
c001950d:	31 c0                	xor    eax,eax
c001950f:	01 d2                	add    edx,edx
c0019511:	89 16                	mov    DWORD PTR [esi],edx
c0019513:	eb 05                	jmp    c001951a <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019515:	b8 04 00 00 00       	mov    eax,0x4
c001951a:	5a                   	pop    edx
c001951b:	5b                   	pop    ebx
c001951c:	5e                   	pop    esi
c001951d:	c3                   	ret    

c001951e <ISO9660::read(void*, unsigned long, void*, int*)>:
c001951e:	53                   	push   ebx
c001951f:	83 ec 08             	sub    esp,0x8
c0019522:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019526:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001952a:	85 c0                	test   eax,eax
c001952c:	74 2d                	je     c001955b <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001952e:	85 db                	test   ebx,ebx
c0019530:	74 29                	je     c001955b <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0019532:	b9 02 00 00 00       	mov    ecx,0x2
c0019537:	52                   	push   edx
c0019538:	99                   	cdq    
c0019539:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001953d:	f7 f9                	idiv   ecx
c001953f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019543:	83 e8 32             	sub    eax,0x32
c0019546:	50                   	push   eax
c0019547:	e8 69 d0 fe ff       	call   c00065b5 <iso_read>
c001954c:	83 c4 10             	add    esp,0x10
c001954f:	89 03                	mov    DWORD PTR [ebx],eax
c0019551:	09 d0                	or     eax,edx
c0019553:	0f 94 c0             	sete   al
c0019556:	0f b6 c0             	movzx  eax,al
c0019559:	eb 05                	jmp    c0019560 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001955b:	b8 04 00 00 00       	mov    eax,0x4
c0019560:	83 c4 08             	add    esp,0x8
c0019563:	5b                   	pop    ebx
c0019564:	c3                   	ret    
c0019565:	90                   	nop

c0019566 <ISO9660::seek(void*, unsigned long long)>:
c0019566:	57                   	push   edi
c0019567:	56                   	push   esi
c0019568:	b8 04 00 00 00       	mov    eax,0x4
c001956d:	51                   	push   ecx
c001956e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019572:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019576:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001957a:	85 d2                	test   edx,edx
c001957c:	74 26                	je     c00195a4 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001957e:	6a 00                	push   0x0
c0019580:	b9 02 00 00 00       	mov    ecx,0x2
c0019585:	57                   	push   edi
c0019586:	89 d0                	mov    eax,edx
c0019588:	56                   	push   esi
c0019589:	99                   	cdq    
c001958a:	f7 f9                	idiv   ecx
c001958c:	83 e8 32             	sub    eax,0x32
c001958f:	50                   	push   eax
c0019590:	e8 36 d1 fe ff       	call   c00066cb <iso_seek>
c0019595:	83 c4 10             	add    esp,0x10
c0019598:	31 f0                	xor    eax,esi
c001959a:	31 fa                	xor    edx,edi
c001959c:	09 d0                	or     eax,edx
c001959e:	0f 95 c0             	setne  al
c00195a1:	0f b6 c0             	movzx  eax,al
c00195a4:	5a                   	pop    edx
c00195a5:	5e                   	pop    esi
c00195a6:	5f                   	pop    edi
c00195a7:	c3                   	ret    

c00195a8 <ISO9660::tell(void*, unsigned long long*)>:
c00195a8:	53                   	push   ebx
c00195a9:	83 ec 08             	sub    esp,0x8
c00195ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00195b0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00195b4:	85 c0                	test   eax,eax
c00195b6:	74 24                	je     c00195dc <ISO9660::tell(void*, unsigned long long*)+0x34>
c00195b8:	85 db                	test   ebx,ebx
c00195ba:	74 20                	je     c00195dc <ISO9660::tell(void*, unsigned long long*)+0x34>
c00195bc:	83 ec 0c             	sub    esp,0xc
c00195bf:	b9 02 00 00 00       	mov    ecx,0x2
c00195c4:	99                   	cdq    
c00195c5:	f7 f9                	idiv   ecx
c00195c7:	83 e8 32             	sub    eax,0x32
c00195ca:	50                   	push   eax
c00195cb:	e8 7f d1 fe ff       	call   c000674f <iso_tell>
c00195d0:	83 c4 10             	add    esp,0x10
c00195d3:	89 03                	mov    DWORD PTR [ebx],eax
c00195d5:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00195d8:	31 c0                	xor    eax,eax
c00195da:	eb 05                	jmp    c00195e1 <ISO9660::tell(void*, unsigned long long*)+0x39>
c00195dc:	b8 04 00 00 00       	mov    eax,0x4
c00195e1:	83 c4 08             	add    esp,0x8
c00195e4:	5b                   	pop    ebx
c00195e5:	c3                   	ret    

c00195e6 <ISO9660::stat(void*, unsigned long long*)>:
c00195e6:	53                   	push   ebx
c00195e7:	83 ec 14             	sub    esp,0x14
c00195ea:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00195ee:	68 35 18 02 c0       	push   0xc0021835
c00195f3:	e8 ff 13 ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c00195f8:	83 c4 10             	add    esp,0x10
c00195fb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019600:	74 2c                	je     c001962e <ISO9660::stat(void*, unsigned long long*)+0x48>
c0019602:	85 db                	test   ebx,ebx
c0019604:	74 28                	je     c001962e <ISO9660::stat(void*, unsigned long long*)+0x48>
c0019606:	83 ec 0c             	sub    esp,0xc
c0019609:	b9 02 00 00 00       	mov    ecx,0x2
c001960e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019612:	99                   	cdq    
c0019613:	f7 f9                	idiv   ecx
c0019615:	83 e8 32             	sub    eax,0x32
c0019618:	50                   	push   eax
c0019619:	e8 62 d1 fe ff       	call   c0006780 <iso_total>
c001961e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019625:	89 03                	mov    DWORD PTR [ebx],eax
c0019627:	83 c4 10             	add    esp,0x10
c001962a:	31 c0                	xor    eax,eax
c001962c:	eb 05                	jmp    c0019633 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001962e:	b8 04 00 00 00       	mov    eax,0x4
c0019633:	83 c4 08             	add    esp,0x8
c0019636:	5b                   	pop    ebx
c0019637:	c3                   	ret    

c0019638 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0019638:	55                   	push   ebp
c0019639:	57                   	push   edi
c001963a:	56                   	push   esi
c001963b:	53                   	push   ebx
c001963c:	83 ec 18             	sub    esp,0x18
c001963f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0019643:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0019647:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001964b:	68 3d 18 02 c0       	push   0xc002183d
c0019650:	e8 a2 13 ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c0019655:	83 c4 10             	add    esp,0x10
c0019658:	85 ff                	test   edi,edi
c001965a:	0f 94 c0             	sete   al
c001965d:	85 f6                	test   esi,esi
c001965f:	0f 94 c2             	sete   dl
c0019662:	09 d0                	or     eax,edx
c0019664:	a8 01                	test   al,0x1
c0019666:	0f 85 dd 00 00 00    	jne    c0019749 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001966c:	85 db                	test   ebx,ebx
c001966e:	0f 84 d5 00 00 00    	je     c0019749 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c0019674:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0019677:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001967d:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0019684:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c001968b:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001968d:	38 0d 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,cl
c0019693:	74 1b                	je     c00196b0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c0019695:	85 c0                	test   eax,eax
c0019697:	74 10                	je     c00196a9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c0019699:	83 ec 0c             	sub    esp,0xc
c001969c:	68 e1 17 02 c0       	push   0xc00217e1
c00196a1:	e8 81 72 ff ff       	call   c0010927 <KePanic(char const*)>
c00196a6:	83 c4 10             	add    esp,0x10
c00196a9:	8a 03                	mov    al,BYTE PTR [ebx]
c00196ab:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c00196b0:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00196b3:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c00196ba:	85 c0                	test   eax,eax
c00196bc:	74 09                	je     c00196c7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c00196be:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00196c5:	74 51                	je     c0019718 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c00196c7:	83 ec 0c             	sub    esp,0xc
c00196ca:	68 45 18 02 c0       	push   0xc0021845
c00196cf:	e8 23 13 ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c00196d4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00196d7:	83 c4 10             	add    esp,0x10
c00196da:	83 3c 85 1c 73 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd8ce4],0x0
c00196e2:	74 21                	je     c0019705 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c00196e4:	83 ec 0c             	sub    esp,0xc
c00196e7:	68 65 18 02 c0       	push   0xc0021865
c00196ec:	e8 06 13 ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c00196f1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00196f4:	83 c4 10             	add    esp,0x10
c00196f7:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c00196fe:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0019705:	83 ec 0c             	sub    esp,0xc
c0019708:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c001970f:	50                   	push   eax
c0019710:	e8 31 d3 fe ff       	call   c0006a46 <init_percd>
c0019715:	83 c4 10             	add    esp,0x10
c0019718:	83 c3 03             	add    ebx,0x3
c001971b:	52                   	push   edx
c001971c:	52                   	push   edx
c001971d:	6a 00                	push   0x0
c001971f:	53                   	push   ebx
c0019720:	e8 e8 cd fe ff       	call   c000650d <iso_open>
c0019725:	83 c4 10             	add    esp,0x10
c0019728:	89 c5                	mov    ebp,eax
c001972a:	83 f8 ff             	cmp    eax,0xffffffff
c001972d:	75 21                	jne    c0019750 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001972f:	50                   	push   eax
c0019730:	50                   	push   eax
c0019731:	6a 01                	push   0x1
c0019733:	53                   	push   ebx
c0019734:	e8 d4 cd fe ff       	call   c000650d <iso_open>
c0019739:	83 c4 10             	add    esp,0x10
c001973c:	ba 02 00 00 00       	mov    edx,0x2
c0019741:	40                   	inc    eax
c0019742:	74 2b                	je     c001976f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0019744:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0019747:	eb 24                	jmp    c001976d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c0019749:	ba 04 00 00 00       	mov    edx,0x4
c001974e:	eb 1f                	jmp    c001976f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0019750:	83 ec 0c             	sub    esp,0xc
c0019753:	50                   	push   eax
c0019754:	e8 27 d0 fe ff       	call   c0006780 <iso_total>
c0019759:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0019760:	89 07                	mov    DWORD PTR [edi],eax
c0019762:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019765:	e8 2d ce fe ff       	call   c0006597 <iso_close>
c001976a:	83 c4 10             	add    esp,0x10
c001976d:	31 d2                	xor    edx,edx
c001976f:	83 c4 0c             	add    esp,0xc
c0019772:	89 d0                	mov    eax,edx
c0019774:	5b                   	pop    ebx
c0019775:	5e                   	pop    esi
c0019776:	5f                   	pop    edi
c0019777:	5d                   	pop    ebp
c0019778:	c3                   	ret    
c0019779:	90                   	nop

c001977a <ISO9660::close(void*)>:
c001977a:	83 ec 0c             	sub    esp,0xc
c001977d:	b8 04 00 00 00       	mov    eax,0x4
c0019782:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019786:	85 d2                	test   edx,edx
c0019788:	74 1b                	je     c00197a5 <ISO9660::close(void*)+0x2b>
c001978a:	83 ec 0c             	sub    esp,0xc
c001978d:	b9 02 00 00 00       	mov    ecx,0x2
c0019792:	89 d0                	mov    eax,edx
c0019794:	99                   	cdq    
c0019795:	f7 f9                	idiv   ecx
c0019797:	83 e8 32             	sub    eax,0x32
c001979a:	50                   	push   eax
c001979b:	e8 f7 cd fe ff       	call   c0006597 <iso_close>
c00197a0:	83 c4 10             	add    esp,0x10
c00197a3:	31 c0                	xor    eax,eax
c00197a5:	83 c4 0c             	add    esp,0xc
c00197a8:	c3                   	ret    
c00197a9:	90                   	nop

c00197aa <ISO9660::openDir(char const*, void**)>:
c00197aa:	56                   	push   esi
c00197ab:	53                   	push   ebx
c00197ac:	50                   	push   eax
c00197ad:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00197b1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00197b5:	85 db                	test   ebx,ebx
c00197b7:	0f 84 bd 00 00 00    	je     c001987a <ISO9660::openDir(char const*, void**)+0xd0>
c00197bd:	85 f6                	test   esi,esi
c00197bf:	0f 84 b5 00 00 00    	je     c001987a <ISO9660::openDir(char const*, void**)+0xd0>
c00197c5:	8a 13                	mov    dl,BYTE PTR [ebx]
c00197c7:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c00197ce:	38 15 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,dl
c00197d4:	74 1b                	je     c00197f1 <ISO9660::openDir(char const*, void**)+0x47>
c00197d6:	85 c0                	test   eax,eax
c00197d8:	74 10                	je     c00197ea <ISO9660::openDir(char const*, void**)+0x40>
c00197da:	83 ec 0c             	sub    esp,0xc
c00197dd:	68 e1 17 02 c0       	push   0xc00217e1
c00197e2:	e8 40 71 ff ff       	call   c0010927 <KePanic(char const*)>
c00197e7:	83 c4 10             	add    esp,0x10
c00197ea:	8a 03                	mov    al,BYTE PTR [ebx]
c00197ec:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c00197f1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00197f4:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c00197fb:	85 c0                	test   eax,eax
c00197fd:	74 10                	je     c001980f <ISO9660::openDir(char const*, void**)+0x65>
c00197ff:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019806:	74 1a                	je     c0019822 <ISO9660::openDir(char const*, void**)+0x78>
c0019808:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001980f:	83 ec 0c             	sub    esp,0xc
c0019812:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019819:	50                   	push   eax
c001981a:	e8 27 d2 fe ff       	call   c0006a46 <init_percd>
c001981f:	83 c4 10             	add    esp,0x10
c0019822:	83 c3 03             	add    ebx,0x3
c0019825:	50                   	push   eax
c0019826:	50                   	push   eax
c0019827:	6a 01                	push   0x1
c0019829:	53                   	push   ebx
c001982a:	e8 de cc fe ff       	call   c000650d <iso_open>
c001982f:	83 c4 10             	add    esp,0x10
c0019832:	89 c3                	mov    ebx,eax
c0019834:	83 f8 ff             	cmp    eax,0xffffffff
c0019837:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001983c:	75 1c                	jne    c001985a <ISO9660::openDir(char const*, void**)+0xb0>
c001983e:	53                   	push   ebx
c001983f:	53                   	push   ebx
c0019840:	68 89 18 02 c0       	push   0xc0021889
c0019845:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001984b:	e8 40 f2 fe ff       	call   c0008a90 <VgaText::puts(char const*)>
c0019850:	83 c4 10             	add    esp,0x10
c0019853:	b8 01 00 00 00       	mov    eax,0x1
c0019858:	eb 25                	jmp    c001987f <ISO9660::openDir(char const*, void**)+0xd5>
c001985a:	01 db                	add    ebx,ebx
c001985c:	51                   	push   ecx
c001985d:	83 c3 65             	add    ebx,0x65
c0019860:	51                   	push   ecx
c0019861:	68 9c 18 02 c0       	push   0xc002189c
c0019866:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001986c:	e8 1f f2 fe ff       	call   c0008a90 <VgaText::puts(char const*)>
c0019871:	89 1e                	mov    DWORD PTR [esi],ebx
c0019873:	83 c4 10             	add    esp,0x10
c0019876:	31 c0                	xor    eax,eax
c0019878:	eb 05                	jmp    c001987f <ISO9660::openDir(char const*, void**)+0xd5>
c001987a:	b8 04 00 00 00       	mov    eax,0x4
c001987f:	5a                   	pop    edx
c0019880:	5b                   	pop    ebx
c0019881:	5e                   	pop    esi
c0019882:	c3                   	ret    
c0019883:	90                   	nop

c0019884 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0019884:	55                   	push   ebp
c0019885:	57                   	push   edi
c0019886:	56                   	push   esi
c0019887:	53                   	push   ebx
c0019888:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001988e:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0019895:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001989c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00198a4:	0f 84 e7 00 00 00    	je     c0019991 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c00198aa:	85 db                	test   ebx,ebx
c00198ac:	0f 84 df 00 00 00    	je     c0019991 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c00198b2:	83 ec 0c             	sub    esp,0xc
c00198b5:	68 af 18 02 c0       	push   0xc00218af
c00198ba:	e8 38 11 ff ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c00198bf:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c00198c6:	b9 02 00 00 00       	mov    ecx,0x2
c00198cb:	99                   	cdq    
c00198cc:	f7 f9                	idiv   ecx
c00198ce:	83 e8 32             	sub    eax,0x32
c00198d1:	89 04 24             	mov    DWORD PTR [esp],eax
c00198d4:	e8 f9 ce fe ff       	call   c00067d2 <iso_readdir>
c00198d9:	83 c4 10             	add    esp,0x10
c00198dc:	89 c6                	mov    esi,eax
c00198de:	85 c0                	test   eax,eax
c00198e0:	75 37                	jne    c0019919 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c00198e2:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00198e7:	56                   	push   esi
c00198e8:	56                   	push   esi
c00198e9:	68 ba 18 02 c0       	push   0xc00218ba
c00198ee:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00198f4:	e8 97 f1 fe ff       	call   c0008a90 <VgaText::puts(char const*)>
c00198f9:	83 c4 0c             	add    esp,0xc
c00198fc:	68 10 01 00 00       	push   0x110
c0019901:	6a 00                	push   0x0
c0019903:	57                   	push   edi
c0019904:	e8 e7 6b fe ff       	call   c00004f0 <memset>
c0019909:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001990f:	83 c4 10             	add    esp,0x10
c0019912:	b8 01 00 00 00       	mov    eax,0x1
c0019917:	eb 7d                	jmp    c0019996 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c0019919:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001991f:	8d 68 08             	lea    ebp,[eax+0x8]
c0019922:	83 ec 0c             	sub    esp,0xc
c0019925:	55                   	push   ebp
c0019926:	e8 45 6c fe ff       	call   c0000570 <strlen>
c001992b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0019933:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019937:	83 c4 10             	add    esp,0x10
c001993a:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001993e:	75 0a                	jne    c001994a <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0019940:	b8 02 00 00 00       	mov    eax,0x2
c0019945:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0019948:	74 05                	je     c001994f <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001994a:	b8 01 00 00 00       	mov    eax,0x1
c001994f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019953:	50                   	push   eax
c0019954:	50                   	push   eax
c0019955:	55                   	push   ebp
c0019956:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001995a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001995e:	50                   	push   eax
c001995f:	e8 dc 6c fe ff       	call   c0000640 <strcpy>
c0019964:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001996b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001996d:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0019973:	5a                   	pop    edx
c0019974:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0019979:	59                   	pop    ecx
c001997a:	68 cd 18 02 c0       	push   0xc00218cd
c001997f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019985:	e8 06 f1 fe ff       	call   c0008a90 <VgaText::puts(char const*)>
c001998a:	83 c4 10             	add    esp,0x10
c001998d:	31 c0                	xor    eax,eax
c001998f:	eb 05                	jmp    c0019996 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c0019991:	b8 04 00 00 00       	mov    eax,0x4
c0019996:	81 c4 1c 01 00 00    	add    esp,0x11c
c001999c:	5b                   	pop    ebx
c001999d:	5e                   	pop    esi
c001999e:	5f                   	pop    edi
c001999f:	5d                   	pop    ebp
c00199a0:	c3                   	ret    

c00199a1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00199a1:	57                   	push   edi
c00199a2:	56                   	push   esi
c00199a3:	53                   	push   ebx
c00199a4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00199a8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00199ac:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00199b0:	39 35 24 83 02 c0    	cmp    DWORD PTR ds:0xc0028324,esi
c00199b6:	0f be cb             	movsx  ecx,bl
c00199b9:	75 0b                	jne    c00199c6 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c00199bb:	0f be 05 24 24 02 c0 	movsx  eax,BYTE PTR ds:0xc0022424
c00199c2:	39 c8                	cmp    eax,ecx
c00199c4:	74 47                	je     c0019a0d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c00199c6:	83 ec 0c             	sub    esp,0xc
c00199c9:	31 d2                	xor    edx,edx
c00199cb:	68 40 83 02 c0       	push   0xc0028340
c00199d0:	6a 01                	push   0x1
c00199d2:	52                   	push   edx
c00199d3:	56                   	push   esi
c00199d4:	ff 34 8d 1c 73 02 c0 	push   DWORD PTR [ecx*4-0x3ffd8ce4]
c00199db:	e8 30 38 ff ff       	call   c000d210 <LogicalDisk::read(unsigned long long, int, void*)>
c00199e0:	83 c4 20             	add    esp,0x20
c00199e3:	85 c0                	test   eax,eax
c00199e5:	75 0e                	jne    c00199f5 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c00199e7:	89 35 24 83 02 c0    	mov    DWORD PTR ds:0xc0028324,esi
c00199ed:	88 1d 24 24 02 c0    	mov    BYTE PTR ds:0xc0022424,bl
c00199f3:	eb 18                	jmp    c0019a0d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c00199f5:	50                   	push   eax
c00199f6:	68 00 08 00 00       	push   0x800
c00199fb:	6a 00                	push   0x0
c00199fd:	57                   	push   edi
c00199fe:	e8 ed 6a fe ff       	call   c00004f0 <memset>
c0019a03:	83 c4 10             	add    esp,0x10
c0019a06:	b8 01 00 00 00       	mov    eax,0x1
c0019a0b:	eb 0e                	jmp    c0019a1b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c0019a0d:	be 40 83 02 c0       	mov    esi,0xc0028340
c0019a12:	b9 00 08 00 00       	mov    ecx,0x800
c0019a17:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019a19:	31 c0                	xor    eax,eax
c0019a1b:	5b                   	pop    ebx
c0019a1c:	5e                   	pop    esi
c0019a1d:	5f                   	pop    edi
c0019a1e:	c3                   	ret    
c0019a1f:	90                   	nop

c0019a20 <ISO9660::tryMount(LogicalDisk*, int)>:
c0019a20:	53                   	push   ebx
c0019a21:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0019a27:	c7 05 24 83 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0028324,0xdeadbeef
c0019a31:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c0019a38:	8d 58 41             	lea    ebx,[eax+0x41]
c0019a3b:	0f be db             	movsx  ebx,bl
c0019a3e:	53                   	push   ebx
c0019a3f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019a43:	50                   	push   eax
c0019a44:	6a 10                	push   0x10
c0019a46:	e8 56 ff ff ff       	call   c00199a1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0019a4b:	83 c4 10             	add    esp,0x10
c0019a4e:	31 d2                	xor    edx,edx
c0019a50:	85 c0                	test   eax,eax
c0019a52:	75 33                	jne    c0019a87 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019a54:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0019a59:	75 2c                	jne    c0019a87 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019a5b:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0019a60:	75 25                	jne    c0019a87 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019a62:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0019a67:	75 1e                	jne    c0019a87 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019a69:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0019a6e:	75 17                	jne    c0019a87 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019a70:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0019a75:	75 10                	jne    c0019a87 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019a77:	83 ec 0c             	sub    esp,0xc
c0019a7a:	53                   	push   ebx
c0019a7b:	e8 c6 cf fe ff       	call   c0006a46 <init_percd>
c0019a80:	83 c4 10             	add    esp,0x10
c0019a83:	40                   	inc    eax
c0019a84:	0f 95 c2             	setne  dl
c0019a87:	88 d0                	mov    al,dl
c0019a89:	81 c4 08 08 00 00    	add    esp,0x808
c0019a8f:	5b                   	pop    ebx
c0019a90:	c3                   	ret    
c0019a91:	90                   	nop

c0019a92 <ISO9660::ISO9660()>:
c0019a92:	83 ec 0c             	sub    esp,0xc
c0019a95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a99:	83 ec 0c             	sub    esp,0xc
c0019a9c:	50                   	push   eax
c0019a9d:	e8 78 12 ff ff       	call   c000ad1a <Filesystem::Filesystem()>
c0019aa2:	83 c4 10             	add    esp,0x10
c0019aa5:	ba e8 18 02 c0       	mov    edx,0xc00218e8
c0019aaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019aae:	89 10                	mov    DWORD PTR [eax],edx
c0019ab0:	e8 a3 d0 fe ff       	call   c0006b58 <fs_iso9660_init>
c0019ab5:	90                   	nop
c0019ab6:	83 c4 0c             	add    esp,0xc
c0019ab9:	c3                   	ret    

c0019aba <SoundCard::beginPlayback()>:
c0019aba:	c7 44 24 04 48 19 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021948
c0019ac2:	e9 60 6e ff ff       	jmp    c0010927 <KePanic(char const*)>
c0019ac7:	90                   	nop

c0019ac8 <SoundCard::stopPlayback()>:
c0019ac8:	c7 44 24 04 48 19 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021948
c0019ad0:	e9 52 6e ff ff       	jmp    c0010927 <KePanic(char const*)>
c0019ad5:	90                   	nop

c0019ad6 <SoundCard::SoundCard(char const*)>:
c0019ad6:	83 ec 1c             	sub    esp,0x1c
c0019ad9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019add:	83 ec 08             	sub    esp,0x8
c0019ae0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019ae4:	50                   	push   eax
c0019ae5:	e8 dc 24 ff ff       	call   c000bfc6 <Device::Device(char const*)>
c0019aea:	83 c4 10             	add    esp,0x10
c0019aed:	ba 94 19 02 c0       	mov    edx,0xc0021994
c0019af2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019af6:	89 10                	mov    DWORD PTR [eax],edx
c0019af8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019afc:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019b03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b07:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0019b11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b15:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0019b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b23:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0019b2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b31:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0019b3b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019b43:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0019b48:	7f 1a                	jg     c0019b64 <SoundCard::SoundCard(char const*)+0x8e>
c0019b4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b4e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019b52:	83 c2 54             	add    edx,0x54
c0019b55:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0019b5d:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019b62:	eb df                	jmp    c0019b43 <SoundCard::SoundCard(char const*)+0x6d>
c0019b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b68:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019b6f:	90                   	nop
c0019b70:	83 c4 1c             	add    esp,0x1c
c0019b73:	c3                   	ret    

c0019b74 <SoundCard::~SoundCard()>:
c0019b74:	83 ec 0c             	sub    esp,0xc
c0019b77:	ba 94 19 02 c0       	mov    edx,0xc0021994
c0019b7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b80:	89 10                	mov    DWORD PTR [eax],edx
c0019b82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b86:	83 ec 0c             	sub    esp,0xc
c0019b89:	50                   	push   eax
c0019b8a:	e8 a1 21 ff ff       	call   c000bd30 <Device::~Device()>
c0019b8f:	83 c4 10             	add    esp,0x10
c0019b92:	90                   	nop
c0019b93:	83 c4 0c             	add    esp,0xc
c0019b96:	c3                   	ret    
c0019b97:	90                   	nop

c0019b98 <SoundCard::~SoundCard()>:
c0019b98:	83 ec 0c             	sub    esp,0xc
c0019b9b:	83 ec 0c             	sub    esp,0xc
c0019b9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ba2:	e8 cd ff ff ff       	call   c0019b74 <SoundCard::~SoundCard()>
c0019ba7:	83 c4 10             	add    esp,0x10
c0019baa:	83 ec 08             	sub    esp,0x8
c0019bad:	68 e8 01 00 00       	push   0x1e8
c0019bb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019bb6:	e8 0f 0d ff ff       	call   c000a8ca <operator delete(void*, unsigned long)>
c0019bbb:	83 c4 10             	add    esp,0x10
c0019bbe:	83 c4 0c             	add    esp,0xc
c0019bc1:	c3                   	ret    

c0019bc2 <SoundCard::configureRates(int, int, int)>:
c0019bc2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019bc6:	31 c0                	xor    eax,eax
c0019bc8:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0019bcf:	75 20                	jne    c0019bf1 <SoundCard::configureRates(int, int, int)+0x2f>
c0019bd1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019bd5:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0019bdb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019bdf:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0019be5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019be9:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0019bef:	b0 01                	mov    al,0x1
c0019bf1:	c3                   	ret    

c0019bf2 <SoundCard::getSamples16(int, short*)>:
c0019bf2:	55                   	push   ebp
c0019bf3:	57                   	push   edi
c0019bf4:	31 ff                	xor    edi,edi
c0019bf6:	56                   	push   esi
c0019bf7:	53                   	push   ebx
c0019bf8:	31 db                	xor    ebx,ebx
c0019bfa:	83 ec 10             	sub    esp,0x10
c0019bfd:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0019c01:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019c05:	8d 04 36             	lea    eax,[esi+esi*1]
c0019c08:	50                   	push   eax
c0019c09:	6a 00                	push   0x0
c0019c0b:	55                   	push   ebp
c0019c0c:	e8 df 68 fe ff       	call   c00004f0 <memset>
c0019c11:	83 c4 10             	add    esp,0x10
c0019c14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019c18:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0019c1f:	85 c0                	test   eax,eax
c0019c21:	74 1b                	je     c0019c3e <SoundCard::getSamples16(int, short*)+0x4c>
c0019c23:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019c27:	75 15                	jne    c0019c3e <SoundCard::getSamples16(int, short*)+0x4c>
c0019c29:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019c2d:	55                   	push   ebp
c0019c2e:	56                   	push   esi
c0019c2f:	50                   	push   eax
c0019c30:	e8 f3 02 00 00       	call   c0019f28 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0019c35:	83 c4 10             	add    esp,0x10
c0019c38:	39 c7                	cmp    edi,eax
c0019c3a:	7d 02                	jge    c0019c3e <SoundCard::getSamples16(int, short*)+0x4c>
c0019c3c:	89 c7                	mov    edi,eax
c0019c3e:	43                   	inc    ebx
c0019c3f:	83 fb 20             	cmp    ebx,0x20
c0019c42:	75 d0                	jne    c0019c14 <SoundCard::getSamples16(int, short*)+0x22>
c0019c44:	83 c4 0c             	add    esp,0xc
c0019c47:	89 f8                	mov    eax,edi
c0019c49:	5b                   	pop    ebx
c0019c4a:	5e                   	pop    esi
c0019c4b:	5f                   	pop    edi
c0019c4c:	5d                   	pop    ebp
c0019c4d:	c3                   	ret    

c0019c4e <SoundCard::getSamples32(int, int*)>:
c0019c4e:	55                   	push   ebp
c0019c4f:	57                   	push   edi
c0019c50:	31 ff                	xor    edi,edi
c0019c52:	56                   	push   esi
c0019c53:	31 f6                	xor    esi,esi
c0019c55:	53                   	push   ebx
c0019c56:	83 ec 10             	sub    esp,0x10
c0019c59:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019c5d:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0019c61:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019c65:	c1 e0 02             	shl    eax,0x2
c0019c68:	50                   	push   eax
c0019c69:	6a 00                	push   0x0
c0019c6b:	55                   	push   ebp
c0019c6c:	e8 7f 68 fe ff       	call   c00004f0 <memset>
c0019c71:	83 c4 10             	add    esp,0x10
c0019c74:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0019c7b:	85 c0                	test   eax,eax
c0019c7d:	74 1b                	je     c0019c9a <SoundCard::getSamples32(int, int*)+0x4c>
c0019c7f:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019c83:	75 15                	jne    c0019c9a <SoundCard::getSamples32(int, int*)+0x4c>
c0019c85:	53                   	push   ebx
c0019c86:	55                   	push   ebp
c0019c87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019c8b:	50                   	push   eax
c0019c8c:	e8 63 03 00 00       	call   c0019ff4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0019c91:	83 c4 10             	add    esp,0x10
c0019c94:	39 c6                	cmp    esi,eax
c0019c96:	7d 02                	jge    c0019c9a <SoundCard::getSamples32(int, int*)+0x4c>
c0019c98:	89 c6                	mov    esi,eax
c0019c9a:	47                   	inc    edi
c0019c9b:	83 ff 20             	cmp    edi,0x20
c0019c9e:	75 d4                	jne    c0019c74 <SoundCard::getSamples32(int, int*)+0x26>
c0019ca0:	85 f6                	test   esi,esi
c0019ca2:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c0019ca9:	75 0f                	jne    c0019cba <SoundCard::getSamples32(int, int*)+0x6c>
c0019cab:	85 c0                	test   eax,eax
c0019cad:	74 1b                	je     c0019cca <SoundCard::getSamples32(int, int*)+0x7c>
c0019caf:	83 ec 0c             	sub    esp,0xc
c0019cb2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019cb4:	53                   	push   ebx
c0019cb5:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0019cb8:	eb 0d                	jmp    c0019cc7 <SoundCard::getSamples32(int, int*)+0x79>
c0019cba:	85 c0                	test   eax,eax
c0019cbc:	75 0c                	jne    c0019cca <SoundCard::getSamples32(int, int*)+0x7c>
c0019cbe:	83 ec 0c             	sub    esp,0xc
c0019cc1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019cc3:	53                   	push   ebx
c0019cc4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0019cc7:	83 c4 10             	add    esp,0x10
c0019cca:	83 c4 0c             	add    esp,0xc
c0019ccd:	89 f0                	mov    eax,esi
c0019ccf:	5b                   	pop    ebx
c0019cd0:	5e                   	pop    esi
c0019cd1:	5f                   	pop    edi
c0019cd2:	5d                   	pop    ebp
c0019cd3:	c3                   	ret    

c0019cd4 <SoundCard::addChannel(SoundPort*)>:
c0019cd4:	83 ec 0c             	sub    esp,0xc
c0019cd7:	31 c0                	xor    eax,eax
c0019cd9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019cdd:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0019ce5:	74 1b                	je     c0019d02 <SoundCard::addChannel(SoundPort*)+0x2e>
c0019ce7:	40                   	inc    eax
c0019ce8:	83 f8 20             	cmp    eax,0x20
c0019ceb:	75 f0                	jne    c0019cdd <SoundCard::addChannel(SoundPort*)+0x9>
c0019ced:	83 ec 0c             	sub    esp,0xc
c0019cf0:	68 6d 19 02 c0       	push   0xc002196d
c0019cf5:	e8 2d 6c ff ff       	call   c0010927 <KePanic(char const*)>
c0019cfa:	83 c4 10             	add    esp,0x10
c0019cfd:	83 c8 ff             	or     eax,0xffffffff
c0019d00:	eb 0b                	jmp    c0019d0d <SoundCard::addChannel(SoundPort*)+0x39>
c0019d02:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019d06:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0019d0d:	83 c4 0c             	add    esp,0xc
c0019d10:	c3                   	ret    
c0019d11:	90                   	nop

c0019d12 <SoundCard::removeChannel(int)>:
c0019d12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d16:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019d1a:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0019d25:	c3                   	ret    
c0019d26:	66 90                	xchg   ax,ax

c0019d28 <SoundPort::SoundPort(int, int, int, int)>:
c0019d28:	83 ec 0c             	sub    esp,0xc
c0019d2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d2f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0019d36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d3a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0019d3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d42:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019d46:	89 10                	mov    DWORD PTR [eax],edx
c0019d48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d4c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019d50:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0019d53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d57:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019d5b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019d5e:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c0019d63:	75 13                	jne    c0019d78 <SoundPort::SoundPort(int, int, int, int)+0x50>
c0019d65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d69:	8b 00                	mov    eax,DWORD PTR [eax]
c0019d6b:	05 a0 0f 00 00       	add    eax,0xfa0
c0019d70:	01 c0                	add    eax,eax
c0019d72:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0019d76:	66 90                	xchg   ax,ax
c0019d78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d7c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019d80:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0019d83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d87:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0019d8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d92:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019d95:	c1 e0 02             	shl    eax,0x2
c0019d98:	83 ec 0c             	sub    esp,0xc
c0019d9b:	50                   	push   eax
c0019d9c:	e8 0d dd fe ff       	call   c0007aae <malloc>
c0019da1:	83 c4 10             	add    esp,0x10
c0019da4:	89 c2                	mov    edx,eax
c0019da6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019daa:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0019dad:	90                   	nop
c0019dae:	83 c4 0c             	add    esp,0xc
c0019db1:	c3                   	ret    
c0019db2:	66 90                	xchg   ax,ax

c0019db4 <SoundPort::~SoundPort()>:
c0019db4:	83 ec 0c             	sub    esp,0xc
c0019db7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019dbb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019dbe:	85 c0                	test   eax,eax
c0019dc0:	74 1e                	je     c0019de0 <SoundPort::~SoundPort()+0x2c>
c0019dc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019dc6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019dc9:	83 ec 0c             	sub    esp,0xc
c0019dcc:	50                   	push   eax
c0019dcd:	e8 ec dc fe ff       	call   c0007abe <free>
c0019dd2:	83 c4 10             	add    esp,0x10
c0019dd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019dd9:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0019de0:	90                   	nop
c0019de1:	83 c4 0c             	add    esp,0xc
c0019de4:	c3                   	ret    
c0019de5:	90                   	nop
c0019de6:	66 90                	xchg   ax,ax

c0019de8 <SoundPort::unpause()>:
c0019de8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019dec:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0019df0:	c3                   	ret    
c0019df1:	90                   	nop
c0019df2:	66 90                	xchg   ax,ax

c0019df4 <SoundPort::pause()>:
c0019df4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019df8:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0019dfc:	c3                   	ret    
c0019dfd:	90                   	nop
c0019dfe:	66 90                	xchg   ax,ax

c0019e00 <SoundPort::getBufferUsed()>:
c0019e00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019e04:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019e07:	c3                   	ret    

c0019e08 <SoundPort::getBufferSize()>:
c0019e08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019e0c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019e0f:	c3                   	ret    

c0019e10 <SoundPort::buffer16(short*, int)>:
c0019e10:	55                   	push   ebp
c0019e11:	57                   	push   edi
c0019e12:	56                   	push   esi
c0019e13:	53                   	push   ebx
c0019e14:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019e18:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0019e1c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0019e1f:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0019e22:	74 68                	je     c0019e8c <SoundPort::buffer16(short*, int)+0x7c>
c0019e24:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019e28:	85 c9                	test   ecx,ecx
c0019e2a:	7e 60                	jle    c0019e8c <SoundPort::buffer16(short*, int)+0x7c>
c0019e2c:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0019e30:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0019e33:	c1 e1 0f             	shl    ecx,0xf
c0019e36:	8d 70 01             	lea    esi,[eax+0x1]
c0019e39:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0019e3c:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0019e3f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019e42:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019e45:	74 4d                	je     c0019e94 <SoundPort::buffer16(short*, int)+0x84>
c0019e47:	31 f6                	xor    esi,esi
c0019e49:	eb 21                	jmp    c0019e6c <SoundPort::buffer16(short*, int)+0x5c>
c0019e4b:	90                   	nop
c0019e4c:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0019e51:	8d 79 01             	lea    edi,[ecx+0x1]
c0019e54:	c1 e3 0f             	shl    ebx,0xf
c0019e57:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0019e5a:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0019e5d:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0019e60:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019e63:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019e66:	74 1c                	je     c0019e84 <SoundPort::buffer16(short*, int)+0x74>
c0019e68:	89 c6                	mov    esi,eax
c0019e6a:	66 90                	xchg   ax,ax
c0019e6c:	8d 46 01             	lea    eax,[esi+0x1]
c0019e6f:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0019e73:	75 d7                	jne    c0019e4c <SoundPort::buffer16(short*, int)+0x3c>
c0019e75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019e79:	8d 76 00             	lea    esi,[esi+0x0]
c0019e7c:	5b                   	pop    ebx
c0019e7d:	5e                   	pop    esi
c0019e7e:	5f                   	pop    edi
c0019e7f:	5d                   	pop    ebp
c0019e80:	c3                   	ret    
c0019e81:	8d 76 00             	lea    esi,[esi+0x0]
c0019e84:	5b                   	pop    ebx
c0019e85:	8d 46 02             	lea    eax,[esi+0x2]
c0019e88:	5e                   	pop    esi
c0019e89:	5f                   	pop    edi
c0019e8a:	5d                   	pop    ebp
c0019e8b:	c3                   	ret    
c0019e8c:	5b                   	pop    ebx
c0019e8d:	31 c0                	xor    eax,eax
c0019e8f:	5e                   	pop    esi
c0019e90:	5f                   	pop    edi
c0019e91:	5d                   	pop    ebp
c0019e92:	c3                   	ret    
c0019e93:	90                   	nop
c0019e94:	b8 01 00 00 00       	mov    eax,0x1
c0019e99:	eb e1                	jmp    c0019e7c <SoundPort::buffer16(short*, int)+0x6c>
c0019e9b:	90                   	nop

c0019e9c <SoundPort::buffer32(int*, int)>:
c0019e9c:	55                   	push   ebp
c0019e9d:	57                   	push   edi
c0019e9e:	56                   	push   esi
c0019e9f:	53                   	push   ebx
c0019ea0:	83 ec 04             	sub    esp,0x4
c0019ea3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019ea7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019eab:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019eae:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019eb2:	89 04 24             	mov    DWORD PTR [esp],eax
c0019eb5:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019eb8:	74 5a                	je     c0019f14 <SoundPort::buffer32(int*, int)+0x78>
c0019eba:	85 c0                	test   eax,eax
c0019ebc:	7e 56                	jle    c0019f14 <SoundPort::buffer32(int*, int)+0x78>
c0019ebe:	8d 71 01             	lea    esi,[ecx+0x1]
c0019ec1:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0019ec4:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0019ec7:	8b 37                	mov    esi,DWORD PTR [edi]
c0019ec9:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0019ecc:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019ecf:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019ed2:	74 4c                	je     c0019f20 <SoundPort::buffer32(int*, int)+0x84>
c0019ed4:	31 f6                	xor    esi,esi
c0019ed6:	eb 1c                	jmp    c0019ef4 <SoundPort::buffer32(int*, int)+0x58>
c0019ed8:	8d 69 01             	lea    ebp,[ecx+0x1]
c0019edb:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0019ede:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0019ee1:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0019ee4:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0019ee8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019eeb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019eee:	74 18                	je     c0019f08 <SoundPort::buffer32(int*, int)+0x6c>
c0019ef0:	89 de                	mov    esi,ebx
c0019ef2:	66 90                	xchg   ax,ax
c0019ef4:	8d 5e 01             	lea    ebx,[esi+0x1]
c0019ef7:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0019efa:	75 dc                	jne    c0019ed8 <SoundPort::buffer32(int*, int)+0x3c>
c0019efc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019eff:	90                   	nop
c0019f00:	83 c4 04             	add    esp,0x4
c0019f03:	5b                   	pop    ebx
c0019f04:	5e                   	pop    esi
c0019f05:	5f                   	pop    edi
c0019f06:	5d                   	pop    ebp
c0019f07:	c3                   	ret    
c0019f08:	83 c4 04             	add    esp,0x4
c0019f0b:	8d 46 02             	lea    eax,[esi+0x2]
c0019f0e:	5b                   	pop    ebx
c0019f0f:	5e                   	pop    esi
c0019f10:	5f                   	pop    edi
c0019f11:	5d                   	pop    ebp
c0019f12:	c3                   	ret    
c0019f13:	90                   	nop
c0019f14:	83 c4 04             	add    esp,0x4
c0019f17:	31 c0                	xor    eax,eax
c0019f19:	5b                   	pop    ebx
c0019f1a:	5e                   	pop    esi
c0019f1b:	5f                   	pop    edi
c0019f1c:	5d                   	pop    ebp
c0019f1d:	c3                   	ret    
c0019f1e:	66 90                	xchg   ax,ax
c0019f20:	b8 01 00 00 00       	mov    eax,0x1
c0019f25:	eb d9                	jmp    c0019f00 <SoundPort::buffer32(int*, int)+0x64>
c0019f27:	90                   	nop

c0019f28 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0019f28:	57                   	push   edi
c0019f29:	56                   	push   esi
c0019f2a:	53                   	push   ebx
c0019f2b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019f2f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0019f33:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c0019f39:	39 03                	cmp    DWORD PTR [ebx],eax
c0019f3b:	74 13                	je     c0019f50 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c0019f3d:	83 ec 0c             	sub    esp,0xc
c0019f40:	68 c0 19 02 c0       	push   0xc00219c0
c0019f45:	e8 dd 69 ff ff       	call   c0010927 <KePanic(char const*)>
c0019f4a:	83 c4 10             	add    esp,0x10
c0019f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0019f50:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c0019f56:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0019f59:	74 11                	je     c0019f6c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c0019f5b:	83 ec 0c             	sub    esp,0xc
c0019f5e:	68 ff 19 02 c0       	push   0xc00219ff
c0019f63:	e8 bf 69 ff ff       	call   c0010927 <KePanic(char const*)>
c0019f68:	83 c4 10             	add    esp,0x10
c0019f6b:	90                   	nop
c0019f6c:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c0019f72:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0019f75:	74 11                	je     c0019f88 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c0019f77:	83 ec 0c             	sub    esp,0xc
c0019f7a:	68 ff 19 02 c0       	push   0xc00219ff
c0019f7f:	e8 a3 69 ff ff       	call   c0010927 <KePanic(char const*)>
c0019f84:	83 c4 10             	add    esp,0x10
c0019f87:	90                   	nop
c0019f88:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0019f8b:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c0019f8f:	7e 07                	jle    c0019f98 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0019f91:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019f95:	8d 76 00             	lea    esi,[esi+0x0]
c0019f98:	85 f6                	test   esi,esi
c0019f9a:	7e 2c                	jle    c0019fc8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c0019f9c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019fa0:	8d 3c 36             	lea    edi,[esi+esi*1]
c0019fa3:	31 c9                	xor    ecx,ecx
c0019fa5:	01 d7                	add    edi,edx
c0019fa7:	90                   	nop
c0019fa8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0019fab:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c0019fae:	85 c0                	test   eax,eax
c0019fb0:	79 06                	jns    c0019fb8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c0019fb2:	05 ff 7f 00 00       	add    eax,0x7fff
c0019fb7:	90                   	nop
c0019fb8:	c1 f8 0f             	sar    eax,0xf
c0019fbb:	83 c1 04             	add    ecx,0x4
c0019fbe:	66 01 02             	add    WORD PTR [edx],ax
c0019fc1:	83 c2 02             	add    edx,0x2
c0019fc4:	39 d7                	cmp    edi,edx
c0019fc6:	75 e0                	jne    c0019fa8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c0019fc8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019fcb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019fce:	83 ec 04             	sub    esp,0x4
c0019fd1:	29 f0                	sub    eax,esi
c0019fd3:	c1 e0 02             	shl    eax,0x2
c0019fd6:	50                   	push   eax
c0019fd7:	8d 04 b2             	lea    eax,[edx+esi*4]
c0019fda:	50                   	push   eax
c0019fdb:	52                   	push   edx
c0019fdc:	e8 ef 63 fe ff       	call   c00003d0 <memmove>
c0019fe1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019fe4:	83 c4 10             	add    esp,0x10
c0019fe7:	29 f0                	sub    eax,esi
c0019fe9:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019fec:	89 f0                	mov    eax,esi
c0019fee:	5b                   	pop    ebx
c0019fef:	5e                   	pop    esi
c0019ff0:	5f                   	pop    edi
c0019ff1:	c3                   	ret    
c0019ff2:	66 90                	xchg   ax,ax

c0019ff4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0019ff4:	57                   	push   edi
c0019ff5:	56                   	push   esi
c0019ff6:	53                   	push   ebx
c0019ff7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019ffb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019fff:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a003:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001a009:	39 06                	cmp    DWORD PTR [esi],eax
c001a00b:	74 13                	je     c001a020 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001a00d:	83 ec 0c             	sub    esp,0xc
c001a010:	68 e0 19 02 c0       	push   0xc00219e0
c001a015:	e8 0d 69 ff ff       	call   c0010927 <KePanic(char const*)>
c001a01a:	83 c4 10             	add    esp,0x10
c001a01d:	8d 76 00             	lea    esi,[esi+0x0]
c001a020:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001a026:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001a029:	74 11                	je     c001a03c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001a02b:	83 ec 0c             	sub    esp,0xc
c001a02e:	68 1b 1a 02 c0       	push   0xc0021a1b
c001a033:	e8 ef 68 ff ff       	call   c0010927 <KePanic(char const*)>
c001a038:	83 c4 10             	add    esp,0x10
c001a03b:	90                   	nop
c001a03c:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001a042:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001a045:	74 11                	je     c001a058 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001a047:	83 ec 0c             	sub    esp,0xc
c001a04a:	68 1b 1a 02 c0       	push   0xc0021a1b
c001a04f:	e8 d3 68 ff ff       	call   c0010927 <KePanic(char const*)>
c001a054:	83 c4 10             	add    esp,0x10
c001a057:	90                   	nop
c001a058:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001a05b:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001a05f:	7e 07                	jle    c001a068 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001a061:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a065:	8d 76 00             	lea    esi,[esi+0x0]
c001a068:	85 ff                	test   edi,edi
c001a06a:	7e 1c                	jle    c001a088 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001a06c:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001a073:	31 c0                	xor    eax,eax
c001a075:	8d 76 00             	lea    esi,[esi+0x0]
c001a078:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a07b:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001a07e:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001a081:	83 c0 04             	add    eax,0x4
c001a084:	39 c1                	cmp    ecx,eax
c001a086:	75 f0                	jne    c001a078 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001a088:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a08b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a08e:	83 ec 04             	sub    esp,0x4
c001a091:	29 f8                	sub    eax,edi
c001a093:	c1 e0 02             	shl    eax,0x2
c001a096:	50                   	push   eax
c001a097:	8d 04 ba             	lea    eax,[edx+edi*4]
c001a09a:	50                   	push   eax
c001a09b:	52                   	push   edx
c001a09c:	e8 2f 63 fe ff       	call   c00003d0 <memmove>
c001a0a1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001a0a4:	83 c4 10             	add    esp,0x10
c001a0a7:	29 f8                	sub    eax,edi
c001a0a9:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001a0ac:	89 f8                	mov    eax,edi
c001a0ae:	5b                   	pop    ebx
c001a0af:	5e                   	pop    esi
c001a0b0:	5f                   	pop    edi
c001a0b1:	c3                   	ret    

c001a0b2 <PCI::open(int, int, void*)>:
c001a0b2:	83 ec 18             	sub    esp,0x18
c001a0b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a0b9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a0bd:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001a0c3:	8b 10                	mov    edx,DWORD PTR [eax]
c001a0c5:	50                   	push   eax
c001a0c6:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001a0c9:	31 c0                	xor    eax,eax
c001a0cb:	83 c4 1c             	add    esp,0x1c
c001a0ce:	c3                   	ret    
c001a0cf:	90                   	nop

c001a0d0 <PCI::close(int, int, void*)>:
c001a0d0:	31 c0                	xor    eax,eax
c001a0d2:	c3                   	ret    
c001a0d3:	90                   	nop

c001a0d4 <PCI::PCI()>:
c001a0d4:	83 ec 0c             	sub    esp,0xc
c001a0d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0db:	83 ec 08             	sub    esp,0x8
c001a0de:	68 37 1a 02 c0       	push   0xc0021a37
c001a0e3:	50                   	push   eax
c001a0e4:	e8 a7 16 ff ff       	call   c000b790 <Bus::Bus(char const*)>
c001a0e9:	83 c4 10             	add    esp,0x10
c001a0ec:	ba e0 1a 02 c0       	mov    edx,0xc0021ae0
c001a0f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0f5:	89 10                	mov    DWORD PTR [eax],edx
c001a0f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0fb:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001a105:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a109:	a3 40 8b 02 c0       	mov    ds:0xc0028b40,eax
c001a10e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a112:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a118:	0f b6 d0             	movzx  edx,al
c001a11b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a11f:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001a126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a12a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a130:	0f b6 d0             	movzx  edx,al
c001a133:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a137:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001a13c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a140:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a146:	8d 50 01             	lea    edx,[eax+0x1]
c001a149:	88 d1                	mov    cl,dl
c001a14b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a14f:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001a155:	0f b6 d0             	movzx  edx,al
c001a158:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a15c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001a160:	83 c9 c0             	or     ecx,0xffffffc0
c001a163:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001a167:	90                   	nop
c001a168:	83 c4 0c             	add    esp,0xc
c001a16b:	c3                   	ret    

c001a16c <PCI::readBAR8(unsigned int, int)>:
c001a16c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a170:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a174:	f6 c2 01             	test   dl,0x1
c001a177:	74 07                	je     c001a180 <PCI::readBAR8(unsigned int, int)+0x14>
c001a179:	83 e2 fc             	and    edx,0xfffffffc
c001a17c:	01 c2                	add    edx,eax
c001a17e:	ec                   	in     al,dx
c001a17f:	c3                   	ret    
c001a180:	83 e2 f0             	and    edx,0xfffffff0
c001a183:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001a186:	c3                   	ret    
c001a187:	90                   	nop

c001a188 <PCI::readBAR16(unsigned int, int)>:
c001a188:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a18c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a190:	f6 c2 01             	test   dl,0x1
c001a193:	74 08                	je     c001a19d <PCI::readBAR16(unsigned int, int)+0x15>
c001a195:	83 e2 fc             	and    edx,0xfffffffc
c001a198:	01 c2                	add    edx,eax
c001a19a:	66 ed                	in     ax,dx
c001a19c:	c3                   	ret    
c001a19d:	83 e2 f0             	and    edx,0xfffffff0
c001a1a0:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001a1a4:	c3                   	ret    
c001a1a5:	90                   	nop

c001a1a6 <PCI::readBAR32(unsigned int, int)>:
c001a1a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a1aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a1ae:	f6 c2 01             	test   dl,0x1
c001a1b1:	74 07                	je     c001a1ba <PCI::readBAR32(unsigned int, int)+0x14>
c001a1b3:	83 e2 fc             	and    edx,0xfffffffc
c001a1b6:	01 c2                	add    edx,eax
c001a1b8:	ed                   	in     eax,dx
c001a1b9:	c3                   	ret    
c001a1ba:	83 e2 f0             	and    edx,0xfffffff0
c001a1bd:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001a1c0:	c3                   	ret    
c001a1c1:	90                   	nop

c001a1c2 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001a1c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a1c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a1ca:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a1ce:	f6 c2 01             	test   dl,0x1
c001a1d1:	74 07                	je     c001a1da <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001a1d3:	83 e2 fc             	and    edx,0xfffffffc
c001a1d6:	01 ca                	add    edx,ecx
c001a1d8:	ee                   	out    dx,al
c001a1d9:	c3                   	ret    
c001a1da:	83 e2 f0             	and    edx,0xfffffff0
c001a1dd:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001a1e0:	c3                   	ret    
c001a1e1:	90                   	nop

c001a1e2 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001a1e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a1e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a1ea:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a1ee:	f6 c2 01             	test   dl,0x1
c001a1f1:	74 08                	je     c001a1fb <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001a1f3:	83 e2 fc             	and    edx,0xfffffffc
c001a1f6:	01 ca                	add    edx,ecx
c001a1f8:	66 ef                	out    dx,ax
c001a1fa:	c3                   	ret    
c001a1fb:	83 e2 f0             	and    edx,0xfffffff0
c001a1fe:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001a202:	c3                   	ret    
c001a203:	90                   	nop

c001a204 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001a204:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a208:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a20c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a210:	f6 c2 01             	test   dl,0x1
c001a213:	74 07                	je     c001a21c <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001a215:	83 e2 fc             	and    edx,0xfffffffc
c001a218:	01 ca                	add    edx,ecx
c001a21a:	ef                   	out    dx,eax
c001a21b:	c3                   	ret    
c001a21c:	83 e2 f0             	and    edx,0xfffffff0
c001a21f:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001a222:	c3                   	ret    
c001a223:	90                   	nop

c001a224 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a224:	55                   	push   ebp
c001a225:	57                   	push   edi
c001a226:	56                   	push   esi
c001a227:	53                   	push   ebx
c001a228:	83 ec 0c             	sub    esp,0xc
c001a22b:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001a230:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001a234:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001a238:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a23c:	83 fe 07             	cmp    esi,0x7
c001a23f:	76 10                	jbe    c001a251 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001a241:	83 ec 0c             	sub    esp,0xc
c001a244:	68 3f 1a 02 c0       	push   0xc0021a3f
c001a249:	e8 d9 66 ff ff       	call   c0010927 <KePanic(char const*)>
c001a24e:	83 c4 10             	add    esp,0x10
c001a251:	0f b6 db             	movzx  ebx,bl
c001a254:	83 fb 0f             	cmp    ebx,0xf
c001a257:	76 10                	jbe    c001a269 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001a259:	83 ec 0c             	sub    esp,0xc
c001a25c:	68 6f 1a 02 c0       	push   0xc0021a6f
c001a261:	e8 c1 66 ff ff       	call   c0010927 <KePanic(char const*)>
c001a266:	83 c4 10             	add    esp,0x10
c001a269:	8d 04 36             	lea    eax,[esi+esi*1]
c001a26c:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a271:	83 c8 f0             	or     eax,0xfffffff0
c001a274:	ee                   	out    dx,al
c001a275:	ba fa 0c 00 00       	mov    edx,0xcfa
c001a27a:	89 e8                	mov    eax,ebp
c001a27c:	ee                   	out    dx,al
c001a27d:	83 c4 0c             	add    esp,0xc
c001a280:	89 d8                	mov    eax,ebx
c001a282:	89 f9                	mov    ecx,edi
c001a284:	c1 e0 08             	shl    eax,0x8
c001a287:	0f b6 d9             	movzx  ebx,cl
c001a28a:	83 e3 fc             	and    ebx,0xfffffffc
c001a28d:	09 d8                	or     eax,ebx
c001a28f:	5b                   	pop    ebx
c001a290:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001a295:	5e                   	pop    esi
c001a296:	5f                   	pop    edi
c001a297:	5d                   	pop    ebp
c001a298:	c3                   	ret    
c001a299:	90                   	nop

c001a29a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a29a:	57                   	push   edi
c001a29b:	56                   	push   esi
c001a29c:	53                   	push   ebx
c001a29d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a2a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a2a5:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001a2ab:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a2af:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a2b3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a2b7:	83 ff 01             	cmp    edi,0x1
c001a2ba:	75 3f                	jne    c001a2fb <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001a2bc:	89 de                	mov    esi,ebx
c001a2be:	0f b6 c0             	movzx  eax,al
c001a2c1:	81 e6 fc 00 00 00    	and    esi,0xfc
c001a2c7:	c1 e0 10             	shl    eax,0x10
c001a2ca:	0f b6 c9             	movzx  ecx,cl
c001a2cd:	09 f0                	or     eax,esi
c001a2cf:	c1 e1 08             	shl    ecx,0x8
c001a2d2:	0f b6 d2             	movzx  edx,dl
c001a2d5:	09 c8                	or     eax,ecx
c001a2d7:	c1 e2 0b             	shl    edx,0xb
c001a2da:	09 d0                	or     eax,edx
c001a2dc:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a2e1:	0d 00 00 00 80       	or     eax,0x80000000
c001a2e6:	ef                   	out    dx,eax
c001a2e7:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a2ec:	ed                   	in     eax,dx
c001a2ed:	83 e3 02             	and    ebx,0x2
c001a2f0:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a2f7:	d3 e8                	shr    eax,cl
c001a2f9:	eb 44                	jmp    c001a33f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a2fb:	83 ff 02             	cmp    edi,0x2
c001a2fe:	75 2d                	jne    c001a32d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001a300:	83 ec 0c             	sub    esp,0xc
c001a303:	0f b6 c9             	movzx  ecx,cl
c001a306:	0f b6 d2             	movzx  edx,dl
c001a309:	0f b6 fb             	movzx  edi,bl
c001a30c:	0f b6 c0             	movzx  eax,al
c001a30f:	57                   	push   edi
c001a310:	51                   	push   ecx
c001a311:	52                   	push   edx
c001a312:	50                   	push   eax
c001a313:	56                   	push   esi
c001a314:	e8 0b ff ff ff       	call   c001a224 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a319:	89 c2                	mov    edx,eax
c001a31b:	ed                   	in     eax,dx
c001a31c:	83 e3 02             	and    ebx,0x2
c001a31f:	83 c4 20             	add    esp,0x20
c001a322:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a329:	d3 e8                	shr    eax,cl
c001a32b:	eb 12                	jmp    c001a33f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a32d:	83 ec 0c             	sub    esp,0xc
c001a330:	68 9f 1a 02 c0       	push   0xc0021a9f
c001a335:	e8 ed 65 ff ff       	call   c0010927 <KePanic(char const*)>
c001a33a:	83 c4 10             	add    esp,0x10
c001a33d:	31 c0                	xor    eax,eax
c001a33f:	5b                   	pop    ebx
c001a340:	5e                   	pop    esi
c001a341:	5f                   	pop    edi
c001a342:	c3                   	ret    
c001a343:	90                   	nop

c001a344 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001a344:	83 ec 18             	sub    esp,0x18
c001a347:	6a 00                	push   0x0
c001a349:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a34e:	50                   	push   eax
c001a34f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a354:	50                   	push   eax
c001a355:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a35a:	50                   	push   eax
c001a35b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a35f:	e8 36 ff ff ff       	call   c001a29a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a364:	83 c4 2c             	add    esp,0x2c
c001a367:	c3                   	ret    

c001a368 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001a368:	83 ec 18             	sub    esp,0x18
c001a36b:	6a 0e                	push   0xe
c001a36d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a372:	50                   	push   eax
c001a373:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a378:	50                   	push   eax
c001a379:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a37e:	50                   	push   eax
c001a37f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a383:	e8 12 ff ff ff       	call   c001a29a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a388:	83 c4 2c             	add    esp,0x2c
c001a38b:	0f b6 c0             	movzx  eax,al
c001a38e:	c3                   	ret    
c001a38f:	90                   	nop

c001a390 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001a390:	55                   	push   ebp
c001a391:	57                   	push   edi
c001a392:	56                   	push   esi
c001a393:	53                   	push   ebx
c001a394:	83 ec 18             	sub    esp,0x18
c001a397:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001a39c:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001a3a1:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001a3a6:	6a 0a                	push   0xa
c001a3a8:	56                   	push   esi
c001a3a9:	55                   	push   ebp
c001a3aa:	57                   	push   edi
c001a3ab:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a3af:	e8 e6 fe ff ff       	call   c001a29a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a3b4:	83 c4 14             	add    esp,0x14
c001a3b7:	89 c3                	mov    ebx,eax
c001a3b9:	6a 0a                	push   0xa
c001a3bb:	0f b6 db             	movzx  ebx,bl
c001a3be:	56                   	push   esi
c001a3bf:	55                   	push   ebp
c001a3c0:	57                   	push   edi
c001a3c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a3c5:	e8 d0 fe ff ff       	call   c001a29a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a3ca:	83 c4 2c             	add    esp,0x2c
c001a3cd:	25 00 ff 00 00       	and    eax,0xff00
c001a3d2:	09 d8                	or     eax,ebx
c001a3d4:	5b                   	pop    ebx
c001a3d5:	5e                   	pop    esi
c001a3d6:	5f                   	pop    edi
c001a3d7:	5d                   	pop    ebp
c001a3d8:	c3                   	ret    
c001a3d9:	90                   	nop

c001a3da <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001a3da:	83 ec 18             	sub    esp,0x18
c001a3dd:	6a 08                	push   0x8
c001a3df:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a3e4:	50                   	push   eax
c001a3e5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a3ea:	50                   	push   eax
c001a3eb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a3f0:	50                   	push   eax
c001a3f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3f5:	e8 a0 fe ff ff       	call   c001a29a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a3fa:	83 c4 2c             	add    esp,0x2c
c001a3fd:	0f b6 c4             	movzx  eax,ah
c001a400:	c3                   	ret    
c001a401:	90                   	nop

c001a402 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001a402:	83 ec 18             	sub    esp,0x18
c001a405:	6a 08                	push   0x8
c001a407:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a40c:	50                   	push   eax
c001a40d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a412:	50                   	push   eax
c001a413:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a418:	50                   	push   eax
c001a419:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a41d:	e8 78 fe ff ff       	call   c001a29a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a422:	83 c4 2c             	add    esp,0x2c
c001a425:	c3                   	ret    

c001a426 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001a426:	83 ec 18             	sub    esp,0x18
c001a429:	6a 3c                	push   0x3c
c001a42b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a430:	50                   	push   eax
c001a431:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a436:	50                   	push   eax
c001a437:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a43c:	50                   	push   eax
c001a43d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a441:	e8 54 fe ff ff       	call   c001a29a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a446:	83 c4 2c             	add    esp,0x2c
c001a449:	c3                   	ret    

c001a44a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001a44a:	83 ec 18             	sub    esp,0x18
c001a44d:	6a 18                	push   0x18
c001a44f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a454:	50                   	push   eax
c001a455:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a45a:	50                   	push   eax
c001a45b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a460:	50                   	push   eax
c001a461:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a465:	e8 30 fe ff ff       	call   c001a29a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a46a:	83 c4 2c             	add    esp,0x2c
c001a46d:	0f b6 c4             	movzx  eax,ah
c001a470:	c3                   	ret    
c001a471:	90                   	nop

c001a472 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a472:	55                   	push   ebp
c001a473:	57                   	push   edi
c001a474:	56                   	push   esi
c001a475:	53                   	push   ebx
c001a476:	83 ec 28             	sub    esp,0x28
c001a479:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a47d:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001a482:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001a487:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001a48c:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001a493:	8d 43 12             	lea    eax,[ebx+0x12]
c001a496:	83 c3 10             	add    ebx,0x10
c001a499:	0f b6 c0             	movzx  eax,al
c001a49c:	0f b6 db             	movzx  ebx,bl
c001a49f:	50                   	push   eax
c001a4a0:	51                   	push   ecx
c001a4a1:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001a4a5:	57                   	push   edi
c001a4a6:	55                   	push   ebp
c001a4a7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a4ab:	e8 ea fd ff ff       	call   c001a29a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a4b0:	83 c4 14             	add    esp,0x14
c001a4b3:	89 c6                	mov    esi,eax
c001a4b5:	53                   	push   ebx
c001a4b6:	c1 e6 10             	shl    esi,0x10
c001a4b9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a4bd:	51                   	push   ecx
c001a4be:	57                   	push   edi
c001a4bf:	55                   	push   ebp
c001a4c0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a4c4:	e8 d1 fd ff ff       	call   c001a29a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a4c9:	83 c4 3c             	add    esp,0x3c
c001a4cc:	0f b7 c0             	movzx  eax,ax
c001a4cf:	5b                   	pop    ebx
c001a4d0:	09 f0                	or     eax,esi
c001a4d2:	5e                   	pop    esi
c001a4d3:	5f                   	pop    edi
c001a4d4:	5d                   	pop    ebp
c001a4d5:	c3                   	ret    

c001a4d6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001a4d6:	55                   	push   ebp
c001a4d7:	57                   	push   edi
c001a4d8:	56                   	push   esi
c001a4d9:	53                   	push   ebx
c001a4da:	83 ec 0c             	sub    esp,0xc
c001a4dd:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001a4e1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001a4e5:	89 f5                	mov    ebp,esi
c001a4e7:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001a4ed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a4f1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a4f5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001a4f9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a4fd:	83 f9 01             	cmp    ecx,0x1
c001a500:	75 5d                	jne    c001a55f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001a502:	0f b6 c8             	movzx  ecx,al
c001a505:	0f b6 d2             	movzx  edx,dl
c001a508:	c1 e1 10             	shl    ecx,0x10
c001a50b:	c1 e2 0b             	shl    edx,0xb
c001a50e:	89 f0                	mov    eax,esi
c001a510:	25 fc 00 00 00       	and    eax,0xfc
c001a515:	09 c1                	or     ecx,eax
c001a517:	89 e8                	mov    eax,ebp
c001a519:	0f b6 c0             	movzx  eax,al
c001a51c:	c1 e0 08             	shl    eax,0x8
c001a51f:	09 c1                	or     ecx,eax
c001a521:	09 d1                	or     ecx,edx
c001a523:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a528:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001a52e:	89 c8                	mov    eax,ecx
c001a530:	ef                   	out    dx,eax
c001a531:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a536:	ed                   	in     eax,dx
c001a537:	0f b7 db             	movzx  ebx,bx
c001a53a:	83 e6 02             	and    esi,0x2
c001a53d:	74 0a                	je     c001a549 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001a53f:	0f b7 d0             	movzx  edx,ax
c001a542:	c1 e3 10             	shl    ebx,0x10
c001a545:	09 d3                	or     ebx,edx
c001a547:	eb 05                	jmp    c001a54e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001a549:	66 31 c0             	xor    ax,ax
c001a54c:	09 c3                	or     ebx,eax
c001a54e:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a553:	89 c8                	mov    eax,ecx
c001a555:	ef                   	out    dx,eax
c001a556:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a55b:	89 d8                	mov    eax,ebx
c001a55d:	eb 41                	jmp    c001a5a0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001a55f:	83 f9 02             	cmp    ecx,0x2
c001a562:	75 45                	jne    c001a5a9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001a564:	83 ec 0c             	sub    esp,0xc
c001a567:	0f b6 d2             	movzx  edx,dl
c001a56a:	89 f1                	mov    ecx,esi
c001a56c:	0f b6 c0             	movzx  eax,al
c001a56f:	0f b6 f1             	movzx  esi,cl
c001a572:	89 e9                	mov    ecx,ebp
c001a574:	56                   	push   esi
c001a575:	0f b6 c9             	movzx  ecx,cl
c001a578:	51                   	push   ecx
c001a579:	52                   	push   edx
c001a57a:	50                   	push   eax
c001a57b:	57                   	push   edi
c001a57c:	e8 a3 fc ff ff       	call   c001a224 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a581:	89 c2                	mov    edx,eax
c001a583:	ed                   	in     eax,dx
c001a584:	83 c4 20             	add    esp,0x20
c001a587:	0f b7 db             	movzx  ebx,bx
c001a58a:	f6 c2 02             	test   dl,0x2
c001a58d:	74 0c                	je     c001a59b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001a58f:	0f b7 c8             	movzx  ecx,ax
c001a592:	89 d8                	mov    eax,ebx
c001a594:	c1 e0 10             	shl    eax,0x10
c001a597:	09 c8                	or     eax,ecx
c001a599:	eb 05                	jmp    c001a5a0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001a59b:	66 31 c0             	xor    ax,ax
c001a59e:	09 d8                	or     eax,ebx
c001a5a0:	ef                   	out    dx,eax
c001a5a1:	83 c4 0c             	add    esp,0xc
c001a5a4:	5b                   	pop    ebx
c001a5a5:	5e                   	pop    esi
c001a5a6:	5f                   	pop    edi
c001a5a7:	5d                   	pop    ebp
c001a5a8:	c3                   	ret    
c001a5a9:	c7 44 24 20 9f 1a 02 c0 	mov    DWORD PTR [esp+0x20],0xc0021a9f
c001a5b1:	83 c4 0c             	add    esp,0xc
c001a5b4:	5b                   	pop    ebx
c001a5b5:	5e                   	pop    esi
c001a5b6:	5f                   	pop    edi
c001a5b7:	5d                   	pop    ebp
c001a5b8:	e9 6a 63 ff ff       	jmp    c0010927 <KePanic(char const*)>
c001a5bd:	90                   	nop

c001a5be <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001a5be:	55                   	push   ebp
c001a5bf:	57                   	push   edi
c001a5c0:	56                   	push   esi
c001a5c1:	53                   	push   ebx
c001a5c2:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001a5c8:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001a5cf:	80 3d 4c 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028b4c,0x0
c001a5d6:	0f 85 bd 00 00 00    	jne    c001a699 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001a5dc:	83 ec 0c             	sub    esp,0xc
c001a5df:	68 14 01 00 00       	push   0x114
c001a5e4:	e8 c5 d4 fe ff       	call   c0007aae <malloc>
c001a5e9:	83 c4 0c             	add    esp,0xc
c001a5ec:	89 c3                	mov    ebx,eax
c001a5ee:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c001a5f4:	68 a5 1a 02 c0       	push   0xc0021aa5
c001a5f9:	50                   	push   eax
c001a5fa:	e8 7b 09 ff ff       	call   c000af7a <File::File(char const*, Process*)>
c001a5ff:	83 c4 10             	add    esp,0x10
c001a602:	85 db                	test   ebx,ebx
c001a604:	0f 84 67 02 00 00    	je     c001a871 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001a60a:	56                   	push   esi
c001a60b:	56                   	push   esi
c001a60c:	6a 01                	push   0x1
c001a60e:	53                   	push   ebx
c001a60f:	e8 22 0a ff ff       	call   c000b036 <File::open(FileOpenMode)>
c001a614:	83 c4 10             	add    esp,0x10
c001a617:	85 c0                	test   eax,eax
c001a619:	0f 85 52 02 00 00    	jne    c001a871 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001a61f:	52                   	push   edx
c001a620:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001a624:	50                   	push   eax
c001a625:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a629:	50                   	push   eax
c001a62a:	53                   	push   ebx
c001a62b:	e8 b2 0c ff ff       	call   c000b2e2 <File::stat(unsigned long long*, bool*)>
c001a630:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a634:	40                   	inc    eax
c001a635:	89 04 24             	mov    DWORD PTR [esp],eax
c001a638:	e8 71 d4 fe ff       	call   c0007aae <malloc>
c001a63d:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a641:	a3 48 8b 02 c0       	mov    ds:0xc0028b48,eax
c001a646:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001a64a:	59                   	pop    ecx
c001a64b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a64d:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001a651:	51                   	push   ecx
c001a652:	50                   	push   eax
c001a653:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001a657:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001a65b:	53                   	push   ebx
c001a65c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a65f:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001a663:	83 c4 20             	add    esp,0x20
c001a666:	89 c8                	mov    eax,ecx
c001a668:	99                   	cdq    
c001a669:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001a66d:	0f 85 fe 01 00 00    	jne    c001a871 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001a673:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001a677:	0f 85 f4 01 00 00    	jne    c001a871 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001a67d:	83 ec 0c             	sub    esp,0xc
c001a680:	53                   	push   ebx
c001a681:	e8 0e 0a ff ff       	call   c000b094 <File::close()>
c001a686:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a68a:	c6 05 4c 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028b4c,0x1
c001a691:	a3 44 8b 02 c0       	mov    ds:0xc0028b44,eax
c001a696:	83 c4 10             	add    esp,0x10
c001a699:	a1 44 8b 02 c0       	mov    eax,ds:0xc0028b44
c001a69e:	8b 1d 48 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028b48
c001a6a4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a6a8:	31 f6                	xor    esi,esi
c001a6aa:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001a6b2:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001a6b9:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001a6be:	31 c9                	xor    ecx,ecx
c001a6c0:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001a6c8:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001a6cd:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001a6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a6d9:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001a6e1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a6e5:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001a6e9:	0f 8e 82 01 00 00    	jle    c001a871 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001a6ef:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001a6f2:	d4 40                	aam    0x40
c001a6f4:	d5 39                	aad    0x39
c001a6f6:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001a6fa:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001a6fe:	d4 40                	aam    0x40
c001a700:	d5 39                	aad    0x39
c001a702:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001a706:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001a70a:	d4 40                	aam    0x40
c001a70c:	d5 39                	aad    0x39
c001a70e:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001a712:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001a716:	d4 40                	aam    0x40
c001a718:	d5 39                	aad    0x39
c001a71a:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001a71e:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001a722:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001a726:	3c 56                	cmp    al,0x56
c001a728:	74 43                	je     c001a76d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001a72a:	d4 40                	aam    0x40
c001a72c:	d5 39                	aad    0x39
c001a72e:	8d 48 d0             	lea    ecx,[eax-0x30]
c001a731:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001a735:	0f b6 c9             	movzx  ecx,cl
c001a738:	c1 e1 04             	shl    ecx,0x4
c001a73b:	d4 40                	aam    0x40
c001a73d:	d5 39                	aad    0x39
c001a73f:	83 e8 30             	sub    eax,0x30
c001a742:	0f b6 c0             	movzx  eax,al
c001a745:	09 c1                	or     ecx,eax
c001a747:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001a74b:	c1 e1 04             	shl    ecx,0x4
c001a74e:	d4 40                	aam    0x40
c001a750:	d5 39                	aad    0x39
c001a752:	83 e8 30             	sub    eax,0x30
c001a755:	0f b6 c0             	movzx  eax,al
c001a758:	09 c1                	or     ecx,eax
c001a75a:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001a75e:	c1 e1 04             	shl    ecx,0x4
c001a761:	d4 40                	aam    0x40
c001a763:	d5 39                	aad    0x39
c001a765:	83 e8 30             	sub    eax,0x30
c001a768:	0f b6 c0             	movzx  eax,al
c001a76b:	09 c1                	or     ecx,eax
c001a76d:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001a771:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001a775:	3c 58                	cmp    al,0x58
c001a777:	74 47                	je     c001a7c0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001a779:	d4 40                	aam    0x40
c001a77b:	d5 39                	aad    0x39
c001a77d:	8d 50 d0             	lea    edx,[eax-0x30]
c001a780:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001a784:	0f b6 d2             	movzx  edx,dl
c001a787:	c1 e2 04             	shl    edx,0x4
c001a78a:	d4 40                	aam    0x40
c001a78c:	d5 39                	aad    0x39
c001a78e:	83 e8 30             	sub    eax,0x30
c001a791:	0f b6 c0             	movzx  eax,al
c001a794:	09 c2                	or     edx,eax
c001a796:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001a79a:	c1 e2 04             	shl    edx,0x4
c001a79d:	d4 40                	aam    0x40
c001a79f:	d5 39                	aad    0x39
c001a7a1:	83 e8 30             	sub    eax,0x30
c001a7a4:	0f b6 c0             	movzx  eax,al
c001a7a7:	09 c2                	or     edx,eax
c001a7a9:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001a7ad:	c1 e2 04             	shl    edx,0x4
c001a7b0:	d4 40                	aam    0x40
c001a7b2:	d5 39                	aad    0x39
c001a7b4:	83 e8 30             	sub    eax,0x30
c001a7b7:	0f b6 c0             	movzx  eax,al
c001a7ba:	09 c2                	or     edx,eax
c001a7bc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a7c0:	83 c6 10             	add    esi,0x10
c001a7c3:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001a7c7:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001a7cb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001a7cf:	83 fa 0a             	cmp    edx,0xa
c001a7d2:	74 0b                	je     c001a7df <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001a7d4:	47                   	inc    edi
c001a7d5:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001a7d9:	75 19                	jne    c001a7f4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001a7db:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001a7df:	31 c0                	xor    eax,eax
c001a7e1:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001a7e6:	0f 94 c0             	sete   al
c001a7e9:	01 c6                	add    esi,eax
c001a7eb:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001a7f0:	75 0b                	jne    c001a7fd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001a7f2:	eb 14                	jmp    c001a808 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001a7f4:	46                   	inc    esi
c001a7f5:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001a7f8:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001a7fb:	eb ca                	jmp    c001a7c7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001a7fd:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001a802:	0f 85 dd fe ff ff    	jne    c001a6e5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001a808:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001a80d:	74 10                	je     c001a81f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001a80f:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001a814:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001a819:	0f 85 c6 fe ff ff    	jne    c001a6e5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001a81f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a823:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a827:	83 e8 30             	sub    eax,0x30
c001a82a:	83 ef 30             	sub    edi,0x30
c001a82d:	c1 e0 04             	shl    eax,0x4
c001a830:	09 f8                	or     eax,edi
c001a832:	0f b6 c0             	movzx  eax,al
c001a835:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001a839:	0f 85 a6 fe ff ff    	jne    c001a6e5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001a83f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a843:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001a847:	83 e8 30             	sub    eax,0x30
c001a84a:	83 ef 30             	sub    edi,0x30
c001a84d:	c1 e0 04             	shl    eax,0x4
c001a850:	09 f8                	or     eax,edi
c001a852:	0f b6 c0             	movzx  eax,al
c001a855:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001a859:	0f 85 86 fe ff ff    	jne    c001a6e5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001a85f:	50                   	push   eax
c001a860:	50                   	push   eax
c001a861:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a865:	50                   	push   eax
c001a866:	55                   	push   ebp
c001a867:	e8 d4 5d fe ff       	call   c0000640 <strcpy>
c001a86c:	83 c4 10             	add    esp,0x10
c001a86f:	eb 06                	jmp    c001a877 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001a871:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001a875:	31 ed                	xor    ebp,ebp
c001a877:	81 c4 4c 01 00 00    	add    esp,0x14c
c001a87d:	89 e8                	mov    eax,ebp
c001a87f:	5b                   	pop    ebx
c001a880:	5e                   	pop    esi
c001a881:	5f                   	pop    edi
c001a882:	5d                   	pop    ebp
c001a883:	c3                   	ret    

c001a884 <PCI::checkBus(unsigned char)>:
c001a884:	56                   	push   esi
c001a885:	53                   	push   ebx
c001a886:	31 db                	xor    ebx,ebx
c001a888:	51                   	push   ecx
c001a889:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001a88e:	52                   	push   edx
c001a88f:	53                   	push   ebx
c001a890:	43                   	inc    ebx
c001a891:	56                   	push   esi
c001a892:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a896:	e8 03 03 00 00       	call   c001ab9e <PCI::checkDevice(unsigned char, unsigned char)>
c001a89b:	83 c4 10             	add    esp,0x10
c001a89e:	83 fb 20             	cmp    ebx,0x20
c001a8a1:	75 eb                	jne    c001a88e <PCI::checkBus(unsigned char)+0xa>
c001a8a3:	58                   	pop    eax
c001a8a4:	5b                   	pop    ebx
c001a8a5:	5e                   	pop    esi
c001a8a6:	c3                   	ret    
c001a8a7:	90                   	nop

c001a8a8 <PCI::foundDevice(PCIDeviceInfo)>:
c001a8a8:	55                   	push   ebp
c001a8a9:	57                   	push   edi
c001a8aa:	56                   	push   esi
c001a8ab:	53                   	push   ebx
c001a8ac:	83 ec 1c             	sub    esp,0x1c
c001a8af:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001a8b4:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a8b8:	3d ff ff 00 00       	cmp    eax,0xffff
c001a8bd:	0f 84 57 01 00 00    	je     c001aa1a <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001a8c3:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001a8c8:	66 3d 06 04          	cmp    ax,0x406
c001a8cc:	75 2c                	jne    c001a8fa <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001a8ce:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001a8d3:	50                   	push   eax
c001a8d4:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001a8d9:	50                   	push   eax
c001a8da:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001a8df:	50                   	push   eax
c001a8e0:	53                   	push   ebx
c001a8e1:	e8 64 fb ff ff       	call   c001a44a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001a8e6:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a8ea:	0f b6 c0             	movzx  eax,al
c001a8ed:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a8f1:	83 c4 2c             	add    esp,0x2c
c001a8f4:	5b                   	pop    ebx
c001a8f5:	5e                   	pop    esi
c001a8f6:	5f                   	pop    edi
c001a8f7:	5d                   	pop    ebp
c001a8f8:	eb 8a                	jmp    c001a884 <PCI::checkBus(unsigned char)>
c001a8fa:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001a8fe:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001a904:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001a908:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001a90c:	0f b6 7c 24 54       	movzx  edi,BYTE PTR [esp+0x54]
c001a911:	85 d2                	test   edx,edx
c001a913:	74 36                	je     c001a94b <PCI::foundDevice(PCIDeviceInfo)+0xa3>
c001a915:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001a918:	85 c9                	test   ecx,ecx
c001a91a:	74 2b                	je     c001a947 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001a91c:	8b b1 18 01 00 00    	mov    esi,DWORD PTR [ecx+0x118]
c001a922:	31 ee                	xor    esi,ebp
c001a924:	81 e6 ff 00 ff ff    	and    esi,0xffff00ff
c001a92a:	75 1b                	jne    c001a947 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001a92c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001a930:	39 b1 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],esi
c001a936:	75 0f                	jne    c001a947 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001a938:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001a93f:	39 f9                	cmp    ecx,edi
c001a941:	0f 84 d3 00 00 00    	je     c001aa1a <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001a947:	8b 12                	mov    edx,DWORD PTR [edx]
c001a949:	eb c6                	jmp    c001a911 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001a94b:	3d 01 06 00 00       	cmp    eax,0x601
c001a950:	75 19                	jne    c001a96b <PCI::foundDevice(PCIDeviceInfo)+0xc3>
c001a952:	83 ec 0c             	sub    esp,0xc
c001a955:	68 64 01 00 00       	push   0x164
c001a95a:	e8 4f d1 fe ff       	call   c0007aae <malloc>
c001a95f:	89 c5                	mov    ebp,eax
c001a961:	89 04 24             	mov    DWORD PTR [esp],eax
c001a964:	e8 a1 0e 00 00       	call   c001b80a <SATABus::SATABus()>
c001a969:	eb 1e                	jmp    c001a989 <PCI::foundDevice(PCIDeviceInfo)+0xe1>
c001a96b:	3d 01 01 00 00       	cmp    eax,0x101
c001a970:	75 62                	jne    c001a9d4 <PCI::foundDevice(PCIDeviceInfo)+0x12c>
c001a972:	83 ec 0c             	sub    esp,0xc
c001a975:	68 70 02 00 00       	push   0x270
c001a97a:	e8 2f d1 fe ff       	call   c0007aae <malloc>
c001a97f:	89 c5                	mov    ebp,eax
c001a981:	89 04 24             	mov    DWORD PTR [esp],eax
c001a984:	e8 e5 02 00 00       	call   c001ac6e <IDE::IDE()>
c001a989:	5f                   	pop    edi
c001a98a:	58                   	pop    eax
c001a98b:	55                   	push   ebp
c001a98c:	53                   	push   ebx
c001a98d:	e8 9c 14 ff ff       	call   c000be2e <Device::addChild(Device*)>
c001a992:	83 ec 1c             	sub    esp,0x1c
c001a995:	b9 09 00 00 00       	mov    ecx,0x9
c001a99a:	fc                   	cld    
c001a99b:	89 e7                	mov    edi,esp
c001a99d:	8d 74 24 60          	lea    esi,[esp+0x60]
c001a9a1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a9a3:	55                   	push   ebp
c001a9a4:	e8 cb 13 ff ff       	call   c000bd74 <Device::preOpenPCI(PCIDeviceInfo)>
c001a9a9:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a9ac:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001a9b0:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001a9b8:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001a9c0:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001a9c8:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001a9cb:	83 c4 4c             	add    esp,0x4c
c001a9ce:	5b                   	pop    ebx
c001a9cf:	5e                   	pop    esi
c001a9d0:	5f                   	pop    edi
c001a9d1:	5d                   	pop    ebp
c001a9d2:	ff e0                	jmp    eax
c001a9d4:	83 ec 0c             	sub    esp,0xc
c001a9d7:	68 58 01 00 00       	push   0x158
c001a9dc:	e8 cd d0 fe ff       	call   c0007aae <malloc>
c001a9e1:	89 c5                	mov    ebp,eax
c001a9e3:	58                   	pop    eax
c001a9e4:	5a                   	pop    edx
c001a9e5:	68 be 1a 02 c0       	push   0xc0021abe
c001a9ea:	55                   	push   ebp
c001a9eb:	e8 dc 16 ff ff       	call   c000c0cc <DriverlessDevice::DriverlessDevice(char const*)>
c001a9f0:	59                   	pop    ecx
c001a9f1:	5e                   	pop    esi
c001a9f2:	55                   	push   ebp
c001a9f3:	53                   	push   ebx
c001a9f4:	e8 35 14 ff ff       	call   c000be2e <Device::addChild(Device*)>
c001a9f9:	83 c4 10             	add    esp,0x10
c001a9fc:	b9 09 00 00 00       	mov    ecx,0x9
c001aa01:	fc                   	cld    
c001aa02:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001aa06:	89 fe                	mov    esi,edi
c001aa08:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001aa0a:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001aa0e:	83 c4 1c             	add    esp,0x1c
c001aa11:	5b                   	pop    ebx
c001aa12:	5e                   	pop    esi
c001aa13:	5f                   	pop    edi
c001aa14:	5d                   	pop    ebp
c001aa15:	e9 5a 13 ff ff       	jmp    c000bd74 <Device::preOpenPCI(PCIDeviceInfo)>
c001aa1a:	83 c4 1c             	add    esp,0x1c
c001aa1d:	5b                   	pop    ebx
c001aa1e:	5e                   	pop    esi
c001aa1f:	5f                   	pop    edi
c001aa20:	5d                   	pop    ebp
c001aa21:	c3                   	ret    

c001aa22 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001aa22:	55                   	push   ebp
c001aa23:	57                   	push   edi
c001aa24:	56                   	push   esi
c001aa25:	53                   	push   ebx
c001aa26:	83 ec 68             	sub    esp,0x68
c001aa29:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001aa2d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001aa34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aa38:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aa3f:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001aa44:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001aa48:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001aa4f:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001aa54:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001aa58:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001aa5d:	6a 0c                	push   0xc
c001aa5f:	57                   	push   edi
c001aa60:	53                   	push   ebx
c001aa61:	56                   	push   esi
c001aa62:	55                   	push   ebp
c001aa63:	e8 32 f8 ff ff       	call   c001a29a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aa68:	83 c4 20             	add    esp,0x20
c001aa6b:	57                   	push   edi
c001aa6c:	53                   	push   ebx
c001aa6d:	56                   	push   esi
c001aa6e:	55                   	push   ebp
c001aa6f:	e8 1c f9 ff ff       	call   c001a390 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001aa74:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001aa79:	57                   	push   edi
c001aa7a:	53                   	push   ebx
c001aa7b:	56                   	push   esi
c001aa7c:	55                   	push   ebp
c001aa7d:	e8 a4 f9 ff ff       	call   c001a426 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001aa82:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001aa86:	83 c4 14             	add    esp,0x14
c001aa89:	6a 3c                	push   0x3c
c001aa8b:	57                   	push   edi
c001aa8c:	53                   	push   ebx
c001aa8d:	56                   	push   esi
c001aa8e:	55                   	push   ebp
c001aa8f:	e8 06 f8 ff ff       	call   c001a29a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aa94:	0f b6 c4             	movzx  eax,ah
c001aa97:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001aa9b:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001aa9f:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001aaa3:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001aaa8:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001aaae:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001aab4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001aab8:	83 c4 20             	add    esp,0x20
c001aabb:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001aac0:	74 30                	je     c001aaf2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001aac2:	31 c0                	xor    eax,eax
c001aac4:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001aac8:	7e 28                	jle    c001aaf2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001aaca:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001aad2:	39 cb                	cmp    ebx,ecx
c001aad4:	75 19                	jne    c001aaef <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001aad6:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001aade:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001aae2:	75 0b                	jne    c001aaef <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001aae4:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001aaeb:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001aaef:	40                   	inc    eax
c001aaf0:	eb d2                	jmp    c001aac4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001aaf2:	31 d2                	xor    edx,edx
c001aaf4:	83 ec 0c             	sub    esp,0xc
c001aaf7:	57                   	push   edi
c001aaf8:	53                   	push   ebx
c001aaf9:	56                   	push   esi
c001aafa:	52                   	push   edx
c001aafb:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001aaff:	55                   	push   ebp
c001ab00:	e8 6d f9 ff ff       	call   c001a472 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ab05:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ab09:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001ab0d:	42                   	inc    edx
c001ab0e:	83 c4 20             	add    esp,0x20
c001ab11:	83 fa 06             	cmp    edx,0x6
c001ab14:	75 de                	jne    c001aaf4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001ab16:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ab1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ab1e:	c1 e2 08             	shl    edx,0x8
c001ab21:	83 ec 0c             	sub    esp,0xc
c001ab24:	0f b6 c4             	movzx  eax,ah
c001ab27:	09 d0                	or     eax,edx
c001ab29:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001ab2e:	6a 02                	push   0x2
c001ab30:	57                   	push   edi
c001ab31:	53                   	push   ebx
c001ab32:	56                   	push   esi
c001ab33:	55                   	push   ebp
c001ab34:	e8 61 f7 ff ff       	call   c001a29a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ab39:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001ab3e:	83 c4 20             	add    esp,0x20
c001ab41:	57                   	push   edi
c001ab42:	53                   	push   ebx
c001ab43:	56                   	push   esi
c001ab44:	55                   	push   ebp
c001ab45:	e8 90 f8 ff ff       	call   c001a3da <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001ab4a:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001ab4e:	57                   	push   edi
c001ab4f:	53                   	push   ebx
c001ab50:	56                   	push   esi
c001ab51:	55                   	push   ebp
c001ab52:	e8 ed f7 ff ff       	call   c001a344 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ab57:	b9 09 00 00 00       	mov    ecx,0x9
c001ab5c:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001ab61:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001ab65:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001ab69:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001ab6d:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001ab71:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001ab75:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001ab79:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001ab7d:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001ab81:	83 ec 0c             	sub    esp,0xc
c001ab84:	fc                   	cld    
c001ab85:	89 e7                	mov    edi,esp
c001ab87:	8d 74 24 58          	lea    esi,[esp+0x58]
c001ab8b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ab8d:	55                   	push   ebp
c001ab8e:	e8 15 fd ff ff       	call   c001a8a8 <PCI::foundDevice(PCIDeviceInfo)>
c001ab93:	81 c4 8c 00 00 00    	add    esp,0x8c
c001ab99:	5b                   	pop    ebx
c001ab9a:	5e                   	pop    esi
c001ab9b:	5f                   	pop    edi
c001ab9c:	5d                   	pop    ebp
c001ab9d:	c3                   	ret    

c001ab9e <PCI::checkDevice(unsigned char, unsigned char)>:
c001ab9e:	55                   	push   ebp
c001ab9f:	57                   	push   edi
c001aba0:	56                   	push   esi
c001aba1:	53                   	push   ebx
c001aba2:	83 ec 0c             	sub    esp,0xc
c001aba5:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001aba9:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001abae:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001abb3:	6a 00                	push   0x0
c001abb5:	56                   	push   esi
c001abb6:	57                   	push   edi
c001abb7:	55                   	push   ebp
c001abb8:	e8 87 f7 ff ff       	call   c001a344 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001abbd:	6a 00                	push   0x0
c001abbf:	56                   	push   esi
c001abc0:	57                   	push   edi
c001abc1:	55                   	push   ebp
c001abc2:	e8 5b fe ff ff       	call   c001aa22 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001abc7:	83 c4 20             	add    esp,0x20
c001abca:	6a 00                	push   0x0
c001abcc:	56                   	push   esi
c001abcd:	57                   	push   edi
c001abce:	55                   	push   ebp
c001abcf:	e8 94 f7 ff ff       	call   c001a368 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001abd4:	83 c4 10             	add    esp,0x10
c001abd7:	a8 80                	test   al,0x80
c001abd9:	74 2d                	je     c001ac08 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001abdb:	bb 01 00 00 00       	mov    ebx,0x1
c001abe0:	53                   	push   ebx
c001abe1:	56                   	push   esi
c001abe2:	57                   	push   edi
c001abe3:	55                   	push   ebp
c001abe4:	e8 5b f7 ff ff       	call   c001a344 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001abe9:	83 c4 10             	add    esp,0x10
c001abec:	0f b7 c0             	movzx  eax,ax
c001abef:	3d ff ff 00 00       	cmp    eax,0xffff
c001abf4:	74 0c                	je     c001ac02 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001abf6:	53                   	push   ebx
c001abf7:	56                   	push   esi
c001abf8:	57                   	push   edi
c001abf9:	55                   	push   ebp
c001abfa:	e8 23 fe ff ff       	call   c001aa22 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001abff:	83 c4 10             	add    esp,0x10
c001ac02:	43                   	inc    ebx
c001ac03:	83 fb 08             	cmp    ebx,0x8
c001ac06:	75 d8                	jne    c001abe0 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001ac08:	83 c4 0c             	add    esp,0xc
c001ac0b:	5b                   	pop    ebx
c001ac0c:	5e                   	pop    esi
c001ac0d:	5f                   	pop    edi
c001ac0e:	5d                   	pop    ebp
c001ac0f:	c3                   	ret    

c001ac10 <PCI::detect()>:
c001ac10:	56                   	push   esi
c001ac11:	53                   	push   ebx
c001ac12:	53                   	push   ebx
c001ac13:	31 db                	xor    ebx,ebx
c001ac15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ac19:	6a 00                	push   0x0
c001ac1b:	6a 00                	push   0x0
c001ac1d:	6a 00                	push   0x0
c001ac1f:	56                   	push   esi
c001ac20:	e8 43 f7 ff ff       	call   c001a368 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001ac25:	83 c4 10             	add    esp,0x10
c001ac28:	a8 80                	test   al,0x80
c001ac2a:	75 21                	jne    c001ac4d <PCI::detect()+0x3d>
c001ac2c:	51                   	push   ecx
c001ac2d:	51                   	push   ecx
c001ac2e:	6a 00                	push   0x0
c001ac30:	56                   	push   esi
c001ac31:	e8 4e fc ff ff       	call   c001a884 <PCI::checkBus(unsigned char)>
c001ac36:	83 c4 10             	add    esp,0x10
c001ac39:	eb 2a                	jmp    c001ac65 <PCI::detect()+0x55>
c001ac3b:	52                   	push   edx
c001ac3c:	52                   	push   edx
c001ac3d:	53                   	push   ebx
c001ac3e:	43                   	inc    ebx
c001ac3f:	56                   	push   esi
c001ac40:	e8 3f fc ff ff       	call   c001a884 <PCI::checkBus(unsigned char)>
c001ac45:	83 c4 10             	add    esp,0x10
c001ac48:	83 fb 08             	cmp    ebx,0x8
c001ac4b:	74 18                	je     c001ac65 <PCI::detect()+0x55>
c001ac4d:	53                   	push   ebx
c001ac4e:	6a 00                	push   0x0
c001ac50:	6a 00                	push   0x0
c001ac52:	56                   	push   esi
c001ac53:	e8 ec f6 ff ff       	call   c001a344 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ac58:	83 c4 10             	add    esp,0x10
c001ac5b:	0f b7 c0             	movzx  eax,ax
c001ac5e:	3d ff ff 00 00       	cmp    eax,0xffff
c001ac63:	74 d6                	je     c001ac3b <PCI::detect()+0x2b>
c001ac65:	58                   	pop    eax
c001ac66:	5b                   	pop    ebx
c001ac67:	5e                   	pop    esi
c001ac68:	c3                   	ret    
c001ac69:	90                   	nop

c001ac6a <IDE::close(int, int, void*)>:
c001ac6a:	83 c8 ff             	or     eax,0xffffffff
c001ac6d:	c3                   	ret    

c001ac6e <IDE::IDE()>:
c001ac6e:	83 ec 0c             	sub    esp,0xc
c001ac71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac75:	83 ec 08             	sub    esp,0x8
c001ac78:	68 04 1b 02 c0       	push   0xc0021b04
c001ac7d:	50                   	push   eax
c001ac7e:	e8 ed 14 ff ff       	call   c000c170 <HardDiskController::HardDiskController(char const*)>
c001ac83:	83 c4 10             	add    esp,0x10
c001ac86:	ba 94 1b 02 c0       	mov    edx,0xc0021b94
c001ac8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac8f:	89 10                	mov    DWORD PTR [eax],edx
c001ac91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac95:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001ac9c:	90                   	nop
c001ac9d:	83 c4 0c             	add    esp,0xc
c001aca0:	c3                   	ret    
c001aca1:	90                   	nop

c001aca2 <IDE::prepareInterrupt(unsigned char)>:
c001aca2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001aca7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001acab:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001acb3:	c3                   	ret    

c001acb4 <selectDrive(unsigned char, unsigned char)>:
c001acb4:	c3                   	ret    
c001acb5:	90                   	nop

c001acb6 <IDE::getBase(unsigned char)>:
c001acb6:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001acbb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001acbf:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001acc7:	c3                   	ret    

c001acc8 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001acc8:	55                   	push   ebp
c001acc9:	57                   	push   edi
c001acca:	56                   	push   esi
c001accb:	53                   	push   ebx
c001accc:	83 ec 1c             	sub    esp,0x1c
c001accf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001acd3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001acd7:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001acda:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001acde:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ace2:	80 f9 03             	cmp    cl,0x3
c001ace5:	77 4f                	ja     c001ad36 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001ace7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aceb:	0f b6 fa             	movzx  edi,dl
c001acee:	0f b6 db             	movzx  ebx,bl
c001acf1:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001acf4:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001acf9:	80 ca 80             	or     dl,0x80
c001acfc:	52                   	push   edx
c001acfd:	6a 0c                	push   0xc
c001acff:	57                   	push   edi
c001ad00:	56                   	push   esi
c001ad01:	e8 c2 ff ff ff       	call   c001acc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ad06:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001ad0b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ad0f:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001ad13:	ee                   	out    dx,al
c001ad14:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ad19:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001ad1d:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001ad21:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ad25:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ad2d:	83 c4 2c             	add    esp,0x2c
c001ad30:	5b                   	pop    ebx
c001ad31:	5e                   	pop    esi
c001ad32:	5f                   	pop    edi
c001ad33:	5d                   	pop    ebp
c001ad34:	eb 92                	jmp    c001acc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ad36:	0f b6 cb             	movzx  ecx,bl
c001ad39:	83 f9 07             	cmp    ecx,0x7
c001ad3c:	77 12                	ja     c001ad50 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001ad3e:	0f b6 d2             	movzx  edx,dl
c001ad41:	0f b6 db             	movzx  ebx,bl
c001ad44:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001ad4c:	01 da                	add    edx,ebx
c001ad4e:	eb 2f                	jmp    c001ad7f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ad50:	83 f9 0d             	cmp    ecx,0xd
c001ad53:	77 13                	ja     c001ad68 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001ad55:	0f b6 d2             	movzx  edx,dl
c001ad58:	0f b6 db             	movzx  ebx,bl
c001ad5b:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001ad62:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001ad66:	eb 17                	jmp    c001ad7f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ad68:	83 f9 15             	cmp    ecx,0x15
c001ad6b:	77 13                	ja     c001ad80 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001ad6d:	0f b6 d2             	movzx  edx,dl
c001ad70:	0f b6 db             	movzx  ebx,bl
c001ad73:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001ad7b:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001ad7f:	ee                   	out    dx,al
c001ad80:	83 c4 1c             	add    esp,0x1c
c001ad83:	5b                   	pop    ebx
c001ad84:	5e                   	pop    esi
c001ad85:	5f                   	pop    edi
c001ad86:	5d                   	pop    ebp
c001ad87:	c3                   	ret    

c001ad88 <IDE::read(unsigned char, unsigned char)>:
c001ad88:	55                   	push   ebp
c001ad89:	57                   	push   edi
c001ad8a:	56                   	push   esi
c001ad8b:	53                   	push   ebx
c001ad8c:	83 ec 1c             	sub    esp,0x1c
c001ad8f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ad93:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ad97:	8d 43 f8             	lea    eax,[ebx-0x8]
c001ad9a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001ad9e:	3c 03                	cmp    al,0x3
c001ada0:	77 40                	ja     c001ade2 <IDE::read(unsigned char, unsigned char)+0x5a>
c001ada2:	0f b6 f9             	movzx  edi,cl
c001ada5:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001ada8:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001adad:	0c 80                	or     al,0x80
c001adaf:	50                   	push   eax
c001adb0:	6a 0c                	push   0xc
c001adb2:	57                   	push   edi
c001adb3:	56                   	push   esi
c001adb4:	e8 0f ff ff ff       	call   c001acc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001adb9:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001adbe:	0f b6 d3             	movzx  edx,bl
c001adc1:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001adc5:	ec                   	in     al,dx
c001adc6:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001adca:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001adcf:	52                   	push   edx
c001add0:	6a 0c                	push   0xc
c001add2:	57                   	push   edi
c001add3:	56                   	push   esi
c001add4:	e8 ef fe ff ff       	call   c001acc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001add9:	83 c4 20             	add    esp,0x20
c001addc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ade0:	eb 4c                	jmp    c001ae2e <IDE::read(unsigned char, unsigned char)+0xa6>
c001ade2:	0f b6 d3             	movzx  edx,bl
c001ade5:	83 fa 07             	cmp    edx,0x7
c001ade8:	77 12                	ja     c001adfc <IDE::read(unsigned char, unsigned char)+0x74>
c001adea:	0f b6 c9             	movzx  ecx,cl
c001aded:	0f b6 d3             	movzx  edx,bl
c001adf0:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001adf8:	01 c2                	add    edx,eax
c001adfa:	eb 31                	jmp    c001ae2d <IDE::read(unsigned char, unsigned char)+0xa5>
c001adfc:	83 fa 0d             	cmp    edx,0xd
c001adff:	77 13                	ja     c001ae14 <IDE::read(unsigned char, unsigned char)+0x8c>
c001ae01:	0f b6 c9             	movzx  ecx,cl
c001ae04:	0f b6 d3             	movzx  edx,bl
c001ae07:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001ae0e:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001ae12:	eb 19                	jmp    c001ae2d <IDE::read(unsigned char, unsigned char)+0xa5>
c001ae14:	31 c0                	xor    eax,eax
c001ae16:	83 fa 15             	cmp    edx,0x15
c001ae19:	77 13                	ja     c001ae2e <IDE::read(unsigned char, unsigned char)+0xa6>
c001ae1b:	0f b6 c9             	movzx  ecx,cl
c001ae1e:	0f b6 d3             	movzx  edx,bl
c001ae21:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001ae29:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001ae2d:	ec                   	in     al,dx
c001ae2e:	83 c4 1c             	add    esp,0x1c
c001ae31:	5b                   	pop    ebx
c001ae32:	5e                   	pop    esi
c001ae33:	5f                   	pop    edi
c001ae34:	5d                   	pop    ebp
c001ae35:	c3                   	ret    

c001ae36 <IDE::waitInterrupt(unsigned char)>:
c001ae36:	55                   	push   ebp
c001ae37:	57                   	push   edi
c001ae38:	56                   	push   esi
c001ae39:	53                   	push   ebx
c001ae3a:	31 db                	xor    ebx,ebx
c001ae3c:	83 ec 0c             	sub    esp,0xc
c001ae3f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ae43:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001ae48:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001ae50:	89 e8                	mov    eax,ebp
c001ae52:	84 c0                	test   al,al
c001ae54:	75 30                	jne    c001ae86 <IDE::waitInterrupt(unsigned char)+0x50>
c001ae56:	50                   	push   eax
c001ae57:	6a 0c                	push   0xc
c001ae59:	56                   	push   esi
c001ae5a:	57                   	push   edi
c001ae5b:	e8 28 ff ff ff       	call   c001ad88 <IDE::read(unsigned char, unsigned char)>
c001ae60:	83 c4 10             	add    esp,0x10
c001ae63:	a8 01                	test   al,0x1
c001ae65:	75 27                	jne    c001ae8e <IDE::waitInterrupt(unsigned char)+0x58>
c001ae67:	f6 c3 04             	test   bl,0x4
c001ae6a:	75 12                	jne    c001ae7e <IDE::waitInterrupt(unsigned char)+0x48>
c001ae6c:	83 fb 32             	cmp    ebx,0x32
c001ae6f:	7e 0d                	jle    c001ae7e <IDE::waitInterrupt(unsigned char)+0x48>
c001ae71:	83 ec 0c             	sub    esp,0xc
c001ae74:	6a 64                	push   0x64
c001ae76:	e8 91 a5 ff ff       	call   c001540c <milliTenthSleep(unsigned int)>
c001ae7b:	83 c4 10             	add    esp,0x10
c001ae7e:	83 fb 3c             	cmp    ebx,0x3c
c001ae81:	74 0b                	je     c001ae8e <IDE::waitInterrupt(unsigned char)+0x58>
c001ae83:	43                   	inc    ebx
c001ae84:	eb c2                	jmp    c001ae48 <IDE::waitInterrupt(unsigned char)+0x12>
c001ae86:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001ae8e:	83 c4 0c             	add    esp,0xc
c001ae91:	89 e8                	mov    eax,ebp
c001ae93:	5b                   	pop    ebx
c001ae94:	5e                   	pop    esi
c001ae95:	5f                   	pop    edi
c001ae96:	5d                   	pop    ebp
c001ae97:	c3                   	ret    

c001ae98 <ideChannel0IRQHandler(regs*, void*)>:
c001ae98:	83 ec 10             	sub    esp,0x10
c001ae9b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ae9f:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001aea6:	6a 07                	push   0x7
c001aea8:	6a 00                	push   0x0
c001aeaa:	50                   	push   eax
c001aeab:	e8 d8 fe ff ff       	call   c001ad88 <IDE::read(unsigned char, unsigned char)>
c001aeb0:	83 c4 1c             	add    esp,0x1c
c001aeb3:	c3                   	ret    

c001aeb4 <ideChannel1IRQHandler(regs*, void*)>:
c001aeb4:	83 ec 10             	sub    esp,0x10
c001aeb7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aebb:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001aec2:	6a 07                	push   0x7
c001aec4:	6a 01                	push   0x1
c001aec6:	50                   	push   eax
c001aec7:	e8 bc fe ff ff       	call   c001ad88 <IDE::read(unsigned char, unsigned char)>
c001aecc:	83 c4 1c             	add    esp,0x1c
c001aecf:	c3                   	ret    

c001aed0 <IDE::enableIRQs(unsigned char, bool)>:
c001aed0:	57                   	push   edi
c001aed1:	b8 02 00 00 00       	mov    eax,0x2
c001aed6:	56                   	push   esi
c001aed7:	53                   	push   ebx
c001aed8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001aedc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001aee0:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001aee5:	74 02                	je     c001aee9 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001aee7:	31 c0                	xor    eax,eax
c001aee9:	0f b6 db             	movzx  ebx,bl
c001aeec:	bf 04 00 00 00       	mov    edi,0x4
c001aef1:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001aef8:	50                   	push   eax
c001aef9:	6a 0c                	push   0xc
c001aefb:	53                   	push   ebx
c001aefc:	56                   	push   esi
c001aefd:	e8 c6 fd ff ff       	call   c001acc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001af02:	83 c4 10             	add    esp,0x10
c001af05:	50                   	push   eax
c001af06:	6a 0c                	push   0xc
c001af08:	53                   	push   ebx
c001af09:	56                   	push   esi
c001af0a:	e8 79 fe ff ff       	call   c001ad88 <IDE::read(unsigned char, unsigned char)>
c001af0f:	83 c4 10             	add    esp,0x10
c001af12:	4f                   	dec    edi
c001af13:	75 f0                	jne    c001af05 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001af15:	5b                   	pop    ebx
c001af16:	5e                   	pop    esi
c001af17:	5f                   	pop    edi
c001af18:	c3                   	ret    
c001af19:	90                   	nop

c001af1a <IDE::open(int, int, void*)>:
c001af1a:	55                   	push   ebp
c001af1b:	57                   	push   edi
c001af1c:	56                   	push   esi
c001af1d:	53                   	push   ebx
c001af1e:	83 ec 1c             	sub    esp,0x1c
c001af21:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001af25:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001af2e:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001af37:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001af3e:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001af45:	0f 85 de 02 00 00    	jne    c001b229 <IDE::open(int, int, void*)+0x30f>
c001af4b:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001af51:	88 04 24             	mov    BYTE PTR [esp],al
c001af54:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001af57:	83 e0 7f             	and    eax,0x7f
c001af5a:	83 f8 05             	cmp    eax,0x5
c001af5d:	74 05                	je     c001af64 <IDE::open(int, int, void*)+0x4a>
c001af5f:	83 f8 0f             	cmp    eax,0xf
c001af62:	75 32                	jne    c001af96 <IDE::open(int, int, void*)+0x7c>
c001af64:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001af6a:	83 e0 fc             	and    eax,0xfffffffc
c001af6d:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001af74:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001af7a:	83 e0 fc             	and    eax,0xfffffffc
c001af7d:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001af84:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001af8a:	83 e0 fc             	and    eax,0xfffffffc
c001af8d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001af94:	eb 14                	jmp    c001afaa <IDE::open(int, int, void*)+0x90>
c001af96:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001afa0:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001afaa:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001afb1:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001afb8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001afbc:	89 c6                	mov    esi,eax
c001afbe:	bf f8 0c 00 00       	mov    edi,0xcf8
c001afc3:	c1 e6 10             	shl    esi,0x10
c001afc6:	89 e8                	mov    eax,ebp
c001afc8:	89 fa                	mov    edx,edi
c001afca:	c1 e0 0b             	shl    eax,0xb
c001afcd:	09 f0                	or     eax,esi
c001afcf:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001afd6:	c1 e6 08             	shl    esi,0x8
c001afd9:	09 c6                	or     esi,eax
c001afdb:	89 f0                	mov    eax,esi
c001afdd:	0d 08 00 00 80       	or     eax,0x80000008
c001afe2:	ef                   	out    dx,eax
c001afe3:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001afe8:	89 ca                	mov    edx,ecx
c001afea:	ed                   	in     eax,dx
c001afeb:	c1 e8 10             	shr    eax,0x10
c001afee:	3d ff ff 00 00       	cmp    eax,0xffff
c001aff3:	0f 84 f9 00 00 00    	je     c001b0f2 <IDE::open(int, int, void*)+0x1d8>
c001aff9:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001afff:	89 fa                	mov    edx,edi
c001b001:	89 f0                	mov    eax,esi
c001b003:	ef                   	out    dx,eax
c001b004:	b0 fe                	mov    al,0xfe
c001b006:	89 ca                	mov    edx,ecx
c001b008:	ee                   	out    dx,al
c001b009:	89 f0                	mov    eax,esi
c001b00b:	89 fa                	mov    edx,edi
c001b00d:	ef                   	out    dx,eax
c001b00e:	89 ca                	mov    edx,ecx
c001b010:	ed                   	in     eax,dx
c001b011:	3c fe                	cmp    al,0xfe
c001b013:	0f 85 a9 00 00 00    	jne    c001b0c2 <IDE::open(int, int, void*)+0x1a8>
c001b019:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c001b01f:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001b026:	74 33                	je     c001b05b <IDE::open(int, int, void*)+0x141>
c001b028:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001b02e:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001b032:	40                   	inc    eax
c001b033:	83 ec 0c             	sub    esp,0xc
c001b036:	0f b6 c0             	movzx  eax,al
c001b039:	50                   	push   eax
c001b03a:	55                   	push   ebp
c001b03b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b03f:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001b045:	51                   	push   ecx
c001b046:	e8 55 3d ff ff       	call   c000eda0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001b04b:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001b050:	83 c4 1c             	add    esp,0x1c
c001b053:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001b059:	eb 0a                	jmp    c001b065 <IDE::open(int, int, void*)+0x14b>
c001b05b:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001b065:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001b06c:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001b073:	c1 e1 10             	shl    ecx,0x10
c001b076:	c1 e0 08             	shl    eax,0x8
c001b079:	bf f8 0c 00 00       	mov    edi,0xcf8
c001b07e:	09 c1                	or     ecx,eax
c001b080:	89 fa                	mov    edx,edi
c001b082:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001b089:	c1 e0 0b             	shl    eax,0xb
c001b08c:	09 c1                	or     ecx,eax
c001b08e:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001b094:	89 c8                	mov    eax,ecx
c001b096:	ef                   	out    dx,eax
c001b097:	be fc 0c 00 00       	mov    esi,0xcfc
c001b09c:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001b0a2:	89 f2                	mov    edx,esi
c001b0a4:	ee                   	out    dx,al
c001b0a5:	89 c8                	mov    eax,ecx
c001b0a7:	89 fa                	mov    edx,edi
c001b0a9:	ef                   	out    dx,eax
c001b0aa:	89 f2                	mov    edx,esi
c001b0ac:	ed                   	in     eax,dx
c001b0ad:	0f b6 c0             	movzx  eax,al
c001b0b0:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001b0b6:	74 4a                	je     c001b102 <IDE::open(int, int, void*)+0x1e8>
c001b0b8:	83 ec 0c             	sub    esp,0xc
c001b0bb:	68 1c 1b 02 c0       	push   0xc0021b1c
c001b0c0:	eb 38                	jmp    c001b0fa <IDE::open(int, int, void*)+0x1e0>
c001b0c2:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001b0cb:	75 1b                	jne    c001b0e8 <IDE::open(int, int, void*)+0x1ce>
c001b0cd:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001b0d1:	3d 80 00 00 00       	cmp    eax,0x80
c001b0d6:	74 07                	je     c001b0df <IDE::open(int, int, void*)+0x1c5>
c001b0d8:	3d 8a 00 00 00       	cmp    eax,0x8a
c001b0dd:	75 09                	jne    c001b0e8 <IDE::open(int, int, void*)+0x1ce>
c001b0df:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001b0e6:	eb 1a                	jmp    c001b102 <IDE::open(int, int, void*)+0x1e8>
c001b0e8:	83 ec 0c             	sub    esp,0xc
c001b0eb:	68 24 1b 02 c0       	push   0xc0021b24
c001b0f0:	eb 08                	jmp    c001b0fa <IDE::open(int, int, void*)+0x1e0>
c001b0f2:	83 ec 0c             	sub    esp,0xc
c001b0f5:	68 55 1b 02 c0       	push   0xc0021b55
c001b0fa:	e8 28 58 ff ff       	call   c0010927 <KePanic(char const*)>
c001b0ff:	83 c4 10             	add    esp,0x10
c001b102:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001b109:	74 1a                	je     c001b125 <IDE::open(int, int, void*)+0x20b>
c001b10b:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001b111:	83 e0 fc             	and    eax,0xfffffffc
c001b114:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001b11b:	83 c0 08             	add    eax,0x8
c001b11e:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001b125:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001b12b:	89 c2                	mov    edx,eax
c001b12d:	83 e2 0f             	and    edx,0xf
c001b130:	83 fa 08             	cmp    edx,0x8
c001b133:	75 0a                	jne    c001b13f <IDE::open(int, int, void*)+0x225>
c001b135:	83 e8 02             	sub    eax,0x2
c001b138:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b13f:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001b145:	89 c2                	mov    edx,eax
c001b147:	83 e2 0f             	and    edx,0xf
c001b14a:	83 fa 08             	cmp    edx,0x8
c001b14d:	75 0a                	jne    c001b159 <IDE::open(int, int, void*)+0x23f>
c001b14f:	83 e8 02             	sub    eax,0x2
c001b152:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001b159:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001b160:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001b167:	89 d0                	mov    eax,edx
c001b169:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b16c:	8d 7a 01             	lea    edi,[edx+0x1]
c001b16f:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b173:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001b177:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001b17b:	83 e1 3f             	and    ecx,0x3f
c001b17e:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001b182:	89 f9                	mov    ecx,edi
c001b184:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001b18b:	0f b6 c9             	movzx  ecx,cl
c001b18e:	8d 78 02             	lea    edi,[eax+0x2]
c001b191:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001b194:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001b198:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001b19c:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001b1a0:	83 e2 3f             	and    edx,0x3f
c001b1a3:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001b1a7:	89 f9                	mov    ecx,edi
c001b1a9:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001b1af:	0f b6 d1             	movzx  edx,cl
c001b1b2:	8d 78 03             	lea    edi,[eax+0x3]
c001b1b5:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b1b8:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b1bc:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001b1c0:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001b1c4:	83 e1 3f             	and    ecx,0x3f
c001b1c7:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001b1cb:	89 f9                	mov    ecx,edi
c001b1cd:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001b1d3:	0f b6 c9             	movzx  ecx,cl
c001b1d6:	8d 78 04             	lea    edi,[eax+0x4]
c001b1d9:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001b1dc:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001b1e0:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001b1e4:	89 fa                	mov    edx,edi
c001b1e6:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001b1ec:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001b1f0:	83 e2 3f             	and    edx,0x3f
c001b1f3:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001b1f7:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001b1fe:	66 85 f6             	test   si,si
c001b201:	74 65                	je     c001b268 <IDE::open(int, int, void*)+0x34e>
c001b203:	89 f9                	mov    ecx,edi
c001b205:	83 c0 05             	add    eax,0x5
c001b208:	0f b6 d1             	movzx  edx,cl
c001b20b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b20e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b212:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001b216:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001b21c:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001b220:	83 e0 3f             	and    eax,0x3f
c001b223:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001b227:	eb 3f                	jmp    c001b268 <IDE::open(int, int, void*)+0x34e>
c001b229:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001b22f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001b236:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001b23d:	05 06 02 00 00       	add    eax,0x206
c001b242:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b249:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001b250:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001b257:	05 06 02 00 00       	add    eax,0x206
c001b25c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001b263:	e9 bd fe ff ff       	jmp    c001b125 <IDE::open(int, int, void*)+0x20b>
c001b268:	50                   	push   eax
c001b269:	50                   	push   eax
c001b26a:	6a 00                	push   0x0
c001b26c:	53                   	push   ebx
c001b26d:	e8 30 fa ff ff       	call   c001aca2 <IDE::prepareInterrupt(unsigned char)>
c001b272:	5a                   	pop    edx
c001b273:	59                   	pop    ecx
c001b274:	6a 01                	push   0x1
c001b276:	53                   	push   ebx
c001b277:	e8 26 fa ff ff       	call   c001aca2 <IDE::prepareInterrupt(unsigned char)>
c001b27c:	83 c4 0c             	add    esp,0xc
c001b27f:	6a 00                	push   0x0
c001b281:	6a 00                	push   0x0
c001b283:	53                   	push   ebx
c001b284:	e8 47 fc ff ff       	call   c001aed0 <IDE::enableIRQs(unsigned char, bool)>
c001b289:	83 c4 0c             	add    esp,0xc
c001b28c:	6a 00                	push   0x0
c001b28e:	6a 01                	push   0x1
c001b290:	53                   	push   ebx
c001b291:	e8 3a fc ff ff       	call   c001aed0 <IDE::enableIRQs(unsigned char, bool)>
c001b296:	83 c4 10             	add    esp,0x10
c001b299:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001b2a0:	74 34                	je     c001b2d6 <IDE::open(int, int, void*)+0x3bc>
c001b2a2:	83 ec 0c             	sub    esp,0xc
c001b2a5:	53                   	push   ebx
c001b2a6:	6a 01                	push   0x1
c001b2a8:	68 98 ae 01 c0       	push   0xc001ae98
c001b2ad:	6a 0e                	push   0xe
c001b2af:	53                   	push   ebx
c001b2b0:	e8 25 0b ff ff       	call   c000bdda <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b2b5:	83 c4 14             	add    esp,0x14
c001b2b8:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001b2be:	53                   	push   ebx
c001b2bf:	6a 01                	push   0x1
c001b2c1:	68 b4 ae 01 c0       	push   0xc001aeb4
c001b2c6:	6a 0f                	push   0xf
c001b2c8:	53                   	push   ebx
c001b2c9:	e8 0c 0b ff ff       	call   c000bdda <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b2ce:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001b2d4:	eb 38                	jmp    c001b30e <IDE::open(int, int, void*)+0x3f4>
c001b2d6:	83 ec 0c             	sub    esp,0xc
c001b2d9:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001b2e3:	53                   	push   ebx
c001b2e4:	6a 00                	push   0x0
c001b2e6:	68 98 ae 01 c0       	push   0xc001ae98
c001b2eb:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001b2f1:	53                   	push   ebx
c001b2f2:	e8 e3 0a ff ff       	call   c000bdda <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b2f7:	83 c4 14             	add    esp,0x14
c001b2fa:	53                   	push   ebx
c001b2fb:	6a 00                	push   0x0
c001b2fd:	68 b4 ae 01 c0       	push   0xc001aeb4
c001b302:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001b308:	53                   	push   ebx
c001b309:	e8 cc 0a ff ff       	call   c000bdda <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b30e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b310:	83 c4 20             	add    esp,0x20
c001b313:	83 ec 0c             	sub    esp,0xc
c001b316:	53                   	push   ebx
c001b317:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001b31a:	83 c4 0c             	add    esp,0xc
c001b31d:	6a 07                	push   0x7
c001b31f:	6a 00                	push   0x0
c001b321:	53                   	push   ebx
c001b322:	e8 61 fa ff ff       	call   c001ad88 <IDE::read(unsigned char, unsigned char)>
c001b327:	83 c4 0c             	add    esp,0xc
c001b32a:	6a 07                	push   0x7
c001b32c:	6a 01                	push   0x1
c001b32e:	53                   	push   ebx
c001b32f:	e8 54 fa ff ff       	call   c001ad88 <IDE::read(unsigned char, unsigned char)>
c001b334:	83 c4 0c             	add    esp,0xc
c001b337:	6a 01                	push   0x1
c001b339:	6a 00                	push   0x0
c001b33b:	53                   	push   ebx
c001b33c:	e8 8f fb ff ff       	call   c001aed0 <IDE::enableIRQs(unsigned char, bool)>
c001b341:	83 c4 0c             	add    esp,0xc
c001b344:	6a 01                	push   0x1
c001b346:	6a 01                	push   0x1
c001b348:	53                   	push   ebx
c001b349:	e8 82 fb ff ff       	call   c001aed0 <IDE::enableIRQs(unsigned char, bool)>
c001b34e:	83 c4 2c             	add    esp,0x2c
c001b351:	31 c0                	xor    eax,eax
c001b353:	5b                   	pop    ebx
c001b354:	5e                   	pop    esi
c001b355:	5f                   	pop    edi
c001b356:	5d                   	pop    ebp
c001b357:	c3                   	ret    

c001b358 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001b358:	55                   	push   ebp
c001b359:	57                   	push   edi
c001b35a:	56                   	push   esi
c001b35b:	53                   	push   ebx
c001b35c:	83 ec 1c             	sub    esp,0x1c
c001b35f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b363:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b367:	8d 42 f8             	lea    eax,[edx-0x8]
c001b36a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b36e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b372:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001b376:	3c 03                	cmp    al,0x3
c001b378:	77 5a                	ja     c001b3d4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001b37a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b37e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b382:	0f b6 db             	movzx  ebx,bl
c001b385:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001b388:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b38d:	0c 80                	or     al,0x80
c001b38f:	50                   	push   eax
c001b390:	6a 0c                	push   0xc
c001b392:	53                   	push   ebx
c001b393:	56                   	push   esi
c001b394:	e8 2f f9 ff ff       	call   c001acc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b399:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001b39e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b3a2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b3a6:	0f b6 d2             	movzx  edx,dl
c001b3a9:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b3ad:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b3af:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b3b4:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001b3b8:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b3bc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b3c0:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b3c8:	83 c4 2c             	add    esp,0x2c
c001b3cb:	5b                   	pop    ebx
c001b3cc:	5e                   	pop    esi
c001b3cd:	5f                   	pop    edi
c001b3ce:	5d                   	pop    ebp
c001b3cf:	e9 f4 f8 ff ff       	jmp    c001acc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b3d4:	0f b6 c2             	movzx  eax,dl
c001b3d7:	83 f8 07             	cmp    eax,0x7
c001b3da:	77 12                	ja     c001b3ee <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001b3dc:	0f b6 c2             	movzx  eax,dl
c001b3df:	0f b6 db             	movzx  ebx,bl
c001b3e2:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001b3ea:	01 c2                	add    edx,eax
c001b3ec:	eb 2f                	jmp    c001b41d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001b3ee:	83 f8 0d             	cmp    eax,0xd
c001b3f1:	77 13                	ja     c001b406 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001b3f3:	0f b6 db             	movzx  ebx,bl
c001b3f6:	0f b6 d2             	movzx  edx,dl
c001b3f9:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001b400:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b404:	eb 17                	jmp    c001b41d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001b406:	83 f8 15             	cmp    eax,0x15
c001b409:	77 14                	ja     c001b41f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001b40b:	0f b6 db             	movzx  ebx,bl
c001b40e:	0f b6 d2             	movzx  edx,dl
c001b411:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001b419:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b41d:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b41f:	83 c4 1c             	add    esp,0x1c
c001b422:	5b                   	pop    ebx
c001b423:	5e                   	pop    esi
c001b424:	5f                   	pop    edi
c001b425:	5d                   	pop    ebp
c001b426:	c3                   	ret    
c001b427:	90                   	nop

c001b428 <IDE::detect()>:
c001b428:	55                   	push   ebp
c001b429:	57                   	push   edi
c001b42a:	56                   	push   esi
c001b42b:	53                   	push   ebx
c001b42c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001b432:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001b439:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001b440:	0f 85 a4 02 00 00    	jne    c001b6ea <IDE::detect()+0x2c2>
c001b446:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001b44d:	31 f6                	xor    esi,esi
c001b44f:	31 ed                	xor    ebp,ebp
c001b451:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b459:	89 e8                	mov    eax,ebp
c001b45b:	c1 e0 06             	shl    eax,0x6
c001b45e:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001b466:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001b46a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b46e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b472:	c1 e0 04             	shl    eax,0x4
c001b475:	83 c8 a0             	or     eax,0xffffffa0
c001b478:	0f b6 c0             	movzx  eax,al
c001b47b:	50                   	push   eax
c001b47c:	6a 06                	push   0x6
c001b47e:	56                   	push   esi
c001b47f:	53                   	push   ebx
c001b480:	e8 43 f8 ff ff       	call   c001acc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b485:	83 c4 0c             	add    esp,0xc
c001b488:	6a 0c                	push   0xc
c001b48a:	56                   	push   esi
c001b48b:	53                   	push   ebx
c001b48c:	e8 f7 f8 ff ff       	call   c001ad88 <IDE::read(unsigned char, unsigned char)>
c001b491:	83 c4 0c             	add    esp,0xc
c001b494:	6a 0c                	push   0xc
c001b496:	56                   	push   esi
c001b497:	53                   	push   ebx
c001b498:	e8 eb f8 ff ff       	call   c001ad88 <IDE::read(unsigned char, unsigned char)>
c001b49d:	83 c4 0c             	add    esp,0xc
c001b4a0:	6a 0c                	push   0xc
c001b4a2:	56                   	push   esi
c001b4a3:	53                   	push   ebx
c001b4a4:	e8 df f8 ff ff       	call   c001ad88 <IDE::read(unsigned char, unsigned char)>
c001b4a9:	83 c4 0c             	add    esp,0xc
c001b4ac:	6a 0c                	push   0xc
c001b4ae:	56                   	push   esi
c001b4af:	53                   	push   ebx
c001b4b0:	e8 d3 f8 ff ff       	call   c001ad88 <IDE::read(unsigned char, unsigned char)>
c001b4b5:	68 ec 00 00 00       	push   0xec
c001b4ba:	6a 07                	push   0x7
c001b4bc:	56                   	push   esi
c001b4bd:	53                   	push   ebx
c001b4be:	e8 05 f8 ff ff       	call   c001acc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b4c3:	83 c4 1c             	add    esp,0x1c
c001b4c6:	6a 0c                	push   0xc
c001b4c8:	56                   	push   esi
c001b4c9:	53                   	push   ebx
c001b4ca:	e8 b9 f8 ff ff       	call   c001ad88 <IDE::read(unsigned char, unsigned char)>
c001b4cf:	83 c4 0c             	add    esp,0xc
c001b4d2:	6a 0c                	push   0xc
c001b4d4:	56                   	push   esi
c001b4d5:	53                   	push   ebx
c001b4d6:	e8 ad f8 ff ff       	call   c001ad88 <IDE::read(unsigned char, unsigned char)>
c001b4db:	83 c4 0c             	add    esp,0xc
c001b4de:	6a 0c                	push   0xc
c001b4e0:	56                   	push   esi
c001b4e1:	53                   	push   ebx
c001b4e2:	e8 a1 f8 ff ff       	call   c001ad88 <IDE::read(unsigned char, unsigned char)>
c001b4e7:	83 c4 0c             	add    esp,0xc
c001b4ea:	6a 0c                	push   0xc
c001b4ec:	56                   	push   esi
c001b4ed:	53                   	push   ebx
c001b4ee:	e8 95 f8 ff ff       	call   c001ad88 <IDE::read(unsigned char, unsigned char)>
c001b4f3:	83 c4 0c             	add    esp,0xc
c001b4f6:	6a 0c                	push   0xc
c001b4f8:	56                   	push   esi
c001b4f9:	53                   	push   ebx
c001b4fa:	e8 89 f8 ff ff       	call   c001ad88 <IDE::read(unsigned char, unsigned char)>
c001b4ff:	83 c4 10             	add    esp,0x10
c001b502:	84 c0                	test   al,al
c001b504:	0f 84 60 01 00 00    	je     c001b66a <IDE::detect()+0x242>
c001b50a:	31 ff                	xor    edi,edi
c001b50c:	50                   	push   eax
c001b50d:	6a 0c                	push   0xc
c001b50f:	56                   	push   esi
c001b510:	53                   	push   ebx
c001b511:	e8 72 f8 ff ff       	call   c001ad88 <IDE::read(unsigned char, unsigned char)>
c001b516:	83 c4 10             	add    esp,0x10
c001b519:	a8 01                	test   al,0x1
c001b51b:	0f 85 6a 01 00 00    	jne    c001b68b <IDE::detect()+0x263>
c001b521:	a8 80                	test   al,0x80
c001b523:	75 04                	jne    c001b529 <IDE::detect()+0x101>
c001b525:	a8 08                	test   al,0x8
c001b527:	75 23                	jne    c001b54c <IDE::detect()+0x124>
c001b529:	47                   	inc    edi
c001b52a:	81 ff 17 01 00 00    	cmp    edi,0x117
c001b530:	7e da                	jle    c001b50c <IDE::detect()+0xe4>
c001b532:	83 ec 0c             	sub    esp,0xc
c001b535:	6a 32                	push   0x32
c001b537:	e8 d0 9e ff ff       	call   c001540c <milliTenthSleep(unsigned int)>
c001b53c:	83 c4 10             	add    esp,0x10
c001b53f:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001b545:	75 c5                	jne    c001b50c <IDE::detect()+0xe4>
c001b547:	e9 3f 01 00 00       	jmp    c001b68b <IDE::detect()+0x263>
c001b54c:	31 c9                	xor    ecx,ecx
c001b54e:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001b552:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b556:	83 ec 0c             	sub    esp,0xc
c001b559:	68 80 00 00 00       	push   0x80
c001b55e:	57                   	push   edi
c001b55f:	6a 00                	push   0x0
c001b561:	56                   	push   esi
c001b562:	53                   	push   ebx
c001b563:	e8 f0 fd ff ff       	call   c001b358 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001b568:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001b56d:	89 e8                	mov    eax,ebp
c001b56f:	89 d1                	mov    ecx,edx
c001b571:	c1 e0 06             	shl    eax,0x6
c001b574:	01 d8                	add    eax,ebx
c001b576:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001b57d:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001b584:	89 f2                	mov    edx,esi
c001b586:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001b58c:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001b590:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001b596:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b59a:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001b5a1:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001b5a9:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001b5b0:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001b5b8:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001b5be:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001b5c5:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001b5cb:	8d 54 24 58          	lea    edx,[esp+0x58]
c001b5cf:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b5d3:	83 c4 20             	add    esp,0x20
c001b5d6:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001b5d9:	83 c0 02             	add    eax,0x2
c001b5dc:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001b5e2:	83 c7 02             	add    edi,0x2
c001b5e5:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001b5e8:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001b5ee:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001b5f2:	75 e2                	jne    c001b5d6 <IDE::detect()+0x1ae>
c001b5f4:	89 e8                	mov    eax,ebp
c001b5f6:	c1 e0 06             	shl    eax,0x6
c001b5f9:	01 d8                	add    eax,ebx
c001b5fb:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001b602:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001b609:	c1 ea 09             	shr    edx,0x9
c001b60c:	83 e2 01             	and    edx,0x1
c001b60f:	80 e1 01             	and    cl,0x1
c001b612:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001b618:	75 22                	jne    c001b63c <IDE::detect()+0x214>
c001b61a:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001b621:	74 46                	je     c001b669 <IDE::detect()+0x241>
c001b623:	83 ec 0c             	sub    esp,0xc
c001b626:	68 7c 01 00 00       	push   0x17c
c001b62b:	e8 7e c4 fe ff       	call   c0007aae <malloc>
c001b630:	89 c7                	mov    edi,eax
c001b632:	89 04 24             	mov    DWORD PTR [esp],eax
c001b635:	e8 1a 05 00 00       	call   c001bb54 <ATA::ATA()>
c001b63a:	eb 17                	jmp    c001b653 <IDE::detect()+0x22b>
c001b63c:	83 ec 0c             	sub    esp,0xc
c001b63f:	68 84 01 00 00       	push   0x184
c001b644:	e8 65 c4 fe ff       	call   c0007aae <malloc>
c001b649:	89 c7                	mov    edi,eax
c001b64b:	89 04 24             	mov    DWORD PTR [esp],eax
c001b64e:	e8 45 0e 00 00       	call   c001c498 <ATAPI::ATAPI()>
c001b653:	5a                   	pop    edx
c001b654:	59                   	pop    ecx
c001b655:	57                   	push   edi
c001b656:	53                   	push   ebx
c001b657:	e8 d2 07 ff ff       	call   c000be2e <Device::addChild(Device*)>
c001b65c:	8b 07                	mov    eax,DWORD PTR [edi]
c001b65e:	53                   	push   ebx
c001b65f:	55                   	push   ebp
c001b660:	6a 00                	push   0x0
c001b662:	57                   	push   edi
c001b663:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b666:	83 c4 20             	add    esp,0x20
c001b669:	45                   	inc    ebp
c001b66a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001b66f:	74 0d                	je     c001b67e <IDE::detect()+0x256>
c001b671:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001b679:	e9 db fd ff ff       	jmp    c001b459 <IDE::detect()+0x31>
c001b67e:	4e                   	dec    esi
c001b67f:	74 69                	je     c001b6ea <IDE::detect()+0x2c2>
c001b681:	be 01 00 00 00       	mov    esi,0x1
c001b686:	e9 c6 fd ff ff       	jmp    c001b451 <IDE::detect()+0x29>
c001b68b:	50                   	push   eax
c001b68c:	6a 04                	push   0x4
c001b68e:	56                   	push   esi
c001b68f:	53                   	push   ebx
c001b690:	e8 f3 f6 ff ff       	call   c001ad88 <IDE::read(unsigned char, unsigned char)>
c001b695:	83 c4 0c             	add    esp,0xc
c001b698:	89 c7                	mov    edi,eax
c001b69a:	6a 05                	push   0x5
c001b69c:	56                   	push   esi
c001b69d:	53                   	push   ebx
c001b69e:	e8 e5 f6 ff ff       	call   c001ad88 <IDE::read(unsigned char, unsigned char)>
c001b6a3:	83 c4 10             	add    esp,0x10
c001b6a6:	89 f9                	mov    ecx,edi
c001b6a8:	0f b6 c0             	movzx  eax,al
c001b6ab:	0f b6 f9             	movzx  edi,cl
c001b6ae:	83 ff 14             	cmp    edi,0x14
c001b6b1:	75 07                	jne    c001b6ba <IDE::detect()+0x292>
c001b6b3:	3d eb 00 00 00       	cmp    eax,0xeb
c001b6b8:	eb 0a                	jmp    c001b6c4 <IDE::detect()+0x29c>
c001b6ba:	3d 96 00 00 00       	cmp    eax,0x96
c001b6bf:	75 a9                	jne    c001b66a <IDE::detect()+0x242>
c001b6c1:	83 ff 69             	cmp    edi,0x69
c001b6c4:	75 a4                	jne    c001b66a <IDE::detect()+0x242>
c001b6c6:	68 a1 00 00 00       	push   0xa1
c001b6cb:	6a 07                	push   0x7
c001b6cd:	56                   	push   esi
c001b6ce:	53                   	push   ebx
c001b6cf:	e8 f4 f5 ff ff       	call   c001acc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b6d4:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001b6db:	e8 2c 9d ff ff       	call   c001540c <milliTenthSleep(unsigned int)>
c001b6e0:	83 c4 10             	add    esp,0x10
c001b6e3:	b1 01                	mov    cl,0x1
c001b6e5:	e9 64 fe ff ff       	jmp    c001b54e <IDE::detect()+0x126>
c001b6ea:	81 c4 1c 02 00 00    	add    esp,0x21c
c001b6f0:	5b                   	pop    ebx
c001b6f1:	5e                   	pop    esi
c001b6f2:	5f                   	pop    edi
c001b6f3:	5d                   	pop    ebp
c001b6f4:	c3                   	ret    
c001b6f5:	90                   	nop

c001b6f6 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001b6f6:	55                   	push   ebp
c001b6f7:	57                   	push   edi
c001b6f8:	56                   	push   esi
c001b6f9:	53                   	push   ebx
c001b6fa:	83 ec 1c             	sub    esp,0x1c
c001b6fd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b701:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001b705:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b709:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001b70d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b711:	88 c3                	mov    bl,al
c001b713:	25 ff 00 00 00       	and    eax,0xff
c001b718:	0f 84 88 00 00 00    	je     c001b7a6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b71e:	83 ec 0c             	sub    esp,0xc
c001b721:	89 c7                	mov    edi,eax
c001b723:	68 7f 1b 02 c0       	push   0xc0021b7f
c001b728:	e8 ca f2 fe ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c001b72d:	83 c4 10             	add    esp,0x10
c001b730:	83 ff 01             	cmp    edi,0x1
c001b733:	74 6b                	je     c001b7a0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001b735:	83 ff 02             	cmp    edi,0x2
c001b738:	75 58                	jne    c001b792 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001b73a:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001b73f:	01 ff                	add    edi,edi
c001b741:	50                   	push   eax
c001b742:	09 fe                	or     esi,edi
c001b744:	6a 01                	push   0x1
c001b746:	89 f0                	mov    eax,esi
c001b748:	0f b6 f0             	movzx  esi,al
c001b74b:	c1 e6 06             	shl    esi,0x6
c001b74e:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001b756:	50                   	push   eax
c001b757:	55                   	push   ebp
c001b758:	e8 2b f6 ff ff       	call   c001ad88 <IDE::read(unsigned char, unsigned char)>
c001b75d:	83 c4 10             	add    esp,0x10
c001b760:	a8 01                	test   al,0x1
c001b762:	74 02                	je     c001b766 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001b764:	b3 07                	mov    bl,0x7
c001b766:	a8 02                	test   al,0x2
c001b768:	74 02                	je     c001b76c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001b76a:	b3 03                	mov    bl,0x3
c001b76c:	a8 04                	test   al,0x4
c001b76e:	74 02                	je     c001b772 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001b770:	b3 14                	mov    bl,0x14
c001b772:	a8 08                	test   al,0x8
c001b774:	74 02                	je     c001b778 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001b776:	b3 03                	mov    bl,0x3
c001b778:	a8 10                	test   al,0x10
c001b77a:	74 02                	je     c001b77e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001b77c:	b3 15                	mov    bl,0x15
c001b77e:	a8 20                	test   al,0x20
c001b780:	74 02                	je     c001b784 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001b782:	b3 03                	mov    bl,0x3
c001b784:	a8 40                	test   al,0x40
c001b786:	74 02                	je     c001b78a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001b788:	b3 16                	mov    bl,0x16
c001b78a:	a8 80                	test   al,0x80
c001b78c:	74 18                	je     c001b7a6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b78e:	b3 0d                	mov    bl,0xd
c001b790:	eb 14                	jmp    c001b7a6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b792:	83 ff 03             	cmp    edi,0x3
c001b795:	74 0d                	je     c001b7a4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001b797:	83 ff 04             	cmp    edi,0x4
c001b79a:	75 0a                	jne    c001b7a6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b79c:	b3 08                	mov    bl,0x8
c001b79e:	eb 06                	jmp    c001b7a6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b7a0:	b3 13                	mov    bl,0x13
c001b7a2:	eb 02                	jmp    c001b7a6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b7a4:	b3 17                	mov    bl,0x17
c001b7a6:	83 c4 1c             	add    esp,0x1c
c001b7a9:	88 d8                	mov    al,bl
c001b7ab:	5b                   	pop    ebx
c001b7ac:	5e                   	pop    esi
c001b7ad:	5f                   	pop    edi
c001b7ae:	5d                   	pop    ebp
c001b7af:	c3                   	ret    

c001b7b0 <IDE::polling(unsigned char, unsigned int)>:
c001b7b0:	57                   	push   edi
c001b7b1:	56                   	push   esi
c001b7b2:	53                   	push   ebx
c001b7b3:	bb 04 00 00 00       	mov    ebx,0x4
c001b7b8:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001b7bc:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b7c1:	52                   	push   edx
c001b7c2:	6a 0c                	push   0xc
c001b7c4:	56                   	push   esi
c001b7c5:	57                   	push   edi
c001b7c6:	e8 bd f5 ff ff       	call   c001ad88 <IDE::read(unsigned char, unsigned char)>
c001b7cb:	83 c4 10             	add    esp,0x10
c001b7ce:	4b                   	dec    ebx
c001b7cf:	75 f0                	jne    c001b7c1 <IDE::polling(unsigned char, unsigned int)+0x11>
c001b7d1:	bb a0 86 01 00       	mov    ebx,0x186a0
c001b7d6:	50                   	push   eax
c001b7d7:	6a 0c                	push   0xc
c001b7d9:	56                   	push   esi
c001b7da:	57                   	push   edi
c001b7db:	e8 a8 f5 ff ff       	call   c001ad88 <IDE::read(unsigned char, unsigned char)>
c001b7e0:	83 c4 10             	add    esp,0x10
c001b7e3:	a8 01                	test   al,0x1
c001b7e5:	75 17                	jne    c001b7fe <IDE::polling(unsigned char, unsigned int)+0x4e>
c001b7e7:	a8 20                	test   al,0x20
c001b7e9:	75 0f                	jne    c001b7fa <IDE::polling(unsigned char, unsigned int)+0x4a>
c001b7eb:	4b                   	dec    ebx
c001b7ec:	74 10                	je     c001b7fe <IDE::polling(unsigned char, unsigned int)+0x4e>
c001b7ee:	a8 80                	test   al,0x80
c001b7f0:	75 e4                	jne    c001b7d6 <IDE::polling(unsigned char, unsigned int)+0x26>
c001b7f2:	a8 08                	test   al,0x8
c001b7f4:	74 e0                	je     c001b7d6 <IDE::polling(unsigned char, unsigned int)+0x26>
c001b7f6:	31 c0                	xor    eax,eax
c001b7f8:	eb 06                	jmp    c001b800 <IDE::polling(unsigned char, unsigned int)+0x50>
c001b7fa:	b0 01                	mov    al,0x1
c001b7fc:	eb 02                	jmp    c001b800 <IDE::polling(unsigned char, unsigned int)+0x50>
c001b7fe:	b0 02                	mov    al,0x2
c001b800:	5b                   	pop    ebx
c001b801:	5e                   	pop    esi
c001b802:	5f                   	pop    edi
c001b803:	c3                   	ret    

c001b804 <SATABus::close(int, int, void*)>:
c001b804:	31 c0                	xor    eax,eax
c001b806:	c3                   	ret    
c001b807:	90                   	nop

c001b808 <SATABus::detect()>:
c001b808:	c3                   	ret    
c001b809:	90                   	nop

c001b80a <SATABus::SATABus()>:
c001b80a:	83 ec 0c             	sub    esp,0xc
c001b80d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b811:	83 ec 08             	sub    esp,0x8
c001b814:	68 b8 1b 02 c0       	push   0xc0021bb8
c001b819:	50                   	push   eax
c001b81a:	e8 51 09 ff ff       	call   c000c170 <HardDiskController::HardDiskController(char const*)>
c001b81f:	83 c4 10             	add    esp,0x10
c001b822:	ba e4 1b 02 c0       	mov    edx,0xc0021be4
c001b827:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b82b:	89 10                	mov    DWORD PTR [eax],edx
c001b82d:	83 ec 0c             	sub    esp,0xc
c001b830:	6a 50                	push   0x50
c001b832:	e8 4b c6 fe ff       	call   c0007e82 <Phys::allocateContiguousPages(int)>
c001b837:	83 c4 10             	add    esp,0x10
c001b83a:	89 c2                	mov    edx,eax
c001b83c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b840:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b846:	83 ec 0c             	sub    esp,0xc
c001b849:	6a 50                	push   0x50
c001b84b:	e8 cd dd fe ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c001b850:	83 c4 10             	add    esp,0x10
c001b853:	89 c2                	mov    edx,eax
c001b855:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b859:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b85f:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c001b864:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b868:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001b86e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b872:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b878:	83 ec 0c             	sub    esp,0xc
c001b87b:	6a 03                	push   0x3
c001b87d:	6a 50                	push   0x50
c001b87f:	51                   	push   ecx
c001b880:	52                   	push   edx
c001b881:	50                   	push   eax
c001b882:	e8 91 e7 fe ff       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001b887:	83 c4 20             	add    esp,0x20
c001b88a:	90                   	nop
c001b88b:	83 c4 0c             	add    esp,0xc
c001b88e:	c3                   	ret    
c001b88f:	90                   	nop

c001b890 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001b890:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b894:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001b897:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001b89a:	09 c2                	or     edx,eax
c001b89c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b8a0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b8a6:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b8a8:	31 c0                	xor    eax,eax
c001b8aa:	c1 e9 08             	shr    ecx,0x8
c001b8ad:	83 e1 0f             	and    ecx,0xf
c001b8b0:	39 c8                	cmp    eax,ecx
c001b8b2:	74 0a                	je     c001b8be <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001b8b4:	f6 c2 01             	test   dl,0x1
c001b8b7:	74 08                	je     c001b8c1 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001b8b9:	d1 ea                	shr    edx,1
c001b8bb:	40                   	inc    eax
c001b8bc:	eb f2                	jmp    c001b8b0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001b8be:	83 c8 ff             	or     eax,0xffffffff
c001b8c1:	c3                   	ret    

c001b8c2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001b8c2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b8c6:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b8c9:	89 c2                	mov    edx,eax
c001b8cb:	c1 ea 08             	shr    edx,0x8
c001b8ce:	83 e2 0f             	and    edx,0xf
c001b8d1:	4a                   	dec    edx
c001b8d2:	75 32                	jne    c001b906 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001b8d4:	83 e0 0f             	and    eax,0xf
c001b8d7:	83 f8 03             	cmp    eax,0x3
c001b8da:	75 2a                	jne    c001b906 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001b8dc:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001b8df:	b8 02 00 00 00       	mov    eax,0x2
c001b8e4:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001b8ea:	74 1c                	je     c001b908 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001b8ec:	b8 04 00 00 00       	mov    eax,0x4
c001b8f1:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001b8f7:	74 0f                	je     c001b908 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001b8f9:	31 c0                	xor    eax,eax
c001b8fb:	83 fa 03             	cmp    edx,0x3
c001b8fe:	0f 94 c0             	sete   al
c001b901:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001b905:	c3                   	ret    
c001b906:	31 c0                	xor    eax,eax
c001b908:	c3                   	ret    
c001b909:	90                   	nop

c001b90a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001b90a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b90e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b911:	0f ba e2 0f          	bt     edx,0xf
c001b915:	72 f7                	jb     c001b90e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001b917:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b91a:	83 ca 10             	or     edx,0x10
c001b91d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b920:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b923:	83 ca 01             	or     edx,0x1
c001b926:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b929:	c3                   	ret    

c001b92a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001b92a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b92e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b931:	83 e2 fe             	and    edx,0xfffffffe
c001b934:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b937:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b93a:	83 e2 ef             	and    edx,0xffffffef
c001b93d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b940:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b943:	0f ba e2 0e          	bt     edx,0xe
c001b947:	72 f7                	jb     c001b940 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b949:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b94c:	0f ba e2 0f          	bt     edx,0xf
c001b950:	72 ee                	jb     c001b940 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b952:	c3                   	ret    
c001b953:	90                   	nop

c001b954 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001b954:	55                   	push   ebp
c001b955:	57                   	push   edi
c001b956:	56                   	push   esi
c001b957:	53                   	push   ebx
c001b958:	83 ec 1c             	sub    esp,0x1c
c001b95b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b95f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b963:	53                   	push   ebx
c001b964:	56                   	push   esi
c001b965:	e8 c0 ff ff ff       	call   c001b92a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001b96a:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001b96e:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001b974:	83 ec 0c             	sub    esp,0xc
c001b977:	c1 e5 0a             	shl    ebp,0xa
c001b97a:	01 e8                	add    eax,ebp
c001b97c:	89 03                	mov    DWORD PTR [ebx],eax
c001b97e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b980:	68 00 04 00 00       	push   0x400
c001b985:	6a 00                	push   0x0
c001b987:	50                   	push   eax
c001b988:	e8 63 4b fe ff       	call   c00004f0 <memset>
c001b98d:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001b993:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001b997:	01 e8                	add    eax,ebp
c001b999:	83 c4 1c             	add    esp,0x1c
c001b99c:	89 03                	mov    DWORD PTR [ebx],eax
c001b99e:	c1 e2 08             	shl    edx,0x8
c001b9a1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b9a8:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001b9ae:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001b9b4:	01 f8                	add    eax,edi
c001b9b6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b9b9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001b9bc:	68 00 01 00 00       	push   0x100
c001b9c1:	6a 00                	push   0x0
c001b9c3:	50                   	push   eax
c001b9c4:	e8 27 4b fe ff       	call   c00004f0 <memset>
c001b9c9:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001b9cf:	01 fa                	add    edx,edi
c001b9d1:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001b9d5:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001b9d8:	c1 e7 0d             	shl    edi,0xd
c001b9db:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001b9e2:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001b9e8:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001b9ee:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b9f2:	31 ff                	xor    edi,edi
c001b9f4:	83 c4 10             	add    esp,0x10
c001b9f7:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001b9fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba01:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001ba07:	83 c5 20             	add    ebp,0x20
c001ba0a:	01 f8                	add    eax,edi
c001ba0c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ba0f:	52                   	push   edx
c001ba10:	68 00 01 00 00       	push   0x100
c001ba15:	6a 00                	push   0x0
c001ba17:	50                   	push   eax
c001ba18:	e8 d3 4a fe ff       	call   c00004f0 <memset>
c001ba1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ba21:	83 c4 10             	add    esp,0x10
c001ba24:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001ba2a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001ba31:	01 f8                	add    eax,edi
c001ba33:	81 c7 00 01 00 00    	add    edi,0x100
c001ba39:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ba3c:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001ba42:	75 b3                	jne    c001b9f7 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001ba44:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001ba4b:	50                   	push   eax
c001ba4c:	50                   	push   eax
c001ba4d:	53                   	push   ebx
c001ba4e:	56                   	push   esi
c001ba4f:	e8 b6 fe ff ff       	call   c001b90a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001ba54:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001ba5b:	83 c4 2c             	add    esp,0x2c
c001ba5e:	5b                   	pop    ebx
c001ba5f:	5e                   	pop    esi
c001ba60:	5f                   	pop    edi
c001ba61:	5d                   	pop    ebp
c001ba62:	c3                   	ret    
c001ba63:	90                   	nop

c001ba64 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001ba64:	55                   	push   ebp
c001ba65:	57                   	push   edi
c001ba66:	56                   	push   esi
c001ba67:	53                   	push   ebx
c001ba68:	31 db                	xor    ebx,ebx
c001ba6a:	83 ec 0c             	sub    esp,0xc
c001ba6d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ba71:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ba75:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001ba78:	f7 c7 01 00 00 00    	test   edi,0x1
c001ba7e:	74 7a                	je     c001bafa <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001ba80:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001ba84:	89 d8                	mov    eax,ebx
c001ba86:	c1 e0 07             	shl    eax,0x7
c001ba89:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001ba90:	55                   	push   ebp
c001ba91:	56                   	push   esi
c001ba92:	e8 2b fe ff ff       	call   c001b8c2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001ba97:	5a                   	pop    edx
c001ba98:	83 f8 01             	cmp    eax,0x1
c001ba9b:	59                   	pop    ecx
c001ba9c:	75 21                	jne    c001babf <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001ba9e:	50                   	push   eax
c001ba9f:	53                   	push   ebx
c001baa0:	55                   	push   ebp
c001baa1:	56                   	push   esi
c001baa2:	e8 ad fe ff ff       	call   c001b954 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001baa7:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001baae:	e8 fb bf fe ff       	call   c0007aae <malloc>
c001bab3:	89 c5                	mov    ebp,eax
c001bab5:	89 04 24             	mov    DWORD PTR [esp],eax
c001bab8:	e8 99 10 00 00       	call   c001cb56 <SATA::SATA()>
c001babd:	eb 24                	jmp    c001bae3 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001babf:	83 f8 04             	cmp    eax,0x4
c001bac2:	75 36                	jne    c001bafa <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001bac4:	51                   	push   ecx
c001bac5:	53                   	push   ebx
c001bac6:	55                   	push   ebp
c001bac7:	56                   	push   esi
c001bac8:	e8 87 fe ff ff       	call   c001b954 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001bacd:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001bad4:	e8 d5 bf fe ff       	call   c0007aae <malloc>
c001bad9:	89 c5                	mov    ebp,eax
c001badb:	89 04 24             	mov    DWORD PTR [esp],eax
c001bade:	e8 d5 17 00 00       	call   c001d2b8 <SATAPI::SATAPI()>
c001bae3:	58                   	pop    eax
c001bae4:	5a                   	pop    edx
c001bae5:	55                   	push   ebp
c001bae6:	56                   	push   esi
c001bae7:	e8 42 03 ff ff       	call   c000be2e <Device::addChild(Device*)>
c001baec:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001baef:	56                   	push   esi
c001baf0:	6a 00                	push   0x0
c001baf2:	53                   	push   ebx
c001baf3:	55                   	push   ebp
c001baf4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001baf7:	83 c4 20             	add    esp,0x20
c001bafa:	d1 ef                	shr    edi,1
c001bafc:	43                   	inc    ebx
c001bafd:	83 fb 20             	cmp    ebx,0x20
c001bb00:	0f 85 72 ff ff ff    	jne    c001ba78 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001bb06:	83 c4 0c             	add    esp,0xc
c001bb09:	5b                   	pop    ebx
c001bb0a:	5e                   	pop    esi
c001bb0b:	5f                   	pop    edi
c001bb0c:	5d                   	pop    ebp
c001bb0d:	c3                   	ret    

c001bb0e <SATABus::open(int, int, void*)>:
c001bb0e:	83 ec 14             	sub    esp,0x14
c001bb11:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bb15:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001bb1b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001bb21:	52                   	push   edx
c001bb22:	50                   	push   eax
c001bb23:	e8 3c ff ff ff       	call   c001ba64 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001bb28:	31 c0                	xor    eax,eax
c001bb2a:	83 c4 1c             	add    esp,0x1c
c001bb2d:	c3                   	ret    

c001bb2e <ATA::close(int, int, void*)>:
c001bb2e:	83 ec 0c             	sub    esp,0xc
c001bb31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb35:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001bb3b:	85 c0                	test   eax,eax
c001bb3d:	74 0c                	je     c001bb4b <ATA::close(int, int, void*)+0x1d>
c001bb3f:	83 ec 0c             	sub    esp,0xc
c001bb42:	8b 10                	mov    edx,DWORD PTR [eax]
c001bb44:	50                   	push   eax
c001bb45:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001bb48:	83 c4 10             	add    esp,0x10
c001bb4b:	31 c0                	xor    eax,eax
c001bb4d:	83 c4 0c             	add    esp,0xc
c001bb50:	c3                   	ret    
c001bb51:	90                   	nop

c001bb52 <ATA::powerSaving(PowerSavingLevel)>:
c001bb52:	c3                   	ret    
c001bb53:	90                   	nop

c001bb54 <ATA::ATA()>:
c001bb54:	83 ec 0c             	sub    esp,0xc
c001bb57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb5b:	83 ec 04             	sub    esp,0x4
c001bb5e:	68 00 02 00 00       	push   0x200
c001bb63:	68 b1 1c 02 c0       	push   0xc0021cb1
c001bb68:	50                   	push   eax
c001bb69:	e8 8c 06 ff ff       	call   c000c1fa <PhysicalDisk::PhysicalDisk(char const*, int)>
c001bb6e:	83 c4 10             	add    esp,0x10
c001bb71:	ba 24 1c 02 c0       	mov    edx,0xc0021c24
c001bb76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb7a:	89 10                	mov    DWORD PTR [eax],edx
c001bb7c:	90                   	nop
c001bb7d:	83 c4 0c             	add    esp,0xc
c001bb80:	c3                   	ret    
c001bb81:	90                   	nop

c001bb82 <ATA::flush(bool)>:
c001bb82:	53                   	push   ebx
c001bb83:	83 ec 08             	sub    esp,0x8
c001bb86:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bb8a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bb8f:	83 f8 01             	cmp    eax,0x1
c001bb92:	19 c0                	sbb    eax,eax
c001bb94:	83 e0 fd             	and    eax,0xfffffffd
c001bb97:	05 ea 00 00 00       	add    eax,0xea
c001bb9c:	50                   	push   eax
c001bb9d:	6a 07                	push   0x7
c001bb9f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bba6:	50                   	push   eax
c001bba7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bbad:	e8 16 f1 ff ff       	call   c001acc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bbb2:	83 c4 0c             	add    esp,0xc
c001bbb5:	6a 00                	push   0x0
c001bbb7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bbbe:	50                   	push   eax
c001bbbf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bbc5:	e8 e6 fb ff ff       	call   c001b7b0 <IDE::polling(unsigned char, unsigned int)>
c001bbca:	83 c4 18             	add    esp,0x18
c001bbcd:	5b                   	pop    ebx
c001bbce:	c3                   	ret    
c001bbcf:	90                   	nop

c001bbd0 <ATA::readyForCommand()>:
c001bbd0:	56                   	push   esi
c001bbd1:	53                   	push   ebx
c001bbd2:	53                   	push   ebx
c001bbd3:	31 db                	xor    ebx,ebx
c001bbd5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bbd9:	51                   	push   ecx
c001bbda:	6a 0c                	push   0xc
c001bbdc:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bbe3:	50                   	push   eax
c001bbe4:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bbea:	e8 99 f1 ff ff       	call   c001ad88 <IDE::read(unsigned char, unsigned char)>
c001bbef:	83 c4 10             	add    esp,0x10
c001bbf2:	a8 88                	test   al,0x88
c001bbf4:	74 1f                	je     c001bc15 <ATA::readyForCommand()+0x45>
c001bbf6:	43                   	inc    ebx
c001bbf7:	83 fb 63             	cmp    ebx,0x63
c001bbfa:	7e dd                	jle    c001bbd9 <ATA::readyForCommand()+0x9>
c001bbfc:	83 ec 0c             	sub    esp,0xc
c001bbff:	6a 0a                	push   0xa
c001bc01:	e8 06 98 ff ff       	call   c001540c <milliTenthSleep(unsigned int)>
c001bc06:	83 c4 10             	add    esp,0x10
c001bc09:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001bc0f:	75 c8                	jne    c001bbd9 <ATA::readyForCommand()+0x9>
c001bc11:	31 c0                	xor    eax,eax
c001bc13:	eb 02                	jmp    c001bc17 <ATA::readyForCommand()+0x47>
c001bc15:	b0 01                	mov    al,0x1
c001bc17:	5a                   	pop    edx
c001bc18:	5b                   	pop    ebx
c001bc19:	5e                   	pop    esi
c001bc1a:	c3                   	ret    
c001bc1b:	90                   	nop

c001bc1c <ATA::access(unsigned long long, int, void*, bool)>:
c001bc1c:	55                   	push   ebp
c001bc1d:	57                   	push   edi
c001bc1e:	56                   	push   esi
c001bc1f:	53                   	push   ebx
c001bc20:	83 ec 2c             	sub    esp,0x2c
c001bc23:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001bc27:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001bc2b:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001bc2f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bc33:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001bc37:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001bc3b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001bc3f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001bc45:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bc49:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001bc4f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bc53:	c1 e0 06             	shl    eax,0x6
c001bc56:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001bc5e:	74 5d                	je     c001bcbd <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001bc60:	89 fa                	mov    edx,edi
c001bc62:	89 f0                	mov    eax,esi
c001bc64:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001bc68:	c1 ea 1c             	shr    edx,0x1c
c001bc6b:	89 d1                	mov    ecx,edx
c001bc6d:	09 c1                	or     ecx,eax
c001bc6f:	74 25                	je     c001bc96 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001bc71:	31 ed                	xor    ebp,ebp
c001bc73:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001bc7a:	89 fa                	mov    edx,edi
c001bc7c:	89 f0                	mov    eax,esi
c001bc7e:	0f ad d0             	shrd   eax,edx,cl
c001bc81:	d3 ea                	shr    edx,cl
c001bc83:	f6 c1 20             	test   cl,0x20
c001bc86:	74 02                	je     c001bc8a <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001bc88:	89 d0                	mov    eax,edx
c001bc8a:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001bc8e:	45                   	inc    ebp
c001bc8f:	83 fd 06             	cmp    ebp,0x6
c001bc92:	75 df                	jne    c001bc73 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001bc94:	eb 76                	jmp    c001bd0c <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001bc96:	89 f0                	mov    eax,esi
c001bc98:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001bc9d:	89 fa                	mov    edx,edi
c001bc9f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001bca6:	0f ac d0 10          	shrd   eax,edx,0x10
c001bcaa:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001bcaf:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001bcb3:	c1 ee 18             	shr    esi,0x18
c001bcb6:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001bcbb:	eb 56                	jmp    c001bd13 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001bcbd:	6a 00                	push   0x0
c001bcbf:	6a 3f                	push   0x3f
c001bcc1:	57                   	push   edi
c001bcc2:	56                   	push   esi
c001bcc3:	e8 a8 2a 00 00       	call   c001e770 <__umoddi3>
c001bcc8:	83 c4 10             	add    esp,0x10
c001bccb:	40                   	inc    eax
c001bccc:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001bcd0:	6a 00                	push   0x0
c001bcd2:	68 f0 03 00 00       	push   0x3f0
c001bcd7:	57                   	push   edi
c001bcd8:	56                   	push   esi
c001bcd9:	e8 92 29 00 00       	call   c001e670 <__udivdi3>
c001bcde:	83 c4 10             	add    esp,0x10
c001bce1:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001bce6:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001bced:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001bcf2:	6a 00                	push   0x0
c001bcf4:	6a 3f                	push   0x3f
c001bcf6:	57                   	push   edi
c001bcf7:	56                   	push   esi
c001bcf8:	e8 73 29 00 00       	call   c001e670 <__udivdi3>
c001bcfd:	83 c4 10             	add    esp,0x10
c001bd00:	83 e0 0f             	and    eax,0xf
c001bd03:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001bd08:	89 c6                	mov    esi,eax
c001bd0a:	eb 07                	jmp    c001bd13 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001bd0c:	31 f6                	xor    esi,esi
c001bd0e:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001bd13:	bf 01 00 00 00       	mov    edi,0x1
c001bd18:	50                   	push   eax
c001bd19:	6a 00                	push   0x0
c001bd1b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd22:	50                   	push   eax
c001bd23:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001bd27:	e8 a4 f1 ff ff       	call   c001aed0 <IDE::enableIRQs(unsigned char, bool)>
c001bd2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd2f:	e8 9c fe ff ff       	call   c001bbd0 <ATA::readyForCommand()>
c001bd34:	83 c4 10             	add    esp,0x10
c001bd37:	84 c0                	test   al,al
c001bd39:	0f 84 69 02 00 00    	je     c001bfa8 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001bd3f:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001bd45:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001bd4b:	c1 e0 04             	shl    eax,0x4
c001bd4e:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001bd55:	09 c6                	or     esi,eax
c001bd57:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001bd5c:	75 05                	jne    c001bd63 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001bd5e:	83 ce a0             	or     esi,0xffffffa0
c001bd61:	eb 03                	jmp    c001bd66 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001bd63:	83 ce e0             	or     esi,0xffffffe0
c001bd66:	89 f0                	mov    eax,esi
c001bd68:	0f b6 f0             	movzx  esi,al
c001bd6b:	56                   	push   esi
c001bd6c:	6a 06                	push   0x6
c001bd6e:	51                   	push   ecx
c001bd6f:	52                   	push   edx
c001bd70:	e8 53 ef ff ff       	call   c001acc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd75:	83 c4 10             	add    esp,0x10
c001bd78:	6a 00                	push   0x0
c001bd7a:	6a 01                	push   0x1
c001bd7c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd83:	50                   	push   eax
c001bd84:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd8a:	e8 39 ef ff ff       	call   c001acc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd8f:	83 c4 10             	add    esp,0x10
c001bd92:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001bd97:	83 f8 02             	cmp    eax,0x2
c001bd9a:	75 6e                	jne    c001be0a <ATA::access(unsigned long long, int, void*, bool)+0x1ee>
c001bd9c:	6a 00                	push   0x0
c001bd9e:	6a 08                	push   0x8
c001bda0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bda7:	50                   	push   eax
c001bda8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bdae:	e8 15 ef ff ff       	call   c001acc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bdb3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001bdb8:	50                   	push   eax
c001bdb9:	6a 09                	push   0x9
c001bdbb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bdc2:	50                   	push   eax
c001bdc3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bdc9:	e8 fa ee ff ff       	call   c001acc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bdce:	83 c4 20             	add    esp,0x20
c001bdd1:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001bdd6:	50                   	push   eax
c001bdd7:	6a 0a                	push   0xa
c001bdd9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bde0:	50                   	push   eax
c001bde1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bde7:	e8 dc ee ff ff       	call   c001acc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bdec:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001bdf1:	50                   	push   eax
c001bdf2:	6a 0b                	push   0xb
c001bdf4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bdfb:	50                   	push   eax
c001bdfc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be02:	e8 c1 ee ff ff       	call   c001acc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be07:	83 c4 20             	add    esp,0x20
c001be0a:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001be0f:	50                   	push   eax
c001be10:	6a 02                	push   0x2
c001be12:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001be19:	50                   	push   eax
c001be1a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be20:	e8 a3 ee ff ff       	call   c001acc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be25:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001be2a:	50                   	push   eax
c001be2b:	6a 03                	push   0x3
c001be2d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001be34:	50                   	push   eax
c001be35:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be3b:	e8 88 ee ff ff       	call   c001acc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be40:	83 c4 20             	add    esp,0x20
c001be43:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001be48:	50                   	push   eax
c001be49:	6a 04                	push   0x4
c001be4b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001be52:	50                   	push   eax
c001be53:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be59:	e8 6a ee ff ff       	call   c001acc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be5e:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001be63:	50                   	push   eax
c001be64:	6a 05                	push   0x5
c001be66:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001be6d:	50                   	push   eax
c001be6e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be74:	e8 4f ee ff ff       	call   c001acc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be79:	83 c4 20             	add    esp,0x20
c001be7c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001be81:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c001be86:	74 11                	je     c001be99 <ATA::access(unsigned long long, int, void*, bool)+0x27d>
c001be88:	b8 30 00 00 00       	mov    eax,0x30
c001be8d:	83 fa 02             	cmp    edx,0x2
c001be90:	75 16                	jne    c001bea8 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001be92:	b8 34 00 00 00       	mov    eax,0x34
c001be97:	eb 0f                	jmp    c001bea8 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001be99:	b8 20 00 00 00       	mov    eax,0x20
c001be9e:	83 fa 02             	cmp    edx,0x2
c001bea1:	75 05                	jne    c001bea8 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001bea3:	b8 24 00 00 00       	mov    eax,0x24
c001bea8:	50                   	push   eax
c001bea9:	6a 07                	push   0x7
c001beab:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001beb2:	50                   	push   eax
c001beb3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001beb9:	e8 0a ee ff ff       	call   c001acc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bebe:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001bec2:	83 c4 10             	add    esp,0x10
c001bec5:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001beca:	85 f6                	test   esi,esi
c001becc:	0f 84 b3 00 00 00    	je     c001bf85 <ATA::access(unsigned long long, int, void*, bool)+0x369>
c001bed2:	50                   	push   eax
c001bed3:	6a 01                	push   0x1
c001bed5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bedc:	50                   	push   eax
c001bedd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bee3:	e8 c8 f8 ff ff       	call   c001b7b0 <IDE::polling(unsigned char, unsigned int)>
c001bee8:	83 c4 10             	add    esp,0x10
c001beeb:	0f b6 f8             	movzx  edi,al
c001beee:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001bef4:	85 ff                	test   edi,edi
c001bef6:	74 1d                	je     c001bf15 <ATA::access(unsigned long long, int, void*, bool)+0x2f9>
c001bef8:	57                   	push   edi
c001bef9:	0f b6 d2             	movzx  edx,dl
c001befc:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001bf03:	50                   	push   eax
c001bf04:	52                   	push   edx
c001bf05:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bf0b:	e8 e6 f7 ff ff       	call   c001b6f6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001bf10:	e9 90 00 00 00       	jmp    c001bfa5 <ATA::access(unsigned long long, int, void*, bool)+0x389>
c001bf15:	85 ed                	test   ebp,ebp
c001bf17:	74 3b                	je     c001bf54 <ATA::access(unsigned long long, int, void*, bool)+0x338>
c001bf19:	31 c9                	xor    ecx,ecx
c001bf1b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001bf1f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001bf23:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001bf27:	50                   	push   eax
c001bf28:	50                   	push   eax
c001bf29:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bf30:	50                   	push   eax
c001bf31:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bf37:	e8 7a ed ff ff       	call   c001acb6 <IDE::getBase(unsigned char)>
c001bf3c:	89 c2                	mov    edx,eax
c001bf3e:	89 f8                	mov    eax,edi
c001bf40:	66 ef                	out    dx,ax
c001bf42:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001bf46:	83 c4 10             	add    esp,0x10
c001bf49:	41                   	inc    ecx
c001bf4a:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001bf50:	75 c9                	jne    c001bf1b <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c001bf52:	eb 23                	jmp    c001bf77 <ATA::access(unsigned long long, int, void*, bool)+0x35b>
c001bf54:	0f b6 d2             	movzx  edx,dl
c001bf57:	51                   	push   ecx
c001bf58:	51                   	push   ecx
c001bf59:	52                   	push   edx
c001bf5a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bf60:	e8 51 ed ff ff       	call   c001acb6 <IDE::getBase(unsigned char)>
c001bf65:	b9 00 01 00 00       	mov    ecx,0x100
c001bf6a:	89 c2                	mov    edx,eax
c001bf6c:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001bf70:	fc                   	cld    
c001bf71:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001bf74:	83 c4 10             	add    esp,0x10
c001bf77:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001bf7f:	4e                   	dec    esi
c001bf80:	e9 45 ff ff ff       	jmp    c001beca <ATA::access(unsigned long long, int, void*, bool)+0x2ae>
c001bf85:	31 ff                	xor    edi,edi
c001bf87:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001bf8c:	74 1a                	je     c001bfa8 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001bf8e:	50                   	push   eax
c001bf8f:	50                   	push   eax
c001bf90:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001bf95:	83 f8 02             	cmp    eax,0x2
c001bf98:	0f 94 c0             	sete   al
c001bf9b:	0f b6 c0             	movzx  eax,al
c001bf9e:	50                   	push   eax
c001bf9f:	53                   	push   ebx
c001bfa0:	e8 dd fb ff ff       	call   c001bb82 <ATA::flush(bool)>
c001bfa5:	83 c4 10             	add    esp,0x10
c001bfa8:	83 c4 2c             	add    esp,0x2c
c001bfab:	89 f8                	mov    eax,edi
c001bfad:	5b                   	pop    ebx
c001bfae:	5e                   	pop    esi
c001bfaf:	5f                   	pop    edi
c001bfb0:	5d                   	pop    ebp
c001bfb1:	c3                   	ret    

c001bfb2 <ATA::detectCHS()>:
c001bfb2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bfb6:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001bfbc:	c1 e0 06             	shl    eax,0x6
c001bfbf:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001bfc5:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001bfcf:	c7 44 24 04 08 1c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021c08
c001bfd7:	e9 4b 49 ff ff       	jmp    c0010927 <KePanic(char const*)>

c001bfdc <ATA::open(int, int, void*)>:
c001bfdc:	53                   	push   ebx
c001bfdd:	83 ec 08             	sub    esp,0x8
c001bfe0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bfe4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bfe8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bfec:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001bff2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001bff8:	c1 e0 06             	shl    eax,0x6
c001bffb:	01 d0                	add    eax,edx
c001bffd:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001c004:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001c00a:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001c011:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001c01b:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001c021:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001c028:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001c02f:	75 0c                	jne    c001c03d <ATA::open(int, int, void*)+0x61>
c001c031:	83 ec 0c             	sub    esp,0xc
c001c034:	53                   	push   ebx
c001c035:	e8 78 ff ff ff       	call   c001bfb2 <ATA::detectCHS()>
c001c03a:	83 c4 10             	add    esp,0x10
c001c03d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c043:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c049:	c1 e0 06             	shl    eax,0x6
c001c04c:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001c053:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001c05d:	d1 e8                	shr    eax,1
c001c05f:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001c065:	6a 04                	push   0x4
c001c067:	6a 0c                	push   0xc
c001c069:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c070:	50                   	push   eax
c001c071:	52                   	push   edx
c001c072:	e8 51 ec ff ff       	call   c001acc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c077:	90                   	nop
c001c078:	90                   	nop
c001c079:	6a 00                	push   0x0
c001c07b:	6a 0c                	push   0xc
c001c07d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c084:	50                   	push   eax
c001c085:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c08b:	e8 38 ec ff ff       	call   c001acc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c090:	83 c4 14             	add    esp,0x14
c001c093:	53                   	push   ebx
c001c094:	e8 c9 01 ff ff       	call   c000c262 <PhysicalDisk::startCache()>
c001c099:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c09c:	e8 05 14 ff ff       	call   c000d4a6 <createPartitionsForDisk(PhysicalDisk*)>
c001c0a1:	31 c0                	xor    eax,eax
c001c0a3:	83 c4 18             	add    esp,0x18
c001c0a6:	5b                   	pop    ebx
c001c0a7:	c3                   	ret    

c001c0a8 <combineCharAndColour(char, unsigned char)>:
c001c0a8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c0ad:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001c0b3:	c1 e0 08             	shl    eax,0x8
c001c0b6:	09 d0                	or     eax,edx
c001c0b8:	c3                   	ret    

c001c0b9 <combineColours(unsigned char, unsigned char)>:
c001c0b9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c0be:	c1 e0 04             	shl    eax,0x4
c001c0c1:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001c0c5:	c3                   	ret    

c001c0c6 <ATA::read(unsigned long long, int, void*)>:
c001c0c6:	55                   	push   ebp
c001c0c7:	57                   	push   edi
c001c0c8:	56                   	push   esi
c001c0c9:	be 04 00 00 00       	mov    esi,0x4
c001c0ce:	53                   	push   ebx
c001c0cf:	83 ec 0c             	sub    esp,0xc
c001c0d2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c0d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c0da:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c0dd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c0e1:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c0e5:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c0eb:	0f 87 a1 01 00 00    	ja     c001c292 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c0f1:	be 06 00 00 00       	mov    esi,0x6
c001c0f6:	85 c9                	test   ecx,ecx
c001c0f8:	0f 84 94 01 00 00    	je     c001c292 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c0fe:	55                   	push   ebp
c001c0ff:	55                   	push   ebp
c001c100:	6a 00                	push   0x0
c001c102:	51                   	push   ecx
c001c103:	53                   	push   ebx
c001c104:	52                   	push   edx
c001c105:	50                   	push   eax
c001c106:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c10a:	e8 0d fb ff ff       	call   c001bc1c <ATA::access(unsigned long long, int, void*, bool)>
c001c10f:	83 c4 20             	add    esp,0x20
c001c112:	89 c6                	mov    esi,eax
c001c114:	85 c0                	test   eax,eax
c001c116:	0f 85 71 01 00 00    	jne    c001c28d <ATA::read(unsigned long long, int, void*)+0x1c7>
c001c11c:	03 1d 54 8b 02 c0    	add    ebx,DWORD PTR ds:0xc0028b54
c001c122:	89 da                	mov    edx,ebx
c001c124:	50                   	push   eax
c001c125:	bd 10 27 00 00       	mov    ebp,0x2710
c001c12a:	50                   	push   eax
c001c12b:	89 1d 54 8b 02 c0    	mov    DWORD PTR ds:0xc0028b54,ebx
c001c131:	6a 0f                	push   0xf
c001c133:	6a 00                	push   0x0
c001c135:	e8 7f ff ff ff       	call   c001c0b9 <combineColours(unsigned char, unsigned char)>
c001c13a:	59                   	pop    ecx
c001c13b:	b9 0a 00 00 00       	mov    ecx,0xa
c001c140:	5b                   	pop    ebx
c001c141:	0f b6 d8             	movzx  ebx,al
c001c144:	89 d0                	mov    eax,edx
c001c146:	53                   	push   ebx
c001c147:	99                   	cdq    
c001c148:	f7 fd                	idiv   ebp
c001c14a:	99                   	cdq    
c001c14b:	f7 f9                	idiv   ecx
c001c14d:	83 c2 30             	add    edx,0x30
c001c150:	0f b6 d2             	movzx  edx,dl
c001c153:	52                   	push   edx
c001c154:	e8 4f ff ff ff       	call   c001c0a8 <combineCharAndColour(char, unsigned char)>
c001c159:	5f                   	pop    edi
c001c15a:	bf e8 03 00 00       	mov    edi,0x3e8
c001c15f:	5a                   	pop    edx
c001c160:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c166:	53                   	push   ebx
c001c167:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c16c:	99                   	cdq    
c001c16d:	f7 ff                	idiv   edi
c001c16f:	99                   	cdq    
c001c170:	f7 f9                	idiv   ecx
c001c172:	8d 42 30             	lea    eax,[edx+0x30]
c001c175:	0f b6 c0             	movzx  eax,al
c001c178:	50                   	push   eax
c001c179:	e8 2a ff ff ff       	call   c001c0a8 <combineCharAndColour(char, unsigned char)>
c001c17e:	5f                   	pop    edi
c001c17f:	bf 64 00 00 00       	mov    edi,0x64
c001c184:	5a                   	pop    edx
c001c185:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c18b:	53                   	push   ebx
c001c18c:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c191:	99                   	cdq    
c001c192:	f7 ff                	idiv   edi
c001c194:	99                   	cdq    
c001c195:	f7 f9                	idiv   ecx
c001c197:	8d 42 30             	lea    eax,[edx+0x30]
c001c19a:	0f b6 c0             	movzx  eax,al
c001c19d:	50                   	push   eax
c001c19e:	e8 05 ff ff ff       	call   c001c0a8 <combineCharAndColour(char, unsigned char)>
c001c1a3:	5a                   	pop    edx
c001c1a4:	5a                   	pop    edx
c001c1a5:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c1ab:	53                   	push   ebx
c001c1ac:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c1b1:	99                   	cdq    
c001c1b2:	f7 f9                	idiv   ecx
c001c1b4:	99                   	cdq    
c001c1b5:	f7 f9                	idiv   ecx
c001c1b7:	8d 42 30             	lea    eax,[edx+0x30]
c001c1ba:	0f b6 c0             	movzx  eax,al
c001c1bd:	50                   	push   eax
c001c1be:	e8 e5 fe ff ff       	call   c001c0a8 <combineCharAndColour(char, unsigned char)>
c001c1c3:	5a                   	pop    edx
c001c1c4:	5a                   	pop    edx
c001c1c5:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c1cb:	53                   	push   ebx
c001c1cc:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c1d1:	99                   	cdq    
c001c1d2:	f7 f9                	idiv   ecx
c001c1d4:	83 c2 30             	add    edx,0x30
c001c1d7:	0f b6 d2             	movzx  edx,dl
c001c1da:	52                   	push   edx
c001c1db:	e8 c8 fe ff ff       	call   c001c0a8 <combineCharAndColour(char, unsigned char)>
c001c1e0:	5a                   	pop    edx
c001c1e1:	5a                   	pop    edx
c001c1e2:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c1e8:	53                   	push   ebx
c001c1e9:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c1ee:	99                   	cdq    
c001c1ef:	f7 fd                	idiv   ebp
c001c1f1:	99                   	cdq    
c001c1f2:	f7 f9                	idiv   ecx
c001c1f4:	8d 42 30             	lea    eax,[edx+0x30]
c001c1f7:	0f b6 c0             	movzx  eax,al
c001c1fa:	50                   	push   eax
c001c1fb:	e8 a8 fe ff ff       	call   c001c0a8 <combineCharAndColour(char, unsigned char)>
c001c200:	5d                   	pop    ebp
c001c201:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c206:	5a                   	pop    edx
c001c207:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c20d:	53                   	push   ebx
c001c20e:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c213:	99                   	cdq    
c001c214:	f7 fd                	idiv   ebp
c001c216:	99                   	cdq    
c001c217:	f7 f9                	idiv   ecx
c001c219:	8d 42 30             	lea    eax,[edx+0x30]
c001c21c:	0f b6 c0             	movzx  eax,al
c001c21f:	50                   	push   eax
c001c220:	e8 83 fe ff ff       	call   c001c0a8 <combineCharAndColour(char, unsigned char)>
c001c225:	5d                   	pop    ebp
c001c226:	5a                   	pop    edx
c001c227:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c22d:	53                   	push   ebx
c001c22e:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c233:	99                   	cdq    
c001c234:	f7 ff                	idiv   edi
c001c236:	99                   	cdq    
c001c237:	f7 f9                	idiv   ecx
c001c239:	8d 42 30             	lea    eax,[edx+0x30]
c001c23c:	0f b6 c0             	movzx  eax,al
c001c23f:	50                   	push   eax
c001c240:	e8 63 fe ff ff       	call   c001c0a8 <combineCharAndColour(char, unsigned char)>
c001c245:	5f                   	pop    edi
c001c246:	5d                   	pop    ebp
c001c247:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c24d:	53                   	push   ebx
c001c24e:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c253:	99                   	cdq    
c001c254:	f7 f9                	idiv   ecx
c001c256:	99                   	cdq    
c001c257:	f7 f9                	idiv   ecx
c001c259:	8d 42 30             	lea    eax,[edx+0x30]
c001c25c:	0f b6 c0             	movzx  eax,al
c001c25f:	50                   	push   eax
c001c260:	e8 43 fe ff ff       	call   c001c0a8 <combineCharAndColour(char, unsigned char)>
c001c265:	5a                   	pop    edx
c001c266:	5f                   	pop    edi
c001c267:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c26d:	53                   	push   ebx
c001c26e:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c273:	99                   	cdq    
c001c274:	f7 f9                	idiv   ecx
c001c276:	83 c2 30             	add    edx,0x30
c001c279:	0f b6 d2             	movzx  edx,dl
c001c27c:	52                   	push   edx
c001c27d:	e8 26 fe ff ff       	call   c001c0a8 <combineCharAndColour(char, unsigned char)>
c001c282:	83 c4 10             	add    esp,0x10
c001c285:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c28b:	eb 05                	jmp    c001c292 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c28d:	be 01 00 00 00       	mov    esi,0x1
c001c292:	83 c4 0c             	add    esp,0xc
c001c295:	89 f0                	mov    eax,esi
c001c297:	5b                   	pop    ebx
c001c298:	5e                   	pop    esi
c001c299:	5f                   	pop    edi
c001c29a:	5d                   	pop    ebp
c001c29b:	c3                   	ret    

c001c29c <ATA::write(unsigned long long, int, void*)>:
c001c29c:	55                   	push   ebp
c001c29d:	57                   	push   edi
c001c29e:	56                   	push   esi
c001c29f:	be 04 00 00 00       	mov    esi,0x4
c001c2a4:	53                   	push   ebx
c001c2a5:	83 ec 0c             	sub    esp,0xc
c001c2a8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c2ac:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c2b0:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c2b3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c2b7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c2bb:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c2c1:	0f 87 9c 01 00 00    	ja     c001c463 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c2c7:	be 06 00 00 00       	mov    esi,0x6
c001c2cc:	85 c9                	test   ecx,ecx
c001c2ce:	0f 84 8f 01 00 00    	je     c001c463 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c2d4:	55                   	push   ebp
c001c2d5:	55                   	push   ebp
c001c2d6:	6a 01                	push   0x1
c001c2d8:	51                   	push   ecx
c001c2d9:	53                   	push   ebx
c001c2da:	52                   	push   edx
c001c2db:	50                   	push   eax
c001c2dc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c2e0:	e8 37 f9 ff ff       	call   c001bc1c <ATA::access(unsigned long long, int, void*, bool)>
c001c2e5:	83 c4 20             	add    esp,0x20
c001c2e8:	89 c6                	mov    esi,eax
c001c2ea:	85 c0                	test   eax,eax
c001c2ec:	0f 85 6c 01 00 00    	jne    c001c45e <ATA::write(unsigned long long, int, void*)+0x1c2>
c001c2f2:	01 1d 50 8b 02 c0    	add    DWORD PTR ds:0xc0028b50,ebx
c001c2f8:	bd 10 27 00 00       	mov    ebp,0x2710
c001c2fd:	50                   	push   eax
c001c2fe:	50                   	push   eax
c001c2ff:	6a 0f                	push   0xf
c001c301:	6a 00                	push   0x0
c001c303:	e8 b1 fd ff ff       	call   c001c0b9 <combineColours(unsigned char, unsigned char)>
c001c308:	5a                   	pop    edx
c001c309:	0f b6 d8             	movzx  ebx,al
c001c30c:	59                   	pop    ecx
c001c30d:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c312:	53                   	push   ebx
c001c313:	b9 0a 00 00 00       	mov    ecx,0xa
c001c318:	99                   	cdq    
c001c319:	f7 fd                	idiv   ebp
c001c31b:	99                   	cdq    
c001c31c:	f7 f9                	idiv   ecx
c001c31e:	8d 42 30             	lea    eax,[edx+0x30]
c001c321:	0f b6 c0             	movzx  eax,al
c001c324:	50                   	push   eax
c001c325:	e8 7e fd ff ff       	call   c001c0a8 <combineCharAndColour(char, unsigned char)>
c001c32a:	5f                   	pop    edi
c001c32b:	bf e8 03 00 00       	mov    edi,0x3e8
c001c330:	5a                   	pop    edx
c001c331:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c337:	53                   	push   ebx
c001c338:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c33d:	99                   	cdq    
c001c33e:	f7 ff                	idiv   edi
c001c340:	99                   	cdq    
c001c341:	f7 f9                	idiv   ecx
c001c343:	8d 42 30             	lea    eax,[edx+0x30]
c001c346:	0f b6 c0             	movzx  eax,al
c001c349:	50                   	push   eax
c001c34a:	e8 59 fd ff ff       	call   c001c0a8 <combineCharAndColour(char, unsigned char)>
c001c34f:	5f                   	pop    edi
c001c350:	bf 64 00 00 00       	mov    edi,0x64
c001c355:	5a                   	pop    edx
c001c356:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c35c:	53                   	push   ebx
c001c35d:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c362:	99                   	cdq    
c001c363:	f7 ff                	idiv   edi
c001c365:	99                   	cdq    
c001c366:	f7 f9                	idiv   ecx
c001c368:	8d 42 30             	lea    eax,[edx+0x30]
c001c36b:	0f b6 c0             	movzx  eax,al
c001c36e:	50                   	push   eax
c001c36f:	e8 34 fd ff ff       	call   c001c0a8 <combineCharAndColour(char, unsigned char)>
c001c374:	5a                   	pop    edx
c001c375:	5a                   	pop    edx
c001c376:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c37c:	53                   	push   ebx
c001c37d:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c382:	99                   	cdq    
c001c383:	f7 f9                	idiv   ecx
c001c385:	99                   	cdq    
c001c386:	f7 f9                	idiv   ecx
c001c388:	8d 42 30             	lea    eax,[edx+0x30]
c001c38b:	0f b6 c0             	movzx  eax,al
c001c38e:	50                   	push   eax
c001c38f:	e8 14 fd ff ff       	call   c001c0a8 <combineCharAndColour(char, unsigned char)>
c001c394:	5a                   	pop    edx
c001c395:	5a                   	pop    edx
c001c396:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c39c:	53                   	push   ebx
c001c39d:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c3a2:	99                   	cdq    
c001c3a3:	f7 f9                	idiv   ecx
c001c3a5:	8d 42 30             	lea    eax,[edx+0x30]
c001c3a8:	0f b6 c0             	movzx  eax,al
c001c3ab:	50                   	push   eax
c001c3ac:	e8 f7 fc ff ff       	call   c001c0a8 <combineCharAndColour(char, unsigned char)>
c001c3b1:	5a                   	pop    edx
c001c3b2:	5a                   	pop    edx
c001c3b3:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c3b9:	53                   	push   ebx
c001c3ba:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c3bf:	99                   	cdq    
c001c3c0:	f7 fd                	idiv   ebp
c001c3c2:	99                   	cdq    
c001c3c3:	f7 f9                	idiv   ecx
c001c3c5:	8d 42 30             	lea    eax,[edx+0x30]
c001c3c8:	0f b6 c0             	movzx  eax,al
c001c3cb:	50                   	push   eax
c001c3cc:	e8 d7 fc ff ff       	call   c001c0a8 <combineCharAndColour(char, unsigned char)>
c001c3d1:	5d                   	pop    ebp
c001c3d2:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c3d7:	5a                   	pop    edx
c001c3d8:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c3de:	53                   	push   ebx
c001c3df:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c3e4:	99                   	cdq    
c001c3e5:	f7 fd                	idiv   ebp
c001c3e7:	99                   	cdq    
c001c3e8:	f7 f9                	idiv   ecx
c001c3ea:	8d 42 30             	lea    eax,[edx+0x30]
c001c3ed:	0f b6 c0             	movzx  eax,al
c001c3f0:	50                   	push   eax
c001c3f1:	e8 b2 fc ff ff       	call   c001c0a8 <combineCharAndColour(char, unsigned char)>
c001c3f6:	5d                   	pop    ebp
c001c3f7:	5a                   	pop    edx
c001c3f8:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c3fe:	53                   	push   ebx
c001c3ff:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c404:	99                   	cdq    
c001c405:	f7 ff                	idiv   edi
c001c407:	99                   	cdq    
c001c408:	f7 f9                	idiv   ecx
c001c40a:	8d 42 30             	lea    eax,[edx+0x30]
c001c40d:	0f b6 c0             	movzx  eax,al
c001c410:	50                   	push   eax
c001c411:	e8 92 fc ff ff       	call   c001c0a8 <combineCharAndColour(char, unsigned char)>
c001c416:	5f                   	pop    edi
c001c417:	5d                   	pop    ebp
c001c418:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c41e:	53                   	push   ebx
c001c41f:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c424:	99                   	cdq    
c001c425:	f7 f9                	idiv   ecx
c001c427:	99                   	cdq    
c001c428:	f7 f9                	idiv   ecx
c001c42a:	8d 42 30             	lea    eax,[edx+0x30]
c001c42d:	0f b6 c0             	movzx  eax,al
c001c430:	50                   	push   eax
c001c431:	e8 72 fc ff ff       	call   c001c0a8 <combineCharAndColour(char, unsigned char)>
c001c436:	5a                   	pop    edx
c001c437:	5f                   	pop    edi
c001c438:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c43e:	53                   	push   ebx
c001c43f:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c444:	99                   	cdq    
c001c445:	f7 f9                	idiv   ecx
c001c447:	83 c2 30             	add    edx,0x30
c001c44a:	0f b6 d2             	movzx  edx,dl
c001c44d:	52                   	push   edx
c001c44e:	e8 55 fc ff ff       	call   c001c0a8 <combineCharAndColour(char, unsigned char)>
c001c453:	83 c4 10             	add    esp,0x10
c001c456:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c45c:	eb 05                	jmp    c001c463 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c45e:	be 01 00 00 00       	mov    esi,0x1
c001c463:	83 c4 0c             	add    esp,0xc
c001c466:	89 f0                	mov    eax,esi
c001c468:	5b                   	pop    ebx
c001c469:	5e                   	pop    esi
c001c46a:	5f                   	pop    edi
c001c46b:	5d                   	pop    ebp
c001c46c:	c3                   	ret    
c001c46d:	90                   	nop

c001c46e <ATAPI::write(unsigned long long, int, void*)>:
c001c46e:	b8 03 00 00 00       	mov    eax,0x3
c001c473:	c3                   	ret    

c001c474 <ATAPI::close(int, int, void*)>:
c001c474:	83 ec 0c             	sub    esp,0xc
c001c477:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c47b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c481:	85 c0                	test   eax,eax
c001c483:	74 0c                	je     c001c491 <ATAPI::close(int, int, void*)+0x1d>
c001c485:	83 ec 0c             	sub    esp,0xc
c001c488:	8b 10                	mov    edx,DWORD PTR [eax]
c001c48a:	50                   	push   eax
c001c48b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c48e:	83 c4 10             	add    esp,0x10
c001c491:	31 c0                	xor    eax,eax
c001c493:	83 c4 0c             	add    esp,0xc
c001c496:	c3                   	ret    
c001c497:	90                   	nop

c001c498 <ATAPI::ATAPI()>:
c001c498:	83 ec 0c             	sub    esp,0xc
c001c49b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c49f:	83 ec 04             	sub    esp,0x4
c001c4a2:	68 00 08 00 00       	push   0x800
c001c4a7:	68 51 1d 02 c0       	push   0xc0021d51
c001c4ac:	50                   	push   eax
c001c4ad:	e8 48 fd fe ff       	call   c000c1fa <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c4b2:	83 c4 10             	add    esp,0x10
c001c4b5:	ba 6c 1c 02 c0       	mov    edx,0xc0021c6c
c001c4ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4be:	89 10                	mov    DWORD PTR [eax],edx
c001c4c0:	90                   	nop
c001c4c1:	83 c4 0c             	add    esp,0xc
c001c4c4:	c3                   	ret    
c001c4c5:	90                   	nop

c001c4c6 <ATAPI::readyForCommand()>:
c001c4c6:	56                   	push   esi
c001c4c7:	53                   	push   ebx
c001c4c8:	53                   	push   ebx
c001c4c9:	31 db                	xor    ebx,ebx
c001c4cb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c4cf:	51                   	push   ecx
c001c4d0:	6a 0c                	push   0xc
c001c4d2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c4d9:	50                   	push   eax
c001c4da:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c4e0:	e8 a3 e8 ff ff       	call   c001ad88 <IDE::read(unsigned char, unsigned char)>
c001c4e5:	83 c4 10             	add    esp,0x10
c001c4e8:	a8 88                	test   al,0x88
c001c4ea:	74 25                	je     c001c511 <ATAPI::readyForCommand()+0x4b>
c001c4ec:	43                   	inc    ebx
c001c4ed:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001c4f3:	7e da                	jle    c001c4cf <ATAPI::readyForCommand()+0x9>
c001c4f5:	83 ec 0c             	sub    esp,0xc
c001c4f8:	68 5e 01 00 00       	push   0x15e
c001c4fd:	e8 0a 8f ff ff       	call   c001540c <milliTenthSleep(unsigned int)>
c001c502:	83 c4 10             	add    esp,0x10
c001c505:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001c50b:	75 c2                	jne    c001c4cf <ATAPI::readyForCommand()+0x9>
c001c50d:	31 c0                	xor    eax,eax
c001c50f:	eb 02                	jmp    c001c513 <ATAPI::readyForCommand()+0x4d>
c001c511:	b0 01                	mov    al,0x1
c001c513:	5a                   	pop    edx
c001c514:	5b                   	pop    ebx
c001c515:	5e                   	pop    esi
c001c516:	c3                   	ret    
c001c517:	90                   	nop

c001c518 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001c518:	55                   	push   ebp
c001c519:	57                   	push   edi
c001c51a:	56                   	push   esi
c001c51b:	53                   	push   ebx
c001c51c:	83 ec 20             	sub    esp,0x20
c001c51f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c523:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001c527:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001c52b:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c52f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001c533:	6a 01                	push   0x1
c001c535:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c53c:	50                   	push   eax
c001c53d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c543:	e8 88 e9 ff ff       	call   c001aed0 <IDE::enableIRQs(unsigned char, bool)>
c001c548:	5e                   	pop    esi
c001c549:	58                   	pop    eax
c001c54a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c551:	50                   	push   eax
c001c552:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c558:	e8 45 e7 ff ff       	call   c001aca2 <IDE::prepareInterrupt(unsigned char)>
c001c55d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c560:	e8 61 ff ff ff       	call   c001c4c6 <ATAPI::readyForCommand()>
c001c565:	83 c4 10             	add    esp,0x10
c001c568:	84 c0                	test   al,al
c001c56a:	75 0a                	jne    c001c576 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001c56c:	bb 01 00 00 00       	mov    ebx,0x1
c001c571:	e9 60 02 00 00       	jmp    c001c7d6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001c576:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001c57c:	c1 e0 04             	shl    eax,0x4
c001c57f:	0f b6 c0             	movzx  eax,al
c001c582:	50                   	push   eax
c001c583:	6a 06                	push   0x6
c001c585:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c58c:	50                   	push   eax
c001c58d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c593:	e8 30 e7 ff ff       	call   c001acc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c598:	6a 00                	push   0x0
c001c59a:	6a 01                	push   0x1
c001c59c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c5a3:	50                   	push   eax
c001c5a4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c5aa:	e8 19 e7 ff ff       	call   c001acc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c5af:	83 c4 20             	add    esp,0x20
c001c5b2:	0f b6 c3             	movzx  eax,bl
c001c5b5:	0f b6 df             	movzx  ebx,bh
c001c5b8:	50                   	push   eax
c001c5b9:	6a 04                	push   0x4
c001c5bb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c5c2:	50                   	push   eax
c001c5c3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c5c9:	e8 fa e6 ff ff       	call   c001acc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c5ce:	53                   	push   ebx
c001c5cf:	6a 05                	push   0x5
c001c5d1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c5d8:	50                   	push   eax
c001c5d9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c5df:	e8 e4 e6 ff ff       	call   c001acc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c5e4:	83 c4 20             	add    esp,0x20
c001c5e7:	68 a0 00 00 00       	push   0xa0
c001c5ec:	6a 07                	push   0x7
c001c5ee:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c5f5:	50                   	push   eax
c001c5f6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c5fc:	e8 c7 e6 ff ff       	call   c001acc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c601:	83 c4 0c             	add    esp,0xc
c001c604:	6a 01                	push   0x1
c001c606:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c60d:	50                   	push   eax
c001c60e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c614:	e8 97 f1 ff ff       	call   c001b7b0 <IDE::polling(unsigned char, unsigned int)>
c001c619:	83 c4 10             	add    esp,0x10
c001c61c:	0f b6 d8             	movzx  ebx,al
c001c61f:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001c625:	85 db                	test   ebx,ebx
c001c627:	74 20                	je     c001c649 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001c629:	53                   	push   ebx
c001c62a:	0f b6 c0             	movzx  eax,al
c001c62d:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001c634:	52                   	push   edx
c001c635:	50                   	push   eax
c001c636:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c63c:	e8 b5 f0 ff ff       	call   c001b6f6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001c641:	83 c4 10             	add    esp,0x10
c001c644:	e9 8d 01 00 00       	jmp    c001c7d6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001c649:	0f b6 c0             	movzx  eax,al
c001c64c:	53                   	push   ebx
c001c64d:	53                   	push   ebx
c001c64e:	50                   	push   eax
c001c64f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c655:	e8 5c e6 ff ff       	call   c001acb6 <IDE::getBase(unsigned char)>
c001c65a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c65e:	b9 06 00 00 00       	mov    ecx,0x6
c001c663:	89 c2                	mov    edx,eax
c001c665:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001c668:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001c66c:	83 c4 10             	add    esp,0x10
c001c66f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001c674:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c678:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c67e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c685:	85 db                	test   ebx,ebx
c001c687:	0f 84 ec 00 00 00    	je     c001c779 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001c68d:	51                   	push   ecx
c001c68e:	51                   	push   ecx
c001c68f:	52                   	push   edx
c001c690:	50                   	push   eax
c001c691:	e8 a0 e7 ff ff       	call   c001ae36 <IDE::waitInterrupt(unsigned char)>
c001c696:	83 c4 10             	add    esp,0x10
c001c699:	84 c0                	test   al,al
c001c69b:	0f 84 cb fe ff ff    	je     c001c56c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001c6a1:	56                   	push   esi
c001c6a2:	56                   	push   esi
c001c6a3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c6aa:	50                   	push   eax
c001c6ab:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c6b1:	e8 ec e5 ff ff       	call   c001aca2 <IDE::prepareInterrupt(unsigned char)>
c001c6b6:	83 c4 0c             	add    esp,0xc
c001c6b9:	6a 04                	push   0x4
c001c6bb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c6c2:	50                   	push   eax
c001c6c3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c6c9:	e8 ba e6 ff ff       	call   c001ad88 <IDE::read(unsigned char, unsigned char)>
c001c6ce:	83 c4 0c             	add    esp,0xc
c001c6d1:	89 c6                	mov    esi,eax
c001c6d3:	6a 05                	push   0x5
c001c6d5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c6dc:	50                   	push   eax
c001c6dd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c6e3:	e8 a0 e6 ff ff       	call   c001ad88 <IDE::read(unsigned char, unsigned char)>
c001c6e8:	89 f1                	mov    ecx,esi
c001c6ea:	0f b6 c0             	movzx  eax,al
c001c6ed:	0f b6 f1             	movzx  esi,cl
c001c6f0:	c1 e0 08             	shl    eax,0x8
c001c6f3:	09 c6                	or     esi,eax
c001c6f5:	d1 fe                	sar    esi,1
c001c6f7:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001c6fb:	83 c4 10             	add    esp,0x10
c001c6fe:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001c703:	74 41                	je     c001c746 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001c705:	31 c9                	xor    ecx,ecx
c001c707:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c70d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c714:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001c718:	75 0a                	jne    c001c724 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001c71a:	01 c9                	add    ecx,ecx
c001c71c:	01 cd                	add    ebp,ecx
c001c71e:	4b                   	dec    ebx
c001c71f:	e9 54 ff ff ff       	jmp    c001c678 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001c724:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001c729:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c72d:	51                   	push   ecx
c001c72e:	51                   	push   ecx
c001c72f:	52                   	push   edx
c001c730:	50                   	push   eax
c001c731:	e8 80 e5 ff ff       	call   c001acb6 <IDE::getBase(unsigned char)>
c001c736:	89 c2                	mov    edx,eax
c001c738:	89 f0                	mov    eax,esi
c001c73a:	66 ef                	out    dx,ax
c001c73c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c740:	83 c4 10             	add    esp,0x10
c001c743:	41                   	inc    ecx
c001c744:	eb c1                	jmp    c001c707 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001c746:	31 f6                	xor    esi,esi
c001c748:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c74e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c755:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001c759:	75 06                	jne    c001c761 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001c75b:	01 f6                	add    esi,esi
c001c75d:	01 f5                	add    ebp,esi
c001c75f:	eb bd                	jmp    c001c71e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001c761:	51                   	push   ecx
c001c762:	51                   	push   ecx
c001c763:	52                   	push   edx
c001c764:	50                   	push   eax
c001c765:	e8 4c e5 ff ff       	call   c001acb6 <IDE::getBase(unsigned char)>
c001c76a:	89 c2                	mov    edx,eax
c001c76c:	66 ed                	in     ax,dx
c001c76e:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001c773:	83 c4 10             	add    esp,0x10
c001c776:	46                   	inc    esi
c001c777:	eb cf                	jmp    c001c748 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001c779:	51                   	push   ecx
c001c77a:	51                   	push   ecx
c001c77b:	52                   	push   edx
c001c77c:	50                   	push   eax
c001c77d:	e8 b4 e6 ff ff       	call   c001ae36 <IDE::waitInterrupt(unsigned char)>
c001c782:	83 c4 10             	add    esp,0x10
c001c785:	84 c0                	test   al,al
c001c787:	0f 84 df fd ff ff    	je     c001c56c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001c78d:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c792:	52                   	push   edx
c001c793:	52                   	push   edx
c001c794:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c79b:	50                   	push   eax
c001c79c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c7a2:	e8 fb e4 ff ff       	call   c001aca2 <IDE::prepareInterrupt(unsigned char)>
c001c7a7:	83 c4 10             	add    esp,0x10
c001c7aa:	50                   	push   eax
c001c7ab:	50                   	push   eax
c001c7ac:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c7b3:	50                   	push   eax
c001c7b4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c7ba:	e8 f7 e4 ff ff       	call   c001acb6 <IDE::getBase(unsigned char)>
c001c7bf:	8d 50 07             	lea    edx,[eax+0x7]
c001c7c2:	ec                   	in     al,dx
c001c7c3:	83 c4 10             	add    esp,0x10
c001c7c6:	a8 88                	test   al,0x88
c001c7c8:	74 0a                	je     c001c7d4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001c7ca:	4b                   	dec    ebx
c001c7cb:	75 dd                	jne    c001c7aa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001c7cd:	bb 02 00 00 00       	mov    ebx,0x2
c001c7d2:	eb 02                	jmp    c001c7d6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001c7d4:	31 db                	xor    ebx,ebx
c001c7d6:	83 c4 1c             	add    esp,0x1c
c001c7d9:	89 d8                	mov    eax,ebx
c001c7db:	5b                   	pop    ebx
c001c7dc:	5e                   	pop    esi
c001c7dd:	5f                   	pop    edi
c001c7de:	5d                   	pop    ebp
c001c7df:	c3                   	ret    

c001c7e0 <ATAPI::diskRemoved()>:
c001c7e0:	53                   	push   ebx
c001c7e1:	83 ec 14             	sub    esp,0x14
c001c7e4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001c7e8:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001c7ef:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001c7f5:	e8 9c 09 ff ff       	call   c000d196 <LogicalDisk::unmount()>
c001c7fa:	58                   	pop    eax
c001c7fb:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001c801:	e8 72 13 ff ff       	call   c000db78 <VCache::writeWriteBuffer()>
c001c806:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001c80c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c810:	83 c4 18             	add    esp,0x18
c001c813:	5b                   	pop    ebx
c001c814:	e9 4f 13 ff ff       	jmp    c000db68 <VCache::invalidateReadBuffer()>
c001c819:	90                   	nop

c001c81a <ATAPI::eject()>:
c001c81a:	57                   	push   edi
c001c81b:	b9 03 00 00 00       	mov    ecx,0x3
c001c820:	53                   	push   ebx
c001c821:	83 ec 14             	sub    esp,0x14
c001c824:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c828:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001c82c:	fc                   	cld    
c001c82d:	31 c0                	xor    eax,eax
c001c82f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c831:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001c836:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001c83b:	50                   	push   eax
c001c83c:	50                   	push   eax
c001c83d:	6a 00                	push   0x0
c001c83f:	6a 00                	push   0x0
c001c841:	6a 00                	push   0x0
c001c843:	6a 02                	push   0x2
c001c845:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c849:	50                   	push   eax
c001c84a:	53                   	push   ebx
c001c84b:	e8 c8 fc ff ff       	call   c001c518 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c850:	83 c4 14             	add    esp,0x14
c001c853:	53                   	push   ebx
c001c854:	e8 87 ff ff ff       	call   c001c7e0 <ATAPI::diskRemoved()>
c001c859:	83 c4 24             	add    esp,0x24
c001c85c:	31 c0                	xor    eax,eax
c001c85e:	5b                   	pop    ebx
c001c85f:	5f                   	pop    edi
c001c860:	c3                   	ret    
c001c861:	90                   	nop

c001c862 <ATAPI::diskInserted()>:
c001c862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c866:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001c86d:	c3                   	ret    

c001c86e <ATAPI::detectMedia()>:
c001c86e:	56                   	push   esi
c001c86f:	53                   	push   ebx
c001c870:	83 ec 28             	sub    esp,0x28
c001c873:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c877:	6a 0c                	push   0xc
c001c879:	6a 00                	push   0x0
c001c87b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001c87f:	56                   	push   esi
c001c880:	e8 6b 3c fe ff       	call   c00004f0 <memset>
c001c885:	58                   	pop    eax
c001c886:	5a                   	pop    edx
c001c887:	6a 00                	push   0x0
c001c889:	6a 00                	push   0x0
c001c88b:	6a 00                	push   0x0
c001c88d:	6a 00                	push   0x0
c001c88f:	56                   	push   esi
c001c890:	53                   	push   ebx
c001c891:	e8 82 fc ff ff       	call   c001c518 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c896:	83 c4 1c             	add    esp,0x1c
c001c899:	6a 0c                	push   0xc
c001c89b:	6a 00                	push   0x0
c001c89d:	56                   	push   esi
c001c89e:	e8 4d 3c fe ff       	call   c00004f0 <memset>
c001c8a3:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001c8a8:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001c8ad:	59                   	pop    ecx
c001c8ae:	58                   	pop    eax
c001c8af:	6a 01                	push   0x1
c001c8b1:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001c8b5:	50                   	push   eax
c001c8b6:	6a 00                	push   0x0
c001c8b8:	6a 12                	push   0x12
c001c8ba:	56                   	push   esi
c001c8bb:	53                   	push   ebx
c001c8bc:	e8 57 fc ff ff       	call   c001c518 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c8c1:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001c8c5:	83 c4 20             	add    esp,0x20
c001c8c8:	83 e0 7f             	and    eax,0x7f
c001c8cb:	83 f8 70             	cmp    eax,0x70
c001c8ce:	74 15                	je     c001c8e5 <ATAPI::detectMedia()+0x77>
c001c8d0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c8d7:	75 0c                	jne    c001c8e5 <ATAPI::detectMedia()+0x77>
c001c8d9:	83 ec 0c             	sub    esp,0xc
c001c8dc:	53                   	push   ebx
c001c8dd:	e8 80 ff ff ff       	call   c001c862 <ATAPI::diskInserted()>
c001c8e2:	83 c4 10             	add    esp,0x10
c001c8e5:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001c8e9:	83 e0 0f             	and    eax,0xf
c001c8ec:	83 f8 02             	cmp    eax,0x2
c001c8ef:	75 1b                	jne    c001c90c <ATAPI::detectMedia()+0x9e>
c001c8f1:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001c8f6:	75 2d                	jne    c001c925 <ATAPI::detectMedia()+0xb7>
c001c8f8:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c8ff:	74 24                	je     c001c925 <ATAPI::detectMedia()+0xb7>
c001c901:	83 ec 0c             	sub    esp,0xc
c001c904:	53                   	push   ebx
c001c905:	e8 d6 fe ff ff       	call   c001c7e0 <ATAPI::diskRemoved()>
c001c90a:	eb 16                	jmp    c001c922 <ATAPI::detectMedia()+0xb4>
c001c90c:	85 c0                	test   eax,eax
c001c90e:	75 15                	jne    c001c925 <ATAPI::detectMedia()+0xb7>
c001c910:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c917:	75 0c                	jne    c001c925 <ATAPI::detectMedia()+0xb7>
c001c919:	83 ec 0c             	sub    esp,0xc
c001c91c:	53                   	push   ebx
c001c91d:	e8 40 ff ff ff       	call   c001c862 <ATAPI::diskInserted()>
c001c922:	83 c4 10             	add    esp,0x10
c001c925:	83 c4 24             	add    esp,0x24
c001c928:	5b                   	pop    ebx
c001c929:	5e                   	pop    esi
c001c92a:	c3                   	ret    
c001c92b:	90                   	nop

c001c92c <ATAPI::open(int, int, void*)>:
c001c92c:	56                   	push   esi
c001c92d:	53                   	push   ebx
c001c92e:	50                   	push   eax
c001c92f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c933:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c937:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c93b:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001c941:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001c947:	c1 e0 06             	shl    eax,0x6
c001c94a:	01 d0                	add    eax,edx
c001c94c:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001c953:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001c959:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001c960:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001c96a:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001c970:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001c977:	6a 04                	push   0x4
c001c979:	6a 0c                	push   0xc
c001c97b:	51                   	push   ecx
c001c97c:	52                   	push   edx
c001c97d:	e8 46 e3 ff ff       	call   c001acc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c982:	90                   	nop
c001c983:	90                   	nop
c001c984:	6a 00                	push   0x0
c001c986:	6a 0c                	push   0xc
c001c988:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c98f:	50                   	push   eax
c001c990:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c996:	e8 2d e3 ff ff       	call   c001acc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c99b:	83 c4 14             	add    esp,0x14
c001c99e:	68 78 01 00 00       	push   0x178
c001c9a3:	e8 06 b1 fe ff       	call   c0007aae <malloc>
c001c9a8:	83 c4 0c             	add    esp,0xc
c001c9ab:	89 c6                	mov    esi,eax
c001c9ad:	6a 00                	push   0x0
c001c9af:	68 ff ff ff 7f       	push   0x7fffffff
c001c9b4:	6a 00                	push   0x0
c001c9b6:	6a 00                	push   0x0
c001c9b8:	53                   	push   ebx
c001c9b9:	68 03 1e 02 c0       	push   0xc0021e03
c001c9be:	50                   	push   eax
c001c9bf:	e8 10 06 ff ff       	call   c000cfd4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001c9c4:	83 c4 14             	add    esp,0x14
c001c9c7:	56                   	push   esi
c001c9c8:	e8 c7 06 ff ff       	call   c000d094 <LogicalDisk::assignDriveLetter()>
c001c9cd:	5a                   	pop    edx
c001c9ce:	0f be c0             	movsx  eax,al
c001c9d1:	59                   	pop    ecx
c001c9d2:	50                   	push   eax
c001c9d3:	68 54 1c 02 c0       	push   0xc0021c54
c001c9d8:	e8 1a e0 fe ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c001c9dd:	58                   	pop    eax
c001c9de:	5a                   	pop    edx
c001c9df:	56                   	push   esi
c001c9e0:	53                   	push   ebx
c001c9e1:	e8 48 f4 fe ff       	call   c000be2e <Device::addChild(Device*)>
c001c9e6:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001c9ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c9ef:	e8 6e f8 fe ff       	call   c000c262 <PhysicalDisk::startCache()>
c001c9f4:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001c9fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c9fe:	e8 6b fe ff ff       	call   c001c86e <ATAPI::detectMedia()>
c001ca03:	83 c4 14             	add    esp,0x14
c001ca06:	31 c0                	xor    eax,eax
c001ca08:	5b                   	pop    ebx
c001ca09:	5e                   	pop    esi
c001ca0a:	c3                   	ret    
c001ca0b:	90                   	nop

c001ca0c <ATAPI::read(unsigned long long, int, void*)>:
c001ca0c:	55                   	push   ebp
c001ca0d:	57                   	push   edi
c001ca0e:	56                   	push   esi
c001ca0f:	53                   	push   ebx
c001ca10:	83 ec 1c             	sub    esp,0x1c
c001ca13:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ca17:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001ca1b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001ca1f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ca26:	74 3c                	je     c001ca64 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001ca28:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ca2c:	b9 03 00 00 00       	mov    ecx,0x3
c001ca31:	fc                   	cld    
c001ca32:	31 c0                	xor    eax,eax
c001ca34:	0f ce                	bswap  esi
c001ca36:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ca38:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001ca3d:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001ca41:	89 e8                	mov    eax,ebp
c001ca43:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001ca47:	50                   	push   eax
c001ca48:	50                   	push   eax
c001ca49:	55                   	push   ebp
c001ca4a:	c1 e5 0b             	shl    ebp,0xb
c001ca4d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ca51:	6a 00                	push   0x0
c001ca53:	55                   	push   ebp
c001ca54:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ca58:	50                   	push   eax
c001ca59:	53                   	push   ebx
c001ca5a:	e8 b9 fa ff ff       	call   c001c518 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ca5f:	83 c4 20             	add    esp,0x20
c001ca62:	eb 1a                	jmp    c001ca7e <ATAPI::read(unsigned long long, int, void*)+0x72>
c001ca64:	83 ec 0c             	sub    esp,0xc
c001ca67:	53                   	push   ebx
c001ca68:	e8 01 fe ff ff       	call   c001c86e <ATAPI::detectMedia()>
c001ca6d:	83 c4 10             	add    esp,0x10
c001ca70:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ca77:	75 af                	jne    c001ca28 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001ca79:	b8 02 00 00 00       	mov    eax,0x2
c001ca7e:	83 c4 1c             	add    esp,0x1c
c001ca81:	5b                   	pop    ebx
c001ca82:	5e                   	pop    esi
c001ca83:	5f                   	pop    edi
c001ca84:	5d                   	pop    ebp
c001ca85:	c3                   	ret    

c001ca86 <SATA::close(int, int, void*)>:
c001ca86:	83 ec 0c             	sub    esp,0xc
c001ca89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca8d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ca93:	85 c0                	test   eax,eax
c001ca95:	74 0c                	je     c001caa3 <SATA::close(int, int, void*)+0x1d>
c001ca97:	83 ec 0c             	sub    esp,0xc
c001ca9a:	8b 10                	mov    edx,DWORD PTR [eax]
c001ca9c:	50                   	push   eax
c001ca9d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001caa0:	83 c4 10             	add    esp,0x10
c001caa3:	31 c0                	xor    eax,eax
c001caa5:	83 c4 0c             	add    esp,0xc
c001caa8:	c3                   	ret    
c001caa9:	90                   	nop

c001caaa <SATA::powerSaving(PowerSavingLevel)>:
c001caaa:	c3                   	ret    
c001caab:	90                   	nop

c001caac <SATA::open(int, int, void*)>:
c001caac:	56                   	push   esi
c001caad:	53                   	push   ebx
c001caae:	50                   	push   eax
c001caaf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cab3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cab7:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001cac1:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001cac7:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001cad1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cad5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001cadf:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001cae5:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001caec:	e8 c2 b2 fe ff       	call   c0007db3 <Phys::allocatePage()>
c001caf1:	89 c6                	mov    esi,eax
c001caf3:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001caf9:	81 c6 00 10 00 00    	add    esi,0x1000
c001caff:	e8 af b2 fe ff       	call   c0007db3 <Phys::allocatePage()>
c001cb04:	39 c6                	cmp    esi,eax
c001cb06:	74 10                	je     c001cb18 <SATA::open(int, int, void*)+0x6c>
c001cb08:	83 ec 0c             	sub    esp,0xc
c001cb0b:	68 9c 1c 02 c0       	push   0xc0021c9c
c001cb10:	e8 12 3e ff ff       	call   c0010927 <KePanic(char const*)>
c001cb15:	83 c4 10             	add    esp,0x10
c001cb18:	83 ec 0c             	sub    esp,0xc
c001cb1b:	6a 02                	push   0x2
c001cb1d:	e8 fb ca fe ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c001cb22:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cb28:	6a 03                	push   0x3
c001cb2a:	50                   	push   eax
c001cb2b:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001cb31:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001cb37:	e8 c8 d1 fe ff       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c001cb3c:	83 c4 14             	add    esp,0x14
c001cb3f:	53                   	push   ebx
c001cb40:	e8 1d f7 fe ff       	call   c000c262 <PhysicalDisk::startCache()>
c001cb45:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cb48:	e8 59 09 ff ff       	call   c000d4a6 <createPartitionsForDisk(PhysicalDisk*)>
c001cb4d:	83 c4 14             	add    esp,0x14
c001cb50:	31 c0                	xor    eax,eax
c001cb52:	5b                   	pop    ebx
c001cb53:	5e                   	pop    esi
c001cb54:	c3                   	ret    
c001cb55:	90                   	nop

c001cb56 <SATA::SATA()>:
c001cb56:	83 ec 0c             	sub    esp,0xc
c001cb59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb5d:	83 ec 04             	sub    esp,0x4
c001cb60:	68 00 02 00 00       	push   0x200
c001cb65:	68 b0 1c 02 c0       	push   0xc0021cb0
c001cb6a:	50                   	push   eax
c001cb6b:	e8 8a f6 fe ff       	call   c000c1fa <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cb70:	83 c4 10             	add    esp,0x10
c001cb73:	ba 20 1d 02 c0       	mov    edx,0xc0021d20
c001cb78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb7c:	89 10                	mov    DWORD PTR [eax],edx
c001cb7e:	90                   	nop
c001cb7f:	83 c4 0c             	add    esp,0xc
c001cb82:	c3                   	ret    
c001cb83:	90                   	nop

c001cb84 <SATA::access(unsigned long long, int, void*, bool)>:
c001cb84:	55                   	push   ebp
c001cb85:	57                   	push   edi
c001cb86:	56                   	push   esi
c001cb87:	53                   	push   ebx
c001cb88:	83 ec 2c             	sub    esp,0x2c
c001cb8b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001cb8f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001cb93:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cb97:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001cb9b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001cb9f:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001cba4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cba8:	7e 10                	jle    c001cbba <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001cbaa:	83 ec 0c             	sub    esp,0xc
c001cbad:	68 c0 1c 02 c0       	push   0xc0021cc0
c001cbb2:	e8 70 3d ff ff       	call   c0010927 <KePanic(char const*)>
c001cbb7:	83 c4 10             	add    esp,0x10
c001cbba:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cbc0:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001cbc6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001cbcc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cbd0:	89 d0                	mov    eax,edx
c001cbd2:	c1 e0 07             	shl    eax,0x7
c001cbd5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001cbd9:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001cbe3:	51                   	push   ecx
c001cbe4:	8d 42 02             	lea    eax,[edx+0x2]
c001cbe7:	51                   	push   ecx
c001cbe8:	c1 e0 07             	shl    eax,0x7
c001cbeb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001cbef:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001cbf3:	50                   	push   eax
c001cbf4:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001cbfa:	e8 91 ec ff ff       	call   c001b890 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001cbff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cc03:	83 c4 10             	add    esp,0x10
c001cc06:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001cc0b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cc0f:	0f 84 57 01 00 00    	je     c001cd6c <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001cc15:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001cc19:	c1 e0 09             	shl    eax,0x9
c001cc1c:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001cc21:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cc25:	74 0e                	je     c001cc35 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001cc27:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001cc2d:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001cc31:	89 c1                	mov    ecx,eax
c001cc33:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cc35:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001cc3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001cc3f:	8d 42 02             	lea    eax,[edx+0x2]
c001cc42:	c1 e0 07             	shl    eax,0x7
c001cc45:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001cc49:	8b 00                	mov    eax,DWORD PTR [eax]
c001cc4b:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001cc51:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001cc57:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cc5b:	c1 e1 05             	shl    ecx,0x5
c001cc5e:	01 c8                	add    eax,ecx
c001cc60:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cc64:	83 e1 01             	and    ecx,0x1
c001cc67:	89 ce                	mov    esi,ecx
c001cc69:	8a 08                	mov    cl,BYTE PTR [eax]
c001cc6b:	c1 e6 06             	shl    esi,0x6
c001cc6e:	83 e1 bf             	and    ecx,0xffffffbf
c001cc71:	09 f1                	or     ecx,esi
c001cc73:	88 08                	mov    BYTE PTR [eax],cl
c001cc75:	8b 08                	mov    ecx,DWORD PTR [eax]
c001cc77:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001cc7d:	81 c9 05 00 01 00    	or     ecx,0x10005
c001cc83:	89 08                	mov    DWORD PTR [eax],ecx
c001cc85:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001cc8b:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001cc91:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001cc97:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001cc9a:	50                   	push   eax
c001cc9b:	68 90 00 00 00       	push   0x90
c001cca0:	6a 00                	push   0x0
c001cca2:	56                   	push   esi
c001cca3:	e8 48 38 fe ff       	call   c00004f0 <memset>
c001cca8:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ccae:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001ccb4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ccb8:	83 c4 10             	add    esp,0x10
c001ccbb:	48                   	dec    eax
c001ccbc:	25 ff ff 3f 00       	and    eax,0x3fffff
c001ccc1:	89 c1                	mov    ecx,eax
c001ccc3:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001ccc9:	25 00 00 c0 ff       	and    eax,0xffc00000
c001ccce:	09 c8                	or     eax,ecx
c001ccd0:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001ccd6:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001ccdc:	83 c8 80             	or     eax,0xffffff80
c001ccdf:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001cce5:	66 8b 06             	mov    ax,WORD PTR [esi]
c001cce8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ccec:	25 00 7f 00 00       	and    eax,0x7f00
c001ccf1:	0d 27 80 ff ff       	or     eax,0xffff8027
c001ccf6:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ccfb:	66 89 06             	mov    WORD PTR [esi],ax
c001ccfe:	b0 35                	mov    al,0x35
c001cd00:	75 02                	jne    c001cd04 <SATA::access(unsigned long long, int, void*, bool)+0x180>
c001cd02:	b0 25                	mov    al,0x25
c001cd04:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001cd07:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001cd0b:	89 e8                	mov    eax,ebp
c001cd0d:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001cd11:	c1 e8 10             	shr    eax,0x10
c001cd14:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001cd17:	89 e8                	mov    eax,ebp
c001cd19:	c1 e8 18             	shr    eax,0x18
c001cd1c:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001cd1f:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001cd23:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001cd26:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cd2a:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001cd2d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001cd31:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001cd35:	89 d6                	mov    esi,edx
c001cd37:	31 c0                	xor    eax,eax
c001cd39:	c1 e6 07             	shl    esi,0x7
c001cd3c:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cd40:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001cd46:	80 e1 88             	and    cl,0x88
c001cd49:	74 0a                	je     c001cd55 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001cd4b:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001cd50:	74 0a                	je     c001cd5c <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001cd52:	40                   	inc    eax
c001cd53:	eb eb                	jmp    c001cd40 <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001cd55:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001cd5a:	75 17                	jne    c001cd73 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001cd5c:	83 ec 0c             	sub    esp,0xc
c001cd5f:	68 f9 1c 02 c0       	push   0xc0021cf9
c001cd64:	e8 8e dc fe ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c001cd69:	83 c4 10             	add    esp,0x10
c001cd6c:	b8 01 00 00 00       	mov    eax,0x1
c001cd71:	eb 5d                	jmp    c001cdd0 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001cd73:	b8 01 00 00 00       	mov    eax,0x1
c001cd78:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001cd7c:	c1 e2 07             	shl    edx,0x7
c001cd7f:	d3 e0                	shl    eax,cl
c001cd81:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001cd85:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001cd8b:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001cd91:	85 c8                	test   eax,ecx
c001cd93:	74 16                	je     c001cdab <SATA::access(unsigned long long, int, void*, bool)+0x227>
c001cd95:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001cd9b:	0f ba e1 1e          	bt     ecx,0x1e
c001cd9f:	73 ea                	jae    c001cd8b <SATA::access(unsigned long long, int, void*, bool)+0x207>
c001cda1:	83 ec 0c             	sub    esp,0xc
c001cda4:	68 07 1d 02 c0       	push   0xc0021d07
c001cda9:	eb b9                	jmp    c001cd64 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001cdab:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001cdb1:	0f ba e0 1e          	bt     eax,0x1e
c001cdb5:	72 b5                	jb     c001cd6c <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001cdb7:	31 c0                	xor    eax,eax
c001cdb9:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001cdbe:	75 10                	jne    c001cdd0 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001cdc0:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001cdc6:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001cdca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001cdce:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cdd0:	83 c4 2c             	add    esp,0x2c
c001cdd3:	5b                   	pop    ebx
c001cdd4:	5e                   	pop    esi
c001cdd5:	5f                   	pop    edi
c001cdd6:	5d                   	pop    ebp
c001cdd7:	c3                   	ret    

c001cdd8 <SATA::read(unsigned long long, int, void*)>:
c001cdd8:	55                   	push   ebp
c001cdd9:	57                   	push   edi
c001cdda:	56                   	push   esi
c001cddb:	be 04 00 00 00       	mov    esi,0x4
c001cde0:	53                   	push   ebx
c001cde1:	83 ec 0c             	sub    esp,0xc
c001cde4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cde8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cdec:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cdef:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cdf3:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cdf7:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cdfd:	0f 87 1a 02 00 00    	ja     c001d01d <SATA::read(unsigned long long, int, void*)+0x245>
c001ce03:	be 06 00 00 00       	mov    esi,0x6
c001ce08:	85 c9                	test   ecx,ecx
c001ce0a:	0f 84 0d 02 00 00    	je     c001d01d <SATA::read(unsigned long long, int, void*)+0x245>
c001ce10:	56                   	push   esi
c001ce11:	56                   	push   esi
c001ce12:	6a 00                	push   0x0
c001ce14:	51                   	push   ecx
c001ce15:	53                   	push   ebx
c001ce16:	52                   	push   edx
c001ce17:	50                   	push   eax
c001ce18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ce1c:	e8 63 fd ff ff       	call   c001cb84 <SATA::access(unsigned long long, int, void*, bool)>
c001ce21:	83 c4 20             	add    esp,0x20
c001ce24:	89 c6                	mov    esi,eax
c001ce26:	85 c0                	test   eax,eax
c001ce28:	0f 85 ea 01 00 00    	jne    c001d018 <SATA::read(unsigned long long, int, void*)+0x240>
c001ce2e:	01 1d 54 8b 02 c0    	add    DWORD PTR ds:0xc0028b54,ebx
c001ce34:	bb 0a 00 00 00       	mov    ebx,0xa
c001ce39:	50                   	push   eax
c001ce3a:	50                   	push   eax
c001ce3b:	6a 0f                	push   0xf
c001ce3d:	6a 00                	push   0x0
c001ce3f:	e8 75 f2 ff ff       	call   c001c0b9 <combineColours(unsigned char, unsigned char)>
c001ce44:	5a                   	pop    edx
c001ce45:	0f b6 c0             	movzx  eax,al
c001ce48:	59                   	pop    ecx
c001ce49:	b9 10 27 00 00       	mov    ecx,0x2710
c001ce4e:	50                   	push   eax
c001ce4f:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ce54:	99                   	cdq    
c001ce55:	f7 f9                	idiv   ecx
c001ce57:	99                   	cdq    
c001ce58:	f7 fb                	idiv   ebx
c001ce5a:	8d 42 30             	lea    eax,[edx+0x30]
c001ce5d:	0f b6 c0             	movzx  eax,al
c001ce60:	50                   	push   eax
c001ce61:	e8 42 f2 ff ff       	call   c001c0a8 <combineCharAndColour(char, unsigned char)>
c001ce66:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001ce6c:	5f                   	pop    edi
c001ce6d:	5d                   	pop    ebp
c001ce6e:	bd e8 03 00 00       	mov    ebp,0x3e8
c001ce73:	6a 0f                	push   0xf
c001ce75:	6a 00                	push   0x0
c001ce77:	e8 3d f2 ff ff       	call   c001c0b9 <combineColours(unsigned char, unsigned char)>
c001ce7c:	5a                   	pop    edx
c001ce7d:	0f b6 c0             	movzx  eax,al
c001ce80:	59                   	pop    ecx
c001ce81:	50                   	push   eax
c001ce82:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ce87:	99                   	cdq    
c001ce88:	f7 fd                	idiv   ebp
c001ce8a:	99                   	cdq    
c001ce8b:	f7 fb                	idiv   ebx
c001ce8d:	8d 42 30             	lea    eax,[edx+0x30]
c001ce90:	0f b6 c0             	movzx  eax,al
c001ce93:	50                   	push   eax
c001ce94:	e8 0f f2 ff ff       	call   c001c0a8 <combineCharAndColour(char, unsigned char)>
c001ce99:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001ce9f:	5f                   	pop    edi
c001cea0:	bf 64 00 00 00       	mov    edi,0x64
c001cea5:	58                   	pop    eax
c001cea6:	6a 0f                	push   0xf
c001cea8:	6a 00                	push   0x0
c001ceaa:	e8 0a f2 ff ff       	call   c001c0b9 <combineColours(unsigned char, unsigned char)>
c001ceaf:	5a                   	pop    edx
c001ceb0:	0f b6 c0             	movzx  eax,al
c001ceb3:	59                   	pop    ecx
c001ceb4:	50                   	push   eax
c001ceb5:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ceba:	99                   	cdq    
c001cebb:	f7 ff                	idiv   edi
c001cebd:	99                   	cdq    
c001cebe:	f7 fb                	idiv   ebx
c001cec0:	8d 42 30             	lea    eax,[edx+0x30]
c001cec3:	0f b6 c0             	movzx  eax,al
c001cec6:	50                   	push   eax
c001cec7:	e8 dc f1 ff ff       	call   c001c0a8 <combineCharAndColour(char, unsigned char)>
c001cecc:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001ced2:	58                   	pop    eax
c001ced3:	5a                   	pop    edx
c001ced4:	6a 0f                	push   0xf
c001ced6:	6a 00                	push   0x0
c001ced8:	e8 dc f1 ff ff       	call   c001c0b9 <combineColours(unsigned char, unsigned char)>
c001cedd:	59                   	pop    ecx
c001cede:	0f b6 c0             	movzx  eax,al
c001cee1:	5a                   	pop    edx
c001cee2:	50                   	push   eax
c001cee3:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cee8:	99                   	cdq    
c001cee9:	f7 fb                	idiv   ebx
c001ceeb:	99                   	cdq    
c001ceec:	f7 fb                	idiv   ebx
c001ceee:	8d 42 30             	lea    eax,[edx+0x30]
c001cef1:	0f b6 c0             	movzx  eax,al
c001cef4:	50                   	push   eax
c001cef5:	e8 ae f1 ff ff       	call   c001c0a8 <combineCharAndColour(char, unsigned char)>
c001cefa:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001cf00:	59                   	pop    ecx
c001cf01:	58                   	pop    eax
c001cf02:	6a 0f                	push   0xf
c001cf04:	6a 00                	push   0x0
c001cf06:	e8 ae f1 ff ff       	call   c001c0b9 <combineColours(unsigned char, unsigned char)>
c001cf0b:	5a                   	pop    edx
c001cf0c:	0f b6 c0             	movzx  eax,al
c001cf0f:	59                   	pop    ecx
c001cf10:	50                   	push   eax
c001cf11:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cf16:	99                   	cdq    
c001cf17:	f7 fb                	idiv   ebx
c001cf19:	8d 42 30             	lea    eax,[edx+0x30]
c001cf1c:	0f b6 c0             	movzx  eax,al
c001cf1f:	50                   	push   eax
c001cf20:	e8 83 f1 ff ff       	call   c001c0a8 <combineCharAndColour(char, unsigned char)>
c001cf25:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001cf2b:	58                   	pop    eax
c001cf2c:	5a                   	pop    edx
c001cf2d:	6a 0f                	push   0xf
c001cf2f:	6a 00                	push   0x0
c001cf31:	e8 83 f1 ff ff       	call   c001c0b9 <combineColours(unsigned char, unsigned char)>
c001cf36:	59                   	pop    ecx
c001cf37:	0f b6 c0             	movzx  eax,al
c001cf3a:	5a                   	pop    edx
c001cf3b:	b9 10 27 00 00       	mov    ecx,0x2710
c001cf40:	50                   	push   eax
c001cf41:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cf46:	99                   	cdq    
c001cf47:	f7 f9                	idiv   ecx
c001cf49:	99                   	cdq    
c001cf4a:	f7 fb                	idiv   ebx
c001cf4c:	8d 42 30             	lea    eax,[edx+0x30]
c001cf4f:	0f b6 c0             	movzx  eax,al
c001cf52:	50                   	push   eax
c001cf53:	e8 50 f1 ff ff       	call   c001c0a8 <combineCharAndColour(char, unsigned char)>
c001cf58:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001cf5e:	59                   	pop    ecx
c001cf5f:	58                   	pop    eax
c001cf60:	6a 0f                	push   0xf
c001cf62:	6a 00                	push   0x0
c001cf64:	e8 50 f1 ff ff       	call   c001c0b9 <combineColours(unsigned char, unsigned char)>
c001cf69:	5a                   	pop    edx
c001cf6a:	0f b6 c0             	movzx  eax,al
c001cf6d:	59                   	pop    ecx
c001cf6e:	50                   	push   eax
c001cf6f:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cf74:	99                   	cdq    
c001cf75:	f7 fd                	idiv   ebp
c001cf77:	99                   	cdq    
c001cf78:	f7 fb                	idiv   ebx
c001cf7a:	8d 42 30             	lea    eax,[edx+0x30]
c001cf7d:	0f b6 c0             	movzx  eax,al
c001cf80:	50                   	push   eax
c001cf81:	e8 22 f1 ff ff       	call   c001c0a8 <combineCharAndColour(char, unsigned char)>
c001cf86:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001cf8c:	5d                   	pop    ebp
c001cf8d:	58                   	pop    eax
c001cf8e:	6a 0f                	push   0xf
c001cf90:	6a 00                	push   0x0
c001cf92:	e8 22 f1 ff ff       	call   c001c0b9 <combineColours(unsigned char, unsigned char)>
c001cf97:	5a                   	pop    edx
c001cf98:	0f b6 c0             	movzx  eax,al
c001cf9b:	59                   	pop    ecx
c001cf9c:	50                   	push   eax
c001cf9d:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cfa2:	99                   	cdq    
c001cfa3:	f7 ff                	idiv   edi
c001cfa5:	99                   	cdq    
c001cfa6:	f7 fb                	idiv   ebx
c001cfa8:	8d 42 30             	lea    eax,[edx+0x30]
c001cfab:	0f b6 c0             	movzx  eax,al
c001cfae:	50                   	push   eax
c001cfaf:	e8 f4 f0 ff ff       	call   c001c0a8 <combineCharAndColour(char, unsigned char)>
c001cfb4:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001cfba:	5f                   	pop    edi
c001cfbb:	5d                   	pop    ebp
c001cfbc:	6a 0f                	push   0xf
c001cfbe:	6a 00                	push   0x0
c001cfc0:	e8 f4 f0 ff ff       	call   c001c0b9 <combineColours(unsigned char, unsigned char)>
c001cfc5:	5a                   	pop    edx
c001cfc6:	0f b6 c0             	movzx  eax,al
c001cfc9:	59                   	pop    ecx
c001cfca:	50                   	push   eax
c001cfcb:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cfd0:	99                   	cdq    
c001cfd1:	f7 fb                	idiv   ebx
c001cfd3:	99                   	cdq    
c001cfd4:	f7 fb                	idiv   ebx
c001cfd6:	8d 42 30             	lea    eax,[edx+0x30]
c001cfd9:	0f b6 c0             	movzx  eax,al
c001cfdc:	50                   	push   eax
c001cfdd:	e8 c6 f0 ff ff       	call   c001c0a8 <combineCharAndColour(char, unsigned char)>
c001cfe2:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cfe8:	5f                   	pop    edi
c001cfe9:	5d                   	pop    ebp
c001cfea:	6a 0f                	push   0xf
c001cfec:	6a 00                	push   0x0
c001cfee:	e8 c6 f0 ff ff       	call   c001c0b9 <combineColours(unsigned char, unsigned char)>
c001cff3:	5a                   	pop    edx
c001cff4:	0f b6 c0             	movzx  eax,al
c001cff7:	59                   	pop    ecx
c001cff8:	50                   	push   eax
c001cff9:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cffe:	99                   	cdq    
c001cfff:	f7 fb                	idiv   ebx
c001d001:	83 c2 30             	add    edx,0x30
c001d004:	0f b6 d2             	movzx  edx,dl
c001d007:	52                   	push   edx
c001d008:	e8 9b f0 ff ff       	call   c001c0a8 <combineCharAndColour(char, unsigned char)>
c001d00d:	83 c4 10             	add    esp,0x10
c001d010:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d016:	eb 05                	jmp    c001d01d <SATA::read(unsigned long long, int, void*)+0x245>
c001d018:	be 01 00 00 00       	mov    esi,0x1
c001d01d:	83 c4 0c             	add    esp,0xc
c001d020:	89 f0                	mov    eax,esi
c001d022:	5b                   	pop    ebx
c001d023:	5e                   	pop    esi
c001d024:	5f                   	pop    edi
c001d025:	5d                   	pop    ebp
c001d026:	c3                   	ret    
c001d027:	90                   	nop

c001d028 <SATA::write(unsigned long long, int, void*)>:
c001d028:	55                   	push   ebp
c001d029:	b8 04 00 00 00       	mov    eax,0x4
c001d02e:	57                   	push   edi
c001d02f:	56                   	push   esi
c001d030:	53                   	push   ebx
c001d031:	83 ec 1c             	sub    esp,0x1c
c001d034:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d038:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001d03c:	8d 75 ff             	lea    esi,[ebp-0x1]
c001d03f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d043:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001d047:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001d04d:	0f 87 32 02 00 00    	ja     c001d285 <SATA::write(unsigned long long, int, void*)+0x25d>
c001d053:	b8 06 00 00 00       	mov    eax,0x6
c001d058:	85 ff                	test   edi,edi
c001d05a:	0f 84 25 02 00 00    	je     c001d285 <SATA::write(unsigned long long, int, void*)+0x25d>
c001d060:	89 ee                	mov    esi,ebp
c001d062:	c1 e6 09             	shl    esi,0x9
c001d065:	01 fe                	add    esi,edi
c001d067:	89 c8                	mov    eax,ecx
c001d069:	89 da                	mov    edx,ebx
c001d06b:	83 c0 01             	add    eax,0x1
c001d06e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d072:	83 d2 00             	adc    edx,0x0
c001d075:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d079:	50                   	push   eax
c001d07a:	50                   	push   eax
c001d07b:	6a 01                	push   0x1
c001d07d:	57                   	push   edi
c001d07e:	81 c7 00 02 00 00    	add    edi,0x200
c001d084:	6a 01                	push   0x1
c001d086:	53                   	push   ebx
c001d087:	51                   	push   ecx
c001d088:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d08c:	e8 f3 fa ff ff       	call   c001cb84 <SATA::access(unsigned long long, int, void*, bool)>
c001d091:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d095:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d099:	83 c4 20             	add    esp,0x20
c001d09c:	39 f7                	cmp    edi,esi
c001d09e:	75 c7                	jne    c001d067 <SATA::write(unsigned long long, int, void*)+0x3f>
c001d0a0:	bb 0a 00 00 00       	mov    ebx,0xa
c001d0a5:	01 2d 50 8b 02 c0    	add    DWORD PTR ds:0xc0028b50,ebp
c001d0ab:	bd 10 27 00 00       	mov    ebp,0x2710
c001d0b0:	50                   	push   eax
c001d0b1:	50                   	push   eax
c001d0b2:	6a 0f                	push   0xf
c001d0b4:	6a 00                	push   0x0
c001d0b6:	e8 fe ef ff ff       	call   c001c0b9 <combineColours(unsigned char, unsigned char)>
c001d0bb:	5a                   	pop    edx
c001d0bc:	0f b6 c0             	movzx  eax,al
c001d0bf:	59                   	pop    ecx
c001d0c0:	50                   	push   eax
c001d0c1:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d0c6:	99                   	cdq    
c001d0c7:	f7 fd                	idiv   ebp
c001d0c9:	99                   	cdq    
c001d0ca:	f7 fb                	idiv   ebx
c001d0cc:	8d 42 30             	lea    eax,[edx+0x30]
c001d0cf:	0f b6 c0             	movzx  eax,al
c001d0d2:	50                   	push   eax
c001d0d3:	e8 d0 ef ff ff       	call   c001c0a8 <combineCharAndColour(char, unsigned char)>
c001d0d8:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d0de:	5e                   	pop    esi
c001d0df:	5f                   	pop    edi
c001d0e0:	bf e8 03 00 00       	mov    edi,0x3e8
c001d0e5:	6a 0f                	push   0xf
c001d0e7:	6a 00                	push   0x0
c001d0e9:	e8 cb ef ff ff       	call   c001c0b9 <combineColours(unsigned char, unsigned char)>
c001d0ee:	5a                   	pop    edx
c001d0ef:	0f b6 c0             	movzx  eax,al
c001d0f2:	59                   	pop    ecx
c001d0f3:	50                   	push   eax
c001d0f4:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d0f9:	99                   	cdq    
c001d0fa:	f7 ff                	idiv   edi
c001d0fc:	99                   	cdq    
c001d0fd:	f7 fb                	idiv   ebx
c001d0ff:	8d 42 30             	lea    eax,[edx+0x30]
c001d102:	0f b6 c0             	movzx  eax,al
c001d105:	50                   	push   eax
c001d106:	e8 9d ef ff ff       	call   c001c0a8 <combineCharAndColour(char, unsigned char)>
c001d10b:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d111:	5e                   	pop    esi
c001d112:	be 64 00 00 00       	mov    esi,0x64
c001d117:	58                   	pop    eax
c001d118:	6a 0f                	push   0xf
c001d11a:	6a 00                	push   0x0
c001d11c:	e8 98 ef ff ff       	call   c001c0b9 <combineColours(unsigned char, unsigned char)>
c001d121:	5a                   	pop    edx
c001d122:	0f b6 c0             	movzx  eax,al
c001d125:	59                   	pop    ecx
c001d126:	50                   	push   eax
c001d127:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d12c:	99                   	cdq    
c001d12d:	f7 fe                	idiv   esi
c001d12f:	99                   	cdq    
c001d130:	f7 fb                	idiv   ebx
c001d132:	8d 42 30             	lea    eax,[edx+0x30]
c001d135:	0f b6 c0             	movzx  eax,al
c001d138:	50                   	push   eax
c001d139:	e8 6a ef ff ff       	call   c001c0a8 <combineCharAndColour(char, unsigned char)>
c001d13e:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d144:	58                   	pop    eax
c001d145:	5a                   	pop    edx
c001d146:	6a 0f                	push   0xf
c001d148:	6a 00                	push   0x0
c001d14a:	e8 6a ef ff ff       	call   c001c0b9 <combineColours(unsigned char, unsigned char)>
c001d14f:	59                   	pop    ecx
c001d150:	0f b6 c0             	movzx  eax,al
c001d153:	5a                   	pop    edx
c001d154:	50                   	push   eax
c001d155:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d15a:	99                   	cdq    
c001d15b:	f7 fb                	idiv   ebx
c001d15d:	99                   	cdq    
c001d15e:	f7 fb                	idiv   ebx
c001d160:	8d 42 30             	lea    eax,[edx+0x30]
c001d163:	0f b6 c0             	movzx  eax,al
c001d166:	50                   	push   eax
c001d167:	e8 3c ef ff ff       	call   c001c0a8 <combineCharAndColour(char, unsigned char)>
c001d16c:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d172:	59                   	pop    ecx
c001d173:	58                   	pop    eax
c001d174:	6a 0f                	push   0xf
c001d176:	6a 00                	push   0x0
c001d178:	e8 3c ef ff ff       	call   c001c0b9 <combineColours(unsigned char, unsigned char)>
c001d17d:	5a                   	pop    edx
c001d17e:	0f b6 c0             	movzx  eax,al
c001d181:	59                   	pop    ecx
c001d182:	50                   	push   eax
c001d183:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d188:	99                   	cdq    
c001d189:	f7 fb                	idiv   ebx
c001d18b:	83 c2 30             	add    edx,0x30
c001d18e:	0f b6 d2             	movzx  edx,dl
c001d191:	52                   	push   edx
c001d192:	e8 11 ef ff ff       	call   c001c0a8 <combineCharAndColour(char, unsigned char)>
c001d197:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d19d:	58                   	pop    eax
c001d19e:	5a                   	pop    edx
c001d19f:	6a 0f                	push   0xf
c001d1a1:	6a 00                	push   0x0
c001d1a3:	e8 11 ef ff ff       	call   c001c0b9 <combineColours(unsigned char, unsigned char)>
c001d1a8:	59                   	pop    ecx
c001d1a9:	0f b6 c0             	movzx  eax,al
c001d1ac:	5a                   	pop    edx
c001d1ad:	50                   	push   eax
c001d1ae:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d1b3:	99                   	cdq    
c001d1b4:	f7 fd                	idiv   ebp
c001d1b6:	99                   	cdq    
c001d1b7:	f7 fb                	idiv   ebx
c001d1b9:	8d 42 30             	lea    eax,[edx+0x30]
c001d1bc:	0f b6 c0             	movzx  eax,al
c001d1bf:	50                   	push   eax
c001d1c0:	e8 e3 ee ff ff       	call   c001c0a8 <combineCharAndColour(char, unsigned char)>
c001d1c5:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d1cb:	59                   	pop    ecx
c001d1cc:	5d                   	pop    ebp
c001d1cd:	6a 0f                	push   0xf
c001d1cf:	6a 00                	push   0x0
c001d1d1:	e8 e3 ee ff ff       	call   c001c0b9 <combineColours(unsigned char, unsigned char)>
c001d1d6:	5a                   	pop    edx
c001d1d7:	0f b6 c0             	movzx  eax,al
c001d1da:	59                   	pop    ecx
c001d1db:	50                   	push   eax
c001d1dc:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d1e1:	99                   	cdq    
c001d1e2:	f7 ff                	idiv   edi
c001d1e4:	99                   	cdq    
c001d1e5:	f7 fb                	idiv   ebx
c001d1e7:	8d 42 30             	lea    eax,[edx+0x30]
c001d1ea:	0f b6 c0             	movzx  eax,al
c001d1ed:	50                   	push   eax
c001d1ee:	e8 b5 ee ff ff       	call   c001c0a8 <combineCharAndColour(char, unsigned char)>
c001d1f3:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d1f9:	5f                   	pop    edi
c001d1fa:	5d                   	pop    ebp
c001d1fb:	6a 0f                	push   0xf
c001d1fd:	6a 00                	push   0x0
c001d1ff:	e8 b5 ee ff ff       	call   c001c0b9 <combineColours(unsigned char, unsigned char)>
c001d204:	5a                   	pop    edx
c001d205:	0f b6 c0             	movzx  eax,al
c001d208:	59                   	pop    ecx
c001d209:	50                   	push   eax
c001d20a:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d20f:	99                   	cdq    
c001d210:	f7 fe                	idiv   esi
c001d212:	99                   	cdq    
c001d213:	f7 fb                	idiv   ebx
c001d215:	8d 42 30             	lea    eax,[edx+0x30]
c001d218:	0f b6 c0             	movzx  eax,al
c001d21b:	50                   	push   eax
c001d21c:	e8 87 ee ff ff       	call   c001c0a8 <combineCharAndColour(char, unsigned char)>
c001d221:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d227:	5e                   	pop    esi
c001d228:	5f                   	pop    edi
c001d229:	6a 0f                	push   0xf
c001d22b:	6a 00                	push   0x0
c001d22d:	e8 87 ee ff ff       	call   c001c0b9 <combineColours(unsigned char, unsigned char)>
c001d232:	5d                   	pop    ebp
c001d233:	0f b6 c0             	movzx  eax,al
c001d236:	5a                   	pop    edx
c001d237:	50                   	push   eax
c001d238:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d23d:	99                   	cdq    
c001d23e:	f7 fb                	idiv   ebx
c001d240:	99                   	cdq    
c001d241:	f7 fb                	idiv   ebx
c001d243:	8d 42 30             	lea    eax,[edx+0x30]
c001d246:	0f b6 c0             	movzx  eax,al
c001d249:	50                   	push   eax
c001d24a:	e8 59 ee ff ff       	call   c001c0a8 <combineCharAndColour(char, unsigned char)>
c001d24f:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d255:	59                   	pop    ecx
c001d256:	5e                   	pop    esi
c001d257:	6a 0f                	push   0xf
c001d259:	6a 00                	push   0x0
c001d25b:	e8 59 ee ff ff       	call   c001c0b9 <combineColours(unsigned char, unsigned char)>
c001d260:	5f                   	pop    edi
c001d261:	0f b6 c0             	movzx  eax,al
c001d264:	5d                   	pop    ebp
c001d265:	50                   	push   eax
c001d266:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d26b:	99                   	cdq    
c001d26c:	f7 fb                	idiv   ebx
c001d26e:	83 c2 30             	add    edx,0x30
c001d271:	0f b6 d2             	movzx  edx,dl
c001d274:	52                   	push   edx
c001d275:	e8 2e ee ff ff       	call   c001c0a8 <combineCharAndColour(char, unsigned char)>
c001d27a:	83 c4 10             	add    esp,0x10
c001d27d:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d283:	31 c0                	xor    eax,eax
c001d285:	83 c4 1c             	add    esp,0x1c
c001d288:	5b                   	pop    ebx
c001d289:	5e                   	pop    esi
c001d28a:	5f                   	pop    edi
c001d28b:	5d                   	pop    ebp
c001d28c:	c3                   	ret    
c001d28d:	90                   	nop

c001d28e <SATAPI::write(unsigned long long, int, void*)>:
c001d28e:	b8 03 00 00 00       	mov    eax,0x3
c001d293:	c3                   	ret    

c001d294 <SATAPI::close(int, int, void*)>:
c001d294:	83 ec 0c             	sub    esp,0xc
c001d297:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d29b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d2a1:	85 c0                	test   eax,eax
c001d2a3:	74 0c                	je     c001d2b1 <SATAPI::close(int, int, void*)+0x1d>
c001d2a5:	83 ec 0c             	sub    esp,0xc
c001d2a8:	8b 10                	mov    edx,DWORD PTR [eax]
c001d2aa:	50                   	push   eax
c001d2ab:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d2ae:	83 c4 10             	add    esp,0x10
c001d2b1:	31 c0                	xor    eax,eax
c001d2b3:	83 c4 0c             	add    esp,0xc
c001d2b6:	c3                   	ret    
c001d2b7:	90                   	nop

c001d2b8 <SATAPI::SATAPI()>:
c001d2b8:	83 ec 0c             	sub    esp,0xc
c001d2bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2bf:	83 ec 04             	sub    esp,0x4
c001d2c2:	68 00 08 00 00       	push   0x800
c001d2c7:	68 50 1d 02 c0       	push   0xc0021d50
c001d2cc:	50                   	push   eax
c001d2cd:	e8 28 ef fe ff       	call   c000c1fa <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d2d2:	83 c4 10             	add    esp,0x10
c001d2d5:	ba 44 1e 02 c0       	mov    edx,0xc0021e44
c001d2da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2de:	89 10                	mov    DWORD PTR [eax],edx
c001d2e0:	90                   	nop
c001d2e1:	83 c4 0c             	add    esp,0xc
c001d2e4:	c3                   	ret    
c001d2e5:	90                   	nop

c001d2e6 <SATAPI::diskRemoved()>:
c001d2e6:	c3                   	ret    
c001d2e7:	90                   	nop

c001d2e8 <SATAPI::diskInserted()>:
c001d2e8:	83 ec 18             	sub    esp,0x18
c001d2eb:	68 5c 1d 02 c0       	push   0xc0021d5c
c001d2f0:	e8 02 d7 fe ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c001d2f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2f9:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001d300:	83 c4 1c             	add    esp,0x1c
c001d303:	c3                   	ret    

c001d304 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001d304:	55                   	push   ebp
c001d305:	57                   	push   edi
c001d306:	56                   	push   esi
c001d307:	53                   	push   ebx
c001d308:	83 ec 34             	sub    esp,0x34
c001d30b:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001d30f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d313:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001d317:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d31b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001d31f:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001d325:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d32b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d32f:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001d335:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d339:	83 c0 02             	add    eax,0x2
c001d33c:	c1 e0 07             	shl    eax,0x7
c001d33f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d343:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d347:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d34b:	c1 e0 07             	shl    eax,0x7
c001d34e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d352:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d356:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d360:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d364:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d36a:	e8 21 e5 ff ff       	call   c001b890 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d36f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d373:	83 c4 10             	add    esp,0x10
c001d376:	b8 01 00 00 00       	mov    eax,0x1
c001d37b:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001d380:	0f 84 53 02 00 00    	je     c001d5d9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001d386:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d38c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d390:	8b 00                	mov    eax,DWORD PTR [eax]
c001d392:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d398:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d39e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d3a2:	c1 e1 05             	shl    ecx,0x5
c001d3a5:	01 c8                	add    eax,ecx
c001d3a7:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d3a9:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001d3af:	81 c9 25 00 01 00    	or     ecx,0x10025
c001d3b5:	89 08                	mov    DWORD PTR [eax],ecx
c001d3b7:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d3bd:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001d3c3:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001d3c9:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001d3cc:	8d 7b 40             	lea    edi,[ebx+0x40]
c001d3cf:	50                   	push   eax
c001d3d0:	68 90 00 00 00       	push   0x90
c001d3d5:	6a 00                	push   0x0
c001d3d7:	53                   	push   ebx
c001d3d8:	e8 13 31 fe ff       	call   c00004f0 <memset>
c001d3dd:	b9 0c 00 00 00       	mov    ecx,0xc
c001d3e2:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001d3e6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d3e8:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001d3ee:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001d3f2:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001d3f8:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001d3fc:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d400:	48                   	dec    eax
c001d401:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d406:	89 c1                	mov    ecx,eax
c001d408:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001d40e:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d413:	09 c8                	or     eax,ecx
c001d415:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001d41b:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001d421:	83 c8 80             	or     eax,0xffffff80
c001d424:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001d42a:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001d42d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d431:	25 00 7f 00 00       	and    eax,0x7f00
c001d436:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001d43a:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d43f:	66 89 03             	mov    WORD PTR [ebx],ax
c001d442:	89 d0                	mov    eax,edx
c001d444:	c1 ea 18             	shr    edx,0x18
c001d447:	c1 e8 10             	shr    eax,0x10
c001d44a:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001d44d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001d450:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001d454:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001d457:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d45b:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001d45e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001d462:	83 c4 10             	add    esp,0x10
c001d465:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001d469:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d46d:	31 c0                	xor    eax,eax
c001d46f:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001d475:	80 e1 88             	and    cl,0x88
c001d478:	74 0a                	je     c001d484 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001d47a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d47f:	74 0a                	je     c001d48b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001d481:	40                   	inc    eax
c001d482:	eb eb                	jmp    c001d46f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001d484:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d489:	75 43                	jne    c001d4ce <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001d48b:	83 ec 0c             	sub    esp,0xc
c001d48e:	68 74 1d 02 c0       	push   0xc0021d74
c001d493:	e8 5f d5 fe ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c001d498:	58                   	pop    eax
c001d499:	5a                   	pop    edx
c001d49a:	68 89 1d 02 c0       	push   0xc0021d89
c001d49f:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001d4a5:	e8 e6 b5 fe ff       	call   c0008a90 <VgaText::puts(char const*)>
c001d4aa:	59                   	pop    ecx
c001d4ab:	5b                   	pop    ebx
c001d4ac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d4b0:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d4b6:	e8 6f e4 ff ff       	call   c001b92a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001d4bb:	5e                   	pop    esi
c001d4bc:	5f                   	pop    edi
c001d4bd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d4c1:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d4c7:	e8 3e e4 ff ff       	call   c001b90a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001d4cc:	eb 48                	jmp    c001d516 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c001d4ce:	be 01 00 00 00       	mov    esi,0x1
c001d4d3:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001d4d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001d4db:	d3 e6                	shl    esi,cl
c001d4dd:	c1 e7 07             	shl    edi,0x7
c001d4e0:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001d4e6:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001d4eb:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001d4ef:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001d4f5:	85 c6                	test   esi,eax
c001d4f7:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001d4fd:	0f 84 a3 00 00 00    	je     c001d5a6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c001d503:	0f ba e0 1e          	bt     eax,0x1e
c001d507:	73 1a                	jae    c001d523 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c001d509:	83 ec 0c             	sub    esp,0xc
c001d50c:	68 9b 1d 02 c0       	push   0xc0021d9b
c001d511:	e8 e1 d4 fe ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c001d516:	83 c4 10             	add    esp,0x10
c001d519:	b8 01 00 00 00       	mov    eax,0x1
c001d51e:	e9 b6 00 00 00       	jmp    c001d5d9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001d523:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001d529:	83 f8 0d             	cmp    eax,0xd
c001d52c:	77 0a                	ja     c001d538 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c001d52e:	83 ec 0c             	sub    esp,0xc
c001d531:	68 c8 00 00 00       	push   0xc8
c001d536:	eb 28                	jmp    c001d560 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001d538:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001d53e:	83 f8 0d             	cmp    eax,0xd
c001d541:	77 0a                	ja     c001d54d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c001d543:	83 ec 0c             	sub    esp,0xc
c001d546:	68 58 02 00 00       	push   0x258
c001d54b:	eb 13                	jmp    c001d560 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001d54d:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001d553:	83 f8 06             	cmp    eax,0x6
c001d556:	77 10                	ja     c001d568 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001d558:	83 ec 0c             	sub    esp,0xc
c001d55b:	68 dc 05 00 00       	push   0x5dc
c001d560:	e8 a7 7e ff ff       	call   c001540c <milliTenthSleep(unsigned int)>
c001d565:	83 c4 10             	add    esp,0x10
c001d568:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001d56c:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001d56f:	75 06                	jne    c001d577 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c001d571:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001d575:	74 15                	je     c001d58c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001d577:	83 fb 06             	cmp    ebx,0x6
c001d57a:	77 10                	ja     c001d58c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001d57c:	83 ec 0c             	sub    esp,0xc
c001d57f:	68 c4 09 00 00       	push   0x9c4
c001d584:	e8 83 7e ff ff       	call   c001540c <milliTenthSleep(unsigned int)>
c001d589:	83 c4 10             	add    esp,0x10
c001d58c:	43                   	inc    ebx
c001d58d:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001d593:	0f 85 56 ff ff ff    	jne    c001d4ef <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c001d599:	83 ec 0c             	sub    esp,0xc
c001d59c:	68 ae 1d 02 c0       	push   0xc0021dae
c001d5a1:	e9 6b ff ff ff       	jmp    c001d511 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001d5a6:	0f ba e0 1e          	bt     eax,0x1e
c001d5aa:	73 0d                	jae    c001d5b9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c001d5ac:	83 ec 0c             	sub    esp,0xc
c001d5af:	68 c2 1d 02 c0       	push   0xc0021dc2
c001d5b4:	e9 58 ff ff ff       	jmp    c001d511 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001d5b9:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001d5be:	74 17                	je     c001d5d7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001d5c0:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001d5c5:	74 10                	je     c001d5d7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001d5c7:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001d5cd:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001d5d1:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001d5d5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d5d7:	31 c0                	xor    eax,eax
c001d5d9:	83 c4 2c             	add    esp,0x2c
c001d5dc:	5b                   	pop    ebx
c001d5dd:	5e                   	pop    esi
c001d5de:	5f                   	pop    edi
c001d5df:	5d                   	pop    ebp
c001d5e0:	c3                   	ret    
c001d5e1:	90                   	nop

c001d5e2 <SATAPI::eject()>:
c001d5e2:	57                   	push   edi
c001d5e3:	b9 03 00 00 00       	mov    ecx,0x3
c001d5e8:	83 ec 18             	sub    esp,0x18
c001d5eb:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d5ef:	fc                   	cld    
c001d5f0:	31 c0                	xor    eax,eax
c001d5f2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d5f4:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d5f9:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d5fe:	50                   	push   eax
c001d5ff:	6a 00                	push   0x0
c001d601:	6a 00                	push   0x0
c001d603:	6a 00                	push   0x0
c001d605:	6a 00                	push   0x0
c001d607:	6a 02                	push   0x2
c001d609:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d60d:	50                   	push   eax
c001d60e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d612:	e8 ed fc ff ff       	call   c001d304 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d617:	31 c0                	xor    eax,eax
c001d619:	83 c4 38             	add    esp,0x38
c001d61c:	5f                   	pop    edi
c001d61d:	c3                   	ret    

c001d61e <SATAPI::detectMedia()>:
c001d61e:	53                   	push   ebx
c001d61f:	83 ec 14             	sub    esp,0x14
c001d622:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d626:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d62c:	e8 47 05 ff ff       	call   c000db78 <VCache::writeWriteBuffer()>
c001d631:	59                   	pop    ecx
c001d632:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d638:	e8 2b 05 ff ff       	call   c000db68 <VCache::invalidateReadBuffer()>
c001d63d:	c7 04 24 d7 1d 02 c0 	mov    DWORD PTR [esp],0xc0021dd7
c001d644:	e8 ae d3 fe ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c001d649:	83 c4 10             	add    esp,0x10
c001d64c:	31 c0                	xor    eax,eax
c001d64e:	8b 14 85 20 74 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8be0]
c001d655:	85 d2                	test   edx,edx
c001d657:	74 0f                	je     c001d668 <SATAPI::detectMedia()+0x4a>
c001d659:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001d65f:	75 07                	jne    c001d668 <SATAPI::detectMedia()+0x4a>
c001d661:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001d668:	40                   	inc    eax
c001d669:	83 f8 1a             	cmp    eax,0x1a
c001d66c:	75 e0                	jne    c001d64e <SATAPI::detectMedia()+0x30>
c001d66e:	83 c4 08             	add    esp,0x8
c001d671:	5b                   	pop    ebx
c001d672:	c3                   	ret    
c001d673:	90                   	nop

c001d674 <SATAPI::open(int, int, void*)>:
c001d674:	56                   	push   esi
c001d675:	53                   	push   ebx
c001d676:	51                   	push   ecx
c001d677:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d67b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d67f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d689:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d68f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d699:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d69d:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d6a7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001d6ad:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d6b4:	e8 fa a6 fe ff       	call   c0007db3 <Phys::allocatePage()>
c001d6b9:	89 c6                	mov    esi,eax
c001d6bb:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001d6c1:	81 c6 00 10 00 00    	add    esi,0x1000
c001d6c7:	e8 e7 a6 fe ff       	call   c0007db3 <Phys::allocatePage()>
c001d6cc:	39 c6                	cmp    esi,eax
c001d6ce:	74 10                	je     c001d6e0 <SATAPI::open(int, int, void*)+0x6c>
c001d6d0:	83 ec 0c             	sub    esp,0xc
c001d6d3:	68 ec 1d 02 c0       	push   0xc0021dec
c001d6d8:	e8 4a 32 ff ff       	call   c0010927 <KePanic(char const*)>
c001d6dd:	83 c4 10             	add    esp,0x10
c001d6e0:	83 ec 0c             	sub    esp,0xc
c001d6e3:	6a 02                	push   0x2
c001d6e5:	e8 33 bf fe ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c001d6ea:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001d6f0:	6a 03                	push   0x3
c001d6f2:	50                   	push   eax
c001d6f3:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001d6f9:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001d6ff:	e8 00 c6 fe ff       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c001d704:	83 c4 14             	add    esp,0x14
c001d707:	68 78 01 00 00       	push   0x178
c001d70c:	e8 9d a3 fe ff       	call   c0007aae <malloc>
c001d711:	83 c4 0c             	add    esp,0xc
c001d714:	89 c6                	mov    esi,eax
c001d716:	6a 00                	push   0x0
c001d718:	68 ff ff ff 7f       	push   0x7fffffff
c001d71d:	6a 00                	push   0x0
c001d71f:	6a 00                	push   0x0
c001d721:	53                   	push   ebx
c001d722:	68 02 1e 02 c0       	push   0xc0021e02
c001d727:	50                   	push   eax
c001d728:	e8 a7 f8 fe ff       	call   c000cfd4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001d72d:	83 c4 14             	add    esp,0x14
c001d730:	56                   	push   esi
c001d731:	e8 5e f9 fe ff       	call   c000d094 <LogicalDisk::assignDriveLetter()>
c001d736:	5a                   	pop    edx
c001d737:	0f be c0             	movsx  eax,al
c001d73a:	59                   	pop    ecx
c001d73b:	50                   	push   eax
c001d73c:	68 54 1c 02 c0       	push   0xc0021c54
c001d741:	e8 b1 d2 fe ff       	call   c000a9f7 <Dbg::kprintf(char const*, ...)>
c001d746:	58                   	pop    eax
c001d747:	5a                   	pop    edx
c001d748:	56                   	push   esi
c001d749:	53                   	push   ebx
c001d74a:	e8 df e6 fe ff       	call   c000be2e <Device::addChild(Device*)>
c001d74f:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001d755:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d758:	e8 05 eb fe ff       	call   c000c262 <PhysicalDisk::startCache()>
c001d75d:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001d764:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d767:	e8 b2 fe ff ff       	call   c001d61e <SATAPI::detectMedia()>
c001d76c:	83 c4 14             	add    esp,0x14
c001d76f:	31 c0                	xor    eax,eax
c001d771:	5b                   	pop    ebx
c001d772:	5e                   	pop    esi
c001d773:	c3                   	ret    

c001d774 <SATAPI::read(unsigned long long, int, void*)>:
c001d774:	57                   	push   edi
c001d775:	56                   	push   esi
c001d776:	53                   	push   ebx
c001d777:	83 ec 30             	sub    esp,0x30
c001d77a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001d77e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001d782:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001d786:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d78a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d78e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d792:	83 fe 04             	cmp    esi,0x4
c001d795:	7e 10                	jle    c001d7a7 <SATAPI::read(unsigned long long, int, void*)+0x33>
c001d797:	83 ec 0c             	sub    esp,0xc
c001d79a:	68 10 1e 02 c0       	push   0xc0021e10
c001d79f:	e8 83 31 ff ff       	call   c0010927 <KePanic(char const*)>
c001d7a4:	83 c4 10             	add    esp,0x10
c001d7a7:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d7ad:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001d7b3:	51                   	push   ecx
c001d7b4:	50                   	push   eax
c001d7b5:	83 c0 02             	add    eax,0x2
c001d7b8:	c1 e0 07             	shl    eax,0x7
c001d7bb:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001d7c1:	50                   	push   eax
c001d7c2:	52                   	push   edx
c001d7c3:	e8 8c e1 ff ff       	call   c001b954 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001d7c8:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001d7cc:	b9 03 00 00 00       	mov    ecx,0x3
c001d7d1:	fc                   	cld    
c001d7d2:	31 c0                	xor    eax,eax
c001d7d4:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d7d6:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001d7db:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001d7e0:	83 c4 0c             	add    esp,0xc
c001d7e3:	6a 00                	push   0x0
c001d7e5:	6a 00                	push   0x0
c001d7e7:	6a 00                	push   0x0
c001d7e9:	6a 00                	push   0x0
c001d7eb:	6a 02                	push   0x2
c001d7ed:	8d 44 24 30          	lea    eax,[esp+0x30]
c001d7f1:	50                   	push   eax
c001d7f2:	53                   	push   ebx
c001d7f3:	e8 0c fb ff ff       	call   c001d304 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d7f8:	83 c4 20             	add    esp,0x20
c001d7fb:	85 c0                	test   eax,eax
c001d7fd:	75 44                	jne    c001d843 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001d7ff:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001d803:	b9 03 00 00 00       	mov    ecx,0x3
c001d808:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d80a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d80e:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001d813:	0f c8                	bswap  eax
c001d815:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001d819:	89 f0                	mov    eax,esi
c001d81b:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001d81f:	50                   	push   eax
c001d820:	56                   	push   esi
c001d821:	c1 e6 0b             	shl    esi,0xb
c001d824:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001d828:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d82c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d830:	56                   	push   esi
c001d831:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001d835:	50                   	push   eax
c001d836:	53                   	push   ebx
c001d837:	e8 c8 fa ff ff       	call   c001d304 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d83c:	83 c4 20             	add    esp,0x20
c001d83f:	85 c0                	test   eax,eax
c001d841:	74 14                	je     c001d857 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001d843:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d847:	83 ec 0c             	sub    esp,0xc
c001d84a:	53                   	push   ebx
c001d84b:	e8 ce fd ff ff       	call   c001d61e <SATAPI::detectMedia()>
c001d850:	83 c4 10             	add    esp,0x10
c001d853:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d857:	83 c4 30             	add    esp,0x30
c001d85a:	5b                   	pop    ebx
c001d85b:	5e                   	pop    esi
c001d85c:	5f                   	pop    edi
c001d85d:	c3                   	ret    

c001d85e <IOAPIC::close(int, int, void*)>:
c001d85e:	b8 00 00 00 00       	mov    eax,0x0
c001d863:	c3                   	ret    

c001d864 <apicGetBase()>:
c001d864:	55                   	push   ebp
c001d865:	89 e5                	mov    ebp,esp
c001d867:	83 ec 18             	sub    esp,0x18
c001d86a:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d86f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001d875:	83 e0 08             	and    eax,0x8
c001d878:	0f b6 c0             	movzx  eax,al
c001d87b:	85 c0                	test   eax,eax
c001d87d:	75 07                	jne    c001d886 <apicGetBase()+0x22>
c001d87f:	b8 00 00 00 00       	mov    eax,0x0
c001d884:	eb 21                	jmp    c001d8a7 <apicGetBase()+0x43>
c001d886:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d88b:	83 ec 08             	sub    esp,0x8
c001d88e:	6a 1b                	push   0x1b
c001d890:	50                   	push   eax
c001d891:	e8 22 98 fe ff       	call   c00070b8 <Computer::rdmsr(unsigned int)>
c001d896:	83 c4 10             	add    esp,0x10
c001d899:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d89c:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001d89f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d8a2:	25 00 00 ff ff       	and    eax,0xffff0000
c001d8a7:	c9                   	leave  
c001d8a8:	c3                   	ret    
c001d8a9:	90                   	nop

c001d8aa <IOAPIC::IOAPIC()>:
c001d8aa:	83 ec 0c             	sub    esp,0xc
c001d8ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8b1:	83 ec 08             	sub    esp,0x8
c001d8b4:	68 74 1e 02 c0       	push   0xc0021e74
c001d8b9:	50                   	push   eax
c001d8ba:	e8 07 e7 fe ff       	call   c000bfc6 <Device::Device(char const*)>
c001d8bf:	83 c4 10             	add    esp,0x10
c001d8c2:	ba 84 1e 02 c0       	mov    edx,0xc0021e84
c001d8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8cb:	89 10                	mov    DWORD PTR [eax],edx
c001d8cd:	90                   	nop
c001d8ce:	83 c4 0c             	add    esp,0xc
c001d8d1:	c3                   	ret    

c001d8d2 <apicOpen()>:
c001d8d2:	55                   	push   ebp
c001d8d3:	89 e5                	mov    ebp,esp
c001d8d5:	53                   	push   ebx
c001d8d6:	83 ec 34             	sub    esp,0x34
c001d8d9:	a0 a0 8b 02 c0       	mov    al,ds:0xc0028ba0
c001d8de:	83 f0 01             	xor    eax,0x1
c001d8e1:	0f b6 c0             	movzx  eax,al
c001d8e4:	85 c0                	test   eax,eax
c001d8e6:	0f 84 a3 00 00 00    	je     c001d98f <apicOpen()+0xbd>
c001d8ec:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001d8f0:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c001d8f5:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001d8f9:	0f b6 c0             	movzx  eax,al
c001d8fc:	39 c2                	cmp    edx,eax
c001d8fe:	0f 83 84 00 00 00    	jae    c001d988 <apicOpen()+0xb6>
c001d904:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001d90b:	83 ec 0c             	sub    esp,0xc
c001d90e:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001d911:	e8 98 a1 fe ff       	call   c0007aae <malloc>
c001d916:	83 c4 10             	add    esp,0x10
c001d919:	89 c3                	mov    ebx,eax
c001d91b:	83 ec 0c             	sub    esp,0xc
c001d91e:	53                   	push   ebx
c001d91f:	e8 86 ff ff ff       	call   c001d8aa <IOAPIC::IOAPIC()>
c001d924:	83 c4 10             	add    esp,0x10
c001d927:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001d92a:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001d92e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d931:	89 14 85 80 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7480],edx
c001d938:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c001d93d:	83 c0 01             	add    eax,0x1
c001d940:	a3 60 8b 02 c0       	mov    ds:0xc0028b60,eax
c001d945:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d94a:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001d950:	83 ec 08             	sub    esp,0x8
c001d953:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001d956:	50                   	push   eax
c001d957:	e8 d2 e4 fe ff       	call   c000be2e <Device::addChild(Device*)>
c001d95c:	83 c4 10             	add    esp,0x10
c001d95f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d962:	8b 00                	mov    eax,DWORD PTR [eax]
c001d964:	83 c0 08             	add    eax,0x8
c001d967:	8b 00                	mov    eax,DWORD PTR [eax]
c001d969:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001d96d:	6a 00                	push   0x0
c001d96f:	6a 00                	push   0x0
c001d971:	52                   	push   edx
c001d972:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001d975:	ff d0                	call   eax
c001d977:	83 c4 10             	add    esp,0x10
c001d97a:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001d97d:	83 c0 01             	add    eax,0x1
c001d980:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001d983:	e9 68 ff ff ff       	jmp    c001d8f0 <apicOpen()+0x1e>
c001d988:	c6 05 a0 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028ba0,0x1
c001d98f:	e8 d0 fe ff ff       	call   c001d864 <apicGetBase()>
c001d994:	05 f0 00 00 00       	add    eax,0xf0
c001d999:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001d99c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001d99f:	8b 00                	mov    eax,DWORD PTR [eax]
c001d9a1:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d9a4:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001d9ab:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001d9b2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001d9b5:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001d9b8:	89 10                	mov    DWORD PTR [eax],edx
c001d9ba:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001d9c1:	a1 d0 76 02 c0       	mov    eax,ds:0xc00276d0
c001d9c6:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001d9c9:	7d 7c                	jge    c001da47 <apicOpen()+0x175>
c001d9cb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d9ce:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d9d5:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001d9d8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d9db:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d9e2:	c1 e8 08             	shr    eax,0x8
c001d9e5:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001d9e9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d9ec:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d9f3:	c1 e8 18             	shr    eax,0x18
c001d9f6:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001d9f9:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001d9fd:	3d ff 00 00 00       	cmp    eax,0xff
c001da02:	75 3a                	jne    c001da3e <apicOpen()+0x16c>
c001da04:	e8 5b fe ff ff       	call   c001d864 <apicGetBase()>
c001da09:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001da0d:	83 fa 01             	cmp    edx,0x1
c001da10:	75 07                	jne    c001da19 <apicOpen()+0x147>
c001da12:	ba 60 03 00 00       	mov    edx,0x360
c001da17:	eb 05                	jmp    c001da1e <apicOpen()+0x14c>
c001da19:	ba 50 03 00 00       	mov    edx,0x350
c001da1e:	01 d0                	add    eax,edx
c001da20:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001da23:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001da26:	8b 00                	mov    eax,DWORD PTR [eax]
c001da28:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001da2b:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001da32:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001da36:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001da39:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001da3c:	89 10                	mov    DWORD PTR [eax],edx
c001da3e:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001da42:	e9 7a ff ff ff       	jmp    c001d9c1 <apicOpen()+0xef>
c001da47:	90                   	nop
c001da48:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001da4b:	c9                   	leave  
c001da4c:	c3                   	ret    
c001da4d:	90                   	nop

c001da4e <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001da4e:	55                   	push   ebp
c001da4f:	89 e5                	mov    ebp,esp
c001da51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da54:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001da5a:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001da5d:	72 1d                	jb     c001da7c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001da5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da62:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001da68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da6b:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001da71:	01 d0                	add    eax,edx
c001da73:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001da76:	73 04                	jae    c001da7c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001da78:	b0 01                	mov    al,0x1
c001da7a:	eb 02                	jmp    c001da7e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001da7c:	b0 00                	mov    al,0x0
c001da7e:	5d                   	pop    ebp
c001da7f:	c3                   	ret    

c001da80 <IOAPIC::read(int)>:
c001da80:	55                   	push   ebp
c001da81:	89 e5                	mov    ebp,esp
c001da83:	83 ec 10             	sub    esp,0x10
c001da86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da89:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001da8f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001da92:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001da95:	0f b6 d0             	movzx  edx,al
c001da98:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001da9b:	89 10                	mov    DWORD PTR [eax],edx
c001da9d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001daa0:	83 c0 10             	add    eax,0x10
c001daa3:	8b 00                	mov    eax,DWORD PTR [eax]
c001daa5:	c9                   	leave  
c001daa6:	c3                   	ret    
c001daa7:	90                   	nop

c001daa8 <IOAPIC::open(int, int, void*)>:
c001daa8:	55                   	push   ebp
c001daa9:	89 e5                	mov    ebp,esp
c001daab:	57                   	push   edi
c001daac:	56                   	push   esi
c001daad:	53                   	push   ebx
c001daae:	83 ec 04             	sub    esp,0x4
c001dab1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dab4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001dab7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dabd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dac0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dac6:	8b 14 85 c0 77 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8840]
c001dacd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dad0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001dad6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dad9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dadf:	8b 14 85 40 78 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd87c0]
c001dae6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dae9:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001daef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001daf2:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001daf8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dafb:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001db01:	0f b6 f0             	movzx  esi,al
c001db04:	89 d0                	mov    eax,edx
c001db06:	ba 00 00 00 00       	mov    edx,0x0
c001db0b:	89 c7                	mov    edi,eax
c001db0d:	83 e7 ff             	and    edi,0xffffffff
c001db10:	89 f9                	mov    ecx,edi
c001db12:	0f b6 da             	movzx  ebx,dl
c001db15:	89 c8                	mov    eax,ecx
c001db17:	89 da                	mov    edx,ebx
c001db19:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001db1c:	8d 5e 08             	lea    ebx,[esi+0x8]
c001db1f:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001db23:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001db27:	83 e0 00             	and    eax,0x0
c001db2a:	09 d0                	or     eax,edx
c001db2c:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001db30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001db33:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001db39:	8d 50 01             	lea    edx,[eax+0x1]
c001db3c:	88 d1                	mov    cl,dl
c001db3e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001db41:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001db47:	0f b6 d0             	movzx  edx,al
c001db4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001db4d:	83 c2 08             	add    edx,0x8
c001db50:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001db54:	0f b6 c9             	movzx  ecx,cl
c001db57:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001db5d:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001db61:	6a 01                	push   0x1
c001db63:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001db66:	e8 15 ff ff ff       	call   c001da80 <IOAPIC::read(int)>
c001db6b:	83 c4 08             	add    esp,0x8
c001db6e:	c1 f8 10             	sar    eax,0x10
c001db71:	0f b6 c0             	movzx  eax,al
c001db74:	8d 50 01             	lea    edx,[eax+0x1]
c001db77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001db7a:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001db80:	b8 00 00 00 00       	mov    eax,0x0
c001db85:	8d 65 f4             	lea    esp,[ebp-0xc]
c001db88:	5b                   	pop    ebx
c001db89:	5e                   	pop    esi
c001db8a:	5f                   	pop    edi
c001db8b:	5d                   	pop    ebp
c001db8c:	c3                   	ret    
c001db8d:	90                   	nop

c001db8e <IOAPIC::write(int, int)>:
c001db8e:	55                   	push   ebp
c001db8f:	89 e5                	mov    ebp,esp
c001db91:	83 ec 10             	sub    esp,0x10
c001db94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001db97:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001db9d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001dba0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dba3:	0f b6 d0             	movzx  edx,al
c001dba6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001dba9:	89 10                	mov    DWORD PTR [eax],edx
c001dbab:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001dbae:	8d 50 10             	lea    edx,[eax+0x10]
c001dbb1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001dbb4:	89 02                	mov    DWORD PTR [edx],eax
c001dbb6:	90                   	nop
c001dbb7:	c9                   	leave  
c001dbb8:	c3                   	ret    
c001dbb9:	90                   	nop

c001dbba <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001dbba:	55                   	push   ebp
c001dbbb:	89 e5                	mov    ebp,esp
c001dbbd:	53                   	push   ebx
c001dbbe:	83 ec 2c             	sub    esp,0x2c
c001dbc1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dbc4:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001dbc7:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001dbca:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001dbcd:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001dbd0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001dbd3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001dbd6:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001dbd9:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001dbdc:	88 d8                	mov    al,bl
c001dbde:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001dbe1:	88 c8                	mov    al,cl
c001dbe3:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001dbe6:	88 d0                	mov    al,dl
c001dbe8:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001dbeb:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001dbef:	83 c0 08             	add    eax,0x8
c001dbf2:	01 c0                	add    eax,eax
c001dbf4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001dbf7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001dbfb:	83 c0 08             	add    eax,0x8
c001dbfe:	01 c0                	add    eax,eax
c001dc00:	83 c0 01             	add    eax,0x1
c001dc03:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001dc06:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001dc09:	50                   	push   eax
c001dc0a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dc0d:	e8 6e fe ff ff       	call   c001da80 <IOAPIC::read(int)>
c001dc12:	83 c4 08             	add    esp,0x8
c001dc15:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001dc18:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001dc1f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001dc22:	c1 e0 18             	shl    eax,0x18
c001dc25:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001dc28:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001dc2b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001dc2e:	52                   	push   edx
c001dc2f:	50                   	push   eax
c001dc30:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dc33:	e8 56 ff ff ff       	call   c001db8e <IOAPIC::write(int, int)>
c001dc38:	83 c4 0c             	add    esp,0xc
c001dc3b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dc3e:	50                   	push   eax
c001dc3f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dc42:	e8 39 fe ff ff       	call   c001da80 <IOAPIC::read(int)>
c001dc47:	83 c4 08             	add    esp,0x8
c001dc4a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001dc4d:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001dc54:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001dc5b:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001dc62:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001dc66:	85 c0                	test   eax,eax
c001dc68:	74 09                	je     c001dc73 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001dc6a:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001dc71:	eb 07                	jmp    c001dc7a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001dc73:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001dc7a:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001dc7e:	85 c0                	test   eax,eax
c001dc80:	74 09                	je     c001dc8b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001dc82:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001dc89:	eb 07                	jmp    c001dc92 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001dc8b:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001dc92:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001dc99:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001dc9d:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001dca0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001dca3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dca6:	52                   	push   edx
c001dca7:	50                   	push   eax
c001dca8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dcab:	e8 de fe ff ff       	call   c001db8e <IOAPIC::write(int, int)>
c001dcb0:	83 c4 0c             	add    esp,0xc
c001dcb3:	90                   	nop
c001dcb4:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001dcb7:	c9                   	leave  
c001dcb8:	c3                   	ret    
c001dcb9:	66 90                	xchg   ax,ax
c001dcbb:	90                   	nop

c001dcbc <APICTimer::close(int, int, void*)>:
c001dcbc:	b8 00 00 00 00       	mov    eax,0x0
c001dcc1:	c3                   	ret    
c001dcc2:	66 90                	xchg   ax,ax

c001dcc4 <apicTimerHandler(regs*, void*)>:
c001dcc4:	83 ec 0c             	sub    esp,0xc
c001dcc7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dccb:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dccd:	b8 10 27 00 00       	mov    eax,0x2710
c001dcd2:	ba 00 00 00 00       	mov    edx,0x0
c001dcd7:	f7 f1                	div    ecx
c001dcd9:	83 ec 0c             	sub    esp,0xc
c001dcdc:	50                   	push   eax
c001dcdd:	e8 ae fb fe ff       	call   c000d890 <timerHandler(unsigned int)>
c001dce2:	83 c4 10             	add    esp,0x10
c001dce5:	90                   	nop
c001dce6:	83 c4 0c             	add    esp,0xc
c001dce9:	c3                   	ret    
c001dcea:	66 90                	xchg   ax,ax

c001dcec <APICTimer::open(int, int, void*)>:
c001dcec:	83 ec 0c             	sub    esp,0xc
c001dcef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcf3:	8b 00                	mov    eax,DWORD PTR [eax]
c001dcf5:	83 c0 24             	add    eax,0x24
c001dcf8:	8b 00                	mov    eax,DWORD PTR [eax]
c001dcfa:	83 ec 08             	sub    esp,0x8
c001dcfd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dd01:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dd05:	ff d0                	call   eax
c001dd07:	83 c4 10             	add    esp,0x10
c001dd0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd0e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dd12:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001dd18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd1c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dd20:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001dd26:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dd2a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001dd30:	83 ec 0c             	sub    esp,0xc
c001dd33:	51                   	push   ecx
c001dd34:	6a 01                	push   0x1
c001dd36:	68 c4 dc 01 c0       	push   0xc001dcc4
c001dd3b:	52                   	push   edx
c001dd3c:	50                   	push   eax
c001dd3d:	e8 98 e0 fe ff       	call   c000bdda <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dd42:	83 c4 20             	add    esp,0x20
c001dd45:	89 c2                	mov    edx,eax
c001dd47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd4b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001dd51:	b8 00 00 00 00       	mov    eax,0x0
c001dd56:	83 c4 0c             	add    esp,0xc
c001dd59:	c3                   	ret    
c001dd5a:	66 90                	xchg   ax,ax

c001dd5c <APICTimer::write(int)>:
c001dd5c:	83 ec 0c             	sub    esp,0xc
c001dd5f:	83 ec 0c             	sub    esp,0xc
c001dd62:	68 a8 1e 02 c0       	push   0xc0021ea8
c001dd67:	e8 bb 2b ff ff       	call   c0010927 <KePanic(char const*)>
c001dd6c:	83 c4 10             	add    esp,0x10
c001dd6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dd77:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dd7d:	90                   	nop
c001dd7e:	83 c4 0c             	add    esp,0xc
c001dd81:	c3                   	ret    
c001dd82:	66 90                	xchg   ax,ax

c001dd84 <APICTimer::APICTimer()>:
c001dd84:	83 ec 0c             	sub    esp,0xc
c001dd87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd8b:	83 ec 08             	sub    esp,0x8
c001dd8e:	68 b8 1e 02 c0       	push   0xc0021eb8
c001dd93:	50                   	push   eax
c001dd94:	e8 2b fa fe ff       	call   c000d7c4 <Timer::Timer(char const*)>
c001dd99:	83 c4 10             	add    esp,0x10
c001dd9c:	ba cc 1e 02 c0       	mov    edx,0xc0021ecc
c001dda1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dda5:	89 10                	mov    DWORD PTR [eax],edx
c001dda7:	90                   	nop
c001dda8:	83 c4 0c             	add    esp,0xc
c001ddab:	c3                   	ret    

c001ddac <PIT::write(int)>:
c001ddac:	83 ec 10             	sub    esp,0x10
c001ddaf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ddb3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ddb7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ddbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ddc1:	a3 a4 8b 02 c0       	mov    ds:0xc0028ba4,eax
c001ddc6:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ddcb:	89 c2                	mov    edx,eax
c001ddcd:	c1 fa 1f             	sar    edx,0x1f
c001ddd0:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001ddd4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ddd8:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001dddf:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001dde4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001dde8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001dded:	ee                   	out    dx,al
c001ddee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ddf2:	0f b6 c0             	movzx  eax,al
c001ddf5:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001ddfc:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001de00:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001de04:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001de09:	ee                   	out    dx,al
c001de0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001de0e:	c1 f8 08             	sar    eax,0x8
c001de11:	0f b6 c0             	movzx  eax,al
c001de14:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001de1b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001de1f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001de23:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001de28:	ee                   	out    dx,al
c001de29:	90                   	nop
c001de2a:	83 c4 10             	add    esp,0x10
c001de2d:	c3                   	ret    
c001de2e:	66 90                	xchg   ax,ax

c001de30 <pitHandler(regs*, void*)>:
c001de30:	83 ec 0c             	sub    esp,0xc
c001de33:	8b 0d a4 8b 02 c0    	mov    ecx,DWORD PTR ds:0xc0028ba4
c001de39:	b8 10 27 00 00       	mov    eax,0x2710
c001de3e:	89 c2                	mov    edx,eax
c001de40:	c1 fa 1f             	sar    edx,0x1f
c001de43:	f7 f9                	idiv   ecx
c001de45:	83 ec 0c             	sub    esp,0xc
c001de48:	50                   	push   eax
c001de49:	e8 42 fa fe ff       	call   c000d890 <timerHandler(unsigned int)>
c001de4e:	83 c4 10             	add    esp,0x10
c001de51:	90                   	nop
c001de52:	83 c4 0c             	add    esp,0xc
c001de55:	c3                   	ret    
c001de56:	66 90                	xchg   ax,ax

c001de58 <PIT::open(int, int, void*)>:
c001de58:	83 ec 0c             	sub    esp,0xc
c001de5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de5f:	8b 00                	mov    eax,DWORD PTR [eax]
c001de61:	83 c0 24             	add    eax,0x24
c001de64:	8b 00                	mov    eax,DWORD PTR [eax]
c001de66:	83 ec 08             	sub    esp,0x8
c001de69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001de6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001de71:	ff d0                	call   eax
c001de73:	83 c4 10             	add    esp,0x10
c001de76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de7a:	83 ec 0c             	sub    esp,0xc
c001de7d:	6a 00                	push   0x0
c001de7f:	6a 01                	push   0x1
c001de81:	68 30 de 01 c0       	push   0xc001de30
c001de86:	6a 00                	push   0x0
c001de88:	50                   	push   eax
c001de89:	e8 4c df fe ff       	call   c000bdda <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001de8e:	83 c4 20             	add    esp,0x20
c001de91:	89 c2                	mov    edx,eax
c001de93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de97:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001de9d:	b8 00 00 00 00       	mov    eax,0x0
c001dea2:	83 c4 0c             	add    esp,0xc
c001dea5:	c3                   	ret    
c001dea6:	66 90                	xchg   ax,ax

c001dea8 <PIT::close(int, int, void*)>:
c001dea8:	83 ec 0c             	sub    esp,0xc
c001deab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001deaf:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001deb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001debd:	6a 01                	push   0x1
c001debf:	68 30 de 01 c0       	push   0xc001de30
c001dec4:	6a 00                	push   0x0
c001dec6:	50                   	push   eax
c001dec7:	e8 44 df fe ff       	call   c000be10 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001decc:	83 c4 10             	add    esp,0x10
c001decf:	b8 00 00 00 00       	mov    eax,0x0
c001ded4:	83 c4 0c             	add    esp,0xc
c001ded7:	c3                   	ret    

c001ded8 <PIT::PIT()>:
c001ded8:	83 ec 0c             	sub    esp,0xc
c001dedb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dedf:	83 ec 08             	sub    esp,0x8
c001dee2:	68 f4 1e 02 c0       	push   0xc0021ef4
c001dee7:	50                   	push   eax
c001dee8:	e8 d7 f8 fe ff       	call   c000d7c4 <Timer::Timer(char const*)>
c001deed:	83 c4 10             	add    esp,0x10
c001def0:	ba 1c 1f 02 c0       	mov    edx,0xc0021f1c
c001def5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001def9:	89 10                	mov    DWORD PTR [eax],edx
c001defb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001deff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001df05:	0f b6 d0             	movzx  edx,al
c001df08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df0c:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001df13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df17:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001df1d:	0f b6 d0             	movzx  edx,al
c001df20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df24:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001df29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df2d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001df33:	8d 50 01             	lea    edx,[eax+0x1]
c001df36:	88 d1                	mov    cl,dl
c001df38:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001df3c:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001df42:	0f b6 d0             	movzx  edx,al
c001df45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df49:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001df4d:	83 e1 3f             	and    ecx,0x3f
c001df50:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001df54:	90                   	nop
c001df55:	83 c4 0c             	add    esp,0xc
c001df58:	c3                   	ret    
c001df59:	66 90                	xchg   ax,ax
c001df5b:	66 90                	xchg   ax,ax
c001df5d:	66 90                	xchg   ax,ax
c001df5f:	90                   	nop

c001df60 <avxDetect>:
c001df60:	b8 01 00 00 00       	mov    eax,0x1
c001df65:	0f a2                	cpuid  
c001df67:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001df6d:	74 15                	je     c001df84 <avxDetect.noAVX>
c001df6f:	b8 01 00 00 00       	mov    eax,0x1
c001df74:	0f a2                	cpuid  
c001df76:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001df7c:	74 06                	je     c001df84 <avxDetect.noAVX>
c001df7e:	b8 01 00 00 00       	mov    eax,0x1
c001df83:	c3                   	ret    

c001df84 <avxDetect.noAVX>:
c001df84:	b8 00 00 00 00       	mov    eax,0x0
c001df89:	c3                   	ret    

c001df8a <avxSave>:
c001df8a:	53                   	push   ebx
c001df8b:	52                   	push   edx
c001df8c:	31 c0                	xor    eax,eax
c001df8e:	48                   	dec    eax
c001df8f:	89 c2                	mov    edx,eax
c001df91:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001df95:	0f ae 23             	xsave  [ebx]
c001df98:	5a                   	pop    edx
c001df99:	5b                   	pop    ebx
c001df9a:	c3                   	ret    

c001df9b <avxLoad>:
c001df9b:	53                   	push   ebx
c001df9c:	52                   	push   edx
c001df9d:	31 c0                	xor    eax,eax
c001df9f:	48                   	dec    eax
c001dfa0:	89 c2                	mov    edx,eax
c001dfa2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001dfa6:	0f ae 2b             	xrstor [ebx]
c001dfa9:	5a                   	pop    edx
c001dfaa:	5b                   	pop    ebx
c001dfab:	c3                   	ret    

c001dfac <avxInit>:
c001dfac:	e8 67 03 00 00       	call   c001e318 <sseInit>
c001dfb1:	50                   	push   eax
c001dfb2:	51                   	push   ecx
c001dfb3:	0f 20 e0             	mov    eax,cr4
c001dfb6:	0d 00 00 04 00       	or     eax,0x40000
c001dfbb:	0f 22 e0             	mov    cr4,eax
c001dfbe:	31 c9                	xor    ecx,ecx
c001dfc0:	0f 01 d0             	xgetbv 
c001dfc3:	0d 07 00 00 00       	or     eax,0x7
c001dfc8:	0f 01 d1             	xsetbv 
c001dfcb:	59                   	pop    ecx
c001dfcc:	58                   	pop    eax
c001dfcd:	c3                   	ret    

c001dfce <avxClose>:
c001dfce:	c3                   	ret    

c001dfcf <wouldSheSayYes>:
c001dfcf:	c3                   	ret    
c001dfd0:	49                   	dec    ecx
c001dfd1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001dfd5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001dfd9:	75 20                	jne    c001dffb <isr0+0xb>
c001dfdb:	4e                   	dec    esi
c001dfdc:	79 61                	jns    c001e03f <isr7+0x3>
c001dfde:	68 2e 2e 2e 00       	push   0x2e2e2e
c001dfe3:	66 90                	xchg   ax,ax
c001dfe5:	66 90                	xchg   ax,ax
c001dfe7:	66 90                	xchg   ax,ax
c001dfe9:	66 90                	xchg   ax,ax
c001dfeb:	66 90                	xchg   ax,ax
c001dfed:	66 90                	xchg   ax,ax
c001dfef:	90                   	nop

c001dff0 <isr0>:
c001dff0:	fa                   	cli    
c001dff1:	68 00 00 00 00       	push   0x0
c001dff6:	68 00 00 00 00       	push   0x0
c001dffb:	e9 56 01 00 00       	jmp    c001e156 <int_common_stub>

c001e000 <isr1>:
c001e000:	fa                   	cli    
c001e001:	6a 00                	push   0x0
c001e003:	6a 01                	push   0x1
c001e005:	e9 4c 01 00 00       	jmp    c001e156 <int_common_stub>

c001e00a <isr2>:
c001e00a:	fa                   	cli    
c001e00b:	6a 00                	push   0x0
c001e00d:	6a 02                	push   0x2
c001e00f:	e9 42 01 00 00       	jmp    c001e156 <int_common_stub>

c001e014 <isr3>:
c001e014:	fa                   	cli    
c001e015:	6a 00                	push   0x0
c001e017:	6a 03                	push   0x3
c001e019:	e9 38 01 00 00       	jmp    c001e156 <int_common_stub>

c001e01e <isr4>:
c001e01e:	fa                   	cli    
c001e01f:	6a 00                	push   0x0
c001e021:	6a 04                	push   0x4
c001e023:	e9 2e 01 00 00       	jmp    c001e156 <int_common_stub>

c001e028 <isr5>:
c001e028:	fa                   	cli    
c001e029:	6a 00                	push   0x0
c001e02b:	6a 05                	push   0x5
c001e02d:	e9 24 01 00 00       	jmp    c001e156 <int_common_stub>

c001e032 <isr6>:
c001e032:	fa                   	cli    
c001e033:	6a 00                	push   0x0
c001e035:	6a 06                	push   0x6
c001e037:	e9 1a 01 00 00       	jmp    c001e156 <int_common_stub>

c001e03c <isr7>:
c001e03c:	fa                   	cli    
c001e03d:	6a 00                	push   0x0
c001e03f:	6a 07                	push   0x7
c001e041:	e9 10 01 00 00       	jmp    c001e156 <int_common_stub>

c001e046 <isr8>:
c001e046:	fa                   	cli    
c001e047:	6a 08                	push   0x8
c001e049:	e9 08 01 00 00       	jmp    c001e156 <int_common_stub>

c001e04e <isr9>:
c001e04e:	fa                   	cli    
c001e04f:	6a 00                	push   0x0
c001e051:	6a 09                	push   0x9
c001e053:	e9 fe 00 00 00       	jmp    c001e156 <int_common_stub>

c001e058 <isr10>:
c001e058:	fa                   	cli    
c001e059:	6a 0a                	push   0xa
c001e05b:	e9 f6 00 00 00       	jmp    c001e156 <int_common_stub>

c001e060 <isr11>:
c001e060:	fa                   	cli    
c001e061:	6a 0b                	push   0xb
c001e063:	e9 ee 00 00 00       	jmp    c001e156 <int_common_stub>

c001e068 <isr12>:
c001e068:	fa                   	cli    
c001e069:	6a 0c                	push   0xc
c001e06b:	e9 e6 00 00 00       	jmp    c001e156 <int_common_stub>

c001e070 <isr13>:
c001e070:	fa                   	cli    
c001e071:	6a 0d                	push   0xd
c001e073:	53                   	push   ebx
c001e074:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e078:	81 fb 46 e2 01 c0    	cmp    ebx,0xc001e246
c001e07e:	5b                   	pop    ebx
c001e07f:	0f 84 c3 01 00 00    	je     c001e248 <finishSignal2>
c001e085:	e9 cc 00 00 00       	jmp    c001e156 <int_common_stub>

c001e08a <isr14>:
c001e08a:	fa                   	cli    
c001e08b:	6a 0e                	push   0xe
c001e08d:	e9 c4 00 00 00       	jmp    c001e156 <int_common_stub>

c001e092 <isr15>:
c001e092:	fa                   	cli    
c001e093:	6a 00                	push   0x0
c001e095:	6a 0f                	push   0xf
c001e097:	e9 ba 00 00 00       	jmp    c001e156 <int_common_stub>

c001e09c <isr16>:
c001e09c:	fa                   	cli    
c001e09d:	6a 00                	push   0x0
c001e09f:	6a 10                	push   0x10
c001e0a1:	e9 b0 00 00 00       	jmp    c001e156 <int_common_stub>

c001e0a6 <isr17>:
c001e0a6:	fa                   	cli    
c001e0a7:	6a 00                	push   0x0
c001e0a9:	6a 11                	push   0x11
c001e0ab:	e9 a6 00 00 00       	jmp    c001e156 <int_common_stub>

c001e0b0 <isr18>:
c001e0b0:	fa                   	cli    
c001e0b1:	6a 00                	push   0x0
c001e0b3:	6a 12                	push   0x12
c001e0b5:	e9 9c 00 00 00       	jmp    c001e156 <int_common_stub>

c001e0ba <irq3>:
c001e0ba:	fa                   	cli    
c001e0bb:	6a 00                	push   0x0
c001e0bd:	6a 23                	push   0x23
c001e0bf:	e9 92 00 00 00       	jmp    c001e156 <int_common_stub>

c001e0c4 <irq4>:
c001e0c4:	fa                   	cli    
c001e0c5:	6a 00                	push   0x0
c001e0c7:	6a 24                	push   0x24
c001e0c9:	e9 88 00 00 00       	jmp    c001e156 <int_common_stub>

c001e0ce <irq5>:
c001e0ce:	fa                   	cli    
c001e0cf:	6a 00                	push   0x0
c001e0d1:	6a 25                	push   0x25
c001e0d3:	e9 7e 00 00 00       	jmp    c001e156 <int_common_stub>

c001e0d8 <irq6>:
c001e0d8:	fa                   	cli    
c001e0d9:	6a 00                	push   0x0
c001e0db:	6a 26                	push   0x26
c001e0dd:	e9 74 00 00 00       	jmp    c001e156 <int_common_stub>

c001e0e2 <irq7>:
c001e0e2:	fa                   	cli    
c001e0e3:	6a 00                	push   0x0
c001e0e5:	6a 27                	push   0x27
c001e0e7:	e9 6a 00 00 00       	jmp    c001e156 <int_common_stub>

c001e0ec <irq8>:
c001e0ec:	fa                   	cli    
c001e0ed:	6a 00                	push   0x0
c001e0ef:	6a 28                	push   0x28
c001e0f1:	e9 60 00 00 00       	jmp    c001e156 <int_common_stub>

c001e0f6 <irq9>:
c001e0f6:	fa                   	cli    
c001e0f7:	6a 00                	push   0x0
c001e0f9:	6a 29                	push   0x29
c001e0fb:	e9 56 00 00 00       	jmp    c001e156 <int_common_stub>

c001e100 <irq10>:
c001e100:	fa                   	cli    
c001e101:	6a 00                	push   0x0
c001e103:	6a 2a                	push   0x2a
c001e105:	e9 4c 00 00 00       	jmp    c001e156 <int_common_stub>

c001e10a <irq11>:
c001e10a:	fa                   	cli    
c001e10b:	6a 00                	push   0x0
c001e10d:	6a 2b                	push   0x2b
c001e10f:	e9 42 00 00 00       	jmp    c001e156 <int_common_stub>

c001e114 <irq12>:
c001e114:	fa                   	cli    
c001e115:	6a 00                	push   0x0
c001e117:	6a 2c                	push   0x2c
c001e119:	e9 38 00 00 00       	jmp    c001e156 <int_common_stub>

c001e11e <irq13>:
c001e11e:	fa                   	cli    
c001e11f:	6a 00                	push   0x0
c001e121:	6a 2d                	push   0x2d
c001e123:	e9 2e 00 00 00       	jmp    c001e156 <int_common_stub>

c001e128 <irq14>:
c001e128:	fa                   	cli    
c001e129:	6a 00                	push   0x0
c001e12b:	6a 2e                	push   0x2e
c001e12d:	e9 24 00 00 00       	jmp    c001e156 <int_common_stub>

c001e132 <irq15>:
c001e132:	fa                   	cli    
c001e133:	6a 00                	push   0x0
c001e135:	6a 2f                	push   0x2f
c001e137:	e9 1a 00 00 00       	jmp    c001e156 <int_common_stub>

c001e13c <irq1>:
c001e13c:	fa                   	cli    
c001e13d:	6a 00                	push   0x0
c001e13f:	6a 21                	push   0x21
c001e141:	eb 13                	jmp    c001e156 <int_common_stub>

c001e143 <irq2>:
c001e143:	fa                   	cli    
c001e144:	6a 00                	push   0x0
c001e146:	6a 22                	push   0x22
c001e148:	eb 0c                	jmp    c001e156 <int_common_stub>

c001e14a <isr96>:
c001e14a:	6a 00                	push   0x0
c001e14c:	6a 60                	push   0x60
c001e14e:	fb                   	sti    
c001e14f:	eb 37                	jmp    c001e188 <syscall_common_stub>

c001e151 <irq0>:
c001e151:	fa                   	cli    
c001e152:	6a 00                	push   0x0
c001e154:	6a 20                	push   0x20

c001e156 <int_common_stub>:
c001e156:	60                   	pusha  
c001e157:	1e                   	push   ds
c001e158:	06                   	push   es
c001e159:	0f a0                	push   fs
c001e15b:	0f a8                	push   gs
c001e15d:	66 b8 10 00          	mov    ax,0x10
c001e161:	66 8e d8             	mov    ds,ax
c001e164:	66 8e c0             	mov    es,ax
c001e167:	66 8e e0             	mov    fs,ax
c001e16a:	66 8e e8             	mov    gs,ax
c001e16d:	54                   	push   esp
c001e16e:	fc                   	cld    
c001e16f:	e8 64 e1 fe ff       	call   c000c2d8 <int_handler>
c001e174:	81 c4 04 00 00 00    	add    esp,0x4
c001e17a:	0f a9                	pop    gs
c001e17c:	0f a1                	pop    fs
c001e17e:	07                   	pop    es
c001e17f:	1f                   	pop    ds
c001e180:	61                   	popa   
c001e181:	81 c4 08 00 00 00    	add    esp,0x8
c001e187:	cf                   	iret   

c001e188 <syscall_common_stub>:
c001e188:	60                   	pusha  
c001e189:	1e                   	push   ds
c001e18a:	06                   	push   es
c001e18b:	0f a0                	push   fs
c001e18d:	0f a8                	push   gs
c001e18f:	66 b8 10 00          	mov    ax,0x10
c001e193:	66 8e d8             	mov    ds,ax
c001e196:	66 8e c0             	mov    es,ax
c001e199:	66 8e e0             	mov    fs,ax
c001e19c:	66 8e e8             	mov    gs,ax
c001e19f:	54                   	push   esp
c001e1a0:	fc                   	cld    
c001e1a1:	e8 32 e1 fe ff       	call   c000c2d8 <int_handler>
c001e1a6:	81 c4 04 00 00 00    	add    esp,0x4
c001e1ac:	0f a9                	pop    gs
c001e1ae:	0f a1                	pop    fs
c001e1b0:	07                   	pop    es
c001e1b1:	1f                   	pop    ds
c001e1b2:	e8 78 2d ff ff       	call   c0010f2f <KiCheckSignalZ>
c001e1b7:	3d 00 00 00 00       	cmp    eax,0x0
c001e1bc:	0f 84 c0 00 00 00    	je     c001e282 <skipSignals>
c001e1c2:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001e1c7:	61                   	popa   
c001e1c8:	53                   	push   ebx
c001e1c9:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001e1cf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001e1d2:	5b                   	pop    ebx
c001e1d3:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001e1d8:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001e1db:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001e1de:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e1e1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001e1e4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001e1e7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001e1ea:	81 c4 08 00 00 00    	add    esp,0x8
c001e1f0:	5e                   	pop    esi
c001e1f1:	5b                   	pop    ebx
c001e1f2:	59                   	pop    ecx
c001e1f3:	5a                   	pop    edx
c001e1f4:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001e1f7:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001e1fa:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001e1fd:	52                   	push   edx
c001e1fe:	51                   	push   ecx
c001e1ff:	53                   	push   ebx
c001e200:	56                   	push   esi
c001e201:	81 ec 08 00 00 00    	sub    esp,0x8
c001e207:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001e20a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001e20d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001e210:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e213:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e216:	60                   	pusha  
c001e217:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001e21d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001e220:	89 e3                	mov    ebx,esp
c001e222:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001e225:	52                   	push   edx
c001e226:	68 46 e2 01 c0       	push   0xc001e246
c001e22b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001e22e:	89 dc                	mov    esp,ebx
c001e230:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001e233:	68 23 00 00 00       	push   0x23
c001e238:	51                   	push   ecx
c001e239:	68 02 02 00 00       	push   0x202
c001e23e:	68 1b 00 00 00       	push   0x1b
c001e243:	ff 36                	push   DWORD PTR [esi]
c001e245:	cf                   	iret   

c001e246 <finishSignal>:
c001e246:	cd 0f                	int    0xf

c001e248 <finishSignal2>:
c001e248:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001e24e:	e8 59 2d ff ff       	call   c0010fac <KiFinishSignalZ>
c001e253:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001e259:	68 23 00 00 00       	push   0x23
c001e25e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001e261:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001e264:	68 1b 00 00 00       	push   0x1b
c001e269:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001e26c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e26f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001e272:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001e275:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e278:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001e27b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001e27e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001e281:	cf                   	iret   

c001e282 <skipSignals>:
c001e282:	61                   	popa   
c001e283:	81 c4 08 00 00 00    	add    esp,0x8
c001e289:	cf                   	iret   
c001e28a:	90                   	nop
c001e28b:	90                   	nop

c001e28c <irq16>:
c001e28c:	fa                   	cli    
c001e28d:	6a 00                	push   0x0
c001e28f:	6a 30                	push   0x30
c001e291:	e9 c0 fe ff ff       	jmp    c001e156 <int_common_stub>

c001e296 <irq17>:
c001e296:	fa                   	cli    
c001e297:	6a 00                	push   0x0
c001e299:	6a 31                	push   0x31
c001e29b:	e9 b6 fe ff ff       	jmp    c001e156 <int_common_stub>

c001e2a0 <irq18>:
c001e2a0:	fa                   	cli    
c001e2a1:	6a 00                	push   0x0
c001e2a3:	6a 32                	push   0x32
c001e2a5:	e9 ac fe ff ff       	jmp    c001e156 <int_common_stub>

c001e2aa <irq19>:
c001e2aa:	fa                   	cli    
c001e2ab:	6a 00                	push   0x0
c001e2ad:	6a 33                	push   0x33
c001e2af:	e9 a2 fe ff ff       	jmp    c001e156 <int_common_stub>

c001e2b4 <irq20>:
c001e2b4:	fa                   	cli    
c001e2b5:	6a 00                	push   0x0
c001e2b7:	6a 34                	push   0x34
c001e2b9:	e9 98 fe ff ff       	jmp    c001e156 <int_common_stub>

c001e2be <irq21>:
c001e2be:	fa                   	cli    
c001e2bf:	6a 00                	push   0x0
c001e2c1:	6a 35                	push   0x35
c001e2c3:	e9 8e fe ff ff       	jmp    c001e156 <int_common_stub>

c001e2c8 <irq22>:
c001e2c8:	fa                   	cli    
c001e2c9:	6a 00                	push   0x0
c001e2cb:	6a 36                	push   0x36
c001e2cd:	e9 84 fe ff ff       	jmp    c001e156 <int_common_stub>

c001e2d2 <irq23>:
c001e2d2:	fa                   	cli    
c001e2d3:	6a 00                	push   0x0
c001e2d5:	6a 37                	push   0x37
c001e2d7:	e9 7a fe ff ff       	jmp    c001e156 <int_common_stub>
c001e2dc:	66 90                	xchg   ax,ax
c001e2de:	66 90                	xchg   ax,ax

c001e2e0 <i386GetRDRAND>:
c001e2e0:	b9 64 00 00 00       	mov    ecx,0x64

c001e2e5 <retry>:
c001e2e5:	0f c7 f0             	rdrand eax
c001e2e8:	72 05                	jb     c001e2ef <retry.done>
c001e2ea:	e2 f9                	loop   c001e2e5 <retry>

c001e2ec <retry.fail>:
c001e2ec:	31 c0                	xor    eax,eax
c001e2ee:	c3                   	ret    

c001e2ef <retry.done>:
c001e2ef:	c3                   	ret    

c001e2f0 <absolutelyNoChanceInHell>:
c001e2f0:	b8 01 00 00 00       	mov    eax,0x1
c001e2f5:	0f a2                	cpuid  
c001e2f7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001e2fd:	74 06                	je     c001e305 <sseDetect.noSSE>
c001e2ff:	b8 01 00 00 00       	mov    eax,0x1
c001e304:	c3                   	ret    

c001e305 <sseDetect.noSSE>:
c001e305:	31 c0                	xor    eax,eax
c001e307:	c3                   	ret    

c001e308 <sseSave>:
c001e308:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e30c:	0f ae 00             	fxsave [eax]
c001e30f:	c3                   	ret    

c001e310 <sseLoad>:
c001e310:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e314:	0f ae 08             	fxrstor [eax]
c001e317:	c3                   	ret    

c001e318 <sseInit>:
c001e318:	e8 42 00 00 00       	call   c001e35f <x87Init>
c001e31d:	0f 20 e0             	mov    eax,cr4
c001e320:	66 0d 00 06          	or     ax,0x600
c001e324:	0f 22 e0             	mov    cr4,eax
c001e327:	c3                   	ret    

c001e328 <sseClose>:
c001e328:	c3                   	ret    
c001e329:	66 90                	xchg   ax,ax
c001e32b:	66 90                	xchg   ax,ax
c001e32d:	66 90                	xchg   ax,ax
c001e32f:	90                   	nop

c001e330 <value_37F>:
c001e330:	7f 03                	jg     c001e335 <value_37A+0x1>

c001e332 <value_37E>:
c001e332:	7e 03                	jle    c001e337 <x87Detect+0x1>

c001e334 <value_37A>:
c001e334:	7a 03                	jp     c001e339 <x87Detect+0x3>

c001e336 <x87Detect>:
c001e336:	b8 01 00 00 00       	mov    eax,0x1
c001e33b:	0f a2                	cpuid  
c001e33d:	f7 c2 01 00 00 00    	test   edx,0x1
c001e343:	74 06                	je     c001e34b <x87Detect.nox87>
c001e345:	b8 01 00 00 00       	mov    eax,0x1
c001e34a:	c3                   	ret    

c001e34b <x87Detect.nox87>:
c001e34b:	b8 00 00 00 00       	mov    eax,0x0
c001e350:	c3                   	ret    

c001e351 <x87Save>:
c001e351:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e355:	dd 30                	fnsave [eax]
c001e357:	c3                   	ret    

c001e358 <x87Load>:
c001e358:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e35c:	dd 20                	frstor [eax]
c001e35e:	c3                   	ret    

c001e35f <x87Init>:
c001e35f:	0f 20 c0             	mov    eax,cr0
c001e362:	66 25 fb ff          	and    ax,0xfffb
c001e366:	66 0d 22 00          	or     ax,0x22
c001e36a:	0f 22 c0             	mov    cr0,eax
c001e36d:	db e3                	fninit 
c001e36f:	0f 06                	clts   
c001e371:	d9 2d 34 e3 01 c0    	fldcw  WORD PTR ds:0xc001e334
c001e377:	c3                   	ret    

c001e378 <x87Close>:
c001e378:	c3                   	ret    
c001e379:	66 90                	xchg   ax,ax
c001e37b:	90                   	nop

c001e37c <__do_global_ctors_aux>:
c001e37c:	a1 30 f3 01 c0       	mov    eax,ds:0xc001f330
c001e381:	83 f8 ff             	cmp    eax,0xffffffff
c001e384:	74 1a                	je     c001e3a0 <__do_global_ctors_aux+0x24>
c001e386:	55                   	push   ebp
c001e387:	89 e5                	mov    ebp,esp
c001e389:	53                   	push   ebx
c001e38a:	52                   	push   edx
c001e38b:	bb 30 f3 01 c0       	mov    ebx,0xc001f330
c001e390:	ff d0                	call   eax
c001e392:	83 eb 04             	sub    ebx,0x4
c001e395:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e397:	83 f8 ff             	cmp    eax,0xffffffff
c001e39a:	75 f4                	jne    c001e390 <__do_global_ctors_aux+0x14>
c001e39c:	58                   	pop    eax
c001e39d:	5b                   	pop    ebx
c001e39e:	5d                   	pop    ebp
c001e39f:	c3                   	ret    
c001e3a0:	c3                   	ret    
c001e3a1:	66 90                	xchg   ax,ax
c001e3a3:	90                   	nop

c001e3a4 <__divdi3>:
c001e3a4:	55                   	push   ebp
c001e3a5:	57                   	push   edi
c001e3a6:	56                   	push   esi
c001e3a7:	53                   	push   ebx
c001e3a8:	83 ec 1c             	sub    esp,0x1c
c001e3ab:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e3af:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e3b3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e3b6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e3ba:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e3be:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e3c2:	85 db                	test   ebx,ebx
c001e3c4:	0f 88 8e 00 00 00    	js     c001e458 <__divdi3+0xb4>
c001e3ca:	89 dd                	mov    ebp,ebx
c001e3cc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e3d4:	89 d3                	mov    ebx,edx
c001e3d6:	85 d2                	test   edx,edx
c001e3d8:	79 0d                	jns    c001e3e7 <__divdi3+0x43>
c001e3da:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001e3de:	f7 d8                	neg    eax
c001e3e0:	83 d2 00             	adc    edx,0x0
c001e3e3:	f7 da                	neg    edx
c001e3e5:	89 d3                	mov    ebx,edx
c001e3e7:	89 c7                	mov    edi,eax
c001e3e9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e3ec:	85 db                	test   ebx,ebx
c001e3ee:	75 48                	jne    c001e438 <__divdi3+0x94>
c001e3f0:	39 ef                	cmp    edi,ebp
c001e3f2:	76 24                	jbe    c001e418 <__divdi3+0x74>
c001e3f4:	89 ea                	mov    edx,ebp
c001e3f6:	f7 f7                	div    edi
c001e3f8:	89 c1                	mov    ecx,eax
c001e3fa:	31 f6                	xor    esi,esi
c001e3fc:	89 c8                	mov    eax,ecx
c001e3fe:	89 f2                	mov    edx,esi
c001e400:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e404:	85 c9                	test   ecx,ecx
c001e406:	74 07                	je     c001e40f <__divdi3+0x6b>
c001e408:	f7 d8                	neg    eax
c001e40a:	83 d2 00             	adc    edx,0x0
c001e40d:	f7 da                	neg    edx
c001e40f:	83 c4 1c             	add    esp,0x1c
c001e412:	5b                   	pop    ebx
c001e413:	5e                   	pop    esi
c001e414:	5f                   	pop    edi
c001e415:	5d                   	pop    ebp
c001e416:	c3                   	ret    
c001e417:	90                   	nop
c001e418:	85 ff                	test   edi,edi
c001e41a:	75 0b                	jne    c001e427 <__divdi3+0x83>
c001e41c:	b8 01 00 00 00       	mov    eax,0x1
c001e421:	31 d2                	xor    edx,edx
c001e423:	f7 f3                	div    ebx
c001e425:	89 c7                	mov    edi,eax
c001e427:	31 d2                	xor    edx,edx
c001e429:	89 e8                	mov    eax,ebp
c001e42b:	f7 f7                	div    edi
c001e42d:	89 c6                	mov    esi,eax
c001e42f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e432:	f7 f7                	div    edi
c001e434:	89 c1                	mov    ecx,eax
c001e436:	eb c4                	jmp    c001e3fc <__divdi3+0x58>
c001e438:	39 eb                	cmp    ebx,ebp
c001e43a:	77 3c                	ja     c001e478 <__divdi3+0xd4>
c001e43c:	0f bd f3             	bsr    esi,ebx
c001e43f:	83 f6 1f             	xor    esi,0x1f
c001e442:	75 40                	jne    c001e484 <__divdi3+0xe0>
c001e444:	39 eb                	cmp    ebx,ebp
c001e446:	72 09                	jb     c001e451 <__divdi3+0xad>
c001e448:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001e44b:	0f 87 97 00 00 00    	ja     c001e4e8 <__divdi3+0x144>
c001e451:	b9 01 00 00 00       	mov    ecx,0x1
c001e456:	eb a4                	jmp    c001e3fc <__divdi3+0x58>
c001e458:	f7 d9                	neg    ecx
c001e45a:	83 d3 00             	adc    ebx,0x0
c001e45d:	f7 db                	neg    ebx
c001e45f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e462:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e466:	89 dd                	mov    ebp,ebx
c001e468:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001e470:	e9 5f ff ff ff       	jmp    c001e3d4 <__divdi3+0x30>
c001e475:	8d 76 00             	lea    esi,[esi+0x0]
c001e478:	31 f6                	xor    esi,esi
c001e47a:	31 c9                	xor    ecx,ecx
c001e47c:	e9 7b ff ff ff       	jmp    c001e3fc <__divdi3+0x58>
c001e481:	8d 76 00             	lea    esi,[esi+0x0]
c001e484:	b8 20 00 00 00       	mov    eax,0x20
c001e489:	29 f0                	sub    eax,esi
c001e48b:	89 f1                	mov    ecx,esi
c001e48d:	d3 e3                	shl    ebx,cl
c001e48f:	89 fa                	mov    edx,edi
c001e491:	88 c1                	mov    cl,al
c001e493:	d3 ea                	shr    edx,cl
c001e495:	09 da                	or     edx,ebx
c001e497:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e49b:	89 f1                	mov    ecx,esi
c001e49d:	d3 e7                	shl    edi,cl
c001e49f:	89 eb                	mov    ebx,ebp
c001e4a1:	88 c1                	mov    cl,al
c001e4a3:	d3 eb                	shr    ebx,cl
c001e4a5:	89 f1                	mov    ecx,esi
c001e4a7:	d3 e5                	shl    ebp,cl
c001e4a9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001e4ac:	88 c1                	mov    cl,al
c001e4ae:	d3 ea                	shr    edx,cl
c001e4b0:	09 d5                	or     ebp,edx
c001e4b2:	89 e8                	mov    eax,ebp
c001e4b4:	89 da                	mov    edx,ebx
c001e4b6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001e4ba:	89 d3                	mov    ebx,edx
c001e4bc:	89 c5                	mov    ebp,eax
c001e4be:	f7 e7                	mul    edi
c001e4c0:	39 d3                	cmp    ebx,edx
c001e4c2:	72 18                	jb     c001e4dc <__divdi3+0x138>
c001e4c4:	74 0a                	je     c001e4d0 <__divdi3+0x12c>
c001e4c6:	89 e9                	mov    ecx,ebp
c001e4c8:	31 f6                	xor    esi,esi
c001e4ca:	e9 2d ff ff ff       	jmp    c001e3fc <__divdi3+0x58>
c001e4cf:	90                   	nop
c001e4d0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001e4d3:	89 f1                	mov    ecx,esi
c001e4d5:	d3 e7                	shl    edi,cl
c001e4d7:	39 c7                	cmp    edi,eax
c001e4d9:	73 eb                	jae    c001e4c6 <__divdi3+0x122>
c001e4db:	90                   	nop
c001e4dc:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001e4df:	31 f6                	xor    esi,esi
c001e4e1:	e9 16 ff ff ff       	jmp    c001e3fc <__divdi3+0x58>
c001e4e6:	66 90                	xchg   ax,ax
c001e4e8:	31 c9                	xor    ecx,ecx
c001e4ea:	e9 0d ff ff ff       	jmp    c001e3fc <__divdi3+0x58>
c001e4ef:	90                   	nop

c001e4f0 <__moddi3>:
c001e4f0:	55                   	push   ebp
c001e4f1:	57                   	push   edi
c001e4f2:	56                   	push   esi
c001e4f3:	53                   	push   ebx
c001e4f4:	83 ec 2c             	sub    esp,0x2c
c001e4f7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e4fb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001e4ff:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e503:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e507:	85 db                	test   ebx,ebx
c001e509:	0f 88 85 00 00 00    	js     c001e594 <__moddi3+0xa4>
c001e50f:	89 de                	mov    esi,ebx
c001e511:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001e519:	89 d7                	mov    edi,edx
c001e51b:	85 d2                	test   edx,edx
c001e51d:	79 09                	jns    c001e528 <__moddi3+0x38>
c001e51f:	f7 d8                	neg    eax
c001e521:	83 d2 00             	adc    edx,0x0
c001e524:	f7 da                	neg    edx
c001e526:	89 d7                	mov    edi,edx
c001e528:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e52c:	89 cd                	mov    ebp,ecx
c001e52e:	85 ff                	test   edi,edi
c001e530:	75 52                	jne    c001e584 <__moddi3+0x94>
c001e532:	89 c3                	mov    ebx,eax
c001e534:	39 f0                	cmp    eax,esi
c001e536:	76 24                	jbe    c001e55c <__moddi3+0x6c>
c001e538:	89 c8                	mov    eax,ecx
c001e53a:	89 f2                	mov    edx,esi
c001e53c:	f7 f3                	div    ebx
c001e53e:	89 d6                	mov    esi,edx
c001e540:	89 f0                	mov    eax,esi
c001e542:	31 d2                	xor    edx,edx
c001e544:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e548:	85 c9                	test   ecx,ecx
c001e54a:	74 07                	je     c001e553 <__moddi3+0x63>
c001e54c:	f7 d8                	neg    eax
c001e54e:	83 d2 00             	adc    edx,0x0
c001e551:	f7 da                	neg    edx
c001e553:	83 c4 2c             	add    esp,0x2c
c001e556:	5b                   	pop    ebx
c001e557:	5e                   	pop    esi
c001e558:	5f                   	pop    edi
c001e559:	5d                   	pop    ebp
c001e55a:	c3                   	ret    
c001e55b:	90                   	nop
c001e55c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e560:	85 db                	test   ebx,ebx
c001e562:	75 0d                	jne    c001e571 <__moddi3+0x81>
c001e564:	b8 01 00 00 00       	mov    eax,0x1
c001e569:	31 d2                	xor    edx,edx
c001e56b:	f7 f7                	div    edi
c001e56d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e571:	89 f0                	mov    eax,esi
c001e573:	31 d2                	xor    edx,edx
c001e575:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e579:	f7 f7                	div    edi
c001e57b:	89 e8                	mov    eax,ebp
c001e57d:	f7 f7                	div    edi
c001e57f:	89 d6                	mov    esi,edx
c001e581:	eb bd                	jmp    c001e540 <__moddi3+0x50>
c001e583:	90                   	nop
c001e584:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e588:	39 f7                	cmp    edi,esi
c001e58a:	76 20                	jbe    c001e5ac <__moddi3+0xbc>
c001e58c:	89 c8                	mov    eax,ecx
c001e58e:	89 f2                	mov    edx,esi
c001e590:	eb b2                	jmp    c001e544 <__moddi3+0x54>
c001e592:	66 90                	xchg   ax,ax
c001e594:	f7 d9                	neg    ecx
c001e596:	83 d3 00             	adc    ebx,0x0
c001e599:	f7 db                	neg    ebx
c001e59b:	89 de                	mov    esi,ebx
c001e59d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001e5a5:	e9 6f ff ff ff       	jmp    c001e519 <__moddi3+0x29>
c001e5aa:	66 90                	xchg   ax,ax
c001e5ac:	0f bd c7             	bsr    eax,edi
c001e5af:	83 f0 1f             	xor    eax,0x1f
c001e5b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e5b6:	75 24                	jne    c001e5dc <__moddi3+0xec>
c001e5b8:	39 f7                	cmp    edi,esi
c001e5ba:	72 06                	jb     c001e5c2 <__moddi3+0xd2>
c001e5bc:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001e5c0:	77 0c                	ja     c001e5ce <__moddi3+0xde>
c001e5c2:	89 e9                	mov    ecx,ebp
c001e5c4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001e5c8:	19 fe                	sbb    esi,edi
c001e5ca:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e5ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e5d2:	89 f2                	mov    edx,esi
c001e5d4:	e9 6b ff ff ff       	jmp    c001e544 <__moddi3+0x54>
c001e5d9:	8d 76 00             	lea    esi,[esi+0x0]
c001e5dc:	b8 20 00 00 00       	mov    eax,0x20
c001e5e1:	89 c2                	mov    edx,eax
c001e5e3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e5e7:	29 da                	sub    edx,ebx
c001e5e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e5ed:	88 d9                	mov    cl,bl
c001e5ef:	d3 e7                	shl    edi,cl
c001e5f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e5f5:	88 d1                	mov    cl,dl
c001e5f7:	d3 e8                	shr    eax,cl
c001e5f9:	09 c7                	or     edi,eax
c001e5fb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001e5ff:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e603:	89 d8                	mov    eax,ebx
c001e605:	88 d9                	mov    cl,bl
c001e607:	d3 e7                	shl    edi,cl
c001e609:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e60d:	89 f3                	mov    ebx,esi
c001e60f:	88 d1                	mov    cl,dl
c001e611:	d3 eb                	shr    ebx,cl
c001e613:	89 c7                	mov    edi,eax
c001e615:	88 c1                	mov    cl,al
c001e617:	d3 e6                	shl    esi,cl
c001e619:	89 e8                	mov    eax,ebp
c001e61b:	88 d1                	mov    cl,dl
c001e61d:	d3 e8                	shr    eax,cl
c001e61f:	09 f0                	or     eax,esi
c001e621:	89 f9                	mov    ecx,edi
c001e623:	d3 e5                	shl    ebp,cl
c001e625:	89 da                	mov    edx,ebx
c001e627:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001e62b:	89 d3                	mov    ebx,edx
c001e62d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e631:	89 c6                	mov    esi,eax
c001e633:	89 d1                	mov    ecx,edx
c001e635:	39 d3                	cmp    ebx,edx
c001e637:	72 27                	jb     c001e660 <__moddi3+0x170>
c001e639:	74 21                	je     c001e65c <__moddi3+0x16c>
c001e63b:	29 f5                	sub    ebp,esi
c001e63d:	19 cb                	sbb    ebx,ecx
c001e63f:	89 de                	mov    esi,ebx
c001e641:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001e645:	d3 e6                	shl    esi,cl
c001e647:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e64b:	89 f9                	mov    ecx,edi
c001e64d:	d3 ed                	shr    ebp,cl
c001e64f:	09 ee                	or     esi,ebp
c001e651:	89 f0                	mov    eax,esi
c001e653:	d3 eb                	shr    ebx,cl
c001e655:	89 da                	mov    edx,ebx
c001e657:	e9 e8 fe ff ff       	jmp    c001e544 <__moddi3+0x54>
c001e65c:	39 c5                	cmp    ebp,eax
c001e65e:	73 db                	jae    c001e63b <__moddi3+0x14b>
c001e660:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e664:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001e668:	89 d1                	mov    ecx,edx
c001e66a:	89 c6                	mov    esi,eax
c001e66c:	eb cd                	jmp    c001e63b <__moddi3+0x14b>
c001e66e:	66 90                	xchg   ax,ax

c001e670 <__udivdi3>:
c001e670:	55                   	push   ebp
c001e671:	57                   	push   edi
c001e672:	56                   	push   esi
c001e673:	53                   	push   ebx
c001e674:	83 ec 1c             	sub    esp,0x1c
c001e677:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e67b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e67f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e683:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e687:	85 d2                	test   edx,edx
c001e689:	75 41                	jne    c001e6cc <__udivdi3+0x5c>
c001e68b:	39 f7                	cmp    edi,esi
c001e68d:	76 15                	jbe    c001e6a4 <__udivdi3+0x34>
c001e68f:	89 e8                	mov    eax,ebp
c001e691:	89 f2                	mov    edx,esi
c001e693:	f7 f7                	div    edi
c001e695:	31 db                	xor    ebx,ebx
c001e697:	89 da                	mov    edx,ebx
c001e699:	83 c4 1c             	add    esp,0x1c
c001e69c:	5b                   	pop    ebx
c001e69d:	5e                   	pop    esi
c001e69e:	5f                   	pop    edi
c001e69f:	5d                   	pop    ebp
c001e6a0:	c3                   	ret    
c001e6a1:	8d 76 00             	lea    esi,[esi+0x0]
c001e6a4:	89 f9                	mov    ecx,edi
c001e6a6:	85 ff                	test   edi,edi
c001e6a8:	75 0b                	jne    c001e6b5 <__udivdi3+0x45>
c001e6aa:	b8 01 00 00 00       	mov    eax,0x1
c001e6af:	31 d2                	xor    edx,edx
c001e6b1:	f7 f7                	div    edi
c001e6b3:	89 c1                	mov    ecx,eax
c001e6b5:	31 d2                	xor    edx,edx
c001e6b7:	89 f0                	mov    eax,esi
c001e6b9:	f7 f1                	div    ecx
c001e6bb:	89 c3                	mov    ebx,eax
c001e6bd:	89 e8                	mov    eax,ebp
c001e6bf:	f7 f1                	div    ecx
c001e6c1:	89 da                	mov    edx,ebx
c001e6c3:	83 c4 1c             	add    esp,0x1c
c001e6c6:	5b                   	pop    ebx
c001e6c7:	5e                   	pop    esi
c001e6c8:	5f                   	pop    edi
c001e6c9:	5d                   	pop    ebp
c001e6ca:	c3                   	ret    
c001e6cb:	90                   	nop
c001e6cc:	39 f2                	cmp    edx,esi
c001e6ce:	77 1c                	ja     c001e6ec <__udivdi3+0x7c>
c001e6d0:	0f bd da             	bsr    ebx,edx
c001e6d3:	83 f3 1f             	xor    ebx,0x1f
c001e6d6:	75 24                	jne    c001e6fc <__udivdi3+0x8c>
c001e6d8:	39 f2                	cmp    edx,esi
c001e6da:	72 08                	jb     c001e6e4 <__udivdi3+0x74>
c001e6dc:	39 ef                	cmp    edi,ebp
c001e6de:	0f 87 84 00 00 00    	ja     c001e768 <__udivdi3+0xf8>
c001e6e4:	b8 01 00 00 00       	mov    eax,0x1
c001e6e9:	eb ac                	jmp    c001e697 <__udivdi3+0x27>
c001e6eb:	90                   	nop
c001e6ec:	31 db                	xor    ebx,ebx
c001e6ee:	31 c0                	xor    eax,eax
c001e6f0:	89 da                	mov    edx,ebx
c001e6f2:	83 c4 1c             	add    esp,0x1c
c001e6f5:	5b                   	pop    ebx
c001e6f6:	5e                   	pop    esi
c001e6f7:	5f                   	pop    edi
c001e6f8:	5d                   	pop    ebp
c001e6f9:	c3                   	ret    
c001e6fa:	66 90                	xchg   ax,ax
c001e6fc:	b8 20 00 00 00       	mov    eax,0x20
c001e701:	29 d8                	sub    eax,ebx
c001e703:	88 d9                	mov    cl,bl
c001e705:	d3 e2                	shl    edx,cl
c001e707:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e70b:	89 fa                	mov    edx,edi
c001e70d:	88 c1                	mov    cl,al
c001e70f:	d3 ea                	shr    edx,cl
c001e711:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e715:	09 d1                	or     ecx,edx
c001e717:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e71b:	88 d9                	mov    cl,bl
c001e71d:	d3 e7                	shl    edi,cl
c001e71f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e723:	89 f7                	mov    edi,esi
c001e725:	88 c1                	mov    cl,al
c001e727:	d3 ef                	shr    edi,cl
c001e729:	88 d9                	mov    cl,bl
c001e72b:	d3 e6                	shl    esi,cl
c001e72d:	89 ea                	mov    edx,ebp
c001e72f:	88 c1                	mov    cl,al
c001e731:	d3 ea                	shr    edx,cl
c001e733:	09 d6                	or     esi,edx
c001e735:	89 f0                	mov    eax,esi
c001e737:	89 fa                	mov    edx,edi
c001e739:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e73d:	89 d7                	mov    edi,edx
c001e73f:	89 c6                	mov    esi,eax
c001e741:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e745:	39 d7                	cmp    edi,edx
c001e747:	72 13                	jb     c001e75c <__udivdi3+0xec>
c001e749:	74 09                	je     c001e754 <__udivdi3+0xe4>
c001e74b:	89 f0                	mov    eax,esi
c001e74d:	31 db                	xor    ebx,ebx
c001e74f:	e9 43 ff ff ff       	jmp    c001e697 <__udivdi3+0x27>
c001e754:	88 d9                	mov    cl,bl
c001e756:	d3 e5                	shl    ebp,cl
c001e758:	39 c5                	cmp    ebp,eax
c001e75a:	73 ef                	jae    c001e74b <__udivdi3+0xdb>
c001e75c:	8d 46 ff             	lea    eax,[esi-0x1]
c001e75f:	31 db                	xor    ebx,ebx
c001e761:	e9 31 ff ff ff       	jmp    c001e697 <__udivdi3+0x27>
c001e766:	66 90                	xchg   ax,ax
c001e768:	31 c0                	xor    eax,eax
c001e76a:	e9 28 ff ff ff       	jmp    c001e697 <__udivdi3+0x27>
c001e76f:	90                   	nop

c001e770 <__umoddi3>:
c001e770:	55                   	push   ebp
c001e771:	57                   	push   edi
c001e772:	56                   	push   esi
c001e773:	53                   	push   ebx
c001e774:	83 ec 1c             	sub    esp,0x1c
c001e777:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e77b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e77f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e783:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e787:	89 da                	mov    edx,ebx
c001e789:	85 c0                	test   eax,eax
c001e78b:	75 37                	jne    c001e7c4 <__umoddi3+0x54>
c001e78d:	39 df                	cmp    edi,ebx
c001e78f:	76 13                	jbe    c001e7a4 <__umoddi3+0x34>
c001e791:	89 f0                	mov    eax,esi
c001e793:	f7 f7                	div    edi
c001e795:	89 d0                	mov    eax,edx
c001e797:	31 d2                	xor    edx,edx
c001e799:	83 c4 1c             	add    esp,0x1c
c001e79c:	5b                   	pop    ebx
c001e79d:	5e                   	pop    esi
c001e79e:	5f                   	pop    edi
c001e79f:	5d                   	pop    ebp
c001e7a0:	c3                   	ret    
c001e7a1:	8d 76 00             	lea    esi,[esi+0x0]
c001e7a4:	89 fd                	mov    ebp,edi
c001e7a6:	85 ff                	test   edi,edi
c001e7a8:	75 0b                	jne    c001e7b5 <__umoddi3+0x45>
c001e7aa:	b8 01 00 00 00       	mov    eax,0x1
c001e7af:	31 d2                	xor    edx,edx
c001e7b1:	f7 f7                	div    edi
c001e7b3:	89 c5                	mov    ebp,eax
c001e7b5:	89 d8                	mov    eax,ebx
c001e7b7:	31 d2                	xor    edx,edx
c001e7b9:	f7 f5                	div    ebp
c001e7bb:	89 f0                	mov    eax,esi
c001e7bd:	f7 f5                	div    ebp
c001e7bf:	89 d0                	mov    eax,edx
c001e7c1:	eb d4                	jmp    c001e797 <__umoddi3+0x27>
c001e7c3:	90                   	nop
c001e7c4:	89 f1                	mov    ecx,esi
c001e7c6:	39 d8                	cmp    eax,ebx
c001e7c8:	76 0a                	jbe    c001e7d4 <__umoddi3+0x64>
c001e7ca:	89 f0                	mov    eax,esi
c001e7cc:	83 c4 1c             	add    esp,0x1c
c001e7cf:	5b                   	pop    ebx
c001e7d0:	5e                   	pop    esi
c001e7d1:	5f                   	pop    edi
c001e7d2:	5d                   	pop    ebp
c001e7d3:	c3                   	ret    
c001e7d4:	0f bd e8             	bsr    ebp,eax
c001e7d7:	83 f5 1f             	xor    ebp,0x1f
c001e7da:	75 1c                	jne    c001e7f8 <__umoddi3+0x88>
c001e7dc:	39 d8                	cmp    eax,ebx
c001e7de:	72 04                	jb     c001e7e4 <__umoddi3+0x74>
c001e7e0:	39 f7                	cmp    edi,esi
c001e7e2:	77 08                	ja     c001e7ec <__umoddi3+0x7c>
c001e7e4:	89 da                	mov    edx,ebx
c001e7e6:	29 fe                	sub    esi,edi
c001e7e8:	19 c2                	sbb    edx,eax
c001e7ea:	89 f1                	mov    ecx,esi
c001e7ec:	89 c8                	mov    eax,ecx
c001e7ee:	83 c4 1c             	add    esp,0x1c
c001e7f1:	5b                   	pop    ebx
c001e7f2:	5e                   	pop    esi
c001e7f3:	5f                   	pop    edi
c001e7f4:	5d                   	pop    ebp
c001e7f5:	c3                   	ret    
c001e7f6:	66 90                	xchg   ax,ax
c001e7f8:	ba 20 00 00 00       	mov    edx,0x20
c001e7fd:	29 ea                	sub    edx,ebp
c001e7ff:	89 e9                	mov    ecx,ebp
c001e801:	d3 e0                	shl    eax,cl
c001e803:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e807:	89 f8                	mov    eax,edi
c001e809:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001e80d:	88 d1                	mov    cl,dl
c001e80f:	d3 e8                	shr    eax,cl
c001e811:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e815:	09 c1                	or     ecx,eax
c001e817:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e81b:	89 e9                	mov    ecx,ebp
c001e81d:	d3 e7                	shl    edi,cl
c001e81f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e823:	89 d8                	mov    eax,ebx
c001e825:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e829:	88 d1                	mov    cl,dl
c001e82b:	d3 e8                	shr    eax,cl
c001e82d:	89 c7                	mov    edi,eax
c001e82f:	89 e9                	mov    ecx,ebp
c001e831:	d3 e3                	shl    ebx,cl
c001e833:	89 f0                	mov    eax,esi
c001e835:	88 d1                	mov    cl,dl
c001e837:	d3 e8                	shr    eax,cl
c001e839:	09 d8                	or     eax,ebx
c001e83b:	89 e9                	mov    ecx,ebp
c001e83d:	d3 e6                	shl    esi,cl
c001e83f:	89 f3                	mov    ebx,esi
c001e841:	89 fa                	mov    edx,edi
c001e843:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e847:	89 d1                	mov    ecx,edx
c001e849:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e84d:	89 c6                	mov    esi,eax
c001e84f:	89 d7                	mov    edi,edx
c001e851:	39 d1                	cmp    ecx,edx
c001e853:	72 27                	jb     c001e87c <__umoddi3+0x10c>
c001e855:	74 21                	je     c001e878 <__umoddi3+0x108>
c001e857:	89 ca                	mov    edx,ecx
c001e859:	29 f3                	sub    ebx,esi
c001e85b:	19 fa                	sbb    edx,edi
c001e85d:	89 d0                	mov    eax,edx
c001e85f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e863:	d3 e0                	shl    eax,cl
c001e865:	89 e9                	mov    ecx,ebp
c001e867:	d3 eb                	shr    ebx,cl
c001e869:	09 d8                	or     eax,ebx
c001e86b:	d3 ea                	shr    edx,cl
c001e86d:	83 c4 1c             	add    esp,0x1c
c001e870:	5b                   	pop    ebx
c001e871:	5e                   	pop    esi
c001e872:	5f                   	pop    edi
c001e873:	5d                   	pop    ebp
c001e874:	c3                   	ret    
c001e875:	8d 76 00             	lea    esi,[esi+0x0]
c001e878:	39 c3                	cmp    ebx,eax
c001e87a:	73 db                	jae    c001e857 <__umoddi3+0xe7>
c001e87c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e880:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001e884:	89 d7                	mov    edi,edx
c001e886:	89 c6                	mov    esi,eax
c001e888:	eb cd                	jmp    c001e857 <__umoddi3+0xe7>

Disassembly of section .init:

c001e88a <_init>:
c001e88a:	55                   	push   ebp
c001e88b:	89 e5                	mov    ebp,esp
c001e88d:	e8 62 18 fe ff       	call   c00000f4 <frame_dummy>
c001e892:	e8 e5 fa ff ff       	call   c001e37c <__do_global_ctors_aux>
c001e897:	5d                   	pop    ebp
c001e898:	c3                   	ret    

Disassembly of section .fini:

c001e899 <_fini>:
c001e899:	55                   	push   ebp
c001e89a:	89 e5                	mov    ebp,esp
c001e89c:	e8 e3 17 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001e8a1:	5d                   	pop    ebp
c001e8a2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001e8a4 <Computer::~Computer()>:
c001e8a4:	83 ec 0c             	sub    esp,0xc
c001e8a7:	ba b4 fb 01 c0       	mov    edx,0xc001fbb4
c001e8ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8b0:	89 10                	mov    DWORD PTR [eax],edx
c001e8b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8b6:	83 ec 0c             	sub    esp,0xc
c001e8b9:	50                   	push   eax
c001e8ba:	e8 71 d4 fe ff       	call   c000bd30 <Device::~Device()>
c001e8bf:	83 c4 10             	add    esp,0x10
c001e8c2:	90                   	nop
c001e8c3:	83 c4 0c             	add    esp,0xc
c001e8c6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001e8c8 <Computer::~Computer()>:
c001e8c8:	83 ec 0c             	sub    esp,0xc
c001e8cb:	83 ec 0c             	sub    esp,0xc
c001e8ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e8d2:	e8 cd ff ff ff       	call   c001e8a4 <Computer::~Computer()>
c001e8d7:	83 c4 10             	add    esp,0x10
c001e8da:	83 ec 08             	sub    esp,0x8
c001e8dd:	68 70 01 00 00       	push   0x170
c001e8e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e8e6:	e8 df bf fe ff       	call   c000a8ca <operator delete(void*, unsigned long)>
c001e8eb:	83 c4 10             	add    esp,0x10
c001e8ee:	83 c4 0c             	add    esp,0xc
c001e8f1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001e8f2 <idleCommon()>:
c001e8f2:	83 ec 0c             	sub    esp,0xc
c001e8f5:	fa                   	cli    
c001e8f6:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001e8fc:	e8 db 67 ff ff       	call   c00150dc <schedule()>
c001e901:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001e906:	48                   	dec    eax
c001e907:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001e90c:	75 01                	jne    c001e90f <idleCommon()+0x1d>
c001e90e:	fb                   	sti    
c001e90f:	83 c4 0c             	add    esp,0xc
c001e912:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001e914 <LinkedList<UnixFile>::~LinkedList()>:
c001e914:	90                   	nop
c001e915:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001e916 <LinkedList<UnixFile>::LinkedList()>:
c001e916:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e91a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e920:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e924:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e92b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e92f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e936:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e93a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e940:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e944:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e94b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e94f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e956:	90                   	nop
c001e957:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001e958 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001e958:	83 ec 0c             	sub    esp,0xc
c001e95b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e960:	75 10                	jne    c001e972 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001e962:	83 ec 0c             	sub    esp,0xc
c001e965:	68 c8 fd 01 c0       	push   0xc001fdc8
c001e96a:	e8 b8 1f ff ff       	call   c0010927 <KePanic(char const*)>
c001e96f:	83 c4 10             	add    esp,0x10
c001e972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e976:	8b 00                	mov    eax,DWORD PTR [eax]
c001e978:	85 c0                	test   eax,eax
c001e97a:	74 34                	je     c001e9b0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001e97c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e980:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e983:	85 c0                	test   eax,eax
c001e985:	74 29                	je     c001e9b0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001e987:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e98b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e98e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e992:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e999:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e99d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e9a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e9a7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e9ae:	eb 65                	jmp    c001ea15 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e9b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9b4:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9b6:	85 c0                	test   eax,eax
c001e9b8:	75 4b                	jne    c001ea05 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e9ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e9c1:	85 c0                	test   eax,eax
c001e9c3:	75 40                	jne    c001ea05 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e9c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e9cd:	89 10                	mov    DWORD PTR [eax],edx
c001e9cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9d3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e9d7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e9da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e9e1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e9e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9ec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e9ef:	85 c0                	test   eax,eax
c001e9f1:	74 22                	je     c001ea15 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e9f3:	83 ec 0c             	sub    esp,0xc
c001e9f6:	68 ea fd 01 c0       	push   0xc001fdea
c001e9fb:	e8 27 1f ff ff       	call   c0010927 <KePanic(char const*)>
c001ea00:	83 c4 10             	add    esp,0x10
c001ea03:	eb 10                	jmp    c001ea15 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001ea05:	83 ec 0c             	sub    esp,0xc
c001ea08:	68 f4 fd 01 c0       	push   0xc001fdf4
c001ea0d:	e8 15 1f ff ff       	call   c0010927 <KePanic(char const*)>
c001ea12:	83 c4 10             	add    esp,0x10
c001ea15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea19:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea1c:	8d 50 01             	lea    edx,[eax+0x1]
c001ea1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea23:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ea26:	90                   	nop
c001ea27:	83 c4 0c             	add    esp,0xc
c001ea2a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001ea2c <LinkedList<UnixFile>::getFirstElement()>:
c001ea2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea30:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea32:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001ea34 <LinkedList<UnixFile>::removeFirst()>:
c001ea34:	83 ec 0c             	sub    esp,0xc
c001ea37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea3b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea3d:	85 c0                	test   eax,eax
c001ea3f:	75 12                	jne    c001ea53 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001ea41:	83 ec 0c             	sub    esp,0xc
c001ea44:	68 00 fe 01 c0       	push   0xc001fe00
c001ea49:	e8 d9 1e ff ff       	call   c0010927 <KePanic(char const*)>
c001ea4e:	83 c4 10             	add    esp,0x10
c001ea51:	eb 7e                	jmp    c001ead1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001ea53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea57:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ea5a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea5d:	85 c0                	test   eax,eax
c001ea5f:	74 10                	je     c001ea71 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001ea61:	83 ec 0c             	sub    esp,0xc
c001ea64:	68 4b fe 01 c0       	push   0xc001fe4b
c001ea69:	e8 b9 1e ff ff       	call   c0010927 <KePanic(char const*)>
c001ea6e:	83 c4 10             	add    esp,0x10
c001ea71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea75:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea77:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea7a:	85 c0                	test   eax,eax
c001ea7c:	75 33                	jne    c001eab1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001ea7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea82:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ea88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea8c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ea93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea97:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea9a:	83 f8 01             	cmp    eax,0x1
c001ea9d:	74 21                	je     c001eac0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ea9f:	83 ec 0c             	sub    esp,0xc
c001eaa2:	68 24 fe 01 c0       	push   0xc001fe24
c001eaa7:	e8 7b 1e ff ff       	call   c0010927 <KePanic(char const*)>
c001eaac:	83 c4 10             	add    esp,0x10
c001eaaf:	eb 0f                	jmp    c001eac0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001eab1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eab5:	8b 00                	mov    eax,DWORD PTR [eax]
c001eab7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001eaba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eabe:	89 10                	mov    DWORD PTR [eax],edx
c001eac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eac4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eac7:	8d 50 ff             	lea    edx,[eax-0x1]
c001eaca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eace:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ead1:	83 c4 0c             	add    esp,0xc
c001ead4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001ead6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001ead6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001eada:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eadd:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001eade <DriverlessDevice::~DriverlessDevice()>:
c001eade:	ba dc 04 02 c0       	mov    edx,0xc00204dc
c001eae3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eae7:	89 10                	mov    DWORD PTR [eax],edx
c001eae9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eaed:	50                   	push   eax
c001eaee:	e8 3d d2 fe ff       	call   c000bd30 <Device::~Device()>
c001eaf3:	83 c4 04             	add    esp,0x4
c001eaf6:	90                   	nop
c001eaf7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001eaf8 <DriverlessDevice::~DriverlessDevice()>:
c001eaf8:	83 ec 0c             	sub    esp,0xc
c001eafb:	83 ec 0c             	sub    esp,0xc
c001eafe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb02:	e8 d7 ff ff ff       	call   c001eade <DriverlessDevice::~DriverlessDevice()>
c001eb07:	83 c4 10             	add    esp,0x10
c001eb0a:	83 ec 08             	sub    esp,0x8
c001eb0d:	68 58 01 00 00       	push   0x158
c001eb12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb16:	e8 af bd fe ff       	call   c000a8ca <operator delete(void*, unsigned long)>
c001eb1b:	83 c4 10             	add    esp,0x10
c001eb1e:	83 c4 0c             	add    esp,0xc
c001eb21:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001eb22 <LinkedList<Device>::addElement(Device*)>:
c001eb22:	83 ec 0c             	sub    esp,0xc
c001eb25:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001eb2a:	75 10                	jne    c001eb3c <LinkedList<Device>::addElement(Device*)+0x1a>
c001eb2c:	83 ec 0c             	sub    esp,0xc
c001eb2f:	68 c8 fd 01 c0       	push   0xc001fdc8
c001eb34:	e8 ee 1d ff ff       	call   c0010927 <KePanic(char const*)>
c001eb39:	83 c4 10             	add    esp,0x10
c001eb3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb40:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb42:	85 c0                	test   eax,eax
c001eb44:	74 3a                	je     c001eb80 <LinkedList<Device>::addElement(Device*)+0x5e>
c001eb46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb4d:	85 c0                	test   eax,eax
c001eb4f:	74 2f                	je     c001eb80 <LinkedList<Device>::addElement(Device*)+0x5e>
c001eb51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb55:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb58:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb5c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001eb62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb66:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb6a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eb6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb71:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb74:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001eb7e:	eb 68                	jmp    c001ebe8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001eb80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb84:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb86:	85 c0                	test   eax,eax
c001eb88:	75 4e                	jne    c001ebd8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001eb8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb91:	85 c0                	test   eax,eax
c001eb93:	75 43                	jne    c001ebd8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001eb95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb99:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb9d:	89 10                	mov    DWORD PTR [eax],edx
c001eb9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eba3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eba7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ebaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ebb1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001ebbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebbf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ebc2:	85 c0                	test   eax,eax
c001ebc4:	74 22                	je     c001ebe8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ebc6:	83 ec 0c             	sub    esp,0xc
c001ebc9:	68 ea fd 01 c0       	push   0xc001fdea
c001ebce:	e8 54 1d ff ff       	call   c0010927 <KePanic(char const*)>
c001ebd3:	83 c4 10             	add    esp,0x10
c001ebd6:	eb 10                	jmp    c001ebe8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ebd8:	83 ec 0c             	sub    esp,0xc
c001ebdb:	68 f4 fd 01 c0       	push   0xc001fdf4
c001ebe0:	e8 42 1d ff ff       	call   c0010927 <KePanic(char const*)>
c001ebe5:	83 c4 10             	add    esp,0x10
c001ebe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ebef:	8d 50 01             	lea    edx,[eax+0x1]
c001ebf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebf6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ebf9:	90                   	nop
c001ebfa:	83 c4 0c             	add    esp,0xc
c001ebfd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001ebfe <LinkedList<Device>::LinkedList()>:
c001ebfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec02:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ec08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec0c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ec13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec17:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ec1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec22:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ec28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec2c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ec33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec37:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ec3e:	90                   	nop
c001ec3f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001ec40 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001ec40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec44:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec46:	85 c0                	test   eax,eax
c001ec48:	75 0e                	jne    c001ec58 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001ec4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec51:	85 c0                	test   eax,eax
c001ec53:	75 03                	jne    c001ec58 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001ec55:	b0 01                	mov    al,0x1
c001ec57:	c3                   	ret    
c001ec58:	b0 00                	mov    al,0x0
c001ec5a:	90                   	nop
c001ec5b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001ec5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001ec5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec60:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec62:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001ec64 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001ec64:	83 ec 0c             	sub    esp,0xc
c001ec67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec6b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec6d:	85 c0                	test   eax,eax
c001ec6f:	75 17                	jne    c001ec88 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001ec71:	83 ec 0c             	sub    esp,0xc
c001ec74:	68 00 fe 01 c0       	push   0xc001fe00
c001ec79:	e8 a9 1c ff ff       	call   c0010927 <KePanic(char const*)>
c001ec7e:	83 c4 10             	add    esp,0x10
c001ec81:	e9 96 00 00 00       	jmp    c001ed1c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001ec86:	66 90                	xchg   ax,ax
c001ec88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec8f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ec92:	85 c0                	test   eax,eax
c001ec94:	0f 95 c0             	setne  al
c001ec97:	0f b6 c0             	movzx  eax,al
c001ec9a:	85 c0                	test   eax,eax
c001ec9c:	74 12                	je     c001ecb0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001ec9e:	83 ec 0c             	sub    esp,0xc
c001eca1:	68 4b fe 01 c0       	push   0xc001fe4b
c001eca6:	e8 7c 1c ff ff       	call   c0010927 <KePanic(char const*)>
c001ecab:	83 c4 10             	add    esp,0x10
c001ecae:	66 90                	xchg   ax,ax
c001ecb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecb4:	8b 00                	mov    eax,DWORD PTR [eax]
c001ecb6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ecb9:	85 c0                	test   eax,eax
c001ecbb:	0f 94 c0             	sete   al
c001ecbe:	0f b6 c0             	movzx  eax,al
c001ecc1:	85 c0                	test   eax,eax
c001ecc3:	74 33                	je     c001ecf8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001ecc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecc9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001eccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecd3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ecda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecde:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ece1:	83 f8 01             	cmp    eax,0x1
c001ece4:	74 22                	je     c001ed08 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001ece6:	83 ec 0c             	sub    esp,0xc
c001ece9:	68 24 fe 01 c0       	push   0xc001fe24
c001ecee:	e8 34 1c ff ff       	call   c0010927 <KePanic(char const*)>
c001ecf3:	83 c4 10             	add    esp,0x10
c001ecf6:	eb 10                	jmp    c001ed08 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001ecf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecfc:	8b 00                	mov    eax,DWORD PTR [eax]
c001ecfe:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ed01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed05:	89 10                	mov    DWORD PTR [eax],edx
c001ed07:	90                   	nop
c001ed08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed0c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed0f:	8d 50 ff             	lea    edx,[eax-0x1]
c001ed12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed16:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ed19:	8d 76 00             	lea    esi,[esi+0x0]
c001ed1c:	83 c4 0c             	add    esp,0xc
c001ed1f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001ed20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001ed20:	83 ec 0c             	sub    esp,0xc
c001ed23:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ed28:	75 12                	jne    c001ed3c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001ed2a:	83 ec 0c             	sub    esp,0xc
c001ed2d:	68 c8 fd 01 c0       	push   0xc001fdc8
c001ed32:	e8 f0 1b ff ff       	call   c0010927 <KePanic(char const*)>
c001ed37:	83 c4 10             	add    esp,0x10
c001ed3a:	66 90                	xchg   ax,ax
c001ed3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed40:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed42:	85 c0                	test   eax,eax
c001ed44:	74 36                	je     c001ed7c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001ed46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed4d:	85 c0                	test   eax,eax
c001ed4f:	74 2b                	je     c001ed7c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001ed51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed55:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed58:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed5c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001ed5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed63:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed67:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ed6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed71:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ed78:	eb 6a                	jmp    c001ede4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ed7a:	66 90                	xchg   ax,ax
c001ed7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed80:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed82:	85 c0                	test   eax,eax
c001ed84:	75 4e                	jne    c001edd4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ed86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed8a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed8d:	85 c0                	test   eax,eax
c001ed8f:	75 43                	jne    c001edd4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ed91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed95:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed99:	89 10                	mov    DWORD PTR [eax],edx
c001ed9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed9f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eda3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eda6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edaa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001edad:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001edb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edb8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001edbb:	85 c0                	test   eax,eax
c001edbd:	74 25                	je     c001ede4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001edbf:	83 ec 0c             	sub    esp,0xc
c001edc2:	68 ea fd 01 c0       	push   0xc001fdea
c001edc7:	e8 5b 1b ff ff       	call   c0010927 <KePanic(char const*)>
c001edcc:	83 c4 10             	add    esp,0x10
c001edcf:	eb 13                	jmp    c001ede4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001edd1:	8d 76 00             	lea    esi,[esi+0x0]
c001edd4:	83 ec 0c             	sub    esp,0xc
c001edd7:	68 f4 fd 01 c0       	push   0xc001fdf4
c001eddc:	e8 46 1b ff ff       	call   c0010927 <KePanic(char const*)>
c001ede1:	83 c4 10             	add    esp,0x10
c001ede4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ede8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001edeb:	8d 50 01             	lea    edx,[eax+0x1]
c001edee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edf2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001edf5:	90                   	nop
c001edf6:	83 c4 0c             	add    esp,0xc
c001edf9:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001edfc <ACPI::~ACPI()>:
c001edfc:	83 ec 0c             	sub    esp,0xc
c001edff:	ba e0 0a 02 c0       	mov    edx,0xc0020ae0
c001ee04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee08:	89 10                	mov    DWORD PTR [eax],edx
c001ee0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee0e:	83 ec 0c             	sub    esp,0xc
c001ee11:	50                   	push   eax
c001ee12:	e8 19 cf fe ff       	call   c000bd30 <Device::~Device()>
c001ee17:	83 c4 10             	add    esp,0x10
c001ee1a:	90                   	nop
c001ee1b:	83 c4 0c             	add    esp,0xc
c001ee1e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001ee20 <ACPI::~ACPI()>:
c001ee20:	83 ec 0c             	sub    esp,0xc
c001ee23:	83 ec 0c             	sub    esp,0xc
c001ee26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee2a:	e8 cd ff ff ff       	call   c001edfc <ACPI::~ACPI()>
c001ee2f:	83 c4 10             	add    esp,0x10
c001ee32:	83 ec 08             	sub    esp,0x8
c001ee35:	68 64 12 00 00       	push   0x1264
c001ee3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee3e:	e8 87 ba fe ff       	call   c000a8ca <operator delete(void*, unsigned long)>
c001ee43:	83 c4 10             	add    esp,0x10
c001ee46:	83 c4 0c             	add    esp,0xc
c001ee49:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001ee4c <LinkedList<Device>::~LinkedList()>:
c001ee4c:	90                   	nop
c001ee4d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001ee50 <LinkedList<Device>::isEmpty()>:
c001ee50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee54:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee56:	85 c0                	test   eax,eax
c001ee58:	75 0e                	jne    c001ee68 <LinkedList<Device>::isEmpty()+0x18>
c001ee5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee61:	85 c0                	test   eax,eax
c001ee63:	75 03                	jne    c001ee68 <LinkedList<Device>::isEmpty()+0x18>
c001ee65:	b0 01                	mov    al,0x1
c001ee67:	c3                   	ret    
c001ee68:	b0 00                	mov    al,0x0
c001ee6a:	90                   	nop
c001ee6b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001ee6c <LinkedList<Device>::getFirstElement()>:
c001ee6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee70:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee72:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001ee74 <LinkedList<Device>::removeFirst()>:
c001ee74:	83 ec 0c             	sub    esp,0xc
c001ee77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee7b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee7d:	85 c0                	test   eax,eax
c001ee7f:	75 17                	jne    c001ee98 <LinkedList<Device>::removeFirst()+0x24>
c001ee81:	83 ec 0c             	sub    esp,0xc
c001ee84:	68 00 fe 01 c0       	push   0xc001fe00
c001ee89:	e8 99 1a ff ff       	call   c0010927 <KePanic(char const*)>
c001ee8e:	83 c4 10             	add    esp,0x10
c001ee91:	e9 92 00 00 00       	jmp    c001ef28 <LinkedList<Device>::removeFirst()+0xb4>
c001ee96:	66 90                	xchg   ax,ax
c001ee98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee9f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001eea5:	85 c0                	test   eax,eax
c001eea7:	74 13                	je     c001eebc <LinkedList<Device>::removeFirst()+0x48>
c001eea9:	83 ec 0c             	sub    esp,0xc
c001eeac:	68 4b fe 01 c0       	push   0xc001fe4b
c001eeb1:	e8 71 1a ff ff       	call   c0010927 <KePanic(char const*)>
c001eeb6:	83 c4 10             	add    esp,0x10
c001eeb9:	8d 76 00             	lea    esi,[esi+0x0]
c001eebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eec0:	8b 00                	mov    eax,DWORD PTR [eax]
c001eec2:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001eec8:	85 c0                	test   eax,eax
c001eeca:	75 34                	jne    c001ef00 <LinkedList<Device>::removeFirst()+0x8c>
c001eecc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eed0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001eed6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeda:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eee1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eee5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eee8:	83 f8 01             	cmp    eax,0x1
c001eeeb:	74 27                	je     c001ef14 <LinkedList<Device>::removeFirst()+0xa0>
c001eeed:	83 ec 0c             	sub    esp,0xc
c001eef0:	68 24 fe 01 c0       	push   0xc001fe24
c001eef5:	e8 2d 1a ff ff       	call   c0010927 <KePanic(char const*)>
c001eefa:	83 c4 10             	add    esp,0x10
c001eefd:	eb 15                	jmp    c001ef14 <LinkedList<Device>::removeFirst()+0xa0>
c001eeff:	90                   	nop
c001ef00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef04:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef06:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001ef0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef10:	89 10                	mov    DWORD PTR [eax],edx
c001ef12:	66 90                	xchg   ax,ax
c001ef14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef18:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ef1b:	8d 50 ff             	lea    edx,[eax-0x1]
c001ef1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef22:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ef25:	8d 76 00             	lea    esi,[esi+0x0]
c001ef28:	83 c4 0c             	add    esp,0xc
c001ef2b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001ef2c <CPU::~CPU()>:
c001ef2c:	83 ec 0c             	sub    esp,0xc
c001ef2f:	ba 7c 0c 02 c0       	mov    edx,0xc0020c7c
c001ef34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef38:	89 10                	mov    DWORD PTR [eax],edx
c001ef3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef3e:	83 ec 0c             	sub    esp,0xc
c001ef41:	50                   	push   eax
c001ef42:	e8 e9 cd fe ff       	call   c000bd30 <Device::~Device()>
c001ef47:	83 c4 10             	add    esp,0x10
c001ef4a:	90                   	nop
c001ef4b:	83 c4 0c             	add    esp,0xc
c001ef4e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001ef50 <CPU::~CPU()>:
c001ef50:	83 ec 0c             	sub    esp,0xc
c001ef53:	83 ec 0c             	sub    esp,0xc
c001ef56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef5a:	e8 cd ff ff ff       	call   c001ef2c <CPU::~CPU()>
c001ef5f:	83 c4 10             	add    esp,0x10
c001ef62:	83 ec 08             	sub    esp,0x8
c001ef65:	68 94 11 00 00       	push   0x1194
c001ef6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef6e:	e8 57 b9 fe ff       	call   c000a8ca <operator delete(void*, unsigned long)>
c001ef73:	83 c4 10             	add    esp,0x10
c001ef76:	83 c4 0c             	add    esp,0xc
c001ef79:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001ef7c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001ef7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ef80:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ef83:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001ef84 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001ef84:	90                   	nop
c001ef85:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001ef88 <ThreadControlBlock::ThreadControlBlock()>:
c001ef88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef8c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ef93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef97:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001ef9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efa2:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001efa9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efad:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001efb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efb8:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001efbf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efc3:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001efc7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efcb:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001efcf:	90                   	nop
c001efd0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001efd4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001efd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efd8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001efde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efe2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001efe9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efed:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001eff4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eff8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001effe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f002:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f009:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f00d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f014:	90                   	nop
c001f015:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001f016 <PCI::~PCI()>:
c001f016:	83 ec 0c             	sub    esp,0xc
c001f019:	ba e0 1a 02 c0       	mov    edx,0xc0021ae0
c001f01e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f022:	89 10                	mov    DWORD PTR [eax],edx
c001f024:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f028:	83 ec 0c             	sub    esp,0xc
c001f02b:	50                   	push   eax
c001f02c:	e8 97 c7 fe ff       	call   c000b7c8 <Bus::~Bus()>
c001f031:	83 c4 10             	add    esp,0x10
c001f034:	90                   	nop
c001f035:	83 c4 0c             	add    esp,0xc
c001f038:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001f03a <PCI::~PCI()>:
c001f03a:	83 ec 0c             	sub    esp,0xc
c001f03d:	83 ec 0c             	sub    esp,0xc
c001f040:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f044:	e8 cd ff ff ff       	call   c001f016 <PCI::~PCI()>
c001f049:	83 c4 10             	add    esp,0x10
c001f04c:	83 ec 08             	sub    esp,0x8
c001f04f:	68 5c 01 00 00       	push   0x15c
c001f054:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f058:	e8 6d b8 fe ff       	call   c000a8ca <operator delete(void*, unsigned long)>
c001f05d:	83 c4 10             	add    esp,0x10
c001f060:	83 c4 0c             	add    esp,0xc
c001f063:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001f064 <IDE::~IDE()>:
c001f064:	83 ec 0c             	sub    esp,0xc
c001f067:	ba 94 1b 02 c0       	mov    edx,0xc0021b94
c001f06c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f070:	89 10                	mov    DWORD PTR [eax],edx
c001f072:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f076:	83 ec 0c             	sub    esp,0xc
c001f079:	50                   	push   eax
c001f07a:	e8 29 d1 fe ff       	call   c000c1a8 <HardDiskController::~HardDiskController()>
c001f07f:	83 c4 10             	add    esp,0x10
c001f082:	90                   	nop
c001f083:	83 c4 0c             	add    esp,0xc
c001f086:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001f088 <IDE::~IDE()>:
c001f088:	83 ec 0c             	sub    esp,0xc
c001f08b:	83 ec 0c             	sub    esp,0xc
c001f08e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f092:	e8 cd ff ff ff       	call   c001f064 <IDE::~IDE()>
c001f097:	83 c4 10             	add    esp,0x10
c001f09a:	83 ec 08             	sub    esp,0x8
c001f09d:	68 70 02 00 00       	push   0x270
c001f0a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0a6:	e8 1f b8 fe ff       	call   c000a8ca <operator delete(void*, unsigned long)>
c001f0ab:	83 c4 10             	add    esp,0x10
c001f0ae:	83 c4 0c             	add    esp,0xc
c001f0b1:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001f0b2 <SATABus::~SATABus()>:
c001f0b2:	83 ec 0c             	sub    esp,0xc
c001f0b5:	ba e4 1b 02 c0       	mov    edx,0xc0021be4
c001f0ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0be:	89 10                	mov    DWORD PTR [eax],edx
c001f0c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0c4:	83 ec 0c             	sub    esp,0xc
c001f0c7:	50                   	push   eax
c001f0c8:	e8 db d0 fe ff       	call   c000c1a8 <HardDiskController::~HardDiskController()>
c001f0cd:	83 c4 10             	add    esp,0x10
c001f0d0:	90                   	nop
c001f0d1:	83 c4 0c             	add    esp,0xc
c001f0d4:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001f0d6 <SATABus::~SATABus()>:
c001f0d6:	83 ec 0c             	sub    esp,0xc
c001f0d9:	83 ec 0c             	sub    esp,0xc
c001f0dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0e0:	e8 cd ff ff ff       	call   c001f0b2 <SATABus::~SATABus()>
c001f0e5:	83 c4 10             	add    esp,0x10
c001f0e8:	83 ec 08             	sub    esp,0x8
c001f0eb:	68 64 01 00 00       	push   0x164
c001f0f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0f4:	e8 d1 b7 fe ff       	call   c000a8ca <operator delete(void*, unsigned long)>
c001f0f9:	83 c4 10             	add    esp,0x10
c001f0fc:	83 c4 0c             	add    esp,0xc
c001f0ff:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001f100 <ATA::~ATA()>:
c001f100:	83 ec 0c             	sub    esp,0xc
c001f103:	ba 24 1c 02 c0       	mov    edx,0xc0021c24
c001f108:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f10c:	89 10                	mov    DWORD PTR [eax],edx
c001f10e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f112:	83 ec 0c             	sub    esp,0xc
c001f115:	50                   	push   eax
c001f116:	e8 6f d1 fe ff       	call   c000c28a <PhysicalDisk::~PhysicalDisk()>
c001f11b:	83 c4 10             	add    esp,0x10
c001f11e:	90                   	nop
c001f11f:	83 c4 0c             	add    esp,0xc
c001f122:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001f124 <ATA::~ATA()>:
c001f124:	83 ec 0c             	sub    esp,0xc
c001f127:	83 ec 0c             	sub    esp,0xc
c001f12a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f12e:	e8 cd ff ff ff       	call   c001f100 <ATA::~ATA()>
c001f133:	83 c4 10             	add    esp,0x10
c001f136:	83 ec 08             	sub    esp,0x8
c001f139:	68 7c 01 00 00       	push   0x17c
c001f13e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f142:	e8 83 b7 fe ff       	call   c000a8ca <operator delete(void*, unsigned long)>
c001f147:	83 c4 10             	add    esp,0x10
c001f14a:	83 c4 0c             	add    esp,0xc
c001f14d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001f14e <ATAPI::~ATAPI()>:
c001f14e:	83 ec 0c             	sub    esp,0xc
c001f151:	ba 6c 1c 02 c0       	mov    edx,0xc0021c6c
c001f156:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f15a:	89 10                	mov    DWORD PTR [eax],edx
c001f15c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f160:	83 ec 0c             	sub    esp,0xc
c001f163:	50                   	push   eax
c001f164:	e8 21 d1 fe ff       	call   c000c28a <PhysicalDisk::~PhysicalDisk()>
c001f169:	83 c4 10             	add    esp,0x10
c001f16c:	90                   	nop
c001f16d:	83 c4 0c             	add    esp,0xc
c001f170:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001f172 <ATAPI::~ATAPI()>:
c001f172:	83 ec 0c             	sub    esp,0xc
c001f175:	83 ec 0c             	sub    esp,0xc
c001f178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f17c:	e8 cd ff ff ff       	call   c001f14e <ATAPI::~ATAPI()>
c001f181:	83 c4 10             	add    esp,0x10
c001f184:	83 ec 08             	sub    esp,0x8
c001f187:	68 84 01 00 00       	push   0x184
c001f18c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f190:	e8 35 b7 fe ff       	call   c000a8ca <operator delete(void*, unsigned long)>
c001f195:	83 c4 10             	add    esp,0x10
c001f198:	83 c4 0c             	add    esp,0xc
c001f19b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001f19c <SATA::~SATA()>:
c001f19c:	83 ec 0c             	sub    esp,0xc
c001f19f:	ba 20 1d 02 c0       	mov    edx,0xc0021d20
c001f1a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1a8:	89 10                	mov    DWORD PTR [eax],edx
c001f1aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1ae:	83 ec 0c             	sub    esp,0xc
c001f1b1:	50                   	push   eax
c001f1b2:	e8 d3 d0 fe ff       	call   c000c28a <PhysicalDisk::~PhysicalDisk()>
c001f1b7:	83 c4 10             	add    esp,0x10
c001f1ba:	90                   	nop
c001f1bb:	83 c4 0c             	add    esp,0xc
c001f1be:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001f1c0 <SATA::~SATA()>:
c001f1c0:	83 ec 0c             	sub    esp,0xc
c001f1c3:	83 ec 0c             	sub    esp,0xc
c001f1c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1ca:	e8 cd ff ff ff       	call   c001f19c <SATA::~SATA()>
c001f1cf:	83 c4 10             	add    esp,0x10
c001f1d2:	83 ec 08             	sub    esp,0x8
c001f1d5:	68 7c 01 00 00       	push   0x17c
c001f1da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1de:	e8 e7 b6 fe ff       	call   c000a8ca <operator delete(void*, unsigned long)>
c001f1e3:	83 c4 10             	add    esp,0x10
c001f1e6:	83 c4 0c             	add    esp,0xc
c001f1e9:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001f1ea <SATAPI::~SATAPI()>:
c001f1ea:	83 ec 0c             	sub    esp,0xc
c001f1ed:	ba 44 1e 02 c0       	mov    edx,0xc0021e44
c001f1f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1f6:	89 10                	mov    DWORD PTR [eax],edx
c001f1f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1fc:	83 ec 0c             	sub    esp,0xc
c001f1ff:	50                   	push   eax
c001f200:	e8 85 d0 fe ff       	call   c000c28a <PhysicalDisk::~PhysicalDisk()>
c001f205:	83 c4 10             	add    esp,0x10
c001f208:	90                   	nop
c001f209:	83 c4 0c             	add    esp,0xc
c001f20c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001f20e <SATAPI::~SATAPI()>:
c001f20e:	83 ec 0c             	sub    esp,0xc
c001f211:	83 ec 0c             	sub    esp,0xc
c001f214:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f218:	e8 cd ff ff ff       	call   c001f1ea <SATAPI::~SATAPI()>
c001f21d:	83 c4 10             	add    esp,0x10
c001f220:	83 ec 08             	sub    esp,0x8
c001f223:	68 84 01 00 00       	push   0x184
c001f228:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f22c:	e8 99 b6 fe ff       	call   c000a8ca <operator delete(void*, unsigned long)>
c001f231:	83 c4 10             	add    esp,0x10
c001f234:	83 c4 0c             	add    esp,0xc
c001f237:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001f238 <IOAPIC::~IOAPIC()>:
c001f238:	83 ec 0c             	sub    esp,0xc
c001f23b:	ba 84 1e 02 c0       	mov    edx,0xc0021e84
c001f240:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f244:	89 10                	mov    DWORD PTR [eax],edx
c001f246:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f24a:	83 ec 0c             	sub    esp,0xc
c001f24d:	50                   	push   eax
c001f24e:	e8 dd ca fe ff       	call   c000bd30 <Device::~Device()>
c001f253:	83 c4 10             	add    esp,0x10
c001f256:	90                   	nop
c001f257:	83 c4 0c             	add    esp,0xc
c001f25a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001f25c <IOAPIC::~IOAPIC()>:
c001f25c:	83 ec 0c             	sub    esp,0xc
c001f25f:	83 ec 0c             	sub    esp,0xc
c001f262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f266:	e8 cd ff ff ff       	call   c001f238 <IOAPIC::~IOAPIC()>
c001f26b:	83 c4 10             	add    esp,0x10
c001f26e:	83 ec 08             	sub    esp,0x8
c001f271:	68 68 01 00 00       	push   0x168
c001f276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f27a:	e8 4b b6 fe ff       	call   c000a8ca <operator delete(void*, unsigned long)>
c001f27f:	83 c4 10             	add    esp,0x10
c001f282:	83 c4 0c             	add    esp,0xc
c001f285:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001f288 <APICTimer::~APICTimer()>:
c001f288:	83 ec 0c             	sub    esp,0xc
c001f28b:	ba cc 1e 02 c0       	mov    edx,0xc0021ecc
c001f290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f294:	89 10                	mov    DWORD PTR [eax],edx
c001f296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f29a:	83 ec 0c             	sub    esp,0xc
c001f29d:	50                   	push   eax
c001f29e:	e8 59 e5 fe ff       	call   c000d7fc <Timer::~Timer()>
c001f2a3:	83 c4 10             	add    esp,0x10
c001f2a6:	90                   	nop
c001f2a7:	83 c4 0c             	add    esp,0xc
c001f2aa:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001f2ac <APICTimer::~APICTimer()>:
c001f2ac:	83 ec 0c             	sub    esp,0xc
c001f2af:	83 ec 0c             	sub    esp,0xc
c001f2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2b6:	e8 cd ff ff ff       	call   c001f288 <APICTimer::~APICTimer()>
c001f2bb:	83 c4 10             	add    esp,0x10
c001f2be:	83 ec 08             	sub    esp,0x8
c001f2c1:	68 60 01 00 00       	push   0x160
c001f2c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2ca:	e8 fb b5 fe ff       	call   c000a8ca <operator delete(void*, unsigned long)>
c001f2cf:	83 c4 10             	add    esp,0x10
c001f2d2:	83 c4 0c             	add    esp,0xc
c001f2d5:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001f2d8 <PIT::~PIT()>:
c001f2d8:	83 ec 0c             	sub    esp,0xc
c001f2db:	ba 1c 1f 02 c0       	mov    edx,0xc0021f1c
c001f2e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2e4:	89 10                	mov    DWORD PTR [eax],edx
c001f2e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2ea:	83 ec 0c             	sub    esp,0xc
c001f2ed:	50                   	push   eax
c001f2ee:	e8 09 e5 fe ff       	call   c000d7fc <Timer::~Timer()>
c001f2f3:	83 c4 10             	add    esp,0x10
c001f2f6:	90                   	nop
c001f2f7:	83 c4 0c             	add    esp,0xc
c001f2fa:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001f2fc <PIT::~PIT()>:
c001f2fc:	83 ec 0c             	sub    esp,0xc
c001f2ff:	83 ec 0c             	sub    esp,0xc
c001f302:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f306:	e8 cd ff ff ff       	call   c001f2d8 <PIT::~PIT()>
c001f30b:	83 c4 10             	add    esp,0x10
c001f30e:	83 ec 08             	sub    esp,0x8
c001f311:	68 5c 01 00 00       	push   0x15c
c001f316:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f31a:	e8 ab b5 fe ff       	call   c000a8ca <operator delete(void*, unsigned long)>
c001f31f:	83 c4 10             	add    esp,0x10
c001f322:	83 c4 0c             	add    esp,0xc
c001f325:	c3                   	ret    

Disassembly of section userkernel:

c0023000 <KiDefaultSignalHandlerAbort(int)>:
c0023000:	57                   	push   edi
c0023001:	b9 07 00 00 00       	mov    ecx,0x7
c0023006:	56                   	push   esi
c0023007:	be 6d 0d 02 c0       	mov    esi,0xc0020d6d
c002300c:	83 ec 24             	sub    esp,0x24
c002300f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023013:	fc                   	cld    
c0023014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002301a:	50                   	push   eax
c002301b:	6a 00                	push   0x0
c002301d:	6a 38                	push   0x38
c002301f:	6a 01                	push   0x1
c0023021:	e8 2c 00 00 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0023026:	83 c4 34             	add    esp,0x34
c0023029:	5e                   	pop    esi
c002302a:	5f                   	pop    edi
c002302b:	c3                   	ret    

c002302c <KiDefaultSignalHandlerTerminate(int)>:
c002302c:	57                   	push   edi
c002302d:	b9 08 00 00 00       	mov    ecx,0x8
c0023032:	56                   	push   esi
c0023033:	be 89 0d 02 c0       	mov    esi,0xc0020d89
c0023038:	83 ec 24             	sub    esp,0x24
c002303b:	89 e7                	mov    edi,esp
c002303d:	fc                   	cld    
c002303e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023040:	54                   	push   esp
c0023041:	6a 00                	push   0x0
c0023043:	6a 37                	push   0x37
c0023045:	6a 01                	push   0x1
c0023047:	e8 06 00 00 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002304c:	83 c4 34             	add    esp,0x34
c002304f:	5e                   	pop    esi
c0023050:	5f                   	pop    edi
c0023051:	c3                   	ret    

c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0023052:	53                   	push   ebx
c0023053:	83 ec 10             	sub    esp,0x10
c0023056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002305a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002305e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0023066:	cd 60                	int    0x60
c0023068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002306c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0023074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023078:	83 c4 10             	add    esp,0x10
c002307b:	5b                   	pop    ebx
c002307c:	c3                   	ret    

Disassembly of section align_previous:

c0024000 <DO_NOT_DELETE()>:
c0024000:	c3                   	ret    
